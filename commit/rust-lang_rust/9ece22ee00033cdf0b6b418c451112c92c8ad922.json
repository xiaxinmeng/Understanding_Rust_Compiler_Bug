{"sha": "9ece22ee00033cdf0b6b418c451112c92c8ad922", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllY2UyMmVlMDAwMzNjZGYwYjZiNDE4YzQ1MTExMmM5MmM4YWQ5MjI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-02T19:04:58Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-03T02:50:23Z"}, "message": "Test fixes and rebase conflicts", "tree": {"sha": "bccd460a861e61f758d2d459cb9da02b1ad8792b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bccd460a861e61f758d2d459cb9da02b1ad8792b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ece22ee00033cdf0b6b418c451112c92c8ad922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ece22ee00033cdf0b6b418c451112c92c8ad922", "html_url": "https://github.com/rust-lang/rust/commit/9ece22ee00033cdf0b6b418c451112c92c8ad922", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ece22ee00033cdf0b6b418c451112c92c8ad922/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fea07cfd3f29161451e3c3b35b17b340e5014b5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fea07cfd3f29161451e3c3b35b17b340e5014b5c", "html_url": "https://github.com/rust-lang/rust/commit/fea07cfd3f29161451e3c3b35b17b340e5014b5c"}], "stats": {"total": 74, "additions": 50, "deletions": 24}, "files": [{"sha": "078eb7bba20a45924d5841f1a7d07c84c7640892", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=9ece22ee00033cdf0b6b418c451112c92c8ad922", "patch": "@@ -11,7 +11,7 @@\n use common::Config;\n \n #[cfg(target_os = \"windows\")]\n-use std::os::getenv;\n+use std::env;\n \n /// Conversion table from triple OS name to Rust SYSNAME\n static OS_TABLE: &'static [(&'static str, &'static str)] = &[\n@@ -40,11 +40,11 @@ pub fn make_new_path(path: &str) -> String {\n \n     // Windows just uses PATH as the library search path, so we have to\n     // maintain the current value while adding our own\n-    match getenv(lib_path_env_var()) {\n-      Some(curr) => {\n+    match env::var_string(lib_path_env_var()) {\n+      Ok(curr) => {\n         format!(\"{}{}{}\", path, path_div(), curr)\n       }\n-      None => path.to_string()\n+      Err(..) => path.to_string()\n     }\n }\n "}, {"sha": "c82d8c531d243e9624fd60b85f9f95a726fbf67b", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=9ece22ee00033cdf0b6b418c451112c92c8ad922", "patch": "@@ -267,7 +267,7 @@ pub struct RefCell<T> {\n }\n \n /// An enumeration of values returned from the `state` method on a `RefCell<T>`.\n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n #[unstable(feature = \"std_misc\")]\n pub enum BorrowState {\n     /// The cell is currently being read, there is at least one active `borrow`."}, {"sha": "28e0247f00a2557ef1a6e28435b70d246db031aa", "filename": "src/libcore/char.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=9ece22ee00033cdf0b6b418c451112c92c8ad922", "patch": "@@ -115,7 +115,7 @@ pub fn from_u32(i: u32) -> Option<char> {\n ///\n /// let c = char::from_digit(4, 10);\n ///\n-/// assert_eq!(c, '4')\n+/// assert_eq!(c, Some('4'));\n /// ```\n #[inline]\n #[unstable(feature = \"core\", reason = \"pending integer conventions\")]\n@@ -183,9 +183,9 @@ pub trait CharExt {\n     /// ```\n     /// let c = '1';\n     ///\n-    /// assert_eq!(1, c.to_digit(10));\n+    /// assert_eq!(c.to_digit(10), Some(1));\n     ///\n-    /// assert_eq!(15, 'f'.to_digit(16));\n+    /// assert_eq!('f'.to_digit(16), Some(15));\n     /// ```\n     #[unstable(feature = \"core\",\n                reason = \"pending integer conventions\")]\n@@ -260,7 +260,7 @@ pub trait CharExt {\n     /// ```\n     /// let quote: String = '\"'.escape_default().collect();\n     ///\n-    /// assert_eq!(quote, r\"\\\"\");\n+    /// assert_eq!(quote, \"\\\\\\\"\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn escape_default(self) -> EscapeDefault;"}, {"sha": "b3f3796294580b1b1b8358be300672a8a318cf45", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=9ece22ee00033cdf0b6b418c451112c92c8ad922", "patch": "@@ -116,8 +116,7 @@ pub fn chdir(p: &Path) -> IoResult<()> {\n }\n \n pub struct SplitPaths<'a> {\n-    iter: iter::Map<&'a [u8], Path,\n-                    slice::Split<'a, u8, fn(&u8) -> bool>,\n+    iter: iter::Map<slice::Split<'a, u8, fn(&u8) -> bool>,\n                     fn(&'a [u8]) -> Path>,\n }\n \n@@ -450,7 +449,16 @@ pub fn temp_dir() -> Path {\n }\n \n pub fn home_dir() -> Option<Path> {\n-    getenv(\"HOME\".as_os_str()).or_else(|| unsafe {\n+    return getenv(\"HOME\".as_os_str()).or_else(|| unsafe {\n+        fallback()\n+    }).map(|os| {\n+        Path::new(os.into_vec())\n+    });\n+\n+    #[cfg(target_os = \"android\")]\n+    unsafe fn fallback() -> Option<OsString> { None }\n+    #[cfg(not(target_os = \"android\"))]\n+    unsafe fn fallback() -> Option<OsString> {\n         let mut amt = match libc::sysconf(c::_SC_GETPW_R_SIZE_MAX) {\n             n if n < 0 => 512 as usize,\n             n => n as usize,\n@@ -470,7 +478,5 @@ pub fn home_dir() -> Option<Path> {\n             let bytes = ffi::c_str_to_bytes(&ptr).to_vec();\n             return Some(OsStringExt::from_vec(bytes))\n         }\n-    }).map(|os| {\n-        Path::new(os.into_vec())\n-    })\n+    }\n }"}, {"sha": "c8003bb9581fbdc0302389afea4316684f3cf7e9", "filename": "src/rustllvm/llvm-auto-clean-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Frustllvm%2Fllvm-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Frustllvm%2Fllvm-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-auto-clean-trigger?ref=9ece22ee00033cdf0b6b418c451112c92c8ad922", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be forcibly cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2015-01-30\n+2015-02-02"}, {"sha": "45b7bebfc281e904465d3d7174b09d98cfcb4731", "filename": "src/test/compile-fail/issue-2149.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs?ref=9ece22ee00033cdf0b6b418c451112c92c8ad922", "patch": "@@ -16,7 +16,7 @@ impl<A> vec_monad<A> for Vec<A> {\n     fn bind<B, F>(&self, mut f: F) where F: FnMut(A) -> Vec<B> {\n         let mut r = panic!();\n         for elt in self { r = r + f(*elt); }\n-        //~^ ERROR the type of this value must be known\n+        //~^ ERROR binary operation `+` cannot be applied to type `collections::vec::Vec<B>`\n    }\n }\n fn main() {"}, {"sha": "afd1a3933bf853306eb774f730af6d23d95d520b", "filename": "src/test/compile-fail/lint-unknown-feature-default.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Ftest%2Fcompile-fail%2Flint-unknown-feature-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Ftest%2Fcompile-fail%2Flint-unknown-feature-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unknown-feature-default.rs?ref=9ece22ee00033cdf0b6b418c451112c92c8ad922", "patch": "@@ -10,6 +10,8 @@\n \n // Tests the default for the unused_features lint\n \n+#![deny(warnings)]\n+\n #![feature(this_is_not_a_feature)] //~ ERROR: unused or unknown feature\n \n fn main() { }"}, {"sha": "524fd01b94c518e623eddfaf094a8d2d37c28c1b", "filename": "src/test/compile-fail/use-as-where-use-ends-with-mod-sep.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Ftest%2Fcompile-fail%2Fuse-as-where-use-ends-with-mod-sep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Ftest%2Fcompile-fail%2Fuse-as-where-use-ends-with-mod-sep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-as-where-use-ends-with-mod-sep.rs?ref=9ece22ee00033cdf0b6b418c451112c92c8ad922", "patch": "@@ -8,4 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::any:: as foo; //~ ERROR expected identifier or `{` or `*`, found `as`\n+use std::any:: as foo; //~ ERROR expected identifier, found keyword `as`\n+//~^ ERROR: expected one of `::`, `;`, or `as`, found `foo`"}, {"sha": "a8b551b5376c9647a2ba5a64f43efafb0f5cf852", "filename": "src/test/compile-fail/use-mod-4.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Ftest%2Fcompile-fail%2Fuse-mod-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Ftest%2Fcompile-fail%2Fuse-mod-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-mod-4.rs?ref=9ece22ee00033cdf0b6b418c451112c92c8ad922", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use foo::self;\n+//~^ ERROR expected identifier, found keyword `self`\n+\n+fn main() {}\n+"}, {"sha": "15640e386dfa0c968f613dfe386615fddf77e0db", "filename": "src/test/compile-fail/use-mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Ftest%2Fcompile-fail%2Fuse-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Ftest%2Fcompile-fail%2Fuse-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-mod.rs?ref=9ece22ee00033cdf0b6b418c451112c92c8ad922", "patch": "@@ -19,9 +19,6 @@ use foo::bar::{\n use {self};\n //~^ ERROR `self` import can only appear in an import list with a non-empty prefix\n \n-use foo::self;\n-//~^ ERROR `self` imports are only allowed within a { } list\n-\n mod foo {\n     pub mod bar {\n         pub struct Bar;"}, {"sha": "23c422bc7a7fecc2221cc88d6e9a1de0dda7237c", "filename": "src/test/run-make/tools.mk", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Ftest%2Frun-make%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Ftest%2Frun-make%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftools.mk?ref=9ece22ee00033cdf0b6b418c451112c92c8ad922", "patch": "@@ -53,14 +53,15 @@ endif\n \n # Extra flags needed to compile a working executable with the standard library\n ifdef IS_WINDOWS\n-\tEXTRACFLAGS := -lws2_32\n+\tEXTRACFLAGS := -lws2_32 -luserenv\n else\n ifeq ($(shell uname),Darwin)\n else\n ifeq ($(shell uname),FreeBSD)\n \tEXTRACFLAGS := -lm -lpthread -lgcc_s\n+else\n ifeq ($(shell uname),OpenBSD)\n-\tEXTRACFLAGS := -lm -lpthread\t\n+\tEXTRACFLAGS := -lm -lpthread\n else\n \tEXTRACFLAGS := -lm -lrt -ldl -lpthread\n endif"}, {"sha": "0e1ab73c02d088ff73e275d7dd42998778e952d7", "filename": "src/test/run-pass/env-home-dir.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ece22ee00033cdf0b6b418c451112c92c8ad922/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs?ref=9ece22ee00033cdf0b6b418c451112c92c8ad922", "patch": "@@ -18,7 +18,11 @@ fn main() {\n     assert!(home_dir() == Some(Path::new(\"/home/MountainView\")));\n \n     remove_var(\"HOME\");\n-    assert!(home_dir().is_some());\n+    if cfg!(target_os = \"android\") {\n+        assert!(home_dir().is_none());\n+    } else {\n+        assert!(home_dir().is_some());\n+    }\n }\n \n #[cfg(windows)]"}]}