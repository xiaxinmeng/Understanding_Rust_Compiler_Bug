{"sha": "675f114d952df8be61ac74ebeac7550049f26ccd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NWYxMTRkOTUyZGY4YmU2MWFjNzRlYmVhYzc1NTAwNDlmMjZjY2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-18T23:44:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-18T23:44:54Z"}, "message": "Auto merge of #79106 - tmiasko:inline-hint, r=nagisa,eddyb\n\nFix setting inline hint based on `InstanceDef::requires_inline`\n\nFor instances where `InstanceDef::requires_inline` is true, an attempt\nis made to set an inline hint though a call to the `inline` function.\nThe attempt is ineffective, since all attributes will be usually removed\nby the second call.\n\nFix the issue by applying the attributes only once, with user provided\nattributes having a priority when provided.\n\nCloses #79108.", "tree": {"sha": "844da8e1d39585224d782e09f3947488eaf2639d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/844da8e1d39585224d782e09f3947488eaf2639d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/675f114d952df8be61ac74ebeac7550049f26ccd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/675f114d952df8be61ac74ebeac7550049f26ccd", "html_url": "https://github.com/rust-lang/rust/commit/675f114d952df8be61ac74ebeac7550049f26ccd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/675f114d952df8be61ac74ebeac7550049f26ccd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8256379832b5ecb7f71e8c5e2018446482223c12", "url": "https://api.github.com/repos/rust-lang/rust/commits/8256379832b5ecb7f71e8c5e2018446482223c12", "html_url": "https://github.com/rust-lang/rust/commit/8256379832b5ecb7f71e8c5e2018446482223c12"}, {"sha": "4ea25da237d75efc69d15824f6e04e2599420c38", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ea25da237d75efc69d15824f6e04e2599420c38", "html_url": "https://github.com/rust-lang/rust/commit/4ea25da237d75efc69d15824f6e04e2599420c38"}], "stats": {"total": 47, "additions": 35, "deletions": 12}, "files": [{"sha": "9a2fbf359ea127d71d1ae4fd0c761de053dbfb75", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/675f114d952df8be61ac74ebeac7550049f26ccd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675f114d952df8be61ac74ebeac7550049f26ccd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=675f114d952df8be61ac74ebeac7550049f26ccd", "patch": "@@ -25,7 +25,7 @@ use crate::value::Value;\n \n /// Mark LLVM function to use provided inline heuristic.\n #[inline]\n-fn inline(cx: &CodegenCx<'ll, '_>, val: &'ll Value, inline: InlineAttr) {\n+fn inline(cx: &CodegenCx<'ll, '_>, val: &'ll Value, inline: InlineAttr, requires_inline: bool) {\n     use self::InlineAttr::*;\n     match inline {\n         Hint => Attribute::InlineHint.apply_llfn(Function, val),\n@@ -35,11 +35,8 @@ fn inline(cx: &CodegenCx<'ll, '_>, val: &'ll Value, inline: InlineAttr) {\n                 Attribute::NoInline.apply_llfn(Function, val);\n             }\n         }\n-        None => {\n-            Attribute::InlineHint.unapply_llfn(Function, val);\n-            Attribute::AlwaysInline.unapply_llfn(Function, val);\n-            Attribute::NoInline.unapply_llfn(Function, val);\n-        }\n+        None if requires_inline => Attribute::InlineHint.apply_llfn(Function, val),\n+        None => {}\n     };\n }\n \n@@ -229,12 +226,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n         }\n     }\n \n-    // FIXME(eddyb) consolidate these two `inline` calls (and avoid overwrites).\n-    if instance.def.requires_inline(cx.tcx) {\n-        inline(cx, llfn, attributes::InlineAttr::Hint);\n-    }\n-\n-    inline(cx, llfn, codegen_fn_attrs.inline.clone());\n+    inline(cx, llfn, codegen_fn_attrs.inline.clone(), instance.def.requires_inline(cx.tcx));\n \n     // The `uwtable` attribute according to LLVM is:\n     //"}, {"sha": "a2571c2e532a73f80777b2a609546fb3ba4f9d16", "filename": "src/test/codegen/inline-hint.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/675f114d952df8be61ac74ebeac7550049f26ccd/src%2Ftest%2Fcodegen%2Finline-hint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675f114d952df8be61ac74ebeac7550049f26ccd/src%2Ftest%2Fcodegen%2Finline-hint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Finline-hint.rs?ref=675f114d952df8be61ac74ebeac7550049f26ccd", "patch": "@@ -0,0 +1,31 @@\n+// Checks that closures, constructors, and shims except\n+// for a drop glue receive inline hint by default.\n+//\n+// compile-flags: -Cno-prepopulate-passes -Zsymbol-mangling-version=v0\n+#![crate_type = \"lib\"]\n+\n+pub fn f() {\n+    let a = A;\n+    let b = (0i32, 1i32, 2i32, 3i32);\n+    let c = || {};\n+\n+    a(String::new(), String::new());\n+    b.clone();\n+    c();\n+}\n+\n+struct A(String, String);\n+\n+// CHECK:      ; core::ptr::drop_in_place::<inline_hint::A>\n+// CHECK-NEXT: ; Function Attrs:\n+// CHECK-NOT:  inlinehint\n+// CHECK-SAME: {{$}}\n+\n+// CHECK:      ; <(i32, i32, i32, i32) as core::clone::Clone>::clone\n+// CHECK-NEXT: ; Function Attrs: inlinehint\n+\n+// CHECK:      ; inline_hint::f::{closure#0}\n+// CHECK-NEXT: ; Function Attrs: inlinehint\n+\n+// CHECK:      ; inline_hint::A\n+// CHECK-NEXT: ; Function Attrs: inlinehint"}]}