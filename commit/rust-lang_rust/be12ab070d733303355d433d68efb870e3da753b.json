{"sha": "be12ab070d733303355d433d68efb870e3da753b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMTJhYjA3MGQ3MzMzMDMzNTVkNDMzZDY4ZWZiODcwZTNkYTc1M2I=", "commit": {"author": {"name": "Matthias Geier", "email": "Matthias.Geier@gmail.com", "date": "2019-04-26T16:43:24Z"}, "committer": {"name": "Matthias Geier", "email": "Matthias.Geier@gmail.com", "date": "2019-04-26T16:43:24Z"}, "message": "Use \"capacity\" as parameter name in with_capacity() methods\n\nCloses #60271.", "tree": {"sha": "fd51d36784bd5991bd637631fca0cfb7fa50398b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd51d36784bd5991bd637631fca0cfb7fa50398b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be12ab070d733303355d433d68efb870e3da753b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be12ab070d733303355d433d68efb870e3da753b", "html_url": "https://github.com/rust-lang/rust/commit/be12ab070d733303355d433d68efb870e3da753b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be12ab070d733303355d433d68efb870e3da753b/comments", "author": {"login": "mgeier", "id": 705404, "node_id": "MDQ6VXNlcjcwNTQwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/705404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgeier", "html_url": "https://github.com/mgeier", "followers_url": "https://api.github.com/users/mgeier/followers", "following_url": "https://api.github.com/users/mgeier/following{/other_user}", "gists_url": "https://api.github.com/users/mgeier/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgeier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgeier/subscriptions", "organizations_url": "https://api.github.com/users/mgeier/orgs", "repos_url": "https://api.github.com/users/mgeier/repos", "events_url": "https://api.github.com/users/mgeier/events{/privacy}", "received_events_url": "https://api.github.com/users/mgeier/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mgeier", "id": 705404, "node_id": "MDQ6VXNlcjcwNTQwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/705404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgeier", "html_url": "https://github.com/mgeier", "followers_url": "https://api.github.com/users/mgeier/followers", "following_url": "https://api.github.com/users/mgeier/following{/other_user}", "gists_url": "https://api.github.com/users/mgeier/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgeier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgeier/subscriptions", "organizations_url": "https://api.github.com/users/mgeier/orgs", "repos_url": "https://api.github.com/users/mgeier/repos", "events_url": "https://api.github.com/users/mgeier/events{/privacy}", "received_events_url": "https://api.github.com/users/mgeier/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "597f432489f12a3f33419daa039ccef11a12c4fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/597f432489f12a3f33419daa039ccef11a12c4fd", "html_url": "https://github.com/rust-lang/rust/commit/597f432489f12a3f33419daa039ccef11a12c4fd"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "d65c24f7350ae30766dfff3cfa5de9c10bd90243", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be12ab070d733303355d433d68efb870e3da753b/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be12ab070d733303355d433d68efb870e3da753b/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=be12ab070d733303355d433d68efb870e3da753b", "patch": "@@ -369,7 +369,7 @@ impl<T> VecDeque<T> {\n         VecDeque::with_capacity(INITIAL_CAPACITY)\n     }\n \n-    /// Creates an empty `VecDeque` with space for at least `n` elements.\n+    /// Creates an empty `VecDeque` with space for at least `capacity` elements.\n     ///\n     /// # Examples\n     ///\n@@ -379,10 +379,10 @@ impl<T> VecDeque<T> {\n     /// let vector: VecDeque<u32> = VecDeque::with_capacity(10);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn with_capacity(n: usize) -> VecDeque<T> {\n+    pub fn with_capacity(capacity: usize) -> VecDeque<T> {\n         // +1 since the ringbuffer always leaves one space empty\n-        let cap = cmp::max(n + 1, MINIMUM_CAPACITY + 1).next_power_of_two();\n-        assert!(cap > n, \"capacity overflow\");\n+        let cap = cmp::max(capacity + 1, MINIMUM_CAPACITY + 1).next_power_of_two();\n+        assert!(cap > capacity, \"capacity overflow\");\n \n         VecDeque {\n             tail: 0,"}, {"sha": "ec7ff3bd813975d835d00e20295bc634c6ec2cb3", "filename": "src/librustc_data_structures/bit_set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be12ab070d733303355d433d68efb870e3da753b/src%2Flibrustc_data_structures%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be12ab070d733303355d433d68efb870e3da753b/src%2Flibrustc_data_structures%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbit_set.rs?ref=be12ab070d733303355d433d68efb870e3da753b", "patch": "@@ -607,8 +607,8 @@ impl<T: Idx> GrowableBitSet<T> {\n         GrowableBitSet { bit_set: BitSet::new_empty(0) }\n     }\n \n-    pub fn with_capacity(bits: usize) -> GrowableBitSet<T> {\n-        GrowableBitSet { bit_set: BitSet::new_empty(bits) }\n+    pub fn with_capacity(capacity: usize) -> GrowableBitSet<T> {\n+        GrowableBitSet { bit_set: BitSet::new_empty(capacity) }\n     }\n \n     /// Returns `true` if the set has changed."}, {"sha": "e6c8e26fa92d8ed5ae7b47e39429a2bf4e0aaf1f", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/be12ab070d733303355d433d68efb870e3da753b/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be12ab070d733303355d433d68efb870e3da753b/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=be12ab070d733303355d433d68efb870e3da753b", "patch": "@@ -92,10 +92,10 @@ impl<R: Read> BufReader<R> {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn with_capacity(cap: usize, inner: R) -> BufReader<R> {\n+    pub fn with_capacity(capacity: usize, inner: R) -> BufReader<R> {\n         unsafe {\n-            let mut buffer = Vec::with_capacity(cap);\n-            buffer.set_len(cap);\n+            let mut buffer = Vec::with_capacity(capacity);\n+            buffer.set_len(capacity);\n             inner.initializer().initialize(&mut buffer);\n             BufReader {\n                 inner,\n@@ -477,10 +477,10 @@ impl<W: Write> BufWriter<W> {\n     /// let mut buffer = BufWriter::with_capacity(100, stream);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn with_capacity(cap: usize, inner: W) -> BufWriter<W> {\n+    pub fn with_capacity(capacity: usize, inner: W) -> BufWriter<W> {\n         BufWriter {\n             inner: Some(inner),\n-            buf: Vec::with_capacity(cap),\n+            buf: Vec::with_capacity(capacity),\n             panicked: false,\n         }\n     }\n@@ -851,9 +851,9 @@ impl<W: Write> LineWriter<W> {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn with_capacity(cap: usize, inner: W) -> LineWriter<W> {\n+    pub fn with_capacity(capacity: usize, inner: W) -> LineWriter<W> {\n         LineWriter {\n-            inner: BufWriter::with_capacity(cap, inner),\n+            inner: BufWriter::with_capacity(capacity, inner),\n             need_flush: false,\n         }\n     }"}, {"sha": "81e606fc16583bc8f11cc84a62363beaea8da887", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be12ab070d733303355d433d68efb870e3da753b/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be12ab070d733303355d433d68efb870e3da753b/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=be12ab070d733303355d433d68efb870e3da753b", "patch": "@@ -146,10 +146,10 @@ impl Wtf8Buf {\n         Wtf8Buf { bytes: Vec::new() }\n     }\n \n-    /// Creates a new, empty WTF-8 string with pre-allocated capacity for `n` bytes.\n+    /// Creates a new, empty WTF-8 string with pre-allocated capacity for `capacity` bytes.\n     #[inline]\n-    pub fn with_capacity(n: usize) -> Wtf8Buf {\n-        Wtf8Buf { bytes: Vec::with_capacity(n) }\n+    pub fn with_capacity(capacity: usize) -> Wtf8Buf {\n+        Wtf8Buf { bytes: Vec::with_capacity(capacity) }\n     }\n \n     /// Creates a WTF-8 string from a UTF-8 `String`."}]}