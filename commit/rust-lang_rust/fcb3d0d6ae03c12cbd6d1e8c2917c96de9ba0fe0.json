{"sha": "fcb3d0d6ae03c12cbd6d1e8c2917c96de9ba0fe0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYjNkMGQ2YWUwM2MxMmNiZDZkMWU4YzI5MTdjOTZkZTliYTBmZTA=", "commit": {"author": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2019-01-21T15:32:48Z"}, "committer": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2019-01-21T15:33:56Z"}, "message": "Expose alloc/dealloc properly for SGX libunwind", "tree": {"sha": "d0782df5569f1ab67cf91fa2ce7d13c85a1e8b98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0782df5569f1ab67cf91fa2ce7d13c85a1e8b98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcb3d0d6ae03c12cbd6d1e8c2917c96de9ba0fe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcb3d0d6ae03c12cbd6d1e8c2917c96de9ba0fe0", "html_url": "https://github.com/rust-lang/rust/commit/fcb3d0d6ae03c12cbd6d1e8c2917c96de9ba0fe0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcb3d0d6ae03c12cbd6d1e8c2917c96de9ba0fe0/comments", "author": null, "committer": null, "parents": [{"sha": "33b0b7148fa4eacf43c204b2505867a4cd8e4735", "url": "https://api.github.com/repos/rust-lang/rust/commits/33b0b7148fa4eacf43c204b2505867a4cd8e4735", "html_url": "https://github.com/rust-lang/rust/commit/33b0b7148fa4eacf43c204b2505867a4cd8e4735"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "43ceae7d33b8d88d8c2e904531730db606f3ee6a", "filename": "src/libstd/sys/sgx/rwlock.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fcb3d0d6ae03c12cbd6d1e8c2917c96de9ba0fe0/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcb3d0d6ae03c12cbd6d1e8c2917c96de9ba0fe0/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs?ref=fcb3d0d6ae03c12cbd6d1e8c2917c96de9ba0fe0", "patch": "@@ -1,3 +1,4 @@\n+use alloc::{self, Layout};\n use num::NonZeroUsize;\n use slice;\n use str;\n@@ -147,6 +148,7 @@ impl RWLock {\n         self.__write_unlock(rguard, wguard);\n     }\n \n+    // only used by __rust_rwlock_unlock below\n     #[inline]\n     unsafe fn unlock(&self) {\n         let rguard = self.readers.lock();\n@@ -164,6 +166,7 @@ impl RWLock {\n \n const EINVAL: i32 = 22;\n \n+// used by libunwind port\n #[no_mangle]\n pub unsafe extern \"C\" fn __rust_rwlock_rdlock(p: *mut RWLock) -> i32 {\n     if p.is_null() {\n@@ -190,6 +193,8 @@ pub unsafe extern \"C\" fn __rust_rwlock_unlock(p: *mut RWLock) -> i32 {\n     return 0;\n }\n \n+// the following functions are also used by the libunwind port. They're\n+// included here to make sure parallel codegen and LTO don't mess things up.\n #[no_mangle]\n pub unsafe extern \"C\" fn __rust_print_err(m: *mut u8, s: i32) {\n     if s < 0 {\n@@ -206,6 +211,16 @@ pub unsafe extern \"C\" fn __rust_abort() {\n     ::sys::abort_internal();\n }\n \n+#[no_mangle]\n+pub unsafe extern \"C\" fn __rust_c_alloc(size: usize, align: usize) -> *mut u8 {\n+    alloc::alloc(Layout::from_size_align_unchecked(size, align))\n+}\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn __rust_c_dealloc(ptr: *mut u8, size: usize, align: usize) {\n+    alloc::dealloc(ptr, Layout::from_size_align_unchecked(size, align))\n+}\n+\n #[cfg(test)]\n mod tests {\n "}]}