{"sha": "a97640117178f97180f3f8646a74cac8dee6c21a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NzY0MDExNzE3OGY5NzE4MGYzZjg2NDZhNzRjYWM4ZGVlNmMyMWE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-10T14:23:17Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-16T10:20:05Z"}, "message": "round 2", "tree": {"sha": "aae3b4435c0eeb9b14a3f170e406b1a1c625c562", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aae3b4435c0eeb9b14a3f170e406b1a1c625c562"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a97640117178f97180f3f8646a74cac8dee6c21a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXYn1VAAoJEFbW7qD8Z6xGxsUQAJAMW5QShOpr3QSUJjx1+Wra\nTp2Fcs37MFJtnWpa5LUMo7UPWkY5EXYWEdDmeaqj7I8YE/Ba4Hx1pRwdSzlI2073\nV/T/1NVB0Fk0bI2Pt9w6TlbLufi4ADLDo1gIG2jMePVFdlSMg/HZZWeDuzLMrFzI\n62GLnY6F58zXG6VaxYxNOmXo5iIuOeq0OksupIKfwSBbZ69mOdvp7CSwXgeOSlpE\n7/6LLBrNvfHqexb9yZrj1LMBhys9OELpZP6ITwj5JMENSX3njUy/7Z+lVde/SEnp\nXdCAFbkFlLLbP2cL/AhNgu5D1fdQjqPQWDqNPH5mvasYrrCdKbk17u5RvAOZnkeu\n779w5JUfR3pbgXaks45D+pz8IPpINML+YJEZtj6C0eMWhsnaDH6cF4glQ4vVvEN7\ncLcoGU6jLzv/sieF5ElZJBjFFk0y7DsCZVDTbKiNCAm1PaQmWI0HeVXqWr2fd43V\nkis4rsd1RX6ZiZ5Xrp/bHPmyKXP5yuB3+oRupw5m5XP+21odpRdSan+VEw4IR4vh\nP9sBO0oe6WaA0HmTMmkK1nsfxPgWTwbdI6xiMVfeXlXKlDD034Avd/hxSnOwc3GB\n3sySnS1elhQb0MbGGf3DSCH152O0tgXERowDaKj3yi/aluPnURA+Ci3CxuugNvAF\nRUMt3LayPIobsaJzNjo0\n=VvVR\n-----END PGP SIGNATURE-----", "payload": "tree aae3b4435c0eeb9b14a3f170e406b1a1c625c562\nparent 4701f13551c42ee574d47560a207ec2ecbb0df4d\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465568597 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466072405 +0200\n\nround 2"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a97640117178f97180f3f8646a74cac8dee6c21a", "html_url": "https://github.com/rust-lang/rust/commit/a97640117178f97180f3f8646a74cac8dee6c21a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a97640117178f97180f3f8646a74cac8dee6c21a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4701f13551c42ee574d47560a207ec2ecbb0df4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4701f13551c42ee574d47560a207ec2ecbb0df4d", "html_url": "https://github.com/rust-lang/rust/commit/4701f13551c42ee574d47560a207ec2ecbb0df4d"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "323c65364961ed4642d102339203246e59d0f202", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a97640117178f97180f3f8646a74cac8dee6c21a/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97640117178f97180f3f8646a74cac8dee6c21a/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=a97640117178f97180f3f8646a74cac8dee6c21a", "patch": "@@ -32,17 +32,17 @@ pub fn file(args: &[ptr::P<ast::MetaItem>]) -> Result<Option<token::InternedStri\n /// Error from reading a configuration file.\n #[derive(Debug)]\n pub enum Error {\n-    IoError(io::Error),\n-    TomlError(Vec<toml::ParserError>),\n-    TypeError(&'static str, &'static str, &'static str),\n+    Io(io::Error),\n+    Toml(Vec<toml::ParserError>),\n+    Type(&'static str, &'static str, &'static str),\n     UnknownKey(String),\n }\n \n impl fmt::Display for Error {\n     fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n         match *self {\n-            Error::IoError(ref err) => err.fmt(f),\n-            Error::TomlError(ref errs) => {\n+            Error::Io(ref err) => err.fmt(f),\n+            Error::Toml(ref errs) => {\n                 let mut first = true;\n                 for err in errs {\n                     if !first {\n@@ -55,7 +55,7 @@ impl fmt::Display for Error {\n \n                 Ok(())\n             }\n-            Error::TypeError(ref key, ref expected, ref got) => {\n+            Error::Type(ref key, ref expected, ref got) => {\n                 write!(f, \"`{}` is expected to be a `{}` but is a `{}`\", key, expected, got)\n             }\n             Error::UnknownKey(ref key) => write!(f, \"unknown key `{}`\", key),\n@@ -65,7 +65,7 @@ impl fmt::Display for Error {\n \n impl From<io::Error> for Error {\n     fn from(e: io::Error) -> Self {\n-        Error::IoError(e)\n+        Error::Io(e)\n     }\n }\n \n@@ -95,9 +95,9 @@ macro_rules! define_Conf {\n                                 self.$rust_name = value;\n                             }\n                             else {\n-                                return Err(Error::TypeError(define_Conf!(EXPR $toml_name),\n-                                                                stringify!($($ty)+),\n-                                                                value.type_str()));\n+                                return Err(Error::Type(define_Conf!(EXPR $toml_name),\n+                                                       stringify!($($ty)+),\n+                                                       value.type_str()));\n                             }\n                         },\n                     )+\n@@ -191,7 +191,7 @@ pub fn read(path: &str, must_exist: bool) -> (Conf, Vec<Error>) {\n     let toml = if let Some(toml) = parser.parse() {\n         toml\n     } else {\n-        errors.push(Error::TomlError(parser.errors));\n+        errors.push(Error::Toml(parser.errors));\n         return (conf, errors);\n     };\n "}]}