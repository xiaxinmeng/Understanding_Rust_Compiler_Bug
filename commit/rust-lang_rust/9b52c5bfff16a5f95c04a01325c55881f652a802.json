{"sha": "9b52c5bfff16a5f95c04a01325c55881f652a802", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNTJjNWJmZmYxNmE1Zjk1YzA0YTAxMzI1YzU1ODgxZjY1MmE4MDI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-18T21:50:56Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-09-06T11:27:22Z"}, "message": "generalize graphviz library to handle HTML tags and other such things", "tree": {"sha": "e9531736d4b9d6bd86136f97b38fc2a51a61ff78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9531736d4b9d6bd86136f97b38fc2a51a61ff78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b52c5bfff16a5f95c04a01325c55881f652a802", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b52c5bfff16a5f95c04a01325c55881f652a802", "html_url": "https://github.com/rust-lang/rust/commit/9b52c5bfff16a5f95c04a01325c55881f652a802", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b52c5bfff16a5f95c04a01325c55881f652a802/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f84d53ca0afaeac14903d16ab24455f6170795e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f84d53ca0afaeac14903d16ab24455f6170795e1", "html_url": "https://github.com/rust-lang/rust/commit/f84d53ca0afaeac14903d16ab24455f6170795e1"}], "stats": {"total": 68, "additions": 54, "deletions": 14}, "files": [{"sha": "4b2c0189b6b46fb018e9d24b69277e2439f7acb8", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 52, "deletions": 12, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9b52c5bfff16a5f95c04a01325c55881f652a802/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b52c5bfff16a5f95c04a01325c55881f652a802/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=9b52c5bfff16a5f95c04a01325c55881f652a802", "patch": "@@ -313,6 +313,13 @@ pub enum LabelText<'a> {\n     /// are also the escape sequences `\\l` which left-justifies the\n     /// preceding line and `\\r` which right-justifies it.\n     EscStr(Cow<'a, str>),\n+\n+    /// This uses a graphviz [HTML string label][html]. The string is\n+    /// printed exactly as given, but between `<` and `>`. **No\n+    /// escaping is performed.**\n+    ///\n+    /// [html]: http://www.graphviz.org/content/node-shapes#html\n+    HtmlStr(Cow<'a, str>),\n }\n \n /// The style for a node or edge.\n@@ -453,6 +460,14 @@ pub trait Labeller<'a,N,E> {\n     /// is a valid DOT identifier.\n     fn node_id(&'a self, n: &N) -> Id<'a>;\n \n+    /// Maps `n` to one of the [graphviz `shape` names][1]. If `None`\n+    /// is returned, no `shape` attribute is specified.\n+    ///\n+    /// [1]: http://www.graphviz.org/content/node-shapes\n+    fn node_shape(&'a self, _node: &N) -> Option<LabelText<'a>> {\n+        None\n+    }\n+\n     /// Maps `n` to a label that will be used in the rendered output.\n     /// The label need not be unique, and may be the empty string; the\n     /// default is just the output from `node_id`.\n@@ -479,6 +494,16 @@ pub trait Labeller<'a,N,E> {\n     }\n }\n \n+/// Escape tags in such a way that it is suitable for inclusion in a\n+/// Graphviz HTML label.\n+pub fn escape_html(s: &str) -> String {\n+    s\n+        .replace(\"&\", \"&amp;\")\n+        .replace(\"\\\"\", \"&quot;\")\n+        .replace(\"<\", \"&lt;\")\n+        .replace(\">\", \"&gt;\")\n+}\n+\n impl<'a> LabelText<'a> {\n     pub fn label<S:IntoCow<'a, str>>(s: S) -> LabelText<'a> {\n         LabelStr(s.into_cow())\n@@ -488,6 +513,10 @@ impl<'a> LabelText<'a> {\n         EscStr(s.into_cow())\n     }\n \n+    pub fn html<S:IntoCow<'a, str>>(s: S) -> LabelText<'a> {\n+        HtmlStr(s.into_cow())\n+    }\n+\n     fn escape_char<F>(c: char, mut f: F) where F: FnMut(char) {\n         match c {\n             // not escaping \\\\, since Graphviz escString needs to\n@@ -505,10 +534,12 @@ impl<'a> LabelText<'a> {\n     }\n \n     /// Renders text as string suitable for a label in a .dot file.\n-    pub fn escape(&self) -> String {\n+    /// This includes quotes or suitable delimeters.\n+    pub fn to_dot_string(&self) -> String {\n         match self {\n-            &LabelStr(ref s) => s.escape_default(),\n-            &EscStr(ref s) => LabelText::escape_str(&s[..]),\n+            &LabelStr(ref s) => format!(\"\\\"{}\\\"\", s.escape_default()),\n+            &EscStr(ref s) => format!(\"\\\"{}\\\"\", LabelText::escape_str(&s[..])),\n+            &HtmlStr(ref s) => format!(\"<{}>\", s),\n         }\n     }\n \n@@ -524,6 +555,7 @@ impl<'a> LabelText<'a> {\n             } else {\n                 s\n             },\n+            HtmlStr(s) => s,\n         }\n     }\n \n@@ -612,14 +644,15 @@ pub fn render_opts<'a, N:Clone+'a, E:Clone+'a, G:Labeller<'a,N,E>+GraphWalk<'a,N\n         try!(indent(w));\n         let id = g.node_id(n);\n \n-        let escaped = &g.node_label(n).escape();\n+        let escaped = &g.node_label(n).to_dot_string();\n+        let shape;\n \n         let mut text = vec![id.as_slice()];\n \n         if !options.contains(&RenderOption::NoNodeLabels) {\n-            text.push(\"[label=\\\"\");\n+            text.push(\"[label=\");\n             text.push(escaped);\n-            text.push(\"\\\"]\");\n+            text.push(\"]\");\n         }\n \n         let style = g.node_style(n);\n@@ -629,12 +662,19 @@ pub fn render_opts<'a, N:Clone+'a, E:Clone+'a, G:Labeller<'a,N,E>+GraphWalk<'a,N\n             text.push(\"\\\"]\");\n         }\n \n+        if let Some(s) = g.node_shape(n) {\n+            shape = s.to_dot_string();\n+            text.push(\"[shape=\");\n+            text.push(&shape);\n+            text.push(\"]\");\n+        }\n+\n         text.push(\";\");\n         try!(writeln(w, &text));\n     }\n \n     for e in g.edges().iter() {\n-        let escaped_label = &g.edge_label(e).escape();\n+        let escaped_label = &g.edge_label(e).to_dot_string();\n         try!(indent(w));\n         let source = g.source(e);\n         let target = g.target(e);\n@@ -644,9 +684,9 @@ pub fn render_opts<'a, N:Clone+'a, E:Clone+'a, G:Labeller<'a,N,E>+GraphWalk<'a,N\n         let mut text = vec![source_id.as_slice(), \" -> \", target_id.as_slice()];\n \n         if !options.contains(&RenderOption::NoEdgeLabels) {\n-            text.push(\"[label=\\\"\");\n+            text.push(\"[label=\");\n             text.push(escaped_label);\n-            text.push(\"\\\"]\");\n+            text.push(\"]\");\n         }\n \n         let style = g.edge_style(e);\n@@ -667,7 +707,7 @@ pub fn render_opts<'a, N:Clone+'a, E:Clone+'a, G:Labeller<'a,N,E>+GraphWalk<'a,N\n mod tests {\n     use self::NodeLabels::*;\n     use super::{Id, Labeller, Nodes, Edges, GraphWalk, render, Style};\n-    use super::LabelText::{self, LabelStr, EscStr};\n+    use super::LabelText::{self, LabelStr, EscStr, HtmlStr};\n     use std::io;\n     use std::io::prelude::*;\n     use std::borrow::IntoCow;\n@@ -805,12 +845,12 @@ mod tests {\n         fn node_id(&'a self, n: &Node) -> Id<'a> { self.graph.node_id(n) }\n         fn node_label(&'a self, n: &Node) -> LabelText<'a> {\n             match self.graph.node_label(n) {\n-                LabelStr(s) | EscStr(s) => EscStr(s),\n+                LabelStr(s) | EscStr(s) | HtmlStr(s) => EscStr(s),\n             }\n         }\n         fn edge_label(&'a self, e: & &'a Edge) -> LabelText<'a> {\n             match self.graph.edge_label(e) {\n-                LabelStr(s) | EscStr(s) => EscStr(s),\n+                LabelStr(s) | EscStr(s) | HtmlStr(s) => EscStr(s),\n             }\n         }\n     }"}, {"sha": "125cec6183f6d0022fa4067f9f602b3728926efb", "filename": "src/test/compile-fail/feature-gate-rustc-attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b52c5bfff16a5f95c04a01325c55881f652a802/src%2Ftest%2Fcompile-fail%2Ffeature-gate-rustc-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b52c5bfff16a5f95c04a01325c55881f652a802/src%2Ftest%2Fcompile-fail%2Ffeature-gate-rustc-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-rustc-attrs.rs?ref=9b52c5bfff16a5f95c04a01325c55881f652a802", "patch": "@@ -12,8 +12,8 @@\n \n // Test that `#[rustc_*]` attributes are gated by `rustc_attrs` feature gate.\n \n-#[rustc_variance] //~ ERROR the `#[rustc_variance]` attribute is an experimental feature\n-#[rustc_error] //~ ERROR the `#[rustc_error]` attribute is an experimental feature\n+#[rustc_variance] //~ ERROR the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable\n+#[rustc_error] //~ ERROR the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable\n #[rustc_move_fragments] //~ ERROR the `#[rustc_move_fragments]` attribute is an experimental feature\n #[rustc_foo]\n //~^ ERROR unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics"}]}