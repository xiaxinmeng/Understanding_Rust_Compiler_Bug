{"sha": "07e633ef0adda5f3ce608762267d67b6359358a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZTYzM2VmMGFkZGE1ZjNjZTYwODc2MjI2N2Q2N2I2MzU5MzU4YTc=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-12T11:52:24Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-12T11:52:24Z"}, "message": "Remove the fixme", "tree": {"sha": "5437628f4ed88480b788bd3b23d2f63bc481a10b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5437628f4ed88480b788bd3b23d2f63bc481a10b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07e633ef0adda5f3ce608762267d67b6359358a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07e633ef0adda5f3ce608762267d67b6359358a7", "html_url": "https://github.com/rust-lang/rust/commit/07e633ef0adda5f3ce608762267d67b6359358a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07e633ef0adda5f3ce608762267d67b6359358a7/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3481ea96bdf530e70ce0c3568918421564845b0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3481ea96bdf530e70ce0c3568918421564845b0d", "html_url": "https://github.com/rust-lang/rust/commit/3481ea96bdf530e70ce0c3568918421564845b0d"}], "stats": {"total": 51, "additions": 15, "deletions": 36}, "files": [{"sha": "af3fc96b6c2fce2b4e89bb624b9e85092256b17f", "filename": "crates/assists/src/utils/insert_use.rs", "status": "modified", "additions": 15, "deletions": 36, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/07e633ef0adda5f3ce608762267d67b6359358a7/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e633ef0adda5f3ce608762267d67b6359358a7/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs?ref=07e633ef0adda5f3ce608762267d67b6359358a7", "patch": "@@ -63,47 +63,26 @@ impl ImportScope {\n         }\n     }\n \n-    fn insert_pos_after_inner_elements(&self) -> (InsertPosition<SyntaxElement>, AddBlankLine) {\n-        let mut last_inner_element = None;\n-\n-        for maybe_inner_element in self.as_syntax_node().children_with_tokens() {\n-            match maybe_inner_element {\n-                NodeOrToken::Node(maybe_inner_node) => {\n-                    if is_inner_node(maybe_inner_node.clone()) {\n-                        last_inner_element = Some(NodeOrToken::Node(maybe_inner_node))\n-                    } else {\n-                        // FIXME: https://doc.rust-lang.org/reference/comments.html#doc-comments\n-                        // states that inner comments (`//!` and `/*!`) are equal to inner attribute `#![doc=\"...\"]`\n-                        // yet RA treats them differently now: inner attributes never belong to child nodes,\n-                        // but inner comments can, ergo this check.\n-                        // We need to align this and treat both cases the same way.\n-                        if let Some(maybe_inner_token) = maybe_inner_node.first_token() {\n-                            if is_inner_token(maybe_inner_token.clone()) {\n-                                last_inner_element = Some(NodeOrToken::Token(maybe_inner_token))\n-                            }\n-                        }\n-                    };\n-                }\n-                NodeOrToken::Token(maybe_inner_token) => {\n-                    if is_inner_token(maybe_inner_token.clone()) {\n-                        last_inner_element = Some(NodeOrToken::Token(maybe_inner_token))\n-                    }\n-                }\n-            }\n-        }\n-\n-        match last_inner_element {\n-            Some(element) => (InsertPosition::After(element.into()), AddBlankLine::BeforeTwice),\n-            None => self.first_insert_pos(),\n-        }\n+    fn insert_pos_after_last_inner_element(&self) -> (InsertPosition<SyntaxElement>, AddBlankLine) {\n+        self.as_syntax_node()\n+            .children_with_tokens()\n+            .filter(|child| match child {\n+                NodeOrToken::Node(node) => is_inner_attribute(node.clone()),\n+                NodeOrToken::Token(token) => is_inner_comment(token.clone()),\n+            })\n+            .last()\n+            .map(|last_inner_element| {\n+                (InsertPosition::After(last_inner_element.into()), AddBlankLine::BeforeTwice)\n+            })\n+            .unwrap_or_else(|| self.first_insert_pos())\n     }\n }\n \n-fn is_inner_node(node: SyntaxNode) -> bool {\n+fn is_inner_attribute(node: SyntaxNode) -> bool {\n     ast::Attr::cast(node).map(|attr| attr.kind()) == Some(ast::AttrKind::Inner)\n }\n \n-fn is_inner_token(token: SyntaxToken) -> bool {\n+fn is_inner_comment(token: SyntaxToken) -> bool {\n     ast::Comment::cast(token).and_then(|comment| comment.kind().doc)\n         == Some(ast::CommentPlacement::Inner)\n }\n@@ -582,7 +561,7 @@ fn find_insert_position(\n                             (InsertPosition::After(node.into()), AddBlankLine::BeforeTwice)\n                         }\n                         // there are no imports in this file at all\n-                        None => scope.insert_pos_after_inner_elements(),\n+                        None => scope.insert_pos_after_last_inner_element(),\n                     },\n                 }\n             }"}]}