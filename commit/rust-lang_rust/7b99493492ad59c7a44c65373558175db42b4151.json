{"sha": "7b99493492ad59c7a44c65373558175db42b4151", "node_id": "C_kwDOAAsO6NoAKDdiOTk0OTM0OTJhZDU5YzdhNDRjNjUzNzM1NTgxNzVkYjQyYjQxNTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-02T06:36:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-02T06:36:44Z"}, "message": "Auto merge of #111089 - Dylan-DPC:rollup-b8oj6du, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #105076 (Refactor core::char::EscapeDefault and co. structures)\n - #108161 (Add `ConstParamTy` trait)\n - #108668 (Stabilize debugger_visualizer)\n - #110512 (Fix elaboration with associated type bounds)\n - #110895 (Remove `all` in target_thread_local cfg)\n - #110955 (uplift `clippy::clone_double_ref` as `suspicious_double_ref_op`)\n - #111048 (Mark`feature(return_position_impl_trait_in_trait)` and`feature(async_fn_in_trait)` as not incomplete)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "3175b32e64b2e498d623f3830be4faabd89ad892", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3175b32e64b2e498d623f3830be4faabd89ad892"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b99493492ad59c7a44c65373558175db42b4151", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b99493492ad59c7a44c65373558175db42b4151", "html_url": "https://github.com/rust-lang/rust/commit/7b99493492ad59c7a44c65373558175db42b4151", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b99493492ad59c7a44c65373558175db42b4151/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5133e154590991203c84702ef59482f729b19bbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/5133e154590991203c84702ef59482f729b19bbf", "html_url": "https://github.com/rust-lang/rust/commit/5133e154590991203c84702ef59482f729b19bbf"}, {"sha": "2e3373c231fdd7ce607acd2339bfee501322e8c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e3373c231fdd7ce607acd2339bfee501322e8c6", "html_url": "https://github.com/rust-lang/rust/commit/2e3373c231fdd7ce607acd2339bfee501322e8c6"}], "stats": {"total": 2852, "additions": 1699, "deletions": 1153}, "files": [{"sha": "4baac4b5afc9d2634676844db6ba2f4c0e2be3c9", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -40,7 +40,6 @@ use regex::Regex;\n use tempfile::Builder as TempFileBuilder;\n \n use itertools::Itertools;\n-use std::borrow::Borrow;\n use std::cell::OnceCell;\n use std::collections::BTreeSet;\n use std::ffi::OsString;\n@@ -576,17 +575,17 @@ fn link_dwarf_object<'a>(\n \n     impl<Relocations> ThorinSession<Relocations> {\n         fn alloc_mmap(&self, data: Mmap) -> &Mmap {\n-            (*self.arena_mmap.alloc(data)).borrow()\n+            &*self.arena_mmap.alloc(data)\n         }\n     }\n \n     impl<Relocations> thorin::Session<Relocations> for ThorinSession<Relocations> {\n         fn alloc_data(&self, data: Vec<u8>) -> &[u8] {\n-            (*self.arena_data.alloc(data)).borrow()\n+            &*self.arena_data.alloc(data)\n         }\n \n         fn alloc_relocation(&self, data: Relocations) -> &Relocations {\n-            (*self.arena_relocations.alloc(data)).borrow()\n+            &*self.arena_relocations.alloc(data)\n         }\n \n         fn read_input(&self, path: &Path) -> std::io::Result<&[u8]> {"}, {"sha": "70d608a5ea428223d70fe6a2770f54c6389a6cdc", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -130,6 +130,8 @@ declare_features! (\n     (accepted, copy_closures, \"1.26.0\", Some(44490), None),\n     /// Allows `crate` in paths.\n     (accepted, crate_in_paths, \"1.30.0\", Some(45477), None),\n+    /// Allows using `#[debugger_visualizer]` attribute.\n+    (accepted, debugger_visualizer, \"CURRENT_RUSTC_VERSION\", Some(95939), None),\n     /// Allows rustc to inject a default alloc_error_handler\n     (accepted, default_alloc_error_handler, \"1.68.0\", Some(66741), None),\n     /// Allows using assigning a default type to type parameters in algebraic data type definitions."}, {"sha": "6201e5b619b871f4b1ca3067ef3eaef8932fa054", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -310,7 +310,7 @@ declare_features! (\n     /// Allows `async || body` closures.\n     (active, async_closure, \"1.37.0\", Some(62290), None),\n     /// Allows async functions to be declared, implemented, and used in traits.\n-    (incomplete, async_fn_in_trait, \"1.66.0\", Some(91611), None),\n+    (active, async_fn_in_trait, \"1.66.0\", Some(91611), None),\n     /// Treat `extern \"C\"` function as nounwind.\n     (active, c_unwind, \"1.52.0\", Some(74990), None),\n     /// Allows using C-variadics.\n@@ -363,8 +363,6 @@ declare_features! (\n     (active, custom_inner_attributes, \"1.30.0\", Some(54726), None),\n     /// Allows custom test frameworks with `#![test_runner]` and `#[test_case]`.\n     (active, custom_test_frameworks, \"1.30.0\", Some(50297), None),\n-    /// Allows using `#[debugger_visualizer]`.\n-    (active, debugger_visualizer, \"1.62.0\", Some(95939), None),\n     /// Allows declarative macros 2.0 (`macro`).\n     (active, decl_macro, \"1.17.0\", Some(39412), None),\n     /// Allows default type parameters to influence type inference.\n@@ -496,7 +494,7 @@ declare_features! (\n     /// Allows `repr(simd)` and importing the various simd intrinsics.\n     (active, repr_simd, \"1.4.0\", Some(27731), None),\n     /// Allows return-position `impl Trait` in traits.\n-    (incomplete, return_position_impl_trait_in_trait, \"1.65.0\", Some(91611), None),\n+    (active, return_position_impl_trait_in_trait, \"1.65.0\", Some(91611), None),\n     /// Allows bounding the return type of AFIT/RPITIT.\n     (incomplete, return_type_notation, \"1.70.0\", Some(109417), None),\n     /// Allows `extern \"rust-cold\"`."}, {"sha": "574419440de666ff04dabc88791bc34a11a91c11", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -403,16 +403,16 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         doc, Normal, template!(List: \"hidden|inline|...\", NameValueStr: \"string\"), DuplicatesOk\n     ),\n \n+    // Debugging\n+    ungated!(\n+        debugger_visualizer, Normal,\n+        template!(List: r#\"natvis_file = \"...\", gdb_script_file = \"...\"\"#), DuplicatesOk\n+    ),\n+\n     // ==========================================================================\n     // Unstable attributes:\n     // ==========================================================================\n \n-    // RFC #3191: #[debugger_visualizer] support\n-    gated!(\n-        debugger_visualizer, Normal, template!(List: r#\"natvis_file = \"...\", gdb_script_file = \"...\"\"#),\n-        DuplicatesOk, experimental!(debugger_visualizer)\n-    ),\n-\n     // Linking:\n     gated!(\n         naked, Normal, template!(Word), WarnFollowing, @only_local: true,"}, {"sha": "e1c030d3e198aff55f85cac0344993abcd81abca", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -293,6 +293,8 @@ language_item_table! {\n \n     PointerLike,             sym::pointer_like,        pointer_like,               Target::Trait,          GenericRequirement::Exact(0);\n \n+    ConstParamTy,            sym::const_param_ty,      const_param_ty_trait,       Target::Trait,          GenericRequirement::Exact(0);\n+\n     Poll,                    sym::Poll,                poll,                       Target::Enum,           GenericRequirement::None;\n     PollReady,               sym::Ready,               poll_ready_variant,         Target::Variant,        GenericRequirement::None;\n     PollPending,             sym::Pending,             poll_pending_variant,       Target::Variant,        GenericRequirement::None;"}, {"sha": "e4f225bdad73efbb5df218f518f75377aa4237c3", "filename": "compiler/rustc_hir_analysis/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fmessages.ftl?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -35,6 +35,10 @@ hir_analysis_field_already_declared =\n \n hir_analysis_expected_used_symbol = expected `used`, `used(compiler)` or `used(linker)`\n \n+hir_analysis_const_param_ty_impl_on_non_adt =\n+    the trait `ConstParamTy` may not be implemented for this type\n+    .label = type is not a structure or enumeration\n+\n hir_analysis_ambiguous_lifetime_bound =\n     ambiguous lifetime bound, explicit lifetime bound required\n "}, {"sha": "6cb008bc5f8a09118c78dc6732ff423282182f86", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 56, "deletions": 14, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -56,6 +56,9 @@ use std::slice;\n #[derive(Debug)]\n pub struct PathSeg(pub DefId, pub usize);\n \n+#[derive(Copy, Clone, Debug)]\n+pub struct OnlySelfBounds(pub bool);\n+\n pub trait AstConv<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx>;\n \n@@ -670,6 +673,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         args: &GenericArgs<'_>,\n         infer_args: bool,\n         self_ty: Ty<'tcx>,\n+        only_self_bounds: OnlySelfBounds,\n     ) -> GenericArgCountResult {\n         let (substs, arg_count) = self.create_substs_for_ast_path(\n             trait_ref_span,\n@@ -706,6 +710,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 &mut dup_bindings,\n                 binding_span.unwrap_or(binding.span),\n                 constness,\n+                only_self_bounds,\n             );\n             // Okay to ignore `Err` because of `ErrorGuaranteed` (see above).\n         }\n@@ -741,6 +746,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         self_ty: Ty<'tcx>,\n         bounds: &mut Bounds<'tcx>,\n         speculative: bool,\n+        only_self_bounds: OnlySelfBounds,\n     ) -> GenericArgCountResult {\n         let hir_id = trait_ref.hir_ref_id;\n         let binding_span = None;\n@@ -766,6 +772,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             args,\n             infer_args,\n             self_ty,\n+            only_self_bounds,\n         )\n     }\n \n@@ -777,6 +784,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         args: &GenericArgs<'_>,\n         self_ty: Ty<'tcx>,\n         bounds: &mut Bounds<'tcx>,\n+        only_self_bounds: OnlySelfBounds,\n     ) {\n         let binding_span = Some(span);\n         let constness = ty::BoundConstness::NotConst;\n@@ -799,6 +807,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             args,\n             infer_args,\n             self_ty,\n+            only_self_bounds,\n         );\n     }\n \n@@ -947,6 +956,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         ast_bounds: I,\n         bounds: &mut Bounds<'tcx>,\n         bound_vars: &'tcx ty::List<ty::BoundVariableKind>,\n+        only_self_bounds: OnlySelfBounds,\n     ) {\n         for ast_bound in ast_bounds {\n             match ast_bound {\n@@ -964,11 +974,18 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         param_ty,\n                         bounds,\n                         false,\n+                        only_self_bounds,\n                     );\n                 }\n                 &hir::GenericBound::LangItemTrait(lang_item, span, hir_id, args) => {\n                     self.instantiate_lang_item_trait_ref(\n-                        lang_item, span, hir_id, args, param_ty, bounds,\n+                        lang_item,\n+                        span,\n+                        hir_id,\n+                        args,\n+                        param_ty,\n+                        bounds,\n+                        only_self_bounds,\n                     );\n                 }\n                 hir::GenericBound::Outlives(lifetime) => {\n@@ -1006,8 +1023,19 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         &self,\n         param_ty: Ty<'tcx>,\n         ast_bounds: &[hir::GenericBound<'_>],\n+        only_self_bounds: OnlySelfBounds,\n     ) -> Bounds<'tcx> {\n-        self.compute_bounds_inner(param_ty, ast_bounds)\n+        let mut bounds = Bounds::default();\n+        self.add_bounds(\n+            param_ty,\n+            ast_bounds.iter(),\n+            &mut bounds,\n+            ty::List::empty(),\n+            only_self_bounds,\n+        );\n+        debug!(?bounds);\n+\n+        bounds\n     }\n \n     /// Convert the bounds in `ast_bounds` that refer to traits which define an associated type\n@@ -1029,17 +1057,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n         }\n \n-        self.compute_bounds_inner(param_ty, &result)\n-    }\n-\n-    fn compute_bounds_inner(\n-        &self,\n-        param_ty: Ty<'tcx>,\n-        ast_bounds: &[hir::GenericBound<'_>],\n-    ) -> Bounds<'tcx> {\n         let mut bounds = Bounds::default();\n-\n-        self.add_bounds(param_ty, ast_bounds.iter(), &mut bounds, ty::List::empty());\n+        self.add_bounds(\n+            param_ty,\n+            result.iter(),\n+            &mut bounds,\n+            ty::List::empty(),\n+            OnlySelfBounds(true),\n+        );\n         debug!(?bounds);\n \n         bounds\n@@ -1062,6 +1087,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         dup_bindings: &mut FxHashMap<DefId, Span>,\n         path_span: Span,\n         constness: ty::BoundConstness,\n+        only_self_bounds: OnlySelfBounds,\n     ) -> Result<(), ErrorGuaranteed> {\n         // Given something like `U: SomeTrait<T = X>`, we want to produce a\n         // predicate like `<U as SomeTrait>::T = X`. This is somewhat\n@@ -1361,8 +1387,20 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 //\n                 // Calling `skip_binder` is okay, because `add_bounds` expects the `param_ty`\n                 // parameter to have a skipped binder.\n-                let param_ty = tcx.mk_alias(ty::Projection, projection_ty.skip_binder());\n-                self.add_bounds(param_ty, ast_bounds.iter(), bounds, projection_ty.bound_vars());\n+                //\n+                // NOTE: If `only_self_bounds` is true, do NOT expand this associated\n+                // type bound into a trait predicate, since we only want to add predicates\n+                // for the `Self` type.\n+                if !only_self_bounds.0 {\n+                    let param_ty = tcx.mk_alias(ty::Projection, projection_ty.skip_binder());\n+                    self.add_bounds(\n+                        param_ty,\n+                        ast_bounds.iter(),\n+                        bounds,\n+                        projection_ty.bound_vars(),\n+                        only_self_bounds,\n+                    );\n+                }\n             }\n         }\n         Ok(())\n@@ -1403,6 +1441,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 dummy_self,\n                 &mut bounds,\n                 false,\n+                // FIXME: This should be `true`, but we don't really handle\n+                // associated type bounds or type aliases in objects in a way\n+                // that makes this meaningful, I think.\n+                OnlySelfBounds(false),\n             ) {\n                 potential_assoc_types.extend(cur_potential_assoc_types);\n             }"}, {"sha": "0f450ae67b7a636579818d77ba6ba5f7f7f8c9ff", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 148, "deletions": 107, "changes": 255, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,9 +1,11 @@\n //! Check properties that are required by built-in traits and set\n //! up data structures required by type-checking/codegen.\n \n-use crate::errors::{CopyImplOnNonAdt, CopyImplOnTypeWithDtor, DropImplOnWrongItem};\n+use crate::errors::{\n+    ConstParamTyImplOnNonAdt, CopyImplOnNonAdt, CopyImplOnTypeWithDtor, DropImplOnWrongItem,\n+};\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{struct_span_err, MultiSpan};\n+use rustc_errors::{struct_span_err, ErrorGuaranteed, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n@@ -14,9 +16,11 @@ use rustc_infer::infer::{DefineOpaqueTypes, TyCtxtInferExt};\n use rustc_infer::traits::Obligation;\n use rustc_middle::ty::adjustment::CoerceUnsizedInfo;\n use rustc_middle::ty::{self, suggest_constraining_type_params, Ty, TyCtxt, TypeVisitableExt};\n+use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt;\n use rustc_trait_selection::traits::misc::{\n-    type_allowed_to_implement_copy, CopyImplementationError, InfringingFieldsReason,\n+    type_allowed_to_implement_const_param_ty, type_allowed_to_implement_copy,\n+    ConstParamTyImplementationError, CopyImplementationError, InfringingFieldsReason,\n };\n use rustc_trait_selection::traits::ObligationCtxt;\n use rustc_trait_selection::traits::{self, ObligationCause};\n@@ -27,6 +31,7 @@ pub fn check_trait(tcx: TyCtxt<'_>, trait_def_id: DefId) {\n     Checker { tcx, trait_def_id }\n         .check(lang_items.drop_trait(), visit_implementation_of_drop)\n         .check(lang_items.copy_trait(), visit_implementation_of_copy)\n+        .check(lang_items.const_param_ty_trait(), visit_implementation_of_const_param_ty)\n         .check(lang_items.coerce_unsized_trait(), visit_implementation_of_coerce_unsized)\n         .check(lang_items.dispatch_from_dyn_trait(), visit_implementation_of_dispatch_from_dyn);\n }\n@@ -83,110 +88,7 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n     match type_allowed_to_implement_copy(tcx, param_env, self_type, cause) {\n         Ok(()) => {}\n         Err(CopyImplementationError::InfringingFields(fields)) => {\n-            let mut err = struct_span_err!(\n-                tcx.sess,\n-                span,\n-                E0204,\n-                \"the trait `Copy` cannot be implemented for this type\"\n-            );\n-\n-            // We'll try to suggest constraining type parameters to fulfill the requirements of\n-            // their `Copy` implementation.\n-            let mut errors: BTreeMap<_, Vec<_>> = Default::default();\n-            let mut bounds = vec![];\n-\n-            let mut seen_tys = FxHashSet::default();\n-\n-            for (field, ty, reason) in fields {\n-                // Only report an error once per type.\n-                if !seen_tys.insert(ty) {\n-                    continue;\n-                }\n-\n-                let field_span = tcx.def_span(field.did);\n-                err.span_label(field_span, \"this field does not implement `Copy`\");\n-\n-                match reason {\n-                    InfringingFieldsReason::Fulfill(fulfillment_errors) => {\n-                        for error in fulfillment_errors {\n-                            let error_predicate = error.obligation.predicate;\n-                            // Only note if it's not the root obligation, otherwise it's trivial and\n-                            // should be self-explanatory (i.e. a field literally doesn't implement Copy).\n-\n-                            // FIXME: This error could be more descriptive, especially if the error_predicate\n-                            // contains a foreign type or if it's a deeply nested type...\n-                            if error_predicate != error.root_obligation.predicate {\n-                                errors\n-                                    .entry((ty.to_string(), error_predicate.to_string()))\n-                                    .or_default()\n-                                    .push(error.obligation.cause.span);\n-                            }\n-                            if let ty::PredicateKind::Clause(ty::Clause::Trait(\n-                                ty::TraitPredicate {\n-                                    trait_ref,\n-                                    polarity: ty::ImplPolarity::Positive,\n-                                    ..\n-                                },\n-                            )) = error_predicate.kind().skip_binder()\n-                            {\n-                                let ty = trait_ref.self_ty();\n-                                if let ty::Param(_) = ty.kind() {\n-                                    bounds.push((\n-                                        format!(\"{ty}\"),\n-                                        trait_ref.print_only_trait_path().to_string(),\n-                                        Some(trait_ref.def_id),\n-                                    ));\n-                                }\n-                            }\n-                        }\n-                    }\n-                    InfringingFieldsReason::Regions(region_errors) => {\n-                        for error in region_errors {\n-                            let ty = ty.to_string();\n-                            match error {\n-                                RegionResolutionError::ConcreteFailure(origin, a, b) => {\n-                                    let predicate = format!(\"{b}: {a}\");\n-                                    errors\n-                                        .entry((ty.clone(), predicate.clone()))\n-                                        .or_default()\n-                                        .push(origin.span());\n-                                    if let ty::RegionKind::ReEarlyBound(ebr) = *b && ebr.has_name() {\n-                                        bounds.push((b.to_string(), a.to_string(), None));\n-                                    }\n-                                }\n-                                RegionResolutionError::GenericBoundFailure(origin, a, b) => {\n-                                    let predicate = format!(\"{a}: {b}\");\n-                                    errors\n-                                        .entry((ty.clone(), predicate.clone()))\n-                                        .or_default()\n-                                        .push(origin.span());\n-                                    if let infer::region_constraints::GenericKind::Param(_) = a {\n-                                        bounds.push((a.to_string(), b.to_string(), None));\n-                                    }\n-                                }\n-                                _ => continue,\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-            for ((ty, error_predicate), spans) in errors {\n-                let span: MultiSpan = spans.into();\n-                err.span_note(\n-                    span,\n-                    &format!(\"the `Copy` impl for `{}` requires that `{}`\", ty, error_predicate),\n-                );\n-            }\n-            suggest_constraining_type_params(\n-                tcx,\n-                tcx.hir().get_generics(impl_did).expect(\"impls always have generics\"),\n-                &mut err,\n-                bounds.iter().map(|(param, constraint, def_id)| {\n-                    (param.as_str(), constraint.as_str(), *def_id)\n-                }),\n-                None,\n-            );\n-            err.emit();\n+            infringing_fields_error(tcx, fields, LangItem::Copy, impl_did, span);\n         }\n         Err(CopyImplementationError::NotAnAdt) => {\n             tcx.sess.emit_err(CopyImplOnNonAdt { span });\n@@ -197,6 +99,29 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n     }\n }\n \n+fn visit_implementation_of_const_param_ty(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n+    let self_type = tcx.type_of(impl_did).subst_identity();\n+    assert!(!self_type.has_escaping_bound_vars());\n+\n+    let param_env = tcx.param_env(impl_did);\n+\n+    let span = match tcx.hir().expect_item(impl_did).expect_impl() {\n+        hir::Impl { polarity: hir::ImplPolarity::Negative(_), .. } => return,\n+        impl_ => impl_.self_ty.span,\n+    };\n+\n+    let cause = traits::ObligationCause::misc(span, impl_did);\n+    match type_allowed_to_implement_const_param_ty(tcx, param_env, self_type, cause) {\n+        Ok(()) => {}\n+        Err(ConstParamTyImplementationError::InfrigingFields(fields)) => {\n+            infringing_fields_error(tcx, fields, LangItem::ConstParamTy, impl_did, span);\n+        }\n+        Err(ConstParamTyImplementationError::NotAnAdtOrBuiltinAllowed) => {\n+            tcx.sess.emit_err(ConstParamTyImplOnNonAdt { span });\n+        }\n+    }\n+}\n+\n fn visit_implementation_of_coerce_unsized(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n     debug!(\"visit_implementation_of_coerce_unsized: impl_did={:?}\", impl_did);\n \n@@ -593,3 +518,119 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: LocalDefId) -> Coe\n \n     CoerceUnsizedInfo { custom_kind: kind }\n }\n+\n+fn infringing_fields_error(\n+    tcx: TyCtxt<'_>,\n+    fields: Vec<(&ty::FieldDef, Ty<'_>, InfringingFieldsReason<'_>)>,\n+    lang_item: LangItem,\n+    impl_did: LocalDefId,\n+    impl_span: Span,\n+) -> ErrorGuaranteed {\n+    let trait_did = tcx.require_lang_item(lang_item, Some(impl_span));\n+\n+    let trait_name = tcx.def_path_str(trait_did);\n+\n+    let mut err = struct_span_err!(\n+        tcx.sess,\n+        impl_span,\n+        E0204,\n+        \"the trait `{trait_name}` cannot be implemented for this type\"\n+    );\n+\n+    // We'll try to suggest constraining type parameters to fulfill the requirements of\n+    // their `Copy` implementation.\n+    let mut errors: BTreeMap<_, Vec<_>> = Default::default();\n+    let mut bounds = vec![];\n+\n+    let mut seen_tys = FxHashSet::default();\n+\n+    for (field, ty, reason) in fields {\n+        // Only report an error once per type.\n+        if !seen_tys.insert(ty) {\n+            continue;\n+        }\n+\n+        let field_span = tcx.def_span(field.did);\n+        err.span_label(field_span, format!(\"this field does not implement `{trait_name}`\"));\n+\n+        match reason {\n+            InfringingFieldsReason::Fulfill(fulfillment_errors) => {\n+                for error in fulfillment_errors {\n+                    let error_predicate = error.obligation.predicate;\n+                    // Only note if it's not the root obligation, otherwise it's trivial and\n+                    // should be self-explanatory (i.e. a field literally doesn't implement Copy).\n+\n+                    // FIXME: This error could be more descriptive, especially if the error_predicate\n+                    // contains a foreign type or if it's a deeply nested type...\n+                    if error_predicate != error.root_obligation.predicate {\n+                        errors\n+                            .entry((ty.to_string(), error_predicate.to_string()))\n+                            .or_default()\n+                            .push(error.obligation.cause.span);\n+                    }\n+                    if let ty::PredicateKind::Clause(ty::Clause::Trait(ty::TraitPredicate {\n+                        trait_ref,\n+                        polarity: ty::ImplPolarity::Positive,\n+                        ..\n+                    })) = error_predicate.kind().skip_binder()\n+                    {\n+                        let ty = trait_ref.self_ty();\n+                        if let ty::Param(_) = ty.kind() {\n+                            bounds.push((\n+                                format!(\"{ty}\"),\n+                                trait_ref.print_only_trait_path().to_string(),\n+                                Some(trait_ref.def_id),\n+                            ));\n+                        }\n+                    }\n+                }\n+            }\n+            InfringingFieldsReason::Regions(region_errors) => {\n+                for error in region_errors {\n+                    let ty = ty.to_string();\n+                    match error {\n+                        RegionResolutionError::ConcreteFailure(origin, a, b) => {\n+                            let predicate = format!(\"{b}: {a}\");\n+                            errors\n+                                .entry((ty.clone(), predicate.clone()))\n+                                .or_default()\n+                                .push(origin.span());\n+                            if let ty::RegionKind::ReEarlyBound(ebr) = *b && ebr.has_name() {\n+                                        bounds.push((b.to_string(), a.to_string(), None));\n+                                    }\n+                        }\n+                        RegionResolutionError::GenericBoundFailure(origin, a, b) => {\n+                            let predicate = format!(\"{a}: {b}\");\n+                            errors\n+                                .entry((ty.clone(), predicate.clone()))\n+                                .or_default()\n+                                .push(origin.span());\n+                            if let infer::region_constraints::GenericKind::Param(_) = a {\n+                                bounds.push((a.to_string(), b.to_string(), None));\n+                            }\n+                        }\n+                        _ => continue,\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    for ((ty, error_predicate), spans) in errors {\n+        let span: MultiSpan = spans.into();\n+        err.span_note(\n+            span,\n+            format!(\"the `{trait_name}` impl for `{ty}` requires that `{error_predicate}`\"),\n+        );\n+    }\n+    suggest_constraining_type_params(\n+        tcx,\n+        tcx.hir().get_generics(impl_did).expect(\"impls always have generics\"),\n+        &mut err,\n+        bounds\n+            .iter()\n+            .map(|(param, constraint, def_id)| (param.as_str(), constraint.as_str(), *def_id)),\n+        None,\n+    );\n+\n+    err.emit()\n+}"}, {"sha": "948b903e509adf90925d74432a03697291492862", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,5 +1,5 @@\n use super::ItemCtxt;\n-use crate::astconv::AstConv;\n+use crate::astconv::{AstConv, OnlySelfBounds};\n use rustc_hir as hir;\n use rustc_infer::traits::util;\n use rustc_middle::ty::subst::InternalSubsts;\n@@ -26,7 +26,7 @@ fn associated_type_bounds<'tcx>(\n     );\n \n     let icx = ItemCtxt::new(tcx, assoc_item_def_id);\n-    let mut bounds = icx.astconv().compute_bounds(item_ty, ast_bounds);\n+    let mut bounds = icx.astconv().compute_bounds(item_ty, ast_bounds, OnlySelfBounds(false));\n     // Associated types are implicitly sized unless a `?Sized` bound is found\n     icx.astconv().add_implicitly_sized(&mut bounds, item_ty, ast_bounds, None, span);\n \n@@ -67,7 +67,7 @@ fn opaque_type_bounds<'tcx>(\n ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {\n     ty::print::with_no_queries!({\n         let icx = ItemCtxt::new(tcx, opaque_def_id);\n-        let mut bounds = icx.astconv().compute_bounds(item_ty, ast_bounds);\n+        let mut bounds = icx.astconv().compute_bounds(item_ty, ast_bounds, OnlySelfBounds(false));\n         // Opaque types are implicitly sized unless a `?Sized` bound is found\n         icx.astconv().add_implicitly_sized(&mut bounds, item_ty, ast_bounds, None, span);\n         debug!(?bounds);"}, {"sha": "83470342a7660bfd9e2c5cbcb2578df43b1de0ba", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 50, "deletions": 55, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,4 +1,4 @@\n-use crate::astconv::AstConv;\n+use crate::astconv::{AstConv, OnlySelfBounds};\n use crate::bounds::Bounds;\n use crate::collect::ItemCtxt;\n use crate::constrained_generic_params as cgp;\n@@ -14,9 +14,6 @@ use rustc_middle::ty::{GenericPredicates, ToPredicate};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::{Span, DUMMY_SP};\n \n-#[derive(Debug)]\n-struct OnlySelfBounds(bool);\n-\n /// Returns a list of all type predicates (explicit and implicit) for the definition with\n /// ID `def_id`. This includes all predicates returned by `predicates_defined_on`, plus\n /// `Self: Trait` predicates for traits.\n@@ -99,8 +96,9 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Gen\n             | ItemKind::Struct(_, generics)\n             | ItemKind::Union(_, generics) => generics,\n \n-            ItemKind::Trait(_, _, generics, ..) | ItemKind::TraitAlias(generics, _) => {\n-                is_trait = Some(ty::TraitRef::identity(tcx, def_id.to_def_id()));\n+            ItemKind::Trait(_, _, generics, self_bounds, ..)\n+            | ItemKind::TraitAlias(generics, self_bounds) => {\n+                is_trait = Some(self_bounds);\n                 generics\n             }\n             ItemKind::OpaqueTy(OpaqueTy { generics, .. }) => generics,\n@@ -122,10 +120,14 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Gen\n \n     // Below we'll consider the bounds on the type parameters (including `Self`)\n     // and the explicit where-clauses, but to get the full set of predicates\n-    // on a trait we need to add in the supertrait bounds and bounds found on\n-    // associated types.\n-    if let Some(_trait_ref) = is_trait {\n-        predicates.extend(tcx.implied_predicates_of(def_id).predicates.iter().cloned());\n+    // on a trait we must also consider the bounds that follow the trait's name,\n+    // like `trait Foo: A + B + C`.\n+    if let Some(self_bounds) = is_trait {\n+        predicates.extend(\n+            icx.astconv()\n+                .compute_bounds(tcx.types.self_param, self_bounds, OnlySelfBounds(false))\n+                .predicates(),\n+        );\n     }\n \n     // In default impls, we can assume that the self type implements\n@@ -225,7 +227,13 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Gen\n                 }\n \n                 let mut bounds = Bounds::default();\n-                icx.astconv().add_bounds(ty, bound_pred.bounds.iter(), &mut bounds, bound_vars);\n+                icx.astconv().add_bounds(\n+                    ty,\n+                    bound_pred.bounds.iter(),\n+                    &mut bounds,\n+                    bound_vars,\n+                    OnlySelfBounds(false),\n+                );\n                 predicates.extend(bounds.predicates());\n             }\n \n@@ -608,7 +616,7 @@ pub(super) fn implied_predicates_with_filter(\n     let (superbounds, where_bounds_that_match) = match filter {\n         PredicateFilter::All => (\n             // Convert the bounds that follow the colon (or equal in trait aliases)\n-            icx.astconv().compute_bounds(self_param_ty, bounds),\n+            icx.astconv().compute_bounds(self_param_ty, bounds, OnlySelfBounds(false)),\n             // Also include all where clause bounds\n             icx.type_parameter_bounds_in_generics(\n                 generics,\n@@ -620,7 +628,7 @@ pub(super) fn implied_predicates_with_filter(\n         ),\n         PredicateFilter::SelfOnly => (\n             // Convert the bounds that follow the colon (or equal in trait aliases)\n-            icx.astconv().compute_bounds(self_param_ty, bounds),\n+            icx.astconv().compute_bounds(self_param_ty, bounds, OnlySelfBounds(true)),\n             // Include where clause bounds for `Self`\n             icx.type_parameter_bounds_in_generics(\n                 generics,\n@@ -774,32 +782,35 @@ impl<'tcx> ItemCtxt<'tcx> {\n         only_self_bounds: OnlySelfBounds,\n         assoc_name: Option<Ident>,\n     ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n-        ast_generics\n-            .predicates\n-            .iter()\n-            .filter_map(|wp| match wp {\n-                hir::WherePredicate::BoundPredicate(bp) => Some(bp),\n-                _ => None,\n-            })\n-            .flat_map(|bp| {\n-                let bt = if bp.is_param_bound(param_def_id.to_def_id()) {\n-                    Some(ty)\n-                } else if !only_self_bounds.0 {\n-                    Some(self.to_ty(bp.bounded_ty))\n-                } else {\n-                    None\n-                };\n-                let bvars = self.tcx.late_bound_vars(bp.hir_id);\n-\n-                bp.bounds.iter().filter_map(move |b| bt.map(|bt| (bt, b, bvars))).filter(\n-                    |(_, b, _)| match assoc_name {\n-                        Some(assoc_name) => self.bound_defines_assoc_item(b, assoc_name),\n-                        None => true,\n-                    },\n-                )\n-            })\n-            .flat_map(|(bt, b, bvars)| predicates_from_bound(self, bt, b, bvars))\n-            .collect()\n+        let mut bounds = Bounds::default();\n+\n+        for predicate in ast_generics.predicates {\n+            let hir::WherePredicate::BoundPredicate(predicate) = predicate else {\n+                continue;\n+            };\n+\n+            let bound_ty = if predicate.is_param_bound(param_def_id.to_def_id()) {\n+                ty\n+            } else if !only_self_bounds.0 {\n+                self.to_ty(predicate.bounded_ty)\n+            } else {\n+                continue;\n+            };\n+\n+            let bound_vars = self.tcx.late_bound_vars(predicate.hir_id);\n+            self.astconv().add_bounds(\n+                bound_ty,\n+                predicate.bounds.iter().filter(|bound| {\n+                    assoc_name\n+                        .map_or(true, |assoc_name| self.bound_defines_assoc_item(bound, assoc_name))\n+                }),\n+                &mut bounds,\n+                bound_vars,\n+                only_self_bounds,\n+            );\n+        }\n+\n+        bounds.predicates().collect()\n     }\n \n     #[instrument(level = \"trace\", skip(self))]\n@@ -817,19 +828,3 @@ impl<'tcx> ItemCtxt<'tcx> {\n         }\n     }\n }\n-\n-/// Converts a specific `GenericBound` from the AST into a set of\n-/// predicates that apply to the self type. A vector is returned\n-/// because this can be anywhere from zero predicates (`T: ?Sized` adds no\n-/// predicates) to one (`T: Foo`) to many (`T: Bar<X = i32>` adds `T: Bar`\n-/// and `<T as Bar>::X == i32`).\n-fn predicates_from_bound<'tcx>(\n-    astconv: &dyn AstConv<'tcx>,\n-    param_ty: Ty<'tcx>,\n-    bound: &'tcx hir::GenericBound<'tcx>,\n-    bound_vars: &'tcx ty::List<ty::BoundVariableKind>,\n-) -> Vec<(ty::Predicate<'tcx>, Span)> {\n-    let mut bounds = Bounds::default();\n-    astconv.add_bounds(param_ty, [bound].into_iter(), &mut bounds, bound_vars);\n-    bounds.predicates().collect()\n-}"}, {"sha": "25ad1bed763506c827aa9d3597339740b2825049", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -107,6 +107,14 @@ pub struct CopyImplOnNonAdt {\n     pub span: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_const_param_ty_impl_on_non_adt)]\n+pub struct ConstParamTyImplOnNonAdt {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(hir_analysis_trait_object_declared_with_no_traits, code = \"E0224\")]\n pub struct TraitObjectDeclaredWithNoTraits {"}, {"sha": "961457b75794aef72d41536dfd949bc768e11eb9", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -116,7 +116,7 @@ use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode,\n \n use std::ops::Not;\n \n-use astconv::AstConv;\n+use astconv::{AstConv, OnlySelfBounds};\n use bounds::Bounds;\n \n fluent_messages! { \"../messages.ftl\" }\n@@ -531,6 +531,7 @@ pub fn hir_trait_to_predicates<'tcx>(\n         self_ty,\n         &mut bounds,\n         true,\n+        OnlySelfBounds(false),\n     );\n \n     bounds"}, {"sha": "71cf644eb50195626cad82dda2f03e10841f58f2", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -50,6 +50,14 @@ lint_deprecated_lint_name =\n lint_renamed_or_removed_lint = {$msg}\n     .suggestion = use the new name\n \n+lint_suspicious_double_ref_op =\n+    using `.{$call}()` on a double reference, which returns `{$ty}` instead of {$op ->\n+        *[should_not_happen] [{$op}]\n+        [deref] dereferencing\n+        [borrow] borrowing\n+        [clone] cloning\n+    } the inner type\n+\n lint_unknown_lint =\n     unknown lint: `{$name}`\n     .suggestion = did you mean"}, {"sha": "d7bacc6485f15a85cb2547dc990873d45c25314f", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1150,6 +1150,14 @@ pub struct NoopMethodCallDiag<'a> {\n     pub label: Span,\n }\n \n+#[derive(LintDiagnostic)]\n+#[diag(lint_suspicious_double_ref_op)]\n+pub struct SuspiciousDoubleRefDiag<'a> {\n+    pub call: Symbol,\n+    pub ty: Ty<'a>,\n+    pub op: &'static str,\n+}\n+\n // pass_by_value.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_pass_by_value)]"}, {"sha": "d054966459d855ba6d3e15ad21e04bde8c29494b", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 63, "deletions": 18, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,10 +1,11 @@\n use crate::context::LintContext;\n-use crate::lints::NoopMethodCallDiag;\n+use crate::lints::{NoopMethodCallDiag, SuspiciousDoubleRefDiag};\n use crate::LateContext;\n use crate::LateLintPass;\n use rustc_hir::def::DefKind;\n use rustc_hir::{Expr, ExprKind};\n use rustc_middle::ty;\n+use rustc_middle::ty::adjustment::Adjust;\n use rustc_span::symbol::sym;\n \n declare_lint! {\n@@ -35,14 +36,44 @@ declare_lint! {\n     \"detects the use of well-known noop methods\"\n }\n \n-declare_lint_pass!(NoopMethodCall => [NOOP_METHOD_CALL]);\n+declare_lint! {\n+    /// The `suspicious_double_ref_op` lint checks for usage of `.clone()`/`.borrow()`/`.deref()`\n+    /// on an `&&T` when `T: !Deref/Borrow/Clone`, which means the call will return the inner `&T`,\n+    /// instead of performing the operation on the underlying `T` and can be confusing.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// # #![allow(unused)]\n+    /// struct Foo;\n+    /// let foo = &&Foo;\n+    /// let clone: &Foo = foo.clone();\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Since `Foo` doesn't implement `Clone`, running `.clone()` only dereferences the double\n+    /// reference, instead of cloning the inner type which should be what was intended.\n+    pub SUSPICIOUS_DOUBLE_REF_OP,\n+    Warn,\n+    \"suspicious call of trait method on `&&T`\"\n+}\n+\n+declare_lint_pass!(NoopMethodCall => [NOOP_METHOD_CALL, SUSPICIOUS_DOUBLE_REF_OP]);\n \n impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         // We only care about method calls.\n-        let ExprKind::MethodCall(call, receiver, ..) = &expr.kind else {\n-            return\n+        let ExprKind::MethodCall(call, receiver, _, call_span) = &expr.kind else {\n+            return;\n         };\n+\n+        if call_span.from_expansion() {\n+            return;\n+        }\n+\n         // We only care about method calls corresponding to the `Clone`, `Deref` and `Borrow`\n         // traits and ignore any other method call.\n         let did = match cx.typeck_results().type_dependent_def(expr.hir_id) {\n@@ -70,25 +101,39 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n         };\n         // (Re)check that it implements the noop diagnostic.\n         let Some(name) = cx.tcx.get_diagnostic_name(i.def_id()) else { return };\n-        if !matches!(\n-            name,\n-            sym::noop_method_borrow | sym::noop_method_clone | sym::noop_method_deref\n-        ) {\n-            return;\n-        }\n+\n+        let op = match name {\n+            sym::noop_method_borrow => \"borrow\",\n+            sym::noop_method_clone => \"clone\",\n+            sym::noop_method_deref => \"deref\",\n+            _ => return,\n+        };\n+\n         let receiver_ty = cx.typeck_results().expr_ty(receiver);\n         let expr_ty = cx.typeck_results().expr_ty_adjusted(expr);\n-        if receiver_ty != expr_ty {\n-            // This lint will only trigger if the receiver type and resulting expression \\\n-            // type are the same, implying that the method call is unnecessary.\n+        let arg_adjustments = cx.typeck_results().expr_adjustments(receiver);\n+\n+        // If there is any user defined auto-deref step, then we don't want to warn.\n+        // https://github.com/rust-lang/rust-clippy/issues/9272\n+        if arg_adjustments.iter().any(|adj| matches!(adj.kind, Adjust::Deref(Some(_)))) {\n             return;\n         }\n+\n         let expr_span = expr.span;\n         let span = expr_span.with_lo(receiver.span.hi());\n-        cx.emit_spanned_lint(\n-            NOOP_METHOD_CALL,\n-            span,\n-            NoopMethodCallDiag { method: call.ident.name, receiver_ty, label: span },\n-        );\n+\n+        if receiver_ty == expr_ty {\n+            cx.emit_spanned_lint(\n+                NOOP_METHOD_CALL,\n+                span,\n+                NoopMethodCallDiag { method: call.ident.name, receiver_ty, label: span },\n+            );\n+        } else {\n+            cx.emit_spanned_lint(\n+                SUSPICIOUS_DOUBLE_REF_OP,\n+                span,\n+                SuspiciousDoubleRefDiag { call: call.ident.name, ty: expr_ty, op },\n+            )\n+        }\n     }\n }"}, {"sha": "7969b848fd95656a81f62854e1f2894f855c01cf", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -531,6 +531,7 @@ symbols! {\n         const_mut_refs,\n         const_panic,\n         const_panic_fmt,\n+        const_param_ty,\n         const_precise_live_drops,\n         const_raw_ptr_deref,\n         const_raw_ptr_to_usize_cast,"}, {"sha": "2210ef975e6c82732fa78c72098f3211de3e237e", "filename": "compiler/rustc_trait_selection/src/traits/misc.rs", "status": "modified", "additions": 86, "deletions": 15, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -2,13 +2,14 @@\n \n use crate::traits::{self, ObligationCause, ObligationCtxt};\n \n+use hir::LangItem;\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir as hir;\n use rustc_infer::infer::canonical::Canonical;\n use rustc_infer::infer::{RegionResolutionError, TyCtxtInferExt};\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::{infer::outlives::env::OutlivesEnvironment, traits::FulfillmentError};\n-use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt, TypeVisitableExt};\n+use rustc_middle::ty::{self, AdtDef, GenericArg, List, ParamEnv, Ty, TyCtxt, TypeVisitableExt};\n use rustc_span::DUMMY_SP;\n \n use super::outlives_bounds::InferCtxtExt;\n@@ -19,6 +20,11 @@ pub enum CopyImplementationError<'tcx> {\n     HasDestructor,\n }\n \n+pub enum ConstParamTyImplementationError<'tcx> {\n+    InfrigingFields(Vec<(&'tcx ty::FieldDef, Ty<'tcx>, InfringingFieldsReason<'tcx>)>),\n+    NotAnAdtOrBuiltinAllowed,\n+}\n+\n pub enum InfringingFieldsReason<'tcx> {\n     Fulfill(Vec<FulfillmentError<'tcx>>),\n     Regions(Vec<RegionResolutionError<'tcx>>),\n@@ -27,7 +33,10 @@ pub enum InfringingFieldsReason<'tcx> {\n /// Checks that the fields of the type (an ADT) all implement copy.\n ///\n /// If fields don't implement copy, return an error containing a list of\n-/// those violating fields. If it's not an ADT, returns `Err(NotAnAdt)`.\n+/// those violating fields.\n+///\n+/// If it's not an ADT, int ty, `bool`, float ty, `char`, raw pointer, `!`,\n+/// a reference or an array returns `Err(NotAnAdt)`.\n pub fn type_allowed_to_implement_copy<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -47,12 +56,82 @@ pub fn type_allowed_to_implement_copy<'tcx>(\n         | ty::Ref(_, _, hir::Mutability::Not)\n         | ty::Array(..) => return Ok(()),\n \n-        ty::Adt(adt, substs) => (adt, substs),\n+        &ty::Adt(adt, substs) => (adt, substs),\n \n         _ => return Err(CopyImplementationError::NotAnAdt),\n     };\n \n-    let copy_def_id = tcx.require_lang_item(hir::LangItem::Copy, Some(parent_cause.span));\n+    all_fields_implement_trait(\n+        tcx,\n+        param_env,\n+        self_type,\n+        adt,\n+        substs,\n+        parent_cause,\n+        hir::LangItem::Copy,\n+    )\n+    .map_err(CopyImplementationError::InfringingFields)?;\n+\n+    if adt.has_dtor(tcx) {\n+        return Err(CopyImplementationError::HasDestructor);\n+    }\n+\n+    Ok(())\n+}\n+\n+/// Checks that the fields of the type (an ADT) all implement `ConstParamTy`.\n+///\n+/// If fields don't implement `ConstParamTy`, return an error containing a list of\n+/// those violating fields.\n+///\n+/// If it's not an ADT, int ty, `bool` or `char`, returns `Err(NotAnAdtOrBuiltinAllowed)`.\n+pub fn type_allowed_to_implement_const_param_ty<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    self_type: Ty<'tcx>,\n+    parent_cause: ObligationCause<'tcx>,\n+) -> Result<(), ConstParamTyImplementationError<'tcx>> {\n+    let (adt, substs) = match self_type.kind() {\n+        // `core` provides these impls.\n+        ty::Uint(_)\n+        | ty::Int(_)\n+        | ty::Bool\n+        | ty::Char\n+        | ty::Str\n+        | ty::Array(..)\n+        | ty::Slice(_)\n+        | ty::Ref(.., hir::Mutability::Not) => return Ok(()),\n+\n+        &ty::Adt(adt, substs) => (adt, substs),\n+\n+        _ => return Err(ConstParamTyImplementationError::NotAnAdtOrBuiltinAllowed),\n+    };\n+\n+    all_fields_implement_trait(\n+        tcx,\n+        param_env,\n+        self_type,\n+        adt,\n+        substs,\n+        parent_cause,\n+        hir::LangItem::ConstParamTy,\n+    )\n+    .map_err(ConstParamTyImplementationError::InfrigingFields)?;\n+\n+    Ok(())\n+}\n+\n+/// Check that all fields of a given `adt` implement `lang_item` trait.\n+pub fn all_fields_implement_trait<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    self_type: Ty<'tcx>,\n+    adt: AdtDef<'tcx>,\n+    substs: &'tcx List<GenericArg<'tcx>>,\n+    parent_cause: ObligationCause<'tcx>,\n+    lang_item: LangItem,\n+) -> Result<(), Vec<(&'tcx ty::FieldDef, Ty<'tcx>, InfringingFieldsReason<'tcx>)>> {\n+    let trait_def_id = tcx.require_lang_item(lang_item, Some(parent_cause.span));\n \n     let mut infringing = Vec::new();\n     for variant in adt.variants() {\n@@ -93,15 +172,15 @@ pub fn type_allowed_to_implement_copy<'tcx>(\n             // between expected and found const-generic types. Don't report an\n             // additional copy error here, since it's not typically useful.\n             if !normalization_errors.is_empty() || ty.references_error() {\n-                tcx.sess.delay_span_bug(field_span, format!(\"couldn't normalize struct field `{unnormalized_ty}` when checking Copy implementation\"));\n+                tcx.sess.delay_span_bug(field_span, format!(\"couldn't normalize struct field `{unnormalized_ty}` when checking {tr} implementation\", tr = tcx.def_path_str(trait_def_id)));\n                 continue;\n             }\n \n             ocx.register_bound(\n                 ObligationCause::dummy_with_span(field_ty_span),\n                 param_env,\n                 ty,\n-                copy_def_id,\n+                trait_def_id,\n             );\n             let errors = ocx.select_all_or_error();\n             if !errors.is_empty() {\n@@ -124,15 +203,7 @@ pub fn type_allowed_to_implement_copy<'tcx>(\n         }\n     }\n \n-    if !infringing.is_empty() {\n-        return Err(CopyImplementationError::InfringingFields(infringing));\n-    }\n-\n-    if adt.has_dtor(tcx) {\n-        return Err(CopyImplementationError::HasDestructor);\n-    }\n-\n-    Ok(())\n+    if infringing.is_empty() { Ok(()) } else { Err(infringing) }\n }\n \n pub fn check_tys_might_be_eq<'tcx>("}, {"sha": "065f1b3e70e689c360b408a8bf0c9bc1e9a6b162", "filename": "library/core/src/ascii.rs", "status": "modified", "additions": 41, "deletions": 30, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/library%2Fcore%2Fsrc%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/library%2Fcore%2Fsrc%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fascii.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -9,10 +9,10 @@\n \n #![stable(feature = \"core_ascii\", since = \"1.26.0\")]\n \n+use crate::escape;\n use crate::fmt;\n use crate::iter::FusedIterator;\n-use crate::ops::Range;\n-use crate::str::from_utf8_unchecked;\n+use crate::num::NonZeroUsize;\n \n /// An iterator over the escaped version of a byte.\n ///\n@@ -21,10 +21,7 @@ use crate::str::from_utf8_unchecked;\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n-pub struct EscapeDefault {\n-    range: Range<u8>,\n-    data: [u8; 4],\n-}\n+pub struct EscapeDefault(escape::EscapeIterInner<4>);\n \n /// Returns an iterator that produces an escaped version of a `u8`.\n ///\n@@ -90,21 +87,9 @@ pub struct EscapeDefault {\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn escape_default(c: u8) -> EscapeDefault {\n-    let (data, len) = match c {\n-        b'\\t' => ([b'\\\\', b't', 0, 0], 2),\n-        b'\\r' => ([b'\\\\', b'r', 0, 0], 2),\n-        b'\\n' => ([b'\\\\', b'n', 0, 0], 2),\n-        b'\\\\' => ([b'\\\\', b'\\\\', 0, 0], 2),\n-        b'\\'' => ([b'\\\\', b'\\'', 0, 0], 2),\n-        b'\"' => ([b'\\\\', b'\"', 0, 0], 2),\n-        b'\\x20'..=b'\\x7e' => ([c, 0, 0, 0], 1),\n-        _ => {\n-            let hex_digits: &[u8; 16] = b\"0123456789abcdef\";\n-            ([b'\\\\', b'x', hex_digits[(c >> 4) as usize], hex_digits[(c & 0xf) as usize]], 4)\n-        }\n-    };\n-\n-    return EscapeDefault { range: 0..len, data };\n+    let mut data = [0; 4];\n+    let range = escape::escape_ascii_into(&mut data, c);\n+    EscapeDefault(escape::EscapeIterInner::new(data, range))\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -113,33 +98,59 @@ impl Iterator for EscapeDefault {\n \n     #[inline]\n     fn next(&mut self) -> Option<u8> {\n-        self.range.next().map(|i| self.data[i as usize])\n+        self.0.next()\n     }\n+\n+    #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.range.size_hint()\n+        let n = self.0.len();\n+        (n, Some(n))\n+    }\n+\n+    #[inline]\n+    fn count(self) -> usize {\n+        self.0.len()\n     }\n+\n+    #[inline]\n     fn last(mut self) -> Option<u8> {\n-        self.next_back()\n+        self.0.next_back()\n+    }\n+\n+    #[inline]\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        self.0.advance_by(n)\n     }\n }\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl DoubleEndedIterator for EscapeDefault {\n+    #[inline]\n     fn next_back(&mut self) -> Option<u8> {\n-        self.range.next_back().map(|i| self.data[i as usize])\n+        self.0.next_back()\n+    }\n+\n+    #[inline]\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        self.0.advance_back_by(n)\n     }\n }\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl ExactSizeIterator for EscapeDefault {}\n+impl ExactSizeIterator for EscapeDefault {\n+    #[inline]\n+    fn len(&self) -> usize {\n+        self.0.len()\n+    }\n+}\n+\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl FusedIterator for EscapeDefault {}\n \n #[stable(feature = \"ascii_escape_display\", since = \"1.39.0\")]\n impl fmt::Display for EscapeDefault {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        // SAFETY: ok because `escape_default` created only valid utf-8 data\n-        f.write_str(unsafe {\n-            from_utf8_unchecked(&self.data[(self.range.start as usize)..(self.range.end as usize)])\n-        })\n+        f.write_str(self.0.as_str())\n     }\n }\n "}, {"sha": "2408f1780755437a94089ef2b3e702aad8f17d5a", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 21, "deletions": 36, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -380,20 +380,7 @@ impl char {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn escape_unicode(self) -> EscapeUnicode {\n-        let c = self as u32;\n-\n-        // or-ing 1 ensures that for c==0 the code computes that one\n-        // digit should be printed and (which is the same) avoids the\n-        // (31 - 32) underflow\n-        let msb = 31 - (c | 1).leading_zeros();\n-\n-        // the index of the most significant hex digit\n-        let ms_hex_digit = msb / 4;\n-        EscapeUnicode {\n-            c: self,\n-            state: EscapeUnicodeState::Backslash,\n-            hex_digit_idx: ms_hex_digit as usize,\n-        }\n+        EscapeUnicode::new(self)\n     }\n \n     /// An extended version of `escape_debug` that optionally permits escaping\n@@ -403,21 +390,20 @@ impl char {\n     /// characters, and double quotes in strings.\n     #[inline]\n     pub(crate) fn escape_debug_ext(self, args: EscapeDebugExtArgs) -> EscapeDebug {\n-        let init_state = match self {\n-            '\\0' => EscapeDefaultState::Backslash('0'),\n-            '\\t' => EscapeDefaultState::Backslash('t'),\n-            '\\r' => EscapeDefaultState::Backslash('r'),\n-            '\\n' => EscapeDefaultState::Backslash('n'),\n-            '\\\\' => EscapeDefaultState::Backslash(self),\n-            '\"' if args.escape_double_quote => EscapeDefaultState::Backslash(self),\n-            '\\'' if args.escape_single_quote => EscapeDefaultState::Backslash(self),\n+        match self {\n+            '\\0' => EscapeDebug::backslash(b'0'),\n+            '\\t' => EscapeDebug::backslash(b't'),\n+            '\\r' => EscapeDebug::backslash(b'r'),\n+            '\\n' => EscapeDebug::backslash(b'n'),\n+            '\\\\' => EscapeDebug::backslash(b'\\\\'),\n+            '\"' if args.escape_double_quote => EscapeDebug::backslash(b'\"'),\n+            '\\'' if args.escape_single_quote => EscapeDebug::backslash(b'\\''),\n             _ if args.escape_grapheme_extended && self.is_grapheme_extended() => {\n-                EscapeDefaultState::Unicode(self.escape_unicode())\n+                EscapeDebug::from_unicode(self.escape_unicode())\n             }\n-            _ if is_printable(self) => EscapeDefaultState::Char(self),\n-            _ => EscapeDefaultState::Unicode(self.escape_unicode()),\n-        };\n-        EscapeDebug(EscapeDefault { state: init_state })\n+            _ if is_printable(self) => EscapeDebug::printable(self),\n+            _ => EscapeDebug::from_unicode(self.escape_unicode()),\n+        }\n     }\n \n     /// Returns an iterator that yields the literal escape code of a character\n@@ -515,15 +501,14 @@ impl char {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn escape_default(self) -> EscapeDefault {\n-        let init_state = match self {\n-            '\\t' => EscapeDefaultState::Backslash('t'),\n-            '\\r' => EscapeDefaultState::Backslash('r'),\n-            '\\n' => EscapeDefaultState::Backslash('n'),\n-            '\\\\' | '\\'' | '\"' => EscapeDefaultState::Backslash(self),\n-            '\\x20'..='\\x7e' => EscapeDefaultState::Char(self),\n-            _ => EscapeDefaultState::Unicode(self.escape_unicode()),\n-        };\n-        EscapeDefault { state: init_state }\n+        match self {\n+            '\\t' => EscapeDefault::backslash(b't'),\n+            '\\r' => EscapeDefault::backslash(b'r'),\n+            '\\n' => EscapeDefault::backslash(b'n'),\n+            '\\\\' | '\\'' | '\"' => EscapeDefault::backslash(self as u8),\n+            '\\x20'..='\\x7e' => EscapeDefault::printable(self as u8),\n+            _ => EscapeDefault::from_unicode(self.escape_unicode()),\n+        }\n     }\n \n     /// Returns the number of bytes this `char` would need if encoded in UTF-8."}, {"sha": "e186db7052cd04ce09ae427546623943bf33b747", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 111, "deletions": 140, "changes": 251, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -39,8 +39,10 @@ pub use self::methods::encode_utf16_raw;\n pub use self::methods::encode_utf8_raw;\n \n use crate::error::Error;\n+use crate::escape;\n use crate::fmt::{self, Write};\n use crate::iter::FusedIterator;\n+use crate::num::NonZeroUsize;\n \n pub(crate) use self::methods::EscapeDebugExtArgs;\n \n@@ -146,103 +148,52 @@ pub const fn from_digit(num: u32, radix: u32) -> Option<char> {\n /// [`escape_unicode`]: char::escape_unicode\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct EscapeUnicode {\n-    c: char,\n-    state: EscapeUnicodeState,\n-\n-    // The index of the next hex digit to be printed (0 if none),\n-    // i.e., the number of remaining hex digits to be printed;\n-    // increasing from the least significant digit: 0x543210\n-    hex_digit_idx: usize,\n-}\n+pub struct EscapeUnicode(escape::EscapeIterInner<10>);\n \n-// The enum values are ordered so that their representation is the\n-// same as the remaining length (besides the hexadecimal digits). This\n-// likely makes `len()` a single load from memory) and inline-worth.\n-#[derive(Clone, Debug)]\n-enum EscapeUnicodeState {\n-    Done,\n-    RightBrace,\n-    Value,\n-    LeftBrace,\n-    Type,\n-    Backslash,\n+impl EscapeUnicode {\n+    fn new(chr: char) -> Self {\n+        let mut data = [0; 10];\n+        let range = escape::escape_unicode_into(&mut data, chr);\n+        Self(escape::EscapeIterInner::new(data, range))\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Iterator for EscapeUnicode {\n     type Item = char;\n \n+    #[inline]\n     fn next(&mut self) -> Option<char> {\n-        match self.state {\n-            EscapeUnicodeState::Backslash => {\n-                self.state = EscapeUnicodeState::Type;\n-                Some('\\\\')\n-            }\n-            EscapeUnicodeState::Type => {\n-                self.state = EscapeUnicodeState::LeftBrace;\n-                Some('u')\n-            }\n-            EscapeUnicodeState::LeftBrace => {\n-                self.state = EscapeUnicodeState::Value;\n-                Some('{')\n-            }\n-            EscapeUnicodeState::Value => {\n-                let hex_digit = ((self.c as u32) >> (self.hex_digit_idx * 4)) & 0xf;\n-                let c = char::from_digit(hex_digit, 16).unwrap();\n-                if self.hex_digit_idx == 0 {\n-                    self.state = EscapeUnicodeState::RightBrace;\n-                } else {\n-                    self.hex_digit_idx -= 1;\n-                }\n-                Some(c)\n-            }\n-            EscapeUnicodeState::RightBrace => {\n-                self.state = EscapeUnicodeState::Done;\n-                Some('}')\n-            }\n-            EscapeUnicodeState::Done => None,\n-        }\n+        self.0.next().map(char::from)\n     }\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let n = self.len();\n+        let n = self.0.len();\n         (n, Some(n))\n     }\n \n     #[inline]\n     fn count(self) -> usize {\n-        self.len()\n+        self.0.len()\n     }\n \n-    fn last(self) -> Option<char> {\n-        match self.state {\n-            EscapeUnicodeState::Done => None,\n+    #[inline]\n+    fn last(mut self) -> Option<char> {\n+        self.0.next_back().map(char::from)\n+    }\n \n-            EscapeUnicodeState::RightBrace\n-            | EscapeUnicodeState::Value\n-            | EscapeUnicodeState::LeftBrace\n-            | EscapeUnicodeState::Type\n-            | EscapeUnicodeState::Backslash => Some('}'),\n-        }\n+    #[inline]\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        self.0.advance_by(n)\n     }\n }\n \n #[stable(feature = \"exact_size_escape\", since = \"1.11.0\")]\n impl ExactSizeIterator for EscapeUnicode {\n     #[inline]\n     fn len(&self) -> usize {\n-        // The match is a single memory access with no branching\n-        self.hex_digit_idx\n-            + match self.state {\n-                EscapeUnicodeState::Done => 0,\n-                EscapeUnicodeState::RightBrace => 1,\n-                EscapeUnicodeState::Value => 2,\n-                EscapeUnicodeState::LeftBrace => 3,\n-                EscapeUnicodeState::Type => 4,\n-                EscapeUnicodeState::Backslash => 5,\n-            }\n+        self.0.len()\n     }\n }\n \n@@ -252,10 +203,7 @@ impl FusedIterator for EscapeUnicode {}\n #[stable(feature = \"char_struct_display\", since = \"1.16.0\")]\n impl fmt::Display for EscapeUnicode {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        for c in self.clone() {\n-            f.write_char(c)?;\n-        }\n-        Ok(())\n+        f.write_str(self.0.as_str())\n     }\n }\n \n@@ -267,90 +215,60 @@ impl fmt::Display for EscapeUnicode {\n /// [`escape_default`]: char::escape_default\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct EscapeDefault {\n-    state: EscapeDefaultState,\n-}\n+pub struct EscapeDefault(escape::EscapeIterInner<10>);\n \n-#[derive(Clone, Debug)]\n-enum EscapeDefaultState {\n-    Done,\n-    Char(char),\n-    Backslash(char),\n-    Unicode(EscapeUnicode),\n+impl EscapeDefault {\n+    fn printable(chr: u8) -> Self {\n+        let data = [chr, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n+        Self(escape::EscapeIterInner::new(data, 0..1))\n+    }\n+\n+    fn backslash(chr: u8) -> Self {\n+        let data = [b'\\\\', chr, 0, 0, 0, 0, 0, 0, 0, 0];\n+        Self(escape::EscapeIterInner::new(data, 0..2))\n+    }\n+\n+    fn from_unicode(esc: EscapeUnicode) -> Self {\n+        Self(esc.0)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Iterator for EscapeDefault {\n     type Item = char;\n \n+    #[inline]\n     fn next(&mut self) -> Option<char> {\n-        match self.state {\n-            EscapeDefaultState::Backslash(c) => {\n-                self.state = EscapeDefaultState::Char(c);\n-                Some('\\\\')\n-            }\n-            EscapeDefaultState::Char(c) => {\n-                self.state = EscapeDefaultState::Done;\n-                Some(c)\n-            }\n-            EscapeDefaultState::Done => None,\n-            EscapeDefaultState::Unicode(ref mut iter) => iter.next(),\n-        }\n+        self.0.next().map(char::from)\n     }\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let n = self.len();\n+        let n = self.0.len();\n         (n, Some(n))\n     }\n \n     #[inline]\n     fn count(self) -> usize {\n-        self.len()\n+        self.0.len()\n     }\n \n-    fn nth(&mut self, n: usize) -> Option<char> {\n-        match self.state {\n-            EscapeDefaultState::Backslash(c) if n == 0 => {\n-                self.state = EscapeDefaultState::Char(c);\n-                Some('\\\\')\n-            }\n-            EscapeDefaultState::Backslash(c) if n == 1 => {\n-                self.state = EscapeDefaultState::Done;\n-                Some(c)\n-            }\n-            EscapeDefaultState::Backslash(_) => {\n-                self.state = EscapeDefaultState::Done;\n-                None\n-            }\n-            EscapeDefaultState::Char(c) => {\n-                self.state = EscapeDefaultState::Done;\n-\n-                if n == 0 { Some(c) } else { None }\n-            }\n-            EscapeDefaultState::Done => None,\n-            EscapeDefaultState::Unicode(ref mut i) => i.nth(n),\n-        }\n+    #[inline]\n+    fn last(mut self) -> Option<char> {\n+        self.0.next_back().map(char::from)\n     }\n \n-    fn last(self) -> Option<char> {\n-        match self.state {\n-            EscapeDefaultState::Unicode(iter) => iter.last(),\n-            EscapeDefaultState::Done => None,\n-            EscapeDefaultState::Backslash(c) | EscapeDefaultState::Char(c) => Some(c),\n-        }\n+    #[inline]\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        self.0.advance_by(n)\n     }\n }\n \n #[stable(feature = \"exact_size_escape\", since = \"1.11.0\")]\n impl ExactSizeIterator for EscapeDefault {\n+    #[inline]\n     fn len(&self) -> usize {\n-        match self.state {\n-            EscapeDefaultState::Done => 0,\n-            EscapeDefaultState::Char(_) => 1,\n-            EscapeDefaultState::Backslash(_) => 2,\n-            EscapeDefaultState::Unicode(ref iter) => iter.len(),\n-        }\n+        self.0.len()\n     }\n }\n \n@@ -360,10 +278,7 @@ impl FusedIterator for EscapeDefault {}\n #[stable(feature = \"char_struct_display\", since = \"1.16.0\")]\n impl fmt::Display for EscapeDefault {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        for c in self.clone() {\n-            f.write_char(c)?;\n-        }\n-        Ok(())\n+        f.write_str(self.0.as_str())\n     }\n }\n \n@@ -375,29 +290,85 @@ impl fmt::Display for EscapeDefault {\n /// [`escape_debug`]: char::escape_debug\n #[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n #[derive(Clone, Debug)]\n-pub struct EscapeDebug(EscapeDefault);\n+pub struct EscapeDebug(EscapeDebugInner);\n+\n+#[derive(Clone, Debug)]\n+// Note: It\u2019s possible to manually encode the EscapeDebugInner inside of\n+// EscapeIterInner (e.g. with alive=254..255 indicating that data[0..4] holds\n+// a char) which would likely result in a more optimised code.  For now we use\n+// the option easier to implement.\n+enum EscapeDebugInner {\n+    Bytes(escape::EscapeIterInner<10>),\n+    Char(char),\n+}\n+\n+impl EscapeDebug {\n+    fn printable(chr: char) -> Self {\n+        Self(EscapeDebugInner::Char(chr))\n+    }\n+\n+    fn backslash(chr: u8) -> Self {\n+        let data = [b'\\\\', chr, 0, 0, 0, 0, 0, 0, 0, 0];\n+        let iter = escape::EscapeIterInner::new(data, 0..2);\n+        Self(EscapeDebugInner::Bytes(iter))\n+    }\n+\n+    fn from_unicode(esc: EscapeUnicode) -> Self {\n+        Self(EscapeDebugInner::Bytes(esc.0))\n+    }\n+\n+    fn clear(&mut self) {\n+        let bytes = escape::EscapeIterInner::new([0; 10], 0..0);\n+        self.0 = EscapeDebugInner::Bytes(bytes);\n+    }\n+}\n \n #[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n impl Iterator for EscapeDebug {\n     type Item = char;\n+\n+    #[inline]\n     fn next(&mut self) -> Option<char> {\n-        self.0.next()\n+        match self.0 {\n+            EscapeDebugInner::Bytes(ref mut bytes) => bytes.next().map(char::from),\n+            EscapeDebugInner::Char(chr) => {\n+                self.clear();\n+                Some(chr)\n+            }\n+        }\n     }\n+\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.0.size_hint()\n+        let n = self.len();\n+        (n, Some(n))\n+    }\n+\n+    #[inline]\n+    fn count(self) -> usize {\n+        self.len()\n     }\n }\n \n #[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n-impl ExactSizeIterator for EscapeDebug {}\n+impl ExactSizeIterator for EscapeDebug {\n+    fn len(&self) -> usize {\n+        match &self.0 {\n+            EscapeDebugInner::Bytes(bytes) => bytes.len(),\n+            EscapeDebugInner::Char(_) => 1,\n+        }\n+    }\n+}\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl FusedIterator for EscapeDebug {}\n \n #[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n impl fmt::Display for EscapeDebug {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(&self.0, f)\n+        match &self.0 {\n+            EscapeDebugInner::Bytes(bytes) => f.write_str(bytes.as_str()),\n+            EscapeDebugInner::Char(chr) => f.write_char(*chr),\n+        }\n     }\n }\n "}, {"sha": "20ac3cf027f87fc87b4ff186f5606e6916d8a0c0", "filename": "library/core/src/escape.rs", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/library%2Fcore%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/library%2Fcore%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fescape.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -0,0 +1,99 @@\n+//! Helper code for character escaping.\n+\n+use crate::num::NonZeroUsize;\n+use crate::ops::Range;\n+\n+const HEX_DIGITS: [u8; 16] = *b\"0123456789abcdef\";\n+\n+/// Escapes a byte into provided buffer; returns length of escaped\n+/// representation.\n+pub(crate) fn escape_ascii_into(output: &mut [u8; 4], byte: u8) -> Range<u8> {\n+    let (data, len) = match byte {\n+        b'\\t' => ([b'\\\\', b't', 0, 0], 2),\n+        b'\\r' => ([b'\\\\', b'r', 0, 0], 2),\n+        b'\\n' => ([b'\\\\', b'n', 0, 0], 2),\n+        b'\\\\' => ([b'\\\\', b'\\\\', 0, 0], 2),\n+        b'\\'' => ([b'\\\\', b'\\'', 0, 0], 2),\n+        b'\"' => ([b'\\\\', b'\"', 0, 0], 2),\n+        b'\\x20'..=b'\\x7e' => ([byte, 0, 0, 0], 1),\n+        _ => {\n+            let hi = HEX_DIGITS[usize::from(byte >> 4)];\n+            let lo = HEX_DIGITS[usize::from(byte & 0xf)];\n+            ([b'\\\\', b'x', hi, lo], 4)\n+        }\n+    };\n+    *output = data;\n+    0..(len as u8)\n+}\n+\n+/// Escapes a character into provided buffer using `\\u{NNNN}` representation.\n+pub(crate) fn escape_unicode_into(output: &mut [u8; 10], ch: char) -> Range<u8> {\n+    output[9] = b'}';\n+\n+    let ch = ch as u32;\n+    output[3] = HEX_DIGITS[((ch >> 20) & 15) as usize];\n+    output[4] = HEX_DIGITS[((ch >> 16) & 15) as usize];\n+    output[5] = HEX_DIGITS[((ch >> 12) & 15) as usize];\n+    output[6] = HEX_DIGITS[((ch >> 8) & 15) as usize];\n+    output[7] = HEX_DIGITS[((ch >> 4) & 15) as usize];\n+    output[8] = HEX_DIGITS[((ch >> 0) & 15) as usize];\n+\n+    // or-ing 1 ensures that for ch==0 the code computes that one digit should\n+    // be printed.\n+    let start = (ch | 1).leading_zeros() as usize / 4 - 2;\n+    output[start..start + 3].copy_from_slice(b\"\\\\u{\");\n+\n+    (start as u8)..10\n+}\n+\n+/// An iterator over an fixed-size array.\n+///\n+/// This is essentially equivalent to array\u2019s IntoIter except that indexes are\n+/// limited to u8 to reduce size of the structure.\n+#[derive(Clone, Debug)]\n+pub(crate) struct EscapeIterInner<const N: usize> {\n+    // Invariant: data[alive] is all ASCII.\n+    pub(crate) data: [u8; N],\n+\n+    // Invariant: alive.start <= alive.end <= N.\n+    pub(crate) alive: Range<u8>,\n+}\n+\n+impl<const N: usize> EscapeIterInner<N> {\n+    pub fn new(data: [u8; N], alive: Range<u8>) -> Self {\n+        const { assert!(N < 256) };\n+        debug_assert!(alive.start <= alive.end && usize::from(alive.end) <= N, \"{alive:?}\");\n+        let this = Self { data, alive };\n+        debug_assert!(this.as_bytes().is_ascii(), \"Expected ASCII, got {:?}\", this.as_bytes());\n+        this\n+    }\n+\n+    fn as_bytes(&self) -> &[u8] {\n+        &self.data[usize::from(self.alive.start)..usize::from(self.alive.end)]\n+    }\n+\n+    pub fn as_str(&self) -> &str {\n+        // SAFETY: self.data[self.alive] is all ASCII characters.\n+        unsafe { crate::str::from_utf8_unchecked(self.as_bytes()) }\n+    }\n+\n+    pub fn len(&self) -> usize {\n+        usize::from(self.alive.end - self.alive.start)\n+    }\n+\n+    pub fn next(&mut self) -> Option<u8> {\n+        self.alive.next().map(|i| self.data[usize::from(i)])\n+    }\n+\n+    pub fn next_back(&mut self) -> Option<u8> {\n+        self.alive.next_back().map(|i| self.data[usize::from(i)])\n+    }\n+\n+    pub fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        self.alive.advance_by(n)\n+    }\n+\n+    pub fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        self.alive.advance_back_by(n)\n+    }\n+}"}, {"sha": "a535a011aafe2cb355b417d3c82de6b737a251f2", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -162,6 +162,7 @@\n #![feature(const_waker)]\n #![feature(core_panic)]\n #![feature(duration_consts_float)]\n+#![feature(internal_impls_macro)]\n #![feature(ip)]\n #![feature(is_ascii_octdigit)]\n #![feature(maybe_uninit_uninit_array)]\n@@ -376,6 +377,7 @@ pub mod alloc;\n \n // note: does not need to be public\n mod bool;\n+mod escape;\n mod tuple;\n mod unit;\n "}, {"sha": "52f3d208aba4e591094ad565780b3b34f60fe3b3", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 131, "deletions": 52, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -12,6 +12,60 @@ use crate::fmt::Debug;\n use crate::hash::Hash;\n use crate::hash::Hasher;\n \n+/// Implements a given marker trait for multiple types at the same time.\n+///\n+/// The basic syntax looks like this:\n+/// ```ignore private macro\n+/// marker_impls! { MarkerTrait for u8, i8 }\n+/// ```\n+/// You can also implement `unsafe` traits\n+/// ```ignore private macro\n+/// marker_impls! { unsafe MarkerTrait for u8, i8 }\n+/// ```\n+/// Add attributes to all impls:\n+/// ```ignore private macro\n+/// marker_impls! {\n+///     #[allow(lint)]\n+///     #[unstable(feature = \"marker_trait\", issue = \"none\")]\n+///     MarkerTrait for u8, i8\n+/// }\n+/// ```\n+/// And use generics:\n+/// ```ignore private macro\n+/// marker_impls! {\n+///     MarkerTrait for\n+///         u8, i8,\n+///         {T: ?Sized} *const T,\n+///         {T: ?Sized} *mut T,\n+///         {T: MarkerTrait} PhantomData<T>,\n+///         u32,\n+/// }\n+/// ```\n+#[unstable(feature = \"internal_impls_macro\", issue = \"none\")]\n+macro marker_impls {\n+    ( $(#[$($meta:tt)*])* $Trait:ident for $( $({$($bounds:tt)*})? $T:ty ),+ $(,)?) => {\n+        // This inner macro is needed because... idk macros are weird.\n+        // It allows repeating `meta` on all impls.\n+        #[unstable(feature = \"internal_impls_macro\", issue = \"none\")]\n+        macro _impl {\n+            ( $$({$$($$bounds_:tt)*})? $$T_:ty ) => {\n+                $(#[$($meta)*])* impl<$$($$($$bounds_)*)?> $Trait for $$T_ {}\n+            }\n+        }\n+        $( _impl! { $({$($bounds)*})? $T } )+\n+    },\n+    ( $(#[$($meta:tt)*])* unsafe $Trait:ident for $( $({$($bounds:tt)*})? $T:ty ),+ $(,)?) => {\n+        #[unstable(feature = \"internal_impls_macro\", issue = \"none\")]\n+        macro _impl {\n+            ( $$({$$($$bounds_:tt)*})? $$T_:ty ) => {\n+                $(#[$($meta)*])* unsafe impl<$$($$($$bounds_)*)?> $Trait for $$T_ {}\n+            }\n+        }\n+\n+        $( _impl! { $({$($bounds)*})? $T } )+\n+    },\n+}\n+\n /// Types that can be transferred across thread boundaries.\n ///\n /// This trait is automatically implemented when the compiler determines it's\n@@ -214,6 +268,20 @@ pub trait StructuralEq {\n     // Empty.\n }\n \n+// FIXME: Remove special cases of these types from the compiler pattern checking code and always check `T: StructuralEq` instead\n+marker_impls! {\n+    #[unstable(feature = \"structural_match\", issue = \"31434\")]\n+    StructuralEq for\n+        usize, u8, u16, u32, u64, u128,\n+        isize, i8, i16, i32, i64, i128,\n+        bool,\n+        char,\n+        str /* Technically requires `[u8]: StructuralEq` */,\n+        {T, const N: usize} [T; N],\n+        {T} [T],\n+        {T: ?Sized} &T,\n+}\n+\n /// Types whose values can be duplicated simply by copying bits.\n ///\n /// By default, variable bindings have 'move semantics.' In other\n@@ -401,6 +469,30 @@ pub macro Copy($item:item) {\n     /* compiler built-in */\n }\n \n+// Implementations of `Copy` for primitive types.\n+//\n+// Implementations that cannot be described in Rust\n+// are implemented in `traits::SelectionContext::copy_clone_conditions()`\n+// in `rustc_trait_selection`.\n+marker_impls! {\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    Copy for\n+        usize, u8, u16, u32, u64, u128,\n+        isize, i8, i16, i32, i64, i128,\n+        f32, f64,\n+        bool, char,\n+        {T: ?Sized} *const T,\n+        {T: ?Sized} *mut T,\n+\n+}\n+\n+#[unstable(feature = \"never_type\", issue = \"35121\")]\n+impl Copy for ! {}\n+\n+/// Shared references can be copied, but mutable references *cannot*!\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized> Copy for &T {}\n+\n /// Types for which it is safe to share references between threads.\n ///\n /// This trait is automatically implemented when the compiler determines\n@@ -778,11 +870,14 @@ pub trait DiscriminantKind {\n pub(crate) unsafe auto trait Freeze {}\n \n impl<T: ?Sized> !Freeze for UnsafeCell<T> {}\n-unsafe impl<T: ?Sized> Freeze for PhantomData<T> {}\n-unsafe impl<T: ?Sized> Freeze for *const T {}\n-unsafe impl<T: ?Sized> Freeze for *mut T {}\n-unsafe impl<T: ?Sized> Freeze for &T {}\n-unsafe impl<T: ?Sized> Freeze for &mut T {}\n+marker_impls! {\n+    unsafe Freeze for\n+        {T: ?Sized} PhantomData<T>,\n+        {T: ?Sized} *const T,\n+        {T: ?Sized} *mut T,\n+        {T: ?Sized} &T,\n+        {T: ?Sized} &mut T,\n+}\n \n /// Types that can be safely moved after being pinned.\n ///\n@@ -843,17 +938,19 @@ pub struct PhantomPinned;\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n impl !Unpin for PhantomPinned {}\n \n-#[stable(feature = \"pin\", since = \"1.33.0\")]\n-impl<'a, T: ?Sized + 'a> Unpin for &'a T {}\n-\n-#[stable(feature = \"pin\", since = \"1.33.0\")]\n-impl<'a, T: ?Sized + 'a> Unpin for &'a mut T {}\n-\n-#[stable(feature = \"pin_raw\", since = \"1.38.0\")]\n-impl<T: ?Sized> Unpin for *const T {}\n+marker_impls! {\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    Unpin for\n+        {T: ?Sized} &T,\n+        {T: ?Sized} &mut T,\n+}\n \n-#[stable(feature = \"pin_raw\", since = \"1.38.0\")]\n-impl<T: ?Sized> Unpin for *mut T {}\n+marker_impls! {\n+    #[stable(feature = \"pin_raw\", since = \"1.38.0\")]\n+    Unpin for\n+        {T: ?Sized} *const T,\n+        {T: ?Sized} *mut T,\n+}\n \n /// A marker for types that can be dropped.\n ///\n@@ -888,43 +985,25 @@ pub trait Tuple {}\n )]\n pub trait PointerLike {}\n \n-/// Implementations of `Copy` for primitive types.\n-///\n-/// Implementations that cannot be described in Rust\n-/// are implemented in `traits::SelectionContext::copy_clone_conditions()`\n-/// in `rustc_trait_selection`.\n-mod copy_impls {\n-\n-    use super::Copy;\n-\n-    macro_rules! impl_copy {\n-        ($($t:ty)*) => {\n-            $(\n-                #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-                impl Copy for $t {}\n-            )*\n-        }\n-    }\n-\n-    impl_copy! {\n-        usize u8 u16 u32 u64 u128\n-        isize i8 i16 i32 i64 i128\n-        f32 f64\n-        bool char\n-    }\n-\n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n-    impl Copy for ! {}\n-\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<T: ?Sized> Copy for *const T {}\n-\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<T: ?Sized> Copy for *mut T {}\n-\n-    /// Shared references can be copied, but mutable references *cannot*!\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<T: ?Sized> Copy for &T {}\n+/// A marker for types which can be used as types of `const` generic parameters.\n+#[cfg_attr(not(bootstrap), lang = \"const_param_ty\")]\n+#[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n+#[rustc_on_unimplemented(message = \"`{Self}` can't be used as a const parameter type\")]\n+pub trait ConstParamTy: StructuralEq {}\n+\n+// FIXME(generic_const_parameter_types): handle `ty::FnDef`/`ty::Closure`\n+// FIXME(generic_const_parameter_types): handle `ty::Tuple`\n+marker_impls! {\n+    #[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n+    ConstParamTy for\n+        usize, u8, u16, u32, u64, u128,\n+        isize, i8, i16, i32, i64, i128,\n+        bool,\n+        char,\n+        str /* Technically requires `[u8]: ConstParamTy` */,\n+        {T: ConstParamTy, const N: usize} [T; N],\n+        {T: ConstParamTy} [T],\n+        {T: ?Sized + ConstParamTy} &T,\n }\n \n /// A common trait implemented by all function pointers."}, {"sha": "aafe5ced2e97f61cb8bd5197a7b1f565e17d20d9", "filename": "library/core/tests/clone.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/library%2Fcore%2Ftests%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/library%2Fcore%2Ftests%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fclone.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,4 +1,5 @@\n #[test]\n+#[cfg_attr(not(bootstrap), allow(suspicious_double_ref_op))]\n fn test_borrowed_clone() {\n     let x = 5;\n     let y: &i32 = &x;"}, {"sha": "951d509ec9533193975c32d12cd49e7ff43af7d7", "filename": "library/std/src/sys/common/thread_local/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fmod.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -6,7 +6,7 @@ cfg_if::cfg_if! {\n         mod static_local;\n         #[doc(hidden)]\n         pub use static_local::{Key, thread_local_inner};\n-    } else if #[cfg(all(target_thread_local))] {\n+    } else if #[cfg(target_thread_local)] {\n         #[doc(hidden)]\n         mod fast_local;\n         #[doc(hidden)]"}, {"sha": "c7a0414b67602d191a25157ee8ffa43c85dc601b", "filename": "src/doc/unstable-book/src/language-features/debugger-visualizer.md", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdebugger-visualizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdebugger-visualizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdebugger-visualizer.md?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -1,27 +0,0 @@\n-# `debugger_visualizer`\n-\n-The tracking issue for this feature is: [#95939]\n-\n-[#95939]: https://github.com/rust-lang/rust/issues/95939\n-\n-------------------------\n-\n-The `debugger_visualizer` attribute can be used to instruct the compiler\n-to embed a debugger visualizer file into the PDB/ELF generated by `rustc`.\n-\n-## Examples\n-\n-``` rust,ignore (partial-example)\n-#![feature(debugger_visualizer)]\n-#![debugger_visualizer(natvis_file = \"foo.natvis\")]\n-#![debugger_visualizer(gdb_script_file = \"foo.py\")]\n-struct Foo {\n-\n-}\n-```\n-\n-## Limitations\n-\n-Currently, this feature only supports embedding Natvis files on `-windows-msvc`\n-targets via the `natvis_file` meta item. `-windows-gnu` targets are not currently\n-supported."}, {"sha": "297120da284b91c2dfbdc4292b24c27dff931624", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -167,7 +167,7 @@ pub(crate) fn print_generic_bounds<'a, 'tcx: 'a>(\n     display_fn(move |f| {\n         let mut bounds_dup = FxHashSet::default();\n \n-        for (i, bound) in bounds.iter().filter(|b| bounds_dup.insert(b.clone())).enumerate() {\n+        for (i, bound) in bounds.iter().filter(|b| bounds_dup.insert(*b)).enumerate() {\n             if i > 0 {\n                 f.write_str(\" + \")?;\n             }"}, {"sha": "fa726a649370e7825b4a99be0a0cdfa086df4009", "filename": "src/tools/clippy/clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -313,7 +313,6 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::methods::CHARS_NEXT_CMP_INFO,\n     crate::methods::CLEAR_WITH_DRAIN_INFO,\n     crate::methods::CLONED_INSTEAD_OF_COPIED_INFO,\n-    crate::methods::CLONE_DOUBLE_REF_INFO,\n     crate::methods::CLONE_ON_COPY_INFO,\n     crate::methods::CLONE_ON_REF_PTR_INFO,\n     crate::methods::COLLAPSIBLE_STR_REPLACE_INFO,"}, {"sha": "65fd50dff58465b3995189c1a51eea6e3aba507a", "filename": "src/tools/clippy/clippy_lints/src/methods/clone_on_copy.rs", "status": "modified", "additions": 2, "deletions": 38, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,15 +1,13 @@\n-use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::get_parent_node;\n use clippy_utils::source::snippet_with_context;\n-use clippy_utils::sugg;\n use clippy_utils::ty::is_copy;\n use rustc_errors::Applicability;\n use rustc_hir::{BindingAnnotation, ByRef, Expr, ExprKind, MatchSource, Node, PatKind, QPath};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, adjustment::Adjust, print::with_forced_trimmed_paths};\n use rustc_span::symbol::{sym, Symbol};\n \n-use super::CLONE_DOUBLE_REF;\n use super::CLONE_ON_COPY;\n \n /// Checks for the `CLONE_ON_COPY` lint.\n@@ -42,41 +40,7 @@ pub(super) fn check(\n \n     let ty = cx.typeck_results().expr_ty(expr);\n     if let ty::Ref(_, inner, _) = arg_ty.kind() {\n-        if let ty::Ref(_, innermost, _) = inner.kind() {\n-            span_lint_and_then(\n-                cx,\n-                CLONE_DOUBLE_REF,\n-                expr.span,\n-                &with_forced_trimmed_paths!(format!(\n-                    \"using `clone` on a double-reference; \\\n-                    this will copy the reference of type `{ty}` instead of cloning the inner type\"\n-                )),\n-                |diag| {\n-                    if let Some(snip) = sugg::Sugg::hir_opt(cx, arg) {\n-                        let mut ty = innermost;\n-                        let mut n = 0;\n-                        while let ty::Ref(_, inner, _) = ty.kind() {\n-                            ty = inner;\n-                            n += 1;\n-                        }\n-                        let refs = \"&\".repeat(n + 1);\n-                        let derefs = \"*\".repeat(n);\n-                        let explicit = with_forced_trimmed_paths!(format!(\"<{refs}{ty}>::clone({snip})\"));\n-                        diag.span_suggestion(\n-                            expr.span,\n-                            \"try dereferencing it\",\n-                            with_forced_trimmed_paths!(format!(\"{refs}({derefs}{}).clone()\", snip.deref())),\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                        diag.span_suggestion(\n-                            expr.span,\n-                            \"or try being explicit if you are sure, that you want to clone a reference\",\n-                            explicit,\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n-                },\n-            );\n+        if let ty::Ref(..) = inner.kind() {\n             return; // don't report clone_on_copy\n         }\n     }"}, {"sha": "e4a659d3ce73c1e650db16792f8b9404defded77", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -984,29 +984,6 @@ declare_clippy_lint! {\n     \"using 'clone' on a ref-counted pointer\"\n }\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for usage of `.clone()` on an `&&T`.\n-    ///\n-    /// ### Why is this bad?\n-    /// Cloning an `&&T` copies the inner `&T`, instead of\n-    /// cloning the underlying `T`.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// fn main() {\n-    ///     let x = vec![1];\n-    ///     let y = &&x;\n-    ///     let z = y.clone();\n-    ///     println!(\"{:p} {:p}\", *y, z); // prints out the same pointer\n-    /// }\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub CLONE_DOUBLE_REF,\n-    correctness,\n-    \"using `clone` on `&&T`\"\n-}\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for usage of `.to_string()` on an `&&T` where\n@@ -3258,7 +3235,6 @@ impl_lint_pass!(Methods => [\n     CHARS_LAST_CMP,\n     CLONE_ON_COPY,\n     CLONE_ON_REF_PTR,\n-    CLONE_DOUBLE_REF,\n     COLLAPSIBLE_STR_REPLACE,\n     ITER_OVEREAGER_CLONED,\n     CLONED_INSTEAD_OF_COPIED,"}, {"sha": "5e81a01a461ab4c6508affd27e48128d4374885d", "filename": "src/tools/clippy/clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -30,6 +30,7 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::stutter\", \"clippy::module_name_repetitions\"),\n     (\"clippy::to_string_in_display\", \"clippy::recursive_format_impl\"),\n     (\"clippy::zero_width_space\", \"clippy::invisible_characters\"),\n+    (\"clippy::clone_double_ref\", \"suspicious_double_ref_op\"),\n     (\"clippy::drop_bounds\", \"drop_bounds\"),\n     (\"clippy::for_loop_over_option\", \"for_loops_over_fallibles\"),\n     (\"clippy::for_loop_over_result\", \"for_loops_over_fallibles\"),"}, {"sha": "60482c66da7c437a7f213622c9a4f05aa73b45ad", "filename": "src/tools/clippy/tests/ui/explicit_deref_methods.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.fixed?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -3,7 +3,7 @@\n #![allow(unused_variables)]\n #![allow(\n     clippy::borrow_deref_ref,\n-    clippy::clone_double_ref,\n+    suspicious_double_ref_op,\n     clippy::explicit_auto_deref,\n     clippy::needless_borrow,\n     clippy::uninlined_format_args"}, {"sha": "e3613e216bb223ac7e935d803dd22e810c70b9f1", "filename": "src/tools/clippy/tests/ui/explicit_deref_methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -3,7 +3,7 @@\n #![allow(unused_variables)]\n #![allow(\n     clippy::borrow_deref_ref,\n-    clippy::clone_double_ref,\n+    suspicious_double_ref_op,\n     clippy::explicit_auto_deref,\n     clippy::needless_borrow,\n     clippy::uninlined_format_args"}, {"sha": "ff19a042825d8a60106661d557612f5d245e8ce1", "filename": "src/tools/clippy/tests/ui/rename.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -36,6 +36,7 @@\n #![allow(enum_intrinsics_non_enums)]\n #![allow(non_fmt_panics)]\n #![allow(named_arguments_used_positionally)]\n+#![allow(suspicious_double_ref_op)]\n #![allow(temporary_cstring_as_ptr)]\n #![allow(unknown_lints)]\n #![allow(unused_labels)]\n@@ -67,6 +68,7 @@\n #![warn(clippy::module_name_repetitions)]\n #![warn(clippy::recursive_format_impl)]\n #![warn(clippy::invisible_characters)]\n+#![warn(suspicious_double_ref_op)]\n #![warn(drop_bounds)]\n #![warn(for_loops_over_fallibles)]\n #![warn(for_loops_over_fallibles)]"}, {"sha": "38b1647c0cca03be2d083b2858109470b9fe8e60", "filename": "src/tools/clippy/tests/ui/rename.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -36,6 +36,7 @@\n #![allow(enum_intrinsics_non_enums)]\n #![allow(non_fmt_panics)]\n #![allow(named_arguments_used_positionally)]\n+#![allow(suspicious_double_ref_op)]\n #![allow(temporary_cstring_as_ptr)]\n #![allow(unknown_lints)]\n #![allow(unused_labels)]\n@@ -67,6 +68,7 @@\n #![warn(clippy::stutter)]\n #![warn(clippy::to_string_in_display)]\n #![warn(clippy::zero_width_space)]\n+#![warn(clippy::clone_double_ref)]\n #![warn(clippy::drop_bounds)]\n #![warn(clippy::for_loop_over_option)]\n #![warn(clippy::for_loop_over_result)]"}, {"sha": "70d15408b9fc14eade2bc5d36ced6c9cc23e8ed9", "filename": "src/tools/clippy/tests/ui/rename.stderr", "status": "modified", "additions": 49, "deletions": 43, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,256 +1,262 @@\n error: lint `clippy::almost_complete_letter_range` has been renamed to `clippy::almost_complete_range`\n-  --> $DIR/rename.rs:42:9\n+  --> $DIR/rename.rs:43:9\n    |\n LL | #![warn(clippy::almost_complete_letter_range)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::almost_complete_range`\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `clippy::blacklisted_name` has been renamed to `clippy::disallowed_names`\n-  --> $DIR/rename.rs:43:9\n+  --> $DIR/rename.rs:44:9\n    |\n LL | #![warn(clippy::blacklisted_name)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_names`\n \n error: lint `clippy::block_in_if_condition_expr` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:44:9\n+  --> $DIR/rename.rs:45:9\n    |\n LL | #![warn(clippy::block_in_if_condition_expr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::block_in_if_condition_stmt` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:45:9\n+  --> $DIR/rename.rs:46:9\n    |\n LL | #![warn(clippy::block_in_if_condition_stmt)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::box_vec` has been renamed to `clippy::box_collection`\n-  --> $DIR/rename.rs:46:9\n+  --> $DIR/rename.rs:47:9\n    |\n LL | #![warn(clippy::box_vec)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::box_collection`\n \n error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n-  --> $DIR/rename.rs:47:9\n+  --> $DIR/rename.rs:48:9\n    |\n LL | #![warn(clippy::const_static_lifetime)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n-  --> $DIR/rename.rs:48:9\n+  --> $DIR/rename.rs:49:9\n    |\n LL | #![warn(clippy::cyclomatic_complexity)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n \n error: lint `clippy::derive_hash_xor_eq` has been renamed to `clippy::derived_hash_with_manual_eq`\n-  --> $DIR/rename.rs:49:9\n+  --> $DIR/rename.rs:50:9\n    |\n LL | #![warn(clippy::derive_hash_xor_eq)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::derived_hash_with_manual_eq`\n \n error: lint `clippy::disallowed_method` has been renamed to `clippy::disallowed_methods`\n-  --> $DIR/rename.rs:50:9\n+  --> $DIR/rename.rs:51:9\n    |\n LL | #![warn(clippy::disallowed_method)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_methods`\n \n error: lint `clippy::disallowed_type` has been renamed to `clippy::disallowed_types`\n-  --> $DIR/rename.rs:51:9\n+  --> $DIR/rename.rs:52:9\n    |\n LL | #![warn(clippy::disallowed_type)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_types`\n \n error: lint `clippy::eval_order_dependence` has been renamed to `clippy::mixed_read_write_in_expression`\n-  --> $DIR/rename.rs:52:9\n+  --> $DIR/rename.rs:53:9\n    |\n LL | #![warn(clippy::eval_order_dependence)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::mixed_read_write_in_expression`\n \n error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n-  --> $DIR/rename.rs:53:9\n+  --> $DIR/rename.rs:54:9\n    |\n LL | #![warn(clippy::identity_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::useless_conversion`\n \n error: lint `clippy::if_let_some_result` has been renamed to `clippy::match_result_ok`\n-  --> $DIR/rename.rs:54:9\n+  --> $DIR/rename.rs:55:9\n    |\n LL | #![warn(clippy::if_let_some_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::match_result_ok`\n \n error: lint `clippy::logic_bug` has been renamed to `clippy::overly_complex_bool_expr`\n-  --> $DIR/rename.rs:55:9\n+  --> $DIR/rename.rs:56:9\n    |\n LL | #![warn(clippy::logic_bug)]\n    |         ^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::overly_complex_bool_expr`\n \n error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:56:9\n+  --> $DIR/rename.rs:57:9\n    |\n LL | #![warn(clippy::new_without_default_derive)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n error: lint `clippy::option_and_then_some` has been renamed to `clippy::bind_instead_of_map`\n-  --> $DIR/rename.rs:57:9\n+  --> $DIR/rename.rs:58:9\n    |\n LL | #![warn(clippy::option_and_then_some)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::bind_instead_of_map`\n \n error: lint `clippy::option_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:58:9\n+  --> $DIR/rename.rs:59:9\n    |\n LL | #![warn(clippy::option_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::option_map_unwrap_or` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:59:9\n+  --> $DIR/rename.rs:60:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:60:9\n+  --> $DIR/rename.rs:61:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:61:9\n+  --> $DIR/rename.rs:62:9\n    |\n LL | #![warn(clippy::option_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::ref_in_deref` has been renamed to `clippy::needless_borrow`\n-  --> $DIR/rename.rs:62:9\n+  --> $DIR/rename.rs:63:9\n    |\n LL | #![warn(clippy::ref_in_deref)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::needless_borrow`\n \n error: lint `clippy::result_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:63:9\n+  --> $DIR/rename.rs:64:9\n    |\n LL | #![warn(clippy::result_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::result_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:64:9\n+  --> $DIR/rename.rs:65:9\n    |\n LL | #![warn(clippy::result_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::result_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:65:9\n+  --> $DIR/rename.rs:66:9\n    |\n LL | #![warn(clippy::result_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::single_char_push_str` has been renamed to `clippy::single_char_add_str`\n-  --> $DIR/rename.rs:66:9\n+  --> $DIR/rename.rs:67:9\n    |\n LL | #![warn(clippy::single_char_push_str)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::single_char_add_str`\n \n error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:67:9\n+  --> $DIR/rename.rs:68:9\n    |\n LL | #![warn(clippy::stutter)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n \n error: lint `clippy::to_string_in_display` has been renamed to `clippy::recursive_format_impl`\n-  --> $DIR/rename.rs:68:9\n+  --> $DIR/rename.rs:69:9\n    |\n LL | #![warn(clippy::to_string_in_display)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::recursive_format_impl`\n \n error: lint `clippy::zero_width_space` has been renamed to `clippy::invisible_characters`\n-  --> $DIR/rename.rs:69:9\n+  --> $DIR/rename.rs:70:9\n    |\n LL | #![warn(clippy::zero_width_space)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::invisible_characters`\n \n+error: lint `clippy::clone_double_ref` has been renamed to `suspicious_double_ref_op`\n+  --> $DIR/rename.rs:71:9\n+   |\n+LL | #![warn(clippy::clone_double_ref)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `suspicious_double_ref_op`\n+\n error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n-  --> $DIR/rename.rs:70:9\n+  --> $DIR/rename.rs:72:9\n    |\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n error: lint `clippy::for_loop_over_option` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:71:9\n+  --> $DIR/rename.rs:73:9\n    |\n LL | #![warn(clippy::for_loop_over_option)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loop_over_result` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:72:9\n+  --> $DIR/rename.rs:74:9\n    |\n LL | #![warn(clippy::for_loop_over_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loops_over_fallibles` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:73:9\n+  --> $DIR/rename.rs:75:9\n    |\n LL | #![warn(clippy::for_loops_over_fallibles)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n-  --> $DIR/rename.rs:74:9\n+  --> $DIR/rename.rs:76:9\n    |\n LL | #![warn(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n \n error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n-  --> $DIR/rename.rs:75:9\n+  --> $DIR/rename.rs:77:9\n    |\n LL | #![warn(clippy::invalid_atomic_ordering)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n \n error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n-  --> $DIR/rename.rs:76:9\n+  --> $DIR/rename.rs:78:9\n    |\n LL | #![warn(clippy::invalid_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n \n error: lint `clippy::let_underscore_drop` has been renamed to `let_underscore_drop`\n-  --> $DIR/rename.rs:77:9\n+  --> $DIR/rename.rs:79:9\n    |\n LL | #![warn(clippy::let_underscore_drop)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `let_underscore_drop`\n \n error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n-  --> $DIR/rename.rs:78:9\n+  --> $DIR/rename.rs:80:9\n    |\n LL | #![warn(clippy::mem_discriminant_non_enum)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n-  --> $DIR/rename.rs:79:9\n+  --> $DIR/rename.rs:81:9\n    |\n LL | #![warn(clippy::panic_params)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::positional_named_format_parameters` has been renamed to `named_arguments_used_positionally`\n-  --> $DIR/rename.rs:80:9\n+  --> $DIR/rename.rs:82:9\n    |\n LL | #![warn(clippy::positional_named_format_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `named_arguments_used_positionally`\n \n error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n-  --> $DIR/rename.rs:81:9\n+  --> $DIR/rename.rs:83:9\n    |\n LL | #![warn(clippy::temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n-  --> $DIR/rename.rs:82:9\n+  --> $DIR/rename.rs:84:9\n    |\n LL | #![warn(clippy::unknown_clippy_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n \n error: lint `clippy::unused_label` has been renamed to `unused_labels`\n-  --> $DIR/rename.rs:83:9\n+  --> $DIR/rename.rs:85:9\n    |\n LL | #![warn(clippy::unused_label)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n \n-error: aborting due to 42 previous errors\n+error: aborting due to 43 previous errors\n "}, {"sha": "7ceed3c75fd85a5b50815a13c0f1ca23644c9048", "filename": "src/tools/clippy/tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -42,14 +42,6 @@ fn clone_on_copy_generic<T: Copy>(t: T) {\n     Some(t).clone();\n }\n \n-fn clone_on_double_ref() {\n-    let x = vec![1];\n-    let y = &&x;\n-    let z: &Vec<_> = y.clone();\n-\n-    println!(\"{:p} {:p}\", *y, z);\n-}\n-\n mod many_derefs {\n     struct A;\n     struct B;\n@@ -84,11 +76,6 @@ mod many_derefs {\n         let _: E = a.clone();\n         let _: E = *****a;\n     }\n-\n-    fn check(mut encoded: &[u8]) {\n-        let _ = &mut encoded.clone();\n-        let _ = &encoded.clone();\n-    }\n }\n \n mod issue2076 {"}, {"sha": "5686ab6b4531ee60ca0c671ec6d0af45a29a84e5", "filename": "src/tools/clippy/tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 3, "deletions": 49, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -44,63 +44,17 @@ error: using `clone` on type `Option<T>` which implements the `Copy` trait\n LL |     Some(t).clone();\n    |     ^^^^^^^^^^^^^^^ help: try removing the `clone` call: `Some(t)`\n \n-error: using `clone` on a double-reference; this will copy the reference of type `&Vec<i32>` instead of cloning the inner type\n-  --> $DIR/unnecessary_clone.rs:48:22\n-   |\n-LL |     let z: &Vec<_> = y.clone();\n-   |                      ^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::clone_double_ref)]` on by default\n-help: try dereferencing it\n-   |\n-LL |     let z: &Vec<_> = &(*y).clone();\n-   |                      ~~~~~~~~~~~~~\n-help: or try being explicit if you are sure, that you want to clone a reference\n-   |\n-LL |     let z: &Vec<_> = <&Vec<i32>>::clone(y);\n-   |                      ~~~~~~~~~~~~~~~~~~~~~\n-\n error: using `clone` on type `E` which implements the `Copy` trait\n-  --> $DIR/unnecessary_clone.rs:84:20\n+  --> $DIR/unnecessary_clone.rs:76:20\n    |\n LL |         let _: E = a.clone();\n    |                    ^^^^^^^^^ help: try dereferencing it: `*****a`\n \n-error: using `clone` on a double-reference; this will copy the reference of type `&[u8]` instead of cloning the inner type\n-  --> $DIR/unnecessary_clone.rs:89:22\n-   |\n-LL |         let _ = &mut encoded.clone();\n-   |                      ^^^^^^^^^^^^^^^\n-   |\n-help: try dereferencing it\n-   |\n-LL |         let _ = &mut &(*encoded).clone();\n-   |                      ~~~~~~~~~~~~~~~~~~~\n-help: or try being explicit if you are sure, that you want to clone a reference\n-   |\n-LL |         let _ = &mut <&[u8]>::clone(encoded);\n-   |                      ~~~~~~~~~~~~~~~~~~~~~~~\n-\n-error: using `clone` on a double-reference; this will copy the reference of type `&[u8]` instead of cloning the inner type\n-  --> $DIR/unnecessary_clone.rs:90:18\n-   |\n-LL |         let _ = &encoded.clone();\n-   |                  ^^^^^^^^^^^^^^^\n-   |\n-help: try dereferencing it\n-   |\n-LL |         let _ = &&(*encoded).clone();\n-   |                  ~~~~~~~~~~~~~~~~~~~\n-help: or try being explicit if you are sure, that you want to clone a reference\n-   |\n-LL |         let _ = &<&[u8]>::clone(encoded);\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~\n-\n error: using `.clone()` on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:108:14\n+  --> $DIR/unnecessary_clone.rs:95:14\n    |\n LL |         Some(try_opt!(Some(rc)).clone())\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `Rc::<u8>::clone(&try_opt!(Some(rc)))`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "a4be7af886b458c951588d1370c7a0d622ca6945", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1385,7 +1385,9 @@ impl<'test> TestCx<'test> {\n         let actual_errors = json::parse_output(&diagnostic_file_name, &proc_res.stderr, proc_res);\n         let mut unexpected = Vec::new();\n         let mut found = vec![false; expected_errors.len()];\n-        for actual_error in &actual_errors {\n+        for mut actual_error in actual_errors {\n+            actual_error.msg = self.normalize_output(&actual_error.msg, &[]);\n+\n             let opt_index =\n                 expected_errors.iter().enumerate().position(|(index, expected_error)| {\n                     !found[index]\n@@ -1404,7 +1406,8 @@ impl<'test> TestCx<'test> {\n \n                 None => {\n                     // If the test is a known bug, don't require that the error is annotated\n-                    if self.is_unexpected_compiler_message(actual_error, expect_help, expect_note) {\n+                    if self.is_unexpected_compiler_message(&actual_error, expect_help, expect_note)\n+                    {\n                         self.error(&format!(\n                             \"{}:{}: unexpected {}: '{}'\",\n                             file_name,"}, {"sha": "c187df637fdc7831741df0faf7097e3849cff20c", "filename": "tests/debuginfo/auxiliary/dependency-with-embedded-visualizers.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fdebuginfo%2Fauxiliary%2Fdependency-with-embedded-visualizers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fdebuginfo%2Fauxiliary%2Fdependency-with-embedded-visualizers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdebuginfo%2Fauxiliary%2Fdependency-with-embedded-visualizers.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -2,7 +2,6 @@\n // ignore-lldb\n // no-prefer-dynamic\n \n-#![feature(debugger_visualizer)]\n #![debugger_visualizer(natvis_file = \"dependency-with-embedded-visualizers.natvis\")]\n #![debugger_visualizer(gdb_script_file = \"dependency-with-embedded-visualizers.py\")]\n #![crate_type = \"rlib\"]"}, {"sha": "ac421092839f40b6d463a3c0b28ebe5a4788cc9b", "filename": "tests/debuginfo/embedded-visualizer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fdebuginfo%2Fembedded-visualizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fdebuginfo%2Fembedded-visualizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdebuginfo%2Fembedded-visualizer.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -60,7 +60,6 @@\n // gdb-check:$4 = \"Person A\" is 10 years old.\n \n #![allow(unused_variables)]\n-#![feature(debugger_visualizer)]\n #![debugger_visualizer(natvis_file = \"embedded-visualizer.natvis\")]\n #![debugger_visualizer(gdb_script_file = \"embedded-visualizer.py\")]\n "}, {"sha": "1fbb70c7808ee9a8e74a9d2e642ae47640ce7932", "filename": "tests/rustdoc-ui/issues/issue-105742.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -19,13 +19,17 @@ pub trait SVec: Index<\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n     Output = <Index<<Self as SVec>::Item,\n     //~^ expected 1 lifetime argument\n     //~| expected 1 generic argument\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n     Output = <Self as SVec>::Item> as SVec>::Item,\n     //~^ expected 1 lifetime argument\n     //~| expected 1 generic argument\n@@ -34,11 +38,15 @@ pub trait SVec: Index<\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n     //~| expected 1 generic argument\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n > {\n     type Item<'a, T>;\n "}, {"sha": "b63176c914905e81f2a3f3c697ad53e0e8cb0b17", "filename": "tests/rustdoc-ui/issues/issue-105742.stderr", "status": "modified", "additions": 163, "deletions": 35, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -5,7 +5,7 @@ LL |     <Self as SVec>::Item,\n    |                     ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -21,7 +21,7 @@ LL |     <Self as SVec>::Item,\n    |                     ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -31,13 +31,13 @@ LL |     <Self as SVec>::Item<T>,\n    |                         +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:22:37\n+  --> $DIR/issue-105742.rs:24:37\n    |\n LL |     Output = <Index<<Self as SVec>::Item,\n    |                                     ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -47,13 +47,13 @@ LL |     Output = <Index<<Self as SVec>::Item<'a>,\n    |                                         ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:22:37\n+  --> $DIR/issue-105742.rs:24:37\n    |\n LL |     Output = <Index<<Self as SVec>::Item,\n    |                                     ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -63,13 +63,13 @@ LL |     Output = <Index<<Self as SVec>::Item<T>,\n    |                                         +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:30\n+  --> $DIR/issue-105742.rs:33:30\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                              ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -79,13 +79,13 @@ LL |     Output = <Self as SVec>::Item<'a>> as SVec>::Item,\n    |                                  ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:30\n+  --> $DIR/issue-105742.rs:33:30\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                              ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -95,13 +95,13 @@ LL |     Output = <Self as SVec>::Item<T>> as SVec>::Item,\n    |                                  +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:46\n+  --> $DIR/issue-105742.rs:33:46\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                                              ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -111,13 +111,13 @@ LL |     Output = <Self as SVec>::Item> as SVec>::Item<'a>,\n    |                                                  ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:46\n+  --> $DIR/issue-105742.rs:33:46\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                                              ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -133,7 +133,7 @@ LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n    |                                        ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -149,7 +149,7 @@ LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n    |                                        ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -165,7 +165,7 @@ LL |     <Self as SVec>::Item,\n    |                     ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -181,7 +181,7 @@ LL |     <Self as SVec>::Item,\n    |                     ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -191,13 +191,13 @@ LL |     <Self as SVec>::Item<T>,\n    |                         +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:22:37\n+  --> $DIR/issue-105742.rs:24:37\n    |\n LL |     Output = <Index<<Self as SVec>::Item,\n    |                                     ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -207,13 +207,13 @@ LL |     Output = <Index<<Self as SVec>::Item<'a>,\n    |                                         ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:22:37\n+  --> $DIR/issue-105742.rs:24:37\n    |\n LL |     Output = <Index<<Self as SVec>::Item,\n    |                                     ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -223,13 +223,13 @@ LL |     Output = <Index<<Self as SVec>::Item<T>,\n    |                                         +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:30\n+  --> $DIR/issue-105742.rs:33:30\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                              ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -239,13 +239,13 @@ LL |     Output = <Self as SVec>::Item<'a>> as SVec>::Item,\n    |                                  ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:30\n+  --> $DIR/issue-105742.rs:33:30\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                              ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -255,13 +255,13 @@ LL |     Output = <Self as SVec>::Item<T>> as SVec>::Item,\n    |                                  +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:46\n+  --> $DIR/issue-105742.rs:33:46\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                                              ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -271,13 +271,13 @@ LL |     Output = <Self as SVec>::Item> as SVec>::Item<'a>,\n    |                                                  ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:46\n+  --> $DIR/issue-105742.rs:33:46\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                                              ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -317,13 +317,141 @@ LL | |  > {\n    | |__^ ...because it uses `Self` as a type parameter\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:45:38\n+  --> $DIR/issue-105742.rs:15:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     <Self as SVec>::Item<'a>,\n+   |                         ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:15:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     <Self as SVec>::Item<T>,\n+   |                         +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:24:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<'a>,\n+   |                                         ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:24:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<T>,\n+   |                                         +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:33:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item<'a>> as SVec>::Item,\n+   |                                  ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:33:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item<T>> as SVec>::Item,\n+   |                                  +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:33:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<'a>,\n+   |                                                  ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:33:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<T>,\n+   |                                                  +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:53:38\n    |\n LL |     fn len(&self) -> <Self as SVec>::Item;\n    |                                      ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -333,13 +461,13 @@ LL |     fn len(&self) -> <Self as SVec>::Item<'_>;\n    |                                          ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:45:38\n+  --> $DIR/issue-105742.rs:53:38\n    |\n LL |     fn len(&self) -> <Self as SVec>::Item;\n    |                                      ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -348,7 +476,7 @@ help: add missing generic argument\n LL |     fn len(&self) -> <Self as SVec>::Item<T>;\n    |                                          +++\n \n-error: aborting due to 21 previous errors\n+error: aborting due to 29 previous errors\n \n Some errors have detailed explanations: E0038, E0107.\n For more information about an error, try `rustc --explain E0038`."}, {"sha": "4b8bf52c374929d7dc96e44dff93d6d48e1cb3e9", "filename": "tests/ui/associated-type-bounds/duplicate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fduplicate.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -193,10 +193,13 @@ trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRS1: Iterator<Item: Copy, Item: Send> {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+//~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+//~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+//~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRW1<T>\n where\n     T: Iterator<Item: Copy, Item: Send>,"}, {"sha": "08721eff7b0ced75456b0d1700bd7389b4c1691b", "filename": "tests/ui/associated-type-bounds/duplicate.stderr", "status": "modified", "additions": 42, "deletions": 18, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -367,141 +367,165 @@ LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:196:34\n+  --> $DIR/duplicate.rs:194:34\n+   |\n+LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n+   |                      ----------  ^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:197:34\n+   |\n+LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n+   |                      ----------  ^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:197:34\n    |\n LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:198:37\n+  --> $DIR/duplicate.rs:200:37\n+   |\n+LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n+   |                      -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:200:37\n    |\n LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:202:29\n+  --> $DIR/duplicate.rs:205:29\n    |\n LL |     T: Iterator<Item: Copy, Item: Send>,\n    |                 ----------  ^^^^^^^^^^ re-bound here\n    |                 |\n    |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:208:29\n+  --> $DIR/duplicate.rs:211:29\n    |\n LL |     T: Iterator<Item: Copy, Item: Copy>,\n    |                 ----------  ^^^^^^^^^^ re-bound here\n    |                 |\n    |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:214:32\n+  --> $DIR/duplicate.rs:217:32\n    |\n LL |     T: Iterator<Item: 'static, Item: 'static>,\n    |                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                 |\n    |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:220:32\n+  --> $DIR/duplicate.rs:223:32\n    |\n LL |     Self: Iterator<Item: Copy, Item: Send>,\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:220:32\n+  --> $DIR/duplicate.rs:223:32\n    |\n LL |     Self: Iterator<Item: Copy, Item: Send>,\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:227:32\n+  --> $DIR/duplicate.rs:230:32\n    |\n LL |     Self: Iterator<Item: Copy, Item: Copy>,\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:227:32\n+  --> $DIR/duplicate.rs:230:32\n    |\n LL |     Self: Iterator<Item: Copy, Item: Copy>,\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:234:35\n+  --> $DIR/duplicate.rs:237:35\n    |\n LL |     Self: Iterator<Item: 'static, Item: 'static>,\n    |                    -------------  ^^^^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:234:35\n+  --> $DIR/duplicate.rs:237:35\n    |\n LL |     Self: Iterator<Item: 'static, Item: 'static>,\n    |                    -------------  ^^^^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:252:40\n+  --> $DIR/duplicate.rs:255:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:254:44\n+  --> $DIR/duplicate.rs:257:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:256:43\n+  --> $DIR/duplicate.rs:259:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:240:34\n+  --> $DIR/duplicate.rs:243:34\n    |\n LL |     type A: Iterator<Item: Copy, Item: Send>;\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:244:34\n+  --> $DIR/duplicate.rs:247:34\n    |\n LL |     type A: Iterator<Item: Copy, Item: Copy>;\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:248:37\n+  --> $DIR/duplicate.rs:251:37\n    |\n LL |     type A: Iterator<Item: 'static, Item: 'static>;\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n-error: aborting due to 63 previous errors\n+error: aborting due to 66 previous errors\n \n For more information about this error, try `rustc --explain E0719`."}, {"sha": "58ce41d1a893386fb033828e170b75e4632ef519", "filename": "tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -2,7 +2,6 @@\n \n #![feature(return_type_notation, async_fn_in_trait)]\n //~^ WARN the feature `return_type_notation` is incomplete\n-//~| WARN the feature `async_fn_in_trait` is incomplete\n \n trait Trait {\n     async fn method() {}"}, {"sha": "95ef7d82fcab872f229d99a26e66bc6ae8560f67", "filename": "tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.stderr", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,11 +1,11 @@\n error: return type notation uses `()` instead of `(..)` for elided arguments\n-  --> $DIR/bad-inputs-and-output.rs:19:24\n+  --> $DIR/bad-inputs-and-output.rs:18:24\n    |\n LL | fn baz<T: Trait<method(..): Send>>() {}\n    |                        ^^ help: remove the `..`\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/bad-inputs-and-output.rs:11:17\n+  --> $DIR/bad-inputs-and-output.rs:10:17\n    |\n LL | fn foo<T: Trait<method(i32): Send>>() {}\n    |                 ^^^^^^^^^^^^^^^^^\n@@ -14,7 +14,7 @@ LL | fn foo<T: Trait<method(i32): Send>>() {}\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/bad-inputs-and-output.rs:15:17\n+  --> $DIR/bad-inputs-and-output.rs:14:17\n    |\n LL | fn bar<T: Trait<method() -> (): Send>>() {}\n    |                 ^^^^^^^^^^^^^^^^^^^^\n@@ -31,26 +31,18 @@ LL | #![feature(return_type_notation, async_fn_in_trait)]\n    = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bad-inputs-and-output.rs:3:34\n-   |\n-LL | #![feature(return_type_notation, async_fn_in_trait)]\n-   |                                  ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-\n error: argument types not allowed with return type notation\n-  --> $DIR/bad-inputs-and-output.rs:11:23\n+  --> $DIR/bad-inputs-and-output.rs:10:23\n    |\n LL | fn foo<T: Trait<method(i32): Send>>() {}\n    |                       ^^^^^ help: remove the input types: `()`\n \n error: return type not allowed with return type notation\n-  --> $DIR/bad-inputs-and-output.rs:15:25\n+  --> $DIR/bad-inputs-and-output.rs:14:25\n    |\n LL | fn bar<T: Trait<method() -> (): Send>>() {}\n    |                         ^^^^^^ help: remove the return type\n \n-error: aborting due to 5 previous errors; 2 warnings emitted\n+error: aborting due to 5 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "edc6a8e4caf0a88f5fca56253a31b15dd750e5ed", "filename": "tests/ui/associated-type-bounds/return-type-notation/basic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -4,7 +4,6 @@\n \n #![feature(return_type_notation, async_fn_in_trait)]\n //~^ WARN the feature `return_type_notation` is incomplete\n-//~| WARN the feature `async_fn_in_trait` is incomplete\n \n trait Foo {\n     async fn method() -> Result<(), ()>;"}, {"sha": "9962f4706b3141cecff982b624e617a8da32b091", "filename": "tests/ui/associated-type-bounds/return-type-notation/basic.with.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.with.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.with.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.with.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -7,13 +7,5 @@ LL | #![feature(return_type_notation, async_fn_in_trait)]\n    = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/basic.rs:5:34\n-   |\n-LL | #![feature(return_type_notation, async_fn_in_trait)]\n-   |                                  ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-\n-warning: 2 warnings emitted\n+warning: 1 warning emitted\n "}, {"sha": "c2da4f57696f5ab37633f2a6765a3ab1a0d8d555", "filename": "tests/ui/associated-type-bounds/return-type-notation/basic.without.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.without.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.without.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.without.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -7,31 +7,23 @@ LL | #![feature(return_type_notation, async_fn_in_trait)]\n    = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/basic.rs:5:34\n-   |\n-LL | #![feature(return_type_notation, async_fn_in_trait)]\n-   |                                  ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-\n error: future cannot be sent between threads safely\n-  --> $DIR/basic.rs:24:13\n+  --> $DIR/basic.rs:23:13\n    |\n LL |     is_send(foo::<T>());\n    |             ^^^^^^^^^^ future returned by `foo` is not `Send`\n    |\n    = help: within `impl Future<Output = Result<(), ()>>`, the trait `Send` is not implemented for `impl Future<Output = Result<(), ()>>`\n note: future is not `Send` as it awaits another future which is not `Send`\n-  --> $DIR/basic.rs:14:5\n+  --> $DIR/basic.rs:13:5\n    |\n LL |     T::method().await?;\n    |     ^^^^^^^^^^^ await occurs here on type `impl Future<Output = Result<(), ()>>`, which is not `Send`\n note: required by a bound in `is_send`\n-  --> $DIR/basic.rs:18:20\n+  --> $DIR/basic.rs:17:20\n    |\n LL | fn is_send(_: impl Send) {}\n    |                    ^^^^ required by this bound in `is_send`\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "6884305d7b37bb8c82679ed696a97c4996ff5135", "filename": "tests/ui/associated-type-bounds/return-type-notation/equality.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -2,7 +2,6 @@\n \n #![feature(return_type_notation, async_fn_in_trait)]\n //~^ WARN the feature `return_type_notation` is incomplete\n-//~| WARN the feature `async_fn_in_trait` is incomplete\n \n use std::future::Future;\n "}, {"sha": "490bfdc4c3c6034e92fbdbd03614943e05c9a769", "filename": "tests/ui/associated-type-bounds/return-type-notation/equality.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -7,19 +7,11 @@ LL | #![feature(return_type_notation, async_fn_in_trait)]\n    = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/equality.rs:3:34\n-   |\n-LL | #![feature(return_type_notation, async_fn_in_trait)]\n-   |                                  ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-\n error: return type notation is not allowed to use type equality\n-  --> $DIR/equality.rs:13:18\n+  --> $DIR/equality.rs:12:18\n    |\n LL | fn test<T: Trait<method() = Box<dyn Future<Output = ()>>>>() {}\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "b84b5a717b72d8c0df67278b9f34b6dadef7be20", "filename": "tests/ui/associated-type-bounds/return-type-notation/missing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -2,7 +2,6 @@\n \n #![feature(return_type_notation, async_fn_in_trait)]\n //~^ WARN the feature `return_type_notation` is incomplete\n-//~| WARN the feature `async_fn_in_trait` is incomplete\n \n trait Trait {\n     async fn method() {}"}, {"sha": "954d9f74767a7f3f6c4ebe9a009dc0e37c8ee871", "filename": "tests/ui/associated-type-bounds/return-type-notation/missing.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -7,19 +7,11 @@ LL | #![feature(return_type_notation, async_fn_in_trait)]\n    = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/missing.rs:3:34\n-   |\n-LL | #![feature(return_type_notation, async_fn_in_trait)]\n-   |                                  ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-\n error: cannot find associated function `methid` in trait `Trait`\n-  --> $DIR/missing.rs:11:17\n+  --> $DIR/missing.rs:10:17\n    |\n LL | fn bar<T: Trait<methid(): Send>>() {}\n    |                 ^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "b6f37cb908e4edc6770cf9494cc6add44d73ce1c", "filename": "tests/ui/associated-type-bounds/supertrait-defines-ty.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Fsupertrait-defines-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fassociated-type-bounds%2Fsupertrait-defines-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fsupertrait-defines-ty.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+\n+// Make sure that we don't look into associated type bounds when looking for\n+// supertraits that define an associated type. Fixes #76593.\n+\n+#![feature(associated_type_bounds)]\n+\n+trait Load: Sized {\n+    type Blob;\n+}\n+\n+trait Primitive: Load<Blob = Self> {}\n+\n+trait BlobPtr: Primitive {}\n+\n+trait CleanPtr: Load<Blob: BlobPtr> {\n+    fn to_blob(&self) -> Self::Blob;\n+}\n+\n+impl Load for () {\n+    type Blob = Self;\n+}\n+impl Primitive for () {}\n+impl BlobPtr for () {}\n+\n+fn main() {}"}, {"sha": "2142ee232ca5c54935facab007d87a5ec2fea447", "filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.current.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.current.stderr?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/async-default-fn-overridden.rs:6:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-warning: 1 warning emitted\n-"}, {"sha": "2142ee232ca5c54935facab007d87a5ec2fea447", "filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.next.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.next.stderr?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/async-default-fn-overridden.rs:6:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-warning: 1 warning emitted\n-"}, {"sha": "99c3ba6a3c20e869f67dca17980e5fa710c34bb2", "filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -4,7 +4,6 @@\n // revisions: current next\n \n #![feature(async_fn_in_trait)]\n-//~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use\n \n use std::future::Future;\n "}, {"sha": "ae590fb057f3b81d93185018d76633d632a385b7", "filename": "tests/ui/async-await/in-trait/bad-signatures.current.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.current.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,26 +1,17 @@\n error: expected identifier, found keyword `self`\n-  --> $DIR/bad-signatures.rs:9:23\n+  --> $DIR/bad-signatures.rs:8:23\n    |\n LL |     async fn bar(&abc self);\n    |                       ^^^^ expected identifier, found keyword\n \n error: expected one of `:`, `@`, or `|`, found keyword `self`\n-  --> $DIR/bad-signatures.rs:9:23\n+  --> $DIR/bad-signatures.rs:8:23\n    |\n LL |     async fn bar(&abc self);\n    |                  -----^^^^\n    |                  |    |\n    |                  |    expected one of `:`, `@`, or `|`\n    |                  help: declare the type after the parameter binding: `<identifier>: <type>`\n \n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bad-signatures.rs:5:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n "}, {"sha": "ae590fb057f3b81d93185018d76633d632a385b7", "filename": "tests/ui/async-await/in-trait/bad-signatures.next.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.next.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,26 +1,17 @@\n error: expected identifier, found keyword `self`\n-  --> $DIR/bad-signatures.rs:9:23\n+  --> $DIR/bad-signatures.rs:8:23\n    |\n LL |     async fn bar(&abc self);\n    |                       ^^^^ expected identifier, found keyword\n \n error: expected one of `:`, `@`, or `|`, found keyword `self`\n-  --> $DIR/bad-signatures.rs:9:23\n+  --> $DIR/bad-signatures.rs:8:23\n    |\n LL |     async fn bar(&abc self);\n    |                  -----^^^^\n    |                  |    |\n    |                  |    expected one of `:`, `@`, or `|`\n    |                  help: declare the type after the parameter binding: `<identifier>: <type>`\n \n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bad-signatures.rs:5:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n "}, {"sha": "4baddd8ccb8355508409baad2c324e18d54882cd", "filename": "tests/ui/async-await/in-trait/bad-signatures.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -3,7 +3,6 @@\n // revisions: current next\n \n #![feature(async_fn_in_trait)]\n-//~^ WARN the feature `async_fn_in_trait` is incomplete\n \n trait MyTrait {\n     async fn bar(&abc self);"}, {"sha": "eec5ab065397cf09f80e3d340f76edf4a6f3ee0b", "filename": "tests/ui/async-await/in-trait/dont-project-to-specializable-projection.current.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.current.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,12 +1,3 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/dont-project-to-specializable-projection.rs:6:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error: async associated function in trait cannot be specialized\n   --> $DIR/dont-project-to-specializable-projection.rs:16:5\n    |\n@@ -15,5 +6,5 @@ LL |     default async fn foo(_: T) -> &'static str {\n    |\n    = note: specialization behaves in inconsistent and surprising ways with `#![feature(async_fn_in_trait)]`, and for now is disallowed\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "25a7f3bb56a50103be850ac2e3175a5b949b49d7", "filename": "tests/ui/async-await/in-trait/dont-project-to-specializable-projection.next.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.next.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,12 +1,3 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/dont-project-to-specializable-projection.rs:6:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0053]: method `foo` has an incompatible type for trait\n   --> $DIR/dont-project-to-specializable-projection.rs:16:35\n    |\n@@ -29,6 +20,6 @@ LL |     default async fn foo(_: T) -> &'static str {\n    |\n    = note: specialization behaves in inconsistent and surprising ways with `#![feature(async_fn_in_trait)]`, and for now is disallowed\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0053`."}, {"sha": "69e7c65ee3e70372ef272421a3b09888bc26a497", "filename": "tests/ui/async-await/in-trait/lifetime-mismatch.current.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.current.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,21 +1,12 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/lifetime-mismatch.rs:5:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0195]: lifetime parameters or bounds on method `foo` do not match the trait declaration\n-  --> $DIR/lifetime-mismatch.rs:14:17\n+  --> $DIR/lifetime-mismatch.rs:13:17\n    |\n LL |     async fn foo<'a>(&self);\n    |                 ---- lifetimes in impl do not match this method in trait\n ...\n LL |     async fn foo(&self) {}\n    |                 ^ lifetimes do not match method in trait\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0195`."}, {"sha": "69e7c65ee3e70372ef272421a3b09888bc26a497", "filename": "tests/ui/async-await/in-trait/lifetime-mismatch.next.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.next.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,21 +1,12 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/lifetime-mismatch.rs:5:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0195]: lifetime parameters or bounds on method `foo` do not match the trait declaration\n-  --> $DIR/lifetime-mismatch.rs:14:17\n+  --> $DIR/lifetime-mismatch.rs:13:17\n    |\n LL |     async fn foo<'a>(&self);\n    |                 ---- lifetimes in impl do not match this method in trait\n ...\n LL |     async fn foo(&self) {}\n    |                 ^ lifetimes do not match method in trait\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0195`."}, {"sha": "46183f72bce6878249454bd62c32dff189b198d6", "filename": "tests/ui/async-await/in-trait/lifetime-mismatch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -3,7 +3,6 @@\n // revisions: current next\n \n #![feature(async_fn_in_trait)]\n-//~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n \n trait MyTrait {\n     async fn foo<'a>(&self);"}, {"sha": "9aa37f7437e4ece30bc88c69d77eea19d0f28d8d", "filename": "tests/ui/async-await/in-trait/missing-send-bound.current.stderr", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.current.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,29 +1,20 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/missing-send-bound.rs:5:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error: future cannot be sent between threads safely\n-  --> $DIR/missing-send-bound.rs:17:20\n+  --> $DIR/missing-send-bound.rs:16:20\n    |\n LL |     assert_is_send(test::<T>());\n    |                    ^^^^^^^^^^^ future returned by `test` is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `impl Future<Output = ()>`\n note: future is not `Send` as it awaits another future which is not `Send`\n-  --> $DIR/missing-send-bound.rs:13:5\n+  --> $DIR/missing-send-bound.rs:12:5\n    |\n LL |     T::bar().await;\n    |     ^^^^^^^^ await occurs here on type `impl Future<Output = ()>`, which is not `Send`\n note: required by a bound in `assert_is_send`\n-  --> $DIR/missing-send-bound.rs:21:27\n+  --> $DIR/missing-send-bound.rs:20:27\n    |\n LL | fn assert_is_send(_: impl Send) {}\n    |                           ^^^^ required by this bound in `assert_is_send`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "9aa37f7437e4ece30bc88c69d77eea19d0f28d8d", "filename": "tests/ui/async-await/in-trait/missing-send-bound.next.stderr", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.next.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,29 +1,20 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/missing-send-bound.rs:5:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error: future cannot be sent between threads safely\n-  --> $DIR/missing-send-bound.rs:17:20\n+  --> $DIR/missing-send-bound.rs:16:20\n    |\n LL |     assert_is_send(test::<T>());\n    |                    ^^^^^^^^^^^ future returned by `test` is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `impl Future<Output = ()>`\n note: future is not `Send` as it awaits another future which is not `Send`\n-  --> $DIR/missing-send-bound.rs:13:5\n+  --> $DIR/missing-send-bound.rs:12:5\n    |\n LL |     T::bar().await;\n    |     ^^^^^^^^ await occurs here on type `impl Future<Output = ()>`, which is not `Send`\n note: required by a bound in `assert_is_send`\n-  --> $DIR/missing-send-bound.rs:21:27\n+  --> $DIR/missing-send-bound.rs:20:27\n    |\n LL | fn assert_is_send(_: impl Send) {}\n    |                           ^^^^ required by this bound in `assert_is_send`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "b602865cbb12d110ff67239b577df6c47e300073", "filename": "tests/ui/async-await/in-trait/missing-send-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -3,7 +3,6 @@\n // revisions: current next\n \n #![feature(async_fn_in_trait)]\n-//~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n \n trait Foo {\n     async fn bar();"}, {"sha": "7f7ec39142cdf5f40e186412ea86f1f8d3d54593", "filename": "tests/ui/async-await/in-trait/object-safety.current.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.current.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,27 +1,18 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/object-safety.rs:5:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/object-safety.rs:13:12\n+  --> $DIR/object-safety.rs:12:12\n    |\n LL |     let x: &dyn Foo = todo!();\n    |            ^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:9:14\n+  --> $DIR/object-safety.rs:8:14\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     async fn foo(&self);\n    |              ^^^ ...because method `foo` is `async`\n    = help: consider moving `foo` to another trait\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0038`."}, {"sha": "7f7ec39142cdf5f40e186412ea86f1f8d3d54593", "filename": "tests/ui/async-await/in-trait/object-safety.next.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.next.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,27 +1,18 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/object-safety.rs:5:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/object-safety.rs:13:12\n+  --> $DIR/object-safety.rs:12:12\n    |\n LL |     let x: &dyn Foo = todo!();\n    |            ^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:9:14\n+  --> $DIR/object-safety.rs:8:14\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     async fn foo(&self);\n    |              ^^^ ...because method `foo` is `async`\n    = help: consider moving `foo` to another trait\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0038`."}, {"sha": "4edad1512e93ae65969e95266914e559c9edcc03", "filename": "tests/ui/async-await/in-trait/object-safety.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -3,7 +3,6 @@\n // revisions: current next\n \n #![feature(async_fn_in_trait)]\n-//~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n \n trait Foo {\n     async fn foo(&self);"}, {"sha": "6a107d7beb8fd67bc74267875314d579cf14f948", "filename": "tests/ui/async-await/in-trait/return-type-suggestion.current.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.current.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/return-type-suggestion.rs:5:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0308]: mismatched types\n-  --> $DIR/return-type-suggestion.rs:10:9\n+  --> $DIR/return-type-suggestion.rs:9:9\n    |\n LL |         Ok(())\n    |         ^^^^^^- help: consider using a semicolon here: `;`\n@@ -18,6 +9,6 @@ LL |         Ok(())\n    = note: expected unit type `()`\n                    found enum `Result<(), _>`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "6a107d7beb8fd67bc74267875314d579cf14f948", "filename": "tests/ui/async-await/in-trait/return-type-suggestion.next.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.next.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/return-type-suggestion.rs:5:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0308]: mismatched types\n-  --> $DIR/return-type-suggestion.rs:10:9\n+  --> $DIR/return-type-suggestion.rs:9:9\n    |\n LL |         Ok(())\n    |         ^^^^^^- help: consider using a semicolon here: `;`\n@@ -18,6 +9,6 @@ LL |         Ok(())\n    = note: expected unit type `()`\n                    found enum `Result<(), _>`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "d63bccefa9fdc03174c4e08974e4bd24b787aed7", "filename": "tests/ui/async-await/in-trait/return-type-suggestion.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -3,7 +3,6 @@\n // revisions: current next\n \n #![feature(async_fn_in_trait)]\n-//~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n \n trait A {\n     async fn e() {"}, {"sha": "33e22dec3f7b23feb0c4c8461e610a08821d0af2", "filename": "tests/ui/async-await/return-type-notation/issue-110963-early.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-early.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -7,14 +7,6 @@ LL | #![feature(return_type_notation)]\n    = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-110963-early.rs:5:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-\n error: higher-ranked lifetime error\n   --> $DIR/issue-110963-early.rs:15:5\n    |\n@@ -41,5 +33,5 @@ LL | |     });\n    |\n    = note: could not prove `[async block@$DIR/issue-110963-early.rs:15:11: 20:6]: Send`\n \n-error: aborting due to 2 previous errors; 2 warnings emitted\n+error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "17b5d775d4479166d76650d952201bc3f6854cbd", "filename": "tests/ui/async-await/return-type-notation/issue-110963-late.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-late.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-late.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-late.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -4,7 +4,6 @@\n #![feature(return_type_notation)]\n //~^ WARN the feature `return_type_notation` is incomplete\n #![feature(async_fn_in_trait)]\n-//~^ WARN the feature `async_fn_in_trait` is incomplete\n \n trait HealthCheck {\n     async fn check(&mut self) -> bool;"}, {"sha": "9c6966537a73a19bba68b2655b8d64bd7bae49d5", "filename": "tests/ui/async-await/return-type-notation/issue-110963-late.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-late.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-late.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-late.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -7,13 +7,5 @@ LL | #![feature(return_type_notation)]\n    = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-110963-late.rs:6:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-\n-warning: 2 warnings emitted\n+warning: 1 warning emitted\n "}, {"sha": "0da68ae757351aadad342bc3101feeccfa75f5ee", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_bad.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_bad.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -0,0 +1,13 @@\n+#![allow(incomplete_features)]\n+#![feature(adt_const_params)]\n+\n+fn check(_: impl std::marker::ConstParamTy) {}\n+\n+fn main() {\n+    check(main);               //~ error: `fn() {main}` can't be used as a const parameter type\n+    check(|| {});              //~ error: `[closure@$DIR/const_param_ty_bad.rs:8:11: 8:13]` can't be used as a const parameter type\n+    check(main as fn());       //~ error: `fn()` can't be used as a const parameter type\n+    check(&mut ());            //~ error: `&mut ()` can't be used as a const parameter type\n+    check(&mut () as *mut ()); //~ error: `*mut ()` can't be used as a const parameter type\n+    check(&() as *const ());   //~ error: `*const ()` can't be used as a const parameter type\n+}"}, {"sha": "de5704ee429ede4d9a93327434bf7853c9be7d4f", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_bad.stderr", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_bad.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -0,0 +1,87 @@\n+error[E0277]: `fn() {main}` can't be used as a const parameter type\n+  --> $DIR/const_param_ty_bad.rs:7:11\n+   |\n+LL |     check(main);\n+   |     ----- ^^^^ the trait `ConstParamTy` is not implemented for fn item `fn() {main}`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/const_param_ty_bad.rs:4:18\n+   |\n+LL | fn check(_: impl std::marker::ConstParamTy) {}\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+\n+error[E0277]: `[closure@$DIR/const_param_ty_bad.rs:8:11: 8:13]` can't be used as a const parameter type\n+  --> $DIR/const_param_ty_bad.rs:8:11\n+   |\n+LL |     check(|| {});\n+   |     ----- ^^^^^ the trait `ConstParamTy` is not implemented for closure `[closure@$DIR/const_param_ty_bad.rs:8:11: 8:13]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/const_param_ty_bad.rs:4:18\n+   |\n+LL | fn check(_: impl std::marker::ConstParamTy) {}\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+\n+error[E0277]: `fn()` can't be used as a const parameter type\n+  --> $DIR/const_param_ty_bad.rs:9:11\n+   |\n+LL |     check(main as fn());\n+   |     ----- ^^^^^^^^^^^^ the trait `ConstParamTy` is not implemented for `fn()`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/const_param_ty_bad.rs:4:18\n+   |\n+LL | fn check(_: impl std::marker::ConstParamTy) {}\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+\n+error[E0277]: `&mut ()` can't be used as a const parameter type\n+  --> $DIR/const_param_ty_bad.rs:10:11\n+   |\n+LL |     check(&mut ());\n+   |     ----- ^^^^^^^ the trait `ConstParamTy` is not implemented for `&mut ()`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/const_param_ty_bad.rs:4:18\n+   |\n+LL | fn check(_: impl std::marker::ConstParamTy) {}\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+\n+error[E0277]: `*mut ()` can't be used as a const parameter type\n+  --> $DIR/const_param_ty_bad.rs:11:11\n+   |\n+LL |     check(&mut () as *mut ());\n+   |     ----- ^^^^^^^^^^^^^^^^^^ the trait `ConstParamTy` is not implemented for `*mut ()`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/const_param_ty_bad.rs:4:18\n+   |\n+LL | fn check(_: impl std::marker::ConstParamTy) {}\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+\n+error[E0277]: `*const ()` can't be used as a const parameter type\n+  --> $DIR/const_param_ty_bad.rs:12:11\n+   |\n+LL |     check(&() as *const ());\n+   |     ----- ^^^^^^^^^^^^^^^^ the trait `ConstParamTy` is not implemented for `*const ()`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/const_param_ty_bad.rs:4:18\n+   |\n+LL | fn check(_: impl std::marker::ConstParamTy) {}\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "b0e3b13cc1ef94946fdd5ccf9e9672c81e933002", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_bad_empty_array.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_bad_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_bad_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_bad_empty_array.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -0,0 +1,12 @@\n+#![allow(incomplete_features)]\n+#![feature(adt_const_params)]\n+\n+#[derive(PartialEq, Eq)]\n+struct NotParam;\n+\n+fn check<T: std::marker::ConstParamTy>() {}\n+\n+fn main() {\n+    check::<[NotParam; 0]>();\n+    //~^ error: `NotParam` can't be used as a const parameter type\n+}"}, {"sha": "ef55242df87421e4a03352a8235b8dbeffd020c2", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_bad_empty_array.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_bad_empty_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_bad_empty_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_bad_empty_array.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -0,0 +1,16 @@\n+error[E0277]: `NotParam` can't be used as a const parameter type\n+  --> $DIR/const_param_ty_bad_empty_array.rs:10:13\n+   |\n+LL |     check::<[NotParam; 0]>();\n+   |             ^^^^^^^^^^^^^ the trait `ConstParamTy` is not implemented for `NotParam`\n+   |\n+   = note: required for `[NotParam; 0]` to implement `ConstParamTy`\n+note: required by a bound in `check`\n+  --> $DIR/const_param_ty_bad_empty_array.rs:7:13\n+   |\n+LL | fn check<T: std::marker::ConstParamTy>() {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "e4dc76703a2d8a4eb34444b036a6c0393e5228d1", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_generic_bounds_do_not_hold.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_generic_bounds_do_not_hold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_generic_bounds_do_not_hold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_generic_bounds_do_not_hold.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -0,0 +1,13 @@\n+#![allow(incomplete_features)]\n+#![feature(adt_const_params)]\n+\n+#[derive(PartialEq, Eq)]\n+struct NotParam;\n+\n+fn check<T: std::marker::ConstParamTy + ?Sized>() {}\n+\n+fn main() {\n+    check::<&NotParam>();      //~ error: `NotParam` can't be used as a const parameter type\n+    check::<[NotParam]>();     //~ error: `NotParam` can't be used as a const parameter type\n+    check::<[NotParam; 17]>(); //~ error: `NotParam` can't be used as a const parameter type\n+}"}, {"sha": "86d1c94e87f966ef2c216c197b8631ae6d9c87c9", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_generic_bounds_do_not_hold.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_generic_bounds_do_not_hold.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_generic_bounds_do_not_hold.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_generic_bounds_do_not_hold.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -0,0 +1,42 @@\n+error[E0277]: `NotParam` can't be used as a const parameter type\n+  --> $DIR/const_param_ty_generic_bounds_do_not_hold.rs:10:13\n+   |\n+LL |     check::<&NotParam>();\n+   |             ^^^^^^^^^ the trait `ConstParamTy` is not implemented for `NotParam`\n+   |\n+   = note: required for `&NotParam` to implement `ConstParamTy`\n+note: required by a bound in `check`\n+  --> $DIR/const_param_ty_generic_bounds_do_not_hold.rs:7:13\n+   |\n+LL | fn check<T: std::marker::ConstParamTy + ?Sized>() {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+\n+error[E0277]: `NotParam` can't be used as a const parameter type\n+  --> $DIR/const_param_ty_generic_bounds_do_not_hold.rs:11:13\n+   |\n+LL |     check::<[NotParam]>();\n+   |             ^^^^^^^^^^ the trait `ConstParamTy` is not implemented for `NotParam`\n+   |\n+   = note: required for `[NotParam]` to implement `ConstParamTy`\n+note: required by a bound in `check`\n+  --> $DIR/const_param_ty_generic_bounds_do_not_hold.rs:7:13\n+   |\n+LL | fn check<T: std::marker::ConstParamTy + ?Sized>() {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+\n+error[E0277]: `NotParam` can't be used as a const parameter type\n+  --> $DIR/const_param_ty_generic_bounds_do_not_hold.rs:12:13\n+   |\n+LL |     check::<[NotParam; 17]>();\n+   |             ^^^^^^^^^^^^^^ the trait `ConstParamTy` is not implemented for `NotParam`\n+   |\n+   = note: required for `[NotParam; 17]` to implement `ConstParamTy`\n+note: required by a bound in `check`\n+  --> $DIR/const_param_ty_generic_bounds_do_not_hold.rs:7:13\n+   |\n+LL | fn check<T: std::marker::ConstParamTy + ?Sized>() {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "a1b711a3024e33666afb4e9a9e082f6e29f385d3", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_good.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_good.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_good.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_good.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -0,0 +1,43 @@\n+// check-pass\n+#![allow(incomplete_features)]\n+#![feature(adt_const_params)]\n+use std::marker::ConstParamTy;\n+\n+#[derive(PartialEq, Eq)]\n+struct S<T> {\n+    field: u8,\n+    gen: T,\n+}\n+\n+impl<T: ConstParamTy> ConstParamTy for S<T> {}\n+\n+fn check<T: ConstParamTy + ?Sized>() {}\n+\n+fn main() {\n+    check::<u8>();\n+    check::<u16>();\n+    check::<u32>();\n+    check::<u64>();\n+    check::<u128>();\n+\n+    check::<i8>();\n+    check::<i16>();\n+    check::<i32>();\n+    check::<i64>();\n+    check::<i128>();\n+\n+    check::<char>();\n+    check::<bool>();\n+    check::<str>();\n+\n+    check::<&u8>();\n+    check::<&str>();\n+    check::<[usize]>();\n+    check::<[u16; 0]>();\n+    check::<[u8; 42]>();\n+\n+    check::<S<u8>>();\n+    check::<S<[&[bool]; 8]>>();\n+\n+    // FIXME: test tuples\n+}"}, {"sha": "07fd243737e2ac8ae026317e7592a3c6ac3927a7", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_impl_bad_field.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_bad_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_bad_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_bad_field.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -0,0 +1,13 @@\n+#![allow(incomplete_features)]\n+#![feature(adt_const_params)]\n+\n+#[derive(PartialEq, Eq)]\n+struct NotParam;\n+\n+#[derive(PartialEq, Eq)]\n+struct CantParam(NotParam);\n+\n+impl std::marker::ConstParamTy for CantParam {}\n+//~^ error: the trait `ConstParamTy` cannot be implemented for this type\n+\n+fn main() {}"}, {"sha": "c8e065848b1e0dc481ed4a66d1f06b0b28288bab", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_impl_bad_field.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_bad_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_bad_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_bad_field.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -0,0 +1,12 @@\n+error[E0204]: the trait `ConstParamTy` cannot be implemented for this type\n+  --> $DIR/const_param_ty_impl_bad_field.rs:10:36\n+   |\n+LL | struct CantParam(NotParam);\n+   |                  -------- this field does not implement `ConstParamTy`\n+LL |\n+LL | impl std::marker::ConstParamTy for CantParam {}\n+   |                                    ^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0204`."}, {"sha": "17ef396164efdf6e467c895d509156b59f13c6d2", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_impl_no_structural_eq.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -0,0 +1,17 @@\n+#![allow(incomplete_features)]\n+#![feature(adt_const_params)]\n+\n+#[derive(PartialEq, Eq)]\n+struct ImplementsConstParamTy;\n+impl std::marker::ConstParamTy for ImplementsConstParamTy {}\n+\n+struct CantParam(ImplementsConstParamTy);\n+\n+impl std::marker::ConstParamTy for CantParam {}\n+//~^ error: the type `CantParam` does not `#[derive(Eq)]`\n+\n+fn check<T: std::marker::ConstParamTy>() {}\n+\n+fn main() {\n+    check::<ImplementsConstParamTy>();\n+}"}, {"sha": "ca5abf5e25420350cf458cb1a65ec13600c09522", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_impl_no_structural_eq.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the type `CantParam` does not `#[derive(Eq)]`\n+  --> $DIR/const_param_ty_impl_no_structural_eq.rs:10:36\n+   |\n+LL | impl std::marker::ConstParamTy for CantParam {}\n+   |                                    ^^^^^^^^^ the trait `StructuralEq` is not implemented for `CantParam`\n+   |\n+note: required by a bound in `ConstParamTy`\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "bf8202ac15267e876507e96952eb9e08782e4110", "filename": "tests/ui/const-generics/assoc_const_eq_diagnostic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -10,6 +10,7 @@ pub trait Parse {\n \n pub trait CoolStuff: Parse<MODE = Mode::Cool> {}\n //~^ ERROR expected associated constant bound\n+//~| ERROR expected associated constant bound\n //~| ERROR expected type\n \n fn no_help() -> Mode::Cool {}"}, {"sha": "d7e5e50cba82d61ae46d6653f2bec2588ee381a9", "filename": "tests/ui/const-generics/assoc_const_eq_diagnostic.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -8,7 +8,7 @@ LL | pub trait CoolStuff: Parse<MODE = Mode::Cool> {}\n    |                                   help: try using the variant's enum: `Mode`\n \n error[E0573]: expected type, found variant `Mode::Cool`\n-  --> $DIR/assoc_const_eq_diagnostic.rs:15:17\n+  --> $DIR/assoc_const_eq_diagnostic.rs:16:17\n    |\n LL | fn no_help() -> Mode::Cool {}\n    |                 ^^^^^^^^^^\n@@ -28,6 +28,18 @@ note: associated constant defined here\n LL |     const MODE: Mode;\n    |     ^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: expected associated constant bound, found type\n+  --> $DIR/assoc_const_eq_diagnostic.rs:11:28\n+   |\n+LL | pub trait CoolStuff: Parse<MODE = Mode::Cool> {}\n+   |                            ^^^^^^^^^^^^^^^^^ help: if equating a const, try wrapping with braces: `MODE = { const }`\n+   |\n+note: associated constant defined here\n+  --> $DIR/assoc_const_eq_diagnostic.rs:8:5\n+   |\n+LL |     const MODE: Mode;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0573`."}, {"sha": "ff95018065a843faff5f2a93b3cedb68c7726bc0", "filename": "tests/ui/const-generics/nested-type.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fnested-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fconst-generics%2Fnested-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fnested-type.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -3,7 +3,7 @@\n #![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n-struct Foo<const N: [u8; { //[min]~ ERROR `[u8; _]` is forbidden\n+struct Foo<const N: [u8; {\n     struct Foo<const N: usize>;\n \n     impl<const N: usize> Foo<N> {\n@@ -15,5 +15,9 @@ struct Foo<const N: [u8; { //[min]~ ERROR `[u8; _]` is forbidden\n     Foo::<17>::value()\n     //~^ ERROR cannot call non-const fn\n }]>;\n+//[min]~^^^^^^^^^^^^ ERROR `[u8; {\n+\n+// N.B. it is important that the comment above is not inside the array length,\n+//      otherwise it may check for itself, instead of the actual error\n \n fn main() {}"}, {"sha": "cbf1bb219a07bc4258f372d8b45141570af968a0", "filename": "tests/ui/error-codes/E0719.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Ferror-codes%2FE0719.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Ferror-codes%2FE0719.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0719.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,5 +1,6 @@\n trait Foo: Iterator<Item = i32, Item = i32> {}\n //~^ ERROR is already specified\n+//~| ERROR is already specified\n \n type Unit = ();\n "}, {"sha": "e302f406d02b0d098d5605cd2547f5407fd2bec0", "filename": "tests/ui/error-codes/E0719.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Ferror-codes%2FE0719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Ferror-codes%2FE0719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0719.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -7,13 +7,21 @@ LL | trait Foo: Iterator<Item = i32, Item = i32> {}\n    |                     `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/E0719.rs:6:42\n+  --> $DIR/E0719.rs:1:33\n+   |\n+LL | trait Foo: Iterator<Item = i32, Item = i32> {}\n+   |                     ----------  ^^^^^^^^^^ re-bound here\n+   |                     |\n+   |                     `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/E0719.rs:7:42\n    |\n LL | fn test() -> Box<dyn Iterator<Item = (), Item = Unit>> {\n    |                               ---------  ^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0719`."}, {"sha": "4c4dc450d18bcecdec74eee9fa6fba6a89fd26b5", "filename": "tests/ui/feature-gates/feature-gate-debugger-visualizer.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fui%2Ffeature-gates%2Ffeature-gate-debugger-visualizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fui%2Ffeature-gates%2Ffeature-gate-debugger-visualizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-debugger-visualizer.rs?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -1,3 +0,0 @@\n-#![debugger_visualizer(natvis_file = \"auxiliary/debugger-visualizer.natvis\")] //~ ERROR the `#[debugger_visualizer]` attribute is an experimental feature\n-\n-fn main() {}"}, {"sha": "e9367fbc6c96cf1e127bb00f3aa7115a425bfcf5", "filename": "tests/ui/feature-gates/feature-gate-debugger-visualizer.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fui%2Ffeature-gates%2Ffeature-gate-debugger-visualizer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fui%2Ffeature-gates%2Ffeature-gate-debugger-visualizer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-debugger-visualizer.stderr?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: the `#[debugger_visualizer]` attribute is an experimental feature\n-  --> $DIR/feature-gate-debugger-visualizer.rs:1:1\n-   |\n-LL | #![debugger_visualizer(natvis_file = \"auxiliary/debugger-visualizer.natvis\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #95939 <https://github.com/rust-lang/rust/issues/95939> for more information\n-   = help: add `#![feature(debugger_visualizer)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "1bdb2574eadc301b46ae37512663b5ea0445d476", "filename": "tests/ui/feature-gates/feature-gate-return_type_notation.cfg.stderr", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.cfg.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,36 +1,27 @@\n error[E0658]: return type notation is experimental\n-  --> $DIR/feature-gate-return_type_notation.rs:15:17\n+  --> $DIR/feature-gate-return_type_notation.rs:14:17\n    |\n LL | fn foo<T: Trait<m(): Send>>() {}\n    |                 ^^^^^^^^^\n    |\n    = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n    = help: add `#![feature(return_type_notation)]` to the crate attributes to enable\n \n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/feature-gate-return_type_notation.rs:7:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error: parenthesized generic arguments cannot be used in associated type constraints\n-  --> $DIR/feature-gate-return_type_notation.rs:15:17\n+  --> $DIR/feature-gate-return_type_notation.rs:14:17\n    |\n LL | fn foo<T: Trait<m(): Send>>() {}\n    |                 ^--\n    |                  |\n    |                  help: remove these parentheses\n \n error[E0220]: associated type `m` not found for `Trait`\n-  --> $DIR/feature-gate-return_type_notation.rs:15:17\n+  --> $DIR/feature-gate-return_type_notation.rs:14:17\n    |\n LL | fn foo<T: Trait<m(): Send>>() {}\n    |                 ^ associated type `m` not found\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0220, E0658.\n For more information about an error, try `rustc --explain E0220`."}, {"sha": "dd6ebb61038622a6861828ae71f3f0b25152e68d", "filename": "tests/ui/feature-gates/feature-gate-return_type_notation.no.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.no.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.no.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.no.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/feature-gate-return_type_notation.rs:7:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n warning: return type notation is experimental\n-  --> $DIR/feature-gate-return_type_notation.rs:15:17\n+  --> $DIR/feature-gate-return_type_notation.rs:14:17\n    |\n LL | fn foo<T: Trait<m(): Send>>() {}\n    |                 ^^^^^^^^^\n@@ -18,5 +9,5 @@ LL | fn foo<T: Trait<m(): Send>>() {}\n    = warning: unstable syntax can change at any point in the future, causing a hard error!\n    = note: for more information, see issue #65860 <https://github.com/rust-lang/rust/issues/65860>\n \n-warning: 2 warnings emitted\n+warning: 1 warning emitted\n "}, {"sha": "d9bcb65feba9a3e0ec0378371466957828b5e3d3", "filename": "tests/ui/feature-gates/feature-gate-return_type_notation.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -5,7 +5,6 @@\n // Since we're not adding new syntax, `cfg`'d out RTN must pass.\n \n #![feature(async_fn_in_trait)]\n-//~^ WARN the feature `async_fn_in_trait` is incomplete\n \n trait Trait {\n     async fn m();"}, {"sha": "9b436e2c479f27faa818ec50811b836ae8fc84d5", "filename": "tests/ui/fmt/format-string-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Ffmt%2Fformat-string-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Ffmt%2Fformat-string-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffmt%2Fformat-string-error.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -17,7 +17,7 @@ fn main() {\n     let _ = format!(\"}\");\n     //~^ ERROR invalid format string: unmatched `}` found\n     let _ = format!(\"{\\\\}\");\n-    //~^ ERROR invalid format string: expected `'}'`, found `'\\\\'`\n+    //~^ ERROR invalid format string: expected `'}'`, found `'\\'`\n     let _ = format!(\"\\n\\n\\n{\\n\\n\\n\");\n     //~^ ERROR invalid format string\n     let _ = format!(r###\""}, {"sha": "05c025cc169ffb8c9273fa4646fa307b2e19265c", "filename": "tests/ui/impl-trait/in-trait/box-coerce-span-in-default.current.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.current.stderr?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/box-coerce-span-in-default.rs:5:12\n-   |\n-LL | #![feature(return_position_impl_trait_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-warning: 1 warning emitted\n-"}, {"sha": "05c025cc169ffb8c9273fa4646fa307b2e19265c", "filename": "tests/ui/impl-trait/in-trait/box-coerce-span-in-default.next.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.next.stderr?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/box-coerce-span-in-default.rs:5:12\n-   |\n-LL | #![feature(return_position_impl_trait_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-warning: 1 warning emitted\n-"}, {"sha": "f5290a5f4af8f881cfe0d3ff9d5a317946c9400d", "filename": "tests/ui/impl-trait/in-trait/box-coerce-span-in-default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -3,7 +3,6 @@\n // revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n-//~^ WARN the feature `return_position_impl_trait_in_trait` is incomplete\n \n struct TestA {}\n struct TestB {}"}, {"sha": "a0c0589b9a1c04fb7a7fbd3f4520697cb942ce0c", "filename": "tests/ui/impl-trait/in-trait/default-method-binder-shifting.current.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.current.stderr?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/default-method-binder-shifting.rs:5:12\n-   |\n-LL | #![feature(return_position_impl_trait_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-warning: 1 warning emitted\n-"}, {"sha": "a0c0589b9a1c04fb7a7fbd3f4520697cb942ce0c", "filename": "tests/ui/impl-trait/in-trait/default-method-binder-shifting.next.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.next.stderr?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/default-method-binder-shifting.rs:5:12\n-   |\n-LL | #![feature(return_position_impl_trait_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-warning: 1 warning emitted\n-"}, {"sha": "187039f449c8d3134ec7d91ad57966fc6862ef0c", "filename": "tests/ui/impl-trait/in-trait/default-method-binder-shifting.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -3,7 +3,6 @@\n // revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n-//~^ WARN the feature `return_position_impl_trait_in_trait` is incomplete\n \n trait Trait {\n     type Type;"}, {"sha": "7bb79911f56f81168e24eae0f7d9ab3387b7887d", "filename": "tests/ui/impl-trait/in-trait/default-method-constraint.current.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.current.stderr?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/default-method-constraint.rs:7:12\n-   |\n-LL | #![feature(return_position_impl_trait_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-warning: 1 warning emitted\n-"}, {"sha": "7bb79911f56f81168e24eae0f7d9ab3387b7887d", "filename": "tests/ui/impl-trait/in-trait/default-method-constraint.next.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5133e154590991203c84702ef59482f729b19bbf/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5133e154590991203c84702ef59482f729b19bbf/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.next.stderr?ref=5133e154590991203c84702ef59482f729b19bbf", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/default-method-constraint.rs:7:12\n-   |\n-LL | #![feature(return_position_impl_trait_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-warning: 1 warning emitted\n-"}, {"sha": "4f0bf2e7dfe16fc94a9dd53a4db8a9bbded3e623", "filename": "tests/ui/impl-trait/in-trait/default-method-constraint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -5,7 +5,6 @@\n // This didn't work in the previous default RPITIT method hack attempt\n \n #![feature(return_position_impl_trait_in_trait)]\n-//~^ WARN the feature `return_position_impl_trait_in_trait` is incomplete\n \n trait Foo {\n     fn bar(x: bool) -> impl Sized {"}, {"sha": "d4d0124a6599c7282ce22e6f1821e0e701643393", "filename": "tests/ui/impl-trait/in-trait/dont-project-to-rpitit-with-no-value.current.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.current.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,21 +1,12 @@\n-warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/dont-project-to-rpitit-with-no-value.rs:4:12\n-   |\n-LL | #![feature(return_position_impl_trait_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0046]: not all trait items implemented, missing: `foo`\n-  --> $DIR/dont-project-to-rpitit-with-no-value.rs:12:1\n+  --> $DIR/dont-project-to-rpitit-with-no-value.rs:11:1\n    |\n LL |     fn foo(&self) -> impl Sized;\n    |     ---------------------------- `foo` from trait\n ...\n LL | impl MyTrait for i32 {\n    | ^^^^^^^^^^^^^^^^^^^^ missing `foo` in implementation\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0046`."}, {"sha": "d4d0124a6599c7282ce22e6f1821e0e701643393", "filename": "tests/ui/impl-trait/in-trait/dont-project-to-rpitit-with-no-value.next.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.next.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,21 +1,12 @@\n-warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/dont-project-to-rpitit-with-no-value.rs:4:12\n-   |\n-LL | #![feature(return_position_impl_trait_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0046]: not all trait items implemented, missing: `foo`\n-  --> $DIR/dont-project-to-rpitit-with-no-value.rs:12:1\n+  --> $DIR/dont-project-to-rpitit-with-no-value.rs:11:1\n    |\n LL |     fn foo(&self) -> impl Sized;\n    |     ---------------------------- `foo` from trait\n ...\n LL | impl MyTrait for i32 {\n    | ^^^^^^^^^^^^^^^^^^^^ missing `foo` in implementation\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0046`."}, {"sha": "4d50b8c927870feb81d892306e1885bd5fb5e2cc", "filename": "tests/ui/impl-trait/in-trait/dont-project-to-rpitit-with-no-value.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -2,7 +2,6 @@\n // revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n-//~^ WARN the feature `return_position_impl_trait_in_trait` is incomplete\n \n trait MyTrait {\n     fn foo(&self) -> impl Sized;"}, {"sha": "150723898bd78f272f40e5851ecbdc433b3e69af", "filename": "tests/ui/invalid/invalid-debugger-visualizer-option.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-option.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,7 +1,6 @@\n // normalize-stderr-test: \"foo.random:.*\\(\" -> \"foo.random: $$FILE_NOT_FOUND_MSG (\"\n // normalize-stderr-test: \"os error \\d+\" -> \"os error $$FILE_NOT_FOUND_CODE\"\n \n-#![feature(debugger_visualizer)]\n #![debugger_visualizer(random_file = \"../foo.random\")] //~ ERROR invalid argument\n #![debugger_visualizer(natvis_file = \"../foo.random\")] //~ ERROR\n fn main() {}"}, {"sha": "6fbb4d641e6f65e6c667e636456295163fe11698", "filename": "tests/ui/invalid/invalid-debugger-visualizer-option.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-option.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,5 +1,5 @@\n error: invalid argument\n-  --> $DIR/invalid-debugger-visualizer-option.rs:5:24\n+  --> $DIR/invalid-debugger-visualizer-option.rs:4:24\n    |\n LL | #![debugger_visualizer(random_file = \"../foo.random\")]\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -9,7 +9,7 @@ LL | #![debugger_visualizer(random_file = \"../foo.random\")]\n    = note: expected: `gdb_script_file = \"...\"`\n \n error: couldn't read $DIR/../foo.random: $FILE_NOT_FOUND_MSG (os error $FILE_NOT_FOUND_CODE)\n-  --> $DIR/invalid-debugger-visualizer-option.rs:6:24\n+  --> $DIR/invalid-debugger-visualizer-option.rs:5:24\n    |\n LL | #![debugger_visualizer(natvis_file = \"../foo.random\")]\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f9dd20dbfed1dc9a0d2a3b83c313f217952a0b44", "filename": "tests/ui/invalid/invalid-debugger-visualizer-target.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,4 +1,2 @@\n-#![feature(debugger_visualizer)]\n-\n #[debugger_visualizer(natvis_file = \"../foo.natvis\")] //~ ERROR attribute should be applied to a module\n fn main() {}"}, {"sha": "7944f7518593c78765a28bd85cae5a27f25d1532", "filename": "tests/ui/invalid/invalid-debugger-visualizer-target.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,5 +1,5 @@\n error: attribute should be applied to a module\n-  --> $DIR/invalid-debugger-visualizer-target.rs:3:1\n+  --> $DIR/invalid-debugger-visualizer-target.rs:1:1\n    |\n LL | #[debugger_visualizer(natvis_file = \"../foo.natvis\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "dbcf2a5131b5b449356c79b018e1261a0b70d4e1", "filename": "tests/ui/lint/noop-method-call.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Flint%2Fnoop-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Flint%2Fnoop-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fnoop-method-call.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -19,18 +19,17 @@ fn main() {\n     let clone_type_ref = &CloneType(1u32);\n     let clone_type_ref_clone: CloneType<u32> = clone_type_ref.clone();\n \n-    // Calling clone on a double reference doesn't warn since the method call itself\n-    // peels the outer reference off\n     let clone_type_ref = &&CloneType(1u32);\n     let clone_type_ref_clone: &CloneType<u32> = clone_type_ref.clone();\n+    //~^ WARNING using `.clone()` on a double reference, which returns `&CloneType<u32>`\n \n     let non_deref_type = &PlainType(1u32);\n     let non_deref_type_deref: &PlainType<u32> = non_deref_type.deref();\n     //~^ WARNING call to `.deref()` on a reference in this situation does nothing\n \n-    // Dereferencing a &&T does not warn since it has collapsed the double reference\n     let non_deref_type = &&PlainType(1u32);\n     let non_deref_type_deref: &PlainType<u32> = non_deref_type.deref();\n+    //~^ WARNING using `.deref()` on a double reference, which returns `&PlainType<u32>`\n \n     let non_borrow_type = &PlainType(1u32);\n     let non_borrow_type_borrow: &PlainType<u32> = non_borrow_type.borrow();\n@@ -41,7 +40,8 @@ fn main() {\n     let non_borrow_type_borrow: &PlainType<u32> = non_borrow_type.borrow();\n \n     let xs = [\"a\", \"b\", \"c\"];\n-    let _v: Vec<&str> = xs.iter().map(|x| x.clone()).collect(); // ok, but could use `*x` instead\n+    let _v: Vec<&str> = xs.iter().map(|x| x.clone()).collect(); // could use `*x` instead\n+    //~^ WARNING using `.clone()` on a double reference, which returns `&str`\n }\n \n fn generic<T>(non_clone_type: &PlainType<T>) {"}, {"sha": "37cd1a0fc18eab7a2922d6e04f2d41b5edcce53d", "filename": "tests/ui/lint/noop-method-call.stderr", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Flint%2Fnoop-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Flint%2Fnoop-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fnoop-method-call.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -11,22 +11,42 @@ note: the lint level is defined here\n LL | #![warn(noop_method_call)]\n    |         ^^^^^^^^^^^^^^^^\n \n+warning: using `.clone()` on a double reference, which returns `&CloneType<u32>` instead of cloning the inner type\n+  --> $DIR/noop-method-call.rs:23:63\n+   |\n+LL |     let clone_type_ref_clone: &CloneType<u32> = clone_type_ref.clone();\n+   |                                                               ^^^^^^^^\n+   |\n+   = note: `#[warn(suspicious_double_ref_op)]` on by default\n+\n warning: call to `.deref()` on a reference in this situation does nothing\n-  --> $DIR/noop-method-call.rs:28:63\n+  --> $DIR/noop-method-call.rs:27:63\n    |\n LL |     let non_deref_type_deref: &PlainType<u32> = non_deref_type.deref();\n    |                                                               ^^^^^^^^ unnecessary method call\n    |\n    = note: the type `&PlainType<u32>` which `deref` is being called on is the same as the type returned from `deref`, so the method call does not do anything and can be removed\n \n+warning: using `.deref()` on a double reference, which returns `&PlainType<u32>` instead of dereferencing the inner type\n+  --> $DIR/noop-method-call.rs:31:63\n+   |\n+LL |     let non_deref_type_deref: &PlainType<u32> = non_deref_type.deref();\n+   |                                                               ^^^^^^^^\n+\n warning: call to `.borrow()` on a reference in this situation does nothing\n-  --> $DIR/noop-method-call.rs:36:66\n+  --> $DIR/noop-method-call.rs:35:66\n    |\n LL |     let non_borrow_type_borrow: &PlainType<u32> = non_borrow_type.borrow();\n    |                                                                  ^^^^^^^^^ unnecessary method call\n    |\n    = note: the type `&PlainType<u32>` which `borrow` is being called on is the same as the type returned from `borrow`, so the method call does not do anything and can be removed\n \n+warning: using `.clone()` on a double reference, which returns `&str` instead of cloning the inner type\n+  --> $DIR/noop-method-call.rs:43:44\n+   |\n+LL |     let _v: Vec<&str> = xs.iter().map(|x| x.clone()).collect(); // could use `*x` instead\n+   |                                            ^^^^^^^^\n+\n warning: call to `.clone()` on a reference in this situation does nothing\n   --> $DIR/noop-method-call.rs:48:19\n    |\n@@ -43,5 +63,5 @@ LL |     non_clone_type.clone();\n    |\n    = note: the type `&PlainType<u32>` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed\n \n-warning: 5 warnings emitted\n+warning: 8 warnings emitted\n "}, {"sha": "b9bcd31c2a8b0bfdbb219411965e87f24fdd6b53", "filename": "tests/ui/lint/suspicious-double-ref-op.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Flint%2Fsuspicious-double-ref-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Flint%2Fsuspicious-double-ref-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fsuspicious-double-ref-op.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -0,0 +1,30 @@\n+#![feature(lazy_cell)]\n+#![deny(suspicious_double_ref_op, noop_method_call)]\n+\n+pub fn clone_on_double_ref() {\n+    let x = vec![1];\n+    let y = &&x;\n+    let z: &Vec<_> = y.clone();\n+    //~^ ERROR using `.clone()` on a double reference, which returns `&Vec<i32>`\n+\n+    println!(\"{:p} {:p}\", *y, z);\n+}\n+\n+use std::sync::LazyLock;\n+\n+pub static STRS: LazyLock<&str> = LazyLock::new(|| \"First\");\n+\n+// https://github.com/rust-lang/rust-clippy/issues/9272\n+fn rust_clippy_issue_9272() {\n+    let str = STRS.clone();\n+    println!(\"{str}\")\n+}\n+\n+fn check(mut encoded: &[u8]) {\n+    let _ = &mut encoded.clone();\n+    //~^ ERROR call to `.clone()` on a reference in this situation does nothing\n+    let _ = &encoded.clone();\n+    //~^ ERROR call to `.clone()` on a reference in this situation does nothing\n+}\n+\n+fn main() {}"}, {"sha": "d15487ca23865c308a676891d7fcce3c87ebd120", "filename": "tests/ui/lint/suspicious-double-ref-op.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Flint%2Fsuspicious-double-ref-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Flint%2Fsuspicious-double-ref-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fsuspicious-double-ref-op.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -0,0 +1,35 @@\n+error: using `.clone()` on a double reference, which returns `&Vec<i32>` instead of cloning the inner type\n+  --> $DIR/suspicious-double-ref-op.rs:7:23\n+   |\n+LL |     let z: &Vec<_> = y.clone();\n+   |                       ^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/suspicious-double-ref-op.rs:2:9\n+   |\n+LL | #![deny(suspicious_double_ref_op, noop_method_call)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: call to `.clone()` on a reference in this situation does nothing\n+  --> $DIR/suspicious-double-ref-op.rs:24:25\n+   |\n+LL |     let _ = &mut encoded.clone();\n+   |                         ^^^^^^^^ unnecessary method call\n+   |\n+   = note: the type `&[u8]` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed\n+note: the lint level is defined here\n+  --> $DIR/suspicious-double-ref-op.rs:2:35\n+   |\n+LL | #![deny(suspicious_double_ref_op, noop_method_call)]\n+   |                                   ^^^^^^^^^^^^^^^^\n+\n+error: call to `.clone()` on a reference in this situation does nothing\n+  --> $DIR/suspicious-double-ref-op.rs:26:21\n+   |\n+LL |     let _ = &encoded.clone();\n+   |                     ^^^^^^^^ unnecessary method call\n+   |\n+   = note: the type `&[u8]` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "a55ef5ac7103036b71616d6ae44324a5af1bd588", "filename": "tests/ui/parser/issues/issue-62913.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fparser%2Fissues%2Fissue-62913.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Fparser%2Fissues%2Fissue-62913.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-62913.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,4 +1,4 @@\n \"\\u\\\\\"\n //~^ ERROR incorrect unicode escape sequence\n //~| ERROR invalid trailing slash in literal\n-//~| ERROR expected item, found `\"\\u\\\\\"`\n+//~| ERROR expected item, found `\"\\u\\\"`"}, {"sha": "97f346e8c1dba25587f3c523bb1d31a654e519ad", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-2.nn.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.nn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.nn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.nn.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -4,5 +4,11 @@ error: ~const can only be applied to `#[const_trait]` traits\n LL | trait Bar: ~const Foo {}\n    |                   ^^^\n \n-error: aborting due to previous error\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-2.rs:11:19\n+   |\n+LL | trait Bar: ~const Foo {}\n+   |                   ^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "97f346e8c1dba25587f3c523bb1d31a654e519ad", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-2.ny.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.ny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.ny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.ny.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -4,5 +4,11 @@ error: ~const can only be applied to `#[const_trait]` traits\n LL | trait Bar: ~const Foo {}\n    |                   ^^^\n \n-error: aborting due to previous error\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-2.rs:11:19\n+   |\n+LL | trait Bar: ~const Foo {}\n+   |                   ^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "ecb06271cd9b484f95972bf1851e5a1892d2989a", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -10,6 +10,7 @@ trait Foo {\n #[cfg_attr(any(yy, ny), const_trait)]\n trait Bar: ~const Foo {}\n //[ny,nn]~^ ERROR: ~const can only be applied to `#[const_trait]`\n+//[ny,nn]~| ERROR: ~const can only be applied to `#[const_trait]`\n \n const fn foo<T: Bar>(x: &T) {\n     x.a();"}, {"sha": "c9fa1955498d4e1bb7fd93ae8d4b7a67b92ce1a4", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-2.yn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yn.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: ~const Foo` is not satisfied\n-  --> $DIR/super-traits-fail-2.rs:15:7\n+  --> $DIR/super-traits-fail-2.rs:16:7\n    |\n LL |     x.a();\n    |       ^ the trait `~const Foo` is not implemented for `T`\n    |\n note: the trait `Foo` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/super-traits-fail-2.rs:15:5\n+  --> $DIR/super-traits-fail-2.rs:16:5\n    |\n LL |     x.a();\n    |     ^"}, {"sha": "c9fa1955498d4e1bb7fd93ae8d4b7a67b92ce1a4", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-2.yy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yy.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: ~const Foo` is not satisfied\n-  --> $DIR/super-traits-fail-2.rs:15:7\n+  --> $DIR/super-traits-fail-2.rs:16:7\n    |\n LL |     x.a();\n    |       ^ the trait `~const Foo` is not implemented for `T`\n    |\n note: the trait `Foo` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/super-traits-fail-2.rs:15:5\n+  --> $DIR/super-traits-fail-2.rs:16:5\n    |\n LL |     x.a();\n    |     ^"}, {"sha": "fdc6b805889ed7cc70b216fe050c8ab447233879", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-3.nn.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.nn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.nn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.nn.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -5,10 +5,16 @@ LL | trait Bar: ~const Foo {}\n    |                   ^^^\n \n error: ~const can only be applied to `#[const_trait]` traits\n-  --> $DIR/super-traits-fail-3.rs:15:24\n+  --> $DIR/super-traits-fail-3.rs:12:19\n+   |\n+LL | trait Bar: ~const Foo {}\n+   |                   ^^^\n+\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-3.rs:16:24\n    |\n LL | const fn foo<T: ~const Bar>(x: &T) {\n    |                        ^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "7375b8c819ca74cd5703532c28e7b9a76c78219b", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-3.ny.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.ny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.ny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.ny.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -4,5 +4,11 @@ error: ~const can only be applied to `#[const_trait]` traits\n LL | trait Bar: ~const Foo {}\n    |                   ^^^\n \n-error: aborting due to previous error\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-3.rs:12:19\n+   |\n+LL | trait Bar: ~const Foo {}\n+   |                   ^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "8cf64944ac1c3f32e2a6cecfec1fd93c9232f13d", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -11,6 +11,7 @@ trait Foo {\n #[cfg_attr(any(yy, ny), const_trait)]\n trait Bar: ~const Foo {}\n //[ny,nn]~^ ERROR: ~const can only be applied to `#[const_trait]`\n+//[ny,nn]~| ERROR: ~const can only be applied to `#[const_trait]`\n \n const fn foo<T: ~const Bar>(x: &T) {\n     //[yn,nn]~^ ERROR: ~const can only be applied to `#[const_trait]`"}, {"sha": "7a152914b6964c475df28c22f40f3a17bf713dee", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-3.yn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.yn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.yn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.yn.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -1,5 +1,5 @@\n error: ~const can only be applied to `#[const_trait]` traits\n-  --> $DIR/super-traits-fail-3.rs:15:24\n+  --> $DIR/super-traits-fail-3.rs:16:24\n    |\n LL | const fn foo<T: ~const Bar>(x: &T) {\n    |                        ^^^"}, {"sha": "05921b2c36e46e16e0c940ee6ff480b9129b2c89", "filename": "tests/ui/traits/issue-38404.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Ftraits%2Fissue-38404.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Ftraits%2Fissue-38404.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-38404.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -2,5 +2,6 @@ trait A<T>: std::ops::Add<Self> + Sized {}\n trait B<T>: A<T> {}\n trait C<T>: A<dyn B<T, Output=usize>> {}\n //~^ ERROR the trait `B` cannot be made into an object\n+//~| ERROR the trait `B` cannot be made into an object\n \n fn main() {}"}, {"sha": "f8625f53b78fa7c4aaf097c0f76b00b949af527a", "filename": "tests/ui/traits/issue-38404.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Ftraits%2Fissue-38404.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Ftraits%2Fissue-38404.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-38404.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -12,6 +12,20 @@ LL | trait A<T>: std::ops::Add<Self> + Sized {}\n LL | trait B<T>: A<T> {}\n    |       - this trait cannot be made into an object...\n \n-error: aborting due to previous error\n+error[E0038]: the trait `B` cannot be made into an object\n+  --> $DIR/issue-38404.rs:3:15\n+   |\n+LL | trait C<T>: A<dyn B<T, Output=usize>> {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^ `B` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-38404.rs:1:13\n+   |\n+LL | trait A<T>: std::ops::Add<Self> + Sized {}\n+   |             ^^^^^^^^^^^^^^^^^^^ ...because it uses `Self` as a type parameter\n+LL | trait B<T>: A<T> {}\n+   |       - this trait cannot be made into an object...\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0038`."}, {"sha": "e7e62c077394e8a3cd9f32a4303561db917df0fe", "filename": "tests/ui/typeck/typeck-builtin-bound-type-parameters.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.rs?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -3,6 +3,7 @@ fn foo1<T:Copy<U>, U>(x: T) {}\n \n trait Trait: Copy<dyn Send> {}\n //~^ ERROR trait takes 0 generic arguments but 1 generic argument was supplied\n+//~| ERROR trait takes 0 generic arguments but 1 generic argument was supplied\n \n struct MyStruct1<T: Copy<T>>;\n //~^ ERROR trait takes 0 generic arguments but 1 generic argument was supplied"}, {"sha": "a3517af877cc727a7c60e8cefff5fb7e982cb9fb", "filename": "tests/ui/typeck/typeck-builtin-bound-type-parameters.stderr", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b99493492ad59c7a44c65373558175db42b4151/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr?ref=7b99493492ad59c7a44c65373558175db42b4151", "patch": "@@ -15,37 +15,45 @@ LL | trait Trait: Copy<dyn Send> {}\n    |              expected 0 generic arguments\n \n error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:7:21\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:4:14\n+   |\n+LL | trait Trait: Copy<dyn Send> {}\n+   |              ^^^^---------- help: remove these generics\n+   |              |\n+   |              expected 0 generic arguments\n+\n+error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:8:21\n    |\n LL | struct MyStruct1<T: Copy<T>>;\n    |                     ^^^^--- help: remove these generics\n    |                     |\n    |                     expected 0 generic arguments\n \n error[E0107]: trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:10:25\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:11:25\n    |\n LL | struct MyStruct2<'a, T: Copy<'a>>;\n    |                         ^^^^---- help: remove these generics\n    |                         |\n    |                         expected 0 lifetime arguments\n \n error[E0107]: trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:13:15\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:14:15\n    |\n LL | fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n    |               ^^^^ -- help: remove this lifetime argument\n    |               |\n    |               expected 0 lifetime arguments\n \n error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:13:15\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:14:15\n    |\n LL | fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n    |               ^^^^     - help: remove this generic argument\n    |               |\n    |               expected 0 generic arguments\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0107`."}]}