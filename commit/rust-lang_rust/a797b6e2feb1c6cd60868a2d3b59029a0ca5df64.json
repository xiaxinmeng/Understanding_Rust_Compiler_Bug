{"sha": "a797b6e2feb1c6cd60868a2d3b59029a0ca5df64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3OTdiNmUyZmViMWM2Y2Q2MDg2OGEyZDNiNTkwMjlhMGNhNWRmNjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-07T17:28:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-07T17:28:51Z"}, "message": "Auto merge of #39002 - GuillaumeGomez:debug_libcollections, r=aturon\n\nAdd Debug implementations for libcollection structs\n\nPart of #31869.", "tree": {"sha": "f487614a9344ef2e1e86980bafe9c2844dd61279", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f487614a9344ef2e1e86980bafe9c2844dd61279"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64", "html_url": "https://github.com/rust-lang/rust/commit/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c49d10207a7e105525fb3bd71c18fde6fc2f5aed", "url": "https://api.github.com/repos/rust-lang/rust/commits/c49d10207a7e105525fb3bd71c18fde6fc2f5aed", "html_url": "https://github.com/rust-lang/rust/commit/c49d10207a7e105525fb3bd71c18fde6fc2f5aed"}, {"sha": "0cc2448e053047546aff4ea0749adb06896092b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cc2448e053047546aff4ea0749adb06896092b5", "html_url": "https://github.com/rust-lang/rust/commit/0cc2448e053047546aff4ea0749adb06896092b5"}], "stats": {"total": 257, "additions": 257, "deletions": 0}, "files": [{"sha": "a5a2f70492dc97daaa05e5ef2ee1a770f32173dc", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=a797b6e2feb1c6cd60868a2d3b59029a0ca5df64", "patch": "@@ -228,6 +228,15 @@ pub struct PeekMut<'a, T: 'a + Ord> {\n     sift: bool,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: Ord + fmt::Debug> fmt::Debug for PeekMut<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"PeekMut\")\n+         .field(&self.heap.data[0])\n+         .finish()\n+    }\n+}\n+\n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n impl<'a, T: Ord> Drop for PeekMut<'a, T> {\n     fn drop(&mut self) {\n@@ -968,6 +977,15 @@ pub struct Iter<'a, T: 'a> {\n     iter: slice::Iter<'a, T>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Iter\")\n+         .field(&self.iter.as_slice())\n+         .finish()\n+    }\n+}\n+\n // FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n@@ -1016,6 +1034,15 @@ pub struct IntoIter<T> {\n     iter: vec::IntoIter<T>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<T: fmt::Debug> fmt::Debug for IntoIter<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"IntoIter\")\n+         .field(&self.iter.as_slice())\n+         .finish()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Iterator for IntoIter<T> {\n     type Item = T;\n@@ -1051,6 +1078,7 @@ impl<T> FusedIterator for IntoIter<T> {}\n \n /// An iterator that drains a `BinaryHeap`.\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n+#[derive(Debug)]\n pub struct Drain<'a, T: 'a> {\n     iter: vec::Drain<'a, T>,\n }\n@@ -1200,6 +1228,17 @@ where T: Clone + Ord {\n     place: vec::PlaceBack<'a, T>,\n }\n \n+#[unstable(feature = \"collection_placement\",\n+           reason = \"placement protocol is subject to change\",\n+           issue = \"30172\")]\n+impl<'a, T: Clone + Ord + fmt::Debug> fmt::Debug for BinaryHeapPlace<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"BinaryHeapPlace\")\n+         .field(&self.place)\n+         .finish()\n+    }\n+}\n+\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]"}, {"sha": "e1fabe2cc496b2fb18c63fcd6984aec9ddd8279b", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=a797b6e2feb1c6cd60868a2d3b59029a0ca5df64", "patch": "@@ -270,8 +270,16 @@ pub struct Iter<'a, K: 'a, V: 'a> {\n     length: usize,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Iter<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list().entries(self.clone()).finish()\n+    }\n+}\n+\n /// A mutable iterator over a BTreeMap's entries.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[derive(Debug)]\n pub struct IterMut<'a, K: 'a, V: 'a> {\n     range: RangeMut<'a, K, V>,\n     length: usize,\n@@ -285,20 +293,46 @@ pub struct IntoIter<K, V> {\n     length: usize,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for IntoIter<K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let range = Range {\n+            front: self.front.reborrow(),\n+            back: self.back.reborrow(),\n+        };\n+        f.debug_list().entries(range).finish()\n+    }\n+}\n+\n /// An iterator over a BTreeMap's keys.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Keys<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Keys<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list().entries(self.inner.clone()).finish()\n+    }\n+}\n+\n /// An iterator over a BTreeMap's values.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Values<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Values<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list().entries(self.inner.clone()).finish()\n+    }\n+}\n+\n /// A mutable iterator over a BTreeMap's values.\n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n+#[derive(Debug)]\n pub struct ValuesMut<'a, K: 'a, V: 'a> {\n     inner: IterMut<'a, K, V>,\n }\n@@ -309,6 +343,13 @@ pub struct Range<'a, K: 'a, V: 'a> {\n     back: Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Edge>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Range<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list().entries(self.clone()).finish()\n+    }\n+}\n+\n /// A mutable iterator over a sub-range of BTreeMap's entries.\n pub struct RangeMut<'a, K: 'a, V: 'a> {\n     front: Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>,\n@@ -318,6 +359,17 @@ pub struct RangeMut<'a, K: 'a, V: 'a> {\n     _marker: PhantomData<&'a mut (K, V)>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for RangeMut<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let range = Range {\n+            front: self.front.reborrow(),\n+            back: self.back.reborrow(),\n+        };\n+        f.debug_list().entries(range).finish()\n+    }\n+}\n+\n /// A view into a single entry in a map, which may either be vacant or occupied.\n /// This enum is constructed from the [`entry`] method on [`BTreeMap`].\n ///"}, {"sha": "bfffa0b8efa1cb074168f78c6217055e5371caed", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=a797b6e2feb1c6cd60868a2d3b59029a0ca5df64", "patch": "@@ -85,13 +85,23 @@ pub struct Iter<'a, T: 'a> {\n     iter: Keys<'a, T, ()>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Iter\")\n+         .field(&self.iter.clone())\n+         .finish()\n+    }\n+}\n+\n /// An owning iterator over a `BTreeSet`'s items.\n ///\n /// This structure is created by the `into_iter` method on [`BTreeSet`]\n /// [`BTreeSet`] (provided by the `IntoIterator` trait).\n ///\n /// [`BTreeSet`]: struct.BTreeSet.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[derive(Debug)]\n pub struct IntoIter<T> {\n     iter: ::btree_map::IntoIter<T, ()>,\n }\n@@ -102,6 +112,7 @@ pub struct IntoIter<T> {\n ///\n /// [`BTreeSet`]: struct.BTreeSet.html\n /// [`range`]: struct.BTreeSet.html#method.range\n+#[derive(Debug)]\n pub struct Range<'a, T: 'a> {\n     iter: ::btree_map::Range<'a, T, ()>,\n }\n@@ -118,6 +129,15 @@ pub struct Difference<'a, T: 'a> {\n     b: Peekable<Iter<'a, T>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Difference<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Difference\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n /// A lazy iterator producing elements in the set symmetric difference (in-order).\n ///\n /// This structure is created by the [`symmetric_difference`] method on\n@@ -131,6 +151,15 @@ pub struct SymmetricDifference<'a, T: 'a> {\n     b: Peekable<Iter<'a, T>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for SymmetricDifference<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"SymmetricDifference\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n /// A lazy iterator producing elements in the set intersection (in-order).\n ///\n /// This structure is created by the [`intersection`] method on [`BTreeSet`].\n@@ -143,6 +172,15 @@ pub struct Intersection<'a, T: 'a> {\n     b: Peekable<Iter<'a, T>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Intersection<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Intersection\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n /// A lazy iterator producing elements in the set union (in-order).\n ///\n /// This structure is created by the [`union`] method on [`BTreeSet`].\n@@ -155,6 +193,15 @@ pub struct Union<'a, T: 'a> {\n     b: Peekable<Iter<'a, T>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Union<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Union\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n impl<T: Ord> BTreeSet<T> {\n     /// Makes a new `BTreeSet` with a reasonable choice of B.\n     ///"}, {"sha": "602e874aaeec0de2d0416b93f67e6733a3ed27a7", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=a797b6e2feb1c6cd60868a2d3b59029a0ca5df64", "patch": "@@ -222,6 +222,14 @@ pub struct Iter<E> {\n     marker: marker::PhantomData<E>,\n }\n \n+impl<E: fmt::Debug> fmt::Debug for Iter<E> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Iter\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n // FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n impl<E> Clone for Iter<E> {\n     fn clone(&self) -> Iter<E> {"}, {"sha": "53d5466e12bb0cdec2a72a79295df5dd15f6afe1", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=a797b6e2feb1c6cd60868a2d3b59029a0ca5df64", "patch": "@@ -28,6 +28,7 @@\n \n #![cfg_attr(test, allow(deprecated))] // rand\n #![deny(warnings)]\n+#![deny(missing_debug_implementations)]\n \n #![feature(alloc)]\n #![feature(allow_internal_unstable)]"}, {"sha": "d4f77d625b361d4633f2a538486d02d1fc3dd218", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=a797b6e2feb1c6cd60868a2d3b59029a0ca5df64", "patch": "@@ -65,6 +65,15 @@ pub struct Iter<'a, T: 'a> {\n     marker: PhantomData<&'a Node<T>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Iter\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n // FIXME #19839: deriving is too aggressive on the bounds (T doesn't need to be Clone).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n@@ -82,13 +91,31 @@ pub struct IterMut<'a, T: 'a> {\n     len: usize,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for IterMut<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"IterMut\")\n+         .field(self.clone())\n+         .finish()\n+    }\n+}\n+\n /// An iterator over the elements of a `LinkedList`.\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {\n     list: LinkedList<T>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<T: fmt::Debug> fmt::Debug for IntoIter<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"IntoIter\")\n+         .field(self.clone())\n+         .finish()\n+    }\n+}\n+\n impl<T> Node<T> {\n     fn new(element: T) -> Self {\n         Node {\n@@ -1077,6 +1104,17 @@ pub struct FrontPlace<'a, T: 'a> {\n     node: IntermediateBox<Node<T>>,\n }\n \n+#[unstable(feature = \"collection_placement\",\n+           reason = \"struct name and placement protocol are subject to change\",\n+           issue = \"30172\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for FrontPlace<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"FrontPlace\")\n+         .field(self.clone())\n+         .finish()\n+    }\n+}\n+\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]\n@@ -1121,6 +1159,17 @@ pub struct BackPlace<'a, T: 'a> {\n     node: IntermediateBox<Node<T>>,\n }\n \n+#[unstable(feature = \"collection_placement\",\n+           reason = \"struct name and placement protocol are subject to change\",\n+           issue = \"30172\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for BackPlace<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"BackPlace\")\n+         .field(self.clone())\n+         .finish()\n+    }\n+}\n+\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]"}, {"sha": "87315fff0a07d915f8ac09aeb5d603e946730409", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=a797b6e2feb1c6cd60868a2d3b59029a0ca5df64", "patch": "@@ -19,6 +19,7 @@\n // It's cleaner to just turn off the unused_imports warning than to fix them.\n #![allow(unused_imports)]\n \n+use core::fmt;\n use core::str as core_str;\n use core::str::pattern::Pattern;\n use core::str::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n@@ -122,6 +123,13 @@ pub struct EncodeUtf16<'a> {\n     encoder: Utf16Encoder<Chars<'a>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a> fmt::Debug for EncodeUtf16<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"EncodeUtf16 { .. }\")\n+    }\n+}\n+\n #[stable(feature = \"encode_utf16\", since = \"1.8.0\")]\n impl<'a> Iterator for EncodeUtf16<'a> {\n     type Item = u16;"}, {"sha": "4c82e2e2e7e35ea15299172a20efaf543874e15a", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=a797b6e2feb1c6cd60868a2d3b59029a0ca5df64", "patch": "@@ -1990,6 +1990,13 @@ pub struct Drain<'a> {\n     iter: Chars<'a>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a> fmt::Debug for Drain<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Drain { .. }\")\n+    }\n+}\n+\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n unsafe impl<'a> Sync for Drain<'a> {}\n #[stable(feature = \"drain\", since = \"1.6.0\")]"}, {"sha": "dc0f33d9bc3e00d82e0ca9a5d92d835050bc218a", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=a797b6e2feb1c6cd60868a2d3b59029a0ca5df64", "patch": "@@ -2089,6 +2089,15 @@ pub struct Drain<'a, T: 'a> {\n     vec: Shared<Vec<T>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Drain<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Drain\")\n+         .field(&self.iter.as_slice())\n+         .finish()\n+    }\n+}\n+\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n unsafe impl<'a, T: Sync> Sync for Drain<'a, T> {}\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n@@ -2155,6 +2164,7 @@ impl<'a, T> FusedIterator for Drain<'a, T> {}\n #[unstable(feature = \"collection_placement\",\n            reason = \"struct name and placement protocol are subject to change\",\n            issue = \"30172\")]\n+#[derive(Debug)]\n pub struct PlaceBack<'a, T: 'a> {\n     vec: &'a mut Vec<T>,\n }"}, {"sha": "8d42045ff16372cbaccdfc7b80124488d4c444b2", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=a797b6e2feb1c6cd60868a2d3b59029a0ca5df64", "patch": "@@ -1856,6 +1856,15 @@ pub struct Iter<'a, T: 'a> {\n     head: usize,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Iter\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n // FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n@@ -1928,6 +1937,15 @@ pub struct IterMut<'a, T: 'a> {\n     head: usize,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for IterMut<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"IterMut\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Iterator for IterMut<'a, T> {\n     type Item = &'a mut T;\n@@ -1994,6 +2012,15 @@ pub struct IntoIter<T> {\n     inner: VecDeque<T>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<T: fmt::Debug> fmt::Debug for IntoIter<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"IntoIter\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Iterator for IntoIter<T> {\n     type Item = T;\n@@ -2037,6 +2064,15 @@ pub struct Drain<'a, T: 'a> {\n     deque: Shared<VecDeque<T>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Drain<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Drain\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n unsafe impl<'a, T: Sync> Sync for Drain<'a, T> {}\n #[stable(feature = \"drain\", since = \"1.6.0\")]"}]}