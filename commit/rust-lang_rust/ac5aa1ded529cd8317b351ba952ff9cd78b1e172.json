{"sha": "ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "node_id": "C_kwDOAAsO6NoAKGFjNWFhMWRlZDUyOWNkODMxN2IzNTFiYTk1MmZmOWNkNzhiMWUxNzI", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-06-03T14:45:47Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-06-03T14:45:47Z"}, "message": "Use Drop instead of destroy() for locks.", "tree": {"sha": "209ea71e0de957f31459e3a1d97c0ef2f074d1bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/209ea71e0de957f31459e3a1d97c0ef2f074d1bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "html_url": "https://github.com/rust-lang/rust/commit/ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb1976011e3df96b5d3eccd6b2f4e51ef7dc8f16", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb1976011e3df96b5d3eccd6b2f4e51ef7dc8f16", "html_url": "https://github.com/rust-lang/rust/commit/fb1976011e3df96b5d3eccd6b2f4e51ef7dc8f16"}], "stats": {"total": 126, "additions": 39, "deletions": 87}, "files": [{"sha": "46f45b1977173e1a0ceecd829552a7a3712e32e3", "filename": "library/std/src/sys/hermit/condvar.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -70,9 +70,13 @@ impl Condvar {\n         mutex.lock();\n         res == 0\n     }\n+}\n \n-    pub unsafe fn destroy(&self) {\n-        let _ = abi::sem_destroy(self.sem1);\n-        let _ = abi::sem_destroy(self.sem2);\n+impl Drop for Condvar {\n+    fn drop(&mut self) {\n+        unsafe {\n+            let _ = abi::sem_destroy(self.sem1);\n+            let _ = abi::sem_destroy(self.sem2);\n+        }\n     }\n }"}, {"sha": "ef44bf411fba5c0bdf3845f1d8eabdd93489de52", "filename": "library/std/src/sys/hermit/mutex.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -215,7 +215,4 @@ impl Mutex {\n         }\n         guard.locked\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n }"}, {"sha": "d43fa08a17150418700c6e481463dafba6c77880", "filename": "library/std/src/sys/hermit/rwlock.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -84,12 +84,6 @@ impl RwLock {\n         // FIXME: should only wake up one of these some of the time\n         self.cond.notify_all();\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {\n-        self.lock.destroy();\n-        self.cond.destroy();\n-    }\n }\n \n impl State {"}, {"sha": "008cd8fb1e3926f3dbe5c65bde43afda92ddc31c", "filename": "library/std/src/sys/itron/condvar.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -117,8 +117,6 @@ impl Condvar {\n         unsafe { mutex.lock() };\n         success\n     }\n-\n-    pub unsafe fn destroy(&self) {}\n }\n \n mod waiter_queue {"}, {"sha": "2ba8454ff9245a6836b16843e3ace40e472ffcd9", "filename": "library/std/src/sys/itron/mutex.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fmutex.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -64,8 +64,10 @@ impl Mutex {\n             }\n         }\n     }\n+}\n \n-    pub unsafe fn destroy(&self) {\n+impl Drop for Mutex {\n+    fn drop(&mut self) {\n         if let Some(mtx) = self.mtx.get().map(|x| x.0) {\n             expect_success_aborting(unsafe { abi::del_mtx(mtx) }, &\"del_mtx\");\n         }"}, {"sha": "74e45e9505faf55d5267c599780d39a16621465f", "filename": "library/std/src/sys/sgx/condvar.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fcondvar.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -38,7 +38,4 @@ impl Condvar {\n         unsafe { mutex.lock() };\n         success\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n }"}, {"sha": "83b84b925bf6711b3bbe636e43bba909c9297728", "filename": "library/std/src/sys/sgx/mutex.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmutex.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -52,7 +52,4 @@ impl Mutex {\n             true\n         }\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n }"}, {"sha": "a4e74c5da08f094694e4bd9e3e8369a6a3425e0c", "filename": "library/std/src/sys/sgx/rwlock.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -168,9 +168,6 @@ impl RwLock {\n             unsafe { self.__read_unlock(rguard, wguard) };\n         }\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n }\n \n // The following functions are needed by libunwind. These symbols are named"}, {"sha": "433abc895f5d5c5f7b9ecba4f513ae7a74bb4cca", "filename": "library/std/src/sys/solid/rwlock.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Frwlock.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -82,9 +82,11 @@ impl RwLock {\n         let rwl = self.raw();\n         expect_success_aborting(unsafe { abi::rwl_unl_rwl(rwl) }, &\"rwl_unl_rwl\");\n     }\n+}\n \n+impl Drop for RwLock {\n     #[inline]\n-    pub unsafe fn destroy(&self) {\n+    fn drop(&mut self) {\n         if let Some(rwl) = self.rwl.get().map(|x| x.0) {\n             expect_success_aborting(unsafe { abi::rwl_del_rwl(rwl) }, &\"rwl_del_rwl\");\n         }"}, {"sha": "5731ce44286fd94f41ea2bc2ed580d826e8e4bbb", "filename": "library/std/src/sys/unix/locks/futex.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -24,9 +24,6 @@ impl Mutex {\n     #[inline]\n     pub unsafe fn init(&mut self) {}\n \n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n-\n     #[inline]\n     pub unsafe fn try_lock(&self) -> bool {\n         self.futex.compare_exchange(0, 1, Acquire, Relaxed).is_ok()\n@@ -121,9 +118,6 @@ impl Condvar {\n     #[inline]\n     pub unsafe fn init(&mut self) {}\n \n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n-\n     // All the memory orderings here are `Relaxed`,\n     // because synchronization is done by unlocking and locking the mutex.\n "}, {"sha": "1f902f50587d2193e8021d507edb01990e52800c", "filename": "library/std/src/sys/unix/locks/futex_rwlock.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -63,9 +63,6 @@ impl RwLock {\n         Self { state: AtomicU32::new(0), writer_notify: AtomicU32::new(0) }\n     }\n \n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n-\n     #[inline]\n     pub unsafe fn try_read(&self) -> bool {\n         self.state"}, {"sha": "2488d5a4e06ca2d55ddae94695658b4e77f487ab", "filename": "library/std/src/sys/unix/locks/pthread_condvar.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -179,14 +179,14 @@ impl Condvar {\n \n     #[inline]\n     #[cfg(not(target_os = \"dragonfly\"))]\n-    pub unsafe fn destroy(&self) {\n+    unsafe fn destroy(&mut self) {\n         let r = libc::pthread_cond_destroy(self.inner.get());\n         debug_assert_eq!(r, 0);\n     }\n \n     #[inline]\n     #[cfg(target_os = \"dragonfly\")]\n-    pub unsafe fn destroy(&self) {\n+    unsafe fn destroy(&mut self) {\n         let r = libc::pthread_cond_destroy(self.inner.get());\n         // On DragonFly pthread_cond_destroy() returns EINVAL if called on\n         // a condvar that was just initialized with\n@@ -195,3 +195,10 @@ impl Condvar {\n         debug_assert!(r == 0 || r == libc::EINVAL);\n     }\n }\n+\n+impl Drop for Condvar {\n+    #[inline]\n+    fn drop(&mut self) {\n+        unsafe { self.destroy() };\n+    }\n+}"}, {"sha": "13a234668af81653b1dfae1ead402268e4929d5b", "filename": "library/std/src/sys/unix/locks/pthread_mutex.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -73,13 +73,13 @@ impl Mutex {\n     }\n     #[inline]\n     #[cfg(not(target_os = \"dragonfly\"))]\n-    pub unsafe fn destroy(&self) {\n+    unsafe fn destroy(&mut self) {\n         let r = libc::pthread_mutex_destroy(self.inner.get());\n         debug_assert_eq!(r, 0);\n     }\n     #[inline]\n     #[cfg(target_os = \"dragonfly\")]\n-    pub unsafe fn destroy(&self) {\n+    unsafe fn destroy(&mut self) {\n         let r = libc::pthread_mutex_destroy(self.inner.get());\n         // On DragonFly pthread_mutex_destroy() returns EINVAL if called on a\n         // mutex that was just initialized with libc::PTHREAD_MUTEX_INITIALIZER.\n@@ -89,6 +89,13 @@ impl Mutex {\n     }\n }\n \n+impl Drop for Mutex {\n+    #[inline]\n+    fn drop(&mut self) {\n+        unsafe { self.destroy() };\n+    }\n+}\n+\n pub(super) struct PthreadMutexAttr<'a>(pub &'a mut MaybeUninit<libc::pthread_mutexattr_t>);\n \n impl Drop for PthreadMutexAttr<'_> {"}, {"sha": "4f7f4783ad8858897ce1cd7175aa1d43484d1e49", "filename": "library/std/src/sys/unix/locks/pthread_rwlock.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -128,7 +128,7 @@ impl RwLock {\n         self.raw_unlock();\n     }\n     #[inline]\n-    pub unsafe fn destroy(&self) {\n+    unsafe fn destroy(&mut self) {\n         let r = libc::pthread_rwlock_destroy(self.inner.get());\n         // On DragonFly pthread_rwlock_destroy() returns EINVAL if called on a\n         // rwlock that was just initialized with\n@@ -141,3 +141,10 @@ impl RwLock {\n         }\n     }\n }\n+\n+impl Drop for RwLock {\n+    #[inline]\n+    fn drop(&mut self) {\n+        unsafe { self.destroy() };\n+    }\n+}"}, {"sha": "d2144be37e34de10ce4e0ef231916f9ff6a22a32", "filename": "library/std/src/sys/unsupported/locks/condvar.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -26,7 +26,4 @@ impl Condvar {\n     pub unsafe fn wait_timeout(&self, _mutex: &Mutex, _dur: Duration) -> bool {\n         panic!(\"condvar wait not supported\");\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n }"}, {"sha": "56bad71b189f55a53578c44133ca8492314d10b9", "filename": "library/std/src/sys/unsupported/locks/mutex.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmutex.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -32,7 +32,4 @@ impl Mutex {\n     pub unsafe fn try_lock(&self) -> bool {\n         self.locked.replace(true) == false\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n }"}, {"sha": "bf6e2d3d080b435e0f625877a8bbe05f501bc461", "filename": "library/std/src/sys/unsupported/locks/rwlock.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -62,7 +62,4 @@ impl RwLock {\n     pub unsafe fn write_unlock(&self) {\n         assert_eq!(self.mode.replace(0), -1);\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {}\n }"}, {"sha": "1cb0d241a07c31248963239d24e2f84650221dc6", "filename": "library/std/src/sys/windows/locks/condvar.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fcondvar.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -51,8 +51,4 @@ impl Condvar {\n     pub unsafe fn notify_all(&self) {\n         c::WakeAllConditionVariable(self.inner.get())\n     }\n-\n-    pub unsafe fn destroy(&self) {\n-        // ...\n-    }\n }"}, {"sha": "08f55844a0efa23bdf56f9ee29c8cd333c34f81a", "filename": "library/std/src/sys/windows/locks/mutex.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmutex.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -53,9 +53,4 @@ impl Mutex {\n     pub unsafe fn unlock(&self) {\n         c::ReleaseSRWLockExclusive(raw(self));\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {\n-        // SRWLock does not need to be destroyed.\n-    }\n }"}, {"sha": "a32df85e2f63c266ddd9693d9a1ef4a03bb9f96d", "filename": "library/std/src/sys/windows/locks/rwlock.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -38,9 +38,4 @@ impl RwLock {\n     pub unsafe fn write_unlock(&self) {\n         c::ReleaseSRWLockExclusive(self.inner.get())\n     }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {\n-        // ...\n-    }\n }"}, {"sha": "4e55340d6aa5dd51a36da22e8479292406aa527c", "filename": "library/std/src/sys_common/condvar.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -55,9 +55,3 @@ impl Condvar {\n         self.inner.wait_timeout(mutex.raw(), dur)\n     }\n }\n-\n-impl Drop for Condvar {\n-    fn drop(&mut self) {\n-        unsafe { self.inner.destroy() };\n-    }\n-}"}, {"sha": "c0a681246a4811441a8f3933240c893e41b173f2", "filename": "library/std/src/sys_common/mutex.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -92,9 +92,3 @@ impl MovableMutex {\n         self.0.unlock()\n     }\n }\n-\n-impl Drop for MovableMutex {\n-    fn drop(&mut self) {\n-        unsafe { self.0.destroy() };\n-    }\n-}"}, {"sha": "8921af311d4152bb7b6fc7b4c37763ce35e14915", "filename": "library/std/src/sys_common/remutex.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -168,13 +168,6 @@ impl<T> ReentrantMutex<T> {\n     }\n }\n \n-impl<T> Drop for ReentrantMutex<T> {\n-    fn drop(&mut self) {\n-        // Safety: We're the unique owner of this mutex and not going to use it afterwards.\n-        unsafe { self.mutex.destroy() }\n-    }\n-}\n-\n impl<T> Deref for ReentrantMutexGuard<'_, T> {\n     type Target = T;\n "}, {"sha": "13a75705fec103ee903dac3ceea811fd09acc9ec", "filename": "library/std/src/sys_common/rwlock.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5aa1ded529cd8317b351ba952ff9cd78b1e172/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs?ref=ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "patch": "@@ -126,9 +126,3 @@ impl MovableRwLock {\n         self.0.write_unlock()\n     }\n }\n-\n-impl Drop for MovableRwLock {\n-    fn drop(&mut self) {\n-        unsafe { self.0.destroy() };\n-    }\n-}"}]}