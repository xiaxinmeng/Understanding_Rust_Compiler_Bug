{"sha": "16a0d03698bfc9f93250490797f9a1a870f8bcfe", "node_id": "C_kwDOAAsO6NoAKDE2YTBkMDM2OThiZmM5ZjkzMjUwNDkwNzk3ZjlhMWE4NzBmOGJjZmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-31T12:14:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-31T12:14:51Z"}, "message": "Auto merge of #97521 - SkiFire13:clarify-vec-as-ptr, r=Dylan-DPC\n\nClarify the guarantees of Vec::as_ptr and Vec::as_mut_ptr when there's no allocation\n\nCurrently the documentation says they return a pointer to the vector's buffer, which has the implied precondition that the vector allocated some memory. However `Vec`'s documentation also specifies that it won't always allocate, so it's unclear whether the pointer returned is valid in that case. Of course you won't be able to read/write actual bytes to/from it since the capacity is 0, but there's an exception: zero sized read/writes. They are still valid as long as the pointer is not null and the memory it points to wasn't deallocated, but `Vec::as_ptr` and `Vec::as_mut_ptr` don't specify that's not the case. This PR thus specifies they are actually valid for zero sized reads since `Vec` is implemented to hold a dangling pointer in those cases, which is neither null nor was deallocated.", "tree": {"sha": "cdf5c0c82d1e2c501badb5b8e1cb15d763964dc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdf5c0c82d1e2c501badb5b8e1cb15d763964dc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16a0d03698bfc9f93250490797f9a1a870f8bcfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16a0d03698bfc9f93250490797f9a1a870f8bcfe", "html_url": "https://github.com/rust-lang/rust/commit/16a0d03698bfc9f93250490797f9a1a870f8bcfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16a0d03698bfc9f93250490797f9a1a870f8bcfe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcbd5f5134e396353207f1f79e50794b83cee7d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcbd5f5134e396353207f1f79e50794b83cee7d2", "html_url": "https://github.com/rust-lang/rust/commit/dcbd5f5134e396353207f1f79e50794b83cee7d2"}, {"sha": "8ef2dd70e6dc90a8895ca5000a2868e411ba34b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef2dd70e6dc90a8895ca5000a2868e411ba34b7", "html_url": "https://github.com/rust-lang/rust/commit/8ef2dd70e6dc90a8895ca5000a2868e411ba34b7"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "0f0692eed494e86bab80bca6d1add10639a4e351", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16a0d03698bfc9f93250490797f9a1a870f8bcfe/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16a0d03698bfc9f93250490797f9a1a870f8bcfe/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=16a0d03698bfc9f93250490797f9a1a870f8bcfe", "patch": "@@ -1107,7 +1107,8 @@ impl<T, A: Allocator> Vec<T, A> {\n         self\n     }\n \n-    /// Returns a raw pointer to the vector's buffer.\n+    /// Returns a raw pointer to the vector's buffer, or a dangling raw pointer\n+    /// valid for zero sized reads if the vector didn't allocate.\n     ///\n     /// The caller must ensure that the vector outlives the pointer this\n     /// function returns, or else it will end up pointing to garbage.\n@@ -1144,7 +1145,8 @@ impl<T, A: Allocator> Vec<T, A> {\n         ptr\n     }\n \n-    /// Returns an unsafe mutable pointer to the vector's buffer.\n+    /// Returns an unsafe mutable pointer to the vector's buffer, or a dangling\n+    /// raw pointer valid for zero sized reads if the vector didn't allocate.\n     ///\n     /// The caller must ensure that the vector outlives the pointer this\n     /// function returns, or else it will end up pointing to garbage."}]}