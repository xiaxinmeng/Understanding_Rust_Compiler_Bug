{"sha": "22b686ad9995266b695344fcfb8e14f710b9ea6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYjY4NmFkOTk5NTI2NmI2OTUzNDRmY2ZiOGUxNGY3MTBiOWVhNmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-27T04:46:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-27T04:46:45Z"}, "message": "Auto merge of #77246 - yaahc:typeof-errors, r=oli-obk\n\ntry enabling typeof for fun error messages", "tree": {"sha": "92ade2a0eaf3ae96cb385f241e499c54fe6db1c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92ade2a0eaf3ae96cb385f241e499c54fe6db1c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22b686ad9995266b695344fcfb8e14f710b9ea6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22b686ad9995266b695344fcfb8e14f710b9ea6b", "html_url": "https://github.com/rust-lang/rust/commit/22b686ad9995266b695344fcfb8e14f710b9ea6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22b686ad9995266b695344fcfb8e14f710b9ea6b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eb956fcbb040d9d4276d97944b5c6df2f84ede8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb956fcbb040d9d4276d97944b5c6df2f84ede8", "html_url": "https://github.com/rust-lang/rust/commit/6eb956fcbb040d9d4276d97944b5c6df2f84ede8"}, {"sha": "ed903f9b912630f0e5fc92101b3e3bc5c99f558d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed903f9b912630f0e5fc92101b3e3bc5c99f558d", "html_url": "https://github.com/rust-lang/rust/commit/ed903f9b912630f0e5fc92101b3e3bc5c99f558d"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "2f2e90e4bd66fcf465c165478ddc1e29f67f8a8f", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22b686ad9995266b695344fcfb8e14f710b9ea6b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b686ad9995266b695344fcfb8e14f710b9ea6b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=22b686ad9995266b695344fcfb8e14f710b9ea6b", "patch": "@@ -2279,9 +2279,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let array_ty = tcx.mk_ty(ty::Array(self.ast_ty_to_ty(&ty), length));\n                 self.normalize_ty(ast_ty.span, array_ty)\n             }\n-            hir::TyKind::Typeof(ref _e) => {\n+            hir::TyKind::Typeof(ref e) => {\n                 tcx.sess.emit_err(TypeofReservedKeywordUsed { span: ast_ty.span });\n-                tcx.ty_error()\n+                tcx.type_of(tcx.hir().local_def_id(e.hir_id))\n             }\n             hir::TyKind::Infer => {\n                 // Infer also appears as the type of arguments or return"}, {"sha": "cb4257e05347ae2550195d5f28fb779b9d29083e", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22b686ad9995266b695344fcfb8e14f710b9ea6b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b686ad9995266b695344fcfb8e14f710b9ea6b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=22b686ad9995266b695344fcfb8e14f710b9ea6b", "patch": "@@ -540,6 +540,12 @@ fn typeck_with_fallback<'tcx>(\n                             kind: TypeVariableOriginKind::TypeInference,\n                             span,\n                         }),\n+                        Node::Ty(&hir::Ty {\n+                            kind: hir::TyKind::Typeof(ref anon_const), ..\n+                        }) if anon_const.hir_id == id => fcx.next_ty_var(TypeVariableOrigin {\n+                            kind: TypeVariableOriginKind::TypeInference,\n+                            span,\n+                        }),\n                         Node::Expr(&hir::Expr { kind: hir::ExprKind::InlineAsm(ia), .. })\n                             if ia.operands.iter().any(|(op, _op_sp)| match op {\n                                 hir::InlineAsmOperand::Const { anon_const } => {"}, {"sha": "51d5f4ebe2bd2a16141bccaa0ee00fab8b846cbf", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22b686ad9995266b695344fcfb8e14f710b9ea6b/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b686ad9995266b695344fcfb8e14f710b9ea6b/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=22b686ad9995266b695344fcfb8e14f710b9ea6b", "patch": "@@ -417,12 +417,14 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));\n             match parent_node {\n                 Node::Ty(&Ty { kind: TyKind::Array(_, ref constant), .. })\n-                | Node::Ty(&Ty { kind: TyKind::Typeof(ref constant), .. })\n                 | Node::Expr(&Expr { kind: ExprKind::Repeat(_, ref constant), .. })\n                     if constant.hir_id == hir_id =>\n                 {\n                     tcx.types.usize\n                 }\n+                Node::Ty(&Ty { kind: TyKind::Typeof(ref e), .. }) if e.hir_id == hir_id => {\n+                    tcx.typeck(def_id).node_type(e.hir_id)\n+                }\n \n                 Node::Expr(&Expr { kind: ExprKind::ConstBlock(ref anon_const), .. })\n                     if anon_const.hir_id == hir_id =>"}, {"sha": "3f8339fa5beaf91d90d3f75824699c9b1d88dcc4", "filename": "src/test/ui/typeof/type_mismatch.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/22b686ad9995266b695344fcfb8e14f710b9ea6b/src%2Ftest%2Fui%2Ftypeof%2Ftype_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b686ad9995266b695344fcfb8e14f710b9ea6b/src%2Ftest%2Fui%2Ftypeof%2Ftype_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeof%2Ftype_mismatch.rs?ref=22b686ad9995266b695344fcfb8e14f710b9ea6b", "patch": "@@ -0,0 +1,9 @@\n+// Test that using typeof results in the correct type mismatch errors instead of always assuming\n+// `usize`, in addition to the pre-existing \"typeof is reserved and unimplemented\" error\n+fn main() {\n+    const a: u8 = 1;\n+    let b: typeof(a) = 1i8;\n+    //~^ ERROR `typeof` is a reserved keyword but unimplemented\n+    //~| ERROR mismatched types\n+    //~| expected `u8`, found `i8`\n+}"}, {"sha": "12fd7c9963cfc661aae9545bcb158284888e50ca", "filename": "src/test/ui/typeof/type_mismatch.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/22b686ad9995266b695344fcfb8e14f710b9ea6b/src%2Ftest%2Fui%2Ftypeof%2Ftype_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22b686ad9995266b695344fcfb8e14f710b9ea6b/src%2Ftest%2Fui%2Ftypeof%2Ftype_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeof%2Ftype_mismatch.stderr?ref=22b686ad9995266b695344fcfb8e14f710b9ea6b", "patch": "@@ -0,0 +1,23 @@\n+error[E0516]: `typeof` is a reserved keyword but unimplemented\n+  --> $DIR/type_mismatch.rs:5:12\n+   |\n+LL |     let b: typeof(a) = 1i8;\n+   |            ^^^^^^^^^ reserved keyword\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type_mismatch.rs:5:24\n+   |\n+LL |     let b: typeof(a) = 1i8;\n+   |            ---------   ^^^ expected `u8`, found `i8`\n+   |            |\n+   |            expected due to this\n+   |\n+help: change the type of the numeric literal from `i8` to `u8`\n+   |\n+LL |     let b: typeof(a) = 1u8;\n+   |                        ^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0308, E0516.\n+For more information about an error, try `rustc --explain E0308`."}]}