{"sha": "84e503346672dfc5d237e90e49ed42a2ae3641b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZTUwMzM0NjY3MmRmYzVkMjM3ZTkwZTQ5ZWQ0MmEyYWUzNjQxYjQ=", "commit": {"author": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-04-03T10:54:14Z"}, "committer": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-04-03T10:54:14Z"}, "message": "Make bench/noise.rs more idiomatic and 20x faster", "tree": {"sha": "a68adaf7e01ecee3ebd5dc6c8f7bce1cd7652017", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a68adaf7e01ecee3ebd5dc6c8f7bce1cd7652017"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84e503346672dfc5d237e90e49ed42a2ae3641b4", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84e503346672dfc5d237e90e49ed42a2ae3641b4", "html_url": "https://github.com/rust-lang/rust/commit/84e503346672dfc5d237e90e49ed42a2ae3641b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84e503346672dfc5d237e90e49ed42a2ae3641b4/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afd5cba38c6f1ccbd30ce732d8da5abdf5ed556f", "url": "https://api.github.com/repos/rust-lang/rust/commits/afd5cba38c6f1ccbd30ce732d8da5abdf5ed556f", "html_url": "https://github.com/rust-lang/rust/commit/afd5cba38c6f1ccbd30ce732d8da5abdf5ed556f"}], "stats": {"total": 61, "additions": 32, "deletions": 29}, "files": [{"sha": "4397dcd5247f5d5c8fd3d37ce2d3334db54726bb", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 32, "deletions": 29, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/84e503346672dfc5d237e90e49ed42a2ae3641b4/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84e503346672dfc5d237e90e49ed42a2ae3641b4/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=84e503346672dfc5d237e90e49ed42a2ae3641b4", "patch": "@@ -1,25 +1,28 @@\n // Perlin noise benchmark from https://gist.github.com/1170424\n \n-use core::rand::RngUtil;\n+use core::rand::{Rng, RngUtil};\n \n struct Vec2 {\n     x: f32,\n     y: f32,\n }\n \n-fn lerp(a: f32, b: f32, v: f32) -> f32  { a * (1.0 - v) + b * v }\n-fn smooth(v: f32) -> f32                { v * v * (3.0 - 2.0 * v) }\n+#[inline(always)]\n+fn lerp(a: f32, b: f32, v: f32) -> f32 { a * (1.0 - v) + b * v }\n \n-fn random_gradient(r: @rand::Rng) -> Vec2 {\n+#[inline(always)]\n+fn smooth(v: f32) -> f32 { v * v * (3.0 - 2.0 * v) }\n+\n+fn random_gradient(r: @Rng) -> Vec2 {\n     let v = r.gen_float() * float::consts::pi * 2.0;\n-    Vec2{\n+    Vec2 {\n         x: float::cos(v) as f32,\n         y: float::sin(v) as f32,\n     }\n }\n \n fn gradient(orig: Vec2, grad: Vec2, p: Vec2) -> f32 {\n-    let sp = Vec2{x: p.x - orig.x, y: p.y - orig.y};\n+    let sp = Vec2 {x: p.x - orig.x, y: p.y - orig.y};\n     grad.x * sp.x + grad.y + sp.y\n }\n \n@@ -28,28 +31,28 @@ struct Noise2DContext {\n     permutations: [int, ..256],\n }\n \n-fn Noise2DContext() -> ~Noise2DContext {\n-    let r = rand::Rng();\n-    let mut rgradients = [ Vec2 { x: 0.0, y: 0.0 }, ..256 ];\n-    for int::range(0, 256) |i| { rgradients[i] = random_gradient(r); }\n-    let mut permutations = [ 0, ..256 ];\n-    for int::range(0, 256) |i| { permutations[i] = i; }\n-    r.shuffle_mut(permutations);\n-\n-    ~Noise2DContext{\n-        rgradients: rgradients,\n-        permutations: permutations,\n+pub impl Noise2DContext {\n+    fn new() -> Noise2DContext {\n+        let r = rand::Rng();\n+        let mut rgradients = [ Vec2 { x: 0.0, y: 0.0 }, ..256 ];\n+        for int::range(0, 256) |i| { rgradients[i] = random_gradient(r); }\n+        let mut permutations = [ 0, ..256 ];\n+        for int::range(0, 256) |i| { permutations[i] = i; }\n+        r.shuffle_mut(permutations);\n+\n+        Noise2DContext {\n+            rgradients: rgradients,\n+            permutations: permutations,\n+        }\n     }\n-}\n \n-pub impl Noise2DContext {\n     #[inline(always)]\n     fn get_gradient(&self, x: int, y: int) -> Vec2 {\n         let idx = self.permutations[x & 255] + self.permutations[y & 255];\n         self.rgradients[idx & 255]\n     }\n \n-    #[inline(always)]\n+    #[inline]\n     fn get_gradients(&self, gradients: &mut [Vec2, ..4], origins: &mut [Vec2, ..4], x: f32, y: f32) {\n         let x0f = f32::floor(x);\n         let y0f = f32::floor(y);\n@@ -63,14 +66,15 @@ pub impl Noise2DContext {\n         gradients[2] = self.get_gradient(x0, y1);\n         gradients[3] = self.get_gradient(x1, y1);\n \n-        origins[0] = Vec2{x: x0f + 0.0, y: y0f + 0.0};\n-        origins[1] = Vec2{x: x0f + 1.0, y: y0f + 0.0};\n-        origins[2] = Vec2{x: x0f + 0.0, y: y0f + 1.0};\n-        origins[3] = Vec2{x: x0f + 1.0, y: y0f + 1.0};\n+        origins[0] = Vec2 {x: x0f + 0.0, y: y0f + 0.0};\n+        origins[1] = Vec2 {x: x0f + 1.0, y: y0f + 0.0};\n+        origins[2] = Vec2 {x: x0f + 0.0, y: y0f + 1.0};\n+        origins[3] = Vec2 {x: x0f + 1.0, y: y0f + 1.0};\n     }\n \n+    #[inline]\n     fn get(&self, x: f32, y: f32) -> f32 {\n-        let p = Vec2{x: x, y: y};\n+        let p = Vec2 {x: x, y: y};\n         let mut gradients = [ Vec2 { x: 0.0, y: 0.0 }, ..4 ];\n         let mut origins = [ Vec2 { x: 0.0, y: 0.0 }, ..4 ];\n         self.get_gradients(&mut gradients, &mut origins, x, y);\n@@ -88,9 +92,9 @@ pub impl Noise2DContext {\n \n fn main() {\n     let symbols = [\" \", \"\u2591\", \"\u2592\", \"\u2593\", \"\u2588\", \"\u2588\"];\n-    let mut pixels = vec::from_elem(256*256, 0f32);\n-    let n2d = Noise2DContext();\n-    for int::range(0, 100) |_| {\n+    let mut pixels = [0f32, ..256*256];\n+    let n2d = ~Noise2DContext::new();\n+    for 100.times {\n         for int::range(0, 256) |y| {\n             for int::range(0, 256) |x| {\n                 let v = n2d.get(\n@@ -109,4 +113,3 @@ fn main() {\n         io::println(\"\");\n     }*/\n }\n-"}]}