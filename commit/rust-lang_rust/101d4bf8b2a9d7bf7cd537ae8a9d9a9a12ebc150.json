{"sha": "101d4bf8b2a9d7bf7cd537ae8a9d9a9a12ebc150", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMWQ0YmY4YjJhOWQ3YmY3Y2Q1MzdhZThhOWQ5YTlhMTJlYmMxNTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-09T04:45:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-09T04:45:37Z"}, "message": "auto merge of #6332 : huonw/rust/std-base64-match, r=nikomatsakis", "tree": {"sha": "a9422aee4cb6251083cd1bb40065d8d030df6a12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9422aee4cb6251083cd1bb40065d8d030df6a12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/101d4bf8b2a9d7bf7cd537ae8a9d9a9a12ebc150", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/101d4bf8b2a9d7bf7cd537ae8a9d9a9a12ebc150", "html_url": "https://github.com/rust-lang/rust/commit/101d4bf8b2a9d7bf7cd537ae8a9d9a9a12ebc150", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/101d4bf8b2a9d7bf7cd537ae8a9d9a9a12ebc150/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bbbb314ee61aa00deb3e9756421fd2465fd7a91", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bbbb314ee61aa00deb3e9756421fd2465fd7a91", "html_url": "https://github.com/rust-lang/rust/commit/3bbbb314ee61aa00deb3e9756421fd2465fd7a91"}, {"sha": "ad5ee00c93043f08626efae8547587b640cf2630", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad5ee00c93043f08626efae8547587b640cf2630", "html_url": "https://github.com/rust-lang/rust/commit/ad5ee00c93043f08626efae8547587b640cf2630"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "85ba2707863dc5ed17a8788b9dc6e6c0145e06a0", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/101d4bf8b2a9d7bf7cd537ae8a9d9a9a12ebc150/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101d4bf8b2a9d7bf7cd537ae8a9d9a9a12ebc150/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=101d4bf8b2a9d7bf7cd537ae8a9d9a9a12ebc150", "patch": "@@ -156,31 +156,27 @@ impl FromBase64 for ~[u8] {\n                 let ch = self[i] as char;\n                 n <<= 6u;\n \n-                if ch >= 'A' && ch <= 'Z' {\n-                    n |= (ch as uint) - 0x41u;\n-                } else if ch >= 'a' && ch <= 'z' {\n-                    n |= (ch as uint) - 0x47u;\n-                } else if ch >= '0' && ch <= '9' {\n-                    n |= (ch as uint) + 0x04u;\n-                } else if ch == '+' {\n-                    n |= 0x3Eu;\n-                } else if ch == '/' {\n-                    n |= 0x3Fu;\n-                } else if ch == '=' {\n-                    match len - i {\n-                      1u => {\n-                        r.push(((n >> 16u) & 0xFFu) as u8);\n-                        r.push(((n >> 8u ) & 0xFFu) as u8);\n-                        return copy r;\n-                      }\n-                      2u => {\n-                        r.push(((n >> 10u) & 0xFFu) as u8);\n-                        return copy r;\n-                      }\n-                      _ => fail!(~\"invalid base64 padding\")\n+                match ch {\n+                    'A'..'Z' => n |= (ch as uint) - 0x41,\n+                    'a'..'z' => n |= (ch as uint) - 0x47,\n+                    '0'..'9' => n |= (ch as uint) + 0x04,\n+                    '+'      => n |= 0x3E,\n+                    '/'      => n |= 0x3F,\n+                    '='      => {\n+                        match len - i {\n+                            1u => {\n+                                r.push(((n >> 16u) & 0xFFu) as u8);\n+                                r.push(((n >> 8u ) & 0xFFu) as u8);\n+                                return copy r;\n+                            }\n+                            2u => {\n+                                r.push(((n >> 10u) & 0xFFu) as u8);\n+                                return copy r;\n+                            }\n+                            _ => fail!(~\"invalid base64 padding\")\n+                        }\n                     }\n-                } else {\n-                    fail!(~\"invalid base64 character\");\n+                    _ => fail!(~\"invalid base64 character\")\n                 }\n \n                 i += 1u;"}]}