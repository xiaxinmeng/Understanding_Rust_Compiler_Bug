{"sha": "1fd23f56f372d02ed0b909bc7d2ff9ac8f2a82d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZDIzZjU2ZjM3MmQwMmVkMGI5MDliYzdkMmZmOWFjOGYyYTgyZDE=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2018-12-17T22:33:21Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2018-12-17T22:33:21Z"}, "message": "improve tests as suggested by review comments", "tree": {"sha": "52c463cbc43b41a35373be8b4b0d0759a4c018af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52c463cbc43b41a35373be8b4b0d0759a4c018af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fd23f56f372d02ed0b909bc7d2ff9ac8f2a82d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fd23f56f372d02ed0b909bc7d2ff9ac8f2a82d1", "html_url": "https://github.com/rust-lang/rust/commit/1fd23f56f372d02ed0b909bc7d2ff9ac8f2a82d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fd23f56f372d02ed0b909bc7d2ff9ac8f2a82d1/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baf9f0173cd841792230e788b628ea6ff0539603", "url": "https://api.github.com/repos/rust-lang/rust/commits/baf9f0173cd841792230e788b628ea6ff0539603", "html_url": "https://github.com/rust-lang/rust/commit/baf9f0173cd841792230e788b628ea6ff0539603"}], "stats": {"total": 94, "additions": 92, "deletions": 2}, "files": [{"sha": "766bd147431b47f045ac7f6a8825fbb31e29ad3d", "filename": "src/test/ui/traits/trait-object-with-self-in-projection-output-bad.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1fd23f56f372d02ed0b909bc7d2ff9ac8f2a82d1/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd23f56f372d02ed0b909bc7d2ff9ac8f2a82d1/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-bad.rs?ref=1fd23f56f372d02ed0b909bc7d2ff9ac8f2a82d1", "patch": "@@ -1,3 +1,7 @@\n+// Regression test for #56288. Checks that if a supertrait defines an associated type\n+// projection that references `Self`, then that associated type must still be explicitly\n+// specified in the `dyn Trait` variant, since we don't know what `Self` is anymore.\n+\n trait Base {\n     type Output;\n }\n@@ -16,7 +20,31 @@ impl Helper for u32\n     type Target = i32;\n }\n \n+trait ConstI32 {\n+    type Out;\n+}\n+\n+impl<T: ?Sized> ConstI32 for T {\n+    type Out = i32;\n+}\n+\n+// Test that you still need to manually give a projection type if the Output type\n+// is normalizable.\n+trait NormalizableHelper:\n+    Base<Output=<Self as ConstI32>::Out>\n+{\n+    type Target;\n+}\n+\n+impl NormalizableHelper for u32\n+{\n+    type Target = i32;\n+}\n+\n fn main() {\n     let _x: Box<dyn Helper<Target=i32>> = Box::new(2u32);\n     //~^ ERROR the value of the associated type `Output` (from the trait `Base`) must be specified\n+\n+    let _y: Box<dyn NormalizableHelper<Target=i32>> = Box::new(2u32);\n+    //~^ ERROR the value of the associated type `Output` (from the trait `Base`) must be specified\n }"}, {"sha": "350f8ea8507095c87086c90e476b68fe9633eb6a", "filename": "src/test/ui/traits/trait-object-with-self-in-projection-output-bad.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1fd23f56f372d02ed0b909bc7d2ff9ac8f2a82d1/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd23f56f372d02ed0b909bc7d2ff9ac8f2a82d1/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-bad.stderr?ref=1fd23f56f372d02ed0b909bc7d2ff9ac8f2a82d1", "patch": "@@ -1,12 +1,21 @@\n error[E0191]: the value of the associated type `Output` (from the trait `Base`) must be specified\n-  --> $DIR/trait-object-with-self-in-projection-output-bad.rs:20:17\n+  --> $DIR/trait-object-with-self-in-projection-output-bad.rs:45:17\n    |\n LL |     type Output;\n    |     ------------ `Output` defined here\n ...\n LL |     let _x: Box<dyn Helper<Target=i32>> = Box::new(2u32);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ associated type `Output` must be specified\n \n-error: aborting due to previous error\n+error[E0191]: the value of the associated type `Output` (from the trait `Base`) must be specified\n+  --> $DIR/trait-object-with-self-in-projection-output-bad.rs:48:17\n+   |\n+LL |     type Output;\n+   |     ------------ `Output` defined here\n+...\n+LL |     let _y: Box<dyn NormalizableHelper<Target=i32>> = Box::new(2u32);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ associated type `Output` must be specified\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0191`."}, {"sha": "793d556d08ca24e71ddecb06dae6c6183f396e33", "filename": "src/test/ui/traits/trait-object-with-self-in-projection-output-good.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1fd23f56f372d02ed0b909bc7d2ff9ac8f2a82d1/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-good.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd23f56f372d02ed0b909bc7d2ff9ac8f2a82d1/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-good.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-good.rs?ref=1fd23f56f372d02ed0b909bc7d2ff9ac8f2a82d1", "patch": "@@ -1,5 +1,10 @@\n // compile-pass\n \n+// Regression test related to #56288. Check that a supertrait projection (of\n+// `Output`) that references `Self` can be ok if it is referencing a projection (of\n+// `Self::Target`, in this case). Note that we still require the user to manually\n+// specify both `Target` and `Output` for now.\n+\n trait Base {\n     type Output;\n }"}, {"sha": "46c083f93059116ce2f0a0ed763ff8ed23435e49", "filename": "src/test/ui/traits/trait-object-with-self-in-projection-output-repeated-supertrait.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1fd23f56f372d02ed0b909bc7d2ff9ac8f2a82d1/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-repeated-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd23f56f372d02ed0b909bc7d2ff9ac8f2a82d1/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-repeated-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-repeated-supertrait.rs?ref=1fd23f56f372d02ed0b909bc7d2ff9ac8f2a82d1", "patch": "@@ -0,0 +1,48 @@\n+// compile-pass\n+\n+// Regression test related to #56288. Check that a supertrait projection (of\n+// `Output`) that references `Self` is ok if there is another occurence of\n+// the same supertrait that specifies the projection explicitly, even if\n+// the projection's associated type is not explicitly specified in the object type.\n+//\n+// Note that in order for this to compile, we need the `Self`-referencing projection\n+// to normalize fairly directly to a concrete type, otherwise the trait resolver\n+// will hate us.\n+//\n+// There is a test in `trait-object-with-self-in-projection-output-bad.rs` that\n+// having a normalizing, but `Self`-containing projection does not *by itself*\n+// allow you to avoid writing the projected type (`Output`, in this example)\n+// explicitly.\n+\n+trait ConstI32 {\n+    type Out;\n+}\n+\n+impl<T: ?Sized> ConstI32 for T {\n+    type Out = i32;\n+}\n+\n+trait Base {\n+    type Output;\n+}\n+\n+trait NormalizingHelper: Base<Output=<Self as ConstI32>::Out> + Base<Output=i32> {\n+    type Target;\n+}\n+\n+impl Base for u32\n+{\n+    type Output = i32;\n+}\n+\n+impl NormalizingHelper for u32\n+{\n+    type Target = i32;\n+}\n+\n+fn main() {\n+    // Make sure this works both with and without the associated type\n+    // being specified.\n+    let _x: Box<dyn NormalizingHelper<Target=i32>> = Box::new(2u32);\n+    let _y: Box<dyn NormalizingHelper<Target=i32, Output=i32>> = Box::new(2u32);\n+}"}]}