{"sha": "9d15e8fc4f875f6da2cd2bd89c62bb96fa64ef1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMTVlOGZjNGY4NzVmNmRhMmNkMmJkODljNjJiYjk2ZmE2NGVmMWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-26T15:07:14Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-26T15:07:14Z"}, "message": "Type safer requests", "tree": {"sha": "8d782ee4c736b57c8eaab0e65ee9746c3880a4e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d782ee4c736b57c8eaab0e65ee9746c3880a4e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d15e8fc4f875f6da2cd2bd89c62bb96fa64ef1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d15e8fc4f875f6da2cd2bd89c62bb96fa64ef1b", "html_url": "https://github.com/rust-lang/rust/commit/9d15e8fc4f875f6da2cd2bd89c62bb96fa64ef1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d15e8fc4f875f6da2cd2bd89c62bb96fa64ef1b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1893289e5c7cebeeb9705c031c996fc29d8c5b54", "url": "https://api.github.com/repos/rust-lang/rust/commits/1893289e5c7cebeeb9705c031c996fc29d8c5b54", "html_url": "https://github.com/rust-lang/rust/commit/1893289e5c7cebeeb9705c031c996fc29d8c5b54"}], "stats": {"total": 122, "additions": 73, "deletions": 49}, "files": [{"sha": "3c9752259a0b512a5f576373ba7271c66df29b48", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/9d15e8fc4f875f6da2cd2bd89c62bb96fa64ef1b/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d15e8fc4f875f6da2cd2bd89c62bb96fa64ef1b/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=9d15e8fc4f875f6da2cd2bd89c62bb96fa64ef1b", "patch": "@@ -7,7 +7,7 @@ use std::{sync::Arc, time::Instant};\n \n use crossbeam_channel::{unbounded, Receiver, Sender};\n use flycheck::FlycheckHandle;\n-use lsp_types::Url;\n+use lsp_types::{request::Request as _, Url};\n use parking_lot::RwLock;\n use ra_db::{CrateId, VfsPath};\n use ra_ide::{Analysis, AnalysisChange, AnalysisHost, FileId};\n@@ -18,6 +18,7 @@ use crate::{\n     diagnostics::{CheckFixes, DiagnosticCollection},\n     from_proto,\n     line_endings::LineEndings,\n+    lsp_utils::notification_new,\n     main_loop::Task,\n     reload::SourceRootConfig,\n     request_metrics::{LatestRequests, RequestMetrics},\n@@ -57,6 +58,7 @@ pub(crate) type ReqQueue = lsp_server::ReqQueue<(String, Instant), ReqHandler>;\n /// Note that this struct has more than on impl in various modules!\n pub(crate) struct GlobalState {\n     sender: Sender<lsp_server::Message>,\n+    req_queue: ReqQueue,\n     pub(crate) task_pool: Handle<TaskPool<Task>, Receiver<Task>>,\n     pub(crate) loader: Handle<Box<dyn vfs::loader::Handle>, Receiver<vfs::loader::Message>>,\n     pub(crate) flycheck: Option<Handle<FlycheckHandle, Receiver<flycheck::Message>>>,\n@@ -66,7 +68,6 @@ pub(crate) struct GlobalState {\n     pub(crate) mem_docs: FxHashSet<VfsPath>,\n     pub(crate) vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n     pub(crate) status: Status,\n-    pub(crate) req_queue: ReqQueue,\n     pub(crate) source_root_config: SourceRootConfig,\n     pub(crate) proc_macro_client: ProcMacroClient,\n     pub(crate) workspaces: Arc<Vec<ProjectWorkspace>>,\n@@ -102,16 +103,16 @@ impl GlobalState {\n         let analysis_host = AnalysisHost::new(config.lru_capacity);\n         GlobalState {\n             sender,\n+            req_queue: ReqQueue::default(),\n             task_pool,\n             loader,\n+            flycheck: None,\n             config,\n             analysis_host,\n-            flycheck: None,\n             diagnostics: Default::default(),\n             mem_docs: FxHashSet::default(),\n             vfs: Arc::new(RwLock::new((vfs::Vfs::default(), FxHashMap::default()))),\n             status: Status::default(),\n-            req_queue: ReqQueue::default(),\n             source_root_config: SourceRootConfig::default(),\n             proc_macro_client: ProcMacroClient::dummy(),\n             workspaces: Arc::new(Vec::new()),\n@@ -168,8 +169,39 @@ impl GlobalState {\n         }\n     }\n \n-    pub(crate) fn send(&mut self, message: lsp_server::Message) {\n-        self.sender.send(message).unwrap()\n+    pub(crate) fn send_request<R: lsp_types::request::Request>(\n+        &mut self,\n+        params: R::Params,\n+        handler: ReqHandler,\n+    ) {\n+        let request = self.req_queue.outgoing.register(\n+            lsp_types::request::WorkDoneProgressCreate::METHOD.to_string(),\n+            params,\n+            handler,\n+        );\n+        self.send(request.into());\n+    }\n+    pub(crate) fn complete_request(&mut self, response: lsp_server::Response) {\n+        let handler = self.req_queue.outgoing.complete(response.id.clone());\n+        handler(self, response)\n+    }\n+\n+    pub(crate) fn send_notification<N: lsp_types::notification::Notification>(\n+        &mut self,\n+        params: N::Params,\n+    ) {\n+        let not = notification_new::<N>(params);\n+        self.send(not.into());\n+    }\n+\n+    pub(crate) fn register_request(\n+        &mut self,\n+        request: &lsp_server::Request,\n+        request_received: Instant,\n+    ) {\n+        self.req_queue\n+            .incoming\n+            .register(request.id.clone(), (request.method.clone(), request_received));\n     }\n     pub(crate) fn respond(&mut self, response: lsp_server::Response) {\n         if let Some((method, start)) = self.req_queue.incoming.complete(response.id.clone()) {\n@@ -181,6 +213,15 @@ impl GlobalState {\n             self.send(response.into());\n         }\n     }\n+    pub(crate) fn cancel(&mut self, request_id: lsp_server::RequestId) {\n+        if let Some(response) = self.req_queue.incoming.cancel(request_id) {\n+            self.send(response.into());\n+        }\n+    }\n+\n+    fn send(&mut self, message: lsp_server::Message) {\n+        self.sender.send(message).unwrap()\n+    }\n }\n \n impl Drop for GlobalState {"}, {"sha": "99f4998a95801afa2991a22ad1d6a8a2f1beb7e4", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9d15e8fc4f875f6da2cd2bd89c62bb96fa64ef1b/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d15e8fc4f875f6da2cd2bd89c62bb96fa64ef1b/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=9d15e8fc4f875f6da2cd2bd89c62bb96fa64ef1b", "patch": "@@ -2,7 +2,6 @@\n use std::{error::Error, ops::Range};\n \n use lsp_server::Notification;\n-use lsp_types::request::Request;\n use ra_db::Canceled;\n use ra_ide::LineIndex;\n use serde::Serialize;\n@@ -43,9 +42,9 @@ impl Progress {\n impl GlobalState {\n     pub(crate) fn show_message(&mut self, typ: lsp_types::MessageType, message: String) {\n         let message = message.into();\n-        let params = lsp_types::ShowMessageParams { typ, message };\n-        let not = notification_new::<lsp_types::notification::ShowMessage>(params);\n-        self.send(not.into());\n+        self.send_notification::<lsp_types::notification::ShowMessage>(\n+            lsp_types::ShowMessageParams { typ, message },\n+        )\n     }\n \n     pub(crate) fn report_progress(\n@@ -61,12 +60,10 @@ impl GlobalState {\n         let token = lsp_types::ProgressToken::String(format!(\"rustAnalyzer/{}\", title));\n         let work_done_progress = match state {\n             Progress::Begin => {\n-                let work_done_progress_create = self.req_queue.outgoing.register(\n-                    lsp_types::request::WorkDoneProgressCreate::METHOD.to_string(),\n+                self.send_request::<lsp_types::request::WorkDoneProgressCreate>(\n                     lsp_types::WorkDoneProgressCreateParams { token: token.clone() },\n                     |_, _| (),\n                 );\n-                self.send(work_done_progress_create.into());\n \n                 lsp_types::WorkDoneProgress::Begin(lsp_types::WorkDoneProgressBegin {\n                     title: title.into(),\n@@ -86,12 +83,10 @@ impl GlobalState {\n                 lsp_types::WorkDoneProgress::End(lsp_types::WorkDoneProgressEnd { message })\n             }\n         };\n-        let notification =\n-            notification_new::<lsp_types::notification::Progress>(lsp_types::ProgressParams {\n-                token,\n-                value: lsp_types::ProgressParamsValue::WorkDone(work_done_progress),\n-            });\n-        self.send(notification.into());\n+        self.send_notification::<lsp_types::notification::Progress>(lsp_types::ProgressParams {\n+            token,\n+            value: lsp_types::ProgressParamsValue::WorkDone(work_done_progress),\n+        });\n     }\n }\n "}, {"sha": "e5194fe41a0fabc881ed77d71afa5f340cd8ce02", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9d15e8fc4f875f6da2cd2bd89c62bb96fa64ef1b/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d15e8fc4f875f6da2cd2bd89c62bb96fa64ef1b/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=9d15e8fc4f875f6da2cd2bd89c62bb96fa64ef1b", "patch": "@@ -7,7 +7,7 @@ use std::{\n \n use crossbeam_channel::{never, select, Receiver};\n use lsp_server::{Connection, Notification, Request, Response};\n-use lsp_types::{notification::Notification as _, request::Request as _};\n+use lsp_types::notification::Notification as _;\n use ra_db::VfsPath;\n use ra_ide::{Canceled, FileId};\n use ra_prof::profile;\n@@ -18,7 +18,7 @@ use crate::{\n     from_proto,\n     global_state::{file_id_to_url, url_to_file_id, GlobalState, Status},\n     handlers, lsp_ext,\n-    lsp_utils::{apply_document_changes, is_canceled, notification_is, notification_new, Progress},\n+    lsp_utils::{apply_document_changes, is_canceled, notification_is, Progress},\n     Result,\n };\n \n@@ -143,10 +143,7 @@ impl GlobalState {\n                 lsp_server::Message::Notification(not) => {\n                     self.on_notification(not)?;\n                 }\n-                lsp_server::Message::Response(resp) => {\n-                    let handler = self.req_queue.outgoing.complete(resp.id.clone());\n-                    handler(self, resp)\n-                }\n+                lsp_server::Message::Response(resp) => self.complete_request(resp),\n             },\n             Event::Task(task) => {\n                 match task {\n@@ -250,10 +247,9 @@ impl GlobalState {\n             for file_id in diagnostic_changes {\n                 let url = file_id_to_url(&self.vfs.read().0, file_id);\n                 let diagnostics = self.diagnostics.diagnostics_for(file_id).cloned().collect();\n-                let params =\n-                    lsp_types::PublishDiagnosticsParams { uri: url, diagnostics, version: None };\n-                let not = notification_new::<lsp_types::notification::PublishDiagnostics>(params);\n-                self.send(not.into());\n+                self.send_notification::<lsp_types::notification::PublishDiagnostics>(\n+                    lsp_types::PublishDiagnosticsParams { uri: url, diagnostics, version: None },\n+                );\n             }\n         }\n \n@@ -271,7 +267,7 @@ impl GlobalState {\n     }\n \n     fn on_request(&mut self, request_received: Instant, req: Request) -> Result<()> {\n-        self.req_queue.incoming.register(req.id.clone(), (req.method.clone(), request_received));\n+        self.register_request(&req, request_received);\n \n         RequestDispatcher { req: Some(req), global_state: self }\n             .on_sync::<lsp_ext::CollectGarbage>(|s, ()| Ok(s.analysis_host.collect_garbage()))?\n@@ -335,9 +331,7 @@ impl GlobalState {\n                     lsp_types::NumberOrString::Number(id) => id.into(),\n                     lsp_types::NumberOrString::String(id) => id.into(),\n                 };\n-                if let Some(response) = this.req_queue.incoming.cancel(id) {\n-                    this.send(response.into());\n-                }\n+                this.cancel(id);\n                 Ok(())\n             })?\n             .on::<lsp_types::notification::DidOpenTextDocument>(|this, params| {\n@@ -372,13 +366,13 @@ impl GlobalState {\n                         this.loader.handle.invalidate(path.to_path_buf());\n                     }\n                 }\n-                let params = lsp_types::PublishDiagnosticsParams {\n-                    uri: params.text_document.uri,\n-                    diagnostics: Vec::new(),\n-                    version: None,\n-                };\n-                let not = notification_new::<lsp_types::notification::PublishDiagnostics>(params);\n-                this.send(not.into());\n+                this.send_notification::<lsp_types::notification::PublishDiagnostics>(\n+                    lsp_types::PublishDiagnosticsParams {\n+                        uri: params.text_document.uri,\n+                        diagnostics: Vec::new(),\n+                        version: None,\n+                    },\n+                );\n                 Ok(())\n             })?\n             .on::<lsp_types::notification::DidSaveTextDocument>(|this, _params| {\n@@ -390,8 +384,7 @@ impl GlobalState {\n             .on::<lsp_types::notification::DidChangeConfiguration>(|this, _params| {\n                 // As stated in https://github.com/microsoft/language-server-protocol/issues/676,\n                 // this notification's parameters should be ignored and the actual config queried separately.\n-                let request = this.req_queue.outgoing.register(\n-                    lsp_types::request::WorkspaceConfiguration::METHOD.to_string(),\n+                this.send_request::<lsp_types::request::WorkspaceConfiguration>(\n                     lsp_types::ConfigurationParams {\n                         items: vec![lsp_types::ConfigurationItem {\n                             scope_uri: None,\n@@ -419,7 +412,6 @@ impl GlobalState {\n                         }\n                     },\n                 );\n-                this.send(request.into());\n \n                 return Ok(());\n             })?"}, {"sha": "a1850b2865ce870be1c415b189253ee8a212c042", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d15e8fc4f875f6da2cd2bd89c62bb96fa64ef1b/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d15e8fc4f875f6da2cd2bd89c62bb96fa64ef1b/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=9d15e8fc4f875f6da2cd2bd89c62bb96fa64ef1b", "patch": "@@ -3,7 +3,6 @@ use std::sync::Arc;\n \n use crossbeam_channel::unbounded;\n use flycheck::FlycheckHandle;\n-use lsp_types::request::Request;\n use ra_db::{CrateGraph, SourceRoot, VfsPath};\n use ra_ide::AnalysisChange;\n use ra_project_model::{PackageRoot, ProcMacroClient, ProjectWorkspace};\n@@ -78,13 +77,10 @@ impl GlobalState {\n                 method: \"workspace/didChangeWatchedFiles\".to_string(),\n                 register_options: Some(serde_json::to_value(registration_options).unwrap()),\n             };\n-            let params = lsp_types::RegistrationParams { registrations: vec![registration] };\n-            let request = self.req_queue.outgoing.register(\n-                lsp_types::request::RegisterCapability::METHOD.to_string(),\n-                params,\n+            self.send_request::<lsp_types::request::RegisterCapability>(\n+                lsp_types::RegistrationParams { registrations: vec![registration] },\n                 |_, _| (),\n             );\n-            self.send(request.into());\n         }\n \n         let mut change = AnalysisChange::new();"}]}