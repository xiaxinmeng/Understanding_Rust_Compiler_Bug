{"sha": "026c1ae3113a6333bace9058d2d38cb7bc1c9cc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNmMxYWUzMTEzYTYzMzNiYWNlOTA1OGQyZDM4Y2I3YmMxYzljYzg=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-07T14:59:17Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-08-08T02:39:57Z"}, "message": "extra: Remove all .each methods in smallintmap", "tree": {"sha": "642118e7ff23070846bb5f4d81aed7b85d6cedb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/642118e7ff23070846bb5f4d81aed7b85d6cedb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/026c1ae3113a6333bace9058d2d38cb7bc1c9cc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/026c1ae3113a6333bace9058d2d38cb7bc1c9cc8", "html_url": "https://github.com/rust-lang/rust/commit/026c1ae3113a6333bace9058d2d38cb7bc1c9cc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/026c1ae3113a6333bace9058d2d38cb7bc1c9cc8/comments", "author": null, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a85f9acbfce3d47cf05ce4dd33a06907df261d49", "url": "https://api.github.com/repos/rust-lang/rust/commits/a85f9acbfce3d47cf05ce4dd33a06907df261d49", "html_url": "https://github.com/rust-lang/rust/commit/a85f9acbfce3d47cf05ce4dd33a06907df261d49"}], "stats": {"total": 43, "additions": 0, "deletions": 43}, "files": [{"sha": "8103ed7a4785a4b0fa34292cea47f54f1fdb5fad", "filename": "src/libextra/smallintmap.rs", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/026c1ae3113a6333bace9058d2d38cb7bc1c9cc8/src%2Flibextra%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026c1ae3113a6333bace9058d2d38cb7bc1c9cc8/src%2Flibextra%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsmallintmap.rs?ref=026c1ae3113a6333bace9058d2d38cb7bc1c9cc8", "patch": "@@ -16,7 +16,6 @@\n #[allow(missing_doc)];\n \n use std::iterator::{Iterator, IteratorUtil, Enumerate, FilterMap, Invert};\n-use std::uint;\n use std::util::replace;\n use std::vec::{VecIterator, VecMutIterator};\n use std::vec;\n@@ -116,48 +115,6 @@ impl<V> SmallIntMap<V> {\n     /// Create an empty SmallIntMap\n     pub fn new() -> SmallIntMap<V> { SmallIntMap{v: ~[]} }\n \n-    /// Visit all key-value pairs in order\n-    pub fn each<'a>(&'a self, it: &fn(&uint, &'a V) -> bool) -> bool {\n-        for i in range(0u, self.v.len()) {\n-            match self.v[i] {\n-              Some(ref elt) => if !it(&i, elt) { return false; },\n-              None => ()\n-            }\n-        }\n-        true\n-    }\n-\n-    /// Visit all keys in order\n-    pub fn each_key(&self, blk: &fn(key: &uint) -> bool) -> bool {\n-        self.each(|k, _| blk(k))\n-    }\n-\n-    /// Visit all values in order\n-    pub fn each_value<'a>(&'a self, blk: &fn(value: &'a V) -> bool) -> bool {\n-        self.each(|_, v| blk(v))\n-    }\n-\n-    /// Iterate over the map and mutate the contained values\n-    pub fn mutate_values(&mut self, it: &fn(&uint, &mut V) -> bool) -> bool {\n-        for i in range(0, self.v.len()) {\n-            match self.v[i] {\n-              Some(ref mut elt) => if !it(&i, elt) { return false; },\n-              None => ()\n-            }\n-        }\n-        true\n-    }\n-\n-    /// Visit all key-value pairs in reverse order\n-    pub fn each_reverse<'a>(&'a self, it: &fn(uint, &'a V) -> bool) -> bool {\n-        do uint::range_rev(self.v.len(), 0) |i| {\n-            match self.v[i] {\n-              Some(ref elt) => it(i, elt),\n-              None => true\n-            }\n-        }\n-    }\n-\n     pub fn get<'a>(&'a self, key: &uint) -> &'a V {\n         self.find(key).expect(\"key not present\")\n     }"}]}