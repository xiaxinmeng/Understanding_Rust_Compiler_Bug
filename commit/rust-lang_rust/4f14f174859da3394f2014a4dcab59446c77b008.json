{"sha": "4f14f174859da3394f2014a4dcab59446c77b008", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMTRmMTc0ODU5ZGEzMzk0ZjIwMTRhNGRjYWI1OTQ0NmM3N2IwMDg=", "commit": {"author": {"name": "Joshua Nelson", "email": "joshua@yottadb.com", "date": "2021-03-01T16:25:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-01T16:25:06Z"}, "message": "Rollup merge of #82480 - jyn514:no-enable-constant, r=Mark-Simulacrum\n\nRemove `ENABLE_DOWNLOAD_RUSTC` constant\n\n`ENABLE_DOWNLOAD_RUSTC` was introduced as part of the MVP for `download-rustc` as a way not to rebuild artifacts that have already been downloaded. Unfortunately, it doesn't work very well:\n\n- Steps are ignored by default, which makes it easy to leave out a step\nthat should be built. For example, the MVP forgot to enable any tests,\nso it was only possible to *build* locally.\n- It didn't work correctly even when it was enabled: calling\n  `builder.ensure()` would completely ignore the constant and rebuild the\n  step anyway. This has no obvious fix since `ensure()` has to return a\n  `Step::Output`.\n\nInstead, this handles `download-rustc` in `impl Step for Rustc` and\n`impl Step for Std`, which to my knowledge are the only build steps that\ndon't first go through `impl Step for Sysroot` (`Rustc` is used for\nthe `rustc-dev` component).\n\nSee https://github.com/rust-lang/rust/pull/79540#discussion_r563350075 and https://github.com/rust-lang/rust/issues/81930 for further context.\n\nHere are some example runs with these changes and `download-rustc`\nenabled:\n\n```\n$ x.py build src/tools/clippy\nBuilding stage1 tool clippy-driver (x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 1m 09s\nBuilding stage1 tool cargo-clippy (x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.11s\n$ x.py test src/tools/clippy\n    Finished dev [unoptimized + debuginfo] target(s) in 0.09s\nBuilding stage1 tool clippy-driver (x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.09s\nBuilding rustdoc for stage1 (x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.28s\n    Finished release [optimized] target(s) in 15.26s\n     Running build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/clippy_driver-8b407b140e0aa91c\ntest result: ok. 592 passed; 0 failed; 3 ignored; 0 measured; 0 filtered out\n$ x.py build src/tools/rustdoc\nBuilding rustdoc for stage1 (x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 41.28s\nBuild completed successfully in 0:00:41\n$ x.py test src/test/rustdoc-ui\nBuilding stage0 tool compiletest (x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.12s\nBuilding rustdoc for stage1 (x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.10s\ntest result: ok. 105 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 8.15s\n$ x.py build compiler/rustc\n    Finished dev [unoptimized + debuginfo] target(s) in 0.09s\nBuild completed successfully in 0:00:00\n```\n\nNote a few things:\n\n- Clippy depends on stage1 rustc-dev artifacts, but rustc didn't have to\n  be recompiled. Instead, the artifacts were copied automatically.\n- All steps are always enabled. There is no danger of forgetting a step,\n  since only the entrypoints have to handle `download-rustc`.\n- Building the compiler (`compiler/rustc`) automatically does no work.\n\nHelps with https://github.com/rust-lang/rust/issues/81930.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "bc2a01401102e5bef6a9353a89dbdf2198499356", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc2a01401102e5bef6a9353a89dbdf2198499356"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f14f174859da3394f2014a4dcab59446c77b008", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPRVjCRBK7hj4Ov3rIwAAdHIIAGWxZ2FZnr1Z7hR9oJAmjwLX\ntO47o1tkkhjUv8F2LizLFwX6mn9t9Yor6alo4qaNFObuWHBtypmThk+SyrJCQVug\nhgbNfGfc81u+YZ3TvGTmNjzSsjj+BQq18E0VcyuTWk3DhMEhh6B4SSdgdVDaWb5P\nYPZXH/0EJRm136pMqOKrxUvBzW8sKroMXusWVybfz6BI3SUKESpGjf+U9BAs7iQ9\nFF+lcjzVjUBG/8z7Kw+rO1guUYUuwZIQDsRY8bVBVfrem69+4zOd2Wzqqu3r3I/V\nbH8WyC/vPYTLO6yJrX/kCVprlL28AQhRIZC3YN4Os2i9y6vt9la9R7lAiSNvaF4=\n=NA24\n-----END PGP SIGNATURE-----\n", "payload": "tree bc2a01401102e5bef6a9353a89dbdf2198499356\nparent 57d7c7e3d98dd5d1216545f78caa3080edfec80f\nparent 8fb272c8e34cc3b2f7426743c6db398daba7645d\nauthor Joshua Nelson <joshua@yottadb.com> 1614615906 -0500\ncommitter GitHub <noreply@github.com> 1614615906 -0500\n\nRollup merge of #82480 - jyn514:no-enable-constant, r=Mark-Simulacrum\n\nRemove `ENABLE_DOWNLOAD_RUSTC` constant\n\n`ENABLE_DOWNLOAD_RUSTC` was introduced as part of the MVP for `download-rustc` as a way not to rebuild artifacts that have already been downloaded. Unfortunately, it doesn't work very well:\n\n- Steps are ignored by default, which makes it easy to leave out a step\nthat should be built. For example, the MVP forgot to enable any tests,\nso it was only possible to *build* locally.\n- It didn't work correctly even when it was enabled: calling\n  `builder.ensure()` would completely ignore the constant and rebuild the\n  step anyway. This has no obvious fix since `ensure()` has to return a\n  `Step::Output`.\n\nInstead, this handles `download-rustc` in `impl Step for Rustc` and\n`impl Step for Std`, which to my knowledge are the only build steps that\ndon't first go through `impl Step for Sysroot` (`Rustc` is used for\nthe `rustc-dev` component).\n\nSee https://github.com/rust-lang/rust/pull/79540#discussion_r563350075 and https://github.com/rust-lang/rust/issues/81930 for further context.\n\nHere are some example runs with these changes and `download-rustc`\nenabled:\n\n```\n$ x.py build src/tools/clippy\nBuilding stage1 tool clippy-driver (x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 1m 09s\nBuilding stage1 tool cargo-clippy (x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.11s\n$ x.py test src/tools/clippy\n    Finished dev [unoptimized + debuginfo] target(s) in 0.09s\nBuilding stage1 tool clippy-driver (x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.09s\nBuilding rustdoc for stage1 (x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.28s\n    Finished release [optimized] target(s) in 15.26s\n     Running build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/clippy_driver-8b407b140e0aa91c\ntest result: ok. 592 passed; 0 failed; 3 ignored; 0 measured; 0 filtered out\n$ x.py build src/tools/rustdoc\nBuilding rustdoc for stage1 (x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 41.28s\nBuild completed successfully in 0:00:41\n$ x.py test src/test/rustdoc-ui\nBuilding stage0 tool compiletest (x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.12s\nBuilding rustdoc for stage1 (x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.10s\ntest result: ok. 105 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 8.15s\n$ x.py build compiler/rustc\n    Finished dev [unoptimized + debuginfo] target(s) in 0.09s\nBuild completed successfully in 0:00:00\n```\n\nNote a few things:\n\n- Clippy depends on stage1 rustc-dev artifacts, but rustc didn't have to\n  be recompiled. Instead, the artifacts were copied automatically.\n- All steps are always enabled. There is no danger of forgetting a step,\n  since only the entrypoints have to handle `download-rustc`.\n- Building the compiler (`compiler/rustc`) automatically does no work.\n\nHelps with https://github.com/rust-lang/rust/issues/81930.\n\nr? `@Mark-Simulacrum`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f14f174859da3394f2014a4dcab59446c77b008", "html_url": "https://github.com/rust-lang/rust/commit/4f14f174859da3394f2014a4dcab59446c77b008", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f14f174859da3394f2014a4dcab59446c77b008/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57d7c7e3d98dd5d1216545f78caa3080edfec80f", "url": "https://api.github.com/repos/rust-lang/rust/commits/57d7c7e3d98dd5d1216545f78caa3080edfec80f", "html_url": "https://github.com/rust-lang/rust/commit/57d7c7e3d98dd5d1216545f78caa3080edfec80f"}, {"sha": "8fb272c8e34cc3b2f7426743c6db398daba7645d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fb272c8e34cc3b2f7426743c6db398daba7645d", "html_url": "https://github.com/rust-lang/rust/commit/8fb272c8e34cc3b2f7426743c6db398daba7645d"}], "stats": {"total": 36, "additions": 13, "deletions": 23}, "files": [{"sha": "2008348ea8d8ec9eeff4c49bd07c23280afc0c54", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4f14f174859da3394f2014a4dcab59446c77b008/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14f174859da3394f2014a4dcab59446c77b008/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=4f14f174859da3394f2014a4dcab59446c77b008", "patch": "@@ -57,14 +57,6 @@ pub trait Step: 'static + Clone + Debug + PartialEq + Eq + Hash {\n     /// `true` here can still be overwritten by `should_run` calling `default_condition`.\n     const DEFAULT: bool = false;\n \n-    /// Whether this step should be run even when `download-rustc` is set.\n-    ///\n-    /// Most steps are not important when the compiler is downloaded, since they will be included in\n-    /// the pre-compiled sysroot. Steps can set this to `true` to be built anyway.\n-    ///\n-    /// When in doubt, set this to `false`.\n-    const ENABLE_DOWNLOAD_RUSTC: bool = false;\n-\n     /// If true, then this rule should be skipped if --target was specified, but --host was not\n     const ONLY_HOSTS: bool = false;\n \n@@ -107,7 +99,6 @@ impl RunConfig<'_> {\n \n struct StepDescription {\n     default: bool,\n-    enable_download_rustc: bool,\n     only_hosts: bool,\n     should_run: fn(ShouldRun<'_>) -> ShouldRun<'_>,\n     make_run: fn(RunConfig<'_>),\n@@ -162,7 +153,6 @@ impl StepDescription {\n     fn from<S: Step>() -> StepDescription {\n         StepDescription {\n             default: S::DEFAULT,\n-            enable_download_rustc: S::ENABLE_DOWNLOAD_RUSTC,\n             only_hosts: S::ONLY_HOSTS,\n             should_run: S::should_run,\n             make_run: S::make_run,\n@@ -179,14 +169,6 @@ impl StepDescription {\n                 \"{:?} not skipped for {:?} -- not in {:?}\",\n                 pathset, self.name, builder.config.exclude\n             );\n-        } else if builder.config.download_rustc && !self.enable_download_rustc {\n-            if !builder.config.dry_run {\n-                eprintln!(\n-                    \"Not running {} because its artifacts have been downloaded from CI (`download-rustc` is set)\",\n-                    self.name\n-                );\n-            }\n-            return;\n         }\n \n         // Determine the targets participating in this rule."}, {"sha": "6626fead774d6b42b4d37819bcf755b2280b51fe", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f14f174859da3394f2014a4dcab59446c77b008/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14f174859da3394f2014a4dcab59446c77b008/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=4f14f174859da3394f2014a4dcab59446c77b008", "patch": "@@ -62,7 +62,6 @@ fn cargo_subcommand(kind: Kind) -> &'static str {\n impl Step for Std {\n     type Output = ();\n     const DEFAULT: bool = true;\n-    const ENABLE_DOWNLOAD_RUSTC: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         run.all_krates(\"test\")\n@@ -156,7 +155,6 @@ impl Step for Rustc {\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n     const DEFAULT: bool = true;\n-    const ENABLE_DOWNLOAD_RUSTC: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         run.all_krates(\"rustc-main\")\n@@ -235,7 +233,6 @@ impl Step for CodegenBackend {\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n     const DEFAULT: bool = true;\n-    const ENABLE_DOWNLOAD_RUSTC: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         run.paths(&[\"compiler/rustc_codegen_cranelift\", \"rustc_codegen_cranelift\"])\n@@ -293,7 +290,6 @@ macro_rules! tool_check_step {\n             type Output = ();\n             const ONLY_HOSTS: bool = true;\n             const DEFAULT: bool = true;\n-            const ENABLE_DOWNLOAD_RUSTC: bool = true;\n \n             fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n                 run.path($path)"}, {"sha": "24800b7886d943afb7946b910814355e3af5272c", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4f14f174859da3394f2014a4dcab59446c77b008/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14f174859da3394f2014a4dcab59446c77b008/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=4f14f174859da3394f2014a4dcab59446c77b008", "patch": "@@ -63,6 +63,12 @@ impl Step for Std {\n         let target = self.target;\n         let compiler = self.compiler;\n \n+        // These artifacts were already copied (in `impl Step for Sysroot`).\n+        // Don't recompile them.\n+        if builder.config.download_rustc {\n+            return;\n+        }\n+\n         if builder.config.keep_stage.contains(&compiler.stage)\n             || builder.config.keep_stage_std.contains(&compiler.stage)\n         {\n@@ -507,6 +513,13 @@ impl Step for Rustc {\n         let compiler = self.compiler;\n         let target = self.target;\n \n+        if builder.config.download_rustc {\n+            // Copy the existing artifacts instead of rebuilding them.\n+            // NOTE: this path is only taken for tools linking to rustc-dev.\n+            builder.ensure(Sysroot { compiler });\n+            return;\n+        }\n+\n         builder.ensure(Std { compiler, target });\n \n         if builder.config.keep_stage.contains(&compiler.stage) {"}, {"sha": "3fc3b68fd8681b2deea7e235f9c8af5ecaf4d51c", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f14f174859da3394f2014a4dcab59446c77b008/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14f174859da3394f2014a4dcab59446c77b008/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=4f14f174859da3394f2014a4dcab59446c77b008", "patch": "@@ -483,7 +483,6 @@ pub struct Rustdoc {\n impl Step for Rustdoc {\n     type Output = PathBuf;\n     const DEFAULT: bool = true;\n-    const ENABLE_DOWNLOAD_RUSTC: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {"}]}