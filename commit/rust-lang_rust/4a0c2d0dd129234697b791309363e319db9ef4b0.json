{"sha": "4a0c2d0dd129234697b791309363e319db9ef4b0", "node_id": "C_kwDOAAsO6NoAKDRhMGMyZDBkZDEyOTIzNDY5N2I3OTEzMDkzNjNlMzE5ZGI5ZWY0YjA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-22T17:12:06Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-24T15:57:27Z"}, "message": "Do not access HIR to check impl wf.", "tree": {"sha": "d9e6e34b0d5d98eef4c3a1515297d0fe0bc93777", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9e6e34b0d5d98eef4c3a1515297d0fe0bc93777"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a0c2d0dd129234697b791309363e319db9ef4b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a0c2d0dd129234697b791309363e319db9ef4b0", "html_url": "https://github.com/rust-lang/rust/commit/4a0c2d0dd129234697b791309363e319db9ef4b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a0c2d0dd129234697b791309363e319db9ef4b0/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10f4ce324baf7cfb7ce2b2096662b82b79204944", "url": "https://api.github.com/repos/rust-lang/rust/commits/10f4ce324baf7cfb7ce2b2096662b82b79204944", "html_url": "https://github.com/rust-lang/rust/commit/10f4ce324baf7cfb7ce2b2096662b82b79204944"}], "stats": {"total": 88, "additions": 33, "deletions": 55}, "files": [{"sha": "6e61ec4a6bd07b6d7974838670a520fa31389c56", "filename": "compiler/rustc_typeck/src/impl_wf_check.rs", "status": "modified", "additions": 19, "deletions": 28, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4a0c2d0dd129234697b791309363e319db9ef4b0/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a0c2d0dd129234697b791309363e319db9ef4b0/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs?ref=4a0c2d0dd129234697b791309363e319db9ef4b0", "patch": "@@ -13,7 +13,6 @@ use min_specialization::check_min_specialization;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::struct_span_err;\n-use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n use rustc_middle::ty::query::Providers;\n@@ -66,13 +65,10 @@ fn check_mod_impl_wf(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     let module = tcx.hir_module_items(module_def_id);\n     for id in module.items() {\n         if matches!(tcx.def_kind(id.def_id), DefKind::Impl) {\n-            let item = tcx.hir().item(id);\n-            if let hir::ItemKind::Impl(ref impl_) = item.kind {\n-                enforce_impl_params_are_constrained(tcx, item.def_id, impl_.items);\n-                enforce_impl_items_are_distinct(tcx, impl_.items);\n-                if min_specialization {\n-                    check_min_specialization(tcx, item.def_id.to_def_id(), item.span);\n-                }\n+            enforce_impl_params_are_constrained(tcx, id.def_id);\n+            enforce_impl_items_are_distinct(tcx, id.def_id);\n+            if min_specialization {\n+                check_min_specialization(tcx, id.def_id);\n             }\n         }\n     }\n@@ -82,11 +78,7 @@ pub fn provide(providers: &mut Providers) {\n     *providers = Providers { check_mod_impl_wf, ..*providers };\n }\n \n-fn enforce_impl_params_are_constrained(\n-    tcx: TyCtxt<'_>,\n-    impl_def_id: LocalDefId,\n-    impl_item_refs: &[hir::ImplItemRef],\n-) {\n+fn enforce_impl_params_are_constrained(tcx: TyCtxt<'_>, impl_def_id: LocalDefId) {\n     // Every lifetime used in an associated type must be constrained.\n     let impl_self_ty = tcx.type_of(impl_def_id);\n     if impl_self_ty.references_error() {\n@@ -114,9 +106,9 @@ fn enforce_impl_params_are_constrained(\n     );\n \n     // Disallow unconstrained lifetimes, but only if they appear in assoc types.\n-    let lifetimes_in_associated_types: FxHashSet<_> = impl_item_refs\n+    let lifetimes_in_associated_types: FxHashSet<_> = tcx\n+        .associated_item_def_ids(impl_def_id)\n         .iter()\n-        .map(|item_ref| item_ref.id.def_id)\n         .flat_map(|def_id| {\n             let item = tcx.associated_item(def_id);\n             match item.kind {\n@@ -216,33 +208,32 @@ fn report_unused_parameter(tcx: TyCtxt<'_>, span: Span, kind: &str, name: &str)\n }\n \n /// Enforce that we do not have two items in an impl with the same name.\n-fn enforce_impl_items_are_distinct(tcx: TyCtxt<'_>, impl_item_refs: &[hir::ImplItemRef]) {\n+fn enforce_impl_items_are_distinct(tcx: TyCtxt<'_>, impl_def_id: LocalDefId) {\n     let mut seen_type_items = FxHashMap::default();\n     let mut seen_value_items = FxHashMap::default();\n-    for impl_item_ref in impl_item_refs {\n-        let impl_item = tcx.hir().impl_item(impl_item_ref.id);\n+    for &impl_item_ref in tcx.associated_item_def_ids(impl_def_id) {\n+        let impl_item = tcx.associated_item(impl_item_ref);\n         let seen_items = match impl_item.kind {\n-            hir::ImplItemKind::TyAlias(_) => &mut seen_type_items,\n+            ty::AssocKind::Type => &mut seen_type_items,\n             _ => &mut seen_value_items,\n         };\n-        match seen_items.entry(impl_item.ident.normalize_to_macros_2_0()) {\n+        let span = tcx.def_span(impl_item_ref);\n+        let ident = impl_item.ident(tcx);\n+        match seen_items.entry(ident.normalize_to_macros_2_0()) {\n             Occupied(entry) => {\n                 let mut err = struct_span_err!(\n                     tcx.sess,\n-                    impl_item.span,\n+                    span,\n                     E0201,\n                     \"duplicate definitions with name `{}`:\",\n-                    impl_item.ident\n-                );\n-                err.span_label(\n-                    *entry.get(),\n-                    format!(\"previous definition of `{}` here\", impl_item.ident),\n+                    ident\n                 );\n-                err.span_label(impl_item.span, \"duplicate definition\");\n+                err.span_label(*entry.get(), format!(\"previous definition of `{}` here\", ident));\n+                err.span_label(span, \"duplicate definition\");\n                 err.emit();\n             }\n             Vacant(entry) => {\n-                entry.insert(impl_item.span);\n+                entry.insert(span);\n             }\n         }\n     }"}, {"sha": "f07396ce74ffb2aa3881be836d9b6615de337b0b", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 14, "deletions": 27, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4a0c2d0dd129234697b791309363e319db9ef4b0/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a0c2d0dd129234697b791309363e319db9ef4b0/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=4a0c2d0dd129234697b791309363e319db9ef4b0", "patch": "@@ -79,19 +79,19 @@ use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n use rustc_span::Span;\n use rustc_trait_selection::traits::{self, translate_substs, wf};\n \n-pub(super) fn check_min_specialization(tcx: TyCtxt<'_>, impl_def_id: DefId, span: Span) {\n+pub(super) fn check_min_specialization(tcx: TyCtxt<'_>, impl_def_id: LocalDefId) {\n     if let Some(node) = parent_specialization_node(tcx, impl_def_id) {\n         tcx.infer_ctxt().enter(|infcx| {\n-            check_always_applicable(&infcx, impl_def_id, node, span);\n+            check_always_applicable(&infcx, impl_def_id, node);\n         });\n     }\n }\n \n-fn parent_specialization_node(tcx: TyCtxt<'_>, impl1_def_id: DefId) -> Option<Node> {\n+fn parent_specialization_node(tcx: TyCtxt<'_>, impl1_def_id: LocalDefId) -> Option<Node> {\n     let trait_ref = tcx.impl_trait_ref(impl1_def_id)?;\n     let trait_def = tcx.trait_def(trait_ref.def_id);\n \n-    let impl2_node = trait_def.ancestors(tcx, impl1_def_id).ok()?.nth(1)?;\n+    let impl2_node = trait_def.ancestors(tcx, impl1_def_id.to_def_id()).ok()?.nth(1)?;\n \n     let always_applicable_trait =\n         matches!(trait_def.specialization_kind, TraitSpecializationKind::AlwaysApplicable);\n@@ -103,15 +103,8 @@ fn parent_specialization_node(tcx: TyCtxt<'_>, impl1_def_id: DefId) -> Option<No\n }\n \n /// Check that `impl1` is a sound specialization\n-fn check_always_applicable(\n-    infcx: &InferCtxt<'_, '_>,\n-    impl1_def_id: DefId,\n-    impl2_node: Node,\n-    span: Span,\n-) {\n-    if let Some((impl1_substs, impl2_substs)) =\n-        get_impl_substs(infcx, impl1_def_id, impl2_node, span)\n-    {\n+fn check_always_applicable(infcx: &InferCtxt<'_, '_>, impl1_def_id: LocalDefId, impl2_node: Node) {\n+    if let Some((impl1_substs, impl2_substs)) = get_impl_substs(infcx, impl1_def_id, impl2_node) {\n         let impl2_def_id = impl2_node.def_id();\n         debug!(\n             \"check_always_applicable(\\nimpl1_def_id={:?},\\nimpl2_def_id={:?},\\nimpl2_substs={:?}\\n)\",\n@@ -126,17 +119,10 @@ fn check_always_applicable(\n             unconstrained_parent_impl_substs(tcx, impl2_def_id, impl2_substs)\n         };\n \n+        let span = tcx.def_span(impl1_def_id);\n         check_static_lifetimes(tcx, &parent_substs, span);\n         check_duplicate_params(tcx, impl1_substs, &parent_substs, span);\n-\n-        check_predicates(\n-            infcx,\n-            impl1_def_id.expect_local(),\n-            impl1_substs,\n-            impl2_node,\n-            impl2_substs,\n-            span,\n-        );\n+        check_predicates(infcx, impl1_def_id, impl1_substs, impl2_node, impl2_substs, span);\n     }\n }\n \n@@ -152,20 +138,21 @@ fn check_always_applicable(\n /// Would return `S1 = [C]` and `S2 = [Vec<C>, C]`.\n fn get_impl_substs<'tcx>(\n     infcx: &InferCtxt<'_, 'tcx>,\n-    impl1_def_id: DefId,\n+    impl1_def_id: LocalDefId,\n     impl2_node: Node,\n-    span: Span,\n ) -> Option<(SubstsRef<'tcx>, SubstsRef<'tcx>)> {\n     let tcx = infcx.tcx;\n     let param_env = tcx.param_env(impl1_def_id);\n \n-    let impl1_substs = InternalSubsts::identity_for_item(tcx, impl1_def_id);\n-    let impl2_substs = translate_substs(infcx, param_env, impl1_def_id, impl1_substs, impl2_node);\n+    let impl1_substs = InternalSubsts::identity_for_item(tcx, impl1_def_id.to_def_id());\n+    let impl2_substs =\n+        translate_substs(infcx, param_env, impl1_def_id.to_def_id(), impl1_substs, impl2_node);\n \n     // Conservatively use an empty `ParamEnv`.\n     let outlives_env = OutlivesEnvironment::new(ty::ParamEnv::empty());\n-    infcx.resolve_regions_and_report_errors(impl1_def_id, &outlives_env);\n+    infcx.resolve_regions_and_report_errors(impl1_def_id.to_def_id(), &outlives_env);\n     let Ok(impl2_substs) = infcx.fully_resolve(impl2_substs) else {\n+        let span = tcx.def_span(impl1_def_id);\n         tcx.sess.emit_err(SubstsOnOverriddenImpl { span });\n         return None;\n     };"}]}