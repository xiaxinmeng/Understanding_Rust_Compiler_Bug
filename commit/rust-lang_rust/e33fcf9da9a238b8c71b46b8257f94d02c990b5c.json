{"sha": "e33fcf9da9a238b8c71b46b8257f94d02c990b5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzM2ZjZjlkYTlhMjM4YjhjNzFiNDZiODI1N2Y5NGQwMmM5OTBiNWM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-05T13:42:01Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-05T13:42:40Z"}, "message": "extra::treemap: remove mutate_values, replaced by .mut_iter().", "tree": {"sha": "a98a21a8f1947657121ea7313be4585a68cfe712", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a98a21a8f1947657121ea7313be4585a68cfe712"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e33fcf9da9a238b8c71b46b8257f94d02c990b5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e33fcf9da9a238b8c71b46b8257f94d02c990b5c", "html_url": "https://github.com/rust-lang/rust/commit/e33fcf9da9a238b8c71b46b8257f94d02c990b5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e33fcf9da9a238b8c71b46b8257f94d02c990b5c/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "463a6d90643f45d9f86157e853ebd1a8402c6022", "url": "https://api.github.com/repos/rust-lang/rust/commits/463a6d90643f45d9f86157e853ebd1a8402c6022", "html_url": "https://github.com/rust-lang/rust/commit/463a6d90643f45d9f86157e853ebd1a8402c6022"}], "stats": {"total": 23, "additions": 0, "deletions": 23}, "files": [{"sha": "2182809f3aa733f940a2239de25cc9002fff05e4", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e33fcf9da9a238b8c71b46b8257f94d02c990b5c/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33fcf9da9a238b8c71b46b8257f94d02c990b5c/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=e33fcf9da9a238b8c71b46b8257f94d02c990b5c", "patch": "@@ -135,11 +135,6 @@ impl<K: TotalOrd, V> TreeMap<K, V> {\n     /// Create an empty TreeMap\n     pub fn new() -> TreeMap<K, V> { TreeMap{root: None, length: 0} }\n \n-    /// Iterate over the map and mutate the contained values\n-    pub fn mutate_values(&mut self, f: |&K, &mut V| -> bool) -> bool {\n-        mutate_values(&mut self.root, f)\n-    }\n-\n     /// Get a lazy iterator over the key-value pairs in the map.\n     /// Requires that it be frozen (immutable).\n     pub fn iter<'a>(&'a self) -> TreeMapIterator<'a, K, V> {\n@@ -892,24 +887,6 @@ impl<K: TotalOrd, V> TreeNode<K, V> {\n     }\n }\n \n-fn mutate_values<'r,\n-                 K:TotalOrd,\n-                 V>(\n-                 node: &'r mut Option<~TreeNode<K,V>>,\n-                 f: |&'r K, &'r mut V| -> bool)\n-                 -> bool {\n-    match *node {\n-      Some(~TreeNode{key: ref key, value: ref mut value, left: ref mut left,\n-                     right: ref mut right, ..}) => {\n-        if !mutate_values(left,  |k,v| f(k,v)) { return false }\n-        if !f(key, value) { return false }\n-        if !mutate_values(right, |k,v| f(k,v)) { return false }\n-      }\n-      None => return false\n-    }\n-    true\n-}\n-\n // Remove left horizontal link by rotating right\n fn skew<K: TotalOrd, V>(node: &mut ~TreeNode<K, V>) {\n     if node.left.as_ref().map_default(false, |x| x.level == node.level) {"}]}