{"sha": "2440ccabc875760a93e6ec67ec1a1fa933e77d60", "node_id": "C_kwDOAAsO6NoAKDI0NDBjY2FiYzg3NTc2MGE5M2U2ZWM2N2VjMWExZmE5MzNlNzdkNjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-21T22:18:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-21T22:18:01Z"}, "message": "Auto merge of #111808 - Zoxc:query-structs-trim, r=cjgillot\n\nReplace `QueryStruct` with arrays local to `rustc_query_impl`\n\nThis removes `QueryStruct` and instead uses constant arrays of function pointers for `try_collect_active_jobs`, `alloc_self_profile_query_strings` and `encode_query_results`. This further decouples `rustc_query_impl` from `rustc_middle`.\n\nr? `@cjgillot`", "tree": {"sha": "fca05ddf82208967f9d77829d898b97ad199909c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fca05ddf82208967f9d77829d898b97ad199909c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2440ccabc875760a93e6ec67ec1a1fa933e77d60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2440ccabc875760a93e6ec67ec1a1fa933e77d60", "html_url": "https://github.com/rust-lang/rust/commit/2440ccabc875760a93e6ec67ec1a1fa933e77d60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2440ccabc875760a93e6ec67ec1a1fa933e77d60/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d871b0617a4b3d6610b7cee0ab5310dcb542c62", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d871b0617a4b3d6610b7cee0ab5310dcb542c62", "html_url": "https://github.com/rust-lang/rust/commit/9d871b0617a4b3d6610b7cee0ab5310dcb542c62"}, {"sha": "aa5d43647b066d573264473fa391a009f2b5bbe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa5d43647b066d573264473fa391a009f2b5bbe8", "html_url": "https://github.com/rust-lang/rust/commit/aa5d43647b066d573264473fa391a009f2b5bbe8"}], "stats": {"total": 159, "additions": 77, "deletions": 82}, "files": [{"sha": "97edfc2fca27da9007a2905f77b1b5495d661fd0", "filename": "compiler/rustc_middle/src/query/plumbing.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2440ccabc875760a93e6ec67ec1a1fa933e77d60/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2440ccabc875760a93e6ec67ec1a1fa933e77d60/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fplumbing.rs?ref=2440ccabc875760a93e6ec67ec1a1fa933e77d60", "patch": "@@ -32,20 +32,12 @@ impl QueryKeyStringCache {\n     }\n }\n \n-#[derive(Clone, Copy)]\n-pub struct QueryStruct<'tcx> {\n-    pub try_collect_active_jobs: fn(TyCtxt<'tcx>, &mut QueryMap<DepKind>) -> Option<()>,\n-    pub alloc_self_profile_query_strings: fn(TyCtxt<'tcx>, &mut QueryKeyStringCache),\n-    pub encode_query_results:\n-        Option<fn(TyCtxt<'tcx>, &mut CacheEncoder<'_, 'tcx>, &mut EncodedDepNodeIndex)>,\n-}\n-\n pub struct DynamicQuery<'tcx, C: QueryCache> {\n     pub name: &'static str,\n     pub eval_always: bool,\n-    pub dep_kind: rustc_middle::dep_graph::DepKind,\n+    pub dep_kind: DepKind,\n     pub handle_cycle_error: HandleCycleError,\n-    pub query_state: FieldOffset<QueryStates<'tcx>, QueryState<C::Key, crate::dep_graph::DepKind>>,\n+    pub query_state: FieldOffset<QueryStates<'tcx>, QueryState<C::Key, DepKind>>,\n     pub query_cache: FieldOffset<QueryCaches<'tcx>, C>,\n     pub cache_on_disk: fn(tcx: TyCtxt<'tcx>, key: &C::Key) -> bool,\n     pub execute_query: fn(tcx: TyCtxt<'tcx>, k: C::Key) -> C::Value,\n@@ -60,16 +52,14 @@ pub struct DynamicQuery<'tcx, C: QueryCache> {\n     pub loadable_from_disk:\n         fn(tcx: TyCtxt<'tcx>, key: &C::Key, index: SerializedDepNodeIndex) -> bool,\n     pub hash_result: HashResult<C::Value>,\n-    pub value_from_cycle_error:\n-        fn(tcx: TyCtxt<'tcx>, cycle: &[QueryInfo<crate::dep_graph::DepKind>]) -> C::Value,\n+    pub value_from_cycle_error: fn(tcx: TyCtxt<'tcx>, cycle: &[QueryInfo<DepKind>]) -> C::Value,\n     pub format_value: fn(&C::Value) -> String,\n }\n \n pub struct QuerySystemFns<'tcx> {\n     pub engine: QueryEngine,\n     pub local_providers: Providers,\n     pub extern_providers: ExternProviders,\n-    pub query_structs: Vec<QueryStruct<'tcx>>,\n     pub encode_query_results: fn(\n         tcx: TyCtxt<'tcx>,\n         encoder: &mut CacheEncoder<'_, 'tcx>,"}, {"sha": "4cf0f1305a70901b84c46241adfbc3bd5a6903e1", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2440ccabc875760a93e6ec67ec1a1fa933e77d60/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2440ccabc875760a93e6ec67ec1a1fa933e77d60/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=2440ccabc875760a93e6ec67ec1a1fa933e77d60", "patch": "@@ -23,8 +23,10 @@ use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepNodeIndex;\n use rustc_middle::dep_graph::{self, DepKind, DepKindStruct};\n use rustc_middle::query::erase::{erase, restore, Erase};\n-use rustc_middle::query::on_disk_cache::OnDiskCache;\n-use rustc_middle::query::plumbing::{DynamicQuery, QuerySystem, QuerySystemFns};\n+use rustc_middle::query::on_disk_cache::{CacheEncoder, EncodedDepNodeIndex, OnDiskCache};\n+use rustc_middle::query::plumbing::{\n+    DynamicQuery, QueryKeyStringCache, QuerySystem, QuerySystemFns,\n+};\n use rustc_middle::query::AsLocalKey;\n use rustc_middle::query::{\n     queries, DynamicQueries, ExternProviders, Providers, QueryCaches, QueryEngine, QueryStates,\n@@ -215,7 +217,6 @@ pub fn query_system<'tcx>(\n             engine: engine(incremental),\n             local_providers,\n             extern_providers,\n-            query_structs: make_dep_kind_array!(query_structs).to_vec(),\n             encode_query_results: encode_all_query_results,\n             try_mark_green: try_mark_green,\n         },"}, {"sha": "244f0e84b43d94dc6866ccf5fcc411742cd44a82", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 68, "deletions": 64, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/2440ccabc875760a93e6ec67ec1a1fa933e77d60/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2440ccabc875760a93e6ec67ec1a1fa933e77d60/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=2440ccabc875760a93e6ec67ec1a1fa933e77d60", "patch": "@@ -81,8 +81,8 @@ impl QueryContext for QueryCtxt<'_> {\n     fn try_collect_active_jobs(self) -> Option<QueryMap<DepKind>> {\n         let mut jobs = QueryMap::default();\n \n-        for query in &self.query_system.fns.query_structs {\n-            (query.try_collect_active_jobs)(self.tcx, &mut jobs);\n+        for collect in super::TRY_COLLECT_ACTIVE_JOBS.iter() {\n+            collect(self.tcx, &mut jobs);\n         }\n \n         Some(jobs)\n@@ -183,10 +183,8 @@ pub(super) fn encode_all_query_results<'tcx>(\n     encoder: &mut CacheEncoder<'_, 'tcx>,\n     query_result_index: &mut EncodedDepNodeIndex,\n ) {\n-    for query in &tcx.query_system.fns.query_structs {\n-        if let Some(encode) = query.encode_query_results {\n-            encode(tcx, encoder, query_result_index);\n-        }\n+    for encode in super::ENCODE_QUERY_RESULTS.iter().copied().filter_map(|e| e) {\n+        encode(tcx, encoder, query_result_index);\n     }\n }\n \n@@ -476,6 +474,16 @@ where\n     }\n }\n \n+macro_rules! item_if_cached {\n+    ([] $tokens:tt) => {};\n+    ([(cache) $($rest:tt)*] { $($tokens:tt)* }) => {\n+        $($tokens)*\n+    };\n+    ([$other:tt $($modifiers:tt)*] $tokens:tt) => {\n+        item_if_cached! { [$($modifiers)*] $tokens }\n+    };\n+}\n+\n macro_rules! expand_if_cached {\n     ([], $tokens:expr) => {{\n         None\n@@ -633,6 +641,43 @@ macro_rules! define_queries {\n                     restore::<queries::$name::Value<'tcx>>(value)\n                 }\n             }\n+\n+            pub fn try_collect_active_jobs<'tcx>(tcx: TyCtxt<'tcx>, qmap: &mut QueryMap<DepKind>) {\n+                let make_query = |tcx, key| {\n+                    let kind = rustc_middle::dep_graph::DepKind::$name;\n+                    let name = stringify!($name);\n+                    $crate::plumbing::create_query_frame(tcx, rustc_middle::query::descs::$name, key, kind, name)\n+                };\n+                tcx.query_system.states.$name.try_collect_active_jobs(\n+                    tcx,\n+                    make_query,\n+                    qmap,\n+                ).unwrap();\n+            }\n+\n+            pub fn alloc_self_profile_query_strings<'tcx>(tcx: TyCtxt<'tcx>, string_cache: &mut QueryKeyStringCache) {\n+                $crate::profiling_support::alloc_self_profile_query_strings_for_query_cache(\n+                    tcx,\n+                    stringify!($name),\n+                    &tcx.query_system.caches.$name,\n+                    string_cache,\n+                )\n+            }\n+\n+            item_if_cached! { [$($modifiers)*] {\n+                pub fn encode_query_results<'tcx>(\n+                    tcx: TyCtxt<'tcx>,\n+                    encoder: &mut CacheEncoder<'_, 'tcx>,\n+                    query_result_index: &mut EncodedDepNodeIndex\n+                ) {\n+                    $crate::plumbing::encode_query_results::<query_impl::$name::QueryType<'tcx>>(\n+                        query_impl::$name::QueryType::config(tcx),\n+                        QueryCtxt::new(tcx),\n+                        encoder,\n+                        query_result_index,\n+                    )\n+                }\n+            }}\n         })*}\n \n         pub(crate) fn engine(incremental: bool) -> QueryEngine {\n@@ -655,6 +700,23 @@ macro_rules! define_queries {\n             }\n         }\n \n+        // These arrays are used for iteration and can't be indexed by `DepKind`.\n+\n+        const TRY_COLLECT_ACTIVE_JOBS: &[for<'tcx> fn(TyCtxt<'tcx>, &mut QueryMap<DepKind>)] =\n+            &[$(query_impl::$name::try_collect_active_jobs),*];\n+\n+        const ALLOC_SELF_PROFILE_QUERY_STRINGS: &[\n+            for<'tcx> fn(TyCtxt<'tcx>, &mut QueryKeyStringCache)\n+        ] = &[$(query_impl::$name::alloc_self_profile_query_strings),*];\n+\n+        const ENCODE_QUERY_RESULTS: &[\n+            Option<for<'tcx> fn(\n+                TyCtxt<'tcx>,\n+                &mut CacheEncoder<'_, 'tcx>,\n+                &mut EncodedDepNodeIndex)\n+            >\n+        ] = &[$(expand_if_cached!([$($modifiers)*], query_impl::$name::encode_query_results)),*];\n+\n         #[allow(nonstandard_style)]\n         mod query_callbacks {\n             use super::*;\n@@ -720,64 +782,6 @@ macro_rules! define_queries {\n             })*\n         }\n \n-        mod query_structs {\n-            use super::*;\n-            use rustc_middle::query::plumbing::{QueryKeyStringCache, QueryStruct};\n-            use rustc_middle::dep_graph::DepKind;\n-            use crate::QueryConfigRestored;\n-\n-            pub(super) const fn dummy_query_struct<'tcx>() -> QueryStruct<'tcx> {\n-                fn noop_try_collect_active_jobs(_: TyCtxt<'_>, _: &mut QueryMap<DepKind>) -> Option<()> {\n-                    None\n-                }\n-                fn noop_alloc_self_profile_query_strings(_: TyCtxt<'_>, _: &mut QueryKeyStringCache) {}\n-\n-                QueryStruct {\n-                    try_collect_active_jobs: noop_try_collect_active_jobs,\n-                    alloc_self_profile_query_strings: noop_alloc_self_profile_query_strings,\n-                    encode_query_results: None,\n-                }\n-            }\n-\n-            pub(super) use dummy_query_struct as Null;\n-            pub(super) use dummy_query_struct as Red;\n-            pub(super) use dummy_query_struct as TraitSelect;\n-            pub(super) use dummy_query_struct as CompileCodegenUnit;\n-            pub(super) use dummy_query_struct as CompileMonoItem;\n-\n-            $(\n-            pub(super) const fn $name<'tcx>() -> QueryStruct<'tcx> { QueryStruct {\n-                try_collect_active_jobs: |tcx, qmap| {\n-                    let make_query = |tcx, key| {\n-                        let kind = rustc_middle::dep_graph::DepKind::$name;\n-                        let name = stringify!($name);\n-                        $crate::plumbing::create_query_frame(tcx, rustc_middle::query::descs::$name, key, kind, name)\n-                    };\n-                    tcx.query_system.states.$name.try_collect_active_jobs(\n-                        tcx,\n-                        make_query,\n-                        qmap,\n-                    )\n-                },\n-                alloc_self_profile_query_strings: |tcx, string_cache| {\n-                    $crate::profiling_support::alloc_self_profile_query_strings_for_query_cache(\n-                        tcx,\n-                        stringify!($name),\n-                        &tcx.query_system.caches.$name,\n-                        string_cache,\n-                    )\n-                },\n-                encode_query_results: expand_if_cached!([$($modifiers)*], |tcx, encoder, query_result_index|\n-                    $crate::plumbing::encode_query_results::<query_impl::$name::QueryType<'tcx>>(\n-                        query_impl::$name::QueryType::config(tcx),\n-                        QueryCtxt::new(tcx),\n-                        encoder,\n-                        query_result_index,\n-                    )\n-                ),\n-            }})*\n-        }\n-\n         pub fn query_callbacks<'tcx>(arena: &'tcx Arena<'tcx>) -> &'tcx [DepKindStruct<'tcx>] {\n             arena.alloc_from_iter(make_dep_kind_array!(query_callbacks))\n         }"}, {"sha": "fbc6db93e01ad2e4c6dd3ea536fc82e6ba125303", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2440ccabc875760a93e6ec67ec1a1fa933e77d60/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2440ccabc875760a93e6ec67ec1a1fa933e77d60/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=2440ccabc875760a93e6ec67ec1a1fa933e77d60", "patch": "@@ -243,7 +243,7 @@ pub fn alloc_self_profile_query_strings(tcx: TyCtxt<'_>) {\n \n     let mut string_cache = QueryKeyStringCache::new();\n \n-    for query in &tcx.query_system.fns.query_structs {\n-        (query.alloc_self_profile_query_strings)(tcx, &mut string_cache);\n+    for alloc in super::ALLOC_SELF_PROFILE_QUERY_STRINGS.iter() {\n+        alloc(tcx, &mut string_cache)\n     }\n }"}]}