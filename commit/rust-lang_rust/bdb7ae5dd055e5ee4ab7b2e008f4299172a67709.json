{"sha": "bdb7ae5dd055e5ee4ab7b2e008f4299172a67709", "node_id": "C_kwDOAAsO6NoAKGJkYjdhZTVkZDA1NWU1ZWU0YWI3YjJlMDA4ZjQyOTkxNzJhNjc3MDk", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-02-09T11:00:03Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-02-09T12:45:31Z"}, "message": "Rename syntax_node_to_token_tree_censored", "tree": {"sha": "3c904e56ef21a24441a5e5bad3c97c37cd120fdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c904e56ef21a24441a5e5bad3c97c37cd120fdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdb7ae5dd055e5ee4ab7b2e008f4299172a67709", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb7ae5dd055e5ee4ab7b2e008f4299172a67709", "html_url": "https://github.com/rust-lang/rust/commit/bdb7ae5dd055e5ee4ab7b2e008f4299172a67709", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdb7ae5dd055e5ee4ab7b2e008f4299172a67709/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecf3cff4a6c7c06d1fe30e636d69227ab6310ebb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf3cff4a6c7c06d1fe30e636d69227ab6310ebb", "html_url": "https://github.com/rust-lang/rust/commit/ecf3cff4a6c7c06d1fe30e636d69227ab6310ebb"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "65799e0be57536bf8deca7505f9ecf3f12432a5e", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bdb7ae5dd055e5ee4ab7b2e008f4299172a67709/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb7ae5dd055e5ee4ab7b2e008f4299172a67709/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=bdb7ae5dd055e5ee4ab7b2e008f4299172a67709", "patch": "@@ -151,8 +151,11 @@ pub fn expand_speculative(\n     let censor = censor_for_macro_input(&loc, &speculative_args);\n     let mut fixups = fixup::fixup_syntax(&speculative_args);\n     fixups.replace.extend(censor.into_iter().map(|node| (node, Vec::new())));\n-    let (mut tt, spec_args_tmap) =\n-        mbe::syntax_node_to_token_tree_censored(&speculative_args, fixups.replace, fixups.append);\n+    let (mut tt, spec_args_tmap) = mbe::syntax_node_to_token_tree_with_modifications(\n+        &speculative_args,\n+        fixups.replace,\n+        fixups.append,\n+    );\n \n     let (attr_arg, token_id) = match loc.kind {\n         MacroCallKind::Attr { invoc_attr_index, .. } => {\n@@ -303,11 +306,10 @@ fn macro_arg(\n \n     let node = SyntaxNode::new_root(arg);\n     let censor = censor_for_macro_input(&loc, &node);\n-    // TODO only fixup for attribute macro input\n     let mut fixups = fixup::fixup_syntax(&node);\n     fixups.replace.extend(censor.into_iter().map(|node| (node, Vec::new())));\n     let (mut tt, tmap) =\n-        mbe::syntax_node_to_token_tree_censored(&node, fixups.replace, fixups.append);\n+        mbe::syntax_node_to_token_tree_with_modifications(&node, fixups.replace, fixups.append);\n \n     if loc.def.is_proc_macro() {\n         // proc macros expect their inputs without parentheses, MBEs expect it with them included"}, {"sha": "f2d43f4d69beff4fd61a6b1e5c529ab23e270288", "filename": "crates/hir_expand/src/fixup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb7ae5dd055e5ee4ab7b2e008f4299172a67709/crates%2Fhir_expand%2Fsrc%2Ffixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb7ae5dd055e5ee4ab7b2e008f4299172a67709/crates%2Fhir_expand%2Fsrc%2Ffixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Ffixup.rs?ref=bdb7ae5dd055e5ee4ab7b2e008f4299172a67709", "patch": "@@ -123,7 +123,7 @@ mod tests {\n         let parsed = syntax::SourceFile::parse(ra_fixture);\n         eprintln!(\"parse: {:#?}\", parsed.syntax_node());\n         let fixups = super::fixup_syntax(&parsed.syntax_node());\n-        let (mut tt, tmap) = mbe::syntax_node_to_token_tree_censored(\n+        let (mut tt, tmap) = mbe::syntax_node_to_token_tree_with_modifications(\n             &parsed.syntax_node(),\n             fixups.replace,\n             fixups.append,"}, {"sha": "07b7f4d1a5e8d5fcaf8472de4dd522c9d2d8a868", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb7ae5dd055e5ee4ab7b2e008f4299172a67709/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb7ae5dd055e5ee4ab7b2e008f4299172a67709/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=bdb7ae5dd055e5ee4ab7b2e008f4299172a67709", "patch": "@@ -30,7 +30,7 @@ pub use tt::{Delimiter, DelimiterKind, Punct};\n pub use crate::{\n     syntax_bridge::{\n         parse_exprs_with_sep, parse_to_token_tree, syntax_node_to_token_tree,\n-        syntax_node_to_token_tree_censored, token_tree_to_syntax_node, SyntheticToken,\n+        syntax_node_to_token_tree_with_modifications, token_tree_to_syntax_node, SyntheticToken,\n         SyntheticTokenId,\n     },\n     token_map::TokenMap,"}, {"sha": "78a37993f7387fa99bbc1d4bbdd4f70a938a1a74", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bdb7ae5dd055e5ee4ab7b2e008f4299172a67709/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb7ae5dd055e5ee4ab7b2e008f4299172a67709/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=bdb7ae5dd055e5ee4ab7b2e008f4299172a67709", "patch": "@@ -15,13 +15,12 @@ use crate::{to_parser_input::to_parser_input, tt_iter::TtIter, TokenMap};\n /// Convert the syntax node to a `TokenTree` (what macro\n /// will consume).\n pub fn syntax_node_to_token_tree(node: &SyntaxNode) -> (tt::Subtree, TokenMap) {\n-    syntax_node_to_token_tree_censored(node, Default::default(), Default::default())\n+    syntax_node_to_token_tree_with_modifications(node, Default::default(), Default::default())\n }\n \n-// TODO rename\n /// Convert the syntax node to a `TokenTree` (what macro will consume)\n /// with the censored range excluded.\n-pub fn syntax_node_to_token_tree_censored(\n+pub fn syntax_node_to_token_tree_with_modifications(\n     node: &SyntaxNode,\n     replace: FxHashMap<SyntaxNode, Vec<SyntheticToken>>,\n     append: FxHashMap<SyntaxNode, Vec<SyntheticToken>>,"}]}