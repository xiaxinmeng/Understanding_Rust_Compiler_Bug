{"sha": "8ae411e1b342bb1756f620b0c97bfa9e4eef4e47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZTQxMWUxYjM0MmJiMTc1NmY2MjBiMGM5N2JmYTllNGVlZjRlNDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-02T14:38:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-02T14:38:12Z"}, "message": "Auto merge of #40206 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 9 pull requests\n\n- Successful merges: #40081, #40144, #40168, #40169, #40170, #40173, #40175, #40191, #40194\n- Failed merges:", "tree": {"sha": "afb7047190a7b9cda464eb18142b0a88ae3b61ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afb7047190a7b9cda464eb18142b0a88ae3b61ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47", "html_url": "https://github.com/rust-lang/rust/commit/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2be750b2439aaaa760b95f5be5763e179ec0258b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2be750b2439aaaa760b95f5be5763e179ec0258b", "html_url": "https://github.com/rust-lang/rust/commit/2be750b2439aaaa760b95f5be5763e179ec0258b"}, {"sha": "ad0a3567f858a7de9e60b25d17d244060398e760", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad0a3567f858a7de9e60b25d17d244060398e760", "html_url": "https://github.com/rust-lang/rust/commit/ad0a3567f858a7de9e60b25d17d244060398e760"}], "stats": {"total": 78, "additions": 55, "deletions": 23}, "files": [{"sha": "66a48566bd7c4256a39210c2a73f5d042f4539e2", "filename": "src/doc/book/src/const-and-static.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47/src%2Fdoc%2Fbook%2Fsrc%2Fconst-and-static.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47/src%2Fdoc%2Fbook%2Fsrc%2Fconst-and-static.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fconst-and-static.md?ref=8ae411e1b342bb1756f620b0c97bfa9e4eef4e47", "patch": "@@ -32,7 +32,7 @@ static N: i32 = 5;\n Unlike [`let`][let] bindings, you must annotate the type of a `static`.\n \n Statics live for the entire lifetime of a program, and therefore any\n-reference stored in a constant has a [`'static` lifetime][lifetimes]:\n+reference stored in a static has a [`'static` lifetime][lifetimes]:\n \n ```rust\n static NAME: &'static str = \"Steve\";"}, {"sha": "4d81438b11deadfe9cfb3c7a8c587df46fd09747", "filename": "src/doc/book/src/guessing-game.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47/src%2Fdoc%2Fbook%2Fsrc%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47/src%2Fdoc%2Fbook%2Fsrc%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fguessing-game.md?ref=8ae411e1b342bb1756f620b0c97bfa9e4eef4e47", "patch": "@@ -255,7 +255,7 @@ and other whitespace. This helps you split up long lines. We _could_ have\n done:\n \n ```rust,ignore\n-    io::stdin().read_line(&mut guess).expect(\"failed to read line\");\n+    io::stdin().read_line(&mut guess).expect(\"Failed to read line\");\n ```\n \n But that gets hard to read. So we\u2019ve split it up, two lines for two method\n@@ -473,7 +473,7 @@ fn main() {\n     let mut guess = String::new();\n \n     io::stdin().read_line(&mut guess)\n-        .expect(\"failed to read line\");\n+        .expect(\"Failed to read line\");\n \n     println!(\"You guessed: {}\", guess);\n }\n@@ -563,7 +563,7 @@ fn main() {\n     let mut guess = String::new();\n \n     io::stdin().read_line(&mut guess)\n-        .expect(\"failed to read line\");\n+        .expect(\"Failed to read line\");\n \n     println!(\"You guessed: {}\", guess);\n \n@@ -678,7 +678,7 @@ fn main() {\n     let mut guess = String::new();\n \n     io::stdin().read_line(&mut guess)\n-        .expect(\"failed to read line\");\n+        .expect(\"Failed to read line\");\n \n     let guess: u32 = guess.trim().parse()\n         .expect(\"Please type a number!\");\n@@ -780,7 +780,7 @@ fn main() {\n         let mut guess = String::new();\n \n         io::stdin().read_line(&mut guess)\n-            .expect(\"failed to read line\");\n+            .expect(\"Failed to read line\");\n \n         let guess: u32 = guess.trim().parse()\n             .expect(\"Please type a number!\");\n@@ -847,7 +847,7 @@ fn main() {\n         let mut guess = String::new();\n \n         io::stdin().read_line(&mut guess)\n-            .expect(\"failed to read line\");\n+            .expect(\"Failed to read line\");\n \n         let guess: u32 = guess.trim().parse()\n             .expect(\"Please type a number!\");\n@@ -892,7 +892,7 @@ fn main() {\n         let mut guess = String::new();\n \n         io::stdin().read_line(&mut guess)\n-            .expect(\"failed to read line\");\n+            .expect(\"Failed to read line\");\n \n         let guess: u32 = match guess.trim().parse() {\n             Ok(num) => num,\n@@ -981,7 +981,7 @@ fn main() {\n         let mut guess = String::new();\n \n         io::stdin().read_line(&mut guess)\n-            .expect(\"failed to read line\");\n+            .expect(\"Failed to read line\");\n \n         let guess: u32 = match guess.trim().parse() {\n             Ok(num) => num,"}, {"sha": "9eeac3d687ebfaa85398977c0c32421a9383e481", "filename": "src/doc/book/src/if-let.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47/src%2Fdoc%2Fbook%2Fsrc%2Fif-let.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47/src%2Fdoc%2Fbook%2Fsrc%2Fif-let.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fif-let.md?ref=8ae411e1b342bb1756f620b0c97bfa9e4eef4e47", "patch": "@@ -1,6 +1,6 @@\n # if let\n \n-`if let` permits [patterns][pattern] matching within the condition of an [if][if] statement.\n+`if let` permits [patterns][patterns] matching within the condition of an [if][if] statement.\n This allows us to reduce the overhead of certain kinds of [pattern][patterns] matches\n and express them in a more convenient way.  \n "}, {"sha": "ffc9d2b6976843fc312741d969e0fb5a33dc89e7", "filename": "src/doc/book/src/strings.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47/src%2Fdoc%2Fbook%2Fsrc%2Fstrings.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47/src%2Fdoc%2Fbook%2Fsrc%2Fstrings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fstrings.md?ref=8ae411e1b342bb1756f620b0c97bfa9e4eef4e47", "patch": "@@ -145,7 +145,7 @@ This emphasizes that we have to walk from the beginning of the list of `chars`.\n \n ## Slicing\n \n-You can get a slice of a string with slicing syntax:\n+You can get a slice of a string with the slicing syntax:\n \n ```rust\n let dog = \"hachiko\";"}, {"sha": "3efa4f0e0a8d85898551218a9e9212d305e0d58b", "filename": "src/doc/book/src/structs.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47/src%2Fdoc%2Fbook%2Fsrc%2Fstructs.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47/src%2Fdoc%2Fbook%2Fsrc%2Fstructs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fstructs.md?ref=8ae411e1b342bb1756f620b0c97bfa9e4eef4e47", "patch": "@@ -255,13 +255,14 @@ rather than positions.\n \n You can define a `struct` with no members at all:\n \n-```rust\n+```rust,compile_fail,E0423\n struct Electron {} // Use empty braces...\n struct Proton;     // ...or just a semicolon.\n \n-// Whether you declared the struct with braces or not, do the same when creating one.\n+// Use the same notation when creating an instance.\n let x = Electron {};\n let y = Proton;\n+let z = Electron; // Error\n ```\n \n Such a `struct` is called \u2018unit-like\u2019 because it resembles the empty"}, {"sha": "5fb323d6ce90950bf2150ee05ac16255e097cae7", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=8ae411e1b342bb1756f620b0c97bfa9e4eef4e47", "patch": "@@ -5,6 +5,7 @@\n - [abi_sysv64](abi-sysv64.md)\n - [abi_unadjusted](abi-unadjusted.md)\n - [abi_vectorcall](abi-vectorcall.md)\n+- [abi_x86_interrupt](abi-x86-interrupt.md)\n - [advanced_slice_patterns](advanced-slice-patterns.md)\n - [alloc_jemalloc](alloc-jemalloc.md)\n - [alloc_system](alloc-system.md)"}, {"sha": "c89d2ee2106c91d7e1b4f9148905d35c7251b485", "filename": "src/doc/unstable-book/src/abi-x86-interrupt.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-x86-interrupt.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-x86-interrupt.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-x86-interrupt.md?ref=8ae411e1b342bb1756f620b0c97bfa9e4eef4e47", "patch": "@@ -0,0 +1,7 @@\n+# `abi_x86_interrupt`\n+\n+The tracking issue for this feature is: [#40180]\n+\n+[#40180]: https://github.com/rust-lang/rust/issues/40180\n+\n+------------------------"}, {"sha": "d9d13240fcc3acc9a7ec9e4c27138182152cc215", "filename": "src/libstd/sys_common/poison.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47/src%2Flibstd%2Fsys_common%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47/src%2Flibstd%2Fsys_common%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fpoison.rs?ref=8ae411e1b342bb1756f620b0c97bfa9e4eef4e47", "patch": "@@ -60,10 +60,13 @@ pub struct Guard {\n \n /// A type of error which can be returned whenever a lock is acquired.\n ///\n-/// Both Mutexes and RwLocks are poisoned whenever a thread fails while the lock\n+/// Both [`Mutex`]es and [`RwLock`]s are poisoned whenever a thread fails while the lock\n /// is held. The precise semantics for when a lock is poisoned is documented on\n /// each lock, but once a lock is poisoned then all future acquisitions will\n /// return this error.\n+///\n+/// [`Mutex`]: ../../std/sync/struct.Mutex.html\n+/// [`RwLock`]: ../../std/sync/struct.RwLock.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct PoisonError<T> {\n     guard: T,\n@@ -85,19 +88,26 @@ pub enum TryLockError<T> {\n \n /// A type alias for the result of a lock method which can be poisoned.\n ///\n-/// The `Ok` variant of this result indicates that the primitive was not\n-/// poisoned, and the `Guard` is contained within. The `Err` variant indicates\n-/// that the primitive was poisoned. Note that the `Err` variant *also* carries\n-/// the associated guard, and it can be acquired through the `into_inner`\n+/// The [`Ok`] variant of this result indicates that the primitive was not\n+/// poisoned, and the `Guard` is contained within. The [`Err`] variant indicates\n+/// that the primitive was poisoned. Note that the [`Err`] variant *also* carries\n+/// the associated guard, and it can be acquired through the [`into_inner`]\n /// method.\n+///\n+/// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n+/// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n+/// [`into_inner`]: ../../std/sync/struct.Mutex.html#method.into_inner\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub type LockResult<Guard> = Result<Guard, PoisonError<Guard>>;\n \n /// A type alias for the result of a nonblocking locking method.\n ///\n-/// For more information, see `LockResult`. A `TryLockResult` doesn't\n-/// necessarily hold the associated guard in the `Err` type as the lock may not\n+/// For more information, see [`LockResult`]. A `TryLockResult` doesn't\n+/// necessarily hold the associated guard in the [`Err`] type as the lock may not\n /// have been acquired for other reasons.\n+///\n+/// [`LockResult`]: ../../std/sync/type.LockResult.html\n+/// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub type TryLockResult<Guard> = Result<Guard, TryLockError<Guard>>;\n \n@@ -124,6 +134,11 @@ impl<T> Error for PoisonError<T> {\n \n impl<T> PoisonError<T> {\n     /// Creates a `PoisonError`.\n+    ///\n+    /// This is generally created by methods like [`Mutex::lock`] or [`RwLock::read`].\n+    ///\n+    /// [`Mutex::lock`]: ../../std/sync/struct.Mutex.html#method.lock\n+    /// [`RwLock::read`]: ../../std/sync/struct.RwLock.html#method.read\n     #[stable(feature = \"sync_poison\", since = \"1.2.0\")]\n     pub fn new(guard: T) -> PoisonError<T> {\n         PoisonError { guard: guard }"}, {"sha": "41efb92d450e8c987ccbb38caf94f92e0bd9911f", "filename": "src/test/compile-fail/feature-gate-abi.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi.rs?ref=8ae411e1b342bb1756f620b0c97bfa9e4eef4e47", "patch": "@@ -11,13 +11,15 @@\n // gate-test-intrinsics\n // gate-test-platform_intrinsics\n // gate-test-abi_vectorcall\n+// gate-test-abi_ptx\n \n // Functions\n extern \"rust-intrinsic\" fn f1() {} //~ ERROR intrinsics are subject to change\n extern \"platform-intrinsic\" fn f2() {} //~ ERROR platform intrinsics are experimental\n extern \"vectorcall\" fn f3() {} //~ ERROR vectorcall is experimental and subject to change\n extern \"rust-call\" fn f4() {} //~ ERROR rust-call ABI is subject to change\n extern \"msp430-interrupt\" fn f5() {} //~ ERROR msp430-interrupt ABI is experimental\n+extern \"ptx-kernel\" fn f6() {} //~ ERROR PTX ABIs are experimental and subject to change\n \n // Methods in trait definition\n trait Tr {\n@@ -26,12 +28,14 @@ trait Tr {\n     extern \"vectorcall\" fn m3(); //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn m4(); //~ ERROR rust-call ABI is subject to change\n     extern \"msp430-interrupt\" fn m5(); //~ ERROR msp430-interrupt ABI is experimental\n+    extern \"ptx-kernel\" fn m6(); //~ ERROR PTX ABIs are experimental and subject to change\n \n     extern \"rust-intrinsic\" fn dm1() {} //~ ERROR intrinsics are subject to change\n     extern \"platform-intrinsic\" fn dm2() {} //~ ERROR platform intrinsics are experimental\n     extern \"vectorcall\" fn dm3() {} //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn dm4() {} //~ ERROR rust-call ABI is subject to change\n     extern \"msp430-interrupt\" fn dm5() {} //~ ERROR msp430-interrupt ABI is experimental\n+    extern \"ptx-kernel\" fn dm6() {} //~ ERROR PTX ABIs are experimental and subject to change\n }\n \n struct S;\n@@ -43,6 +47,7 @@ impl Tr for S {\n     extern \"vectorcall\" fn m3() {} //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn m4() {} //~ ERROR rust-call ABI is subject to change\n     extern \"msp430-interrupt\" fn m5() {} //~ ERROR msp430-interrupt ABI is experimental\n+    extern \"ptx-kernel\" fn m6() {} //~ ERROR PTX ABIs are experimental and subject to change\n }\n \n // Methods in inherent impl\n@@ -52,6 +57,7 @@ impl S {\n     extern \"vectorcall\" fn im3() {} //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn im4() {} //~ ERROR rust-call ABI is subject to change\n     extern \"msp430-interrupt\" fn im5() {} //~ ERROR msp430-interrupt ABI is experimental\n+    extern \"ptx-kernel\" fn im6() {} //~ ERROR PTX ABIs are experimental and subject to change\n }\n \n // Function pointer types\n@@ -60,12 +66,14 @@ type A2 = extern \"platform-intrinsic\" fn(); //~ ERROR platform intrinsics are ex\n type A3 = extern \"vectorcall\" fn(); //~ ERROR vectorcall is experimental and subject to change\n type A4 = extern \"rust-call\" fn(); //~ ERROR rust-call ABI is subject to change\n type A5 = extern \"msp430-interrupt\" fn(); //~ ERROR msp430-interrupt ABI is experimental\n+type A6 = extern \"ptx-kernel\" fn (); //~ ERROR PTX ABIs are experimental and subject to change\n \n // Foreign modules\n extern \"rust-intrinsic\" {} //~ ERROR intrinsics are subject to change\n extern \"platform-intrinsic\" {} //~ ERROR platform intrinsics are experimental\n extern \"vectorcall\" {} //~ ERROR vectorcall is experimental and subject to change\n extern \"rust-call\" {} //~ ERROR rust-call ABI is subject to change\n extern \"msp430-interrupt\" {} //~ ERROR msp430-interrupt ABI is experimental\n+extern \"ptx-kernel\" {} //~ ERROR PTX ABIs are experimental and subject to change\n \n fn main() {}"}, {"sha": "2ed971bf7d9701659816e74e8553bfe863cdd9e1", "filename": "src/test/run-make/issue-24445/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47/src%2Ftest%2Frun-make%2Fissue-24445%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47/src%2Ftest%2Frun-make%2Fissue-24445%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-24445%2FMakefile?ref=8ae411e1b342bb1756f620b0c97bfa9e4eef4e47", "patch": "@@ -3,9 +3,9 @@\n ifeq ($(UNAME),Linux)\n all:\n \t$(RUSTC) foo.rs\n-\t$(CC) foo.c -lfoo -L $(TMPDIR) -Wl,--gc-sections -lpthread -o $(TMPDIR)/foo\n+\t$(CC) foo.c -lfoo -L $(TMPDIR) -Wl,--gc-sections -lpthread -ldl -o $(TMPDIR)/foo\n \t$(call RUN,foo)\n-\t$(CC) foo.c -lfoo -L $(TMPDIR) -Wl,--gc-sections -lpthread -pie -fPIC -o $(TMPDIR)/foo\n+\t$(CC) foo.c -lfoo -L $(TMPDIR) -Wl,--gc-sections -lpthread -ldl -pie -fPIC -o $(TMPDIR)/foo\n \t$(call RUN,foo)\n else\n all:"}, {"sha": "3e951c85589f8ddc2f62fb482427c11ac36c6d6e", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae411e1b342bb1756f620b0c97bfa9e4eef4e47/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=8ae411e1b342bb1756f620b0c97bfa9e4eef4e47", "patch": "@@ -167,7 +167,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n \n     // FIXME get this whitelist empty.\n     let whitelist = vec![\n-        \"abi_ptx\", \"simd\",\n+        \"simd\",\n         \"stmt_expr_attributes\",\n         \"cfg_target_thread_local\", \"unwind_attributes\",\n     ];"}]}