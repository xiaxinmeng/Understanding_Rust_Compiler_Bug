{"sha": "7462da5c38db350292d1eae8961ea714232c612d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NjJkYTVjMzhkYjM1MDI5MmQxZWFlODk2MWVhNzE0MjMyYzYxMmQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-10T20:21:18Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-24T22:20:55Z"}, "message": "rustc: use a simpler scheme for plugin registrar symbol names.", "tree": {"sha": "f6a18b835c384d3d17da13274352d402f4f650fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6a18b835c384d3d17da13274352d402f4f650fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7462da5c38db350292d1eae8961ea714232c612d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7462da5c38db350292d1eae8961ea714232c612d", "html_url": "https://github.com/rust-lang/rust/commit/7462da5c38db350292d1eae8961ea714232c612d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7462da5c38db350292d1eae8961ea714232c612d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd6e8d45e183861d44ed91a99f0a50403b2776a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd6e8d45e183861d44ed91a99f0a50403b2776a3", "html_url": "https://github.com/rust-lang/rust/commit/dd6e8d45e183861d44ed91a99f0a50403b2776a3"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "ab9187a835dada660907cf228c7ba9b1eb3035ba", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7462da5c38db350292d1eae8961ea714232c612d/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7462da5c38db350292d1eae8961ea714232c612d/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=7462da5c38db350292d1eae8961ea714232c612d", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n use dep_graph::DepGraph;\n+use hir::def_id::DefIndex;\n+use hir::svh::Svh;\n use lint;\n use middle::cstore::CrateStore;\n use middle::dependency_format;\n@@ -312,6 +314,14 @@ impl Session {\n     pub fn nonzeroing_move_hints(&self) -> bool {\n         self.opts.debugging_opts.enable_nonzeroing_move_hints\n     }\n+\n+    /// Returns the symbol name for the registrar function,\n+    /// given the crate Svh and the function DefIndex.\n+    pub fn generate_plugin_registrar_symbol(&self, svh: &Svh, index: DefIndex)\n+                                            -> String {\n+        format!(\"__rustc_plugin_registrar__{}_{}\", svh, index.as_usize())\n+    }\n+\n     pub fn sysroot<'a>(&'a self) -> &'a Path {\n         match self.opts.maybe_sysroot {\n             Some (ref sysroot) => sysroot,"}, {"sha": "2025045cc8f56f3ac6aced9424af50d3aa9da472", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7462da5c38db350292d1eae8961ea714232c612d/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7462da5c38db350292d1eae8961ea714232c612d/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=7462da5c38db350292d1eae8961ea714232c612d", "patch": "@@ -17,6 +17,7 @@ use cstore::{self, CStore, CrateSource, MetadataBlob};\n use decoder;\n use loader::{self, CratePaths};\n \n+use rustc::hir::def_id::DefIndex;\n use rustc::hir::svh::Svh;\n use rustc::dep_graph::{DepGraph, DepNode};\n use rustc::session::{config, Session};\n@@ -610,9 +611,10 @@ impl<'a> CrateReader<'a> {\n         macros\n     }\n \n-    /// Look for a plugin registrar. Returns library path and symbol name.\n+    /// Look for a plugin registrar. Returns library path, crate\n+    /// SVH and DefIndex of the registrar function.\n     pub fn find_plugin_registrar(&mut self, span: Span, name: &str)\n-                                 -> Option<(PathBuf, String)> {\n+                                 -> Option<(PathBuf, Svh, DefIndex)> {\n         let ekrate = self.read_extension_crate(span, &CrateInfo {\n              name: name.to_string(),\n              ident: name.to_string(),\n@@ -630,12 +632,14 @@ impl<'a> CrateReader<'a> {\n             span_fatal!(self.sess, span, E0456, \"{}\", &message[..]);\n         }\n \n+        let svh = decoder::get_crate_hash(ekrate.metadata.as_slice());\n         let registrar =\n-            decoder::get_plugin_registrar_fn(ekrate.metadata.as_slice())\n-            .map(|id| decoder::get_symbol_from_buf(ekrate.metadata.as_slice(), id));\n+            decoder::get_plugin_registrar_fn(ekrate.metadata.as_slice());\n \n         match (ekrate.dylib.as_ref(), registrar) {\n-            (Some(dylib), Some(reg)) => Some((dylib.to_path_buf(), reg)),\n+            (Some(dylib), Some(reg)) => {\n+                Some((dylib.to_path_buf(), svh, reg))\n+            }\n             (None, Some(_)) => {\n                 span_err!(self.sess, span, E0457,\n                           \"plugin `{}` only found in rlib format, but must be available \\"}, {"sha": "7f79df97852b622f49e7422516c33307f350e961", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7462da5c38db350292d1eae8961ea714232c612d/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7462da5c38db350292d1eae8961ea714232c612d/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=7462da5c38db350292d1eae8961ea714232c612d", "patch": "@@ -644,14 +644,6 @@ pub fn get_symbol(cdata: Cmd, id: DefIndex) -> String {\n     return item_symbol(cdata.lookup_item(id));\n }\n \n-/// If you have a crate_metadata, call get_symbol instead\n-pub fn get_symbol_from_buf(data: &[u8], id: DefIndex) -> String {\n-    let index = load_index(data);\n-    let pos = index.lookup_item(data, id).unwrap();\n-    let doc = reader::doc_at(data, pos as usize).unwrap().doc;\n-    item_symbol(doc)\n-}\n-\n /// Iterates over the language items in the given crate.\n pub fn each_lang_item<F>(cdata: Cmd, mut f: F) -> bool where\n     F: FnMut(DefIndex, usize) -> bool,"}, {"sha": "11e1841f7493e716a47c4508bd5a049954f3f2b8", "filename": "src/librustc_plugin/load.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7462da5c38db350292d1eae8961ea714232c612d/src%2Flibrustc_plugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7462da5c38db350292d1eae8961ea714232c612d/src%2Flibrustc_plugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fload.rs?ref=7462da5c38db350292d1eae8961ea714232c612d", "patch": "@@ -101,7 +101,8 @@ impl<'a> PluginLoader<'a> {\n     fn load_plugin(&mut self, span: Span, name: &str, args: Vec<P<ast::MetaItem>>) {\n         let registrar = self.reader.find_plugin_registrar(span, name);\n \n-        if let Some((lib, symbol)) = registrar {\n+        if let Some((lib, svh, index)) = registrar {\n+            let symbol = self.sess.generate_plugin_registrar_symbol(&svh, index);\n             let fun = self.dylink_registrar(span, lib, symbol);\n             self.plugins.push(PluginRegistrar {\n                 fun: fun,"}, {"sha": "451bfbc83bc1db1b85ec439db687a1fdfc211a64", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7462da5c38db350292d1eae8961ea714232c612d/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7462da5c38db350292d1eae8961ea714232c612d/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=7462da5c38db350292d1eae8961ea714232c612d", "patch": "@@ -2443,6 +2443,12 @@ pub fn exported_name<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                -> String {\n     let id = ccx.tcx().map.as_local_node_id(instance.def).unwrap();\n \n+    if ccx.sess().plugin_registrar_fn.get() == Some(id) {\n+        let svh = &ccx.link_meta().crate_hash;\n+        let idx = instance.def.index;\n+        return ccx.sess().generate_plugin_registrar_symbol(svh, idx);\n+    }\n+\n     match ccx.external_srcs().borrow().get(&id) {\n         Some(&did) => {\n             let sym = ccx.sess().cstore.item_symbol(did);"}]}