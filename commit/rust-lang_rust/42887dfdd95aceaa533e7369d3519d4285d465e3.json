{"sha": "42887dfdd95aceaa533e7369d3519d4285d465e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyODg3ZGZkZDk1YWNlYWE1MzNlNzM2OWQzNTE5ZDQyODVkNDY1ZTM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-26T14:58:52Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-26T14:58:52Z"}, "message": "Remove CodegenCx", "tree": {"sha": "c6eb513cbeb86480df0654411bb196b7318fc2bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6eb513cbeb86480df0654411bb196b7318fc2bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42887dfdd95aceaa533e7369d3519d4285d465e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42887dfdd95aceaa533e7369d3519d4285d465e3", "html_url": "https://github.com/rust-lang/rust/commit/42887dfdd95aceaa533e7369d3519d4285d465e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42887dfdd95aceaa533e7369d3519d4285d465e3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e66f012d7921a409e436ff5b13bd7538e33f9be5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e66f012d7921a409e436ff5b13bd7538e33f9be5", "html_url": "https://github.com/rust-lang/rust/commit/e66f012d7921a409e436ff5b13bd7538e33f9be5"}], "stats": {"total": 66, "additions": 29, "deletions": 37}, "files": [{"sha": "2783f330254b202c56e5e21ccbc700d2d18700b0", "filename": "src/base.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/42887dfdd95aceaa533e7369d3519d4285d465e3/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42887dfdd95aceaa533e7369d3519d4285d465e3/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=42887dfdd95aceaa533e7369d3519d4285d465e3", "patch": "@@ -10,11 +10,13 @@ impl Drop for PrintOnPanic {\n }\n \n pub fn trans_mono_item<'a, 'tcx: 'a>(\n-    cx: &mut CodegenCx<'a, 'tcx, impl Backend>,\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    module: &mut Module<impl Backend>,\n+    caches: &mut Caches,\n+    ccx: &mut crate::constant::ConstantCx,\n     mono_item: MonoItem<'tcx>,\n ) {\n-    let tcx = cx.tcx;\n-    let context = &mut cx.context;\n+    let context = &mut caches.context;\n \n     match mono_item {\n         MonoItem::Fn(inst) => {\n@@ -30,21 +32,20 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n                 | InstanceDef::ClosureOnceShim { .. }\n                 | InstanceDef::CloneShim(_, _) => {\n                     // FIXME fix write_mir_pretty for these instances\n-                    format!(\"{:#?}\", cx.tcx.instance_mir(inst.def)).into_bytes()\n+                    format!(\"{:#?}\", tcx.instance_mir(inst.def)).into_bytes()\n                 }\n                 InstanceDef::Intrinsic(_) => bug!(\"tried to codegen intrinsic\"),\n             };\n             let mir_file_name =\n                 \"target/out/mir/\".to_string() + &format!(\"{:?}\", inst.def_id()).replace('/', \"@\");\n             ::std::fs::write(mir_file_name, mir).unwrap();\n \n-            trans_fn(tcx, cx.module, &mut cx.ccx, context, inst);\n+            trans_fn(tcx, module, ccx, context, inst);\n         }\n         MonoItem::Static(def_id) => {\n-            crate::constant::codegen_static(&mut cx.ccx, def_id);\n+            crate::constant::codegen_static(ccx, def_id);\n         }\n-        MonoItem::GlobalAsm(node_id) => cx\n-            .tcx\n+        MonoItem::GlobalAsm(node_id) => tcx\n             .sess\n             .fatal(&format!(\"Unimplemented global asm mono item {:?}\", node_id)),\n     }"}, {"sha": "5397f5b48716b516152ec0b035ecabfa9ed012e2", "filename": "src/lib.rs", "status": "modified", "additions": 20, "deletions": 29, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/42887dfdd95aceaa533e7369d3519d4285d465e3/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42887dfdd95aceaa533e7369d3519d4285d465e3/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=42887dfdd95aceaa533e7369d3519d4285d465e3", "patch": "@@ -90,8 +90,7 @@ mod prelude {\n     pub use crate::abi::*;\n     pub use crate::base::{trans_operand, trans_place};\n     pub use crate::common::*;\n-\n-    pub use crate::{CodegenCx, ModuleTup};\n+    pub use crate::Caches;\n \n     pub fn should_codegen(sess: &Session) -> bool {\n         //return true;\n@@ -103,20 +102,16 @@ mod prelude {\n use crate::constant::ConstantCx;\n use crate::prelude::*;\n \n-pub struct CodegenCx<'a, 'tcx: 'a, B: Backend + 'static> {\n-    pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    pub module: &'a mut Module<B>,\n-    pub ccx: ConstantCx,\n-\n-    // Cache\n+pub struct Caches {\n     pub context: Context,\n }\n \n-pub struct ModuleTup<T> {\n-    #[allow(dead_code)]\n-    jit: Option<T>,\n-    #[allow(dead_code)]\n-    faerie: Option<T>,\n+impl Caches {\n+    fn new() -> Self {\n+        Caches {\n+            context: Context::new(),\n+        }\n+    }\n }\n \n struct CraneliftCodegenBackend;\n@@ -360,23 +355,18 @@ fn codegen_mono_items<'a, 'tcx: 'a>(\n ) {\n     use std::io::Write;\n \n-    let mut cx = CodegenCx {\n-        tcx,\n-        module,\n-        ccx: ConstantCx::default(),\n-\n-        context: Context::new(),\n-    };\n+    let mut caches = Caches::new();\n+    let mut ccx = ConstantCx::default();\n \n     let mut log = ::std::fs::File::create(\"target/out/log.txt\").unwrap();\n \n     let before = ::std::time::Instant::now();\n \n     for mono_item in mono_items {\n-        let cx = &mut cx;\n-        let res = ::std::panic::catch_unwind(::std::panic::AssertUnwindSafe(move || {\n-            base::trans_mono_item(cx, *mono_item);\n+        let res = ::std::panic::catch_unwind(::std::panic::AssertUnwindSafe(|| {\n+            base::trans_mono_item(tcx, module, &mut caches, &mut ccx, *mono_item);\n         }));\n+\n         if let Err(err) = res {\n             match err.downcast::<NonFatal>() {\n                 Ok(non_fatal) => {\n@@ -388,9 +378,9 @@ fn codegen_mono_items<'a, 'tcx: 'a>(\n         }\n     }\n \n-    maybe_create_entry_wrapper(&mut cx);\n+    maybe_create_entry_wrapper(tcx, module);\n \n-    cx.ccx.finalize(tcx, cx.module);\n+    ccx.finalize(tcx, module);\n \n     let after = ::std::time::Instant::now();\n     println!(\"time: {:?}\", after - before);\n@@ -410,12 +400,13 @@ pub fn __rustc_codegen_backend() -> Box<CodegenBackend> {\n \n /// Create the `main` function which will initialize the rust runtime and call\n /// users main function.\n-fn maybe_create_entry_wrapper(cx: &mut CodegenCx<impl Backend + 'static>) {\n+fn maybe_create_entry_wrapper<'a, 'tcx: 'a>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    module: &mut Module<impl Backend + 'static>,\n+) {\n     use rustc::middle::lang_items::StartFnLangItem;\n     use rustc::session::config::EntryFnType;\n \n-    let tcx = cx.tcx;\n-\n     let (main_def_id, use_start_lang_item) = match *tcx.sess.entry_fn.borrow() {\n         Some((id, _, entry_ty)) => (\n             tcx.hir.local_def_id(id),\n@@ -427,7 +418,7 @@ fn maybe_create_entry_wrapper(cx: &mut CodegenCx<impl Backend + 'static>) {\n         None => return,\n     };\n \n-    create_entry_fn(tcx, cx.module, main_def_id, use_start_lang_item);;\n+    create_entry_fn(tcx, module, main_def_id, use_start_lang_item);;\n \n     fn create_entry_fn<'a, 'tcx: 'a>(\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,"}]}