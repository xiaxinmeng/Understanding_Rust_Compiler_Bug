{"sha": "1e6bd6cb0db5f70cee0509d43615a80a0e1f2311", "node_id": "C_kwDOAAsO6NoAKDFlNmJkNmNiMGRiNWY3MGNlZTA1MDlkNDM2MTVhODBhMGUxZjIzMTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-15T09:49:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-15T09:49:17Z"}, "message": "Auto merge of #14794 - Veykril:inlay-kind-refac, r=Veykril\n\nRestructure InlayHint, no longer derive properties from its kind\n\nCloses https://github.com/rust-lang/rust-analyzer/issues/14595", "tree": {"sha": "6fc9d7a9af7e51655038a70a0a30595c35e93133", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fc9d7a9af7e51655038a70a0a30595c35e93133"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311", "html_url": "https://github.com/rust-lang/rust/commit/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b198815e7fe7b5c4b2a6a5af7219ad0850ee35ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/b198815e7fe7b5c4b2a6a5af7219ad0850ee35ca", "html_url": "https://github.com/rust-lang/rust/commit/b198815e7fe7b5c4b2a6a5af7219ad0850ee35ca"}, {"sha": "edd60f7b0d02e85a9c0ee60620cb3347b37e5fdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/edd60f7b0d02e85a9c0ee60620cb3347b37e5fdf", "html_url": "https://github.com/rust-lang/rust/commit/edd60f7b0d02e85a9c0ee60620cb3347b37e5fdf"}], "stats": {"total": 857, "additions": 443, "deletions": 414}, "files": [{"sha": "292591674191c9712d2268ed7fd847447595e799", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=1e6bd6cb0db5f70cee0509d43615a80a0e1f2311", "patch": "@@ -90,32 +90,34 @@ pub enum AdjustmentHintsMode {\n     PreferPostfix,\n }\n \n-// FIXME: Clean up this mess, the kinds are mainly used for setting different rendering properties in the lsp layer\n-// We should probably turns this into such a property holding struct. Or clean this up in some other form.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum InlayKind {\n+    Adjustment,\n     BindingMode,\n     Chaining,\n     ClosingBrace,\n-    ClosureReturnType,\n+    ClosureCapture,\n+    Discriminant,\n     GenericParamList,\n-    Adjustment,\n-    AdjustmentPostfix,\n     Lifetime,\n-    ClosureCapture,\n     Parameter,\n     Type,\n-    Discriminant,\n-    OpeningParenthesis,\n-    ClosingParenthesis,\n+}\n+\n+#[derive(Debug)]\n+pub enum InlayHintPosition {\n+    Before,\n+    After,\n }\n \n #[derive(Debug)]\n pub struct InlayHint {\n     /// The text range this inlay hint applies to.\n     pub range: TextRange,\n-    /// The kind of this inlay hint. This is used to determine side and padding of the hint for\n-    /// rendering purposes.\n+    pub position: InlayHintPosition,\n+    pub pad_left: bool,\n+    pub pad_right: bool,\n+    /// The kind of this inlay hint.\n     pub kind: InlayKind,\n     /// The actual label to show in the inlay hint.\n     pub label: InlayHintLabel,\n@@ -124,20 +126,26 @@ pub struct InlayHint {\n }\n \n impl InlayHint {\n-    fn closing_paren(range: TextRange) -> InlayHint {\n+    fn closing_paren_after(kind: InlayKind, range: TextRange) -> InlayHint {\n         InlayHint {\n             range,\n-            kind: InlayKind::ClosingParenthesis,\n+            kind,\n             label: InlayHintLabel::from(\")\"),\n             text_edit: None,\n+            position: InlayHintPosition::After,\n+            pad_left: false,\n+            pad_right: false,\n         }\n     }\n-    fn opening_paren(range: TextRange) -> InlayHint {\n+    fn opening_paren_before(kind: InlayKind, range: TextRange) -> InlayHint {\n         InlayHint {\n             range,\n-            kind: InlayKind::OpeningParenthesis,\n+            kind,\n             label: InlayHintLabel::from(\"(\"),\n             text_edit: None,\n+            position: InlayHintPosition::Before,\n+            pad_left: false,\n+            pad_right: false,\n         }\n     }\n }\n@@ -303,13 +311,13 @@ impl InlayHintLabelBuilder<'_> {\n fn label_of_ty(\n     famous_defs @ FamousDefs(sema, _): &FamousDefs<'_, '_>,\n     config: &InlayHintsConfig,\n-    ty: hir::Type,\n+    ty: &hir::Type,\n ) -> Option<InlayHintLabel> {\n     fn rec(\n         sema: &Semantics<'_, RootDatabase>,\n         famous_defs: &FamousDefs<'_, '_>,\n         mut max_length: Option<usize>,\n-        ty: hir::Type,\n+        ty: &hir::Type,\n         label_builder: &mut InlayHintLabelBuilder<'_>,\n         config: &InlayHintsConfig,\n     ) -> Result<(), HirDisplayError> {\n@@ -342,7 +350,7 @@ fn label_of_ty(\n                 label_builder.write_str(LABEL_ITEM)?;\n                 label_builder.end_location_link();\n                 label_builder.write_str(LABEL_MIDDLE2)?;\n-                rec(sema, famous_defs, max_length, ty, label_builder, config)?;\n+                rec(sema, famous_defs, max_length, &ty, label_builder, config)?;\n                 label_builder.write_str(LABEL_END)?;\n                 Ok(())\n             }\n@@ -574,7 +582,8 @@ mod tests {\n         let inlay_hints = analysis.inlay_hints(&config, file_id, None).unwrap();\n         let actual = inlay_hints\n             .into_iter()\n-            .map(|it| (it.range, it.label.to_string()))\n+            // FIXME: We trim the start because some inlay produces leading whitespace which is not properly supported by our annotation extraction\n+            .map(|it| (it.range, it.label.to_string().trim_start().to_owned()))\n             .sorted_by_key(|(range, _)| range.start())\n             .collect::<Vec<_>>();\n         expected.sort_by_key(|(range, _)| range.start());"}, {"sha": "10bee2a6accfe2745052ef88eedef3f01bf60ca9", "filename": "crates/ide/src/inlay_hints/adjustment.rs", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs?ref=1e6bd6cb0db5f70cee0509d43615a80a0e1f2311", "patch": "@@ -3,6 +3,7 @@\n //! let _: u32  = /* <never-to-any> */ loop {};\n //! let _: &u32 = /* &* */ &mut 0;\n //! ```\n+use either::Either;\n use hir::{\n     Adjust, Adjustment, AutoBorrow, HirDisplay, Mutability, OverloadedDeref, PointerCast, Safety,\n     Semantics,\n@@ -16,8 +17,8 @@ use syntax::{\n };\n \n use crate::{\n-    AdjustmentHints, AdjustmentHintsMode, InlayHint, InlayHintLabel, InlayHintsConfig, InlayKind,\n-    InlayTooltip,\n+    AdjustmentHints, AdjustmentHintsMode, InlayHint, InlayHintLabel, InlayHintPosition,\n+    InlayHintsConfig, InlayKind, InlayTooltip,\n };\n \n pub(super) fn hints(\n@@ -63,22 +64,26 @@ pub(super) fn hints(\n         mode_and_needs_parens_for_adjustment_hints(expr, config.adjustment_hints_mode);\n \n     if needs_outer_parens {\n-        acc.push(InlayHint::opening_paren(expr.syntax().text_range()));\n+        acc.push(InlayHint::opening_paren_before(\n+            InlayKind::Adjustment,\n+            expr.syntax().text_range(),\n+        ));\n     }\n \n     if postfix && needs_inner_parens {\n-        acc.push(InlayHint::opening_paren(expr.syntax().text_range()));\n-        acc.push(InlayHint::closing_paren(expr.syntax().text_range()));\n+        acc.push(InlayHint::opening_paren_before(\n+            InlayKind::Adjustment,\n+            expr.syntax().text_range(),\n+        ));\n+        acc.push(InlayHint::closing_paren_after(InlayKind::Adjustment, expr.syntax().text_range()));\n     }\n \n-    let (mut tmp0, mut tmp1);\n-    let iter: &mut dyn Iterator<Item = _> = if postfix {\n-        tmp0 = adjustments.into_iter();\n-        &mut tmp0\n+    let mut iter = if postfix {\n+        Either::Left(adjustments.into_iter())\n     } else {\n-        tmp1 = adjustments.into_iter().rev();\n-        &mut tmp1\n+        Either::Right(adjustments.into_iter().rev())\n     };\n+    let iter: &mut dyn Iterator<Item = _> = iter.as_mut().either(|it| it as _, |it| it as _);\n \n     for Adjustment { source, target, kind } in iter {\n         if source == target {\n@@ -134,7 +139,10 @@ pub(super) fn hints(\n         };\n         acc.push(InlayHint {\n             range: expr.syntax().text_range(),\n-            kind: if postfix { InlayKind::AdjustmentPostfix } else { InlayKind::Adjustment },\n+            pad_left: false,\n+            pad_right: false,\n+            position: if postfix { InlayHintPosition::After } else { InlayHintPosition::Before },\n+            kind: InlayKind::Adjustment,\n             label: InlayHintLabel::simple(\n                 if postfix { format!(\".{}\", text.trim_end()) } else { text.to_owned() },\n                 Some(InlayTooltip::Markdown(format!(\n@@ -148,11 +156,14 @@ pub(super) fn hints(\n         });\n     }\n     if !postfix && needs_inner_parens {\n-        acc.push(InlayHint::opening_paren(expr.syntax().text_range()));\n-        acc.push(InlayHint::closing_paren(expr.syntax().text_range()));\n+        acc.push(InlayHint::opening_paren_before(\n+            InlayKind::Adjustment,\n+            expr.syntax().text_range(),\n+        ));\n+        acc.push(InlayHint::closing_paren_after(InlayKind::Adjustment, expr.syntax().text_range()));\n     }\n     if needs_outer_parens {\n-        acc.push(InlayHint::closing_paren(expr.syntax().text_range()));\n+        acc.push(InlayHint::closing_paren_after(InlayKind::Adjustment, expr.syntax().text_range()));\n     }\n     Some(())\n }"}, {"sha": "3d5122a7cf3e713dac02f8f8f469f10db96ad18e", "filename": "crates/ide/src/inlay_hints/bind_pat.rs", "status": "modified", "additions": 166, "deletions": 237, "changes": 403, "blob_url": "https://github.com/rust-lang/rust/blob/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs?ref=1e6bd6cb0db5f70cee0509d43615a80a0e1f2311", "patch": "@@ -3,7 +3,7 @@\n //! fn f(a: i32, b: i32) -> i32 { a + b }\n //! let _x /* i32 */= f(4, 4);\n //! ```\n-use hir::{Semantics, TypeInfo};\n+use hir::Semantics;\n use ide_db::{base_db::FileId, famous_defs::FamousDefs, RootDatabase};\n \n use itertools::Itertools;\n@@ -14,7 +14,7 @@ use syntax::{\n \n use crate::{\n     inlay_hints::{closure_has_block_body, label_of_ty, ty_to_text_edit},\n-    InlayHint, InlayHintsConfig, InlayKind,\n+    InlayHint, InlayHintPosition, InlayHintsConfig, InlayKind,\n };\n \n pub(super) fn hints(\n@@ -28,103 +28,92 @@ pub(super) fn hints(\n         return None;\n     }\n \n+    let parent = pat.syntax().parent()?;\n+    let type_ascriptable = match_ast! {\n+        match parent {\n+            ast::Param(it) => {\n+                if it.ty().is_some() {\n+                    return None;\n+                }\n+                Some(it.colon_token())\n+            },\n+            ast::LetStmt(it) => {\n+                if config.hide_closure_initialization_hints {\n+                    if let Some(ast::Expr::ClosureExpr(closure)) = it.initializer() {\n+                        if closure_has_block_body(&closure) {\n+                            return None;\n+                        }\n+                    }\n+                }\n+                if it.ty().is_some() {\n+                    return None;\n+                }\n+                Some(it.colon_token())\n+            },\n+            _ => None\n+        }\n+    };\n+\n     let descended = sema.descend_node_into_attributes(pat.clone()).pop();\n     let desc_pat = descended.as_ref().unwrap_or(pat);\n     let ty = sema.type_of_binding_in_pat(desc_pat)?;\n \n-    if should_not_display_type_hint(sema, config, pat, &ty) {\n+    if ty.is_unknown() {\n         return None;\n     }\n \n-    let label = label_of_ty(famous_defs, config, ty.clone())?;\n+    if sema.resolve_bind_pat_to_const(pat).is_some() {\n+        return None;\n+    }\n+\n+    let mut label = label_of_ty(famous_defs, config, &ty)?;\n \n     if config.hide_named_constructor_hints\n         && is_named_constructor(sema, pat, &label.to_string()).is_some()\n     {\n         return None;\n     }\n \n-    let type_annotation_is_valid = desc_pat\n-        .syntax()\n-        .parent()\n-        .map(|it| ast::LetStmt::can_cast(it.kind()) || ast::Param::can_cast(it.kind()))\n-        .unwrap_or(false);\n-    let text_edit = if type_annotation_is_valid {\n+    let text_edit = if let Some(colon_token) = &type_ascriptable {\n         ty_to_text_edit(\n             sema,\n             desc_pat.syntax(),\n             &ty,\n-            pat.syntax().text_range().end(),\n-            String::from(\": \"),\n+            colon_token\n+                .as_ref()\n+                .map_or_else(|| pat.syntax().text_range(), |t| t.text_range())\n+                .end(),\n+            if colon_token.is_some() { String::new() } else { String::from(\": \") },\n         )\n     } else {\n         None\n     };\n \n+    let has_colon = matches!(type_ascriptable, Some(Some(_))) && !config.render_colons;\n+    if !has_colon {\n+        label.prepend_str(\": \");\n+    }\n+\n+    let text_range = match pat.name() {\n+        Some(name) => name.syntax().text_range(),\n+        None => pat.syntax().text_range(),\n+    };\n     acc.push(InlayHint {\n-        range: match pat.name() {\n-            Some(name) => name.syntax().text_range(),\n-            None => pat.syntax().text_range(),\n+        range: match type_ascriptable {\n+            Some(Some(t)) => text_range.cover(t.text_range()),\n+            _ => text_range,\n         },\n         kind: InlayKind::Type,\n         label,\n         text_edit,\n+        position: InlayHintPosition::Before,\n+        pad_left: !has_colon,\n+        pad_right: false,\n     });\n \n     Some(())\n }\n \n-fn should_not_display_type_hint(\n-    sema: &Semantics<'_, RootDatabase>,\n-    config: &InlayHintsConfig,\n-    bind_pat: &ast::IdentPat,\n-    pat_ty: &hir::Type,\n-) -> bool {\n-    let db = sema.db;\n-\n-    if pat_ty.is_unknown() {\n-        return true;\n-    }\n-\n-    if sema.resolve_bind_pat_to_const(bind_pat).is_some() {\n-        return true;\n-    }\n-\n-    for node in bind_pat.syntax().ancestors() {\n-        match_ast! {\n-            match node {\n-                ast::LetStmt(it) => {\n-                    if config.hide_closure_initialization_hints {\n-                        if let Some(ast::Expr::ClosureExpr(closure)) = it.initializer() {\n-                            if closure_has_block_body(&closure) {\n-                                return true;\n-                            }\n-                        }\n-                    }\n-                    return it.ty().is_some()\n-                },\n-                // FIXME: We might wanna show type hints in parameters for non-top level patterns as well\n-                ast::Param(it) => return it.ty().is_some(),\n-                ast::MatchArm(_) => return pat_is_enum_variant(db, bind_pat, pat_ty),\n-                ast::LetExpr(_) => return pat_is_enum_variant(db, bind_pat, pat_ty),\n-                ast::IfExpr(_) => return false,\n-                ast::WhileExpr(_) => return false,\n-                ast::ForExpr(it) => {\n-                    // We *should* display hint only if user provided \"in {expr}\" and we know the type of expr (and it's not unit).\n-                    // Type of expr should be iterable.\n-                    return it.in_token().is_none() ||\n-                        it.iterable()\n-                            .and_then(|iterable_expr| sema.type_of_expr(&iterable_expr))\n-                            .map(TypeInfo::original)\n-                            .map_or(true, |iterable_ty| iterable_ty.is_unknown() || iterable_ty.is_unit())\n-                },\n-                _ => (),\n-            }\n-        }\n-    }\n-    false\n-}\n-\n fn is_named_constructor(\n     sema: &Semantics<'_, RootDatabase>,\n     pat: &ast::IdentPat,\n@@ -178,19 +167,6 @@ fn is_named_constructor(\n     (ctor_name == ty_name).then_some(())\n }\n \n-fn pat_is_enum_variant(db: &RootDatabase, bind_pat: &ast::IdentPat, pat_ty: &hir::Type) -> bool {\n-    if let Some(hir::Adt::Enum(enum_data)) = pat_ty.as_adt() {\n-        let pat_text = bind_pat.to_string();\n-        enum_data\n-            .variants(db)\n-            .into_iter()\n-            .map(|variant| variant.name(db).to_smol_str())\n-            .any(|enum_name| enum_name == pat_text)\n-    } else {\n-        false\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     // This module also contains tests for super::closure_ret\n@@ -218,7 +194,7 @@ mod tests {\n fn foo(a: i32, b: i32) -> i32 { a + b }\n fn main() {\n     let _x = foo(4, 4);\n-      //^^ i32\n+      //^^ : i32\n }\"#,\n         );\n     }\n@@ -230,17 +206,17 @@ fn main() {\n //- minicore: option\n fn main() {\n     let ref foo @ bar @ ref mut baz = 0;\n-          //^^^ &i32\n-                //^^^ i32\n-                              //^^^ &mut i32\n+          //^^^ : &i32\n+                //^^^ : i32\n+                              //^^^ : &mut i32\n     let [x @ ..] = [0];\n-       //^ [i32; 1]\n+       //^ : [i32; 1]\n     if let x @ Some(_) = Some(0) {}\n-         //^ Option<i32>\n+         //^ : Option<i32>\n     let foo @ (bar, baz) = (3, 3);\n-      //^^^ (i32, i32)\n-             //^^^ i32\n-                  //^^^ i32\n+      //^^^ : (i32, i32)\n+             //^^^ : i32\n+                  //^^^ : i32\n }\"#,\n         );\n     }\n@@ -253,11 +229,11 @@ struct Test<K, T = u8> { k: K, t: T }\n \n fn main() {\n     let zz = Test { t: 23u8, k: 33 };\n-      //^^ Test<i32>\n+      //^^ : Test<i32>\n     let zz_ref = &zz;\n-      //^^^^^^ &Test<i32>\n+      //^^^^^^ : &Test<i32>\n     let test = || zz;\n-      //^^^^ impl FnOnce() -> Test<i32>\n+      //^^^^ : impl FnOnce() -> Test<i32>\n }\"#,\n         );\n     }\n@@ -285,10 +261,10 @@ impl<T> Iterator for SomeIter<T> {\n \n fn main() {\n     let mut some_iter = SomeIter::new();\n-          //^^^^^^^^^ SomeIter<Take<Repeat<i32>>>\n+          //^^^^^^^^^ : SomeIter<Take<Repeat<i32>>>\n       some_iter.push(iter::repeat(2).take(2));\n     let iter_of_iters = some_iter.take(2);\n-      //^^^^^^^^^^^^^ impl Iterator<Item = impl Iterator<Item = i32>>\n+      //^^^^^^^^^^^^^ : impl Iterator<Item = impl Iterator<Item = i32>>\n }\n \"#,\n         );\n@@ -347,7 +323,7 @@ fn main(a: SliceIter<'_, Container>) {\n \n             pub fn quux<T: Foo>() -> T::Bar {\n                 let y = Default::default();\n-                  //^ <T as Foo>::Bar\n+                  //^ : <T as Foo>::Bar\n \n                 y\n             }\n@@ -371,21 +347,21 @@ fn foo7() -> *const (impl Fn(f64, f64) -> u32 + Sized) { loop {} }\n \n fn main() {\n     let foo = foo();\n-     // ^^^ impl Fn()\n+     // ^^^ : impl Fn()\n     let foo = foo1();\n-     // ^^^ impl Fn(f64)\n+     // ^^^ : impl Fn(f64)\n     let foo = foo2();\n-     // ^^^ impl Fn(f64, f64)\n+     // ^^^ : impl Fn(f64, f64)\n     let foo = foo3();\n-     // ^^^ impl Fn(f64, f64) -> u32\n+     // ^^^ : impl Fn(f64, f64) -> u32\n     let foo = foo4();\n-     // ^^^ &dyn Fn(f64, f64) -> u32\n+     // ^^^ : &dyn Fn(f64, f64) -> u32\n     let foo = foo5();\n-     // ^^^ &dyn Fn(&dyn Fn(f64, f64) -> u32, f64) -> u32\n+     // ^^^ : &dyn Fn(&dyn Fn(f64, f64) -> u32, f64) -> u32\n     let foo = foo6();\n-     // ^^^ impl Fn(f64, f64) -> u32\n+     // ^^^ : impl Fn(f64, f64) -> u32\n     let foo = foo7();\n-     // ^^^ *const impl Fn(f64, f64) -> u32\n+     // ^^^ : *const impl Fn(f64, f64) -> u32\n }\n \"#,\n         )\n@@ -408,9 +384,9 @@ fn main() {\n             let foo = foo();\n             let foo = foo1();\n             let foo = foo2();\n-             // ^^^ impl Fn(f64, f64)\n+             // ^^^ : impl Fn(f64, f64)\n             let foo = foo3();\n-             // ^^^ impl Fn(f64, f64) -> u32\n+             // ^^^ : impl Fn(f64, f64) -> u32\n             let foo = foo4();\n             let foo = foo5();\n             let foo = foo6();\n@@ -451,25 +427,25 @@ fn foo10() -> *const (impl Fn() + Sized + ?Sized) { loop {} }\n \n fn main() {\n     let foo = foo1();\n-    //  ^^^ *const impl Fn()\n+    //  ^^^ : *const impl Fn()\n     let foo = foo2();\n-    //  ^^^ *const impl Fn()\n+    //  ^^^ : *const impl Fn()\n     let foo = foo3();\n-    //  ^^^ *const (impl Fn() + ?Sized)\n+    //  ^^^ : *const (impl Fn() + ?Sized)\n     let foo = foo4();\n-    //  ^^^ *const impl Fn()\n+    //  ^^^ : *const impl Fn()\n     let foo = foo5();\n-    //  ^^^ *const (impl Fn() + ?Sized)\n+    //  ^^^ : *const (impl Fn() + ?Sized)\n     let foo = foo6();\n-    //  ^^^ *const (impl Fn() + Trait)\n+    //  ^^^ : *const (impl Fn() + Trait)\n     let foo = foo7();\n-    //  ^^^ *const (impl Fn() + Trait)\n+    //  ^^^ : *const (impl Fn() + Trait)\n     let foo = foo8();\n-    //  ^^^ *const (impl Fn() + Trait + ?Sized)\n+    //  ^^^ : *const (impl Fn() + Trait + ?Sized)\n     let foo = foo9();\n-    //  ^^^ *const (impl Fn() -> u8 + ?Sized)\n+    //  ^^^ : *const (impl Fn() -> u8 + ?Sized)\n     let foo = foo10();\n-    //  ^^^ *const impl Fn()\n+    //  ^^^ : *const impl Fn()\n }\n \"#,\n         )\n@@ -520,24 +496,24 @@ fn main() {\n     struct InnerStruct {}\n \n     let test = 54;\n-      //^^^^ i32\n+      //^^^^ : i32\n     let test: i32 = 33;\n     let mut test = 33;\n-          //^^^^ i32\n+          //^^^^ : i32\n     let _ = 22;\n     let test = \"test\";\n-      //^^^^ &str\n+      //^^^^ : &str\n     let test = InnerStruct {};\n-      //^^^^ InnerStruct\n+      //^^^^ : InnerStruct\n \n     let test = unresolved();\n \n     let test = (42, 'a');\n-      //^^^^ (i32, char)\n-    let (a,    (b,     (c,)) = (2, (3, (9.2,));\n-       //^ i32  ^ i32   ^ f64\n+      //^^^^ : (i32, char)\n+    let (a,      (b,       (c,)) = (2, (3, (9.2,));\n+       //^ : i32  ^ : i32   ^ : f64\n     let &x = &92;\n-       //^ i32\n+       //^ : i32\n }\"#,\n         );\n     }\n@@ -551,22 +527,22 @@ struct Test { a: Option<u32>, b: u8 }\n \n fn main() {\n     let test = Some(Test { a: Some(3), b: 1 });\n-      //^^^^ Option<Test>\n+      //^^^^ : Option<Test>\n     if let None = &test {};\n     if let test = &test {};\n-         //^^^^ &Option<Test>\n+         //^^^^ : &Option<Test>\n     if let Some(test) = &test {};\n-              //^^^^ &Test\n-    if let Some(Test { a,             b }) = &test {};\n-                     //^ &Option<u32> ^ &u8\n-    if let Some(Test { a: x,             b: y }) = &test {};\n-                        //^ &Option<u32>    ^ &u8\n-    if let Some(Test { a: Some(x),  b: y }) = &test {};\n-                             //^ &u32  ^ &u8\n+              //^^^^ : &Test\n+    if let Some(Test { a,               b }) = &test {};\n+                     //^ : &Option<u32> ^ : &u8\n+    if let Some(Test { a: x,               b: y }) = &test {};\n+                        //^ : &Option<u32>    ^ : &u8\n+    if let Some(Test { a: Some(x),    b: y }) = &test {};\n+                             //^ : &u32  ^ : &u8\n     if let Some(Test { a: None,  b: y }) = &test {};\n-                                  //^ &u8\n+                                  //^ : &u8\n     if let Some(Test { b: y, .. }) = &test {};\n-                        //^ &u8\n+                        //^ : &u8\n     if test == None {}\n }\"#,\n         );\n@@ -581,9 +557,9 @@ struct Test { a: Option<u32>, b: u8 }\n \n fn main() {\n     let test = Some(Test { a: Some(3), b: 1 });\n-      //^^^^ Option<Test>\n-    while let Some(Test { a: Some(x),  b: y }) = &test {};\n-                                //^ &u32  ^ &u8\n+      //^^^^ : Option<Test>\n+    while let Some(Test { a: Some(x),    b: y }) = &test {};\n+                                //^ : &u32  ^ : &u8\n }\"#,\n         );\n     }\n@@ -599,9 +575,9 @@ fn main() {\n     match Some(Test { a: Some(3), b: 1 }) {\n         None => (),\n         test => (),\n-      //^^^^ Option<Test>\n-        Some(Test { a: Some(x), b: y }) => (),\n-                          //^ u32  ^ u8\n+      //^^^^ : Option<Test>\n+        Some(Test { a: Some(x),   b: y }) => (),\n+                          //^ : u32  ^ : u8\n         _ => {}\n     }\n }\"#,\n@@ -633,12 +609,12 @@ impl<T> Iterator for IntoIter<T> {\n \n fn main() {\n     let mut data = Vec::new();\n-          //^^^^ Vec<&str>\n+          //^^^^ : Vec<&str>\n     data.push(\"foo\");\n     for i in data {\n-      //^ &str\n+      //^ : &str\n       let z = i;\n-        //^ &str\n+        //^ : &str\n     }\n }\n \"#,\n@@ -663,11 +639,11 @@ auto trait Sync {}\n fn main() {\n     // The block expression wrapping disables the constructor hint hiding logic\n     let _v = { Vec::<Box<&(dyn Display + Sync)>>::new() };\n-      //^^ Vec<Box<&(dyn Display + Sync)>>\n+      //^^ : Vec<Box<&(dyn Display + Sync)>>\n     let _v = { Vec::<Box<*const (dyn Display + Sync)>>::new() };\n-      //^^ Vec<Box<*const (dyn Display + Sync)>>\n+      //^^ : Vec<Box<*const (dyn Display + Sync)>>\n     let _v = { Vec::<Box<dyn Display + Sync>>::new() };\n-      //^^ Vec<Box<dyn Display + Sync>>\n+      //^^ : Vec<Box<dyn Display + Sync>>\n }\n \"#,\n         );\n@@ -691,14 +667,14 @@ impl Iterator for MyIter {\n \n fn main() {\n     let _x = MyIter;\n-      //^^ MyIter\n+      //^^ : MyIter\n     let _x = iter::repeat(0);\n-      //^^ impl Iterator<Item = i32>\n+      //^^ : impl Iterator<Item = i32>\n     fn generic<T: Clone>(t: T) {\n         let _x = iter::repeat(t);\n-          //^^ impl Iterator<Item = T>\n+          //^^ : impl Iterator<Item = T>\n         let _chained = iter::repeat(t).take(10);\n-          //^^^^^^^^ impl Iterator<Item = T>\n+          //^^^^^^^^ : impl Iterator<Item = T>\n     }\n }\n \"#,\n@@ -762,20 +738,20 @@ fn main() {\n     let tuple_struct = TupleStruct();\n \n     let generic0 = Generic::new();\n-    //  ^^^^^^^^ Generic<i32>\n+    //  ^^^^^^^^ : Generic<i32>\n     let generic1 = Generic(0);\n-    //  ^^^^^^^^ Generic<i32>\n+    //  ^^^^^^^^ : Generic<i32>\n     let generic2 = Generic::<i32>::new();\n     let generic3 = <Generic<i32>>::new();\n     let generic4 = Generic::<i32>(0);\n \n \n     let option = Some(0);\n-    //  ^^^^^^ Option<i32>\n+    //  ^^^^^^ : Option<i32>\n     let func = times2;\n-    //  ^^^^ fn times2(i32) -> i32\n+    //  ^^^^ : fn times2(i32) -> i32\n     let closure = |x: i32| x * 2;\n-    //  ^^^^^^^ impl Fn(i32) -> i32\n+    //  ^^^^^^^ : impl Fn(i32) -> i32\n }\n \n fn fallible() -> ControlFlow<()> {\n@@ -813,72 +789,25 @@ impl Generic<i32> {\n \n fn main() {\n     let strukt = Struct::new();\n-     // ^^^^^^ Struct\n+     // ^^^^^^ : Struct\n     let tuple_struct = TupleStruct();\n-     // ^^^^^^^^^^^^ TupleStruct\n+     // ^^^^^^^^^^^^ : TupleStruct\n     let generic0 = Generic::new();\n-     // ^^^^^^^^ Generic<i32>\n+     // ^^^^^^^^ : Generic<i32>\n     let generic1 = Generic::<i32>::new();\n-     // ^^^^^^^^ Generic<i32>\n+     // ^^^^^^^^ : Generic<i32>\n     let generic2 = <Generic<i32>>::new();\n-     // ^^^^^^^^ Generic<i32>\n+     // ^^^^^^^^ : Generic<i32>\n }\n \n fn fallible() -> ControlFlow<()> {\n     let strukt = Struct::try_new()?;\n-     // ^^^^^^ Struct\n+     // ^^^^^^ : Struct\n }\n \"#,\n         );\n     }\n \n-    #[test]\n-    fn closures() {\n-        check(\n-            r#\"\n-fn main() {\n-    let mut start = 0;\n-          //^^^^^ i32\n-    (0..2).for_each(|increment      | { start += increment; });\n-                   //^^^^^^^^^ i32\n-\n-    let multiply =\n-      //^^^^^^^^ impl Fn(i32, i32) -> i32\n-      | a,     b| a * b\n-      //^ i32  ^ i32\n-\n-    ;\n-\n-    let _: i32 = multiply(1,  2);\n-                        //^ a ^ b\n-    let multiply_ref = &multiply;\n-      //^^^^^^^^^^^^ &impl Fn(i32, i32) -> i32\n-\n-    let return_42 = || 42;\n-      //^^^^^^^^^ impl Fn() -> i32\n-      || { 42 };\n-    //^^ i32\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn return_type_hints_for_closure_without_block() {\n-        check_with_config(\n-            InlayHintsConfig {\n-                closure_return_type_hints: ClosureReturnTypeHints::Always,\n-                ..DISABLED_CONFIG\n-            },\n-            r#\"\n-fn main() {\n-    let a = || { 0 };\n-          //^^ i32\n-    let b = || 0;\n-          //^^ i32\n-}\"#,\n-        );\n-    }\n-\n     #[test]\n     fn closure_style() {\n         check_with_config(\n@@ -887,15 +816,15 @@ fn main() {\n //- minicore: fn\n fn main() {\n     let x = || 2;\n-      //^ impl Fn() -> i32\n+      //^ : impl Fn() -> i32\n     let y = |t: i32| x() + t;\n-      //^ impl Fn(i32) -> i32\n+      //^ : impl Fn(i32) -> i32\n     let mut t = 5;\n-          //^ i32\n+          //^ : i32\n     let z = |k: i32| { t += k; };\n-      //^ impl FnMut(i32)\n+      //^ : impl FnMut(i32)\n     let p = (y, z);\n-      //^ (impl Fn(i32) -> i32, impl FnMut(i32))\n+      //^ : (impl Fn(i32) -> i32, impl FnMut(i32))\n }\n             \"#,\n         );\n@@ -909,15 +838,15 @@ fn main() {\n //- minicore: fn\n fn main() {\n     let x = || 2;\n-      //^ || -> i32\n+      //^ : || -> i32\n     let y = |t: i32| x() + t;\n-      //^ |i32| -> i32\n+      //^ : |i32| -> i32\n     let mut t = 5;\n-          //^ i32\n+          //^ : i32\n     let z = |k: i32| { t += k; };\n-      //^ |i32| -> ()\n+      //^ : |i32| -> ()\n     let p = (y, z);\n-      //^ (|i32| -> i32, |i32| -> ())\n+      //^ : (|i32| -> i32, |i32| -> ())\n }\n             \"#,\n         );\n@@ -931,15 +860,15 @@ fn main() {\n //- minicore: fn\n fn main() {\n     let x = || 2;\n-      //^ {closure#0}\n+      //^ : {closure#0}\n     let y = |t: i32| x() + t;\n-      //^ {closure#1}\n+      //^ : {closure#1}\n     let mut t = 5;\n-          //^ i32\n+          //^ : i32\n     let z = |k: i32| { t += k; };\n-      //^ {closure#2}\n+      //^ : {closure#2}\n     let p = (y, z);\n-      //^ ({closure#1}, {closure#2})\n+      //^ : ({closure#1}, {closure#2})\n }\n             \"#,\n         );\n@@ -953,15 +882,15 @@ fn main() {\n //- minicore: fn\n fn main() {\n     let x = || 2;\n-      //^ \u2026\n+      //^ : \u2026\n     let y = |t: i32| x() + t;\n-      //^ \u2026\n+      //^ : \u2026\n     let mut t = 5;\n-          //^ i32\n+          //^ : i32\n     let z = |k: i32| { t += k; };\n-      //^ \u2026\n+      //^ : \u2026\n     let p = (y, z);\n-      //^ (\u2026, \u2026)\n+      //^ : (\u2026, \u2026)\n }\n             \"#,\n         );\n@@ -981,24 +910,24 @@ fn main() {\n     let multiple_2 = |x: i32| { x * 2 };\n \n     let multiple_2 = |x: i32| x * 2;\n-    //  ^^^^^^^^^^ impl Fn(i32) -> i32\n+    //  ^^^^^^^^^^ : impl Fn(i32) -> i32\n \n     let (not) = (|x: bool| { !x });\n-    //   ^^^ impl Fn(bool) -> bool\n+    //   ^^^ : impl Fn(bool) -> bool\n \n     let (is_zero, _b) = (|x: usize| { x == 0 }, false);\n-    //   ^^^^^^^ impl Fn(usize) -> bool\n-    //            ^^ bool\n+    //   ^^^^^^^ : impl Fn(usize) -> bool\n+    //            ^^ : bool\n \n     let plus_one = |x| { x + 1 };\n-    //              ^ u8\n+    //              ^ : u8\n     foo(plus_one);\n \n     let add_mul = bar(|x: u8| { x + 1 });\n-    //  ^^^^^^^ impl FnOnce(u8) -> u8 + ?Sized\n+    //  ^^^^^^^ : impl FnOnce(u8) -> u8 + ?Sized\n \n     let closure = if let Some(6) = add_mul(2).checked_sub(1) {\n-    //  ^^^^^^^ fn(i32) -> i32\n+    //  ^^^^^^^ : fn(i32) -> i32\n         |x: i32| { x * 2 }\n     } else {\n         |x: i32| { x * 3 }\n@@ -1025,11 +954,11 @@ struct VeryLongOuterName<T>(T);\n \n fn main() {\n     let a = Smol(0u32);\n-      //^ Smol<u32>\n+      //^ : Smol<u32>\n     let b = VeryLongOuterName(0usize);\n-      //^ VeryLongOuterName<\u2026>\n+      //^ : VeryLongOuterName<\u2026>\n     let c = Smol(Smol(0u32))\n-      //^ Smol<Smol<\u2026>>\n+      //^ : Smol<Smol<\u2026>>\n }\"#,\n         );\n     }"}, {"sha": "343cf17e50e0c6d58eb716f094d33416764d886f", "filename": "crates/ide/src/inlay_hints/binding_mode.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints%2Fbinding_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints%2Fbinding_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbinding_mode.rs?ref=1e6bd6cb0db5f70cee0509d43615a80a0e1f2311", "patch": "@@ -7,7 +7,7 @@ use ide_db::RootDatabase;\n \n use syntax::ast::{self, AstNode};\n \n-use crate::{InlayHint, InlayHintsConfig, InlayKind};\n+use crate::{InlayHint, InlayHintPosition, InlayHintsConfig, InlayKind};\n \n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n@@ -54,6 +54,9 @@ pub(super) fn hints(\n             kind: InlayKind::BindingMode,\n             label: r.to_string().into(),\n             text_edit: None,\n+            position: InlayHintPosition::Before,\n+            pad_left: false,\n+            pad_right: mut_reference,\n         });\n     });\n     match pat {\n@@ -69,11 +72,20 @@ pub(super) fn hints(\n                 kind: InlayKind::BindingMode,\n                 label: bm.to_string().into(),\n                 text_edit: None,\n+                position: InlayHintPosition::Before,\n+                pad_left: false,\n+                pad_right: true,\n             });\n         }\n         ast::Pat::OrPat(pat) if !pattern_adjustments.is_empty() && outer_paren_pat.is_none() => {\n-            acc.push(InlayHint::opening_paren(pat.syntax().text_range()));\n-            acc.push(InlayHint::closing_paren(pat.syntax().text_range()));\n+            acc.push(InlayHint::opening_paren_before(\n+                InlayKind::BindingMode,\n+                pat.syntax().text_range(),\n+            ));\n+            acc.push(InlayHint::closing_paren_after(\n+                InlayKind::BindingMode,\n+                pat.syntax().text_range(),\n+            ));\n         }\n         _ => (),\n     }"}, {"sha": "cd1ac1e55e8b27e8f54b604c76c2aeb48a27cd98", "filename": "crates/ide/src/inlay_hints/chaining.rs", "status": "modified", "additions": 54, "deletions": 3, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs?ref=1e6bd6cb0db5f70cee0509d43615a80a0e1f2311", "patch": "@@ -5,7 +5,7 @@ use syntax::{\n     Direction, NodeOrToken, SyntaxKind, T,\n };\n \n-use crate::{FileId, InlayHint, InlayHintsConfig, InlayKind};\n+use crate::{FileId, InlayHint, InlayHintPosition, InlayHintsConfig, InlayKind};\n \n use super::label_of_ty;\n \n@@ -60,8 +60,11 @@ pub(super) fn hints(\n             acc.push(InlayHint {\n                 range: expr.syntax().text_range(),\n                 kind: InlayKind::Chaining,\n-                label: label_of_ty(famous_defs, config, ty)?,\n+                label: label_of_ty(famous_defs, config, &ty)?,\n                 text_edit: None,\n+                position: InlayHintPosition::After,\n+                pad_left: true,\n+                pad_right: false,\n             });\n         }\n     }\n@@ -104,6 +107,9 @@ fn main() {\n                 [\n                     InlayHint {\n                         range: 147..172,\n+                        position: After,\n+                        pad_left: true,\n+                        pad_right: false,\n                         kind: Chaining,\n                         label: [\n                             \"\",\n@@ -125,6 +131,9 @@ fn main() {\n                     },\n                     InlayHint {\n                         range: 147..154,\n+                        position: After,\n+                        pad_left: true,\n+                        pad_right: false,\n                         kind: Chaining,\n                         label: [\n                             \"\",\n@@ -191,6 +200,9 @@ fn main() {\n                 [\n                     InlayHint {\n                         range: 143..190,\n+                        position: After,\n+                        pad_left: true,\n+                        pad_right: false,\n                         kind: Chaining,\n                         label: [\n                             \"\",\n@@ -212,6 +224,9 @@ fn main() {\n                     },\n                     InlayHint {\n                         range: 143..179,\n+                        position: After,\n+                        pad_left: true,\n+                        pad_right: false,\n                         kind: Chaining,\n                         label: [\n                             \"\",\n@@ -262,6 +277,9 @@ fn main() {\n                 [\n                     InlayHint {\n                         range: 143..190,\n+                        position: After,\n+                        pad_left: true,\n+                        pad_right: false,\n                         kind: Chaining,\n                         label: [\n                             \"\",\n@@ -283,6 +301,9 @@ fn main() {\n                     },\n                     InlayHint {\n                         range: 143..179,\n+                        position: After,\n+                        pad_left: true,\n+                        pad_right: false,\n                         kind: Chaining,\n                         label: [\n                             \"\",\n@@ -334,6 +355,9 @@ fn main() {\n                 [\n                     InlayHint {\n                         range: 246..283,\n+                        position: After,\n+                        pad_left: true,\n+                        pad_right: false,\n                         kind: Chaining,\n                         label: [\n                             \"\",\n@@ -368,6 +392,9 @@ fn main() {\n                     },\n                     InlayHint {\n                         range: 246..265,\n+                        position: After,\n+                        pad_left: true,\n+                        pad_right: false,\n                         kind: Chaining,\n                         label: [\n                             \"\",\n@@ -434,6 +461,9 @@ fn main() {\n                 [\n                     InlayHint {\n                         range: 174..241,\n+                        position: After,\n+                        pad_left: true,\n+                        pad_right: false,\n                         kind: Chaining,\n                         label: [\n                             \"impl \",\n@@ -468,6 +498,9 @@ fn main() {\n                     },\n                     InlayHint {\n                         range: 174..224,\n+                        position: After,\n+                        pad_left: true,\n+                        pad_right: false,\n                         kind: Chaining,\n                         label: [\n                             \"impl \",\n@@ -502,6 +535,9 @@ fn main() {\n                     },\n                     InlayHint {\n                         range: 174..206,\n+                        position: After,\n+                        pad_left: true,\n+                        pad_right: false,\n                         kind: Chaining,\n                         label: [\n                             \"impl \",\n@@ -536,6 +572,9 @@ fn main() {\n                     },\n                     InlayHint {\n                         range: 174..189,\n+                        position: After,\n+                        pad_left: true,\n+                        pad_right: false,\n                         kind: Chaining,\n                         label: [\n                             \"&mut \",\n@@ -586,9 +625,12 @@ fn main() {\n                 [\n                     InlayHint {\n                         range: 124..130,\n+                        position: Before,\n+                        pad_left: true,\n+                        pad_right: false,\n                         kind: Type,\n                         label: [\n-                            \"\",\n+                            \": \",\n                             InlayHintLabelPart {\n                                 text: \"Struct\",\n                                 linked_location: Some(\n@@ -616,6 +658,9 @@ fn main() {\n                     },\n                     InlayHint {\n                         range: 145..185,\n+                        position: After,\n+                        pad_left: true,\n+                        pad_right: false,\n                         kind: Chaining,\n                         label: [\n                             \"\",\n@@ -637,6 +682,9 @@ fn main() {\n                     },\n                     InlayHint {\n                         range: 145..168,\n+                        position: After,\n+                        pad_left: true,\n+                        pad_right: false,\n                         kind: Chaining,\n                         label: [\n                             \"\",\n@@ -658,6 +706,9 @@ fn main() {\n                     },\n                     InlayHint {\n                         range: 222..228,\n+                        position: Before,\n+                        pad_left: false,\n+                        pad_right: true,\n                         kind: Parameter,\n                         label: [\n                             InlayHintLabelPart {"}, {"sha": "cd5a815abb0c4df10c2d5648125beea36a60a948", "filename": "crates/ide/src/inlay_hints/closing_brace.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs?ref=1e6bd6cb0db5f70cee0509d43615a80a0e1f2311", "patch": "@@ -10,7 +10,7 @@ use syntax::{\n     match_ast, SyntaxKind, SyntaxNode, T,\n };\n \n-use crate::{FileId, InlayHint, InlayHintLabel, InlayHintsConfig, InlayKind};\n+use crate::{FileId, InlayHint, InlayHintLabel, InlayHintPosition, InlayHintsConfig, InlayKind};\n \n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n@@ -113,6 +113,9 @@ pub(super) fn hints(\n         kind: InlayKind::ClosingBrace,\n         label: InlayHintLabel::simple(label, None, linked_location),\n         text_edit: None,\n+        position: InlayHintPosition::After,\n+        pad_left: true,\n+        pad_right: false,\n     });\n \n     None"}, {"sha": "3ee118f6e8c7955c5f398d2f8e4116550ca98c61", "filename": "crates/ide/src/inlay_hints/closure_captures.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_captures.rs?ref=1e6bd6cb0db5f70cee0509d43615a80a0e1f2311", "patch": "@@ -5,7 +5,7 @@ use ide_db::{base_db::FileId, famous_defs::FamousDefs};\n use syntax::ast::{self, AstNode};\n use text_edit::{TextRange, TextSize};\n \n-use crate::{InlayHint, InlayHintLabel, InlayHintsConfig, InlayKind};\n+use crate::{InlayHint, InlayHintLabel, InlayHintPosition, InlayHintsConfig, InlayKind};\n \n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n@@ -35,6 +35,9 @@ pub(super) fn hints(\n                 kind: InlayKind::ClosureCapture,\n                 label: InlayHintLabel::simple(\"move\", None, None),\n                 text_edit: None,\n+                position: InlayHintPosition::After,\n+                pad_left: false,\n+                pad_right: false,\n             });\n             range\n         }\n@@ -44,6 +47,9 @@ pub(super) fn hints(\n         kind: InlayKind::ClosureCapture,\n         label: InlayHintLabel::from(\"(\"),\n         text_edit: None,\n+        position: InlayHintPosition::After,\n+        pad_left: false,\n+        pad_right: false,\n     });\n     let last = captures.len() - 1;\n     for (idx, capture) in captures.into_iter().enumerate() {\n@@ -71,6 +77,9 @@ pub(super) fn hints(\n                 source.name().and_then(|name| sema.original_range_opt(name.syntax())),\n             ),\n             text_edit: None,\n+            position: InlayHintPosition::After,\n+            pad_left: false,\n+            pad_right: false,\n         });\n \n         if idx != last {\n@@ -79,6 +88,9 @@ pub(super) fn hints(\n                 kind: InlayKind::ClosureCapture,\n                 label: InlayHintLabel::simple(\", \", None, None),\n                 text_edit: None,\n+                position: InlayHintPosition::After,\n+                pad_left: false,\n+                pad_right: false,\n             });\n         }\n     }\n@@ -87,6 +99,9 @@ pub(super) fn hints(\n         kind: InlayKind::ClosureCapture,\n         label: InlayHintLabel::from(\")\"),\n         text_edit: None,\n+        position: InlayHintPosition::After,\n+        pad_left: false,\n+        pad_right: true,\n     });\n \n     Some(())"}, {"sha": "3b41db0f13d0ae37661a661c9ca6c0f015dcf74a", "filename": "crates/ide/src/inlay_hints/closure_ret.rs", "status": "modified", "additions": 47, "deletions": 9, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs?ref=1e6bd6cb0db5f70cee0509d43615a80a0e1f2311", "patch": "@@ -6,7 +6,7 @@ use syntax::ast::{self, AstNode};\n \n use crate::{\n     inlay_hints::{closure_has_block_body, label_of_ty, ty_to_text_edit},\n-    ClosureReturnTypeHints, InlayHint, InlayHintsConfig, InlayKind,\n+    ClosureReturnTypeHints, InlayHint, InlayHintPosition, InlayHintsConfig, InlayKind,\n };\n \n pub(super) fn hints(\n@@ -20,9 +20,12 @@ pub(super) fn hints(\n         return None;\n     }\n \n-    if closure.ret_type().is_some() {\n-        return None;\n-    }\n+    let ret_type = closure.ret_type().map(|rt| (rt.thin_arrow_token(), rt.ty().is_some()));\n+    let arrow = match ret_type {\n+        Some((_, true)) => return None,\n+        Some((arrow, _)) => arrow,\n+        None => None,\n+    };\n \n     let has_block_body = closure_has_block_body(&closure);\n     if !has_block_body && config.closure_return_type_hints == ClosureReturnTypeHints::WithBlock {\n@@ -35,28 +38,63 @@ pub(super) fn hints(\n     let ty = sema.type_of_expr(&ast::Expr::ClosureExpr(closure.clone()))?.adjusted();\n     let callable = ty.as_callable(sema.db)?;\n     let ty = callable.return_type();\n-    if ty.is_unit() {\n+    if arrow.is_none() && ty.is_unit() {\n         return None;\n     }\n \n+    let mut label = label_of_ty(famous_defs, config, &ty)?;\n+\n+    if arrow.is_none() {\n+        label.prepend_str(\" -> \");\n+    }\n     // FIXME?: We could provide text edit to insert braces for closures with non-block body.\n     let text_edit = if has_block_body {\n         ty_to_text_edit(\n             sema,\n             closure.syntax(),\n             &ty,\n-            param_list.syntax().text_range().end(),\n-            String::from(\" -> \"),\n+            arrow\n+                .as_ref()\n+                .map_or_else(|| param_list.syntax().text_range(), |t| t.text_range())\n+                .end(),\n+            if arrow.is_none() { String::from(\" -> \") } else { String::new() },\n         )\n     } else {\n         None\n     };\n \n     acc.push(InlayHint {\n         range: param_list.syntax().text_range(),\n-        kind: InlayKind::ClosureReturnType,\n-        label: label_of_ty(famous_defs, config, ty)?,\n+        kind: InlayKind::Type,\n+        label,\n         text_edit,\n+        position: InlayHintPosition::After,\n+        pad_left: false,\n+        pad_right: false,\n     });\n     Some(())\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::inlay_hints::tests::{check_with_config, DISABLED_CONFIG};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn return_type_hints_for_closure_without_block() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                closure_return_type_hints: ClosureReturnTypeHints::Always,\n+                ..DISABLED_CONFIG\n+            },\n+            r#\"\n+fn main() {\n+    let a = || { 0 };\n+          //^^ -> i32\n+    let b = || 0;\n+          //^^ -> i32\n+}\"#,\n+        );\n+    }\n+}"}, {"sha": "9bff98f6110cb8202d5184268c21cd53c19e759c", "filename": "crates/ide/src/inlay_hints/discriminant.rs", "status": "modified", "additions": 51, "deletions": 40, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fdiscriminant.rs?ref=1e6bd6cb0db5f70cee0509d43615a80a0e1f2311", "patch": "@@ -9,7 +9,8 @@ use ide_db::{base_db::FileId, famous_defs::FamousDefs, RootDatabase};\n use syntax::ast::{self, AstNode, HasName};\n \n use crate::{\n-    DiscriminantHints, InlayHint, InlayHintLabel, InlayHintsConfig, InlayKind, InlayTooltip,\n+    DiscriminantHints, InlayHint, InlayHintLabel, InlayHintPosition, InlayHintsConfig, InlayKind,\n+    InlayTooltip,\n };\n \n pub(super) fn enum_hints(\n@@ -41,41 +42,51 @@ fn variant_hints(\n     sema: &Semantics<'_, RootDatabase>,\n     variant: &ast::Variant,\n ) -> Option<()> {\n-    if variant.eq_token().is_some() {\n+    if variant.expr().is_some() {\n         return None;\n     }\n \n+    let eq_token = variant.eq_token();\n     let name = variant.name()?;\n \n     let descended = sema.descend_node_into_attributes(variant.clone()).pop();\n     let desc_pat = descended.as_ref().unwrap_or(variant);\n     let v = sema.to_def(desc_pat)?;\n     let d = v.eval(sema.db);\n \n+    let range = match variant.field_list() {\n+        Some(field_list) => name.syntax().text_range().cover(field_list.syntax().text_range()),\n+        None => name.syntax().text_range(),\n+    };\n+    let eq_ = if eq_token.is_none() { \" =\" } else { \"\" };\n+    let label = InlayHintLabel::simple(\n+        match d {\n+            Ok(x) => {\n+                if x >= 10 {\n+                    format!(\"{eq_} {x} ({x:#X})\")\n+                } else {\n+                    format!(\"{eq_} {x}\")\n+                }\n+            }\n+            Err(_) => format!(\"{eq_} ?\"),\n+        },\n+        Some(InlayTooltip::String(match &d {\n+            Ok(_) => \"enum variant discriminant\".into(),\n+            Err(e) => format!(\"{e:?}\").into(),\n+        })),\n+        None,\n+    );\n     acc.push(InlayHint {\n-        range: match variant.field_list() {\n-            Some(field_list) => name.syntax().text_range().cover(field_list.syntax().text_range()),\n-            None => name.syntax().text_range(),\n+        range: match eq_token {\n+            Some(t) => range.cover(t.text_range()),\n+            _ => range,\n         },\n         kind: InlayKind::Discriminant,\n-        label: InlayHintLabel::simple(\n-            match d {\n-                Ok(x) => {\n-                    if x >= 10 {\n-                        format!(\"{x} ({x:#X})\")\n-                    } else {\n-                        format!(\"{x}\")\n-                    }\n-                }\n-                Err(_) => \"?\".into(),\n-            },\n-            Some(InlayTooltip::String(match &d {\n-                Ok(_) => \"enum variant discriminant\".into(),\n-                Err(e) => format!(\"{e:?}\").into(),\n-            })),\n-            None,\n-        ),\n+        label,\n         text_edit: None,\n+        position: InlayHintPosition::After,\n+        pad_left: false,\n+        pad_right: false,\n     });\n \n     Some(())\n@@ -113,29 +124,29 @@ mod tests {\n             r#\"\n enum Enum {\n   Variant,\n-//^^^^^^^0\n+//^^^^^^^ = 0$\n   Variant1,\n-//^^^^^^^^1\n+//^^^^^^^^ = 1$\n   Variant2,\n-//^^^^^^^^2\n+//^^^^^^^^ = 2$\n   Variant5 = 5,\n   Variant6,\n-//^^^^^^^^6\n+//^^^^^^^^ = 6$\n }\n \"#,\n         );\n         check_discriminants_fieldless(\n             r#\"\n enum Enum {\n   Variant,\n-//^^^^^^^0\n+//^^^^^^^ = 0\n   Variant1,\n-//^^^^^^^^1\n+//^^^^^^^^ = 1\n   Variant2,\n-//^^^^^^^^2\n+//^^^^^^^^ = 2\n   Variant5 = 5,\n   Variant6,\n-//^^^^^^^^6\n+//^^^^^^^^ = 6\n }\n \"#,\n         );\n@@ -147,16 +158,16 @@ enum Enum {\n             r#\"\n enum Enum {\n     Variant(),\n-  //^^^^^^^^^0\n+  //^^^^^^^^^ = 0\n     Variant1,\n-  //^^^^^^^^1\n+  //^^^^^^^^ = 1\n     Variant2 {},\n-  //^^^^^^^^^^^2\n+  //^^^^^^^^^^^ = 2\n     Variant3,\n-  //^^^^^^^^3\n+  //^^^^^^^^ = 3\n     Variant5 = 5,\n     Variant6,\n-  //^^^^^^^^6\n+  //^^^^^^^^ = 6\n }\n \"#,\n         );\n@@ -180,16 +191,16 @@ enum Enum {\n             r#\"\n enum Enum {\n     Variant(),\n-  //^^^^^^^^^0\n+  //^^^^^^^^^ = 0\n     Variant1,\n-  //^^^^^^^^1\n+  //^^^^^^^^ = 1\n     Variant2 {},\n-  //^^^^^^^^^^^2\n+  //^^^^^^^^^^^ = 2\n     Variant3,\n-  //^^^^^^^^3\n+  //^^^^^^^^ = 3\n     Variant5 = 5,\n     Variant6,\n-  //^^^^^^^^6\n+  //^^^^^^^^ = 6\n }\n \"#,\n         );"}, {"sha": "5fce11b785a7a0385a1425100d2202255b9c0083", "filename": "crates/ide/src/inlay_hints/fn_lifetime_fn.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints%2Ffn_lifetime_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints%2Ffn_lifetime_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Ffn_lifetime_fn.rs?ref=1e6bd6cb0db5f70cee0509d43615a80a0e1f2311", "patch": "@@ -10,7 +10,7 @@ use syntax::{\n     SyntaxToken,\n };\n \n-use crate::{InlayHint, InlayHintsConfig, InlayKind, LifetimeElisionHints};\n+use crate::{InlayHint, InlayHintPosition, InlayHintsConfig, InlayKind, LifetimeElisionHints};\n \n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n@@ -26,6 +26,9 @@ pub(super) fn hints(\n         kind: InlayKind::Lifetime,\n         label: label.into(),\n         text_edit: None,\n+        position: InlayHintPosition::After,\n+        pad_left: false,\n+        pad_right: true,\n     };\n \n     let param_list = func.param_list()?;\n@@ -191,13 +194,19 @@ pub(super) fn hints(\n                 )\n                 .into(),\n                 text_edit: None,\n+                position: InlayHintPosition::After,\n+                pad_left: false,\n+                pad_right: true,\n             });\n         }\n         (None, allocated_lifetimes) => acc.push(InlayHint {\n             range: func.name()?.syntax().text_range(),\n             kind: InlayKind::GenericParamList,\n             label: format!(\"<{}>\", allocated_lifetimes.iter().format(\", \"),).into(),\n             text_edit: None,\n+            position: InlayHintPosition::After,\n+            pad_left: false,\n+            pad_right: false,\n         }),\n     }\n     Some(())"}, {"sha": "fc297a8d824f29b07268223673a0e670a1c5809b", "filename": "crates/ide/src/inlay_hints/implicit_static.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints%2Fimplicit_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints%2Fimplicit_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fimplicit_static.rs?ref=1e6bd6cb0db5f70cee0509d43615a80a0e1f2311", "patch": "@@ -8,7 +8,7 @@ use syntax::{\n     SyntaxKind,\n };\n \n-use crate::{InlayHint, InlayHintsConfig, InlayKind, LifetimeElisionHints};\n+use crate::{InlayHint, InlayHintPosition, InlayHintsConfig, InlayKind, LifetimeElisionHints};\n \n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n@@ -35,6 +35,9 @@ pub(super) fn hints(\n                 kind: InlayKind::Lifetime,\n                 label: \"'static\".to_owned().into(),\n                 text_edit: None,\n+                position: InlayHintPosition::After,\n+                pad_left: false,\n+                pad_right: true,\n             });\n         }\n     }"}, {"sha": "c4f43f411753e096ee3f5adcf14f429456d0afbf", "filename": "crates/ide/src/inlay_hints/param_name.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints%2Fparam_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Finlay_hints%2Fparam_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fparam_name.rs?ref=1e6bd6cb0db5f70cee0509d43615a80a0e1f2311", "patch": "@@ -10,7 +10,7 @@ use ide_db::{base_db::FileRange, RootDatabase};\n use stdx::to_lower_snake_case;\n use syntax::ast::{self, AstNode, HasArgList, HasName, UnaryOp};\n \n-use crate::{InlayHint, InlayHintLabel, InlayHintsConfig, InlayKind};\n+use crate::{InlayHint, InlayHintLabel, InlayHintPosition, InlayHintsConfig, InlayKind};\n \n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n@@ -31,16 +31,16 @@ pub(super) fn hints(\n             // Only annotate hints for expressions that exist in the original file\n             let range = sema.original_range_opt(arg.syntax())?;\n             let (param_name, name_syntax) = match param.as_ref()? {\n-                Either::Left(pat) => (\"self\".to_string(), pat.name()),\n+                Either::Left(pat) => (pat.name()?, pat.name()),\n                 Either::Right(pat) => match pat {\n-                    ast::Pat::IdentPat(it) => (it.name()?.to_string(), it.name()),\n+                    ast::Pat::IdentPat(it) => (it.name()?, it.name()),\n                     _ => return None,\n                 },\n             };\n             Some((name_syntax, param_name, arg, range))\n         })\n         .filter(|(_, param_name, arg, _)| {\n-            !should_hide_param_name_hint(sema, &callable, param_name, arg)\n+            !should_hide_param_name_hint(sema, &callable, &param_name.text(), arg)\n         })\n         .map(|(param, param_name, _, FileRange { range, .. })| {\n             let mut linked_location = None;\n@@ -53,11 +53,17 @@ pub(super) fn hints(\n                 }\n             }\n \n+            let colon = if config.render_colons { \":\" } else { \"\" };\n+            let label =\n+                InlayHintLabel::simple(format!(\"{param_name}{colon}\"), None, linked_location);\n             InlayHint {\n                 range,\n                 kind: InlayKind::Parameter,\n-                label: InlayHintLabel::simple(param_name, None, linked_location),\n+                label,\n                 text_edit: None,\n+                position: InlayHintPosition::Before,\n+                pad_left: false,\n+                pad_right: true,\n             }\n         });\n "}, {"sha": "72d20af6637560890c89c0b2de084c8d912bc5bb", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=1e6bd6cb0db5f70cee0509d43615a80a0e1f2311", "patch": "@@ -87,8 +87,8 @@ pub use crate::{\n     hover::{HoverAction, HoverConfig, HoverDocFormat, HoverGotoTypeData, HoverResult},\n     inlay_hints::{\n         AdjustmentHints, AdjustmentHintsMode, ClosureReturnTypeHints, DiscriminantHints, InlayHint,\n-        InlayHintLabel, InlayHintLabelPart, InlayHintsConfig, InlayKind, InlayTooltip,\n-        LifetimeElisionHints,\n+        InlayHintLabel, InlayHintLabelPart, InlayHintPosition, InlayHintsConfig, InlayKind,\n+        InlayTooltip, LifetimeElisionHints,\n     },\n     join_lines::JoinLinesConfig,\n     markup::Markup,"}, {"sha": "1e0cb2ec2fbf83618d6ef9b507693b7fff065371", "filename": "crates/rust-analyzer/src/handlers/request.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs?ref=1e6bd6cb0db5f70cee0509d43615a80a0e1f2311", "patch": "@@ -1349,9 +1349,7 @@ pub(crate) fn handle_inlay_hints(\n         snap.analysis\n             .inlay_hints(&inlay_hints_config, file_id, Some(range))?\n             .into_iter()\n-            .map(|it| {\n-                to_proto::inlay_hint(&snap, &line_index, inlay_hints_config.render_colons, it)\n-            })\n+            .map(|it| to_proto::inlay_hint(&snap, &line_index, it))\n             .collect::<Cancellable<Vec<_>>>()?,\n     ))\n }"}, {"sha": "71a57772b1fb986fe685c8963c645559c71fed60", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 8, "deletions": 74, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6bd6cb0db5f70cee0509d43615a80a0e1f2311/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=1e6bd6cb0db5f70cee0509d43615a80a0e1f2311", "patch": "@@ -434,87 +434,21 @@ pub(crate) fn signature_help(\n pub(crate) fn inlay_hint(\n     snap: &GlobalStateSnapshot,\n     line_index: &LineIndex,\n-    render_colons: bool,\n-    mut inlay_hint: InlayHint,\n+    inlay_hint: InlayHint,\n ) -> Cancellable<lsp_types::InlayHint> {\n-    match inlay_hint.kind {\n-        InlayKind::Parameter if render_colons => inlay_hint.label.append_str(\":\"),\n-        InlayKind::Type if render_colons => inlay_hint.label.prepend_str(\": \"),\n-        InlayKind::ClosureReturnType => inlay_hint.label.prepend_str(\" -> \"),\n-        InlayKind::Discriminant => inlay_hint.label.prepend_str(\" = \"),\n-        _ => {}\n-    }\n-\n     let (label, tooltip) = inlay_hint_label(snap, inlay_hint.label)?;\n \n     Ok(lsp_types::InlayHint {\n-        position: match inlay_hint.kind {\n-            // before annotated thing\n-            InlayKind::OpeningParenthesis\n-            | InlayKind::Parameter\n-            | InlayKind::Adjustment\n-            | InlayKind::BindingMode => position(line_index, inlay_hint.range.start()),\n-            // after annotated thing\n-            InlayKind::ClosureReturnType\n-            | InlayKind::ClosureCapture\n-            | InlayKind::Type\n-            | InlayKind::Discriminant\n-            | InlayKind::Chaining\n-            | InlayKind::GenericParamList\n-            | InlayKind::ClosingParenthesis\n-            | InlayKind::AdjustmentPostfix\n-            | InlayKind::Lifetime\n-            | InlayKind::ClosingBrace => position(line_index, inlay_hint.range.end()),\n+        position: match inlay_hint.position {\n+            ide::InlayHintPosition::Before => position(line_index, inlay_hint.range.start()),\n+            ide::InlayHintPosition::After => position(line_index, inlay_hint.range.end()),\n         },\n-        padding_left: Some(match inlay_hint.kind {\n-            InlayKind::Type => !render_colons,\n-            InlayKind::Chaining | InlayKind::ClosingBrace => true,\n-            InlayKind::ClosingParenthesis\n-            | InlayKind::ClosureCapture\n-            | InlayKind::Discriminant\n-            | InlayKind::OpeningParenthesis\n-            | InlayKind::BindingMode\n-            | InlayKind::ClosureReturnType\n-            | InlayKind::GenericParamList\n-            | InlayKind::Adjustment\n-            | InlayKind::AdjustmentPostfix\n-            | InlayKind::Lifetime\n-            | InlayKind::Parameter => false,\n-        }),\n-        padding_right: Some(match inlay_hint.kind {\n-            InlayKind::ClosingParenthesis\n-            | InlayKind::OpeningParenthesis\n-            | InlayKind::Chaining\n-            | InlayKind::ClosureReturnType\n-            | InlayKind::GenericParamList\n-            | InlayKind::Adjustment\n-            | InlayKind::AdjustmentPostfix\n-            | InlayKind::Type\n-            | InlayKind::Discriminant\n-            | InlayKind::ClosingBrace => false,\n-            InlayKind::ClosureCapture => {\n-                matches!(&label, lsp_types::InlayHintLabel::String(s) if s == \")\")\n-            }\n-            InlayKind::BindingMode => {\n-                matches!(&label, lsp_types::InlayHintLabel::String(s) if s != \"&\")\n-            }\n-            InlayKind::Parameter | InlayKind::Lifetime => true,\n-        }),\n+        padding_left: Some(inlay_hint.pad_left),\n+        padding_right: Some(inlay_hint.pad_right),\n         kind: match inlay_hint.kind {\n             InlayKind::Parameter => Some(lsp_types::InlayHintKind::PARAMETER),\n-            InlayKind::ClosureReturnType | InlayKind::Type | InlayKind::Chaining => {\n-                Some(lsp_types::InlayHintKind::TYPE)\n-            }\n-            InlayKind::ClosingParenthesis\n-            | InlayKind::ClosureCapture\n-            | InlayKind::Discriminant\n-            | InlayKind::OpeningParenthesis\n-            | InlayKind::BindingMode\n-            | InlayKind::GenericParamList\n-            | InlayKind::Lifetime\n-            | InlayKind::Adjustment\n-            | InlayKind::AdjustmentPostfix\n-            | InlayKind::ClosingBrace => None,\n+            InlayKind::Type | InlayKind::Chaining => Some(lsp_types::InlayHintKind::TYPE),\n+            _ => None,\n         },\n         text_edits: inlay_hint.text_edit.map(|it| text_edit_vec(line_index, it)),\n         data: None,"}]}