{"sha": "243a524d060dcaf0b0381a8d5dea0a11b1474dfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0M2E1MjRkMDYwZGNhZjBiMDM4MWE4ZDVkZWEwYTExYjE0NzRkZmQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-28T00:38:22Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-28T00:38:22Z"}, "message": "Fix for middle::reachable + better comments and tests\n\nIn `middle::reachable` mark default impl of a trait method as reachable if this trait method is used from inlinable code", "tree": {"sha": "5bcbc60337abcc33377b3f71ab577720cb9d289c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bcbc60337abcc33377b3f71ab577720cb9d289c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/243a524d060dcaf0b0381a8d5dea0a11b1474dfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/243a524d060dcaf0b0381a8d5dea0a11b1474dfd", "html_url": "https://github.com/rust-lang/rust/commit/243a524d060dcaf0b0381a8d5dea0a11b1474dfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/243a524d060dcaf0b0381a8d5dea0a11b1474dfd/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cef018d52fe71824498a4c8f9e1ece074083586", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cef018d52fe71824498a4c8f9e1ece074083586", "html_url": "https://github.com/rust-lang/rust/commit/8cef018d52fe71824498a4c8f9e1ece074083586"}], "stats": {"total": 125, "additions": 65, "deletions": 60}, "files": [{"sha": "d5c8e501ae359ad57d9e6d37cacb5dcf1fcd9352", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/243a524d060dcaf0b0381a8d5dea0a11b1474dfd/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a524d060dcaf0b0381a8d5dea0a11b1474dfd/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=243a524d060dcaf0b0381a8d5dea0a11b1474dfd", "patch": "@@ -125,16 +125,11 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ReachableContext<'a, 'tcx> {\n             hir::ExprMethodCall(..) => {\n                 let method_call = ty::MethodCall::expr(expr.id);\n                 let def_id = self.tcx.tables.borrow().method_map[&method_call].def_id;\n-                match self.tcx.impl_or_trait_item(def_id).container() {\n-                    ty::ImplContainer(_) => {\n-                        if let Some(node_id) = self.tcx.map.as_local_node_id(def_id) {\n-                            if self.def_id_represents_local_inlined_item(def_id) {\n-                                self.worklist.push(node_id)\n-                            }\n-                            self.reachable_symbols.insert(node_id);\n-                        }\n+                if let Some(node_id) = self.tcx.map.as_local_node_id(def_id) {\n+                    if self.def_id_represents_local_inlined_item(def_id) {\n+                        self.worklist.push(node_id)\n                     }\n-                    ty::TraitContainer(_) => {}\n+                    self.reachable_symbols.insert(node_id);\n                 }\n             }\n             _ => {}"}, {"sha": "f13b14e64d700491f1123fa2c0e7a327e27d4554", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 13, "deletions": 51, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/243a524d060dcaf0b0381a8d5dea0a11b1474dfd/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a524d060dcaf0b0381a8d5dea0a11b1474dfd/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=243a524d060dcaf0b0381a8d5dea0a11b1474dfd", "patch": "@@ -183,21 +183,6 @@ struct EmbargoVisitor<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> EmbargoVisitor<'a, 'tcx> {\n-    // There are checks inside of privacy which depend on knowing whether a\n-    // trait should be exported or not. The two current consumers of this are:\n-    //\n-    //  1. Should default methods of a trait be exported?\n-    //  2. Should the methods of an implementation of a trait be exported?\n-    //\n-    // The answer to both of these questions partly rely on whether the trait\n-    // itself is exported or not. If the trait is somehow exported, then the\n-    // answers to both questions must be yes. Right now this question involves\n-    // more analysis than is currently done in rustc, so we conservatively\n-    // answer \"yes\" so that all traits need to be exported.\n-    fn exported_trait(&self, _id: ast::NodeId) -> bool {\n-        true\n-    }\n-\n     // Returns tuple (is_public, is_exported) for a type\n     fn is_public_exported_ty(&self, ty: &hir::Ty) -> (bool, bool) {\n         if let hir::TyPath(..) = ty.node {\n@@ -247,15 +232,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n             // added to public/exported sets based on inherited publicity.\n             hir::ItemImpl(..) | hir::ItemDefaultImpl(..) | hir::ItemForeignMod(..) => {}\n \n-            // Traits are a little special in that even if they themselves are\n-            // not public they may still be exported.\n-            hir::ItemTrait(..) => {\n-                self.prev_public = self.prev_public && item.vis == hir::Public;\n-                self.prev_exported = self.exported_trait(item.id);\n-\n-                self.maybe_insert_id(item.id);\n-            }\n-\n             // Private by default, hence we only retain the \"public chain\" if\n             // `pub` is explicitly listed.\n             _ => {\n@@ -284,9 +260,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                 }\n             }\n \n-            // * Inherent impls for public types only have public methods exported\n-            // * Inherent impls for private types do not need to export their methods\n-            // * Inherent impls themselves are not exported, they are nothing more than\n+            // Public items in inherent impls for public/exported types are public/exported\n+            // Inherent impls themselves are not public/exported, they are nothing more than\n             // containers for other items\n             hir::ItemImpl(_, _, _, None, ref ty, ref impl_items) => {\n                 let (public_ty, exported_ty) = self.is_public_exported_ty(&ty);\n@@ -303,42 +278,29 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                 }\n             }\n \n-            // Implementations are a little tricky to determine what's exported\n-            // out of them. Here's a few cases which are currently defined:\n-            //\n-            // * Public trait impls for public types must have all methods\n-            //   exported.\n-            //\n-            // * Private trait impls for public types can be ignored\n-            //\n-            // * Public trait impls for private types have their methods\n-            //   exported. I'm not entirely certain that this is the correct\n-            //   thing to do, but I have seen use cases of where this will cause\n-            //   undefined symbols at linkage time if this case is not handled.\n-            //\n-            // * Private trait impls for private types can be completely ignored\n+            // It's not known until monomorphization if a trait impl item should be reachable\n+            // from external crates or not. So, we conservatively mark all of them exported and\n+            // the reachability pass (middle::reachable) marks all exported items as reachable.\n+            // For example of private trait impl for private type that shoud be reachable see\n+            // src/test/auxiliary/issue-11225-3.rs\n             hir::ItemImpl(_, _, _, Some(ref trait_ref), ref ty, ref impl_items) => {\n                 let (public_ty, _exported_ty) = self.is_public_exported_ty(&ty);\n-                let (public_trait, exported_trait) = self.is_public_exported_trait(trait_ref);\n+                let (public_trait, _exported_trait) = self.is_public_exported_trait(trait_ref);\n \n                 if public_ty && public_trait {\n                     self.public_items.insert(item.id);\n                 }\n-                if exported_trait {\n-                    self.exported_items.insert(item.id);\n-                }\n+                self.exported_items.insert(item.id);\n \n                 for impl_item in impl_items {\n                     if public_ty && public_trait {\n                         self.public_items.insert(impl_item.id);\n                     }\n-                    if exported_trait {\n-                        self.exported_items.insert(impl_item.id);\n-                    }\n+                    self.exported_items.insert(impl_item.id);\n                 }\n             }\n \n-            // Default trait impls are exported for public traits\n+            // Default trait impls are public/exported for public/exported traits\n             hir::ItemDefaultImpl(_, ref trait_ref) => {\n                 let (public_trait, exported_trait) = self.is_public_exported_trait(trait_ref);\n \n@@ -350,8 +312,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                 }\n             }\n \n-            // Default methods on traits are all public so long as the trait\n-            // is public\n+            // Default methods on traits are all public/exported so long as the trait\n+            // is public/exported\n             hir::ItemTrait(_, _, _, ref trait_items) => {\n                 for trait_item in trait_items {\n                     self.maybe_insert_id(trait_item.id);"}, {"sha": "51d73925dff219ad89865fef5e9a2a02aa6b5799", "filename": "src/test/auxiliary/issue-11225-3.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/243a524d060dcaf0b0381a8d5dea0a11b1474dfd/src%2Ftest%2Fauxiliary%2Fissue-11225-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a524d060dcaf0b0381a8d5dea0a11b1474dfd/src%2Ftest%2Fauxiliary%2Fissue-11225-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-11225-3.rs?ref=243a524d060dcaf0b0381a8d5dea0a11b1474dfd", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait PrivateTrait {\n+    fn private_trait_method(&self);\n+}\n+\n+struct PrivateStruct;\n+\n+impl PrivateStruct {\n+    fn private_inherent_method(&self) { }\n+}\n+\n+impl PrivateTrait for PrivateStruct {\n+    fn private_trait_method(&self) { }\n+}\n+\n+#[inline]\n+pub fn public_generic_function() {\n+    PrivateStruct.private_trait_method();\n+    PrivateStruct.private_inherent_method();\n+}"}, {"sha": "046c145e70e784e948b0ed21c05d284ef6ca9e59", "filename": "src/test/run-pass/issue-11225-3.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/243a524d060dcaf0b0381a8d5dea0a11b1474dfd/src%2Ftest%2Frun-pass%2Fissue-11225-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a524d060dcaf0b0381a8d5dea0a11b1474dfd/src%2Ftest%2Frun-pass%2Fissue-11225-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11225-3.rs?ref=243a524d060dcaf0b0381a8d5dea0a11b1474dfd", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-11225-3.rs\n+\n+// pretty-expanded FIXME #23616\n+\n+extern crate issue_11225_3;\n+\n+pub fn main() {\n+    issue_11225_3::public_generic_function();\n+}"}]}