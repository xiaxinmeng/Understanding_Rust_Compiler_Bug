{"sha": "6ec5a0f62b3b153ef5846429ffe2f0bf0f9fc5d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYzVhMGY2MmIzYjE1M2VmNTg0NjQyOWZmZTJmMGJmMGY5ZmM1ZDA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-03T16:34:13Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-03T21:00:27Z"}, "message": "Error when #![staged_api] crates are missing stability markers", "tree": {"sha": "d94933ea8cd9c1a1f4052efecab76cfc7ca2b031", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d94933ea8cd9c1a1f4052efecab76cfc7ca2b031"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ec5a0f62b3b153ef5846429ffe2f0bf0f9fc5d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ec5a0f62b3b153ef5846429ffe2f0bf0f9fc5d0", "html_url": "https://github.com/rust-lang/rust/commit/6ec5a0f62b3b153ef5846429ffe2f0bf0f9fc5d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ec5a0f62b3b153ef5846429ffe2f0bf0f9fc5d0/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b9e227a1697e22b21d947f36bf1bd7695971d8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b9e227a1697e22b21d947f36bf1bd7695971d8f", "html_url": "https://github.com/rust-lang/rust/commit/0b9e227a1697e22b21d947f36bf1bd7695971d8f"}], "stats": {"total": 45, "additions": 31, "deletions": 14}, "files": [{"sha": "f446c4daefb4f2e32f83136011dd09b7d8c38772", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6ec5a0f62b3b153ef5846429ffe2f0bf0f9fc5d0/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec5a0f62b3b153ef5846429ffe2f0bf0f9fc5d0/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=6ec5a0f62b3b153ef5846429ffe2f0bf0f9fc5d0", "patch": "@@ -14,6 +14,7 @@\n use session::Session;\n use lint;\n use middle::ty;\n+use middle::privacy::PublicItems;\n use metadata::csearch;\n use syntax::parse::token::InternedString;\n use syntax::codemap::{Span, DUMMY_SP};\n@@ -45,14 +46,15 @@ pub struct Index {\n struct Annotator<'a> {\n     sess: &'a Session,\n     index: &'a mut Index,\n-    parent: Option<Stability>\n+    parent: Option<Stability>,\n+    export_map: &'a PublicItems,\n }\n \n impl<'a> Annotator<'a> {\n     // Determine the stability for a node based on its attributes and inherited\n     // stability. The stability is recorded in the index and used as the parent.\n     fn annotate<F>(&mut self, id: NodeId, use_parent: bool,\n-                   attrs: &Vec<Attribute>, item_sp: Span, f: F) where\n+                   attrs: &Vec<Attribute>, item_sp: Span, f: F, required: bool) where\n         F: FnOnce(&mut Annotator),\n     {\n         match attr::find_stability(self.sess.diagnostic(), attrs.as_slice(), item_sp) {\n@@ -70,7 +72,13 @@ impl<'a> Annotator<'a> {\n             }\n             None => {\n                 if use_parent {\n-                    self.parent.clone().map(|stab| self.index.local.insert(id, stab));\n+                    if let Some(stab) = self.parent.clone() {\n+                        self.index.local.insert(id, stab);\n+                    } else if self.index.staged_api && required\n+                           && self.export_map.contains(&id) {\n+                        self.sess.span_err(item_sp,\n+                                           \"This node does not have a stability attribute\");\n+                    }\n                 }\n                 f(self);\n             }\n@@ -93,11 +101,19 @@ impl<'a, 'v> Visitor<'v> for Annotator<'a> {\n             _ => true,\n         };\n \n-        self.annotate(i.id, use_parent, &i.attrs, i.span, |v| visit::walk_item(v, i));\n+        // In case of a `pub use <mod>;`, we should not error since the stability\n+        // is inherited from the module itself\n+        let required = match i.node {\n+            ast::ItemUse(_) => i.vis != ast::Public,\n+            _ => true\n+        };\n+\n+        self.annotate(i.id, use_parent, &i.attrs, i.span,\n+                      |v| visit::walk_item(v, i), required);\n \n         if let ast::ItemStruct(ref sd, _) = i.node {\n             sd.ctor_id.map(|id| {\n-                self.annotate(id, true, &i.attrs, i.span, |_| {})\n+                self.annotate(id, true, &i.attrs, i.span, |_| {}, true)\n             });\n         }\n     }\n@@ -106,7 +122,7 @@ impl<'a, 'v> Visitor<'v> for Annotator<'a> {\n                 _: &'v Block, sp: Span, _: NodeId) {\n         if let FkMethod(_, _, meth) = fk {\n             // Methods are not already annotated, so we annotate it\n-            self.annotate(meth.id, true, &meth.attrs, sp, |_| {});\n+            self.annotate(meth.id, true, &meth.attrs, sp, |_| {}, true);\n         }\n         // Items defined in a function body have no reason to have\n         // a stability attribute, so we don't recurse.\n@@ -126,37 +142,38 @@ impl<'a, 'v> Visitor<'v> for Annotator<'a> {\n             TypeTraitItem(ref typedef) => (typedef.ty_param.id, &typedef.attrs,\n                                            typedef.ty_param.span),\n         };\n-        self.annotate(id, true, attrs, sp, |v| visit::walk_trait_item(v, t));\n+        self.annotate(id, true, attrs, sp, |v| visit::walk_trait_item(v, t), true);\n     }\n \n     fn visit_variant(&mut self, var: &Variant, g: &'v Generics) {\n         self.annotate(var.node.id, true, &var.node.attrs, var.span,\n-                      |v| visit::walk_variant(v, var, g))\n+                      |v| visit::walk_variant(v, var, g), true)\n     }\n \n     fn visit_struct_field(&mut self, s: &StructField) {\n         self.annotate(s.node.id, true, &s.node.attrs, s.span,\n-                      |v| visit::walk_struct_field(v, s));\n+                      |v| visit::walk_struct_field(v, s), true);\n     }\n \n     fn visit_foreign_item(&mut self, i: &ast::ForeignItem) {\n-        self.annotate(i.id, true, &i.attrs, i.span, |_| {});\n+        self.annotate(i.id, true, &i.attrs, i.span, |_| {}, true);\n     }\n }\n \n impl Index {\n     /// Construct the stability index for a crate being compiled.\n-    pub fn build(&mut self, sess: &Session, krate: &Crate) {\n+    pub fn build(&mut self, sess: &Session, krate: &Crate, export_map: &PublicItems) {\n         if !self.staged_api {\n             return;\n         }\n         let mut annotator = Annotator {\n             sess: sess,\n             index: self,\n-            parent: None\n+            parent: None,\n+            export_map: export_map,\n         };\n         annotator.annotate(ast::CRATE_NODE_ID, true, &krate.attrs, krate.span,\n-                           |v| visit::walk_crate(v, krate));\n+                           |v| visit::walk_crate(v, krate), true);\n     }\n \n     pub fn new(krate: &Crate) -> Index {"}, {"sha": "8ede037594a007557d57fae70632df52507d9313", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ec5a0f62b3b153ef5846429ffe2f0bf0f9fc5d0/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec5a0f62b3b153ef5846429ffe2f0bf0f9fc5d0/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=6ec5a0f62b3b153ef5846429ffe2f0bf0f9fc5d0", "patch": "@@ -627,7 +627,7 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n \n     // Do not move this check past lint\n     time(time_passes, \"stability index\", (), |_|\n-         ty_cx.stability.borrow_mut().build(&ty_cx.sess, krate));\n+         ty_cx.stability.borrow_mut().build(&ty_cx.sess, krate, &public_items));\n \n     time(time_passes, \"intrinsic checking\", (), |_|\n          middle::intrinsicck::check_crate(&ty_cx));"}]}