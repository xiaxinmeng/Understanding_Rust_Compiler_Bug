{"sha": "49c45734c0d1a038e44767bdf9cd6721652d5002", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5YzQ1NzM0YzBkMWEwMzhlNDQ3NjdiZGY5Y2Q2NzIxNjUyZDUwMDI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-07T17:53:43Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-19T19:02:34Z"}, "message": "Refactor generic argument count check in astconv", "tree": {"sha": "ddeab22080138b96b56196da9974e4237501a72c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddeab22080138b96b56196da9974e4237501a72c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49c45734c0d1a038e44767bdf9cd6721652d5002", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49c45734c0d1a038e44767bdf9cd6721652d5002", "html_url": "https://github.com/rust-lang/rust/commit/49c45734c0d1a038e44767bdf9cd6721652d5002", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49c45734c0d1a038e44767bdf9cd6721652d5002/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a14bc713e77cfdf2c91e2e24f428f9dd13da786a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a14bc713e77cfdf2c91e2e24f428f9dd13da786a", "html_url": "https://github.com/rust-lang/rust/commit/a14bc713e77cfdf2c91e2e24f428f9dd13da786a"}], "stats": {"total": 283, "additions": 140, "deletions": 143}, "files": [{"sha": "f6d21ca5861fbf6c45720f8e92abe368877ce2d5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=49c45734c0d1a038e44767bdf9cd6721652d5002", "patch": "@@ -919,7 +919,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n         for param in &self.params {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => own_counts.lifetimes += 1,\n-                GenericParamDefKind::Type {..} => own_counts.types += 1,\n+                GenericParamDefKind::Type { .. } => own_counts.types += 1,\n             };\n         }\n "}, {"sha": "cd297d5c653afad124bf9fd169db7db305e5f0bf", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 106, "deletions": 109, "changes": 215, "blob_url": "https://github.com/rust-lang/rust/blob/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=49c45734c0d1a038e44767bdf9cd6721652d5002", "patch": "@@ -29,7 +29,7 @@ use std::slice;\n use require_c_abi_if_variadic;\n use util::common::ErrorReported;\n use util::nodemap::{FxHashSet, FxHashMap};\n-use errors::FatalError;\n+use errors::{FatalError, DiagnosticId};\n \n use std::iter;\n use syntax::ast;\n@@ -89,11 +89,6 @@ struct ConvertedBinding<'tcx> {\n     span: Span,\n }\n \n-struct ParamRange {\n-    required: usize,\n-    accepted: usize\n-}\n-\n /// Dummy type used for the `Self` of a `TraitRef` created for converting\n /// a trait object, and which gets removed in `ExistentialTraitRef`.\n /// This type must not appear anywhere in other converted types.\n@@ -346,56 +341,21 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         self_ty: Option<Ty<'tcx>>)\n         -> (&'tcx Substs<'tcx>, Vec<ConvertedBinding<'tcx>>)\n     {\n-        let tcx = self.tcx();\n-\n-        debug!(\"create_substs_for_ast_path(def_id={:?}, self_ty={:?}, \\\n-               generic_args={:?})\",\n-               def_id, self_ty, generic_args);\n-\n         // If the type is parameterized by this region, then replace this\n         // region with the current anon region binding (in other words,\n         // whatever & would get replaced with).\n-        let mut lt_provided = 0;\n-        let mut ty_provided = 0;\n-        for arg in &generic_args.args {\n-            match arg {\n-                GenericArg::Lifetime(_) => lt_provided += 1,\n-                GenericArg::Type(_) => ty_provided += 1,\n-            }\n-        }\n-\n-        let decl_generics = tcx.generics_of(def_id);\n-        let mut lt_accepted = 0;\n-        let mut ty_params = ParamRange { required: 0, accepted: 0 };\n-        for param in &decl_generics.params {\n-            match param.kind {\n-                GenericParamDefKind::Lifetime => {\n-                    lt_accepted += 1;\n-                }\n-                GenericParamDefKind::Type { has_default, .. } => {\n-                    ty_params.accepted += 1;\n-                    if !has_default {\n-                        ty_params.required += 1;\n-                    }\n-                }\n-            };\n-        }\n-        if self_ty.is_some() {\n-            ty_params.required -= 1;\n-            ty_params.accepted -= 1;\n-        }\n+        debug!(\"create_substs_for_ast_path(def_id={:?}, self_ty={:?}, \\\n+               generic_args={:?})\",\n+               def_id, self_ty, generic_args);\n \n-        if lt_accepted != lt_provided {\n-            report_lifetime_number_error(tcx, span, lt_provided, lt_accepted);\n-        }\n+        let tcx = self.tcx();\n+        let generic_params = tcx.generics_of(def_id);\n \n         // If a self-type was declared, one should be provided.\n-        assert_eq!(decl_generics.has_self, self_ty.is_some());\n+        assert_eq!(generic_params.has_self, self_ty.is_some());\n \n-        // Check the number of type parameters supplied by the user.\n-        if !infer_types || ty_provided > ty_params.required {\n-            check_type_argument_count(tcx, span, ty_provided, ty_params);\n-        }\n+        let has_self = generic_params.has_self;\n+        check_generic_arg_count(tcx, span, &generic_params, &generic_args, has_self, infer_types);\n \n         let is_object = self_ty.map_or(false, |ty| ty.sty == TRAIT_OBJECT_DUMMY_SELF);\n         let default_needs_object_self = |param: &ty::GenericParamDef| {\n@@ -492,8 +452,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n             }\n         }).collect();\n \n-        debug!(\"create_substs_for_ast_path(decl_generics={:?}, self_ty={:?}) -> {:?}\",\n-               decl_generics, self_ty, substs);\n+        debug!(\"create_substs_for_ast_path(generic_params={:?}, self_ty={:?}) -> {:?}\",\n+               generic_params, self_ty, substs);\n \n         (substs, assoc_bindings)\n     }\n@@ -1537,70 +1497,107 @@ fn split_auto_traits<'a, 'b, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     (auto_traits, trait_bounds)\n }\n \n-fn check_type_argument_count(tcx: TyCtxt,\n-                             span: Span,\n-                             supplied: usize,\n-                             ty_params: ParamRange)\n-{\n-    let (required, accepted) = (ty_params.required, ty_params.accepted);\n-    if supplied < required {\n-        let expected = if required < accepted {\n-            \"expected at least\"\n-        } else {\n-            \"expected\"\n-        };\n-        let arguments_plural = if required == 1 { \"\" } else { \"s\" };\n-\n-        struct_span_err!(tcx.sess, span, E0243,\n-                \"wrong number of type arguments: {} {}, found {}\",\n-                expected, required, supplied)\n-            .span_label(span,\n-                format!(\"{} {} type argument{}\",\n-                    expected,\n-                    required,\n-                    arguments_plural))\n-            .emit();\n-    } else if supplied > accepted {\n-        let expected = if required < accepted {\n-            format!(\"expected at most {}\", accepted)\n-        } else {\n-            format!(\"expected {}\", accepted)\n+pub fn check_generic_arg_count(\n+    tcx: TyCtxt,\n+    span: Span,\n+    def: &ty::Generics,\n+    args: &hir::GenericArgs,\n+    has_self: bool,\n+    infer_types: bool,\n+) {\n+    // At this stage we are guaranteed that the generic arguments are in the correct order, e.g.\n+    // that lifetimes will proceed types. So it suffices to check the number of each generic\n+    // arguments in order to validate them with respect to the generic parameters.\n+    let param_counts = def.own_counts();\n+    let arg_counts = args.own_counts();\n+\n+    let mut defaults: ty::GenericParamCount = Default::default();\n+    for param in &def.params {\n+        match param.kind {\n+            GenericParamDefKind::Lifetime => {}\n+            GenericParamDefKind::Type { has_default, .. } => defaults.types += has_default as usize,\n         };\n-        let arguments_plural = if accepted == 1 { \"\" } else { \"s\" };\n-\n-        struct_span_err!(tcx.sess, span, E0244,\n-                \"wrong number of type arguments: {}, found {}\",\n-                expected, supplied)\n-            .span_label(\n-                span,\n-                format!(\"{} type argument{}\",\n-                    if accepted == 0 { \"expected no\" } else { &expected },\n-                    arguments_plural)\n-            )\n-            .emit();\n     }\n-}\n \n-fn report_lifetime_number_error(tcx: TyCtxt, span: Span, number: usize, expected: usize) {\n-    let label = if number < expected {\n-        if expected == 1 {\n-            format!(\"expected {} lifetime parameter\", expected)\n-        } else {\n-            format!(\"expected {} lifetime parameters\", expected)\n+    let check_kind_count = |error_code_less: &str,\n+                            error_code_more: &str,\n+                            kind,\n+                            required,\n+                            permitted,\n+                            provided| {\n+        // We enforce the following: `required` <= `provided` <= `permitted`.\n+        // For kinds without defaults (i.e. lifetimes), `required == permitted`.\n+        // For other kinds (i.e. types), `permitted` may be greater than `required`.\n+        if required <= provided && provided <= permitted {\n+            return;\n         }\n-    } else {\n-        let additional = number - expected;\n-        if additional == 1 {\n-            \"unexpected lifetime parameter\".to_string()\n+\n+        // Unfortunately lifetime and type parameter mismatches are typically styled\n+        // differently in diagnostics, which means we have a few cases to consider here.\n+        let (bound, quantifier) = if required != permitted {\n+            if provided < required {\n+                (required, \"at least \")\n+            } else { // provided > permitted\n+                (permitted, \"at most \")\n+            }\n         } else {\n-            format!(\"{} unexpected lifetime parameters\", additional)\n-        }\n+            (required, \"\")\n+        };\n+        let label = if required == permitted && provided > permitted {\n+            let diff = provided - permitted;\n+            format!(\n+                \"{}unexpected {} argument{}\",\n+                if diff != 1 { format!(\"{} \", diff) } else { String::new() },\n+                kind,\n+                if diff != 1 { \"s\" } else { \"\" },\n+            )\n+        } else {\n+            format!(\n+                \"expected {}{} {} argument{}\",\n+                quantifier,\n+                bound,\n+                kind,\n+                if required != 1 { \"s\" } else { \"\" },\n+            )\n+        };\n+\n+        tcx.sess.struct_span_err_with_code(\n+            span,\n+            &format!(\n+                \"wrong number of {} arguments: expected {}{}, found {}\",\n+                kind,\n+                quantifier,\n+                bound,\n+                provided,\n+            ),\n+            DiagnosticId::Error({\n+                if provided <= permitted {\n+                    error_code_less\n+                } else {\n+                    error_code_more\n+                }\n+            }.into())\n+        ).span_label(span, label).emit();\n     };\n-    struct_span_err!(tcx.sess, span, E0107,\n-                     \"wrong number of lifetime parameters: expected {}, found {}\",\n-                     expected, number)\n-        .span_label(span, label)\n-        .emit();\n+\n+    check_kind_count(\n+        \"E0107\",\n+        \"E0107\",\n+        \"lifetime\",\n+        param_counts.lifetimes,\n+        param_counts.lifetimes,\n+        arg_counts.lifetimes,\n+    );\n+    if !infer_types || arg_counts.types > param_counts.types - defaults.types - has_self as usize {\n+        check_kind_count(\n+            \"E0243\",\n+            \"E0244\", // FIXME: E0243 and E0244 should be unified.\n+            \"type\",\n+            param_counts.types - defaults.types - has_self as usize,\n+            param_counts.types - has_self as usize,\n+            arg_counts.types,\n+        );\n+    }\n }\n \n // A helper struct for conveniently grouping a set of bounds which we pass to"}, {"sha": "4645142ea66faeddbbe78dcd9d10d8c549f987f6", "filename": "src/test/ui/bad/bad-mid-path-type-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Fbad%2Fbad-mid-path-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Fbad%2Fbad-mid-path-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-mid-path-type-params.rs?ref=49c45734c0d1a038e44767bdf9cd6721652d5002", "patch": "@@ -41,7 +41,7 @@ fn foo<'a>() {\n     //~^ ERROR too many type parameters provided\n \n     let _ = S::<'a,isize>::new::<f64>(1, 1.0);\n-    //~^ ERROR wrong number of lifetime parameters\n+    //~^ ERROR wrong number of lifetime arguments\n \n     let _: S2 = Trait::new::<isize,f64>(1, 1.0);\n     //~^ ERROR too many type parameters provided"}, {"sha": "815c7fefd2a96e79b71594cfae493f8c21bdbe49", "filename": "src/test/ui/error-codes/E0107.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Ferror-codes%2FE0107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Ferror-codes%2FE0107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0107.rs?ref=49c45734c0d1a038e44767bdf9cd6721652d5002", "patch": "@@ -20,13 +20,13 @@ enum Bar {\n struct Baz<'a, 'b, 'c> {\n     buzz: Buzz<'a>,\n     //~^ ERROR E0107\n-    //~| expected 2 lifetime parameters\n+    //~| expected 2 lifetime arguments\n     bar: Bar<'a>,\n     //~^ ERROR E0107\n-    //~| unexpected lifetime parameter\n+    //~| unexpected lifetime argument\n     foo2: Foo<'a, 'b, 'c>,\n     //~^ ERROR E0107\n-    //~| 2 unexpected lifetime parameters\n+    //~| 2 unexpected lifetime arguments\n }\n \n fn main() {}"}, {"sha": "07f4f322695c38decf2999a40df0005395f44601", "filename": "src/test/ui/error-codes/E0107.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr?ref=49c45734c0d1a038e44767bdf9cd6721652d5002", "patch": "@@ -1,20 +1,20 @@\n-error[E0107]: wrong number of lifetime parameters: expected 2, found 1\n+error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n   --> $DIR/E0107.rs:21:11\n    |\n LL |     buzz: Buzz<'a>,\n-   |           ^^^^^^^^ expected 2 lifetime parameters\n+   |           ^^^^^^^^ expected 2 lifetime arguments\n \n-error[E0107]: wrong number of lifetime parameters: expected 0, found 1\n+error[E0107]: wrong number of lifetime arguments: expected 0, found 1\n   --> $DIR/E0107.rs:24:10\n    |\n LL |     bar: Bar<'a>,\n-   |          ^^^^^^^ unexpected lifetime parameter\n+   |          ^^^^^^^ unexpected lifetime argument\n \n-error[E0107]: wrong number of lifetime parameters: expected 1, found 3\n+error[E0107]: wrong number of lifetime arguments: expected 1, found 3\n   --> $DIR/E0107.rs:27:11\n    |\n LL |     foo2: Foo<'a, 'b, 'c>,\n-   |           ^^^^^^^^^^^^^^^ 2 unexpected lifetime parameters\n+   |           ^^^^^^^^^^^^^^^ 2 unexpected lifetime arguments\n \n error: aborting due to 3 previous errors\n "}, {"sha": "87f063c604fe4065252c05feeda5281171ce22f1", "filename": "src/test/ui/error-codes/E0244.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Ferror-codes%2FE0244.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Ferror-codes%2FE0244.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0244.stderr?ref=49c45734c0d1a038e44767bdf9cd6721652d5002", "patch": "@@ -2,7 +2,7 @@ error[E0244]: wrong number of type arguments: expected 0, found 2\n   --> $DIR/E0244.rs:12:23\n    |\n LL | struct Bar<S, T> { x: Foo<S, T> }\n-   |                       ^^^^^^^^^ expected no type arguments\n+   |                       ^^^^^^^^^ 2 unexpected type arguments\n \n error: aborting due to previous error\n "}, {"sha": "f226921816d09f72ef1d263a5780feaae7a507f0", "filename": "src/test/ui/generic/generic-type-more-params-with-defaults.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-more-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-more-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-more-params-with-defaults.stderr?ref=49c45734c0d1a038e44767bdf9cd6721652d5002", "patch": "@@ -2,7 +2,7 @@ error[E0244]: wrong number of type arguments: expected at most 2, found 3\n   --> $DIR/generic-type-more-params-with-defaults.rs:19:12\n    |\n LL |     let _: Vec<isize, Heap, bool>;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ expected at most 2 type arguments\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ expected at most 2 type argument\n \n error: aborting due to previous error\n "}, {"sha": "f550dc6f310ffcb028aed19ea02436572045e5d7", "filename": "src/test/ui/issues/issue-18423.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Fissues%2Fissue-18423.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Fissues%2Fissue-18423.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18423.rs?ref=49c45734c0d1a038e44767bdf9cd6721652d5002", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that `Box` cannot be used with a lifetime parameter.\n+// Test that `Box` cannot be used with a lifetime argument.\n \n struct Foo<'a> {\n-    x: Box<'a, isize> //~ ERROR wrong number of lifetime parameters\n+    x: Box<'a, isize> //~ ERROR wrong number of lifetime arguments\n }\n \n pub fn main() {"}, {"sha": "35063f3d3ad06a04be2fb1da04e6ea1b325ee0a4", "filename": "src/test/ui/issues/issue-18423.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Fissues%2Fissue-18423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Fissues%2Fissue-18423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18423.stderr?ref=49c45734c0d1a038e44767bdf9cd6721652d5002", "patch": "@@ -1,8 +1,8 @@\n-error[E0107]: wrong number of lifetime parameters: expected 0, found 1\n+error[E0107]: wrong number of lifetime arguments: expected 0, found 1\n   --> $DIR/issue-18423.rs:14:8\n    |\n-LL |     x: Box<'a, isize> //~ ERROR wrong number of lifetime parameters\n-   |        ^^^^^^^^^^^^^^ unexpected lifetime parameter\n+LL |     x: Box<'a, isize> //~ ERROR wrong number of lifetime arguments\n+   |        ^^^^^^^^^^^^^^ unexpected lifetime argument\n \n error: aborting due to previous error\n "}, {"sha": "d1b846eb2aa8eae20f7a1b5728602c07cfdffc65", "filename": "src/test/ui/issues/issue-3214.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr?ref=49c45734c0d1a038e44767bdf9cd6721652d5002", "patch": "@@ -13,7 +13,7 @@ error[E0244]: wrong number of type arguments: expected 0, found 1\n   --> $DIR/issue-3214.rs:16:22\n    |\n LL |     impl<T> Drop for foo<T> {\n-   |                      ^^^^^^ expected no type arguments\n+   |                      ^^^^^^ unexpected type argument\n \n error: aborting due to 2 previous errors\n "}, {"sha": "954e20e334566603c8a4a649b0753f783b51387c", "filename": "src/test/ui/traits/trait-object-vs-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.rs?ref=49c45734c0d1a038e44767bdf9cd6721652d5002", "patch": "@@ -21,7 +21,7 @@ fn main() {\n     let _: S<'static, 'static +>;\n     //~^ at least one non-builtin trait is required for an object type\n     let _: S<'static, 'static>;\n-    //~^ ERROR wrong number of lifetime parameters: expected 1, found 2\n+    //~^ ERROR wrong number of lifetime arguments: expected 1, found 2\n     //~| ERROR wrong number of type arguments: expected 1, found 0\n     let _: S<'static +, 'static>;\n     //~^ ERROR lifetime parameters must be declared prior to type parameters"}, {"sha": "9285b8ca6bcf04fb1eb25cb218127fa66ff5354d", "filename": "src/test/ui/typeck/typeck-builtin-bound-type-parameters.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.rs?ref=49c45734c0d1a038e44767bdf9cd6721652d5002", "patch": "@@ -18,12 +18,12 @@ struct MyStruct1<T: Copy<T>>;\n //~^ ERROR wrong number of type arguments: expected 0, found 1 [E0244]\n \n struct MyStruct2<'a, T: Copy<'a>>;\n-//~^ ERROR: wrong number of lifetime parameters: expected 0, found 1\n+//~^ ERROR: wrong number of lifetime arguments: expected 0, found 1\n \n \n fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n //~^ ERROR wrong number of type arguments: expected 0, found 1 [E0244]\n-//~| ERROR: wrong number of lifetime parameters: expected 0, found 1\n+//~| ERROR: wrong number of lifetime arguments: expected 0, found 1\n \n fn main() {\n }"}, {"sha": "d34818826295f3a17d810095e5dc8537ca6fdc85", "filename": "src/test/ui/typeck/typeck-builtin-bound-type-parameters.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr?ref=49c45734c0d1a038e44767bdf9cd6721652d5002", "patch": "@@ -2,37 +2,37 @@ error[E0244]: wrong number of type arguments: expected 0, found 1\n   --> $DIR/typeck-builtin-bound-type-parameters.rs:11:11\n    |\n LL | fn foo1<T:Copy<U>, U>(x: T) {}\n-   |           ^^^^^^^ expected no type arguments\n+   |           ^^^^^^^ unexpected type argument\n \n error[E0244]: wrong number of type arguments: expected 0, found 1\n   --> $DIR/typeck-builtin-bound-type-parameters.rs:14:14\n    |\n LL | trait Trait: Copy<Send> {}\n-   |              ^^^^^^^^^^ expected no type arguments\n+   |              ^^^^^^^^^^ unexpected type argument\n \n error[E0244]: wrong number of type arguments: expected 0, found 1\n   --> $DIR/typeck-builtin-bound-type-parameters.rs:17:21\n    |\n LL | struct MyStruct1<T: Copy<T>>;\n-   |                     ^^^^^^^ expected no type arguments\n+   |                     ^^^^^^^ unexpected type argument\n \n-error[E0107]: wrong number of lifetime parameters: expected 0, found 1\n+error[E0107]: wrong number of lifetime arguments: expected 0, found 1\n   --> $DIR/typeck-builtin-bound-type-parameters.rs:20:25\n    |\n LL | struct MyStruct2<'a, T: Copy<'a>>;\n-   |                         ^^^^^^^^ unexpected lifetime parameter\n+   |                         ^^^^^^^^ unexpected lifetime argument\n \n-error[E0107]: wrong number of lifetime parameters: expected 0, found 1\n+error[E0107]: wrong number of lifetime arguments: expected 0, found 1\n   --> $DIR/typeck-builtin-bound-type-parameters.rs:24:15\n    |\n LL | fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n-   |               ^^^^^^^^^^^ unexpected lifetime parameter\n+   |               ^^^^^^^^^^^ unexpected lifetime argument\n \n error[E0244]: wrong number of type arguments: expected 0, found 1\n   --> $DIR/typeck-builtin-bound-type-parameters.rs:24:15\n    |\n LL | fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n-   |               ^^^^^^^^^^^ expected no type arguments\n+   |               ^^^^^^^^^^^ unexpected type argument\n \n error: aborting due to 6 previous errors\n "}, {"sha": "597fbc6d8b1bc9766ad102c95fd5d0e804929ab8", "filename": "src/test/ui/typeck/typeck_type_placeholder_lifetime_1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.stderr?ref=49c45734c0d1a038e44767bdf9cd6721652d5002", "patch": "@@ -2,7 +2,7 @@ error[E0244]: wrong number of type arguments: expected 1, found 2\n   --> $DIR/typeck_type_placeholder_lifetime_1.rs:19:12\n    |\n LL |     let c: Foo<_, _> = Foo { r: &5 };\n-   |            ^^^^^^^^^ expected 1 type argument\n+   |            ^^^^^^^^^ unexpected type argument\n \n error: aborting due to previous error\n "}, {"sha": "1b7c60441e16bd25ddd22b2810aae3a3464f3e63", "filename": "src/test/ui/typeck/typeck_type_placeholder_lifetime_2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.stderr?ref=49c45734c0d1a038e44767bdf9cd6721652d5002", "patch": "@@ -2,7 +2,7 @@ error[E0244]: wrong number of type arguments: expected 1, found 2\n   --> $DIR/typeck_type_placeholder_lifetime_2.rs:19:12\n    |\n LL |     let c: Foo<_, usize> = Foo { r: &5 };\n-   |            ^^^^^^^^^^^^^ expected 1 type argument\n+   |            ^^^^^^^^^^^^^ unexpected type argument\n \n error: aborting due to previous error\n "}, {"sha": "331ad620c27c02a310410a437f53e53b460f9a1e", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-region.rs?ref=49c45734c0d1a038e44767bdf9cd6721652d5002", "patch": "@@ -38,7 +38,7 @@ fn test<'a,'b>() {\n }\n \n fn test2(x: &Foo<(isize,),Output=()>, y: &Foo(isize)) {\n-//~^ ERROR wrong number of lifetime parameters: expected 1, found 0\n+//~^ ERROR wrong number of lifetime arguments: expected 1, found 0\n     // Here, the omitted lifetimes are expanded to distinct things.\n     same_type(x, y)\n }"}, {"sha": "a993928bc318a2c3ff608b0fc386fbe7eec66d3d", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49c45734c0d1a038e44767bdf9cd6721652d5002/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr?ref=49c45734c0d1a038e44767bdf9cd6721652d5002", "patch": "@@ -2,7 +2,7 @@ error[E0244]: wrong number of type arguments: expected 0, found 1\n   --> $DIR/unboxed-closure-sugar-wrong-trait.rs:15:8\n    |\n LL | fn f<F:Trait(isize) -> isize>(x: F) {}\n-   |        ^^^^^^^^^^^^^^^^^^^^^ expected no type arguments\n+   |        ^^^^^^^^^^^^^^^^^^^^^ unexpected type argument\n \n error[E0220]: associated type `Output` not found for `Trait`\n   --> $DIR/unboxed-closure-sugar-wrong-trait.rs:15:24"}]}