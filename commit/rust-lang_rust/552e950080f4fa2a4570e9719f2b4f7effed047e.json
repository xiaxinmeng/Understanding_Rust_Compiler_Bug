{"sha": "552e950080f4fa2a4570e9719f2b4f7effed047e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MmU5NTAwODBmNGZhMmE0NTcwZTk3MTlmMmI0ZjdlZmZlZDA0N2U=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-18T08:49:19Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-18T09:00:53Z"}, "message": "needless_pass_by_value: Whitelist RangeArgument (fixes #2357)", "tree": {"sha": "364e983251b3483f2a0e084730c179e7b296d6f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/364e983251b3483f2a0e084730c179e7b296d6f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/552e950080f4fa2a4570e9719f2b4f7effed047e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/552e950080f4fa2a4570e9719f2b4f7effed047e", "html_url": "https://github.com/rust-lang/rust/commit/552e950080f4fa2a4570e9719f2b4f7effed047e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/552e950080f4fa2a4570e9719f2b4f7effed047e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a30c8a194deedde2ff2326180cfbd38303c2bdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a30c8a194deedde2ff2326180cfbd38303c2bdb", "html_url": "https://github.com/rust-lang/rust/commit/2a30c8a194deedde2ff2326180cfbd38303c2bdb"}], "stats": {"total": 113, "additions": 61, "deletions": 52}, "files": [{"sha": "f5ff0ef8285ad43a0f45eabf6f9326826327e560", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/552e950080f4fa2a4570e9719f2b4f7effed047e/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552e950080f4fa2a4570e9719f2b4f7effed047e/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=552e950080f4fa2a4570e9719f2b4f7effed047e", "patch": "@@ -102,10 +102,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n         // Allow `Borrow` or functions to be taken by value\n         let borrow_trait = need!(get_trait_def_id(cx, &paths::BORROW_TRAIT));\n-        let fn_traits = [\n+        let whitelisted_traits = [\n             need!(cx.tcx.lang_items().fn_trait()),\n             need!(cx.tcx.lang_items().fn_once_trait()),\n             need!(cx.tcx.lang_items().fn_mut_trait()),\n+            need!(get_trait_def_id(cx, &paths::RANGE_ARGUMENT_TRAIT))\n         ];\n \n         let sized_trait = need!(cx.tcx.lang_items().sized_trait());\n@@ -189,7 +190,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                 if !is_self(arg);\n                 if !ty.is_mutable_pointer();\n                 if !is_copy(cx, ty);\n-                if !fn_traits.iter().any(|&t| implements_trait(cx, ty, t, &[]));\n+                if !whitelisted_traits.iter().any(|&t| implements_trait(cx, ty, t, &[]));\n                 if !implements_borrow_trait;\n                 if !all_borrowable_trait;\n "}, {"sha": "20244a19f4f08d9080c62eaf43c15329eda54687", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552e950080f4fa2a4570e9719f2b4f7effed047e/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552e950080f4fa2a4570e9719f2b4f7effed047e/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=552e950080f4fa2a4570e9719f2b4f7effed047e", "patch": "@@ -55,6 +55,7 @@ pub const OPTION_SOME: [&str; 4] = [\"core\", \"option\", \"Option\", \"Some\"];\n pub const PTR_NULL: [&str; 2] = [\"ptr\", \"null\"];\n pub const PTR_NULL_MUT: [&str; 2] = [\"ptr\", \"null_mut\"];\n pub const RANGE: [&str; 3] = [\"core\", \"ops\", \"Range\"];\n+pub const RANGE_ARGUMENT_TRAIT: [&str; 3] = [\"alloc\", \"range\", \"RangeArgument\"];\n pub const RANGE_FROM: [&str; 3] = [\"core\", \"ops\", \"RangeFrom\"];\n pub const RANGE_FROM_STD: [&str; 3] = [\"std\", \"ops\", \"RangeFrom\"];\n pub const RANGE_FULL: [&str; 3] = [\"core\", \"ops\", \"RangeFull\"];"}, {"sha": "bca48c97e4ca63a3470ef1b09c43694fc0bd996f", "filename": "tests/ui/needless_pass_by_value.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/552e950080f4fa2a4570e9719f2b4f7effed047e/tests%2Fui%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552e950080f4fa2a4570e9719f2b4f7effed047e/tests%2Fui%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.rs?ref=552e950080f4fa2a4570e9719f2b4f7effed047e", "patch": "@@ -4,6 +4,8 @@\n #![warn(needless_pass_by_value)]\n #![allow(dead_code, single_match, if_let_redundant_pattern_matching, many_single_char_names)]\n \n+#![feature(collections_range)]\n+\n use std::borrow::Borrow;\n use std::convert::AsRef;\n \n@@ -113,4 +115,9 @@ trait FalsePositive {\n // shouldn't warn on extern funcs\n extern \"C\" fn ext(x: String) -> usize { x.len() }\n \n+// whitelist RangeArgument\n+fn range<T: ::std::collections::range::RangeArgument<usize>>(range: T) {\n+    let _ = range.start();\n+}\n+\n fn main() {}"}, {"sha": "f03fbfee9ff9def6483588c9204326d8fb4236de", "filename": "tests/ui/needless_pass_by_value.stderr", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/552e950080f4fa2a4570e9719f2b4f7effed047e/tests%2Fui%2Fneedless_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/552e950080f4fa2a4570e9719f2b4f7effed047e/tests%2Fui%2Fneedless_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.stderr?ref=552e950080f4fa2a4570e9719f2b4f7effed047e", "patch": "@@ -1,151 +1,151 @@\n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:12:23\n+  --> $DIR/needless_pass_by_value.rs:14:23\n    |\n-12 | fn foo<T: Default>(v: Vec<T>, w: Vec<T>, mut x: Vec<T>, y: Vec<T>) -> Vec<T> {\n+14 | fn foo<T: Default>(v: Vec<T>, w: Vec<T>, mut x: Vec<T>, y: Vec<T>) -> Vec<T> {\n    |                       ^^^^^^ help: consider changing the type to: `&[T]`\n    |\n    = note: `-D needless-pass-by-value` implied by `-D warnings`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:26:11\n+  --> $DIR/needless_pass_by_value.rs:28:11\n    |\n-26 | fn bar(x: String, y: Wrapper) {\n+28 | fn bar(x: String, y: Wrapper) {\n    |           ^^^^^^ help: consider changing the type to: `&str`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:26:22\n+  --> $DIR/needless_pass_by_value.rs:28:22\n    |\n-26 | fn bar(x: String, y: Wrapper) {\n+28 | fn bar(x: String, y: Wrapper) {\n    |                      ^^^^^^^ help: consider taking a reference instead: `&Wrapper`\n    |\n help: consider marking this type as Copy if possible\n-  --> $DIR/needless_pass_by_value.rs:24:1\n+  --> $DIR/needless_pass_by_value.rs:26:1\n    |\n-24 | struct Wrapper(String);\n+26 | struct Wrapper(String);\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:32:71\n+  --> $DIR/needless_pass_by_value.rs:34:71\n    |\n-32 | fn test_borrow_trait<T: Borrow<str>, U: AsRef<str>, V>(t: T, u: U, v: V) {\n+34 | fn test_borrow_trait<T: Borrow<str>, U: AsRef<str>, V>(t: T, u: U, v: V) {\n    |                                                                       ^ help: consider taking a reference instead: `&V`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:44:18\n+  --> $DIR/needless_pass_by_value.rs:46:18\n    |\n-44 | fn test_match(x: Option<Option<String>>, y: Option<Option<String>>) {\n+46 | fn test_match(x: Option<Option<String>>, y: Option<Option<String>>) {\n    |                  ^^^^^^^^^^^^^^^^^^^^^^\n help: consider taking a reference instead\n    |\n-44 | fn test_match(x: &Option<Option<String>>, y: Option<Option<String>>) {\n-45 |     match *x {\n+46 | fn test_match(x: &Option<Option<String>>, y: Option<Option<String>>) {\n+47 |     match *x {\n    |\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:57:24\n+  --> $DIR/needless_pass_by_value.rs:59:24\n    |\n-57 | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n+59 | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n    |                        ^^^^^^^ help: consider taking a reference instead: `&Wrapper`\n    |\n help: consider marking this type as Copy if possible\n-  --> $DIR/needless_pass_by_value.rs:24:1\n+  --> $DIR/needless_pass_by_value.rs:26:1\n    |\n-24 | struct Wrapper(String);\n+26 | struct Wrapper(String);\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:57:36\n+  --> $DIR/needless_pass_by_value.rs:59:36\n    |\n-57 | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n+59 | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n    |                                    ^^^^^^^\n    |\n help: consider marking this type as Copy if possible\n-  --> $DIR/needless_pass_by_value.rs:24:1\n+  --> $DIR/needless_pass_by_value.rs:26:1\n    |\n-24 | struct Wrapper(String);\n+26 | struct Wrapper(String);\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n help: consider taking a reference instead\n    |\n-57 | fn test_destructure(x: Wrapper, y: &Wrapper, z: Wrapper) {\n-58 |     let Wrapper(s) = z; // moved\n-59 |     let Wrapper(ref t) = *y; // not moved\n-60 |     let Wrapper(_) = *y; // still not moved\n+59 | fn test_destructure(x: Wrapper, y: &Wrapper, z: Wrapper) {\n+60 |     let Wrapper(s) = z; // moved\n+61 |     let Wrapper(ref t) = *y; // not moved\n+62 |     let Wrapper(_) = *y; // still not moved\n    |\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:73:49\n+  --> $DIR/needless_pass_by_value.rs:75:49\n    |\n-73 | fn test_blanket_ref<T: Foo, S: Serialize>(_foo: T, _serializable: S) {}\n+75 | fn test_blanket_ref<T: Foo, S: Serialize>(_foo: T, _serializable: S) {}\n    |                                                 ^ help: consider taking a reference instead: `&T`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:75:18\n+  --> $DIR/needless_pass_by_value.rs:77:18\n    |\n-75 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n+77 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                  ^^^^^^ help: consider taking a reference instead: `&String`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:75:29\n+  --> $DIR/needless_pass_by_value.rs:77:29\n    |\n-75 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n+77 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                             ^^^^^^\n help: consider changing the type to\n    |\n-75 | fn issue_2114(s: String, t: &str, u: Vec<i32>, v: Vec<i32>) {\n+77 | fn issue_2114(s: String, t: &str, u: Vec<i32>, v: Vec<i32>) {\n    |                             ^^^^\n help: change `t.clone()` to\n    |\n-77 |     let _ = t.to_string();\n+79 |     let _ = t.to_string();\n    |             ^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:75:40\n+  --> $DIR/needless_pass_by_value.rs:77:40\n    |\n-75 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n+77 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                                        ^^^^^^^^ help: consider taking a reference instead: `&Vec<i32>`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:75:53\n+  --> $DIR/needless_pass_by_value.rs:77:53\n    |\n-75 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n+77 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                                                     ^^^^^^^^\n help: consider changing the type to\n    |\n-75 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: &[i32]) {\n+77 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: &[i32]) {\n    |                                                     ^^^^^^\n help: change `v.clone()` to\n    |\n-79 |     let _ = v.to_owned();\n+81 |     let _ = v.to_owned();\n    |             ^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:87:12\n+  --> $DIR/needless_pass_by_value.rs:89:12\n    |\n-87 |         s: String,\n+89 |         s: String,\n    |            ^^^^^^ help: consider changing the type to: `&str`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:88:12\n+  --> $DIR/needless_pass_by_value.rs:90:12\n    |\n-88 |         t: String,\n+90 |         t: String,\n    |            ^^^^^^ help: consider taking a reference instead: `&String`\n \n error: this argument is passed by value, but not consumed in the function body\n-   --> $DIR/needless_pass_by_value.rs:100:13\n+   --> $DIR/needless_pass_by_value.rs:102:13\n     |\n-100 |         _u: U,\n+102 |         _u: U,\n     |             ^ help: consider taking a reference instead: `&U`\n \n error: this argument is passed by value, but not consumed in the function body\n-   --> $DIR/needless_pass_by_value.rs:101:13\n+   --> $DIR/needless_pass_by_value.rs:103:13\n     |\n-101 |         _s: Self,\n+103 |         _s: Self,\n     |             ^^^^ help: consider taking a reference instead: `&Self`\n     |\n help: consider marking this type as Copy if possible\n-   --> $DIR/needless_pass_by_value.rs:82:1\n+   --> $DIR/needless_pass_by_value.rs:84:1\n     |\n-82  | struct S<T, U>(T, U);\n+84  | struct S<T, U>(T, U);\n     | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 16 previous errors"}]}