{"sha": "0fe1dc6ac214d443369134177940b4d0111e1df6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmZTFkYzZhYzIxNGQ0NDMzNjkxMzQxNzc5NDBiNGQwMTExZTFkZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-22T13:19:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-22T13:19:40Z"}, "message": "Auto merge of #79451 - usbalbin:array_zip, r=m-ou-se\n\nAdded [T; N]::zip()\n\nThis is my first PR to rust so I hope I have done everything right, or at least close :)\n\n---\n\nThis is PR adds the array method `[T; N]::zip()` which, in my mind, is a natural extension to #75212.\n\nMy implementation of `zip()` is mostly just a modified copy-paste of `map()`. Should I keep the comments? Also am I right in assuming there should be no way for the `for`-loop to panic, thus no need for the dropguard seen in the `map()`-function?\n\nThe doc comment is in a similar way a slightly modified copy paste of [`Iterator::zip()`](https://doc.rust-lang.org/beta/std/iter/trait.Iterator.html#method.zip)\n\n`@jplatte` mentioned in [#75490](https://github.com/rust-lang/rust/pull/75490#issuecomment-677790758) `zip_with()`,\n> zip and zip_with seem like they would be useful :)\n\nis this something I should add (assuming there is interest for this PR at all :))", "tree": {"sha": "5e15040b660ff4f9668d3225b4d62b2553e0b833", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e15040b660ff4f9668d3225b4d62b2553e0b833"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fe1dc6ac214d443369134177940b4d0111e1df6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fe1dc6ac214d443369134177940b4d0111e1df6", "html_url": "https://github.com/rust-lang/rust/commit/0fe1dc6ac214d443369134177940b4d0111e1df6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fe1dc6ac214d443369134177940b4d0111e1df6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75e1acb63a642fa78cb8c382d7462b41fa2b56cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/75e1acb63a642fa78cb8c382d7462b41fa2b56cd", "html_url": "https://github.com/rust-lang/rust/commit/75e1acb63a642fa78cb8c382d7462b41fa2b56cd"}, {"sha": "8b3725973a696f8dd77e17127863ec56512322cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b3725973a696f8dd77e17127863ec56512322cb", "html_url": "https://github.com/rust-lang/rust/commit/8b3725973a696f8dd77e17127863ec56512322cb"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "71548bec7aaeeed40612784ef5413548ac8e36ab", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0fe1dc6ac214d443369134177940b4d0111e1df6/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fe1dc6ac214d443369134177940b4d0111e1df6/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=0fe1dc6ac214d443369134177940b4d0111e1df6", "patch": "@@ -463,6 +463,37 @@ impl<T, const N: usize> [T; N] {\n         unsafe { crate::mem::transmute_copy::<_, [U; N]>(&dst) }\n     }\n \n+    /// 'Zips up' two arrays into a single array of pairs.\n+    ///\n+    /// `zip()` returns a new array where every element is a tuple where the\n+    /// first element comes from the first array, and the second element comes\n+    /// from the second array. In other words, it zips two arrays together,\n+    /// into a single one.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(array_zip)]\n+    /// let x = [1, 2, 3];\n+    /// let y = [4, 5, 6];\n+    /// let z = x.zip(y);\n+    /// assert_eq!(z, [(1, 4), (2, 5), (3, 6)]);\n+    /// ```\n+    #[unstable(feature = \"array_zip\", issue = \"80094\")]\n+    pub fn zip<U>(self, rhs: [U; N]) -> [(T, U); N] {\n+        use crate::mem::MaybeUninit;\n+\n+        let mut dst = MaybeUninit::uninit_array::<N>();\n+        for (i, (lhs, rhs)) in IntoIter::new(self).zip(IntoIter::new(rhs)).enumerate() {\n+            dst[i].write((lhs, rhs));\n+        }\n+        // FIXME: Convert to crate::mem::transmute once it works with generics.\n+        // unsafe { crate::mem::transmute::<[MaybeUninit<U>; N], [U; N]>(dst) }\n+        // SAFETY: At this point we've properly initialized the whole array\n+        // and we just need to cast it to the correct type.\n+        unsafe { crate::mem::transmute_copy::<_, [(T, U); N]>(&dst) }\n+    }\n+\n     /// Returns a slice containing the entire array. Equivalent to `&s[..]`.\n     #[unstable(feature = \"array_methods\", issue = \"76118\")]\n     pub fn as_slice(&self) -> &[T] {"}]}