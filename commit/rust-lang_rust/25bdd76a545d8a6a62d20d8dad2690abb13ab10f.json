{"sha": "25bdd76a545d8a6a62d20d8dad2690abb13ab10f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YmRkNzZhNTQ1ZDhhNmE2MmQyMGQ4ZGFkMjY5MGFiYjEzYWIxMGY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-21T19:24:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-21T19:24:19Z"}, "message": "Rollup merge of #64635 - gnzlbg:const_fn_ptr, r=oli-obk\n\nAllow using fn pointers in const fn with unleash miri\n\nThis allows using function pointers in const fns  when `-Zunleash-the-miri-within-you` is enabled.\n\nIf the call to the `const fn` happens in a `const`-context, the function pointer is required to point to a `const fn`:\n\n```rust\nfn non_const_fn() -> i32 { 42 }\nconst fn const_fn() -> i32 { 42 }\nconst fn foo(x: fn() -> i32) -> i32 { x() }\n\nlet x: i32 = foo(non_const_fn_ptr); // OK\nlet y: i32 = foo(const_fn_ptr); // OK\nconst X: i32 = foo(non_const_fn_ptr); // ERROR: `non_const_fn` is not `const fn`\nconst Y: i32 = foo(const_fn_ptr); // OK\n```\n\nr? @oli-obk", "tree": {"sha": "023d9692d5c1574a1eea33eb787c9655f313cdd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/023d9692d5c1574a1eea33eb787c9655f313cdd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25bdd76a545d8a6a62d20d8dad2690abb13ab10f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdhnjjCRBK7hj4Ov3rIwAAdHIIAGLalyioMkiMWMv+RPLihwIL\n0hLRtr7hoqHz41/TKbzACZz1og4yoimgLYymrieSIqwW2ybD6PUKPEVd6yxGQsNd\n2HqprwYv94jmg/S9IsDr40g9vo0gJh9QRq6LeO2qqtSPqx3bvITm6sQ3zP7dEKxh\nDHR3ibczyyeeS+i9zxVWE+ncKKYBVA7ugD4fQ7d/s80JRgL7tMSheHxAuggTR+a7\nNySXBRHFNu6jlKzj3DLWJyk35a67N7H2Wb/v1H9QIJepnNTVewq+VnuqI5sG7z6n\nOHf96fPUOG7kDrBCQwOCI9njTXvvJSZlL2QOFKfIt+Gwa2kzYVYxaUgEJ64mkxQ=\n=ogXS\n-----END PGP SIGNATURE-----\n", "payload": "tree 023d9692d5c1574a1eea33eb787c9655f313cdd7\nparent 05d7ae25bf0efe7a42df6994eeceee5bff19cf3e\nparent 9d4053f6921f3259076e2d88f983f9666a78ef4b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569093859 +0200\ncommitter GitHub <noreply@github.com> 1569093859 +0200\n\nRollup merge of #64635 - gnzlbg:const_fn_ptr, r=oli-obk\n\nAllow using fn pointers in const fn with unleash miri\n\nThis allows using function pointers in const fns  when `-Zunleash-the-miri-within-you` is enabled.\n\nIf the call to the `const fn` happens in a `const`-context, the function pointer is required to point to a `const fn`:\n\n```rust\nfn non_const_fn() -> i32 { 42 }\nconst fn const_fn() -> i32 { 42 }\nconst fn foo(x: fn() -> i32) -> i32 { x() }\n\nlet x: i32 = foo(non_const_fn_ptr); // OK\nlet y: i32 = foo(const_fn_ptr); // OK\nconst X: i32 = foo(non_const_fn_ptr); // ERROR: `non_const_fn` is not `const fn`\nconst Y: i32 = foo(const_fn_ptr); // OK\n```\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25bdd76a545d8a6a62d20d8dad2690abb13ab10f", "html_url": "https://github.com/rust-lang/rust/commit/25bdd76a545d8a6a62d20d8dad2690abb13ab10f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25bdd76a545d8a6a62d20d8dad2690abb13ab10f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05d7ae25bf0efe7a42df6994eeceee5bff19cf3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/05d7ae25bf0efe7a42df6994eeceee5bff19cf3e", "html_url": "https://github.com/rust-lang/rust/commit/05d7ae25bf0efe7a42df6994eeceee5bff19cf3e"}, {"sha": "9d4053f6921f3259076e2d88f983f9666a78ef4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d4053f6921f3259076e2d88f983f9666a78ef4b", "html_url": "https://github.com/rust-lang/rust/commit/9d4053f6921f3259076e2d88f983f9666a78ef4b"}], "stats": {"total": 310, "additions": 308, "deletions": 2}, "files": [{"sha": "795721f3b3f28637a1fd308ca3f6503ead91764a", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/25bdd76a545d8a6a62d20d8dad2690abb13ab10f/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bdd76a545d8a6a62d20d8dad2690abb13ab10f/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=25bdd76a545d8a6a62d20d8dad2690abb13ab10f", "patch": "@@ -1407,10 +1407,17 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                     }\n                 }\n                 ty::FnPtr(_) => {\n-                    if self.mode.requires_const_checking() {\n+                    let unleash_miri = self\n+                        .tcx\n+                        .sess\n+                        .opts\n+                        .debugging_opts\n+                        .unleash_the_miri_inside_of_you;\n+                    if self.mode.requires_const_checking() && !unleash_miri {\n                         let mut err = self.tcx.sess.struct_span_err(\n                             self.span,\n-                            &format!(\"function pointers are not allowed in const fn\"));\n+                            \"function pointers are not allowed in const fn\"\n+                        );\n                         err.emit();\n                     }\n                 }"}, {"sha": "498f801db81b88ad7e65e326c3bb29ed6798adb3", "filename": "src/test/ui/consts/const-eval/const_fn_ptr.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/25bdd76a545d8a6a62d20d8dad2690abb13ab10f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bdd76a545d8a6a62d20d8dad2690abb13ab10f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs?ref=25bdd76a545d8a6a62d20d8dad2690abb13ab10f", "patch": "@@ -0,0 +1,37 @@\n+// run-pass\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+#![feature(const_fn)]\n+\n+fn double(x: usize) -> usize { x * 2 }\n+const fn double_const(x: usize) -> usize { x * 2 }\n+\n+const X: fn(usize) -> usize = double;\n+const X_const: fn(usize) -> usize = double_const;\n+\n+const fn bar(x: usize) -> usize {\n+    X(x)\n+}\n+\n+const fn bar_const(x: usize) -> usize {\n+    X_const(x)\n+}\n+\n+const fn foo(x: fn(usize) -> usize, y: usize)  -> usize {\n+    x(y)\n+}\n+\n+fn main() {\n+    const Y: usize = bar_const(2);\n+    assert_eq!(Y, 4);\n+    let y = bar_const(2);\n+    assert_eq!(y, 4);\n+    let y = bar(2);\n+    assert_eq!(y, 4);\n+\n+    const Z: usize = foo(double_const, 2);\n+    assert_eq!(Z, 4);\n+    let z = foo(double_const, 2);\n+    assert_eq!(z, 4);\n+    let z = foo(double, 2);\n+    assert_eq!(z, 4);\n+}"}, {"sha": "41452ee59eb941ae700203a96e62b54f0fc2d0b4", "filename": "src/test/ui/consts/const-eval/const_fn_ptr.stderr", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/25bdd76a545d8a6a62d20d8dad2690abb13ab10f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25bdd76a545d8a6a62d20d8dad2690abb13ab10f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr?ref=25bdd76a545d8a6a62d20d8dad2690abb13ab10f", "patch": "@@ -0,0 +1,152 @@\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:25:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:25:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:25:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:27:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:27:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:27:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:29:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:29:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:29:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:32:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:32:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:32:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:34:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:34:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:34:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:36:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:36:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:36:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: constant `X_const` should have an upper case name\n+  --> $DIR/const_fn_ptr.rs:9:7\n+   |\n+LL | const X_const: fn(usize) -> usize = double_const;\n+   |       ^^^^^^^ help: convert the identifier to upper case: `X_CONST`\n+   |\n+   = note: `#[warn(non_upper_case_globals)]` on by default\n+"}, {"sha": "14bd6558e7f898fb4d575ccdc7319c3db0ee9b24", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/25bdd76a545d8a6a62d20d8dad2690abb13ab10f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bdd76a545d8a6a62d20d8dad2690abb13ab10f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs?ref=25bdd76a545d8a6a62d20d8dad2690abb13ab10f", "patch": "@@ -0,0 +1,13 @@\n+// run-pass\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+#![feature(const_fn)]\n+#![allow(unused)]\n+\n+fn double(x: usize) -> usize { x * 2 }\n+const X: fn(usize) -> usize = double;\n+\n+const fn bar(x: usize) -> usize {\n+    X(x) // FIXME: this should error someday\n+}\n+\n+fn main() {}"}, {"sha": "74c60f9a2a58dd20f96899bfb12e55d6be17f917", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/25bdd76a545d8a6a62d20d8dad2690abb13ab10f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bdd76a545d8a6a62d20d8dad2690abb13ab10f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs?ref=25bdd76a545d8a6a62d20d8dad2690abb13ab10f", "patch": "@@ -0,0 +1,26 @@\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+#![feature(const_fn)]\n+#![allow(const_err)]\n+\n+fn double(x: usize) -> usize { x * 2 }\n+const X: fn(usize) -> usize = double;\n+\n+const fn bar(x: fn(usize) -> usize, y: usize) -> usize {\n+    x(y)\n+}\n+\n+const Y: usize = bar(X, 2); // FIXME: should fail to typeck someday\n+const Z: usize = bar(double, 2); // FIXME: should fail to typeck someday\n+\n+fn main() {\n+    assert_eq!(Y, 4);\n+    //~^ ERROR evaluation of constant expression failed\n+    //~^^ WARN skipping const checks\n+    //~^^^ WARN skipping const checks\n+    //~^^^^ WARN skipping const checks\n+    assert_eq!(Z, 4);\n+    //~^ ERROR evaluation of constant expression failed\n+    //~^^ WARN skipping const checks\n+    //~^^^ WARN skipping const checks\n+    //~^^^^ WARN skipping const checks\n+}"}, {"sha": "611cc5313c0574bebc5098909cc88d459f6f283a", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/25bdd76a545d8a6a62d20d8dad2690abb13ab10f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25bdd76a545d8a6a62d20d8dad2690abb13ab10f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=25bdd76a545d8a6a62d20d8dad2690abb13ab10f", "patch": "@@ -0,0 +1,71 @@\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:16:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:16:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:16:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:21:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:21:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:21:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0080]: evaluation of constant expression failed\n+  --> $DIR/const_fn_ptr_fail2.rs:16:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^-^^^^^\n+   |                |\n+   |                referenced constant has errors\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0080]: evaluation of constant expression failed\n+  --> $DIR/const_fn_ptr_fail2.rs:21:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^-^^^^^\n+   |                |\n+   |                referenced constant has errors\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}]}