{"sha": "d1ec6c22d1895eb42fbf20bd9b577b6a721c6b5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZWM2YzIyZDE4OTVlYjQyZmJmMjBiZDliNTc3YjZhNzIxYzZiNWY=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-07-05T22:10:40Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-07-08T06:55:55Z"}, "message": "Remove Step::steps_between, rename steps_between_by_one to steps_between", "tree": {"sha": "59e135f2328d41c2b6467c361e3a87576eead4e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59e135f2328d41c2b6467c361e3a87576eead4e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1ec6c22d1895eb42fbf20bd9b577b6a721c6b5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ec6c22d1895eb42fbf20bd9b577b6a721c6b5f", "html_url": "https://github.com/rust-lang/rust/commit/d1ec6c22d1895eb42fbf20bd9b577b6a721c6b5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1ec6c22d1895eb42fbf20bd9b577b6a721c6b5f/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b2f40dfdf5ff2bcbcc8105246a8c32054c40cb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b2f40dfdf5ff2bcbcc8105246a8c32054c40cb7", "html_url": "https://github.com/rust-lang/rust/commit/4b2f40dfdf5ff2bcbcc8105246a8c32054c40cb7"}], "stats": {"total": 61, "additions": 10, "deletions": 51}, "files": [{"sha": "4d6eca06db2a03bcdc4ea9544ee3d2e41131f651", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 10, "deletions": 51, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/d1ec6c22d1895eb42fbf20bd9b577b6a721c6b5f/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ec6c22d1895eb42fbf20bd9b577b6a721c6b5f/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=d1ec6c22d1895eb42fbf20bd9b577b6a721c6b5f", "patch": "@@ -27,10 +27,7 @@ pub trait Step: PartialOrd + Sized {\n     ///\n     /// Returns `None` if it is not possible to calculate `steps_between`\n     /// without overflow.\n-    fn steps_between(start: &Self, end: &Self, by: &Self) -> Option<usize>;\n-\n-    /// Same as `steps_between`, but with a `by` of 1\n-    fn steps_between_by_one(start: &Self, end: &Self) -> Option<usize>;\n+    fn steps_between(start: &Self, end: &Self) -> Option<usize>;\n \n     /// Replaces this step with `1`, returning itself\n     fn replace_one(&mut self) -> Self;\n@@ -53,17 +50,10 @@ macro_rules! step_impl_unsigned {\n         impl Step for $t {\n             #[inline]\n             #[allow(trivial_numeric_casts)]\n-            fn steps_between(start: &$t, end: &$t, by: &$t) -> Option<usize> {\n-                if *by == 0 { return None; }\n+            fn steps_between(start: &$t, end: &$t) -> Option<usize> {\n                 if *start < *end {\n                     // Note: We assume $t <= usize here\n-                    let diff = (*end - *start) as usize;\n-                    let by = *by as usize;\n-                    if diff % by > 0 {\n-                        Some(diff / by + 1)\n-                    } else {\n-                        Some(diff / by)\n-                    }\n+                    Some((*end - *start) as usize)\n                 } else {\n                     Some(0)\n                 }\n@@ -88,11 +78,6 @@ macro_rules! step_impl_unsigned {\n             fn sub_one(&self) -> Self {\n                 Sub::sub(*self, 1)\n             }\n-\n-            #[inline]\n-            fn steps_between_by_one(start: &Self, end: &Self) -> Option<usize> {\n-                Self::steps_between(start, end, &1)\n-            }\n         }\n     )*)\n }\n@@ -104,30 +89,14 @@ macro_rules! step_impl_signed {\n         impl Step for $t {\n             #[inline]\n             #[allow(trivial_numeric_casts)]\n-            fn steps_between(start: &$t, end: &$t, by: &$t) -> Option<usize> {\n-                if *by == 0 { return None; }\n-                let diff: usize;\n-                let by_u: usize;\n-                if *by > 0 {\n-                    if *start >= *end {\n-                        return Some(0);\n-                    }\n+            fn steps_between(start: &$t, end: &$t) -> Option<usize> {\n+                if *start < *end {\n                     // Note: We assume $t <= isize here\n                     // Use .wrapping_sub and cast to usize to compute the\n                     // difference that may not fit inside the range of isize.\n-                    diff = (*end as isize).wrapping_sub(*start as isize) as usize;\n-                    by_u = *by as usize;\n-                } else {\n-                    if *start <= *end {\n-                        return Some(0);\n-                    }\n-                    diff = (*start as isize).wrapping_sub(*end as isize) as usize;\n-                    by_u = (*by as isize).wrapping_mul(-1) as usize;\n-                }\n-                if diff % by_u > 0 {\n-                    Some(diff / by_u + 1)\n+                    Some((*end as isize).wrapping_sub(*start as isize) as usize)\n                 } else {\n-                    Some(diff / by_u)\n+                    Some(0)\n                 }\n             }\n \n@@ -150,11 +119,6 @@ macro_rules! step_impl_signed {\n             fn sub_one(&self) -> Self {\n                 Sub::sub(*self, 1)\n             }\n-\n-            #[inline]\n-            fn steps_between_by_one(start: &Self, end: &Self) -> Option<usize> {\n-                Self::steps_between(start, end, &1)\n-            }\n         }\n     )*)\n }\n@@ -166,7 +130,7 @@ macro_rules! step_impl_no_between {\n                    issue = \"42168\")]\n         impl Step for $t {\n             #[inline]\n-            fn steps_between(_a: &$t, _b: &$t, _by: &$t) -> Option<usize> {\n+            fn steps_between(_start: &Self, _end: &Self) -> Option<usize> {\n                 None\n             }\n \n@@ -189,11 +153,6 @@ macro_rules! step_impl_no_between {\n             fn sub_one(&self) -> Self {\n                 Sub::sub(*self, 1)\n             }\n-\n-            #[inline]\n-            fn steps_between_by_one(start: &Self, end: &Self) -> Option<usize> {\n-                Self::steps_between(start, end, &1)\n-            }\n         }\n     )*)\n }\n@@ -259,7 +218,7 @@ impl<A: Step> Iterator for ops::Range<A> {\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        match Step::steps_between_by_one(&self.start, &self.end) {\n+        match Step::steps_between(&self.start, &self.end) {\n             Some(hint) => (hint, Some(hint)),\n             None => (0, None)\n         }\n@@ -344,7 +303,7 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n             return (0, Some(0));\n         }\n \n-        match Step::steps_between_by_one(&self.start, &self.end) {\n+        match Step::steps_between(&self.start, &self.end) {\n             Some(hint) => (hint.saturating_add(1), hint.checked_add(1)),\n             None => (0, None),\n         }"}]}