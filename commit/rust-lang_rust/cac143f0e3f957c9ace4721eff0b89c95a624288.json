{"sha": "cac143f0e3f957c9ace4721eff0b89c95a624288", "node_id": "C_kwDOAAsO6NoAKGNhYzE0M2YwZTNmOTU3YzlhY2U0NzIxZWZmMGI4OWM5NWE2MjQyODg", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-12T18:45:43Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-19T19:13:45Z"}, "message": "Extend and use `hir::Node::body_id`", "tree": {"sha": "87bc90b40f3ccf4a41d8c3dafb42b32dbfc40ac5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87bc90b40f3ccf4a41d8c3dafb42b32dbfc40ac5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cac143f0e3f957c9ace4721eff0b89c95a624288", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cac143f0e3f957c9ace4721eff0b89c95a624288", "html_url": "https://github.com/rust-lang/rust/commit/cac143f0e3f957c9ace4721eff0b89c95a624288", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cac143f0e3f957c9ace4721eff0b89c95a624288/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "102c0af5a75354acb21ebceb06765ae8d54a8270", "url": "https://api.github.com/repos/rust-lang/rust/commits/102c0af5a75354acb21ebceb06765ae8d54a8270", "html_url": "https://github.com/rust-lang/rust/commit/102c0af5a75354acb21ebceb06765ae8d54a8270"}], "stats": {"total": 191, "additions": 102, "deletions": 89}, "files": [{"sha": "49e74a1b000d442d14d5b32db1b52f494050b269", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cac143f0e3f957c9ace4721eff0b89c95a624288/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac143f0e3f957c9ace4721eff0b89c95a624288/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=cac143f0e3f957c9ace4721eff0b89c95a624288", "patch": "@@ -1306,26 +1306,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let local_ty = self.body.local_decls[local].ty;\n \n         // Get the body the error happens in\n-        let &body_id =\n-            if let hir::Node::Item(hir::Item { kind, .. }) = hir.get(self.mir_hir_id())\n-                && let hir::ItemKind::Static(_, _, body_id)\n-                     | hir::ItemKind::Const(_, body_id)\n-                     | hir::ItemKind::Fn(_, _, body_id) = kind\n-            {\n-                body_id\n-            } else if let hir::Node::TraitItem(hir::TraitItem { kind, .. }) = hir.get(self.mir_hir_id())\n-                && let hir::TraitItemKind::Const(_, Some(body_id))\n-                     | hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(body_id)) = kind\n-            {\n-                body_id\n-            }else if let hir::Node::ImplItem(hir::ImplItem { kind, .. }) = hir.get(self.mir_hir_id())\n-                && let hir::ImplItemKind::Const(_, body_id)\n-                     | hir::ImplItemKind::Fn(_, body_id) = kind\n-            {\n-                body_id\n-            } else {\n-                return\n-            };\n+        let Some(body_id) = hir.get(self.mir_hir_id()).body_id() else { return };\n \n         let body_expr = hir.body(body_id).value;\n "}, {"sha": "80af6951900db61aea6d63c39a739234184e858f", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cac143f0e3f957c9ace4721eff0b89c95a624288/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac143f0e3f957c9ace4721eff0b89c95a624288/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=cac143f0e3f957c9ace4721eff0b89c95a624288", "patch": "@@ -3529,12 +3529,20 @@ impl<'hir> OwnerNode<'hir> {\n \n     pub fn body_id(&self) -> Option<BodyId> {\n         match self {\n-            OwnerNode::TraitItem(TraitItem {\n-                kind: TraitItemKind::Fn(_, TraitFn::Provided(body_id)),\n+            OwnerNode::Item(Item {\n+                kind:\n+                    ItemKind::Static(_, _, body) | ItemKind::Const(_, body) | ItemKind::Fn(_, _, body),\n                 ..\n             })\n-            | OwnerNode::ImplItem(ImplItem { kind: ImplItemKind::Fn(_, body_id), .. })\n-            | OwnerNode::Item(Item { kind: ItemKind::Fn(.., body_id), .. }) => Some(*body_id),\n+            | OwnerNode::TraitItem(TraitItem {\n+                kind:\n+                    TraitItemKind::Fn(_, TraitFn::Provided(body)) | TraitItemKind::Const(_, Some(body)),\n+                ..\n+            })\n+            | OwnerNode::ImplItem(ImplItem {\n+                kind: ImplItemKind::Fn(_, body) | ImplItemKind::Const(_, body),\n+                ..\n+            }) => Some(*body),\n             _ => None,\n         }\n     }\n@@ -3729,12 +3737,27 @@ impl<'hir> Node<'hir> {\n \n     pub fn body_id(&self) -> Option<BodyId> {\n         match self {\n-            Node::TraitItem(TraitItem {\n-                kind: TraitItemKind::Fn(_, TraitFn::Provided(body_id)),\n+            Node::Item(Item {\n+                kind:\n+                    ItemKind::Static(_, _, body) | ItemKind::Const(_, body) | ItemKind::Fn(_, _, body),\n+                ..\n+            })\n+            | Node::TraitItem(TraitItem {\n+                kind:\n+                    TraitItemKind::Fn(_, TraitFn::Provided(body)) | TraitItemKind::Const(_, Some(body)),\n+                ..\n+            })\n+            | Node::ImplItem(ImplItem {\n+                kind: ImplItemKind::Fn(_, body) | ImplItemKind::Const(_, body),\n                 ..\n             })\n-            | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(_, body_id), .. })\n-            | Node::Item(Item { kind: ItemKind::Fn(.., body_id), .. }) => Some(*body_id),\n+            | Node::Expr(Expr {\n+                kind:\n+                    ExprKind::ConstBlock(AnonConst { body, .. })\n+                    | ExprKind::Closure(Closure { body, .. })\n+                    | ExprKind::Repeat(_, ArrayLen::Body(AnonConst { body, .. })),\n+                ..\n+            }) => Some(*body),\n             _ => None,\n         }\n     }"}, {"sha": "747c54b669440e8eb5d9445c6ddbc0cd173e8987", "filename": "tests/ui/async-await/feature-self-return-type.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fasync-await%2Ffeature-self-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fasync-await%2Ffeature-self-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ffeature-self-return-type.stderr?ref=cac143f0e3f957c9ace4721eff0b89c95a624288", "patch": "@@ -4,6 +4,7 @@ error[E0597]: `bar` does not live long enough\n LL |     let x = {\n    |         - borrow later stored here\n LL |         let bar = 22;\n+   |             --- binding `bar` declared here\n LL |         Foo::new(&bar).await\n    |                  ^^^^ borrowed value does not live long enough\n LL |"}, {"sha": "ac85ed2887abc89b33b6ed791e2ae088540d5927", "filename": "tests/ui/async-await/issue-61949-self-return-type.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr?ref=cac143f0e3f957c9ace4721eff0b89c95a624288", "patch": "@@ -13,6 +13,7 @@ error[E0597]: `bar` does not live long enough\n LL |     let x = {\n    |         - borrow later stored here\n LL |         let bar = 22;\n+   |             --- binding `bar` declared here\n LL |         Foo::new(&bar).await\n    |                  ^^^^ borrowed value does not live long enough\n LL |"}, {"sha": "ff1dc29ccfdd0382c965370ec671c489e02473fe", "filename": "tests/ui/consts/const-eval/generic-slice.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fconsts%2Fconst-eval%2Fgeneric-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fconsts%2Fconst-eval%2Fgeneric-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fgeneric-slice.stderr?ref=cac143f0e3f957c9ace4721eff0b89c95a624288", "patch": "@@ -4,6 +4,8 @@ error[E0597]: `x` does not live long enough\n LL | impl<'a, T: 'static> Generic<'a, T> {\n    |      -- lifetime `'a` defined here\n ...\n+LL |         let x: &'static [T] = &[];\n+   |             - binding `x` declared here\n LL |         &x\n    |         ^^\n    |         |\n@@ -16,6 +18,8 @@ LL |     };\n error[E0597]: `x` does not live long enough\n   --> $DIR/generic-slice.rs:27:5\n    |\n+LL |     let x: &[_] = &[];\n+   |         - binding `x` declared here\n LL |     &x\n    |     ^^\n    |     |"}, {"sha": "b2a5b92ed0f97a692f6ad44c4b94c780e816e123", "filename": "tests/ui/generator/auto-trait-regions.drop_tracking.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fgenerator%2Fauto-trait-regions.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fgenerator%2Fauto-trait-regions.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fauto-trait-regions.drop_tracking.stderr?ref=cac143f0e3f957c9ace4721eff0b89c95a624288", "patch": "@@ -9,7 +9,11 @@ LL |         let a = A(&mut true, &mut true, No);\n LL |         assert_foo(a);\n    |                    - borrow later used here\n    |\n-   = note: consider using a `let` binding to create a longer lived value\n+help: consider using a `let` binding to create a longer lived value\n+   |\n+LL ~         let binding = true;\n+LL ~         let a = A(&mut binding, &mut true, No);\n+   |\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/auto-trait-regions.rs:48:35\n@@ -22,7 +26,11 @@ LL |         let a = A(&mut true, &mut true, No);\n LL |         assert_foo(a);\n    |                    - borrow later used here\n    |\n-   = note: consider using a `let` binding to create a longer lived value\n+help: consider using a `let` binding to create a longer lived value\n+   |\n+LL ~         let binding = true;\n+LL ~         let a = A(&mut true, &mut binding, No);\n+   |\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/auto-trait-regions.rs:34:5"}, {"sha": "b2a5b92ed0f97a692f6ad44c4b94c780e816e123", "filename": "tests/ui/generator/auto-trait-regions.drop_tracking_mir.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fgenerator%2Fauto-trait-regions.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fgenerator%2Fauto-trait-regions.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fauto-trait-regions.drop_tracking_mir.stderr?ref=cac143f0e3f957c9ace4721eff0b89c95a624288", "patch": "@@ -9,7 +9,11 @@ LL |         let a = A(&mut true, &mut true, No);\n LL |         assert_foo(a);\n    |                    - borrow later used here\n    |\n-   = note: consider using a `let` binding to create a longer lived value\n+help: consider using a `let` binding to create a longer lived value\n+   |\n+LL ~         let binding = true;\n+LL ~         let a = A(&mut binding, &mut true, No);\n+   |\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/auto-trait-regions.rs:48:35\n@@ -22,7 +26,11 @@ LL |         let a = A(&mut true, &mut true, No);\n LL |         assert_foo(a);\n    |                    - borrow later used here\n    |\n-   = note: consider using a `let` binding to create a longer lived value\n+help: consider using a `let` binding to create a longer lived value\n+   |\n+LL ~         let binding = true;\n+LL ~         let a = A(&mut true, &mut binding, No);\n+   |\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/auto-trait-regions.rs:34:5"}, {"sha": "b2a5b92ed0f97a692f6ad44c4b94c780e816e123", "filename": "tests/ui/generator/auto-trait-regions.no_drop_tracking.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fgenerator%2Fauto-trait-regions.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fgenerator%2Fauto-trait-regions.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fauto-trait-regions.no_drop_tracking.stderr?ref=cac143f0e3f957c9ace4721eff0b89c95a624288", "patch": "@@ -9,7 +9,11 @@ LL |         let a = A(&mut true, &mut true, No);\n LL |         assert_foo(a);\n    |                    - borrow later used here\n    |\n-   = note: consider using a `let` binding to create a longer lived value\n+help: consider using a `let` binding to create a longer lived value\n+   |\n+LL ~         let binding = true;\n+LL ~         let a = A(&mut binding, &mut true, No);\n+   |\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/auto-trait-regions.rs:48:35\n@@ -22,7 +26,11 @@ LL |         let a = A(&mut true, &mut true, No);\n LL |         assert_foo(a);\n    |                    - borrow later used here\n    |\n-   = note: consider using a `let` binding to create a longer lived value\n+help: consider using a `let` binding to create a longer lived value\n+   |\n+LL ~         let binding = true;\n+LL ~         let a = A(&mut true, &mut binding, No);\n+   |\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/auto-trait-regions.rs:34:5"}, {"sha": "165748d44305a733353549dbe6ba28d15de56a46", "filename": "tests/ui/generator/auto-trait-regions.stderr", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/102c0af5a75354acb21ebceb06765ae8d54a8270/tests%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/102c0af5a75354acb21ebceb06765ae8d54a8270/tests%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fauto-trait-regions.stderr?ref=102c0af5a75354acb21ebceb06765ae8d54a8270", "patch": "@@ -1,47 +0,0 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/auto-trait-regions.rs:48:24\n-   |\n-LL |         let a = A(&mut true, &mut true, No);\n-   |                        ^^^^                - temporary value is freed at the end of this statement\n-   |                        |\n-   |                        creates a temporary value which is freed while still in use\n-...\n-LL |         assert_foo(a);\n-   |                    - borrow later used here\n-   |\n-   = note: consider using a `let` binding to create a longer lived value\n-\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/auto-trait-regions.rs:48:35\n-   |\n-LL |         let a = A(&mut true, &mut true, No);\n-   |                                   ^^^^     - temporary value is freed at the end of this statement\n-   |                                   |\n-   |                                   creates a temporary value which is freed while still in use\n-...\n-LL |         assert_foo(a);\n-   |                    - borrow later used here\n-   |\n-   = note: consider using a `let` binding to create a longer lived value\n-\n-error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:34:5\n-   |\n-LL |     assert_foo(gen);\n-   |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n-   |\n-   = note: `&'0 OnlyFooIfStaticRef` must implement `Foo`, for any lifetime `'0`...\n-   = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`\n-\n-error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:54:5\n-   |\n-LL |     assert_foo(gen);\n-   |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n-   |\n-   = note: `Foo` would have to be implemented for the type `A<'0, '1>`, for any two lifetimes `'0` and `'1`...\n-   = note: ...but `Foo` is actually implemented for the type `A<'_, '2>`, for some specific lifetime `'2`\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0716`."}, {"sha": "3879f35505c2e5b2da08314fc78a6ff23e361b14", "filename": "tests/ui/lifetimes/issue-69314.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Flifetimes%2Fissue-69314.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Flifetimes%2Fissue-69314.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-69314.stderr?ref=cac143f0e3f957c9ace4721eff0b89c95a624288", "patch": "@@ -12,6 +12,8 @@ LL |     async fn f2(m: Msg<'_>) {}\n error[E0597]: `buf` does not live long enough\n   --> $DIR/issue-69314.rs:14:19\n    |\n+LL |         let mut buf = [0; 512];\n+   |             ------- binding `buf` declared here\n LL |         let m2 = &buf[..];\n    |                   ^^^ borrowed value does not live long enough\n LL |         let m = Self::g(m2).await;"}, {"sha": "900e7e2539089ed34f80c148a47dbc2a5f7a83f0", "filename": "tests/ui/nll/user-annotations/adt-brace-enums.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.stderr?ref=cac143f0e3f957c9ace4721eff0b89c95a624288", "patch": "@@ -31,7 +31,9 @@ error[E0597]: `c` does not live long enough\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n-...\n+LL |     let _closure = || {\n+LL |         let c = 66;\n+   |             - binding `c` declared here\n LL |         SomeEnum::SomeVariant::<&'a u32> { t: &c };\n    |                                               ^^\n    |                                               |"}, {"sha": "d61643dc6ed8ccda6a135855d0f7450bfc0db049", "filename": "tests/ui/nll/user-annotations/adt-brace-structs.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.stderr?ref=cac143f0e3f957c9ace4721eff0b89c95a624288", "patch": "@@ -31,7 +31,9 @@ error[E0597]: `c` does not live long enough\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n-...\n+LL |     let _closure = || {\n+LL |         let c = 66;\n+   |             - binding `c` declared here\n LL |         SomeStruct::<&'a u32> { t: &c };\n    |                                    ^^\n    |                                    |"}, {"sha": "5b385feeedc728a7ac77c3aa8ec030223f6d8727", "filename": "tests/ui/nll/user-annotations/adt-nullary-enums.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr?ref=cac143f0e3f957c9ace4721eff0b89c95a624288", "patch": "@@ -34,7 +34,10 @@ error[E0597]: `c` does not live long enough\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n-...\n+LL |     let _closure = || {\n+LL |         let c = 66;\n+   |             - binding `c` declared here\n+LL |         combine(\n LL |             SomeEnum::SomeVariant(Cell::new(&c)),\n    |                                   ----------^^-\n    |                                   |         |"}, {"sha": "766da9ec00c332b01efbc07e7d97ec8aac3fbdd1", "filename": "tests/ui/nll/user-annotations/adt-tuple-enums.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.stderr?ref=cac143f0e3f957c9ace4721eff0b89c95a624288", "patch": "@@ -31,7 +31,9 @@ error[E0597]: `c` does not live long enough\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n-...\n+LL |     let _closure = || {\n+LL |         let c = 66;\n+   |             - binding `c` declared here\n LL |         SomeEnum::SomeVariant::<&'a u32>(&c);\n    |                                          ^^\n    |                                          |"}, {"sha": "2084697e7e26d8ffc8b7ea060675e6bc08e62ed1", "filename": "tests/ui/nll/user-annotations/adt-tuple-struct-calls.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct-calls.stderr?ref=cac143f0e3f957c9ace4721eff0b89c95a624288", "patch": "@@ -33,7 +33,10 @@ error[E0597]: `c` does not live long enough\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n-...\n+LL |     let _closure = || {\n+LL |         let c = 66;\n+   |             - binding `c` declared here\n+LL |         let f = SomeStruct::<&'a u32>;\n LL |         f(&c);\n    |         --^^-\n    |         | |\n@@ -47,7 +50,9 @@ error[E0597]: `c` does not live long enough\n    |\n LL |     let f = SomeStruct::<&'a u32>;\n    |         - lifetime `'1` appears in the type of `f`\n-...\n+LL |     let _closure = || {\n+LL |         let c = 66;\n+   |             - binding `c` declared here\n LL |         f(&c);\n    |         --^^-\n    |         | |"}, {"sha": "c7480f52963116c32127a795da816594cfd88031", "filename": "tests/ui/nll/user-annotations/adt-tuple-struct.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.stderr?ref=cac143f0e3f957c9ace4721eff0b89c95a624288", "patch": "@@ -31,7 +31,9 @@ error[E0597]: `c` does not live long enough\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n-...\n+LL |     let _closure = || {\n+LL |         let c = 66;\n+   |             - binding `c` declared here\n LL |         SomeStruct::<&'a u32>(&c);\n    |                               ^^\n    |                               |"}, {"sha": "abaa35e9516ec682723acecec09d0a40513e8cd0", "filename": "tests/ui/nll/user-annotations/fns.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fnll%2Fuser-annotations%2Ffns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fnll%2Fuser-annotations%2Ffns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Ffns.stderr?ref=cac143f0e3f957c9ace4721eff0b89c95a624288", "patch": "@@ -31,7 +31,9 @@ error[E0597]: `c` does not live long enough\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n-...\n+LL |     let _closure = || {\n+LL |         let c = 66;\n+   |             - binding `c` declared here\n LL |         some_fn::<&'a u32>(&c);\n    |         -------------------^^-\n    |         |                  |"}, {"sha": "b4d1ac042a2326952245a5a6516f859dc39e1a11", "filename": "tests/ui/nll/user-annotations/method-call.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.stderr?ref=cac143f0e3f957c9ace4721eff0b89c95a624288", "patch": "@@ -33,6 +33,8 @@ error[E0597]: `c` does not live long enough\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n ...\n+LL |         let c = 66;\n+   |             - binding `c` declared here\n LL |         a.method::<&'a u32>(b,  &c);\n    |         ------------------------^^-\n    |         |                       |"}, {"sha": "4dd39e108277ed4f6740a79148bb847d19d13b11", "filename": "tests/ui/nll/user-annotations/method-ufcs-3.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.stderr?ref=cac143f0e3f957c9ace4721eff0b89c95a624288", "patch": "@@ -33,6 +33,8 @@ error[E0597]: `c` does not live long enough\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n ...\n+LL |         let c = 66;\n+   |             - binding `c` declared here\n LL |         <_ as Bazoom<_>>::method::<&'a u32>(&a, b, &c);\n    |         -------------------------------------------^^-\n    |         |                                          |"}, {"sha": "035be2b1202fded586d12b74ec1326f631b303ed", "filename": "tests/ui/static/issue-18118.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fstatic%2Fissue-18118.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac143f0e3f957c9ace4721eff0b89c95a624288/tests%2Fui%2Fstatic%2Fissue-18118.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatic%2Fissue-18118.stderr?ref=cac143f0e3f957c9ace4721eff0b89c95a624288", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `p` does not live long enough\n   --> $DIR/issue-18118.rs:4:9\n    |\n+LL |         let p = 3;\n+   |             - binding `p` declared here\n LL |         &p\n    |         ^^\n    |         |"}]}