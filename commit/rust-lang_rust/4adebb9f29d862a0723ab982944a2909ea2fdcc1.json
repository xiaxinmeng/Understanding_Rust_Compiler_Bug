{"sha": "4adebb9f29d862a0723ab982944a2909ea2fdcc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZGViYjlmMjlkODYyYTA3MjNhYjk4Mjk0NGEyOTA5ZWEyZmRjYzE=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-04-30T22:23:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-30T22:23:08Z"}, "message": "Rollup merge of #71148 - bluss:vec-drop-raw-slice, r=RalfJung\n\nVec drop and truncate: drop using raw slice *mut [T]\n\nBy creating a *mut [T] directly (without going through &mut [T]), avoid\nquestions of validity of the contents of the slice.\n\nConsider the following risky code:\n\n```rust\nunsafe {\n    let mut v = Vec::<bool>::with_capacity(16);\n    v.set_len(16);\n}\n```\n\nThe intention is that with this change, we avoid one of the soundness\nquestions about the above snippet, because Vec::drop no longer\nproduces a mutable slice of the vector's contents.\n\nr? @RalfJung", "tree": {"sha": "861555cc7d3952840bfa2051175d4d63df73b034", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/861555cc7d3952840bfa2051175d4d63df73b034"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4adebb9f29d862a0723ab982944a2909ea2fdcc1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeq0/MCRBK7hj4Ov3rIwAAdHIIAAkmQpKcsxKN30c5RnxQDLhB\nPSbK1CfKWI3hYGmKLo3KZWDfoNGIHPVCnzra5SkIdPRrjzknggrMSGddmsw7SW7A\nNxSth3kvLt1sPjfYDSjaEWMRIW51aO7vDXOnQtGYltvEHCFEwpCsrRpQdPK28xj+\n17/pO9FnxuK2FDBR6mkr2HEuF88fNRmyGfsLpc6haeVcKEqnphHEm4cLRC3sixwg\nHaOE3JDLTu5AfP/N/nu5DTa7nR08aepCXLNujE1x5V87MtejjqALoxBkK6US1Efz\nr7OxEaMp1bI74mugHCvMPhSHpepIHgREVbZ+FeU1+bz4IbiEkIOqqpzzhcIQYHs=\n=KTjs\n-----END PGP SIGNATURE-----\n", "payload": "tree 861555cc7d3952840bfa2051175d4d63df73b034\nparent 7ced01a730e8fc1bae2f8d4369c26812c0484da4\nparent f654daf3a6681e6d412db1e3203801353b9089c7\nauthor Tyler Mandry <tmandry@gmail.com> 1588285388 -0700\ncommitter GitHub <noreply@github.com> 1588285388 -0700\n\nRollup merge of #71148 - bluss:vec-drop-raw-slice, r=RalfJung\n\nVec drop and truncate: drop using raw slice *mut [T]\n\nBy creating a *mut [T] directly (without going through &mut [T]), avoid\nquestions of validity of the contents of the slice.\n\nConsider the following risky code:\n\n```rust\nunsafe {\n    let mut v = Vec::<bool>::with_capacity(16);\n    v.set_len(16);\n}\n```\n\nThe intention is that with this change, we avoid one of the soundness\nquestions about the above snippet, because Vec::drop no longer\nproduces a mutable slice of the vector's contents.\n\nr? @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4adebb9f29d862a0723ab982944a2909ea2fdcc1", "html_url": "https://github.com/rust-lang/rust/commit/4adebb9f29d862a0723ab982944a2909ea2fdcc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4adebb9f29d862a0723ab982944a2909ea2fdcc1/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ced01a730e8fc1bae2f8d4369c26812c0484da4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ced01a730e8fc1bae2f8d4369c26812c0484da4", "html_url": "https://github.com/rust-lang/rust/commit/7ced01a730e8fc1bae2f8d4369c26812c0484da4"}, {"sha": "f654daf3a6681e6d412db1e3203801353b9089c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f654daf3a6681e6d412db1e3203801353b9089c7", "html_url": "https://github.com/rust-lang/rust/commit/f654daf3a6681e6d412db1e3203801353b9089c7"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "cbfbf4d1cd32d0a096e83fbec19dbb7f00fb96d1", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4adebb9f29d862a0723ab982944a2909ea2fdcc1/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4adebb9f29d862a0723ab982944a2909ea2fdcc1/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=4adebb9f29d862a0723ab982944a2909ea2fdcc1", "patch": "@@ -741,7 +741,7 @@ impl<T> Vec<T> {\n                 return;\n             }\n             let remaining_len = self.len - len;\n-            let s = slice::from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);\n+            let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);\n             self.len = len;\n             ptr::drop_in_place(s);\n         }\n@@ -2379,7 +2379,9 @@ unsafe impl<#[may_dangle] T> Drop for Vec<T> {\n     fn drop(&mut self) {\n         unsafe {\n             // use drop for [T]\n-            ptr::drop_in_place(&mut self[..]);\n+            // use a raw slice to refer to the elements of the vector as weakest necessary type;\n+            // could avoid questions of validity in certain cases\n+            ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))\n         }\n         // RawVec handles deallocation\n     }\n@@ -2596,7 +2598,11 @@ impl<T> IntoIter<T> {\n     /// ```\n     #[stable(feature = \"vec_into_iter_as_slice\", since = \"1.15.0\")]\n     pub fn as_mut_slice(&mut self) -> &mut [T] {\n-        unsafe { slice::from_raw_parts_mut(self.ptr as *mut T, self.len()) }\n+        unsafe { &mut *self.as_raw_mut_slice() }\n+    }\n+\n+    fn as_raw_mut_slice(&mut self) -> *mut [T] {\n+        ptr::slice_from_raw_parts_mut(self.ptr as *mut T, self.len())\n     }\n }\n \n@@ -2708,7 +2714,7 @@ unsafe impl<#[may_dangle] T> Drop for IntoIter<T> {\n         let guard = DropGuard(self);\n         // destroy the remaining elements\n         unsafe {\n-            ptr::drop_in_place(guard.0.as_mut_slice());\n+            ptr::drop_in_place(guard.0.as_raw_mut_slice());\n         }\n         // now `guard` will be dropped and do the rest\n     }"}]}