{"sha": "2cbf4afa99a1a8953ed54abdcb292b45b79a8639", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYmY0YWZhOTlhMWE4OTUzZWQ1NGFiZGNiMjkyYjQ1Yjc5YTg2Mzk=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-11T05:55:32Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-11T16:41:11Z"}, "message": "Split `write_c_ints` into less specific helper functions", "tree": {"sha": "836595bd639f11702708155dd4dcacbba6f16c1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/836595bd639f11702708155dd4dcacbba6f16c1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cbf4afa99a1a8953ed54abdcb292b45b79a8639", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cbf4afa99a1a8953ed54abdcb292b45b79a8639", "html_url": "https://github.com/rust-lang/rust/commit/2cbf4afa99a1a8953ed54abdcb292b45b79a8639", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cbf4afa99a1a8953ed54abdcb292b45b79a8639/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87b210df6c4ee3cd823f3d0a4a6940084e765c82", "url": "https://api.github.com/repos/rust-lang/rust/commits/87b210df6c4ee3cd823f3d0a4a6940084e765c82", "html_url": "https://github.com/rust-lang/rust/commit/87b210df6c4ee3cd823f3d0a4a6940084e765c82"}], "stats": {"total": 79, "additions": 51, "deletions": 28}, "files": [{"sha": "892ba7b2401ba44194cf744358c37f7ac4fb5562", "filename": "src/helpers.rs", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2cbf4afa99a1a8953ed54abdcb292b45b79a8639/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cbf4afa99a1a8953ed54abdcb292b45b79a8639/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=2cbf4afa99a1a8953ed54abdcb292b45b79a8639", "patch": "@@ -4,7 +4,7 @@ use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc::mir;\n use rustc::ty::{\n     self,\n-    layout::{self, Align, LayoutOf, Size},\n+    layout::{self, Align, LayoutOf, Size, TyLayout},\n };\n \n use rand::RngCore;\n@@ -308,47 +308,38 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         self.eval_libc(name)?.to_i32()\n     }\n \n-    fn write_c_ints(\n+    // Writes several `ImmTy`s contiguosly into memory. This is useful when you have to pack\n+    // different values into an struct.\n+    fn write_immediates(\n         &mut self,\n         ptr: &Pointer<Tag>,\n-        bits: &[i128],\n-        ty_names: &[&str],\n+        imms: &[ImmTy<'tcx, Tag>],\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n \n         let tcx = &{ this.tcx.tcx };\n \n-        let mut sizes = Vec::new();\n-\n-        for name in ty_names {\n-            let ty = this.resolve_path(&[\"libc\", name])?.ty(*tcx);\n-            sizes.push(this.layout_of(ty)?.size);\n-        }\n-\n         let allocation = this.memory_mut().get_mut(ptr.alloc_id)?;\n         let mut offset = Size::from_bytes(0);\n \n-        for (&value, size) in bits.iter().zip(sizes) {\n-            // If `value` does not fit in `size` bits, we error instead of letting\n-            // `Scalar::from_int` panic.\n-            let truncated = truncate(value as u128, size);\n-            if sign_extend(truncated, size) as i128 != value {\n-                throw_unsup_format!(\n-                    \"Signed value {:#x} does not fit in {} bits\",\n-                    value,\n-                    size.bits()\n-                )\n-            }\n-\n+        for imm in imms {\n+            let size = imm.layout.size;\n             allocation.write_scalar(\n                 tcx,\n                 ptr.offset(offset, tcx)?,\n-                Scalar::from_int(value, size).into(),\n+                imm.to_scalar()?.into(),\n                 size,\n             )?;\n             offset += size;\n         }\n \n         Ok(())\n     }\n+\n+    fn libc_ty_layout(&mut self, name: &str) -> InterpResult<'tcx, TyLayout<'tcx>> {\n+        let this = self.eval_context_mut();\n+        let tcx = &{ this.tcx.tcx };\n+        let ty = this.resolve_path(&[\"libc\", name])?.ty(*tcx);\n+        this.layout_of(ty)\n+    }\n }"}, {"sha": "3acc84dbc751c5153e25386e4df0cda5fbb169e1", "filename": "src/shims/time.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2cbf4afa99a1a8953ed54abdcb292b45b79a8639/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cbf4afa99a1a8953ed54abdcb292b45b79a8639/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=2cbf4afa99a1a8953ed54abdcb292b45b79a8639", "patch": "@@ -1,8 +1,12 @@\n+use std::time::{Duration, SystemTime};\n+\n+use rustc::ty::layout::TyLayout;\n+\n use crate::stacked_borrows::Tag;\n use crate::*;\n \n-use std::time::{Duration, SystemTime};\n-\n+// Returns the time elapsed between now and the unix epoch as a `Duration` and the sign of the time\n+// interval\n fn get_time() -> (Duration, i128) {\n     let mut sign = 1;\n     let duration = SystemTime::now()\n@@ -14,6 +18,24 @@ fn get_time() -> (Duration, i128) {\n     (duration, sign)\n }\n \n+fn int_to_immty_checked<'tcx>(\n+    int: i128,\n+    layout: TyLayout<'tcx>,\n+) -> InterpResult<'tcx, ImmTy<'tcx, Tag>> {\n+    // If `int` does not fit in `size` bits, we error instead of letting\n+    // `ImmTy::from_int` panic.\n+    let size = layout.size;\n+    let truncated = truncate(int as u128, size);\n+    if sign_extend(truncated, size) as i128 != int {\n+        throw_unsup_format!(\n+            \"Signed value {:#x} does not fit in {} bits\",\n+            int,\n+            size.bits()\n+        )\n+    }\n+    Ok(ImmTy::from_int(int, layout))\n+}\n+\n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     // Foreign function used by linux\n@@ -45,7 +67,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             tv_nsec *= sign;\n         }\n \n-        this.write_c_ints(&tp, &[tv_sec, tv_nsec], &[\"time_t\", \"c_long\"])?;\n+        let imms = [\n+            int_to_immty_checked(tv_sec, this.libc_ty_layout(\"time_t\")?)?,\n+            int_to_immty_checked(tv_nsec, this.libc_ty_layout(\"c_long\")?)?,\n+        ];\n+\n+        this.write_immediates(&tp, &imms)?;\n \n         Ok(0)\n     }\n@@ -78,7 +105,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             tv_usec *= sign;\n         }\n \n-        this.write_c_ints(&tv, &[tv_sec, tv_usec], &[\"time_t\", \"suseconds_t\"])?;\n+        let imms = [\n+            int_to_immty_checked(tv_sec, this.libc_ty_layout(\"time_t\")?)?,\n+            int_to_immty_checked(tv_usec, this.libc_ty_layout(\"suseconds_t\")?)?,\n+        ];\n+\n+        this.write_immediates(&tv, &imms)?;\n \n         Ok(0)\n     }"}]}