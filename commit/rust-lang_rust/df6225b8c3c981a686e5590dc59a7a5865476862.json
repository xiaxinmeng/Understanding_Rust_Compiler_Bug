{"sha": "df6225b8c3c981a686e5590dc59a7a5865476862", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNjIyNWI4YzNjOTgxYTY4NmU1NTkwZGM1OWE3YTU4NjU0NzY4NjI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-20T22:42:24Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-20T22:42:24Z"}, "message": "Don't allocate a string when calling println\n\nInstead use format_args! to pass around a struct to pass along into std::fmt", "tree": {"sha": "d33009f2ba3d901e4590fb001b722cb205d69df5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d33009f2ba3d901e4590fb001b722cb205d69df5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df6225b8c3c981a686e5590dc59a7a5865476862", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df6225b8c3c981a686e5590dc59a7a5865476862", "html_url": "https://github.com/rust-lang/rust/commit/df6225b8c3c981a686e5590dc59a7a5865476862", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df6225b8c3c981a686e5590dc59a7a5865476862/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69860b79b8f4882426fb5755c6d00e6717adeb38", "url": "https://api.github.com/repos/rust-lang/rust/commits/69860b79b8f4882426fb5755c6d00e6717adeb38", "html_url": "https://github.com/rust-lang/rust/commit/69860b79b8f4882426fb5755c6d00e6717adeb38"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "e6dd9a480998ebf39391187ae6bd62ae64268404", "filename": "src/libstd/rt/io/stdio.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/df6225b8c3c981a686e5590dc59a7a5865476862/src%2Flibstd%2Frt%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6225b8c3c981a686e5590dc59a7a5865476862/src%2Flibstd%2Frt%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fstdio.rs?ref=df6225b8c3c981a686e5590dc59a7a5865476862", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use fmt;\n use libc;\n use option::{Option, Some, None};\n use result::{Ok, Err};\n@@ -56,7 +57,9 @@ pub fn stderr() -> StdWriter {\n pub fn print(s: &str) {\n     // XXX: need to see if not caching stdin() is the cause of performance\n     //      issues, it should be possible to cache a stdout handle in each Task\n-    //      and then re-use that across calls to print/println\n+    //      and then re-use that across calls to print/println. Note that the\n+    //      resolution of this comment will affect all of the prints below as\n+    //      well.\n     stdout().write(s.as_bytes());\n }\n \n@@ -68,6 +71,20 @@ pub fn println(s: &str) {\n     out.write(['\\n' as u8]);\n }\n \n+/// Similar to `print`, but takes a `fmt::Arguments` structure to be compatible\n+/// with the `format_args!` macro.\n+pub fn print_args(fmt: &fmt::Arguments) {\n+    let mut out = stdout();\n+    fmt::write(&mut out as &mut Writer, fmt);\n+}\n+\n+/// Similar to `println`, but takes a `fmt::Arguments` structure to be\n+/// compatible with the `format_args!` macro.\n+pub fn println_args(fmt: &fmt::Arguments) {\n+    let mut out = stdout();\n+    fmt::writeln(&mut out as &mut Writer, fmt);\n+}\n+\n /// Representation of a reader of a standard input stream\n pub struct StdReader {\n     priv inner: ~RtioFileStream"}, {"sha": "620594a0a171e47da73912507e52a368fee079d8", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df6225b8c3c981a686e5590dc59a7a5865476862/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6225b8c3c981a686e5590dc59a7a5865476862/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=df6225b8c3c981a686e5590dc59a7a5865476862", "patch": "@@ -999,16 +999,11 @@ pub fn std_macros() -> @str {\n     macro_rules! writeln(($dst:expr, $($arg:tt)*) => (\n         format_args!(|args| { ::std::fmt::writeln($dst, args) }, $($arg)*)\n     ))\n-    // FIXME(#6846) once stdio is redesigned, this shouldn't perform an\n-    //              allocation but should rather delegate to an invocation of\n-    //              write! instead of format!\n     macro_rules! print (\n-        ($($arg:tt)*) => (::std::io::print(format!($($arg)*)))\n+        ($($arg:tt)*) => (format_args!(::std::rt::io::stdio::print_args, $($arg)*))\n     )\n-    // FIXME(#6846) once stdio is redesigned, this shouldn't perform an\n-    //              allocation but should rather delegate to an io::Writer\n     macro_rules! println (\n-        ($($arg:tt)*) => (::std::io::println(format!($($arg)*)))\n+        ($($arg:tt)*) => (format_args!(::std::rt::io::stdio::println_args, $($arg)*))\n     )\n \n     macro_rules! local_data_key ("}]}