{"sha": "9200bdee2699b5d846c6d0e19ee6369007f06e2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMDBiZGVlMjY5OWI1ZDg0NmM2ZDBlMTllZTYzNjkwMDdmMDZlMmU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-10T22:02:41Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:21:32Z"}, "message": "Refactor generic params loops", "tree": {"sha": "962947359843f12af92e8dc5a0091bb77b9a86e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/962947359843f12af92e8dc5a0091bb77b9a86e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9200bdee2699b5d846c6d0e19ee6369007f06e2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9200bdee2699b5d846c6d0e19ee6369007f06e2e", "html_url": "https://github.com/rust-lang/rust/commit/9200bdee2699b5d846c6d0e19ee6369007f06e2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9200bdee2699b5d846c6d0e19ee6369007f06e2e/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18f77e25e9fa52d685f6e457853af880003484f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/18f77e25e9fa52d685f6e457853af880003484f6", "html_url": "https://github.com/rust-lang/rust/commit/18f77e25e9fa52d685f6e457853af880003484f6"}], "stats": {"total": 260, "additions": 95, "deletions": 165}, "files": [{"sha": "628b871ed513515a83b3e2eab304a1062cf6386b", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=9200bdee2699b5d846c6d0e19ee6369007f06e2e", "patch": "@@ -374,8 +374,8 @@ impl<'a> LoweringContext<'a> {\n \n                 if item_lowered {\n                     let item_lifetimes = match self.lctx.items.get(&item.id).unwrap().node {\n-                        hir::Item_::ItemImpl(_, _, _, ref generics, .. ) |\n-                        hir::Item_::ItemTrait(_, _, ref generics, .. ) => {\n+                        hir::Item_::ItemImpl(_, _, _, ref generics, ..)\n+                        | hir::Item_::ItemTrait(_, _, ref generics, ..) => {\n                             generics.lifetimes().cloned().collect::<Vec<_>>()\n                         }\n                         _ => Vec::new(),\n@@ -1895,13 +1895,11 @@ impl<'a> LoweringContext<'a> {\n                 GenericParam::Lifetime(ref lifetime_def) => {\n                     hir::GenericParam::Lifetime(self.lower_lifetime_def(lifetime_def))\n                 }\n-                GenericParam::Type(ref ty_param) => {\n-                    hir::GenericParam::Type(self.lower_ty_param(\n-                        ty_param,\n-                        add_bounds.get(&ty_param.id).map_or(&[][..], |x| &x),\n-                        itctx,\n-                    ))\n-                }\n+                GenericParam::Type(ref ty_param) => hir::GenericParam::Type(self.lower_ty_param(\n+                    ty_param,\n+                    add_bounds.get(&ty_param.id).map_or(&[][..], |x| &x),\n+                    itctx,\n+                )),\n             })\n             .collect()\n     }"}, {"sha": "3943c30127d6f73f9c1800fa2cd4dc63c5ebdda9", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=9200bdee2699b5d846c6d0e19ee6369007f06e2e", "patch": "@@ -2043,10 +2043,7 @@ impl<'a> State<'a> {\n         Ok(())\n     }\n \n-    pub fn print_generic_params(&mut self,\n-                                generic_params: &[hir::GenericParam])\n-                                -> io::Result<()>\n-    {\n+    pub fn print_generic_params(&mut self, generic_params: &[hir::GenericParam]) -> io::Result<()> {\n         if !generic_params.is_empty() {\n             self.s.word(\"<\")?;\n "}, {"sha": "95727d10b1894f9cd97f34cedd230b7fde25de80", "filename": "src/librustc/infer/anon_types/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs?ref=9200bdee2699b5d846c6d0e19ee6369007f06e2e", "patch": "@@ -313,16 +313,13 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         // `['a]` for the first impl trait and `'b` for the\n         // second.\n         let mut least_region = None;\n-        for index in abstract_type_generics.params.iter().filter_map(|param| {\n-            if let GenericParamDefKind::Lifetime(_) = param.kind {\n-                // Find the index of this region in the list of substitutions.\n-                Some(param.index as usize)\n-            } else {\n-                None\n+        for param in &abstract_type_generics.params {\n+            match param.kind {\n+                GenericParamDefKind::Lifetime(_) => {}\n+                _ => continue\n             }\n-        }) {\n             // Get the value supplied for this region from the substs.\n-            let subst_arg = anon_defn.substs.region_at(index);\n+            let subst_arg = anon_defn.substs.region_at(param.index as usize);\n \n             // Compute the least upper bound of it with the other regions.\n             debug!(\"constrain_anon_types: least_region={:?}\", least_region);"}, {"sha": "4bb5387efb3528d6eb7df4f193fd9259bbe57383", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=9200bdee2699b5d846c6d0e19ee6369007f06e2e", "patch": "@@ -222,9 +222,14 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             });\n \n             let names_map: FxHashSet<String> = generics\n-                .regions\n+                .params\n                 .iter()\n-                .map(|l| l.name.to_string())\n+                .filter_map(|param| {\n+                    match param.kind {\n+                        ty::GenericParamDefKind::Lifetime(_) => Some(param.name.to_string()),\n+                        _ => None\n+                    }\n+                })\n                 .collect();\n \n             let body_ids: FxHashSet<_> = infcx"}, {"sha": "9d71fe6f2d73639d0aeab3915a8a86fec0ecaa74", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=9200bdee2699b5d846c6d0e19ee6369007f06e2e", "patch": "@@ -379,16 +379,16 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             flags.push((\"_Self\".to_string(), Some(self.tcx.type_of(def.did).to_string())));\n         }\n \n-        for param in generics.params.iter().filter(|param| {\n-            match param.kind {\n-                GenericParamDefKind::Type(_) => true,\n-                GenericParamDefKind::Lifetime(_) => false,\n-            }\n-        }) {\n+        for param in generics.params.iter() {\n             let name = param.name.to_string();\n-            let ty = trait_ref.substs.type_for_def(&param);\n-            let ty_str = ty.to_string();\n-            flags.push((name.clone(), Some(ty_str.clone())));\n+            let value = match param.kind {\n+                GenericParamDefKind::Type(_) => {\n+                    let ty = trait_ref.substs.type_for_def(&param);\n+                    ty.to_string()\n+                },\n+                GenericParamDefKind::Lifetime(_) => continue,\n+            };\n+            flags.push((name.clone(), Some(value.clone())));\n         }\n \n         if let Some(true) = self_ty.ty_to_def_id().map(|def_id| def_id.is_local()) {"}, {"sha": "1980fbbe3ed752e5e4f6610dfd3dab5c77391b3d", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=9200bdee2699b5d846c6d0e19ee6369007f06e2e", "patch": "@@ -254,15 +254,12 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n                     Position::ArgumentNamed(s) if s == name => (),\n                     // So is `{A}` if A is a type parameter\n                     Position::ArgumentNamed(s) => match generics.params.iter().find(|param| {\n-                        match param.kind {\n-                            GenericParamDefKind::Type(_) => param.name == s,\n-                            GenericParamDefKind::Lifetime(_) => false,\n-                        }\n+                        param.name == s\n                     }) {\n                         Some(_) => (),\n                         None => {\n                             span_err!(tcx.sess, span, E0230,\n-                                      \"there is no type parameter \\\n+                                      \"there is no parameter \\\n                                        {} on trait {}\",\n                                       s, name);\n                             result = Err(ErrorReported);"}, {"sha": "995d6c55767188901ebb14153c89fb25d3db6131", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=9200bdee2699b5d846c6d0e19ee6369007f06e2e", "patch": "@@ -35,7 +35,6 @@ use mir::{self, Mir, interpret};\n use ty::subst::{Kind, Substs, Subst};\n use ty::ReprOptions;\n use ty::Instance;\n-use ty::GenericParamDefKind;\n use traits;\n use traits::{Clause, Clauses, Goal, Goals};\n use ty::{self, Ty, TypeAndMut};\n@@ -2326,20 +2325,19 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         let def_id = self.require_lang_item(lang_items::OwnedBoxLangItem);\n         let adt_def = self.adt_def(def_id);\n-        let generics = self.generics_of(def_id);\n-        let mut substs = vec![Kind::from(ty)];\n-        // Add defaults for other generic params if there are some.\n-        for (def_id, has_default) in generics.params.iter().filter_map(|param| {\n-            match param.kind {\n-                GenericParamDefKind::Type(ty) => Some((param.def_id, ty.has_default)),\n-                GenericParamDefKind::Lifetime(_) => None\n+        let substs = Substs::for_item(self, def_id, |_, _| bug!(), |def, substs| {\n+            if def.index == 0 {\n+                ty\n+            } else {\n+                match def.kind {\n+                    ty::GenericParamDefKind::Type(ty_param) => {\n+                        assert!(ty_param.has_default);\n+                        self.type_of(def.def_id).subst(self, substs)\n+                    }\n+                    _ => unreachable!()\n+                }\n             }\n-        }).skip(1) {\n-            assert!(has_default);\n-            let ty = self.type_of(def_id).subst(self, &substs);\n-            substs.push(ty.into());\n-        }\n-        let substs = self.mk_substs(substs.into_iter());\n+        });\n         self.mk_ty(TyAdt(adt_def, substs))\n     }\n "}, {"sha": "c3e9ffec9a009ab827c9fc881bdb9cb9c2450831", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 54, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=9200bdee2699b5d846c6d0e19ee6369007f06e2e", "patch": "@@ -804,7 +804,7 @@ pub struct Generics {\n     pub parent_count: usize,\n     pub params: Vec<GenericParamDef>,\n \n-    /// Reverse map to the `index` field of each `GenericParamDef`'s inner type\n+    /// Reverse map to the `index` field of each `GenericParamDef`\n     pub param_def_id_to_index: FxHashMap<DefId, u32>,\n \n     pub has_self: bool,\n@@ -836,13 +836,11 @@ impl<'a, 'gcx, 'tcx> Generics {\n     }\n \n     pub fn requires_monomorphization(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {\n-        if self.params.iter().any(|param| {\n+        for param in self.params.iter() {\n             match param.kind {\n-                GenericParamDefKind::Type(_) => true,\n-                GenericParamDefKind::Lifetime(_) => false\n+                GenericParamDefKind::Type(_) => return true,\n+                GenericParamDefKind::Lifetime(_) => {}\n             }\n-        }) {\n-            return true;\n         }\n         if let Some(parent_def_id) = self.parent {\n             let parent = tcx.generics_of(parent_def_id);\n@@ -858,7 +856,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n                         -> &'tcx GenericParamDef\n     {\n         if let Some(index) = param.index.checked_sub(self.parent_count as u32) {\n-            let ref param = self.params[index as usize];\n+            let param = &self.params[index as usize];\n             match param.kind {\n                 ty::GenericParamDefKind::Lifetime(_) => param,\n                 _ => bug!(\"expected region parameter, but found another generic parameter\")\n@@ -875,53 +873,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n                       tcx: TyCtxt<'a, 'gcx, 'tcx>)\n                       -> &'tcx GenericParamDef {\n         if let Some(index) = param.idx.checked_sub(self.parent_count as u32) {\n-            // non-Self type parameters are always offset by exactly\n-            // `self.regions.len()`. In the absence of a Self, this is obvious,\n-            // but even in the presence of a `Self` we just have to \"compensate\"\n-            // for the regions:\n-            //\n-            // Without a `Self` (or in a nested generics that doesn't have\n-            // a `Self` in itself, even through it parent does), for example\n-            // for `fn foo<'a, T1, T2>()`, the situation is:\n-            //     Substs:\n-            //         0  1  2\n-            //         'a T1 T2\n-            //     generics.types:\n-            //         0  1\n-            //         T1 T2\n-            //\n-            // And with a `Self`, for example for `trait Foo<'a, 'b, T1, T2>`, the\n-            // situation is:\n-            //     Substs:\n-            //         0   1  2  3  4\n-            //       Self 'a 'b  T1 T2\n-            //     generics.types:\n-            //         0  1  2\n-            //       Self T1 T2\n-            //\n-            // And it can be seen that in both cases, to move from a substs\n-            // offset to a generics offset you just have to offset by the\n-            // number of regions.\n-            let type_param_offset = self.param_counts().lifetimes;\n-\n-            let has_self = self.has_self && self.parent.is_none();\n-            let is_separated_self = type_param_offset != 0 && index == 0 && has_self;\n-\n-            if let Some(_) = (index as usize).checked_sub(type_param_offset) {\n-                assert!(!is_separated_self, \"found a Self after type_param_offset\");\n-                let ref param = self.params[index as usize];\n-                match param.kind {\n-                    ty::GenericParamDefKind::Type(_) => param,\n-                    _ => bug!(\"expected type parameter, but found another generic parameter\")\n-                }\n-            } else {\n-                assert!(is_separated_self, \"non-Self param before type_param_offset\");\n-                let ref param = self.params[type_param_offset];\n-                match param.kind {\n-                    ty::GenericParamDefKind::Type(_) => param,\n-                    _ => bug!(\"expected type parameter, but found another generic parameter\")\n-                }\n-            }\n+            &self.params[index as usize]\n         } else {\n             tcx.generics_of(self.parent.expect(\"parent_count>0 but no parent?\"))\n                 .type_param(param, tcx)"}, {"sha": "acc225ddf568031fc4dec07df802afb8e154da74", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=9200bdee2699b5d846c6d0e19ee6369007f06e2e", "patch": "@@ -366,7 +366,7 @@ struct SplitGeneratorSubsts<'tcx> {\n impl<'tcx> GeneratorSubsts<'tcx> {\n     fn split(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> SplitGeneratorSubsts<'tcx> {\n         let generics = tcx.generics_of(def_id);\n-        let parent_len = generics.parent_count();\n+        let parent_len = generics.parent_count;\n         SplitGeneratorSubsts {\n             yield_ty: self.substs.type_at(parent_len),\n             return_ty: self.substs.type_at(parent_len + 1),"}, {"sha": "ca939b161d21e8469a9e674691fe51e9b6d4ecae", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=9200bdee2699b5d846c6d0e19ee6369007f06e2e", "patch": "@@ -351,8 +351,10 @@ impl PrintContext {\n                             let zipped = iter::once((last_ty, types.next().unwrap()))\n                                               .chain(type_params.zip(types));\n                             for ((def_id, has_default), actual) in zipped {\n-                                if !has_default ||\n-                                        tcx.type_of(def_id).subst(tcx, substs) != actual {\n+                                if !has_default {\n+                                    break;\n+                                }\n+                                if tcx.type_of(def_id).subst(tcx, substs) != actual {\n                                     break;\n                                 }\n                                 num_supplied_defaults += 1;\n@@ -604,7 +606,7 @@ define_print! {\n impl fmt::Debug for ty::GenericParamDef {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let type_name = match self.kind {\n-            ty::GenericParamDefKind::Lifetime(_) => \"Region\",\n+            ty::GenericParamDefKind::Lifetime(_) => \"Lifetime\",\n             ty::GenericParamDefKind::Type(_) => \"Type\",\n         };\n         write!(f, \"{}({}, {:?}, {})\","}, {"sha": "929030e832e944f66dd33711c49c4989a5a8ecb8", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=9200bdee2699b5d846c6d0e19ee6369007f06e2e", "patch": "@@ -399,7 +399,7 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n \n impl<'b, 'a, 'tcx> ReachEverythingInTheInterfaceVisitor<'b, 'a, 'tcx> {\n     fn generics(&mut self) -> &mut Self {\n-        for param in self.ev.tcx.generics_of(self.item_def_id).params.iter() {\n+        for param in &self.ev.tcx.generics_of(self.item_def_id).params {\n             match param.kind {\n                 GenericParamDefKind::Type(ty) => {\n                     if ty.has_default {\n@@ -1340,7 +1340,7 @@ struct SearchInterfaceForPrivateItemsVisitor<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n     fn generics(&mut self) -> &mut Self {\n-        for param in self.tcx.generics_of(self.item_def_id).params.iter() {\n+        for param in &self.tcx.generics_of(self.item_def_id).params {\n             match param.kind {\n                 GenericParamDefKind::Type(ty) => {\n                     if ty.has_default {"}, {"sha": "e4d5ce054577dd4c0528fb6762182fdd5b56fa12", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=9200bdee2699b5d846c6d0e19ee6369007f06e2e", "patch": "@@ -222,8 +222,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         assert_eq!(decl_generics.has_self, self_ty.is_some());\n \n         // Check the number of type parameters supplied by the user.\n-        let type_params_offset = self_ty.is_some() as usize;\n-        let ty_param_defs = param_counts.types - type_params_offset;\n+        let own_self = self_ty.is_some() as usize;\n+        let ty_param_defs = param_counts.types - own_self;\n         if !infer_types || num_types_provided > ty_param_defs {\n             let type_params_without_defaults = {\n                 let mut count = 0;\n@@ -241,7 +241,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 span,\n                 num_types_provided,\n                 ty_param_defs,\n-                type_params_without_defaults - type_params_offset);\n+                type_params_without_defaults - own_self);\n         }\n \n         let is_object = self_ty.map_or(false, |ty| ty.sty == TRAIT_OBJECT_DUMMY_SELF);\n@@ -258,7 +258,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         };\n \n         let substs = Substs::for_item(tcx, def_id, |def, _| {\n-            let i = def.index as usize - type_params_offset;\n+            let i = def.index as usize - own_self;\n             if let Some(lifetime) = parameters.lifetimes.get(i) {\n                 self.ast_region_to_region(lifetime, Some(def))\n             } else {\n@@ -272,7 +272,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 return ty;\n             }\n \n-            let i = i - (param_counts.lifetimes + type_params_offset);\n+            let i = i - (param_counts.lifetimes + own_self);\n             if i < num_types_provided {\n                 // A provided type parameter.\n                 self.ast_ty_to_ty(&parameters.types[i])"}, {"sha": "cfb844123170684f7e2f217a1dd801042ad33089", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=9200bdee2699b5d846c6d0e19ee6369007f06e2e", "patch": "@@ -316,6 +316,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         // parameters from the type and those from the method.\n         assert_eq!(method_generics.parent_count, parent_substs.len());\n         let provided = &segment.parameters;\n+        let param_counts = method_generics.param_counts();\n         Substs::for_item(self.tcx, pick.item.def_id, |def, _| {\n             let i = def.index as usize;\n             if i < parent_substs.len() {\n@@ -333,7 +334,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n             } else if let Some(ast_ty)\n                 = provided.as_ref().and_then(|p| {\n                     let idx =\n-                        i - parent_substs.len() - method_generics.param_counts().lifetimes;\n+                        i - parent_substs.len() - param_counts.lifetimes;\n                     p.types.get(idx)\n                 })\n             {"}, {"sha": "256e44a2d6b024d6aa7fd49b76239625c5735893", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9200bdee2699b5d846c6d0e19ee6369007f06e2e", "patch": "@@ -4918,13 +4918,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         };\n \n         // Check provided parameters.\n-        let (ty_non_def_req_len, ty_req_len, lt_req_len) =\n+        let (ty_req_len, accepted, lt_req_len) =\n             segment.map_or((0, 0, 0), |(_, generics)| {\n                 let param_counts = generics.param_counts();\n \n-                let type_params_offset\n-                    = (generics.parent.is_none() && generics.has_self) as usize;\n-                let type_params = param_counts.types - type_params_offset;\n+                let own_self = (generics.parent.is_none() && generics.has_self) as usize;\n+                let type_params = param_counts.types - own_self;\n                 let type_params_without_defaults = {\n                     let mut count = 0;\n                     for param in generics.params.iter() {\n@@ -4937,14 +4936,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     count\n                 };\n                 let type_params_barring_defaults =\n-                    type_params_without_defaults - type_params_offset;\n+                    type_params_without_defaults - own_self;\n \n                 (type_params_barring_defaults, type_params, param_counts.lifetimes)\n             });\n \n-        if types.len() > ty_req_len {\n-            let span = types[ty_req_len].span;\n-            let expected_text = count_type_params(ty_req_len);\n+        if types.len() > accepted {\n+            let span = types[accepted].span;\n+            let expected_text = count_type_params(accepted);\n             let actual_text = count_type_params(types.len());\n             struct_span_err!(self.tcx.sess, span, E0087,\n                              \"too many type parameters provided: \\\n@@ -4957,8 +4956,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             // type parameters, we force instantiate_value_path to\n             // use inference variables instead of the provided types.\n             *segment = None;\n-        } else if types.len() < ty_non_def_req_len && !infer_types && !supress_mismatch_error {\n-            let expected_text = count_type_params(ty_non_def_req_len);\n+        } else if types.len() < ty_req_len && !infer_types && !supress_mismatch_error {\n+            let expected_text = count_type_params(ty_req_len);\n             let actual_text = count_type_params(types.len());\n             struct_span_err!(self.tcx.sess, span, E0089,\n                              \"too few type parameters provided: \\"}, {"sha": "740a3dfcac973aaa9b718c4d0601d7fe7787d0c9", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=9200bdee2699b5d846c6d0e19ee6369007f06e2e", "patch": "@@ -378,22 +378,19 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n     // For example this forbids the declaration:\n     // struct Foo<T = Vec<[u32]>> { .. }\n     // Here the default `Vec<[u32]>` is not WF because `[u32]: Sized` does not hold.\n-    for d in generics.params.iter().filter_map(|param| {\n+    for param in &generics.params {\n         if let GenericParamDefKind::Type(_) = param.kind {\n             if is_our_default(&param) {\n-                return Some(param.def_id);\n+                let ty = fcx.tcx.type_of(param.def_id);\n+                // ignore dependent defaults -- that is, where the default of one type\n+                // parameter includes another (e.g., <T, U = T>). In those cases, we can't\n+                // be sure if it will error or not as user might always specify the other.\n+                if !ty.needs_subst() {\n+                    fcx.register_wf_obligation(ty, fcx.tcx.def_span(param.def_id),\n+                        ObligationCauseCode::MiscObligation);\n+                }\n             }\n         }\n-        None\n-    }) {\n-        let ty = fcx.tcx.type_of(d);\n-        // ignore dependent defaults -- that is, where the default of one type\n-        // parameter includes another (e.g., <T, U = T>). In those cases, we can't\n-        // be sure if it will error or not as user might always specify the other.\n-        if !ty.needs_subst() {\n-            fcx.register_wf_obligation(ty, fcx.tcx.def_span(d),\n-                ObligationCauseCode::MiscObligation);\n-        }\n     }\n \n     // Check that trait predicates are WF when params are substituted by their defaults.\n@@ -662,20 +659,20 @@ fn reject_shadowing_parameters(tcx: TyCtxt, def_id: DefId) {\n                      .collect();\n \n     for method_param in generics.params.iter() {\n-        let (name, def_id) = match method_param.kind {\n+        match method_param.kind {\n             // Shadowing is checked in resolve_lifetime.\n             GenericParamDefKind::Lifetime(_) => continue,\n-            GenericParamDefKind::Type(_) => (method_param.name, method_param.def_id),\n+            _ => {},\n         };\n-        if impl_params.contains_key(&name) {\n+        if impl_params.contains_key(&method_param.name) {\n             // Tighten up the span to focus on only the shadowing type\n-            let type_span = tcx.def_span(def_id);\n+            let type_span = tcx.def_span(method_param.def_id);\n \n             // The expectation here is that the original trait declaration is\n             // local so it should be okay to just unwrap everything.\n-            let trait_def_id = impl_params[&name];\n+            let trait_def_id = impl_params[&method_param.name];\n             let trait_decl_span = tcx.def_span(trait_def_id);\n-            error_194(tcx, type_span, trait_decl_span, &name.as_str()[..]);\n+            error_194(tcx, type_span, trait_decl_span, &method_param.name.as_str()[..]);\n         }\n     }\n }"}, {"sha": "3be702189fb69e07d55746faafd7e5c48292b287", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=9200bdee2699b5d846c6d0e19ee6369007f06e2e", "patch": "@@ -903,7 +903,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     // Now create the real type parameters.\n     let type_start = own_start + lifetimes.len() as u32;\n-    let types = ast_generics.ty_params().enumerate().map(|(i, p)| {\n+    let mut types: Vec<_> = ast_generics.ty_params().enumerate().map(|(i, p)| {\n         if p.name == keywords::SelfType.name() {\n             span_bug!(p.span, \"`Self` should not be the name of a regular parameter\");\n         }\n@@ -931,9 +931,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 synthetic: p.synthetic,\n             }),\n         }\n-    });\n-\n-    let mut types: Vec<_> = types.into_iter().collect();\n+    }).collect();\n \n     // provide junk type parameter defs - the only place that\n     // cares about anything but the length is instantiation,"}, {"sha": "69999eb69b0b235e32bfe12c44596cfe582226b8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9200bdee2699b5d846c6d0e19ee6369007f06e2e", "patch": "@@ -1753,7 +1753,7 @@ impl Clean<Generics> for hir::Generics {\n         let mut params = Vec::with_capacity(self.params.len());\n         for p in &self.params {\n             let p = p.clean(cx);\n-            if let GenericParam::Type(ref tp) = p {\n+            if let GenericParamDef::Type(ref tp) = p {\n                 if tp.synthetic == Some(hir::SyntheticTyParamKind::ImplTrait) {\n                     cx.impl_trait_bounds.borrow_mut().insert(tp.did, tp.bounds.clone());\n                 }"}, {"sha": "40d59d3ff8b8d0c7c980b467dbd66b57e6bca1a6", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=9200bdee2699b5d846c6d0e19ee6369007f06e2e", "patch": "@@ -72,9 +72,7 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_expr(&mut self, ex: &'ast Expr) { walk_expr(self, ex) }\n     fn visit_expr_post(&mut self, _ex: &'ast Expr) { }\n     fn visit_ty(&mut self, t: &'ast Ty) { walk_ty(self, t) }\n-    fn visit_generic_param(&mut self, param: &'ast GenericParam) {\n-        walk_generic_param(self, param)\n-    }\n+    fn visit_generic_param(&mut self, param: &'ast GenericParam) { walk_generic_param(self, param) }\n     fn visit_generics(&mut self, g: &'ast Generics) { walk_generics(self, g) }\n     fn visit_where_predicate(&mut self, p: &'ast WherePredicate) {\n         walk_where_predicate(self, p)"}, {"sha": "80f65957c39a2e3935c41ef99b961c2c083e50bd", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=9200bdee2699b5d846c6d0e19ee6369007f06e2e", "patch": "@@ -570,11 +570,7 @@ impl<'a> TraitDef<'a> {\n                         bounds.push((*declared_bound).clone());\n                     }\n \n-                    GenericParam::Type(cx.typaram(self.span,\n-                                                  ty_param.ident,\n-                                                  vec![],\n-                                                  bounds,\n-                                                  None))\n+                    GenericParam::Type(cx.typaram(self.span, ty_param.ident, vec![], bounds, None))\n                 }\n             }\n         }));"}, {"sha": "25a2969448835dca4ba648e9be841b01dd61ee0f", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9200bdee2699b5d846c6d0e19ee6369007f06e2e/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=9200bdee2699b5d846c6d0e19ee6369007f06e2e", "patch": "@@ -187,9 +187,7 @@ impl<'a> Ty<'a> {\n                 let self_params = self_generics.params\n                     .iter()\n                     .filter_map(|param| match *param {\n-                        GenericParam::Type(ref ty_param) => {\n-                            Some(cx.ty_ident(span, ty_param.ident))\n-                        }\n+                        GenericParam::Type(ref ty_param) => Some(cx.ty_ident(span, ty_param.ident)),\n                         _ => None,\n                     })\n                     .collect();\n@@ -272,10 +270,7 @@ impl<'a> LifetimeBounds<'a> {\n                 let bounds = bounds.iter()\n                     .map(|b| cx.lifetime(span, Ident::from_str(b)))\n                     .collect();\n-                GenericParam::Lifetime(cx.lifetime_def(span,\n-                                       Ident::from_str(lt),\n-                                       vec![],\n-                                       bounds))\n+                GenericParam::Lifetime(cx.lifetime_def(span, Ident::from_str(lt), vec![], bounds))\n             })\n             .chain(self.bounds\n                 .iter()"}]}