{"sha": "f65ba38cc4d69089575580807b262a029b53c0e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NWJhMzhjYzRkNjkwODk1NzU1ODA4MDdiMjYyYTAyOWI1M2MwZTI=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-05-28T06:03:04Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-05-28T06:03:04Z"}, "message": "Add a test for downcasting\n\nErgonomics are a bit crappy right now because method resolution isn't\nsmart enough to drop bounds, unfortunately.", "tree": {"sha": "8c84f1c8e8e0c4fe16fb88ca86fc1c164b5547b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c84f1c8e8e0c4fe16fb88ca86fc1c164b5547b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f65ba38cc4d69089575580807b262a029b53c0e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f65ba38cc4d69089575580807b262a029b53c0e2", "html_url": "https://github.com/rust-lang/rust/commit/f65ba38cc4d69089575580807b262a029b53c0e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f65ba38cc4d69089575580807b262a029b53c0e2/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b529a7837bcbaee4a5e9f61ee659c94af7e41f60", "url": "https://api.github.com/repos/rust-lang/rust/commits/b529a7837bcbaee4a5e9f61ee659c94af7e41f60", "html_url": "https://github.com/rust-lang/rust/commit/b529a7837bcbaee4a5e9f61ee659c94af7e41f60"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "449e49c08e5097dce8ea4cfb4b9ee97f5e3f7cd4", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f65ba38cc4d69089575580807b262a029b53c0e2/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65ba38cc4d69089575580807b262a029b53c0e2/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=f65ba38cc4d69089575580807b262a029b53c0e2", "patch": "@@ -188,7 +188,7 @@ impl Error {\n     /// If this `Error` was constructed via `new` then this function will\n     /// return `Some`, otherwise it will return `None`.\n     #[unstable(feature = \"io_error_inner\", reason = \"recently added\")]\n-    pub fn get_ref(&self) -> Option<&(error::Error+Send+Sync)> {\n+    pub fn get_ref(&self) -> Option<&(error::Error+Send+Sync+'static)> {\n         match self.repr {\n             Repr::Os(..) => None,\n             Repr::Custom(ref c) => Some(&*c.error),\n@@ -201,7 +201,7 @@ impl Error {\n     /// If this `Error` was constructed via `new` then this function will\n     /// return `Some`, otherwise it will return `None`.\n     #[unstable(feature = \"io_error_inner\", reason = \"recently added\")]\n-    pub fn get_mut(&mut self) -> Option<&mut (error::Error+Send+Sync)> {\n+    pub fn get_mut(&mut self) -> Option<&mut (error::Error+Send+Sync+'static)> {\n         match self.repr {\n             Repr::Os(..) => None,\n             Repr::Custom(ref mut c) => Some(&mut *c.error),\n@@ -264,3 +264,39 @@ fn _assert_error_is_sync_send() {\n     fn _is_sync_send<T: Sync+Send>() {}\n     _is_sync_send::<Error>();\n }\n+\n+#[cfg(test)]\n+mod test {\n+    use prelude::v1::*;\n+    use super::{Error, ErrorKind};\n+    use error;\n+    use error::Error as error_Error;\n+    use fmt;\n+\n+    #[test]\n+    fn test_downcasting() {\n+        #[derive(Debug)]\n+        struct TestError;\n+\n+        impl fmt::Display for TestError {\n+            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+                Ok(())\n+            }\n+        }\n+\n+        impl error::Error for TestError {\n+            fn description(&self) -> &str {\n+                \"asdf\"\n+            }\n+        }\n+\n+        // we have to call all of these UFCS style right now since method\n+        // resolution won't implicitly drop the Send+Sync bounds\n+        let mut err = Error::new(ErrorKind::Other, TestError);\n+        assert!(error::Error::is::<TestError>(err.get_ref().unwrap()));\n+        assert_eq!(\"asdf\", err.get_ref().unwrap().description());\n+        assert!(error::Error::is::<TestError>(err.get_mut().unwrap()));\n+        let extracted = err.into_inner().unwrap();\n+        error::Error::downcast::<TestError>(extracted).unwrap();\n+    }\n+}"}]}