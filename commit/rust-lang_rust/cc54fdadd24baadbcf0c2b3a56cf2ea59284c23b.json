{"sha": "cc54fdadd24baadbcf0c2b3a56cf2ea59284c23b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNTRmZGFkZDI0YmFhZGJjZjBjMmIzYTU2Y2YyZWE1OTI4NGMyM2I=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-08-12T11:25:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-12T11:25:06Z"}, "message": "Rollup merge of #87863 - ChrisDenton:command-env-path-fix, r=dtolnay\n\nFix Windows Command::env(\"PATH\")\n\nFixes #87859", "tree": {"sha": "0c2285768a7d7e9393c0f2eda6e99f9e9f2e05d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c2285768a7d7e9393c0f2eda6e99f9e9f2e05d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc54fdadd24baadbcf0c2b3a56cf2ea59284c23b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhFQUSCRBK7hj4Ov3rIwAA2xIIADnosV87KXX2fBYYZH4qE8hx\nHAQQA6f9t88m9g9LNd7vJjOUeLP7Xc7NSz1RwewAcc3VVuM79EnsU5V8nJw+19LF\nSn57Liz8q3azYuEhcS1dTmzYF0AiFFcd5GqaYnWfwblWmGfLazygm4UGRIxG6baU\nhJ3iS8aSNYKTvp24UMjZ1xGo1XCzT75EV70lP2mhAatqtNwynywgDhAER2R+HGo4\npnksIi2KeOaKX3dA3FM/6qt7w0he+cafqd7Ay0j28lHTl1xPXMTvkVCy9TWL0m86\ntC55DWxx02TOc+m0oWTpqMKx4tApsMNdeNxytmpptRaBGeNsviVbHtUF+ySWMVE=\n=3Aij\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c2285768a7d7e9393c0f2eda6e99f9e9f2e05d9\nparent 0b950d325598de540c4b4c9403b4368b6c169884\nparent 419902e413ddd62673f8e54c71e5164d862aee08\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1628767506 +0200\ncommitter GitHub <noreply@github.com> 1628767506 +0200\n\nRollup merge of #87863 - ChrisDenton:command-env-path-fix, r=dtolnay\n\nFix Windows Command::env(\"PATH\")\n\nFixes #87859\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc54fdadd24baadbcf0c2b3a56cf2ea59284c23b", "html_url": "https://github.com/rust-lang/rust/commit/cc54fdadd24baadbcf0c2b3a56cf2ea59284c23b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc54fdadd24baadbcf0c2b3a56cf2ea59284c23b/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b950d325598de540c4b4c9403b4368b6c169884", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b950d325598de540c4b4c9403b4368b6c169884", "html_url": "https://github.com/rust-lang/rust/commit/0b950d325598de540c4b4c9403b4368b6c169884"}, {"sha": "419902e413ddd62673f8e54c71e5164d862aee08", "url": "https://api.github.com/repos/rust-lang/rust/commits/419902e413ddd62673f8e54c71e5164d862aee08", "html_url": "https://github.com/rust-lang/rust/commit/419902e413ddd62673f8e54c71e5164d862aee08"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "ae193b82e91bb4ce67631babc0ff1c67a6f2e583", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cc54fdadd24baadbcf0c2b3a56cf2ea59284c23b/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc54fdadd24baadbcf0c2b3a56cf2ea59284c23b/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=cc54fdadd24baadbcf0c2b3a56cf2ea59284c23b", "patch": "@@ -3,7 +3,6 @@\n #[cfg(test)]\n mod tests;\n \n-use crate::borrow::Borrow;\n use crate::cmp;\n use crate::collections::BTreeMap;\n use crate::convert::{TryFrom, TryInto};\n@@ -46,6 +45,12 @@ pub struct EnvKey {\n     utf16: Vec<u16>,\n }\n \n+impl EnvKey {\n+    fn new<T: Into<OsString>>(key: T) -> Self {\n+        EnvKey::from(key.into())\n+    }\n+}\n+\n // Comparing Windows environment variable keys[1] are behaviourally the\n // composition of two operations[2]:\n //\n@@ -100,6 +105,20 @@ impl PartialEq for EnvKey {\n         }\n     }\n }\n+impl PartialOrd<str> for EnvKey {\n+    fn partial_cmp(&self, other: &str) -> Option<cmp::Ordering> {\n+        Some(self.cmp(&EnvKey::new(other)))\n+    }\n+}\n+impl PartialEq<str> for EnvKey {\n+    fn eq(&self, other: &str) -> bool {\n+        if self.os_string.len() != other.len() {\n+            false\n+        } else {\n+            self.cmp(&EnvKey::new(other)) == cmp::Ordering::Equal\n+        }\n+    }\n+}\n \n // Environment variable keys should preserve their original case even though\n // they are compared using a caseless string mapping.\n@@ -115,9 +134,9 @@ impl From<EnvKey> for OsString {\n     }\n }\n \n-impl Borrow<OsStr> for EnvKey {\n-    fn borrow(&self) -> &OsStr {\n-        &self.os_string\n+impl From<&OsStr> for EnvKey {\n+    fn from(k: &OsStr) -> Self {\n+        Self::from(k.to_os_string())\n     }\n }\n \n@@ -242,7 +261,7 @@ impl Command {\n         // to read the *child's* PATH if one is provided. See #15149 for more\n         // details.\n         let program = maybe_env.as_ref().and_then(|env| {\n-            if let Some(v) = env.get(OsStr::new(\"PATH\")) {\n+            if let Some(v) = env.get(&EnvKey::new(\"PATH\")) {\n                 // Split the value and test each path to see if the\n                 // program exists.\n                 for path in split_paths(&v) {"}, {"sha": "38007d5c414ecd42bd97456334005c4231756bd9", "filename": "library/std/src/sys_common/process.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc54fdadd24baadbcf0c2b3a56cf2ea59284c23b/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc54fdadd24baadbcf0c2b3a56cf2ea59284c23b/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs?ref=cc54fdadd24baadbcf0c2b3a56cf2ea59284c23b", "patch": "@@ -65,16 +65,18 @@ impl CommandEnv {\n \n     // The following functions build up changes\n     pub fn set(&mut self, key: &OsStr, value: &OsStr) {\n+        let key = EnvKey::from(key);\n         self.maybe_saw_path(&key);\n-        self.vars.insert(key.to_owned().into(), Some(value.to_owned()));\n+        self.vars.insert(key, Some(value.to_owned()));\n     }\n \n     pub fn remove(&mut self, key: &OsStr) {\n+        let key = EnvKey::from(key);\n         self.maybe_saw_path(&key);\n         if self.clear {\n-            self.vars.remove(key);\n+            self.vars.remove(&key);\n         } else {\n-            self.vars.insert(key.to_owned().into(), None);\n+            self.vars.insert(key, None);\n         }\n     }\n \n@@ -87,7 +89,7 @@ impl CommandEnv {\n         self.saw_path || self.clear\n     }\n \n-    fn maybe_saw_path(&mut self, key: &OsStr) {\n+    fn maybe_saw_path(&mut self, key: &EnvKey) {\n         if !self.saw_path && key == \"PATH\" {\n             self.saw_path = true;\n         }"}]}