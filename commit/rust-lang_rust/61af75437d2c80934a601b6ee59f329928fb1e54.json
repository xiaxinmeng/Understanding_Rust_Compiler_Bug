{"sha": "61af75437d2c80934a601b6ee59f329928fb1e54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYWY3NTQzN2QyYzgwOTM0YTYwMWI2ZWU1OWYzMjk5MjhmYjFlNTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-24T15:18:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-24T15:18:08Z"}, "message": "Auto merge of #45350 - cjkenn:cjkenn/used-trait-imports, r=nikomatsakis\n\nPut used trait imports field into a distinct query\n\nImplementation for #45214\n\nr+ @nikomatsakis", "tree": {"sha": "70865d34937bd91eef17401308ef9b7eadf0f54d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70865d34937bd91eef17401308ef9b7eadf0f54d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61af75437d2c80934a601b6ee59f329928fb1e54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61af75437d2c80934a601b6ee59f329928fb1e54", "html_url": "https://github.com/rust-lang/rust/commit/61af75437d2c80934a601b6ee59f329928fb1e54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61af75437d2c80934a601b6ee59f329928fb1e54/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbc3642ef12d0de48549346a3b77dfb98487f5bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc3642ef12d0de48549346a3b77dfb98487f5bc", "html_url": "https://github.com/rust-lang/rust/commit/fbc3642ef12d0de48549346a3b77dfb98487f5bc"}, {"sha": "6f30ce0be2240758889224781a9f727e7bc325e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f30ce0be2240758889224781a9f727e7bc325e1", "html_url": "https://github.com/rust-lang/rust/commit/6f30ce0be2240758889224781a9f727e7bc325e1"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "56b218889854d0a49121b063c42018359575c297", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61af75437d2c80934a601b6ee59f329928fb1e54/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61af75437d2c80934a601b6ee59f329928fb1e54/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=61af75437d2c80934a601b6ee59f329928fb1e54", "patch": "@@ -500,6 +500,7 @@ define_dep_nodes!( <'tcx>\n     [] InherentImpls(DefId),\n     [] TypeckBodiesKrate,\n     [] TypeckTables(DefId),\n+    [] UsedTraitImports(DefId),\n     [] HasTypeckTables(DefId),\n     [] ConstEval { param_env: ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)> },\n     [] SymbolName(DefId),"}, {"sha": "47ca7b11731e71ecae8781ffbf520ae5e42cbe5e", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61af75437d2c80934a601b6ee59f329928fb1e54/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61af75437d2c80934a601b6ee59f329928fb1e54/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=61af75437d2c80934a601b6ee59f329928fb1e54", "patch": "@@ -386,8 +386,10 @@ pub struct TypeckTables<'tcx> {\n     cast_kinds: ItemLocalMap<ty::cast::CastKind>,\n \n     /// Set of trait imports actually used in the method resolution.\n-    /// This is used for warning unused imports.\n-    pub used_trait_imports: DefIdSet,\n+    /// This is used for warning unused imports. During type\n+    /// checking, this `Rc` should not be cloned: it must have a ref-count\n+    /// of 1 so that we can insert things into the set mutably.\n+    pub used_trait_imports: Rc<DefIdSet>,\n \n     /// If any errors occurred while type-checking this body,\n     /// this field will be set to `true`.\n@@ -417,7 +419,7 @@ impl<'tcx> TypeckTables<'tcx> {\n             liberated_fn_sigs: ItemLocalMap(),\n             fru_field_types: ItemLocalMap(),\n             cast_kinds: ItemLocalMap(),\n-            used_trait_imports: DefIdSet(),\n+            used_trait_imports: Rc::new(DefIdSet()),\n             tainted_by_errors: false,\n             free_region_map: FreeRegionMap::new(),\n         }"}, {"sha": "851d126056c953426d99a43b8208ca10875a4320", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61af75437d2c80934a601b6ee59f329928fb1e54/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61af75437d2c80934a601b6ee59f329928fb1e54/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=61af75437d2c80934a601b6ee59f329928fb1e54", "patch": "@@ -183,6 +183,8 @@ define_maps! { <'tcx>\n \n     [] fn typeck_tables_of: TypeckTables(DefId) -> &'tcx ty::TypeckTables<'tcx>,\n \n+    [] fn used_trait_imports: UsedTraitImports(DefId) -> Rc<DefIdSet>,\n+\n     [] fn has_typeck_tables: HasTypeckTables(DefId) -> bool,\n \n     [] fn coherent_trait: coherent_trait_dep_node((CrateNum, DefId)) -> (),"}, {"sha": "7edad824cdcc1e071863664b71e1badb0f849f5f", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61af75437d2c80934a601b6ee59f329928fb1e54/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61af75437d2c80934a601b6ee59f329928fb1e54/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=61af75437d2c80934a601b6ee59f329928fb1e54", "patch": "@@ -754,6 +754,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::InherentImpls => { force!(inherent_impls, def_id!()); }\n         DepKind::TypeckBodiesKrate => { force!(typeck_item_bodies, LOCAL_CRATE); }\n         DepKind::TypeckTables => { force!(typeck_tables_of, def_id!()); }\n+        DepKind::UsedTraitImports => { force!(used_trait_imports, def_id!()); }\n         DepKind::HasTypeckTables => { force!(has_typeck_tables, def_id!()); }\n         DepKind::SymbolName => { force!(def_symbol_name, def_id!()); }\n         DepKind::SpecializationGraph => { force!(specialization_graph_of, def_id!()); }"}, {"sha": "58d72e37d51cfb1c0b48b11cdb8a190ad01c932d", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61af75437d2c80934a601b6ee59f329928fb1e54/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61af75437d2c80934a601b6ee59f329928fb1e54/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=61af75437d2c80934a601b6ee59f329928fb1e54", "patch": "@@ -25,6 +25,8 @@ use syntax_pos::Span;\n \n use rustc::hir;\n \n+use std::rc::Rc;\n+\n pub use self::MethodError::*;\n pub use self::CandidateSource::*;\n \n@@ -163,7 +165,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         if let Some(import_id) = pick.import_id {\n             let import_def_id = self.tcx.hir.local_def_id(import_id);\n             debug!(\"used_trait_import: {:?}\", import_def_id);\n-            self.tables.borrow_mut().used_trait_imports.insert(import_def_id);\n+            Rc::get_mut(&mut self.tables.borrow_mut().used_trait_imports)\n+                                        .unwrap().insert(import_def_id);\n         }\n \n         self.tcx.check_stability(pick.item.def_id, call_expr.id, span);\n@@ -361,7 +364,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         if let Some(import_id) = pick.import_id {\n             let import_def_id = self.tcx.hir.local_def_id(import_id);\n             debug!(\"used_trait_import: {:?}\", import_def_id);\n-            self.tables.borrow_mut().used_trait_imports.insert(import_def_id);\n+            Rc::get_mut(&mut self.tables.borrow_mut().used_trait_imports)\n+                                        .unwrap().insert(import_def_id);\n         }\n \n         let def = pick.item.def();"}, {"sha": "c82cafd3a62ed1838cf4abe2ae042b6e7210fbc3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/61af75437d2c80934a601b6ee59f329928fb1e54/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61af75437d2c80934a601b6ee59f329928fb1e54/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=61af75437d2c80934a601b6ee59f329928fb1e54", "patch": "@@ -106,9 +106,10 @@ use session::{CompileIncomplete, Session};\n use TypeAndSubsts;\n use lint;\n use util::common::{ErrorReported, indenter};\n-use util::nodemap::{DefIdMap, FxHashMap, NodeMap};\n+use util::nodemap::{DefIdMap, DefIdSet, FxHashMap, NodeMap};\n \n use std::cell::{Cell, RefCell, Ref, RefMut};\n+use std::rc::Rc;\n use std::collections::hash_map::Entry;\n use std::cmp;\n use std::fmt::Display;\n@@ -742,6 +743,7 @@ pub fn provide(providers: &mut Providers) {\n         closure_kind,\n         generator_sig,\n         adt_destructor,\n+        used_trait_imports,\n         ..*providers\n     };\n }\n@@ -845,6 +847,12 @@ fn has_typeck_tables<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     primary_body_of(tcx, id).is_some()\n }\n \n+fn used_trait_imports<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                              def_id: DefId)\n+                              -> Rc<DefIdSet> {\n+    tcx.typeck_tables_of(def_id).used_trait_imports.clone()\n+}\n+\n fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               def_id: DefId)\n                               -> &'tcx ty::TypeckTables<'tcx> {"}, {"sha": "ce2ac73a27e0cb8b6f25fd031483c26e12bb8b51", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61af75437d2c80934a601b6ee59f329928fb1e54/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61af75437d2c80934a601b6ee59f329928fb1e54/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=61af75437d2c80934a601b6ee59f329928fb1e54", "patch": "@@ -23,6 +23,7 @@ use rustc::util::nodemap::DefIdSet;\n use syntax::ast;\n use syntax_pos::Span;\n use std::mem;\n+use std::rc::Rc;\n \n ///////////////////////////////////////////////////////////////////////////\n // Entry point\n@@ -49,7 +50,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         wbcx.visit_generator_interiors();\n \n         let used_trait_imports = mem::replace(&mut self.tables.borrow_mut().used_trait_imports,\n-                                              DefIdSet());\n+                                              Rc::new(DefIdSet()));\n         debug!(\"used_trait_imports({:?}) = {:?}\", item_def_id, used_trait_imports);\n         wbcx.tables.used_trait_imports = used_trait_imports;\n "}, {"sha": "b867a655b4a6a30e36d256441e662be1b5c96d37", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61af75437d2c80934a601b6ee59f329928fb1e54/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61af75437d2c80934a601b6ee59f329928fb1e54/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=61af75437d2c80934a601b6ee59f329928fb1e54", "patch": "@@ -66,10 +66,9 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut used_trait_imports = DefIdSet();\n     for &body_id in tcx.hir.krate().bodies.keys() {\n         let item_def_id = tcx.hir.body_owner_def_id(body_id);\n-        let tables = tcx.typeck_tables_of(item_def_id);\n-        let imports = &tables.used_trait_imports;\n+        let imports = tcx.used_trait_imports(item_def_id);\n         debug!(\"GatherVisitor: item_def_id={:?} with imports {:#?}\", item_def_id, imports);\n-        used_trait_imports.extend(imports);\n+        used_trait_imports.extend(imports.iter());\n     }\n \n     let mut visitor = CheckVisitor { tcx, used_trait_imports };"}]}