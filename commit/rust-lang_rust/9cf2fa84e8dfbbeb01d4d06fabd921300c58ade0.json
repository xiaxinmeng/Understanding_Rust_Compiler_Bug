{"sha": "9cf2fa84e8dfbbeb01d4d06fabd921300c58ade0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZjJmYTg0ZThkZmJiZWIwMWQ0ZDA2ZmFiZDkyMTMwMGM1OGFkZTA=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-17T22:45:18Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-19T12:18:25Z"}, "message": "Allow reusing the code in `collect_trait_impls`", "tree": {"sha": "33d3725e460489df02fa7194e41be7dd6e37878f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33d3725e460489df02fa7194e41be7dd6e37878f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cf2fa84e8dfbbeb01d4d06fabd921300c58ade0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cf2fa84e8dfbbeb01d4d06fabd921300c58ade0", "html_url": "https://github.com/rust-lang/rust/commit/9cf2fa84e8dfbbeb01d4d06fabd921300c58ade0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cf2fa84e8dfbbeb01d4d06fabd921300c58ade0/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06d6d3dff5f95c7ef24954cc3c6c1b8010705378", "url": "https://api.github.com/repos/rust-lang/rust/commits/06d6d3dff5f95c7ef24954cc3c6c1b8010705378", "html_url": "https://github.com/rust-lang/rust/commit/06d6d3dff5f95c7ef24954cc3c6c1b8010705378"}], "stats": {"total": 167, "additions": 80, "deletions": 87}, "files": [{"sha": "62f71514fcf60d16307d82a509a56d0d15f6c27f", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 77, "deletions": 52, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/9cf2fa84e8dfbbeb01d4d06fabd921300c58ade0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf2fa84e8dfbbeb01d4d06fabd921300c58ade0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=9cf2fa84e8dfbbeb01d4d06fabd921300c58ade0", "patch": "@@ -7,6 +7,7 @@ use std::num::NonZeroU32;\n use std::rc::Rc;\n use std::sync::Arc;\n use std::{slice, vec};\n+use std::lazy::SyncOnceCell as OnceCell;\n \n use rustc_ast::attr;\n use rustc_ast::util::comments::beautify_doc_string;\n@@ -26,7 +27,7 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, FileName};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi::Abi;\n-use smallvec::SmallVec;\n+use smallvec::{SmallVec, smallvec};\n \n use crate::clean::cfg::Cfg;\n use crate::clean::external_path;\n@@ -1266,61 +1267,85 @@ impl PrimitiveType {\n         }\n     }\n \n-    pub fn impls(&self, tcx: TyCtxt<'_>) -> SmallVec<[DefId; 4]> {\n-        use self::PrimitiveType::*;\n-\n-        let both =\n-            |a: Option<DefId>, b: Option<DefId>| -> SmallVec<_> { a.into_iter().chain(b).collect() };\n-\n-        let lang_items = tcx.lang_items();\n-        let primary_impl = match self {\n-            Isize => lang_items.isize_impl(),\n-            I8 => lang_items.i8_impl(),\n-            I16 => lang_items.i16_impl(),\n-            I32 => lang_items.i32_impl(),\n-            I64 => lang_items.i64_impl(),\n-            I128 => lang_items.i128_impl(),\n-            Usize => lang_items.usize_impl(),\n-            U8 => lang_items.u8_impl(),\n-            U16 => lang_items.u16_impl(),\n-            U32 => lang_items.u32_impl(),\n-            U64 => lang_items.u64_impl(),\n-            U128 => lang_items.u128_impl(),\n-            F32 => return both(lang_items.f32_impl(), lang_items.f32_runtime_impl()),\n-            F64 => return both(lang_items.f64_impl(), lang_items.f64_runtime_impl()),\n-            Char => lang_items.char_impl(),\n-            Bool => lang_items.bool_impl(),\n-            Str => return both(lang_items.str_impl(), lang_items.str_alloc_impl()),\n-            Slice => {\n-                return lang_items\n-                    .slice_impl()\n-                    .into_iter()\n-                    .chain(lang_items.slice_u8_impl())\n-                    .chain(lang_items.slice_alloc_impl())\n-                    .chain(lang_items.slice_u8_alloc_impl())\n-                    .collect();\n+    pub fn impls(&self, tcx: TyCtxt<'_>) -> &SmallVec<[DefId; 4]> {\n+        Self::all_impls(tcx).get(self).expect(\"missing impl for primitive type\")\n+    }\n+\n+    pub fn all_impls(tcx: TyCtxt<'_>) -> &'static FxHashMap<PrimitiveType, SmallVec<[DefId; 4]>> {\n+        static CELL: OnceCell<FxHashMap<PrimitiveType, SmallVec<[DefId; 4]>>> = OnceCell::new();\n+\n+        CELL.get_or_init(move || {\n+            use self::PrimitiveType::*;\n+\n+            /// A macro to create a FxHashMap.\n+            ///\n+            /// Example:\n+            ///\n+            /// ```\n+            /// let letters = map!{\"a\" => \"b\", \"c\" => \"d\"};\n+            /// ```\n+            ///\n+            /// Trailing commas are allowed.\n+            /// Commas between elements are required (even if the expression is a block).\n+            macro_rules! map {\n+                ($( $key: expr => $val: expr ),* $(,)*) => {{\n+                    let mut map = ::rustc_data_structures::fx::FxHashMap::default();\n+                    $( map.insert($key, $val); )*\n+                    map\n+                }}\n             }\n-            Array => lang_items.array_impl(),\n-            Tuple => None,\n-            Unit => None,\n-            RawPointer => {\n-                return lang_items\n-                    .const_ptr_impl()\n-                    .into_iter()\n-                    .chain(lang_items.mut_ptr_impl())\n-                    .chain(lang_items.const_slice_ptr_impl())\n-                    .chain(lang_items.mut_slice_ptr_impl())\n-                    .collect();\n-            }\n-            Reference => None,\n-            Fn => None,\n-            Never => None,\n-        };\n \n-        primary_impl.into_iter().collect()\n+            let single = |a: Option<DefId>| a.into_iter().collect();\n+            let both =\n+                |a: Option<DefId>, b: Option<DefId>| -> SmallVec<_> { a.into_iter().chain(b).collect() };\n+\n+            let lang_items = tcx.lang_items();\n+            map! {\n+                Isize => single(lang_items.isize_impl()),\n+                I8 => single(lang_items.i8_impl()),\n+                I16 => single(lang_items.i16_impl()),\n+                I32 => single(lang_items.i32_impl()),\n+                I64 => single(lang_items.i64_impl()),\n+                I128 => single(lang_items.i128_impl()),\n+                Usize => single(lang_items.usize_impl()),\n+                U8 => single(lang_items.u8_impl()),\n+                U16 => single(lang_items.u16_impl()),\n+                U32 => single(lang_items.u32_impl()),\n+                U64 => single(lang_items.u64_impl()),\n+                U128 => single(lang_items.u128_impl()),\n+                F32 => both(lang_items.f32_impl(), lang_items.f32_runtime_impl()),\n+                F64 => both(lang_items.f64_impl(), lang_items.f64_runtime_impl()),\n+                Char => single(lang_items.char_impl()),\n+                Bool => single(lang_items.bool_impl()),\n+                Str => both(lang_items.str_impl(), lang_items.str_alloc_impl()),\n+                Slice => {\n+                    lang_items\n+                        .slice_impl()\n+                        .into_iter()\n+                        .chain(lang_items.slice_u8_impl())\n+                        .chain(lang_items.slice_alloc_impl())\n+                        .chain(lang_items.slice_u8_alloc_impl())\n+                        .collect()\n+                },\n+                Array => single(lang_items.array_impl()),\n+                Tuple => smallvec![],\n+                Unit => smallvec![],\n+                RawPointer => {\n+                    lang_items\n+                        .const_ptr_impl()\n+                        .into_iter()\n+                        .chain(lang_items.mut_ptr_impl())\n+                        .chain(lang_items.const_slice_ptr_impl())\n+                        .chain(lang_items.mut_slice_ptr_impl())\n+                        .collect()\n+                },\n+                Reference => smallvec![],\n+                Fn => smallvec![],\n+                Never => smallvec![],\n+            }\n+        })\n     }\n \n-\n     pub fn to_url_str(&self) -> &'static str {\n         self.as_str()\n     }"}, {"sha": "75fdcd5ec1c9c75d395f7e0e5d0381dc82acd6e6", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cf2fa84e8dfbbeb01d4d06fabd921300c58ade0/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf2fa84e8dfbbeb01d4d06fabd921300c58ade0/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=9cf2fa84e8dfbbeb01d4d06fabd921300c58ade0", "patch": "@@ -369,7 +369,7 @@ pub fn build_deref_target_impls(cx: &DocContext<'_>, items: &[Item], ret: &mut V\n                 None => continue,\n             },\n         };\n-        for did in primitive.impls(tcx) {\n+        for &did in primitive.impls(tcx) {\n             if !did.is_local() {\n                 inline::build_impl(cx, did, None, ret);\n             }"}, {"sha": "3dfa7b529e34cc42e084af05fe31f2e8294e5b87", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cf2fa84e8dfbbeb01d4d06fabd921300c58ade0/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf2fa84e8dfbbeb01d4d06fabd921300c58ade0/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=9cf2fa84e8dfbbeb01d4d06fabd921300c58ade0", "patch": "@@ -12,6 +12,7 @@\n #![feature(ptr_offset_from)]\n #![feature(crate_visibility_modifier)]\n #![feature(never_type)]\n+#![feature(once_cell)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "24baff46dcfa5404d33ceea58e156f042083a163", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9cf2fa84e8dfbbeb01d4d06fabd921300c58ade0/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf2fa84e8dfbbeb01d4d06fabd921300c58ade0/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=9cf2fa84e8dfbbeb01d4d06fabd921300c58ade0", "patch": "@@ -34,40 +34,7 @@ pub fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n     }\n \n     // Also try to inline primitive impls from other crates.\n-    let lang_items = cx.tcx.lang_items();\n-    let primitive_impls = [\n-        lang_items.isize_impl(),\n-        lang_items.i8_impl(),\n-        lang_items.i16_impl(),\n-        lang_items.i32_impl(),\n-        lang_items.i64_impl(),\n-        lang_items.i128_impl(),\n-        lang_items.usize_impl(),\n-        lang_items.u8_impl(),\n-        lang_items.u16_impl(),\n-        lang_items.u32_impl(),\n-        lang_items.u64_impl(),\n-        lang_items.u128_impl(),\n-        lang_items.f32_impl(),\n-        lang_items.f64_impl(),\n-        lang_items.f32_runtime_impl(),\n-        lang_items.f64_runtime_impl(),\n-        lang_items.bool_impl(),\n-        lang_items.char_impl(),\n-        lang_items.str_impl(),\n-        lang_items.array_impl(),\n-        lang_items.slice_impl(),\n-        lang_items.slice_u8_impl(),\n-        lang_items.str_alloc_impl(),\n-        lang_items.slice_alloc_impl(),\n-        lang_items.slice_u8_alloc_impl(),\n-        lang_items.const_ptr_impl(),\n-        lang_items.mut_ptr_impl(),\n-        lang_items.const_slice_ptr_impl(),\n-        lang_items.mut_slice_ptr_impl(),\n-    ];\n-\n-    for def_id in primitive_impls.iter().filter_map(|&def_id| def_id) {\n+    for &def_id in PrimitiveType::all_impls(cx.tcx).values().flatten() {\n         if !def_id.is_local() {\n             inline::build_impl(cx, def_id, None, &mut new_items);\n "}]}