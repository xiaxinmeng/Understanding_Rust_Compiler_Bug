{"sha": "d0aaf895ee74d23445bbe98a601b544d953c4c0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYWFmODk1ZWU3NGQyMzQ0NWJiZTk4YTYwMWI1NDRkOTUzYzRjMGI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-09-02T21:04:54Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-09-10T21:30:44Z"}, "message": "resolve: Future proof resolutions for potentially built-in attributes", "tree": {"sha": "eac7c68b2417fdae052fd958c1f94566aff8a41d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eac7c68b2417fdae052fd958c1f94566aff8a41d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0aaf895ee74d23445bbe98a601b544d953c4c0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0aaf895ee74d23445bbe98a601b544d953c4c0b", "html_url": "https://github.com/rust-lang/rust/commit/d0aaf895ee74d23445bbe98a601b544d953c4c0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0aaf895ee74d23445bbe98a601b544d953c4c0b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "730c5de2815f310ee4e71dd48af101c10e46d747", "url": "https://api.github.com/repos/rust-lang/rust/commits/730c5de2815f310ee4e71dd48af101c10e46d747", "html_url": "https://github.com/rust-lang/rust/commit/730c5de2815f310ee4e71dd48af101c10e46d747"}], "stats": {"total": 274, "additions": 274, "deletions": 0}, "files": [{"sha": "d1a05964c8f6497c0993fc342a40ee201c7e1817", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d0aaf895ee74d23445bbe98a601b544d953c4c0b/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0aaf895ee74d23445bbe98a601b544d953c4c0b/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=d0aaf895ee74d23445bbe98a601b544d953c4c0b", "patch": "@@ -39,6 +39,7 @@ use syntax::ext::base::{MacroKind, SyntaxExtension};\n use syntax::ext::base::Determinacy::Undetermined;\n use syntax::ext::hygiene::Mark;\n use syntax::ext::tt::macro_rules;\n+use syntax::feature_gate::is_builtin_attr;\n use syntax::parse::token::{self, Token};\n use syntax::std_inject::injected_crate_name;\n use syntax::symbol::keywords;\n@@ -1057,4 +1058,13 @@ impl<'a, 'b, 'cl> Visitor<'a> for BuildReducedGraphVisitor<'a, 'b, 'cl> {\n             }\n         }\n     }\n+\n+    fn visit_attribute(&mut self, attr: &'a ast::Attribute) {\n+        if !attr.is_sugared_doc && is_builtin_attr(attr) {\n+            self.resolver.current_module.builtin_attrs.borrow_mut().push((\n+                attr.path.segments[0].ident, self.expansion, self.current_legacy_scope\n+            ));\n+        }\n+        visit::walk_attribute(self, attr);\n+    }\n }"}, {"sha": "142e987d9521997fa4269aa4954648b58cb2dc02", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0aaf895ee74d23445bbe98a601b544d953c4c0b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0aaf895ee74d23445bbe98a601b544d953c4c0b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d0aaf895ee74d23445bbe98a601b544d953c4c0b", "patch": "@@ -1012,6 +1012,7 @@ pub struct ModuleData<'a> {\n     resolutions: RefCell<FxHashMap<(Ident, Namespace), &'a RefCell<NameResolution<'a>>>>,\n     legacy_macro_resolutions: RefCell<Vec<(Ident, MacroKind, Mark, LegacyScope<'a>, Option<Def>)>>,\n     macro_resolutions: RefCell<Vec<(Box<[Ident]>, Span)>>,\n+    builtin_attrs: RefCell<Vec<(Ident, Mark, LegacyScope<'a>)>>,\n \n     // Macro invocations that can expand into items in this module.\n     unresolved_invocations: RefCell<FxHashSet<Mark>>,\n@@ -1050,6 +1051,7 @@ impl<'a> ModuleData<'a> {\n             resolutions: RefCell::new(FxHashMap()),\n             legacy_macro_resolutions: RefCell::new(Vec::new()),\n             macro_resolutions: RefCell::new(Vec::new()),\n+            builtin_attrs: RefCell::new(Vec::new()),\n             unresolved_invocations: RefCell::new(FxHashSet()),\n             no_implicit_prelude: false,\n             glob_importers: RefCell::new(Vec::new()),"}, {"sha": "07ea345ca066c24008943491d2344d2fdc878726", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d0aaf895ee74d23445bbe98a601b544d953c4c0b/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0aaf895ee74d23445bbe98a601b544d953c4c0b/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=d0aaf895ee74d23445bbe98a601b544d953c4c0b", "patch": "@@ -956,6 +956,26 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 }\n             };\n         }\n+\n+        for &(ident, parent_expansion, parent_legacy_scope)\n+                in module.builtin_attrs.borrow().iter() {\n+            let resolve_legacy = |this: &mut Self| this.resolve_legacy_scope(\n+                ident, parent_expansion, parent_legacy_scope, true, true\n+            );\n+            let resolve_modern = |this: &mut Self| this.resolve_lexical_macro_path_segment(\n+                ident, MacroNS, parent_expansion, true, true, true, ident.span\n+            ).map(|(binding, _)| binding).ok();\n+\n+            if let Some(binding) = resolve_legacy(self).or_else(|| resolve_modern(self)) {\n+                if binding.def_ignoring_ambiguity() !=\n+                        Def::NonMacroAttr(NonMacroAttrKind::Builtin) {\n+                    let builtin_binding = (Def::NonMacroAttr(NonMacroAttrKind::Builtin),\n+                                           ty::Visibility::Public, ident.span, Mark::root())\n+                                           .to_name_binding(self.arenas);\n+                    self.report_ambiguity_error(ident, binding, builtin_binding);\n+                }\n+            }\n+        }\n     }\n \n     fn suggest_macro_name(&mut self, name: &str, kind: MacroKind,"}, {"sha": "6a47e50f62dbb6bbc0872213531d539760acdf70", "filename": "src/test/ui-fulldeps/proc-macro/ambiguous-builtin-attrs-test.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d0aaf895ee74d23445bbe98a601b544d953c4c0b/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fambiguous-builtin-attrs-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0aaf895ee74d23445bbe98a601b544d953c4c0b/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fambiguous-builtin-attrs-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fambiguous-builtin-attrs-test.rs?ref=d0aaf895ee74d23445bbe98a601b544d953c4c0b", "patch": "@@ -0,0 +1,20 @@\n+// aux-build:builtin-attrs.rs\n+// compile-flags:--test\n+\n+#![feature(decl_macro, test)]\n+\n+extern crate test;\n+extern crate builtin_attrs;\n+use builtin_attrs::{test, bench};\n+\n+#[test] // OK, shadowed\n+fn test() {}\n+\n+#[bench] // OK, shadowed\n+fn bench(b: &mut test::Bencher) {}\n+\n+fn not_main() {\n+    Test;\n+    Bench;\n+    NonExistent; //~ ERROR cannot find value `NonExistent` in this scope\n+}"}, {"sha": "db07055b6a1093334f06b7d8dfb21029b46f38f7", "filename": "src/test/ui-fulldeps/proc-macro/ambiguous-builtin-attrs-test.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d0aaf895ee74d23445bbe98a601b544d953c4c0b/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fambiguous-builtin-attrs-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0aaf895ee74d23445bbe98a601b544d953c4c0b/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fambiguous-builtin-attrs-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fambiguous-builtin-attrs-test.stderr?ref=d0aaf895ee74d23445bbe98a601b544d953c4c0b", "patch": "@@ -0,0 +1,9 @@\n+error[E0425]: cannot find value `NonExistent` in this scope\n+  --> $DIR/ambiguous-builtin-attrs-test.rs:19:5\n+   |\n+LL |     NonExistent; //~ ERROR cannot find value `NonExistent` in this scope\n+   |     ^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "b3a50e8fb7c334dadbb9d1c7cca167be57ec9bef", "filename": "src/test/ui-fulldeps/proc-macro/ambiguous-builtin-attrs.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d0aaf895ee74d23445bbe98a601b544d953c4c0b/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fambiguous-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0aaf895ee74d23445bbe98a601b544d953c4c0b/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fambiguous-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fambiguous-builtin-attrs.rs?ref=d0aaf895ee74d23445bbe98a601b544d953c4c0b", "patch": "@@ -0,0 +1,44 @@\n+// aux-build:builtin-attrs.rs\n+\n+#![feature(decl_macro)] //~ ERROR `feature` is ambiguous\n+\n+extern crate builtin_attrs;\n+use builtin_attrs::{test, bench};\n+use builtin_attrs::*;\n+\n+#[repr(C)] //~ ERROR `repr` is ambiguous\n+struct S;\n+#[cfg_attr(all(), repr(C))] //~ ERROR `repr` is ambiguous\n+struct SCond;\n+\n+#[cfg(all())] //~ ERROR `cfg` is ambiguous\n+struct A;\n+#[cfg(any())] // ERROR FIXME\n+struct A;\n+\n+#[cfg_attr(all(), cold)] // ERROR FIXME\n+fn g() {}\n+#[cfg_attr(any(), cold)] // ERROR FIXME\n+fn h() {}\n+\n+#[derive(Clone)] // ERROR FIXME\n+struct B;\n+\n+#[test] // OK, shadowed\n+fn test() {}\n+\n+#[bench] // OK, shadowed\n+fn bench() {}\n+\n+fn non_macro_expanded_location<#[repr(C)] T>() { //~ ERROR `repr` is ambiguous\n+    match 0u8 {\n+        #[repr(C)] //~ ERROR `repr` is ambiguous\n+        _ => {}\n+    }\n+}\n+\n+fn main() {\n+    Test;\n+    Bench;\n+    NonExistent; //~ ERROR cannot find value `NonExistent` in this scope\n+}"}, {"sha": "2bf3082aa4228a62a2facec35ea5ca5122d939ef", "filename": "src/test/ui-fulldeps/proc-macro/ambiguous-builtin-attrs.stderr", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/d0aaf895ee74d23445bbe98a601b544d953c4c0b/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fambiguous-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0aaf895ee74d23445bbe98a601b544d953c4c0b/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fambiguous-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fambiguous-builtin-attrs.stderr?ref=d0aaf895ee74d23445bbe98a601b544d953c4c0b", "patch": "@@ -0,0 +1,118 @@\n+error[E0659]: `repr` is ambiguous\n+  --> $DIR/ambiguous-builtin-attrs.rs:9:3\n+   |\n+LL | #[repr(C)] //~ ERROR `repr` is ambiguous\n+   |   ^^^^ ambiguous name\n+   |\n+note: `repr` could refer to the name imported here\n+  --> $DIR/ambiguous-builtin-attrs.rs:7:5\n+   |\n+LL | use builtin_attrs::*;\n+   |     ^^^^^^^^^^^^^^^^\n+note: `repr` could also refer to the name defined here\n+  --> $DIR/ambiguous-builtin-attrs.rs:9:3\n+   |\n+LL | #[repr(C)] //~ ERROR `repr` is ambiguous\n+   |   ^^^^\n+   = note: consider adding an explicit import of `repr` to disambiguate\n+\n+error[E0659]: `repr` is ambiguous\n+  --> $DIR/ambiguous-builtin-attrs.rs:11:19\n+   |\n+LL | #[cfg_attr(all(), repr(C))] //~ ERROR `repr` is ambiguous\n+   |                   ^^^^ ambiguous name\n+   |\n+note: `repr` could refer to the name imported here\n+  --> $DIR/ambiguous-builtin-attrs.rs:7:5\n+   |\n+LL | use builtin_attrs::*;\n+   |     ^^^^^^^^^^^^^^^^\n+note: `repr` could also refer to the name defined here\n+  --> $DIR/ambiguous-builtin-attrs.rs:11:19\n+   |\n+LL | #[cfg_attr(all(), repr(C))] //~ ERROR `repr` is ambiguous\n+   |                   ^^^^\n+   = note: consider adding an explicit import of `repr` to disambiguate\n+\n+error[E0659]: `cfg` is ambiguous\n+  --> $DIR/ambiguous-builtin-attrs.rs:14:3\n+   |\n+LL | #[cfg(all())] //~ ERROR `cfg` is ambiguous\n+   |   ^^^ ambiguous name\n+   |\n+note: `cfg` could refer to the name imported here\n+  --> $DIR/ambiguous-builtin-attrs.rs:7:5\n+   |\n+LL | use builtin_attrs::*;\n+   |     ^^^^^^^^^^^^^^^^\n+note: `cfg` could also refer to the name defined here\n+  --> $DIR/ambiguous-builtin-attrs.rs:14:3\n+   |\n+LL | #[cfg(all())] //~ ERROR `cfg` is ambiguous\n+   |   ^^^\n+   = note: consider adding an explicit import of `cfg` to disambiguate\n+\n+error[E0659]: `repr` is ambiguous\n+  --> $DIR/ambiguous-builtin-attrs.rs:33:34\n+   |\n+LL | fn non_macro_expanded_location<#[repr(C)] T>() { //~ ERROR `repr` is ambiguous\n+   |                                  ^^^^ ambiguous name\n+   |\n+note: `repr` could refer to the name imported here\n+  --> $DIR/ambiguous-builtin-attrs.rs:7:5\n+   |\n+LL | use builtin_attrs::*;\n+   |     ^^^^^^^^^^^^^^^^\n+note: `repr` could also refer to the name defined here\n+  --> $DIR/ambiguous-builtin-attrs.rs:33:34\n+   |\n+LL | fn non_macro_expanded_location<#[repr(C)] T>() { //~ ERROR `repr` is ambiguous\n+   |                                  ^^^^\n+   = note: consider adding an explicit import of `repr` to disambiguate\n+\n+error[E0659]: `repr` is ambiguous\n+  --> $DIR/ambiguous-builtin-attrs.rs:35:11\n+   |\n+LL |         #[repr(C)] //~ ERROR `repr` is ambiguous\n+   |           ^^^^ ambiguous name\n+   |\n+note: `repr` could refer to the name imported here\n+  --> $DIR/ambiguous-builtin-attrs.rs:7:5\n+   |\n+LL | use builtin_attrs::*;\n+   |     ^^^^^^^^^^^^^^^^\n+note: `repr` could also refer to the name defined here\n+  --> $DIR/ambiguous-builtin-attrs.rs:35:11\n+   |\n+LL |         #[repr(C)] //~ ERROR `repr` is ambiguous\n+   |           ^^^^\n+   = note: consider adding an explicit import of `repr` to disambiguate\n+\n+error[E0659]: `feature` is ambiguous\n+  --> $DIR/ambiguous-builtin-attrs.rs:3:4\n+   |\n+LL | #![feature(decl_macro)] //~ ERROR `feature` is ambiguous\n+   |    ^^^^^^^ ambiguous name\n+   |\n+note: `feature` could refer to the name imported here\n+  --> $DIR/ambiguous-builtin-attrs.rs:7:5\n+   |\n+LL | use builtin_attrs::*;\n+   |     ^^^^^^^^^^^^^^^^\n+note: `feature` could also refer to the name defined here\n+  --> $DIR/ambiguous-builtin-attrs.rs:3:4\n+   |\n+LL | #![feature(decl_macro)] //~ ERROR `feature` is ambiguous\n+   |    ^^^^^^^\n+   = note: consider adding an explicit import of `feature` to disambiguate\n+\n+error[E0425]: cannot find value `NonExistent` in this scope\n+  --> $DIR/ambiguous-builtin-attrs.rs:43:5\n+   |\n+LL |     NonExistent; //~ ERROR cannot find value `NonExistent` in this scope\n+   |     ^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to 7 previous errors\n+\n+Some errors occurred: E0425, E0659.\n+For more information about an error, try `rustc --explain E0425`."}, {"sha": "332df815b193331b1df0ad7653d1e22971ade885", "filename": "src/test/ui-fulldeps/proc-macro/auxiliary/builtin-attrs.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d0aaf895ee74d23445bbe98a601b544d953c4c0b/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fbuiltin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0aaf895ee74d23445bbe98a601b544d953c4c0b/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fbuiltin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fbuiltin-attrs.rs?ref=d0aaf895ee74d23445bbe98a601b544d953c4c0b", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+#[proc_macro_attribute]\n+pub fn feature(_: TokenStream, input: TokenStream) -> TokenStream {\n+    input\n+}\n+\n+#[proc_macro_attribute]\n+pub fn repr(_: TokenStream, input: TokenStream) -> TokenStream {\n+    input\n+}\n+\n+#[proc_macro_attribute]\n+pub fn cfg(_: TokenStream, input: TokenStream) -> TokenStream {\n+    input\n+}\n+\n+#[proc_macro_attribute]\n+pub fn cfg_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n+    input\n+}\n+\n+#[proc_macro_attribute]\n+pub fn derive(_: TokenStream, input: TokenStream) -> TokenStream {\n+    input\n+}\n+\n+#[proc_macro_attribute]\n+pub fn test(_: TokenStream, input: TokenStream) -> TokenStream {\n+    \"struct Test;\".parse().unwrap()\n+}\n+\n+#[proc_macro_attribute]\n+pub fn bench(_: TokenStream, input: TokenStream) -> TokenStream {\n+    \"struct Bench;\".parse().unwrap()\n+}"}]}