{"sha": "5bfad5cc858d3b59d30da6d411449883581ff510", "node_id": "C_kwDOAAsO6NoAKDViZmFkNWNjODU4ZDNiNTlkMzBkYTZkNDExNDQ5ODgzNTgxZmY1MTA", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-01-22T22:06:28Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-01-24T00:25:10Z"}, "message": "Thread a ParamEnv down to might_permit_raw_init", "tree": {"sha": "db1f27a6c8ba169461b42407154dfe65c3839a04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db1f27a6c8ba169461b42407154dfe65c3839a04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bfad5cc858d3b59d30da6d411449883581ff510", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bfad5cc858d3b59d30da6d411449883581ff510", "html_url": "https://github.com/rust-lang/rust/commit/5bfad5cc858d3b59d30da6d411449883581ff510", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bfad5cc858d3b59d30da6d411449883581ff510/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "662199f125005dca31bf9cdfa298bd5a7994e07c", "url": "https://api.github.com/repos/rust-lang/rust/commits/662199f125005dca31bf9cdfa298bd5a7994e07c", "html_url": "https://github.com/rust-lang/rust/commit/662199f125005dca31bf9cdfa298bd5a7994e07c"}], "stats": {"total": 67, "additions": 45, "deletions": 22}, "files": [{"sha": "b1adaa193b333b1e906281d961b4eb8e5f4ef096", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5bfad5cc858d3b59d30da6d411449883581ff510/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfad5cc858d3b59d30da6d411449883581ff510/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=5bfad5cc858d3b59d30da6d411449883581ff510", "patch": "@@ -21,6 +21,7 @@ mod simd;\n pub(crate) use cpuid::codegen_cpuid_call;\n pub(crate) use llvm::codegen_llvm_intrinsic_call;\n \n+use rustc_middle::ty::layout::HasParamEnv;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -659,7 +660,9 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 return;\n             }\n \n-            if intrinsic == sym::assert_zero_valid && !fx.tcx.permits_zero_init(layout) {\n+            if intrinsic == sym::assert_zero_valid\n+                && !fx.tcx.permits_zero_init(fx.param_env().and(layout))\n+            {\n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic(\n                         fx,\n@@ -674,7 +677,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             }\n \n             if intrinsic == sym::assert_mem_uninitialized_valid\n-                && !fx.tcx.permits_uninit_init(layout)\n+                && !fx.tcx.permits_uninit_init(fx.param_env().and(layout))\n             {\n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic("}, {"sha": "c73f415ad8f20adfce7ab6c4d25e4303d86320f7", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bfad5cc858d3b59d30da6d411449883581ff510/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfad5cc858d3b59d30da6d411449883581ff510/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=5bfad5cc858d3b59d30da6d411449883581ff510", "patch": "@@ -678,8 +678,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let layout = bx.layout_of(ty);\n             let do_panic = match intrinsic {\n                 Inhabited => layout.abi.is_uninhabited(),\n-                ZeroValid => !bx.tcx().permits_zero_init(layout),\n-                MemUninitializedValid => !bx.tcx().permits_uninit_init(layout),\n+                ZeroValid => !bx.tcx().permits_zero_init(bx.param_env().and(layout)),\n+                MemUninitializedValid => !bx.tcx().permits_uninit_init(bx.param_env().and(layout)),\n             };\n             Some(if do_panic {\n                 let msg_str = with_no_visible_paths!({"}, {"sha": "236a4a813ab103933d6271efda2ff2fb160d7431", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bfad5cc858d3b59d30da6d411449883581ff510/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfad5cc858d3b59d30da6d411449883581ff510/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=5bfad5cc858d3b59d30da6d411449883581ff510", "patch": "@@ -449,7 +449,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 }\n \n                 if intrinsic_name == sym::assert_zero_valid {\n-                    let should_panic = !self.tcx.permits_zero_init(layout);\n+                    let should_panic = !self.tcx.permits_zero_init(self.param_env.and(layout));\n \n                     if should_panic {\n                         M::abort(\n@@ -463,7 +463,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 }\n \n                 if intrinsic_name == sym::assert_mem_uninitialized_valid {\n-                    let should_panic = !self.tcx.permits_uninit_init(layout);\n+                    let should_panic = !self.tcx.permits_uninit_init(self.param_env.and(layout));\n \n                     if should_panic {\n                         M::abort("}, {"sha": "9d890f0194d39160658be308525baecd22871deb", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5bfad5cc858d3b59d30da6d411449883581ff510/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfad5cc858d3b59d30da6d411449883581ff510/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=5bfad5cc858d3b59d30da6d411449883581ff510", "patch": "@@ -59,7 +59,12 @@ pub fn provide(providers: &mut Providers) {\n         let (param_env, value) = param_env_and_value.into_parts();\n         const_eval::deref_mir_constant(tcx, param_env, value)\n     };\n-    providers.permits_uninit_init =\n-        |tcx, ty| util::might_permit_raw_init(tcx, ty, InitKind::UninitMitigated0x01Fill);\n-    providers.permits_zero_init = |tcx, ty| util::might_permit_raw_init(tcx, ty, InitKind::Zero);\n+    providers.permits_uninit_init = |tcx, param_env_and_ty| {\n+        let (param_env, ty) = param_env_and_ty.into_parts();\n+        util::might_permit_raw_init(tcx, param_env, ty, InitKind::UninitMitigated0x01Fill)\n+    };\n+    providers.permits_zero_init = |tcx, param_env_and_ty| {\n+        let (param_env, ty) = param_env_and_ty.into_parts();\n+        util::might_permit_raw_init(tcx, param_env, ty, InitKind::Zero)\n+    };\n }"}, {"sha": "48961b7aac64588486695ddc2ba4b61d4a036117", "filename": "compiler/rustc_const_eval/src/util/might_permit_raw_init.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bfad5cc858d3b59d30da6d411449883581ff510/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmight_permit_raw_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfad5cc858d3b59d30da6d411449883581ff510/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmight_permit_raw_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmight_permit_raw_init.rs?ref=5bfad5cc858d3b59d30da6d411449883581ff510", "patch": "@@ -20,13 +20,14 @@ use crate::interpret::{InterpCx, MemoryKind, OpTy};\n /// to the full uninit check).\n pub fn might_permit_raw_init<'tcx>(\n     tcx: TyCtxt<'tcx>,\n+    param_env: ParamEnv<'tcx>,\n     ty: TyAndLayout<'tcx>,\n     kind: InitKind,\n ) -> bool {\n     if tcx.sess.opts.unstable_opts.strict_init_checks {\n         might_permit_raw_init_strict(ty, tcx, kind)\n     } else {\n-        let layout_cx = LayoutCx { tcx, param_env: ParamEnv::reveal_all() };\n+        let layout_cx = LayoutCx { tcx, param_env };\n         might_permit_raw_init_lax(ty, &layout_cx, kind)\n     }\n }"}, {"sha": "7f1bb721b810872038bc3ce50a4b6702efb7a688", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bfad5cc858d3b59d30da6d411449883581ff510/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfad5cc858d3b59d30da6d411449883581ff510/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=5bfad5cc858d3b59d30da6d411449883581ff510", "patch": "@@ -2109,12 +2109,12 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    query permits_uninit_init(key: TyAndLayout<'tcx>) -> bool {\n-        desc { \"checking to see if `{}` permits being left uninit\", key.ty }\n+    query permits_uninit_init(key: ty::ParamEnvAnd<'tcx, TyAndLayout<'tcx>>) -> bool {\n+        desc { \"checking to see if `{}` permits being left uninit\", key.value.ty }\n     }\n \n-    query permits_zero_init(key: TyAndLayout<'tcx>) -> bool {\n-        desc { \"checking to see if `{}` permits being left zeroed\", key.ty }\n+    query permits_zero_init(key: ty::ParamEnvAnd<'tcx, TyAndLayout<'tcx>>) -> bool {\n+        desc { \"checking to see if `{}` permits being left zeroed\", key.value.ty }\n     }\n \n     query compare_impl_const("}, {"sha": "164e92046155c1f8abd995fccd728f6180c17406", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5bfad5cc858d3b59d30da6d411449883581ff510/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfad5cc858d3b59d30da6d411449883581ff510/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=5bfad5cc858d3b59d30da6d411449883581ff510", "patch": "@@ -11,6 +11,7 @@ use crate::ty::{self, InferConst, Lift, Term, TermKind, Ty, TyCtxt};\n use rustc_data_structures::functor::IdFunctor;\n use rustc_hir::def::Namespace;\n use rustc_index::vec::{Idx, IndexVec};\n+use rustc_target::abi::TyAndLayout;\n \n use std::fmt;\n use std::mem::ManuallyDrop;\n@@ -843,3 +844,9 @@ impl<'tcx> TypeSuperVisitable<'tcx> for ty::UnevaluatedConst<'tcx> {\n         self.substs.visit_with(visitor)\n     }\n }\n+\n+impl<'tcx> TypeVisitable<'tcx> for TyAndLayout<'tcx, Ty<'tcx>> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        visitor.visit_ty(self.ty)\n+    }\n+}"}, {"sha": "e1faa7a08d939425e0de3777b992099c66f9db7a", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5bfad5cc858d3b59d30da6d411449883581ff510/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfad5cc858d3b59d30da6d411449883581ff510/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=5bfad5cc858d3b59d30da6d411449883581ff510", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::mir::{\n     BinOp, Body, Constant, ConstantKind, LocalDecls, Operand, Place, ProjectionElem, Rvalue,\n     SourceInfo, Statement, StatementKind, Terminator, TerminatorKind, UnOp,\n };\n-use rustc_middle::ty::{self, layout::TyAndLayout, ParamEnv, SubstsRef, Ty, TyCtxt};\n+use rustc_middle::ty::{self, layout::TyAndLayout, ParamEnv, ParamEnvAnd, SubstsRef, Ty, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n \n pub struct InstCombine;\n@@ -231,7 +231,7 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n         // Check this is a foldable intrinsic before we query the layout of our generic parameter\n         let Some(assert_panics) = intrinsic_assert_panics(intrinsic_name) else { return; };\n         let Ok(layout) = self.tcx.layout_of(self.param_env.and(ty)) else { return; };\n-        if assert_panics(self.tcx, layout) {\n+        if assert_panics(self.tcx, self.param_env.and(layout)) {\n             // If we know the assert panics, indicate to later opts that the call diverges\n             *target = None;\n         } else {\n@@ -243,18 +243,25 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n \n fn intrinsic_assert_panics<'tcx>(\n     intrinsic_name: Symbol,\n-) -> Option<fn(TyCtxt<'tcx>, TyAndLayout<'tcx>) -> bool> {\n-    fn inhabited_predicate<'tcx>(_tcx: TyCtxt<'tcx>, layout: TyAndLayout<'tcx>) -> bool {\n+) -> Option<fn(TyCtxt<'tcx>, ParamEnvAnd<'tcx, TyAndLayout<'tcx>>) -> bool> {\n+    fn inhabited_predicate<'tcx>(\n+        _tcx: TyCtxt<'tcx>,\n+        param_env_and_layout: ParamEnvAnd<'tcx, TyAndLayout<'tcx>>,\n+    ) -> bool {\n+        let (_param_env, layout) = param_env_and_layout.into_parts();\n         layout.abi.is_uninhabited()\n     }\n-    fn zero_valid_predicate<'tcx>(tcx: TyCtxt<'tcx>, layout: TyAndLayout<'tcx>) -> bool {\n-        !tcx.permits_zero_init(layout)\n+    fn zero_valid_predicate<'tcx>(\n+        tcx: TyCtxt<'tcx>,\n+        param_env_and_layout: ParamEnvAnd<'tcx, TyAndLayout<'tcx>>,\n+    ) -> bool {\n+        !tcx.permits_zero_init(param_env_and_layout)\n     }\n     fn mem_uninitialized_valid_predicate<'tcx>(\n         tcx: TyCtxt<'tcx>,\n-        layout: TyAndLayout<'tcx>,\n+        param_env_and_layout: ParamEnvAnd<'tcx, TyAndLayout<'tcx>>,\n     ) -> bool {\n-        !tcx.permits_uninit_init(layout)\n+        !tcx.permits_uninit_init(param_env_and_layout)\n     }\n \n     match intrinsic_name {"}]}