{"sha": "8f55245fdc7d3ad26e2dff1e61d2b6efa293d3d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNTUyNDVmZGM3ZDNhZDI2ZTJkZmYxZTYxZDJiNmVmYTI5M2QzZDA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-15T00:29:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-15T00:29:43Z"}, "message": "Rollup merge of #64457 - petrochenkov:macunfield, r=matthewjasper\n\ndef_collector: Do not ICE on attributes on unnamed fields\n\nThe primary issue here is that the expansion infra needs to visit a field in isolation, and fields don't know their own indices during expansion, so they have to be kept in some other place (e.g. `struct Definitions`).\n\nFixes https://github.com/rust-lang/rust/issues/64385", "tree": {"sha": "f5a949dbf00869c7a1a5c051a5c42b2a5f32f948", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5a949dbf00869c7a1a5c051a5c42b2a5f32f948"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f55245fdc7d3ad26e2dff1e61d2b6efa293d3d0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdfYX3CRBK7hj4Ov3rIwAAdHIIAJDrzs6Y/C/yZnQC8de7vCYo\nnYi2RX2bfGQN3JIF9/mVDd+wvsoR69oTGy779/w6z+uBmUGb2DIZHIqWktymVTi/\n2qBgWzpqCX6oegQMJ3uMOrCb1IIIWJQLz1ZIAETqQECt319av4KTsxtuoKGV729U\n8/JroZPR/HrqcY72Q4jegcUpbjGfJX8oKxmyqzYax+GdSOwJMhYDC19eqBOQzLfC\nZv6LEAbeCEMlbjWj0tWSMOnUejPnFOqhDA6uPFBjSZeC5XRs5QrNfJhVtFUSzIrJ\n44ArxqNA+CP7cng/9P/hTpEJe+nr0j418xpoiVLN+JKJSvzX6vmahjM6zHDYiQA=\n=i+oH\n-----END PGP SIGNATURE-----\n", "payload": "tree f5a949dbf00869c7a1a5c051a5c42b2a5f32f948\nparent b35ebac96102cd12406d9d87827b0838d129c278\nparent c681cf781b440620aca8cad4be9b76a477fc6c1a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1568507383 +0200\ncommitter GitHub <noreply@github.com> 1568507383 +0200\n\nRollup merge of #64457 - petrochenkov:macunfield, r=matthewjasper\n\ndef_collector: Do not ICE on attributes on unnamed fields\n\nThe primary issue here is that the expansion infra needs to visit a field in isolation, and fields don't know their own indices during expansion, so they have to be kept in some other place (e.g. `struct Definitions`).\n\nFixes https://github.com/rust-lang/rust/issues/64385\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f55245fdc7d3ad26e2dff1e61d2b6efa293d3d0", "html_url": "https://github.com/rust-lang/rust/commit/8f55245fdc7d3ad26e2dff1e61d2b6efa293d3d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f55245fdc7d3ad26e2dff1e61d2b6efa293d3d0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b35ebac96102cd12406d9d87827b0838d129c278", "url": "https://api.github.com/repos/rust-lang/rust/commits/b35ebac96102cd12406d9d87827b0838d129c278", "html_url": "https://github.com/rust-lang/rust/commit/b35ebac96102cd12406d9d87827b0838d129c278"}, {"sha": "c681cf781b440620aca8cad4be9b76a477fc6c1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c681cf781b440620aca8cad4be9b76a477fc6c1a", "html_url": "https://github.com/rust-lang/rust/commit/c681cf781b440620aca8cad4be9b76a477fc6c1a"}], "stats": {"total": 59, "additions": 38, "deletions": 21}, "files": [{"sha": "d1cc7a8ce988fd30efc58a0bb6ccfd7418a18c92", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8f55245fdc7d3ad26e2dff1e61d2b6efa293d3d0/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f55245fdc7d3ad26e2dff1e61d2b6efa293d3d0/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=8f55245fdc7d3ad26e2dff1e61d2b6efa293d3d0", "patch": "@@ -31,7 +31,7 @@ impl<'a> DefCollector<'a> {\n         self.definitions.create_def_with_parent(parent_def, node_id, data, self.expansion, span)\n     }\n \n-    pub fn with_parent<F: FnOnce(&mut Self)>(&mut self, parent_def: DefIndex, f: F) {\n+    fn with_parent<F: FnOnce(&mut Self)>(&mut self, parent_def: DefIndex, f: F) {\n         let orig_parent_def = std::mem::replace(&mut self.parent_def, parent_def);\n         f(self);\n         self.parent_def = orig_parent_def;\n@@ -74,6 +74,22 @@ impl<'a> DefCollector<'a> {\n         })\n     }\n \n+    fn collect_field(&mut self, field: &'a StructField, index: Option<usize>) {\n+        if field.is_placeholder {\n+            self.visit_macro_invoc(field.id);\n+        } else {\n+            let name = field.ident.map(|ident| ident.name)\n+                .or_else(|| index.map(sym::integer))\n+                .unwrap_or_else(|| {\n+                    let node_id = NodeId::placeholder_from_expn_id(self.expansion);\n+                    sym::integer(self.definitions.placeholder_field_indices[&node_id])\n+                })\n+                .as_interned_str();\n+            let def = self.create_def(field.id, DefPathData::ValueNs(name), field.span);\n+            self.with_parent(def, |this| visit::walk_struct_field(this, field));\n+        }\n+    }\n+\n     pub fn visit_macro_invoc(&mut self, id: NodeId) {\n         self.definitions.set_invocation_parent(id.placeholder_to_expn_id(), self.parent_def);\n     }\n@@ -170,17 +186,14 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     }\n \n     fn visit_variant_data(&mut self, data: &'a VariantData) {\n+        // The assumption here is that non-`cfg` macro expansion cannot change field indices.\n+        // It currently holds because only inert attributes are accepted on fields,\n+        // and every such attribute expands into a single field after it's resolved.\n         for (index, field) in data.fields().iter().enumerate() {\n-            if field.is_placeholder {\n-                self.visit_macro_invoc(field.id);\n-                continue;\n+            self.collect_field(field, Some(index));\n+            if field.is_placeholder && field.ident.is_none() {\n+                self.definitions.placeholder_field_indices.insert(field.id, index);\n             }\n-            let name = field.ident.map(|ident| ident.name)\n-                .unwrap_or_else(|| sym::integer(index));\n-            let def = self.create_def(field.id,\n-                                      DefPathData::ValueNs(name.as_interned_str()),\n-                                      field.span);\n-            self.with_parent(def, |this| visit::walk_struct_field(this, field));\n         }\n     }\n \n@@ -338,16 +351,9 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         }\n     }\n \n-    fn visit_struct_field(&mut self, sf: &'a StructField) {\n-        if sf.is_placeholder {\n-            self.visit_macro_invoc(sf.id)\n-        } else {\n-            let name = sf.ident.map(|ident| ident.name)\n-                .unwrap_or_else(|| panic!(\"don't know the field number in this context\"));\n-            let def = self.create_def(sf.id,\n-                                        DefPathData::ValueNs(name.as_interned_str()),\n-                                        sf.span);\n-            self.with_parent(def, |this| visit::walk_struct_field(this, sf));\n-        }\n+    // This method is called only when we are visiting an individual field\n+    // after expanding an attribute on it.\n+    fn visit_struct_field(&mut self, field: &'a StructField) {\n+        self.collect_field(field, None);\n     }\n }"}, {"sha": "187bc5933246078819b9cba87d3a819c453c9677", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f55245fdc7d3ad26e2dff1e61d2b6efa293d3d0/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f55245fdc7d3ad26e2dff1e61d2b6efa293d3d0/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=8f55245fdc7d3ad26e2dff1e61d2b6efa293d3d0", "patch": "@@ -104,6 +104,8 @@ pub struct Definitions {\n     /// When collecting definitions from an AST fragment produced by a macro invocation `ExpnId`\n     /// we know what parent node that fragment should be attached to thanks to this table.\n     invocation_parents: FxHashMap<ExpnId, DefIndex>,\n+    /// Indices of unnamed struct or variant fields with unresolved attributes.\n+    pub(super) placeholder_field_indices: NodeMap<usize>,\n }\n \n /// A unique identifier that we can use to lookup a definition"}, {"sha": "93f364047e9a5dfc6bf780cc66c56696a3caec4e", "filename": "src/test/ui/attributes/unnamed-field-attributes.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8f55245fdc7d3ad26e2dff1e61d2b6efa293d3d0/src%2Ftest%2Fui%2Fattributes%2Funnamed-field-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f55245fdc7d3ad26e2dff1e61d2b6efa293d3d0/src%2Ftest%2Fui%2Fattributes%2Funnamed-field-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funnamed-field-attributes.rs?ref=8f55245fdc7d3ad26e2dff1e61d2b6efa293d3d0", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+struct S(\n+    #[rustfmt::skip] u8,\n+    u16,\n+    #[rustfmt::skip] u32,\n+);\n+\n+fn main() {}"}]}