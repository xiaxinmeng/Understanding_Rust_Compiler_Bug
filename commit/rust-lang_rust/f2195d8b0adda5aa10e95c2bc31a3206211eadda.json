{"sha": "f2195d8b0adda5aa10e95c2bc31a3206211eadda", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMTk1ZDhiMGFkZGE1YWExMGU5NWMyYmMzMWEzMjA2MjExZWFkZGE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-24T01:05:27Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-24T01:05:27Z"}, "message": "Print recursive LLVM types.", "tree": {"sha": "7a5c8b379999de269d8f42303c4b9d830c9ad119", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a5c8b379999de269d8f42303c4b9d830c9ad119"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2195d8b0adda5aa10e95c2bc31a3206211eadda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2195d8b0adda5aa10e95c2bc31a3206211eadda", "html_url": "https://github.com/rust-lang/rust/commit/f2195d8b0adda5aa10e95c2bc31a3206211eadda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2195d8b0adda5aa10e95c2bc31a3206211eadda/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daac7a8b130f8f2dfbdeaf38ff39541adfd74736", "url": "https://api.github.com/repos/rust-lang/rust/commits/daac7a8b130f8f2dfbdeaf38ff39541adfd74736", "html_url": "https://github.com/rust-lang/rust/commit/daac7a8b130f8f2dfbdeaf38ff39541adfd74736"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "792642ad85565f8800ba342e2597682c6a6a3f37", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f2195d8b0adda5aa10e95c2bc31a3206211eadda/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2195d8b0adda5aa10e95c2bc31a3206211eadda/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=f2195d8b0adda5aa10e95c2bc31a3206211eadda", "patch": "@@ -1133,9 +1133,17 @@ fn mk_type_handle() -> type_handle {\n }\n \n fn type_to_str(TypeRef ty) -> str {\n+    let vec[TypeRef] v = vec();\n+    ret type_to_str_inner(v, ty);\n+}\n+\n+fn type_to_str_inner(vec[TypeRef] outer0, TypeRef ty) -> str {\n+\n+    auto outer = outer0 + vec(ty);\n+\n     let int kind = llvm.LLVMGetTypeKind(ty);\n \n-    fn tys_str(vec[TypeRef] tys) -> str {\n+    fn tys_str(vec[TypeRef] outer, vec[TypeRef] tys) -> str {\n         let str s = \"\";\n         let bool first = true;\n         for (TypeRef t in tys) {\n@@ -1144,7 +1152,7 @@ fn type_to_str(TypeRef ty) -> str {\n             } else {\n                 s += \", \";\n             }\n-            s += type_to_str(t);\n+            s += type_to_str_inner(outer, t);\n         }\n         ret s;\n     }\n@@ -1173,9 +1181,9 @@ fn type_to_str(TypeRef ty) -> str {\n             let vec[TypeRef] args =\n                 _vec.init_elt[TypeRef](0 as TypeRef, n_args);\n             llvm.LLVMGetParamTypes(ty, _vec.buf[TypeRef](args));\n-            s += tys_str(args);\n+            s += tys_str(outer, args);\n             s += \") -> \";\n-            s += type_to_str(out_ty);\n+            s += type_to_str_inner(outer, out_ty);\n             ret s;\n         }\n \n@@ -1185,15 +1193,23 @@ fn type_to_str(TypeRef ty) -> str {\n             let vec[TypeRef] elts =\n                 _vec.init_elt[TypeRef](0 as TypeRef, n_elts);\n             llvm.LLVMGetStructElementTypes(ty, _vec.buf[TypeRef](elts));\n-            s += tys_str(elts);\n+            s += tys_str(outer, elts);\n             s += \"}\";\n             ret s;\n         }\n \n         case (10) { ret \"Array\"; }\n \n         case (11) {\n-            ret \"*\" + type_to_str(llvm.LLVMGetElementType(ty));\n+            let uint i = 0u;\n+            for (TypeRef tout in outer0) {\n+                i += 1u;\n+                if (tout as int == ty as int) {\n+                    let uint n = _vec.len[TypeRef](outer0) - i;\n+                    ret \"*\\\\\" + util.common.istr(n as int);\n+                }\n+            }\n+            ret \"*\" + type_to_str_inner(outer, llvm.LLVMGetElementType(ty));\n         }\n \n         case (12) { ret \"Opaque\"; }"}]}