{"sha": "5694b8e4718ad7649b230a76fcdfe1673d489ebc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2OTRiOGU0NzE4YWQ3NjQ5YjIzMGE3NmZjZGZlMTY3M2Q0ODllYmM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-12-30T21:36:17Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-12-30T21:49:08Z"}, "message": "Don't use doc_comment!{} hack in nonzero_leading_trailing_zeros!{}.", "tree": {"sha": "25fd169edb1bc0c641c214921b46ea282ddf4ebb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25fd169edb1bc0c641c214921b46ea282ddf4ebb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5694b8e4718ad7649b230a76fcdfe1673d489ebc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5694b8e4718ad7649b230a76fcdfe1673d489ebc", "html_url": "https://github.com/rust-lang/rust/commit/5694b8e4718ad7649b230a76fcdfe1673d489ebc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5694b8e4718ad7649b230a76fcdfe1673d489ebc/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27b81bf97a53fc05da1bc19872bbc18a6fc410af", "url": "https://api.github.com/repos/rust-lang/rust/commits/27b81bf97a53fc05da1bc19872bbc18a6fc410af", "html_url": "https://github.com/rust-lang/rust/commit/27b81bf97a53fc05da1bc19872bbc18a6fc410af"}], "stats": {"total": 86, "additions": 41, "deletions": 45}, "files": [{"sha": "ba8918b192fa301da03fca8efbc944cfdb2b5b1c", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 41, "deletions": 45, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/5694b8e4718ad7649b230a76fcdfe1673d489ebc/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5694b8e4718ad7649b230a76fcdfe1673d489ebc/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=5694b8e4718ad7649b230a76fcdfe1673d489ebc", "patch": "@@ -182,53 +182,49 @@ macro_rules! nonzero_leading_trailing_zeros {\n     ( $( $Ty: ident($Uint: ty) , $LeadingTestExpr:expr ;)+ ) => {\n         $(\n             impl $Ty {\n-                doc_comment! {\n-                    concat!(\"Returns the number of leading zeros in the binary representation of `self`.\n-\n-On many architectures, this function can perform better than `leading_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n-\n-# Examples\n-\n-Basic usage:\n-\n-```\n-#![feature(nonzero_leading_trailing_zeros)]\n-let n = std::num::\", stringify!($Ty), \"::new(\", stringify!($LeadingTestExpr), \").unwrap();\n-\n-assert_eq!(n.leading_zeros(), 0);\n-```\"),\n-                    #[unstable(feature = \"nonzero_leading_trailing_zeros\", issue = \"79143\")]\n-                    #[rustc_const_unstable(feature = \"nonzero_leading_trailing_zeros\", issue = \"79143\")]\n-                    #[inline]\n-                    pub const fn leading_zeros(self) -> u32 {\n-                        // SAFETY: since `self` can not be zero it is safe to call ctlz_nonzero\n-                        unsafe { intrinsics::ctlz_nonzero(self.0 as $Uint) as u32 }\n-                    }\n+                /// Returns the number of leading zeros in the binary representation of `self`.\n+                ///\n+                /// On many architectures, this function can perform better than `leading_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n+                ///\n+                /// # Examples\n+                ///\n+                /// Basic usage:\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_leading_trailing_zeros)]\n+                #[doc = concat!(\"let n = std::num::\", stringify!($Ty), \"::new(\", stringify!($LeadingTestExpr), \").unwrap();\")]\n+                ///\n+                /// assert_eq!(n.leading_zeros(), 0);\n+                /// ```\n+                #[unstable(feature = \"nonzero_leading_trailing_zeros\", issue = \"79143\")]\n+                #[rustc_const_unstable(feature = \"nonzero_leading_trailing_zeros\", issue = \"79143\")]\n+                #[inline]\n+                pub const fn leading_zeros(self) -> u32 {\n+                    // SAFETY: since `self` can not be zero it is safe to call ctlz_nonzero\n+                    unsafe { intrinsics::ctlz_nonzero(self.0 as $Uint) as u32 }\n                 }\n \n-                doc_comment! {\n-                    concat!(\"Returns the number of trailing zeros in the binary representation\n-of `self`.\n-\n-On many architectures, this function can perform better than `trailing_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n-\n-# Examples\n-\n-Basic usage:\n-\n-```\n-#![feature(nonzero_leading_trailing_zeros)]\n-let n = std::num::\", stringify!($Ty), \"::new(0b0101000).unwrap();\n-\n-assert_eq!(n.trailing_zeros(), 3);\n-```\"),\n-                    #[unstable(feature = \"nonzero_leading_trailing_zeros\", issue = \"79143\")]\n-                    #[rustc_const_unstable(feature = \"nonzero_leading_trailing_zeros\", issue = \"79143\")]\n-                    #[inline]\n-                    pub const fn trailing_zeros(self) -> u32 {\n-                        // SAFETY: since `self` can not be zero it is safe to call cttz_nonzero\n-                        unsafe { intrinsics::cttz_nonzero(self.0 as $Uint) as u32 }\n-                    }\n+                /// Returns the number of trailing zeros in the binary representation\n+                /// of `self`.\n+                ///\n+                /// On many architectures, this function can perform better than `trailing_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n+                ///\n+                /// # Examples\n+                ///\n+                /// Basic usage:\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_leading_trailing_zeros)]\n+                #[doc = concat!(\"let n = std::num::\", stringify!($Ty), \"::new(0b0101000).unwrap();\")]\n+                ///\n+                /// assert_eq!(n.trailing_zeros(), 3);\n+                /// ```\n+                #[unstable(feature = \"nonzero_leading_trailing_zeros\", issue = \"79143\")]\n+                #[rustc_const_unstable(feature = \"nonzero_leading_trailing_zeros\", issue = \"79143\")]\n+                #[inline]\n+                pub const fn trailing_zeros(self) -> u32 {\n+                    // SAFETY: since `self` can not be zero it is safe to call cttz_nonzero\n+                    unsafe { intrinsics::cttz_nonzero(self.0 as $Uint) as u32 }\n                 }\n \n             }"}]}