{"sha": "ad71cbfe66f29f9a9ba3c3d2af5d487d727edc1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNzFjYmZlNjZmMjlmOWE5YmEzYzNkMmFmNWQ0ODdkNzI3ZWRjMWU=", "commit": {"author": {"name": "Eh2406", "email": "YeomanYaacov@gmail.com", "date": "2018-06-27T22:50:48Z"}, "committer": {"name": "Eh2406", "email": "YeomanYaacov@gmail.com", "date": "2018-06-28T14:18:33Z"}, "message": "use deref instead of inner", "tree": {"sha": "bfd5a68ceae3a3930c2f4a202f7813742181a13b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfd5a68ceae3a3930c2f4a202f7813742181a13b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad71cbfe66f29f9a9ba3c3d2af5d487d727edc1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad71cbfe66f29f9a9ba3c3d2af5d487d727edc1e", "html_url": "https://github.com/rust-lang/rust/commit/ad71cbfe66f29f9a9ba3c3d2af5d487d727edc1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad71cbfe66f29f9a9ba3c3d2af5d487d727edc1e/comments", "author": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b44db126ef7701e76a6048c784764151d71d6c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b44db126ef7701e76a6048c784764151d71d6c4", "html_url": "https://github.com/rust-lang/rust/commit/4b44db126ef7701e76a6048c784764151d71d6c4"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "cbef674b2693a10caca3c3b99dd85767d11ea8c7", "filename": "src/librustc_mir/borrow_check/nll/constraint_set.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ad71cbfe66f29f9a9ba3c3d2af5d487d727edc1e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad71cbfe66f29f9a9ba3c3d2af5d487d727edc1e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_set.rs?ref=ad71cbfe66f29f9a9ba3c3d2af5d487d727edc1e", "patch": "@@ -15,6 +15,7 @@ use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n \n use std::fmt;\n use syntax_pos::Span;\n+use std::ops::Deref;\n \n #[derive(Clone, Default)]\n crate struct ConstraintSet {\n@@ -37,10 +38,6 @@ impl ConstraintSet {\n         }\n     }\n \n-    pub fn inner(&self) -> &IndexVec<ConstraintIndex, OutlivesConstraint> {\n-        &self.constraints\n-    }\n-\n     pub fn link(&mut self, len: usize) -> IndexVec<RegionVid, Option<ConstraintIndex>> {\n         let mut map = IndexVec::from_elem_n(None, len);\n \n@@ -66,6 +63,12 @@ impl ConstraintSet {\n     }\n }\n \n+impl Deref for ConstraintSet {\n+    type Target = IndexVec<ConstraintIndex, OutlivesConstraint>;\n+\n+    fn deref(&self) -> &Self::Target { &self.constraints }\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct OutlivesConstraint {\n     // NB. The ordering here is not significant for correctness, but"}, {"sha": "6c796ea4c73abe66195dd0d9e533e9ff2bf2721e", "filename": "src/librustc_mir/borrow_check/nll/region_infer/dump_mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad71cbfe66f29f9a9ba3c3d2af5d487d727edc1e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad71cbfe66f29f9a9ba3c3d2af5d487d727edc1e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs?ref=ad71cbfe66f29f9a9ba3c3d2af5d487d727edc1e", "patch": "@@ -76,7 +76,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             }\n         }\n \n-        let mut constraints: Vec<_> = self.constraints.inner().iter().collect();\n+        let mut constraints: Vec<_> = self.constraints.iter().collect();\n         constraints.sort();\n         for constraint in &constraints {\n             let OutlivesConstraint {"}, {"sha": "106dd003ceab9fb902621cec8e7ec281dc4d083c", "filename": "src/librustc_mir/borrow_check/nll/region_infer/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad71cbfe66f29f9a9ba3c3d2af5d487d727edc1e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad71cbfe66f29f9a9ba3c3d2af5d487d727edc1e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs?ref=ad71cbfe66f29f9a9ba3c3d2af5d487d727edc1e", "patch": "@@ -57,7 +57,7 @@ impl<'this, 'tcx> dot::GraphWalk<'this> for RegionInferenceContext<'tcx> {\n         vids.into_cow()\n     }\n     fn edges(&'this self) -> dot::Edges<'this, OutlivesConstraint> {\n-        (&self.constraints.inner().raw[..]).into_cow()\n+        (&self.constraints.raw[..]).into_cow()\n     }\n \n     // Render `a: b` as `a <- b`, indicating the flow"}, {"sha": "a576dc5f7f47b0a1f323e9cd6fb8348a8db006f5", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ad71cbfe66f29f9a9ba3c3d2af5d487d727edc1e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad71cbfe66f29f9a9ba3c3d2af5d487d727edc1e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=ad71cbfe66f29f9a9ba3c3d2af5d487d727edc1e", "patch": "@@ -216,7 +216,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         type_tests: Vec<TypeTest<'tcx>>,\n     ) -> Self {\n         // The `next` field should not yet have been initialized:\n-        debug_assert!(outlives_constraints.inner().iter().all(|c| c.next.is_none()));\n+        debug_assert!(outlives_constraints.iter().all(|c| c.next.is_none()));\n \n         let num_region_variables = var_infos.len();\n         let num_universal_regions = universal_regions.len();\n@@ -438,7 +438,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn compute_region_values(&self, _mir: &Mir<'tcx>) -> RegionValues {\n         debug!(\"compute_region_values()\");\n         debug!(\"compute_region_values: constraints={:#?}\", {\n-            let mut constraints: Vec<_> = self.constraints.inner().iter().collect();\n+            let mut constraints: Vec<_> = self.constraints.iter().collect();\n             constraints.sort();\n             constraints\n         });\n@@ -450,7 +450,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let dependency_map = self.dependency_map.as_ref().unwrap();\n \n         // Constraints that may need to be repropagated (initially all):\n-        let mut dirty_list: Vec<_> = self.constraints.inner().indices().collect();\n+        let mut dirty_list: Vec<_> = self.constraints.indices().collect();\n \n         // Set to 0 for each constraint that is on the dirty list:\n         let mut clean_bit_vec = BitVector::new(dirty_list.len());\n@@ -459,7 +459,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         while let Some(constraint_idx) = dirty_list.pop() {\n             clean_bit_vec.insert(constraint_idx.index());\n \n-            let constraint = &self.constraints.inner()[constraint_idx];\n+            let constraint = &self.constraints[constraint_idx];\n             debug!(\"propagate_constraints: constraint={:?}\", constraint);\n \n             if inferred_values.add_region(constraint.sup, constraint.sub) {\n@@ -925,7 +925,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             );\n \n             let blame_index = self.blame_constraint(longer_fr, shorter_fr);\n-            let blame_span = self.constraints.inner()[blame_index].span;\n+            let blame_span = self.constraints[blame_index].span;\n \n             if let Some(propagated_outlives_requirements) = propagated_outlives_requirements {\n                 // Shrink `fr` until we find a non-local region (if we do).\n@@ -1016,7 +1016,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // - `fr1: X` transitively\n         // - and `Y` is live at `elem`\n         let index = self.blame_constraint(fr1, elem);\n-        let region_sub = self.constraints.inner()[index].sub;\n+        let region_sub = self.constraints[index].sub;\n \n         // then return why `Y` was live at `elem`\n         self.liveness_constraints.cause(region_sub, elem)\n@@ -1037,7 +1037,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // of dependencies, which doesn't account for the locations of\n         // contraints at all. But it will do for now.\n         let relevant_constraint = self.constraints\n-            .inner()\n             .iter_enumerated()\n             .filter_map(|(i, constraint)| {\n                 if !self.liveness_constraints.contains(constraint.sub, elem) {\n@@ -1073,7 +1072,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         while changed {\n             changed = false;\n-            for constraint in self.constraints.inner() {\n+            for constraint in self.constraints.iter() {\n                 if let Some(n) = result_set[constraint.sup] {\n                     let m = n + 1;\n                     if result_set[constraint.sub]"}]}