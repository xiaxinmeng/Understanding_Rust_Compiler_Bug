{"sha": "e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZGE1ZDU5ZjgxN2ViNmEzYjc4MTM0ZDQ5YjgwYzNlZDZjYjQyYzk=", "commit": {"author": {"name": "Nikita Baksalyar", "email": "nikita.baksalyar@gmail.com", "date": "2016-01-28T11:02:31Z"}, "committer": {"name": "Nikita Baksalyar", "email": "nikita.baksalyar@gmail.com", "date": "2016-01-31T16:01:30Z"}, "message": "Rename sunos to solaris", "tree": {"sha": "cf136c8ed9301ce831416c08e3b3d6e3381d31fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf136c8ed9301ce831416c08e3b3d6e3381d31fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJWri/aAAoJED7qN4oOp1jazqQH/RtuKfaF9JC+Vci26bmgIKD4\npHJQ4I45IagxJopXIdnYCFXACxeCj3KX9sGSgXoYuPVBEB5DY4e8pA0D0CHPuyJc\n7VmCibmWxRYYPRuWAd2pnkYzrAyU673aJ4Nc4N1pMFFbJ63UiI8UerYibXBaxoYl\nJZgK74sRo2dbFYCL0tsq0vw8Mu6d3ErSUkQWb33HV1af7I96+s8OeNomlqFb8HRe\nwWdlzKvxrD9YGcGO1wIBSLUMZVW7sQsUlFL/Dw2EhScuTEYOwd5K4GyTRU3sg/iw\nmjLLGMyqFRiS6CstgRISup/bWTQMgKT1ni8m67C4hcUJpaFtpq9jl7CPwjhbzC4=\n=PnEF\n-----END PGP SIGNATURE-----", "payload": "tree cf136c8ed9301ce831416c08e3b3d6e3381d31fa\nparent 6d07b68f5e95debebe3983f8b2d9bfbc2afbe970\nauthor Nikita Baksalyar <nikita.baksalyar@gmail.com> 1453978951 +0300\ncommitter Nikita Baksalyar <nikita.baksalyar@gmail.com> 1454256090 +0300\n\nRename sunos to solaris\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "html_url": "https://github.com/rust-lang/rust/commit/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/comments", "author": {"login": "nbaksalyar", "id": 217316, "node_id": "MDQ6VXNlcjIxNzMxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/217316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbaksalyar", "html_url": "https://github.com/nbaksalyar", "followers_url": "https://api.github.com/users/nbaksalyar/followers", "following_url": "https://api.github.com/users/nbaksalyar/following{/other_user}", "gists_url": "https://api.github.com/users/nbaksalyar/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbaksalyar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbaksalyar/subscriptions", "organizations_url": "https://api.github.com/users/nbaksalyar/orgs", "repos_url": "https://api.github.com/users/nbaksalyar/repos", "events_url": "https://api.github.com/users/nbaksalyar/events{/privacy}", "received_events_url": "https://api.github.com/users/nbaksalyar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbaksalyar", "id": 217316, "node_id": "MDQ6VXNlcjIxNzMxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/217316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbaksalyar", "html_url": "https://github.com/nbaksalyar", "followers_url": "https://api.github.com/users/nbaksalyar/followers", "following_url": "https://api.github.com/users/nbaksalyar/following{/other_user}", "gists_url": "https://api.github.com/users/nbaksalyar/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbaksalyar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbaksalyar/subscriptions", "organizations_url": "https://api.github.com/users/nbaksalyar/orgs", "repos_url": "https://api.github.com/users/nbaksalyar/repos", "events_url": "https://api.github.com/users/nbaksalyar/events{/privacy}", "received_events_url": "https://api.github.com/users/nbaksalyar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d07b68f5e95debebe3983f8b2d9bfbc2afbe970", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d07b68f5e95debebe3983f8b2d9bfbc2afbe970", "html_url": "https://github.com/rust-lang/rust/commit/6d07b68f5e95debebe3983f8b2d9bfbc2afbe970"}], "stats": {"total": 112, "additions": 55, "deletions": 57}, "files": [{"sha": "cc408621726918da9aa868d15e4446c50692d058", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -25,7 +25,7 @@ const OS_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"openbsd\", \"openbsd\"),\n     (\"win32\", \"windows\"),\n     (\"windows\", \"windows\"),\n-    (\"solaris\", \"sunos\"),\n+    (\"solaris\", \"solaris\"),\n ];\n \n const ARCH_TABLE: &'static [(&'static str, &'static str)] = &["}, {"sha": "81babf924c9f9392a5635f9b715a613b292aedc8", "filename": "src/etc/snapshot.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Fetc%2Fsnapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Fetc%2Fsnapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fsnapshot.py?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -48,7 +48,7 @@ def scrub(b):\n         \"macos\": [\"bin/rustc\"],\n         \"netbsd\": [\"bin/rustc\"],\n         \"openbsd\": [\"bin/rustc\"],\n-        \"sunos\": [\"bin/rustc\"],\n+        \"solaris\": [\"bin/rustc\"],\n         \"winnt\": [\"bin/rustc.exe\"],\n         }\n "}, {"sha": "4abd8bb339dd4ac8abb15b2eb62e194ab6dc8e74", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -59,7 +59,7 @@ mod freebsd_base;\n mod linux_base;\n mod openbsd_base;\n mod netbsd_base;\n-mod sunos_base;\n+mod solaris_base;\n mod windows_base;\n mod windows_msvc_base;\n \n@@ -159,7 +159,7 @@ pub struct TargetOptions {\n     /// Whether the target toolchain is like Solaris's.\n     /// Only useful for compiling against Illumos/Solaris,\n     /// as they have a different set of linker flags. Defaults to false.\n-    pub is_like_sunos: bool,\n+    pub is_like_solaris: bool,\n     /// Whether the target toolchain is like Windows'. Only useful for compiling against Windows,\n     /// only really used for figuring out how to find libraries, since Windows uses its own\n     /// library naming convention. Defaults to false.\n@@ -232,7 +232,7 @@ impl Default for TargetOptions {\n             staticlib_suffix: \".a\".to_string(),\n             target_family: None,\n             is_like_osx: false,\n-            is_like_sunos: false,\n+            is_like_solaris: false,\n             is_like_windows: false,\n             is_like_android: false,\n             is_like_msvc: false,"}, {"sha": "bf99a141c106dcf9240d7d743d3b73e45c853e20", "filename": "src/librustc_back/target/solaris_base.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibrustc_back%2Ftarget%2Fsolaris_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibrustc_back%2Ftarget%2Fsolaris_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fsolaris_base.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -17,7 +17,7 @@ pub fn opts() -> TargetOptions {\n         dynamic_linking: true,\n         executables: true,\n         has_rpath: true,\n-        is_like_sunos: true,\n+        is_like_solaris: true,\n         archive_format: \"gnu\".to_string(),\n         exe_allocation_crate: super::maybe_jemalloc(),\n ", "previous_filename": "src/librustc_back/target/sunos_base.rs"}, {"sha": "fbe3f5abc908fee96a4a733d1b64bc2463291d45", "filename": "src/librustc_back/target/x86_64_sun_solaris.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -11,15 +11,15 @@\n use target::Target;\n \n pub fn target() -> Target {\n-    let mut base = super::sunos_base::opts();\n+    let mut base = super::solaris_base::opts();\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Target {\n-        llvm_target: \"x86_64-pc-solaris2.11\".to_string(),\n+        llvm_target: \"x86_64-pc-solaris\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"sunos\".to_string(),\n+        target_os: \"solaris\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"sun\".to_string(),\n         options: base,"}, {"sha": "55192bdf74484f547223e5f0eea7e000c0838458", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -131,7 +131,7 @@ impl<'a> Linker for GnuLinker<'a> {\n         // insert it here.\n         if self.sess.target.target.options.is_like_osx {\n             self.cmd.arg(\"-Wl,-dead_strip\");\n-        } else if self.sess.target.target.options.is_like_sunos {\n+        } else if self.sess.target.target.options.is_like_solaris {\n             self.cmd.arg(\"-Wl,-z\");\n             self.cmd.arg(\"-Wl,ignore\");\n "}, {"sha": "41bcfdb7cb0f03b86fe21efdc0c85a8fc3fa0639", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -111,7 +111,7 @@ mod imp {\n         pub const F_SETLKW: libc::c_int = 9;\n     }\n \n-    #[cfg(target_os = \"sunos\")]\n+    #[cfg(target_os = \"solaris\")]\n     mod os {\n         use libc;\n \n@@ -122,8 +122,6 @@ mod imp {\n             pub l_len: libc::off_t,\n             pub l_sysid: libc::c_int,\n             pub l_pid: libc::pid_t,\n-\n-            // __unused1: [libc::c_long; 4]\n         }\n \n         pub const F_WRLCK: libc::c_short = 2;"}, {"sha": "12edc9ffc64c89251673957ae79a8514cf7dd82b", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -173,7 +173,7 @@ mod tests {\n               target_os = \"bitrig\",\n               target_os = \"netbsd\",\n               target_os = \"openbsd\",\n-              target_os = \"sunos\"))]\n+              target_os = \"solaris\"))]\n     #[allow(deprecated)]\n     fn test_errors_do_not_crash() {\n         use path::Path;\n@@ -197,7 +197,7 @@ mod tests {\n           target_os = \"bitrig\",\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n-          target_os = \"sunos\"))]\n+          target_os = \"solaris\"))]\n mod dl {\n     use prelude::v1::*;\n "}, {"sha": "f68500c90e3e54c099b91d407ea4de9b40154807", "filename": "src/libstd/env.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -642,7 +642,7 @@ pub mod consts {\n     /// - bitrig\n     /// - netbsd\n     /// - openbsd\n-    /// - sunos\n+    /// - solaris\n     /// - android\n     /// - windows\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n@@ -803,10 +803,10 @@ mod os {\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n-#[cfg(target_os = \"sunos\")]\n+#[cfg(target_os = \"solaris\")]\n mod os {\n     pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"sunos\";\n+    pub const OS: &'static str = \"solaris\";\n     pub const DLL_PREFIX: &'static str = \"lib\";\n     pub const DLL_SUFFIX: &'static str = \".so\";\n     pub const DLL_EXTENSION: &'static str = \"so\";"}, {"sha": "a39311f7d108d578a44273a968fb5f475930f6b9", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -1066,11 +1066,11 @@ impl f64 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n \n-    // Illumos requires a wrapper around log, log2, and log10 functions\n+    // Solaris/Illumos requires a wrapper around log, log2, and log10 functions\n     // because of their non-standard behavior (e.g. log(-n) returns -Inf instead\n     // of expected NaN).\n     fn log_wrapper<F: Fn(f64) -> f64>(self, log_fn: F) -> f64 {\n-        if !cfg!(target_os = \"sunos\") {\n+        if !cfg!(target_os = \"solaris\") {\n             log_fn(self)\n         } else {\n             if self.is_finite() {"}, {"sha": "5606c127dcb0a49f07395bbf3391988092e44334", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -30,6 +30,6 @@ pub use sys::ext as windows;\n #[cfg(target_os = \"nacl\")]      pub mod nacl;\n #[cfg(target_os = \"netbsd\")]   pub mod netbsd;\n #[cfg(target_os = \"openbsd\")]   pub mod openbsd;\n-#[cfg(target_os = \"sunos\")]     pub mod sunos;\n+#[cfg(target_os = \"solaris\")]   pub mod solaris;\n \n pub mod raw;"}, {"sha": "f265233bd54a550eaefefb3a6de494a262279b2c", "filename": "src/libstd/os/solaris/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fos%2Fsolaris%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fos%2Fsolaris%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fsolaris%2Fmod.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "previous_filename": "src/libstd/os/sunos/mod.rs"}, {"sha": "cf46ae4a3600d9b1a5e78cbcd92e8a9cb748faf5", "filename": "src/libstd/os/solaris/raw.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fos%2Fsolaris%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fos%2Fsolaris%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fsolaris%2Fraw.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "previous_filename": "src/libstd/os/sunos/raw.rs"}, {"sha": "b1b9ffc4dc63d696d96e726a7a4f8a7392ab4f70", "filename": "src/libstd/rtdeps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Frtdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Frtdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frtdeps.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -39,7 +39,7 @@ extern {}\n #[link(name = \"pthread\")]\n extern {}\n \n-#[cfg(target_os = \"sunos\")]\n+#[cfg(target_os = \"solaris\")]\n #[link(name = \"socket\")]\n #[link(name = \"posix4\")]\n #[link(name = \"pthread\")]"}, {"sha": "4600983eb3b8019b666bab703d323f3e34cceae0", "filename": "src/libstd/sys/common/args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fsys%2Fcommon%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fsys%2Fcommon%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fargs.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -39,7 +39,7 @@ pub fn clone() -> Option<Vec<Vec<u8>>> { imp::clone() }\n           target_os = \"bitrig\",\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n-          target_os = \"sunos\"))]\n+          target_os = \"solaris\"))]\n mod imp {\n     use prelude::v1::*;\n "}, {"sha": "f68e22cc67b29506104490a34405550ddc2284ca", "filename": "src/libstd/sys/common/libunwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -102,7 +102,7 @@ pub type _Unwind_Exception_Cleanup_Fn =\n \n #[cfg_attr(any(all(target_os = \"linux\", not(target_env = \"musl\")),\n                target_os = \"freebsd\",\n-               target_os = \"sunos\",\n+               target_os = \"solaris\",\n                all(target_os = \"linux\", target_env = \"musl\", not(target_arch = \"x86_64\"))),\n            link(name = \"gcc_s\"))]\n #[cfg_attr(all(target_os = \"linux\", target_env = \"musl\", target_arch = \"x86_64\", not(test)),"}, {"sha": "94775341c389871b36096ba49117dc57e8a20f4b", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -50,14 +50,14 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n-    #[cfg(not(any(target_env = \"newlib\", target_os = \"sunos\")))]\n+    #[cfg(not(any(target_env = \"newlib\", target_os = \"solaris\")))]\n     pub fn set_cloexec(&self) {\n         unsafe {\n             let ret = libc::ioctl(self.fd, libc::FIOCLEX);\n             debug_assert_eq!(ret, 0);\n         }\n     }\n-    #[cfg(any(target_env = \"newlib\", target_os = \"sunos\"))]\n+    #[cfg(any(target_env = \"newlib\", target_os = \"solaris\"))]\n     pub fn set_cloexec(&self) {\n         unsafe {\n             let previous = libc::fcntl(self.fd, libc::F_GETFD);"}, {"sha": "bbc4be9c68a97bc7ad3511d9b459041d194593f9", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -24,9 +24,9 @@ use sys::platform::raw;\n use sys::{cvt, cvt_r};\n use sys_common::{AsInner, FromInner};\n use vec::Vec;\n-#[cfg(target_os = \"sunos\")]\n+#[cfg(target_os = \"solaris\")]\n use core_collections::borrow::ToOwned;\n-#[cfg(target_os = \"sunos\")]\n+#[cfg(target_os = \"solaris\")]\n use boxed::Box;\n \n pub struct File(FileDesc);\n@@ -53,7 +53,7 @@ pub struct DirEntry {\n     // on Solaris because a) it uses a zero-length array to\n     // store the name, b) its lifetime between readdir calls\n     // is not guaranteed.\n-    #[cfg(target_os = \"sunos\")]\n+    #[cfg(target_os = \"solaris\")]\n     name: Box<[u8]>\n }\n \n@@ -141,7 +141,7 @@ impl FromInner<raw::mode_t> for FilePermissions {\n impl Iterator for ReadDir {\n     type Item = io::Result<DirEntry>;\n \n-    #[cfg(target_os = \"sunos\")]\n+    #[cfg(target_os = \"solaris\")]\n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n         unsafe {\n             loop {\n@@ -170,7 +170,7 @@ impl Iterator for ReadDir {\n         }\n     }\n \n-    #[cfg(not(target_os = \"sunos\"))]\n+    #[cfg(not(target_os = \"solaris\"))]\n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n         unsafe {\n             let mut ret = DirEntry {\n@@ -213,12 +213,12 @@ impl DirEntry {\n         lstat(&self.path())\n     }\n \n-    #[cfg(target_os = \"sunos\")]\n+    #[cfg(target_os = \"solaris\")]\n     pub fn file_type(&self) -> io::Result<FileType> {\n         stat(&self.path()).map(|m| m.file_type())\n     }\n \n-    #[cfg(not(target_os = \"sunos\"))]\n+    #[cfg(not(target_os = \"solaris\"))]\n     pub fn file_type(&self) -> io::Result<FileType> {\n         match self.entry.d_type {\n             libc::DT_CHR => Ok(FileType { mode: libc::S_IFCHR }),\n@@ -235,7 +235,7 @@ impl DirEntry {\n     #[cfg(any(target_os = \"macos\",\n               target_os = \"ios\",\n               target_os = \"linux\",\n-              target_os = \"sunos\"))]\n+              target_os = \"solaris\"))]\n     pub fn ino(&self) -> raw::ino_t {\n         self.entry.d_ino\n     }\n@@ -280,7 +280,7 @@ impl DirEntry {\n             CStr::from_ptr(self.entry.d_name.as_ptr()).to_bytes()\n         }\n     }\n-    #[cfg(target_os = \"sunos\")]\n+    #[cfg(target_os = \"solaris\")]\n     fn name_bytes(&self) -> &[u8] {\n         &*self.name\n     }"}, {"sha": "f8a4bcdecd73e4516cf1129e71ea521d7eba3e44", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -25,7 +25,7 @@ use ops::Neg;\n #[cfg(target_os = \"nacl\")]      pub use os::nacl as platform;\n #[cfg(target_os = \"netbsd\")]    pub use os::netbsd as platform;\n #[cfg(target_os = \"openbsd\")]   pub use os::openbsd as platform;\n-#[cfg(target_os = \"sunos\")]     pub use os::sunos as platform;\n+#[cfg(target_os = \"solaris\")]   pub use os::solaris as platform;\n \n pub mod backtrace;\n pub mod condvar;"}, {"sha": "fc1fea4bc71e5a7eaa3afc58641096cf49159e84", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -45,7 +45,7 @@ pub fn errno() -> i32 {\n                        target_os = \"android\",\n                        target_env = \"newlib\"),\n                    link_name = \"__errno\")]\n-        #[cfg_attr(target_os = \"sunos\", link_name = \"___errno\")]\n+        #[cfg_attr(target_os = \"solaris\", link_name = \"___errno\")]\n         #[cfg_attr(target_os = \"dragonfly\", link_name = \"__dfly_error\")]\n         #[cfg_attr(any(target_os = \"macos\",\n                        target_os = \"ios\",\n@@ -258,7 +258,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     }\n }\n \n-#[cfg(any(target_os = \"sunos\"))]\n+#[cfg(any(target_os = \"solaris\"))]\n pub fn current_exe() -> io::Result<PathBuf> {\n     extern {\n         fn getexecname() -> *const c_char;\n@@ -384,7 +384,7 @@ pub fn args() -> Args {\n           target_os = \"bitrig\",\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n-          target_os = \"sunos\",\n+          target_os = \"solaris\",\n           target_os = \"nacl\"))]\n pub fn args() -> Args {\n     use sys_common;\n@@ -507,7 +507,7 @@ pub fn home_dir() -> Option<PathBuf> {\n         fallback()\n     }).map(PathBuf::from);\n \n-    #[cfg(not(target_os = \"sunos\"))]\n+    #[cfg(not(target_os = \"solaris\"))]\n     unsafe fn getpwduid_r(me: libc::uid_t, passwd: &mut libc::passwd,\n                           buf: &mut Vec<c_char>) -> Option<()> {\n         let mut result = ptr::null_mut();\n@@ -519,7 +519,7 @@ pub fn home_dir() -> Option<PathBuf> {\n         }\n     }\n \n-    #[cfg(target_os = \"sunos\")]\n+    #[cfg(target_os = \"solaris\")]\n     unsafe fn getpwduid_r(me: libc::uid_t, passwd: &mut libc::passwd,\n                           buf: &mut Vec<c_char>) -> Option<()> {\n         // getpwuid_r semantics is different on Illumos/Solaris:"}, {"sha": "68147c3659178153f7faa6a219ec21dc3dd028d5", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -93,7 +93,7 @@ fn os2c(s: &OsStr) -> CString {\n pub struct ExitStatus(c_int);\n \n #[cfg(any(target_os = \"linux\", target_os = \"android\",\n-          target_os = \"nacl\", target_os = \"sunos\"))]\n+          target_os = \"nacl\", target_os = \"solaris\"))]\n mod status_imp {\n     pub fn WIFEXITED(status: i32) -> bool { (status & 0xff) == 0 }\n     pub fn WEXITSTATUS(status: i32) -> i32 { (status >> 8) & 0xff }"}, {"sha": "684924c92798f4cd11451d08c46108242163f394", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -39,7 +39,7 @@ impl Drop for Handler {\n           target_os = \"bitrig\",\n           target_os = \"dragonfly\",\n           target_os = \"freebsd\",\n-          target_os = \"sunos\",\n+          target_os = \"solaris\",\n           all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n           target_os = \"openbsd\"))]\n mod imp {\n@@ -168,7 +168,7 @@ mod imp {\n               target_os = \"bitrig\",\n               target_os = \"dragonfly\",\n               target_os = \"freebsd\",\n-              target_os = \"sunos\",\n+              target_os = \"solaris\",\n               all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n               target_os = \"openbsd\")))]\n mod imp {"}, {"sha": "04570f2f4aaa8890e41ece8190942709b5689a60", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -12,7 +12,7 @@ use prelude::v1::*;\n \n use alloc::boxed::FnBox;\n use cmp;\n-#[cfg(not(any(target_env = \"newlib\", target_os = \"sunos\")))]\n+#[cfg(not(any(target_env = \"newlib\", target_os = \"solaris\")))]\n use ffi::CString;\n use io;\n use libc;\n@@ -122,7 +122,7 @@ impl Thread {\n                                      carg.as_ptr() as *mut libc::c_void);\n         }\n     }\n-    #[cfg(any(target_env = \"newlib\", target_os = \"sunos\"))]\n+    #[cfg(any(target_env = \"newlib\", target_os = \"solaris\"))]\n     pub fn set_name(_name: &str) {\n         // Newlib and Illumos has no way to set a thread name.\n     }\n@@ -171,7 +171,7 @@ impl Drop for Thread {\n           not(target_os = \"bitrig\"),\n           not(all(target_os = \"netbsd\", not(target_vendor = \"rumprun\"))),\n           not(target_os = \"openbsd\"),\n-          not(target_os = \"sunos\")))]\n+          not(target_os = \"solaris\")))]\n #[cfg_attr(test, allow(dead_code))]\n pub mod guard {\n     pub unsafe fn current() -> Option<usize> { None }\n@@ -184,7 +184,7 @@ pub mod guard {\n           target_os = \"bitrig\",\n           all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n           target_os = \"openbsd\",\n-          target_os = \"sunos\"))]\n+          target_os = \"solaris\"))]\n #[cfg_attr(test, allow(dead_code))]\n pub mod guard {\n     use prelude::v1::*;\n@@ -197,7 +197,7 @@ pub mod guard {\n     #[cfg(any(target_os = \"macos\",\n               target_os = \"bitrig\",\n               target_os = \"openbsd\",\n-              target_os = \"sunos\"))]\n+              target_os = \"solaris\"))]\n     unsafe fn get_stack_start() -> Option<*mut libc::c_void> {\n         current().map(|s| s as *mut libc::c_void)\n     }\n@@ -256,7 +256,7 @@ pub mod guard {\n         Some(stackaddr as usize + offset * psize)\n     }\n \n-    #[cfg(target_os = \"sunos\")]\n+    #[cfg(target_os = \"solaris\")]\n     pub unsafe fn current() -> Option<usize> {\n         let mut current_stack: libc::stack_t = mem::zeroed();\n         assert_eq!(libc::stack_getbounds(&mut current_stack), 0);"}, {"sha": "0df143c45ae7d8b55015f104741b10f05724722d", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -28,7 +28,7 @@ pub enum Os {\n     OsNetbsd,\n     OsOpenbsd,\n     OsNaCl,\n-    OsSunos,\n+    OsSolaris,\n }\n \n #[derive(PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Clone, Copy, Debug)]\n@@ -148,7 +148,7 @@ impl fmt::Display for Os {\n             OsNetbsd => \"netbsd\".fmt(f),\n             OsOpenbsd => \"openbsd\".fmt(f),\n             OsNaCl => \"nacl\".fmt(f),\n-            OsSunos => \"sunos\".fmt(f),\n+            OsSolaris => \"solaris\".fmt(f),\n         }\n     }\n }"}, {"sha": "b64b84df062e524bf5a3aee07077b48ac9fb0c38", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -928,7 +928,7 @@ fn get_concurrency() -> usize {\n               target_os = \"macos\",\n               target_os = \"ios\",\n               target_os = \"android\",\n-              target_os = \"sunos\"))]\n+              target_os = \"solaris\"))]\n     fn num_cpus() -> usize {\n         unsafe { libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as usize }\n     }"}, {"sha": "81743a367e40f735e267f22a8d078adfb6e7eecc", "filename": "src/test/debuginfo/gdb-pretty-struct-and-enums-pre-gdb-7-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums-pre-gdb-7-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums-pre-gdb-7-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums-pre-gdb-7-7.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // ignore-bitrig\n-// ignore-sunos\n+// ignore-solaris\n // ignore-windows failing on win32 bot\n // ignore-freebsd: gdb package too new\n // ignore-tidy-linelength"}, {"sha": "f1e4f8dfa8c83e60201e52ed07247c19d6afe195", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -24,7 +24,7 @@ mod rusti {\n           target_os = \"dragonfly\",\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n-          target_os = \"sunos\"))]\n+          target_os = \"solaris\"))]\n mod m {\n     #[main]\n     #[cfg(target_arch = \"x86\")]"}, {"sha": "2161864f0b69654fc1de16eb4f694763f45ab239", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -42,7 +42,7 @@ struct Outer {\n           target_os = \"dragonfly\",\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n-          target_os = \"sunos\"))]\n+          target_os = \"solaris\"))]\n mod m {\n     #[cfg(target_arch = \"x86\")]\n     pub mod m {"}, {"sha": "c8c96b299fac09935b8553eaa1fa7face4cc671e", "filename": "src/test/run-pass/x86stdcall.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fx86stdcall.rs?ref=e5da5d59f817eb6a3b78134d49b80c3ed6cb42c9", "patch": "@@ -38,5 +38,5 @@ pub fn main() {\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n           target_os = \"android\",\n-          target_os = \"sunos\"))]\n+          target_os = \"solaris\"))]\n pub fn main() { }"}]}