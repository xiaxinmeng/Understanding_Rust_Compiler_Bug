{"sha": "cdc8722f9503efdac0c619cfed1958192fe59eb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYzg3MjJmOTUwM2VmZGFjMGM2MTljZmVkMTk1ODE5MmZlNTllYjk=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-04-20T01:04:41Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-04-20T01:14:38Z"}, "message": "Add a lint pass to check for while true { ... } loops\n\nAnd suggest changing them to loop { ... }. Had to fix the few\nremaining while true loops (in core::io). Closes #1962.", "tree": {"sha": "a503c1669e4fb8f7191d1245eaf610f9b38b721a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a503c1669e4fb8f7191d1245eaf610f9b38b721a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdc8722f9503efdac0c619cfed1958192fe59eb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdc8722f9503efdac0c619cfed1958192fe59eb9", "html_url": "https://github.com/rust-lang/rust/commit/cdc8722f9503efdac0c619cfed1958192fe59eb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdc8722f9503efdac0c619cfed1958192fe59eb9/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "594d22e7e24a630957aefa29f9da9a92e3c31587", "url": "https://api.github.com/repos/rust-lang/rust/commits/594d22e7e24a630957aefa29f9da9a92e3c31587", "html_url": "https://github.com/rust-lang/rust/commit/594d22e7e24a630957aefa29f9da9a92e3c31587"}], "stats": {"total": 52, "additions": 47, "deletions": 5}, "files": [{"sha": "b44ec02c74b35e376f82ba6418fc93af05ca0fe3", "filename": "src/libcore/io.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdc8722f9503efdac0c619cfed1958192fe59eb9/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc8722f9503efdac0c619cfed1958192fe59eb9/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=cdc8722f9503efdac0c619cfed1958192fe59eb9", "patch": "@@ -110,7 +110,7 @@ impl reader_util for reader {\n \n     fn read_line() -> str {\n         let mut buf: [u8] = [];\n-        while true {\n+        loop {\n             let ch = self.read_byte();\n             if ch == -1 || ch == 10 { break; }\n             buf += [ch as u8];\n@@ -120,7 +120,7 @@ impl reader_util for reader {\n \n     fn read_c_str() -> str {\n         let mut buf: [u8] = [];\n-        while true {\n+        loop {\n             let ch = self.read_byte();\n             if ch < 1 { break; } else { buf += [ch as u8]; }\n         }"}, {"sha": "7adff107f1f066be021d6c88e94e34a0fb429574", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/cdc8722f9503efdac0c619cfed1958192fe59eb9/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc8722f9503efdac0c619cfed1958192fe59eb9/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=cdc8722f9503efdac0c619cfed1958192fe59eb9", "patch": "@@ -5,24 +5,26 @@ import syntax::attr;\n import syntax::codemap::span;\n import std::map::{map,hashmap,hash_from_strs};\n import io::writer_util;\n+import syntax::print::pprust::expr_to_str;\n \n export lint, ctypes, unused_imports;\n export level, ignore, warn, error;\n export lookup_lint, lint_dict, get_lint_dict, check_crate;\n \n #[doc=\"\n \n-A 'lint' check is a kind of miscallaneous constraint that a user _might_ want\n+A 'lint' check is a kind of miscellaneous constraint that a user _might_ want\n to enforce, but might reasonably want to permit as well, on a module-by-module\n basis. They contrast with static constraints enforced by other phases of the\n compiler, which are generally required to hold in order to compile the program\n-correctly at all.\n+at all.\n \n \"]\n \n enum lint {\n     ctypes,\n     unused_imports,\n+    while_true\n }\n \n enum level {\n@@ -35,6 +37,10 @@ type lint_spec = @{lint: lint,\n \n type lint_dict = hashmap<str,lint_spec>;\n \n+/*\n+  Pass names should not contain a '-', as the compiler normalizes\n+  '-' to '_' in command-line flags\n+ */\n fn get_lint_dict() -> lint_dict {\n     let v = [\n         (\"ctypes\",\n@@ -45,7 +51,12 @@ fn get_lint_dict() -> lint_dict {\n         (\"unused_imports\",\n          @{lint: unused_imports,\n            desc: \"imports that are never used\",\n-           default: ignore})\n+           default: ignore}),\n+\n+        (\"while_true\",\n+         @{lint: while_true,\n+           desc: \"suggest using loop { } instead of while(true) { }\",\n+           default: warn})\n     ];\n     hash_from_strs(v)\n }\n@@ -165,11 +176,34 @@ fn check_item(cx: ctxt, i: @ast::item) {\n             alt lint {\n               ctypes { check_item_ctypes(cx, level, i); }\n               unused_imports { check_item_unused_imports(cx, level, i); }\n+              while_true { check_item_while_true(cx, level, i); }\n             }\n         }\n     }\n }\n \n+fn check_item_while_true(cx: ctxt, level: level, it: @ast::item) {\n+    let visit = visit::mk_simple_visitor(@{\n+        visit_expr: fn@(e: @ast::expr) {\n+           alt e.node {\n+             ast::expr_while(cond, _) {\n+                alt cond.node {\n+                    ast::expr_lit(@{node: ast::lit_bool(true),_}) {\n+                            cx.span_lint(\n+                              level, e.span,\n+                              \"Denote infinite loops with loop { ... }\");\n+                    }\n+                    _ {}\n+                }\n+             }\n+             _ {}\n+          }\n+        }\n+        with *visit::default_simple_visitor()\n+    });\n+    visit::visit_item(it, (), visit);\n+}\n+\n fn check_item_unused_imports(_cx: ctxt, _level: level, _it: @ast::item) {\n     // FIXME: Don't know how to check this in lint yet, it's currently being\n     // done over in resolve. When resolve is rewritten, do it here instead."}, {"sha": "d80906584de183a9f57323e04dffc8da948d0fe4", "filename": "src/test/compile-fail/issue-1962.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cdc8722f9503efdac0c619cfed1958192fe59eb9/src%2Ftest%2Fcompile-fail%2Fissue-1962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc8722f9503efdac0c619cfed1958192fe59eb9/src%2Ftest%2Fcompile-fail%2Fissue-1962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1962.rs?ref=cdc8722f9503efdac0c619cfed1958192fe59eb9", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: -W err-while-true\n+fn main() {\n+  let mut i = 0;\n+  while true  { //! ERROR Denote infinite loops with loop\n+    i += 1;\n+    if i == 5 { break; }\n+  }\n+}"}]}