{"sha": "aff073ec9123a109f9b53bc0a2f1a997258d15ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZjA3M2VjOTEyM2ExMDlmOWI1M2JjMGEyZjFhOTk3MjU4ZDE1ZmY=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-05-17T13:58:26Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-05-17T17:17:11Z"}, "message": "Cache len in Fields", "tree": {"sha": "b43f0af19c2aed032bc0070d1f6f8285246cb6c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b43f0af19c2aed032bc0070d1f6f8285246cb6c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aff073ec9123a109f9b53bc0a2f1a997258d15ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aff073ec9123a109f9b53bc0a2f1a997258d15ff", "html_url": "https://github.com/rust-lang/rust/commit/aff073ec9123a109f9b53bc0a2f1a997258d15ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aff073ec9123a109f9b53bc0a2f1a997258d15ff/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f7a3784a5d224bc4cbc9bd1a4418facc301726f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f7a3784a5d224bc4cbc9bd1a4418facc301726f", "html_url": "https://github.com/rust-lang/rust/commit/4f7a3784a5d224bc4cbc9bd1a4418facc301726f"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "47b9d638d9e7c206ead82e5ea44119a66b90238d", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aff073ec9123a109f9b53bc0a2f1a997258d15ff/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff073ec9123a109f9b53bc0a2f1a997258d15ff/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=aff073ec9123a109f9b53bc0a2f1a997258d15ff", "patch": "@@ -975,7 +975,7 @@ enum Fields<'p, 'tcx> {\n     Slice(&'p [Pat<'tcx>]),\n     Vec(SmallVec<[&'p Pat<'tcx>; 2]>),\n     /// Patterns where some of the fields need to be hidden.\n-    Filtered(SmallVec<[FilteredField<'p, 'tcx>; 2]>),\n+    Filtered { fields: SmallVec<[FilteredField<'p, 'tcx>; 2]>, len: usize },\n }\n \n impl<'p, 'tcx> Fields<'p, 'tcx> {\n@@ -1038,6 +1038,7 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n                         if has_no_hidden_fields {\n                             Fields::wildcards_from_tys(cx, field_tys)\n                         } else {\n+                            let mut len = 0;\n                             let fields = variant\n                                 .fields\n                                 .iter()\n@@ -1054,11 +1055,12 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n                                     if is_uninhabited && (!is_visible || is_non_exhaustive) {\n                                         FilteredField::Hidden(ty)\n                                     } else {\n+                                        len += 1;\n                                         FilteredField::Kept(wildcard_from_ty(ty))\n                                     }\n                                 })\n                                 .collect();\n-                            Fields::Filtered(fields)\n+                            Fields::Filtered { fields, len }\n                         }\n                     }\n                 }\n@@ -1079,7 +1081,7 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n         match self {\n             Fields::Slice(pats) => pats.len(),\n             Fields::Vec(pats) => pats.len(),\n-            Fields::Filtered(fields) => fields.iter().filter(|p| p.kept().is_some()).count(),\n+            Fields::Filtered { len, .. } => *len,\n         }\n     }\n \n@@ -1088,7 +1090,7 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n         let pats: SmallVec<[_; 2]> = match self {\n             Fields::Slice(pats) => pats.iter().cloned().collect(),\n             Fields::Vec(pats) => pats.into_iter().cloned().collect(),\n-            Fields::Filtered(fields) => {\n+            Fields::Filtered { fields, .. } => {\n                 // We don't skip any fields here.\n                 fields.into_iter().map(|p| p.to_pattern()).collect()\n             }\n@@ -1122,7 +1124,7 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n                     pats[i] = pat\n                 }\n             }\n-            Fields::Filtered(fields) => {\n+            Fields::Filtered { fields, .. } => {\n                 for (i, pat) in new_pats {\n                     if let FilteredField::Kept(p) = &mut fields[i] {\n                         *p = pat\n@@ -1144,7 +1146,7 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n         let pats: &[_] = cx.pattern_arena.alloc_from_iter(pats);\n \n         match self {\n-            Fields::Filtered(fields) => {\n+            Fields::Filtered { fields, len } => {\n                 let mut pats = pats.iter();\n                 let mut fields = fields.clone();\n                 for f in &mut fields {\n@@ -1153,7 +1155,7 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n                         *p = pats.next().unwrap();\n                     }\n                 }\n-                Fields::Filtered(fields)\n+                Fields::Filtered { fields, len: *len }\n             }\n             _ => Fields::Slice(pats),\n         }\n@@ -1166,7 +1168,7 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n                 pats.extend_from_slice(stack);\n                 pats\n             }\n-            Fields::Filtered(fields) => {\n+            Fields::Filtered { fields, .. } => {\n                 // We skip hidden fields here\n                 fields.into_iter().filter_map(|p| p.kept()).chain(stack.iter().copied()).collect()\n             }"}]}