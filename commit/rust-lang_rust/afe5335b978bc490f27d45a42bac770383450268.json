{"sha": "afe5335b978bc490f27d45a42bac770383450268", "node_id": "C_kwDOAAsO6NoAKGFmZTUzMzViOTc4YmM0OTBmMjdkNDVhNDJiYWM3NzAzODM0NTAyNjg", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-10-07T10:44:46Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-10-07T12:27:08Z"}, "message": "Use correct edition for panic in [debug_]assert!() etc.", "tree": {"sha": "ab12cc891d1f4a87257cd15f2fe0dbf534bd9044", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab12cc891d1f4a87257cd15f2fe0dbf534bd9044"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afe5335b978bc490f27d45a42bac770383450268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afe5335b978bc490f27d45a42bac770383450268", "html_url": "https://github.com/rust-lang/rust/commit/afe5335b978bc490f27d45a42bac770383450268", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afe5335b978bc490f27d45a42bac770383450268/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca8078d7b2e40c24a39e5fe2a910afef4c91ebfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca8078d7b2e40c24a39e5fe2a910afef4c91ebfc", "html_url": "https://github.com/rust-lang/rust/commit/ca8078d7b2e40c24a39e5fe2a910afef4c91ebfc"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "1e2646e4d348faa5f72614ade0978ac7b01d988c", "filename": "compiler/rustc_builtin_macros/src/assert.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/afe5335b978bc490f27d45a42bac770383450268/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe5335b978bc490f27d45a42bac770383450268/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs?ref=afe5335b978bc490f27d45a42bac770383450268", "patch": "@@ -1,10 +1,10 @@\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n-\n+use crate::panic::use_panic_2021;\n use rustc_ast::ptr::P;\n use rustc_ast::token;\n use rustc_ast::tokenstream::{DelimSpan, TokenStream};\n use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_expand::base::*;\n use rustc_parse::parser::Parser;\n use rustc_span::symbol::{sym, Ident, Symbol};\n@@ -28,7 +28,7 @@ pub fn expand_assert<'cx>(\n     let sp = cx.with_call_site_ctxt(span);\n \n     let panic_call = if let Some(tokens) = custom_message {\n-        let path = if span.rust_2021() {\n+        let path = if use_panic_2021(span) {\n             // On edition 2021, we always call `$crate::panic::panic_2021!()`.\n             Path {\n                 span: sp,"}, {"sha": "54ab596bf3eb848739a86726afa6d805e3f973c9", "filename": "compiler/rustc_builtin_macros/src/panic.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/afe5335b978bc490f27d45a42bac770383450268/compiler%2Frustc_builtin_macros%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe5335b978bc490f27d45a42bac770383450268/compiler%2Frustc_builtin_macros%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fpanic.rs?ref=afe5335b978bc490f27d45a42bac770383450268", "patch": "@@ -2,6 +2,7 @@ use rustc_ast::ptr::P;\n use rustc_ast::tokenstream::{DelimSpan, TokenStream};\n use rustc_ast::*;\n use rustc_expand::base::*;\n+use rustc_span::edition::Edition;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n@@ -19,7 +20,7 @@ pub fn expand_panic<'cx>(\n     sp: Span,\n     tts: TokenStream,\n ) -> Box<dyn MacResult + 'cx> {\n-    let panic = if sp.rust_2021() { sym::panic_2021 } else { sym::panic_2015 };\n+    let panic = if use_panic_2021(sp) { sym::panic_2021 } else { sym::panic_2015 };\n \n     let sp = cx.with_call_site_ctxt(sp);\n \n@@ -46,3 +47,19 @@ pub fn expand_panic<'cx>(\n         ),\n     )\n }\n+\n+pub fn use_panic_2021(mut span: Span) -> bool {\n+    // To determine the editon, we check the first span up the expansion\n+    // stack that does not have #[allow_internal_unstable(edition_panic)].\n+    // (To avoid using the edition of e.g. the assert!() or debug_assert!() definition.)\n+    loop {\n+        let expn = span.ctxt().outer_expn_data();\n+        if let Some(features) = expn.allow_internal_unstable {\n+            if features.iter().any(|&f| f == sym::edition_panic) {\n+                span = expn.call_site;\n+                continue;\n+            }\n+        }\n+        break expn.edition >= Edition::Edition2021;\n+    }\n+}"}, {"sha": "995c974b865bacb97e809fa572c2d330dc5f1639", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afe5335b978bc490f27d45a42bac770383450268/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe5335b978bc490f27d45a42bac770383450268/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=afe5335b978bc490f27d45a42bac770383450268", "patch": "@@ -568,6 +568,7 @@ symbols! {\n         dyn_metadata,\n         dyn_trait,\n         edition_macro_pats,\n+        edition_panic,\n         eh_catch_typeinfo,\n         eh_personality,\n         emit_enum,"}, {"sha": "5b3e988caa506cc61e8c74f069e30e9ca3711649", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afe5335b978bc490f27d45a42bac770383450268/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe5335b978bc490f27d45a42bac770383450268/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=afe5335b978bc490f27d45a42bac770383450268", "patch": "@@ -210,6 +210,7 @@ pub macro assert_matches {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_diagnostic_item = \"debug_assert_macro\"]\n+#[allow_internal_unstable(edition_panic)]\n macro_rules! debug_assert {\n     ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert!($($arg)*); })\n }"}]}