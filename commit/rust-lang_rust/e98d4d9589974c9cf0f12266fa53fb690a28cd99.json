{"sha": "e98d4d9589974c9cf0f12266fa53fb690a28cd99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5OGQ0ZDk1ODk5NzRjOWNmMGYxMjI2NmZhNTNmYjY5MGEyOGNkOTk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-23T22:07:33Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-23T22:07:33Z"}, "message": "rollup merge of #23283: brson/rpathfix\n\nFix regression in -C rpath that causes failures with symlinks\n\nThe new `relative_from` method no longer supports the case on unix\nwhere both paths are absolute, which `-C rpath` depended on. This\nversion fixes the problem by copying the old path_relative_from\nfunction into the rpath module.\n\nFixes #23140\n\nAfter experimenting with the new `relative_from` function on `Path` I'm not sure what it's use case is. It no longer even figures out that the relative path from `/foo/bar` to `/foo/baz/qux` is `../baz/qux`.", "tree": {"sha": "46713139543c82eb7822573c320cbe26e6f4c69d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46713139543c82eb7822573c320cbe26e6f4c69d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e98d4d9589974c9cf0f12266fa53fb690a28cd99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e98d4d9589974c9cf0f12266fa53fb690a28cd99", "html_url": "https://github.com/rust-lang/rust/commit/e98d4d9589974c9cf0f12266fa53fb690a28cd99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e98d4d9589974c9cf0f12266fa53fb690a28cd99/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67e516c5c2ddd0dbed6b07ccca6b5bdd4ad10b36", "url": "https://api.github.com/repos/rust-lang/rust/commits/67e516c5c2ddd0dbed6b07ccca6b5bdd4ad10b36", "html_url": "https://github.com/rust-lang/rust/commit/67e516c5c2ddd0dbed6b07ccca6b5bdd4ad10b36"}, {"sha": "9ec9bc68fb310aac29e984d26cc37952de328f1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ec9bc68fb310aac29e984d26cc37952de328f1e", "html_url": "https://github.com/rust-lang/rust/commit/9ec9bc68fb310aac29e984d26cc37952de328f1e"}], "stats": {"total": 61, "additions": 46, "deletions": 15}, "files": [{"sha": "68d21abb50ef5e74fd21f4a071ac3efa413bfc92", "filename": "src/librustc_back/rpath.rs", "status": "modified", "additions": 43, "deletions": 15, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e98d4d9589974c9cf0f12266fa53fb690a28cd99/src%2Flibrustc_back%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98d4d9589974c9cf0f12266fa53fb690a28cd99/src%2Flibrustc_back%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Frpath.rs?ref=e98d4d9589974c9cf0f12266fa53fb690a28cd99", "patch": "@@ -99,30 +99,58 @@ fn get_rpath_relative_to_output(config: &mut RPathConfig, lib: &Path) -> String\n     lib.pop();\n     let mut output = (config.realpath)(&cwd.join(&config.out_filename)).unwrap();\n     output.pop();\n-    let relative = relativize(&lib, &output);\n+    let relative = path_relative_from(&lib, &output)\n+        .expect(&format!(\"couldn't create relative path from {:?} to {:?}\", output, lib));\n     // FIXME (#9639): This needs to handle non-utf8 paths\n     format!(\"{}/{}\", prefix,\n             relative.to_str().expect(\"non-utf8 component in path\"))\n }\n \n-fn relativize(path: &Path, rel: &Path) -> PathBuf {\n-    let mut res = PathBuf::new(\"\");\n-    let mut cur = rel;\n-    while !path.starts_with(cur) {\n-        res.push(\"..\");\n-        match cur.parent() {\n-            Some(p) => cur = p,\n-            None => panic!(\"can't create relative paths across filesystems\"),\n+// This routine is adapted from the *old* Path's `path_relative_from`\n+// function, which works differently from the new `relative_from` function.\n+// In particular, this handles the case on unix where both paths are\n+// absolute but with only the root as the common directory.\n+fn path_relative_from(path: &Path, base: &Path) -> Option<PathBuf> {\n+    use std::path::Component;\n+\n+    if path.is_absolute() != base.is_absolute() {\n+        if path.is_absolute() {\n+            Some(PathBuf::new(path))\n+        } else {\n+            None\n         }\n+    } else {\n+        let mut ita = path.components();\n+        let mut itb = base.components();\n+        let mut comps: Vec<Component> = vec![];\n+        loop {\n+            match (ita.next(), itb.next()) {\n+                (None, None) => break,\n+                (Some(a), None) => {\n+                    comps.push(a);\n+                    comps.extend(ita.by_ref());\n+                    break;\n+                }\n+                (None, _) => comps.push(Component::ParentDir),\n+                (Some(a), Some(b)) if comps.is_empty() && a == b => (),\n+                (Some(a), Some(b)) if b == Component::CurDir => comps.push(a),\n+                (Some(_), Some(b)) if b == Component::ParentDir => return None,\n+                (Some(a), Some(_)) => {\n+                    comps.push(Component::ParentDir);\n+                    for _ in itb {\n+                        comps.push(Component::ParentDir);\n+                    }\n+                    comps.push(a);\n+                    comps.extend(ita.by_ref());\n+                    break;\n+                }\n+            }\n+        }\n+        Some(comps.iter().map(|c| c.as_os_str()).collect())\n     }\n-    match path.relative_from(cur) {\n-        Some(s) => { res.push(s); res }\n-        None => panic!(\"couldn't create relative path from {:?} to {:?}\",\n-                       rel, path),\n-    }\n-\n }\n \n+\n fn get_install_prefix_rpath(config: &mut RPathConfig) -> String {\n     let path = (config.get_install_prefix_lib_path)();\n     let path = env::current_dir().unwrap().join(&path);"}, {"sha": "05c7761be7b5d2fa0288c2903121f2d7baa700a9", "filename": "src/libstd/path.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e98d4d9589974c9cf0f12266fa53fb690a28cd99/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98d4d9589974c9cf0f12266fa53fb690a28cd99/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=e98d4d9589974c9cf0f12266fa53fb690a28cd99", "patch": "@@ -1243,6 +1243,9 @@ impl Path {\n     }\n \n     /// Returns a path that, when joined onto `base`, yields `self`.\n+    ///\n+    /// If `base` is not a prefix of `self` (i.e. `starts_with`\n+    /// returns false), then `relative_from` returns `None`.\n     #[unstable(feature = \"path_relative_from\", reason = \"see #23284\")]\n     pub fn relative_from<'a, P: ?Sized>(&'a self, base: &'a P) -> Option<&Path> where\n         P: AsPath"}]}