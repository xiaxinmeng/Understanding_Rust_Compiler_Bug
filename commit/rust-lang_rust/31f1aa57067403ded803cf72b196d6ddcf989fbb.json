{"sha": "31f1aa57067403ded803cf72b196d6ddcf989fbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZjFhYTU3MDY3NDAzZGVkODAzY2Y3MmIxOTZkNmRkY2Y5ODlmYmI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-01-25T18:48:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-25T18:48:51Z"}, "message": "Rollup merge of #47529 - nikomatsakis:impl-trait-issue-38064, r=cramertj\n\ntrack recursion limit when expanding existential impl trait\n\nr? @cramertj", "tree": {"sha": "50d89b8e779173f36a27c11703b28f88e3431607", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50d89b8e779173f36a27c11703b28f88e3431607"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31f1aa57067403ded803cf72b196d6ddcf989fbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31f1aa57067403ded803cf72b196d6ddcf989fbb", "html_url": "https://github.com/rust-lang/rust/commit/31f1aa57067403ded803cf72b196d6ddcf989fbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31f1aa57067403ded803cf72b196d6ddcf989fbb/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98b375483c44c68009d699a4cd4b7b0a3d5d97a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/98b375483c44c68009d699a4cd4b7b0a3d5d97a3", "html_url": "https://github.com/rust-lang/rust/commit/98b375483c44c68009d699a4cd4b7b0a3d5d97a3"}, {"sha": "072c3daa4cb6e1a8958ad9d61ebc7e062d570eac", "url": "https://api.github.com/repos/rust-lang/rust/commits/072c3daa4cb6e1a8958ad9d61ebc7e062d570eac", "html_url": "https://github.com/rust-lang/rust/commit/072c3daa4cb6e1a8958ad9d61ebc7e062d570eac"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "68d81a2dee352c4f72becb5da5cfad63bc385164", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31f1aa57067403ded803cf72b196d6ddcf989fbb/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f1aa57067403ded803cf72b196d6ddcf989fbb/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=31f1aa57067403ded803cf72b196d6ddcf989fbb", "patch": "@@ -82,7 +82,7 @@ pub type VarOrigins = IndexVec<RegionVid, RegionVariableOrigin>;\n /// Describes constraints between the region variables and other\n /// regions, as well as other conditions that must be verified, or\n /// assumptions that can be made.\n-#[derive(Default)]\n+#[derive(Debug, Default)]\n pub struct RegionConstraintData<'tcx> {\n     /// Constraints of the form `A <= B`, where either `A` or `B` can\n     /// be a region variable (or neither, as it happens)."}, {"sha": "d34649782ba6ad03bf88934da707552eac6db652", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/31f1aa57067403ded803cf72b196d6ddcf989fbb/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f1aa57067403ded803cf72b196d6ddcf989fbb/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=31f1aa57067403ded803cf72b196d6ddcf989fbb", "patch": "@@ -293,9 +293,23 @@ impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssociatedTypeNormalizer<'a,\n                     Reveal::UserFacing => ty,\n \n                     Reveal::All => {\n+                        let recursion_limit = self.tcx().sess.recursion_limit.get();\n+                        if self.depth >= recursion_limit {\n+                            let obligation = Obligation::with_depth(\n+                                self.cause.clone(),\n+                                recursion_limit,\n+                                self.param_env,\n+                                ty,\n+                            );\n+                            self.selcx.infcx().report_overflow_error(&obligation, true);\n+                        }\n+\n                         let generic_ty = self.tcx().type_of(def_id);\n                         let concrete_ty = generic_ty.subst(self.tcx(), substs);\n-                        self.fold_ty(concrete_ty)\n+                        self.depth += 1;\n+                        let folded_ty = self.fold_ty(concrete_ty);\n+                        self.depth -= 1;\n+                        folded_ty\n                     }\n                 }\n             }"}, {"sha": "9dcd4435580ab71723e38699e114411c620ac523", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31f1aa57067403ded803cf72b196d6ddcf989fbb/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f1aa57067403ded803cf72b196d6ddcf989fbb/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=31f1aa57067403ded803cf72b196d6ddcf989fbb", "patch": "@@ -681,6 +681,8 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n \n         let data = self.infcx.take_and_reset_region_constraints();\n         if !data.is_empty() {\n+            debug!(\"fully_perform_op: constraints generated at {:?} are {:#?}\",\n+                   locations, data);\n             self.constraints\n                 .outlives_sets\n                 .push(OutlivesSet { locations, data });\n@@ -1539,6 +1541,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     where\n         T: fmt::Debug + TypeFoldable<'tcx>,\n     {\n+        debug!(\"normalize(value={:?}, location={:?})\", value, location);\n         self.fully_perform_op(location.at_self(), |this| {\n             let mut selcx = traits::SelectionContext::new(this.infcx);\n             let cause = this.misc(this.last_span);"}, {"sha": "abde9689bd6b6607dbc84f17f2df5a8c68ed0dcb", "filename": "src/test/compile-fail/impl-trait/infinite-impl-trait-issue-38064.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/31f1aa57067403ded803cf72b196d6ddcf989fbb/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Finfinite-impl-trait-issue-38064.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f1aa57067403ded803cf72b196d6ddcf989fbb/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Finfinite-impl-trait-issue-38064.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Finfinite-impl-trait-issue-38064.rs?ref=31f1aa57067403ded803cf72b196d6ddcf989fbb", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that attempts to construct infinite types via impl trait fail\n+// in a graceful way.\n+//\n+// Regression test for #38064.\n+\n+// error-pattern:overflow evaluating the requirement `impl Quux`\n+\n+#![feature(conservative_impl_trait)]\n+\n+trait Quux {}\n+\n+fn foo() -> impl Quux {\n+    struct Foo<T>(T);\n+    impl<T> Quux for Foo<T> {}\n+    Foo(bar())\n+}\n+\n+fn bar() -> impl Quux {\n+    struct Bar<T>(T);\n+    impl<T> Quux for Bar<T> {}\n+    Bar(foo())\n+}\n+\n+// effectively:\n+//     struct Foo(Bar);\n+//     struct Bar(Foo);\n+// should produce an error about infinite size\n+\n+fn main() { foo(); }"}]}