{"sha": "881929f7537d6fd5b85f6c8efc1dc0f3f558591f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MTkyOWY3NTM3ZDZmZDViODVmNmM4ZWZjMWRjMGYzZjU1ODU5MWY=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-16T18:46:37Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-17T16:47:01Z"}, "message": "Add align_offset for integers", "tree": {"sha": "3010cf32a6cdd43863a0f0d1d63908f9f2c2d238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3010cf32a6cdd43863a0f0d1d63908f9f2c2d238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/881929f7537d6fd5b85f6c8efc1dc0f3f558591f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/881929f7537d6fd5b85f6c8efc1dc0f3f558591f", "html_url": "https://github.com/rust-lang/rust/commit/881929f7537d6fd5b85f6c8efc1dc0f3f558591f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/881929f7537d6fd5b85f6c8efc1dc0f3f558591f/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55863cb88effdaa2198a22149cfae99c2377dd76", "url": "https://api.github.com/repos/rust-lang/rust/commits/55863cb88effdaa2198a22149cfae99c2377dd76", "html_url": "https://github.com/rust-lang/rust/commit/55863cb88effdaa2198a22149cfae99c2377dd76"}], "stats": {"total": 49, "additions": 30, "deletions": 19}, "files": [{"sha": "f9b89cf553a39e15d929b6c142b6560eb4977519", "filename": "src/shims/mod.rs", "status": "modified", "additions": 30, "deletions": 19, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/881929f7537d6fd5b85f6c8efc1dc0f3f558591f/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881929f7537d6fd5b85f6c8efc1dc0f3f558591f/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=881929f7537d6fd5b85f6c8efc1dc0f3f558591f", "patch": "@@ -27,25 +27,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         // There are some more lang items we want to hook that CTFE does not hook (yet).\n         if this.tcx.lang_items().align_offset_fn() == Some(instance.def.def_id()) {\n-\n-            let n = {\n-                let ptr = this.force_ptr(this.read_scalar(args[0])?.not_undef()?)?;\n-                let align = this.force_bits(\n-                    this.read_scalar(args[1])?.not_undef()?,\n-                    this.pointer_size()\n-                )? as usize;\n-\n-                let stride = this.memory().get(ptr.alloc_id)?.align.bytes() as usize;\n-                // if the allocation alignment is at least the required alignment, we use the\n-                // libcore implementation\n-                if stride >= align {\n-                    ((stride + ptr.offset.bytes() as usize) as *const ())\n-                        .align_offset(align) as u128\n-                } else {\n-                    u128::max_value()\n-                }\n-            };\n-\n+            let n = this.align_offset(args[0], args[1])?;\n             let dest = dest.unwrap();\n             let n = this.truncate(n, dest.layout);\n             this.write_scalar(Scalar::from_uint(n, dest.layout.size), dest)?;\n@@ -65,4 +47,33 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Otherwise, load the MIR.\n         Ok(Some(this.load_mir(instance.def, None)?))\n     }\n+\n+    fn align_offset(\n+        &mut self,\n+        ptr_op: OpTy<'tcx, Tag>,\n+        align_op: OpTy<'tcx, Tag>\n+    ) -> InterpResult<'tcx, u128> {\n+        let this = self.eval_context_mut();\n+\n+        let req_align = this.force_bits(\n+            this.read_scalar(align_op)?.not_undef()?,\n+            this.pointer_size()\n+        )? as usize;\n+\n+        let ptr_scalar = this.read_scalar(ptr_op)?.not_undef()?;\n+\n+        if let Scalar::Ptr(ptr) = ptr_scalar {\n+            let cur_align = this.memory().get(ptr.alloc_id)?.align.bytes() as usize;\n+            if cur_align < req_align {\n+                return Ok(u128::max_value());\n+            }\n+        }\n+\n+        // if the allocation alignment is at least the required alignment or if the pointer is an\n+        // integer, we use the libcore implementation\n+        Ok(\n+            (this.force_bits(ptr_scalar, this.pointer_size())? as *const i8)\n+            .align_offset(req_align) as u128\n+        )\n+    }\n }"}]}