{"sha": "e2414852b1c65bc819869cf9cb5328158d3ff369", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNDE0ODUyYjFjNjViYzgxOTg2OWNmOWNiNTMyODE1OGQzZmYzNjk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-23T20:01:57Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-28T17:59:56Z"}, "message": "rustc_metadata: Privatize `CrateMetadata::extern_crate`", "tree": {"sha": "3601de873f491996dc8060d423b49d8d61fb3540", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3601de873f491996dc8060d423b49d8d61fb3540"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2414852b1c65bc819869cf9cb5328158d3ff369", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2414852b1c65bc819869cf9cb5328158d3ff369", "html_url": "https://github.com/rust-lang/rust/commit/e2414852b1c65bc819869cf9cb5328158d3ff369", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2414852b1c65bc819869cf9cb5328158d3ff369/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37304cda63d74b1a16f249853623960a003392c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/37304cda63d74b1a16f249853623960a003392c9", "html_url": "https://github.com/rust-lang/rust/commit/37304cda63d74b1a16f249853623960a003392c9"}], "stats": {"total": 54, "additions": 23, "deletions": 31}, "files": [{"sha": "53548fa40f26a0a0cf36cfcd8f7e1c613247c497", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e2414852b1c65bc819869cf9cb5328158d3ff369/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2414852b1c65bc819869cf9cb5328158d3ff369/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=e2414852b1c65bc819869cf9cb5328158d3ff369", "patch": "@@ -146,6 +146,13 @@ impl ExternCrate {\n     pub fn is_direct(&self) -> bool {\n         self.dependency_of == LOCAL_CRATE\n     }\n+\n+    pub fn rank(&self) -> impl PartialOrd {\n+        // Prefer:\n+        // - direct extern crate to indirect\n+        // - shorter paths to longer\n+        (self.is_direct(), !self.path_len)\n+    }\n }\n \n #[derive(Copy, Clone, Debug, HashStable)]"}, {"sha": "32548081e62997a36e6fcf5bae93872416b7b397", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e2414852b1c65bc819869cf9cb5328158d3ff369/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2414852b1c65bc819869cf9cb5328158d3ff369/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=e2414852b1c65bc819869cf9cb5328158d3ff369", "patch": "@@ -400,36 +400,12 @@ impl<'a> CrateLoader<'a> {\n         if !visited.insert((cnum, extern_crate.is_direct())) { return }\n \n         let cmeta = self.cstore.get_crate_data(cnum);\n-        let mut old_extern_crate = cmeta.extern_crate.borrow_mut();\n-\n-        // Prefer:\n-        // - something over nothing (tuple.0);\n-        // - direct extern crate to indirect (tuple.1);\n-        // - shorter paths to longer (tuple.2).\n-        let new_rank = (\n-            true,\n-            extern_crate.is_direct(),\n-            cmp::Reverse(extern_crate.path_len),\n-        );\n-        let old_rank = match *old_extern_crate {\n-            None => (false, false, cmp::Reverse(usize::max_value())),\n-            Some(ref c) => (\n-                true,\n-                c.is_direct(),\n-                cmp::Reverse(c.path_len),\n-            ),\n-        };\n-        if old_rank >= new_rank {\n-            return; // no change needed\n-        }\n-\n-        *old_extern_crate = Some(extern_crate);\n-        drop(old_extern_crate);\n-\n-        // Propagate the extern crate info to dependencies.\n-        extern_crate.dependency_of = cnum;\n-        for &dep_cnum in cmeta.dependencies().iter() {\n-            self.update_extern_crate(dep_cnum, extern_crate, visited);\n+        if cmeta.update_extern_crate(extern_crate) {\n+            // Propagate the extern crate info to dependencies.\n+            extern_crate.dependency_of = cnum;\n+            for &dep_cnum in cmeta.dependencies().iter() {\n+                self.update_extern_crate(dep_cnum, extern_crate, visited);\n+            }\n         }\n     }\n "}, {"sha": "595c6bcf42512b6e912768ef8f94f1f1c52fffe0", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e2414852b1c65bc819869cf9cb5328158d3ff369/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2414852b1c65bc819869cf9cb5328158d3ff369/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=e2414852b1c65bc819869cf9cb5328158d3ff369", "patch": "@@ -112,7 +112,7 @@ crate struct CrateMetadata {\n \n     /// Information about the `extern crate` item or path that caused this crate to be loaded.\n     /// If this is `None`, then the crate was injected (e.g., by the allocator).\n-    crate extern_crate: Lock<Option<ExternCrate>>,\n+    extern_crate: Lock<Option<ExternCrate>>,\n }\n \n /// Holds information about a syntax_pos::SourceFile imported from another crate.\n@@ -1525,6 +1525,15 @@ impl<'a, 'tcx> CrateMetadata {\n     crate fn add_dependency(&self, cnum: CrateNum) {\n         self.dependencies.borrow_mut().push(cnum);\n     }\n+\n+    crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {\n+        let mut extern_crate = self.extern_crate.borrow_mut();\n+        let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);\n+        if update {\n+            *extern_crate = Some(new_extern_crate);\n+        }\n+        update\n+    }\n }\n \n // Cannot be implemented on 'ProcMacro', as libproc_macro"}]}