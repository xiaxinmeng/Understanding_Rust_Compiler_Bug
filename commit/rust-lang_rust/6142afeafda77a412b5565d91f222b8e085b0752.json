{"sha": "6142afeafda77a412b5565d91f222b8e085b0752", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNDJhZmVhZmRhNzdhNDEyYjU1NjVkOTFmMjIyYjhlMDg1YjA3NTI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-19T13:50:04Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-19T13:50:04Z"}, "message": "Support crates/module roots in external_docs", "tree": {"sha": "306f1c2cccf8ec10ce3b4c42952fee8494760342", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/306f1c2cccf8ec10ce3b4c42952fee8494760342"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6142afeafda77a412b5565d91f222b8e085b0752", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6142afeafda77a412b5565d91f222b8e085b0752", "html_url": "https://github.com/rust-lang/rust/commit/6142afeafda77a412b5565d91f222b8e085b0752", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6142afeafda77a412b5565d91f222b8e085b0752/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f1a220f32220cd4a664ca1adac5eb36e9eb33b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f1a220f32220cd4a664ca1adac5eb36e9eb33b2", "html_url": "https://github.com/rust-lang/rust/commit/3f1a220f32220cd4a664ca1adac5eb36e9eb33b2"}], "stats": {"total": 58, "additions": 41, "deletions": 17}, "files": [{"sha": "cb5a8e19a9da807e1a571f3c34f06083275ab2c3", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 41, "deletions": 17, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6142afeafda77a412b5565d91f222b8e085b0752/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6142afeafda77a412b5565d91f222b8e085b0752/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=6142afeafda77a412b5565d91f222b8e085b0752", "patch": "@@ -108,13 +108,13 @@ pub(crate) fn external_docs(\n     let node = token.parent()?;\n     let definition = match_ast! {\n         match node {\n-            ast::NameRef(name_ref) => NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced(sema.db)),\n-            ast::Name(name) => NameClass::classify(&sema, &name).map(|d| d.referenced_or_defined(sema.db)),\n-            _ => None,\n+            ast::NameRef(name_ref) => NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced(sema.db))?,\n+            ast::Name(name) => NameClass::classify(&sema, &name).map(|d| d.referenced_or_defined(sema.db))?,\n+            _ => return None,\n         }\n     };\n \n-    get_doc_link(db, definition?)\n+    get_doc_link(db, definition)\n }\n \n /// Extracts all links from a given markdown text.\n@@ -214,20 +214,20 @@ fn broken_link_clone_cb<'a, 'b>(link: BrokenLink<'a>) -> Option<(CowStr<'b>, Cow\n // This should cease to be a problem if RFC2988 (Stable Rustdoc URLs) is implemented\n // https://github.com/rust-lang/rfcs/pull/2988\n fn get_doc_link(db: &RootDatabase, definition: Definition) -> Option<String> {\n-    // Get the outermost definition for the moduledef. This is used to resolve the public path to the type,\n+    // Get the outermost definition for the module def. This is used to resolve the public path to the type,\n     // then we can join the method, field, etc onto it if required.\n     let target_def: ModuleDef = match definition {\n-        Definition::ModuleDef(moddef) => match moddef {\n+        Definition::ModuleDef(def) => match def {\n             ModuleDef::Function(f) => f\n                 .as_assoc_item(db)\n                 .and_then(|assoc| match assoc.container(db) {\n                     AssocItemContainer::Trait(t) => Some(t.into()),\n-                    AssocItemContainer::Impl(impld) => {\n-                        impld.self_ty(db).as_adt().map(|adt| adt.into())\n+                    AssocItemContainer::Impl(impl_) => {\n+                        impl_.self_ty(db).as_adt().map(|adt| adt.into())\n                     }\n                 })\n-                .unwrap_or_else(|| f.clone().into()),\n-            moddef => moddef,\n+                .unwrap_or_else(|| def),\n+            def => def,\n         },\n         Definition::Field(f) => f.parent_def(db).into(),\n         // FIXME: Handle macros\n@@ -236,17 +236,28 @@ fn get_doc_link(db: &RootDatabase, definition: Definition) -> Option<String> {\n \n     let ns = ItemInNs::from(target_def);\n \n-    let module = definition.module(db)?;\n-    let krate = module.krate();\n+    let krate = match definition {\n+        // Definition::module gives back the parent module, we don't want that as it fails for root modules\n+        Definition::ModuleDef(ModuleDef::Module(module)) => module.krate(),\n+        _ => definition.module(db)?.krate(),\n+    };\n     let import_map = db.import_map(krate.into());\n-    let base = once(krate.display_name(db)?.to_string())\n-        .chain(import_map.path_of(ns)?.segments.iter().map(|name| name.to_string()))\n-        .join(\"/\")\n-        + \"/\";\n+\n+    let mut base = krate.display_name(db)?.to_string();\n+    let is_root_module = matches!(\n+        definition,\n+        Definition::ModuleDef(ModuleDef::Module(module)) if krate.root_module(db) == module\n+    );\n+    if !is_root_module {\n+        base = once(base)\n+            .chain(import_map.path_of(ns)?.segments.iter().map(|name| name.to_string()))\n+            .join(\"/\");\n+    }\n+    base += \"/\";\n \n     let filename = get_symbol_filename(db, &target_def);\n     let fragment = match definition {\n-        Definition::ModuleDef(moddef) => match moddef {\n+        Definition::ModuleDef(def) => match def {\n             ModuleDef::Function(f) => {\n                 get_symbol_fragment(db, &FieldOrAssocItem::AssocItem(AssocItem::Function(f)))\n             }\n@@ -532,6 +543,19 @@ mod tests {\n         expect.assert_eq(&url)\n     }\n \n+    #[test]\n+    fn test_doc_url_crate() {\n+        check(\n+            r#\"\n+//- /main.rs crate:main deps:test\n+use test$0::Foo;\n+//- /lib.rs crate:test\n+pub struct Foo;\n+\"#,\n+            expect![[r#\"https://docs.rs/test/*/test/index.html\"#]],\n+        );\n+    }\n+\n     #[test]\n     fn test_doc_url_struct() {\n         check("}]}