{"sha": "f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MTJmYjU2YjhkMTFjMTY4ZTdlZTQ5ZWU3NGU3OWM0YWIyZTU2Mzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-05T03:06:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-05T03:06:32Z"}, "message": "Auto merge of #80708 - JohnTitor:rollup-6esk027, r=JohnTitor\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #80442 (Mention Arc::make_mut and Rc::make_mut in the documentation of Cow)\n - #80533 (bootstrap: clippy fixes)\n - #80538 (Add check for `[T;N]`/`usize` mismatch in astconv)\n - #80612 (Remove reverted change from relnotes)\n - #80627 (Builder: Warn if test file does not exist)\n - #80637 (Use Option::filter instead of open-coding it)\n - #80643 (Move variable into the only branch where it is relevant)\n - #80656 (Fixed documentation error for `std::hint::spin_loop`)\n - #80666 (Fix missing link for \"fully qualified syntax\")\n - #80672 (./x.py clippy: allow the most noisy lints)\n - #80677 (doc -- list edit for consistency)\n - #80696 (make sure that promoteds which fail to evaluate in dead const code behave correctly)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d18afc92b3a1abecb5bd1c21444e7c6996a7ab28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d18afc92b3a1abecb5bd1c21444e7c6996a7ab28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "html_url": "https://github.com/rust-lang/rust/commit/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9919ad6e9ed113557c68c430de2e0f434e4f5b6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9919ad6e9ed113557c68c430de2e0f434e4f5b6e", "html_url": "https://github.com/rust-lang/rust/commit/9919ad6e9ed113557c68c430de2e0f434e4f5b6e"}, {"sha": "9daac58ee9a7be95f14f29b44d0a256669b0419e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9daac58ee9a7be95f14f29b44d0a256669b0419e", "html_url": "https://github.com/rust-lang/rust/commit/9daac58ee9a7be95f14f29b44d0a256669b0419e"}], "stats": {"total": 261, "additions": 173, "deletions": 88}, "files": [{"sha": "e82eb89ef21e9f88e40c45afa19322a5a76903c2", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "patch": "@@ -3745,6 +3745,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"rustc_ast\",\n  \"rustc_data_structures\",\n+ \"rustc_feature\",\n  \"rustc_index\",\n  \"rustc_macros\",\n  \"rustc_serialize\","}, {"sha": "4409b6ad7b1d68833fad322f0079176d98c91e0b", "filename": "RELEASES.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "patch": "@@ -45,7 +45,6 @@ Libraries\n \n - [`RangeInclusive` now checks for exhaustion when calling `contains` and indexing.][78109]\n - [`ToString::to_string` now no longer shrinks the internal buffer in the default implementation.][77997]\n-- [`ops::{Index, IndexMut}` are now implemented for fixed sized arrays of any length.][74989]\n \n Stabilized APIs\n ---------------\n@@ -110,7 +109,6 @@ related tools.\n [76199]: https://github.com/rust-lang/rust/pull/76199\n [76119]: https://github.com/rust-lang/rust/pull/76119\n [75914]: https://github.com/rust-lang/rust/pull/75914\n-[74989]: https://github.com/rust-lang/rust/pull/74989\n [79004]: https://github.com/rust-lang/rust/pull/79004\n [78676]: https://github.com/rust-lang/rust/pull/78676\n [79904]: https://github.com/rust-lang/rust/issues/79904"}, {"sha": "c14165454ed8f21cffee559b0e251eae77af7ca0", "filename": "compiler/rustc_hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/compiler%2Frustc_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/compiler%2Frustc_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2FCargo.toml?ref=f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "patch": "@@ -9,6 +9,7 @@ doctest = false\n \n [dependencies]\n rustc_target = { path = \"../rustc_target\" }\n+rustc_feature = { path = \"../rustc_feature\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_index = { path = \"../rustc_index\" }"}, {"sha": "acd254ae85cb15cb92bcda58f0bc47afdb29a9e8", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "patch": "@@ -290,6 +290,14 @@ impl GenericArg<'_> {\n             GenericArg::Const(_) => \"const\",\n         }\n     }\n+\n+    pub fn to_ord(&self, feats: &rustc_feature::Features) -> ast::ParamKindOrd {\n+        match self {\n+            GenericArg::Lifetime(_) => ast::ParamKindOrd::Lifetime,\n+            GenericArg::Type(_) => ast::ParamKindOrd::Type,\n+            GenericArg::Const(_) => ast::ParamKindOrd::Const { unordered: feats.const_generics },\n+        }\n+    }\n }\n \n #[derive(Debug, HashStable_Generic)]"}, {"sha": "e097264ec8aa014b1b354ca57a91720dc71dccd8", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "patch": "@@ -43,22 +43,18 @@ impl<'a, 'tcx> FindHirNodeVisitor<'a, 'tcx> {\n     }\n \n     fn node_ty_contains_target(&mut self, hir_id: HirId) -> Option<Ty<'tcx>> {\n-        let ty_opt = self\n-            .infcx\n+        self.infcx\n             .in_progress_typeck_results\n-            .and_then(|typeck_results| typeck_results.borrow().node_type_opt(hir_id));\n-        match ty_opt {\n-            Some(ty) => {\n-                let ty = self.infcx.resolve_vars_if_possible(ty);\n-                if ty.walk().any(|inner| {\n+            .and_then(|typeck_results| typeck_results.borrow().node_type_opt(hir_id))\n+            .map(|ty| self.infcx.resolve_vars_if_possible(ty))\n+            .filter(|ty| {\n+                ty.walk().any(|inner| {\n                     inner == self.target\n                         || match (inner.unpack(), self.target.unpack()) {\n                             (GenericArgKind::Type(inner_ty), GenericArgKind::Type(target_ty)) => {\n+                                use ty::{Infer, TyVar};\n                                 match (inner_ty.kind(), target_ty.kind()) {\n-                                    (\n-                                        &ty::Infer(ty::TyVar(a_vid)),\n-                                        &ty::Infer(ty::TyVar(b_vid)),\n-                                    ) => self\n+                                    (&Infer(TyVar(a_vid)), &Infer(TyVar(b_vid))) => self\n                                         .infcx\n                                         .inner\n                                         .borrow_mut()\n@@ -69,14 +65,8 @@ impl<'a, 'tcx> FindHirNodeVisitor<'a, 'tcx> {\n                             }\n                             _ => false,\n                         }\n-                }) {\n-                    Some(ty)\n-                } else {\n-                    None\n-                }\n-            }\n-            None => None,\n-        }\n+                })\n+            })\n     }\n }\n "}, {"sha": "6e381fd296584334c4a5d45a86155f66021ded2f", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "patch": "@@ -1341,15 +1341,14 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             return &[];\n         }\n \n-        // Do a reverse lookup beforehand to avoid touching the crate_num\n-        // hash map in the loop below.\n-        let filter = match filter.map(|def_id| self.reverse_translate_def_id(def_id)) {\n-            Some(Some(def_id)) => Some((def_id.krate.as_u32(), def_id.index)),\n-            Some(None) => return &[],\n-            None => None,\n-        };\n+        if let Some(def_id) = filter {\n+            // Do a reverse lookup beforehand to avoid touching the crate_num\n+            // hash map in the loop below.\n+            let filter = match self.reverse_translate_def_id(def_id) {\n+                Some(def_id) => (def_id.krate.as_u32(), def_id.index),\n+                None => return &[],\n+            };\n \n-        if let Some(filter) = filter {\n             if let Some(impls) = self.trait_impls.get(&filter) {\n                 tcx.arena.alloc_from_iter(\n                     impls.decode(self).map(|(idx, simplified_self_ty)| {"}, {"sha": "59a3ac9463463d22eac67ec4911de858d08fd80d", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "patch": "@@ -801,6 +801,15 @@ impl GenericParamDefKind {\n             GenericParamDefKind::Const => \"constant\",\n         }\n     }\n+    pub fn to_ord(&self, tcx: TyCtxt<'_>) -> ast::ParamKindOrd {\n+        match self {\n+            GenericParamDefKind::Lifetime => ast::ParamKindOrd::Lifetime,\n+            GenericParamDefKind::Type { .. } => ast::ParamKindOrd::Type,\n+            GenericParamDefKind::Const => {\n+                ast::ParamKindOrd::Const { unordered: tcx.features().const_generics }\n+            }\n+        }\n+    }\n }\n \n #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable)]"}, {"sha": "1100401ed12dde8eb0df5273152822b900914e89", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 51, "deletions": 41, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::GenericArg;\n use rustc_middle::ty::{\n     self, subst, subst::SubstsRef, GenericParamDef, GenericParamDefKind, Ty, TyCtxt,\n };\n-use rustc_session::{lint::builtin::LATE_BOUND_LIFETIME_ARGUMENTS, Session};\n+use rustc_session::lint::builtin::LATE_BOUND_LIFETIME_ARGUMENTS;\n use rustc_span::{symbol::kw, MultiSpan, Span};\n \n use smallvec::SmallVec;\n@@ -20,62 +20,72 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// Report an error that a generic argument did not match the generic parameter that was\n     /// expected.\n     fn generic_arg_mismatch_err(\n-        sess: &Session,\n+        tcx: TyCtxt<'_>,\n         arg: &GenericArg<'_>,\n-        kind: &'static str,\n+        param: &GenericParamDef,\n         possible_ordering_error: bool,\n         help: Option<&str>,\n     ) {\n+        let sess = tcx.sess;\n         let mut err = struct_span_err!(\n             sess,\n             arg.span(),\n             E0747,\n             \"{} provided when a {} was expected\",\n             arg.descr(),\n-            kind,\n+            param.kind.descr(),\n         );\n \n-        let unordered = sess.features_untracked().const_generics;\n-        let kind_ord = match kind {\n-            \"lifetime\" => ParamKindOrd::Lifetime,\n-            \"type\" => ParamKindOrd::Type,\n-            \"constant\" => ParamKindOrd::Const { unordered },\n-            // It's more concise to match on the string representation, though it means\n-            // the match is non-exhaustive.\n-            _ => bug!(\"invalid generic parameter kind {}\", kind),\n-        };\n-\n-        if let ParamKindOrd::Const { .. } = kind_ord {\n+        if let GenericParamDefKind::Const { .. } = param.kind {\n             if let GenericArg::Type(hir::Ty { kind: hir::TyKind::Infer, .. }) = arg {\n                 err.help(\"const arguments cannot yet be inferred with `_`\");\n             }\n         }\n \n-        let arg_ord = match arg {\n-            GenericArg::Lifetime(_) => ParamKindOrd::Lifetime,\n-            GenericArg::Type(_) => ParamKindOrd::Type,\n-            GenericArg::Const(_) => ParamKindOrd::Const { unordered },\n-        };\n-\n-        if matches!(arg, GenericArg::Type(hir::Ty { kind: hir::TyKind::Path { .. }, .. }))\n-            && matches!(kind_ord, ParamKindOrd::Const { .. })\n-        {\n-            let suggestions = vec![\n-                (arg.span().shrink_to_lo(), String::from(\"{ \")),\n-                (arg.span().shrink_to_hi(), String::from(\" }\")),\n-            ];\n-            err.multipart_suggestion(\n-                \"if this generic argument was intended as a const parameter, \\\n+        // Specific suggestion set for diagnostics\n+        match (arg, &param.kind) {\n+            (\n+                GenericArg::Type(hir::Ty { kind: hir::TyKind::Path { .. }, .. }),\n+                GenericParamDefKind::Const { .. },\n+            ) => {\n+                let suggestions = vec![\n+                    (arg.span().shrink_to_lo(), String::from(\"{ \")),\n+                    (arg.span().shrink_to_hi(), String::from(\" }\")),\n+                ];\n+                err.multipart_suggestion(\n+                    \"if this generic argument was intended as a const parameter, \\\n                 try surrounding it with braces:\",\n-                suggestions,\n-                Applicability::MaybeIncorrect,\n-            );\n+                    suggestions,\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+            (\n+                GenericArg::Type(hir::Ty { kind: hir::TyKind::Array(_, len), .. }),\n+                GenericParamDefKind::Const { .. },\n+            ) if tcx.type_of(param.def_id) == tcx.types.usize => {\n+                let snippet = sess.source_map().span_to_snippet(tcx.hir().span(len.hir_id));\n+                if let Ok(snippet) = snippet {\n+                    err.span_suggestion(\n+                        arg.span(),\n+                        \"array type provided where a `usize` was expected, try\",\n+                        format!(\"{{ {} }}\", snippet),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+            }\n+            _ => {}\n         }\n \n+        let kind_ord = param.kind.to_ord(tcx);\n+        let arg_ord = arg.to_ord(&tcx.features());\n+\n         // This note is only true when generic parameters are strictly ordered by their kind.\n         if possible_ordering_error && kind_ord.cmp(&arg_ord) != core::cmp::Ordering::Equal {\n-            let (first, last) =\n-                if kind_ord < arg_ord { (kind, arg.descr()) } else { (arg.descr(), kind) };\n+            let (first, last) = if kind_ord < arg_ord {\n+                (param.kind.descr(), arg.descr())\n+            } else {\n+                (arg.descr(), param.kind.descr())\n+            };\n             err.note(&format!(\"{} arguments must be provided before {} arguments\", first, last));\n             if let Some(help) = help {\n                 err.help(help);\n@@ -203,7 +213,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 // We expected a lifetime argument, but got a type or const\n                                 // argument. That means we're inferring the lifetimes.\n                                 substs.push(ctx.inferred_kind(None, param, infer_args));\n-                                force_infer_lt = Some(arg);\n+                                force_infer_lt = Some((arg, param));\n                                 params.next();\n                             }\n                             (GenericArg::Lifetime(_), _, ExplicitLateBound::Yes) => {\n@@ -213,7 +223,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 // ignore it.\n                                 args.next();\n                             }\n-                            (_, kind, _) => {\n+                            (_, _, _) => {\n                                 // We expected one kind of parameter, but the user provided\n                                 // another. This is an error. However, if we already know that\n                                 // the arguments don't match up with the parameters, we won't issue\n@@ -256,9 +266,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                     param_types_present.dedup();\n \n                                     Self::generic_arg_mismatch_err(\n-                                        tcx.sess,\n+                                        tcx,\n                                         arg,\n-                                        kind.descr(),\n+                                        param,\n                                         !args_iter.clone().is_sorted_by_key(|arg| match arg {\n                                             GenericArg::Lifetime(_) => ParamKindOrd::Lifetime,\n                                             GenericArg::Type(_) => ParamKindOrd::Type,\n@@ -315,9 +325,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         {\n                             let kind = arg.descr();\n                             assert_eq!(kind, \"lifetime\");\n-                            let provided =\n+                            let (provided_arg, param) =\n                                 force_infer_lt.expect(\"lifetimes ought to have been inferred\");\n-                            Self::generic_arg_mismatch_err(tcx.sess, provided, kind, false, None);\n+                            Self::generic_arg_mismatch_err(tcx, provided_arg, param, false, None);\n                         }\n \n                         break;"}, {"sha": "adf996fc78275efad0a149ba20a67947b038ee3f", "filename": "library/alloc/src/borrow.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/library%2Falloc%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/library%2Falloc%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fborrow.rs?ref=f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "patch": "@@ -103,6 +103,11 @@ where\n /// is desired, `to_mut` will obtain a mutable reference to an owned\n /// value, cloning if necessary.\n ///\n+/// If you need reference-counting pointers, note that\n+/// [`Rc::make_mut`][crate::rc::Rc::make_mut] and\n+/// [`Arc::make_mut`][crate::sync::Arc::make_mut] can provide clone-on-write\n+/// functionality as well.\n+///\n /// # Examples\n ///\n /// ```"}, {"sha": "8183a582d337aaad656a38b600f42d976364dff5", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "patch": "@@ -238,6 +238,7 @@\n //! [downgrade]: Rc::downgrade\n //! [upgrade]: Weak::upgrade\n //! [mutability]: core::cell#introducing-mutability-inside-of-something-immutable\n+//! [fully qualified syntax]: https://doc.rust-lang.org/book/ch19-03-advanced-traits.html#fully-qualified-syntax-for-disambiguation-calling-methods-with-the-same-name\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "313729581acd945b790c2f69aa03512c825766a1", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "patch": "@@ -91,7 +91,7 @@ pub const unsafe fn unreachable_unchecked() -> ! {\n /// };\n ///\n /// // Back on our current thread, we wait for the value to be set\n-/// while live.load(Ordering::Acquire) {\n+/// while !live.load(Ordering::Acquire) {\n ///     // The spin loop is a hint to the CPU that we're waiting, but probably\n ///     // not for very long\n ///     hint::spin_loop();"}, {"sha": "5766fd3c88744591a68fb1e0e6b7f63f0f1c4943", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "patch": "@@ -397,7 +397,7 @@ impl<A: Debug + TrustedRandomAccess, B: Debug + TrustedRandomAccess> ZipFmt<A, B\n ///    only be called at most `self.size() - idx - 1` times.\n /// 4. After `get_unchecked` is called, then only the following methods will be\n ///    called on `self`:\n-///     * `std::clone::Clone::clone`\n+///     * `std::clone::Clone::clone()`\n ///     * `std::iter::Iterator::size_hint()`\n ///     * `std::iter::Iterator::next_back()`\n ///     * `std::iter::Iterator::__iterator_get_unchecked()`"}, {"sha": "ec9ce4c820c69f18b72823735b47710b86d84f43", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "patch": "@@ -1534,7 +1534,7 @@ impl Rustflags {\n     fn arg(&mut self, arg: &str) -> &mut Self {\n         assert_eq!(arg.split(' ').count(), 1);\n         if !self.0.is_empty() {\n-            self.0.push_str(\" \");\n+            self.0.push(' ');\n         }\n         self.0.push_str(arg);\n         self"}, {"sha": "6e65be93fecc8a19365acbb80f1e5483c2e0d78f", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "patch": "@@ -74,9 +74,9 @@ impl GitInfo {\n         if let Some(ref inner) = self.inner {\n             version.push_str(\" (\");\n             version.push_str(&inner.short_sha);\n-            version.push_str(\" \");\n+            version.push(' ');\n             version.push_str(&inner.commit_date);\n-            version.push_str(\")\");\n+            version.push(')');\n         }\n         version\n     }"}, {"sha": "72a979338a5490331cd0d95870893f4b3285f94c", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "patch": "@@ -21,6 +21,16 @@ fn args(builder: &Builder<'_>) -> Vec<String> {\n     }\n \n     if let Subcommand::Clippy { fix, .. } = builder.config.cmd {\n+        // disable the most spammy clippy lints\n+        let ignored_lints = vec![\n+            \"many_single_char_names\", // there are a lot in stdarch\n+            \"collapsible_if\",\n+            \"type_complexity\",\n+            \"missing_safety_doc\", // almost 3K warnings\n+            \"too_many_arguments\",\n+            \"needless_lifetimes\", // people want to keep the lifetimes\n+            \"wrong_self_convention\",\n+        ];\n         let mut args = vec![];\n         if fix {\n             #[rustfmt::skip]\n@@ -33,6 +43,7 @@ fn args(builder: &Builder<'_>) -> Vec<String> {\n             ]));\n         }\n         args.extend(strings(&[\"--\", \"--cap-lints\", \"warn\"]));\n+        args.extend(ignored_lints.iter().map(|lint| format!(\"-Aclippy::{}\", lint)));\n         args\n     } else {\n         vec![]"}, {"sha": "e2c2e19b0bc174e8a8f41e86955af8f04ec52f89", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "patch": "@@ -1326,17 +1326,17 @@ impl Step for Extended {\n         license += &builder.read(&builder.src.join(\"COPYRIGHT\"));\n         license += &builder.read(&builder.src.join(\"LICENSE-APACHE\"));\n         license += &builder.read(&builder.src.join(\"LICENSE-MIT\"));\n-        license.push_str(\"\\n\");\n-        license.push_str(\"\\n\");\n+        license.push('\\n');\n+        license.push('\\n');\n \n         let rtf = r\"{\\rtf1\\ansi\\deff0{\\fonttbl{\\f0\\fnil\\fcharset0 Arial;}}\\nowwrap\\fs18\";\n         let mut rtf = rtf.to_string();\n-        rtf.push_str(\"\\n\");\n+        rtf.push('\\n');\n         for line in license.lines() {\n             rtf.push_str(line);\n             rtf.push_str(\"\\\\line \");\n         }\n-        rtf.push_str(\"}\");\n+        rtf.push('}');\n \n         fn filter(contents: &str, marker: &str) -> String {\n             let start = format!(\"tool-{}-start\", marker);"}, {"sha": "88fdcfa2d43cd14e55c0255cd2a1c01656a2e59b", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "patch": "@@ -1083,7 +1083,7 @@ impl Build {\n         if let Some(ref s) = self.config.description {\n             version.push_str(\" (\");\n             version.push_str(s);\n-            version.push_str(\")\");\n+            version.push(')');\n         }\n         version\n     }\n@@ -1144,7 +1144,7 @@ impl Build {\n                     && (dep != \"profiler_builtins\"\n                         || target\n                             .map(|t| self.config.profiler_enabled(t))\n-                            .unwrap_or(self.config.any_profiler_enabled()))\n+                            .unwrap_or_else(|| self.config.any_profiler_enabled()))\n                     && (dep != \"rustc_codegen_llvm\" || self.config.llvm_enabled())\n                 {\n                     list.push(*dep);"}, {"sha": "08acc3d671fac8b836e20cd5bd981d7f86c915c0", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "patch": "@@ -163,7 +163,11 @@ pub fn check(build: &mut Build) {\n             panic!(\"the iOS target is only supported on macOS\");\n         }\n \n-        build.config.target_config.entry(*target).or_insert(Target::from_triple(&target.triple));\n+        build\n+            .config\n+            .target_config\n+            .entry(*target)\n+            .or_insert_with(|| Target::from_triple(&target.triple));\n \n         if target.contains(\"-none-\") || target.contains(\"nvptx\") {\n             if build.no_std(*target) == Some(false) {"}, {"sha": "725147767dbd1eac034694216549253bdb892dfb", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "patch": "@@ -89,7 +89,7 @@ pub fn setup(src_path: &Path, profile: Profile) {\n         std::process::exit(1);\n     }\n \n-    let path = cfg_file.unwrap_or(\"config.toml\".into());\n+    let path = cfg_file.unwrap_or_else(|| \"config.toml\".into());\n     let settings = format!(\n         \"# Includes one of the default files in src/bootstrap/defaults\\n\\\n     profile = \\\"{}\\\"\\n\\\n@@ -156,7 +156,7 @@ pub fn interactive_path() -> io::Result<Profile> {\n         io::stdout().flush()?;\n         let mut input = String::new();\n         io::stdin().read_line(&mut input)?;\n-        if input == \"\" {\n+        if input.is_empty() {\n             eprintln!(\"EOF on stdin, when expecting answer to question.  Giving up.\");\n             std::process::exit(1);\n         }"}, {"sha": "2e8c574044ed9ebeb4250497df46568121812ba4", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "patch": "@@ -1126,7 +1126,19 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n                 Ok(path) => path,\n                 Err(_) => p,\n             })\n-            .filter(|p| p.starts_with(suite_path) && (p.is_dir() || p.is_file()))\n+            .filter(|p| p.starts_with(suite_path))\n+            .filter(|p| {\n+                let exists = p.is_dir() || p.is_file();\n+                if !exists {\n+                    if let Some(p) = p.to_str() {\n+                        builder.info(&format!(\n+                            \"Warning: Skipping \\\"{}\\\": not a regular file or directory\",\n+                            p\n+                        ));\n+                    }\n+                }\n+                exists\n+            })\n             .filter_map(|p| {\n                 // Since test suite paths are themselves directories, if we don't\n                 // specify a directory or file, we'll get an empty string here\n@@ -1135,7 +1147,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n                 // flag is respected, so providing an empty --test-args conflicts with\n                 // any following it.\n                 match p.strip_prefix(suite_path).ok().and_then(|p| p.to_str()) {\n-                    Some(s) if s != \"\" => Some(s),\n+                    Some(s) if !s.is_empty() => Some(s),\n                     _ => None,\n                 }\n             })"}, {"sha": "f3e5a3186cdd63509d8e3fac70b5b01292299acb", "filename": "src/test/ui/const-generics/suggest_const_for_array.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/src%2Ftest%2Fui%2Fconst-generics%2Fsuggest_const_for_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/src%2Ftest%2Fui%2Fconst-generics%2Fsuggest_const_for_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fsuggest_const_for_array.rs?ref=f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "patch": "@@ -0,0 +1,10 @@\n+#![crate_type = \"lib\"]\n+\n+fn example<const N: usize>() {}\n+\n+fn other() {\n+  example::<[usize; 3]>();\n+  //~^ ERROR type provided when a const\n+  example::<[usize; 4+5]>();\n+  //~^ ERROR type provided when a const\n+}"}, {"sha": "a617bf2bb0d963c0039227d0d8d244194744a2b3", "filename": "src/test/ui/const-generics/suggest_const_for_array.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/src%2Ftest%2Fui%2Fconst-generics%2Fsuggest_const_for_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/src%2Ftest%2Fui%2Fconst-generics%2Fsuggest_const_for_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fsuggest_const_for_array.stderr?ref=f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "patch": "@@ -0,0 +1,15 @@\n+error[E0747]: type provided when a constant was expected\n+  --> $DIR/suggest_const_for_array.rs:6:13\n+   |\n+LL |   example::<[usize; 3]>();\n+   |             ^^^^^^^^^^ help: array type provided where a `usize` was expected, try: `{ 3 }`\n+\n+error[E0747]: type provided when a constant was expected\n+  --> $DIR/suggest_const_for_array.rs:8:13\n+   |\n+LL |   example::<[usize; 4+5]>();\n+   |             ^^^^^^^^^^^^ help: array type provided where a `usize` was expected, try: `{ 4+5 }`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0747`."}, {"sha": "b6e7127a9b77909c761b326c593303df70239311", "filename": "src/test/ui/consts/promotion.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/src%2Ftest%2Fui%2Fconsts%2Fpromotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637/src%2Ftest%2Fui%2Fconsts%2Fpromotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromotion.rs?ref=f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "patch": "@@ -4,12 +4,23 @@\n \n fn foo(_: &'static [&'static str]) {}\n fn bar(_: &'static [&'static str; 3]) {}\n-fn baz_i32(_: &'static i32) {}\n-fn baz_u32(_: &'static u32) {}\n+const fn baz_i32(_: &'static i32) {}\n+const fn baz_u32(_: &'static u32) {}\n+\n+const fn fail() -> i32 { 1/0 }\n+const C: i32 = {\n+    // Promoted that fails to evaluate in dead code -- this must work\n+    // (for backwards compatibility reasons).\n+    if false {\n+        baz_i32(&fail());\n+    }\n+    42\n+};\n \n fn main() {\n     foo(&[\"a\", \"b\", \"c\"]);\n     bar(&[\"d\", \"e\", \"f\"]);\n+    assert_eq!(C, 42);\n \n     // make sure that these do not cause trouble despite overflowing\n     baz_u32(&(0-1));"}]}