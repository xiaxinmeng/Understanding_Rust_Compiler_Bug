{"sha": "0525cf9d6895027e2b7cd361784db4965f97a6ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MjVjZjlkNjg5NTAyN2UyYjdjZDM2MTc4NGRiNDk2NWY5N2E2ZWQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-23T18:21:00Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-28T17:58:46Z"}, "message": "rustc_metadata: Cleanup generation of crate dependency lists", "tree": {"sha": "f95b49c016c60a92957932f88eefbcbabbe90ec4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f95b49c016c60a92957932f88eefbcbabbe90ec4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0525cf9d6895027e2b7cd361784db4965f97a6ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0525cf9d6895027e2b7cd361784db4965f97a6ed", "html_url": "https://github.com/rust-lang/rust/commit/0525cf9d6895027e2b7cd361784db4965f97a6ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0525cf9d6895027e2b7cd361784db4965f97a6ed/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f453d1127d9095cf3c3356655d9e8502ceeb8373", "url": "https://api.github.com/repos/rust-lang/rust/commits/f453d1127d9095cf3c3356655d9e8502ceeb8373", "html_url": "https://github.com/rust-lang/rust/commit/f453d1127d9095cf3c3356655d9e8502ceeb8373"}], "stats": {"total": 61, "additions": 28, "deletions": 33}, "files": [{"sha": "feb224abea559dbe8092f1926baf7c352dbd5f9e", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0525cf9d6895027e2b7cd361784db4965f97a6ed/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0525cf9d6895027e2b7cd361784db4965f97a6ed/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=0525cf9d6895027e2b7cd361784db4965f97a6ed", "patch": "@@ -807,7 +807,7 @@ impl<'a> CrateLoader<'a> {\n         // Before we inject any dependencies, make sure we don't inject a\n         // circular dependency by validating that this crate doesn't\n         // transitively depend on any crates satisfying `needs_dep`.\n-        for dep in self.cstore.crate_dependencies_in_rpo(krate) {\n+        for dep in self.cstore.crate_dependencies_in_reverse_postorder(krate) {\n             let data = self.cstore.get_crate_data(dep);\n             if needs_dep(&data) {\n                 self.sess.err(&format!(\"the crate `{}` cannot depend \\"}, {"sha": "9344ec1b15a0374d0f25587beb43d495bf9acc68", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 26, "deletions": 31, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0525cf9d6895027e2b7cd361784db4965f97a6ed/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0525cf9d6895027e2b7cd361784db4965f97a6ed/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=0525cf9d6895027e2b7cd361784db4965f97a6ed", "patch": "@@ -5,7 +5,7 @@ use crate::rmeta::CrateMetadata;\n \n use rustc_data_structures::sync::Lrc;\n use rustc_index::vec::IndexVec;\n-use rustc::hir::def_id::CrateNum;\n+use rustc::hir::def_id::{LOCAL_CRATE, CrateNum};\n use syntax::ast;\n use syntax::edition::Edition;\n use syntax::expand::allocator::AllocatorKind;\n@@ -55,45 +55,40 @@ impl CStore {\n         self.metas[cnum] = Some(Lrc::new(data));\n     }\n \n-    crate fn iter_crate_data<I>(&self, mut i: I)\n-        where I: FnMut(CrateNum, &CrateMetadata)\n-    {\n-        for (k, v) in self.metas.iter_enumerated() {\n-            if let &Some(ref v) = v {\n-                i(k, v);\n+    crate fn iter_crate_data(&self, mut f: impl FnMut(CrateNum, &CrateMetadata)) {\n+        for (cnum, data) in self.metas.iter_enumerated() {\n+            if let Some(data) = data {\n+                f(cnum, data);\n             }\n         }\n     }\n \n-    crate fn crate_dependencies_in_rpo(&self, krate: CrateNum) -> Vec<CrateNum> {\n-        let mut ordering = Vec::new();\n-        self.push_dependencies_in_postorder(&mut ordering, krate);\n-        ordering.reverse();\n-        ordering\n-    }\n+    fn push_dependencies_in_postorder(&self, deps: &mut Vec<CrateNum>, cnum: CrateNum) {\n+        if !deps.contains(&cnum) {\n+            let data = self.get_crate_data(cnum);\n+            for &dep in data.dependencies.borrow().iter() {\n+                if dep != cnum {\n+                    self.push_dependencies_in_postorder(deps, dep);\n+                }\n+            }\n \n-    crate fn push_dependencies_in_postorder(&self, ordering: &mut Vec<CrateNum>, krate: CrateNum) {\n-        if ordering.contains(&krate) {\n-            return;\n+            deps.push(cnum);\n         }\n+    }\n \n-        let data = self.get_crate_data(krate);\n-        for &dep in data.dependencies.borrow().iter() {\n-            if dep != krate {\n-                self.push_dependencies_in_postorder(ordering, dep);\n-            }\n+    crate fn crate_dependencies_in_postorder(&self, cnum: CrateNum) -> Vec<CrateNum> {\n+        let mut deps = Vec::new();\n+        if cnum == LOCAL_CRATE {\n+            self.iter_crate_data(|cnum, _| self.push_dependencies_in_postorder(&mut deps, cnum));\n+        } else {\n+            self.push_dependencies_in_postorder(&mut deps, cnum);\n         }\n-\n-        ordering.push(krate);\n+        deps\n     }\n \n-    crate fn do_postorder_cnums_untracked(&self) -> Vec<CrateNum> {\n-        let mut ordering = Vec::new();\n-        for (num, v) in self.metas.iter_enumerated() {\n-            if let &Some(_) = v {\n-                self.push_dependencies_in_postorder(&mut ordering, num);\n-            }\n-        }\n-        return ordering\n+    crate fn crate_dependencies_in_reverse_postorder(&self, cnum: CrateNum) -> Vec<CrateNum> {\n+        let mut deps = self.crate_dependencies_in_postorder(cnum);\n+        deps.reverse();\n+        deps\n     }\n }"}, {"sha": "af1f4fe3ec52d5caf54870027b2b6611d33137bf", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0525cf9d6895027e2b7cd361784db4965f97a6ed/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0525cf9d6895027e2b7cd361784db4965f97a6ed/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=0525cf9d6895027e2b7cd361784db4965f97a6ed", "patch": "@@ -517,7 +517,7 @@ impl CrateStore for cstore::CStore {\n     }\n \n     fn postorder_cnums_untracked(&self) -> Vec<CrateNum> {\n-        self.do_postorder_cnums_untracked()\n+        self.crate_dependencies_in_postorder(LOCAL_CRATE)\n     }\n \n     fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata {"}]}