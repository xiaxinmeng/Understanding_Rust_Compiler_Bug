{"sha": "42389b7069a21679d6b92229d825b860121125d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMzg5YjcwNjlhMjE2NzlkNmI5MjIyOWQ4MjViODYwMTIxMTI1ZDk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-07T02:07:52Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-07T02:07:52Z"}, "message": "collections: Correct with_capacity_and_hasher\n\nThe arguments were accidentally swapped in the wrong order.\n\nCloses #12743", "tree": {"sha": "06ee8d562c53044ab3a0766a5e6d6a5bc651e718", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06ee8d562c53044ab3a0766a5e6d6a5bc651e718"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42389b7069a21679d6b92229d825b860121125d9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42389b7069a21679d6b92229d825b860121125d9", "html_url": "https://github.com/rust-lang/rust/commit/42389b7069a21679d6b92229d825b860121125d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42389b7069a21679d6b92229d825b860121125d9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e95b086db515386faf41549b490515a540165b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e95b086db515386faf41549b490515a540165b1", "html_url": "https://github.com/rust-lang/rust/commit/0e95b086db515386faf41549b490515a540165b1"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "1d73fae11b09bc62b1e7c690c8dba0665cfabbf8", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/42389b7069a21679d6b92229d825b860121125d9/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42389b7069a21679d6b92229d825b860121125d9/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=42389b7069a21679d6b92229d825b860121125d9", "patch": "@@ -358,13 +358,13 @@ impl<K: Hash + Eq, V> HashMap<K, V> {\n     pub fn with_capacity(capacity: uint) -> HashMap<K, V> {\n         let mut r = rand::task_rng();\n         let hasher = SipHasher::new_with_keys(r.gen(), r.gen());\n-        HashMap::with_capacity_and_hasher(hasher, capacity)\n+        HashMap::with_capacity_and_hasher(capacity, hasher)\n     }\n }\n \n impl<K: Hash<S> + Eq, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     pub fn with_hasher(hasher: H) -> HashMap<K, V, H> {\n-        HashMap::with_capacity_and_hasher(hasher, INITIAL_CAPACITY)\n+        HashMap::with_capacity_and_hasher(INITIAL_CAPACITY, hasher)\n     }\n \n     /// Create an empty HashMap with space for at least `capacity`\n@@ -374,7 +374,7 @@ impl<K: Hash<S> + Eq, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     /// is designed to allow HashMaps to be resistant to attacks that\n     /// cause many collisions and very poor performance. Setting it\n     /// manually using this function can expose a DoS attack vector.\n-    pub fn with_capacity_and_hasher(hasher: H, capacity: uint) -> HashMap<K, V, H> {\n+    pub fn with_capacity_and_hasher(capacity: uint, hasher: H) -> HashMap<K, V, H> {\n         let cap = max(INITIAL_CAPACITY, capacity);\n         HashMap {\n             hasher: hasher,\n@@ -587,7 +587,8 @@ impl<K: Hash<S> + Eq, V: Eq, S, H: Hasher<S>> Eq for HashMap<K, V, H> {\n \n impl<K: Hash<S> + Eq + Clone, V:Clone, S, H: Hasher<S> + Clone> Clone for HashMap<K, V, H> {\n     fn clone(&self) -> HashMap<K, V, H> {\n-        let mut new_map = HashMap::with_capacity_and_hasher(self.hasher.clone(), self.len());\n+        let mut new_map = HashMap::with_capacity_and_hasher(self.len(),\n+                                                            self.hasher.clone());\n         for (key, value) in self.iter() {\n             new_map.insert((*key).clone(), (*value).clone());\n         }\n@@ -714,7 +715,7 @@ impl<K> Iterator<K> for SetMoveItems<K> {\n impl<K: Hash<S> + Eq, V, S, H: Hasher<S> + Default> FromIterator<(K, V)> for HashMap<K, V, H> {\n     fn from_iterator<T: Iterator<(K, V)>>(iter: &mut T) -> HashMap<K, V, H> {\n         let (lower, _) = iter.size_hint();\n-        let mut map = HashMap::with_capacity_and_hasher(Default::default(), lower);\n+        let mut map = HashMap::with_capacity_and_hasher(lower, Default::default());\n         map.extend(iter);\n         map\n     }\n@@ -730,7 +731,7 @@ impl<K: Hash<S> + Eq, V, S, H: Hasher<S> + Default> Extendable<(K, V)> for HashM\n \n impl<K: Hash<S> + Eq, V, S, H: Hasher<S> + Default> Default for HashMap<K, V, H> {\n     fn default() -> HashMap<K, V, H> {\n-        HashMap::with_capacity_and_hasher(Default::default(), INITIAL_CAPACITY)\n+        HashMap::with_capacity_and_hasher(INITIAL_CAPACITY, Default::default())\n     }\n }\n \n@@ -802,7 +803,7 @@ impl<T: Hash<SipState> + Eq> HashSet<T, SipHasher> {\n \n impl<T: Hash<S> + Eq, S, H: Hasher<S>> HashSet<T, H> {\n     pub fn with_hasher(hasher: H) -> HashSet<T, H> {\n-        HashSet::with_capacity_and_hasher(hasher, INITIAL_CAPACITY)\n+        HashSet::with_capacity_and_hasher(INITIAL_CAPACITY, hasher)\n     }\n \n     /// Create an empty HashSet with space for at least `capacity`\n@@ -812,9 +813,9 @@ impl<T: Hash<S> + Eq, S, H: Hasher<S>> HashSet<T, H> {\n     /// are designed to allow HashSets to be resistant to attacks that\n     /// cause many collisions and very poor performance. Setting them\n     /// manually using this function can expose a DoS attack vector.\n-    pub fn with_capacity_and_hasher(hasher: H, capacity: uint) -> HashSet<T, H> {\n+    pub fn with_capacity_and_hasher(capacity: uint, hasher: H) -> HashSet<T, H> {\n         HashSet {\n-            map: HashMap::with_capacity_and_hasher(hasher, capacity)\n+            map: HashMap::with_capacity_and_hasher(capacity, hasher)\n         }\n     }\n \n@@ -902,7 +903,7 @@ impl<T: fmt::Show + Hash<S> + Eq, S, H: Hasher<S>> fmt::Show for HashSet<T, H> {\n impl<T: Hash<S> + Eq, S, H: Hasher<S> + Default> FromIterator<T> for HashSet<T, H> {\n     fn from_iterator<Iter: Iterator<T>>(iter: &mut Iter) -> HashSet<T, H> {\n         let (lower, _) = iter.size_hint();\n-        let mut set = HashSet::with_capacity_and_hasher(Default::default(), lower);\n+        let mut set = HashSet::with_capacity_and_hasher(lower, Default::default());\n         set.extend(iter);\n         set\n     }"}, {"sha": "2d86734e569e07264eab77cb3e6c1f2b17765fd8", "filename": "src/libserialize/collection_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42389b7069a21679d6b92229d825b860121125d9/src%2Flibserialize%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42389b7069a21679d6b92229d825b860121125d9/src%2Flibserialize%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fcollection_impls.rs?ref=42389b7069a21679d6b92229d825b860121125d9", "patch": "@@ -192,7 +192,7 @@ impl<\n     fn decode(d: &mut D) -> HashMap<K, V, H> {\n         d.read_map(|d, len| {\n             let hasher = Default::default();\n-            let mut map = HashMap::with_capacity_and_hasher(hasher, len);\n+            let mut map = HashMap::with_capacity_and_hasher(len, hasher);\n             for i in range(0u, len) {\n                 let key = d.read_map_elt_key(i, |d| Decodable::decode(d));\n                 let val = d.read_map_elt_val(i, |d| Decodable::decode(d));\n@@ -228,7 +228,7 @@ impl<\n > Decodable<D> for HashSet<T, H> {\n     fn decode(d: &mut D) -> HashSet<T, H> {\n         d.read_seq(|d, len| {\n-            let mut set = HashSet::with_capacity_and_hasher(Default::default(), len);\n+            let mut set = HashSet::with_capacity_and_hasher(len, Default::default());\n             for i in range(0u, len) {\n                 set.insert(d.read_seq_elt(i, |d| Decodable::decode(d)));\n             }"}]}