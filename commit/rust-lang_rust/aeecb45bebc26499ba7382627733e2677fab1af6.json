{"sha": "aeecb45bebc26499ba7382627733e2677fab1af6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZWNiNDViZWJjMjY0OTliYTczODI2Mjc3MzNlMjY3N2ZhYjFhZjY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-04-27T15:47:15Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-04-27T15:47:15Z"}, "message": "Preserve the order files are added to archives\n\nrust.metadata.bin could have been at the start of an .rlib file confusing ld", "tree": {"sha": "5a2b0fbeb5bb09159bdaa0044e04f937b4991878", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a2b0fbeb5bb09159bdaa0044e04f937b4991878"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aeecb45bebc26499ba7382627733e2677fab1af6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aeecb45bebc26499ba7382627733e2677fab1af6", "html_url": "https://github.com/rust-lang/rust/commit/aeecb45bebc26499ba7382627733e2677fab1af6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aeecb45bebc26499ba7382627733e2677fab1af6/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11d816cce5e5b7ed2095f52179021071aeee0beb", "url": "https://api.github.com/repos/rust-lang/rust/commits/11d816cce5e5b7ed2095f52179021071aeee0beb", "html_url": "https://github.com/rust-lang/rust/commit/11d816cce5e5b7ed2095f52179021071aeee0beb"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "20a8642cbd1754de0d79a3611f72de62e8262988", "filename": "example/alloc_example.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aeecb45bebc26499ba7382627733e2677fab1af6/example%2Falloc_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeecb45bebc26499ba7382627733e2677fab1af6/example%2Falloc_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Falloc_example.rs?ref=aeecb45bebc26499ba7382627733e2677fab1af6", "patch": "@@ -1,4 +1,4 @@\n-#![feature(start, box_syntax, alloc_system, core_intrinsics, alloc, alloc_prelude, alloc_error_handler)]\n+#![feature(start, box_syntax, alloc_system, core_intrinsics, alloc_prelude, alloc_error_handler)]\n #![no_std]\n \n extern crate alloc;"}, {"sha": "ea6357b539a22584bc1258261a58ecd10a5ada29", "filename": "src/archive.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/aeecb45bebc26499ba7382627733e2677fab1af6/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeecb45bebc26499ba7382627733e2677fab1af6/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=aeecb45bebc26499ba7382627733e2677fab1af6", "patch": "@@ -1,4 +1,3 @@\n-use std::collections::HashMap;\n use std::fs::File;\n use std::path::{Path, PathBuf};\n \n@@ -24,7 +23,9 @@ enum ArchiveEntry {\n pub struct ArArchiveBuilder<'a> {\n     config: ArchiveConfig<'a>,\n     src_archives: Vec<ar::Archive<File>>,\n-    entries: HashMap<String, ArchiveEntry>,\n+    // Don't use `HashMap` here, as the order is important. `rust.metadata.bin` must always be at\n+    // the end of an archive for linkers to not get confused.\n+    entries: Vec<(String, ArchiveEntry)>,\n     update_symbols: bool,\n }\n \n@@ -42,21 +43,21 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n \n         let (src_archives, entries) = if let Some(src) = &config.src {\n             let mut archive = ar::Archive::new(File::open(src).unwrap());\n-            let mut entries = HashMap::new();\n+            let mut entries = Vec::new();\n \n             let mut i = 0;\n             while let Some(entry) = archive.next_entry() {\n                 let entry = entry.unwrap();\n-                entries.insert(\n+                entries.push((\n                     String::from_utf8(entry.header().identifier().to_vec()).unwrap(),\n                     ArchiveEntry::FromArchive { archive_index: 0, entry_index: i },\n-                );\n+                ));\n                 i += 1;\n             }\n \n             (vec![archive], entries)\n         } else {\n-            (vec![], HashMap::new())\n+            (vec![], Vec::new())\n         };\n \n         ArArchiveBuilder {\n@@ -68,22 +69,22 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n     }\n \n     fn src_files(&mut self) -> Vec<String> {\n-        self.entries.keys().cloned().collect()\n+        self.entries.iter().map(|(name, _)| name.clone()).collect()\n     }\n \n     fn remove_file(&mut self, name: &str) {\n-        let file = self.entries.remove(name);\n-        assert!(\n-            file.is_some(),\n-            \"Tried to remove file not existing in src archive\",\n-        );\n+        let index = self.entries\n+            .iter()\n+            .position(|(entry_name, _)| entry_name == name)\n+            .expect(\"Tried to remove file not existing in src archive\");\n+        self.entries.remove(index);\n     }\n \n     fn add_file(&mut self, file: &Path) {\n-        self.entries.insert(\n+        self.entries.push((\n             file.file_name().unwrap().to_str().unwrap().to_string(),\n             ArchiveEntry::File(File::open(file).unwrap()),\n-        );\n+        ));\n     }\n \n     fn add_native_library(&mut self, name: &str) {\n@@ -132,7 +133,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         let mut builder = if self.config.use_gnu_style_archive {\n             BuilderKind::Gnu(ar::GnuBuilder::new(\n                 archive_file,\n-                self.entries.keys().map(|key| key.as_bytes().to_vec()).collect(),\n+                self.entries.iter().map(|(name, _)| name.as_bytes().to_vec()).collect(),\n             ))\n         } else {\n             BuilderKind::Bsd(ar::Builder::new(archive_file))\n@@ -193,10 +194,10 @@ impl<'a> ArArchiveBuilder<'a> {\n             let entry = entry.unwrap();\n             let file_name = String::from_utf8(entry.header().identifier().to_vec()).unwrap();\n             if !skip(&file_name) {\n-                self.entries.insert(\n+                self.entries.push((\n                     file_name,\n                     ArchiveEntry::FromArchive { archive_index, entry_index: i },\n-                );\n+                ));\n             }\n             i += 1;\n         }"}]}