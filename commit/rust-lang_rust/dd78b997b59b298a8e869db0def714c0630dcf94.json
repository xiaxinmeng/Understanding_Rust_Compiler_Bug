{"sha": "dd78b997b59b298a8e869db0def714c0630dcf94", "node_id": "C_kwDOAAsO6NoAKGRkNzhiOTk3YjU5YjI5OGE4ZTg2OWRiMGRlZjcxNGMwNjMwZGNmOTQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-15T16:27:55Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-22T12:30:37Z"}, "message": "Reduce rightward drift.", "tree": {"sha": "9217ebe6734cec1d48ec3d55952027e697870dbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9217ebe6734cec1d48ec3d55952027e697870dbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd78b997b59b298a8e869db0def714c0630dcf94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd78b997b59b298a8e869db0def714c0630dcf94", "html_url": "https://github.com/rust-lang/rust/commit/dd78b997b59b298a8e869db0def714c0630dcf94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd78b997b59b298a8e869db0def714c0630dcf94/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd452ae70ecee1d3e07ca9fc10ce8220b2821578", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd452ae70ecee1d3e07ca9fc10ce8220b2821578", "html_url": "https://github.com/rust-lang/rust/commit/dd452ae70ecee1d3e07ca9fc10ce8220b2821578"}], "stats": {"total": 72, "additions": 35, "deletions": 37}, "files": [{"sha": "d0823a8597da9fcf7d762b716173ff82c8b56b2a", "filename": "compiler/rustc_mir_transform/src/dataflow_const_prop.rs", "status": "modified", "additions": 35, "deletions": 37, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/dd78b997b59b298a8e869db0def714c0630dcf94/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd78b997b59b298a8e869db0def714c0630dcf94/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs?ref=dd78b997b59b298a8e869db0def714c0630dcf94", "patch": "@@ -110,48 +110,46 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'_, 'tcx> {\n                 // we must make sure that all `target as Variant#i` are `Top`.\n                 state.flood(target.as_ref(), self.map());\n \n-                if let Some(target_idx) = self.map().find(target.as_ref()) {\n-                    let (variant_target, variant_index) = match **kind {\n-                        AggregateKind::Tuple | AggregateKind::Closure(..) => {\n-                            (Some(target_idx), None)\n-                        }\n-                        AggregateKind::Adt(def_id, variant_index, ..) => {\n-                            match self.tcx.def_kind(def_id) {\n-                                DefKind::Struct => (Some(target_idx), None),\n-                                DefKind::Enum => (\n-                                    self.map.apply(target_idx, TrackElem::Variant(variant_index)),\n-                                    Some(variant_index),\n-                                ),\n-                                _ => (None, None),\n-                            }\n-                        }\n-                        _ => (None, None),\n-                    };\n-                    if let Some(variant_target_idx) = variant_target {\n-                        for (field_index, operand) in operands.iter().enumerate() {\n-                            if let Some(field) = self.map().apply(\n-                                variant_target_idx,\n-                                TrackElem::Field(FieldIdx::from_usize(field_index)),\n-                            ) {\n-                                let result = self.handle_operand(operand, state);\n-                                state.insert_idx(field, result, self.map());\n-                            }\n+                let Some(target_idx) = self.map().find(target.as_ref()) else { return };\n+\n+                let (variant_target, variant_index) = match **kind {\n+                    AggregateKind::Tuple | AggregateKind::Closure(..) => (Some(target_idx), None),\n+                    AggregateKind::Adt(def_id, variant_index, ..) => {\n+                        match self.tcx.def_kind(def_id) {\n+                            DefKind::Struct => (Some(target_idx), None),\n+                            DefKind::Enum => (\n+                                self.map.apply(target_idx, TrackElem::Variant(variant_index)),\n+                                Some(variant_index),\n+                            ),\n+                            _ => return,\n                         }\n                     }\n-                    if let Some(variant_index) = variant_index\n-                        && let Some(discr_idx) = self.map().apply(target_idx, TrackElem::Discriminant)\n-                    {\n-                        // We are assigning the discriminant as part of an aggregate.\n-                        // This discriminant can only alias a variant field's value if the operand\n-                        // had an invalid value for that type.\n-                        // Using invalid values is UB, so we are allowed to perform the assignment\n-                        // without extra flooding.\n-                        let enum_ty = target.ty(self.local_decls, self.tcx).ty;\n-                        if let Some(discr_val) = self.eval_discriminant(enum_ty, variant_index) {\n-                            state.insert_value_idx(discr_idx, FlatSet::Elem(discr_val), &self.map);\n+                    _ => return,\n+                };\n+                if let Some(variant_target_idx) = variant_target {\n+                    for (field_index, operand) in operands.iter().enumerate() {\n+                        if let Some(field) = self.map().apply(\n+                            variant_target_idx,\n+                            TrackElem::Field(FieldIdx::from_usize(field_index)),\n+                        ) {\n+                            let result = self.handle_operand(operand, state);\n+                            state.insert_idx(field, result, self.map());\n                         }\n                     }\n                 }\n+                if let Some(variant_index) = variant_index\n+                    && let Some(discr_idx) = self.map().apply(target_idx, TrackElem::Discriminant)\n+                {\n+                    // We are assigning the discriminant as part of an aggregate.\n+                    // This discriminant can only alias a variant field's value if the operand\n+                    // had an invalid value for that type.\n+                    // Using invalid values is UB, so we are allowed to perform the assignment\n+                    // without extra flooding.\n+                    let enum_ty = target.ty(self.local_decls, self.tcx).ty;\n+                    if let Some(discr_val) = self.eval_discriminant(enum_ty, variant_index) {\n+                        state.insert_value_idx(discr_idx, FlatSet::Elem(discr_val), &self.map);\n+                    }\n+                }\n             }\n             Rvalue::CheckedBinaryOp(op, box (left, right)) => {\n                 // Flood everything now, so we can use `insert_value_idx` directly later."}]}