{"sha": "6e04e678dca99db95c28a3aa7091d4fa800dfb61", "node_id": "C_kwDOAAsO6NoAKDZlMDRlNjc4ZGNhOTlkYjk1YzI4YTNhYTcwOTFkNGZhODAwZGZiNjE", "commit": {"author": {"name": "inquisitivecrystal", "email": "22333129+inquisitivecrystal@users.noreply.github.com", "date": "2023-01-24T10:54:00Z"}, "committer": {"name": "inquisitivecrystal", "email": "22333129+inquisitivecrystal@users.noreply.github.com", "date": "2023-01-24T11:51:01Z"}, "message": "Make sure FFI attrs aren't used on foreign statics\n\nPreviously, we verified that FFI attrs were used on foreign items,\nbut this allowed them on both foreign functions and foreign statics.\nThis change only allows them on foreign functions.", "tree": {"sha": "3da54292aa93f1936807c3e8d8708b2fbcd71080", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3da54292aa93f1936807c3e8d8708b2fbcd71080"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e04e678dca99db95c28a3aa7091d4fa800dfb61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e04e678dca99db95c28a3aa7091d4fa800dfb61", "html_url": "https://github.com/rust-lang/rust/commit/6e04e678dca99db95c28a3aa7091d4fa800dfb61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e04e678dca99db95c28a3aa7091d4fa800dfb61/comments", "author": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05b7cc83707026de18dc49276db04a599781bbc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/05b7cc83707026de18dc49276db04a599781bbc2", "html_url": "https://github.com/rust-lang/rust/commit/05b7cc83707026de18dc49276db04a599781bbc2"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "663dfbb4d13a0a80d66b77aa8dafe1d900eea27a", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6e04e678dca99db95c28a3aa7091d4fa800dfb61/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e04e678dca99db95c28a3aa7091d4fa800dfb61/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=6e04e678dca99db95c28a3aa7091d4fa800dfb61", "patch": "@@ -150,9 +150,9 @@ impl CheckAttrVisitor<'_> {\n                 sym::rustc_has_incoherent_inherent_impls => {\n                     self.check_has_incoherent_inherent_impls(&attr, span, target)\n                 }\n-                sym::ffi_pure => self.check_ffi_pure(hir_id, attr.span, attrs),\n-                sym::ffi_const => self.check_ffi_const(hir_id, attr.span),\n-                sym::ffi_returns_twice => self.check_ffi_returns_twice(hir_id, attr.span),\n+                sym::ffi_pure => self.check_ffi_pure(attr.span, attrs, target),\n+                sym::ffi_const => self.check_ffi_const(attr.span, target),\n+                sym::ffi_returns_twice => self.check_ffi_returns_twice(attr.span, target),\n                 sym::rustc_const_unstable\n                 | sym::rustc_const_stable\n                 | sym::unstable\n@@ -1174,8 +1174,8 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n-    fn check_ffi_pure(&self, hir_id: HirId, attr_span: Span, attrs: &[Attribute]) -> bool {\n-        if !self.tcx.is_foreign_item(self.tcx.hir().local_def_id(hir_id)) {\n+    fn check_ffi_pure(&self, attr_span: Span, attrs: &[Attribute], target: Target) -> bool {\n+        if target != Target::ForeignFn {\n             self.tcx.sess.emit_err(errors::FfiPureInvalidTarget { attr_span });\n             return false;\n         }\n@@ -1188,17 +1188,17 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n-    fn check_ffi_const(&self, hir_id: HirId, attr_span: Span) -> bool {\n-        if self.tcx.is_foreign_item(self.tcx.hir().local_def_id(hir_id)) {\n+    fn check_ffi_const(&self, attr_span: Span, target: Target) -> bool {\n+        if target == Target::ForeignFn {\n             true\n         } else {\n             self.tcx.sess.emit_err(errors::FfiConstInvalidTarget { attr_span });\n             false\n         }\n     }\n \n-    fn check_ffi_returns_twice(&self, hir_id: HirId, attr_span: Span) -> bool {\n-        if self.tcx.is_foreign_item(self.tcx.hir().local_def_id(hir_id)) {\n+    fn check_ffi_returns_twice(&self, attr_span: Span, target: Target) -> bool {\n+        if target == Target::ForeignFn {\n             true\n         } else {\n             self.tcx.sess.emit_err(errors::FfiReturnsTwiceInvalidTarget { attr_span });"}]}