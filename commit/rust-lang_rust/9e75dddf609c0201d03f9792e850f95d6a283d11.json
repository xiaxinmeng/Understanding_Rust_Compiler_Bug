{"sha": "9e75dddf609c0201d03f9792e850f95d6a283d11", "node_id": "C_kwDOAAsO6NoAKDllNzVkZGRmNjA5YzAyMDFkMDNmOTc5MmU4NTBmOTVkNmEyODNkMTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-15T18:39:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-15T18:39:40Z"}, "message": "Auto merge of #106393 - the8472:use-ptr-sub, r=scottmcm\n\nSimplify manual ptr arithmetic in slice::Iter with ptr_sub\n\nThe old code was introduced in #61885, which predates the ptr_sub method and underlying intrinsic. The codegen test still passes.\n\nr? `@scottmcm`", "tree": {"sha": "30f268196652356e492213e82503c7af99414f6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30f268196652356e492213e82503c7af99414f6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e75dddf609c0201d03f9792e850f95d6a283d11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e75dddf609c0201d03f9792e850f95d6a283d11", "html_url": "https://github.com/rust-lang/rust/commit/9e75dddf609c0201d03f9792e850f95d6a283d11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e75dddf609c0201d03f9792e850f95d6a283d11/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae4d89dfb51535c1c43052ef848564bd2323c9ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae4d89dfb51535c1c43052ef848564bd2323c9ca", "html_url": "https://github.com/rust-lang/rust/commit/ae4d89dfb51535c1c43052ef848564bd2323c9ca"}, {"sha": "9db013401879a39df86c33552c8c092cf95ea20c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9db013401879a39df86c33552c8c092cf95ea20c", "html_url": "https://github.com/rust-lang/rust/commit/9db013401879a39df86c33552c8c092cf95ea20c"}], "stats": {"total": 31, "additions": 8, "deletions": 23}, "files": [{"sha": "90ab43d1289f0d22b3b2dcfecc81ccb5e71bdc88", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e75dddf609c0201d03f9792e850f95d6a283d11/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e75dddf609c0201d03f9792e850f95d6a283d11/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=9e75dddf609c0201d03f9792e850f95d6a283d11", "patch": "@@ -6,7 +6,7 @@ mod macros;\n use crate::cmp;\n use crate::cmp::Ordering;\n use crate::fmt;\n-use crate::intrinsics::{assume, exact_div, unchecked_sub};\n+use crate::intrinsics::assume;\n use crate::iter::{FusedIterator, TrustedLen, TrustedRandomAccess, TrustedRandomAccessNoCoerce};\n use crate::marker::{PhantomData, Send, Sized, Sync};\n use crate::mem::{self, SizedTypeProperties};\n@@ -35,12 +35,6 @@ impl<'a, T> IntoIterator for &'a mut [T] {\n     }\n }\n \n-// Macro helper functions\n-#[inline(always)]\n-fn size_from_ptr<T>(_: *const T) -> usize {\n-    mem::size_of::<T>()\n-}\n-\n /// Immutable slice iterator\n ///\n /// This struct is created by the [`iter`] method on [slices]."}, {"sha": "0fd57b197aa97daa8838687de60165d6d3518372", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9e75dddf609c0201d03f9792e850f95d6a283d11/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e75dddf609c0201d03f9792e850f95d6a283d11/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=9e75dddf609c0201d03f9792e850f95d6a283d11", "patch": "@@ -9,30 +9,20 @@ macro_rules! is_empty {\n     };\n }\n \n-// To get rid of some bounds checks (see `position`), we compute the length in a somewhat\n-// unexpected way. (Tested by `codegen/slice-position-bounds-check`.)\n macro_rules! len {\n     ($self: ident) => {{\n         #![allow(unused_unsafe)] // we're sometimes used within an unsafe block\n \n         let start = $self.ptr;\n-        let size = size_from_ptr(start.as_ptr());\n-        if size == 0 {\n-            // This _cannot_ use `unchecked_sub` because we depend on wrapping\n+        if T::IS_ZST {\n+            // This _cannot_ use `ptr_sub` because we depend on wrapping\n             // to represent the length of long ZST slice iterators.\n             $self.end.addr().wrapping_sub(start.as_ptr().addr())\n         } else {\n-            // We know that `start <= end`, so can do better than `offset_from`,\n-            // which needs to deal in signed. By setting appropriate flags here\n-            // we can tell LLVM this, which helps it remove bounds checks.\n-            // SAFETY: By the type invariant, `start <= end`\n-            let diff = unsafe { unchecked_sub($self.end.addr(), start.as_ptr().addr()) };\n-            // By also telling LLVM that the pointers are apart by an exact\n-            // multiple of the type size, it can optimize `len() == 0` down to\n-            // `start == end` instead of `(end - start) < size`.\n-            // SAFETY: By the type invariant, the pointers are aligned so the\n-            //         distance between them must be a multiple of pointee size\n-            unsafe { exact_div(diff, size) }\n+            // To get rid of some bounds checks (see `position`), we use ptr_sub instead of\n+            // offset_from (Tested by `codegen/slice-position-bounds-check`.)\n+            // SAFETY: by the type invariant pointers are aligned and `start <= end`\n+            unsafe { $self.end.sub_ptr(start.as_ptr()) }\n         }\n     }};\n }"}, {"sha": "1daa213fc821392f6ebefe5ce99ca36387af7c17", "filename": "tests/codegen/issue-45964-bounds-check-slice-pos.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e75dddf609c0201d03f9792e850f95d6a283d11/tests%2Fcodegen%2Fissue-45964-bounds-check-slice-pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e75dddf609c0201d03f9792e850f95d6a283d11/tests%2Fcodegen%2Fissue-45964-bounds-check-slice-pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fissue-45964-bounds-check-slice-pos.rs?ref=9e75dddf609c0201d03f9792e850f95d6a283d11", "patch": "@@ -2,6 +2,7 @@\n // prevent optimizing away bounds checks\n \n // compile-flags: -O\n+// ignore-debug: the debug assertions get in the way\n \n #![crate_type=\"rlib\"]\n "}]}