{"sha": "e7d16580f5856ecb0c515c7cdcabd2c10ba91547", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZDE2NTgwZjU4NTZlY2IwYzUxNWM3Y2RjYWJkMmMxMGJhOTE1NDc=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2016-06-26T13:11:48Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2016-07-22T22:18:44Z"}, "message": "Escape fewer Unicode codepoints in `Debug` impl of `str`\n\nUse the same procedure as Python to determine whether a character is\nprintable, described in [PEP 3138]. In particular, this means that the\nfollowing character classes are escaped:\n\n- Cc (Other, Control)\n- Cf (Other, Format)\n- Cs (Other, Surrogate), even though they can't appear in Rust strings\n- Co (Other, Private Use)\n- Cn (Other, Not Assigned)\n- Zl (Separator, Line)\n- Zp (Separator, Paragraph)\n- Zs (Separator, Space), except for the ASCII space `' '` (`0x20`)\n\nThis allows for user-friendly inspection of strings that are not\nEnglish (e.g. compare `\"\\u{e9}\\u{e8}\\u{ea}\"` to `\"\u00e9\u00e8\u00ea\"`).\n\nFixes #34318.\n\n[PEP 3138]: https://www.python.org/dev/peps/pep-3138/", "tree": {"sha": "68359f4a107dc3d3c2fbc21d17e4ad006688f4c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68359f4a107dc3d3c2fbc21d17e4ad006688f4c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7d16580f5856ecb0c515c7cdcabd2c10ba91547", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7d16580f5856ecb0c515c7cdcabd2c10ba91547", "html_url": "https://github.com/rust-lang/rust/commit/e7d16580f5856ecb0c515c7cdcabd2c10ba91547", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7d16580f5856ecb0c515c7cdcabd2c10ba91547/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad264f7f39b6113fb87a489d72d31abbc03ab148", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad264f7f39b6113fb87a489d72d31abbc03ab148", "html_url": "https://github.com/rust-lang/rust/commit/ad264f7f39b6113fb87a489d72d31abbc03ab148"}], "stats": {"total": 881, "additions": 872, "deletions": 9}, "files": [{"sha": "3566d143529be9135a6ce18f80e3b7ba8bb08fe2", "filename": "src/etc/char_private.py", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/e7d16580f5856ecb0c515c7cdcabd2c10ba91547/src%2Fetc%2Fchar_private.py", "raw_url": "https://github.com/rust-lang/rust/raw/e7d16580f5856ecb0c515c7cdcabd2c10ba91547/src%2Fetc%2Fchar_private.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fchar_private.py?ref=e7d16580f5856ecb0c515c7cdcabd2c10ba91547", "patch": "@@ -0,0 +1,154 @@\n+#!/usr/bin/env python\n+#\n+# Copyright 2011-2016 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+# This script uses the following Unicode tables:\n+# - Categories.txt\n+\n+import os\n+import subprocess\n+\n+def to_ranges(iter):\n+    current = None\n+    for i in iter:\n+        if current is None or i != current[1] or i in (0x10000, 0x20000):\n+            if current is not None:\n+                yield tuple(current)\n+            current = [i, i + 1]\n+        else:\n+            current[1] += 1\n+    if current is not None:\n+        yield tuple(current)\n+\n+def get_escaped(dictionary):\n+    for i in range(0x110000):\n+        if dictionary.get(i, \"Cn\") in \"Cc Cf Cs Co Cn Zl Zp Zs\".split() and i != ord(' '):\n+            yield i\n+\n+def get_file(f):\n+    try:\n+        return open(os.path.basename(f))\n+    except FileNotFoundError:\n+        subprocess.run([\"curl\", \"-O\", f], check=True)\n+        return open(os.path.basename(f))\n+\n+def main():\n+    file = get_file(\"http://www.unicode.org/notes/tn36/Categories.txt\")\n+\n+    dictionary = {int(line.split()[0], 16): line.split()[1] for line in file}\n+\n+    CUTOFF=0x10000\n+    singletons0 = []\n+    singletons1 = []\n+    normal0 = []\n+    normal1 = []\n+    extra = []\n+\n+    for a, b in to_ranges(get_escaped(dictionary)):\n+        if a > 2 * CUTOFF:\n+            extra.append((a, b - a))\n+        elif a == b - 1:\n+            if a & CUTOFF:\n+                singletons1.append(a & ~CUTOFF)\n+            else:\n+                singletons0.append(a)\n+        elif a == b - 2:\n+            if a & CUTOFF:\n+                singletons1.append(a & ~CUTOFF)\n+                singletons1.append((a + 1) & ~CUTOFF)\n+            else:\n+                singletons0.append(a)\n+                singletons0.append(a + 1)\n+        else:\n+            if a >= 2 * CUTOFF:\n+                extra.append((a, b - a))\n+            elif a & CUTOFF:\n+                normal1.append((a & ~CUTOFF, b - a))\n+            else:\n+                normal0.append((a, b - a))\n+\n+    print(\"\"\"\\\n+// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// NOTE: The following code was generated by \"src/etc/char_private.py\",\n+//       do not edit directly!\n+\n+use slice::SliceExt;\n+\n+fn check(x: u16, singletons: &[u16], normal: &[u16]) -> bool {\n+    for &s in singletons {\n+        if x == s {\n+            return false;\n+        } else if x < s {\n+            break;\n+        }\n+    }\n+    for w in normal.chunks(2) {\n+        let start = w[0];\n+        let len = w[1];\n+        let difference = (x as i32) - (start as i32);\n+        if 0 <= difference {\n+            if difference < len as i32 {\n+                return false;\n+            }\n+        } else {\n+            break;\n+        }\n+    }\n+    true\n+}\n+\n+pub fn is_printable(x: char) -> bool {\n+    let x = x as u32;\n+    let lower = x as u16;\n+    if x < 0x10000 {\n+        check(lower, SINGLETONS0, NORMAL0)\n+    } else if x < 0x20000 {\n+        check(lower, SINGLETONS1, NORMAL1)\n+    } else {\\\n+\"\"\")\n+    for a, b in extra:\n+        print(\"        if 0x{:x} <= x && x < 0x{:x} {{\".format(a, a + b))\n+        print(\"            return false;\")\n+        print(\"        }\")\n+    print(\"\"\"\\\n+        true\n+    }\n+}\\\n+\"\"\")\n+    print()\n+    print(\"const SINGLETONS0: &'static [u16] = &[\")\n+    for s in singletons0:\n+        print(\"    0x{:x},\".format(s))\n+    print(\"];\")\n+    print(\"const SINGLETONS1: &'static [u16] = &[\")\n+    for s in singletons1:\n+        print(\"    0x{:x},\".format(s))\n+    print(\"];\")\n+    print(\"const NORMAL0: &'static [u16] = &[\")\n+    for a, b in normal0:\n+        print(\"    0x{:x}, 0x{:x},\".format(a, b))\n+    print(\"];\")\n+    print(\"const NORMAL1: &'static [u16] = &[\")\n+    for a, b in normal1:\n+        print(\"    0x{:x}, 0x{:x},\".format(a, b))\n+    print(\"];\")\n+\n+if __name__ == '__main__':\n+    main()"}, {"sha": "4d85c9d545e5a6e5792b1108f51cdd898fd0ca7e", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e7d16580f5856ecb0c515c7cdcabd2c10ba91547/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d16580f5856ecb0c515c7cdcabd2c10ba91547/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=e7d16580f5856ecb0c515c7cdcabd2c10ba91547", "patch": "@@ -707,12 +707,14 @@ fn test_escape_unicode() {\n fn test_escape_default() {\n     assert_eq!(\"abc\".escape_default(), \"abc\");\n     assert_eq!(\"a c\".escape_default(), \"a c\");\n+    assert_eq!(\"\u00e9\u00e8\u00ea\".escape_default(), \"\u00e9\u00e8\u00ea\");\n     assert_eq!(\"\\r\\n\\t\".escape_default(), \"\\\\r\\\\n\\\\t\");\n     assert_eq!(\"'\\\"\\\\\".escape_default(), \"\\\\'\\\\\\\"\\\\\\\\\");\n-    assert_eq!(\"\\u{100}\\u{ffff}\".escape_default(), \"\\\\u{100}\\\\u{ffff}\");\n-    assert_eq!(\"\\u{10000}\\u{10ffff}\".escape_default(), \"\\\\u{10000}\\\\u{10ffff}\");\n-    assert_eq!(\"ab\\u{fb00}\".escape_default(), \"ab\\\\u{fb00}\");\n-    assert_eq!(\"\\u{1d4ea}\\r\".escape_default(), \"\\\\u{1d4ea}\\\\r\");\n+    assert_eq!(\"\\u{7f}\\u{ff}\".escape_default(), \"\\\\u{7f}\\u{ff}\");\n+    assert_eq!(\"\\u{100}\\u{ffff}\".escape_default(), \"\\u{100}\\\\u{ffff}\");\n+    assert_eq!(\"\\u{10000}\\u{10ffff}\".escape_default(), \"\\u{10000}\\\\u{10ffff}\");\n+    assert_eq!(\"ab\\u{200b}\".escape_default(), \"ab\\\\u{200b}\");\n+    assert_eq!(\"\\u{10d4ea}\\r\".escape_default(), \"\\\\u{10d4ea}\\\\r\");\n }\n \n #[test]"}, {"sha": "0d39217bd726c473f57d58e6a193d8406531b7d6", "filename": "src/libcore/char.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7d16580f5856ecb0c515c7cdcabd2c10ba91547/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d16580f5856ecb0c515c7cdcabd2c10ba91547/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=e7d16580f5856ecb0c515c7cdcabd2c10ba91547", "patch": "@@ -17,6 +17,7 @@\n \n use prelude::v1::*;\n \n+use char_private::is_printable;\n use mem::transmute;\n \n // UTF-8 ranges and tags for encoding characters\n@@ -320,8 +321,8 @@ impl CharExt for char {\n             '\\r' => EscapeDefaultState::Backslash('r'),\n             '\\n' => EscapeDefaultState::Backslash('n'),\n             '\\\\' | '\\'' | '\"' => EscapeDefaultState::Backslash(self),\n-            '\\x20' ... '\\x7e' => EscapeDefaultState::Char(self),\n-            _ => EscapeDefaultState::Unicode(self.escape_unicode())\n+            c if is_printable(c) => EscapeDefaultState::Char(c),\n+            c => EscapeDefaultState::Unicode(c.escape_unicode()),\n         };\n         EscapeDefault { state: init_state }\n     }"}, {"sha": "1d8f95cd4b81cd800aa3320a4510193496caf3f1", "filename": "src/libcore/char_private.rs", "status": "added", "additions": 695, "deletions": 0, "changes": 695, "blob_url": "https://github.com/rust-lang/rust/blob/e7d16580f5856ecb0c515c7cdcabd2c10ba91547/src%2Flibcore%2Fchar_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d16580f5856ecb0c515c7cdcabd2c10ba91547/src%2Flibcore%2Fchar_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar_private.rs?ref=e7d16580f5856ecb0c515c7cdcabd2c10ba91547", "patch": "@@ -0,0 +1,695 @@\n+// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// NOTE: The following code was generated by \"src/etc/char_private.py\",\n+//       do not edit directly!\n+\n+use slice::SliceExt;\n+\n+fn check(x: u16, singletons: &[u16], normal: &[u16]) -> bool {\n+    for &s in singletons {\n+        if x == s {\n+            return false;\n+        } else if x < s {\n+            break;\n+        }\n+    }\n+    for w in normal.chunks(2) {\n+        let start = w[0];\n+        let len = w[1];\n+        let difference = (x as i32) - (start as i32);\n+        if 0 <= difference {\n+            if difference < len as i32 {\n+                return false;\n+            }\n+        } else {\n+            break;\n+        }\n+    }\n+    true\n+}\n+\n+pub fn is_printable(x: char) -> bool {\n+    let x = x as u32;\n+    let lower = x as u16;\n+    if x < 0x10000 {\n+        check(lower, SINGLETONS0, NORMAL0)\n+    } else if x < 0x20000 {\n+        check(lower, SINGLETONS1, NORMAL1)\n+    } else {\n+        if 0x20000 <= x && x < 0x2f800 {\n+            return false;\n+        }\n+        if 0x2fa1e <= x && x < 0xe0100 {\n+            return false;\n+        }\n+        if 0xe01f0 <= x && x < 0x110000 {\n+            return false;\n+        }\n+        true\n+    }\n+}\n+\n+const SINGLETONS0: &'static [u16] = &[\n+    0xad,\n+    0x378,\n+    0x379,\n+    0x38b,\n+    0x38d,\n+    0x3a2,\n+    0x557,\n+    0x558,\n+    0x560,\n+    0x588,\n+    0x590,\n+    0x61c,\n+    0x61d,\n+    0x6dd,\n+    0x70e,\n+    0x70f,\n+    0x74b,\n+    0x74c,\n+    0x82e,\n+    0x82f,\n+    0x83f,\n+    0x85c,\n+    0x85d,\n+    0x8a1,\n+    0x8ff,\n+    0x978,\n+    0x980,\n+    0x984,\n+    0x98d,\n+    0x98e,\n+    0x991,\n+    0x992,\n+    0x9a9,\n+    0x9b1,\n+    0x9ba,\n+    0x9bb,\n+    0x9c5,\n+    0x9c6,\n+    0x9c9,\n+    0x9ca,\n+    0x9de,\n+    0x9e4,\n+    0x9e5,\n+    0xa04,\n+    0xa11,\n+    0xa12,\n+    0xa29,\n+    0xa31,\n+    0xa34,\n+    0xa37,\n+    0xa3a,\n+    0xa3b,\n+    0xa3d,\n+    0xa49,\n+    0xa4a,\n+    0xa5d,\n+    0xa84,\n+    0xa8e,\n+    0xa92,\n+    0xaa9,\n+    0xab1,\n+    0xab4,\n+    0xaba,\n+    0xabb,\n+    0xac6,\n+    0xaca,\n+    0xace,\n+    0xacf,\n+    0xae4,\n+    0xae5,\n+    0xb04,\n+    0xb0d,\n+    0xb0e,\n+    0xb11,\n+    0xb12,\n+    0xb29,\n+    0xb31,\n+    0xb34,\n+    0xb3a,\n+    0xb3b,\n+    0xb45,\n+    0xb46,\n+    0xb49,\n+    0xb4a,\n+    0xb5e,\n+    0xb64,\n+    0xb65,\n+    0xb84,\n+    0xb91,\n+    0xb9b,\n+    0xb9d,\n+    0xbc9,\n+    0xbce,\n+    0xbcf,\n+    0xc04,\n+    0xc0d,\n+    0xc11,\n+    0xc29,\n+    0xc34,\n+    0xc45,\n+    0xc49,\n+    0xc57,\n+    0xc64,\n+    0xc65,\n+    0xc80,\n+    0xc81,\n+    0xc84,\n+    0xc8d,\n+    0xc91,\n+    0xca9,\n+    0xcb4,\n+    0xcba,\n+    0xcbb,\n+    0xcc5,\n+    0xcc9,\n+    0xcdf,\n+    0xce4,\n+    0xce5,\n+    0xcf0,\n+    0xd04,\n+    0xd0d,\n+    0xd11,\n+    0xd3b,\n+    0xd3c,\n+    0xd45,\n+    0xd49,\n+    0xd64,\n+    0xd65,\n+    0xd80,\n+    0xd81,\n+    0xd84,\n+    0xdb2,\n+    0xdbc,\n+    0xdbe,\n+    0xdbf,\n+    0xdd5,\n+    0xdd7,\n+    0xe83,\n+    0xe85,\n+    0xe86,\n+    0xe89,\n+    0xe8b,\n+    0xe8c,\n+    0xe98,\n+    0xea0,\n+    0xea4,\n+    0xea6,\n+    0xea8,\n+    0xea9,\n+    0xeac,\n+    0xeba,\n+    0xebe,\n+    0xebf,\n+    0xec5,\n+    0xec7,\n+    0xece,\n+    0xecf,\n+    0xeda,\n+    0xedb,\n+    0xf48,\n+    0xf98,\n+    0xfbd,\n+    0xfcd,\n+    0x10c6,\n+    0x10ce,\n+    0x10cf,\n+    0x1249,\n+    0x124e,\n+    0x124f,\n+    0x1257,\n+    0x1259,\n+    0x125e,\n+    0x125f,\n+    0x1289,\n+    0x128e,\n+    0x128f,\n+    0x12b1,\n+    0x12b6,\n+    0x12b7,\n+    0x12bf,\n+    0x12c1,\n+    0x12c6,\n+    0x12c7,\n+    0x12d7,\n+    0x1311,\n+    0x1316,\n+    0x1317,\n+    0x135b,\n+    0x135c,\n+    0x1680,\n+    0x170d,\n+    0x176d,\n+    0x1771,\n+    0x17de,\n+    0x17df,\n+    0x180e,\n+    0x180f,\n+    0x196e,\n+    0x196f,\n+    0x1a1c,\n+    0x1a1d,\n+    0x1a5f,\n+    0x1a7d,\n+    0x1a7e,\n+    0x1f16,\n+    0x1f17,\n+    0x1f1e,\n+    0x1f1f,\n+    0x1f46,\n+    0x1f47,\n+    0x1f4e,\n+    0x1f4f,\n+    0x1f58,\n+    0x1f5a,\n+    0x1f5c,\n+    0x1f5e,\n+    0x1f7e,\n+    0x1f7f,\n+    0x1fb5,\n+    0x1fc5,\n+    0x1fd4,\n+    0x1fd5,\n+    0x1fdc,\n+    0x1ff0,\n+    0x1ff1,\n+    0x1ff5,\n+    0x2072,\n+    0x2073,\n+    0x208f,\n+    0x2700,\n+    0x2c2f,\n+    0x2c5f,\n+    0x2d26,\n+    0x2d2e,\n+    0x2d2f,\n+    0x2da7,\n+    0x2daf,\n+    0x2db7,\n+    0x2dbf,\n+    0x2dc7,\n+    0x2dcf,\n+    0x2dd7,\n+    0x2ddf,\n+    0x2e9a,\n+    0x3040,\n+    0x3097,\n+    0x3098,\n+    0x318f,\n+    0x321f,\n+    0x32ff,\n+    0xa78f,\n+    0xa9ce,\n+    0xaa4e,\n+    0xaa4f,\n+    0xaa5a,\n+    0xaa5b,\n+    0xab07,\n+    0xab08,\n+    0xab0f,\n+    0xab10,\n+    0xab27,\n+    0xabee,\n+    0xabef,\n+    0xfa6e,\n+    0xfa6f,\n+    0xfb37,\n+    0xfb3d,\n+    0xfb3f,\n+    0xfb42,\n+    0xfb45,\n+    0xfd90,\n+    0xfd91,\n+    0xfdfe,\n+    0xfdff,\n+    0xfe53,\n+    0xfe67,\n+    0xfe75,\n+    0xffc8,\n+    0xffc9,\n+    0xffd0,\n+    0xffd1,\n+    0xffd8,\n+    0xffd9,\n+    0xffe7,\n+    0xfffe,\n+    0xffff,\n+];\n+const SINGLETONS1: &'static [u16] = &[\n+    0xc,\n+    0x27,\n+    0x3b,\n+    0x3e,\n+    0x4e,\n+    0x4f,\n+    0x31f,\n+    0x39e,\n+    0x49e,\n+    0x49f,\n+    0x806,\n+    0x807,\n+    0x809,\n+    0x836,\n+    0x83d,\n+    0x83e,\n+    0x856,\n+    0xa04,\n+    0xa14,\n+    0xa18,\n+    0xb56,\n+    0xb57,\n+    0x10bd,\n+    0x1135,\n+    0xd127,\n+    0xd128,\n+    0xd455,\n+    0xd49d,\n+    0xd4a0,\n+    0xd4a1,\n+    0xd4a3,\n+    0xd4a4,\n+    0xd4a7,\n+    0xd4a8,\n+    0xd4ad,\n+    0xd4ba,\n+    0xd4bc,\n+    0xd4c4,\n+    0xd506,\n+    0xd50b,\n+    0xd50c,\n+    0xd515,\n+    0xd51d,\n+    0xd53a,\n+    0xd53f,\n+    0xd545,\n+    0xd551,\n+    0xd6a6,\n+    0xd6a7,\n+    0xd7cc,\n+    0xd7cd,\n+    0xee04,\n+    0xee20,\n+    0xee23,\n+    0xee25,\n+    0xee26,\n+    0xee28,\n+    0xee33,\n+    0xee38,\n+    0xee3a,\n+    0xee48,\n+    0xee4a,\n+    0xee4c,\n+    0xee50,\n+    0xee53,\n+    0xee55,\n+    0xee56,\n+    0xee58,\n+    0xee5a,\n+    0xee5c,\n+    0xee5e,\n+    0xee60,\n+    0xee63,\n+    0xee65,\n+    0xee66,\n+    0xee6b,\n+    0xee73,\n+    0xee78,\n+    0xee7d,\n+    0xee7f,\n+    0xee8a,\n+    0xeea4,\n+    0xeeaa,\n+    0xf0af,\n+    0xf0b0,\n+    0xf0bf,\n+    0xf0c0,\n+    0xf0d0,\n+    0xf12f,\n+    0xf336,\n+    0xf3c5,\n+    0xf43f,\n+    0xf441,\n+    0xf4f8,\n+    0xf53e,\n+    0xf53f,\n+];\n+const NORMAL0: &'static [u16] = &[\n+    0x0, 0x20,\n+    0x7f, 0x22,\n+    0x37f, 0x5,\n+    0x528, 0x9,\n+    0x58b, 0x4,\n+    0x5c8, 0x8,\n+    0x5eb, 0x5,\n+    0x5f5, 0x11,\n+    0x7b2, 0xe,\n+    0x7fb, 0x5,\n+    0x85f, 0x41,\n+    0x8ad, 0x37,\n+    0x9b3, 0x3,\n+    0x9cf, 0x8,\n+    0x9d8, 0x4,\n+    0x9fc, 0x5,\n+    0xa0b, 0x4,\n+    0xa43, 0x4,\n+    0xa4e, 0x3,\n+    0xa52, 0x7,\n+    0xa5f, 0x7,\n+    0xa76, 0xb,\n+    0xad1, 0xf,\n+    0xaf2, 0xf,\n+    0xb4e, 0x8,\n+    0xb58, 0x4,\n+    0xb78, 0xa,\n+    0xb8b, 0x3,\n+    0xb96, 0x3,\n+    0xba0, 0x3,\n+    0xba5, 0x3,\n+    0xbab, 0x3,\n+    0xbba, 0x4,\n+    0xbc3, 0x3,\n+    0xbd1, 0x6,\n+    0xbd8, 0xe,\n+    0xbfb, 0x6,\n+    0xc3a, 0x3,\n+    0xc4e, 0x7,\n+    0xc5a, 0x6,\n+    0xc70, 0x8,\n+    0xcce, 0x7,\n+    0xcd7, 0x7,\n+    0xcf3, 0xf,\n+    0xd4f, 0x8,\n+    0xd58, 0x8,\n+    0xd76, 0x3,\n+    0xd97, 0x3,\n+    0xdc7, 0x3,\n+    0xdcb, 0x4,\n+    0xde0, 0x12,\n+    0xdf5, 0xc,\n+    0xe3b, 0x4,\n+    0xe5c, 0x25,\n+    0xe8e, 0x6,\n+    0xee0, 0x20,\n+    0xf6d, 0x4,\n+    0xfdb, 0x25,\n+    0x10c8, 0x5,\n+    0x137d, 0x3,\n+    0x139a, 0x6,\n+    0x13f5, 0xb,\n+    0x169d, 0x3,\n+    0x16f1, 0xf,\n+    0x1715, 0xb,\n+    0x1737, 0x9,\n+    0x1754, 0xc,\n+    0x1774, 0xc,\n+    0x17ea, 0x6,\n+    0x17fa, 0x6,\n+    0x181a, 0x6,\n+    0x1878, 0x8,\n+    0x18ab, 0x5,\n+    0x18f6, 0xa,\n+    0x191d, 0x3,\n+    0x192c, 0x4,\n+    0x193c, 0x4,\n+    0x1941, 0x3,\n+    0x1975, 0xb,\n+    0x19ac, 0x4,\n+    0x19ca, 0x6,\n+    0x19db, 0x3,\n+    0x1a8a, 0x6,\n+    0x1a9a, 0x6,\n+    0x1aae, 0x52,\n+    0x1b4c, 0x4,\n+    0x1b7d, 0x3,\n+    0x1bf4, 0x8,\n+    0x1c38, 0x3,\n+    0x1c4a, 0x3,\n+    0x1c80, 0x40,\n+    0x1cc8, 0x8,\n+    0x1cf7, 0x9,\n+    0x1de7, 0x15,\n+    0x1fff, 0x11,\n+    0x2028, 0x8,\n+    0x205f, 0x11,\n+    0x209d, 0x3,\n+    0x20ba, 0x16,\n+    0x20f1, 0xf,\n+    0x218a, 0x6,\n+    0x23f4, 0xc,\n+    0x2427, 0x19,\n+    0x244b, 0x15,\n+    0x2b4d, 0x3,\n+    0x2b5a, 0xa6,\n+    0x2cf4, 0x5,\n+    0x2d28, 0x5,\n+    0x2d68, 0x7,\n+    0x2d71, 0xe,\n+    0x2d97, 0x9,\n+    0x2e3c, 0x44,\n+    0x2ef4, 0xc,\n+    0x2fd6, 0x1a,\n+    0x2ffc, 0x5,\n+    0x3100, 0x5,\n+    0x312e, 0x3,\n+    0x31bb, 0x5,\n+    0x31e4, 0xc,\n+    0x3400, 0x19c0,\n+    0x4e00, 0x5200,\n+    0xa48d, 0x3,\n+    0xa4c7, 0x9,\n+    0xa62c, 0x14,\n+    0xa698, 0x7,\n+    0xa6f8, 0x8,\n+    0xa794, 0xc,\n+    0xa7ab, 0x4d,\n+    0xa82c, 0x4,\n+    0xa83a, 0x6,\n+    0xa878, 0x8,\n+    0xa8c5, 0x9,\n+    0xa8da, 0x6,\n+    0xa8fc, 0x4,\n+    0xa954, 0xb,\n+    0xa97d, 0x3,\n+    0xa9da, 0x4,\n+    0xa9e0, 0x20,\n+    0xaa37, 0x9,\n+    0xaa7c, 0x4,\n+    0xaac3, 0x18,\n+    0xaaf7, 0xa,\n+    0xab17, 0x9,\n+    0xab2f, 0x91,\n+    0xabfa, 0x2bb6,\n+    0xd7c7, 0x4,\n+    0xd7fc, 0x2104,\n+    0xfada, 0x26,\n+    0xfb07, 0xc,\n+    0xfb18, 0x5,\n+    0xfbc2, 0x11,\n+    0xfd40, 0x10,\n+    0xfdc8, 0x28,\n+    0xfe1a, 0x6,\n+    0xfe27, 0x9,\n+    0xfe6c, 0x4,\n+    0xfefd, 0x4,\n+    0xffbf, 0x3,\n+    0xffdd, 0x3,\n+    0xffef, 0xd,\n+];\n+const NORMAL1: &'static [u16] = &[\n+    0x5e, 0x22,\n+    0xfb, 0x5,\n+    0x103, 0x4,\n+    0x134, 0x3,\n+    0x18b, 0x5,\n+    0x19c, 0x34,\n+    0x1fe, 0x82,\n+    0x29d, 0x3,\n+    0x2d1, 0x2f,\n+    0x324, 0xc,\n+    0x34b, 0x35,\n+    0x3c4, 0x4,\n+    0x3d6, 0x2a,\n+    0x4aa, 0x356,\n+    0x839, 0x3,\n+    0x860, 0xa0,\n+    0x91c, 0x3,\n+    0x93a, 0x5,\n+    0x940, 0x40,\n+    0x9b8, 0x6,\n+    0x9c0, 0x40,\n+    0xa07, 0x5,\n+    0xa34, 0x4,\n+    0xa3b, 0x4,\n+    0xa48, 0x8,\n+    0xa59, 0x7,\n+    0xa80, 0x80,\n+    0xb36, 0x3,\n+    0xb73, 0x5,\n+    0xb80, 0x80,\n+    0xc49, 0x217,\n+    0xe7f, 0x181,\n+    0x104e, 0x4,\n+    0x1070, 0x10,\n+    0x10c2, 0xe,\n+    0x10e9, 0x7,\n+    0x10fa, 0x6,\n+    0x1144, 0x3c,\n+    0x11c9, 0x7,\n+    0x11da, 0x4a6,\n+    0x16b8, 0x8,\n+    0x16ca, 0x936,\n+    0x236f, 0x91,\n+    0x2463, 0xd,\n+    0x2474, 0xb8c,\n+    0x342f, 0x33d1,\n+    0x6a39, 0x4c7,\n+    0x6f45, 0xb,\n+    0x6f7f, 0x10,\n+    0x6fa0, 0x4060,\n+    0xb002, 0x1ffe,\n+    0xd0f6, 0xa,\n+    0xd173, 0x8,\n+    0xd1de, 0x22,\n+    0xd246, 0xba,\n+    0xd357, 0x9,\n+    0xd372, 0x8e,\n+    0xd547, 0x3,\n+    0xd800, 0x1600,\n+    0xee3c, 0x6,\n+    0xee43, 0x4,\n+    0xee9c, 0x5,\n+    0xeebc, 0x34,\n+    0xeef2, 0x10e,\n+    0xf02c, 0x4,\n+    0xf094, 0xc,\n+    0xf0e0, 0x20,\n+    0xf10b, 0x5,\n+    0xf16c, 0x4,\n+    0xf19b, 0x4b,\n+    0xf203, 0xd,\n+    0xf23b, 0x5,\n+    0xf249, 0x7,\n+    0xf252, 0xae,\n+    0xf321, 0xf,\n+    0xf37d, 0x3,\n+    0xf394, 0xc,\n+    0xf3cb, 0x15,\n+    0xf3f1, 0xf,\n+    0xf4fd, 0x3,\n+    0xf544, 0xc,\n+    0xf568, 0x93,\n+    0xf641, 0x4,\n+    0xf650, 0x30,\n+    0xf6c6, 0x3a,\n+    0xf774, 0x88c,\n+];"}, {"sha": "bf0c3ae987a2d07f814c7ba65e853f665eeb3543", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7d16580f5856ecb0c515c7cdcabd2c10ba91547/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d16580f5856ecb0c515c7cdcabd2c10ba91547/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=e7d16580f5856ecb0c515c7cdcabd2c10ba91547", "patch": "@@ -161,5 +161,6 @@ pub mod hash;\n pub mod fmt;\n \n // note: does not need to be public\n+mod char_private;\n mod iter_private;\n mod tuple;"}, {"sha": "e01f83ed70ab0e9ba5d24b6dc840754665fbe8e1", "filename": "src/libcoretest/char.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e7d16580f5856ecb0c515c7cdcabd2c10ba91547/src%2Flibcoretest%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d16580f5856ecb0c515c7cdcabd2c10ba91547/src%2Flibcoretest%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fchar.rs?ref=e7d16580f5856ecb0c515c7cdcabd2c10ba91547", "patch": "@@ -142,18 +142,28 @@ fn test_escape_default() {\n     assert_eq!(s, \"a\");\n     let s = string('~');\n     assert_eq!(s, \"~\");\n+    let s = string('\u00e9');\n+    assert_eq!(s, \"\u00e9\");\n     let s = string('\\x00');\n     assert_eq!(s, \"\\\\u{0}\");\n     let s = string('\\x1f');\n     assert_eq!(s, \"\\\\u{1f}\");\n     let s = string('\\x7f');\n     assert_eq!(s, \"\\\\u{7f}\");\n+    let s = string('\\u{80}');\n+    assert_eq!(s, \"\\\\u{80}\");\n     let s = string('\\u{ff}');\n-    assert_eq!(s, \"\\\\u{ff}\");\n+    assert_eq!(s, \"\\u{ff}\");\n     let s = string('\\u{11b}');\n-    assert_eq!(s, \"\\\\u{11b}\");\n+    assert_eq!(s, \"\\u{11b}\");\n     let s = string('\\u{1d4b6}');\n-    assert_eq!(s, \"\\\\u{1d4b6}\");\n+    assert_eq!(s, \"\\u{1d4b6}\");\n+    let s = string('\\u{200b}'); // zero width space\n+    assert_eq!(s, \"\\\\u{200b}\");\n+    let s = string('\\u{e000}'); // private use 1\n+    assert_eq!(s, \"\\\\u{e000}\");\n+    let s = string('\\u{100000}'); // private use 2\n+    assert_eq!(s, \"\\\\u{100000}\");\n }\n \n #[test]"}]}