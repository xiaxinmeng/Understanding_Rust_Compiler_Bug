{"sha": "65c55bf931a55e6b1e5ed14ad8623814a7386424", "node_id": "C_kwDOAAsO6NoAKDY1YzU1YmY5MzFhNTVlNmIxZTVlZDE0YWQ4NjIzODE0YTczODY0MjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-23T20:44:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-23T20:44:33Z"}, "message": "Auto merge of #91159 - matthiaskrgr:rollup-91mgg5v, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #90856 (Suggestion to wrap inner types using 'allocator_api' in tuple)\n - #91103 (Inhibit clicks on summary's children)\n - #91137 (Give people a single link they can click in the contributing guide)\n - #91140 (Split inline const to two feature gates and mark expression position inline const complete)\n - #91148 (Use `derive_default_enum` in the compiler)\n - #91153 (kernel_copy: avoid panic on unexpected OS error)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "7ec30849821eb112fd0d8544c49c1c22c0a559e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ec30849821eb112fd0d8544c49c1c22c0a559e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65c55bf931a55e6b1e5ed14ad8623814a7386424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65c55bf931a55e6b1e5ed14ad8623814a7386424", "html_url": "https://github.com/rust-lang/rust/commit/65c55bf931a55e6b1e5ed14ad8623814a7386424", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65c55bf931a55e6b1e5ed14ad8623814a7386424/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b3cd075bbe309031b418650a9c32baf0b4a3276", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3cd075bbe309031b418650a9c32baf0b4a3276", "html_url": "https://github.com/rust-lang/rust/commit/7b3cd075bbe309031b418650a9c32baf0b4a3276"}, {"sha": "3dc00111f2e24e5afef0234360e26acb58bb6e4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dc00111f2e24e5afef0234360e26acb58bb6e4f", "html_url": "https://github.com/rust-lang/rust/commit/3dc00111f2e24e5afef0234360e26acb58bb6e4f"}], "stats": {"total": 324, "additions": 234, "deletions": 90}, "files": [{"sha": "223fd0065bf4a0cd78ba6847a3ec694f3e0da5eb", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -3,13 +3,14 @@\n Thank you for your interest in contributing to Rust! There are many ways to contribute\n and we appreciate all of them.\n \n+The best way to get started is by asking for help in the [#new\n+members](https://rust-lang.zulipchat.com/#narrow/stream/122652-new-members)\n+Zulip stream. We have lots of docs below of how to get started on your own, but\n+the Zulip stream is the best place to *ask* for help.\n+\n Documentation for contributing to Rust is located in the [Guide to Rustc Development](https://rustc-dev-guide.rust-lang.org/),\n commonly known as the [rustc-dev-guide]. Despite the name, this guide documents\n-not just how to develop rustc (the Rust compiler), but also how to contribute to any part\n-of the Rust project.\n-\n-To get started with contributing, please read the [Contributing to Rust] chapter of the guide.\n-That chapter explains how to get your development environment set up and how to get help.\n+not just how to develop rustc (the Rust compiler), but also how to contribute to the standard library and rustdoc.\n \n ## About the [rustc-dev-guide]\n "}, {"sha": "78edac9d12c13258b1d8b94ea9dd0d62244c577f", "filename": "README.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -7,7 +7,10 @@ standard library, and documentation.\n \n **Note: this README is for _users_ rather than _contributors_.\n If you wish to _contribute_ to the compiler, you should read the\n-[Getting Started][gettingstarted] section of the rustc-dev-guide instead.**\n+[Getting Started][gettingstarted] section of the rustc-dev-guide instead.\n+You can ask for help in the [#new members Zulip stream][new-members].**\n+\n+[new-members]: https://rust-lang.zulipchat.com/#narrow/stream/122652-new-members\n \n ## Quick Start\n "}, {"sha": "6a19984f8ea4612e82289b7c95d09839ca65a4e4", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -719,6 +719,7 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(const_trait_impl, \"const trait impls are experimental\");\n     gate_all!(half_open_range_patterns, \"half-open range patterns are unstable\");\n     gate_all!(inline_const, \"inline-const is experimental\");\n+    gate_all!(inline_const_pat, \"inline-const in pattern position is experimental\");\n     gate_all!(\n         const_generics_defaults,\n         \"default values for const generic parameters are experimental\""}, {"sha": "c34ecc966d0ae21989ab921b6502f9bb3615ecc2", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -409,7 +409,9 @@ declare_features! (\n     /// Allows associated types in inherent impls.\n     (incomplete, inherent_associated_types, \"1.52.0\", Some(8995), None),\n     /// Allow anonymous constants from an inline `const` block\n-    (incomplete, inline_const, \"1.49.0\", Some(76001), None),\n+    (active, inline_const, \"1.49.0\", Some(76001), None),\n+    /// Allow anonymous constants from an inline `const` block in pattern position\n+    (incomplete, inline_const_pat, \"1.58.0\", Some(76001), None),\n     /// Allows using `pointer` and `reference` in intra-doc links\n     (active, intra_doc_pointers, \"1.51.0\", Some(80896), None),\n     /// Allows `#[instruction_set(_)]` attribute"}, {"sha": "2fd01c2d595fabe187d8019f1ad04f757b093976", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -95,9 +95,10 @@ pub(crate) type UnificationTable<'a, 'tcx, T> = ut::UnificationTable<\n /// This is used so that the region values inferred by HIR region solving are\n /// not exposed, and so that we can avoid doing work in HIR typeck that MIR\n /// typeck will also do.\n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, Default)]\n pub enum RegionckMode {\n     /// The default mode: report region errors, don't erase regions.\n+    #[default]\n     Solve,\n     /// Erase the results of region after solving.\n     Erase {\n@@ -108,12 +109,6 @@ pub enum RegionckMode {\n     },\n }\n \n-impl Default for RegionckMode {\n-    fn default() -> Self {\n-        RegionckMode::Solve\n-    }\n-}\n-\n impl RegionckMode {\n     /// Indicates that the MIR borrowck will repeat these region\n     /// checks, so we should ignore errors if NLL is (unconditionally)"}, {"sha": "e4b407e7c112d838057df364b0d4de3c1f13e5d3", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -15,6 +15,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n+#![feature(derive_default_enum)]\n #![feature(extend_one)]\n #![feature(iter_zip)]\n #![feature(let_else)]"}, {"sha": "9ce9f65a49066bb88064a3e6786a551a8a52de8a", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -30,6 +30,7 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(core_intrinsics)]\n+#![feature(derive_default_enum)]\n #![feature(discriminant_kind)]\n #![feature(exhaustive_patterns)]\n #![feature(if_let_guard)]"}, {"sha": "8a5fc5feeb71b2d65dc0192c2f7dea996db2e224", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 53, "deletions": 8, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -3,7 +3,7 @@\n \n pub use self::StabilityLevel::*;\n \n-use crate::ty::{self, TyCtxt};\n+use crate::ty::{self, DefIdTree, TyCtxt};\n use rustc_ast::NodeId;\n use rustc_attr::{self as attr, ConstStability, Deprecation, Stability};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -90,6 +90,7 @@ pub fn report_unstable(\n     feature: Symbol,\n     reason: Option<Symbol>,\n     issue: Option<NonZeroU32>,\n+    suggestion: Option<(Span, String, String, Applicability)>,\n     is_soft: bool,\n     span: Span,\n     soft_handler: impl FnOnce(&'static Lint, Span, &str),\n@@ -116,8 +117,12 @@ pub fn report_unstable(\n         if is_soft {\n             soft_handler(SOFT_UNSTABLE, span, &msg)\n         } else {\n-            feature_err_issue(&sess.parse_sess, feature, span, GateIssue::Library(issue), &msg)\n-                .emit();\n+            let mut err =\n+                feature_err_issue(&sess.parse_sess, feature, span, GateIssue::Library(issue), &msg);\n+            if let Some((inner_types, ref msg, sugg, applicability)) = suggestion {\n+                err.span_suggestion(inner_types, msg, sugg, applicability);\n+            }\n+            err.emit();\n         }\n     }\n }\n@@ -271,7 +276,13 @@ pub enum EvalResult {\n     Allow,\n     /// We cannot use the item because it is unstable and we did not provide the\n     /// corresponding feature gate.\n-    Deny { feature: Symbol, reason: Option<Symbol>, issue: Option<NonZeroU32>, is_soft: bool },\n+    Deny {\n+        feature: Symbol,\n+        reason: Option<Symbol>,\n+        issue: Option<NonZeroU32>,\n+        suggestion: Option<(Span, String, String, Applicability)>,\n+        is_soft: bool,\n+    },\n     /// The item does not have the `#[stable]` or `#[unstable]` marker assigned.\n     Unmarked,\n }\n@@ -292,6 +303,32 @@ fn skip_stability_check_due_to_privacy(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     }\n }\n \n+// See issue #83250.\n+fn suggestion_for_allocator_api(\n+    tcx: TyCtxt<'_>,\n+    def_id: DefId,\n+    span: Span,\n+    feature: Symbol,\n+) -> Option<(Span, String, String, Applicability)> {\n+    if feature == sym::allocator_api {\n+        if let Some(trait_) = tcx.parent(def_id) {\n+            if tcx.is_diagnostic_item(sym::Vec, trait_) {\n+                let sm = tcx.sess.parse_sess.source_map();\n+                let inner_types = sm.span_extend_to_prev_char(span, '<', true);\n+                if let Ok(snippet) = sm.span_to_snippet(inner_types) {\n+                    return Some((\n+                        inner_types,\n+                        \"consider wrapping the inner types in tuple\".to_string(),\n+                        format!(\"({})\", snippet),\n+                        Applicability::MaybeIncorrect,\n+                    ));\n+                }\n+            }\n+        }\n+    }\n+    None\n+}\n+\n impl<'tcx> TyCtxt<'tcx> {\n     /// Evaluates the stability of an item.\n     ///\n@@ -406,7 +443,8 @@ impl<'tcx> TyCtxt<'tcx> {\n                     }\n                 }\n \n-                EvalResult::Deny { feature, reason, issue, is_soft }\n+                let suggestion = suggestion_for_allocator_api(self, def_id, span, feature);\n+                EvalResult::Deny { feature, reason, issue, suggestion, is_soft }\n             }\n             Some(_) => {\n                 // Stable APIs are always ok to call and deprecated APIs are\n@@ -457,9 +495,16 @@ impl<'tcx> TyCtxt<'tcx> {\n         };\n         match self.eval_stability(def_id, id, span, method_span) {\n             EvalResult::Allow => {}\n-            EvalResult::Deny { feature, reason, issue, is_soft } => {\n-                report_unstable(self.sess, feature, reason, issue, is_soft, span, soft_handler)\n-            }\n+            EvalResult::Deny { feature, reason, issue, suggestion, is_soft } => report_unstable(\n+                self.sess,\n+                feature,\n+                reason,\n+                issue,\n+                suggestion,\n+                is_soft,\n+                span,\n+                soft_handler,\n+            ),\n             EvalResult::Unmarked => unmarked(span, def_id),\n         }\n     }"}, {"sha": "7e054d1e17fcdadc00a82218659acdcdcb6504f1", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -2263,10 +2263,11 @@ impl<'tcx> TyS<'tcx> {\n /// a miscompilation or unsoundness.\n ///\n /// When in doubt, use `VarianceDiagInfo::default()`\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]\n pub enum VarianceDiagInfo<'tcx> {\n     /// No additional information - this is the default.\n     /// We will not add any additional information to error messages.\n+    #[default]\n     None,\n     /// We switched our variance because a type occurs inside\n     /// the generic argument of a mutable reference or pointer\n@@ -2301,9 +2302,3 @@ impl<'tcx> VarianceDiagInfo<'tcx> {\n         }\n     }\n }\n-\n-impl<'tcx> Default for VarianceDiagInfo<'tcx> {\n-    fn default() -> Self {\n-        Self::None\n-    }\n-}"}, {"sha": "3669a4fce9cbf9ba0048156ca6e697cd93d07ebb", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -1243,7 +1243,7 @@ impl<'a> Parser<'a> {\n         } else if self.eat_keyword(kw::Unsafe) {\n             self.parse_block_expr(None, lo, BlockCheckMode::Unsafe(ast::UserProvided), attrs)\n         } else if self.check_inline_const(0) {\n-            self.parse_const_block(lo.to(self.token.span))\n+            self.parse_const_block(lo.to(self.token.span), false)\n         } else if self.is_do_catch_block() {\n             self.recover_do_catch(attrs)\n         } else if self.is_try_block() {"}, {"sha": "9212aaa87d1947fdce1deecfb60ac460b662485b", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -1095,8 +1095,12 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses inline const expressions.\n-    fn parse_const_block(&mut self, span: Span) -> PResult<'a, P<Expr>> {\n-        self.sess.gated_spans.gate(sym::inline_const, span);\n+    fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {\n+        if pat {\n+            self.sess.gated_spans.gate(sym::inline_const_pat, span);\n+        } else {\n+            self.sess.gated_spans.gate(sym::inline_const, span);\n+        }\n         self.eat_keyword(kw::Const);\n         let blk = self.parse_block()?;\n         let anon_const = AnonConst {"}, {"sha": "bb3947bb47a2550bd5e82d3a633fd7c006bcbf28", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -437,7 +437,7 @@ impl<'a> Parser<'a> {\n             PatKind::Box(pat)\n         } else if self.check_inline_const(0) {\n             // Parse `const pat`\n-            let const_expr = self.parse_const_block(lo.to(self.token.span))?;\n+            let const_expr = self.parse_const_block(lo.to(self.token.span), true)?;\n \n             if let Some(re) = self.parse_range_end() {\n                 self.parse_pat_range_begin_with(const_expr, re)?\n@@ -884,7 +884,7 @@ impl<'a> Parser<'a> {\n \n     fn parse_pat_range_end(&mut self) -> PResult<'a, P<Expr>> {\n         if self.check_inline_const(0) {\n-            self.parse_const_block(self.token.span)\n+            self.parse_const_block(self.token.span, true)\n         } else if self.check_path() {\n             let lo = self.token.span;\n             let (qself, path) = if self.eat_lt() {"}, {"sha": "28dbce0471eaf87a92adf72e408c66799b9aad2a", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -1133,6 +1133,7 @@ impl<'a> Resolver<'a> {\n                         feature,\n                         reason,\n                         issue,\n+                        None,\n                         is_soft,\n                         span,\n                         soft_handler,"}, {"sha": "ab3c122053c5ebd777d5c65d17fbdb48dcc59118", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -335,22 +335,17 @@ impl Default for ErrorOutputType {\n }\n \n /// Parameter to control path trimming.\n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, Hash)]\n pub enum TrimmedDefPaths {\n     /// `try_print_trimmed_def_path` never prints a trimmed path and never calls the expensive query\n+    #[default]\n     Never,\n     /// `try_print_trimmed_def_path` calls the expensive query, the query doesn't call `delay_good_path_bug`\n     Always,\n     /// `try_print_trimmed_def_path` calls the expensive query, the query calls `delay_good_path_bug`\n     GoodPath,\n }\n \n-impl Default for TrimmedDefPaths {\n-    fn default() -> Self {\n-        Self::Never\n-    }\n-}\n-\n /// Use tree-based collections to cheaply get a deterministic `Hash` implementation.\n /// *Do not* switch `BTreeMap` out for an unsorted container type! That would break\n /// dependency tracking for command-line arguments. Also only hash keys, since tracking"}, {"sha": "399b616915ee10b419cd0c5e878fee1b75466e10", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -1,4 +1,5 @@\n #![feature(crate_visibility_modifier)]\n+#![feature(derive_default_enum)]\n #![feature(min_specialization)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]"}, {"sha": "c34cf822765f73615e32d650a0c12db821c3aa4b", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -307,6 +307,7 @@ symbols! {\n         alloc_layout,\n         alloc_zeroed,\n         allocator,\n+        allocator_api,\n         allocator_internals,\n         allow,\n         allow_fail,\n@@ -731,6 +732,7 @@ symbols! {\n         inlateout,\n         inline,\n         inline_const,\n+        inline_const_pat,\n         inout,\n         instruction_set,\n         intel,"}, {"sha": "1820e33b19bf4fc0ae332bc78aeb3ab8e6359d23", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -14,6 +14,7 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(drain_filter)]\n+#![feature(derive_default_enum)]\n #![feature(hash_drain_filter)]\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]"}, {"sha": "4bc22d5d73543f9b30a32c9130dffdba5a348d85", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -82,9 +82,14 @@ pub use self::chalk_fulfill::FulfillmentContext as ChalkFulfillmentContext;\n pub use rustc_infer::traits::*;\n \n /// Whether to skip the leak check, as part of a future compatibility warning step.\n-#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+///\n+/// The \"default\" for skip-leak-check corresponds to the current\n+/// behavior (do not skip the leak check) -- not the behavior we are\n+/// transitioning into.\n+#[derive(Copy, Clone, PartialEq, Eq, Debug, Default)]\n pub enum SkipLeakCheck {\n     Yes,\n+    #[default]\n     No,\n }\n \n@@ -94,15 +99,6 @@ impl SkipLeakCheck {\n     }\n }\n \n-/// The \"default\" for skip-leak-check corresponds to the current\n-/// behavior (do not skip the leak check) -- not the behavior we are\n-/// transitioning into.\n-impl Default for SkipLeakCheck {\n-    fn default() -> Self {\n-        SkipLeakCheck::No\n-    }\n-}\n-\n /// The mode that trait queries run in.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum TraitQueryMode {"}, {"sha": "2486999ffb5c1188ca50dd64c3f4c2a0bf1cb09a", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -163,6 +163,7 @@\n #![cfg_attr(bootstrap, feature(const_raw_ptr_deref))]\n #![feature(const_refs_to_cell)]\n #![feature(decl_macro)]\n+#![feature(derive_default_enum)]\n #![feature(doc_cfg)]\n #![feature(doc_notable_trait)]\n #![feature(doc_primitive)]"}, {"sha": "f3155fbc0620f1ad8dbd634fb24d3be328d4cbb1", "filename": "library/std/src/sys/unix/kernel_copy.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -576,20 +576,22 @@ pub(super) fn copy_regular_files(reader: RawFd, writer: RawFd, max_len: u64) ->\n                 return match err.raw_os_error() {\n                     // when file offset + max_length > u64::MAX\n                     Some(EOVERFLOW) => CopyResult::Fallback(written),\n-                    Some(ENOSYS | EXDEV | EINVAL | EPERM | EOPNOTSUPP | EBADF) => {\n+                    Some(ENOSYS | EXDEV | EINVAL | EPERM | EOPNOTSUPP | EBADF) if written == 0 => {\n                         // Try fallback io::copy if either:\n                         // - Kernel version is < 4.5 (ENOSYS\u00b9)\n                         // - Files are mounted on different fs (EXDEV)\n                         // - copy_file_range is broken in various ways on RHEL/CentOS 7 (EOPNOTSUPP)\n                         // - copy_file_range file is immutable or syscall is blocked by seccomp\u00b9 (EPERM)\n                         // - copy_file_range cannot be used with pipes or device nodes (EINVAL)\n                         // - the writer fd was opened with O_APPEND (EBADF\u00b2)\n+                        // and no bytes were written successfully yet.  (All these errnos should\n+                        // not be returned if something was already written, but they happen in\n+                        // the wild, see #91152.)\n                         //\n                         // \u00b9 these cases should be detected by the initial probe but we handle them here\n                         //   anyway in case syscall interception changes during runtime\n                         // \u00b2 actually invalid file descriptors would cause this too, but in that case\n                         //   the fallback code path is expected to encounter the same error again\n-                        assert_eq!(written, 0);\n                         CopyResult::Fallback(0)\n                     }\n                     _ => CopyResult::Error(err, written),"}, {"sha": "5f0f7547a0a894ec14166ec7d29e4c96b2eba9f3", "filename": "src/doc/unstable-book/src/language-features/inline-const-pat.md", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finline-const-pat.md", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finline-const-pat.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finline-const-pat.md?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -0,0 +1,24 @@\n+# `inline_const_pat`\n+\n+The tracking issue for this feature is: [#76001]\n+\n+See also [`inline_const`](inline-const.md)\n+\n+------\n+\n+This feature allows you to use inline constant expressions in pattern position:\n+\n+```rust\n+#![feature(inline_const_pat)]\n+\n+const fn one() -> i32 { 1 }\n+\n+let some_int = 3;\n+match some_int {\n+    const { 1 + 2 } => println!(\"Matched 1 + 2\"),\n+    const { one() } => println!(\"Matched const fn returning 1\"),\n+    _ => println!(\"Didn't match anything :(\"),\n+}\n+```\n+\n+[#76001]: https://github.com/rust-lang/rust/issues/76001"}, {"sha": "7be70eed6cedc534144e360fe86db86693011d0d", "filename": "src/doc/unstable-book/src/language-features/inline-const.md", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finline-const.md", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finline-const.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finline-const.md?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -2,6 +2,8 @@\n \n The tracking issue for this feature is: [#76001]\n \n+See also [`inline_const_pat`](inline-const-pat.md)\n+\n ------\n \n This feature allows you to use inline constant expressions. For example, you can\n@@ -27,19 +29,4 @@ fn main() {\n }\n ```\n \n-You can also use inline constant expressions in patterns:\n-\n-```rust\n-#![feature(inline_const)]\n-\n-const fn one() -> i32 { 1 }\n-\n-let some_int = 3;\n-match some_int {\n-    const { 1 + 2 } => println!(\"Matched 1 + 2\"),\n-    const { one() } => println!(\"Matched const fn returning 1\"),\n-    _ => println!(\"Didn't match anything :(\"),\n-}\n-```\n-\n [#76001]: https://github.com/rust-lang/rust/issues/76001"}, {"sha": "32aa82195a962013c7567543e8b5645cb2fada57", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -886,6 +886,14 @@ function hideThemeButtonState() {\n         }\n     });\n \n+    onEachLazy(document.querySelectorAll(\".rustdoc-toggle > summary:not(.hideme)\"), function(el) {\n+        el.addEventListener(\"click\", function(e) {\n+            if (e.target.tagName != \"SUMMARY\") {\n+                e.preventDefault();\n+            }\n+        });\n+    });\n+\n     onEachLazy(document.getElementsByClassName(\"notable-traits\"), function(e) {\n         e.onclick = function() {\n             this.getElementsByClassName('notable-traits-tooltiptext')[0]"}, {"sha": "79354ec8745073b229e330607b2709b71c2631f4", "filename": "src/test/rustdoc-gui/src/lib2/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -22,6 +22,8 @@ pub struct Foo {\n }\n \n impl Foo {\n+    /// Some documentation\n+    /// # A Heading\n     pub fn a_method(&self) {}\n }\n "}, {"sha": "4d08927a7bede7b807bc9d2a34e00b368e8c109b", "filename": "src/test/rustdoc-gui/toggle-click-deadspace.goml", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Frustdoc-gui%2Ftoggle-click-deadspace.goml", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Frustdoc-gui%2Ftoggle-click-deadspace.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftoggle-click-deadspace.goml?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -0,0 +1,8 @@\n+// This test ensures that clicking on a method summary, but not on the \"[-]\",\n+// doesn't toggle the <details>.\n+goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+assert-attribute: (\".impl-items .rustdoc-toggle\", {\"open\": \"\"})\n+click: \"h4.code-header\" // This is the position of \"pub\" in \"pub fn a_method\"\n+assert-attribute: (\".impl-items .rustdoc-toggle\", {\"open\": \"\"})\n+click: \".impl-items .rustdoc-toggle summary::before\" // This is the position of \"[-]\" next to that pub fn.\n+assert-attribute-false: (\".impl-items .rustdoc-toggle\", {\"open\": \"\"})"}, {"sha": "1952ddb941e511db20bccf3446e0cb08de658154", "filename": "src/test/ui/consts/closure-structural-match-issue-90013.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Fconsts%2Fclosure-structural-match-issue-90013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Fconsts%2Fclosure-structural-match-issue-90013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fclosure-structural-match-issue-90013.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -1,6 +1,5 @@\n // Regression test for issue 90013.\n // check-pass\n-#![allow(incomplete_features)]\n #![feature(inline_const)]\n \n fn main() {"}, {"sha": "20496f62712c284055bd034e9380ebd2e09c1c24", "filename": "src/test/ui/consts/const-blocks/fn-call-in-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-const.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(inline_const)]\n-#![allow(unused, incomplete_features)]\n+#![allow(unused)]\n \n // Some type that is not copyable.\n struct Bar;"}, {"sha": "3d0df289fb74a2ca71b0fe4e40ceae082a016e07", "filename": "src/test/ui/feature-gates/feature-gate-inline_const_pat.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inline_const_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inline_const_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inline_const_pat.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let const { () } = ();\n+    //~^ ERROR inline-const in pattern position is experimental [E0658]\n+}"}, {"sha": "ca533d8505cf793084e9a0da57f42a73256afbb2", "filename": "src/test/ui/feature-gates/feature-gate-inline_const_pat.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inline_const_pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inline_const_pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-inline_const_pat.stderr?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: inline-const in pattern position is experimental\n+  --> $DIR/feature-gate-inline_const_pat.rs:2:9\n+   |\n+LL |     let const { () } = ();\n+   |         ^^^^^\n+   |\n+   = note: see issue #76001 <https://github.com/rust-lang/rust/issues/76001> for more information\n+   = help: add `#![feature(inline_const_pat)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "8f745e8104f811b3a2f4823d6ec7a60591352700", "filename": "src/test/ui/half-open-range-patterns/range_pat_interactions0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions0.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -2,7 +2,7 @@\n #![allow(incomplete_features)]\n #![feature(exclusive_range_pattern)]\n #![feature(half_open_range_patterns)]\n-#![feature(inline_const)]\n+#![feature(inline_const_pat)]\n \n fn main() {\n     let mut if_lettable = vec![];"}, {"sha": "41c7e46dfc1ed2fdf6f12b830ab9d4c8f966cd0f", "filename": "src/test/ui/half-open-range-patterns/range_pat_interactions3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -12,7 +12,7 @@ fn main() {\n             y @ (0..5 | 6) => or_two.push(y),\n             //~^ exclusive range pattern syntax is experimental\n             y @ 0..const { 5 + 1 } => assert_eq!(y, 5),\n-            //~^ inline-const is experimental\n+            //~^ inline-const in pattern position is experimental\n             //~| exclusive range pattern syntax is experimental\n             y @ -5.. => range_from.push(y),\n             y @ ..-7 => assert_eq!(y, -8),"}, {"sha": "5e36996a462b283968818c4c197801aa74cffb2f", "filename": "src/test/ui/half-open-range-patterns/range_pat_interactions3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.stderr?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -7,14 +7,14 @@ LL |             y @ ..-7 => assert_eq!(y, -8),\n    = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n    = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n \n-error[E0658]: inline-const is experimental\n+error[E0658]: inline-const in pattern position is experimental\n   --> $DIR/range_pat_interactions3.rs:14:20\n    |\n LL |             y @ 0..const { 5 + 1 } => assert_eq!(y, 5),\n    |                    ^^^^^\n    |\n    = note: see issue #76001 <https://github.com/rust-lang/rust/issues/76001> for more information\n-   = help: add `#![feature(inline_const)]` to the crate attributes to enable\n+   = help: add `#![feature(inline_const_pat)]` to the crate attributes to enable\n \n error[E0658]: exclusive range pattern syntax is experimental\n   --> $DIR/range_pat_interactions3.rs:10:17"}, {"sha": "8a92cdbc0f9811975808fa07199033501016a27c", "filename": "src/test/ui/inline-const/const-expr-array-init.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-array-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-array-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-array-init.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -1,6 +1,5 @@\n // build-pass\n \n-#![allow(incomplete_features)]\n #![feature(inline_const)]\n \n use std::cell::Cell;"}, {"sha": "dac46fe25ecfc84e266480dc2c96fd922915b6b7", "filename": "src/test/ui/inline-const/const-expr-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-basic.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n-#![allow(incomplete_features)]\n #![feature(inline_const)]\n+\n fn foo() -> i32 {\n     const {\n         let x = 5 + 10;"}, {"sha": "0d5892a74d9565dc4d09bfcdf37797b64897d6a3", "filename": "src/test/ui/inline-const/const-expr-inference.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-inference.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n \n #![feature(inline_const)]\n-#![allow(incomplete_features)]\n \n pub fn todo<T>() -> T {\n     const { todo!() }"}, {"sha": "0a032a7338ad065e24e4ea113f01de4e9fc5f338", "filename": "src/test/ui/inline-const/const-expr-lifetime-err.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-lifetime-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-lifetime-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-lifetime-err.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(const_mut_refs)]\n #![feature(inline_const)]\n "}, {"sha": "a23f7c9a796c53b1a74726d14c1efccdcadb12f0", "filename": "src/test/ui/inline-const/const-expr-lifetime-err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-lifetime-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-lifetime-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-lifetime-err.stderr?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `y` does not live long enough\n-  --> $DIR/const-expr-lifetime-err.rs:24:30\n+  --> $DIR/const-expr-lifetime-err.rs:23:30\n    |\n LL | fn foo<'a>() {\n    |        -- lifetime `'a` defined here"}, {"sha": "d883deb2845d35993011adb50cf085359ba93c47", "filename": "src/test/ui/inline-const/const-expr-lifetime.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-lifetime.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![allow(incomplete_features)]\n #![feature(const_mut_refs)]\n #![feature(inline_const)]\n "}, {"sha": "041f3e15a29b9822564052c20305a84cd656fcf8", "filename": "src/test/ui/inline-const/const-expr-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-macro.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n-#![allow(incomplete_features)]\n #![feature(inline_const)]\n+\n macro_rules! do_const_block{\n     ($val:block) => { const $val }\n }"}, {"sha": "a54d879f69d748134340cda1d6506f2072ed6848", "filename": "src/test/ui/inline-const/const-expr-reference.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-reference.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![allow(incomplete_features)]\n #![feature(inline_const)]\n \n const fn bar() -> i32 {"}, {"sha": "4486411698af964d0adae9b8ba5e3b098f56d841", "filename": "src/test/ui/inline-const/const-match-pat-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -1,5 +1,5 @@\n #![allow(incomplete_features)]\n-#![feature(inline_const)]\n+#![feature(inline_const_pat)]\n \n // rust-lang/rust#82518: ICE with inline-const in match referencing const-generic parameter\n "}, {"sha": "d83ae6e983486fe3bd21018fc8f2679f4999faeb", "filename": "src/test/ui/inline-const/const-match-pat-inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-inference.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(inline_const)]\n+#![feature(inline_const_pat)]\n #![allow(incomplete_features)]\n \n fn main() {"}, {"sha": "436b8037f3093a586de0d1d8ea0ff5f034a4c29b", "filename": "src/test/ui/inline-const/const-match-pat-lifetime-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-lifetime-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-lifetime-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-lifetime-err.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -2,7 +2,7 @@\n \n #![allow(incomplete_features)]\n #![feature(const_mut_refs)]\n-#![feature(inline_const)]\n+#![feature(inline_const_pat)]\n \n use std::marker::PhantomData;\n "}, {"sha": "6d943bbcc0160f2ce184413ae0158b9353d68413", "filename": "src/test/ui/inline-const/const-match-pat-lifetime.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-lifetime.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -3,6 +3,7 @@\n #![allow(incomplete_features)]\n #![feature(const_mut_refs)]\n #![feature(inline_const)]\n+#![feature(inline_const_pat)]\n \n use std::marker::PhantomData;\n "}, {"sha": "7dc8c11355ab035990bd63a1cba36920dc74f774", "filename": "src/test/ui/inline-const/const-match-pat-range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-range.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -1,7 +1,7 @@\n // build-pass\n \n #![allow(incomplete_features)]\n-#![feature(inline_const, half_open_range_patterns, exclusive_range_pattern)]\n+#![feature(inline_const_pat, half_open_range_patterns, exclusive_range_pattern)]\n fn main() {\n     const N: u32 = 10;\n     let x: u32 = 3;"}, {"sha": "2f55e16b35cd934617108ed762dd94b86bc67cd5", "filename": "src/test/ui/inline-const/const-match-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![allow(incomplete_features)]\n-#![feature(inline_const)]\n+#![feature(inline_const_pat)]\n const MMIO_BIT1: u8 = 4;\n const MMIO_BIT2: u8 = 5;\n "}, {"sha": "d3e39c0de69c85db3a6bfff5bad18ff1526ed826", "filename": "src/test/ui/lint/dead-code/anon-const-in-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fanon-const-in-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fanon-const-in-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fanon-const-in-pat.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(inline_const)]\n+#![feature(inline_const_pat)]\n #![allow(incomplete_features)]\n #![deny(dead_code)]\n "}, {"sha": "5c33154736650b04f59982bbedd104f99bf75c2c", "filename": "src/test/ui/pattern/non-structural-match-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -2,7 +2,7 @@\n #![allow(incomplete_features)]\n #![allow(unreachable_code)]\n #![feature(const_async_blocks)]\n-#![feature(inline_const)]\n+#![feature(inline_const_pat)]\n \n fn main() {\n     match loop {} {"}, {"sha": "3c913c0adfa6000cd801e41b02cd305655a3aae0", "filename": "src/test/ui/simd/intrinsic/generic-elements-pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-elements-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-elements-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-elements-pass.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -2,7 +2,6 @@\n // ignore-emscripten FIXME(#45351) hits an LLVM assert\n \n #![feature(repr_simd, platform_intrinsics)]\n-#![allow(incomplete_features)]\n #![feature(inline_const)]\n \n #[repr(simd)]"}, {"sha": "fac52ab77c68ca919fc358afe1444b0c88bf1d8f", "filename": "src/test/ui/stability-attribute/suggest-vec-allocator-api.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Fstability-attribute%2Fsuggest-vec-allocator-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Fstability-attribute%2Fsuggest-vec-allocator-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fsuggest-vec-allocator-api.rs?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    let _: Vec<u8, _> = vec![]; //~ ERROR use of unstable library feature 'allocator_api'\n+    #[rustfmt::skip]\n+    let _: Vec<\n+        String,\n+        _> = vec![]; //~ ERROR use of unstable library feature 'allocator_api'\n+    let _ = Vec::<u16, _>::new(); //~ ERROR use of unstable library feature 'allocator_api'\n+    let _boxed: Box<u32, _> = Box::new(10); //~ ERROR use of unstable library feature 'allocator_api'\n+}"}, {"sha": "41e5787b8c2debfde5ba550be9b33baf1568e286", "filename": "src/test/ui/stability-attribute/suggest-vec-allocator-api.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Fstability-attribute%2Fsuggest-vec-allocator-api.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65c55bf931a55e6b1e5ed14ad8623814a7386424/src%2Ftest%2Fui%2Fstability-attribute%2Fsuggest-vec-allocator-api.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fsuggest-vec-allocator-api.stderr?ref=65c55bf931a55e6b1e5ed14ad8623814a7386424", "patch": "@@ -0,0 +1,49 @@\n+error[E0658]: use of unstable library feature 'allocator_api'\n+  --> $DIR/suggest-vec-allocator-api.rs:2:20\n+   |\n+LL |     let _: Vec<u8, _> = vec![];\n+   |                ----^\n+   |                |\n+   |                help: consider wrapping the inner types in tuple: `(u8, _)`\n+   |\n+   = note: see issue #32838 <https://github.com/rust-lang/rust/issues/32838> for more information\n+   = help: add `#![feature(allocator_api)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'allocator_api'\n+  --> $DIR/suggest-vec-allocator-api.rs:6:9\n+   |\n+LL |         _> = vec![];\n+   |         ^\n+   |\n+   = note: see issue #32838 <https://github.com/rust-lang/rust/issues/32838> for more information\n+   = help: add `#![feature(allocator_api)]` to the crate attributes to enable\n+help: consider wrapping the inner types in tuple\n+   |\n+LL ~     let _: Vec<(\n+LL +         String,\n+LL ~         _)> = vec![];\n+   |\n+\n+error[E0658]: use of unstable library feature 'allocator_api'\n+  --> $DIR/suggest-vec-allocator-api.rs:8:26\n+   |\n+LL |     let _boxed: Box<u32, _> = Box::new(10);\n+   |                          ^\n+   |\n+   = note: see issue #32838 <https://github.com/rust-lang/rust/issues/32838> for more information\n+   = help: add `#![feature(allocator_api)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'allocator_api'\n+  --> $DIR/suggest-vec-allocator-api.rs:7:24\n+   |\n+LL |     let _ = Vec::<u16, _>::new();\n+   |                   -----^\n+   |                   |\n+   |                   help: consider wrapping the inner types in tuple: `(u16, _)`\n+   |\n+   = note: see issue #32838 <https://github.com/rust-lang/rust/issues/32838> for more information\n+   = help: add `#![feature(allocator_api)]` to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}]}