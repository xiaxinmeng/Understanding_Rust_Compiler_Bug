{"sha": "e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "node_id": "C_kwDOAAsO6NoAKGU1MmU3MTE1Yzc0NzdiYmMyNTdjNDQ0NDdiYjdlY2NiY2ZlOWNmYjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-21T23:34:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-21T23:34:30Z"}, "message": "Auto merge of #96515 - lcnr:user-types-in-pat, r=nikomatsakis\n\ncorrectly deal with user type ascriptions in pat\n\nsupersedes #93856\n\n`thir::PatKind::AscribeUserType` previously resulted in `CanonicalUserTypeAnnotations` where the inferred type already had a subtyping relation according to `variance` to the `user_ty`.\n\nThe bug can pretty much be summarized as follows:\n\n- during mir building\n  - `user_ty -> inferred_ty`: considers variance\n  - `StatementKind::AscribeUserType`: `inferred_ty` is the type of the place, so no variance needed\n- during mir borrowck\n  - `user_ty -> inferred_ty`: does not consider variance\n  - `StatementKind::AscribeUserType`: applies variance\n\nThis mostly worked fine. The lifetimes in `inferred_ty` were only bound by its relation to `user_ty` and to the `place` of `StatementKind::AscribeUserType`, so it doesn't matter where exactly the subtyping happens.\n\nIt does however matter when having higher ranked subtying. At this point the place where the subtyping happens is forced, causing this mismatch between building and borrowck to result in unintended errors.\n\ncc #96514 which is pretty much the same issue\n\nr? `@nikomatsakis`", "tree": {"sha": "57710ee1dafdbaff8d7ecb7631c77d2e0b99a4a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57710ee1dafdbaff8d7ecb7631c77d2e0b99a4a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "html_url": "https://github.com/rust-lang/rust/commit/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9257f5aad02b65665a6e23e5b92938548302e129", "url": "https://api.github.com/repos/rust-lang/rust/commits/9257f5aad02b65665a6e23e5b92938548302e129", "html_url": "https://github.com/rust-lang/rust/commit/9257f5aad02b65665a6e23e5b92938548302e129"}, {"sha": "76370084fae1c1dad0af1058c666471e0766c56f", "url": "https://api.github.com/repos/rust-lang/rust/commits/76370084fae1c1dad0af1058c666471e0766c56f", "html_url": "https://github.com/rust-lang/rust/commit/76370084fae1c1dad0af1058c666471e0766c56f"}], "stats": {"total": 493, "additions": 304, "deletions": 189}, "files": [{"sha": "eaa68bf1b38ddc682bbeb8b9daa2049aa250d62c", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "patch": "@@ -1007,10 +1007,11 @@ fn write_user_type_annotations(\n     for (index, annotation) in body.user_type_annotations.iter_enumerated() {\n         writeln!(\n             w,\n-            \"| {:?}: {:?} at {}\",\n+            \"| {:?}: user_ty: {:?}, span: {}, inferred_ty: {:?}\",\n             index.index(),\n             annotation.user_ty,\n-            tcx.sess.source_map().span_to_embeddable_string(annotation.span)\n+            tcx.sess.source_map().span_to_embeddable_string(annotation.span),\n+            annotation.inferred_ty,\n         )?;\n     }\n     if !body.user_type_annotations.is_empty() {"}, {"sha": "b99e7573000c9d853e01c27cebe5fb7410b63486", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 9, "deletions": 41, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "patch": "@@ -18,15 +18,11 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::infer::canonical::Canonical;\n use rustc_middle::middle::region;\n use rustc_middle::mir::interpret::AllocId;\n-use rustc_middle::mir::{\n-    self, BinOp, BorrowKind, FakeReadCause, Field, Mutability, UnOp, UserTypeProjection,\n-};\n+use rustc_middle::mir::{self, BinOp, BorrowKind, FakeReadCause, Field, Mutability, UnOp};\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::subst::SubstsRef;\n+use rustc_middle::ty::CanonicalUserTypeAnnotation;\n use rustc_middle::ty::{self, AdtDef, Ty, UpvarSubsts, UserType};\n-use rustc_middle::ty::{\n-    CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n-};\n use rustc_span::{Span, Symbol, DUMMY_SP};\n use rustc_target::abi::VariantIdx;\n use rustc_target::asm::InlineAsmRegOrRegClass;\n@@ -540,13 +536,13 @@ pub enum BindingMode {\n     ByRef(BorrowKind),\n }\n \n-#[derive(Clone, Debug, PartialEq, HashStable)]\n+#[derive(Clone, Debug, HashStable)]\n pub struct FieldPat<'tcx> {\n     pub field: Field,\n     pub pattern: Pat<'tcx>,\n }\n \n-#[derive(Clone, Debug, PartialEq, HashStable)]\n+#[derive(Clone, Debug, HashStable)]\n pub struct Pat<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub span: Span,\n@@ -559,37 +555,10 @@ impl<'tcx> Pat<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, HashStable)]\n-pub struct PatTyProj<'tcx> {\n-    pub user_ty: CanonicalUserType<'tcx>,\n-}\n-\n-impl<'tcx> PatTyProj<'tcx> {\n-    pub fn from_user_type(user_annotation: CanonicalUserType<'tcx>) -> Self {\n-        Self { user_ty: user_annotation }\n-    }\n-\n-    pub fn user_ty(\n-        self,\n-        annotations: &mut CanonicalUserTypeAnnotations<'tcx>,\n-        inferred_ty: Ty<'tcx>,\n-        span: Span,\n-    ) -> UserTypeProjection {\n-        UserTypeProjection {\n-            base: annotations.push(CanonicalUserTypeAnnotation {\n-                span,\n-                user_ty: self.user_ty,\n-                inferred_ty,\n-            }),\n-            projs: Vec::new(),\n-        }\n-    }\n-}\n-\n-#[derive(Copy, Clone, Debug, PartialEq, HashStable)]\n+#[derive(Clone, Debug, HashStable)]\n pub struct Ascription<'tcx> {\n-    pub user_ty: PatTyProj<'tcx>,\n-    /// Variance to use when relating the type `user_ty` to the **type of the value being\n+    pub annotation: CanonicalUserTypeAnnotation<'tcx>,\n+    /// Variance to use when relating the `user_ty` to the **type of the value being\n     /// matched**. Typically, this is `Variance::Covariant`, since the value being matched must\n     /// have a type that is some subtype of the ascribed type.\n     ///\n@@ -608,12 +577,11 @@ pub struct Ascription<'tcx> {\n     /// probably be checking for a `PartialEq` impl instead, but this preserves the behavior\n     /// of the old type-check for now. See #57280 for details.\n     pub variance: ty::Variance,\n-    pub user_ty_span: Span,\n }\n \n-#[derive(Clone, Debug, PartialEq, HashStable)]\n+#[derive(Clone, Debug, HashStable)]\n pub enum PatKind<'tcx> {\n-    /// A wildward pattern: `_`.\n+    /// A wildcard pattern: `_`.\n     Wild,\n \n     AscribeUserType {"}, {"sha": "fbe08dd6f0ebc179ccf39e4061de235e9962a667", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 22, "deletions": 37, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "patch": "@@ -523,8 +523,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             },\n                         ..\n                     },\n-                ascription:\n-                    thir::Ascription { user_ty: pat_ascription_ty, variance: _, user_ty_span },\n+                ascription: thir::Ascription { annotation, variance: _ },\n             } => {\n                 let place =\n                     self.storage_live_binding(block, var, irrefutable_pat.span, OutsideGuard, true);\n@@ -535,18 +534,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let cause_let = FakeReadCause::ForLet(None);\n                 self.cfg.push_fake_read(block, pattern_source_info, cause_let, place);\n \n-                let ty_source_info = self.source_info(user_ty_span);\n-                let user_ty = pat_ascription_ty.user_ty(\n-                    &mut self.canonical_user_type_annotations,\n-                    place.ty(&self.local_decls, self.tcx).ty,\n-                    ty_source_info.span,\n-                );\n+                let ty_source_info = self.source_info(annotation.span);\n+\n+                let base = self.canonical_user_type_annotations.push(annotation);\n                 self.cfg.push(\n                     block,\n                     Statement {\n                         source_info: ty_source_info,\n                         kind: StatementKind::AscribeUserType(\n-                            Box::new((place, user_ty)),\n+                            Box::new((place, UserTypeProjection { base, projs: Vec::new() })),\n                             // We always use invariant as the variance here. This is because the\n                             // variance field from the ascription refers to the variance to use\n                             // when applying the type to the value being matched, but this\n@@ -789,7 +785,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n             PatKind::AscribeUserType {\n                 ref subpattern,\n-                ascription: thir::Ascription { ref user_ty, user_ty_span, variance: _ },\n+                ascription: thir::Ascription { ref annotation, variance: _ },\n             } => {\n                 // This corresponds to something like\n                 //\n@@ -799,16 +795,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 //\n                 // Note that the variance doesn't apply here, as we are tracking the effect\n                 // of `user_ty` on any bindings contained with subpattern.\n-                let annotation = CanonicalUserTypeAnnotation {\n-                    span: user_ty_span,\n-                    user_ty: user_ty.user_ty,\n-                    inferred_ty: subpattern.ty,\n-                };\n+\n                 let projection = UserTypeProjection {\n-                    base: self.canonical_user_type_annotations.push(annotation),\n+                    base: self.canonical_user_type_annotations.push(annotation.clone()),\n                     projs: Vec::new(),\n                 };\n-                let subpattern_user_ty = pattern_user_ty.push_projection(&projection, user_ty_span);\n+                let subpattern_user_ty =\n+                    pattern_user_ty.push_projection(&projection, annotation.span);\n                 self.visit_primary_bindings(subpattern, subpattern_user_ty, f)\n             }\n \n@@ -932,9 +925,8 @@ struct Binding<'tcx> {\n /// influence region inference.\n #[derive(Clone, Debug)]\n struct Ascription<'tcx> {\n-    span: Span,\n     source: Place<'tcx>,\n-    user_ty: PatTyProj<'tcx>,\n+    annotation: CanonicalUserTypeAnnotation<'tcx>,\n     variance: ty::Variance,\n }\n \n@@ -1863,7 +1855,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             parent_bindings\n                 .iter()\n                 .flat_map(|(_, ascriptions)| ascriptions)\n-                .chain(&candidate.ascriptions),\n+                .cloned()\n+                .chain(candidate.ascriptions),\n         );\n \n         // rust-lang/rust#27282: The `autoref` business deserves some\n@@ -2067,32 +2060,24 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     /// Append `AscribeUserType` statements onto the end of `block`\n     /// for each ascription\n-    fn ascribe_types<'b>(\n+    fn ascribe_types(\n         &mut self,\n         block: BasicBlock,\n-        ascriptions: impl IntoIterator<Item = &'b Ascription<'tcx>>,\n-    ) where\n-        'tcx: 'b,\n-    {\n+        ascriptions: impl IntoIterator<Item = Ascription<'tcx>>,\n+    ) {\n         for ascription in ascriptions {\n-            let source_info = self.source_info(ascription.span);\n+            let source_info = self.source_info(ascription.annotation.span);\n \n-            debug!(\n-                \"adding user ascription at span {:?} of place {:?} and {:?}\",\n-                source_info.span, ascription.source, ascription.user_ty,\n-            );\n-\n-            let user_ty = ascription.user_ty.user_ty(\n-                &mut self.canonical_user_type_annotations,\n-                ascription.source.ty(&self.local_decls, self.tcx).ty,\n-                source_info.span,\n-            );\n+            let base = self.canonical_user_type_annotations.push(ascription.annotation);\n             self.cfg.push(\n                 block,\n                 Statement {\n                     source_info,\n                     kind: StatementKind::AscribeUserType(\n-                        Box::new((ascription.source, user_ty)),\n+                        Box::new((\n+                            ascription.source,\n+                            UserTypeProjection { base, projs: Vec::new() },\n+                        )),\n                         ascription.variance,\n                     ),\n                 },"}, {"sha": "b4a0c965d6b735d4db06b450f648abf5371b2539", "filename": "compiler/rustc_mir_build/src/build/matches/simplify.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs?ref=e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "patch": "@@ -152,15 +152,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         match *match_pair.pattern.kind {\n             PatKind::AscribeUserType {\n                 ref subpattern,\n-                ascription: thir::Ascription { variance, user_ty, user_ty_span },\n+                ascription: thir::Ascription { ref annotation, variance },\n             } => {\n                 // Apply the type ascription to the value at `match_pair.place`, which is the\n                 if let Ok(place_resolved) =\n                     match_pair.place.clone().try_upvars_resolved(self.tcx, self.typeck_results)\n                 {\n                     candidate.ascriptions.push(Ascription {\n-                        span: user_ty_span,\n-                        user_ty,\n+                        annotation: annotation.clone(),\n                         source: place_resolved.into_place(self.tcx, self.typeck_results),\n                         variance,\n                     });"}, {"sha": "d0b18ce67c6d8286d658182b9948c7fec7a2681c", "filename": "compiler/rustc_mir_build/src/thir/cx/block.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs?ref=e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "patch": "@@ -6,6 +6,7 @@ use rustc_middle::thir::*;\n use rustc_middle::ty;\n \n use rustc_index::vec::Idx;\n+use rustc_middle::ty::CanonicalUserTypeAnnotation;\n \n impl<'tcx> Cx<'tcx> {\n     pub(crate) fn mirror_block(&mut self, block: &'tcx hir::Block<'tcx>) -> Block {\n@@ -80,13 +81,17 @@ impl<'tcx> Cx<'tcx> {\n                                 self.typeck_results.user_provided_types().get(ty.hir_id)\n                             {\n                                 debug!(\"mirror_stmts: user_ty={:?}\", user_ty);\n+                                let annotation = CanonicalUserTypeAnnotation {\n+                                    user_ty,\n+                                    span: ty.span,\n+                                    inferred_ty: self.typeck_results.node_type(ty.hir_id),\n+                                };\n                                 pattern = Pat {\n                                     ty: pattern.ty,\n                                     span: pattern.span,\n                                     kind: Box::new(PatKind::AscribeUserType {\n                                         ascription: Ascription {\n-                                            user_ty: PatTyProj::from_user_type(user_ty),\n-                                            user_ty_span: ty.span,\n+                                            annotation,\n                                             variance: ty::Variance::Covariant,\n                                         },\n                                         subpattern: pattern,"}, {"sha": "e0dec1daf63c81a5a29373664114a745c8bae42d", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "patch": "@@ -19,8 +19,9 @@ use rustc_middle::mir::interpret::{get_slice_bytes, ConstValue};\n use rustc_middle::mir::interpret::{ErrorHandled, LitToConstError, LitToConstInput};\n use rustc_middle::mir::{self, UserTypeProjection};\n use rustc_middle::mir::{BorrowKind, Field, Mutability};\n-use rustc_middle::thir::{Ascription, BindingMode, FieldPat, Pat, PatKind, PatRange, PatTyProj};\n+use rustc_middle::thir::{Ascription, BindingMode, FieldPat, Pat, PatKind, PatRange};\n use rustc_middle::ty::subst::{GenericArg, SubstsRef};\n+use rustc_middle::ty::CanonicalUserTypeAnnotation;\n use rustc_middle::ty::{self, AdtDef, ConstKind, DefIdTree, Region, Ty, TyCtxt, UserType};\n use rustc_span::{Span, Symbol};\n \n@@ -227,7 +228,8 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 for end in &[lo, hi] {\n                     if let Some((_, Some(ascription))) = end {\n                         let subpattern = Pat { span: pat.span, ty, kind: Box::new(kind) };\n-                        kind = PatKind::AscribeUserType { ascription: *ascription, subpattern };\n+                        kind =\n+                            PatKind::AscribeUserType { ascription: ascription.clone(), subpattern };\n                     }\n                 }\n \n@@ -432,13 +434,14 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n \n         if let Some(user_ty) = self.user_substs_applied_to_ty_of_hir_id(hir_id) {\n             debug!(\"lower_variant_or_leaf: kind={:?} user_ty={:?} span={:?}\", kind, user_ty, span);\n+            let annotation = CanonicalUserTypeAnnotation {\n+                user_ty,\n+                span,\n+                inferred_ty: self.typeck_results.node_type(hir_id),\n+            };\n             kind = PatKind::AscribeUserType {\n                 subpattern: Pat { span, ty, kind: Box::new(kind) },\n-                ascription: Ascription {\n-                    user_ty: PatTyProj::from_user_type(user_ty),\n-                    user_ty_span: span,\n-                    variance: ty::Variance::Covariant,\n-                },\n+                ascription: Ascription { annotation, variance: ty::Variance::Covariant },\n             };\n         }\n \n@@ -499,18 +502,21 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 }\n \n                 let user_provided_types = self.typeck_results().user_provided_types();\n-                if let Some(u_ty) = user_provided_types.get(id) {\n-                    let user_ty = PatTyProj::from_user_type(*u_ty);\n+                if let Some(&user_ty) = user_provided_types.get(id) {\n+                    let annotation = CanonicalUserTypeAnnotation {\n+                        user_ty,\n+                        span,\n+                        inferred_ty: self.typeck_results().node_type(id),\n+                    };\n                     Pat {\n                         span,\n                         kind: Box::new(PatKind::AscribeUserType {\n                             subpattern: pattern,\n                             ascription: Ascription {\n+                                annotation,\n                                 /// Note that use `Contravariant` here. See the\n                                 /// `variance` field documentation for details.\n                                 variance: ty::Variance::Contravariant,\n-                                user_ty,\n-                                user_ty_span: span,\n                             },\n                         }),\n                         ty: const_.ty(),\n@@ -645,7 +651,7 @@ impl<'tcx, T: PatternFoldable<'tcx>> PatternFoldable<'tcx> for Option<T> {\n     }\n }\n \n-macro_rules! CloneImpls {\n+macro_rules! ClonePatternFoldableImpls {\n     (<$lt_tcx:tt> $($ty:ty),+) => {\n         $(\n             impl<$lt_tcx> PatternFoldable<$lt_tcx> for $ty {\n@@ -657,11 +663,11 @@ macro_rules! CloneImpls {\n     }\n }\n \n-CloneImpls! { <'tcx>\n+ClonePatternFoldableImpls! { <'tcx>\n     Span, Field, Mutability, Symbol, hir::HirId, usize, ty::Const<'tcx>,\n     Region<'tcx>, Ty<'tcx>, BindingMode, AdtDef<'tcx>,\n     SubstsRef<'tcx>, &'tcx GenericArg<'tcx>, UserType<'tcx>,\n-    UserTypeProjection, PatTyProj<'tcx>\n+    UserTypeProjection, CanonicalUserTypeAnnotation<'tcx>\n }\n \n impl<'tcx> PatternFoldable<'tcx> for FieldPat<'tcx> {\n@@ -694,14 +700,10 @@ impl<'tcx> PatternFoldable<'tcx> for PatKind<'tcx> {\n             PatKind::Wild => PatKind::Wild,\n             PatKind::AscribeUserType {\n                 ref subpattern,\n-                ascription: Ascription { variance, ref user_ty, user_ty_span },\n+                ascription: Ascription { ref annotation, variance },\n             } => PatKind::AscribeUserType {\n                 subpattern: subpattern.fold_with(folder),\n-                ascription: Ascription {\n-                    user_ty: user_ty.fold_with(folder),\n-                    variance,\n-                    user_ty_span,\n-                },\n+                ascription: Ascription { annotation: annotation.fold_with(folder), variance },\n             },\n             PatKind::Binding { mutability, name, mode, var, ty, ref subpattern, is_primary } => {\n                 PatKind::Binding {"}, {"sha": "ee8e21781480cb79761bd59b9dd319c1f2ecf423", "filename": "src/test/mir-opt/address_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir?ref=e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "patch": "@@ -1,36 +1,36 @@\n // MIR for `address_of_reborrow` after SimplifyCfg-initial\n \n | User Type Annotations\n-| 0: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) } at $DIR/address-of.rs:7:5: 7:18\n-| 1: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) } at $DIR/address-of.rs:9:5: 9:25\n-| 2: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) } at $DIR/address-of.rs:13:12: 13:20\n-| 3: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) } at $DIR/address-of.rs:13:12: 13:20\n-| 4: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) } at $DIR/address-of.rs:14:12: 14:28\n-| 5: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) } at $DIR/address-of.rs:14:12: 14:28\n-| 6: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) } at $DIR/address-of.rs:15:12: 15:27\n-| 7: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) } at $DIR/address-of.rs:15:12: 15:27\n-| 8: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) } at $DIR/address-of.rs:16:12: 16:24\n-| 9: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) } at $DIR/address-of.rs:16:12: 16:24\n-| 10: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) } at $DIR/address-of.rs:18:5: 18:18\n-| 11: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) } at $DIR/address-of.rs:20:5: 20:25\n-| 12: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) } at $DIR/address-of.rs:23:12: 23:20\n-| 13: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) } at $DIR/address-of.rs:23:12: 23:20\n-| 14: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) } at $DIR/address-of.rs:24:12: 24:28\n-| 15: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) } at $DIR/address-of.rs:24:12: 24:28\n-| 16: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) } at $DIR/address-of.rs:25:12: 25:27\n-| 17: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) } at $DIR/address-of.rs:25:12: 25:27\n-| 18: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) } at $DIR/address-of.rs:26:12: 26:24\n-| 19: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) } at $DIR/address-of.rs:26:12: 26:24\n-| 20: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*mut ^0) } at $DIR/address-of.rs:28:5: 28:16\n-| 21: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*mut dyn std::marker::Send) } at $DIR/address-of.rs:30:5: 30:23\n-| 22: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*mut ^0) } at $DIR/address-of.rs:33:12: 33:18\n-| 23: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*mut ^0) } at $DIR/address-of.rs:33:12: 33:18\n-| 24: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32; 10]) } at $DIR/address-of.rs:34:12: 34:26\n-| 25: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32; 10]) } at $DIR/address-of.rs:34:12: 34:26\n-| 26: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*mut dyn std::marker::Send) } at $DIR/address-of.rs:35:12: 35:25\n-| 27: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*mut dyn std::marker::Send) } at $DIR/address-of.rs:35:12: 35:25\n-| 28: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32]) } at $DIR/address-of.rs:36:12: 36:22\n-| 29: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32]) } at $DIR/address-of.rs:36:12: 36:22\n+| 0: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address-of.rs:7:5: 7:18, inferred_ty: *const [i32; 10]\n+| 1: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address-of.rs:9:5: 9:25, inferred_ty: *const dyn std::marker::Send\n+| 2: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address-of.rs:13:12: 13:20, inferred_ty: *const [i32; 10]\n+| 3: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address-of.rs:13:12: 13:20, inferred_ty: *const [i32; 10]\n+| 4: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) }, span: $DIR/address-of.rs:14:12: 14:28, inferred_ty: *const [i32; 10]\n+| 5: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) }, span: $DIR/address-of.rs:14:12: 14:28, inferred_ty: *const [i32; 10]\n+| 6: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address-of.rs:15:12: 15:27, inferred_ty: *const dyn std::marker::Send\n+| 7: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address-of.rs:15:12: 15:27, inferred_ty: *const dyn std::marker::Send\n+| 8: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) }, span: $DIR/address-of.rs:16:12: 16:24, inferred_ty: *const [i32]\n+| 9: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) }, span: $DIR/address-of.rs:16:12: 16:24, inferred_ty: *const [i32]\n+| 10: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address-of.rs:18:5: 18:18, inferred_ty: *const [i32; 10]\n+| 11: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address-of.rs:20:5: 20:25, inferred_ty: *const dyn std::marker::Send\n+| 12: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address-of.rs:23:12: 23:20, inferred_ty: *const [i32; 10]\n+| 13: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address-of.rs:23:12: 23:20, inferred_ty: *const [i32; 10]\n+| 14: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) }, span: $DIR/address-of.rs:24:12: 24:28, inferred_ty: *const [i32; 10]\n+| 15: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) }, span: $DIR/address-of.rs:24:12: 24:28, inferred_ty: *const [i32; 10]\n+| 16: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address-of.rs:25:12: 25:27, inferred_ty: *const dyn std::marker::Send\n+| 17: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address-of.rs:25:12: 25:27, inferred_ty: *const dyn std::marker::Send\n+| 18: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) }, span: $DIR/address-of.rs:26:12: 26:24, inferred_ty: *const [i32]\n+| 19: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) }, span: $DIR/address-of.rs:26:12: 26:24, inferred_ty: *const [i32]\n+| 20: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*mut ^0) }, span: $DIR/address-of.rs:28:5: 28:16, inferred_ty: *mut [i32; 10]\n+| 21: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*mut dyn std::marker::Send) }, span: $DIR/address-of.rs:30:5: 30:23, inferred_ty: *mut dyn std::marker::Send\n+| 22: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*mut ^0) }, span: $DIR/address-of.rs:33:12: 33:18, inferred_ty: *mut [i32; 10]\n+| 23: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*mut ^0) }, span: $DIR/address-of.rs:33:12: 33:18, inferred_ty: *mut [i32; 10]\n+| 24: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32; 10]) }, span: $DIR/address-of.rs:34:12: 34:26, inferred_ty: *mut [i32; 10]\n+| 25: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32; 10]) }, span: $DIR/address-of.rs:34:12: 34:26, inferred_ty: *mut [i32; 10]\n+| 26: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*mut dyn std::marker::Send) }, span: $DIR/address-of.rs:35:12: 35:25, inferred_ty: *mut dyn std::marker::Send\n+| 27: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*mut dyn std::marker::Send) }, span: $DIR/address-of.rs:35:12: 35:25, inferred_ty: *mut dyn std::marker::Send\n+| 28: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32]) }, span: $DIR/address-of.rs:36:12: 36:22, inferred_ty: *mut [i32]\n+| 29: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32]) }, span: $DIR/address-of.rs:36:12: 36:22, inferred_ty: *mut [i32]\n |\n fn address_of_reborrow() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/address-of.rs:3:26: 3:26"}, {"sha": "a63a94b2ab5997c1d949b240de72e98888e6fc72", "filename": "src/test/mir-opt/basic_assignment.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir?ref=e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "patch": "@@ -1,8 +1,8 @@\n // MIR for `main` after SimplifyCfg-initial\n \n | User Type Annotations\n-| 0: Canonical { max_universe: U0, variables: [], value: Ty(std::option::Option<std::boxed::Box<u32>>) } at $DIR/basic_assignment.rs:18:17: 18:33\n-| 1: Canonical { max_universe: U0, variables: [], value: Ty(std::option::Option<std::boxed::Box<u32>>) } at $DIR/basic_assignment.rs:18:17: 18:33\n+| 0: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(std::option::Option<std::boxed::Box<u32>>) }, span: $DIR/basic_assignment.rs:18:17: 18:33, inferred_ty: std::option::Option<std::boxed::Box<u32>>\n+| 1: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(std::option::Option<std::boxed::Box<u32>>) }, span: $DIR/basic_assignment.rs:18:17: 18:33, inferred_ty: std::option::Option<std::boxed::Box<u32>>\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/basic_assignment.rs:10:11: 10:11"}, {"sha": "7e966b21bedd7fba6689e08e87968143851ef961", "filename": "src/test/mir-opt/issue_72181_1.main.mir_map.0.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir?ref=e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "patch": "@@ -1,8 +1,8 @@\n // MIR for `main` 0 mir_map\n \n | User Type Annotations\n-| 0: Canonical { max_universe: U0, variables: [], value: Ty(Void) } at $DIR/issue-72181-1.rs:16:12: 16:16\n-| 1: Canonical { max_universe: U0, variables: [], value: Ty(Void) } at $DIR/issue-72181-1.rs:16:12: 16:16\n+| 0: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(Void) }, span: $DIR/issue-72181-1.rs:16:12: 16:16, inferred_ty: Void\n+| 1: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(Void) }, span: $DIR/issue-72181-1.rs:16:12: 16:16, inferred_ty: Void\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/issue-72181-1.rs:15:11: 15:11"}, {"sha": "5bf8655fcecdc3a4725a1de9e8342b832c3cc27c", "filename": "src/test/mir-opt/receiver_ptr_mutability.main.mir_map.0.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir?ref=e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "patch": "@@ -1,10 +1,10 @@\n // MIR for `main` 0 mir_map\n \n | User Type Annotations\n-| 0: Canonical { max_universe: U0, variables: [], value: Ty(*mut Test) } at $DIR/receiver-ptr-mutability.rs:14:14: 14:23\n-| 1: Canonical { max_universe: U0, variables: [], value: Ty(*mut Test) } at $DIR/receiver-ptr-mutability.rs:14:14: 14:23\n-| 2: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }], value: Ty(&&&&*mut Test) } at $DIR/receiver-ptr-mutability.rs:18:18: 18:31\n-| 3: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }], value: Ty(&&&&*mut Test) } at $DIR/receiver-ptr-mutability.rs:18:18: 18:31\n+| 0: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut Test) }, span: $DIR/receiver-ptr-mutability.rs:14:14: 14:23, inferred_ty: *mut Test\n+| 1: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut Test) }, span: $DIR/receiver-ptr-mutability.rs:14:14: 14:23, inferred_ty: *mut Test\n+| 2: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }], value: Ty(&&&&*mut Test) }, span: $DIR/receiver-ptr-mutability.rs:18:18: 18:31, inferred_ty: &&&&*mut Test\n+| 3: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }], value: Ty(&&&&*mut Test) }, span: $DIR/receiver-ptr-mutability.rs:18:18: 18:31, inferred_ty: &&&&*mut Test\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/receiver-ptr-mutability.rs:13:11: 13:11"}, {"sha": "1836249efdb2aa563cb5d78bbdf1bd9ba8c88521", "filename": "src/test/ui/hr-subtype/placeholder-pattern-fail.nll.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.nll.stderr?ref=e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "patch": "@@ -0,0 +1,37 @@\n+error[E0308]: mismatched types\n+  --> $DIR/placeholder-pattern-fail.rs:9:12\n+   |\n+LL |     let _: for<'a, 'b> fn(Inv<'a>, Inv<'b>) = sub;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected fn pointer `for<'a, 'b> fn(Inv<'a>, Inv<'b>)`\n+              found fn pointer `for<'a> fn(Inv<'a>, Inv<'a>)`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/placeholder-pattern-fail.rs:9:12\n+   |\n+LL |     let _: for<'a, 'b> fn(Inv<'a>, Inv<'b>) = sub;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected fn pointer `for<'a, 'b> fn(Inv<'a>, Inv<'b>)`\n+              found fn pointer `for<'a> fn(Inv<'a>, Inv<'a>)`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/placeholder-pattern-fail.rs:14:13\n+   |\n+LL | fn simple1<'c>(x: (&'c i32,)) {\n+   |            -- lifetime `'c` defined here\n+LL |     let _x: (&'static i32,) = x;\n+   |             ^^^^^^^^^^^^^^^ type annotation requires that `'c` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/placeholder-pattern-fail.rs:19:12\n+   |\n+LL | fn simple2<'c>(x: (&'c i32,)) {\n+   |            -- lifetime `'c` defined here\n+LL |     let _: (&'static i32,) = x;\n+   |            ^^^^^^^^^^^^^^^ type annotation requires that `'c` must outlive `'static`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "3b5b075cb582e450dbdf66bd1fade1a9c8e1b556", "filename": "src/test/ui/hr-subtype/placeholder-pattern-fail.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.rs?ref=e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "patch": "@@ -0,0 +1,27 @@\n+// Check that incorrect higher ranked subtyping\n+// causes an error.\n+struct Inv<'a>(fn(&'a ()) -> &'a ());\n+fn hr_subtype<'c>(f: for<'a, 'b> fn(Inv<'a>, Inv<'a>)) {\n+    // ok\n+    let _: for<'a> fn(Inv<'a>, Inv<'a>) = f;\n+    let sub: for<'a> fn(Inv<'a>, Inv<'a>) = f;\n+    // no\n+    let _: for<'a, 'b> fn(Inv<'a>, Inv<'b>) = sub;\n+    //~^ ERROR mismatched types\n+}\n+\n+fn simple1<'c>(x: (&'c i32,)) {\n+    let _x: (&'static i32,) = x;\n+    //~^ ERROR mismatched types\n+}\n+\n+fn simple2<'c>(x: (&'c i32,)) {\n+    let _: (&'static i32,) = x;\n+    //~^ ERROR mismatched types\n+}\n+\n+fn main() {\n+    hr_subtype(|_, _| {});\n+    simple1((&3,));\n+    simple2((&3,));\n+}"}, {"sha": "7bd5308052b0fcb06fa23523f2f5b8d568c335f3", "filename": "src/test/ui/hr-subtype/placeholder-pattern-fail.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.stderr?ref=e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "patch": "@@ -0,0 +1,42 @@\n+error[E0308]: mismatched types\n+  --> $DIR/placeholder-pattern-fail.rs:9:47\n+   |\n+LL |     let _: for<'a, 'b> fn(Inv<'a>, Inv<'b>) = sub;\n+   |                                               ^^^ one type is more general than the other\n+   |\n+   = note: expected fn pointer `for<'a, 'b> fn(Inv<'a>, Inv<'b>)`\n+              found fn pointer `for<'a> fn(Inv<'a>, Inv<'a>)`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/placeholder-pattern-fail.rs:14:31\n+   |\n+LL |     let _x: (&'static i32,) = x;\n+   |                               ^ lifetime mismatch\n+   |\n+   = note: expected tuple `(&'static i32,)`\n+              found tuple `(&'c i32,)`\n+note: the lifetime `'c` as defined here...\n+  --> $DIR/placeholder-pattern-fail.rs:13:12\n+   |\n+LL | fn simple1<'c>(x: (&'c i32,)) {\n+   |            ^^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error[E0308]: mismatched types\n+  --> $DIR/placeholder-pattern-fail.rs:19:30\n+   |\n+LL |     let _: (&'static i32,) = x;\n+   |                              ^ lifetime mismatch\n+   |\n+   = note: expected tuple `(&'static i32,)`\n+              found tuple `(&'c i32,)`\n+note: the lifetime `'c` as defined here...\n+  --> $DIR/placeholder-pattern-fail.rs:18:12\n+   |\n+LL | fn simple2<'c>(x: (&'c i32,)) {\n+   |            ^^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "061e66e54d2f442541b8fe8cdf2da5a8916845de", "filename": "src/test/ui/hr-subtype/placeholder-pattern.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern.rs?ref=e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+// Check that higher ranked subtyping correctly works when using\n+// placeholder patterns.\n+fn hr_subtype<'c>(f: for<'a, 'b> fn(&'a (), &'b ())) {\n+    let _: for<'a> fn(&'a (), &'a ()) = f;\n+    let _: for<'a, 'b> fn(&'a (), &'b ()) = f;\n+    let _: for<'a> fn(&'a (), &'c ()) = f;\n+    let _: fn(&'c (), &'c ()) = f;\n+}\n+\n+fn simple<'c>(x: (&'static i32,)) {\n+    let _: (&'c i32,) = x;\n+}\n+\n+fn main() {\n+    hr_subtype(|_, _| {});\n+    simple((&3,));\n+}"}, {"sha": "9becdab918675421892411e22ace66da55d051d6", "filename": "src/test/ui/lifetimes/re-empty-in-error.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.nll.stderr?ref=e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "patch": "@@ -0,0 +1,10 @@\n+error: higher-ranked lifetime error\n+  --> $DIR/re-empty-in-error.rs:8:5\n+   |\n+LL |     foo(&10);\n+   |     ^^^^^^^^\n+   |\n+   = note: could not prove for<'b, 'r> &'b (): 'r\n+\n+error: aborting due to previous error\n+"}, {"sha": "41c3718592deecf9cbb23867662beda645b9f61a", "filename": "src/test/ui/lifetimes/re-empty-in-error.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.rs?ref=e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "patch": "@@ -0,0 +1,10 @@\n+// We didn't have a single test mentioning\n+// `ReEmpty` and this test changes that.\n+fn foo<'a>(_a: &'a u32) where for<'b> &'b (): 'a {\n+    //~^ NOTE type must outlive the empty lifetime as required by this binding\n+}\n+\n+fn main() {\n+    foo(&10);\n+    //~^ ERROR the type `&'b ()` does not fulfill the required lifetime\n+}"}, {"sha": "227e3ca613961a165c1bf635b49169339375d12f", "filename": "src/test/ui/lifetimes/re-empty-in-error.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.stderr?ref=e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "patch": "@@ -0,0 +1,15 @@\n+error[E0477]: the type `&'b ()` does not fulfill the required lifetime\n+  --> $DIR/re-empty-in-error.rs:8:5\n+   |\n+LL |     foo(&10);\n+   |     ^^^\n+   |\n+note: type must outlive the empty lifetime as required by this binding\n+  --> $DIR/re-empty-in-error.rs:3:47\n+   |\n+LL | fn foo<'a>(_a: &'a u32) where for<'b> &'b (): 'a {\n+   |                                               ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0477`."}, {"sha": "ad4b8dcfde4325e8f7c0cfb6eacf32cb628e9166", "filename": "src/test/ui/nll/issue-57280-1-flipped.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fui%2Fnll%2Fissue-57280-1-flipped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fui%2Fnll%2Fissue-57280-1-flipped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57280-1-flipped.rs?ref=e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "patch": "@@ -0,0 +1,23 @@\n+// This test should compile, as the lifetimes\n+// in matches don't really matter.\n+//\n+// We currently use contravariance when checking the\n+// type of match arms.\n+\n+trait Foo<'a> {\n+    const C: &'a u32;\n+}\n+\n+impl<'a, T> Foo<'a> for T {\n+    const C: &'a u32 = &22;\n+}\n+\n+fn foo<'a>(x: &'static u32) {\n+    match x {\n+        <() as Foo<'a>>::C => { }\n+        //~^ ERROR lifetime may not live long enough\n+        &_ => { }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "7a2135a2ade837bce45d05242798d7ea953b87b2", "filename": "src/test/ui/nll/issue-57280-1-flipped.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fui%2Fnll%2Fissue-57280-1-flipped.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fui%2Fnll%2Fissue-57280-1-flipped.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57280-1-flipped.stderr?ref=e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-57280-1-flipped.rs:17:9\n+   |\n+LL | fn foo<'a>(x: &'static u32) {\n+   |        -- lifetime `'a` defined here\n+LL |     match x {\n+LL |         <() as Foo<'a>>::C => { }\n+   |         ^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "811832848d9dd24f5206e3d160841e4fee7af808", "filename": "src/test/ui/type-alias-impl-trait/cross_inference_pattern_bug.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.rs?ref=e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "patch": "@@ -1,24 +1,8 @@\n-// known-bug\n-// failure-status: 101\n-// compile-flags: --edition=2021 --crate-type=lib\n-// rustc-env:RUST_BACKTRACE=0\n-\n-// normalize-stderr-test \"thread 'rustc' panicked.*\" -> \"thread 'rustc' panicked\"\n-// normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n-// normalize-stderr-test \"\\nerror: internal compiler error.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"note:.*unexpectedly panicked.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"note: we would appreciate a bug report.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"note: compiler flags.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"note: rustc.*running on.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"#.*\\n\" -> \"\"\n-// normalize-stderr-test \".*delayed.*\\n\" -> \"\"\n-\n-// tracked in https://github.com/rust-lang/rust/issues/96572\n-\n+// compile-flags: --edition=2021\n #![feature(type_alias_impl_trait)]\n \n fn main() {\n-    type T = impl Copy;\n+    type T = impl Copy; //~ ERROR unconstrained opaque type\n     let foo: T = (1u32, 2u32);\n     let (a, b): (u32, u32) = foo;\n }"}, {"sha": "03b172e6de5706f8dcf6e1c38e289bed1df6f022", "filename": "src/test/ui/type-alias-impl-trait/cross_inference_pattern_bug.stderr", "status": "modified", "additions": 6, "deletions": 28, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e52e7115c7477bbc257c44447bb7eccbcfe9cfb2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.stderr?ref=e52e7115c7477bbc257c44447bb7eccbcfe9cfb2", "patch": "@@ -1,32 +1,10 @@\n-error: internal compiler error: no errors encountered even though `delay_span_bug` issued\n-\n-error: internal compiler error: broken MIR in DefId(0:3 ~ cross_inference_pattern_bug[646d]::main) ((_1.0: u32)): can't project out of PlaceTy { ty: main::T, variant_index: None }\n-  --> $DIR/cross_inference_pattern_bug.rs:23:10\n-   |\n-LL |     let (a, b): (u32, u32) = foo;\n-   |          ^\n-   |\n-\n-error: internal compiler error: TyKind::Error constructed but no error reported\n-   |\n-\n-error: internal compiler error: TyKind::Error constructed but no error reported\n+error: unconstrained opaque type\n+  --> $DIR/cross_inference_pattern_bug.rs:5:14\n    |\n-\n-error: internal compiler error: broken MIR in DefId(0:3 ~ cross_inference_pattern_bug[646d]::main) ((_1.1: u32)): can't project out of PlaceTy { ty: main::T, variant_index: None }\n-  --> $DIR/cross_inference_pattern_bug.rs:23:13\n-   |\n-LL |     let (a, b): (u32, u32) = foo;\n-   |             ^\n-   |\n-\n-error: internal compiler error: TyKind::Error constructed but no error reported\n-   |\n-\n-error: internal compiler error: TyKind::Error constructed but no error reported\n+LL |     type T = impl Copy;\n+   |              ^^^^^^^^^\n    |\n+   = note: `T` must be used in combination with a concrete type within the same module\n \n-thread 'rustc' panicked\n+error: aborting due to previous error\n \n-query stack during panic:\n-end of query stack"}]}