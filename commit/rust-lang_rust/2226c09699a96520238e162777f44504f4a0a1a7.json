{"sha": "2226c09699a96520238e162777f44504f4a0a1a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMjZjMDk2OTlhOTY1MjAyMzhlMTYyNzc3ZjQ0NTA0ZjRhMGExYTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-12T06:10:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-12T06:10:19Z"}, "message": "Auto merge of #59536 - Zoxc:the-arena, r=eddyb\n\nIntroduce an arena type which may be used to allocate a list of types with destructors\n\nYou can also specify that you want deserializers for `&'tcx [T]` and `&'tcx T` for a type in the list, which will allocate those using the arena.\n\nBased on https://github.com/rust-lang/rust/pull/59517 and https://github.com/rust-lang/rust/pull/59533. Look at the last commit for the interesting changes.\n\nAn alternative to https://github.com/rust-lang/rust/pull/56448. cc @michaelwoerister @eddyb\n\nr? @oli-obk", "tree": {"sha": "4d6ea3edf6cf11285e81b6174449c650db12ad1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d6ea3edf6cf11285e81b6174449c650db12ad1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2226c09699a96520238e162777f44504f4a0a1a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2226c09699a96520238e162777f44504f4a0a1a7", "html_url": "https://github.com/rust-lang/rust/commit/2226c09699a96520238e162777f44504f4a0a1a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2226c09699a96520238e162777f44504f4a0a1a7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0369e6c539a3085179c066ab1f789eb89cb4aed5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0369e6c539a3085179c066ab1f789eb89cb4aed5", "html_url": "https://github.com/rust-lang/rust/commit/0369e6c539a3085179c066ab1f789eb89cb4aed5"}, {"sha": "223f1c7d1f65caf4071ba072b55247f21ac4a04c", "url": "https://api.github.com/repos/rust-lang/rust/commits/223f1c7d1f65caf4071ba072b55247f21ac4a04c", "html_url": "https://github.com/rust-lang/rust/commit/223f1c7d1f65caf4071ba072b55247f21ac4a04c"}], "stats": {"total": 313, "additions": 288, "deletions": 25}, "files": [{"sha": "e9751a23f121897540a1b5d1bc75f3d9bddbbafc", "filename": "src/librustc/arena.rs", "status": "added", "additions": 206, "deletions": 0, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=2226c09699a96520238e162777f44504f4a0a1a7", "patch": "@@ -0,0 +1,206 @@\n+use arena::{TypedArena, DroplessArena};\n+use std::mem;\n+use std::ptr;\n+use std::slice;\n+use std::cell::RefCell;\n+use std::marker::PhantomData;\n+use smallvec::SmallVec;\n+\n+#[macro_export]\n+macro_rules! arena_types {\n+    ($macro:path, $args:tt, $tcx:lifetime) => (\n+        $macro!($args, [\n+            [] vtable_method: Option<(\n+                rustc::hir::def_id::DefId,\n+                rustc::ty::subst::SubstsRef<$tcx>\n+            )>,\n+            [few] mir_keys: rustc::util::nodemap::DefIdSet,\n+            [decode] specialization_graph: rustc::traits::specialization_graph::Graph,\n+        ], $tcx);\n+    )\n+}\n+\n+macro_rules! arena_for_type {\n+    ([][$ty:ty]) => {\n+        TypedArena<$ty>\n+    };\n+    ([few $(, $attrs:ident)*][$ty:ty]) => {\n+        PhantomData<$ty>\n+    };\n+    ([$ignore:ident $(, $attrs:ident)*]$args:tt) => {\n+        arena_for_type!([$($attrs),*]$args)\n+    };\n+}\n+\n+macro_rules! declare_arena {\n+    ([], [$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n+        #[derive(Default)]\n+        pub struct Arena<$tcx> {\n+            dropless: DroplessArena,\n+            drop: DropArena,\n+            $($name: arena_for_type!($a[$ty]),)*\n+        }\n+    }\n+}\n+\n+macro_rules! which_arena_for_type {\n+    ([][$arena:expr]) => {\n+        Some($arena)\n+    };\n+    ([few$(, $attrs:ident)*][$arena:expr]) => {\n+        None\n+    };\n+    ([$ignore:ident$(, $attrs:ident)*]$args:tt) => {\n+        which_arena_for_type!([$($attrs),*]$args)\n+    };\n+}\n+\n+macro_rules! impl_arena_allocatable {\n+    ([], [$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n+        $(\n+            impl ArenaAllocatable for $ty {}\n+            unsafe impl<$tcx> ArenaField<$tcx> for $ty {\n+                #[inline]\n+                fn arena<'a>(_arena: &'a Arena<$tcx>) -> Option<&'a TypedArena<Self>> {\n+                    which_arena_for_type!($a[&_arena.$name])\n+                }\n+            }\n+        )*\n+    }\n+}\n+\n+arena_types!(declare_arena, [], 'tcx);\n+\n+arena_types!(impl_arena_allocatable, [], 'tcx);\n+\n+pub trait ArenaAllocatable {}\n+\n+impl<T: Copy> ArenaAllocatable for T {}\n+\n+pub unsafe trait ArenaField<'tcx>: Sized {\n+    /// Returns a specific arena to allocate from.\n+    /// If None is returned, the DropArena will be used.\n+    fn arena<'a>(arena: &'a Arena<'tcx>) -> Option<&'a TypedArena<Self>>;\n+}\n+\n+unsafe impl<'tcx, T> ArenaField<'tcx> for T {\n+    #[inline]\n+    default fn arena<'a>(_: &'a Arena<'tcx>) -> Option<&'a TypedArena<Self>> {\n+        panic!()\n+    }\n+}\n+\n+impl<'tcx> Arena<'tcx> {\n+    #[inline]\n+    pub fn alloc<T: ArenaAllocatable>(&self, value: T) -> &mut T {\n+        if !mem::needs_drop::<T>() {\n+            return self.dropless.alloc(value);\n+        }\n+        match <T as ArenaField<'tcx>>::arena(self) {\n+            Some(arena) => arena.alloc(value),\n+            None => unsafe { self.drop.alloc(value) },\n+        }\n+    }\n+\n+    pub fn alloc_from_iter<\n+        T: ArenaAllocatable,\n+        I: IntoIterator<Item = T>\n+    >(\n+        &'a self,\n+        iter: I\n+    ) -> &'a mut [T] {\n+        if !mem::needs_drop::<T>() {\n+            return self.dropless.alloc_from_iter(iter);\n+        }\n+        match <T as ArenaField<'tcx>>::arena(self) {\n+            Some(arena) => arena.alloc_from_iter(iter),\n+            None => unsafe { self.drop.alloc_from_iter(iter) },\n+        }\n+    }\n+}\n+\n+/// Calls the destructor for an object when dropped.\n+struct DropType {\n+    drop_fn: unsafe fn(*mut u8),\n+    obj: *mut u8,\n+}\n+\n+unsafe fn drop_for_type<T>(to_drop: *mut u8) {\n+    std::ptr::drop_in_place(to_drop as *mut T)\n+}\n+\n+impl Drop for DropType {\n+    fn drop(&mut self) {\n+        unsafe {\n+            (self.drop_fn)(self.obj)\n+        }\n+    }\n+}\n+\n+/// An arena which can be used to allocate any type.\n+/// Allocating in this arena is unsafe since the type system\n+/// doesn't know which types it contains. In order to\n+/// allocate safely, you must store a PhantomData<T>\n+/// alongside this arena for each type T you allocate.\n+#[derive(Default)]\n+struct DropArena {\n+    /// A list of destructors to run when the arena drops.\n+    /// Ordered so `destructors` gets dropped before the arena\n+    /// since its destructor can reference memory in the arena.\n+    destructors: RefCell<Vec<DropType>>,\n+    arena: DroplessArena,\n+}\n+\n+impl DropArena {\n+    #[inline]\n+    unsafe fn alloc<T>(&self, object: T) -> &mut T {\n+        let mem = self.arena.alloc_raw(\n+            mem::size_of::<T>(),\n+            mem::align_of::<T>()\n+        ) as *mut _ as *mut T;\n+        // Write into uninitialized memory.\n+        ptr::write(mem, object);\n+        let result = &mut *mem;\n+        // Record the destructor after doing the allocation as that may panic\n+        // and would cause `object`'s destuctor to run twice if it was recorded before\n+        self.destructors.borrow_mut().push(DropType {\n+            drop_fn: drop_for_type::<T>,\n+            obj: result as *mut T as *mut u8,\n+        });\n+        result\n+    }\n+\n+    #[inline]\n+    unsafe fn alloc_from_iter<T, I: IntoIterator<Item = T>>(&self, iter: I) -> &mut [T] {\n+        let mut vec: SmallVec<[_; 8]> = iter.into_iter().collect();\n+        if vec.is_empty() {\n+            return &mut [];\n+        }\n+        let len = vec.len();\n+\n+        let start_ptr = self.arena.alloc_raw(\n+            len.checked_mul(mem::size_of::<T>()).unwrap(),\n+            mem::align_of::<T>()\n+        ) as *mut _ as *mut T;\n+\n+        let mut destructors = self.destructors.borrow_mut();\n+        // Reserve space for the destructors so we can't panic while adding them\n+        destructors.reserve(len);\n+\n+        // Move the content to the arena by copying it and then forgetting\n+        // the content of the SmallVec\n+        vec.as_ptr().copy_to_nonoverlapping(start_ptr, len);\n+        mem::forget(vec.drain());\n+\n+        // Record the destructors after doing the allocation as that may panic\n+        // and would cause `object`'s destuctor to run twice if it was recorded before\n+        for i in 0..len {\n+            destructors.push(DropType {\n+                drop_fn: drop_for_type::<T>,\n+                obj: start_ptr.offset(i as isize) as *mut u8,\n+            });\n+        }\n+\n+        slice::from_raw_parts_mut(start_ptr, len)\n+    }\n+}"}, {"sha": "c5c2cbfcb89404cdc1c568cd86525d02854f9f4a", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=2226c09699a96520238e162777f44504f4a0a1a7", "patch": "@@ -40,6 +40,7 @@\n #![cfg_attr(windows, feature(libc))]\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]\n+#![feature(overlapping_marker_traits)]\n #![feature(extern_types)]\n #![feature(nll)]\n #![feature(non_exhaustive)]\n@@ -103,6 +104,8 @@ pub mod diagnostics;\n #[macro_use]\n pub mod query;\n \n+#[macro_use]\n+pub mod arena;\n pub mod cfg;\n pub mod dep_graph;\n pub mod hir;"}, {"sha": "d0ad2c90668a5e0f942f96da9e63d9cbc2675219", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=2226c09699a96520238e162777f44504f4a0a1a7", "patch": "@@ -84,7 +84,7 @@ rustc_queries! {\n         /// Set of all the `DefId`s in this crate that have MIR associated with\n         /// them. This includes all the body owners, but also things like struct\n         /// constructors.\n-        query mir_keys(_: CrateNum) -> Lrc<DefIdSet> {\n+        query mir_keys(_: CrateNum) -> &'tcx DefIdSet {\n             desc { \"getting a list of all mir_keys\" }\n         }\n \n@@ -515,7 +515,7 @@ rustc_queries! {\n \n     Other {\n         query vtable_methods(key: ty::PolyTraitRef<'tcx>)\n-                            -> Lrc<Vec<Option<(DefId, SubstsRef<'tcx>)>>> {\n+                            -> &'tcx [Option<(DefId, SubstsRef<'tcx>)>] {\n             no_force\n             desc { |tcx| \"finding all methods for trait {}\", tcx.def_path_str(key.def_id()) }\n         }\n@@ -538,8 +538,7 @@ rustc_queries! {\n         query trait_impls_of(key: DefId) -> Lrc<ty::trait_def::TraitImpls> {\n             desc { |tcx| \"trait impls of `{}`\", tcx.def_path_str(key) }\n         }\n-        query specialization_graph_of(_: DefId)\n-            -> Lrc<specialization_graph::Graph> {}\n+        query specialization_graph_of(_: DefId) -> &'tcx specialization_graph::Graph {}\n         query is_object_safe(key: DefId) -> bool {\n             desc { |tcx| \"determine object safety of trait `{}`\", tcx.def_path_str(key) }\n         }"}, {"sha": "d91c08b070a1a62399ec7e27686b893116524a77", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=2226c09699a96520238e162777f44504f4a0a1a7", "patch": "@@ -26,7 +26,6 @@ use crate::infer::{InferCtxt, SuppressRegionErrors};\n use crate::infer::outlives::env::OutlivesEnvironment;\n use crate::middle::region;\n use crate::mir::interpret::ErrorHandled;\n-use rustc_data_structures::sync::Lrc;\n use rustc_macros::HashStable;\n use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n@@ -984,11 +983,11 @@ fn substitute_normalize_and_test_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx\n fn vtable_methods<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     trait_ref: ty::PolyTraitRef<'tcx>)\n-    -> Lrc<Vec<Option<(DefId, SubstsRef<'tcx>)>>>\n+    -> &'tcx [Option<(DefId, SubstsRef<'tcx>)>]\n {\n     debug!(\"vtable_methods({:?})\", trait_ref);\n \n-    Lrc::new(\n+    tcx.arena.alloc_from_iter(\n         supertraits(tcx, trait_ref).flat_map(move |trait_ref| {\n             let trait_methods = tcx.associated_items(trait_ref.def_id())\n                 .filter(|item| item.kind == ty::AssociatedKind::Method);\n@@ -1039,7 +1038,7 @@ fn vtable_methods<'a, 'tcx>(\n \n                 Some((def_id, substs))\n             })\n-        }).collect()\n+        })\n     )\n }\n "}, {"sha": "384a5862cde0cda4d1305d6a7c26dc0458f26038", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=2226c09699a96520238e162777f44504f4a0a1a7", "patch": "@@ -16,7 +16,6 @@ use crate::infer::{InferCtxt, InferOk};\n use crate::lint;\n use crate::traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause, TraitEngine};\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::sync::Lrc;\n use syntax_pos::DUMMY_SP;\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::ty::{self, TyCtxt, TypeFoldable};\n@@ -289,7 +288,7 @@ fn fulfill_implication<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n pub(super) fn specialization_graph_provider<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     trait_id: DefId,\n-) -> Lrc<specialization_graph::Graph> {\n+) -> &'tcx specialization_graph::Graph {\n     let mut sg = specialization_graph::Graph::new();\n \n     let mut trait_impls = tcx.all_impls(trait_id);\n@@ -383,7 +382,7 @@ pub(super) fn specialization_graph_provider<'a, 'tcx>(\n         }\n     }\n \n-    Lrc::new(sg)\n+    tcx.arena.alloc(sg)\n }\n \n /// Recovers the \"impl X for Y\" signature from `impl_def_id` and returns it as a"}, {"sha": "dae1518d722db2d1d4b466c5cc4624844bd3d6e4", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=2226c09699a96520238e162777f44504f4a0a1a7", "patch": "@@ -7,7 +7,6 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n use crate::traits;\n use crate::ty::{self, TyCtxt, TypeFoldable};\n use crate::ty::fast_reject::{self, SimplifiedType};\n-use rustc_data_structures::sync::Lrc;\n use syntax::ast::Ident;\n use crate::util::captures::Captures;\n use crate::util::nodemap::{DefIdMap, FxHashMap};\n@@ -439,13 +438,13 @@ impl<'a, 'gcx, 'tcx> Node {\n     }\n }\n \n-pub struct Ancestors {\n+pub struct Ancestors<'tcx> {\n     trait_def_id: DefId,\n-    specialization_graph: Lrc<Graph>,\n+    specialization_graph: &'tcx Graph,\n     current_source: Option<Node>,\n }\n \n-impl Iterator for Ancestors {\n+impl Iterator for Ancestors<'_> {\n     type Item = Node;\n     fn next(&mut self) -> Option<Node> {\n         let cur = self.current_source.take();\n@@ -476,7 +475,7 @@ impl<T> NodeItem<T> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> Ancestors {\n+impl<'a, 'gcx, 'tcx> Ancestors<'gcx> {\n     /// Search the items from the given ancestors, returning each definition\n     /// with the given name and the given kind.\n     // FIXME(#35870): avoid closures being unexported due to `impl Trait`.\n@@ -509,10 +508,10 @@ impl<'a, 'gcx, 'tcx> Ancestors {\n \n /// Walk up the specialization ancestors of a given impl, starting with that\n /// impl itself.\n-pub fn ancestors(tcx: TyCtxt<'_, '_, '_>,\n+pub fn ancestors(tcx: TyCtxt<'_, 'tcx, '_>,\n                  trait_def_id: DefId,\n                  start_from_impl: DefId)\n-                 -> Ancestors {\n+                 -> Ancestors<'tcx> {\n     let specialization_graph = tcx.specialization_graph_of(trait_def_id);\n     Ancestors {\n         trait_def_id,"}, {"sha": "a76cc3dfdec02a1686729d652d79cfc2f835b93e", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=2226c09699a96520238e162777f44504f4a0a1a7", "patch": "@@ -6,6 +6,7 @@\n // The functionality in here is shared between persisting to crate metadata and\n // persisting to incr. comp. caches.\n \n+use crate::arena::ArenaAllocatable;\n use crate::hir::def_id::{DefId, CrateNum};\n use crate::infer::canonical::{CanonicalVarInfo, CanonicalVarInfos};\n use rustc_data_structures::fx::FxHashMap;\n@@ -130,6 +131,26 @@ pub trait TyDecoder<'a, 'tcx: 'a>: Decoder {\n     }\n }\n \n+#[inline]\n+pub fn decode_arena_allocable<'a, 'tcx, D, T: ArenaAllocatable + Decodable>(\n+    decoder: &mut D\n+) -> Result<&'tcx T, D::Error>\n+    where D: TyDecoder<'a, 'tcx>,\n+          'tcx: 'a,\n+{\n+    Ok(decoder.tcx().arena.alloc(Decodable::decode(decoder)?))\n+}\n+\n+#[inline]\n+pub fn decode_arena_allocable_slice<'a, 'tcx, D, T: ArenaAllocatable + Decodable>(\n+    decoder: &mut D\n+) -> Result<&'tcx [T], D::Error>\n+    where D: TyDecoder<'a, 'tcx>,\n+          'tcx: 'a,\n+{\n+    Ok(decoder.tcx().arena.alloc_from_iter(<Vec<T> as Decodable>::decode(decoder)?))\n+}\n+\n #[inline]\n pub fn decode_cnum<'a, 'tcx, D>(decoder: &mut D) -> Result<CrateNum, D::Error>\n     where D: TyDecoder<'a, 'tcx>,\n@@ -273,6 +294,39 @@ macro_rules! __impl_decoder_methods {\n     }\n }\n \n+#[macro_export]\n+macro_rules! impl_arena_allocatable_decoder {\n+    ([]$args:tt) => {};\n+    ([decode $(, $attrs:ident)*]\n+     [[$DecoderName:ident [$($typaram:tt),*]], [$name:ident: $ty:ty], $tcx:lifetime]) => {\n+        impl<$($typaram),*> SpecializedDecoder<&$tcx $ty> for $DecoderName<$($typaram),*> {\n+            #[inline]\n+            fn specialized_decode(&mut self) -> Result<&$tcx $ty, Self::Error> {\n+                decode_arena_allocable(self)\n+            }\n+        }\n+\n+        impl<$($typaram),*> SpecializedDecoder<&$tcx [$ty]> for $DecoderName<$($typaram),*> {\n+            #[inline]\n+            fn specialized_decode(&mut self) -> Result<&$tcx [$ty], Self::Error> {\n+                decode_arena_allocable_slice(self)\n+            }\n+        }\n+    };\n+    ([$ignore:ident $(, $attrs:ident)*]$args:tt) => {\n+        impl_arena_allocatable_decoder!([$($attrs),*]$args);\n+    };\n+}\n+\n+#[macro_export]\n+macro_rules! impl_arena_allocatable_decoders {\n+    ($args:tt, [$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n+        $(\n+            impl_arena_allocatable_decoder!($a [$args, [$name: $ty], $tcx]);\n+        )*\n+    }\n+}\n+\n #[macro_export]\n macro_rules! implement_ty_decoder {\n     ($DecoderName:ident <$($typaram:tt),*>) => {\n@@ -322,6 +376,8 @@ macro_rules! implement_ty_decoder {\n             // the caller to pick any lifetime for 'tcx, including 'static,\n             // by using the unspecialized proxies to them.\n \n+            arena_types!(impl_arena_allocatable_decoders, [$DecoderName [$($typaram),*]], 'tcx);\n+\n             impl<$($typaram),*> SpecializedDecoder<CrateNum>\n             for $DecoderName<$($typaram),*> {\n                 fn specialized_decode(&mut self) -> Result<CrateNum, Self::Error> {"}, {"sha": "7dc4dee3fbf9164901f569377af4552690911141", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=2226c09699a96520238e162777f44504f4a0a1a7", "patch": "@@ -1,5 +1,6 @@\n //! Type context book-keeping.\n \n+use crate::arena::Arena;\n use crate::dep_graph::DepGraph;\n use crate::dep_graph::{self, DepNode, DepConstructor};\n use crate::session::Session;\n@@ -1003,6 +1004,7 @@ impl<'gcx> Deref for TyCtxt<'_, 'gcx, '_> {\n }\n \n pub struct GlobalCtxt<'tcx> {\n+    pub arena: WorkerLocal<Arena<'tcx>>,\n     global_arenas: &'tcx WorkerLocal<GlobalArenas<'tcx>>,\n     global_interners: CtxtInterners<'tcx>,\n \n@@ -1262,6 +1264,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         GlobalCtxt {\n             sess: s,\n             cstore,\n+            arena: WorkerLocal::new(|_| Arena::default()),\n             global_arenas: &arenas.global,\n             global_interners: interners,\n             dep_graph,"}, {"sha": "58f21893de143699069bfad6bcf6572c7fcfdc7e", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=2226c09699a96520238e162777f44504f4a0a1a7", "patch": "@@ -67,7 +67,7 @@ impl<'a, 'gcx, 'tcx> TraitDef {\n \n     pub fn ancestors(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                      of_impl: DefId)\n-                     -> specialization_graph::Ancestors {\n+                     -> specialization_graph::Ancestors<'gcx> {\n         specialization_graph::ancestors(tcx, self.def_id, of_impl)\n     }\n }"}, {"sha": "a451f2afb4663deee7ef7334247240b6d3403dd0", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=2226c09699a96520238e162777f44504f4a0a1a7", "patch": "@@ -1,4 +1,3 @@\n-use rustc_data_structures::sync::Lrc;\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::{Size, Align, LayoutOf};\n use rustc::mir::interpret::{Scalar, Pointer, EvalResult, PointerArithmetic};\n@@ -35,7 +34,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n \n             self.tcx.vtable_methods(trait_ref)\n         } else {\n-            Lrc::new(Vec::new())\n+            &[]\n         };\n \n         let layout = self.layout_of(ty)?;"}, {"sha": "27cb87f5dcaa0f2afcc3d871d1c48ab7c309710a", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=2226c09699a96520238e162777f44504f4a0a1a7", "patch": "@@ -8,7 +8,6 @@ use rustc::ty::steal::Steal;\n use rustc::hir;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::util::nodemap::DefIdSet;\n-use rustc_data_structures::sync::Lrc;\n use std::borrow::Cow;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -59,7 +58,7 @@ fn is_mir_available<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> boo\n /// Finds the full set of `DefId`s within the current crate that have\n /// MIR associated with them.\n fn mir_keys<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, krate: CrateNum)\n-                      -> Lrc<DefIdSet> {\n+                      -> &'tcx DefIdSet {\n     assert_eq!(krate, LOCAL_CRATE);\n \n     let mut set = DefIdSet::default();\n@@ -94,7 +93,7 @@ fn mir_keys<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, krate: CrateNum)\n         set: &mut set,\n     }.as_deep_visitor());\n \n-    Lrc::new(set)\n+    tcx.arena.alloc(set)\n }\n \n fn mir_built<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Mir<'tcx>> {"}, {"sha": "8ef8c2b4c0a22b92f62691b1d2864627c6fed4f1", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2226c09699a96520238e162777f44504f4a0a1a7/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=2226c09699a96520238e162777f44504f4a0a1a7", "patch": "@@ -911,4 +911,5 @@ impl<T: UseSpecializedDecodable> Decodable for T {\n impl<'a, T: ?Sized + Encodable> UseSpecializedEncodable for &'a T {}\n impl<T: ?Sized + Encodable> UseSpecializedEncodable for Box<T> {}\n impl<T: Decodable> UseSpecializedDecodable for Box<T> {}\n-\n+impl<'a, T: Decodable> UseSpecializedDecodable for &'a T {}\n+impl<'a, T: Decodable> UseSpecializedDecodable for &'a [T] {}"}]}