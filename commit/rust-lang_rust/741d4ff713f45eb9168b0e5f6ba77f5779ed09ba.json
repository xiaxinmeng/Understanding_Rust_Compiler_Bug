{"sha": "741d4ff713f45eb9168b0e5f6ba77f5779ed09ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MWQ0ZmY3MTNmNDVlYjkxNjhiMGU1ZjZiYTc3ZjU3NzllZDA5YmE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-11T13:03:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-11T13:03:42Z"}, "message": "Rollup merge of #66472 - GuillaumeGomez:show-coverage-json, r=ollie27\n\n--show-coverage json\n\nThe purpose of this change is to be able to use it as a tool in docs.rs in order to provide some more stats to crates' owners. Eventually even create a badge or something along the line.\n\nr? @QuietMisdreavus", "tree": {"sha": "97844425dd068940442fa50c40ce87b105acc507", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97844425dd068940442fa50c40ce87b105acc507"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeaOGuCRBK7hj4Ov3rIwAAdHIIAH52W8VzHb+mEw2Z8COZ0uKC\nq/yqW/ybviy6g74cA+ElDRPiXzmeA8Dj1tEupGkzey8GatzpLdPqwWDxot4N//kx\nOfmHj3rZaib6mFForRgNcGXknFB951TfEqDGGF4OLnDjx67fbbUO/Glv86M5nvyJ\ndVUVjKLSuh7blBXurQh6PKnKEznUhW6/i9fSHp/tGpSuGSbIKb8XwQR0OE7WurQN\nn5mkBvlLaM83wWwIZVhSyqyRtdm3JtBfWVwagRXKgug6ilXwzT4/d3+kVT2xap7H\nqJiMzf27OtTNh5X8ZF4WfedkA8el6WrU3y/W6R7KkWIfbE/m49rg4Tx3vZTlqrM=\n=rCdS\n-----END PGP SIGNATURE-----\n", "payload": "tree 97844425dd068940442fa50c40ce87b105acc507\nparent 303d8aff6092709edd4dbd35b1c88e9aa40bf6d8\nparent b6466273ba3d019433a8665fb337bfedeaf209ef\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1583931822 +0100\ncommitter GitHub <noreply@github.com> 1583931822 +0100\n\nRollup merge of #66472 - GuillaumeGomez:show-coverage-json, r=ollie27\n\n--show-coverage json\n\nThe purpose of this change is to be able to use it as a tool in docs.rs in order to provide some more stats to crates' owners. Eventually even create a badge or something along the line.\n\nr? @QuietMisdreavus\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba", "html_url": "https://github.com/rust-lang/rust/commit/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "html_url": "https://github.com/rust-lang/rust/commit/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8"}, {"sha": "b6466273ba3d019433a8665fb337bfedeaf209ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6466273ba3d019433a8665fb337bfedeaf209ef", "html_url": "https://github.com/rust-lang/rust/commit/b6466273ba3d019433a8665fb337bfedeaf209ef"}], "stats": {"total": 162, "additions": 137, "deletions": 25}, "files": [{"sha": "58c8a7d82bfb5ff8d9e5f55329ce5a200728b8f9", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 57, "deletions": 8, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=741d4ff713f45eb9168b0e5f6ba77f5779ed09ba", "patch": "@@ -1,4 +1,5 @@\n use std::collections::BTreeMap;\n+use std::convert::TryFrom;\n use std::ffi::OsStr;\n use std::fmt;\n use std::path::PathBuf;\n@@ -24,6 +25,33 @@ use crate::opts;\n use crate::passes::{self, Condition, DefaultPassOption};\n use crate::theme;\n \n+#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n+pub enum OutputFormat {\n+    Json,\n+    Html,\n+}\n+\n+impl OutputFormat {\n+    pub fn is_json(&self) -> bool {\n+        match self {\n+            OutputFormat::Json => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n+impl TryFrom<&str> for OutputFormat {\n+    type Error = String;\n+\n+    fn try_from(value: &str) -> Result<Self, Self::Error> {\n+        match value {\n+            \"json\" => Ok(OutputFormat::Json),\n+            \"html\" => Ok(OutputFormat::Html),\n+            _ => Err(format!(\"unknown output format `{}`\", value)),\n+        }\n+    }\n+}\n+\n /// Configuration options for rustdoc.\n #[derive(Clone)]\n pub struct Options {\n@@ -115,6 +143,8 @@ pub struct Options {\n     pub crate_version: Option<String>,\n     /// Collected options specific to outputting final pages.\n     pub render_options: RenderOptions,\n+    /// Output format rendering (used only for \"show-coverage\" option for the moment)\n+    pub output_format: Option<OutputFormat>,\n }\n \n impl fmt::Debug for Options {\n@@ -425,14 +455,6 @@ impl Options {\n             }\n         }\n \n-        match matches.opt_str(\"w\").as_ref().map(|s| &**s) {\n-            Some(\"html\") | None => {}\n-            Some(s) => {\n-                diag.struct_err(&format!(\"unknown output format: {}\", s)).emit();\n-                return Err(1);\n-            }\n-        }\n-\n         let index_page = matches.opt_str(\"index-page\").map(|s| PathBuf::from(&s));\n         if let Some(ref index_page) = index_page {\n             if !index_page.is_file() {\n@@ -469,6 +491,29 @@ impl Options {\n             }\n         };\n \n+        let output_format = match matches.opt_str(\"output-format\") {\n+            Some(s) => match OutputFormat::try_from(s.as_str()) {\n+                Ok(o) => {\n+                    if o.is_json() && !show_coverage {\n+                        diag.struct_err(\"json output format isn't supported for doc generation\")\n+                            .emit();\n+                        return Err(1);\n+                    } else if !o.is_json() && show_coverage {\n+                        diag.struct_err(\n+                            \"html output format isn't supported for the --show-coverage option\",\n+                        )\n+                        .emit();\n+                        return Err(1);\n+                    }\n+                    Some(o)\n+                }\n+                Err(e) => {\n+                    diag.struct_err(&e).emit();\n+                    return Err(1);\n+                }\n+            },\n+            None => None,\n+        };\n         let crate_name = matches.opt_str(\"crate-name\");\n         let proc_macro_crate = crate_types.contains(&CrateType::ProcMacro);\n         let playground_url = matches.opt_str(\"playground-url\");\n@@ -553,6 +598,7 @@ impl Options {\n                 generate_search_filter,\n                 generate_redirect_pages,\n             },\n+            output_format,\n         })\n     }\n \n@@ -568,6 +614,9 @@ fn check_deprecated_options(matches: &getopts::Matches, diag: &rustc_errors::Han\n \n     for flag in deprecated_flags.iter() {\n         if matches.opt_present(flag) {\n+            if *flag == \"output-format\" && matches.opt_present(\"show-coverage\") {\n+                continue;\n+            }\n             let mut err =\n                 diag.struct_warn(&format!(\"the '{}' flag is considered deprecated\", flag));\n             err.warn("}, {"sha": "b9ae3d53afc042b3b7d5750680f1b860e1ba19fa", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=741d4ff713f45eb9168b0e5f6ba77f5779ed09ba", "patch": "@@ -228,6 +228,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         mut manual_passes,\n         display_warnings,\n         render_options,\n+        output_format,\n         ..\n     } = options;\n \n@@ -385,6 +386,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n \n                 let mut renderinfo = RenderInfo::default();\n                 renderinfo.access_levels = access_levels;\n+                renderinfo.output_format = output_format;\n \n                 let mut ctxt = DocContext {\n                     tcx,"}, {"sha": "2d1e3c29055cf96ba00cf38dedb59e8be1515b52", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=741d4ff713f45eb9168b0e5f6ba77f5779ed09ba", "patch": "@@ -60,7 +60,7 @@ use serde::ser::SerializeSeq;\n use serde::{Serialize, Serializer};\n \n use crate::clean::{self, AttributesExt, Deprecation, GetDefId, SelfTy};\n-use crate::config::RenderOptions;\n+use crate::config::{OutputFormat, RenderOptions};\n use crate::docfs::{DocFS, ErrorStorage, PathError};\n use crate::doctree;\n use crate::html::escape::Escape;\n@@ -270,6 +270,7 @@ pub struct RenderInfo {\n     pub deref_trait_did: Option<DefId>,\n     pub deref_mut_trait_did: Option<DefId>,\n     pub owned_box_did: Option<DefId>,\n+    pub output_format: Option<OutputFormat>,\n }\n \n // Helper structs for rendering items/sidebars and carrying along contextual"}, {"sha": "4198369eca8f55eed32237f160aa70de389bee7e", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=741d4ff713f45eb9168b0e5f6ba77f5779ed09ba", "patch": "@@ -139,6 +139,7 @@ impl Cache {\n             deref_trait_did,\n             deref_mut_trait_did,\n             owned_box_did,\n+            ..\n         } = renderinfo;\n \n         let external_paths ="}, {"sha": "f48224512ba4f9b54b45edc88f684dad9afe8aef", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 38, "deletions": 15, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=741d4ff713f45eb9168b0e5f6ba77f5779ed09ba", "patch": "@@ -1,11 +1,14 @@\n use crate::clean;\n+use crate::config::OutputFormat;\n use crate::core::DocContext;\n use crate::fold::{self, DocFolder};\n use crate::passes::Pass;\n \n use rustc_ast::attr;\n use rustc_span::symbol::sym;\n use rustc_span::FileName;\n+use serde::Serialize;\n+use serde_json;\n \n use std::collections::BTreeMap;\n use std::ops;\n@@ -16,16 +19,16 @@ pub const CALCULATE_DOC_COVERAGE: Pass = Pass {\n     description: \"counts the number of items with and without documentation\",\n };\n \n-fn calculate_doc_coverage(krate: clean::Crate, _: &DocContext<'_>) -> clean::Crate {\n-    let mut calc = CoverageCalculator::default();\n+fn calculate_doc_coverage(krate: clean::Crate, ctx: &DocContext<'_>) -> clean::Crate {\n+    let mut calc = CoverageCalculator::new();\n     let krate = calc.fold_crate(krate);\n \n-    calc.print_results();\n+    calc.print_results(ctx.renderinfo.borrow().output_format);\n \n     krate\n }\n \n-#[derive(Default, Copy, Clone)]\n+#[derive(Default, Copy, Clone, Serialize)]\n struct ItemCount {\n     total: u64,\n     with_docs: u64,\n@@ -64,13 +67,41 @@ impl ops::AddAssign for ItemCount {\n     }\n }\n \n-#[derive(Default)]\n struct CoverageCalculator {\n     items: BTreeMap<FileName, ItemCount>,\n }\n \n+fn limit_filename_len(filename: String) -> String {\n+    let nb_chars = filename.chars().count();\n+    if nb_chars > 35 {\n+        \"...\".to_string()\n+            + &filename[filename.char_indices().nth(nb_chars - 32).map(|x| x.0).unwrap_or(0)..]\n+    } else {\n+        filename\n+    }\n+}\n+\n impl CoverageCalculator {\n-    fn print_results(&self) {\n+    fn new() -> CoverageCalculator {\n+        CoverageCalculator { items: Default::default() }\n+    }\n+\n+    fn to_json(&self) -> String {\n+        serde_json::to_string(\n+            &self\n+                .items\n+                .iter()\n+                .map(|(k, v)| (k.to_string(), v))\n+                .collect::<BTreeMap<String, &ItemCount>>(),\n+        )\n+        .expect(\"failed to convert JSON data to string\")\n+    }\n+\n+    fn print_results(&self, output_format: Option<OutputFormat>) {\n+        if output_format.map(|o| o.is_json()).unwrap_or_else(|| false) {\n+            println!(\"{}\", self.to_json());\n+            return;\n+        }\n         let mut total = ItemCount::default();\n \n         fn print_table_line() {\n@@ -93,15 +124,7 @@ impl CoverageCalculator {\n \n         for (file, &count) in &self.items {\n             if let Some(percentage) = count.percentage() {\n-                let mut name = file.to_string();\n-                // if a filename is too long, shorten it so we don't blow out the table\n-                // FIXME(misdreavus): this needs to count graphemes, and probably also track\n-                // double-wide characters...\n-                if name.len() > 35 {\n-                    name = \"...\".to_string() + &name[name.len() - 32..];\n-                }\n-\n-                print_table_record(&name, count, percentage);\n+                print_table_record(&limit_filename_len(file.to_string()), count, percentage);\n \n                 total += count;\n             }"}, {"sha": "181cb4c5061a7fc2db405b7d88abd99abf22bcbd", "filename": "src/test/rustdoc-ui/coverage/html.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fhtml.rs?ref=741d4ff713f45eb9168b0e5f6ba77f5779ed09ba", "patch": "@@ -0,0 +1,4 @@\n+// compile-flags:-Z unstable-options --output-format html --show-coverage\n+\n+/// Foo\n+pub struct Xo;"}, {"sha": "adca375d4bce59e41eb070d91634b618f3080966", "filename": "src/test/rustdoc-ui/coverage/html.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fhtml.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fhtml.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fhtml.stderr?ref=741d4ff713f45eb9168b0e5f6ba77f5779ed09ba", "patch": "@@ -0,0 +1,2 @@\n+error: html output format isn't supported for the --show-coverage option\n+"}, {"sha": "b1220b32e9194a2a6408bd117976d72b9abd9a19", "filename": "src/test/rustdoc-ui/coverage/json.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fjson.rs?ref=741d4ff713f45eb9168b0e5f6ba77f5779ed09ba", "patch": "@@ -0,0 +1,27 @@\n+// build-pass\n+// compile-flags:-Z unstable-options --output-format json --show-coverage\n+\n+pub mod foo {\n+    /// Hello!\n+    pub struct Foo;\n+    /// Bar\n+    pub enum Bar { A }\n+}\n+\n+/// X\n+pub struct X;\n+\n+/// Bar\n+pub mod bar {\n+    /// bar\n+    pub struct Bar;\n+    /// X\n+    pub enum X { Y }\n+}\n+\n+/// yolo\n+pub enum Yolo { X }\n+\n+pub struct Xo<T: Clone> {\n+    x: T,\n+}"}, {"sha": "63b22a7d94b00f5073577418ceb03fe85b51a8b6", "filename": "src/test/rustdoc-ui/coverage/json.stdout", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fjson.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fjson.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fjson.stdout?ref=741d4ff713f45eb9168b0e5f6ba77f5779ed09ba", "patch": "@@ -0,0 +1 @@\n+{\"$DIR/json.rs\":{\"total\":13,\"with_docs\":7}}"}, {"sha": "680c32c92af4b190a710c8ebb6899bd39a9e4f63", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/741d4ff713f45eb9168b0e5f6ba77f5779ed09ba/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=741d4ff713f45eb9168b0e5f6ba77f5779ed09ba", "patch": "@@ -3204,7 +3204,9 @@ impl<'test> TestCx<'test> {\n         let json = cflags.contains(\"--error-format json\")\n             || cflags.contains(\"--error-format pretty-json\")\n             || cflags.contains(\"--error-format=json\")\n-            || cflags.contains(\"--error-format=pretty-json\");\n+            || cflags.contains(\"--error-format=pretty-json\")\n+            || cflags.contains(\"--output-format json\")\n+            || cflags.contains(\"--output-format=json\");\n \n         let mut normalized = output.to_string();\n "}]}