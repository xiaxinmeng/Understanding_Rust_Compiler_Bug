{"sha": "cb2d52282fb3c226c370a86c9111892384bbcb21", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMmQ1MjI4MmZiM2MyMjZjMzcwYTg2YzkxMTE4OTIzODRiYmNiMjE=", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2021-04-16T02:38:32Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2021-04-16T02:38:32Z"}, "message": "rename StyledBuffer.text to lines", "tree": {"sha": "3679d00206127769c5f6f35604e80df35b709175", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3679d00206127769c5f6f35604e80df35b709175"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb2d52282fb3c226c370a86c9111892384bbcb21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb2d52282fb3c226c370a86c9111892384bbcb21", "html_url": "https://github.com/rust-lang/rust/commit/cb2d52282fb3c226c370a86c9111892384bbcb21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb2d52282fb3c226c370a86c9111892384bbcb21/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "247d74f207633a5aeceb1e0ede878427465c5093", "url": "https://api.github.com/repos/rust-lang/rust/commits/247d74f207633a5aeceb1e0ede878427465c5093", "html_url": "https://github.com/rust-lang/rust/commit/247d74f207633a5aeceb1e0ede878427465c5093"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "fb9575b290a0debc6f58b34196edc597dc143d75", "filename": "compiler/rustc_errors/src/styled_buffer.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cb2d52282fb3c226c370a86c9111892384bbcb21/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb2d52282fb3c226c370a86c9111892384bbcb21/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs?ref=cb2d52282fb3c226c370a86c9111892384bbcb21", "patch": "@@ -4,7 +4,7 @@ use crate::snippet::{Style, StyledString};\n \n #[derive(Debug)]\n pub struct StyledBuffer {\n-    text: Vec<Vec<StyledChar>>,\n+    lines: Vec<Vec<StyledChar>>,\n }\n \n #[derive(Debug)]\n@@ -27,22 +27,22 @@ impl Default for StyledChar {\n \n impl StyledBuffer {\n     pub fn new() -> StyledBuffer {\n-        StyledBuffer { text: vec![] }\n+        StyledBuffer { lines: vec![] }\n     }\n \n     /// Returns content of `StyledBuffer` splitted by lines and line styles\n     pub fn render(&self) -> Vec<Vec<StyledString>> {\n         // Tabs are assumed to have been replaced by spaces in calling code.\n-        debug_assert!(self.text.iter().all(|r| !r.iter().any(|sc| sc.chr == '\\t')));\n+        debug_assert!(self.lines.iter().all(|r| !r.iter().any(|sc| sc.chr == '\\t')));\n \n         let mut output: Vec<Vec<StyledString>> = vec![];\n         let mut styled_vec: Vec<StyledString> = vec![];\n \n-        for styled_row in &self.text {\n+        for styled_line in &self.lines {\n             let mut current_style = Style::NoStyle;\n             let mut current_text = String::new();\n \n-            for sc in styled_row {\n+            for sc in styled_line {\n                 if sc.style != current_style {\n                     if !current_text.is_empty() {\n                         styled_vec.push(StyledString { text: current_text, style: current_style });\n@@ -66,8 +66,8 @@ impl StyledBuffer {\n     }\n \n     fn ensure_lines(&mut self, line: usize) {\n-        while line >= self.text.len() {\n-            self.text.push(vec![]);\n+        while line >= self.lines.len() {\n+            self.lines.push(vec![]);\n         }\n     }\n \n@@ -76,15 +76,15 @@ impl StyledBuffer {\n     /// and fills last line with spaces and `Style::NoStyle` style\n     pub fn putc(&mut self, line: usize, col: usize, chr: char, style: Style) {\n         self.ensure_lines(line);\n-        if col < self.text[line].len() {\n-            self.text[line][col] = StyledChar::new(chr, style);\n+        if col < self.lines[line].len() {\n+            self.lines[line][col] = StyledChar::new(chr, style);\n         } else {\n-            let mut i = self.text[line].len();\n+            let mut i = self.lines[line].len();\n             while i < col {\n-                self.text[line].push(StyledChar::default());\n+                self.lines[line].push(StyledChar::default());\n                 i += 1;\n             }\n-            self.text[line].push(StyledChar::new(chr, style));\n+            self.lines[line].push(StyledChar::new(chr, style));\n         }\n     }\n \n@@ -105,10 +105,10 @@ impl StyledBuffer {\n         self.ensure_lines(line);\n         let string_len = string.chars().count();\n \n-        if !self.text[line].is_empty() {\n+        if !self.lines[line].is_empty() {\n             // Push the old content over to make room for new content\n             for _ in 0..string_len {\n-                self.text[line].insert(0, StyledChar::default());\n+                self.lines[line].insert(0, StyledChar::default());\n             }\n         }\n \n@@ -118,16 +118,16 @@ impl StyledBuffer {\n     /// For given `line` inserts `string` with `style` after old content of that line,\n     /// adding lines if needed\n     pub fn append(&mut self, line: usize, string: &str, style: Style) {\n-        if line >= self.text.len() {\n+        if line >= self.lines.len() {\n             self.puts(line, 0, string, style);\n         } else {\n-            let col = self.text[line].len();\n+            let col = self.lines[line].len();\n             self.puts(line, col, string, style);\n         }\n     }\n \n     pub fn num_lines(&self) -> usize {\n-        self.text.len()\n+        self.lines.len()\n     }\n \n     /// Set `style` for `line`, `col_start..col_end` range if:\n@@ -150,7 +150,7 @@ impl StyledBuffer {\n     /// 1. That line and column exist in `StyledBuffer`\n     /// 2. `overwrite` is `true` or existing style is `Style::NoStyle` or `Style::Quotation`\n     pub fn set_style(&mut self, line: usize, col: usize, style: Style, overwrite: bool) {\n-        if let Some(ref mut line) = self.text.get_mut(line) {\n+        if let Some(ref mut line) = self.lines.get_mut(line) {\n             if let Some(StyledChar { style: s, .. }) = line.get_mut(col) {\n                 if overwrite || *s == Style::NoStyle || *s == Style::Quotation {\n                     *s = style;"}]}