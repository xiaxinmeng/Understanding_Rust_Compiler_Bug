{"sha": "b015109ba9bce939beef2d3e4fa3597ea0db1f27", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMTUxMDliYTliY2U5MzliZWVmMmQzZTRmYTM1OTdlYTBkYjFmMjc=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-08-30T21:18:49Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-08-30T21:26:04Z"}, "message": "Add documentation to the `Analysis` traits", "tree": {"sha": "95cd10339de7f1dc21de37fc88ad61ce218c9be7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95cd10339de7f1dc21de37fc88ad61ce218c9be7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b015109ba9bce939beef2d3e4fa3597ea0db1f27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b015109ba9bce939beef2d3e4fa3597ea0db1f27", "html_url": "https://github.com/rust-lang/rust/commit/b015109ba9bce939beef2d3e4fa3597ea0db1f27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b015109ba9bce939beef2d3e4fa3597ea0db1f27/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e178a870367259b1f0b68658f4af96010d6ba9a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e178a870367259b1f0b68658f4af96010d6ba9a4", "html_url": "https://github.com/rust-lang/rust/commit/e178a870367259b1f0b68658f4af96010d6ba9a4"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "eefa1395a621b10f888cf36a019b4912c1a34f89", "filename": "compiler/rustc_mir/src/dataflow/framework/mod.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b015109ba9bce939beef2d3e4fa3597ea0db1f27/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b015109ba9bce939beef2d3e4fa3597ea0db1f27/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fmod.rs?ref=b015109ba9bce939beef2d3e4fa3597ea0db1f27", "patch": "@@ -60,9 +60,10 @@ pub use self::visitor::{BorrowckFlowState, BorrowckResults};\n /// This trait specifies the lattice on which this analysis operates (the domain) as well as its\n /// initial value at the entry point of each basic block.\n pub trait AnalysisDomain<'tcx> {\n+    /// The type that holds the dataflow state at any given point in the program.\n     type Domain: Clone + JoinSemiLattice;\n \n-    /// The direction of this analyis. Either `Forward` or `Backward`.\n+    /// The direction of this analysis. Either `Forward` or `Backward`.\n     type Direction: Direction = Forward;\n \n     /// A descriptive name for this analysis. Used only for debugging.\n@@ -71,10 +72,10 @@ pub trait AnalysisDomain<'tcx> {\n     /// suitable as part of a filename.\n     const NAME: &'static str;\n \n+    /// The initial value of the dataflow state upon entry to each basic block.\n     fn bottom_value(&self, body: &mir::Body<'tcx>) -> Self::Domain;\n \n-    /// Mutates the entry set of the `START_BLOCK` to contain the initial state for dataflow\n-    /// analysis.\n+    /// Mutates the initial value of the dataflow state upon entry to the `START_BLOCK`.\n     ///\n     /// For backward analyses, initial state besides the bottom value is not yet supported. Trying\n     /// to mutate the initial state will result in a panic.\n@@ -86,6 +87,21 @@ pub trait AnalysisDomain<'tcx> {\n }\n \n /// A dataflow problem with an arbitrarily complex transfer function.\n+///\n+/// # Convergence\n+///\n+/// When implementing this trait directly (not via [`GenKillAnalysis`]), it's possible to choose a\n+/// transfer function such that the analysis does not reach fixpoint. To guarantee convergence,\n+/// your transfer functions must maintain the following invariant:\n+///\n+/// > If the dataflow state **before** some point in the program changes to be greater\n+/// than the prior state **before** that point, the dataflow state **after** that point must\n+/// also change to be greater than the prior state **after** that point.\n+///\n+/// This invariant guarantees that the dataflow state at a given point in the program increases\n+/// monotonically until fixpoint is reached. Note that this monotonicity requirement only applies\n+/// to the same point in the program at different points in time. The dataflow state at a given\n+/// point in the program may or may not be greater than the state at any preceding point.\n pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     /// Updates the current dataflow state with the effect of evaluating a statement.\n     fn apply_statement_effect("}]}