{"sha": "a4ff220133128f7d4467f3919db579e7b50850c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZmYyMjAxMzMxMjhmN2Q0NDY3ZjM5MTlkYjU3OWU3YjUwODUwYzQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-06T23:57:36Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-07T01:16:25Z"}, "message": "rustdoc: Write links correctly for multi-page docs", "tree": {"sha": "c629e85f0995b8a41c0e9fab85664ae8510688b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c629e85f0995b8a41c0e9fab85664ae8510688b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4ff220133128f7d4467f3919db579e7b50850c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4ff220133128f7d4467f3919db579e7b50850c4", "html_url": "https://github.com/rust-lang/rust/commit/a4ff220133128f7d4467f3919db579e7b50850c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4ff220133128f7d4467f3919db579e7b50850c4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "801b02b25d6ba310ca8a4ee3a319d09a5c57062d", "url": "https://api.github.com/repos/rust-lang/rust/commits/801b02b25d6ba310ca8a4ee3a319d09a5c57062d", "html_url": "https://github.com/rust-lang/rust/commit/801b02b25d6ba310ca8a4ee3a319d09a5c57062d"}], "stats": {"total": 117, "additions": 91, "deletions": 26}, "files": [{"sha": "9c23b21dfc911a862ccbfe6255f74d460742c110", "filename": "src/rustdoc/markdown_index_pass.rs", "status": "modified", "additions": 66, "deletions": 15, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/a4ff220133128f7d4467f3919db579e7b50850c4/src%2Frustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ff220133128f7d4467f3919db579e7b50850c4/src%2Frustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_index_pass.rs?ref=a4ff220133128f7d4467f3919db579e7b50850c4", "patch": "@@ -2,42 +2,68 @@\n \n export mk_pass;\n \n-fn mk_pass() -> pass {\n+fn mk_pass(config: config::config) -> pass {\n     {\n         name: \"markdown_index\",\n-        f: run\n+        f: fn~(srv: astsrv::srv, doc: doc::doc) -> doc::doc {\n+            run(srv, doc, config)\n+        }\n     }\n }\n \n-fn run(_srv: astsrv::srv, doc: doc::doc) -> doc::doc {\n+fn run(\n+    _srv: astsrv::srv,\n+    doc: doc::doc,\n+    config: config::config\n+) -> doc::doc {\n     let fold = fold::fold({\n         fold_mod: fold_mod\n-            with *fold::default_any_fold(())\n+            with *fold::default_any_fold(config)\n     });\n     fold.fold_doc(fold, doc)\n }\n \n-fn fold_mod(fold: fold::fold<()>, doc: doc::moddoc) -> doc::moddoc {\n+fn fold_mod(\n+    fold: fold::fold<config::config>,\n+    doc: doc::moddoc\n+) -> doc::moddoc {\n \n     let doc = fold::default_any_fold_mod(fold, doc);\n \n     {\n-        index: some(build_index(doc))\n+        index: some(build_index(doc, fold.ctxt))\n         with doc\n     }\n }\n \n-fn build_index(doc: doc::moddoc) -> doc::index {\n+fn build_index(\n+    doc: doc::moddoc,\n+    config: config::config\n+) -> doc::index {\n     {\n-        entries: par::anymap(doc.items, item_to_entry)\n+        entries: par::anymap(doc.items) {|item|\n+            item_to_entry(item, config)\n+        }\n     }\n }\n \n-fn item_to_entry(doc: doc::itemtag) -> doc::index_entry {\n+fn item_to_entry(\n+    doc: doc::itemtag,\n+    config: config::config\n+) -> doc::index_entry {\n+    let link = alt doc {\n+      doc::modtag(_) if config.output_style == config::doc_per_mod {\n+        markdown_writer::make_filename(config, doc::itempage(doc))\n+      }\n+      _ {\n+        \"#\" + pandoc_header_id(markdown_pass::header_text(doc))\n+      }\n+    };\n+\n     {\n         kind: markdown_pass::header_kind(doc),\n         name: markdown_pass::header_name(doc),\n-        link: pandoc_header_id(markdown_pass::header_text(doc))\n+        link: link\n     }\n }\n \n@@ -67,26 +93,51 @@ fn pandoc_header_id(header: str) -> str {\n \n #[test]\n fn should_index_mod_contents() {\n-    let doc = test::mk_doc(\"mod a { } fn b() { }\");\n+    let doc = test::mk_doc(\n+        config::doc_per_crate,\n+        \"mod a { } fn b() { }\"\n+    );\n+    assert option::get(doc.cratemod().index).entries[0] == {\n+        kind: \"Module\",\n+        name: \"a\",\n+        link: \"#module-a\"\n+    };\n+    assert option::get(doc.cratemod().index).entries[1] == {\n+        kind: \"Function\",\n+        name: \"b\",\n+        link: \"#function-b\"\n+    };\n+}\n+\n+#[test]\n+fn should_index_mod_contents_multi_page() {\n+    let doc = test::mk_doc(\n+        config::doc_per_mod,\n+        \"mod a { } fn b() { }\"\n+    );\n     assert option::get(doc.cratemod().index).entries[0] == {\n         kind: \"Module\",\n         name: \"a\",\n-        link: \"module-a\"\n+        link: \"a.html\"\n     };\n     assert option::get(doc.cratemod().index).entries[1] == {\n         kind: \"Function\",\n         name: \"b\",\n-        link: \"function-b\"\n+        link: \"#function-b\"\n     };\n }\n \n #[cfg(test)]\n mod test {\n-    fn mk_doc(source: str) -> doc::doc {\n+    fn mk_doc(output_style: config::output_style, source: str) -> doc::doc {\n         astsrv::from_str(source) {|srv|\n+            let config = {\n+                output_style: output_style\n+                with config::default_config(\"whatever\")\n+            };\n             let doc = extract::from_srv(srv, \"\");\n             let doc = path_pass::mk_pass().f(srv, doc);\n-            run(srv, doc)\n+            run(srv, doc, config)\n         }\n     }\n }"}, {"sha": "36eabf63879b62632784bd8e6d2167d6a9cc08c6", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a4ff220133128f7d4467f3919db579e7b50850c4/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ff220133128f7d4467f3919db579e7b50850c4/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=a4ff220133128f7d4467f3919db579e7b50850c4", "patch": "@@ -283,7 +283,7 @@ fn write_index(ctxt: ctxt, index: doc::index) {\n     for entry in index.entries {\n         let header = header_text_(entry.kind, entry.name);\n         let id = entry.link;\n-        ctxt.w.write_line(#fmt(\"* [%s](#%s)\", header, id));\n+        ctxt.w.write_line(#fmt(\"* [%s](%s)\", header, id));\n     }\n     ctxt.w.write_line(\"\");\n }\n@@ -954,6 +954,12 @@ mod test {\n \n     fn create_doc_srv(source: str) -> (astsrv::srv, doc::doc) {\n         astsrv::from_str(source) {|srv|\n+\n+            let config = {\n+                output_style: config::doc_per_crate\n+                with config::default_config(\"whatever\")\n+            };\n+\n             let doc = extract::from_srv(srv, \"\");\n             #debug(\"doc (extract): %?\", doc);\n             let doc = tystr_pass::mk_pass().f(srv, doc);\n@@ -962,7 +968,7 @@ mod test {\n             #debug(\"doc (path): %?\", doc);\n             let doc = attr_pass::mk_pass().f(srv, doc);\n             #debug(\"doc (attr): %?\", doc);\n-            let doc = markdown_index_pass::mk_pass().f(srv, doc);\n+            let doc = markdown_index_pass::mk_pass(config).f(srv, doc);\n             #debug(\"doc (index): %?\", doc);\n             (srv, doc)\n         }"}, {"sha": "809fd24f9e85ba68a44ccd07ed78485d5dd93673", "filename": "src/rustdoc/markdown_writer.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a4ff220133128f7d4467f3919db579e7b50850c4/src%2Frustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ff220133128f7d4467f3919db579e7b50850c4/src%2Frustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_writer.rs?ref=a4ff220133128f7d4467f3919db579e7b50850c4", "patch": "@@ -4,6 +4,7 @@ export writer_factory;\n export writer_util;\n export make_writer_factory;\n export future_writer_factory;\n+export make_filename;\n \n enum writeinstr {\n     write(str),\n@@ -54,7 +55,7 @@ fn markdown_writer(\n     config: config::config,\n     page: doc::page\n ) -> writer {\n-    let filename = make_filename(config, page);\n+    let filename = make_local_filename(config, page);\n     generic_writer {|markdown|\n         write_file(filename, markdown);\n     }\n@@ -66,7 +67,7 @@ fn pandoc_writer(\n ) -> writer {\n     assert option::is_some(config.pandoc_cmd);\n     let pandoc_cmd = option::get(config.pandoc_cmd);\n-    let filename = make_filename(config, page);\n+    let filename = make_local_filename(config, page);\n \n     let pandoc_args = [\n         \"--standalone\",\n@@ -159,12 +160,18 @@ fn generic_writer(process: fn~(markdown: str)) -> writer {\n     }\n }\n \n-fn make_filename(\n+fn make_local_filename(\n     config: config::config,\n     page: doc::page\n ) -> str {\n-    import std::fs;\n+    let filename = make_filename(config, page);\n+    std::fs::connect(config.output_dir, filename)\n+}\n \n+fn make_filename(\n+    config: config::config,\n+    page: doc::page\n+) -> str {\n     let filename = {\n         alt page {\n           doc::cratepage(doc) {\n@@ -185,7 +192,8 @@ fn make_filename(\n       config::markdown { \"md\" }\n       config::pandoc_html { \"html\" }\n     };\n-    fs::connect(config.output_dir, filename + \".\" + ext)\n+\n+    filename + \".\" + ext\n }\n \n #[test]\n@@ -198,7 +206,7 @@ fn should_use_markdown_file_name_based_off_crate() {\n     };\n     let doc = test::mk_doc(\"test\", \"\");\n     let page = doc::cratepage(doc.cratedoc());\n-    let filename = make_filename(config, page);\n+    let filename = make_local_filename(config, page);\n     assert filename == \"output/dir/test.md\";\n }\n \n@@ -212,7 +220,7 @@ fn should_name_html_crate_file_name_index_html_when_doc_per_mod() {\n     };\n     let doc = test::mk_doc(\"\", \"\");\n     let page = doc::cratepage(doc.cratedoc());\n-    let filename = make_filename(config, page);\n+    let filename = make_local_filename(config, page);\n     assert filename == \"output/dir/index.html\";\n }\n \n@@ -227,7 +235,7 @@ fn should_name_mod_file_names_by_path() {\n     let doc = test::mk_doc(\"\", \"mod a { mod b { } }\");\n     let modb = doc.cratemod().mods()[0].mods()[0];\n     let page = doc::itempage(doc::modtag(modb));\n-    let filename = make_filename(config, page);\n+    let filename = make_local_filename(config, page);\n     assert  filename == \"output/dir/a_b.html\";\n }\n "}, {"sha": "3f480940e165776cd5787942997a973a3030e78c", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4ff220133128f7d4467f3919db579e7b50850c4/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ff220133128f7d4467f3919db579e7b50850c4/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=a4ff220133128f7d4467f3919db579e7b50850c4", "patch": "@@ -151,7 +151,7 @@ fn run(config: config::config) {\n             unindent_pass::mk_pass(),\n             sort_item_name_pass::mk_pass(),\n             sort_item_type_pass::mk_pass(),\n-            markdown_index_pass::mk_pass(),\n+            markdown_index_pass::mk_pass(config),\n             page_pass::mk_pass(config.output_style),\n             markdown_pass::mk_pass(\n                 markdown_writer::make_writer_factory(config)"}]}