{"sha": "349259d55f9b006fe871a26eaa2481b4103dc9d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0OTI1OWQ1NWY5YjAwNmZlODcxYTI2ZWFhMjQ4MWI0MTAzZGM5ZDc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-26T23:07:26Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-09-30T18:59:35Z"}, "message": "Stabilize macros in `extern` blocks\n\nAdd some tests for macros in extern blocks, remove duplicate tests", "tree": {"sha": "d8983834200de0cae04652c508dd1af72d1783c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8983834200de0cae04652c508dd1af72d1783c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/349259d55f9b006fe871a26eaa2481b4103dc9d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/349259d55f9b006fe871a26eaa2481b4103dc9d7", "html_url": "https://github.com/rust-lang/rust/commit/349259d55f9b006fe871a26eaa2481b4103dc9d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/349259d55f9b006fe871a26eaa2481b4103dc9d7/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "url": "https://api.github.com/repos/rust-lang/rust/commits/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "html_url": "https://github.com/rust-lang/rust/commit/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26"}], "stats": {"total": 373, "additions": 37, "deletions": 336}, "files": [{"sha": "cf8edf54673164e6d4dbba1adc152841cdedbbe4", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/349259d55f9b006fe871a26eaa2481b4103dc9d7/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349259d55f9b006fe871a26eaa2481b4103dc9d7/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=349259d55f9b006fe871a26eaa2481b4103dc9d7", "patch": "@@ -555,15 +555,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n     }\n \n     fn expand_invoc(&mut self, invoc: Invocation, ext: &SyntaxExtensionKind) -> AstFragment {\n-        let (fragment_kind, span) = (invoc.fragment_kind, invoc.span());\n-        if fragment_kind == AstFragmentKind::ForeignItems && !self.cx.ecfg.macros_in_extern() {\n-            if let SyntaxExtensionKind::NonMacroAttr { .. } = ext {} else {\n-                emit_feature_err(&self.cx.parse_sess, sym::macros_in_extern,\n-                                 span, GateIssue::Language,\n-                                 \"macro invocations in `extern {}` blocks are experimental\");\n-            }\n-        }\n-\n         if self.cx.current_expansion.depth > self.cx.ecfg.recursion_limit {\n             let expn_data = self.cx.current_expansion.id.expn_data();\n             let suggested_limit = self.cx.ecfg.recursion_limit * 2;\n@@ -578,6 +569,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             FatalError.raise();\n         }\n \n+        let (fragment_kind, span) = (invoc.fragment_kind, invoc.span());\n         match invoc.kind {\n             InvocationKind::Bang { mac, .. } => match ext {\n                 SyntaxExtensionKind::Bang(expander) => {\n@@ -1578,9 +1570,6 @@ impl<'feat> ExpansionConfig<'feat> {\n         }\n     }\n \n-    fn macros_in_extern(&self) -> bool {\n-        self.features.map_or(false, |features| features.macros_in_extern)\n-    }\n     fn proc_macro_hygiene(&self) -> bool {\n         self.features.map_or(false, |features| features.proc_macro_hygiene)\n     }"}, {"sha": "cda1ef1436ca1c8ae2161218753c2176339f319f", "filename": "src/libsyntax/feature_gate/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349259d55f9b006fe871a26eaa2481b4103dc9d7/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349259d55f9b006fe871a26eaa2481b4103dc9d7/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs?ref=349259d55f9b006fe871a26eaa2481b4103dc9d7", "patch": "@@ -245,6 +245,8 @@ declare_features! (\n     (accepted, bind_by_move_pattern_guards, \"1.39.0\", Some(15287), None),\n     /// Allows attributes in formal function parameters.\n     (accepted, param_attrs, \"1.39.0\", Some(60406), None),\n+    // Allows macro invocations in `extern {}` blocks.\n+    (accepted, macros_in_extern, \"1.40.0\", Some(49476), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "47ee41f0adc1690b0d0de4e1437ba1906b61c1a1", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/349259d55f9b006fe871a26eaa2481b4103dc9d7/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349259d55f9b006fe871a26eaa2481b4103dc9d7/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=349259d55f9b006fe871a26eaa2481b4103dc9d7", "patch": "@@ -402,9 +402,6 @@ declare_features! (\n     /// Allows infering `'static` outlives requirements (RFC 2093).\n     (active, infer_static_outlives_requirements, \"1.26.0\", Some(54185), None),\n \n-    /// Allows macro invocations in `extern {}` blocks.\n-    (active, macros_in_extern, \"1.27.0\", Some(49476), None),\n-\n     /// Allows accessing fields of unions inside `const` functions.\n     (active, const_fn_union, \"1.27.0\", Some(51909), None),\n "}, {"sha": "6ee33f4ab61f60c90c1db39b43d43d97a99fd569", "filename": "src/test/ui/abi/macros/macros-in-extern.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fabi%2Fmacros%2Fmacros-in-extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fabi%2Fmacros%2Fmacros-in-extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fmacros%2Fmacros-in-extern.stderr?ref=22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "patch": "@@ -1,30 +0,0 @@\n-error[E0658]: macro invocations in `extern {}` blocks are experimental\n-  --> $DIR/macros-in-extern.rs:26:5\n-   |\n-LL |     returns_isize!(rust_get_test_int);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49476\n-   = help: add `#![feature(macros_in_extern)]` to the crate attributes to enable\n-\n-error[E0658]: macro invocations in `extern {}` blocks are experimental\n-  --> $DIR/macros-in-extern.rs:28:5\n-   |\n-LL |     takes_u32_returns_u32!(rust_dbg_extern_identity_u32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49476\n-   = help: add `#![feature(macros_in_extern)]` to the crate attributes to enable\n-\n-error[E0658]: macro invocations in `extern {}` blocks are experimental\n-  --> $DIR/macros-in-extern.rs:30:5\n-   |\n-LL |     emits_nothing!();\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49476\n-   = help: add `#![feature(macros_in_extern)]` to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "27efa44f980323a5948d336d6e88a788d3bf7959", "filename": "src/test/ui/abi/proc-macro/auxiliary/test-macros.rs", "status": "removed", "additions": 0, "deletions": 112, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fabi%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fabi%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs?ref=22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "patch": "@@ -1,112 +0,0 @@\n-// force-host\n-// no-prefer-dynamic\n-\n-// Proc macros commonly used by tests.\n-// `panic`/`print` -> `panic_bang`/`print_bang` to avoid conflicts with standard macros.\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-use proc_macro::TokenStream;\n-\n-// Macro that return empty token stream.\n-\n-#[proc_macro]\n-pub fn empty(_: TokenStream) -> TokenStream {\n-    TokenStream::new()\n-}\n-\n-#[proc_macro_attribute]\n-pub fn empty_attr(_: TokenStream, _: TokenStream) -> TokenStream {\n-    TokenStream::new()\n-}\n-\n-#[proc_macro_derive(Empty, attributes(empty_helper))]\n-pub fn empty_derive(_: TokenStream) -> TokenStream {\n-    TokenStream::new()\n-}\n-\n-// Macro that panics.\n-\n-#[proc_macro]\n-pub fn panic_bang(_: TokenStream) -> TokenStream {\n-    panic!(\"panic-bang\");\n-}\n-\n-#[proc_macro_attribute]\n-pub fn panic_attr(_: TokenStream, _: TokenStream) -> TokenStream {\n-    panic!(\"panic-attr\");\n-}\n-\n-#[proc_macro_derive(Panic, attributes(panic_helper))]\n-pub fn panic_derive(_: TokenStream) -> TokenStream {\n-    panic!(\"panic-derive\");\n-}\n-\n-// Macros that return the input stream.\n-\n-#[proc_macro]\n-pub fn identity(input: TokenStream) -> TokenStream {\n-    input\n-}\n-\n-#[proc_macro_attribute]\n-pub fn identity_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n-    input\n-}\n-\n-#[proc_macro_derive(Identity, attributes(identity_helper))]\n-pub fn identity_derive(input: TokenStream) -> TokenStream {\n-    input\n-}\n-\n-// Macros that iterate and re-collect the input stream.\n-\n-#[proc_macro]\n-pub fn recollect(input: TokenStream) -> TokenStream {\n-    input.into_iter().collect()\n-}\n-\n-#[proc_macro_attribute]\n-pub fn recollect_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n-    input.into_iter().collect()\n-}\n-\n-#[proc_macro_derive(Recollect, attributes(recollect_helper))]\n-pub fn recollect_derive(input: TokenStream) -> TokenStream {\n-    input.into_iter().collect()\n-}\n-\n-// Macros that print their input in the original and re-collected forms (if they differ).\n-\n-fn print_helper(input: TokenStream, kind: &str) -> TokenStream {\n-    let input_display = format!(\"{}\", input);\n-    let input_debug = format!(\"{:#?}\", input);\n-    let recollected = input.into_iter().collect();\n-    let recollected_display = format!(\"{}\", recollected);\n-    let recollected_debug = format!(\"{:#?}\", recollected);\n-    println!(\"PRINT-{} INPUT (DISPLAY): {}\", kind, input_display);\n-    if recollected_display != input_display {\n-        println!(\"PRINT-{} RE-COLLECTED (DISPLAY): {}\", kind, recollected_display);\n-    }\n-    println!(\"PRINT-{} INPUT (DEBUG): {}\", kind, input_debug);\n-    if recollected_debug != input_debug {\n-        println!(\"PRINT-{} RE-COLLECTED (DEBUG): {}\", kind, recollected_debug);\n-    }\n-    recollected\n-}\n-\n-#[proc_macro]\n-pub fn print_bang(input: TokenStream) -> TokenStream {\n-    print_helper(input, \"BANG\")\n-}\n-\n-#[proc_macro_attribute]\n-pub fn print_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n-    print_helper(input, \"ATTR\")\n-}\n-\n-#[proc_macro_derive(Print, attributes(print_helper))]\n-pub fn print_derive(input: TokenStream) -> TokenStream {\n-    print_helper(input, \"DERIVE\")\n-}"}, {"sha": "6049c2aa4482e425866b9ee60fc58137f3746fe3", "filename": "src/test/ui/abi/proc-macro/macros-in-extern.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fabi%2Fproc-macro%2Fmacros-in-extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fabi%2Fproc-macro%2Fmacros-in-extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fproc-macro%2Fmacros-in-extern.stderr?ref=22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "patch": "@@ -1,30 +0,0 @@\n-error[E0658]: macro invocations in `extern {}` blocks are experimental\n-  --> $DIR/macros-in-extern.rs:14:5\n-   |\n-LL |     #[empty_attr]\n-   |     ^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49476\n-   = help: add `#![feature(macros_in_extern)]` to the crate attributes to enable\n-\n-error[E0658]: macro invocations in `extern {}` blocks are experimental\n-  --> $DIR/macros-in-extern.rs:18:5\n-   |\n-LL |     #[identity_attr]\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49476\n-   = help: add `#![feature(macros_in_extern)]` to the crate attributes to enable\n-\n-error[E0658]: macro invocations in `extern {}` blocks are experimental\n-  --> $DIR/macros-in-extern.rs:22:5\n-   |\n-LL |     identity!(fn rust_dbg_extern_identity_u32(arg: u32) -> u32;);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49476\n-   = help: add `#![feature(macros_in_extern)]` to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "125af64fef05c7bb99dea8969773eb7806588037", "filename": "src/test/ui/feature-gates/feature-gate-macros_in_extern.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-macros_in_extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-macros_in_extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-macros_in_extern.rs?ref=22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "patch": "@@ -1,27 +0,0 @@\n-#![feature(decl_macro)]\n-\n-macro_rules! returns_isize(\n-    ($ident:ident) => (\n-        fn $ident() -> isize;\n-    )\n-);\n-\n-macro takes_u32_returns_u32($ident:ident) {\n-    fn $ident (arg: u32) -> u32;\n-}\n-\n-macro_rules! emits_nothing(\n-    () => ()\n-);\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    returns_isize!(rust_get_test_int);\n-    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n-    takes_u32_returns_u32!(rust_dbg_extern_identity_u32);\n-    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n-    emits_nothing!();\n-    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n-}\n-\n-fn main() {}"}, {"sha": "e8b3ab5dda20daddd5e4d2df8552e7738936e0d7", "filename": "src/test/ui/feature-gates/feature-gate-macros_in_extern.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-macros_in_extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-macros_in_extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-macros_in_extern.stderr?ref=22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "patch": "@@ -1,30 +0,0 @@\n-error[E0658]: macro invocations in `extern {}` blocks are experimental\n-  --> $DIR/feature-gate-macros_in_extern.rs:19:5\n-   |\n-LL |     returns_isize!(rust_get_test_int);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49476\n-   = help: add `#![feature(macros_in_extern)]` to the crate attributes to enable\n-\n-error[E0658]: macro invocations in `extern {}` blocks are experimental\n-  --> $DIR/feature-gate-macros_in_extern.rs:21:5\n-   |\n-LL |     takes_u32_returns_u32!(rust_dbg_extern_identity_u32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49476\n-   = help: add `#![feature(macros_in_extern)]` to the crate attributes to enable\n-\n-error[E0658]: macro invocations in `extern {}` blocks are experimental\n-  --> $DIR/feature-gate-macros_in_extern.rs:23:5\n-   |\n-LL |     emits_nothing!();\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49476\n-   = help: add `#![feature(macros_in_extern)]` to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "afdf76b7b580fe27148de3424b699330dec3db5e", "filename": "src/test/ui/macros/issue-54441.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349259d55f9b006fe871a26eaa2481b4103dc9d7/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349259d55f9b006fe871a26eaa2481b4103dc9d7/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.rs?ref=349259d55f9b006fe871a26eaa2481b4103dc9d7", "patch": "@@ -1,5 +1,3 @@\n-#![feature(macros_in_extern)]\n-\n macro_rules! m {\n     () => {\n         let //~ ERROR expected"}, {"sha": "af0ee3ae8eca3a88e173281a1db79af2908d69da", "filename": "src/test/ui/macros/issue-54441.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349259d55f9b006fe871a26eaa2481b4103dc9d7/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/349259d55f9b006fe871a26eaa2481b4103dc9d7/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr?ref=349259d55f9b006fe871a26eaa2481b4103dc9d7", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `crate`, `fn`, `pub`, `static`, or `type`, found `let`\n-  --> $DIR/issue-54441.rs:5:9\n+  --> $DIR/issue-54441.rs:3:9\n    |\n LL |         let\n    |         ^^^ unexpected token"}, {"sha": "28abef5cf4edcf488f785818e79930e92bf85b18", "filename": "src/test/ui/macros/macros-in-extern-rpass.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fmacros%2Fmacros-in-extern-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fmacros%2Fmacros-in-extern-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-in-extern-rpass.rs?ref=22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "patch": "@@ -1,30 +0,0 @@\n-// run-pass\n-// ignore-wasm32\n-\n-#![feature(decl_macro, macros_in_extern)]\n-\n-macro_rules! returns_isize(\n-    ($ident:ident) => (\n-        fn $ident() -> isize;\n-    )\n-);\n-\n-macro takes_u32_returns_u32($ident:ident) {\n-    fn $ident (arg: u32) -> u32;\n-}\n-\n-macro_rules! emits_nothing(\n-    () => ()\n-);\n-\n-fn main() {\n-    assert_eq!(unsafe { rust_get_test_int() }, 1isize);\n-    assert_eq!(unsafe { rust_dbg_extern_identity_u32(0xDEADBEEF) }, 0xDEADBEEFu32);\n-}\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    returns_isize!(rust_get_test_int);\n-    takes_u32_returns_u32!(rust_dbg_extern_identity_u32);\n-    emits_nothing!();\n-}"}, {"sha": "05002ed72c78d4a49f7a1987c52382ad37aeea9b", "filename": "src/test/ui/macros/macros-in-extern.rs", "status": "renamed", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/349259d55f9b006fe871a26eaa2481b4103dc9d7/src%2Ftest%2Fui%2Fmacros%2Fmacros-in-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349259d55f9b006fe871a26eaa2481b4103dc9d7/src%2Ftest%2Fui%2Fmacros%2Fmacros-in-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-in-extern.rs?ref=349259d55f9b006fe871a26eaa2481b4103dc9d7", "patch": "@@ -1,3 +1,4 @@\n+// run-pass\n // ignore-wasm32\n \n #![feature(decl_macro)]\n@@ -16,17 +17,29 @@ macro_rules! emits_nothing(\n     () => ()\n );\n \n+macro_rules! emits_multiple(\n+    () => {\n+        fn f1() -> u32;\n+        fn f2() -> u32;\n+    }\n+);\n+\n+mod defs {\n+    #[no_mangle] extern fn f1() -> u32 { 1 }\n+    #[no_mangle] extern fn f2() -> u32 { 2 }\n+}\n+\n fn main() {\n-    assert_eq!(unsafe { rust_get_test_int() }, 0isize);\n+    assert_eq!(unsafe { rust_get_test_int() }, 1);\n     assert_eq!(unsafe { rust_dbg_extern_identity_u32(0xDEADBEEF) }, 0xDEADBEEFu32);\n+    assert_eq!(unsafe { f1() }, 1);\n+    assert_eq!(unsafe { f2() }, 2);\n }\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     returns_isize!(rust_get_test_int);\n-    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n     takes_u32_returns_u32!(rust_dbg_extern_identity_u32);\n-    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n     emits_nothing!();\n-    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n+    emits_multiple!();\n }", "previous_filename": "src/test/ui/abi/macros/macros-in-extern.rs"}, {"sha": "15fe3804f9b4ff73c46a2784207715e90a471026", "filename": "src/test/ui/proc-macro/auxiliary/test-macros-rpass.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros-rpass.rs?ref=22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "patch": "@@ -1,26 +0,0 @@\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-\n-use proc_macro::TokenStream;\n-\n-#[proc_macro_attribute]\n-pub fn nop_attr(_attr: TokenStream, input: TokenStream) -> TokenStream {\n-    assert!(_attr.to_string().is_empty());\n-    input\n-}\n-\n-#[proc_macro_attribute]\n-pub fn no_output(_attr: TokenStream, _input: TokenStream) -> TokenStream {\n-    assert!(_attr.to_string().is_empty());\n-    assert!(!_input.to_string().is_empty());\n-    \"\".parse().unwrap()\n-}\n-\n-#[proc_macro]\n-pub fn emit_input(input: TokenStream) -> TokenStream {\n-    input\n-}"}, {"sha": "d2751a353bd93c4b5659d02287557fba2972436e", "filename": "src/test/ui/proc-macro/macros-in-extern-derive.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/349259d55f9b006fe871a26eaa2481b4103dc9d7/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349259d55f9b006fe871a26eaa2481b4103dc9d7/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern-derive.rs?ref=349259d55f9b006fe871a26eaa2481b4103dc9d7", "patch": "@@ -0,0 +1,6 @@\n+extern {\n+    #[derive(Copy)] //~ ERROR `derive` may only be applied to structs, enums and unions\n+    fn f();\n+}\n+\n+fn main() {}"}, {"sha": "e2afb7d34c1494b676a9542f403d592354290030", "filename": "src/test/ui/proc-macro/macros-in-extern-derive.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/349259d55f9b006fe871a26eaa2481b4103dc9d7/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/349259d55f9b006fe871a26eaa2481b4103dc9d7/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern-derive.stderr?ref=349259d55f9b006fe871a26eaa2481b4103dc9d7", "patch": "@@ -0,0 +1,8 @@\n+error: `derive` may only be applied to structs, enums and unions\n+  --> $DIR/macros-in-extern-derive.rs:2:5\n+   |\n+LL |     #[derive(Copy)]\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "a30a287a1011bb4a53728211230d59975da44664", "filename": "src/test/ui/proc-macro/macros-in-extern-rpass.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern-rpass.rs?ref=22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "patch": "@@ -1,25 +0,0 @@\n-// run-pass\n-// aux-build:test-macros-rpass.rs\n-// ignore-wasm32\n-\n-#![feature(macros_in_extern)]\n-\n-extern crate test_macros_rpass as test_macros;\n-\n-use test_macros::{nop_attr, no_output, emit_input};\n-\n-fn main() {\n-    assert_eq!(unsafe { rust_get_test_int() }, 1isize);\n-    assert_eq!(unsafe { rust_dbg_extern_identity_u32(0xDEADBEEF) }, 0xDEADBEEF);\n-}\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    #[no_output]\n-    fn some_definitely_unknown_symbol_which_should_be_removed();\n-\n-    #[nop_attr]\n-    fn rust_get_test_int() -> isize;\n-\n-    emit_input!(fn rust_dbg_extern_identity_u32(arg: u32) -> u32;);\n-}"}, {"sha": "e2b1d55aedc282b9699053d4e35c20813a2479b6", "filename": "src/test/ui/proc-macro/macros-in-extern.rs", "status": "renamed", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/349259d55f9b006fe871a26eaa2481b4103dc9d7/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349259d55f9b006fe871a26eaa2481b4103dc9d7/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern.rs?ref=349259d55f9b006fe871a26eaa2481b4103dc9d7", "patch": "@@ -1,24 +1,22 @@\n+// run-pass\n // aux-build:test-macros.rs\n // ignore-wasm32\n \n #[macro_use]\n extern crate test_macros;\n \n fn main() {\n-    assert_eq!(unsafe { rust_get_test_int() }, 0isize);\n+    assert_eq!(unsafe { rust_get_test_int() }, 1);\n     assert_eq!(unsafe { rust_dbg_extern_identity_u32(0xDEADBEEF) }, 0xDEADBEEF);\n }\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     #[empty_attr]\n-    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n     fn some_definitely_unknown_symbol_which_should_be_removed();\n \n     #[identity_attr]\n-    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n     fn rust_get_test_int() -> isize;\n \n     identity!(fn rust_dbg_extern_identity_u32(arg: u32) -> u32;);\n-    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n }", "previous_filename": "src/test/ui/abi/proc-macro/macros-in-extern.rs"}]}