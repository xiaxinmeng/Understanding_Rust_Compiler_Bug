{"sha": "981cb8c191f0853fbf4d571a37b9bd86e8511a9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MWNiOGMxOTFmMDg1M2ZiZjRkNTcxYTM3YjliZDg2ZTg1MTFhOWE=", "commit": {"author": {"name": "AnthonyMikh", "email": "anthony.mikh@yandex.ru", "date": "2020-10-06T15:23:37Z"}, "committer": {"name": "AnthonyMikh", "email": "anthony.mikh@yandex.ru", "date": "2020-10-06T15:23:37Z"}, "message": "Eliminate bounds checking in slice::Windows", "tree": {"sha": "efaaa17fe046f3ef9a5162415ddf2db5f29aaa2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efaaa17fe046f3ef9a5162415ddf2db5f29aaa2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/981cb8c191f0853fbf4d571a37b9bd86e8511a9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/981cb8c191f0853fbf4d571a37b9bd86e8511a9a", "html_url": "https://github.com/rust-lang/rust/commit/981cb8c191f0853fbf4d571a37b9bd86e8511a9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/981cb8c191f0853fbf4d571a37b9bd86e8511a9a/comments", "author": {"login": "AnthonyMikh", "id": 19252795, "node_id": "MDQ6VXNlcjE5MjUyNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/19252795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AnthonyMikh", "html_url": "https://github.com/AnthonyMikh", "followers_url": "https://api.github.com/users/AnthonyMikh/followers", "following_url": "https://api.github.com/users/AnthonyMikh/following{/other_user}", "gists_url": "https://api.github.com/users/AnthonyMikh/gists{/gist_id}", "starred_url": "https://api.github.com/users/AnthonyMikh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AnthonyMikh/subscriptions", "organizations_url": "https://api.github.com/users/AnthonyMikh/orgs", "repos_url": "https://api.github.com/users/AnthonyMikh/repos", "events_url": "https://api.github.com/users/AnthonyMikh/events{/privacy}", "received_events_url": "https://api.github.com/users/AnthonyMikh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AnthonyMikh", "id": 19252795, "node_id": "MDQ6VXNlcjE5MjUyNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/19252795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AnthonyMikh", "html_url": "https://github.com/AnthonyMikh", "followers_url": "https://api.github.com/users/AnthonyMikh/followers", "following_url": "https://api.github.com/users/AnthonyMikh/following{/other_user}", "gists_url": "https://api.github.com/users/AnthonyMikh/gists{/gist_id}", "starred_url": "https://api.github.com/users/AnthonyMikh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AnthonyMikh/subscriptions", "organizations_url": "https://api.github.com/users/AnthonyMikh/orgs", "repos_url": "https://api.github.com/users/AnthonyMikh/repos", "events_url": "https://api.github.com/users/AnthonyMikh/events{/privacy}", "received_events_url": "https://api.github.com/users/AnthonyMikh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5849a7eca90582ee59b67eb09548a2aa424d7f52", "url": "https://api.github.com/repos/rust-lang/rust/commits/5849a7eca90582ee59b67eb09548a2aa424d7f52", "html_url": "https://github.com/rust-lang/rust/commit/5849a7eca90582ee59b67eb09548a2aa424d7f52"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "24f955a70b67e14094e5dc4799c8cb6b669b4a6a", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/981cb8c191f0853fbf4d571a37b9bd86e8511a9a/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/981cb8c191f0853fbf4d571a37b9bd86e8511a9a/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=981cb8c191f0853fbf4d571a37b9bd86e8511a9a", "patch": "@@ -10,6 +10,7 @@ use crate::intrinsics::{assume, exact_div, unchecked_sub};\n use crate::iter::{FusedIterator, TrustedLen, TrustedRandomAccess};\n use crate::marker::{PhantomData, Send, Sized, Sync};\n use crate::mem;\n+use crate::num::NonZeroUsize;\n use crate::ptr::NonNull;\n \n use super::{from_raw_parts, from_raw_parts_mut};\n@@ -1187,12 +1188,12 @@ forward_iterator! { RSplitNMut: T, &'a mut [T] }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Windows<'a, T: 'a> {\n     v: &'a [T],\n-    size: usize,\n+    size: NonZeroUsize,\n }\n \n impl<'a, T: 'a> Windows<'a, T> {\n     #[inline]\n-    pub(super) fn new(slice: &'a [T], size: usize) -> Self {\n+    pub(super) fn new(slice: &'a [T], size: NonZeroUsize) -> Self {\n         Self { v: slice, size }\n     }\n }\n@@ -1211,21 +1212,21 @@ impl<'a, T> Iterator for Windows<'a, T> {\n \n     #[inline]\n     fn next(&mut self) -> Option<&'a [T]> {\n-        if self.size > self.v.len() {\n+        if self.size.get() > self.v.len() {\n             None\n         } else {\n-            let ret = Some(&self.v[..self.size]);\n+            let ret = Some(&self.v[..self.size.get()]);\n             self.v = &self.v[1..];\n             ret\n         }\n     }\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        if self.size > self.v.len() {\n+        if self.size.get() > self.v.len() {\n             (0, Some(0))\n         } else {\n-            let size = self.v.len() - self.size + 1;\n+            let size = self.v.len() - self.size.get() + 1;\n             (size, Some(size))\n         }\n     }\n@@ -1237,7 +1238,7 @@ impl<'a, T> Iterator for Windows<'a, T> {\n \n     #[inline]\n     fn nth(&mut self, n: usize) -> Option<Self::Item> {\n-        let (end, overflow) = self.size.overflowing_add(n);\n+        let (end, overflow) = self.size.get().overflowing_add(n);\n         if end > self.v.len() || overflow {\n             self.v = &[];\n             None\n@@ -1250,10 +1251,10 @@ impl<'a, T> Iterator for Windows<'a, T> {\n \n     #[inline]\n     fn last(self) -> Option<Self::Item> {\n-        if self.size > self.v.len() {\n+        if self.size.get() > self.v.len() {\n             None\n         } else {\n-            let start = self.v.len() - self.size;\n+            let start = self.v.len() - self.size.get();\n             Some(&self.v[start..])\n         }\n     }\n@@ -1264,18 +1265,18 @@ impl<'a, T> Iterator for Windows<'a, T> {\n         // which means that `i` cannot overflow an `isize`, and the\n         // slice created by `from_raw_parts` is a subslice of `self.v`\n         // thus is guaranteed to be valid for the lifetime `'a` of `self.v`.\n-        unsafe { from_raw_parts(self.v.as_ptr().add(idx), self.size) }\n+        unsafe { from_raw_parts(self.v.as_ptr().add(idx), self.size.get()) }\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> DoubleEndedIterator for Windows<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a [T]> {\n-        if self.size > self.v.len() {\n+        if self.size.get() > self.v.len() {\n             None\n         } else {\n-            let ret = Some(&self.v[self.v.len() - self.size..]);\n+            let ret = Some(&self.v[self.v.len() - self.size.get()..]);\n             self.v = &self.v[..self.v.len() - 1];\n             ret\n         }\n@@ -1284,11 +1285,11 @@ impl<'a, T> DoubleEndedIterator for Windows<'a, T> {\n     #[inline]\n     fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n         let (end, overflow) = self.v.len().overflowing_sub(n);\n-        if end < self.size || overflow {\n+        if end < self.size.get() || overflow {\n             self.v = &[];\n             None\n         } else {\n-            let ret = &self.v[end - self.size..end];\n+            let ret = &self.v[end - self.size.get()..end];\n             self.v = &self.v[..end - 1];\n             Some(ret)\n         }"}, {"sha": "73d085c3fb29910675ff831380e5c62cffe107db", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/981cb8c191f0853fbf4d571a37b9bd86e8511a9a/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/981cb8c191f0853fbf4d571a37b9bd86e8511a9a/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=981cb8c191f0853fbf4d571a37b9bd86e8511a9a", "patch": "@@ -11,6 +11,7 @@\n use crate::cmp::Ordering::{self, Equal, Greater, Less};\n use crate::marker::Copy;\n use crate::mem;\n+use crate::num::NonZeroUsize;\n use crate::ops::{FnMut, Range, RangeBounds};\n use crate::option::Option;\n use crate::option::Option::{None, Some};\n@@ -751,7 +752,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn windows(&self, size: usize) -> Windows<'_, T> {\n-        assert_ne!(size, 0);\n+        let size = NonZeroUsize::new(size).expect(\"size is zero\");\n         Windows::new(self, size)\n     }\n "}]}