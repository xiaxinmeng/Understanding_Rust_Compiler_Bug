{"sha": "529ae386056eefdfad04cab8a32d6e88ebbe0e5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyOWFlMzg2MDU2ZWVmZGZhZDA0Y2FiOGEzMmQ2ZTg4ZWJiZTBlNWU=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-30T00:41:32Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-30T00:41:32Z"}, "message": "Merge remote-tracking branch 'remotes/origin/incoming' into serial", "tree": {"sha": "4396879dffede422bc085a8602891449ff6736e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4396879dffede422bc085a8602891449ff6736e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/529ae386056eefdfad04cab8a32d6e88ebbe0e5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/529ae386056eefdfad04cab8a32d6e88ebbe0e5e", "html_url": "https://github.com/rust-lang/rust/commit/529ae386056eefdfad04cab8a32d6e88ebbe0e5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/529ae386056eefdfad04cab8a32d6e88ebbe0e5e/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "356438989830d8b9e597096a9d1ea2c7b6aa9af9", "url": "https://api.github.com/repos/rust-lang/rust/commits/356438989830d8b9e597096a9d1ea2c7b6aa9af9", "html_url": "https://github.com/rust-lang/rust/commit/356438989830d8b9e597096a9d1ea2c7b6aa9af9"}, {"sha": "a17a9d41f6bf06daacb0aedb0cb2144dc4ba1c53", "url": "https://api.github.com/repos/rust-lang/rust/commits/a17a9d41f6bf06daacb0aedb0cb2144dc4ba1c53", "html_url": "https://github.com/rust-lang/rust/commit/a17a9d41f6bf06daacb0aedb0cb2144dc4ba1c53"}], "stats": {"total": 208, "additions": 88, "deletions": 120}, "files": [{"sha": "71beb8214b9da019b3f591483be7c27cc9fb9281", "filename": "configure", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/529ae386056eefdfad04cab8a32d6e88ebbe0e5e/configure", "raw_url": "https://github.com/rust-lang/rust/raw/529ae386056eefdfad04cab8a32d6e88ebbe0e5e/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=529ae386056eefdfad04cab8a32d6e88ebbe0e5e", "patch": "@@ -881,6 +881,10 @@ do\n                 ;;\n         esac\n         need_ok \"LLVM configure failed\"\n+\n+        # Hack the tools Makefile to turn off the clang build\n+        sed -i 's/clang//g' tools/Makefile\n+\n         cd $CFG_BUILD_DIR\n     fi\n "}, {"sha": "7518e3ef6761453aa4ef01e2214a387d374d7346", "filename": "doc/tutorial.md", "status": "modified", "additions": 73, "deletions": 13, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/529ae386056eefdfad04cab8a32d6e88ebbe0e5e/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/529ae386056eefdfad04cab8a32d6e88ebbe0e5e/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=529ae386056eefdfad04cab8a32d6e88ebbe0e5e", "patch": "@@ -1002,11 +1002,46 @@ refer to that through a pointer.\n \n ## Owned boxes\n \n-An owned box (`~`) is a uniquely owned allocation on the heap. An owned box\n-inherits the mutability and lifetime of the owner as it would if there was no\n-box. The purpose of an owned box is to add a layer of indirection in order to\n-create recursive data structures or cheaply pass around an object larger than a\n-pointer.\n+An owned box (`~`) is a uniquely owned allocation on the heap. It inherits the\n+mutability and lifetime of the owner as it would if there was no box.\n+\n+~~~~\n+let x = 5; // immutable\n+let mut y = 5; // mutable\n+y += 2;\n+\n+let x = ~5; // immutable\n+let mut y = ~5; // mutable\n+*y += 2; // the * operator is needed to access the contained value\n+~~~~\n+\n+The purpose of an owned box is to add a layer of indirection in order to create\n+recursive data structures or cheaply pass around an object larger than a\n+pointer. Since an owned box has a unique owner, it can be used to represent any\n+tree data structure.\n+\n+The following struct won't compile, because the lack of indirection would mean\n+it has an infinite size:\n+\n+~~~~ {.xfail-test}\n+struct Foo {\n+    child: Option<Foo>\n+}\n+~~~~\n+\n+> ***Note:*** The `Option` type is an enum that represents an *optional* value.\n+> It's comparable to a nullable pointer in many other languages, but stores the\n+> contained value unboxed.\n+\n+Adding indirection with an owned pointer allocates the child outside of the\n+struct on the heap, which makes it a finite size and won't result in a\n+compile-time error:\n+\n+~~~~\n+struct Foo {\n+    child: Option<~Foo>\n+}\n+~~~~\n \n ## Managed boxes\n \n@@ -1018,6 +1053,20 @@ mutability. They do own the contained object, and mutability is defined by the\n type of the shared box (`@` or `@mut`). An object containing a managed box is\n not `Owned`, and can't be sent between tasks.\n \n+~~~~\n+let a = @5; // immutable\n+\n+let mut b = @5; // mutable variable, immutable box\n+b = @10;\n+\n+let c = @mut 5; // immutable variable, mutable box\n+*c = 10;\n+\n+let mut d = @mut 5; // mutable variable, mutable box\n+*d += 5;\n+d = @mut 15;\n+~~~~\n+\n # Move semantics\n \n Rust uses a shallow copy for parameter passing, assignment and returning values\n@@ -1035,10 +1084,10 @@ let z = x; // no new memory allocated, x can no longer be used\n # Borrowed pointers\n \n Rust's borrowed pointers are a general purpose reference type. In contrast with\n-owned pointers, where the holder of an owned pointer is the owner of the\n-pointed-to memory, borrowed pointers never imply ownership. A pointer can be\n-borrowed to any object, and the compiler verifies that it cannot outlive the\n-lifetime of the object.\n+owned boxes, where the holder of an owned box is the owner of the pointed-to\n+memory, borrowed pointers never imply ownership. A pointer can be borrowed to\n+any object, and the compiler verifies that it cannot outlive the lifetime of\n+the object.\n \n As an example, consider a simple struct type, `Point`:\n \n@@ -1124,10 +1173,7 @@ For a more in-depth explanation of borrowed pointers, read the\n ## Freezing\n \n Borrowing an immutable pointer to an object freezes it and prevents mutation.\n-`Owned` objects have freezing enforced statically at compile-time. Mutable\n-managed boxes handle freezing dynamically when any of their contents are\n-borrowed, and the task will fail if an attempt to modify them is made while\n-they are frozen.\n+`Owned` objects have freezing enforced statically at compile-time.\n \n ~~~~\n let mut x = 5;\n@@ -1137,6 +1183,20 @@ let mut x = 5;\n // x is now unfrozen again\n ~~~~\n \n+Mutable managed boxes handle freezing dynamically when any of their contents\n+are borrowed, and the task will fail if an attempt to modify them is made while\n+they are frozen:\n+\n+~~~~\n+let x = @mut 5;\n+let y = x;\n+{\n+    let y = &*y; // the managed box is now frozen\n+    // modifying it through x or y will cause a task failure\n+}\n+// the box is now unfrozen again\n+~~~~\n+\n # Dereferencing pointers\n \n Rust uses the unary star operator (`*`) to access the contents of a"}, {"sha": "36b1ad2096d96c875169ea851ae28df6e03fc180", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/529ae386056eefdfad04cab8a32d6e88ebbe0e5e/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529ae386056eefdfad04cab8a32d6e88ebbe0e5e/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=529ae386056eefdfad04cab8a32d6e88ebbe0e5e", "patch": "@@ -681,45 +681,6 @@ impl vtable_decoder_helpers for reader::Decoder {\n         @self.read_to_vec(|| self.read_vtable_origin(xcx) )\n     }\n \n-    #[cfg(stage0)]\n-    fn read_vtable_origin(&self, xcx: @ExtendedDecodeContext)\n-        -> typeck::vtable_origin {\n-        do self.read_enum(~\"vtable_origin\") {\n-            do self.read_enum_variant |i| {\n-                match i {\n-                  0 => {\n-                    typeck::vtable_static(\n-                        do self.read_enum_variant_arg(0u) {\n-                            self.read_def_id(xcx)\n-                        },\n-                        do self.read_enum_variant_arg(1u) {\n-                            self.read_tys(xcx)\n-                        },\n-                        do self.read_enum_variant_arg(2u) {\n-                            self.read_vtable_res(xcx)\n-                        }\n-                    )\n-                  }\n-                  1 => {\n-                    typeck::vtable_param(\n-                        do self.read_enum_variant_arg(0u) {\n-                            self.read_uint()\n-                        },\n-                        do self.read_enum_variant_arg(1u) {\n-                            self.read_uint()\n-                        }\n-                    )\n-                  }\n-                  // hard to avoid - user input\n-                  _ => fail!(~\"bad enum variant\")\n-                }\n-            }\n-        }\n-    }\n-\n-    #[cfg(stage1)]\n-    #[cfg(stage2)]\n-    #[cfg(stage3)]\n     fn read_vtable_origin(&self, xcx: @ExtendedDecodeContext)\n         -> typeck::vtable_origin {\n         do self.read_enum(\"vtable_origin\") {"}, {"sha": "646f2ce6a84403239987c06cf0a3942d91c39a83", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/529ae386056eefdfad04cab8a32d6e88ebbe0e5e/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529ae386056eefdfad04cab8a32d6e88ebbe0e5e/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=529ae386056eefdfad04cab8a32d6e88ebbe0e5e", "patch": "@@ -321,19 +321,6 @@ pub mod reader {\n             self.push_doc(self.next_doc(EsEnum), f)\n         }\n \n-        #[cfg(stage0)]\n-        fn read_enum_variant<T>(&self, f: &fn(uint) -> T) -> T {\n-            debug!(\"read_enum_variant()\");\n-            let idx = self._next_uint(EsEnumVid);\n-            debug!(\"  idx=%u\", idx);\n-            do self.push_doc(self.next_doc(EsEnumBody)) {\n-                f(idx)\n-            }\n-        }\n-\n-        #[cfg(stage1)]\n-        #[cfg(stage2)]\n-        #[cfg(stage3)]\n         fn read_enum_variant<T>(&self, _names: &[&str], f: &fn(uint) -> T) -> T {\n             debug!(\"read_enum_variant()\");\n             let idx = self._next_uint(EsEnumVid);\n@@ -373,23 +360,6 @@ pub mod reader {\n             f()\n         }\n \n-        #[cfg(stage0)]\n-        fn read_option<T>(&self, f: &fn(bool) -> T) -> T {\n-            debug!(\"read_option()\");\n-            do self.read_enum(\"Option\") || {\n-                do self.read_enum_variant |idx| {\n-                    match idx {\n-                        0 => f(false),\n-                        1 => f(true),\n-                        _ => fail!(),\n-                    }\n-                }\n-            }\n-        }\n-\n-        #[cfg(stage1)]\n-        #[cfg(stage2)]\n-        #[cfg(stage3)]\n         fn read_option<T>(&self, f: &fn(bool) -> T) -> T {\n             debug!(\"read_option()\");\n             do self.read_enum(\"Option\") || {"}, {"sha": "d12488ed01fa7225d43038cdfbbf47d10b063744", "filename": "src/libstd/json.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/529ae386056eefdfad04cab8a32d6e88ebbe0e5e/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529ae386056eefdfad04cab8a32d6e88ebbe0e5e/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=529ae386056eefdfad04cab8a32d6e88ebbe0e5e", "patch": "@@ -803,19 +803,6 @@ impl serialize::Decoder for Decoder {\n         f()\n     }\n \n-    #[cfg(stage0)]\n-    fn read_enum_variant<T>(&self, f: &fn(uint) -> T) -> T {\n-        debug!(\"read_enum_variant()\");\n-        let idx = match self.stack.pop() {\n-            Null => { self.stack.push(Null); 0 },\n-            value => { self.stack.push(value); 1 },\n-        };\n-        f(idx)\n-    }\n-\n-    #[cfg(stage1)]\n-    #[cfg(stage2)]\n-    #[cfg(stage3)]\n     fn read_enum_variant<T>(&self, names: &[&str], f: &fn(uint) -> T) -> T {\n         debug!(\"read_enum_variant(names=%?)\", names);\n         let name = match self.stack.pop() {"}, {"sha": "9e21d1f980d96fabab180f1095a2d1035da4379f", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/529ae386056eefdfad04cab8a32d6e88ebbe0e5e/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529ae386056eefdfad04cab8a32d6e88ebbe0e5e/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=529ae386056eefdfad04cab8a32d6e88ebbe0e5e", "patch": "@@ -83,11 +83,6 @@ pub trait Decoder {\n \n     // Compound types:\n     fn read_enum<T>(&self, name: &str, f: &fn() -> T) -> T;\n-    #[cfg(stage0)]\n-    fn read_enum_variant<T>(&self, f: &fn(uint) -> T) -> T;\n-    #[cfg(stage1)]\n-    #[cfg(stage2)]\n-    #[cfg(stage3)]\n     fn read_enum_variant<T>(&self, names: &[&str], f: &fn(uint) -> T) -> T;\n     fn read_enum_variant_arg<T>(&self, idx: uint, f: &fn() -> T) -> T;\n \n@@ -558,23 +553,6 @@ impl<\n     K: Decodable<D> + Hash + IterBytes + Eq,\n     V: Decodable<D>\n > Decodable<D> for LinearMap<K, V> {\n-    #[cfg(stage0)]\n-    fn decode(d: &D) -> LinearMap<K, V> {\n-        do d.read_map |len| {\n-            let mut map = LinearMap::new();\n-            map.reserve_at_least(len);\n-            for uint::range(0, len) |i| {\n-                let key = d.read_map_elt_key(i, || Decodable::decode(d));\n-                let val = d.read_map_elt_val(i, || Decodable::decode(d));\n-                map.insert(key, val);\n-            }\n-            map\n-        }\n-    }\n-\n-    #[cfg(stage1)]\n-    #[cfg(stage2)]\n-    #[cfg(stage3)]\n     fn decode(d: &D) -> LinearMap<K, V> {\n         do d.read_map |len| {\n             let mut map = LinearMap::with_capacity(len);"}, {"sha": "52bb4110082a36ee569ff71301a396d54376de5b", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/529ae386056eefdfad04cab8a32d6e88ebbe0e5e/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529ae386056eefdfad04cab8a32d6e88ebbe0e5e/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=529ae386056eefdfad04cab8a32d6e88ebbe0e5e", "patch": "@@ -1281,13 +1281,13 @@ mod test {\n             f();\n         }\n \n-        fn read_map<T>(&self, f: &fn(uint) -> T) -> T {\n+        fn emit_map<T>(&self, f: &fn(uint) -> T) -> T {\n             self.add_unknown_to_log(); f(0);\n         }\n-        fn read_map_elt_key<T>(&self, idx: uint, f: &fn() -> T) -> T {\n+        fn emit_map_elt_key<T>(&self, idx: uint, f: &fn() -> T) -> T {\n             self.add_unknown_to_log(); f();\n         }\n-        fn read_map_elt_val<T>(&self, idx: uint, f: &fn() -> T) -> T {\n+        fn emit_map_elt_val<T>(&self, idx: uint, f: &fn() -> T) -> T {\n             self.add_unknown_to_log(); f();\n         }\n     }"}, {"sha": "fafd5467655cefc57d6c2f860bf05e7b0b8c198b", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/529ae386056eefdfad04cab8a32d6e88ebbe0e5e/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/529ae386056eefdfad04cab8a32d6e88ebbe0e5e/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=529ae386056eefdfad04cab8a32d6e88ebbe0e5e", "patch": "@@ -1,3 +1,11 @@\n+S 2013-03-28 f7a2371\n+  macos-i386 2e05a33716fc4982db53946c3b0dccf0194826fe\n+  macos-x86_64 fbd3feec8dd17a6b6c8df114e6e9b4cd17cc6172\n+  linux-i386 b89197edd3ba5be7c2ee6577f048d7663640e1d1\n+  linux-x86_64 61a4377c6d0ca5814c2b2b752d73b61b741a23c9\n+  winnt-i386 858a74afb210b30697227a87b67e44786b383a0c\n+  freebsd-x86_64 01f1e4b94504045e763eecb71c7e0852f6e85036\n+\n S 2013-03-27 8c15409\n   macos-x86_64 05eb3801b60056d95715c891d00c5d372e34d00c\n   macos-i386 4119e3fa614fa86adf60ed0183d00db3ce6d0dbc"}]}