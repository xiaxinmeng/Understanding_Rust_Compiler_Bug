{"sha": "16dcf020c47a4e386c667c6da4815686916fc0cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZGNmMDIwYzQ3YTRlMzg2YzY2N2M2ZGE0ODE1Njg2OTE2ZmMwY2Y=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-08T18:26:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-08T18:35:54Z"}, "message": "simplify", "tree": {"sha": "3b025e3fee7a76ec763c15e430356b9d1654ac30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b025e3fee7a76ec763c15e430356b9d1654ac30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16dcf020c47a4e386c667c6da4815686916fc0cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16dcf020c47a4e386c667c6da4815686916fc0cf", "html_url": "https://github.com/rust-lang/rust/commit/16dcf020c47a4e386c667c6da4815686916fc0cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16dcf020c47a4e386c667c6da4815686916fc0cf/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d74a77efb19c5f3c45a09bd8ccd5b50d453927d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d74a77efb19c5f3c45a09bd8ccd5b50d453927d1", "html_url": "https://github.com/rust-lang/rust/commit/d74a77efb19c5f3c45a09bd8ccd5b50d453927d1"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "61359c7702185900444053a2f9e5bf2495821421", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/16dcf020c47a4e386c667c6da4815686916fc0cf/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16dcf020c47a4e386c667c6da4815686916fc0cf/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=16dcf020c47a4e386c667c6da4815686916fc0cf", "patch": "@@ -113,31 +113,33 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n \n     let mut res = HoverResult::new();\n \n-    if let Some((node, name_kind)) = match_ast! {\n-        match (token.parent()) {\n+    let node = token.parent();\n+    let definition = match_ast! {\n+        match node {\n             ast::NameRef(name_ref) => {\n-                classify_name_ref(&sema, &name_ref).map(|d| (name_ref.syntax().clone(), d.definition()))\n+                classify_name_ref(&sema, &name_ref).map(|d| d.definition())\n             },\n             ast::Name(name) => {\n-                classify_name(&sema, &name).map(|d| (name.syntax().clone(), d.definition()))\n+                classify_name(&sema, &name).map(|d| d.definition())\n             },\n             _ => None,\n         }\n-    } {\n+    };\n+    if let Some(definition) = definition {\n         let range = sema.original_range(&node).range;\n-        if let Some(text) = hover_text_from_name_kind(db, name_kind) {\n+        if let Some(text) = hover_text_from_name_kind(db, definition) {\n             res.results.push(text);\n         }\n         if !res.is_empty() {\n-            if let Some(action) = show_implementations_action(db, name_kind) {\n+            if let Some(action) = show_implementations_action(db, definition) {\n                 res.push_action(action);\n             }\n \n-            if let Some(action) = runnable_action(&sema, name_kind, position.file_id) {\n+            if let Some(action) = runnable_action(&sema, definition, position.file_id) {\n                 res.push_action(action);\n             }\n \n-            if let Some(action) = goto_type_action(db, name_kind) {\n+            if let Some(action) = goto_type_action(db, definition) {\n                 res.push_action(action);\n             }\n "}]}