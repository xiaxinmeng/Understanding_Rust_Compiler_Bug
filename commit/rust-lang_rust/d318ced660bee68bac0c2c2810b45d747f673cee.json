{"sha": "d318ced660bee68bac0c2c2810b45d747f673cee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMThjZWQ2NjBiZWU2OGJhYzBjMmMyODEwYjQ1ZDc0N2Y2NzNjZWU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2017-09-10T01:51:54Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2017-09-10T01:52:19Z"}, "message": "Add CLONE_ON_REF_PTR lint\n\nCloses issue #1645", "tree": {"sha": "450f124557c2536b3e5d28939c873001176e683b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/450f124557c2536b3e5d28939c873001176e683b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d318ced660bee68bac0c2c2810b45d747f673cee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlm0mwEACgkQtAh+UQ6Y\nsWQgoA/+JEMX0+QTCA9USotuRaR6EgUFIqlkk+sZqQEgCHzM+j98GMsJ4m8r7kdb\njp6n0WEGuZTb7WRhMH2vdLL1PzarTbYbzYO1EGF0Ng6IT6ewvhBQ7cF6qnRen6PS\nqDwFht5NRLm3vIIIxer3vTMieRM6UOtPSx5XRU5khBu5BKQ8eUUIaruG7ARGUAPY\nStqxs5c8ecJReSJIgk5g0jewXUX1M7+BXTAVzFMcvA8qad74RnokqMHAamDKOlcf\nT/PeSZf+ehWUAGd+VRHk8+hbt6o3mHlD4AFYMrR0P3ImMRj/SD4Zn9Fz/Tf0ahEE\n3Zt7W9aLrLrEM+AVCTsGYQ9lAPyiUbDu8cGpOwG4nLljOCWfHM9km3IZ7eny/ar/\nvp0+8g5r0QFkhjk2fO5oC2gJUA4Fkkb1/ph6dIkzkCyi1fUGPx/b4FCVLcUc7J6Q\nL45B1IB3ikvimow3HQtLs69bvPrwQTIYQ37tIfUA/w/NN6rZsu7DIxgViPLNpkpt\n/ipYjCLQzOI2MiMdaS3/jCwnecJgCuw/3KXZsovrB/EuoMSyLrttqqLtyn+dm928\nUGxEfNpfeiJeSWBqgkmoQOstGaNf1ImiTKLs2TQvlKqhF1Y12ZsviSWL9uX74iP0\n6xsrZLEg0B08/V9jtPqpkYZTazGBYkiB95H/ERwrlcqeS11IJ0Q=\n=rgCV\n-----END PGP SIGNATURE-----", "payload": "tree 450f124557c2536b3e5d28939c873001176e683b\nparent 9c9a4953c3f131a8481f15f7e7a805972056a084\nauthor Aaron Hill <aa1ronham@gmail.com> 1505008314 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1505008339 -0400\n\nAdd CLONE_ON_REF_PTR lint\n\nCloses issue #1645\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d318ced660bee68bac0c2c2810b45d747f673cee", "html_url": "https://github.com/rust-lang/rust/commit/d318ced660bee68bac0c2c2810b45d747f673cee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d318ced660bee68bac0c2c2810b45d747f673cee/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c9a4953c3f131a8481f15f7e7a805972056a084", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c9a4953c3f131a8481f15f7e7a805972056a084", "html_url": "https://github.com/rust-lang/rust/commit/9c9a4953c3f131a8481f15f7e7a805972056a084"}], "stats": {"total": 590, "additions": 346, "deletions": 244}, "files": [{"sha": "b1bd6b06ee47e4480a87310cedc4f98b41c139f1", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d318ced660bee68bac0c2c2810b45d747f673cee/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d318ced660bee68bac0c2c2810b45d747f673cee/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=d318ced660bee68bac0c2c2810b45d747f673cee", "patch": "@@ -171,7 +171,7 @@ pub fn lit_to_constant<'a, 'tcx>(lit: &LitKind, tcx: TyCtxt<'a, 'tcx, 'tcx>, mut\n     match *lit {\n         LitKind::Str(ref is, style) => Constant::Str(is.to_string(), style),\n         LitKind::Byte(b) => Constant::Int(ConstInt::U8(b)),\n-        LitKind::ByteStr(ref s) => Constant::Binary(s.clone()),\n+        LitKind::ByteStr(ref s) => Constant::Binary(Rc::clone(s)),\n         LitKind::Char(c) => Constant::Char(c),\n         LitKind::Int(n, hint) => match (&ty.sty, hint) {\n             (&ty::TyInt(ity), _) | (_, Signed(ity)) => {"}, {"sha": "90208369caa1bd1ef22747aba25310bd4773bd1c", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d318ced660bee68bac0c2c2810b45d747f673cee/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d318ced660bee68bac0c2c2810b45d747f673cee/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=d318ced660bee68bac0c2c2810b45d747f673cee", "patch": "@@ -310,6 +310,24 @@ declare_lint! {\n     \"using `clone` on a `Copy` type\"\n }\n \n+/// **What it does:** Checks for usage of `.clone()` on a ref-counted pointer,\n+/// (Rc, Arc, rc::Weak, or sync::Weak), and suggests calling Clone on\n+/// the corresponding trait instead.\n+///\n+/// **Why is this bad?**: Calling '.clone()' on an Rc, Arc, or Weak\n+/// can obscure the fact that only the pointer is being cloned, not the underlying\n+/// data.\n+///\n+/// **Example:**\n+/// ```rust\n+/// x.clone()\n+/// ```\n+declare_lint! {\n+    pub CLONE_ON_REF_PTR,\n+    Warn,\n+    \"using 'clone' on a ref-counted pointer\"\n+}\n+\n /// **What it does:** Checks for usage of `.clone()` on an `&&T`.\n ///\n /// **Why is this bad?** Cloning an `&&T` copies the inner `&T`, instead of\n@@ -539,6 +557,7 @@ impl LintPass for Pass {\n             OR_FUN_CALL,\n             CHARS_NEXT_CMP,\n             CLONE_ON_COPY,\n+            CLONE_ON_REF_PTR,\n             CLONE_DOUBLE_REF,\n             NEW_RET_NO_SELF,\n             SINGLE_CHAR_PATTERN,\n@@ -615,6 +634,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 let self_ty = cx.tables.expr_ty_adjusted(&args[0]);\n                 if args.len() == 1 && method_call.name == \"clone\" {\n                     lint_clone_on_copy(cx, expr, &args[0], self_ty);\n+                    lint_clone_on_ref_ptr(cx, expr, &args[0]);\n                 }\n \n                 match self_ty.sty {\n@@ -853,6 +873,34 @@ fn lint_clone_on_copy(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr, arg_t\n     }\n }\n \n+fn lint_clone_on_ref_ptr(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr) {\n+    let (obj_ty, _) = walk_ptrs_ty_depth(cx.tables.expr_ty(arg));\n+\n+    let caller_type = if match_type(cx, obj_ty, &paths::RC) {\n+        \"Rc\"\n+    } else if match_type(cx, obj_ty, &paths::ARC) {\n+        \"Arc\"\n+    } else if match_type(cx, obj_ty, &paths::WEAK_RC) || match_type(cx, obj_ty, &paths::WEAK_ARC) {\n+        \"Weak\"\n+    } else {\n+        return;\n+    };\n+\n+    span_lint_and_sugg(\n+        cx,\n+        CLONE_ON_REF_PTR,\n+        expr.span,\n+        \"using '.clone()' on a ref-counted pointer\",\n+        \"try this\",\n+        format!(\"{}::clone(&{})\",\n+            caller_type,\n+            snippet(cx, arg.span, \"_\")\n+        )\n+    );\n+\n+}\n+\n+\n fn lint_string_extend(cx: &LateContext, expr: &hir::Expr, args: &[hir::Expr]) {\n     let arg = &args[1];\n     if let Some(arglists) = method_chain_args(arg, &[\"chars\"]) {"}, {"sha": "d18a5af59e3b20b38f0343a1dbfbcadf37795b19", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d318ced660bee68bac0c2c2810b45d747f673cee/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d318ced660bee68bac0c2c2810b45d747f673cee/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=d318ced660bee68bac0c2c2810b45d747f673cee", "patch": "@@ -2,6 +2,7 @@\n //! about.\n \n pub const ANY_TRAIT: [&'static str; 3] = [\"std\", \"any\", \"Any\"];\n+pub const ARC: [&'static str; 3] = [\"alloc\", \"arc\", \"Arc\"];\n pub const ASMUT_TRAIT: [&'static str; 3] = [\"core\", \"convert\", \"AsMut\"];\n pub const ASREF_TRAIT: [&'static str; 3] = [\"core\", \"convert\", \"AsRef\"];\n pub const BEGIN_PANIC: [&'static str; 3] = [\"std\", \"panicking\", \"begin_panic\"];\n@@ -58,6 +59,7 @@ pub const RANGE_TO: [&'static str; 3] = [\"core\", \"ops\", \"RangeTo\"];\n pub const RANGE_TO_INCLUSIVE: [&'static str; 3] = [\"core\", \"ops\", \"RangeToInclusive\"];\n pub const RANGE_TO_INCLUSIVE_STD: [&'static str; 3] = [\"std\", \"ops\", \"RangeToInclusive\"];\n pub const RANGE_TO_STD: [&'static str; 3] = [\"std\", \"ops\", \"RangeTo\"];\n+pub const RC: [&'static str; 3] = [\"alloc\", \"rc\", \"Rc\"];\n pub const REGEX: [&'static str; 3] = [\"regex\", \"re_unicode\", \"Regex\"];\n pub const REGEX_BUILDER_NEW: [&'static str; 5] = [\"regex\", \"re_builder\", \"unicode\", \"RegexBuilder\", \"new\"];\n pub const REGEX_BYTES: [&'static str; 3] = [\"regex\", \"re_bytes\", \"Regex\"];\n@@ -81,3 +83,5 @@ pub const TRY_INTO_RESULT: [&'static str; 4] = [\"std\", \"ops\", \"Try\", \"into_resul\n pub const VEC: [&'static str; 3] = [\"alloc\", \"vec\", \"Vec\"];\n pub const VEC_DEQUE: [&'static str; 3] = [\"alloc\", \"vec_deque\", \"VecDeque\"];\n pub const VEC_FROM_ELEM: [&'static str; 3] = [\"alloc\", \"vec\", \"from_elem\"];\n+pub const WEAK_ARC: [&'static str; 3] = [\"alloc\", \"arc\", \"Weak\"];\n+pub const WEAK_RC: [&'static str; 3] = [\"alloc\", \"rc\", \"Weak\"];"}, {"sha": "3bbaff29c988b4ed0fc762c2516cfda4dd37095a", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d318ced660bee68bac0c2c2810b45d747f673cee/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d318ced660bee68bac0c2c2810b45d747f673cee/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=d318ced660bee68bac0c2c2810b45d747f673cee", "patch": "@@ -11,6 +11,8 @@ use std::collections::HashSet;\n use std::collections::VecDeque;\n use std::ops::Mul;\n use std::iter::FromIterator;\n+use std::rc::{self, Rc};\n+use std::sync::{self, Arc};\n \n struct T;\n \n@@ -456,6 +458,28 @@ fn clone_on_copy() {\n     (&42).clone();\n }\n \n+fn clone_on_ref_ptr() {\n+    let rc = Rc::new(true);\n+    let arc = Arc::new(true);\n+\n+    let rcweak = Rc::downgrade(&rc);\n+    let arc_weak = Arc::downgrade(&arc);\n+\n+    rc.clone();\n+    Rc::clone(&rc);\n+\n+    arc.clone();\n+    Arc::clone(&arc);\n+\n+    rcweak.clone();\n+    rc::Weak::clone(&rcweak);\n+\n+    arc_weak.clone();\n+    sync::Weak::clone(&arc_weak);\n+\n+\n+}\n+\n fn clone_on_copy_generic<T: Copy>(t: T) {\n     t.clone();\n "}, {"sha": "e22fdc116c17efd4444c8bfc9403959873465464", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 269, "deletions": 243, "changes": 512, "blob_url": "https://github.com/rust-lang/rust/blob/d318ced660bee68bac0c2c2810b45d747f673cee/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d318ced660bee68bac0c2c2810b45d747f673cee/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=d318ced660bee68bac0c2c2810b45d747f673cee", "patch": "@@ -1,716 +1,742 @@\n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:18:25\n+  --> $DIR/methods.rs:20:25\n    |\n-18 |     fn add(self, other: T) -> T { self }\n+20 |     fn add(self, other: T) -> T { self }\n    |                         ^ help: use the applicable keyword: `Self`\n    |\n    = note: `-D use-self` implied by `-D warnings`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:18:31\n+  --> $DIR/methods.rs:20:31\n    |\n-18 |     fn add(self, other: T) -> T { self }\n+20 |     fn add(self, other: T) -> T { self }\n    |                               ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:21:26\n+  --> $DIR/methods.rs:23:26\n    |\n-21 |     fn sub(&self, other: T) -> &T { self } // no error, self is a ref\n+23 |     fn sub(&self, other: T) -> &T { self } // no error, self is a ref\n    |                          ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:21:33\n+  --> $DIR/methods.rs:23:33\n    |\n-21 |     fn sub(&self, other: T) -> &T { self } // no error, self is a ref\n+23 |     fn sub(&self, other: T) -> &T { self } // no error, self is a ref\n    |                                 ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:22:21\n+  --> $DIR/methods.rs:24:21\n    |\n-22 |     fn div(self) -> T { self } // no error, different #arguments\n+24 |     fn div(self) -> T { self } // no error, different #arguments\n    |                     ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:23:25\n+  --> $DIR/methods.rs:25:25\n    |\n-23 |     fn rem(self, other: T) { } // no error, wrong return type\n+25 |     fn rem(self, other: T) { } // no error, wrong return type\n    |                         ^ help: use the applicable keyword: `Self`\n \n error: defining a method called `add` on this type; consider implementing the `std::ops::Add` trait or choosing a less ambiguous name\n-  --> $DIR/methods.rs:18:5\n+  --> $DIR/methods.rs:20:5\n    |\n-18 |     fn add(self, other: T) -> T { self }\n+20 |     fn add(self, other: T) -> T { self }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D should-implement-trait` implied by `-D warnings`\n \n error: defining a method called `drop` on this type; consider implementing the `std::ops::Drop` trait or choosing a less ambiguous name\n-  --> $DIR/methods.rs:19:5\n+  --> $DIR/methods.rs:21:5\n    |\n-19 |     fn drop(&mut self) { }\n+21 |     fn drop(&mut self) { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: methods called `into_*` usually take self by value; consider choosing a less ambiguous name\n-  --> $DIR/methods.rs:26:17\n+  --> $DIR/methods.rs:28:17\n    |\n-26 |     fn into_u16(&self) -> u16 { 0 }\n+28 |     fn into_u16(&self) -> u16 { 0 }\n    |                 ^^^^^\n    |\n    = note: `-D wrong-self-convention` implied by `-D warnings`\n \n error: methods called `to_*` usually take self by reference; consider choosing a less ambiguous name\n-  --> $DIR/methods.rs:28:21\n+  --> $DIR/methods.rs:30:21\n    |\n-28 |     fn to_something(self) -> u32 { 0 }\n+30 |     fn to_something(self) -> u32 { 0 }\n    |                     ^^^^\n \n error: methods called `new` usually take no self; consider choosing a less ambiguous name\n-  --> $DIR/methods.rs:30:12\n+  --> $DIR/methods.rs:32:12\n    |\n-30 |     fn new(self) {}\n+32 |     fn new(self) {}\n    |            ^^^^\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/methods.rs:30:5\n+  --> $DIR/methods.rs:32:5\n    |\n-30 |     fn new(self) {}\n+32 |     fn new(self) {}\n    |     ^^^^^^^^^^^^^^^\n    |\n    = note: `-D new-ret-no-self` implied by `-D warnings`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:74:24\n+  --> $DIR/methods.rs:76:24\n    |\n-74 |     fn new() -> Option<V<T>> { None }\n+76 |     fn new() -> Option<V<T>> { None }\n    |                        ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:78:19\n+  --> $DIR/methods.rs:80:19\n    |\n-78 |     type Output = T;\n+80 |     type Output = T;\n    |                   ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:79:25\n+  --> $DIR/methods.rs:81:25\n    |\n-79 |     fn mul(self, other: T) -> T { self } // no error, obviously\n+81 |     fn mul(self, other: T) -> T { self } // no error, obviously\n    |                         ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:79:31\n+  --> $DIR/methods.rs:81:31\n    |\n-79 |     fn mul(self, other: T) -> T { self } // no error, obviously\n+81 |     fn mul(self, other: T) -> T { self } // no error, obviously\n    |                               ^ help: use the applicable keyword: `Self`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:97:13\n-   |\n-97 |       let _ = opt.map(|x| x + 1)\n-   |  _____________^\n-98 | |\n-99 | |                .unwrap_or(0); // should lint even though this call is on a separate line\n-   | |____________________________^\n-   |\n-   = note: `-D option-map-unwrap-or` implied by `-D warnings`\n-   = note: replace `map(|x| x + 1).unwrap_or(0)` with `map_or(0, |x| x + 1)`\n+   --> $DIR/methods.rs:99:13\n+    |\n+99  |       let _ = opt.map(|x| x + 1)\n+    |  _____________^\n+100 | |\n+101 | |                .unwrap_or(0); // should lint even though this call is on a separate line\n+    | |____________________________^\n+    |\n+    = note: `-D option-map-unwrap-or` implied by `-D warnings`\n+    = note: replace `map(|x| x + 1).unwrap_or(0)` with `map_or(0, |x| x + 1)`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-   --> $DIR/methods.rs:101:13\n+   --> $DIR/methods.rs:103:13\n     |\n-101 |       let _ = opt.map(|x| {\n+103 |       let _ = opt.map(|x| {\n     |  _____________^\n-102 | |                         x + 1\n-103 | |                     }\n-104 | |               ).unwrap_or(0);\n+104 | |                         x + 1\n+105 | |                     }\n+106 | |               ).unwrap_or(0);\n     | |____________________________^\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-   --> $DIR/methods.rs:105:13\n+   --> $DIR/methods.rs:107:13\n     |\n-105 |       let _ = opt.map(|x| x + 1)\n+107 |       let _ = opt.map(|x| x + 1)\n     |  _____________^\n-106 | |                .unwrap_or({\n-107 | |                     0\n-108 | |                 });\n+108 | |                .unwrap_or({\n+109 | |                     0\n+110 | |                 });\n     | |__________________^\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:114:13\n+   --> $DIR/methods.rs:116:13\n     |\n-114 |       let _ = opt.map(|x| x + 1)\n+116 |       let _ = opt.map(|x| x + 1)\n     |  _____________^\n-115 | |\n-116 | |                .unwrap_or_else(|| 0); // should lint even though this call is on a separate line\n+117 | |\n+118 | |                .unwrap_or_else(|| 0); // should lint even though this call is on a separate line\n     | |____________________________________^\n     |\n     = note: `-D option-map-unwrap-or-else` implied by `-D warnings`\n     = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:118:13\n+   --> $DIR/methods.rs:120:13\n     |\n-118 |       let _ = opt.map(|x| {\n+120 |       let _ = opt.map(|x| {\n     |  _____________^\n-119 | |                         x + 1\n-120 | |                     }\n-121 | |               ).unwrap_or_else(|| 0);\n+121 | |                         x + 1\n+122 | |                     }\n+123 | |               ).unwrap_or_else(|| 0);\n     | |____________________________________^\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:122:13\n+   --> $DIR/methods.rs:124:13\n     |\n-122 |       let _ = opt.map(|x| x + 1)\n+124 |       let _ = opt.map(|x| x + 1)\n     |  _____________^\n-123 | |                .unwrap_or_else(||\n-124 | |                     0\n-125 | |                 );\n+125 | |                .unwrap_or_else(||\n+126 | |                     0\n+127 | |                 );\n     | |_________________^\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:151:24\n+   --> $DIR/methods.rs:153:24\n     |\n-151 |     fn filter(self) -> IteratorFalsePositives {\n+153 |     fn filter(self) -> IteratorFalsePositives {\n     |                        ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:155:22\n+   --> $DIR/methods.rs:157:22\n     |\n-155 |     fn next(self) -> IteratorFalsePositives {\n+157 |     fn next(self) -> IteratorFalsePositives {\n     |                      ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:175:32\n+   --> $DIR/methods.rs:177:32\n     |\n-175 |     fn skip(self, _: usize) -> IteratorFalsePositives {\n+177 |     fn skip(self, _: usize) -> IteratorFalsePositives {\n     |                                ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-   --> $DIR/methods.rs:194:13\n+   --> $DIR/methods.rs:196:13\n     |\n-194 |     let _ = v.iter().filter(|&x| *x < 0).next();\n+196 |     let _ = v.iter().filter(|&x| *x < 0).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D filter-next` implied by `-D warnings`\n     = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-   --> $DIR/methods.rs:197:13\n+   --> $DIR/methods.rs:199:13\n     |\n-197 |       let _ = v.iter().filter(|&x| {\n+199 |       let _ = v.iter().filter(|&x| {\n     |  _____________^\n-198 | |                                 *x < 0\n-199 | |                             }\n-200 | |                    ).next();\n+200 | |                                 *x < 0\n+201 | |                             }\n+202 | |                    ).next();\n     | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:212:13\n+   --> $DIR/methods.rs:214:13\n     |\n-212 |     let _ = v.iter().find(|&x| *x < 0).is_some();\n+214 |     let _ = v.iter().find(|&x| *x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D search-is-some` implied by `-D warnings`\n     = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:215:13\n+   --> $DIR/methods.rs:217:13\n     |\n-215 |       let _ = v.iter().find(|&x| {\n+217 |       let _ = v.iter().find(|&x| {\n     |  _____________^\n-216 | |                               *x < 0\n-217 | |                           }\n-218 | |                    ).is_some();\n+218 | |                               *x < 0\n+219 | |                           }\n+220 | |                    ).is_some();\n     | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:221:13\n+   --> $DIR/methods.rs:223:13\n     |\n-221 |     let _ = v.iter().position(|&x| x < 0).is_some();\n+223 |     let _ = v.iter().position(|&x| x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:224:13\n+   --> $DIR/methods.rs:226:13\n     |\n-224 |       let _ = v.iter().position(|&x| {\n+226 |       let _ = v.iter().position(|&x| {\n     |  _____________^\n-225 | |                                   x < 0\n-226 | |                               }\n-227 | |                    ).is_some();\n+227 | |                                   x < 0\n+228 | |                               }\n+229 | |                    ).is_some();\n     | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:230:13\n+   --> $DIR/methods.rs:232:13\n     |\n-230 |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n+232 |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:233:13\n+   --> $DIR/methods.rs:235:13\n     |\n-233 |       let _ = v.iter().rposition(|&x| {\n+235 |       let _ = v.iter().rposition(|&x| {\n     |  _____________^\n-234 | |                                    x < 0\n-235 | |                                }\n-236 | |                    ).is_some();\n+236 | |                                    x < 0\n+237 | |                                }\n+238 | |                    ).is_some();\n     | |______________________________^\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:250:21\n+   --> $DIR/methods.rs:252:21\n     |\n-250 |         fn new() -> Foo { Foo }\n+252 |         fn new() -> Foo { Foo }\n     |                     ^^^ help: use the applicable keyword: `Self`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:268:5\n+   --> $DIR/methods.rs:270:5\n     |\n-268 |     with_constructor.unwrap_or(make());\n+270 |     with_constructor.unwrap_or(make());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_constructor.unwrap_or_else(make)`\n     |\n     = note: `-D or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a call to `new`\n-   --> $DIR/methods.rs:271:5\n+   --> $DIR/methods.rs:273:5\n     |\n-271 |     with_new.unwrap_or(Vec::new());\n+273 |     with_new.unwrap_or(Vec::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:274:5\n+   --> $DIR/methods.rs:276:5\n     |\n-274 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n+276 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_const_args.unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:277:5\n+   --> $DIR/methods.rs:279:5\n     |\n-277 |     with_err.unwrap_or(make());\n+279 |     with_err.unwrap_or(make());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err.unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:280:5\n+   --> $DIR/methods.rs:282:5\n     |\n-280 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n+282 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err_args.unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-   --> $DIR/methods.rs:283:5\n+   --> $DIR/methods.rs:285:5\n     |\n-283 |     with_default_trait.unwrap_or(Default::default());\n+285 |     with_default_trait.unwrap_or(Default::default());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-   --> $DIR/methods.rs:286:5\n+   --> $DIR/methods.rs:288:5\n     |\n-286 |     with_default_type.unwrap_or(u64::default());\n+288 |     with_default_type.unwrap_or(u64::default());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:289:5\n+   --> $DIR/methods.rs:291:5\n     |\n-289 |     with_vec.unwrap_or(vec![]);\n+291 |     with_vec.unwrap_or(vec![]);\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_vec.unwrap_or_else(|| < [ _ ] > :: into_vec ( box [ $ ( $ x ) , * ] ))`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:294:5\n+   --> $DIR/methods.rs:296:5\n     |\n-294 |     without_default.unwrap_or(Foo::new());\n+296 |     without_default.unwrap_or(Foo::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `without_default.unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:297:5\n+   --> $DIR/methods.rs:299:5\n     |\n-297 |     map.entry(42).or_insert(String::new());\n+299 |     map.entry(42).or_insert(String::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `map.entry(42).or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:300:5\n+   --> $DIR/methods.rs:302:5\n     |\n-300 |     btree.entry(42).or_insert(String::new());\n+302 |     btree.entry(42).or_insert(String::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `btree.entry(42).or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:303:13\n+   --> $DIR/methods.rs:305:13\n     |\n-303 |     let _ = stringy.unwrap_or(\"\".to_owned());\n+305 |     let _ = stringy.unwrap_or(\"\".to_owned());\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `stringy.unwrap_or_else(|| \"\".to_owned())`\n \n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:314:23\n+   --> $DIR/methods.rs:316:23\n     |\n-314 |         let bad_vec = some_vec.iter().nth(3);\n+316 |         let bad_vec = some_vec.iter().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:315:26\n+   --> $DIR/methods.rs:317:26\n     |\n-315 |         let bad_slice = &some_vec[..].iter().nth(3);\n+317 |         let bad_slice = &some_vec[..].iter().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:316:31\n+   --> $DIR/methods.rs:318:31\n     |\n-316 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n+318 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:317:29\n+   --> $DIR/methods.rs:319:29\n     |\n-317 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n+319 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:322:23\n+   --> $DIR/methods.rs:324:23\n     |\n-322 |         let bad_vec = some_vec.iter_mut().nth(3);\n+324 |         let bad_vec = some_vec.iter_mut().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:325:26\n+   --> $DIR/methods.rs:327:26\n     |\n-325 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n+327 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:328:29\n+   --> $DIR/methods.rs:330:29\n     |\n-328 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+330 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:340:13\n+   --> $DIR/methods.rs:342:13\n     |\n-340 |     let _ = some_vec.iter().skip(42).next();\n+342 |     let _ = some_vec.iter().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-skip-next` implied by `-D warnings`\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:341:13\n+   --> $DIR/methods.rs:343:13\n     |\n-341 |     let _ = some_vec.iter().cycle().skip(42).next();\n+343 |     let _ = some_vec.iter().cycle().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:342:13\n+   --> $DIR/methods.rs:344:13\n     |\n-342 |     let _ = (1..10).skip(10).next();\n+344 |     let _ = (1..10).skip(10).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:343:14\n+   --> $DIR/methods.rs:345:14\n     |\n-343 |     let _ = &some_vec[..].iter().skip(3).next();\n+345 |     let _ = &some_vec[..].iter().skip(3).next();\n     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:369:17\n+   --> $DIR/methods.rs:371:17\n     |\n-369 |         let _ = boxed_slice.get(1).unwrap();\n+371 |         let _ = boxed_slice.get(1).unwrap();\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&boxed_slice[1]`\n     |\n     = note: `-D get-unwrap` implied by `-D warnings`\n \n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:370:17\n+   --> $DIR/methods.rs:372:17\n     |\n-370 |         let _ = some_slice.get(0).unwrap();\n+372 |         let _ = some_slice.get(0).unwrap();\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_slice[0]`\n \n error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:371:17\n+   --> $DIR/methods.rs:373:17\n     |\n-371 |         let _ = some_vec.get(0).unwrap();\n+373 |         let _ = some_vec.get(0).unwrap();\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vec[0]`\n \n error: called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:372:17\n+   --> $DIR/methods.rs:374:17\n     |\n-372 |         let _ = some_vecdeque.get(0).unwrap();\n+374 |         let _ = some_vecdeque.get(0).unwrap();\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vecdeque[0]`\n \n error: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:373:17\n+   --> $DIR/methods.rs:375:17\n     |\n-373 |         let _ = some_hashmap.get(&1).unwrap();\n+375 |         let _ = some_hashmap.get(&1).unwrap();\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_hashmap[&1]`\n \n error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:374:17\n+   --> $DIR/methods.rs:376:17\n     |\n-374 |         let _ = some_btreemap.get(&1).unwrap();\n+376 |         let _ = some_btreemap.get(&1).unwrap();\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_btreemap[&1]`\n \n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:379:10\n+   --> $DIR/methods.rs:381:10\n     |\n-379 |         *boxed_slice.get_mut(0).unwrap() = 1;\n+381 |         *boxed_slice.get_mut(0).unwrap() = 1;\n     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut boxed_slice[0]`\n \n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:380:10\n+   --> $DIR/methods.rs:382:10\n     |\n-380 |         *some_slice.get_mut(0).unwrap() = 1;\n+382 |         *some_slice.get_mut(0).unwrap() = 1;\n     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_slice[0]`\n \n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:381:10\n+   --> $DIR/methods.rs:383:10\n     |\n-381 |         *some_vec.get_mut(0).unwrap() = 1;\n+383 |         *some_vec.get_mut(0).unwrap() = 1;\n     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vec[0]`\n \n error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:382:10\n+   --> $DIR/methods.rs:384:10\n     |\n-382 |         *some_vecdeque.get_mut(0).unwrap() = 1;\n+384 |         *some_vecdeque.get_mut(0).unwrap() = 1;\n     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vecdeque[0]`\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:396:13\n+   --> $DIR/methods.rs:398:13\n     |\n-396 |     let _ = opt.unwrap();\n+398 |     let _ = opt.unwrap();\n     |             ^^^^^^^^^^^^\n     |\n     = note: `-D option-unwrap-used` implied by `-D warnings`\n \n error: used unwrap() on a Result value. If you don't want to handle the Err case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:399:13\n+   --> $DIR/methods.rs:401:13\n     |\n-399 |     let _ = res.unwrap();\n+401 |     let _ = res.unwrap();\n     |             ^^^^^^^^^^^^\n     |\n     = note: `-D result-unwrap-used` implied by `-D warnings`\n \n error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:401:5\n+   --> $DIR/methods.rs:403:5\n     |\n-401 |     res.ok().expect(\"disaster!\");\n+403 |     res.ok().expect(\"disaster!\");\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D ok-expect` implied by `-D warnings`\n \n error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:407:5\n+   --> $DIR/methods.rs:409:5\n     |\n-407 |     res3.ok().expect(\"whoof\");\n+409 |     res3.ok().expect(\"whoof\");\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:409:5\n+   --> $DIR/methods.rs:411:5\n     |\n-409 |     res4.ok().expect(\"argh\");\n+411 |     res4.ok().expect(\"argh\");\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:411:5\n+   --> $DIR/methods.rs:413:5\n     |\n-411 |     res5.ok().expect(\"oops\");\n+413 |     res5.ok().expect(\"oops\");\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:413:5\n+   --> $DIR/methods.rs:415:5\n     |\n-413 |     res6.ok().expect(\"meh\");\n+415 |     res6.ok().expect(\"meh\");\n     |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should use the `starts_with` method\n-   --> $DIR/methods.rs:425:5\n+   --> $DIR/methods.rs:427:5\n     |\n-425 |     \"\".chars().next() == Some(' ');\n+427 |     \"\".chars().next() == Some(' ');\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `\"\".starts_with(' ')`\n     |\n     = note: `-D chars-next-cmp` implied by `-D warnings`\n \n error: you should use the `starts_with` method\n-   --> $DIR/methods.rs:426:5\n+   --> $DIR/methods.rs:428:5\n     |\n-426 |     Some(' ') != \"\".chars().next();\n+428 |     Some(' ') != \"\".chars().next();\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!\"\".starts_with(' ')`\n \n error: calling `.extend(_.chars())`\n-   --> $DIR/methods.rs:435:5\n+   --> $DIR/methods.rs:437:5\n     |\n-435 |     s.extend(abc.chars());\n+437 |     s.extend(abc.chars());\n     |     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(abc)`\n     |\n     = note: `-D string-extend-chars` implied by `-D warnings`\n \n error: calling `.extend(_.chars())`\n-   --> $DIR/methods.rs:438:5\n+   --> $DIR/methods.rs:440:5\n     |\n-438 |     s.extend(\"abc\".chars());\n+440 |     s.extend(\"abc\".chars());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(\"abc\")`\n \n error: calling `.extend(_.chars())`\n-   --> $DIR/methods.rs:441:5\n+   --> $DIR/methods.rs:443:5\n     |\n-441 |     s.extend(def.chars());\n+443 |     s.extend(def.chars());\n     |     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(&def)`\n \n error: using `clone` on a `Copy` type\n-   --> $DIR/methods.rs:452:5\n+   --> $DIR/methods.rs:454:5\n     |\n-452 |     42.clone();\n+454 |     42.clone();\n     |     ^^^^^^^^^^ help: try removing the `clone` call: `42`\n     |\n     = note: `-D clone-on-copy` implied by `-D warnings`\n \n error: using `clone` on a `Copy` type\n-   --> $DIR/methods.rs:456:5\n+   --> $DIR/methods.rs:458:5\n     |\n-456 |     (&42).clone();\n+458 |     (&42).clone();\n     |     ^^^^^^^^^^^^^ help: try dereferencing it: `*(&42)`\n \n+error: using '.clone()' on a ref-counted pointer\n+   --> $DIR/methods.rs:468:5\n+    |\n+468 |     rc.clone();\n+    |     ^^^^^^^^^^ help: try this: `Rc::clone(&rc)`\n+    |\n+    = note: `-D clone-on-ref-ptr` implied by `-D warnings`\n+\n+error: using '.clone()' on a ref-counted pointer\n+   --> $DIR/methods.rs:471:5\n+    |\n+471 |     arc.clone();\n+    |     ^^^^^^^^^^^ help: try this: `Arc::clone(&arc)`\n+\n+error: using '.clone()' on a ref-counted pointer\n+   --> $DIR/methods.rs:474:5\n+    |\n+474 |     rcweak.clone();\n+    |     ^^^^^^^^^^^^^^ help: try this: `Weak::clone(&rcweak)`\n+\n+error: using '.clone()' on a ref-counted pointer\n+   --> $DIR/methods.rs:477:5\n+    |\n+477 |     arc_weak.clone();\n+    |     ^^^^^^^^^^^^^^^^ help: try this: `Weak::clone(&arc_weak)`\n+\n error: using `clone` on a `Copy` type\n-   --> $DIR/methods.rs:460:5\n+   --> $DIR/methods.rs:484:5\n     |\n-460 |     t.clone();\n+484 |     t.clone();\n     |     ^^^^^^^^^ help: try removing the `clone` call: `t`\n \n error: using `clone` on a `Copy` type\n-   --> $DIR/methods.rs:462:5\n+   --> $DIR/methods.rs:486:5\n     |\n-462 |     Some(t).clone();\n+486 |     Some(t).clone();\n     |     ^^^^^^^^^^^^^^^ help: try removing the `clone` call: `Some(t)`\n \n error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n-   --> $DIR/methods.rs:468:22\n+   --> $DIR/methods.rs:492:22\n     |\n-468 |     let z: &Vec<_> = y.clone();\n+492 |     let z: &Vec<_> = y.clone();\n     |                      ^^^^^^^^^ help: try dereferencing it: `(*y).clone()`\n     |\n     = note: `-D clone-double-ref` implied by `-D warnings`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:475:13\n+   --> $DIR/methods.rs:499:13\n     |\n-475 |     x.split(\"x\");\n+499 |     x.split(\"x\");\n     |     --------^^^- help: try using a char instead: `x.split('x')`\n     |\n     = note: `-D single-char-pattern` implied by `-D warnings`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:492:16\n+   --> $DIR/methods.rs:516:16\n     |\n-492 |     x.contains(\"x\");\n+516 |     x.contains(\"x\");\n     |     -----------^^^- help: try using a char instead: `x.contains('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:493:19\n+   --> $DIR/methods.rs:517:19\n     |\n-493 |     x.starts_with(\"x\");\n+517 |     x.starts_with(\"x\");\n     |     --------------^^^- help: try using a char instead: `x.starts_with('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:494:17\n+   --> $DIR/methods.rs:518:17\n     |\n-494 |     x.ends_with(\"x\");\n+518 |     x.ends_with(\"x\");\n     |     ------------^^^- help: try using a char instead: `x.ends_with('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:495:12\n+   --> $DIR/methods.rs:519:12\n     |\n-495 |     x.find(\"x\");\n+519 |     x.find(\"x\");\n     |     -------^^^- help: try using a char instead: `x.find('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:496:13\n+   --> $DIR/methods.rs:520:13\n     |\n-496 |     x.rfind(\"x\");\n+520 |     x.rfind(\"x\");\n     |     --------^^^- help: try using a char instead: `x.rfind('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:497:14\n+   --> $DIR/methods.rs:521:14\n     |\n-497 |     x.rsplit(\"x\");\n+521 |     x.rsplit(\"x\");\n     |     ---------^^^- help: try using a char instead: `x.rsplit('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:498:24\n+   --> $DIR/methods.rs:522:24\n     |\n-498 |     x.split_terminator(\"x\");\n+522 |     x.split_terminator(\"x\");\n     |     -------------------^^^- help: try using a char instead: `x.split_terminator('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:499:25\n+   --> $DIR/methods.rs:523:25\n     |\n-499 |     x.rsplit_terminator(\"x\");\n+523 |     x.rsplit_terminator(\"x\");\n     |     --------------------^^^- help: try using a char instead: `x.rsplit_terminator('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:500:17\n+   --> $DIR/methods.rs:524:17\n     |\n-500 |     x.splitn(0, \"x\");\n+524 |     x.splitn(0, \"x\");\n     |     ------------^^^- help: try using a char instead: `x.splitn(0, 'x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:501:18\n+   --> $DIR/methods.rs:525:18\n     |\n-501 |     x.rsplitn(0, \"x\");\n+525 |     x.rsplitn(0, \"x\");\n     |     -------------^^^- help: try using a char instead: `x.rsplitn(0, 'x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:502:15\n+   --> $DIR/methods.rs:526:15\n     |\n-502 |     x.matches(\"x\");\n+526 |     x.matches(\"x\");\n     |     ----------^^^- help: try using a char instead: `x.matches('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:503:16\n+   --> $DIR/methods.rs:527:16\n     |\n-503 |     x.rmatches(\"x\");\n+527 |     x.rmatches(\"x\");\n     |     -----------^^^- help: try using a char instead: `x.rmatches('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:504:21\n+   --> $DIR/methods.rs:528:21\n     |\n-504 |     x.match_indices(\"x\");\n+528 |     x.match_indices(\"x\");\n     |     ----------------^^^- help: try using a char instead: `x.match_indices('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:505:22\n+   --> $DIR/methods.rs:529:22\n     |\n-505 |     x.rmatch_indices(\"x\");\n+529 |     x.rmatch_indices(\"x\");\n     |     -----------------^^^- help: try using a char instead: `x.rmatch_indices('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:506:25\n+   --> $DIR/methods.rs:530:25\n     |\n-506 |     x.trim_left_matches(\"x\");\n+530 |     x.trim_left_matches(\"x\");\n     |     --------------------^^^- help: try using a char instead: `x.trim_left_matches('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:507:26\n+   --> $DIR/methods.rs:531:26\n     |\n-507 |     x.trim_right_matches(\"x\");\n+531 |     x.trim_right_matches(\"x\");\n     |     ---------------------^^^- help: try using a char instead: `x.trim_right_matches('x')`\n \n error: you are getting the inner pointer of a temporary `CString`\n-   --> $DIR/methods.rs:517:5\n+   --> $DIR/methods.rs:541:5\n     |\n-517 |     CString::new(\"foo\").unwrap().as_ptr();\n+541 |     CString::new(\"foo\").unwrap().as_ptr();\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D temporary-cstring-as-ptr` implied by `-D warnings`\n     = note: that pointer will be invalid outside this expression\n help: assign the `CString` to a variable to extend its lifetime\n-   --> $DIR/methods.rs:517:5\n+   --> $DIR/methods.rs:541:5\n     |\n-517 |     CString::new(\"foo\").unwrap().as_ptr();\n+541 |     CString::new(\"foo\").unwrap().as_ptr();\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n-   --> $DIR/methods.rs:522:27\n+   --> $DIR/methods.rs:546:27\n     |\n-522 |     let v2 : Vec<isize> = v.iter().cloned().collect();\n+546 |     let v2 : Vec<isize> = v.iter().cloned().collect();\n     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-cloned-collect` implied by `-D warnings`\n \n-error: aborting due to 103 previous errors\n+error: aborting due to 107 previous errors\n "}]}