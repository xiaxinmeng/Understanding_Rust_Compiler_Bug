{"sha": "05c5caa5002297d2e3ba31f2ead7556a732a2289", "node_id": "C_kwDOAAsO6NoAKDA1YzVjYWE1MDAyMjk3ZDJlM2JhMzFmMmVhZDc1NTZhNzMyYTIyODk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-23T03:23:52Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-23T03:23:52Z"}, "message": "Don't ICE if method receiver fails to unify with arbitrary_self_types", "tree": {"sha": "e3f653d28570ed9169a8ce5d91dae8bc07c54b85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3f653d28570ed9169a8ce5d91dae8bc07c54b85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05c5caa5002297d2e3ba31f2ead7556a732a2289", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05c5caa5002297d2e3ba31f2ead7556a732a2289", "html_url": "https://github.com/rust-lang/rust/commit/05c5caa5002297d2e3ba31f2ead7556a732a2289", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05c5caa5002297d2e3ba31f2ead7556a732a2289/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b67f8b013890fec98e4a2e72b568731d3a58c1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b67f8b013890fec98e4a2e72b568731d3a58c1f", "html_url": "https://github.com/rust-lang/rust/commit/1b67f8b013890fec98e4a2e72b568731d3a58c1f"}], "stats": {"total": 50, "additions": 42, "deletions": 8}, "files": [{"sha": "98529b66602faa30df3f4bd6a883ab179386a961", "filename": "compiler/rustc_hir_typeck/src/method/confirm.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/05c5caa5002297d2e3ba31f2ead7556a732a2289/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c5caa5002297d2e3ba31f2ead7556a732a2289/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs?ref=05c5caa5002297d2e3ba31f2ead7556a732a2289", "patch": "@@ -471,7 +471,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n             self_ty, method_self_ty, self.span, pick\n         );\n         let cause = self.cause(\n-            self.span,\n+            self.self_expr.span,\n             ObligationCauseCode::UnifyReceiver(Box::new(UnifyReceiverContext {\n                 assoc_item: pick.item,\n                 param_env: self.param_env,\n@@ -482,13 +482,22 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n             Ok(InferOk { obligations, value: () }) => {\n                 self.register_predicates(obligations);\n             }\n-            Err(_) => {\n-                span_bug!(\n-                    self.span,\n-                    \"{} was a subtype of {} but now is not?\",\n-                    self_ty,\n-                    method_self_ty\n-                );\n+            Err(terr) => {\n+                // FIXME(arbitrary_self_types): We probably should limit the\n+                // situations where this can occur by adding additional restrictions\n+                // to the feature, like the self type can't reference method substs.\n+                if self.tcx.features().arbitrary_self_types {\n+                    self.err_ctxt()\n+                        .report_mismatched_types(&cause, method_self_ty, self_ty, terr)\n+                        .emit();\n+                } else {\n+                    span_bug!(\n+                        self.span,\n+                        \"{} was a subtype of {} but now is not?\",\n+                        self_ty,\n+                        method_self_ty\n+                    );\n+                }\n             }\n         }\n     }"}, {"sha": "0f911a20842bc4e0fe5650dc119c156cc6dea9d5", "filename": "tests/ui/self/arbitrary-self-from-method-substs.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/05c5caa5002297d2e3ba31f2ead7556a732a2289/tests%2Fui%2Fself%2Farbitrary-self-from-method-substs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c5caa5002297d2e3ba31f2ead7556a732a2289/tests%2Fui%2Fself%2Farbitrary-self-from-method-substs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Farbitrary-self-from-method-substs.rs?ref=05c5caa5002297d2e3ba31f2ead7556a732a2289", "patch": "@@ -0,0 +1,16 @@\n+#![feature(arbitrary_self_types)]\n+\n+use std::ops::Deref;\n+\n+struct Foo(u32);\n+impl Foo {\n+    fn get<R: Deref<Target=Self>>(self: R) -> u32 {\n+        self.0\n+    }\n+}\n+\n+fn main() {\n+    let mut foo = Foo(1);\n+    foo.get::<&Foo>();\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "6c252fadf46573e81167b32d91bf28591a34121a", "filename": "tests/ui/self/arbitrary-self-from-method-substs.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05c5caa5002297d2e3ba31f2ead7556a732a2289/tests%2Fui%2Fself%2Farbitrary-self-from-method-substs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05c5caa5002297d2e3ba31f2ead7556a732a2289/tests%2Fui%2Fself%2Farbitrary-self-from-method-substs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Farbitrary-self-from-method-substs.stderr?ref=05c5caa5002297d2e3ba31f2ead7556a732a2289", "patch": "@@ -0,0 +1,9 @@\n+error[E0308]: mismatched types\n+  --> $DIR/arbitrary-self-from-method-substs.rs:14:5\n+   |\n+LL |     foo.get::<&Foo>();\n+   |     ^^^ expected `&Foo`, found `Foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}