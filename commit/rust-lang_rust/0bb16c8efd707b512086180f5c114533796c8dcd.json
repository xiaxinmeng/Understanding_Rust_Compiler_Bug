{"sha": "0bb16c8efd707b512086180f5c114533796c8dcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYjE2YzhlZmQ3MDdiNTEyMDg2MTgwZjVjMTE0NTMzNzk2YzhkY2Q=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-15T18:01:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-15T18:01:13Z"}, "message": "Rollup merge of #74119 - nnethercote:rm-Compiler-compile, r=Mark-Simulacrum\n\nRemove `Compiler::compile()`.\n\nIt's unused.\n\nr? @Mark-Simulacrum", "tree": {"sha": "eca977044c5be3266a01a1ac81bb1a7be05d7a55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eca977044c5be3266a01a1ac81bb1a7be05d7a55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bb16c8efd707b512086180f5c114533796c8dcd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfD0RqCRBK7hj4Ov3rIwAAdHIIAJy2RidKhaMcGr3yi9QdlBsw\nVR7GyvfmONluFomtpl3ikfLn95zVkAi7KKIe49a5quch/dyg8Lw5WP6GxDqNiJAA\ngPyhZjCsVcvxyEivVv2SWRWlNoJpuZUWf1JNEs/nF4iSjD0u/ChDZLjlSV4JAVef\n4u2HicsbIqAUwIiAqaA0iDvmYhndDflhqVzRUzV2fGEmLdtFnfrd0cego86KCIVs\nD3uYpKdThrE6ht/kztP6IFw8Sf8HNGi7E3YM4qyQOIgJlMn1X8TJ4ax5gXK/wPCb\nsay2cFk5tj27m82sLeafiThZbmaRpNh3gOgDPIZZlpcu6S7YBMXzJQaadTeAMLk=\n=yrTy\n-----END PGP SIGNATURE-----\n", "payload": "tree eca977044c5be3266a01a1ac81bb1a7be05d7a55\nparent 1527126e0737c992bd19029ae7d1858cf8980ef1\nparent 6582240d1296516ea02882c8bb092688d2f43f20\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594836073 -0700\ncommitter GitHub <noreply@github.com> 1594836073 -0700\n\nRollup merge of #74119 - nnethercote:rm-Compiler-compile, r=Mark-Simulacrum\n\nRemove `Compiler::compile()`.\n\nIt's unused.\n\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb16c8efd707b512086180f5c114533796c8dcd", "html_url": "https://github.com/rust-lang/rust/commit/0bb16c8efd707b512086180f5c114533796c8dcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bb16c8efd707b512086180f5c114533796c8dcd/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1527126e0737c992bd19029ae7d1858cf8980ef1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1527126e0737c992bd19029ae7d1858cf8980ef1", "html_url": "https://github.com/rust-lang/rust/commit/1527126e0737c992bd19029ae7d1858cf8980ef1"}, {"sha": "6582240d1296516ea02882c8bb092688d2f43f20", "url": "https://api.github.com/repos/rust-lang/rust/commits/6582240d1296516ea02882c8bb092688d2f43f20", "html_url": "https://github.com/rust-lang/rust/commit/6582240d1296516ea02882c8bb092688d2f43f20"}], "stats": {"total": 34, "additions": 0, "deletions": 34}, "files": [{"sha": "4265e6dca6a240acfbda3cad626052c7ea0b1d03", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0bb16c8efd707b512086180f5c114533796c8dcd/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb16c8efd707b512086180f5c114533796c8dcd/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=0bb16c8efd707b512086180f5c114533796c8dcd", "patch": "@@ -18,7 +18,6 @@ use rustc_session::{output::find_crate_name, Session};\n use rustc_span::symbol::sym;\n use std::any::Any;\n use std::cell::{Ref, RefCell, RefMut};\n-use std::mem;\n use std::rc::Rc;\n \n /// Represent the result of a query.\n@@ -395,37 +394,4 @@ impl Compiler {\n \n         ret\n     }\n-\n-    // This method is different to all the other methods in `Compiler` because\n-    // it lacks a `Queries` entry. It's also not currently used. It does serve\n-    // as an example of how `Compiler` can be used, with additional steps added\n-    // between some passes. And see `rustc_driver::run_compiler` for a more\n-    // complex example.\n-    pub fn compile(&self) -> Result<()> {\n-        let linker = self.enter(|queries| {\n-            queries.prepare_outputs()?;\n-\n-            if self.session().opts.output_types.contains_key(&OutputType::DepInfo)\n-                && self.session().opts.output_types.len() == 1\n-            {\n-                return Ok(None);\n-            }\n-\n-            queries.global_ctxt()?;\n-\n-            // Drop AST after creating GlobalCtxt to free memory.\n-            mem::drop(queries.expansion()?.take());\n-\n-            queries.ongoing_codegen()?;\n-\n-            let linker = queries.linker()?;\n-            Ok(Some(linker))\n-        })?;\n-\n-        if let Some(linker) = linker {\n-            linker.link()?\n-        }\n-\n-        Ok(())\n-    }\n }"}]}