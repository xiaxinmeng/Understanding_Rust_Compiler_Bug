{"sha": "80db099558e1a15352b7e7911aa3e3d002baa210", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZGIwOTk1NThlMWExNTM1MmI3ZTc5MTFhYTNlM2QwMDJiYWEyMTA=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2016-03-03T09:27:42Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2016-03-03T09:27:42Z"}, "message": "Merge pull request #841 from kamalmarhubi/operation-struct-like-enum\n\nrustfmt: Use struct-like enum variants for Operation", "tree": {"sha": "088b6a4845aec2ad4d513660d8f6339159ee2e9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/088b6a4845aec2ad4d513660d8f6339159ee2e9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80db099558e1a15352b7e7911aa3e3d002baa210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80db099558e1a15352b7e7911aa3e3d002baa210", "html_url": "https://github.com/rust-lang/rust/commit/80db099558e1a15352b7e7911aa3e3d002baa210", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80db099558e1a15352b7e7911aa3e3d002baa210/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "684596fcddc0ffab45ba8ad0d3d8335af1ff1d2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/684596fcddc0ffab45ba8ad0d3d8335af1ff1d2f", "html_url": "https://github.com/rust-lang/rust/commit/684596fcddc0ffab45ba8ad0d3d8335af1ff1d2f"}, {"sha": "de1fc319c122c1d1f59d7a4f913ed28d0163667f", "url": "https://api.github.com/repos/rust-lang/rust/commits/de1fc319c122c1d1f59d7a4f913ed28d0163667f", "html_url": "https://github.com/rust-lang/rust/commit/de1fc319c122c1d1f59d7a4f913ed28d0163667f"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "1524384fc1286594f6a6f1851400f0a58465c7be", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/80db099558e1a15352b7e7911aa3e3d002baa210/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80db099558e1a15352b7e7911aa3e3d002baa210/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=80db099558e1a15352b7e7911aa3e3d002baa210", "patch": "@@ -31,17 +31,25 @@ use getopts::{Matches, Options};\n /// Rustfmt operations.\n enum Operation {\n     /// Format files and their child modules.\n-    Format(Vec<PathBuf>, Option<PathBuf>),\n+    Format {\n+        files: Vec<PathBuf>,\n+        config_path: Option<PathBuf>,\n+    },\n     /// Print the help message.\n     Help,\n     // Print version information\n     Version,\n     /// Print detailed configuration help.\n     ConfigHelp,\n-    /// Invalid program input, including reason.\n-    InvalidInput(String),\n+    /// Invalid program input.\n+    InvalidInput {\n+        reason: String,\n+    },\n     /// No file specified, read from stdin\n-    Stdin(String, Option<PathBuf>),\n+    Stdin {\n+        input: String,\n+        config_path: Option<PathBuf>,\n+    },\n }\n \n /// Try to find a project file in the given directory and its parents. Returns the path of a the\n@@ -156,7 +164,7 @@ fn execute() -> i32 {\n     let operation = determine_operation(&matches);\n \n     match operation {\n-        Operation::InvalidInput(reason) => {\n+        Operation::InvalidInput { reason } => {\n             print_usage(&opts, &reason);\n             1\n         }\n@@ -172,7 +180,7 @@ fn execute() -> i32 {\n             Config::print_docs();\n             0\n         }\n-        Operation::Stdin(input, config_path) => {\n+        Operation::Stdin { input, config_path } => {\n             // try to read config from local directory\n             let (mut config, _) = match_cli_path_or_file(config_path, &env::current_dir().unwrap())\n                                       .expect(\"Error resolving config\");\n@@ -183,7 +191,7 @@ fn execute() -> i32 {\n             run_from_stdin(input, &config);\n             0\n         }\n-        Operation::Format(files, config_path) => {\n+        Operation::Format { files, config_path } => {\n             let mut config = Config::default();\n             let mut path = None;\n             // Load the config path file if provided\n@@ -281,13 +289,19 @@ fn determine_operation(matches: &Matches) -> Operation {\n         let mut buffer = String::new();\n         match io::stdin().read_to_string(&mut buffer) {\n             Ok(..) => (),\n-            Err(e) => return Operation::InvalidInput(e.to_string()),\n+            Err(e) => return Operation::InvalidInput { reason: e.to_string() },\n         }\n \n-        return Operation::Stdin(buffer, config_path);\n+        return Operation::Stdin {\n+            input: buffer,\n+            config_path: config_path,\n+        };\n     }\n \n     let files: Vec<_> = matches.free.iter().map(PathBuf::from).collect();\n \n-    Operation::Format(files, config_path)\n+    Operation::Format {\n+        files: files,\n+        config_path: config_path,\n+    }\n }"}]}