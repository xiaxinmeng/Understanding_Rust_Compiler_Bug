{"sha": "cb985ba60f87124c763e4db7d5f912771f9ad772", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiOTg1YmE2MGY4NzEyNGM3NjNlNGRiN2Q1ZjkxMjc3MWY5YWQ3NzI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T10:49:56Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T21:41:29Z"}, "message": "extract parse_array_or_repeat_expr", "tree": {"sha": "e11d553a6ab346a7aa94dadfec6fde090bd5849f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e11d553a6ab346a7aa94dadfec6fde090bd5849f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb985ba60f87124c763e4db7d5f912771f9ad772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb985ba60f87124c763e4db7d5f912771f9ad772", "html_url": "https://github.com/rust-lang/rust/commit/cb985ba60f87124c763e4db7d5f912771f9ad772", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb985ba60f87124c763e4db7d5f912771f9ad772/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cb2b08a5d9f458fdcb20ae38bace2a49e7759ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cb2b08a5d9f458fdcb20ae38bace2a49e7759ff", "html_url": "https://github.com/rust-lang/rust/commit/9cb2b08a5d9f458fdcb20ae38bace2a49e7759ff"}], "stats": {"total": 84, "additions": 43, "deletions": 41}, "files": [{"sha": "b0ff7987149db075e6c20689ccfc05d6e96a5ab6", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 43, "deletions": 41, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/cb985ba60f87124c763e4db7d5f912771f9ad772/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb985ba60f87124c763e4db7d5f912771f9ad772/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=cb985ba60f87124c763e4db7d5f912771f9ad772", "patch": "@@ -820,7 +820,7 @@ impl<'a> Parser<'a> {\n         //\n         // Therefore, prevent sub-parser from parsing\n         // attributes by giving them a empty \"already-parsed\" list.\n-        let mut attrs = ThinVec::new();\n+        let attrs = ThinVec::new();\n \n         let lo = self.token.span;\n         let mut hi = self.token.span;\n@@ -849,46 +849,8 @@ impl<'a> Parser<'a> {\n             token::OpenDelim(token::Brace) => {\n                 return self.parse_block_expr(None, lo, BlockCheckMode::Default, attrs);\n             }\n-            token::BinOp(token::Or) | token::OrOr => {\n-                return self.parse_closure_expr(attrs);\n-            }\n-            token::OpenDelim(token::Bracket) => {\n-                self.bump();\n-\n-                attrs.extend(self.parse_inner_attributes()?);\n-\n-                if self.eat(&token::CloseDelim(token::Bracket)) {\n-                    // Empty vector\n-                    ex = ExprKind::Array(Vec::new());\n-                } else {\n-                    // Non-empty vector\n-                    let first_expr = self.parse_expr()?;\n-                    if self.eat(&token::Semi) {\n-                        // Repeating array syntax: `[ 0; 512 ]`\n-                        let count = AnonConst {\n-                            id: DUMMY_NODE_ID,\n-                            value: self.parse_expr()?,\n-                        };\n-                        self.expect(&token::CloseDelim(token::Bracket))?;\n-                        ex = ExprKind::Repeat(first_expr, count);\n-                    } else if self.eat(&token::Comma) {\n-                        // Vector with two or more elements\n-                        let remaining_exprs = self.parse_seq_to_end(\n-                            &token::CloseDelim(token::Bracket),\n-                            SeqSep::trailing_allowed(token::Comma),\n-                            |p| Ok(p.parse_expr()?)\n-                        )?;\n-                        let mut exprs = vec![first_expr];\n-                        exprs.extend(remaining_exprs);\n-                        ex = ExprKind::Array(exprs);\n-                    } else {\n-                        // Vector with one element\n-                        self.expect(&token::CloseDelim(token::Bracket))?;\n-                        ex = ExprKind::Array(vec![first_expr]);\n-                    }\n-                }\n-                hi = self.prev_span;\n-            }\n+            token::BinOp(token::Or) | token::OrOr => return self.parse_closure_expr(attrs),\n+            token::OpenDelim(token::Bracket) => return self.parse_array_or_repeat_expr(),\n             _ => {\n                 if self.eat_lt() {\n                     let (qself, path) = self.parse_qpath(PathStyle::Expr)?;\n@@ -1092,6 +1054,46 @@ impl<'a> Parser<'a> {\n         self.maybe_recover_from_bad_qpath(expr, true)\n     }\n \n+    fn parse_array_or_repeat_expr(&mut self) -> PResult<'a, P<Expr>> {\n+        let lo = self.token.span;\n+        self.bump(); // `[`\n+\n+        let attrs = self.parse_inner_attributes()?.into();\n+\n+        let kind = if self.eat(&token::CloseDelim(token::Bracket)) {\n+            // Empty vector\n+            ExprKind::Array(Vec::new())\n+        } else {\n+            // Non-empty vector\n+            let first_expr = self.parse_expr()?;\n+            if self.eat(&token::Semi) {\n+                // Repeating array syntax: `[ 0; 512 ]`\n+                let count = AnonConst {\n+                    id: DUMMY_NODE_ID,\n+                    value: self.parse_expr()?,\n+                };\n+                self.expect(&token::CloseDelim(token::Bracket))?;\n+                ExprKind::Repeat(first_expr, count)\n+            } else if self.eat(&token::Comma) {\n+                // Vector with two or more elements.\n+                let remaining_exprs = self.parse_seq_to_end(\n+                    &token::CloseDelim(token::Bracket),\n+                    SeqSep::trailing_allowed(token::Comma),\n+                    |p| Ok(p.parse_expr()?)\n+                )?;\n+                let mut exprs = vec![first_expr];\n+                exprs.extend(remaining_exprs);\n+                ExprKind::Array(exprs)\n+            } else {\n+                // Vector with one element\n+                self.expect(&token::CloseDelim(token::Bracket))?;\n+                ExprKind::Array(vec![first_expr])\n+            }\n+        };\n+        let expr = self.mk_expr(lo.to(self.prev_span), kind, attrs);\n+        self.maybe_recover_from_bad_qpath(expr, true)\n+    }\n+\n     /// Returns a string literal if the next token is a string literal.\n     /// In case of error returns `Some(lit)` if the next token is a literal with a wrong kind,\n     /// and returns `None` if the next token is not literal at all."}]}