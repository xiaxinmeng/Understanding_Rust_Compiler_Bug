{"sha": "2fd3093395d989bb8ada55440fb4101264e676e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZDMwOTMzOTVkOTg5YmI4YWRhNTU0NDBmYjQxMDEyNjRlNjc2ZTU=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2015-12-23T10:25:44Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2015-12-23T10:25:44Z"}, "message": "Only run MATCH_OVERLAPPING_ARM on integral matches", "tree": {"sha": "327624fdfa18ea908d8113337bd07a87a4d2dce1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/327624fdfa18ea908d8113337bd07a87a4d2dce1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fd3093395d989bb8ada55440fb4101264e676e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd3093395d989bb8ada55440fb4101264e676e5", "html_url": "https://github.com/rust-lang/rust/commit/2fd3093395d989bb8ada55440fb4101264e676e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fd3093395d989bb8ada55440fb4101264e676e5/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90efb7b76d401995eb054799dc55058aa66887c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/90efb7b76d401995eb054799dc55058aa66887c7", "html_url": "https://github.com/rust-lang/rust/commit/90efb7b76d401995eb054799dc55058aa66887c7"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "053b6b072b5171c7d36d3d9486219881bf057008", "filename": "src/matches.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2fd3093395d989bb8ada55440fb4101264e676e5/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd3093395d989bb8ada55440fb4101264e676e5/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=2fd3093395d989bb8ada55440fb4101264e676e5", "patch": "@@ -98,7 +98,7 @@ impl LateLintPass for MatchPass {\n         if let ExprMatch(ref ex, ref arms, MatchSource::Normal) = expr.node {\n             check_single_match(cx, ex, arms, expr);\n             check_match_bool(cx, ex, arms, expr);\n-            check_overlapping_arms(cx, arms);\n+            check_overlapping_arms(cx, ex, arms);\n         }\n         if let ExprMatch(ref ex, ref arms, source) = expr.node {\n             check_match_ref_pats(cx, ex, arms, source, expr);\n@@ -187,8 +187,9 @@ fn check_match_bool(cx: &LateContext, ex: &Expr, arms: &[Arm], expr: &Expr) {\n     }\n }\n \n-fn check_overlapping_arms(cx: &LateContext, arms: &[Arm]) {\n-    if arms.len() >= 2 {\n+fn check_overlapping_arms(cx: &LateContext, ex: &Expr, arms: &[Arm]) {\n+    if arms.len() >= 2 &&\n+       cx.tcx.expr_ty(ex).is_integral() {\n         let ranges = all_ranges(cx, arms);\n         let overlap = match type_ranges(&ranges) {\n             TypedRanges::IntRanges(ranges) => overlapping(&ranges).map(|(start, end)| (start.span, end.span)),"}]}