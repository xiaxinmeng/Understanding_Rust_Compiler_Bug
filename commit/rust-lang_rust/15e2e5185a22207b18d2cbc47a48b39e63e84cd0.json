{"sha": "15e2e5185a22207b18d2cbc47a48b39e63e84cd0", "node_id": "C_kwDOAAsO6NoAKDE1ZTJlNTE4NWEyMjIwN2IxOGQyY2JjNDdhNDhiMzllNjNlODRjZDA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-30T11:26:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-30T11:26:08Z"}, "message": "Rollup merge of #100473 - compiler-errors:normalize-the-fn-def-sig-plz, r=lcnr\n\nAttempt to normalize `FnDef` signature in `InferCtxt::cmp`\n\nStashes a normalization callback in `InferCtxt` so that the signature we get from `tcx.fn_sig(..).subst(..)` in `InferCtxt::cmp` can be properly normalized, since we cannot expect for it to have normalized types since it comes straight from astconv.\n\nThis is kind of a hack, but I will say that `@jyn514` found the fact that we present unnormalized types to be very confusing in real life code, and I agree with that feeling. Though altogether I am still a bit unsure about whether this PR is worth the effort, so I'm open to alternatives and/or just closing it outright.\n\nOn the other hand, this isn't a ridiculously heavy implementation anyways -- it's less than a hundred lines of changes, and half of that is just miscellaneous cleanup.\n\nThis is stacked onto #100471 which is basically unrelated, and it can be rebased off of that when that lands or if needed.\n\n---\n\nThe code:\n```rust\ntrait Foo { type Bar; }\n\nimpl<T> Foo for T {\n    type Bar = i32;\n}\n\nfn foo<T>(_: <T as Foo>::Bar) {}\n\nfn needs_i32_ref_fn(f: fn(&'static i32)) {}\n\nfn main() {\n    needs_i32_ref_fn(foo::<()>);\n}\n```\n\nBefore:\n```\n   = note: expected fn pointer `fn(&'static i32)`\n                 found fn item `fn(<() as Foo>::Bar) {foo::<()>}`\n```\n\nAfter:\n```\n   = note: expected fn pointer `fn(&'static i32)`\n                 found fn item `fn(i32) {foo::<()>}`\n```", "tree": {"sha": "93ddc8c688b1caa448a6ebab2ea58d6b8f7c0aaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93ddc8c688b1caa448a6ebab2ea58d6b8f7c0aaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15e2e5185a22207b18d2cbc47a48b39e63e84cd0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjDfPQCRBK7hj4Ov3rIwAAlYMIAANGBBANmbh39a2yNLgBI7h7\nkCCxRVgH/g9VOoFWC2Njhy1D+PD1X5FIxaATmo4Xlhn3y2r+F1MXtzabvOw1FRoR\naG+3OHFr8ERovKozPOpDldJ2IYlRZ3ZMLnuuQTYcX8Bu86jO+q6CI+bxjZG9Kzjp\nwb/xUPpqzn4+UFFkAtc+HZYxpQ9stuzBctq17M9HeXCFJp/za9XW+yZPkl+Ew7gb\n2TKlMlREZ0EVnUERo36F2Hrl8dyYVHgR8jBq6DYaYmJdcb3SV5JM1oG3O/UPFTra\nVDZ0Atr984tAE0bRMkFLcOe2kFIwFHYXvrhspxNysEFzvnnuF4JU2D4t9MsRrr8=\n=xh/w\n-----END PGP SIGNATURE-----\n", "payload": "tree 93ddc8c688b1caa448a6ebab2ea58d6b8f7c0aaa\nparent 9cfd161cd5b2e3b53c488086f8000aea0c21b0b2\nparent e5602cb2a0e114729625cf27db819ef56a79d86e\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1661858768 +0530\ncommitter GitHub <noreply@github.com> 1661858768 +0530\n\nRollup merge of #100473 - compiler-errors:normalize-the-fn-def-sig-plz, r=lcnr\n\nAttempt to normalize `FnDef` signature in `InferCtxt::cmp`\n\nStashes a normalization callback in `InferCtxt` so that the signature we get from `tcx.fn_sig(..).subst(..)` in `InferCtxt::cmp` can be properly normalized, since we cannot expect for it to have normalized types since it comes straight from astconv.\n\nThis is kind of a hack, but I will say that `@jyn514` found the fact that we present unnormalized types to be very confusing in real life code, and I agree with that feeling. Though altogether I am still a bit unsure about whether this PR is worth the effort, so I'm open to alternatives and/or just closing it outright.\n\nOn the other hand, this isn't a ridiculously heavy implementation anyways -- it's less than a hundred lines of changes, and half of that is just miscellaneous cleanup.\n\nThis is stacked onto #100471 which is basically unrelated, and it can be rebased off of that when that lands or if needed.\n\n---\n\nThe code:\n```rust\ntrait Foo { type Bar; }\n\nimpl<T> Foo for T {\n    type Bar = i32;\n}\n\nfn foo<T>(_: <T as Foo>::Bar) {}\n\nfn needs_i32_ref_fn(f: fn(&'static i32)) {}\n\nfn main() {\n    needs_i32_ref_fn(foo::<()>);\n}\n```\n\nBefore:\n```\n   = note: expected fn pointer `fn(&'static i32)`\n                 found fn item `fn(<() as Foo>::Bar) {foo::<()>}`\n```\n\nAfter:\n```\n   = note: expected fn pointer `fn(&'static i32)`\n                 found fn item `fn(i32) {foo::<()>}`\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15e2e5185a22207b18d2cbc47a48b39e63e84cd0", "html_url": "https://github.com/rust-lang/rust/commit/15e2e5185a22207b18d2cbc47a48b39e63e84cd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15e2e5185a22207b18d2cbc47a48b39e63e84cd0/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cfd161cd5b2e3b53c488086f8000aea0c21b0b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cfd161cd5b2e3b53c488086f8000aea0c21b0b2", "html_url": "https://github.com/rust-lang/rust/commit/9cfd161cd5b2e3b53c488086f8000aea0c21b0b2"}, {"sha": "e5602cb2a0e114729625cf27db819ef56a79d86e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5602cb2a0e114729625cf27db819ef56a79d86e", "html_url": "https://github.com/rust-lang/rust/commit/e5602cb2a0e114729625cf27db819ef56a79d86e"}], "stats": {"total": 139, "additions": 125, "deletions": 14}, "files": [{"sha": "00e238648712ffaf103d6750c4c5c3b9ce6fbede", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15e2e5185a22207b18d2cbc47a48b39e63e84cd0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e2e5185a22207b18d2cbc47a48b39e63e84cd0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=15e2e5185a22207b18d2cbc47a48b39e63e84cd0", "patch": "@@ -78,6 +78,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             err_count_on_creation: self.err_count_on_creation,\n             in_snapshot: self.in_snapshot.clone(),\n             universe: self.universe.clone(),\n+            normalize_fn_sig_for_diagnostic: self\n+                .normalize_fn_sig_for_diagnostic\n+                .as_ref()\n+                .map(|f| f.clone()),\n         }\n     }\n }"}, {"sha": "7dc4934db09d46c28515956fbd64278f036d9808", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/15e2e5185a22207b18d2cbc47a48b39e63e84cd0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e2e5185a22207b18d2cbc47a48b39e63e84cd0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=15e2e5185a22207b18d2cbc47a48b39e63e84cd0", "patch": "@@ -961,12 +961,23 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn normalize_fn_sig_for_diagnostic(&self, sig: ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx> {\n+        if let Some(normalize) = &self.normalize_fn_sig_for_diagnostic {\n+            normalize(self, sig)\n+        } else {\n+            sig\n+        }\n+    }\n+\n     /// Given two `fn` signatures highlight only sub-parts that are different.\n     fn cmp_fn_sig(\n         &self,\n         sig1: &ty::PolyFnSig<'tcx>,\n         sig2: &ty::PolyFnSig<'tcx>,\n     ) -> (DiagnosticStyledString, DiagnosticStyledString) {\n+        let sig1 = &self.normalize_fn_sig_for_diagnostic(*sig1);\n+        let sig2 = &self.normalize_fn_sig_for_diagnostic(*sig2);\n+\n         let get_lifetimes = |sig| {\n             use rustc_hir::def::Namespace;\n             let (_, sig, reg) = ty::print::FmtPrinter::new(self.tcx, Namespace::TypeNS)"}, {"sha": "60ebf8b949d26a6ae72868d758b7de75931a4ff4", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/15e2e5185a22207b18d2cbc47a48b39e63e84cd0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e2e5185a22207b18d2cbc47a48b39e63e84cd0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=15e2e5185a22207b18d2cbc47a48b39e63e84cd0", "patch": "@@ -337,6 +337,9 @@ pub struct InferCtxt<'a, 'tcx> {\n     /// when we enter into a higher-ranked (`for<..>`) type or trait\n     /// bound.\n     universe: Cell<ty::UniverseIndex>,\n+\n+    normalize_fn_sig_for_diagnostic:\n+        Option<Lrc<dyn Fn(&InferCtxt<'_, 'tcx>, ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx>>>,\n }\n \n /// See the `error_reporting` module for more details.\n@@ -540,6 +543,8 @@ pub struct InferCtxtBuilder<'tcx> {\n     defining_use_anchor: DefiningAnchor,\n     considering_regions: bool,\n     fresh_typeck_results: Option<RefCell<ty::TypeckResults<'tcx>>>,\n+    normalize_fn_sig_for_diagnostic:\n+        Option<Lrc<dyn Fn(&InferCtxt<'_, 'tcx>, ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx>>>,\n }\n \n pub trait TyCtxtInferExt<'tcx> {\n@@ -553,6 +558,7 @@ impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {\n             defining_use_anchor: DefiningAnchor::Error,\n             considering_regions: true,\n             fresh_typeck_results: None,\n+            normalize_fn_sig_for_diagnostic: None,\n         }\n     }\n }\n@@ -582,6 +588,14 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n         self\n     }\n \n+    pub fn with_normalize_fn_sig_for_diagnostic(\n+        mut self,\n+        fun: Lrc<dyn Fn(&InferCtxt<'_, 'tcx>, ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx>>,\n+    ) -> Self {\n+        self.normalize_fn_sig_for_diagnostic = Some(fun);\n+        self\n+    }\n+\n     /// Given a canonical value `C` as a starting point, create an\n     /// inference context that contains each of the bound values\n     /// within instantiated as a fresh variable. The `f` closure is\n@@ -611,6 +625,7 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n             defining_use_anchor,\n             considering_regions,\n             ref fresh_typeck_results,\n+            ref normalize_fn_sig_for_diagnostic,\n         } = *self;\n         let in_progress_typeck_results = fresh_typeck_results.as_ref();\n         f(InferCtxt {\n@@ -629,6 +644,9 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n             in_snapshot: Cell::new(false),\n             skip_leak_check: Cell::new(false),\n             universe: Cell::new(ty::UniverseIndex::ROOT),\n+            normalize_fn_sig_for_diagnostic: normalize_fn_sig_for_diagnostic\n+                .as_ref()\n+                .map(|f| f.clone()),\n         })\n     }\n }"}, {"sha": "dba4d4f69dadb519244aa5000cff7ce46657aa3d", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/15e2e5185a22207b18d2cbc47a48b39e63e84cd0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e2e5185a22207b18d2cbc47a48b39e63e84cd0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=15e2e5185a22207b18d2cbc47a48b39e63e84cd0", "patch": "@@ -17,6 +17,7 @@ use rustc_span::Span;\n \n pub trait TraitEngineExt<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>) -> Box<Self>;\n+    fn new_in_snapshot(tcx: TyCtxt<'tcx>) -> Box<Self>;\n }\n \n impl<'tcx> TraitEngineExt<'tcx> for dyn TraitEngine<'tcx> {\n@@ -27,6 +28,14 @@ impl<'tcx> TraitEngineExt<'tcx> for dyn TraitEngine<'tcx> {\n             Box::new(FulfillmentContext::new())\n         }\n     }\n+\n+    fn new_in_snapshot(tcx: TyCtxt<'tcx>) -> Box<Self> {\n+        if tcx.sess.opts.unstable_opts.chalk {\n+            Box::new(ChalkFulfillmentContext::new())\n+        } else {\n+            Box::new(FulfillmentContext::new_in_snapshot())\n+        }\n+    }\n }\n \n /// Used if you want to have pleasant experience when dealing\n@@ -41,6 +50,10 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         Self { infcx, engine: RefCell::new(<dyn TraitEngine<'_>>::new(infcx.tcx)) }\n     }\n \n+    pub fn new_in_snapshot(infcx: &'a InferCtxt<'a, 'tcx>) -> Self {\n+        Self { infcx, engine: RefCell::new(<dyn TraitEngine<'_>>::new_in_snapshot(infcx.tcx)) }\n+    }\n+\n     pub fn register_obligation(&self, obligation: PredicateObligation<'tcx>) {\n         self.engine.borrow_mut().register_predicate_obligation(self.infcx, obligation);\n     }"}, {"sha": "02adae5bde157f50c086e0b9c3784b1a9d126c0b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/15e2e5185a22207b18d2cbc47a48b39e63e84cd0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e2e5185a22207b18d2cbc47a48b39e63e84cd0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=15e2e5185a22207b18d2cbc47a48b39e63e84cd0", "patch": "@@ -20,7 +20,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Node};\n-use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::hir::map;\n use rustc_middle::ty::{\n     self, suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind, DefIdTree,\n@@ -1589,32 +1589,38 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         expected: ty::PolyTraitRef<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         pub(crate) fn build_fn_sig_ty<'tcx>(\n-            tcx: TyCtxt<'tcx>,\n+            infcx: &InferCtxt<'_, 'tcx>,\n             trait_ref: ty::PolyTraitRef<'tcx>,\n         ) -> Ty<'tcx> {\n             let inputs = trait_ref.skip_binder().substs.type_at(1);\n             let sig = match inputs.kind() {\n                 ty::Tuple(inputs)\n-                    if tcx.fn_trait_kind_from_lang_item(trait_ref.def_id()).is_some() =>\n+                    if infcx.tcx.fn_trait_kind_from_lang_item(trait_ref.def_id()).is_some() =>\n                 {\n-                    tcx.mk_fn_sig(\n+                    infcx.tcx.mk_fn_sig(\n                         inputs.iter(),\n-                        tcx.mk_ty_infer(ty::TyVar(ty::TyVid::from_u32(0))),\n+                        infcx.next_ty_var(TypeVariableOrigin {\n+                            span: DUMMY_SP,\n+                            kind: TypeVariableOriginKind::MiscVariable,\n+                        }),\n                         false,\n                         hir::Unsafety::Normal,\n                         abi::Abi::Rust,\n                     )\n                 }\n-                _ => tcx.mk_fn_sig(\n+                _ => infcx.tcx.mk_fn_sig(\n                     std::iter::once(inputs),\n-                    tcx.mk_ty_infer(ty::TyVar(ty::TyVid::from_u32(0))),\n+                    infcx.next_ty_var(TypeVariableOrigin {\n+                        span: DUMMY_SP,\n+                        kind: TypeVariableOriginKind::MiscVariable,\n+                    }),\n                     false,\n                     hir::Unsafety::Normal,\n                     abi::Abi::Rust,\n                 ),\n             };\n \n-            tcx.mk_fn_ptr(trait_ref.rebind(sig))\n+            infcx.tcx.mk_fn_ptr(trait_ref.rebind(sig))\n         }\n \n         let argument_kind = match expected.skip_binder().self_ty().kind() {\n@@ -1634,11 +1640,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let found_span = found_span.unwrap_or(span);\n         err.span_label(found_span, \"found signature defined here\");\n \n-        let expected = build_fn_sig_ty(self.tcx, expected);\n-        let found = build_fn_sig_ty(self.tcx, found);\n+        let expected = build_fn_sig_ty(self, expected);\n+        let found = build_fn_sig_ty(self, found);\n \n-        let (expected_str, found_str) =\n-            self.tcx.infer_ctxt().enter(|infcx| infcx.cmp(expected, found));\n+        let (expected_str, found_str) = self.cmp(expected, found);\n \n         let signature_kind = format!(\"{argument_kind} signature\");\n         err.note_expected_found(&signature_kind, expected_str, &signature_kind, found_str);"}, {"sha": "1439baf54406d2e44d3700d73fecf8e6a3ea036a", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/15e2e5185a22207b18d2cbc47a48b39e63e84cd0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e2e5185a22207b18d2cbc47a48b39e63e84cd0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=15e2e5185a22207b18d2cbc47a48b39e63e84cd0", "patch": "@@ -1,6 +1,7 @@\n use super::callee::DeferredCallResolution;\n \n use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::HirIdMap;\n@@ -12,7 +13,9 @@ use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::LocalDefIdMap;\n use rustc_span::{self, Span};\n use rustc_trait_selection::infer::InferCtxtExt as _;\n-use rustc_trait_selection::traits::{self, ObligationCause, TraitEngine, TraitEngineExt};\n+use rustc_trait_selection::traits::{\n+    self, ObligationCause, ObligationCtxt, TraitEngine, TraitEngineExt as _,\n+};\n \n use std::cell::RefCell;\n use std::ops::Deref;\n@@ -84,7 +87,29 @@ impl<'tcx> Inherited<'_, 'tcx> {\n             infcx: tcx\n                 .infer_ctxt()\n                 .ignoring_regions()\n-                .with_fresh_in_progress_typeck_results(hir_owner),\n+                .with_fresh_in_progress_typeck_results(hir_owner)\n+                .with_normalize_fn_sig_for_diagnostic(Lrc::new(move |infcx, fn_sig| {\n+                    if fn_sig.has_escaping_bound_vars() {\n+                        return fn_sig;\n+                    }\n+                    infcx.probe(|_| {\n+                        let ocx = ObligationCtxt::new_in_snapshot(infcx);\n+                        let normalized_fn_sig = ocx.normalize(\n+                            ObligationCause::dummy(),\n+                            // FIXME(compiler-errors): This is probably not the right param-env...\n+                            infcx.tcx.param_env(def_id),\n+                            fn_sig,\n+                        );\n+                        if ocx.select_all_or_error().is_empty() {\n+                            let normalized_fn_sig =\n+                                infcx.resolve_vars_if_possible(normalized_fn_sig);\n+                            if !normalized_fn_sig.needs_infer() {\n+                                return normalized_fn_sig;\n+                            }\n+                        }\n+                        fn_sig\n+                    })\n+                })),\n             def_id,\n         }\n     }"}, {"sha": "1a2093c44f02e721c493e553fe3f7a3ae29b263e", "filename": "src/test/ui/mismatched_types/normalize-fn-sig.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/15e2e5185a22207b18d2cbc47a48b39e63e84cd0/src%2Ftest%2Fui%2Fmismatched_types%2Fnormalize-fn-sig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e2e5185a22207b18d2cbc47a48b39e63e84cd0/src%2Ftest%2Fui%2Fmismatched_types%2Fnormalize-fn-sig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fnormalize-fn-sig.rs?ref=15e2e5185a22207b18d2cbc47a48b39e63e84cd0", "patch": "@@ -0,0 +1,16 @@\n+trait Foo {\n+    type Bar;\n+}\n+\n+impl<T> Foo for T {\n+    type Bar = i32;\n+}\n+\n+fn foo<T>(_: <T as Foo>::Bar, _: &'static <T as Foo>::Bar) {}\n+\n+fn needs_i32_ref_fn(_: fn(&'static i32, i32)) {}\n+\n+fn main() {\n+    needs_i32_ref_fn(foo::<()>);\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "6c55f29c5d153d514e83a4656f3a275316f679ae", "filename": "src/test/ui/mismatched_types/normalize-fn-sig.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/15e2e5185a22207b18d2cbc47a48b39e63e84cd0/src%2Ftest%2Fui%2Fmismatched_types%2Fnormalize-fn-sig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15e2e5185a22207b18d2cbc47a48b39e63e84cd0/src%2Ftest%2Fui%2Fmismatched_types%2Fnormalize-fn-sig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fnormalize-fn-sig.stderr?ref=15e2e5185a22207b18d2cbc47a48b39e63e84cd0", "patch": "@@ -0,0 +1,19 @@\n+error[E0308]: mismatched types\n+  --> $DIR/normalize-fn-sig.rs:14:22\n+   |\n+LL |     needs_i32_ref_fn(foo::<()>);\n+   |     ---------------- ^^^^^^^^^ expected `&i32`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected fn pointer `fn(&'static i32, i32)`\n+                 found fn item `fn(i32, &'static i32) {foo::<()>}`\n+note: function defined here\n+  --> $DIR/normalize-fn-sig.rs:11:4\n+   |\n+LL | fn needs_i32_ref_fn(_: fn(&'static i32, i32)) {}\n+   |    ^^^^^^^^^^^^^^^^ ------------------------\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}