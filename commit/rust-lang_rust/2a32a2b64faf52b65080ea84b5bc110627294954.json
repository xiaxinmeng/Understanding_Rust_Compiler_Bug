{"sha": "2a32a2b64faf52b65080ea84b5bc110627294954", "node_id": "C_kwDOAAsO6NoAKDJhMzJhMmI2NGZhZjUyYjY1MDgwZWE4NGI1YmMxMTA2MjcyOTQ5NTQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-17T17:36:43Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-27T20:02:18Z"}, "message": "Special case deref projections in SsaVisitor.", "tree": {"sha": "348b02aededbc14d33b0a67c4c1e68c6b3a7bd86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/348b02aededbc14d33b0a67c4c1e68c6b3a7bd86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a32a2b64faf52b65080ea84b5bc110627294954", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a32a2b64faf52b65080ea84b5bc110627294954", "html_url": "https://github.com/rust-lang/rust/commit/2a32a2b64faf52b65080ea84b5bc110627294954", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a32a2b64faf52b65080ea84b5bc110627294954/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43ee4d15bf201f72c36abd7f02961df87dead441", "url": "https://api.github.com/repos/rust-lang/rust/commits/43ee4d15bf201f72c36abd7f02961df87dead441", "html_url": "https://github.com/rust-lang/rust/commit/43ee4d15bf201f72c36abd7f02961df87dead441"}], "stats": {"total": 236, "additions": 222, "deletions": 14}, "files": [{"sha": "0bb97c4fc09b2763fee9703446c7aa2dbf1583a0", "filename": "compiler/rustc_mir_transform/src/ssa.rs", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2a32a2b64faf52b65080ea84b5bc110627294954/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a32a2b64faf52b65080ea84b5bc110627294954/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs?ref=2a32a2b64faf52b65080ea84b5bc110627294954", "patch": "@@ -179,6 +179,25 @@ struct SsaVisitor {\n     assignment_order: Vec<Local>,\n }\n \n+impl SsaVisitor {\n+    fn check_assignment_dominates(&mut self, local: Local, loc: Location) {\n+        let set = &mut self.assignments[local];\n+        let assign_dominates = match *set {\n+            Set1::Empty | Set1::Many => false,\n+            Set1::One(LocationExtended::Arg) => true,\n+            Set1::One(LocationExtended::Plain(assign)) => {\n+                assign.successor_within_block().dominates(loc, &self.dominators)\n+            }\n+        };\n+        // We are visiting a use that is not dominated by an assignment.\n+        // Either there is a cycle involved, or we are reading for uninitialized local.\n+        // Bail out.\n+        if !assign_dominates {\n+            *set = Set1::Many;\n+        }\n+    }\n+}\n+\n impl<'tcx> Visitor<'tcx> for SsaVisitor {\n     fn visit_local(&mut self, local: Local, ctxt: PlaceContext, loc: Location) {\n         match ctxt {\n@@ -192,24 +211,26 @@ impl<'tcx> Visitor<'tcx> for SsaVisitor {\n             // Immutable borrows are taken into account in `SsaLocals::new` by\n             // removing non-freeze locals.\n             PlaceContext::NonMutatingUse(_) => {\n-                let set = &mut self.assignments[local];\n-                let assign_dominates = match *set {\n-                    Set1::Empty | Set1::Many => false,\n-                    Set1::One(LocationExtended::Arg) => true,\n-                    Set1::One(LocationExtended::Plain(assign)) => {\n-                        assign.successor_within_block().dominates(loc, &self.dominators)\n-                    }\n-                };\n-                // We are visiting a use that is not dominated by an assignment.\n-                // Either there is a cycle involved, or we are reading for uninitialized local.\n-                // Bail out.\n-                if !assign_dominates {\n-                    *set = Set1::Many;\n-                }\n+                self.check_assignment_dominates(local, loc);\n             }\n             PlaceContext::NonUse(_) => {}\n         }\n     }\n+\n+    fn visit_place(&mut self, place: &Place<'tcx>, ctxt: PlaceContext, loc: Location) {\n+        if place.projection.first() == Some(&PlaceElem::Deref) {\n+            // Do not do anything for storage statements and debuginfo.\n+            if ctxt.is_use() {\n+                // A use through a `deref` only reads from the local, and cannot write to it.\n+                let new_ctxt = PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection);\n+\n+                self.visit_projection(place.as_ref(), new_ctxt, loc);\n+                self.check_assignment_dominates(place.local, loc);\n+            }\n+            return;\n+        }\n+        self.super_place(place, ctxt, loc);\n+    }\n }\n \n #[instrument(level = \"trace\", skip(ssa, body))]"}, {"sha": "62ef6ca86c6e3f3c84507f627867539eb2d85d0f", "filename": "tests/mir-opt/copy-prop/reborrow.demiraw.CopyProp.diff", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2a32a2b64faf52b65080ea84b5bc110627294954/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a32a2b64faf52b65080ea84b5bc110627294954/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.diff?ref=2a32a2b64faf52b65080ea84b5bc110627294954", "patch": "@@ -0,0 +1,41 @@\n+- // MIR for `demiraw` before CopyProp\n++ // MIR for `demiraw` after CopyProp\n+  \n+  fn demiraw(_1: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/reborrow.rs:+0:12: +0:17\n+      let mut _0: ();                      // return place in scope 0 at $DIR/reborrow.rs:+0:23: +0:23\n+      let _2: *mut u8;                     // in scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n+      let mut _4: &mut u8;                 // in scope 0 at $DIR/reborrow.rs:+2:22: +2:29\n+      scope 1 {\n+          debug a => _2;                   // in scope 1 at $DIR/reborrow.rs:+1:9: +1:10\n+          let _3: &mut u8;                 // in scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          scope 2 {\n+              debug b => _3;               // in scope 2 at $DIR/reborrow.rs:+2:9: +2:10\n+              let _5: *mut u8;             // in scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+              scope 4 {\n+-                 debug c => _5;           // in scope 4 at $DIR/reborrow.rs:+3:9: +3:10\n++                 debug c => _2;           // in scope 4 at $DIR/reborrow.rs:+3:9: +3:10\n+              }\n+          }\n+          scope 3 {\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n+          _2 = &raw mut _1;                // scope 0 at $DIR/reborrow.rs:+1:13: +1:23\n+          StorageLive(_3);                 // scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          StorageLive(_4);                 // scope 1 at $DIR/reborrow.rs:+2:22: +2:29\n+          _4 = &mut (*_2);                 // scope 3 at $DIR/reborrow.rs:+2:22: +2:29\n+          _3 = &mut (*_4);                 // scope 1 at $DIR/reborrow.rs:+2:22: +2:29\n+          StorageDead(_4);                 // scope 1 at $DIR/reborrow.rs:+2:31: +2:32\n+-         StorageLive(_5);                 // scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+-         _5 = _2;                         // scope 2 at $DIR/reborrow.rs:+3:13: +3:14\n+          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:23: +4:2\n+-         StorageDead(_5);                 // scope 2 at $DIR/reborrow.rs:+4:1: +4:2\n+          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+4:1: +4:2\n+-         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/reborrow.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "5d620402eaadcdf54bb0433be673bebf6938daf5", "filename": "tests/mir-opt/copy-prop/reborrow.miraw.CopyProp.diff", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2a32a2b64faf52b65080ea84b5bc110627294954/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a32a2b64faf52b65080ea84b5bc110627294954/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.diff?ref=2a32a2b64faf52b65080ea84b5bc110627294954", "patch": "@@ -0,0 +1,37 @@\n+- // MIR for `miraw` before CopyProp\n++ // MIR for `miraw` after CopyProp\n+  \n+  fn miraw(_1: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/reborrow.rs:+0:10: +0:15\n+      let mut _0: ();                      // return place in scope 0 at $DIR/reborrow.rs:+0:21: +0:21\n+      let _2: *mut u8;                     // in scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n+      scope 1 {\n+          debug a => _2;                   // in scope 1 at $DIR/reborrow.rs:+1:9: +1:10\n+          let _3: *mut u8;                 // in scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          scope 2 {\n+              debug b => _3;               // in scope 2 at $DIR/reborrow.rs:+2:9: +2:10\n+              let _4: *mut u8;             // in scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+              scope 4 {\n+-                 debug c => _4;           // in scope 4 at $DIR/reborrow.rs:+3:9: +3:10\n++                 debug c => _2;           // in scope 4 at $DIR/reborrow.rs:+3:9: +3:10\n+              }\n+          }\n+          scope 3 {\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n+          _2 = &raw mut _1;                // scope 0 at $DIR/reborrow.rs:+1:13: +1:23\n+          StorageLive(_3);                 // scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          _3 = &raw mut (*_2);             // scope 3 at $DIR/reborrow.rs:+2:22: +2:33\n+-         StorageLive(_4);                 // scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+-         _4 = _2;                         // scope 2 at $DIR/reborrow.rs:+3:13: +3:14\n+          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:21: +4:2\n+-         StorageDead(_4);                 // scope 2 at $DIR/reborrow.rs:+4:1: +4:2\n+          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+4:1: +4:2\n+-         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/reborrow.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "2c00c06ffea674c565f5386f7c8159c76e265698", "filename": "tests/mir-opt/copy-prop/reborrow.remut.CopyProp.diff", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2a32a2b64faf52b65080ea84b5bc110627294954/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a32a2b64faf52b65080ea84b5bc110627294954/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.diff?ref=2a32a2b64faf52b65080ea84b5bc110627294954", "patch": "@@ -0,0 +1,35 @@\n+- // MIR for `remut` before CopyProp\n++ // MIR for `remut` after CopyProp\n+  \n+  fn remut(_1: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/reborrow.rs:+0:10: +0:15\n+      let mut _0: ();                      // return place in scope 0 at $DIR/reborrow.rs:+0:21: +0:21\n+      let _2: &mut u8;                     // in scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n+      scope 1 {\n+          debug a => _2;                   // in scope 1 at $DIR/reborrow.rs:+1:9: +1:10\n+          let _3: &mut u8;                 // in scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          scope 2 {\n+              debug b => _3;               // in scope 2 at $DIR/reborrow.rs:+2:9: +2:10\n+              let _4: &mut u8;             // in scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+              scope 3 {\n+-                 debug c => _4;           // in scope 3 at $DIR/reborrow.rs:+3:9: +3:10\n++                 debug c => _2;           // in scope 3 at $DIR/reborrow.rs:+3:9: +3:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n+          _2 = &mut _1;                    // scope 0 at $DIR/reborrow.rs:+1:13: +1:19\n+          StorageLive(_3);                 // scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          _3 = &mut (*_2);                 // scope 1 at $DIR/reborrow.rs:+2:13: +2:20\n+-         StorageLive(_4);                 // scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+-         _4 = move _2;                    // scope 2 at $DIR/reborrow.rs:+3:13: +3:14\n+          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:21: +4:2\n+-         StorageDead(_4);                 // scope 2 at $DIR/reborrow.rs:+4:1: +4:2\n+          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+4:1: +4:2\n+-         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/reborrow.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "bc74ae05ce20963df87006b9b25c57ad187f2740", "filename": "tests/mir-opt/copy-prop/reborrow.reraw.CopyProp.diff", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2a32a2b64faf52b65080ea84b5bc110627294954/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a32a2b64faf52b65080ea84b5bc110627294954/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.diff?ref=2a32a2b64faf52b65080ea84b5bc110627294954", "patch": "@@ -0,0 +1,35 @@\n+- // MIR for `reraw` before CopyProp\n++ // MIR for `reraw` after CopyProp\n+  \n+  fn reraw(_1: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/reborrow.rs:+0:10: +0:15\n+      let mut _0: ();                      // return place in scope 0 at $DIR/reborrow.rs:+0:21: +0:21\n+      let _2: &mut u8;                     // in scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n+      scope 1 {\n+          debug a => _2;                   // in scope 1 at $DIR/reborrow.rs:+1:9: +1:10\n+          let _3: *mut u8;                 // in scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          scope 2 {\n+              debug b => _3;               // in scope 2 at $DIR/reborrow.rs:+2:9: +2:10\n+              let _4: &mut u8;             // in scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+              scope 3 {\n+-                 debug c => _4;           // in scope 3 at $DIR/reborrow.rs:+3:9: +3:10\n++                 debug c => _2;           // in scope 3 at $DIR/reborrow.rs:+3:9: +3:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n+          _2 = &mut _1;                    // scope 0 at $DIR/reborrow.rs:+1:13: +1:19\n+          StorageLive(_3);                 // scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          _3 = &raw mut (*_2);             // scope 1 at $DIR/reborrow.rs:+2:13: +2:24\n+-         StorageLive(_4);                 // scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+-         _4 = move _2;                    // scope 2 at $DIR/reborrow.rs:+3:13: +3:14\n+          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:21: +4:2\n+-         StorageDead(_4);                 // scope 2 at $DIR/reborrow.rs:+4:1: +4:2\n+          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+4:1: +4:2\n+-         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/reborrow.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "a1624215feb7c37d80fb95f434bdd4d148217096", "filename": "tests/mir-opt/copy-prop/reborrow.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2a32a2b64faf52b65080ea84b5bc110627294954/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a32a2b64faf52b65080ea84b5bc110627294954/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.rs?ref=2a32a2b64faf52b65080ea84b5bc110627294954", "patch": "@@ -0,0 +1,39 @@\n+// Check that CopyProp considers reborrows as not mutating the pointer.\n+// unit-test: CopyProp\n+\n+#![feature(raw_ref_op)]\n+\n+// EMIT_MIR reborrow.remut.CopyProp.diff\n+fn remut(mut x: u8) {\n+    let a = &mut x;\n+    let b = &mut *a; //< this cannot mutate a.\n+    let c = a; //< so `c` and `a` can be merged.\n+}\n+\n+// EMIT_MIR reborrow.reraw.CopyProp.diff\n+fn reraw(mut x: u8) {\n+    let a = &mut x;\n+    let b = &raw mut *a; //< this cannot mutate a.\n+    let c = a; //< so `c` and `a` can be merged.\n+}\n+\n+// EMIT_MIR reborrow.miraw.CopyProp.diff\n+fn miraw(mut x: u8) {\n+    let a = &raw mut x;\n+    let b = unsafe { &raw mut *a }; //< this cannot mutate a.\n+    let c = a; //< so `c` and `a` can be merged.\n+}\n+\n+// EMIT_MIR reborrow.demiraw.CopyProp.diff\n+fn demiraw(mut x: u8) {\n+    let a = &raw mut x;\n+    let b = unsafe { &mut *a }; //< this cannot mutate a.\n+    let c = a; //< so `c` and `a` can be merged.\n+}\n+\n+fn main() {\n+    remut(0);\n+    reraw(0);\n+    miraw(0);\n+    demiraw(0);\n+}"}]}