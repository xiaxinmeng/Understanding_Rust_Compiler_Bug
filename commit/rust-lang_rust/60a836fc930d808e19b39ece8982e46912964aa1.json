{"sha": "60a836fc930d808e19b39ece8982e46912964aa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYTgzNmZjOTMwZDgwOGUxOWIzOWVjZTg5ODJlNDY5MTI5NjRhYTE=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-17T01:05:29Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-26T18:23:56Z"}, "message": "Remove unnecessary `pub`s", "tree": {"sha": "7f8259589100ebb426635a7a209fc80e7fba9600", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f8259589100ebb426635a7a209fc80e7fba9600"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60a836fc930d808e19b39ece8982e46912964aa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60a836fc930d808e19b39ece8982e46912964aa1", "html_url": "https://github.com/rust-lang/rust/commit/60a836fc930d808e19b39ece8982e46912964aa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60a836fc930d808e19b39ece8982e46912964aa1/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "227cc5cd263514fb3c8811e70ef3c94d0add04d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/227cc5cd263514fb3c8811e70ef3c94d0add04d3", "html_url": "https://github.com/rust-lang/rust/commit/227cc5cd263514fb3c8811e70ef3c94d0add04d3"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "c5a65a658bac91981fc71cab1c0f710bed7ab260", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/60a836fc930d808e19b39ece8982e46912964aa1/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a836fc930d808e19b39ece8982e46912964aa1/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=60a836fc930d808e19b39ece8982e46912964aa1", "patch": "@@ -95,7 +95,7 @@ use resolve_imports::{ImportDirective, NameResolution};\n \n // NB: This module needs to be declared first so diagnostics are\n // registered before they are used.\n-pub mod diagnostics;\n+mod diagnostics;\n \n mod check_unused;\n mod build_reduced_graph;\n@@ -119,12 +119,12 @@ enum SuggestionType {\n }\n \n /// Candidates for a name resolution failure\n-pub struct SuggestedCandidates {\n+struct SuggestedCandidates {\n     name: String,\n     candidates: Vec<Path>,\n }\n \n-pub enum ResolutionError<'a> {\n+enum ResolutionError<'a> {\n     /// error E0401: can't use type parameters from outer function\n     TypeParametersFromOuterFunction,\n     /// error E0402: cannot use an outer type parameter in this context\n@@ -201,7 +201,7 @@ pub enum ResolutionError<'a> {\n \n /// Context of where `ResolutionError::UnresolvedName` arose.\n #[derive(Clone, PartialEq, Eq, Debug)]\n-pub enum UnresolvedNameContext {\n+enum UnresolvedNameContext {\n     /// `PathIsMod(id)` indicates that a given path, used in\n     /// expression context, actually resolved to a module rather than\n     /// a value. The `id` attached to the variant is the node id of\n@@ -1131,7 +1131,7 @@ pub struct Resolver<'a, 'tcx: 'a> {\n     arenas: &'a ResolverArenas<'a>,\n }\n \n-pub struct ResolverArenas<'a> {\n+struct ResolverArenas<'a> {\n     modules: arena::TypedArena<ModuleS<'a>>,\n     name_bindings: arena::TypedArena<NameBinding<'a>>,\n     import_directives: arena::TypedArena<ImportDirective>,\n@@ -2584,12 +2584,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n     /// Skips `path_depth` trailing segments, which is also reflected in the\n     /// returned value. See `middle::def::PathResolution` for more info.\n-    pub fn resolve_path(&mut self,\n-                        id: NodeId,\n-                        path: &Path,\n-                        path_depth: usize,\n-                        namespace: Namespace)\n-                        -> Option<PathResolution> {\n+    fn resolve_path(&mut self, id: NodeId, path: &Path, path_depth: usize, namespace: Namespace)\n+                    -> Option<PathResolution> {\n         let span = path.span;\n         let segments = &path.segments[..path.segments.len() - path_depth];\n \n@@ -3658,13 +3654,13 @@ pub fn resolve_crate<'a, 'tcx>(session: &'a Session,\n /// preserving the ribs + current module. This allows resolve_path\n /// calls to be made with the correct scope info. The node in the\n /// callback corresponds to the current node in the walk.\n-pub fn create_resolver<'a, 'tcx>(session: &'a Session,\n-                                 ast_map: &'a hir_map::Map<'tcx>,\n-                                 krate: &'a Crate,\n-                                 make_glob_map: MakeGlobMap,\n-                                 arenas: &'a ResolverArenas<'a>,\n-                                 callback: Option<Box<Fn(hir_map::Node, &mut bool) -> bool>>)\n-                                 -> Resolver<'a, 'tcx> {\n+fn create_resolver<'a, 'tcx>(session: &'a Session,\n+                             ast_map: &'a hir_map::Map<'tcx>,\n+                             krate: &'a Crate,\n+                             make_glob_map: MakeGlobMap,\n+                             arenas: &'a ResolverArenas<'a>,\n+                             callback: Option<Box<Fn(hir_map::Node, &mut bool) -> bool>>)\n+                             -> Resolver<'a, 'tcx> {\n     let mut resolver = Resolver::new(session, ast_map, make_glob_map, arenas);\n \n     resolver.callback = callback;"}, {"sha": "7c5d131dbc540eaa5fa69b95e4f50c21cfe40aeb", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/60a836fc930d808e19b39ece8982e46912964aa1/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a836fc930d808e19b39ece8982e46912964aa1/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=60a836fc930d808e19b39ece8982e46912964aa1", "patch": "@@ -58,12 +58,12 @@ impl ImportDirectiveSubclass {\n /// One import directive.\n #[derive(Debug,Clone)]\n pub struct ImportDirective {\n-    pub module_path: Vec<Name>,\n-    pub subclass: ImportDirectiveSubclass,\n-    pub span: Span,\n-    pub id: NodeId,\n-    pub is_public: bool, // see note in ImportResolutionPerNamespace about how to use this\n-    pub is_prelude: bool,\n+    module_path: Vec<Name>,\n+    subclass: ImportDirectiveSubclass,\n+    span: Span,\n+    id: NodeId,\n+    is_public: bool, // see note in ImportResolutionPerNamespace about how to use this\n+    is_prelude: bool,\n }\n \n impl ImportDirective {"}]}