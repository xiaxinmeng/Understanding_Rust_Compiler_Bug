{"sha": "40123a1257f7645bee1c6d3b6eb8c2f6eebd206c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMTIzYTEyNTdmNzY0NWJlZTFjNmQzYjZlYjhjMmY2ZWViZDIwNmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-18T09:53:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-18T09:53:29Z"}, "message": "Auto merge of #54349 - GuillaumeGomez:no-example-lint, r=QuietMisdreavus\n\n[rustdoc] Add lint for doc without codeblocks\n\nFixes #53805.\n\nr? @QuietMisdreavus", "tree": {"sha": "db17badb27816aa3b5a7eeba75fdb5d1f32112af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db17badb27816aa3b5a7eeba75fdb5d1f32112af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40123a1257f7645bee1c6d3b6eb8c2f6eebd206c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40123a1257f7645bee1c6d3b6eb8c2f6eebd206c", "html_url": "https://github.com/rust-lang/rust/commit/40123a1257f7645bee1c6d3b6eb8c2f6eebd206c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40123a1257f7645bee1c6d3b6eb8c2f6eebd206c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af204b1f3e83d77427f5fe78285537378be103ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/af204b1f3e83d77427f5fe78285537378be103ec", "html_url": "https://github.com/rust-lang/rust/commit/af204b1f3e83d77427f5fe78285537378be103ec"}, {"sha": "26479c46371db8a83760890294ac7ad051ec3467", "url": "https://api.github.com/repos/rust-lang/rust/commits/26479c46371db8a83760890294ac7ad051ec3467", "html_url": "https://github.com/rust-lang/rust/commit/26479c46371db8a83760890294ac7ad051ec3467"}], "stats": {"total": 171, "additions": 142, "deletions": 29}, "files": [{"sha": "202a4284f4c82a2b07215909275bea8c208cd47c", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/40123a1257f7645bee1c6d3b6eb8c2f6eebd206c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40123a1257f7645bee1c6d3b6eb8c2f6eebd206c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=40123a1257f7645bee1c6d3b6eb8c2f6eebd206c", "patch": "@@ -312,6 +312,12 @@ declare_lint! {\n     \"warn about documentation intra links resolution failure\"\n }\n \n+declare_lint! {\n+    pub MISSING_DOC_CODE_EXAMPLES,\n+    Allow,\n+    \"warn about missing code example in an item's documentation\"\n+}\n+\n declare_lint! {\n     pub WHERE_CLAUSES_OBJECT_SAFETY,\n     Warn,\n@@ -408,6 +414,7 @@ impl LintPass for HardwiredLints {\n             DUPLICATE_ASSOCIATED_TYPE_BINDINGS,\n             DUPLICATE_MACRO_EXPORTS,\n             INTRA_DOC_LINK_RESOLUTION_FAILURE,\n+            MISSING_DOC_CODE_EXAMPLES,\n             WHERE_CLAUSES_OBJECT_SAFETY,\n             PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n             MACRO_USE_EXTERN_CRATE,"}, {"sha": "2e14c2552de3a1e4e638cf3aa04be3fc2dbc5663", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40123a1257f7645bee1c6d3b6eb8c2f6eebd206c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40123a1257f7645bee1c6d3b6eb8c2f6eebd206c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=40123a1257f7645bee1c6d3b6eb8c2f6eebd206c", "patch": "@@ -348,12 +348,14 @@ pub fn run_core(search_paths: SearchPaths,\n     let intra_link_resolution_failure_name = lint::builtin::INTRA_DOC_LINK_RESOLUTION_FAILURE.name;\n     let warnings_lint_name = lint::builtin::WARNINGS.name;\n     let missing_docs = rustc_lint::builtin::MISSING_DOCS.name;\n+    let missing_doc_example = rustc_lint::builtin::MISSING_DOC_CODE_EXAMPLES.name;\n \n     // In addition to those specific lints, we also need to whitelist those given through\n     // command line, otherwise they'll get ignored and we don't want that.\n     let mut whitelisted_lints = vec![warnings_lint_name.to_owned(),\n                                      intra_link_resolution_failure_name.to_owned(),\n-                                     missing_docs.to_owned()];\n+                                     missing_docs.to_owned(),\n+                                     missing_doc_example.to_owned()];\n \n     whitelisted_lints.extend(cmd_lints.iter().map(|(lint, _)| lint).cloned());\n "}, {"sha": "22fa887c358145865fc03c5ece73b93eb2644472", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40123a1257f7645bee1c6d3b6eb8c2f6eebd206c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40123a1257f7645bee1c6d3b6eb8c2f6eebd206c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=40123a1257f7645bee1c6d3b6eb8c2f6eebd206c", "patch": "@@ -532,8 +532,10 @@ impl fmt::Display for TestableCodeError {\n     }\n }\n \n-pub fn find_testable_code(\n-    doc: &str, tests: &mut test::Collector, error_codes: ErrorCodes,\n+pub fn find_testable_code<T: test::Tester>(\n+    doc: &str,\n+    tests: &mut T,\n+    error_codes: ErrorCodes,\n ) -> Result<(), TestableCodeError> {\n     let mut parser = Parser::new(doc);\n     let mut prev_offset = 0;"}, {"sha": "a780322e85e86af2c8ca2f7eb9494092d1bd44ca", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/40123a1257f7645bee1c6d3b6eb8c2f6eebd206c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40123a1257f7645bee1c6d3b6eb8c2f6eebd206c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=40123a1257f7645bee1c6d3b6eb8c2f6eebd206c", "patch": "@@ -24,7 +24,8 @@ use std::ops::Range;\n \n use core::DocContext;\n use fold::DocFolder;\n-use html::markdown::markdown_links;\n+use html::markdown::{find_testable_code, markdown_links, ErrorCodes, LangString};\n+\n use passes::Pass;\n \n pub const COLLECT_INTRA_DOC_LINKS: Pass =\n@@ -56,13 +57,15 @@ enum PathKind {\n struct LinkCollector<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n     cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>,\n     mod_ids: Vec<NodeId>,\n+    is_nightly_build: bool,\n }\n \n impl<'a, 'tcx, 'rcx, 'cstore> LinkCollector<'a, 'tcx, 'rcx, 'cstore> {\n     fn new(cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>) -> Self {\n         LinkCollector {\n             cx,\n             mod_ids: Vec::new(),\n+            is_nightly_build: UnstableFeatures::from_environment().is_nightly_build(),\n         }\n     }\n \n@@ -211,6 +214,43 @@ impl<'a, 'tcx, 'rcx, 'cstore> LinkCollector<'a, 'tcx, 'rcx, 'cstore> {\n     }\n }\n \n+fn look_for_tests<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx>(\n+    cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>,\n+    dox: &str,\n+    item: &Item,\n+) {\n+    if (item.is_mod() && cx.tcx.hir.as_local_node_id(item.def_id).is_none()) ||\n+       cx.as_local_node_id(item.def_id).is_none() {\n+        // If non-local, no need to check anything.\n+        return;\n+    }\n+\n+    struct Tests {\n+        found_tests: usize,\n+    }\n+\n+    impl ::test::Tester for Tests {\n+        fn add_test(&mut self, _: String, _: LangString, _: usize) {\n+            self.found_tests += 1;\n+        }\n+    }\n+\n+    let mut tests = Tests {\n+        found_tests: 0,\n+    };\n+\n+    if find_testable_code(&dox, &mut tests, ErrorCodes::No).is_ok() {\n+        if tests.found_tests == 0 {\n+            let mut diag = cx.tcx.struct_span_lint_node(\n+                lint::builtin::MISSING_DOC_CODE_EXAMPLES,\n+                NodeId::new(0),\n+                span_of_attrs(&item.attrs),\n+                \"Missing code example in this documentation\");\n+            diag.emit();\n+        }\n+    }\n+}\n+\n impl<'a, 'tcx, 'rcx, 'cstore> DocFolder for LinkCollector<'a, 'tcx, 'rcx, 'cstore> {\n     fn fold_item(&mut self, mut item: Item) -> Option<Item> {\n         let item_node_id = if item.is_mod() {\n@@ -273,6 +313,12 @@ impl<'a, 'tcx, 'rcx, 'cstore> DocFolder for LinkCollector<'a, 'tcx, 'rcx, 'cstor\n         let cx = self.cx;\n         let dox = item.attrs.collapsed_doc_value().unwrap_or_else(String::new);\n \n+        look_for_tests(&cx, &dox, &item);\n+\n+        if !self.is_nightly_build {\n+            return None;\n+        }\n+\n         for (ori_link, link_range) in markdown_links(&dox) {\n             // bail early for real links\n             if ori_link.contains('/') {"}, {"sha": "85cd0f84e1cb0bfd5b697d21513cfc75e9b4e4c2", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 35, "deletions": 25, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/40123a1257f7645bee1c6d3b6eb8c2f6eebd206c/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40123a1257f7645bee1c6d3b6eb8c2f6eebd206c/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=40123a1257f7645bee1c6d3b6eb8c2f6eebd206c", "patch": "@@ -465,6 +465,14 @@ fn partition_source(s: &str) -> (String, String) {\n     (before, after)\n }\n \n+pub trait Tester {\n+    fn add_test(&mut self, test: String, config: LangString, line: usize);\n+    fn get_line(&self) -> usize {\n+        0\n+    }\n+    fn register_header(&mut self, _name: &str, _level: u32) {}\n+}\n+\n pub struct Collector {\n     pub tests: Vec<testing::TestDescAndFn>,\n \n@@ -533,7 +541,31 @@ impl Collector {\n         format!(\"{} - {} (line {})\", filename, self.names.join(\"::\"), line)\n     }\n \n-    pub fn add_test(&mut self, test: String, config: LangString, line: usize) {\n+    pub fn set_position(&mut self, position: Span) {\n+        self.position = position;\n+    }\n+\n+    fn get_filename(&self) -> FileName {\n+        if let Some(ref source_map) = self.source_map {\n+            let filename = source_map.span_to_filename(self.position);\n+            if let FileName::Real(ref filename) = filename {\n+                if let Ok(cur_dir) = env::current_dir() {\n+                    if let Ok(path) = filename.strip_prefix(&cur_dir) {\n+                        return path.to_owned().into();\n+                    }\n+                }\n+            }\n+            filename\n+        } else if let Some(ref filename) = self.filename {\n+            filename.clone().into()\n+        } else {\n+            FileName::Custom(\"input\".to_owned())\n+        }\n+    }\n+}\n+\n+impl Tester for Collector {\n+    fn add_test(&mut self, test: String, config: LangString, line: usize) {\n         let filename = self.get_filename();\n         let name = self.generate_name(line, &filename);\n         let cfgs = self.cfgs.clone();\n@@ -587,7 +619,7 @@ impl Collector {\n         });\n     }\n \n-    pub fn get_line(&self) -> usize {\n+    fn get_line(&self) -> usize {\n         if let Some(ref source_map) = self.source_map {\n             let line = self.position.lo().to_usize();\n             let line = source_map.lookup_char_pos(BytePos(line as u32)).line;\n@@ -597,29 +629,7 @@ impl Collector {\n         }\n     }\n \n-    pub fn set_position(&mut self, position: Span) {\n-        self.position = position;\n-    }\n-\n-    fn get_filename(&self) -> FileName {\n-        if let Some(ref source_map) = self.source_map {\n-            let filename = source_map.span_to_filename(self.position);\n-            if let FileName::Real(ref filename) = filename {\n-                if let Ok(cur_dir) = env::current_dir() {\n-                    if let Ok(path) = filename.strip_prefix(&cur_dir) {\n-                        return path.to_owned().into();\n-                    }\n-                }\n-            }\n-            filename\n-        } else if let Some(ref filename) = self.filename {\n-            filename.clone().into()\n-        } else {\n-            FileName::Custom(\"input\".to_owned())\n-        }\n-    }\n-\n-    pub fn register_header(&mut self, name: &str, level: u32) {\n+    fn register_header(&mut self, name: &str, level: u32) {\n         if self.use_headers {\n             // we use these headings as test names, so it's good if\n             // they're valid identifiers."}, {"sha": "e047b272c41604e147aeb7f1cfc482ac5102f933", "filename": "src/test/rustdoc-ui/doc-without-codeblock.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/40123a1257f7645bee1c6d3b6eb8c2f6eebd206c/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40123a1257f7645bee1c6d3b6eb8c2f6eebd206c/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.rs?ref=40123a1257f7645bee1c6d3b6eb8c2f6eebd206c", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(missing_doc_code_examples)]\n+\n+/// Some docs.\n+pub struct Foo;\n+\n+/// And then, the princess died.\n+pub mod foo {\n+    /// Or maybe not because she saved herself!\n+    pub fn bar() {}\n+}"}, {"sha": "ba5bb7fc0b119963e4f840fdccb5b347a57b5f65", "filename": "src/test/rustdoc-ui/doc-without-codeblock.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/40123a1257f7645bee1c6d3b6eb8c2f6eebd206c/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40123a1257f7645bee1c6d3b6eb8c2f6eebd206c/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.stderr?ref=40123a1257f7645bee1c6d3b6eb8c2f6eebd206c", "patch": "@@ -0,0 +1,26 @@\n+error: Missing code example in this documentation\n+   |\n+note: lint level defined here\n+  --> $DIR/doc-without-codeblock.rs:11:9\n+   |\n+LL | #![deny(missing_doc_code_examples)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: Missing code example in this documentation\n+  --> $DIR/doc-without-codeblock.rs:13:1\n+   |\n+LL | /// Some docs.\n+   | ^^^^^^^^^^^^^^\n+\n+error: Missing code example in this documentation\n+  --> $DIR/doc-without-codeblock.rs:16:1\n+   |\n+LL | /// And then, the princess died.\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: Missing code example in this documentation\n+  --> $DIR/doc-without-codeblock.rs:18:5\n+   |\n+LL |     /// Or maybe not because she saved herself!\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+"}]}