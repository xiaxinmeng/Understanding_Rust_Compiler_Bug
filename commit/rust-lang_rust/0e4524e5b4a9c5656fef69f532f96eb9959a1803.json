{"sha": "0e4524e5b4a9c5656fef69f532f96eb9959a1803", "node_id": "C_kwDOAAsO6NoAKDBlNDUyNGU1YjRhOWM1NjU2ZmVmNjlmNTMyZjk2ZWI5OTU5YTE4MDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-28T11:08:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-28T11:08:23Z"}, "message": "Auto merge of #94789 - compiler-errors:fatal-never, r=eddyb\n\nMake fatal DiagnosticBuilder yield `!`\n\nFatal errors should really be fatal, so emitting them should cause us to exit at the same time.\n\nFine with just throwing away these changes if they're not worthwhile. Also, maybe we want to use an uninhabited enum instead of `!`.\n\nr? `@eddyb` who has been working on `DiagnosticBuilder` stuff, feel free to reassign.", "tree": {"sha": "f3b255fe605208ee5eafc4a41541eeada8a9e807", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3b255fe605208ee5eafc4a41541eeada8a9e807"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e4524e5b4a9c5656fef69f532f96eb9959a1803", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e4524e5b4a9c5656fef69f532f96eb9959a1803", "html_url": "https://github.com/rust-lang/rust/commit/0e4524e5b4a9c5656fef69f532f96eb9959a1803", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e4524e5b4a9c5656fef69f532f96eb9959a1803/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3e46a9763d86a1681ddaaf0e60ce537302b9c92", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3e46a9763d86a1681ddaaf0e60ce537302b9c92", "html_url": "https://github.com/rust-lang/rust/commit/b3e46a9763d86a1681ddaaf0e60ce537302b9c92"}, {"sha": "928388bad20572e9ffa575319bb6d3b636bcdc69", "url": "https://api.github.com/repos/rust-lang/rust/commits/928388bad20572e9ffa575319bb6d3b636bcdc69", "html_url": "https://github.com/rust-lang/rust/commit/928388bad20572e9ffa575319bb6d3b636bcdc69"}], "stats": {"total": 128, "additions": 82, "deletions": 46}, "files": [{"sha": "853243ef3f06d3a3dea4ca58310a51ac14cbf797", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0e4524e5b4a9c5656fef69f532f96eb9959a1803/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4524e5b4a9c5656fef69f532f96eb9959a1803/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=0e4524e5b4a9c5656fef69f532f96eb9959a1803", "patch": "@@ -198,6 +198,45 @@ impl EmissionGuarantee for () {\n     }\n }\n \n+impl<'a> DiagnosticBuilder<'a, !> {\n+    /// Convenience function for internal use, clients should use one of the\n+    /// `struct_*` methods on [`Handler`].\n+    crate fn new_fatal(handler: &'a Handler, message: &str) -> Self {\n+        let diagnostic = Diagnostic::new_with_code(Level::Fatal, None, message);\n+        Self::new_diagnostic_fatal(handler, diagnostic)\n+    }\n+\n+    /// Creates a new `DiagnosticBuilder` with an already constructed\n+    /// diagnostic.\n+    crate fn new_diagnostic_fatal(handler: &'a Handler, diagnostic: Diagnostic) -> Self {\n+        debug!(\"Created new diagnostic\");\n+        Self {\n+            inner: DiagnosticBuilderInner {\n+                state: DiagnosticBuilderState::Emittable(handler),\n+                diagnostic: Box::new(diagnostic),\n+            },\n+            _marker: PhantomData,\n+        }\n+    }\n+}\n+\n+impl EmissionGuarantee for ! {\n+    fn diagnostic_builder_emit_producing_guarantee(db: &mut DiagnosticBuilder<'_, Self>) -> Self {\n+        match db.inner.state {\n+            // First `.emit()` call, the `&Handler` is still available.\n+            DiagnosticBuilderState::Emittable(handler) => {\n+                db.inner.state = DiagnosticBuilderState::AlreadyEmittedOrDuringCancellation;\n+\n+                handler.emit_diagnostic(&mut db.inner.diagnostic);\n+            }\n+            // `.emit()` was previously called, disallowed from repeating it.\n+            DiagnosticBuilderState::AlreadyEmittedOrDuringCancellation => {}\n+        }\n+        // Then fatally error, returning `!`\n+        crate::FatalError.raise()\n+    }\n+}\n+\n /// In general, the `DiagnosticBuilder` uses deref to allow access to\n /// the fields and methods of the embedded `diagnostic` in a\n /// transparent way. *However,* many of the methods are intended to"}, {"sha": "ec00910ec8bb7e01b67a2a6e31a6406a7e2fcc6c", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0e4524e5b4a9c5656fef69f532f96eb9959a1803/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4524e5b4a9c5656fef69f532f96eb9959a1803/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=0e4524e5b4a9c5656fef69f532f96eb9959a1803", "patch": "@@ -8,6 +8,7 @@\n #![feature(backtrace)]\n #![feature(if_let_guard)]\n #![feature(let_else)]\n+#![feature(never_type)]\n #![feature(nll)]\n #![feature(adt_const_params)]\n #![allow(incomplete_features)]\n@@ -758,7 +759,7 @@ impl Handler {\n         &self,\n         span: impl Into<MultiSpan>,\n         msg: &str,\n-    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'_, !> {\n         let mut result = self.struct_fatal(msg);\n         result.set_span(span);\n         result\n@@ -770,15 +771,15 @@ impl Handler {\n         span: impl Into<MultiSpan>,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'_, !> {\n         let mut result = self.struct_span_fatal(span, msg);\n         result.code(code);\n         result\n     }\n \n     /// Construct a builder at the `Error` level with the `msg`.\n-    pub fn struct_fatal(&self, msg: &str) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n-        DiagnosticBuilder::new_guaranteeing_error::<{ Level::Fatal }>(self, msg)\n+    pub fn struct_fatal(&self, msg: &str) -> DiagnosticBuilder<'_, !> {\n+        DiagnosticBuilder::new_fatal(self, msg)\n     }\n \n     /// Construct a builder at the `Help` level with the `msg`."}, {"sha": "1477bc28cff449c4789557bfd09a0ef38877d014", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0e4524e5b4a9c5656fef69f532f96eb9959a1803/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4524e5b4a9c5656fef69f532f96eb9959a1803/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=0e4524e5b4a9c5656fef69f532f96eb9959a1803", "patch": "@@ -180,7 +180,6 @@\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{par_iter, MTLock, MTRef, ParallelIterator};\n-use rustc_errors::FatalError;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n@@ -560,8 +559,7 @@ fn check_recursion_limit<'tcx>(\n         if let Some(path) = written_to_path {\n             err.note(&format!(\"the full type name has been written to '{}'\", path.display()));\n         }\n-        err.emit();\n-        FatalError.raise();\n+        err.emit()\n     }\n \n     recursion_depths.insert(def_id, recursion_depth + 1);\n@@ -598,8 +596,7 @@ fn check_type_length_limit<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) {\n             \"consider adding a `#![type_length_limit=\\\"{}\\\"]` attribute to your crate\",\n             type_length\n         ));\n-        diag.emit();\n-        tcx.sess.abort_if_errors();\n+        diag.emit()\n     }\n }\n "}, {"sha": "92c5d329f6e864eb306fc419cf2852a44f09c7c9", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0e4524e5b4a9c5656fef69f532f96eb9959a1803/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4524e5b4a9c5656fef69f532f96eb9959a1803/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=0e4524e5b4a9c5656fef69f532f96eb9959a1803", "patch": "@@ -3,9 +3,7 @@ use rustc_ast::ast::{self, AttrStyle};\n use rustc_ast::token::{self, CommentKind, Token, TokenKind};\n use rustc_ast::tokenstream::{Spacing, TokenStream};\n use rustc_ast::util::unicode::contains_text_flow_control_chars;\n-use rustc_errors::{\n-    error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, FatalError, PResult,\n-};\n+use rustc_errors::{error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, PResult};\n use rustc_lexer::unescape::{self, Mode};\n use rustc_lexer::{Base, DocStyle, RawStrError};\n use rustc_session::lint::builtin::{\n@@ -104,7 +102,7 @@ impl<'a> StringReader<'a> {\n     }\n \n     /// Report a fatal lexical error with a given span.\n-    fn fatal_span(&self, sp: Span, m: &str) -> FatalError {\n+    fn fatal_span(&self, sp: Span, m: &str) -> ! {\n         self.sess.span_diagnostic.span_fatal(sp, m)\n     }\n \n@@ -114,7 +112,7 @@ impl<'a> StringReader<'a> {\n     }\n \n     /// Report a fatal error spanning [`from_pos`, `to_pos`).\n-    fn fatal_span_(&self, from_pos: BytePos, to_pos: BytePos, m: &str) -> FatalError {\n+    fn fatal_span_(&self, from_pos: BytePos, to_pos: BytePos, m: &str) -> ! {\n         self.fatal_span(self.mk_sp(from_pos, to_pos), m)\n     }\n \n@@ -129,12 +127,24 @@ impl<'a> StringReader<'a> {\n         to_pos: BytePos,\n         m: &str,\n         c: char,\n-    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'a, !> {\n         self.sess\n             .span_diagnostic\n             .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!(\"{}: {}\", m, escaped_char(c)))\n     }\n \n+    fn struct_err_span_char(\n+        &self,\n+        from_pos: BytePos,\n+        to_pos: BytePos,\n+        m: &str,\n+        c: char,\n+    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        self.sess\n+            .span_diagnostic\n+            .struct_span_err(self.mk_sp(from_pos, to_pos), &format!(\"{}: {}\", m, escaped_char(c)))\n+    }\n+\n     /// Detect usages of Unicode codepoints changing the direction of the text on screen and loudly\n     /// complain about it.\n     fn lint_unicode_text_flow(&self, start: BytePos) {\n@@ -311,7 +321,7 @@ impl<'a> StringReader<'a> {\n             rustc_lexer::TokenKind::Unknown | rustc_lexer::TokenKind::InvalidIdent => {\n                 let c = self.str_from(start).chars().next().unwrap();\n                 let mut err =\n-                    self.struct_fatal_span_char(start, self.pos, \"unknown start of token\", c);\n+                    self.struct_err_span_char(start, self.pos, \"unknown start of token\", c);\n                 // FIXME: the lexer could be used to turn the ASCII version of unicode homoglyphs,\n                 // instead of keeping a table in `check_for_substitution`into the token. Ideally,\n                 // this should be inside `rustc_lexer`. However, we should first remove compound\n@@ -503,8 +513,7 @@ impl<'a> StringReader<'a> {\n             \"found invalid character; only `#` is allowed in raw string delimitation\",\n             bad_char,\n         )\n-        .emit();\n-        FatalError.raise()\n+        .emit()\n     }\n \n     fn report_unterminated_raw_string(\n@@ -541,8 +550,7 @@ impl<'a> StringReader<'a> {\n             );\n         }\n \n-        err.emit();\n-        FatalError.raise()\n+        err.emit()\n     }\n \n     // RFC 3101 introduced the idea of (reserved) prefixes. As of Rust 2021,\n@@ -601,7 +609,6 @@ impl<'a> StringReader<'a> {\n                 found\n             ),\n         )\n-        .raise();\n     }\n \n     fn validate_literal_escape("}, {"sha": "1118caf50756a7f48cf1547211a416dc1213da56", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e4524e5b4a9c5656fef69f532f96eb9959a1803/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4524e5b4a9c5656fef69f532f96eb9959a1803/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=0e4524e5b4a9c5656fef69f532f96eb9959a1803", "patch": "@@ -6,6 +6,7 @@\n #![feature(if_let_guard)]\n #![feature(let_chains)]\n #![feature(let_else)]\n+#![feature(never_type)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "14273b07ebde45bd3dee50ab246ad760060d3c9c", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e4524e5b4a9c5656fef69f532f96eb9959a1803/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4524e5b4a9c5656fef69f532f96eb9959a1803/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=0e4524e5b4a9c5656fef69f532f96eb9959a1803", "patch": "@@ -3,6 +3,7 @@\n #![feature(let_chains)]\n #![feature(let_else)]\n #![feature(min_specialization)]\n+#![feature(never_type)]\n #![feature(once_cell)]\n #![feature(option_get_or_insert_default)]\n #![recursion_limit = \"256\"]"}, {"sha": "eed0f1e09fffeefb7e8e74a7934eb4300853ff39", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0e4524e5b4a9c5656fef69f532f96eb9959a1803/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4524e5b4a9c5656fef69f532f96eb9959a1803/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=0e4524e5b4a9c5656fef69f532f96eb9959a1803", "patch": "@@ -341,18 +341,18 @@ impl Session {\n         &self,\n         sp: S,\n         msg: &str,\n-    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'_, !> {\n         self.diagnostic().struct_span_fatal(sp, msg)\n     }\n     pub fn struct_span_fatal_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'_, !> {\n         self.diagnostic().struct_span_fatal_with_code(sp, msg, code)\n     }\n-    pub fn struct_fatal(&self, msg: &str) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n+    pub fn struct_fatal(&self, msg: &str) -> DiagnosticBuilder<'_, !> {\n         self.diagnostic().struct_fatal(msg)\n     }\n \n@@ -1384,7 +1384,7 @@ pub enum IncrCompSession {\n     InvalidBecauseOfErrors { session_directory: PathBuf },\n }\n \n-pub fn early_error_no_abort(output: config::ErrorOutputType, msg: &str) -> ErrorGuaranteed {\n+fn early_error_handler(output: config::ErrorOutputType) -> rustc_errors::Handler {\n     let emitter: Box<dyn Emitter + sync::Send> = match output {\n         config::ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();\n@@ -1394,26 +1394,17 @@ pub fn early_error_no_abort(output: config::ErrorOutputType, msg: &str) -> Error\n             Box::new(JsonEmitter::basic(pretty, json_rendered, None, false))\n         }\n     };\n-    let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n-    let reported = handler.struct_fatal(msg).emit();\n-    reported\n+    rustc_errors::Handler::with_emitter(true, None, emitter)\n+}\n+\n+pub fn early_error_no_abort(output: config::ErrorOutputType, msg: &str) -> ErrorGuaranteed {\n+    early_error_handler(output).struct_err(msg).emit()\n }\n \n pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n-    early_error_no_abort(output, msg);\n-    rustc_errors::FatalError.raise();\n+    early_error_handler(output).struct_fatal(msg).emit()\n }\n \n pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n-    let emitter: Box<dyn Emitter + sync::Send> = match output {\n-        config::ErrorOutputType::HumanReadable(kind) => {\n-            let (short, color_config) = kind.unzip();\n-            Box::new(EmitterWriter::stderr(color_config, None, short, false, None, false))\n-        }\n-        config::ErrorOutputType::Json { pretty, json_rendered } => {\n-            Box::new(JsonEmitter::basic(pretty, json_rendered, None, false))\n-        }\n-    };\n-    let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n-    handler.struct_warn(msg).emit();\n+    early_error_handler(output).struct_warn(msg).emit()\n }"}, {"sha": "fa84c486df512f3162044736cd400729f864b91c", "filename": "compiler/rustc_span/src/fatal_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e4524e5b4a9c5656fef69f532f96eb9959a1803/compiler%2Frustc_span%2Fsrc%2Ffatal_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4524e5b4a9c5656fef69f532f96eb9959a1803/compiler%2Frustc_span%2Fsrc%2Ffatal_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Ffatal_error.rs?ref=0e4524e5b4a9c5656fef69f532f96eb9959a1803", "patch": "@@ -19,7 +19,7 @@ impl FatalError {\n \n impl std::fmt::Display for FatalError {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        write!(f, \"parser fatal error\")\n+        write!(f, \"fatal error\")\n     }\n }\n "}, {"sha": "d114515eca1564a8a3f96ea70cb5fe076546335f", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e4524e5b4a9c5656fef69f532f96eb9959a1803/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4524e5b4a9c5656fef69f532f96eb9959a1803/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=0e4524e5b4a9c5656fef69f532f96eb9959a1803", "patch": "@@ -168,8 +168,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                 \"#![feature(generic_const_exprs)]\\n\".to_string(),\n                 rustc_errors::Applicability::MaybeIncorrect,\n             )\n-            .emit();\n-        rustc_errors::FatalError.raise();\n+            .emit()\n     }\n \n     debug!(?concrete, \"is_const_evaluatable\");"}, {"sha": "e2bd018cb20f22ef5d5364ec2891aabe624e84be", "filename": "compiler/rustc_typeck/src/structured_errors/missing_cast_for_variadic_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e4524e5b4a9c5656fef69f532f96eb9959a1803/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4524e5b4a9c5656fef69f532f96eb9959a1803/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs?ref=0e4524e5b4a9c5656fef69f532f96eb9959a1803", "patch": "@@ -21,7 +21,7 @@ impl<'tcx> StructuredDiagnostic<'tcx> for MissingCastForVariadicArg<'tcx> {\n     }\n \n     fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let mut err = self.sess.struct_span_fatal_with_code(\n+        let mut err = self.sess.struct_span_err_with_code(\n             self.span,\n             &format!(\"can't pass `{}` to variadic function\", self.ty),\n             self.code(),"}, {"sha": "afc5c1fe6cc172775dc75f56db78d14c476dbcdd", "filename": "compiler/rustc_typeck/src/structured_errors/sized_unsized_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e4524e5b4a9c5656fef69f532f96eb9959a1803/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4524e5b4a9c5656fef69f532f96eb9959a1803/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs?ref=0e4524e5b4a9c5656fef69f532f96eb9959a1803", "patch": "@@ -21,7 +21,7 @@ impl<'tcx> StructuredDiagnostic<'tcx> for SizedUnsizedCast<'tcx> {\n     }\n \n     fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let mut err = self.sess.struct_span_fatal_with_code(\n+        let mut err = self.sess.struct_span_err_with_code(\n             self.span,\n             &format!(\n                 \"cannot cast thin pointer `{}` to fat pointer `{}`\","}]}