{"sha": "35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "node_id": "C_kwDOAAsO6NoAKDM1YTA5NjFiYmM4ZmJhNzViYjg2M2M3ODM1YjM5ZDQzMWFkOWZjNWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-10T15:39:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-10T15:39:25Z"}, "message": "Auto merge of #108977 - matthiaskrgr:rollup-1bnl1hu, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #108879 (Unconstrained terms should account for infer vars being equated)\n - #108936 (Rustdoc: don't hide anonymous reexport)\n - #108940 (Add myself to compiler reviewers list)\n - #108945 (Make some report and emit errors take DefIds instead of BodyIds)\n - #108946 (Document the resulting values produced when using `From<bool>` on floats)\n - #108956 (Make ptr::from_ref and ptr::from_mut in #106116 const.)\n - #108960 (Remove `body_def_id` from `Inherited`)\n - #108963 (only call git on git checkouts during bootstrap)\n - #108964 (Fix the docs for pointer method with_metadata_of)\n\nFailed merges:\n\n - #108950 (Directly construct Inherited in typeck.)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "70e351dc29992a07c0ce4fd7015e04ed65ed1633", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70e351dc29992a07c0ce4fd7015e04ed65ed1633"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "html_url": "https://github.com/rust-lang/rust/commit/35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5833423a02e2373c5e3cceb238fb19192cd82f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5833423a02e2373c5e3cceb238fb19192cd82f8", "html_url": "https://github.com/rust-lang/rust/commit/d5833423a02e2373c5e3cceb238fb19192cd82f8"}, {"sha": "df74b70b9ed90f76afecbcb67d061db28bfa8002", "url": "https://api.github.com/repos/rust-lang/rust/commits/df74b70b9ed90f76afecbcb67d061db28bfa8002", "html_url": "https://github.com/rust-lang/rust/commit/df74b70b9ed90f76afecbcb67d061db28bfa8002"}], "stats": {"total": 278, "additions": 157, "deletions": 121}, "files": [{"sha": "748c8b9e4420ca389123bd3a706a7582685427b3", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -325,7 +325,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         if errors.is_empty() {\n             definition_ty\n         } else {\n-            let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+            let reported = infcx.err_ctxt().report_fulfillment_errors(&errors);\n             self.tcx.ty_error(reported)\n         }\n     }"}, {"sha": "db55dbc2bfd7084fef16d1ea09a4e889144f120a", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -770,7 +770,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n \n                         let errors = ocx.select_all_or_error();\n                         if !errors.is_empty() {\n-                            infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+                            infcx.err_ctxt().report_fulfillment_errors(&errors);\n                         }\n                     }\n "}, {"sha": "14dc9d8918000bdbfbbdba6e5108821f5f01e680", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -444,7 +444,7 @@ fn check_opaque_meets_bounds<'tcx>(\n     // version.\n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {\n-        infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+        infcx.err_ctxt().report_fulfillment_errors(&errors);\n     }\n     match origin {\n         // Checked when type checking the function containing them.\n@@ -1545,6 +1545,6 @@ pub(super) fn check_generator_obligations(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     let errors = fulfillment_cx.select_all_or_error(&infcx);\n     debug!(?errors);\n     if !errors.is_empty() {\n-        infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+        infcx.err_ctxt().report_fulfillment_errors(&errors);\n     }\n }"}, {"sha": "5e2781925e66ecd48eb7867096228e33c876f376", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -320,7 +320,7 @@ fn compare_method_predicate_entailment<'tcx>(\n                 });\n             }\n             CheckImpliedWfMode::Skip => {\n-                let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+                let reported = infcx.err_ctxt().report_fulfillment_errors(&errors);\n                 return Err(reported);\n             }\n         }\n@@ -720,7 +720,7 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n     // RPITs.\n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {\n-        let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+        let reported = infcx.err_ctxt().report_fulfillment_errors(&errors);\n         return Err(reported);\n     }\n \n@@ -1731,7 +1731,7 @@ pub(super) fn compare_impl_const_raw(\n     // version.\n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {\n-        return Err(infcx.err_ctxt().report_fulfillment_errors(&errors, None));\n+        return Err(infcx.err_ctxt().report_fulfillment_errors(&errors));\n     }\n \n     let outlives_environment = OutlivesEnvironment::new(param_env);\n@@ -1831,7 +1831,7 @@ fn compare_type_predicate_entailment<'tcx>(\n     // version.\n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {\n-        let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+        let reported = infcx.err_ctxt().report_fulfillment_errors(&errors);\n         return Err(reported);\n     }\n \n@@ -2044,7 +2044,7 @@ pub(super) fn check_type_bounds<'tcx>(\n     // version.\n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {\n-        let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+        let reported = infcx.err_ctxt().report_fulfillment_errors(&errors);\n         return Err(reported);\n     }\n "}, {"sha": "71050864ce0c514a2f914eb6a38cae8e4b521c0f", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -111,7 +111,7 @@ pub(super) fn enter_wf_checking_ctxt<'tcx, F>(\n \n     let errors = wfcx.select_all_or_error();\n     if !errors.is_empty() {\n-        infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+        infcx.err_ctxt().report_fulfillment_errors(&errors);\n         return;\n     }\n "}, {"sha": "5e8f69677cf3dc9cd81469d43c6dc846eced363e", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -345,7 +345,7 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n                     }),\n                 );\n                 if !errors.is_empty() {\n-                    infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+                    infcx.err_ctxt().report_fulfillment_errors(&errors);\n                 }\n \n                 // Finally, resolve all regions.\n@@ -585,7 +585,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n         predicate_for_trait_def(tcx, param_env, cause, trait_def_id, 0, [source, target]);\n     let errors = traits::fully_solve_obligation(&infcx, predicate);\n     if !errors.is_empty() {\n-        infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+        infcx.err_ctxt().report_fulfillment_errors(&errors);\n     }\n \n     // Finally, resolve all regions."}, {"sha": "58dd03811f78cf04ed5245ea8ec1114105860452", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -174,7 +174,7 @@ fn get_impl_substs(\n \n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {\n-        ocx.infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+        ocx.infcx.err_ctxt().report_fulfillment_errors(&errors);\n         return None;\n     }\n "}, {"sha": "7abdde2c892d784f525756c5551810c1a902d810", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -176,7 +176,7 @@ fn require_same_types<'tcx>(\n     match &errors[..] {\n         [] => true,\n         errors => {\n-            infcx.err_ctxt().report_fulfillment_errors(errors, None);\n+            infcx.err_ctxt().report_fulfillment_errors(errors);\n             false\n         }\n     }\n@@ -309,7 +309,7 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n         ocx.register_bound(cause, param_env, norm_return_ty, term_did);\n         let errors = ocx.select_all_or_error();\n         if !errors.is_empty() {\n-            infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+            infcx.err_ctxt().report_fulfillment_errors(&errors);\n             error = true;\n         }\n         // now we can take the return type of the given main function"}, {"sha": "2075537cad71fd8d075f3fad64e6d28e7e815a7b", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -581,7 +581,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if !errors.is_empty() {\n             self.adjust_fulfillment_errors_for_expr_obligation(&mut errors);\n-            self.err_ctxt().report_fulfillment_errors(&errors, self.inh.body_id);\n+            self.err_ctxt().report_fulfillment_errors(&errors);\n         }\n     }\n \n@@ -594,7 +594,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if !result.is_empty() {\n             mutate_fulfillment_errors(&mut result);\n             self.adjust_fulfillment_errors_for_expr_obligation(&mut result);\n-            self.err_ctxt().report_fulfillment_errors(&result, self.inh.body_id);\n+            self.err_ctxt().report_fulfillment_errors(&result);\n         }\n     }\n \n@@ -1411,7 +1411,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else {\n             let e = self.tainted_by_errors().unwrap_or_else(|| {\n                 self.err_ctxt()\n-                    .emit_inference_failure_err((**self).body_id, sp, ty.into(), E0282, true)\n+                    .emit_inference_failure_err(self.body_id, sp, ty.into(), E0282, true)\n                     .emit()\n             });\n             let err = self.tcx.ty_error(e);"}, {"sha": "07fa7c55df660af1a7cd33c1e8c977d466c726e1", "filename": "compiler/rustc_hir_typeck/src/inherited.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -58,8 +58,6 @@ pub struct Inherited<'tcx> {\n     pub(super) deferred_generator_interiors:\n         RefCell<Vec<(LocalDefId, hir::BodyId, Ty<'tcx>, hir::GeneratorKind)>>,\n \n-    pub(super) body_id: Option<hir::BodyId>,\n-\n     /// Whenever we introduce an adjustment from `!` into a type variable,\n     /// we record that type variable here. This is later used to inform\n     /// fallback. See the `fallback` module for details.\n@@ -80,7 +78,6 @@ impl<'tcx> Deref for Inherited<'tcx> {\n /// without using `Rc` or something similar.\n pub struct InheritedBuilder<'tcx> {\n     infcx: infer::InferCtxtBuilder<'tcx>,\n-    def_id: LocalDefId,\n     typeck_results: RefCell<ty::TypeckResults<'tcx>>,\n }\n \n@@ -93,7 +90,6 @@ impl<'tcx> Inherited<'tcx> {\n                 .infer_ctxt()\n                 .ignoring_regions()\n                 .with_opaque_type_inference(DefiningAnchor::Bind(hir_owner.def_id)),\n-            def_id,\n             typeck_results: RefCell::new(ty::TypeckResults::new(hir_owner)),\n         }\n     }\n@@ -104,19 +100,13 @@ impl<'tcx> InheritedBuilder<'tcx> {\n     where\n         F: FnOnce(&Inherited<'tcx>) -> R,\n     {\n-        let def_id = self.def_id;\n-        f(&Inherited::new(self.infcx.build(), def_id, self.typeck_results))\n+        f(&Inherited::new(self.infcx.build(), self.typeck_results))\n     }\n }\n \n impl<'tcx> Inherited<'tcx> {\n-    fn new(\n-        infcx: InferCtxt<'tcx>,\n-        def_id: LocalDefId,\n-        typeck_results: RefCell<ty::TypeckResults<'tcx>>,\n-    ) -> Self {\n+    fn new(infcx: InferCtxt<'tcx>, typeck_results: RefCell<ty::TypeckResults<'tcx>>) -> Self {\n         let tcx = infcx.tcx;\n-        let body_id = tcx.hir().maybe_body_owned_by(def_id);\n \n         Inherited {\n             typeck_results,\n@@ -130,7 +120,6 @@ impl<'tcx> Inherited<'tcx> {\n             deferred_asm_checks: RefCell::new(Vec::new()),\n             deferred_generator_interiors: RefCell::new(Vec::new()),\n             diverging_type_vars: RefCell::new(Default::default()),\n-            body_id,\n             infer_var_info: RefCell::new(Default::default()),\n         }\n     }"}, {"sha": "af588b16d593b38259358f4a2984fddc2c3f9c1b", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -748,7 +748,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n                 .infcx\n                 .err_ctxt()\n                 .emit_inference_failure_err(\n-                    Some(self.body.id()),\n+                    self.tcx.hir().body_owner_def_id(self.body.id()),\n                     self.span.to_span(self.tcx),\n                     p.into(),\n                     E0282,"}, {"sha": "bde16fad82162c05dc5dee317a9ced70626fbdc9", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -10,7 +10,7 @@ use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed, IntoDiagnosticArg};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def::{CtorOf, DefKind, Namespace};\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Body, Closure, Expr, ExprKind, FnRetTy, HirId, Local, LocalSource};\n use rustc_middle::hir::nested_filter;\n@@ -386,7 +386,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n     #[instrument(level = \"debug\", skip(self, error_code))]\n     pub fn emit_inference_failure_err(\n         &self,\n-        body_id: Option<hir::BodyId>,\n+        body_def_id: LocalDefId,\n         failure_span: Span,\n         arg: GenericArg<'tcx>,\n         error_code: TypeAnnotationNeeded,\n@@ -403,8 +403,10 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         };\n \n         let mut local_visitor = FindInferSourceVisitor::new(&self, typeck_results, arg);\n-        if let Some(body_id) = body_id {\n-            let expr = self.tcx.hir().expect_expr(body_id.hir_id);\n+        if let Some(body_id) = self.tcx.hir().maybe_body_owned_by(\n+            self.tcx.typeck_root_def_id(body_def_id.to_def_id()).expect_local(),\n+        ) {\n+            let expr = self.tcx.hir().body(body_id).value;\n             local_visitor.visit_expr(expr);\n         }\n "}, {"sha": "ca438a103cf342b4655d573c43b7799b0fdc8aa6", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -93,37 +93,42 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         };\n \n         // Guard against `<T as Trait<?0>>::Assoc = ?0>`.\n-        struct ContainsTerm<'tcx> {\n+        struct ContainsTerm<'a, 'tcx> {\n             term: ty::Term<'tcx>,\n+            infcx: &'a InferCtxt<'tcx>,\n         }\n-        impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ContainsTerm<'tcx> {\n+        impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ContainsTerm<'_, 'tcx> {\n             type BreakTy = ();\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                if t.needs_infer() {\n-                    if ty::Term::from(t) == self.term {\n-                        ControlFlow::Break(())\n-                    } else {\n-                        t.super_visit_with(self)\n-                    }\n+                if let Some(vid) = t.ty_vid()\n+                    && let ty::TermKind::Ty(term) = self.term.unpack()\n+                    && let Some(term_vid) = term.ty_vid()\n+                    && self.infcx.root_var(vid) == self.infcx.root_var(term_vid)\n+                {\n+                    ControlFlow::Break(())\n+                } else if t.has_non_region_infer() {\n+                    t.super_visit_with(self)\n                 } else {\n                     ControlFlow::Continue(())\n                 }\n             }\n \n             fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                if c.needs_infer() {\n-                    if ty::Term::from(c) == self.term {\n-                        ControlFlow::Break(())\n-                    } else {\n-                        c.super_visit_with(self)\n-                    }\n+                if let ty::ConstKind::Infer(ty::InferConst::Var(vid)) = c.kind()\n+                    && let ty::TermKind::Const(term) = self.term.unpack()\n+                    && let ty::ConstKind::Infer(ty::InferConst::Var(term_vid)) = term.kind()\n+                    && self.infcx.root_const_var(vid) == self.infcx.root_const_var(term_vid)\n+                {\n+                    ControlFlow::Break(())\n+                } else if c.has_non_region_infer() {\n+                    c.super_visit_with(self)\n                 } else {\n                     ControlFlow::Continue(())\n                 }\n             }\n         }\n \n-        let mut visitor = ContainsTerm { term: goal.predicate.term };\n+        let mut visitor = ContainsTerm { infcx: self.infcx, term: goal.predicate.term };\n \n         term_is_infer\n             && goal.predicate.projection_ty.visit_with(&mut visitor).is_continue()"}, {"sha": "2dfebfcb904f15b07dabade1c092128a7b4afd1c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 43, "deletions": 56, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -24,11 +24,9 @@ use rustc_errors::{\n };\n use rustc_hir as hir;\n use rustc_hir::def::Namespace;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::Visitor;\n-use rustc_hir::GenericParam;\n-use rustc_hir::Item;\n-use rustc_hir::Node;\n+use rustc_hir::{GenericParam, Item, Node};\n use rustc_infer::infer::error_reporting::TypeErrCtxt;\n use rustc_infer::infer::{InferOk, TypeTrace};\n use rustc_middle::traits::select::OverflowError;\n@@ -126,11 +124,7 @@ pub trait TypeErrCtxtExt<'tcx> {\n             + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n         <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug;\n \n-    fn report_fulfillment_errors(\n-        &self,\n-        errors: &[FulfillmentError<'tcx>],\n-        body_id: Option<hir::BodyId>,\n-    ) -> ErrorGuaranteed;\n+    fn report_fulfillment_errors(&self, errors: &[FulfillmentError<'tcx>]) -> ErrorGuaranteed;\n \n     fn report_overflow_obligation<T>(\n         &self,\n@@ -388,11 +382,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n }\n \n impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n-    fn report_fulfillment_errors(\n-        &self,\n-        errors: &[FulfillmentError<'tcx>],\n-        body_id: Option<hir::BodyId>,\n-    ) -> ErrorGuaranteed {\n+    fn report_fulfillment_errors(&self, errors: &[FulfillmentError<'tcx>]) -> ErrorGuaranteed {\n         #[derive(Debug)]\n         struct ErrorDescriptor<'tcx> {\n             predicate: ty::Predicate<'tcx>,\n@@ -469,7 +459,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         for from_expansion in [false, true] {\n             for (error, suppressed) in iter::zip(errors, &is_suppressed) {\n                 if !suppressed && error.obligation.cause.span.from_expansion() == from_expansion {\n-                    self.report_fulfillment_error(error, body_id);\n+                    self.report_fulfillment_error(error);\n                 }\n             }\n         }\n@@ -955,8 +945,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             );\n                         }\n \n-                        let body_hir_id =\n-                            self.tcx.hir().local_def_id_to_hir_id(obligation.cause.body_id);\n+                        let body_def_id = obligation.cause.body_id;\n                         // Try to report a help message\n                         if is_fn_trait\n                             && let Ok((implemented_kind, params)) = self.type_implements_fn_trait(\n@@ -1037,7 +1026,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             if !self.report_similar_impl_candidates(\n                                 impl_candidates,\n                                 trait_ref,\n-                                body_hir_id,\n+                                body_def_id,\n                                 &mut err,\n                                 true,\n                             ) {\n@@ -1073,7 +1062,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                     self.report_similar_impl_candidates(\n                                         impl_candidates,\n                                         trait_ref,\n-                                        body_hir_id,\n+                                        body_def_id,\n                                         &mut err,\n                                         true,\n                                     );\n@@ -1494,11 +1483,7 @@ trait InferCtxtPrivExt<'tcx> {\n     // `error` occurring implies that `cond` occurs.\n     fn error_implies(&self, cond: ty::Predicate<'tcx>, error: ty::Predicate<'tcx>) -> bool;\n \n-    fn report_fulfillment_error(\n-        &self,\n-        error: &FulfillmentError<'tcx>,\n-        body_id: Option<hir::BodyId>,\n-    );\n+    fn report_fulfillment_error(&self, error: &FulfillmentError<'tcx>);\n \n     fn report_projection_error(\n         &self,\n@@ -1531,7 +1516,7 @@ trait InferCtxtPrivExt<'tcx> {\n         &self,\n         impl_candidates: Vec<ImplCandidate<'tcx>>,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n-        body_id: hir::HirId,\n+        body_def_id: LocalDefId,\n         err: &mut Diagnostic,\n         other: bool,\n     ) -> bool;\n@@ -1561,11 +1546,7 @@ trait InferCtxtPrivExt<'tcx> {\n         trait_ref_and_ty: ty::Binder<'tcx, (ty::TraitPredicate<'tcx>, Ty<'tcx>)>,\n     ) -> PredicateObligation<'tcx>;\n \n-    fn maybe_report_ambiguity(\n-        &self,\n-        obligation: &PredicateObligation<'tcx>,\n-        body_id: Option<hir::BodyId>,\n-    );\n+    fn maybe_report_ambiguity(&self, obligation: &PredicateObligation<'tcx>);\n \n     fn predicate_can_apply(\n         &self,\n@@ -1647,11 +1628,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     }\n \n     #[instrument(skip(self), level = \"debug\")]\n-    fn report_fulfillment_error(\n-        &self,\n-        error: &FulfillmentError<'tcx>,\n-        body_id: Option<hir::BodyId>,\n-    ) {\n+    fn report_fulfillment_error(&self, error: &FulfillmentError<'tcx>) {\n         match error.code {\n             FulfillmentErrorCode::CodeSelectionError(ref selection_error) => {\n                 self.report_selection_error(\n@@ -1664,7 +1641,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 self.report_projection_error(&error.obligation, e);\n             }\n             FulfillmentErrorCode::CodeAmbiguity => {\n-                self.maybe_report_ambiguity(&error.obligation, body_id);\n+                self.maybe_report_ambiguity(&error.obligation);\n             }\n             FulfillmentErrorCode::CodeSubtypeError(ref expected_found, ref err) => {\n                 self.report_mismatched_types(\n@@ -2029,7 +2006,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         &self,\n         impl_candidates: Vec<ImplCandidate<'tcx>>,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n-        body_id: hir::HirId,\n+        body_def_id: LocalDefId,\n         err: &mut Diagnostic,\n         other: bool,\n     ) -> bool {\n@@ -2120,9 +2097,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         // FIXME(compiler-errors): This could be generalized, both to\n                         // be more granular, and probably look past other `#[fundamental]`\n                         // types, too.\n-                        self.tcx\n-                            .visibility(def.did())\n-                            .is_accessible_from(body_id.owner.def_id, self.tcx)\n+                        self.tcx.visibility(def.did()).is_accessible_from(body_def_id, self.tcx)\n                     } else {\n                         true\n                     }\n@@ -2231,11 +2206,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     }\n \n     #[instrument(skip(self), level = \"debug\")]\n-    fn maybe_report_ambiguity(\n-        &self,\n-        obligation: &PredicateObligation<'tcx>,\n-        body_id: Option<hir::BodyId>,\n-    ) {\n+    fn maybe_report_ambiguity(&self, obligation: &PredicateObligation<'tcx>) {\n         // Unable to successfully determine, probably means\n         // insufficient type information, but could mean\n         // ambiguous impls. The latter *ought* to be a\n@@ -2277,7 +2248,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 if self.tcx.lang_items().sized_trait() == Some(trait_ref.def_id()) {\n                     if let None = self.tainted_by_errors() {\n                         self.emit_inference_failure_err(\n-                            body_id,\n+                            obligation.cause.body_id,\n                             span,\n                             trait_ref.self_ty().skip_binder().into(),\n                             ErrorCode::E0282,\n@@ -2304,7 +2275,13 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 let subst = data.trait_ref.substs.iter().find(|s| s.has_non_region_infer());\n \n                 let mut err = if let Some(subst) = subst {\n-                    self.emit_inference_failure_err(body_id, span, subst, ErrorCode::E0283, true)\n+                    self.emit_inference_failure_err(\n+                        obligation.cause.body_id,\n+                        span,\n+                        subst,\n+                        ErrorCode::E0283,\n+                        true,\n+                    )\n                 } else {\n                     struct_span_err!(\n                         self.tcx.sess,\n@@ -2348,12 +2325,10 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 predicate.to_opt_poly_trait_pred().unwrap(),\n                             );\n                             if impl_candidates.len() < 10 {\n-                                let hir =\n-                                    self.tcx.hir().local_def_id_to_hir_id(obligation.cause.body_id);\n                                 self.report_similar_impl_candidates(\n                                     impl_candidates,\n                                     trait_ref,\n-                                    body_id.map(|id| id.hir_id).unwrap_or(hir),\n+                                    obligation.cause.body_id,\n                                     &mut err,\n                                     false,\n                                 );\n@@ -2375,9 +2350,9 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     self.suggest_fully_qualified_path(&mut err, def_id, span, trait_ref.def_id());\n                 }\n \n-                if let (Some(body_id), Some(ty::subst::GenericArgKind::Type(_))) =\n-                    (body_id, subst.map(|subst| subst.unpack()))\n+                if let Some(ty::subst::GenericArgKind::Type(_)) = subst.map(|subst| subst.unpack())\n                 {\n+                    let body_id = self.tcx.hir().body_owned_by(obligation.cause.body_id);\n                     let mut expr_finder = FindExprBySpan::new(span);\n                     expr_finder.visit_expr(&self.tcx.hir().body(body_id).value);\n \n@@ -2473,7 +2448,13 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     return;\n                 }\n \n-                self.emit_inference_failure_err(body_id, span, arg, ErrorCode::E0282, false)\n+                self.emit_inference_failure_err(\n+                    obligation.cause.body_id,\n+                    span,\n+                    arg,\n+                    ErrorCode::E0282,\n+                    false,\n+                )\n             }\n \n             ty::PredicateKind::Subtype(data) => {\n@@ -2487,7 +2468,13 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 let SubtypePredicate { a_is_expected: _, a, b } = data;\n                 // both must be type variables, or the other would've been instantiated\n                 assert!(a.is_ty_var() && b.is_ty_var());\n-                self.emit_inference_failure_err(body_id, span, a.into(), ErrorCode::E0282, true)\n+                self.emit_inference_failure_err(\n+                    obligation.cause.body_id,\n+                    span,\n+                    a.into(),\n+                    ErrorCode::E0282,\n+                    true,\n+                )\n             }\n             ty::PredicateKind::Clause(ty::Clause::Projection(data)) => {\n                 if predicate.references_error() || self.tainted_by_errors().is_some() {\n@@ -2501,7 +2488,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     .find(|g| g.has_non_region_infer());\n                 if let Some(subst) = subst {\n                     let mut err = self.emit_inference_failure_err(\n-                        body_id,\n+                        obligation.cause.body_id,\n                         span,\n                         subst,\n                         ErrorCode::E0284,\n@@ -2530,7 +2517,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 let subst = data.walk().find(|g| g.is_non_region_infer());\n                 if let Some(subst) = subst {\n                     let err = self.emit_inference_failure_err(\n-                        body_id,\n+                        obligation.cause.body_id,\n                         span,\n                         subst,\n                         ErrorCode::E0284,"}, {"sha": "bfeda88a6d40ce2817b9ddf778e643eb610c7318", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -210,7 +210,7 @@ fn do_normalize_predicates<'tcx>(\n     let predicates = match fully_normalize(&infcx, cause, elaborated_env, predicates) {\n         Ok(predicates) => predicates,\n         Err(errors) => {\n-            let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+            let reported = infcx.err_ctxt().report_fulfillment_errors(&errors);\n             return Err(reported);\n         }\n     };"}, {"sha": "a74a56bc5b2094ba8886009651f0f1711bd09c6a", "filename": "library/core/src/convert/num.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -172,7 +172,18 @@ impl_from! { f32, f64, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\"\n #[stable(feature = \"float_from_bool\", since = \"1.68.0\")]\n #[rustc_const_unstable(feature = \"const_num_from_num\", issue = \"87852\")]\n impl const From<bool> for f32 {\n-    /// Converts `bool` to `f32` losslessly.\n+    /// Converts `bool` to `f32` losslessly. The resulting value is positive\n+    /// `0.0` for `false` and `1.0` for `true` values.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// let x: f32 = false.into();\n+    /// assert_eq!(x, 0.0);\n+    /// assert!(x.is_sign_positive());\n+    ///\n+    /// let y: f32 = true.into();\n+    /// assert_eq!(y, 1.0);\n+    /// ```\n     #[inline]\n     fn from(small: bool) -> Self {\n         small as u8 as Self\n@@ -181,7 +192,18 @@ impl const From<bool> for f32 {\n #[stable(feature = \"float_from_bool\", since = \"1.68.0\")]\n #[rustc_const_unstable(feature = \"const_num_from_num\", issue = \"87852\")]\n impl const From<bool> for f64 {\n-    /// Converts `bool` to `f64` losslessly.\n+    /// Converts `bool` to `f64` losslessly. The resulting value is positive\n+    /// `0.0` for `false` and `1.0` for `true` values.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// let x: f64 = false.into();\n+    /// assert_eq!(x, 0.0);\n+    /// assert!(x.is_sign_positive());\n+    ///\n+    /// let y: f64 = true.into();\n+    /// assert_eq!(y, 1.0);\n+    /// ```\n     #[inline]\n     fn from(small: bool) -> Self {\n         small as u8 as Self"}, {"sha": "839afc57f85d2c66392ff2dc6805cfabb2bb0cb1", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -61,14 +61,14 @@ impl<T: ?Sized> *const T {\n \n     /// Use the pointer value in a new pointer of another type.\n     ///\n-    /// In case `val` is a (fat) pointer to an unsized type, this operation\n+    /// In case `meta` is a (fat) pointer to an unsized type, this operation\n     /// will ignore the pointer part, whereas for (thin) pointers to sized\n     /// types, this has the same effect as a simple cast.\n     ///\n     /// The resulting pointer will have provenance of `self`, i.e., for a fat\n     /// pointer, this operation is semantically the same as creating a new\n     /// fat pointer with the data pointer value of `self` but the metadata of\n-    /// `val`.\n+    /// `meta`.\n     ///\n     /// # Examples\n     ///"}, {"sha": "f41be46abc96fd1699899fd25bca54214ba3b0f6", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -691,7 +691,7 @@ where\n #[inline(always)]\n #[must_use]\n #[unstable(feature = \"ptr_from_ref\", issue = \"106116\")]\n-pub fn from_ref<T: ?Sized>(r: &T) -> *const T {\n+pub const fn from_ref<T: ?Sized>(r: &T) -> *const T {\n     r\n }\n \n@@ -702,7 +702,7 @@ pub fn from_ref<T: ?Sized>(r: &T) -> *const T {\n #[inline(always)]\n #[must_use]\n #[unstable(feature = \"ptr_from_ref\", issue = \"106116\")]\n-pub fn from_mut<T: ?Sized>(r: &mut T) -> *mut T {\n+pub const fn from_mut<T: ?Sized>(r: &mut T) -> *mut T {\n     r\n }\n "}, {"sha": "ece5244e9a99ce21eac96a804fa141cade8eb55b", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -60,14 +60,14 @@ impl<T: ?Sized> *mut T {\n \n     /// Use the pointer value in a new pointer of another type.\n     ///\n-    /// In case `val` is a (fat) pointer to an unsized type, this operation\n+    /// In case `meta` is a (fat) pointer to an unsized type, this operation\n     /// will ignore the pointer part, whereas for (thin) pointers to sized\n     /// types, this has the same effect as a simple cast.\n     ///\n     /// The resulting pointer will have provenance of `self`, i.e., for a fat\n     /// pointer, this operation is semantically the same as creating a new\n     /// fat pointer with the data pointer value of `self` but the metadata of\n-    /// `val`.\n+    /// `meta`.\n     ///\n     /// # Examples\n     ///"}, {"sha": "7f6d80c91ade518d0830a5b7b221747d8c688f5d", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -216,7 +216,7 @@ pub(crate) fn is_ci_llvm_available(config: &Config, asserts: bool) -> bool {\n \n /// Returns true if we're running in CI with modified LLVM (and thus can't download it)\n pub(crate) fn is_ci_llvm_modified(config: &Config) -> bool {\n-    CiEnv::is_ci() && {\n+    CiEnv::is_ci() && config.rust_info.is_managed_git_subrepository() && {\n         // We assume we have access to git, so it's okay to unconditionally pass\n         // `true` here.\n         let llvm_sha = detect_llvm_sha(config, true);"}, {"sha": "e09a68069e8c720a93bf26a6fb5695e7e8495eb3", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -224,6 +224,11 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     ) -> bool {\n         debug!(\"maybe_inline_local res: {:?}\", res);\n \n+        if renamed == Some(kw::Underscore) {\n+            // We never inline `_` reexports.\n+            return false;\n+        }\n+\n         if self.cx.output_format.is_json() {\n             return false;\n         }\n@@ -346,8 +351,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     self.visit_foreign_item_inner(item, None);\n                 }\n             }\n-            // If we're inlining, skip private items or item reexported as \"_\".\n-            _ if self.inlining && (!is_pub || renamed == Some(kw::Underscore)) => {}\n+            // If we're inlining, skip private items.\n+            _ if self.inlining && !is_pub => {}\n             hir::ItemKind::GlobalAsm(..) => {}\n             hir::ItemKind::Use(_, hir::UseKind::ListStem) => {}\n             hir::ItemKind::Use(path, kind) => {"}, {"sha": "839c1a3034604d21975cd1760b3e1c2c49bd5ac9", "filename": "tests/rustdoc/anonymous-reexport.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/tests%2Frustdoc%2Fanonymous-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/tests%2Frustdoc%2Fanonymous-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fanonymous-reexport.rs?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -4,9 +4,13 @@\n \n // @has 'foo/index.html'\n // @has - '//*[@id=\"main-content\"]' ''\n-// We check that the only \"h2\" present is for \"Bla\".\n-// @count - '//*[@id=\"main-content\"]/h2' 1\n+// We check that the only \"h2\" present are \"Structs\" (for \"Bla\") and \"Re-exports\".\n+// @count - '//*[@id=\"main-content\"]/h2' 2\n // @has - '//*[@id=\"main-content\"]/h2' 'Structs'\n+// @has - '//*[@id=\"main-content\"]/h2' 'Re-exports'\n+// The 3 re-exports.\n+// @count - '//*[@id=\"main-content\"]//*[@class=\"item-table\"]//li//code' 3\n+// The public struct.\n // @count - '//*[@id=\"main-content\"]//a[@class=\"struct\"]' 1\n \n mod ext {"}, {"sha": "302f7413398379130cb2c7dd7f17386a2430d1cc", "filename": "tests/rustdoc/issue-108931-anonymous-reexport.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/tests%2Frustdoc%2Fissue-108931-anonymous-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/tests%2Frustdoc%2Fissue-108931-anonymous-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-108931-anonymous-reexport.rs?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -0,0 +1,21 @@\n+// Ensuring that anonymous re-exports are always inlined.\n+\n+#![crate_name = \"foo\"]\n+\n+pub mod foo {\n+    pub struct Foo;\n+}\n+\n+mod bar {\n+    pub struct Bar;\n+}\n+\n+// @has 'foo/index.html'\n+// We check that the only \"h2\" present are \"Re-exports\" and \"Modules\".\n+// @count - '//*[@id=\"main-content\"]/h2' 2\n+// @has - '//*[@id=\"main-content\"]/h2' 'Re-exports'\n+// @has - '//*[@id=\"main-content\"]/h2' 'Modules'\n+// @has - '//*[@id=\"main-content\"]//*[@class=\"item-table\"]//li//code' 'pub use foo::Foo as _;'\n+// @has - '//*[@id=\"main-content\"]//*[@class=\"item-table\"]//li//code' 'pub use bar::Bar as _;'\n+pub use foo::Foo as _;\n+pub use bar::Bar as _;"}, {"sha": "e39a0b06b974e0a682ef5c990bce6f63d42f338a", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/35a0961bbc8fba75bb863c7835b39d431ad9fc5d/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "patch": "@@ -501,6 +501,7 @@ compiler-team-contributors = [\n     \"@TaKO8Ki\",\n     \"@Nilstrieb\",\n     \"@WaffleLapkin\",\n+    \"@b-naber\",\n ]\n compiler = [\n     \"compiler-team\","}]}