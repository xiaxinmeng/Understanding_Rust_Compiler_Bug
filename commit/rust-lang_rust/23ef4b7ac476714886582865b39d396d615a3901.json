{"sha": "23ef4b7ac476714886582865b39d396d615a3901", "node_id": "C_kwDOAAsO6NoAKDIzZWY0YjdhYzQ3NjcxNDg4NjU4Mjg2NWIzOWQzOTZkNjE1YTM5MDE", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2022-07-31T18:53:37Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2022-08-01T18:50:04Z"}, "message": "refactor(chains): encapsulate shared code, prep for overflows", "tree": {"sha": "589de037a62961617f31aab96f6b967747f39fab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/589de037a62961617f31aab96f6b967747f39fab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23ef4b7ac476714886582865b39d396d615a3901", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23ef4b7ac476714886582865b39d396d615a3901", "html_url": "https://github.com/rust-lang/rust/commit/23ef4b7ac476714886582865b39d396d615a3901", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23ef4b7ac476714886582865b39d396d615a3901/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fa81c6dbf72a83e4612d9490cdceade5eb2d2ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fa81c6dbf72a83e4612d9490cdceade5eb2d2ae", "html_url": "https://github.com/rust-lang/rust/commit/3fa81c6dbf72a83e4612d9490cdceade5eb2d2ae"}], "stats": {"total": 99, "additions": 77, "deletions": 22}, "files": [{"sha": "a2976bbe92a5ec7d19061a0afd276fa4f6fa3c7a", "filename": "src/chains.rs", "status": "modified", "additions": 77, "deletions": 22, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/23ef4b7ac476714886582865b39d396d615a3901/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ef4b7ac476714886582865b39d396d615a3901/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=23ef4b7ac476714886582865b39d396d615a3901", "patch": "@@ -74,6 +74,60 @@ use crate::utils::{\n     rewrite_ident, trimmed_last_line_width, wrap_str,\n };\n \n+/// Provides the original input contents from the span\n+/// of a chain element with trailing spaces trimmed.\n+fn format_overflow_style(span: Span, context: &RewriteContext<'_>) -> Option<String> {\n+    context.snippet_provider.span_to_snippet(span).map(|s| {\n+        s.lines()\n+            .map(|l| l.trim_end())\n+            .collect::<Vec<_>>()\n+            .join(\"\\n\")\n+    })\n+}\n+\n+fn format_chain_item(\n+    item: &ChainItem,\n+    context: &RewriteContext<'_>,\n+    rewrite_shape: Shape,\n+    allow_overflow: bool,\n+) -> Option<String> {\n+    if allow_overflow {\n+        item.rewrite(context, rewrite_shape)\n+            .or_else(|| format_overflow_style(item.span, context))\n+    } else {\n+        item.rewrite(context, rewrite_shape)\n+    }\n+}\n+\n+fn get_block_child_shape(\n+    prev_ends_with_block: bool,\n+    context: &RewriteContext<'_>,\n+    shape: Shape,\n+) -> Shape {\n+    if prev_ends_with_block {\n+        shape.block_indent(0)\n+    } else {\n+        shape.block_indent(context.config.tab_spaces())\n+    }\n+    .with_max_width(context.config)\n+}\n+\n+fn get_visual_style_child_shape(\n+    context: &RewriteContext<'_>,\n+    shape: Shape,\n+    offset: usize,\n+    parent_overflowing: bool,\n+) -> Option<Shape> {\n+    if !parent_overflowing {\n+        shape\n+            .with_max_width(context.config)\n+            .offset_left(offset)\n+            .map(|s| s.visual_indent(0))\n+    } else {\n+        Some(shape.visual_indent(offset))\n+    }\n+}\n+\n pub(crate) fn rewrite_chain(\n     expr: &ast::Expr,\n     context: &RewriteContext<'_>,\n@@ -498,6 +552,8 @@ struct ChainFormatterShared<'a> {\n     // The number of children in the chain. This is not equal to `self.children.len()`\n     // because `self.children` will change size as we process the chain.\n     child_count: usize,\n+    // Whether elements are allowed to overflow past the max_width limit\n+    allow_overflow: bool,\n }\n \n impl<'a> ChainFormatterShared<'a> {\n@@ -507,6 +563,8 @@ impl<'a> ChainFormatterShared<'a> {\n             rewrites: Vec::with_capacity(chain.children.len() + 1),\n             fits_single_line: false,\n             child_count: chain.children.len(),\n+            // TODO(calebcartwright)\n+            allow_overflow: false,\n         }\n     }\n \n@@ -519,6 +577,14 @@ impl<'a> ChainFormatterShared<'a> {\n         }\n     }\n \n+    fn format_children(&mut self, context: &RewriteContext<'_>, child_shape: Shape) -> Option<()> {\n+        for item in &self.children[..self.children.len() - 1] {\n+            let rewrite = format_chain_item(item, context, child_shape, self.allow_overflow)?;\n+            self.rewrites.push(rewrite);\n+        }\n+        Some(())\n+    }\n+\n     // Rewrite the last child. The last child of a chain requires special treatment. We need to\n     // know whether 'overflowing' the last child make a better formatting:\n     //\n@@ -731,22 +797,12 @@ impl<'a> ChainFormatter for ChainFormatterBlock<'a> {\n     }\n \n     fn child_shape(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<Shape> {\n-        Some(\n-            if self.root_ends_with_block {\n-                shape.block_indent(0)\n-            } else {\n-                shape.block_indent(context.config.tab_spaces())\n-            }\n-            .with_max_width(context.config),\n-        )\n+        let block_end = self.root_ends_with_block;\n+        Some(get_block_child_shape(block_end, context, shape))\n     }\n \n     fn format_children(&mut self, context: &RewriteContext<'_>, child_shape: Shape) -> Option<()> {\n-        for item in &self.shared.children[..self.shared.children.len() - 1] {\n-            let rewrite = item.rewrite(context, child_shape)?;\n-            self.shared.rewrites.push(rewrite);\n-        }\n-        Some(())\n+        self.shared.format_children(context, child_shape)\n     }\n \n     fn format_last_child(\n@@ -828,18 +884,17 @@ impl<'a> ChainFormatter for ChainFormatterVisual<'a> {\n     }\n \n     fn child_shape(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<Shape> {\n-        shape\n-            .with_max_width(context.config)\n-            .offset_left(self.offset)\n-            .map(|s| s.visual_indent(0))\n+        get_visual_style_child_shape(\n+            context,\n+            shape,\n+            self.offset,\n+            // TODO(calebcartwright): self.shared.permissibly_overflowing_parent,\n+            false,\n+        )\n     }\n \n     fn format_children(&mut self, context: &RewriteContext<'_>, child_shape: Shape) -> Option<()> {\n-        for item in &self.shared.children[..self.shared.children.len() - 1] {\n-            let rewrite = item.rewrite(context, child_shape)?;\n-            self.shared.rewrites.push(rewrite);\n-        }\n-        Some(())\n+        self.shared.format_children(context, child_shape)\n     }\n \n     fn format_last_child("}]}