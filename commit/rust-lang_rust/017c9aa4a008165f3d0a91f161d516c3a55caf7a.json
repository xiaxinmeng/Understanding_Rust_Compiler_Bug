{"sha": "017c9aa4a008165f3d0a91f161d516c3a55caf7a", "node_id": "C_kwDOAAsO6NoAKDAxN2M5YWE0YTAwODE2NWYzZDBhOTFmMTYxZDUxNmMzYTU1Y2FmN2E", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-11-09T20:39:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-09T20:39:04Z"}, "message": "Rollup merge of #103929 - BlackHoleFox:apple-targets-cleanup, r=petrochenkov\n\nCleanup Apple-related code in rustc_target\n\nWhile working on https://github.com/rust-lang/rust/pull/103455, the consistency of the `rustc_target` code for Apple's platforms was \"kind of bad.\" There were two \"base\" files (`apple_base.rs` and `apple_sdk_base.rs`) that the targets each pulled some parts out of, each and all of them were written slightly differently, and sometimes missed comments other implementations had.\n\nSo to hopefully make future maintenance, like implementing https://github.com/rust-lang/compiler-team/issues/556, easier, this makes all of them use similar patterns and the same target base logic everywhere instead of picking bits from both. This also has some other smaller upsides like less stringly-typed functions.", "tree": {"sha": "552500fd91f90e12965ae6089e693fd7ae516239", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/552500fd91f90e12965ae6089e693fd7ae516239"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/017c9aa4a008165f3d0a91f161d516c3a55caf7a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjbA/oCRBK7hj4Ov3rIwAA+wcIAKePWIWowtb3eoHU7ozZvWss\nTlYOrRu+l8SpgMKdIXvVRDNYaGPQZqcso3jD+JdvnI1dN5wZHsmXGiO9P9idvMBe\nIXT2qQ7v62TsnwyeBO6myAE8V+lW5cQFKI9Efd01TjwE3kt7X7+hgptpN7AZvlkO\nF2z2NwUgRyqUXEZTkyEwiTSH5PP8kgJ1mB6xtx4Hmqvi4zAIhvk2uwIybGKuJSo0\nAF3wv2Cx6nkeTbEIOteG8BAePLwEheD2Tm3kj+OAng/qD/IZTdTkBZA0vHq1vZhD\nhT5WQ+Dja2ebfTn4fLvHr3sdtkgxZxSZKr4QF0mG1NdXr+8admBCVNkenV6hJTk=\n=bT/9\n-----END PGP SIGNATURE-----\n", "payload": "tree 552500fd91f90e12965ae6089e693fd7ae516239\nparent 3f11d39eecd25b3765eec78e25887fa980908915\nparent ae948c63808d06d6ae5994a2c3d943dbc440c0b2\nauthor Manish Goregaokar <manishsmail@gmail.com> 1668026344 -0500\ncommitter GitHub <noreply@github.com> 1668026344 -0500\n\nRollup merge of #103929 - BlackHoleFox:apple-targets-cleanup, r=petrochenkov\n\nCleanup Apple-related code in rustc_target\n\nWhile working on https://github.com/rust-lang/rust/pull/103455, the consistency of the `rustc_target` code for Apple's platforms was \"kind of bad.\" There were two \"base\" files (`apple_base.rs` and `apple_sdk_base.rs`) that the targets each pulled some parts out of, each and all of them were written slightly differently, and sometimes missed comments other implementations had.\n\nSo to hopefully make future maintenance, like implementing https://github.com/rust-lang/compiler-team/issues/556, easier, this makes all of them use similar patterns and the same target base logic everywhere instead of picking bits from both. This also has some other smaller upsides like less stringly-typed functions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/017c9aa4a008165f3d0a91f161d516c3a55caf7a", "html_url": "https://github.com/rust-lang/rust/commit/017c9aa4a008165f3d0a91f161d516c3a55caf7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/017c9aa4a008165f3d0a91f161d516c3a55caf7a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f11d39eecd25b3765eec78e25887fa980908915", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f11d39eecd25b3765eec78e25887fa980908915", "html_url": "https://github.com/rust-lang/rust/commit/3f11d39eecd25b3765eec78e25887fa980908915"}, {"sha": "ae948c63808d06d6ae5994a2c3d943dbc440c0b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae948c63808d06d6ae5994a2c3d943dbc440c0b2", "html_url": "https://github.com/rust-lang/rust/commit/ae948c63808d06d6ae5994a2c3d943dbc440c0b2"}], "stats": {"total": 439, "additions": 218, "deletions": 221}, "files": [{"sha": "0f6bbc323174cfb45dad1ffe4a388d1d323c2234", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=017c9aa4a008165f3d0a91f161d516c3a55caf7a", "patch": "@@ -1,26 +1,25 @@\n+use super::apple_base::{macos_link_env_remove, macos_llvm_target, opts, Arch};\n use crate::spec::{FramePointer, SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let arch = \"arm64\";\n-    let mut base = super::apple_base::opts(\"macos\", arch, \"\");\n+    let arch = Arch::Arm64;\n+    let mut base = opts(\"macos\", arch);\n     base.cpu = \"apple-a14\".into();\n     base.max_atomic_width = Some(128);\n \n     // FIXME: The leak sanitizer currently fails the tests, see #88132.\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::THREAD;\n \n-    base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n-\n-    // Clang automatically chooses a more specific target based on\n-    // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n-    // correctly, we do too.\n-    let llvm_target = super::apple_base::macos_llvm_target(arch);\n+    base.link_env_remove.to_mut().extend(macos_link_env_remove());\n \n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n+        // correctly, we do too.\n+        llvm_target: macos_llvm_target(arch).into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n-        arch: \"aarch64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             mcount: \"\\u{1}mcount\".into(),\n             frame_pointer: FramePointer::NonLeaf,"}, {"sha": "b5f9eb1259dace3eaa02136daa9641416dc789aa", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs?ref=017c9aa4a008165f3d0a91f161d516c3a55caf7a", "patch": "@@ -1,19 +1,17 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{ios_llvm_target, opts, Arch};\n use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    // Clang automatically chooses a more specific target based on\n-    // IPHONEOS_DEPLOYMENT_TARGET.\n-    // This is required for the target to pick the right\n-    // MACH-O commands, so we do too.\n-    let arch = \"arm64\";\n-    let llvm_target = super::apple_base::ios_llvm_target(arch);\n-\n+    let arch = Arch::Arm64;\n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // IPHONEOS_DEPLOYMENT_TARGET.\n+        // This is required for the target to pick the right\n+        // MACH-O commands, so we do too.\n+        llvm_target: ios_llvm_target(arch).into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n-        arch: \"aarch64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a7\".into(),\n             max_atomic_width: Some(128),\n@@ -30,7 +28,7 @@ pub fn target() -> Target {\n                 darwinpcs\\0\\\n                 -Os\\0\"\n                 .into(),\n-            ..opts(\"ios\", Arch::Arm64)\n+            ..opts(\"ios\", arch)\n         },\n     }\n }"}, {"sha": "0009972cf425693c9134e84e5b1cf5e786d54a06", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios_macabi.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs?ref=017c9aa4a008165f3d0a91f161d516c3a55caf7a", "patch": "@@ -1,17 +1,18 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let llvm_target = \"arm64-apple-ios14.0-macabi\";\n \n-    let mut base = opts(\"ios\", Arch::Arm64_macabi);\n+    let arch = Arch::Arm64_macabi;\n+    let mut base = opts(\"ios\", arch);\n     base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-target\", llvm_target]);\n \n     Target {\n         llvm_target: llvm_target.into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n-        arch: \"aarch64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a12\".into(),\n             max_atomic_width: Some(128),"}, {"sha": "3374755e2dd8b9631b622e31428739b995f434b3", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios_sim.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs?ref=017c9aa4a008165f3d0a91f161d516c3a55caf7a", "patch": "@@ -1,21 +1,17 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{ios_sim_llvm_target, opts, Arch};\n use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"ios\", Arch::Arm64_sim);\n-\n-    // Clang automatically chooses a more specific target based on\n-    // IPHONEOS_DEPLOYMENT_TARGET.\n-    // This is required for the simulator target to pick the right\n-    // MACH-O commands, so we do too.\n-    let arch = \"arm64\";\n-    let llvm_target = super::apple_base::ios_sim_llvm_target(arch);\n-\n+    let arch = Arch::Arm64_sim;\n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // IPHONEOS_DEPLOYMENT_TARGET.\n+        // This is required for the simulator target to pick the right\n+        // MACH-O commands, so we do too.\n+        llvm_target: ios_sim_llvm_target(arch).into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n-        arch: \"aarch64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a7\".into(),\n             max_atomic_width: Some(128),\n@@ -32,7 +28,7 @@ pub fn target() -> Target {\n                 darwinpcs\\0\\\n                 -Os\\0\"\n                 .into(),\n-            ..base\n+            ..opts(\"ios\", arch)\n         },\n     }\n }"}, {"sha": "bb7c39ff26bdf5eede75e1cddda83cef7cbb8ff5", "filename": "compiler/rustc_target/src/spec/aarch64_apple_tvos.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs?ref=017c9aa4a008165f3d0a91f161d516c3a55caf7a", "patch": "@@ -1,18 +1,19 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n+    let arch = Arch::Arm64;\n     Target {\n         llvm_target: \"arm64-apple-tvos\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n-        arch: \"aarch64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a7\".into(),\n             max_atomic_width: Some(128),\n             forces_embed_bitcode: true,\n             frame_pointer: FramePointer::NonLeaf,\n-            ..opts(\"tvos\", Arch::Arm64)\n+            ..opts(\"tvos\", arch)\n         },\n     }\n }"}, {"sha": "e4af4127c2223114f98a2442942e4eac3fab40b8", "filename": "compiler/rustc_target/src/spec/aarch64_apple_watchos_sim.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_watchos_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_watchos_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_watchos_sim.rs?ref=017c9aa4a008165f3d0a91f161d516c3a55caf7a", "patch": "@@ -1,21 +1,17 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, watchos_sim_llvm_target, Arch};\n use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"watchos\", Arch::Arm64_sim);\n-\n-    // Clang automatically chooses a more specific target based on\n-    // WATCHOS_DEPLOYMENT_TARGET.\n-    // This is required for the simulator target to pick the right\n-    // MACH-O commands, so we do too.\n-    let arch = \"arm64\";\n-    let llvm_target = super::apple_base::watchos_sim_llvm_target(arch);\n-\n+    let arch = Arch::Arm64_sim;\n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // WATCHOS_DEPLOYMENT_TARGET.\n+        // This is required for the simulator target to pick the right\n+        // MACH-O commands, so we do too.\n+        llvm_target: watchos_sim_llvm_target(arch).into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n-        arch: \"aarch64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a7\".into(),\n             max_atomic_width: Some(128),\n@@ -32,7 +28,7 @@ pub fn target() -> Target {\n                 darwinpcs\\0\\\n                 -Os\\0\"\n                 .into(),\n-            ..base\n+            ..opts(\"watchos\", arch)\n         },\n     }\n }"}, {"sha": "23c826cb1bda2922558bc2859845a16ec52c26cf", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 107, "deletions": 18, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=017c9aa4a008165f3d0a91f161d516c3a55caf7a", "patch": "@@ -3,7 +3,88 @@ use std::{borrow::Cow, env};\n use crate::spec::{cvs, Cc, DebuginfoKind, FramePointer, LinkArgs};\n use crate::spec::{LinkerFlavor, Lld, SplitDebuginfo, StaticCow, TargetOptions};\n \n-fn pre_link_args(os: &'static str, arch: &'static str, abi: &'static str) -> LinkArgs {\n+#[cfg(test)]\n+#[path = \"apple/tests.rs\"]\n+mod tests;\n+\n+use Arch::*;\n+#[allow(non_camel_case_types)]\n+#[derive(Copy, Clone)]\n+pub enum Arch {\n+    Armv7,\n+    Armv7k,\n+    Armv7s,\n+    Arm64,\n+    Arm64_32,\n+    I386,\n+    I686,\n+    X86_64,\n+    X86_64_sim,\n+    X86_64_macabi,\n+    Arm64_macabi,\n+    Arm64_sim,\n+}\n+\n+impl Arch {\n+    pub fn target_name(self) -> &'static str {\n+        match self {\n+            Armv7 => \"armv7\",\n+            Armv7k => \"armv7k\",\n+            Armv7s => \"armv7s\",\n+            Arm64 | Arm64_macabi | Arm64_sim => \"arm64\",\n+            Arm64_32 => \"arm64_32\",\n+            I386 => \"i386\",\n+            I686 => \"i686\",\n+            X86_64 | X86_64_sim | X86_64_macabi => \"x86_64\",\n+        }\n+    }\n+\n+    pub fn target_arch(self) -> Cow<'static, str> {\n+        Cow::Borrowed(match self {\n+            Armv7 | Armv7k | Armv7s => \"arm\",\n+            Arm64 | Arm64_32 | Arm64_macabi | Arm64_sim => \"aarch64\",\n+            I386 | I686 => \"x86\",\n+            X86_64 | X86_64_sim | X86_64_macabi => \"x86_64\",\n+        })\n+    }\n+\n+    fn target_abi(self) -> &'static str {\n+        match self {\n+            Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | I686 | X86_64 => \"\",\n+            X86_64_macabi | Arm64_macabi => \"macabi\",\n+            // x86_64-apple-ios is a simulator target, even though it isn't\n+            // declared that way in the target like the other ones...\n+            Arm64_sim | X86_64_sim => \"sim\",\n+        }\n+    }\n+\n+    fn target_cpu(self) -> &'static str {\n+        match self {\n+            Armv7 => \"cortex-a8\", // iOS7 is supported on iPhone 4 and higher\n+            Armv7k => \"cortex-a8\",\n+            Armv7s => \"cortex-a9\",\n+            Arm64 => \"apple-a7\",\n+            Arm64_32 => \"apple-s4\",\n+            I386 | I686 => \"yonah\",\n+            X86_64 | X86_64_sim => \"core2\",\n+            X86_64_macabi => \"core2\",\n+            Arm64_macabi => \"apple-a12\",\n+            Arm64_sim => \"apple-a12\",\n+        }\n+    }\n+\n+    fn link_env_remove(self) -> StaticCow<[StaticCow<str>]> {\n+        match self {\n+            Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | I686 | X86_64 | X86_64_sim\n+            | Arm64_sim => {\n+                cvs![\"MACOSX_DEPLOYMENT_TARGET\"]\n+            }\n+            X86_64_macabi | Arm64_macabi => cvs![\"IPHONEOS_DEPLOYMENT_TARGET\"],\n+        }\n+    }\n+}\n+\n+fn pre_link_args(os: &'static str, arch: Arch, abi: &'static str) -> LinkArgs {\n     let platform_name: StaticCow<str> = match abi {\n         \"sim\" => format!(\"{}-simulator\", os).into(),\n         \"macabi\" => \"mac-catalyst\".into(),\n@@ -19,6 +100,8 @@ fn pre_link_args(os: &'static str, arch: &'static str, abi: &'static str) -> Lin\n     }\n     .into();\n \n+    let arch = arch.target_name();\n+\n     let mut args = TargetOptions::link_args(\n         LinkerFlavor::Darwin(Cc::No, Lld::No),\n         &[\"-arch\", arch, \"-platform_version\"],\n@@ -35,24 +118,29 @@ fn pre_link_args(os: &'static str, arch: &'static str, abi: &'static str) -> Lin\n     args\n }\n \n-pub fn opts(os: &'static str, arch: &'static str, abi: &'static str) -> TargetOptions {\n-    // ELF TLS is only available in macOS 10.7+. If you try to compile for 10.6\n+pub fn opts(os: &'static str, arch: Arch) -> TargetOptions {\n+    // Static TLS is only available in macOS 10.7+. If you try to compile for 10.6\n     // either the linker will complain if it is used or the binary will end up\n     // segfaulting at runtime when run on 10.6. Rust by default supports macOS\n     // 10.7+, but there is a standard environment variable,\n     // MACOSX_DEPLOYMENT_TARGET, which is used to signal targeting older\n     // versions of macOS. For example compiling on 10.10 with\n     // MACOSX_DEPLOYMENT_TARGET set to 10.6 will cause the linker to generate\n-    // warnings about the usage of ELF TLS.\n+    // warnings about the usage of static TLS.\n     //\n-    // Here we detect what version is being requested, defaulting to 10.7. ELF\n+    // Here we detect what version is being requested, defaulting to 10.7. Static\n     // TLS is flagged as enabled if it looks to be supported. The architecture\n     // only matters for default deployment target which is 11.0 for ARM64 and\n     // 10.7 for everything else.\n-    let has_thread_local = macos_deployment_target(\"x86_64\") >= (10, 7);\n+    let has_thread_local = os == \"macos\" && macos_deployment_target(Arch::X86_64) >= (10, 7);\n+\n+    let abi = arch.target_abi();\n \n     TargetOptions {\n+        abi: abi.into(),\n         os: os.into(),\n+        cpu: arch.target_cpu().into(),\n+        link_env_remove: arch.link_env_remove(),\n         vendor: \"apple\".into(),\n         linker_flavor: LinkerFlavor::Darwin(Cc::Yes, Lld::No),\n         // macOS has -dead_strip, which doesn't rely on function_sections\n@@ -103,23 +191,24 @@ fn deployment_target(var_name: &str) -> Option<(u32, u32)> {\n         .and_then(|(a, b)| a.parse::<u32>().and_then(|a| b.parse::<u32>().map(|b| (a, b))).ok())\n }\n \n-fn macos_default_deployment_target(arch: &str) -> (u32, u32) {\n-    if arch == \"arm64\" { (11, 0) } else { (10, 7) }\n+fn macos_default_deployment_target(arch: Arch) -> (u32, u32) {\n+    // Note: Arm64_sim is not included since macOS has no simulator.\n+    if matches!(arch, Arm64 | Arm64_macabi) { (11, 0) } else { (10, 7) }\n }\n \n-fn macos_deployment_target(arch: &str) -> (u32, u32) {\n+fn macos_deployment_target(arch: Arch) -> (u32, u32) {\n     deployment_target(\"MACOSX_DEPLOYMENT_TARGET\")\n         .unwrap_or_else(|| macos_default_deployment_target(arch))\n }\n \n-fn macos_lld_platform_version(arch: &str) -> String {\n+fn macos_lld_platform_version(arch: Arch) -> String {\n     let (major, minor) = macos_deployment_target(arch);\n     format!(\"{}.{}\", major, minor)\n }\n \n-pub fn macos_llvm_target(arch: &str) -> String {\n+pub fn macos_llvm_target(arch: Arch) -> String {\n     let (major, minor) = macos_deployment_target(arch);\n-    format!(\"{}-apple-macosx{}.{}.0\", arch, major, minor)\n+    format!(\"{}-apple-macosx{}.{}.0\", arch.target_name(), major, minor)\n }\n \n pub fn macos_link_env_remove() -> Vec<StaticCow<str>> {\n@@ -142,25 +231,25 @@ fn ios_deployment_target() -> (u32, u32) {\n     deployment_target(\"IPHONEOS_DEPLOYMENT_TARGET\").unwrap_or((7, 0))\n }\n \n-pub fn ios_llvm_target(arch: &str) -> String {\n+pub fn ios_llvm_target(arch: Arch) -> String {\n     // Modern iOS tooling extracts information about deployment target\n     // from LC_BUILD_VERSION. This load command will only be emitted when\n     // we build with a version specific `llvm_target`, with the version\n     // set high enough. Luckily one LC_BUILD_VERSION is enough, for Xcode\n     // to pick it up (since std and core are still built with the fallback\n     // of version 7.0 and hence emit the old LC_IPHONE_MIN_VERSION).\n     let (major, minor) = ios_deployment_target();\n-    format!(\"{}-apple-ios{}.{}.0\", arch, major, minor)\n+    format!(\"{}-apple-ios{}.{}.0\", arch.target_name(), major, minor)\n }\n \n fn ios_lld_platform_version() -> String {\n     let (major, minor) = ios_deployment_target();\n     format!(\"{}.{}\", major, minor)\n }\n \n-pub fn ios_sim_llvm_target(arch: &str) -> String {\n+pub fn ios_sim_llvm_target(arch: Arch) -> String {\n     let (major, minor) = ios_deployment_target();\n-    format!(\"{}-apple-ios{}.{}.0-simulator\", arch, major, minor)\n+    format!(\"{}-apple-ios{}.{}.0-simulator\", arch.target_name(), major, minor)\n }\n \n fn tvos_deployment_target() -> (u32, u32) {\n@@ -181,7 +270,7 @@ fn watchos_lld_platform_version() -> String {\n     format!(\"{}.{}\", major, minor)\n }\n \n-pub fn watchos_sim_llvm_target(arch: &str) -> String {\n+pub fn watchos_sim_llvm_target(arch: Arch) -> String {\n     let (major, minor) = watchos_deployment_target();\n-    format!(\"{}-apple-watchos{}.{}.0-simulator\", arch, major, minor)\n+    format!(\"{}-apple-watchos{}.{}.0-simulator\", arch.target_name(), major, minor)\n }"}, {"sha": "148031b1569768eca63e872d67ae5f0ff00906da", "filename": "compiler/rustc_target/src/spec/apple_sdk_base.rs", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/3f11d39eecd25b3765eec78e25887fa980908915/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f11d39eecd25b3765eec78e25887fa980908915/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs?ref=3f11d39eecd25b3765eec78e25887fa980908915", "patch": "@@ -1,81 +0,0 @@\n-use crate::spec::{cvs, TargetOptions};\n-use std::borrow::Cow;\n-\n-#[cfg(test)]\n-#[path = \"apple/tests.rs\"]\n-mod tests;\n-\n-use Arch::*;\n-#[allow(non_camel_case_types)]\n-#[derive(Copy, Clone)]\n-pub enum Arch {\n-    Armv7,\n-    Armv7k,\n-    Armv7s,\n-    Arm64,\n-    Arm64_32,\n-    I386,\n-    #[allow(dead_code)] // Some targets don't use this enum...\n-    X86_64,\n-    X86_64_sim,\n-    X86_64_macabi,\n-    Arm64_macabi,\n-    Arm64_sim,\n-}\n-\n-fn target_arch_name(arch: Arch) -> &'static str {\n-    match arch {\n-        Armv7 => \"armv7\",\n-        Armv7k => \"armv7k\",\n-        Armv7s => \"armv7s\",\n-        Arm64 | Arm64_macabi | Arm64_sim => \"arm64\",\n-        Arm64_32 => \"arm64_32\",\n-        I386 => \"i386\",\n-        X86_64 | X86_64_sim | X86_64_macabi => \"x86_64\",\n-    }\n-}\n-\n-fn target_abi(arch: Arch) -> &'static str {\n-    match arch {\n-        Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | X86_64 => \"\",\n-        X86_64_macabi | Arm64_macabi => \"macabi\",\n-        // x86_64-apple-ios is a simulator target, even though it isn't\n-        // declared that way in the target like the other ones...\n-        Arm64_sim | X86_64_sim => \"sim\",\n-    }\n-}\n-\n-fn target_cpu(arch: Arch) -> &'static str {\n-    match arch {\n-        Armv7 => \"cortex-a8\", // iOS7 is supported on iPhone 4 and higher\n-        Armv7k => \"cortex-a8\",\n-        Armv7s => \"cortex-a9\",\n-        Arm64 => \"apple-a7\",\n-        Arm64_32 => \"apple-s4\",\n-        I386 => \"yonah\",\n-        X86_64 | X86_64_sim => \"core2\",\n-        X86_64_macabi => \"core2\",\n-        Arm64_macabi => \"apple-a12\",\n-        Arm64_sim => \"apple-a12\",\n-    }\n-}\n-\n-fn link_env_remove(arch: Arch) -> Cow<'static, [Cow<'static, str>]> {\n-    match arch {\n-        Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | X86_64 | X86_64_sim | Arm64_sim => {\n-            cvs![\"MACOSX_DEPLOYMENT_TARGET\"]\n-        }\n-        X86_64_macabi | Arm64_macabi => cvs![\"IPHONEOS_DEPLOYMENT_TARGET\"],\n-    }\n-}\n-\n-pub fn opts(os: &'static str, arch: Arch) -> TargetOptions {\n-    let abi = target_abi(arch);\n-    TargetOptions {\n-        abi: abi.into(),\n-        cpu: target_cpu(arch).into(),\n-        link_env_remove: link_env_remove(arch),\n-        has_thread_local: false,\n-        ..super::apple_base::opts(os, target_arch_name(arch), abi)\n-    }\n-}"}, {"sha": "2cf2cbc7510009dec797f7137eabca3bb741bf4e", "filename": "compiler/rustc_target/src/spec/arm64_32_apple_watchos.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs?ref=017c9aa4a008165f3d0a91f161d516c3a55caf7a", "patch": "@@ -1,4 +1,4 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {"}, {"sha": "3259c854791ce1849c465e03dbf691038c6b18f4", "filename": "compiler/rustc_target/src/spec/armv7_apple_ios.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs?ref=017c9aa4a008165f3d0a91f161d516c3a55caf7a", "patch": "@@ -1,18 +1,21 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{ios_llvm_target, opts, Arch};\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let llvm_target = super::apple_base::ios_llvm_target(\"armv7\");\n-\n+    let arch = Arch::Armv7;\n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // IPHONEOS_DEPLOYMENT_TARGET.\n+        // This is required for the target to pick the right\n+        // MACH-O commands, so we do too.\n+        llvm_target: ios_llvm_target(arch).into(),\n         pointer_width: 32,\n         data_layout: \"e-m:o-p:32:32-Fi8-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".into(),\n-        arch: \"arm\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+v7,+vfp3,+neon\".into(),\n             max_atomic_width: Some(64),\n-            ..opts(\"ios\", Arch::Armv7)\n+            ..opts(\"ios\", arch)\n         },\n     }\n }"}, {"sha": "45ead8d65aba9919c6dc65d742b860c308d30c82", "filename": "compiler/rustc_target/src/spec/armv7k_apple_watchos.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7k_apple_watchos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7k_apple_watchos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7k_apple_watchos.rs?ref=017c9aa4a008165f3d0a91f161d516c3a55caf7a", "patch": "@@ -1,13 +1,13 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"watchos\", Arch::Armv7k);\n+    let arch = Arch::Armv7k;\n     Target {\n         llvm_target: \"armv7k-apple-watchos\".into(),\n         pointer_width: 32,\n         data_layout: \"e-m:o-p:32:32-Fi8-i64:64-a:0:32-n32-S128\".into(),\n-        arch: \"arm\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+v7,+vfp4,+neon\".into(),\n             max_atomic_width: Some(64),\n@@ -22,7 +22,7 @@ pub fn target() -> Target {\n                 darwinpcs\\0\\\n                 -Os\\0\"\n                 .into(),\n-            ..base\n+            ..opts(\"watchos\", arch)\n         },\n     }\n }"}, {"sha": "be4bc6758443ec7ee51ea2c1fd67bde666581650", "filename": "compiler/rustc_target/src/spec/armv7s_apple_ios.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs?ref=017c9aa4a008165f3d0a91f161d516c3a55caf7a", "patch": "@@ -1,16 +1,17 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n+    let arch = Arch::Armv7s;\n     Target {\n         llvm_target: \"armv7s-apple-ios\".into(),\n         pointer_width: 32,\n         data_layout: \"e-m:o-p:32:32-Fi8-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".into(),\n-        arch: \"arm\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+v7,+vfp4,+neon\".into(),\n             max_atomic_width: Some(64),\n-            ..opts(\"ios\", Arch::Armv7s)\n+            ..opts(\"ios\", arch)\n         },\n     }\n }"}, {"sha": "5819981612e84a8a322ece52007d089f333f7a7d", "filename": "compiler/rustc_target/src/spec/i386_apple_ios.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs?ref=017c9aa4a008165f3d0a91f161d516c3a55caf7a", "patch": "@@ -1,21 +1,23 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{ios_sim_llvm_target, opts, Arch};\n use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"ios\", Arch::I386);\n-    let llvm_target = super::apple_base::ios_sim_llvm_target(\"i386\");\n-\n+    let arch = Arch::I386;\n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // IPHONEOS_DEPLOYMENT_TARGET.\n+        // This is required for the target to pick the right\n+        // MACH-O commands, so we do too.\n+        llvm_target: ios_sim_llvm_target(arch).into(),\n         pointer_width: 32,\n         data_layout: \"e-m:o-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:128-n8:16:32-S128\"\n             .into(),\n-        arch: \"x86\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n             stack_probes: StackProbeType::X86,\n-            ..base\n+            ..opts(\"ios\", arch)\n         },\n     }\n }"}, {"sha": "8b968af5eccff330a51e7aef34044de6b6b3ef82", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=017c9aa4a008165f3d0a91f161d516c3a55caf7a", "patch": "@@ -1,28 +1,28 @@\n+use super::apple_base::{macos_link_env_remove, macos_llvm_target, opts, Arch};\n use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    // ld64 only understand i386 and not i686\n-    let mut base = super::apple_base::opts(\"macos\", \"i386\", \"\");\n-    base.cpu = \"yonah\".into();\n+    // ld64 only understands i386 and not i686\n+    let arch = Arch::I386;\n+    let mut base = opts(\"macos\", arch);\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-m32\"]);\n-    base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n+    base.link_env_remove.to_mut().extend(macos_link_env_remove());\n     base.stack_probes = StackProbeType::X86;\n     base.frame_pointer = FramePointer::Always;\n \n-    // Clang automatically chooses a more specific target based on\n-    // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n-    // correctly, we do too.\n-    let arch = \"i686\";\n-    let llvm_target = super::apple_base::macos_llvm_target(&arch);\n-\n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n+        // correctly, we do too.\n+        //\n+        // While ld64 doesn't understand i686, LLVM does.\n+        llvm_target: macos_llvm_target(Arch::I686).into(),\n         pointer_width: 32,\n         data_layout: \"e-m:o-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:128-n8:16:32-S128\"\n             .into(),\n-        arch: \"x86\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions { mcount: \"\\u{1}mcount\".into(), ..base },\n     }\n }"}, {"sha": "9baf7655595bfd5c68621f52220fc83ec5c2b27d", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=017c9aa4a008165f3d0a91f161d516c3a55caf7a", "patch": "@@ -59,7 +59,6 @@ pub mod crt_objects;\n \n mod android_base;\n mod apple_base;\n-mod apple_sdk_base;\n mod avr_gnu_base;\n mod bpf_base;\n mod dragonfly_base;"}, {"sha": "c053031612ce5369575731e710bdcfd395b76116", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=017c9aa4a008165f3d0a91f161d516c3a55caf7a", "patch": "@@ -1,29 +1,27 @@\n+use super::apple_base::{macos_link_env_remove, macos_llvm_target, opts, Arch};\n use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, SanitizerSet};\n use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let arch = \"x86_64\";\n-    let mut base = super::apple_base::opts(\"macos\", arch, \"\");\n-    base.cpu = \"core2\".into();\n-    base.max_atomic_width = Some(128); // core2 support cmpxchg16b\n+    let arch = Arch::X86_64;\n+    let mut base = opts(\"macos\", arch);\n+    base.max_atomic_width = Some(128); // core2 supports cmpxchg16b\n     base.frame_pointer = FramePointer::Always;\n     base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-m64\"]);\n-    base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n+    base.link_env_remove.to_mut().extend(macos_link_env_remove());\n     base.stack_probes = StackProbeType::X86;\n     base.supported_sanitizers =\n         SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::LEAK | SanitizerSet::THREAD;\n \n-    // Clang automatically chooses a more specific target based on\n-    // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n-    // correctly, we do too.\n-    let llvm_target = super::apple_base::macos_llvm_target(&arch);\n-\n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n+        // correctly, we do too.\n+        llvm_target: macos_llvm_target(arch).into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .into(),\n-        arch: arch.into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions { mcount: \"\\u{1}mcount\".into(), ..base },\n     }\n }"}, {"sha": "fbd3ebd4d0431eba64044605b1d8b8a9beba7640", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs?ref=017c9aa4a008165f3d0a91f161d516c3a55caf7a", "patch": "@@ -1,20 +1,18 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{ios_sim_llvm_target, opts, Arch};\n use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"ios\", Arch::X86_64_sim);\n-    let llvm_target = super::apple_base::ios_sim_llvm_target(\"x86_64\");\n-\n+    let arch = Arch::X86_64_sim;\n     Target {\n-        llvm_target: llvm_target.into(),\n+        llvm_target: ios_sim_llvm_target(arch).into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .into(),\n-        arch: \"x86_64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n             stack_probes: StackProbeType::X86,\n-            ..base\n+            ..opts(\"ios\", arch)\n         },\n     }\n }"}, {"sha": "0f3f8519963778d172d4ef5b164c100d71da2139", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios_macabi.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs?ref=017c9aa4a008165f3d0a91f161d516c3a55caf7a", "patch": "@@ -1,18 +1,19 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let llvm_target = \"x86_64-apple-ios13.0-macabi\";\n \n-    let mut base = opts(\"ios\", Arch::X86_64_macabi);\n+    let arch = Arch::X86_64_macabi;\n+    let mut base = opts(\"ios\", arch);\n     base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-target\", llvm_target]);\n \n     Target {\n         llvm_target: llvm_target.into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .into(),\n-        arch: \"x86_64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n             stack_probes: StackProbeType::X86,"}, {"sha": "550ce0b9ce577e0584a020d92a42d186ea9d2974", "filename": "compiler/rustc_target/src/spec/x86_64_apple_tvos.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs?ref=017c9aa4a008165f3d0a91f161d516c3a55caf7a", "patch": "@@ -1,17 +1,17 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"tvos\", Arch::X86_64_sim);\n+    let arch = Arch::X86_64_sim;\n     Target {\n         llvm_target: \"x86_64-apple-tvos\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\".into(),\n-        arch: \"x86_64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n             stack_probes: StackProbeType::X86,\n-            ..base\n+            ..opts(\"tvos\", arch)\n         },\n     }\n }"}, {"sha": "75ce02cba1de0623be381ab2b4b396860b69b23a", "filename": "compiler/rustc_target/src/spec/x86_64_apple_watchos_sim.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017c9aa4a008165f3d0a91f161d516c3a55caf7a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs?ref=017c9aa4a008165f3d0a91f161d516c3a55caf7a", "patch": "@@ -1,18 +1,14 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, watchos_sim_llvm_target, Arch};\n use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"watchos\", Arch::X86_64_sim);\n-\n-    let arch = \"x86_64\";\n-    let llvm_target = super::apple_base::watchos_sim_llvm_target(arch);\n-\n+    let arch = Arch::X86_64_sim;\n     Target {\n-        llvm_target: llvm_target.into(),\n+        llvm_target: watchos_sim_llvm_target(arch).into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .into(),\n-        arch: \"x86_64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n             stack_probes: StackProbeType::X86,\n@@ -28,7 +24,7 @@ pub fn target() -> Target {\n                 darwinpcs\\0\\\n                 -Os\\0\"\n                 .into(),\n-            ..base\n+            ..opts(\"watchos\", arch)\n         },\n     }\n }"}]}