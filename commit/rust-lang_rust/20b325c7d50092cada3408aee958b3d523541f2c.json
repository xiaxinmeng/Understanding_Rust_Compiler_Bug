{"sha": "20b325c7d50092cada3408aee958b3d523541f2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYjMyNWM3ZDUwMDkyY2FkYTM0MDhhZWU5NThiM2Q1MjM1NDFmMmM=", "commit": {"author": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-06-14T04:57:10Z"}, "committer": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-06-14T04:58:05Z"}, "message": "tree-wide: make rustdoc links spiky so they are clickable", "tree": {"sha": "5f8078106976c0573ef05861241f434fb5271891", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f8078106976c0573ef05861241f434fb5271891"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20b325c7d50092cada3408aee958b3d523541f2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20b325c7d50092cada3408aee958b3d523541f2c", "html_url": "https://github.com/rust-lang/rust/commit/20b325c7d50092cada3408aee958b3d523541f2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20b325c7d50092cada3408aee958b3d523541f2c/comments", "author": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "660a89620f65225359559ddcaf158bdb9dfe0d4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/660a89620f65225359559ddcaf158bdb9dfe0d4c", "html_url": "https://github.com/rust-lang/rust/commit/660a89620f65225359559ddcaf158bdb9dfe0d4c"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "8a1a51e6e79f59434bb32bf1d2109f104f09b505", "filename": "crates/cfg/src/cfg_expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fcfg%2Fsrc%2Fcfg_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fcfg%2Fsrc%2Fcfg_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Fcfg_expr.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -1,6 +1,6 @@\n //! The condition expression used in `#[cfg(..)]` attributes.\n //!\n-//! See: https://doc.rust-lang.org/reference/conditional-compilation.html#conditional-compilation\n+//! See: <https://doc.rust-lang.org/reference/conditional-compilation.html#conditional-compilation>\n \n use std::{fmt, slice::Iter as SliceIter};\n "}, {"sha": "03b8dd767f0676b4e05a3305affd3f2b60e7cb88", "filename": "crates/cfg/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fcfg%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fcfg%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Flib.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -22,7 +22,7 @@ pub use dnf::DnfExpr;\n /// `foo` and `bar` are both enabled. And here, we store key-value options as a set of tuple\n /// of key and value in `key_values`.\n ///\n-/// See: https://doc.rust-lang.org/reference/conditional-compilation.html#set-configuration-options\n+/// See: <https://doc.rust-lang.org/reference/conditional-compilation.html#set-configuration-options>\n #[derive(Debug, Clone, PartialEq, Eq, Default)]\n pub struct CfgOptions {\n     enabled: FxHashSet<CfgAtom>,"}, {"sha": "2ec568b262bd99c9ab30d77983c25fa421914953", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -15,7 +15,7 @@\n //!\n //! `hir` is what insulates the \"we don't know how to actually write an incremental compiler\"\n //! from the ide with completions, hovers, etc. It is a (soft, internal) boundary:\n-//! https://www.tedinski.com/2018/02/06/system-boundaries.html.\n+//! <https://www.tedinski.com/2018/02/06/system-boundaries.html>.\n \n #![recursion_limit = \"512\"]\n "}, {"sha": "c25ce7634d84ec2ebdaaeeefd191cce26ec75fe8", "filename": "crates/hir_expand/src/eager.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fhir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fhir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Feager.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -17,7 +17,7 @@\n //! > and we need to live with it because it's available on stable and widely relied upon.\n //!\n //!\n-//! See the full discussion : https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Eager.20expansion.20of.20built-in.20macros\n+//! See the full discussion : <https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Eager.20expansion.20of.20built-in.20macros>\n \n use crate::{\n     ast::{self, AstNode},"}, {"sha": "33107aa2484f4ceef01470404c03031d6bca9979", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -53,7 +53,7 @@ mod test_db;\n /// this is a recursive definition! However, the size_of of `HirFileId` is\n /// finite (because everything bottoms out at the real `FileId`) and small\n /// (`MacroCallId` uses the location interning. You can check details here:\n-/// https://en.wikipedia.org/wiki/String_interning).\n+/// <https://en.wikipedia.org/wiki/String_interning>).\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct HirFileId(HirFileIdRepr);\n "}, {"sha": "64c9d22f3641175514c77420c420f04ff2c3dcb2", "filename": "crates/hir_ty/src/diagnostics/match_check/usefulness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -1,5 +1,5 @@\n //! Based on rust-lang/rust 1.52.0-nightly (25c15cdbe 2021-04-22)\n-//! https://github.com/rust-lang/rust/blob/25c15cdbe/compiler/rustc_mir_build/src/thir/pattern/usefulness.rs\n+//! <https://github.com/rust-lang/rust/blob/25c15cdbe/compiler/rustc_mir_build/src/thir/pattern/usefulness.rs>\n //!\n //! -----\n //!"}, {"sha": "78a2305989860fa0a4e2ebaf308675ecbfd92ab1", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -80,7 +80,7 @@ enum ExprOrPatId {\n impl_from!(ExprId, PatId for ExprOrPatId);\n \n /// Binding modes inferred for patterns.\n-/// https://doc.rust-lang.org/reference/patterns.html#binding-modes\n+/// <https://doc.rust-lang.org/reference/patterns.html#binding-modes>\n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n enum BindingMode {\n     Move,"}, {"sha": "ced2965a1dcea703afa8dcf2c94f902f0e28f519", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -2,8 +2,8 @@\n //! happen in certain places, e.g. weakening `&mut` to `&` or deref coercions\n //! like going from `&Vec<T>` to `&[T]`.\n //!\n-//! See https://doc.rust-lang.org/nomicon/coercions.html and\n-//! librustc_typeck/check/coercion.rs.\n+//! See <https://doc.rust-lang.org/nomicon/coercions.html> and\n+//! `librustc_typeck/check/coercion.rs`.\n \n use chalk_ir::{cast::Cast, Mutability, TyVariableKind};\n use hir_def::{expr::ExprId, lang_item::LangItemTarget};\n@@ -331,7 +331,7 @@ impl<'a> InferenceContext<'a> {\n \n     /// Coerce a type using `from_ty: CoerceUnsized<ty_ty>`\n     ///\n-    /// See: https://doc.rust-lang.org/nightly/std/marker/trait.CoerceUnsized.html\n+    /// See: <https://doc.rust-lang.org/nightly/std/marker/trait.CoerceUnsized.html>\n     fn try_coerce_unsized(&mut self, from_ty: &Ty, to_ty: &Ty) -> InferResult {\n         // These 'if' statements require some explanation.\n         // The `CoerceUnsized` trait is special - it is only"}, {"sha": "c9a9b71fe39b5d601c9923a520487b44e15227e2", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -957,7 +957,7 @@ pub(crate) fn field_types_query(\n /// like `T::Item`.\n ///\n /// See the analogous query in rustc and its comment:\n-/// https://github.com/rust-lang/rust/blob/9150f844e2624eb013ec78ca08c1d416e6644026/src/librustc_typeck/astconv.rs#L46\n+/// <https://github.com/rust-lang/rust/blob/9150f844e2624eb013ec78ca08c1d416e6644026/src/librustc_typeck/astconv.rs#L46>\n /// This is a query mostly to handle cycles somewhat gracefully; e.g. the\n /// following bounds are disallowed: `T: Foo<U::Item>, U: Foo<T::Item>`, but\n /// these are fine: `T: Foo<U::Item>, U: Foo<()>`."}, {"sha": "6df569c2a213df6b59d82f2d8c859ae2241c55cf", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -219,7 +219,7 @@ static KIND_TO_ATTRIBUTES: Lazy<FxHashMap<SyntaxKind, &[&str]>> = Lazy::new(|| {\n });\n const EXPR_ATTRIBUTES: &[&str] = attrs!();\n \n-/// https://doc.rust-lang.org/reference/attributes.html#built-in-attributes-index\n+/// <https://doc.rust-lang.org/reference/attributes.html#built-in-attributes-index>\n // Keep these sorted for the binary search!\n const ATTRIBUTES: &[AttrCompletion] = &[\n     attr(\"allow(\u2026)\", Some(\"allow\"), Some(\"allow(${0:lint})\")),"}, {"sha": "961ba3f7bece960742d70ec83c9965c2ede3b2ec", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -1,6 +1,6 @@\n //! An NFA-based parser, which is porting from rustc mbe parsing code\n //!\n-//! See https://github.com/rust-lang/rust/blob/70b18bc2cbac4712020019f5bf57c00905373205/compiler/rustc_expand/src/mbe/macro_parser.rs\n+//! See <https://github.com/rust-lang/rust/blob/70b18bc2cbac4712020019f5bf57c00905373205/compiler/rustc_expand/src/mbe/macro_parser.rs>\n //! Here is a quick intro to how the parser works, copied from rustc:\n //!\n //! A 'position' is a dot in the middle of a matcher, usually represented as a"}, {"sha": "686a6434567e7a689939e18412c93ac4e50056ce", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -208,7 +208,7 @@ struct Restrictions {\n \n /// Binding powers of operators for a Pratt parser.\n ///\n-/// See https://www.oilshell.org/blog/2016/11/03.html\n+/// See <https://www.oilshell.org/blog/2016/11/03.html>\n #[rustfmt::skip]\n fn current_op(p: &Parser) -> (u8, SyntaxKind) {\n     const NOT_AN_OP: (u8, SyntaxKind) = (0, T![@]);"}, {"sha": "48dac14c4abbf9f1781b5a8b7ff111f00aa97fc2", "filename": "crates/paths/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fpaths%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fpaths%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2Fsrc%2Flib.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -244,7 +244,7 @@ impl RelPath {\n     }\n }\n \n-/// Taken from https://github.com/rust-lang/cargo/blob/79c769c3d7b4c2cf6a93781575b7f592ef974255/src/cargo/util/paths.rs#L60-L85\n+/// Taken from <https://github.com/rust-lang/cargo/blob/79c769c3d7b4c2cf6a93781575b7f592ef974255/src/cargo/util/paths.rs#L60-L85>\n fn normalize_path(path: &Path) -> PathBuf {\n     let mut components = path.components().peekable();\n     let mut ret = if let Some(c @ Component::Prefix(..)) = components.peek().cloned() {"}, {"sha": "28a4ac0862e8dacaa637964a60658d526be868c4", "filename": "crates/proc_macro_api/src/version.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_api%2Fsrc%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_api%2Fsrc%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fversion.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -95,7 +95,7 @@ fn read_section<'a>(dylib_binary: &'a [u8], section_name: &str) -> io::Result<&'\n /// * [version string bytes encoded in utf8] <- GET THIS BOI\n /// * [some more bytes that we don really care but still there] :-)\n /// Check this issue for more about the bytes layout:\n-/// https://github.com/rust-analyzer/rust-analyzer/issues/6174\n+/// <https://github.com/rust-analyzer/rust-analyzer/issues/6174>\n fn read_version(dylib_path: &Path) -> io::Result<String> {\n     let dylib_file = File::open(dylib_path)?;\n     let dylib_mmaped = unsafe { Mmap::map(&dylib_file) }?;"}, {"sha": "f54cbcd61532793a148b185abc850b3f8a96ace6", "filename": "crates/proc_macro_srv/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Flib.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -1,7 +1,7 @@\n //! RA Proc Macro Server\n //!\n //! This library is able to call compiled Rust custom derive dynamic libraries on arbitrary code.\n-//! The general idea here is based on https://github.com/fedochet/rust-proc-macro-expander.\n+//! The general idea here is based on <https://github.com/fedochet/rust-proc-macro-expander>.\n //!\n //! But we adapt it to better fit RA needs:\n //!"}, {"sha": "3b2afe01f5bfb94104a12c66bc2360df52428a6e", "filename": "crates/proc_macro_srv/src/proc_macro/bridge/buffer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fbuffer.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -1,6 +1,6 @@\n //! lib-proc-macro Buffer management for same-process client<->server communication.\n //!\n-//! Copy from https://github.com/rust-lang/rust/blob/6050e523bae6de61de4e060facc43dc512adaccd/src/libproc_macro/bridge/buffer.rs\n+//! Copy from <https://github.com/rust-lang/rust/blob/6050e523bae6de61de4e060facc43dc512adaccd/src/libproc_macro/bridge/buffer.rs>\n //! augmented with removing unstable features\n \n use std::io::{self, Write};"}, {"sha": "c135cf7a2371b6c397740d73f550e287b104a157", "filename": "crates/proc_macro_srv/src/proc_macro/bridge/client.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fclient.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -1,6 +1,6 @@\n //! lib-proc-macro Client-side types.\n //!\n-//! Copy from https://github.com/rust-lang/rust/blob/6050e523bae6de61de4e060facc43dc512adaccd/src/libproc_macro/bridge/client.rs\n+//! Copy from <https://github.com/rust-lang/rust/blob/6050e523bae6de61de4e060facc43dc512adaccd/src/libproc_macro/bridge/client.rs>\n //! augmented with removing unstable features\n \n use super::*;"}, {"sha": "f5b6d897e43cbc2110bd45e44f2c84ff6b54fa8f", "filename": "crates/proc_macro_srv/src/proc_macro/bridge/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fclosure.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -1,6 +1,6 @@\n //! lib-proc-macro Closure type (equivalent to `&mut dyn FnMut(A) -> R`) that's `repr(C)`.\n //!\n-//! Copy from https://github.com/rust-lang/rust/blob/6050e523bae6de61de4e060facc43dc512adaccd/src/libproc_macro/bridge/closure.rs#\n+//! Copy from <https://github.com/rust-lang/rust/blob/6050e523bae6de61de4e060facc43dc512adaccd/src/libproc_macro/bridge/closure.rs>\n //! augmented with removing unstable features\n \n #[repr(C)]"}, {"sha": "d2a65d249b5edf5b77ee160f4b1294fb7253186a", "filename": "crates/proc_macro_srv/src/proc_macro/bridge/handle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fhandle.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -1,6 +1,6 @@\n //! lib-proc-macro Server-side handles and storage for per-handle data.\n //!\n-//! Copy from https://github.com/rust-lang/rust/blob/6050e523bae6de61de4e060facc43dc512adaccd/src/libproc_macro/bridge/handle.rs\n+//! Copy from <https://github.com/rust-lang/rust/blob/6050e523bae6de61de4e060facc43dc512adaccd/src/libproc_macro/bridge/handle.rs>\n //! augmented with removing unstable features\n \n use std::collections::{BTreeMap, HashMap};"}, {"sha": "375396d1b441641ae07c0227aee7aec42d9b4742", "filename": "crates/proc_macro_srv/src/proc_macro/bridge/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fmod.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -1,6 +1,6 @@\n //! lib-proc-macro Internal interface for communicating between a `proc_macro` client\n //!\n-//! Copy from https://github.com/rust-lang/rust/blob/6050e523bae6de61de4e060facc43dc512adaccd/src/libproc_macro/bridge/mod.rs\n+//! Copy from <https://github.com/rust-lang/rust/blob/6050e523bae6de61de4e060facc43dc512adaccd/src/libproc_macro/bridge/mod.rs>\n //! augmented with removing unstable features\n //!\n //! Internal interface for communicating between a `proc_macro` client"}, {"sha": "69928ec845aba45f38c9992942486e098ea3f674", "filename": "crates/proc_macro_srv/src/proc_macro/bridge/rpc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Frpc.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -1,6 +1,6 @@\n //! lib-proc-macro Serialization for client-server communication.\n //!\n-//! Copy from https://github.com/rust-lang/rust/blob/6050e523bae6de61de4e060facc43dc512adaccd/src/libproc_macro/bridge/rpc.rs\n+//! Copy from <https://github.com/rust-lang/rust/blob/6050e523bae6de61de4e060facc43dc512adaccd/src/libproc_macro/bridge/rpc.rs>\n //! augmented with removing unstable features\n //!\n //! Serialization for client-server communication."}, {"sha": "0436bc41836c2176d846ba9946ff0b8bd6103b5e", "filename": "crates/proc_macro_srv/src/proc_macro/bridge/scoped_cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fscoped_cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fscoped_cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fscoped_cell.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -1,6 +1,6 @@\n //! lib-proc-macro `Cell` variant for (scoped) existential lifetimes.\n //!\n-//! Copy from https://github.com/rust-lang/rust/blob/6050e523bae6de61de4e060facc43dc512adaccd/src/libproc_macro/bridge/scoped_cell.rs#L1\n+//! Copy from <https://github.com/rust-lang/rust/blob/6050e523bae6de61de4e060facc43dc512adaccd/src/libproc_macro/bridge/scoped_cell.rs#L1>\n //! augmented with removing unstable features\n \n use std::cell::Cell;"}, {"sha": "cc9afd84b1cec1df0e1e70d1bdf06fe912470477", "filename": "crates/proc_macro_srv/src/proc_macro/bridge/server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fserver.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -1,6 +1,6 @@\n //! lib-proc-macro server-side traits\n //!\n-//! Copy from https://github.com/rust-lang/rust/blob/6050e523bae6de61de4e060facc43dc512adaccd/src/libproc_macro/bridge/server.rs\n+//! Copy from <https://github.com/rust-lang/rust/blob/6050e523bae6de61de4e060facc43dc512adaccd/src/libproc_macro/bridge/server.rs>\n //! augmented with removing unstable features\n \n use super::*;"}, {"sha": "331e2382939b15ef69168f204e2b77c60d4b6190", "filename": "crates/proc_macro_srv/src/proc_macro/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fdiagnostic.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -1,6 +1,6 @@\n //! lib-proc-macro diagnostic\n //!\n-//! Copy from https://github.com/rust-lang/rust/blob/6050e523bae6de61de4e060facc43dc512adaccd/src/libproc_macro/diagnostic.rs\n+//! Copy from <https://github.com/rust-lang/rust/blob/6050e523bae6de61de4e060facc43dc512adaccd/src/libproc_macro/diagnostic.rs>\n //! augmented with removing unstable features\n \n use crate::proc_macro::Span;"}, {"sha": "b7c1d04b50e4c99d7d6fe84ffb421bd666ffefc1", "filename": "crates/proc_macro_srv/src/proc_macro/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fmod.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -1,6 +1,6 @@\n //! lib-proc-macro main module\n //!\n-//! Copy from https://github.com/rust-lang/rust/blob/6050e523bae6de61de4e060facc43dc512adaccd/src/libproc_macro/lib.rs\n+//! Copy from <https://github.com/rust-lang/rust/blob/6050e523bae6de61de4e060facc43dc512adaccd/src/libproc_macro/lib.rs>\n //! augmented with removing unstable features\n \n // NOTE(@edwin0cheng):"}, {"sha": "fa28bc46032664b45212779881a9c8628649cbb9", "filename": "crates/proc_macro_srv/src/rustc_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -1,6 +1,6 @@\n //! Rustc proc-macro server implementation with tt\n //!\n-//! Based on idea from https://github.com/fedochet/rust-proc-macro-expander\n+//! Based on idea from <https://github.com/fedochet/rust-proc-macro-expander>\n //! The lib-proc-macro server backend is `TokenStream`-agnostic, such that\n //! we could provide any TokenStream implementation.\n //! The original idea from fedochet is using proc-macro2 as backend,"}, {"sha": "5ea5039dbadc0d1214b1c8d450d2f58f0c15d2d9", "filename": "crates/profile/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fprofile%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fprofile%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Flib.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -50,10 +50,10 @@ impl Drop for Scope {\n /// A wrapper around google_cpu_profiler.\n ///\n /// Usage:\n-/// 1. Install gpref_tools (https://github.com/gperftools/gperftools), probably packaged with your Linux distro.\n+/// 1. Install gpref_tools (<https://github.com/gperftools/gperftools>), probably packaged with your Linux distro.\n /// 2. Build with `cpu_profiler` feature.\n /// 3. Run the code, the *raw* output would be in the `./out.profile` file.\n-/// 4. Install pprof for visualization (https://github.com/google/pprof).\n+/// 4. Install pprof for visualization (<https://github.com/google/pprof>).\n /// 5. Bump sampling frequency to once per ms: `export CPUPROFILE_FREQUENCY=1000`\n /// 6. Use something like `pprof -svg target/release/rust-analyzer ./out.profile` to see the results.\n ///\n@@ -75,7 +75,7 @@ impl Drop for Scope {\n ///\n /// See this diff for how to profile completions:\n ///\n-/// https://github.com/rust-analyzer/rust-analyzer/pull/5306\n+/// <https://github.com/rust-analyzer/rust-analyzer/pull/5306>\n #[derive(Debug)]\n pub struct CpuSpan {\n     _private: (),"}, {"sha": "c206422311b96e4f57ace5d61c7be6cef2b2ab21", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -112,7 +112,7 @@ impl ops::BitOrAssign<SemanticTokenModifier> for ModifierSet {\n \n /// Tokens are encoded relative to each other.\n ///\n-/// This is a direct port of https://github.com/microsoft/vscode-languageserver-node/blob/f425af9de46a0187adb78ec8a46b9b2ce80c5412/server/src/sematicTokens.proposed.ts#L45\n+/// This is a direct port of <https://github.com/microsoft/vscode-languageserver-node/blob/f425af9de46a0187adb78ec8a46b9b2ce80c5412/server/src/sematicTokens.proposed.ts#L45>\n pub(crate) struct SemanticTokensBuilder {\n     id: String,\n     prev_line: u32,"}, {"sha": "26debf3c47b462bb4463cc061c50bf36e4e1c1a0", "filename": "crates/stdx/src/panic_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fstdx%2Fsrc%2Fpanic_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fstdx%2Fsrc%2Fpanic_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Fpanic_context.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -1,6 +1,6 @@\n //! A micro-crate to enhance panic messages with context info.\n //!\n-//! FIXME: upstream to https://github.com/kriomant/panic-context ?\n+//! FIXME: upstream to <https://github.com/kriomant/panic-context> ?\n \n use std::{cell::RefCell, panic, sync::Once};\n "}, {"sha": "692a2ab3d034a57f13ca95f82c06210c54d12587", "filename": "crates/stdx/src/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fstdx%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Fstdx%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Fprocess.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -1,7 +1,7 @@\n //! Read both stdout and stderr of child without deadlocks.\n //!\n-//! https://github.com/rust-lang/cargo/blob/905af549966f23a9288e9993a85d1249a5436556/crates/cargo-util/src/read2.rs\n-//! https://github.com/rust-lang/cargo/blob/58a961314437258065e23cb6316dfc121d96fb71/crates/cargo-util/src/process_builder.rs#L231\n+//! <https://github.com/rust-lang/cargo/blob/905af549966f23a9288e9993a85d1249a5436556/crates/cargo-util/src/read2.rs>\n+//! <https://github.com/rust-lang/cargo/blob/58a961314437258065e23cb6316dfc121d96fb71/crates/cargo-util/src/process_builder.rs#L231>\n \n use std::{\n     io,"}, {"sha": "dc577700fdd7a302aec5d9ab0c78bbea0f6dc240", "filename": "crates/tt/src/buffer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Ftt%2Fsrc%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/crates%2Ftt%2Fsrc%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2Fsrc%2Fbuffer.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -133,7 +133,7 @@ impl<'a> TokenTreeRef<'a> {\n     }\n }\n \n-/// A safe version of `Cursor` from `syn` crate https://github.com/dtolnay/syn/blob/6533607f91686545cb034d2838beea338d9d0742/src/buffer.rs#L125\n+/// A safe version of `Cursor` from `syn` crate <https://github.com/dtolnay/syn/blob/6533607f91686545cb034d2838beea338d9d0742/src/buffer.rs#L125>\n #[derive(Copy, Clone, Debug)]\n pub struct Cursor<'a> {\n     buffer: &'a TokenBuffer<'a>,"}, {"sha": "063e11a5a6efd751ff35fbb873b9abe79f656fbe", "filename": "xtask/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b325c7d50092cada3408aee958b3d523541f2c/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b325c7d50092cada3408aee958b3d523541f2c/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=20b325c7d50092cada3408aee958b3d523541f2c", "patch": "@@ -1,4 +1,4 @@\n-//! See https://github.com/matklad/cargo-xtask/.\n+//! See <https://github.com/matklad/cargo-xtask/>.\n //!\n //! This binary defines various auxiliary build commands, which are not\n //! expressible with just `cargo`. Notably, it provides tests via `cargo test -p xtask`"}]}