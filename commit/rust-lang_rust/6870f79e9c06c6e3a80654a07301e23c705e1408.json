{"sha": "6870f79e9c06c6e3a80654a07301e23c705e1408", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NzBmNzllOWMwNmM2ZTNhODA2NTRhMDczMDFlMjNjNzA1ZTE0MDg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-30T00:55:37Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-02T19:53:09Z"}, "message": "Use more accurate failed predicate spans", "tree": {"sha": "25ea944dae833d07dc0e687cba24f1c13fbdcee6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25ea944dae833d07dc0e687cba24f1c13fbdcee6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6870f79e9c06c6e3a80654a07301e23c705e1408", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6870f79e9c06c6e3a80654a07301e23c705e1408", "html_url": "https://github.com/rust-lang/rust/commit/6870f79e9c06c6e3a80654a07301e23c705e1408", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6870f79e9c06c6e3a80654a07301e23c705e1408/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d48597b76ef656a1a1f600c96176d1aaeab32ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d48597b76ef656a1a1f600c96176d1aaeab32ff", "html_url": "https://github.com/rust-lang/rust/commit/8d48597b76ef656a1a1f600c96176d1aaeab32ff"}], "stats": {"total": 399, "additions": 187, "deletions": 212}, "files": [{"sha": "0781feee845413a7f28c878c12e9b4ac1991bcdd", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -1015,6 +1015,7 @@ impl<'tcx> GenericPredicates<'tcx> {\n     ) -> InstantiatedPredicates<'tcx> {\n         InstantiatedPredicates {\n             predicates: self.predicates.iter().map(|(p, _)| p.subst(tcx, substs)).collect(),\n+            spans: self.predicates.iter().map(|(_, sp)| *sp).collect(),\n         }\n     }\n \n@@ -1028,6 +1029,7 @@ impl<'tcx> GenericPredicates<'tcx> {\n             tcx.predicates_of(def_id).instantiate_into(tcx, instantiated, substs);\n         }\n         instantiated.predicates.extend(self.predicates.iter().map(|(p, _)| p.subst(tcx, substs)));\n+        instantiated.spans.extend(self.predicates.iter().map(|(_, sp)| *sp));\n     }\n \n     pub fn instantiate_identity(&self, tcx: TyCtxt<'tcx>) -> InstantiatedPredicates<'tcx> {\n@@ -1044,7 +1046,8 @@ impl<'tcx> GenericPredicates<'tcx> {\n         if let Some(def_id) = self.parent {\n             tcx.predicates_of(def_id).instantiate_identity_into(tcx, instantiated);\n         }\n-        instantiated.predicates.extend(self.predicates.iter().map(|&(p, _)| p))\n+        instantiated.predicates.extend(self.predicates.iter().map(|(p, _)| p));\n+        instantiated.spans.extend(self.predicates.iter().map(|(_, s)| s));\n     }\n \n     pub fn instantiate_supertrait(\n@@ -1059,6 +1062,7 @@ impl<'tcx> GenericPredicates<'tcx> {\n                 .iter()\n                 .map(|(pred, _)| pred.subst_supertrait(tcx, poly_trait_ref))\n                 .collect(),\n+            spans: self.predicates.iter().map(|(_, sp)| *sp).collect(),\n         }\n     }\n }\n@@ -1511,11 +1515,12 @@ impl<'tcx> Predicate<'tcx> {\n #[derive(Clone, Debug, TypeFoldable)]\n pub struct InstantiatedPredicates<'tcx> {\n     pub predicates: Vec<Predicate<'tcx>>,\n+    pub spans: Vec<Span>,\n }\n \n impl<'tcx> InstantiatedPredicates<'tcx> {\n     pub fn empty() -> InstantiatedPredicates<'tcx> {\n-        InstantiatedPredicates { predicates: vec![] }\n+        InstantiatedPredicates { predicates: vec![], spans: vec![] }\n     }\n \n     pub fn is_empty(&self) -> bool {"}, {"sha": "0e26e9461f4c3e00fbe8604fa664df905d82b41b", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -161,7 +161,7 @@ crate fn environment(tcx: TyCtxt<'_>, def_id: DefId) -> Environment<'_> {\n     }\n \n     // Compute the bounds on `Self` and the type parameters.\n-    let ty::InstantiatedPredicates { predicates } =\n+    let ty::InstantiatedPredicates { predicates, .. } =\n         tcx.predicates_of(def_id).instantiate_identity(tcx);\n \n     let clauses = predicates"}, {"sha": "9f867cf8ab464f382515490e20c1e486a08a5aa3", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -228,7 +228,7 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     }\n     // Compute the bounds on Self and the type parameters.\n \n-    let ty::InstantiatedPredicates { predicates } =\n+    let ty::InstantiatedPredicates { predicates, .. } =\n         tcx.predicates_of(def_id).instantiate_identity(tcx);\n \n     // Finally, we have to normalize the bounds in the environment, in"}, {"sha": "41171117b47d4fadfa997781384eaff9ca24cf91", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -665,16 +665,21 @@ fn check_where_clauses<'tcx, 'fcx>(\n     let mut predicates = predicates.instantiate_identity(fcx.tcx);\n \n     if let Some((return_ty, span)) = return_ty {\n-        predicates.predicates.extend(check_opaque_types(tcx, fcx, def_id, span, return_ty));\n+        let opaque_types = check_opaque_types(tcx, fcx, def_id, span, return_ty);\n+        for _ in 0..opaque_types.len() {\n+            predicates.spans.push(span);\n+        }\n+        predicates.predicates.extend(opaque_types);\n     }\n \n     let predicates = fcx.normalize_associated_types_in(span, &predicates);\n \n     debug!(\"check_where_clauses: predicates={:?}\", predicates.predicates);\n-    let wf_obligations = predicates\n-        .predicates\n-        .iter()\n-        .flat_map(|p| traits::wf::predicate_obligations(fcx, fcx.param_env, fcx.body_id, p, span));\n+    assert_eq!(predicates.predicates.len(), predicates.spans.len());\n+    let wf_obligations =\n+        predicates.predicates.iter().zip(predicates.spans.iter()).flat_map(|(p, sp)| {\n+            traits::wf::predicate_obligations(fcx, fcx.param_env, fcx.body_id, p, *sp)\n+        });\n \n     for obligation in wf_obligations.chain(default_obligations) {\n         debug!(\"next obligation cause: {:?}\", obligation.cause);"}, {"sha": "5713e259362fda7253a5ebd371e98a5224db66de", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -10,9 +10,9 @@ error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` is not an iterato\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:1\n    |\n LL | fn assume_case1<T: Case1>() {\n-   |    ^^^^^^^^^^^^            - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::iter::Iterator`\n-   |    |\n-   |    `<<T as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n+   |                    ^^^^^   - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::iter::Iterator`\n+   |                    |\n+   |                    `<<T as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n \n@@ -23,9 +23,9 @@ LL | trait Case1 {\n    | ----------- required by `Case1`\n ...\n LL | fn assume_case1<T: Case1>() {\n-   |    ^^^^^^^^^^^^            - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Send`\n-   |    |\n-   |    `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n+   |                    ^^^^^   - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Send`\n+   |                    |\n+   |                    `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n \n@@ -36,9 +36,9 @@ LL | trait Case1 {\n    | ----------- required by `Case1`\n ...\n LL | fn assume_case1<T: Case1>() {\n-   |    ^^^^^^^^^^^^            - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Sync`\n-   |    |\n-   |    `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n+   |                    ^^^^^   - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Sync`\n+   |                    |\n+   |                    `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n \n@@ -49,7 +49,7 @@ LL | trait Case1 {\n    | ----------- required by `Case1`\n ...\n LL | fn assume_case1<T: Case1>() {\n-   |    ^^^^^^^^^^^^ `<_ as Lam<&'a u8>>::App` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |                    ^^^^^ `<_ as Lam<&'a u8>>::App` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n    = help: the trait `for<'a> std::fmt::Debug` is not implemented for `<_ as Lam<&'a u8>>::App`\n "}, {"sha": "9e10ed7b7295203acfb21c42e523afe179cefe6d", "filename": "src/test/ui/associated-types/associated-types-overridden-binding.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -1,20 +1,20 @@\n error[E0284]: type annotations needed\n-  --> $DIR/associated-types-overridden-binding.rs:4:1\n+  --> $DIR/associated-types-overridden-binding.rs:4:12\n    |\n LL | trait Foo: Iterator<Item = i32> {}\n    | ------------------------------- required by `Foo`\n LL | trait Bar: Foo<Item = u32> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `Self`\n+   |            ^^^^^^^^^^^^^^^ cannot infer type for type parameter `Self`\n    |\n    = note: cannot resolve `<Self as std::iter::Iterator>::Item == i32`\n \n error[E0284]: type annotations needed\n-  --> $DIR/associated-types-overridden-binding.rs:7:1\n+  --> $DIR/associated-types-overridden-binding.rs:7:21\n    |\n LL | trait I32Iterator = Iterator<Item = i32>;\n    | ----------------------------------------- required by `I32Iterator`\n LL | trait U32Iterator = I32Iterator<Item = u32>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `Self`\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `Self`\n    |\n    = note: cannot resolve `<Self as std::iter::Iterator>::Item == i32`\n "}, {"sha": "1d087a465942ebb833ac7c303a9ad1bfba825b53", "filename": "src/test/ui/error-codes/E0275.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -1,11 +1,11 @@\n error[E0275]: overflow evaluating the requirement `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n-  --> $DIR/E0275.rs:5:1\n+  --> $DIR/E0275.rs:5:33\n    |\n LL | trait Foo {}\n    | --------- required by `Foo`\n ...\n LL | impl<T> Foo for T where Bar<T>: Foo {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                 ^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate\n    = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`"}, {"sha": "1a79dbf2279a0250f9e8922996b82610d5b142d5", "filename": "src/test/ui/generic-associated-types/issue-62326-parameter-out-of-range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -4,8 +4,8 @@\n // FIXME(generic-associated-types) Investigate why this doesn't compile.\n \n trait Iterator {\n-    //~^ ERROR the requirement `for<'a> <Self as Iterator>::Item<'a>: 'a` is not satisfied\n     type Item<'a>: 'a;\n+    //~^ ERROR the requirement `for<'a> <Self as Iterator>::Item<'a>: 'a` is not satisfied\n }\n \n fn main() {}"}, {"sha": "687423962361bf04c193a801b2a9e1fafe3e6e0b", "filename": "src/test/ui/generic-associated-types/issue-62326-parameter-out-of-range.stderr", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -1,15 +1,10 @@\n error[E0280]: the requirement `for<'a> <Self as Iterator>::Item<'a>: 'a` is not satisfied\n-  --> $DIR/issue-62326-parameter-out-of-range.rs:6:1\n+  --> $DIR/issue-62326-parameter-out-of-range.rs:7:20\n    |\n-LL |   trait Iterator {\n-   |   ^-------------\n-   |   |\n-   |  _required by `Iterator`\n-   | |\n-LL | |\n-LL | |     type Item<'a>: 'a;\n-LL | | }\n-   | |_^\n+LL | trait Iterator {\n+   | -------------- required by `Iterator`\n+LL |     type Item<'a>: 'a;\n+   |                    ^^\n \n error: aborting due to previous error\n "}, {"sha": "36350bff100dd5928c2fe825d2ca97c1bafadb24", "filename": "src/test/ui/issues/issue-20005.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fissues%2Fissue-20005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fissues%2Fissue-20005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20005.rs?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -5,9 +5,9 @@ trait From<Src> {\n }\n \n trait To {\n-    fn to<Dst>(  //~ ERROR the size for values of type\n+    fn to<Dst>(\n         self\n-    ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n+    ) -> <Dst as From<Self>>::Result where Dst: From<Self> { //~ ERROR the size for values of type\n         From::from(self)\n     }\n }"}, {"sha": "529571a6b74dd0feae782d5d7274ac99c0f14b21", "filename": "src/test/ui/issues/issue-20005.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -1,14 +1,13 @@\n error[E0277]: the size for values of type `Self` cannot be known at compilation time\n-  --> $DIR/issue-20005.rs:8:8\n+  --> $DIR/issue-20005.rs:10:49\n    |\n LL | trait From<Src> {\n    | --------------- required by `From`\n ...\n-LL |     fn to<Dst>(\n-   |        ^^ doesn't have a size known at compile-time\n-LL |         self\n LL |     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n-   |                                                           - help: consider further restricting `Self`: `, Self: std::marker::Sized`\n+   |                                                 ^^^^^^^^^^- help: consider further restricting `Self`: `, Self: std::marker::Sized`\n+   |                                                 |\n+   |                                                 doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "19ef52af65736369a6e38b0be7d1e03d8315a29e", "filename": "src/test/ui/issues/issue-20413.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -6,9 +6,9 @@ struct NoData<T>;\n //~^ ERROR: parameter `T` is never used\n \n impl<T> Foo for T where NoData<T>: Foo {\n-//~^ ERROR: overflow evaluating the requirement\n-  fn answer(self) {\n   //~^ ERROR: overflow evaluating the requirement\n+  //~| ERROR: overflow evaluating the requirement\n+  fn answer(self) {\n     let val: NoData<T> = NoData;\n   }\n }"}, {"sha": "e765144ff0b48b268b6f5d2dc41e3532b1a3dc0f", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -7,19 +7,13 @@ LL | struct NoData<T>;\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n-  --> $DIR/issue-20413.rs:8:1\n+  --> $DIR/issue-20413.rs:8:36\n    |\n-LL |   trait Foo {\n-   |   --------- required by `Foo`\n+LL | trait Foo {\n+   | --------- required by `Foo`\n ...\n-LL | / impl<T> Foo for T where NoData<T>: Foo {\n-LL | |\n-LL | |   fn answer(self) {\n-LL | |\n-LL | |     let val: NoData<T> = NoData;\n-LL | |   }\n-LL | | }\n-   | |_^\n+LL | impl<T> Foo for T where NoData<T>: Foo {\n+   |                                    ^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate\n    = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n@@ -151,13 +145,13 @@ LL | | }\n    = note: required because of the requirements on the impl of `Foo` for `NoData<T>`\n \n error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n-  --> $DIR/issue-20413.rs:10:6\n+  --> $DIR/issue-20413.rs:8:36\n    |\n LL | trait Foo {\n    | --------- required by `Foo`\n ...\n-LL |   fn answer(self) {\n-   |      ^^^^^^\n+LL | impl<T> Foo for T where NoData<T>: Foo {\n+   |                                    ^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate\n    = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`"}, {"sha": "f7c659be148db43618ee67afd1d5ba3348414ff7", "filename": "src/test/ui/issues/issue-21974.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fissues%2Fissue-21974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fissues%2Fissue-21974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21974.rs?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -7,8 +7,8 @@ trait Foo {\n     fn foo(self);\n }\n \n-fn foo<'a,'b,T>(x: &'a T, y: &'b T) //~ ERROR type annotations needed\n-    where &'a T : Foo,\n+fn foo<'a,'b,T>(x: &'a T, y: &'b T)\n+    where &'a T : Foo, //~ ERROR type annotations needed\n           &'b T : Foo\n {\n     x.foo();"}, {"sha": "19823499066eb44699358bde582506017ca550e4", "filename": "src/test/ui/issues/issue-21974.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -1,11 +1,11 @@\n error[E0283]: type annotations needed\n-  --> $DIR/issue-21974.rs:10:4\n+  --> $DIR/issue-21974.rs:11:19\n    |\n LL | trait Foo {\n    | --------- required by `Foo`\n ...\n-LL | fn foo<'a,'b,T>(x: &'a T, y: &'b T)\n-   |    ^^^ cannot infer type for reference `&'a T`\n+LL |     where &'a T : Foo,\n+   |                   ^^^ cannot infer type for reference `&'a T`\n    |\n    = note: cannot resolve `&'a T: Foo`\n "}, {"sha": "2a714861da1fdb9ab49566d3fac3c0d79d8366bf", "filename": "src/test/ui/issues/issue-24204.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -1,11 +1,11 @@\n error[E0271]: type mismatch resolving `<<T as Trait>::A as MultiDispatch<i32>>::O == T`\n-  --> $DIR/issue-24204.rs:14:4\n+  --> $DIR/issue-24204.rs:14:12\n    |\n LL | trait Trait: Sized {\n    | ------------------ required by `Trait`\n ...\n LL | fn test<T: Trait<B=i32>>(b: i32) -> T where T::A: MultiDispatch<i32> { T::new(b) }\n-   |    ^^^^ expected type parameter `T`, found associated type\n+   |            ^^^^^^^^^^^^ expected type parameter `T`, found associated type\n    |\n    = note: expected type parameter `T`\n              found associated type `<<T as Trait>::A as MultiDispatch<i32>>::O`"}, {"sha": "538d44c3b2ef3b5efc34e7b8650802fad1cb0460", "filename": "src/test/ui/issues/issue-24424.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -1,11 +1,11 @@\n error[E0283]: type annotations needed\n-  --> $DIR/issue-24424.rs:4:1\n+  --> $DIR/issue-24424.rs:4:57\n    |\n LL | trait Trait0<'l0>  {}\n    | ----------------- required by `Trait0`\n LL | \n LL | impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : Trait0<'l1> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `T0`\n+   |                                                         ^^^^^^^^^^^ cannot infer type for type parameter `T0`\n    |\n    = note: cannot resolve `T0: Trait0<'l0>`\n "}, {"sha": "4e50064efb4ec5572fd31c934bd6742d47b1faa4", "filename": "src/test/ui/lifetimes/lifetime-doesnt-live-long-enough.stderr", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -13,69 +13,71 @@ LL |     foo: &'static T\n    |     ^^^^^^^^^^^^^^^\n \n error[E0309]: the parameter type `K` may not live long enough\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:24:8\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:24:19\n    |\n LL | trait X<K>: Sized {\n    |         - help: consider adding an explicit lifetime bound `K: 'a`...\n LL |     fn foo<'a, L: X<&'a Nested<K>>>();\n-   |        ^^^\n+   |                   ^^^^^^^^^^^^^^^^\n    |\n note: ...so that the reference type `&'a Nested<K>` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:24:8\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:24:19\n    |\n LL |     fn foo<'a, L: X<&'a Nested<K>>>();\n-   |        ^^^\n+   |                   ^^^^^^^^^^^^^^^^\n \n error[E0309]: the parameter type `Self` may not live long enough\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:28:8\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:28:19\n    |\n LL |     fn bar<'a, L: X<&'a Nested<Self>>>();\n-   |        ^^^\n+   |                   ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `Self: 'a`...\n note: ...so that the reference type `&'a Nested<Self>` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:28:8\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:28:19\n    |\n LL |     fn bar<'a, L: X<&'a Nested<Self>>>();\n-   |        ^^^\n+   |                   ^^^^^^^^^^^^^^^^^^^\n \n error[E0309]: the parameter type `L` may not live long enough\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:32:8\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:32:22\n    |\n LL |     fn baz<'a, L, M: X<&'a Nested<L>>>() {\n-   |        ^^^     - help: consider adding an explicit lifetime bound `L: 'a`...\n+   |                -     ^^^^^^^^^^^^^^^^\n+   |                |\n+   |                help: consider adding an explicit lifetime bound `L: 'a`...\n    |\n note: ...so that the reference type `&'a Nested<L>` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:32:8\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:32:22\n    |\n LL |     fn baz<'a, L, M: X<&'a Nested<L>>>() {\n-   |        ^^^\n+   |                      ^^^^^^^^^^^^^^^^\n \n error[E0309]: the parameter type `K` may not live long enough\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:41:8\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:41:33\n    |\n LL | impl<K> Nested<K> {\n    |      - help: consider adding an explicit lifetime bound `K: 'a`...\n LL |     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n-   |        ^^^^^^^^^^^^^^^^^\n+   |                                 ^^^^^^^^^^^^^^^^\n    |\n note: ...so that the reference type `&'a Nested<K>` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:41:8\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:41:33\n    |\n LL |     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n-   |        ^^^^^^^^^^^^^^^^^\n+   |                                 ^^^^^^^^^^^^^^^^\n \n error[E0309]: the parameter type `M` may not live long enough\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:44:8\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:44:36\n    |\n LL |     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n-   |        ^^^^^^^^^^^^^^^^                              -- help: consider adding an explicit lifetime bound `M: 'a`...\n+   |                                    ^^^^^^^^^^^^^^^^  -- help: consider adding an explicit lifetime bound `M: 'a`...\n    |\n note: ...so that the reference type `&'a Nested<M>` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:44:8\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:44:36\n    |\n LL |     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n-   |        ^^^^^^^^^^^^^^^^\n+   |                                    ^^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "5ab423d9e20772bd83f4fd92b358072ff3cc1ade", "filename": "src/test/ui/regions/regions-free-region-ordering-callee-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee-4.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -1,8 +1,8 @@\n error[E0491]: in type `&'a &'b usize`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-free-region-ordering-callee-4.rs:5:4\n+  --> $DIR/regions-free-region-ordering-callee-4.rs:5:68\n    |\n LL | fn ordering4<'a, 'b, F>(a: &'a usize, b: &'b usize, x: F) where F: FnOnce(&'a &'b usize) {\n-   |    ^^^^^^^^^\n+   |                                                                    ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'a` as defined on the function body at 5:14\n   --> $DIR/regions-free-region-ordering-callee-4.rs:5:14"}, {"sha": "31d974ed43d99fea902229b4329a2452278655ce", "filename": "src/test/ui/suggestions/missing-assoc-type-bound-restriction.stderr", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -1,20 +1,13 @@\n error[E0277]: the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n-  --> $DIR/missing-assoc-type-bound-restriction.rs:17:1\n+  --> $DIR/missing-assoc-type-bound-restriction.rs:17:19\n    |\n-LL |   trait Parent {\n-   |   ------------ required by `Parent`\n+LL | trait Parent {\n+   | ------------ required by `Parent`\n ...\n-LL |   impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n-   |   ^                                                     - help: consider further restricting the associated type: `where <T as Parent>::Assoc: Child<A>`\n-   |  _|\n-   | |\n-LL | |\n-LL | |     type Ty = A;\n-LL | |     type Assoc = ChildWrapper<T::Assoc>;\n-LL | |\n-LL | |\n-LL | | }\n-   | |_^ the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n+LL | impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n+   |                   ^^^^^^                              - help: consider further restricting the associated type: `where <T as Parent>::Assoc: Child<A>`\n+   |                   |\n+   |                   the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n \n error[E0277]: the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n   --> $DIR/missing-assoc-type-bound-restriction.rs:20:5"}, {"sha": "b71c0d719ff3fb11f41c89c118c6d742afd45d89", "filename": "src/test/ui/traits/trait-alias/trait-alias-wf.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -1,13 +1,12 @@\n error[E0277]: the trait bound `T: Foo` is not satisfied\n-  --> $DIR/trait-alias-wf.rs:5:1\n+  --> $DIR/trait-alias-wf.rs:5:14\n    |\n LL | trait A<T: Foo> {}\n    | --------------- required by `A`\n LL | trait B<T> = A<T>;\n-   | ^^^^^^^^-^^^^^^^^^\n-   | |       |\n-   | |       help: consider restricting this bound: `T: Foo`\n-   | the trait `Foo` is not implemented for `T`\n+   |         -    ^^^^ the trait `Foo` is not implemented for `T`\n+   |         |\n+   |         help: consider restricting this bound: `T: Foo`\n \n error: aborting due to previous error\n "}, {"sha": "e5d2ebda318585bda22665f33cd0e17e6aec3cae", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -47,15 +47,14 @@ LL | trait TraitBound<T:Copy=String> {}\n    | required by `TraitBound`\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/type-check-defaults.rs:21:1\n+  --> $DIR/type-check-defaults.rs:21:25\n    |\n LL | trait Super<T: Copy> { }\n    | -------------------- required by `Super`\n LL | trait Base<T = String>: Super<T> { }\n-   | ^^^^^^^^^^^-^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |          |\n-   | |          help: consider restricting this bound: `T: std::marker::Copy`\n-   | the trait `std::marker::Copy` is not implemented for `T`\n+   |            -            ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |            |\n+   |            help: consider restricting this bound: `T: std::marker::Copy`\n \n error[E0277]: cannot add `u8` to `i32`\n   --> $DIR/type-check-defaults.rs:24:66"}, {"sha": "5493a4e5f10a817d4f0eb924537a44ef8e6b2193", "filename": "src/test/ui/type/type-check/issue-40294.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.rs?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -2,8 +2,8 @@ trait Foo: Sized {\n     fn foo(self);\n }\n \n-fn foo<'a,'b,T>(x: &'a T, y: &'b T) //~ ERROR type annotations needed\n-    where &'a T : Foo,\n+fn foo<'a,'b,T>(x: &'a T, y: &'b T)\n+    where &'a T : Foo, //~ ERROR type annotations needed\n           &'b T : Foo\n {\n     x.foo();"}, {"sha": "2c889b6c2ca0ae97320a2302fe6729c1181f3675", "filename": "src/test/ui/type/type-check/issue-40294.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -1,11 +1,11 @@\n error[E0283]: type annotations needed\n-  --> $DIR/issue-40294.rs:5:4\n+  --> $DIR/issue-40294.rs:6:19\n    |\n LL | trait Foo: Sized {\n    | ---------------- required by `Foo`\n ...\n-LL | fn foo<'a,'b,T>(x: &'a T, y: &'b T)\n-   |    ^^^ cannot infer type for reference `&'a T`\n+LL |     where &'a T : Foo,\n+   |                   ^^^ cannot infer type for reference `&'a T`\n    |\n    = note: cannot resolve `&'a T: Foo`\n "}, {"sha": "042a2cb09d27b2a3cd980f8f53d60e2f3da73469", "filename": "src/test/ui/wf/wf-enum-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.rs?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -6,8 +6,8 @@\n \n trait ExtraCopy<T:Copy> { }\n \n-enum SomeEnum<T,U> //~ ERROR E0277\n-    where T: ExtraCopy<U>\n+enum SomeEnum<T,U>\n+    where T: ExtraCopy<U> //~ ERROR E0277\n {\n     SomeVariant(T,U)\n }"}, {"sha": "0d22d18bf6fd9e6fecb3d1deaf3005adce228064", "filename": "src/test/ui/wf/wf-enum-bound.stderr", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -1,16 +1,13 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-enum-bound.rs:9:1\n+  --> $DIR/wf-enum-bound.rs:10:14\n    |\n-LL |   trait ExtraCopy<T:Copy> { }\n-   |   ----------------------- required by `ExtraCopy`\n-LL | \n-LL | / enum SomeEnum<T,U>\n-LL | |     where T: ExtraCopy<U>\n-   | |                          - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n-LL | | {\n-LL | |     SomeVariant(T,U)\n-LL | | }\n-   | |_^ the trait `std::marker::Copy` is not implemented for `U`\n+LL | trait ExtraCopy<T:Copy> { }\n+   | ----------------------- required by `ExtraCopy`\n+...\n+LL |     where T: ExtraCopy<U>\n+   |              ^^^^^^^^^^^^- help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n+   |              |\n+   |              the trait `std::marker::Copy` is not implemented for `U`\n \n error: aborting due to previous error\n "}, {"sha": "3bef38d2fd2c3f791755e702a64f1a46dff31fda", "filename": "src/test/ui/wf/wf-fn-where-clause.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -1,29 +1,29 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-fn-where-clause.rs:8:4\n+  --> $DIR/wf-fn-where-clause.rs:8:24\n    |\n LL | trait ExtraCopy<T:Copy> { }\n    | ----------------------- required by `ExtraCopy`\n LL | \n LL | fn foo<T,U>() where T: ExtraCopy<U>\n-   |    ^^^                             - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n-   |    |\n-   |    the trait `std::marker::Copy` is not implemented for `U`\n+   |                        ^^^^^^^^^^^^- help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n+   |                        |\n+   |                        the trait `std::marker::Copy` is not implemented for `U`\n \n error[E0277]: the size for values of type `(dyn std::marker::Copy + 'static)` cannot be known at compilation time\n-  --> $DIR/wf-fn-where-clause.rs:12:4\n+  --> $DIR/wf-fn-where-clause.rs:12:16\n    |\n LL | fn bar() where Vec<dyn Copy>:, {}\n-   |    ^^^ doesn't have a size known at compile-time\n+   |                ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::marker::Copy + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::vec::Vec`\n \n error[E0038]: the trait `std::marker::Copy` cannot be made into an object\n-  --> $DIR/wf-fn-where-clause.rs:12:4\n+  --> $DIR/wf-fn-where-clause.rs:12:16\n    |\n LL | fn bar() where Vec<dyn Copy>:, {}\n-   |    ^^^ the trait `std::marker::Copy` cannot be made into an object\n+   |                ^^^^^^^^^^^^^ the trait `std::marker::Copy` cannot be made into an object\n    |\n    = note: the trait cannot require that `Self : Sized`\n "}, {"sha": "e55295a3b25785762186abf32bb22c7aa3638d62", "filename": "src/test/ui/wf/wf-in-fn-where-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.rs?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -6,8 +6,8 @@\n trait MustBeCopy<T:Copy> {\n }\n \n-fn bar<T,U>() //~ ERROR E0277\n-    where T: MustBeCopy<U>\n+fn bar<T,U>()\n+    where T: MustBeCopy<U> //~ ERROR E0277\n {\n }\n "}, {"sha": "495041b7dadf8ba5ea5124e1cbc1a4c5bc5bbe4d", "filename": "src/test/ui/wf/wf-in-fn-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -1,13 +1,13 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-in-fn-where-clause.rs:9:4\n+  --> $DIR/wf-in-fn-where-clause.rs:10:14\n    |\n LL | trait MustBeCopy<T:Copy> {\n    | ------------------------ required by `MustBeCopy`\n ...\n-LL | fn bar<T,U>()\n-   |    ^^^ the trait `std::marker::Copy` is not implemented for `U`\n LL |     where T: MustBeCopy<U>\n-   |                           - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n+   |              ^^^^^^^^^^^^^- help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n+   |              |\n+   |              the trait `std::marker::Copy` is not implemented for `U`\n \n error: aborting due to previous error\n "}, {"sha": "e9c1c8ddaf64033140c69c64ba152cd12643b742", "filename": "src/test/ui/wf/wf-inherent-impl-method-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -1,13 +1,13 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-inherent-impl-method-where-clause.rs:12:8\n+  --> $DIR/wf-inherent-impl-method-where-clause.rs:12:27\n    |\n LL | trait ExtraCopy<T:Copy> { }\n    | ----------------------- required by `ExtraCopy`\n ...\n LL | impl<T,U> Foo<T,U> {\n    |        - help: consider restricting this bound: `U: std::marker::Copy`\n LL |     fn foo(self) where T: ExtraCopy<U>\n-   |        ^^^ the trait `std::marker::Copy` is not implemented for `U`\n+   |                           ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`\n \n error: aborting due to previous error\n "}, {"sha": "a4e6dce39cdcd459a29e4784fc1a00020b991292", "filename": "src/test/ui/wf/wf-inherent-impl-where-clause.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -1,16 +1,13 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-inherent-impl-where-clause.rs:11:1\n+  --> $DIR/wf-inherent-impl-where-clause.rs:11:29\n    |\n-LL |   trait ExtraCopy<T:Copy> { }\n-   |   ----------------------- required by `ExtraCopy`\n+LL | trait ExtraCopy<T:Copy> { }\n+   | ----------------------- required by `ExtraCopy`\n ...\n-LL |   impl<T,U> Foo<T,U> where T: ExtraCopy<U>\n-   |   ^                                       - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n-   |  _|\n-   | |\n-LL | | {\n-LL | | }\n-   | |_^ the trait `std::marker::Copy` is not implemented for `U`\n+LL | impl<T,U> Foo<T,U> where T: ExtraCopy<U>\n+   |                             ^^^^^^^^^^^^- help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n+   |                             |\n+   |                             the trait `std::marker::Copy` is not implemented for `U`\n \n error: aborting due to previous error\n "}, {"sha": "6e558ca8ff0b0ce6eb98eb10a873d5ad6ec3a358", "filename": "src/test/ui/wf/wf-struct-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.rs?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -6,8 +6,8 @@\n \n trait ExtraCopy<T:Copy> { }\n \n-struct SomeStruct<T,U> //~ ERROR E0277\n-    where T: ExtraCopy<U>\n+struct SomeStruct<T,U>\n+    where T: ExtraCopy<U> //~ ERROR E0277\n {\n     data: (T,U)\n }"}, {"sha": "3f4047d9b5609066aba0f4407a093bd06308fa06", "filename": "src/test/ui/wf/wf-struct-bound.stderr", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -1,16 +1,13 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-struct-bound.rs:9:1\n+  --> $DIR/wf-struct-bound.rs:10:14\n    |\n-LL |   trait ExtraCopy<T:Copy> { }\n-   |   ----------------------- required by `ExtraCopy`\n-LL | \n-LL | / struct SomeStruct<T,U>\n-LL | |     where T: ExtraCopy<U>\n-   | |                          - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n-LL | | {\n-LL | |     data: (T,U)\n-LL | | }\n-   | |_^ the trait `std::marker::Copy` is not implemented for `U`\n+LL | trait ExtraCopy<T:Copy> { }\n+   | ----------------------- required by `ExtraCopy`\n+...\n+LL |     where T: ExtraCopy<U>\n+   |              ^^^^^^^^^^^^- help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n+   |              |\n+   |              the trait `std::marker::Copy` is not implemented for `U`\n \n error: aborting due to previous error\n "}, {"sha": "2f20e65e5021adcf7b9d3280ed18bd61b4c30b29", "filename": "src/test/ui/wf/wf-trait-associated-type-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.rs?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -6,8 +6,8 @@\n \n trait ExtraCopy<T:Copy> { }\n \n-trait SomeTrait<T> { //~ ERROR E0277\n-    type Type1: ExtraCopy<T>;\n+trait SomeTrait<T> {\n+    type Type1: ExtraCopy<T>; //~ ERROR E0277\n }\n \n "}, {"sha": "3370cfc86939dd19014a14f16c78964ab9f44f2d", "filename": "src/test/ui/wf/wf-trait-associated-type-bound.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -1,16 +1,13 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-trait-associated-type-bound.rs:9:1\n+  --> $DIR/wf-trait-associated-type-bound.rs:10:17\n    |\n-LL |   trait ExtraCopy<T:Copy> { }\n-   |   ----------------------- required by `ExtraCopy`\n+LL | trait ExtraCopy<T:Copy> { }\n+   | ----------------------- required by `ExtraCopy`\n LL | \n-LL |   trait SomeTrait<T> {\n-   |   ^               - help: consider restricting this bound: `T: std::marker::Copy`\n-   |  _|\n-   | |\n-LL | |     type Type1: ExtraCopy<T>;\n-LL | | }\n-   | |_^ the trait `std::marker::Copy` is not implemented for `T`\n+LL | trait SomeTrait<T> {\n+   |                 - help: consider restricting this bound: `T: std::marker::Copy`\n+LL |     type Type1: ExtraCopy<T>;\n+   |                 ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n \n error: aborting due to previous error\n "}, {"sha": "62a1eb5b08864988306144a6ac908c0efdc0c77b", "filename": "src/test/ui/wf/wf-trait-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.rs?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -6,8 +6,8 @@\n \n trait ExtraCopy<T:Copy> { }\n \n-trait SomeTrait<T,U> //~ ERROR E0277\n-    where T: ExtraCopy<U>\n+trait SomeTrait<T,U>\n+    where T: ExtraCopy<U> //~ ERROR E0277\n {\n }\n "}, {"sha": "87c33714ff879c052e7a57435f9821a0fd593ae2", "filename": "src/test/ui/wf/wf-trait-bound.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-trait-bound.rs:9:1\n+  --> $DIR/wf-trait-bound.rs:10:14\n    |\n-LL |   trait ExtraCopy<T:Copy> { }\n-   |   ----------------------- required by `ExtraCopy`\n-LL | \n-LL | / trait SomeTrait<T,U>\n-LL | |     where T: ExtraCopy<U>\n-   | |                          - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n-LL | | {\n-LL | | }\n-   | |_^ the trait `std::marker::Copy` is not implemented for `U`\n+LL | trait ExtraCopy<T:Copy> { }\n+   | ----------------------- required by `ExtraCopy`\n+...\n+LL |     where T: ExtraCopy<U>\n+   |              ^^^^^^^^^^^^- help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n+   |              |\n+   |              the trait `std::marker::Copy` is not implemented for `U`\n \n error: aborting due to previous error\n "}, {"sha": "6b63feaba89a3c58c8c0b06c4575d745c8d295dd", "filename": "src/test/ui/wf/wf-trait-default-fn-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -1,13 +1,13 @@\n error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n-  --> $DIR/wf-trait-default-fn-where-clause.rs:11:8\n+  --> $DIR/wf-trait-default-fn-where-clause.rs:11:31\n    |\n LL | trait Bar<T:Eq+?Sized> { }\n    | ---------------------- required by `Bar`\n ...\n LL |     fn bar<A>(&self) where A: Bar<Self> {\n-   |        ^^^                             - help: consider further restricting `Self`: `, Self: std::cmp::Eq`\n-   |        |\n-   |        the trait `std::cmp::Eq` is not implemented for `Self`\n+   |                               ^^^^^^^^^- help: consider further restricting `Self`: `, Self: std::cmp::Eq`\n+   |                               |\n+   |                               the trait `std::cmp::Eq` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "ec8f02c9c4feda7561a126255288ac063bbf48cf", "filename": "src/test/ui/wf/wf-trait-fn-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -1,13 +1,13 @@\n error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n-  --> $DIR/wf-trait-fn-where-clause.rs:10:8\n+  --> $DIR/wf-trait-fn-where-clause.rs:10:49\n    |\n LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n    | ----------------------- required by `Bar`\n ...\n LL |     fn bar(&self) where Self: Sized, Bar<Self>: Copy;\n-   |        ^^^                                          - help: consider further restricting `Self`: `, Self: std::cmp::Eq`\n-   |        |\n-   |        the trait `std::cmp::Eq` is not implemented for `Self`\n+   |                                                 ^^^^- help: consider further restricting `Self`: `, Self: std::cmp::Eq`\n+   |                                                 |\n+   |                                                 the trait `std::cmp::Eq` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "9ea9d046b260265b97186ce592497fe0bcab5a23", "filename": "src/test/ui/wf/wf-trait-superbound.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6870f79e9c06c6e3a80654a07301e23c705e1408/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr?ref=6870f79e9c06c6e3a80654a07301e23c705e1408", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-trait-superbound.rs:9:1\n+  --> $DIR/wf-trait-superbound.rs:9:21\n    |\n-LL |   trait ExtraCopy<T:Copy> { }\n-   |   ----------------------- required by `ExtraCopy`\n+LL | trait ExtraCopy<T:Copy> { }\n+   | ----------------------- required by `ExtraCopy`\n LL | \n-LL |   trait SomeTrait<T>: ExtraCopy<T> {\n-   |   ^               - help: consider restricting this bound: `T: std::marker::Copy`\n-   |  _|\n-   | |\n-LL | | }\n-   | |_^ the trait `std::marker::Copy` is not implemented for `T`\n+LL | trait SomeTrait<T>: ExtraCopy<T> {\n+   |                 -   ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |                 |\n+   |                 help: consider restricting this bound: `T: std::marker::Copy`\n \n error: aborting due to previous error\n "}]}