{"sha": "be18a9bf75f6c92ee734838fd3eca9257556cf40", "node_id": "C_kwDOAAsO6NoAKGJlMThhOWJmNzVmNmM5MmVlNzM0ODM4ZmQzZWNhOTI1NzU1NmNmNDA", "commit": {"author": {"name": "nidnogg", "email": "henriquevt98@gmail.com", "date": "2022-08-16T22:02:51Z"}, "committer": {"name": "nidnogg", "email": "henriquevt98@gmail.com", "date": "2022-08-16T22:02:51Z"}, "message": "Migrated more diagnostics under transcribe.rs", "tree": {"sha": "8366748592987abdc08a76d33e7df29fab99bd0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8366748592987abdc08a76d33e7df29fab99bd0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be18a9bf75f6c92ee734838fd3eca9257556cf40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be18a9bf75f6c92ee734838fd3eca9257556cf40", "html_url": "https://github.com/rust-lang/rust/commit/be18a9bf75f6c92ee734838fd3eca9257556cf40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be18a9bf75f6c92ee734838fd3eca9257556cf40/comments", "author": {"login": "nidnogg", "id": 17261185, "node_id": "MDQ6VXNlcjE3MjYxMTg1", "avatar_url": "https://avatars.githubusercontent.com/u/17261185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nidnogg", "html_url": "https://github.com/nidnogg", "followers_url": "https://api.github.com/users/nidnogg/followers", "following_url": "https://api.github.com/users/nidnogg/following{/other_user}", "gists_url": "https://api.github.com/users/nidnogg/gists{/gist_id}", "starred_url": "https://api.github.com/users/nidnogg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nidnogg/subscriptions", "organizations_url": "https://api.github.com/users/nidnogg/orgs", "repos_url": "https://api.github.com/users/nidnogg/repos", "events_url": "https://api.github.com/users/nidnogg/events{/privacy}", "received_events_url": "https://api.github.com/users/nidnogg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nidnogg", "id": 17261185, "node_id": "MDQ6VXNlcjE3MjYxMTg1", "avatar_url": "https://avatars.githubusercontent.com/u/17261185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nidnogg", "html_url": "https://github.com/nidnogg", "followers_url": "https://api.github.com/users/nidnogg/followers", "following_url": "https://api.github.com/users/nidnogg/following{/other_user}", "gists_url": "https://api.github.com/users/nidnogg/gists{/gist_id}", "starred_url": "https://api.github.com/users/nidnogg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nidnogg/subscriptions", "organizations_url": "https://api.github.com/users/nidnogg/orgs", "repos_url": "https://api.github.com/users/nidnogg/repos", "events_url": "https://api.github.com/users/nidnogg/events{/privacy}", "received_events_url": "https://api.github.com/users/nidnogg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e15fbab75ab919238ec86011fd54cba7ad78e68", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e15fbab75ab919238ec86011fd54cba7ad78e68", "html_url": "https://github.com/rust-lang/rust/commit/7e15fbab75ab919238ec86011fd54cba7ad78e68"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "b25aaaa0e5175db9ca7ba7452d97bde034bcfca0", "filename": "compiler/rustc_error_messages/locales/en-US/expand.ftl", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be18a9bf75f6c92ee734838fd3eca9257556cf40/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/be18a9bf75f6c92ee734838fd3eca9257556cf40/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl?ref=be18a9bf75f6c92ee734838fd3eca9257556cf40", "patch": "@@ -6,3 +6,9 @@ expand_explain_doc_comment_inner =\n \n expand_expr_repeat_no_syntax_vars = \n     attempted to repeat an expression containing no syntax variables matched as repeating at this depth\n+\n+expand_must_repeat_once = \n+    this must repeat at least once\n+\n+count_repetition_misplaced =\n+    `count` can not be placed inside the inner-most repetition\n\\ No newline at end of file"}, {"sha": "4c8f7a59bbac27b44e44dd5823ced121aeb6c8e0", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/be18a9bf75f6c92ee734838fd3eca9257556cf40/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be18a9bf75f6c92ee734838fd3eca9257556cf40/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=be18a9bf75f6c92ee734838fd3eca9257556cf40", "patch": "@@ -7,9 +7,9 @@ use rustc_ast::tokenstream::{DelimSpan, Spacing, TokenStream, TokenTree};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, PResult};\n use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_macros::SessionDiagnostic;\n use rustc_span::hygiene::{LocalExpnId, Transparency};\n use rustc_span::symbol::{sym, Ident, MacroRulesNormalizedIdent};\n-use rustc_macros::SessionDiagnostic;\n use rustc_span::Span;\n \n use smallvec::{smallvec, SmallVec};\n@@ -61,6 +61,13 @@ struct NoSyntaxVarsExprRepeat {\n     span: Span,\n }\n \n+#[derive(SessionDiagnostic)]\n+#[error(expand::must_repeat_once)]\n+struct MustRepeatOnce {\n+    #[primary_span]\n+    span: Span,\n+}\n+\n /// This can do Macro-By-Example transcription.\n /// - `interp` is a map of meta-variables to the tokens (non-terminals) they matched in the\n ///   invocation. We are assuming we already know there is a match.\n@@ -197,10 +204,7 @@ pub(super) fn transcribe<'a>(\n                                 // FIXME: this really ought to be caught at macro definition\n                                 // time... It happens when the Kleene operator in the matcher and\n                                 // the body for the same meta-variable do not match.\n-                                return Err(cx.struct_span_err(\n-                                    sp.entire(),\n-                                    \"this must repeat at least once\",\n-                                ));\n+                                return Err(cx.create_err(MustRepeatOnce { span: sp.entire() }));\n                             }\n                         } else {\n                             // 0 is the initial counter (we have done 0 repetitions so far). `len`\n@@ -424,6 +428,13 @@ fn lockstep_iter_size(\n     }\n }\n \n+#[derive(SessionDiagnostic)]\n+#[error(expand::count_repetition_misplaced)]\n+struct CountRepetitionMisplaced {\n+    #[primary_span]\n+    span: Span,\n+}\n+\n /// Used solely by the `count` meta-variable expression, counts the outer-most repetitions at a\n /// given optional nested depth.\n ///\n@@ -452,10 +463,7 @@ fn count_repetitions<'a>(\n         match matched {\n             MatchedTokenTree(_) | MatchedNonterminal(_) => {\n                 if declared_lhs_depth == 0 {\n-                    return Err(cx.struct_span_err(\n-                        sp.entire(),\n-                        \"`count` can not be placed inside the inner-most repetition\",\n-                    ));\n+                    return Err(cx.create_err( CountRepetitionMisplaced { span: sp.entire()} ));\n                 }\n                 match depth_opt {\n                     None => Ok(1),"}]}