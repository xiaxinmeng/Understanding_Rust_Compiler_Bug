{"sha": "f54c47d34b0d8c898529c479a270ab034ce36f78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NGM0N2QzNGIwZDhjODk4NTI5YzQ3OWEyNzBhYjAzNGNlMzZmNzg=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-19T06:17:00Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-09-05T04:26:41Z"}, "message": "Move check_expr match block into its own method", "tree": {"sha": "24b530331640cd50034fcda64188d1dd9c1bdd77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24b530331640cd50034fcda64188d1dd9c1bdd77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f54c47d34b0d8c898529c479a270ab034ce36f78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f54c47d34b0d8c898529c479a270ab034ce36f78", "html_url": "https://github.com/rust-lang/rust/commit/f54c47d34b0d8c898529c479a270ab034ce36f78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f54c47d34b0d8c898529c479a270ab034ce36f78/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f120c71775994e4fb94941cbc5539f6d5ffddced", "url": "https://api.github.com/repos/rust-lang/rust/commits/f120c71775994e4fb94941cbc5539f6d5ffddced", "html_url": "https://github.com/rust-lang/rust/commit/f120c71775994e4fb94941cbc5539f6d5ffddced"}], "stats": {"total": 45, "additions": 26, "deletions": 19}, "files": [{"sha": "3fbfd2aedb46690eb58228e74fb3dabca3b4e8ac", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f54c47d34b0d8c898529c479a270ab034ce36f78/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54c47d34b0d8c898529c479a270ab034ce36f78/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f54c47d34b0d8c898529c479a270ab034ce36f78", "patch": "@@ -3291,10 +3291,35 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                    lvalue_pref: LvaluePreference) -> Ty<'tcx> {\n         debug!(\">> typechecking: expr={:?} expected={:?}\",\n                expr, expected);\n+        let ty = self.check_expr_kind(expr, expected, lvalue_pref);\n \n+        self.write_ty(expr.id, ty);\n+\n+        debug!(\"type of expr({}) {} is...\", expr.id,\n+               pprust::expr_to_string(expr));\n+        debug!(\"... {:?}, expected is {:?}\",\n+               ty,\n+               expected);\n+\n+        // Add adjustments to !-expressions\n+        if ty.is_never() {\n+            if let Some(hir::map::NodeExpr(_)) = self.tcx.map.find(expr.id) {\n+                let adj_ty = self.next_diverging_ty_var();\n+                let adj = adjustment::AdjustNeverToAny(adj_ty);\n+                self.write_adjustment(expr.id, adj);\n+                return adj_ty;\n+            }\n+        }\n+        ty\n+    }\n+\n+    fn check_expr_kind(&self,\n+                       expr: &'gcx hir::Expr,\n+                       expected: Expectation<'tcx>,\n+                       lvalue_pref: LvaluePreference) -> Ty<'tcx> {\n         let tcx = self.tcx;\n         let id = expr.id;\n-        let ty = match expr.node {\n+        match expr.node {\n           hir::ExprBox(ref subexpr) => {\n             let expected_inner = expected.to_option(self).map_or(NoExpectation, |ty| {\n                 match ty.sty {\n@@ -3723,25 +3748,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                   }\n               }\n            }\n-        };\n-        self.write_ty(id, ty);\n-\n-        debug!(\"type of expr({}) {} is...\", expr.id,\n-               pprust::expr_to_string(expr));\n-        debug!(\"... {:?}, expected is {:?}\",\n-               ty,\n-               expected);\n-\n-        // Add adjustments to !-expressions\n-        if ty.is_never() {\n-            if let Some(hir::map::NodeExpr(_)) = self.tcx.map.find(id) {\n-                let adj_ty = self.next_diverging_ty_var();\n-                let adj = adjustment::AdjustNeverToAny(adj_ty);\n-                self.write_adjustment(id, adj);\n-                return adj_ty;\n-            }\n         }\n-        ty\n     }\n \n     // Finish resolving a path in a struct expression or pattern `S::A { .. }` if necessary."}]}