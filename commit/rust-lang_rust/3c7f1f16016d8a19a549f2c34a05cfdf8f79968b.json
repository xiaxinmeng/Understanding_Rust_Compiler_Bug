{"sha": "3c7f1f16016d8a19a549f2c34a05cfdf8f79968b", "node_id": "C_kwDOAAsO6NoAKDNjN2YxZjE2MDE2ZDhhMTlhNTQ5ZjJjMzRhMDVjZmRmOGY3OTk2OGI", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-06-23T16:33:40Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-06-23T17:16:32Z"}, "message": "Suggest defining variable as mutable on `&mut _` type mismatch in pats", "tree": {"sha": "a53e1e1ef9d6aecbbd6c93f9ad45eab4546ac49f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a53e1e1ef9d6aecbbd6c93f9ad45eab4546ac49f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c7f1f16016d8a19a549f2c34a05cfdf8f79968b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c7f1f16016d8a19a549f2c34a05cfdf8f79968b", "html_url": "https://github.com/rust-lang/rust/commit/3c7f1f16016d8a19a549f2c34a05cfdf8f79968b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c7f1f16016d8a19a549f2c34a05cfdf8f79968b/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10f4ce324baf7cfb7ce2b2096662b82b79204944", "url": "https://api.github.com/repos/rust-lang/rust/commits/10f4ce324baf7cfb7ce2b2096662b82b79204944", "html_url": "https://github.com/rust-lang/rust/commit/10f4ce324baf7cfb7ce2b2096662b82b79204944"}], "stats": {"total": 174, "additions": 173, "deletions": 1}, "files": [{"sha": "58fd11200c901d1344d1a2ad95a2b28fb5772951", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3c7f1f16016d8a19a549f2c34a05cfdf8f79968b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7f1f16016d8a19a549f2c34a05cfdf8f79968b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=3c7f1f16016d8a19a549f2c34a05cfdf8f79968b", "patch": "@@ -663,6 +663,46 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ast::Mutability::Not => \"\",\n             };\n \n+            let mut_var_suggestion = 'block: {\n+                if !matches!(mutbl, ast::Mutability::Mut) {\n+                    break 'block None;\n+                }\n+\n+                let ident_kind = match binding_parent {\n+                    hir::Node::Param(_) => Some(\"parameter\"),\n+                    hir::Node::Local(_) => Some(\"variable\"),\n+                    hir::Node::Arm(_) => Some(\"binding\"),\n+\n+                    // Provide diagnostics only if the parent pattern is struct-like,\n+                    // i.e. where `mut binding` makes sense\n+                    hir::Node::Pat(Pat { kind, .. }) => match kind {\n+                        PatKind::Struct(..)\n+                        | PatKind::TupleStruct(..)\n+                        | PatKind::Or(..)\n+                        | PatKind::Tuple(..)\n+                        | PatKind::Slice(..) => Some(\"binding\"),\n+\n+                        PatKind::Wild\n+                        | PatKind::Binding(..)\n+                        | PatKind::Path(..)\n+                        | PatKind::Box(..)\n+                        | PatKind::Ref(..)\n+                        | PatKind::Lit(..)\n+                        | PatKind::Range(..) => None,\n+                    },\n+\n+                    // Don't provide suggestions in other cases\n+                    _ => None,\n+                };\n+\n+                ident_kind.map(|thing| (\n+                    pat.span,\n+                    format!(\"to declare a mutable {thing} use `mut variable_name`\"),\n+                    format!(\"mut {binding}\"),\n+                ))\n+\n+            };\n+\n             match binding_parent {\n                 // Check that there is explicit type (ie this is not a closure param with inferred type)\n                 // so we don't suggest moving something to the type that does not exist\n@@ -675,6 +715,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         ],\n                         Applicability::MachineApplicable\n                     );\n+\n+                    if let Some((sp, msg, sugg)) = mut_var_suggestion {\n+                        err.span_note(sp, format!(\"{msg}: `{sugg}`\"));\n+                    }\n                 }\n                 hir::Node::Param(_) | hir::Node::Arm(_) | hir::Node::Pat(_) => {\n                     // rely on match ergonomics or it might be nested `&&pat`\n@@ -684,6 +728,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         \"\",\n                         Applicability::MaybeIncorrect,\n                     );\n+\n+                    if let Some((sp, msg, sugg)) = mut_var_suggestion {\n+                        err.span_note(sp, format!(\"{msg}: `{sugg}`\"));\n+                    }\n+                }\n+                _ if let Some((sp, msg, sugg)) = mut_var_suggestion => {\n+                    err.span_suggestion(sp, msg, sugg, Applicability::MachineApplicable);\n                 }\n                 _ => {} // don't provide suggestions in other cases #55175\n             }"}, {"sha": "d50acd1ac62d2d523e0ca991d0b018a43df4ef42", "filename": "src/test/ui/mismatched_types/ref-pat-suggestions.fixed", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3c7f1f16016d8a19a549f2c34a05cfdf8f79968b/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3c7f1f16016d8a19a549f2c34a05cfdf8f79968b/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.fixed?ref=3c7f1f16016d8a19a549f2c34a05cfdf8f79968b", "patch": "@@ -21,4 +21,17 @@ fn main() {\n     let _ = |&mut _a: &mut u32| (); //~ ERROR mismatched types\n     let _ = |&_a: &u32| (); //~ ERROR mismatched types\n     let _ = |&mut _a: &mut u32| (); //~ ERROR mismatched types\n+\n+    #[allow(unused_mut)]\n+    {\n+        struct S(u8);\n+\n+        let mut _a = 0; //~ ERROR mismatched types\n+        let S(_b) = S(0); //~ ERROR mismatched types\n+        let (_c,) = (0,); //~ ERROR mismatched types\n+\n+        match 0 {\n+            _d => {} //~ ERROR mismatched types\n+        }\n+    }\n }"}, {"sha": "1a77f687692242c03684531315b8a8184916dde3", "filename": "src/test/ui/mismatched_types/ref-pat-suggestions.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3c7f1f16016d8a19a549f2c34a05cfdf8f79968b/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7f1f16016d8a19a549f2c34a05cfdf8f79968b/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.rs?ref=3c7f1f16016d8a19a549f2c34a05cfdf8f79968b", "patch": "@@ -21,4 +21,17 @@ fn main() {\n     let _ = |&mut &_a: &mut u32| (); //~ ERROR mismatched types\n     let _ = |&&mut _a: &u32| (); //~ ERROR mismatched types\n     let _ = |&mut &mut _a: &mut u32| (); //~ ERROR mismatched types\n+\n+    #[allow(unused_mut)]\n+    {\n+        struct S(u8);\n+\n+        let &mut _a = 0; //~ ERROR mismatched types\n+        let S(&mut _b) = S(0); //~ ERROR mismatched types\n+        let (&mut _c,) = (0,); //~ ERROR mismatched types\n+\n+        match 0 {\n+            &mut _d => {} //~ ERROR mismatched types\n+        }\n+    }\n }"}, {"sha": "cd86bb532abda30eca3ee2d069e4dea7067d3d7c", "filename": "src/test/ui/mismatched_types/ref-pat-suggestions.stderr", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/3c7f1f16016d8a19a549f2c34a05cfdf8f79968b/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c7f1f16016d8a19a549f2c34a05cfdf8f79968b/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr?ref=3c7f1f16016d8a19a549f2c34a05cfdf8f79968b", "patch": "@@ -24,6 +24,11 @@ LL | fn _f1(&mut _a: u32) {}\n    |\n    = note:           expected type `u32`\n            found mutable reference `&mut _`\n+note: to declare a mutable parameter use `mut variable_name`: `mut _a`\n+  --> $DIR/ref-pat-suggestions.rs:4:8\n+   |\n+LL | fn _f1(&mut _a: u32) {}\n+   |        ^^^^^^^\n help: to take parameter `_a` by reference, move `&mut` to the type\n    |\n LL - fn _f1(&mut _a: u32) {}\n@@ -122,6 +127,11 @@ LL |     let _: fn(u32) = |&mut _a| ();\n    |\n    = note:           expected type `u32`\n            found mutable reference `&mut _`\n+note: to declare a mutable parameter use `mut variable_name`: `mut _a`\n+  --> $DIR/ref-pat-suggestions.rs:12:23\n+   |\n+LL |     let _: fn(u32) = |&mut _a| ();\n+   |                       ^^^^^^^\n help: consider removing `&mut` from the pattern\n    |\n LL -     let _: fn(u32) = |&mut _a| ();\n@@ -222,6 +232,11 @@ LL |     let _ = |&mut _a: u32| ();\n    |\n    = note:           expected type `u32`\n            found mutable reference `&mut _`\n+note: to declare a mutable parameter use `mut variable_name`: `mut _a`\n+  --> $DIR/ref-pat-suggestions.rs:19:14\n+   |\n+LL |     let _ = |&mut _a: u32| ();\n+   |              ^^^^^^^\n help: to take parameter `_a` by reference, move `&mut` to the type\n    |\n LL -     let _ = |&mut _a: u32| ();\n@@ -292,6 +307,81 @@ LL -     let _ = |&mut &mut _a: &mut u32| ();\n LL +     let _ = |&mut _a: &mut u32| ();\n    |\n \n-error: aborting due to 18 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:29:13\n+   |\n+LL |         let &mut _a = 0;\n+   |             ^^^^^^^   - this expression has type `{integer}`\n+   |             |\n+   |             expected integer, found `&mut _`\n+   |             help: to declare a mutable variable use `mut variable_name`: `mut _a`\n+   |\n+   = note:           expected type `{integer}`\n+           found mutable reference `&mut _`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:30:15\n+   |\n+LL |         let S(&mut _b) = S(0);\n+   |               ^^^^^^^    ---- this expression has type `S`\n+   |               |\n+   |               expected `u8`, found `&mut _`\n+   |\n+   = note:           expected type `u8`\n+           found mutable reference `&mut _`\n+note: to declare a mutable binding use `mut variable_name`: `mut _b`\n+  --> $DIR/ref-pat-suggestions.rs:30:15\n+   |\n+LL |         let S(&mut _b) = S(0);\n+   |               ^^^^^^^\n+help: consider removing `&mut` from the pattern\n+   |\n+LL -         let S(&mut _b) = S(0);\n+LL +         let S(_b) = S(0);\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:31:14\n+   |\n+LL |         let (&mut _c,) = (0,);\n+   |              ^^^^^^^     ---- this expression has type `({integer},)`\n+   |              |\n+   |              expected integer, found `&mut _`\n+   |\n+   = note:           expected type `{integer}`\n+           found mutable reference `&mut _`\n+note: to declare a mutable binding use `mut variable_name`: `mut _c`\n+  --> $DIR/ref-pat-suggestions.rs:31:14\n+   |\n+LL |         let (&mut _c,) = (0,);\n+   |              ^^^^^^^\n+help: consider removing `&mut` from the pattern\n+   |\n+LL -         let (&mut _c,) = (0,);\n+LL +         let (_c,) = (0,);\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:34:13\n+   |\n+LL |         match 0 {\n+   |               - this expression has type `{integer}`\n+LL |             &mut _d => {}\n+   |             ^^^^^^^ expected integer, found `&mut _`\n+   |\n+   = note:           expected type `{integer}`\n+           found mutable reference `&mut _`\n+note: to declare a mutable binding use `mut variable_name`: `mut _d`\n+  --> $DIR/ref-pat-suggestions.rs:34:13\n+   |\n+LL |             &mut _d => {}\n+   |             ^^^^^^^\n+help: consider removing `&mut` from the pattern\n+   |\n+LL -             &mut _d => {}\n+LL +             _d => {}\n+   |\n+\n+error: aborting due to 22 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "212d66f649763e0d0c9e751b512d23b203e76368", "filename": "src/test/ui/pattern/for-loop-bad-item.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c7f1f16016d8a19a549f2c34a05cfdf8f79968b/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c7f1f16016d8a19a549f2c34a05cfdf8f79968b/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr?ref=3c7f1f16016d8a19a549f2c34a05cfdf8f79968b", "patch": "@@ -8,6 +8,11 @@ LL |     for ((_, _), (&mut c, _)) in &mut map {\n    |\n    = note:           expected type `char`\n            found mutable reference `&mut _`\n+note: to declare a mutable binding use `mut variable_name`: `mut c`\n+  --> $DIR/for-loop-bad-item.rs:7:19\n+   |\n+LL |     for ((_, _), (&mut c, _)) in &mut map {\n+   |                   ^^^^^^\n help: consider removing `&mut` from the pattern\n    |\n LL -     for ((_, _), (&mut c, _)) in &mut map {"}]}