{"sha": "944a3e22ef39cd9640995331e3ab6d373d1241c8", "node_id": "C_kwDOAAsO6NoAKDk0NGEzZTIyZWYzOWNkOTY0MDk5NTMzMWUzYWI2ZDM3M2QxMjQxYzg", "commit": {"author": {"name": "Hampus Lidin", "email": "hampuslidin@gmail.com", "date": "2022-08-21T19:52:15Z"}, "committer": {"name": "Hampus Lidin", "email": "hampuslidin@gmail.com", "date": "2022-08-22T18:19:19Z"}, "message": "Change to `diag` attributes", "tree": {"sha": "15089447bf765d799c8daea6bc038d5a8aecd3c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15089447bf765d799c8daea6bc038d5a8aecd3c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/944a3e22ef39cd9640995331e3ab6d373d1241c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/944a3e22ef39cd9640995331e3ab6d373d1241c8", "html_url": "https://github.com/rust-lang/rust/commit/944a3e22ef39cd9640995331e3ab6d373d1241c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/944a3e22ef39cd9640995331e3ab6d373d1241c8/comments", "author": {"login": "hampuslidin", "id": 9679284, "node_id": "MDQ6VXNlcjk2NzkyODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9679284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hampuslidin", "html_url": "https://github.com/hampuslidin", "followers_url": "https://api.github.com/users/hampuslidin/followers", "following_url": "https://api.github.com/users/hampuslidin/following{/other_user}", "gists_url": "https://api.github.com/users/hampuslidin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hampuslidin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hampuslidin/subscriptions", "organizations_url": "https://api.github.com/users/hampuslidin/orgs", "repos_url": "https://api.github.com/users/hampuslidin/repos", "events_url": "https://api.github.com/users/hampuslidin/events{/privacy}", "received_events_url": "https://api.github.com/users/hampuslidin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hampuslidin", "id": 9679284, "node_id": "MDQ6VXNlcjk2NzkyODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9679284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hampuslidin", "html_url": "https://github.com/hampuslidin", "followers_url": "https://api.github.com/users/hampuslidin/followers", "following_url": "https://api.github.com/users/hampuslidin/following{/other_user}", "gists_url": "https://api.github.com/users/hampuslidin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hampuslidin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hampuslidin/subscriptions", "organizations_url": "https://api.github.com/users/hampuslidin/orgs", "repos_url": "https://api.github.com/users/hampuslidin/repos", "events_url": "https://api.github.com/users/hampuslidin/events{/privacy}", "received_events_url": "https://api.github.com/users/hampuslidin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c28006bf6f6e0f989c725c74c1ee7d14cd62b81", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c28006bf6f6e0f989c725c74c1ee7d14cd62b81", "html_url": "https://github.com/rust-lang/rust/commit/1c28006bf6f6e0f989c725c74c1ee7d14cd62b81"}], "stats": {"total": 59, "additions": 30, "deletions": 29}, "files": [{"sha": "34e9815609109453d8da500ea6f5a99a18d27003", "filename": "compiler/rustc_attr/src/session_diagnostics.rs", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/944a3e22ef39cd9640995331e3ab6d373d1241c8/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944a3e22ef39cd9640995331e3ab6d373d1241c8/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs?ref=944a3e22ef39cd9640995331e3ab6d373d1241c8", "patch": "@@ -8,14 +8,14 @@ use rustc_span::{Span, Symbol};\n use crate::UnsupportedLiteralReason;\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::expected_one_cfg_pattern, code = \"E0536\")]\n+#[diag(attr::expected_one_cfg_pattern, code = \"E0536\")]\n pub(crate) struct ExpectedOneCfgPattern {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::invalid_predicate, code = \"E0537\")]\n+#[diag(attr::invalid_predicate, code = \"E0537\")]\n pub(crate) struct InvalidPredicate {\n     #[primary_span]\n     pub span: Span,\n@@ -24,7 +24,7 @@ pub(crate) struct InvalidPredicate {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::multiple_item, code = \"E0538\")]\n+#[diag(attr::multiple_item, code = \"E0538\")]\n pub(crate) struct MultipleItem {\n     #[primary_span]\n     pub span: Span,\n@@ -33,7 +33,7 @@ pub(crate) struct MultipleItem {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::incorrect_meta_item, code = \"E0539\")]\n+#[diag(attr::incorrect_meta_item, code = \"E0539\")]\n pub(crate) struct IncorrectMetaItem {\n     #[primary_span]\n     pub span: Span,\n@@ -63,28 +63,28 @@ impl<'a> SessionDiagnostic<'a> for UnknownMetaItem<'_> {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::missing_since, code = \"E0542\")]\n+#[diag(attr::missing_since, code = \"E0542\")]\n pub(crate) struct MissingSince {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::missing_note, code = \"E0543\")]\n+#[diag(attr::missing_note, code = \"E0543\")]\n pub(crate) struct MissingNote {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::multiple_stability_levels, code = \"E0544\")]\n+#[diag(attr::multiple_stability_levels, code = \"E0544\")]\n pub(crate) struct MultipleStabilityLevels {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::invalid_issue_string, code = \"E0545\")]\n+#[diag(attr::invalid_issue_string, code = \"E0545\")]\n pub(crate) struct InvalidIssueString {\n     #[primary_span]\n     pub span: Span,\n@@ -142,21 +142,21 @@ impl InvalidIssueStringCause {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::missing_feature, code = \"E0546\")]\n+#[diag(attr::missing_feature, code = \"E0546\")]\n pub(crate) struct MissingFeature {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::non_ident_feature, code = \"E0546\")]\n+#[diag(attr::non_ident_feature, code = \"E0546\")]\n pub(crate) struct NonIdentFeature {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::missing_issue, code = \"E0547\")]\n+#[diag(attr::missing_issue, code = \"E0547\")]\n pub(crate) struct MissingIssue {\n     #[primary_span]\n     pub span: Span,\n@@ -165,7 +165,7 @@ pub(crate) struct MissingIssue {\n // FIXME: This diagnostic is identical to `IncorrectMetaItem`, barring the error code. Consider\n // changing this to `IncorrectMetaItem`. See #51489.\n #[derive(SessionDiagnostic)]\n-#[error(attr::incorrect_meta_item, code = \"E0551\")]\n+#[diag(attr::incorrect_meta_item, code = \"E0551\")]\n pub(crate) struct IncorrectMetaItem2 {\n     #[primary_span]\n     pub span: Span,\n@@ -174,14 +174,14 @@ pub(crate) struct IncorrectMetaItem2 {\n // FIXME: Why is this the same error code as `InvalidReprHintNoParen` and `InvalidReprHintNoValue`?\n // It is more similar to `IncorrectReprFormatGeneric`.\n #[derive(SessionDiagnostic)]\n-#[error(attr::incorrect_repr_format_packed_one_or_zero_arg, code = \"E0552\")]\n+#[diag(attr::incorrect_repr_format_packed_one_or_zero_arg, code = \"E0552\")]\n pub(crate) struct IncorrectReprFormatPackedOneOrZeroArg {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::invalid_repr_hint_no_paren, code = \"E0552\")]\n+#[diag(attr::invalid_repr_hint_no_paren, code = \"E0552\")]\n pub(crate) struct InvalidReprHintNoParen {\n     #[primary_span]\n     pub span: Span,\n@@ -190,7 +190,7 @@ pub(crate) struct InvalidReprHintNoParen {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::invalid_repr_hint_no_value, code = \"E0552\")]\n+#[diag(attr::invalid_repr_hint_no_value, code = \"E0552\")]\n pub(crate) struct InvalidReprHintNoValue {\n     #[primary_span]\n     pub span: Span,\n@@ -234,16 +234,17 @@ impl<'a> SessionDiagnostic<'a> for UnsupportedLiteral {\n         diag\n     }\n }\n+\n #[derive(SessionDiagnostic)]\n-#[error(attr::invalid_repr_align_need_arg, code = \"E0589\")]\n+#[diag(attr::invalid_repr_align_need_arg, code = \"E0589\")]\n pub(crate) struct InvalidReprAlignNeedArg {\n     #[primary_span]\n     #[suggestion(code = \"align(...)\", applicability = \"has-placeholders\")]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::invalid_repr_generic, code = \"E0589\")]\n+#[diag(attr::invalid_repr_generic, code = \"E0589\")]\n pub(crate) struct InvalidReprGeneric<'a> {\n     #[primary_span]\n     pub span: Span,\n@@ -253,14 +254,14 @@ pub(crate) struct InvalidReprGeneric<'a> {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::incorrect_repr_format_align_one_arg, code = \"E0693\")]\n+#[diag(attr::incorrect_repr_format_align_one_arg, code = \"E0693\")]\n pub(crate) struct IncorrectReprFormatAlignOneArg {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::incorrect_repr_format_generic, code = \"E0693\")]\n+#[diag(attr::incorrect_repr_format_generic, code = \"E0693\")]\n pub(crate) struct IncorrectReprFormatGeneric<'a> {\n     #[primary_span]\n     pub span: Span,\n@@ -303,28 +304,28 @@ pub(crate) enum IncorrectReprFormatGenericCause<'a> {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::rustc_promotable_pairing, code = \"E0717\")]\n+#[diag(attr::rustc_promotable_pairing, code = \"E0717\")]\n pub(crate) struct RustcPromotablePairing {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::rustc_allowed_unstable_pairing, code = \"E0789\")]\n+#[diag(attr::rustc_allowed_unstable_pairing, code = \"E0789\")]\n pub(crate) struct RustcAllowedUnstablePairing {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::cfg_predicate_identifier)]\n+#[diag(attr::cfg_predicate_identifier)]\n pub(crate) struct CfgPredicateIdentifier {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::deprecated_item_suggestion)]\n+#[diag(attr::deprecated_item_suggestion)]\n #[note]\n pub(crate) struct DeprecatedItemSuggestion {\n     #[primary_span]\n@@ -335,21 +336,21 @@ pub(crate) struct DeprecatedItemSuggestion {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::expected_single_version_literal)]\n+#[diag(attr::expected_single_version_literal)]\n pub(crate) struct ExpectedSingleVersionLiteral {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::expected_version_literal)]\n+#[diag(attr::expected_version_literal)]\n pub(crate) struct ExpectedVersionLiteral {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::expects_feature_list)]\n+#[diag(attr::expects_feature_list)]\n pub(crate) struct ExpectsFeatureList {\n     #[primary_span]\n     pub span: Span,\n@@ -358,7 +359,7 @@ pub(crate) struct ExpectsFeatureList {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::expects_features)]\n+#[diag(attr::expects_features)]\n pub(crate) struct ExpectsFeatures {\n     #[primary_span]\n     pub span: Span,\n@@ -367,14 +368,14 @@ pub(crate) struct ExpectsFeatures {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::soft_no_args)]\n+#[diag(attr::soft_no_args)]\n pub(crate) struct SoftNoArgs {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[warning(attr::unknown_version_literal)]\n+#[diag(attr::unknown_version_literal)]\n pub(crate) struct UnknownVersionLiteral {\n     #[primary_span]\n     pub span: Span,"}]}