{"sha": "eb5e2d08c7e500c5612c6468036df7058fcc5a79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNWUyZDA4YzdlNTAwYzU2MTJjNjQ2ODAzNmRmNzA1OGZjYzVhNzk=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-02-05T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-02-05T00:00:00Z"}, "message": "Never MIR inline functions with a different instruction set", "tree": {"sha": "c6324890231c0fd6fa299396d343f966b68ab4eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6324890231c0fd6fa299396d343f966b68ab4eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb5e2d08c7e500c5612c6468036df7058fcc5a79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb5e2d08c7e500c5612c6468036df7058fcc5a79", "html_url": "https://github.com/rust-lang/rust/commit/eb5e2d08c7e500c5612c6468036df7058fcc5a79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb5e2d08c7e500c5612c6468036df7058fcc5a79/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e5d58fb420a487ae30f38141eccdc8d79fb8d58", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e5d58fb420a487ae30f38141eccdc8d79fb8d58", "html_url": "https://github.com/rust-lang/rust/commit/9e5d58fb420a487ae30f38141eccdc8d79fb8d58"}], "stats": {"total": 153, "additions": 152, "deletions": 1}, "files": [{"sha": "aca3fbbca1357c14a5a6167b613b5b1b0e8b319b", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb5e2d08c7e500c5612c6468036df7058fcc5a79/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5e2d08c7e500c5612c6468036df7058fcc5a79/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=eb5e2d08c7e500c5612c6468036df7058fcc5a79", "patch": "@@ -74,7 +74,7 @@ pub enum InlineAttr {\n     Never,\n }\n \n-#[derive(Clone, Encodable, Decodable, Debug)]\n+#[derive(Clone, Encodable, Decodable, Debug, PartialEq, Eq)]\n pub enum InstructionSetAttr {\n     ArmA32,\n     ArmT32,"}, {"sha": "1635a95f46ec82493e3aba555f9e3023fd220b7e", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb5e2d08c7e500c5612c6468036df7058fcc5a79/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5e2d08c7e500c5612c6468036df7058fcc5a79/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=eb5e2d08c7e500c5612c6468036df7058fcc5a79", "patch": "@@ -281,6 +281,11 @@ impl Inliner<'tcx> {\n             return false;\n         }\n \n+        if self.codegen_fn_attrs.instruction_set != codegen_fn_attrs.instruction_set {\n+            debug!(\"`callee has incompatible instruction set - not inlining\");\n+            return false;\n+        }\n+\n         let hinted = match codegen_fn_attrs.inline {\n             // Just treat inline(always) as a hint for now,\n             // there are cases that prevent inlining that we"}, {"sha": "be36ff50c7ef13316cf3a442fc3d70249a986911", "filename": "src/test/mir-opt/inline/inline-instruction-set.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/eb5e2d08c7e500c5612c6468036df7058fcc5a79/src%2Ftest%2Fmir-opt%2Finline%2Finline-instruction-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5e2d08c7e500c5612c6468036df7058fcc5a79/src%2Ftest%2Fmir-opt%2Finline%2Finline-instruction-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-instruction-set.rs?ref=eb5e2d08c7e500c5612c6468036df7058fcc5a79", "patch": "@@ -0,0 +1,54 @@\n+// Checks that only functions with the compatible instruction_set attributes are inlined.\n+//\n+// compile-flags: --target thumbv4t-none-eabi\n+// needs-llvm-components: arm\n+\n+#![crate_type = \"lib\"]\n+#![feature(rustc_attrs)]\n+#![feature(no_core, lang_items)]\n+#![feature(isa_attribute)]\n+#![no_core]\n+\n+#[rustc_builtin_macro]\n+#[macro_export]\n+macro_rules! asm {\n+    (\"assembly template\",\n+        $(operands,)*\n+        $(options($(option),*))?\n+    ) => {\n+        /* compiler built-in */\n+    };\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+#[instruction_set(arm::a32)]\n+#[inline]\n+fn instruction_set_a32() {}\n+\n+#[instruction_set(arm::t32)]\n+#[inline]\n+fn instruction_set_t32() {}\n+\n+#[inline]\n+fn instruction_set_default() {}\n+\n+// EMIT_MIR inline_instruction_set.t32.Inline.diff\n+#[instruction_set(arm::t32)]\n+pub fn t32() {\n+    instruction_set_a32();\n+    instruction_set_t32();\n+    // The default instruction set is currently\n+    // conservatively assumed to be incompatible.\n+    instruction_set_default();\n+}\n+\n+// EMIT_MIR inline_instruction_set.default.Inline.diff\n+pub fn default() {\n+    instruction_set_a32();\n+    instruction_set_t32();\n+    instruction_set_default();\n+}"}, {"sha": "334cf5a08e2c5cb2a2283a4f2c9b05d08baa9ad5", "filename": "src/test/mir-opt/inline/inline_instruction_set.default.Inline.diff", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/eb5e2d08c7e500c5612c6468036df7058fcc5a79/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.default.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/eb5e2d08c7e500c5612c6468036df7058fcc5a79/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.default.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.default.Inline.diff?ref=eb5e2d08c7e500c5612c6468036df7058fcc5a79", "patch": "@@ -0,0 +1,45 @@\n+- // MIR for `default` before Inline\n++ // MIR for `default` after Inline\n+  \n+  fn default() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-instruction-set.rs:50:18: 50:18\n+      let _1: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:51:5: 51:26\n+      let _2: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:52:5: 52:26\n+      let _3: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:53:5: 53:30\n++     scope 1 (inlined instruction_set_default) { // at $DIR/inline-instruction-set.rs:53:5: 53:30\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-instruction-set.rs:51:5: 51:26\n+          _1 = instruction_set_a32() -> bb1; // scope 0 at $DIR/inline-instruction-set.rs:51:5: 51:26\n+                                           // mir::Constant\n+                                           // + span: $DIR/inline-instruction-set.rs:51:5: 51:24\n+                                           // + literal: Const { ty: fn() {instruction_set_a32}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-instruction-set.rs:51:26: 51:27\n+          StorageLive(_2);                 // scope 0 at $DIR/inline-instruction-set.rs:52:5: 52:26\n+          _2 = instruction_set_t32() -> bb2; // scope 0 at $DIR/inline-instruction-set.rs:52:5: 52:26\n+                                           // mir::Constant\n+                                           // + span: $DIR/inline-instruction-set.rs:52:5: 52:24\n+                                           // + literal: Const { ty: fn() {instruction_set_t32}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_2);                 // scope 0 at $DIR/inline-instruction-set.rs:52:26: 52:27\n+          StorageLive(_3);                 // scope 0 at $DIR/inline-instruction-set.rs:53:5: 53:30\n+-         _3 = instruction_set_default() -> bb3; // scope 0 at $DIR/inline-instruction-set.rs:53:5: 53:30\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline-instruction-set.rs:53:5: 53:28\n+-                                          // + literal: Const { ty: fn() {instruction_set_default}, val: Value(Scalar(<ZST>)) }\n+-     }\n+- \n+-     bb3: {\n++         _3 = const ();                   // scope 1 at $DIR/inline-instruction-set.rs:53:5: 53:30\n+          StorageDead(_3);                 // scope 0 at $DIR/inline-instruction-set.rs:53:30: 53:31\n+          _0 = const ();                   // scope 0 at $DIR/inline-instruction-set.rs:50:18: 54:2\n+          return;                          // scope 0 at $DIR/inline-instruction-set.rs:54:2: 54:2\n+      }\n+  }\n+  "}, {"sha": "920b68c9daa1e44379fa09fc9e78f88699f032f6", "filename": "src/test/mir-opt/inline/inline_instruction_set.t32.Inline.diff", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/eb5e2d08c7e500c5612c6468036df7058fcc5a79/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.t32.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/eb5e2d08c7e500c5612c6468036df7058fcc5a79/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.t32.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.t32.Inline.diff?ref=eb5e2d08c7e500c5612c6468036df7058fcc5a79", "patch": "@@ -0,0 +1,47 @@\n+- // MIR for `t32` before Inline\n++ // MIR for `t32` after Inline\n+  \n+  fn t32() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-instruction-set.rs:41:14: 41:14\n+      let _1: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:42:5: 42:26\n+      let _2: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:43:5: 43:26\n+      let _3: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:46:5: 46:30\n++     scope 1 (inlined instruction_set_t32) { // at $DIR/inline-instruction-set.rs:43:5: 43:26\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-instruction-set.rs:42:5: 42:26\n+          _1 = instruction_set_a32() -> bb1; // scope 0 at $DIR/inline-instruction-set.rs:42:5: 42:26\n+                                           // mir::Constant\n+                                           // + span: $DIR/inline-instruction-set.rs:42:5: 42:24\n+                                           // + literal: Const { ty: fn() {instruction_set_a32}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-instruction-set.rs:42:26: 42:27\n+          StorageLive(_2);                 // scope 0 at $DIR/inline-instruction-set.rs:43:5: 43:26\n+-         _2 = instruction_set_t32() -> bb2; // scope 0 at $DIR/inline-instruction-set.rs:43:5: 43:26\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline-instruction-set.rs:43:5: 43:24\n+-                                          // + literal: Const { ty: fn() {instruction_set_t32}, val: Value(Scalar(<ZST>)) }\n+-     }\n+- \n+-     bb2: {\n++         _2 = const ();                   // scope 1 at $DIR/inline-instruction-set.rs:43:5: 43:26\n+          StorageDead(_2);                 // scope 0 at $DIR/inline-instruction-set.rs:43:26: 43:27\n+          StorageLive(_3);                 // scope 0 at $DIR/inline-instruction-set.rs:46:5: 46:30\n+-         _3 = instruction_set_default() -> bb3; // scope 0 at $DIR/inline-instruction-set.rs:46:5: 46:30\n++         _3 = instruction_set_default() -> bb2; // scope 0 at $DIR/inline-instruction-set.rs:46:5: 46:30\n+                                           // mir::Constant\n+                                           // + span: $DIR/inline-instruction-set.rs:46:5: 46:28\n+                                           // + literal: Const { ty: fn() {instruction_set_default}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+-     bb3: {\n++     bb2: {\n+          StorageDead(_3);                 // scope 0 at $DIR/inline-instruction-set.rs:46:30: 46:31\n+          _0 = const ();                   // scope 0 at $DIR/inline-instruction-set.rs:41:14: 47:2\n+          return;                          // scope 0 at $DIR/inline-instruction-set.rs:47:2: 47:2\n+      }\n+  }\n+  "}]}