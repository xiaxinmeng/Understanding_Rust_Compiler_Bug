{"sha": "1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ODZiNThjNjQ2YTk1MjNkMGE4YTBmYThhMGJkMjA0OTJlNzc5NWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-23T06:27:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-23T06:27:21Z"}, "message": "Auto merge of #80065 - b-naber:parse-angle-arg-diagnostics, r=petrochenkov\n\nImprove diagnostics when parsing angle args\n\nhttps://github.com/rust-lang/rust/pull/79266 introduced parsing of generic arguments in associated type constraints, this however resulted in possibly very confusing error messages in cases in which closing angle brackets were missing such as in `Vec<(u32, _, _) = vec![]`, which outputs an incorrectly parsed equality constraint error, as noted by `@cynecx.`\n\nThis PR tries to provide better error messages in such cases.\n\nr? `@petrochenkov`", "tree": {"sha": "4fbb2a16a834aad3b18a2a07b445c6ee8d8f3d29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fbb2a16a834aad3b18a2a07b445c6ee8d8f3d29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "html_url": "https://github.com/rust-lang/rust/commit/1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe0fa59b50313b30e3bfcf1e3e5e1a71fa3a849d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe0fa59b50313b30e3bfcf1e3e5e1a71fa3a849d", "html_url": "https://github.com/rust-lang/rust/commit/fe0fa59b50313b30e3bfcf1e3e5e1a71fa3a849d"}, {"sha": "3ba6cf13f42250c1d0d3bab206e37e93df0582c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ba6cf13f42250c1d0d3bab206e37e93df0582c4", "html_url": "https://github.com/rust-lang/rust/commit/3ba6cf13f42250c1d0d3bab206e37e93df0582c4"}], "stats": {"total": 257, "additions": 169, "deletions": 88}, "files": [{"sha": "f2fcce5c226622d355cda542b1ec44dd9584e6a8", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "patch": "@@ -2,14 +2,13 @@ use super::ty::AllowPlus;\n use super::TokenType;\n use super::{BlockMode, Parser, PathStyle, Restrictions, SemiColonMode, SeqSep, TokenExpectType};\n \n+use rustc_ast as ast;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Lit, LitKind, TokenKind};\n use rustc_ast::util::parser::AssocOp;\n-use rustc_ast::{\n-    self as ast, AngleBracketedArg, AngleBracketedArgs, AnonConst, AttrVec, BinOpKind, BindingMode,\n-    Block, BlockCheckMode, Expr, ExprKind, GenericArg, Item, ItemKind, Mutability, Param, Pat,\n-    PatKind, Path, PathSegment, QSelf, Ty, TyKind,\n-};\n+use rustc_ast::{AngleBracketedArg, AngleBracketedArgs, AnonConst, AttrVec};\n+use rustc_ast::{BinOpKind, BindingMode, Block, BlockCheckMode, Expr, ExprKind, GenericArg, Item};\n+use rustc_ast::{ItemKind, Mutability, Param, Pat, PatKind, Path, PathSegment, QSelf, Ty, TyKind};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{pluralize, struct_span_err};\n@@ -220,6 +219,7 @@ impl<'a> Parser<'a> {\n         edible: &[TokenKind],\n         inedible: &[TokenKind],\n     ) -> PResult<'a, bool /* recovered */> {\n+        debug!(\"expected_one_of_not_found(edible: {:?}, inedible: {:?})\", edible, inedible);\n         fn tokens_to_string(tokens: &[TokenType]) -> String {\n             let mut i = tokens.iter();\n             // This might be a sign we need a connect method on `Iterator`.\n@@ -245,6 +245,7 @@ impl<'a> Parser<'a> {\n             .collect::<Vec<_>>();\n         expected.sort_by_cached_key(|x| x.to_string());\n         expected.dedup();\n+\n         let expect = tokens_to_string(&expected[..]);\n         let actual = super::token_descr(&self.token);\n         let (msg_exp, (label_sp, label_exp)) = if expected.len() > 1 {\n@@ -270,6 +271,16 @@ impl<'a> Parser<'a> {\n         };\n         self.last_unexpected_token_span = Some(self.token.span);\n         let mut err = self.struct_span_err(self.token.span, &msg_exp);\n+\n+        // Add suggestion for a missing closing angle bracket if '>' is included in expected_tokens\n+        // there are unclosed angle brackets\n+        if self.unmatched_angle_bracket_count > 0\n+            && self.token.kind == TokenKind::Eq\n+            && expected.iter().any(|tok| matches!(tok, TokenType::Token(TokenKind::Gt)))\n+        {\n+            err.span_label(self.prev_token.span, \"maybe try to close unmatched angle bracket\");\n+        }\n+\n         let sp = if self.token == token::Eof {\n             // This is EOF; don't want to point at the following char, but rather the last token.\n             self.prev_token.span"}, {"sha": "f11c6591de9093b68ca33dced0be2902582110bf", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "patch": "@@ -277,7 +277,7 @@ impl TokenCursor {\n     }\n }\n \n-#[derive(Clone, PartialEq)]\n+#[derive(Debug, Clone, PartialEq)]\n enum TokenType {\n     Token(TokenKind),\n     Keyword(Symbol),"}, {"sha": "4234740b2b15f19ce9829b4744a7568d6d4f5bf0", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 11, "deletions": 44, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "patch": "@@ -185,7 +185,6 @@ impl<'a> Parser<'a> {\n \n     pub(super) fn parse_path_segment(&mut self, style: PathStyle) -> PResult<'a, PathSegment> {\n         let ident = self.parse_path_segment_ident()?;\n-\n         let is_args_start = |token: &Token| {\n             matches!(\n                 token.kind,\n@@ -420,7 +419,10 @@ impl<'a> Parser<'a> {\n         match arg {\n             Some(arg) => {\n                 if self.check(&token::Colon) | self.check(&token::Eq) {\n-                    let (ident, gen_args) = self.get_ident_from_generic_arg(arg, lo)?;\n+                    let (ident, gen_args) = match self.get_ident_from_generic_arg(arg) {\n+                        Ok(ident_gen_args) => ident_gen_args,\n+                        Err(arg) => return Ok(Some(AngleBracketedArg::Arg(arg))),\n+                    };\n                     let kind = if self.eat(&token::Colon) {\n                         // Parse associated type constraint bound.\n \n@@ -561,50 +563,15 @@ impl<'a> Parser<'a> {\n     fn get_ident_from_generic_arg(\n         &self,\n         gen_arg: GenericArg,\n-        lo: Span,\n-    ) -> PResult<'a, (Ident, Option<GenericArgs>)> {\n-        let gen_arg_span = gen_arg.span();\n-        match gen_arg {\n-            GenericArg::Type(t) => match t.into_inner().kind {\n-                ast::TyKind::Path(qself, mut path) => {\n-                    if let Some(qself) = qself {\n-                        let mut err = self.struct_span_err(\n-                            gen_arg_span,\n-                            \"qualified paths cannot be used in associated type constraints\",\n-                        );\n-                        err.span_label(\n-                            qself.path_span,\n-                            \"not allowed in associated type constraints\",\n-                        );\n-                        return Err(err);\n-                    }\n-                    if path.segments.len() == 1 {\n-                        let path_seg = path.segments.remove(0);\n-                        let ident = path_seg.ident;\n-                        let gen_args = path_seg.args.map(|args| args.into_inner());\n-                        return Ok((ident, gen_args));\n-                    }\n-                    let err = self.struct_span_err(\n-                        path.span,\n-                        \"paths with multiple segments cannot be used in associated type constraints\",\n-                    );\n-                    return Err(err);\n-                }\n-                _ => {\n-                    let span = lo.to(self.prev_token.span);\n-                    let err = self.struct_span_err(\n-                        span,\n-                        \"only path types can be used in associated type constraints\",\n-                    );\n-                    return Err(err);\n+    ) -> Result<(Ident, Option<GenericArgs>), GenericArg> {\n+        if let GenericArg::Type(ty) = &gen_arg {\n+            if let ast::TyKind::Path(qself, path) = &ty.kind {\n+                if qself.is_none() && path.segments.len() == 1 {\n+                    let seg = &path.segments[0];\n+                    return Ok((seg.ident, seg.args.as_deref().cloned()));\n                 }\n-            },\n-            _ => {\n-                let span = lo.to(self.prev_token.span);\n-                let err = self\n-                    .struct_span_err(span, \"only types can be used in associated type constraints\");\n-                return Err(err);\n             }\n         }\n+        Err(gen_arg)\n     }\n }"}, {"sha": "8abc4ccc9a5fa590e7fa88bff8e21c49608afbcc", "filename": "src/test/ui/generic-associated-types/parse/trait-path-expected-token.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expected-token.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expected-token.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expected-token.stderr?ref=1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "patch": "@@ -2,7 +2,9 @@ error: expected one of `!`, `(`, `+`, `,`, `::`, `<`, or `>`, found `=`\n   --> $DIR/trait-path-expected-token.rs:8:33\n    |\n LL | fn f1<'a>(arg : Box<dyn X<Y = B = &'a ()>>) {}\n-   |                                 ^ expected one of 7 possible tokens\n+   |                               - ^ expected one of 7 possible tokens\n+   |                               |\n+   |                               maybe try to close unmatched angle bracket\n \n warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/trait-path-expected-token.rs:1:12"}, {"sha": "5e50c6b35c9602ab2abae3b2aa76269527ff7f53", "filename": "src/test/ui/generic-associated-types/parse/trait-path-expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.rs?ref=1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "patch": "@@ -17,7 +17,7 @@ mod error2 {\n   }\n \n   fn f2<'a>(arg : Box<dyn X< { 1 } = 32 >>) {}\n-    //~^ ERROR: only types can be used in associated type constraints\n+    //~^ ERROR: expected one of\n }\n \n fn main() {}"}, {"sha": "27e1a750b213197f865e0a16ea5b9b4b336b6488", "filename": "src/test/ui/generic-associated-types/parse/trait-path-expressions.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.stderr?ref=1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "patch": "@@ -6,11 +6,13 @@ LL |   fn f1<'a>(arg : Box<dyn X< 1 = 32 >>) {}\n    |                              |\n    |                              while parsing a const generic argument starting here\n \n-error: only types can be used in associated type constraints\n-  --> $DIR/trait-path-expressions.rs:19:30\n+error: expected one of `,`, `:`, or `>`, found `=`\n+  --> $DIR/trait-path-expressions.rs:19:36\n    |\n LL |   fn f2<'a>(arg : Box<dyn X< { 1 } = 32 >>) {}\n-   |                              ^^^^^\n+   |                                  - ^ expected one of `,`, `:`, or `>`\n+   |                                  |\n+   |                                  maybe try to close unmatched angle bracket\n \n warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/trait-path-expressions.rs:1:12"}, {"sha": "f6038566e5b5e83479c6907c2fb334de15be19ae", "filename": "src/test/ui/generic-associated-types/parse/trait-path-missing-gen_arg.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-missing-gen_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-missing-gen_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-missing-gen_arg.stderr?ref=1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "patch": "@@ -28,7 +28,9 @@ error: expected one of `>`, a const expression, lifetime, or type, found `=`\n   --> $DIR/trait-path-missing-gen_arg.rs:17:30\n    |\n LL |   fn f1<'a>(arg : Box<dyn X< = 32 >>) {}\n-   |                              ^ expected one of `>`, a const expression, lifetime, or type\n+   |                            - ^ expected one of `>`, a const expression, lifetime, or type\n+   |                            |\n+   |                            maybe try to close unmatched angle bracket\n \n warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/trait-path-missing-gen_arg.rs:1:12"}, {"sha": "eba30e1438f04c75d4c1d54207018bddb5546be8", "filename": "src/test/ui/generic-associated-types/parse/trait-path-segments.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.rs?ref=1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "patch": "@@ -7,7 +7,7 @@ const _: () = {\n     }\n \n     fn f1<'a>(arg : Box<dyn X<X::Y = u32>>) {}\n-        //~^ ERROR: paths with multiple segments cannot be used in associated type constraints\n+        //~^ ERROR: expected one of\n   };\n \n const _: () = {\n@@ -18,7 +18,7 @@ const _: () = {\n     trait Z {}\n \n     impl<T : X<<Self as X>::Y<'a> = &'a u32>> Z for T {}\n-        //~^ ERROR: qualified paths cannot be used in associated type constraints\n+        //~^ ERROR: expected one of\n };\n \n const _: () = {\n@@ -29,7 +29,7 @@ const _: () = {\n     trait Z {}\n \n     impl<T : X<X::Y<'a> = &'a u32>> Z for T {}\n-        //~^ ERROR: paths with multiple segments cannot be used in associated type constraints\n+        //~^ ERROR: expected one of\n };\n \n fn main() {}"}, {"sha": "c82953aaed7dd5022d18506fa0b5a9db722150f6", "filename": "src/test/ui/generic-associated-types/parse/trait-path-segments.stderr", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.stderr?ref=1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "patch": "@@ -1,22 +1,26 @@\n-error: paths with multiple segments cannot be used in associated type constraints\n-  --> $DIR/trait-path-segments.rs:9:31\n+error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, or `>`, found `=`\n+  --> $DIR/trait-path-segments.rs:9:36\n    |\n LL |     fn f1<'a>(arg : Box<dyn X<X::Y = u32>>) {}\n-   |                               ^^^^\n+   |                                  - ^ expected one of 8 possible tokens\n+   |                                  |\n+   |                                  maybe try to close unmatched angle bracket\n \n-error: qualified paths cannot be used in associated type constraints\n-  --> $DIR/trait-path-segments.rs:20:16\n+error: expected one of `,`, `::`, `:`, or `>`, found `=`\n+  --> $DIR/trait-path-segments.rs:20:35\n    |\n LL |     impl<T : X<<Self as X>::Y<'a> = &'a u32>> Z for T {}\n-   |                ^^^^^^^^^-^^^^^^^^\n-   |                         |\n-   |                         not allowed in associated type constraints\n+   |                                 - ^ expected one of `,`, `::`, `:`, or `>`\n+   |                                 |\n+   |                                 maybe try to close unmatched angle bracket\n \n-error: paths with multiple segments cannot be used in associated type constraints\n-  --> $DIR/trait-path-segments.rs:31:16\n+error: expected one of `!`, `+`, `,`, `::`, `:`, or `>`, found `=`\n+  --> $DIR/trait-path-segments.rs:31:25\n    |\n LL |     impl<T : X<X::Y<'a> = &'a u32>> Z for T {}\n-   |                ^^^^^^^^\n+   |                       - ^ expected one of `!`, `+`, `,`, `::`, `:`, or `>`\n+   |                       |\n+   |                       maybe try to close unmatched angle bracket\n \n warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/trait-path-segments.rs:1:12"}, {"sha": "522b3edc638ea73b988d2c6123d89ad2650d9d7c", "filename": "src/test/ui/generic-associated-types/parse/trait-path-types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.rs?ref=1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "patch": "@@ -7,17 +7,17 @@ trait X {\n \n const _: () = {\n   fn f<'a>(arg : Box<dyn X< [u8; 1] = u32>>) {}\n-      //~^ ERROR: only path types can be used in associated type constraints\n+      //~^ ERROR: expected one of\n };\n \n const _: () = {\n   fn f1<'a>(arg : Box<dyn X<(Y<'a>) = &'a ()>>) {}\n-      //~^ ERROR: only path types can be used in associated type constraints\n+      //~^ ERROR: expected one of\n };\n \n const _: () = {\n   fn f1<'a>(arg : Box<dyn X< 'a = u32 >>) {}\n-      //~^ ERROR: only types can be used in associated type constraints\n+      //~^ ERROR: expected one of\n };\n \n fn main() {}"}, {"sha": "ac791c224810e8c15ccffec76ae16f30ee3a8fbf", "filename": "src/test/ui/generic-associated-types/parse/trait-path-types.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.stderr?ref=1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "patch": "@@ -1,20 +1,26 @@\n-error: only path types can be used in associated type constraints\n-  --> $DIR/trait-path-types.rs:9:29\n+error: expected one of `,`, `:`, or `>`, found `=`\n+  --> $DIR/trait-path-types.rs:9:37\n    |\n LL |   fn f<'a>(arg : Box<dyn X< [u8; 1] = u32>>) {}\n-   |                             ^^^^^^^\n+   |                                   - ^ expected one of `,`, `:`, or `>`\n+   |                                   |\n+   |                                   maybe try to close unmatched angle bracket\n \n-error: only path types can be used in associated type constraints\n-  --> $DIR/trait-path-types.rs:14:29\n+error: expected one of `,`, `:`, or `>`, found `=`\n+  --> $DIR/trait-path-types.rs:14:37\n    |\n LL |   fn f1<'a>(arg : Box<dyn X<(Y<'a>) = &'a ()>>) {}\n-   |                             ^^^^^^^\n+   |                                   - ^ expected one of `,`, `:`, or `>`\n+   |                                   |\n+   |                                   maybe try to close unmatched angle bracket\n \n-error: only types can be used in associated type constraints\n-  --> $DIR/trait-path-types.rs:19:30\n+error: expected one of `,`, `:`, or `>`, found `=`\n+  --> $DIR/trait-path-types.rs:19:33\n    |\n LL |   fn f1<'a>(arg : Box<dyn X< 'a = u32 >>) {}\n-   |                              ^^\n+   |                              -- ^ expected one of `,`, `:`, or `>`\n+   |                              |\n+   |                              maybe try to close unmatched angle bracket\n \n warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/trait-path-types.rs:1:12"}, {"sha": "51486bc40de0ca6cb7d7dde3e54ee366f7bd2ba9", "filename": "src/test/ui/issues/issue-34334.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs?ref=1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "patch": "@@ -1,6 +1,8 @@\n fn main () {\n     let sr: Vec<(u32, _, _) = vec![];\n-    //~^ ERROR only path types can be used in associated type constraints\n+    //~^ ERROR expected one of\n+\n     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n     //~^ ERROR a value of type `Vec<(u32, _, _)>` cannot be built\n+\n }"}, {"sha": "acb44ce2c3545a27c8ad7f87a26ce4d15a49097b", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "patch": "@@ -1,13 +1,14 @@\n-error: only path types can be used in associated type constraints\n-  --> $DIR/issue-34334.rs:2:17\n+error: expected one of `,`, `:`, or `>`, found `=`\n+  --> $DIR/issue-34334.rs:2:29\n    |\n LL |     let sr: Vec<(u32, _, _) = vec![];\n-   |         --      ^^^^^^^^^^^\n-   |         |\n+   |         --                - ^ expected one of `,`, `:`, or `>`\n+   |         |                 |\n+   |         |                 maybe try to close unmatched angle bracket\n    |         while parsing the type for `sr`\n \n error[E0277]: a value of type `Vec<(u32, _, _)>` cannot be built from an iterator over elements of type `()`\n-  --> $DIR/issue-34334.rs:4:87\n+  --> $DIR/issue-34334.rs:5:87\n    |\n LL |     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n    |                                                                                       ^^^^^^^ value of type `Vec<(u32, _, _)>` cannot be built from `std::iter::Iterator<Item=()>`"}, {"sha": "da95c1bfa2709e0742cd56263792bfd0b759bb31", "filename": "src/test/ui/parser/missing-closing-angle-bracket-eq-constraint.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.rs?ref=1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "patch": "@@ -0,0 +1,23 @@\n+struct Foo<T1, T2> {\n+  _a : T1,\n+  _b : T2,\n+}\n+\n+fn test1<T>(arg : T) {\n+  let v : Vec<(u32,_) = vec![];\n+    //~^ ERROR: expected one of\n+    //~| ERROR: type annotations needed\n+}\n+\n+fn test2<T1, T2>(arg1 : T1, arg2 : T2) {\n+  let foo : Foo::<T1, T2 = Foo {_a : arg1, _b : arg2};\n+    //~^ ERROR: expected one of\n+}\n+\n+fn test3<'a>(arg : &'a u32) {\n+  let v : Vec<'a = vec![];\n+    //~^ ERROR: expected one of\n+    //~| ERROR: type annotations needed for `Vec<T>`\n+}\n+\n+fn main() {}"}, {"sha": "ae53334f5e02a439e90ad8e78af4404e83b8828d", "filename": "src/test/ui/parser/missing-closing-angle-bracket-eq-constraint.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.stderr?ref=1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "patch": "@@ -0,0 +1,49 @@\n+error: expected one of `,`, `:`, or `>`, found `=`\n+  --> $DIR/missing-closing-angle-bracket-eq-constraint.rs:7:23\n+   |\n+LL |   let v : Vec<(u32,_) = vec![];\n+   |       -             - ^ expected one of `,`, `:`, or `>`\n+   |       |             |\n+   |       |             maybe try to close unmatched angle bracket\n+   |       while parsing the type for `v`\n+\n+error: expected one of `!`, `(`, `+`, `,`, `::`, `<`, or `>`, found `{`\n+  --> $DIR/missing-closing-angle-bracket-eq-constraint.rs:13:32\n+   |\n+LL |   let foo : Foo::<T1, T2 = Foo {_a : arg1, _b : arg2};\n+   |       ---                      ^ expected one of 7 possible tokens\n+   |       |\n+   |       while parsing the type for `foo`\n+\n+error: expected one of `,`, `:`, or `>`, found `=`\n+  --> $DIR/missing-closing-angle-bracket-eq-constraint.rs:18:18\n+   |\n+LL |   let v : Vec<'a = vec![];\n+   |       -       -- ^ expected one of `,`, `:`, or `>`\n+   |       |       |\n+   |       |       maybe try to close unmatched angle bracket\n+   |       while parsing the type for `v`\n+\n+error[E0282]: type annotations needed for `Vec<T>`\n+  --> $DIR/missing-closing-angle-bracket-eq-constraint.rs:7:25\n+   |\n+LL |   let v : Vec<(u32,_) = vec![];\n+   |       -                 ^^^^^^ cannot infer type for type parameter `T`\n+   |       |\n+   |       consider giving `v` the explicit type `Vec<T>`, where the type parameter `T` is specified\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0282]: type annotations needed for `Vec<T>`\n+  --> $DIR/missing-closing-angle-bracket-eq-constraint.rs:18:20\n+   |\n+LL |   let v : Vec<'a = vec![];\n+   |       -            ^^^^^^ cannot infer type for type parameter `T`\n+   |       |\n+   |       consider giving `v` the explicit type `Vec<T>`, where the type parameter `T` is specified\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "84ffdd176aea058617d2a8373413b33570ff5002", "filename": "src/test/ui/parser/nested-missing-closing-angle-bracket.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fparser%2Fnested-missing-closing-angle-bracket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fparser%2Fnested-missing-closing-angle-bracket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnested-missing-closing-angle-bracket.rs?ref=1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+  let v : Vec::<Vec<(u32,_,_)> = vec![vec![]];\n+    //~^ ERROR: expected one of\n+}"}, {"sha": "b85bc02568c7710e8f6637d60ccebcdecca78f6d", "filename": "src/test/ui/parser/nested-missing-closing-angle-bracket.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fparser%2Fnested-missing-closing-angle-bracket.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1986b58c646a9523d0a8a0fa8a0bd20492e7795d/src%2Ftest%2Fui%2Fparser%2Fnested-missing-closing-angle-bracket.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnested-missing-closing-angle-bracket.stderr?ref=1986b58c646a9523d0a8a0fa8a0bd20492e7795d", "patch": "@@ -0,0 +1,8 @@\n+error: expected one of `,` or `>`, found `;`\n+  --> $DIR/nested-missing-closing-angle-bracket.rs:2:46\n+   |\n+LL |   let v : Vec::<Vec<(u32,_,_)> = vec![vec![]];\n+   |       - while parsing the type for `v`       ^ expected one of `,` or `>`\n+\n+error: aborting due to previous error\n+"}]}