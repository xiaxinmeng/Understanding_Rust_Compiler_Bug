{"sha": "2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f", "node_id": "C_kwDOAAsO6NoAKDJhOGRiZGIxZTJkOWY0NGU3OTcxZDlhNzBiNDFkNGQ4NmRiMDExMmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-08T03:20:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-08T03:20:05Z"}, "message": "Auto merge of #93561 - Amanieu:more-unwind-abi, r=nagisa\n\nAdd more *-unwind ABI variants\n\nThe following *-unwind ABIs are now supported:\n- \"C-unwind\"\n- \"cdecl-unwind\"\n- \"stdcall-unwind\"\n- \"fastcall-unwind\"\n- \"vectorcall-unwind\"\n- \"thiscall-unwind\"\n- \"aapcs-unwind\"\n- \"win64-unwind\"\n- \"sysv64-unwind\"\n- \"system-unwind\"\n\ncc `@rust-lang/wg-ffi-unwind`", "tree": {"sha": "248ec2d5ad77581e22414fc4c1b716223347cbe2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/248ec2d5ad77581e22414fc4c1b716223347cbe2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f", "html_url": "https://github.com/rust-lang/rust/commit/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7cc3bddbe0d0e374d05e7003e662bba1742dbae", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7cc3bddbe0d0e374d05e7003e662bba1742dbae", "html_url": "https://github.com/rust-lang/rust/commit/e7cc3bddbe0d0e374d05e7003e662bba1742dbae"}, {"sha": "547b4e601e797e7989f6fc9ebe921376c74bd1f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/547b4e601e797e7989f6fc9ebe921376c74bd1f0", "html_url": "https://github.com/rust-lang/rust/commit/547b4e601e797e7989f6fc9ebe921376c74bd1f0"}], "stats": {"total": 422, "additions": 342, "deletions": 80}, "files": [{"sha": "0a96e60d4d3af58cd667412635663304faa98eb2", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f", "patch": "@@ -196,6 +196,54 @@ impl<'a> PostExpansionVisitor<'a> {\n                     \"thiscall-unwind ABI is experimental and subject to change\"\n                 );\n             }\n+            \"cdecl-unwind\" => {\n+                gate_feature_post!(\n+                    &self,\n+                    c_unwind,\n+                    span,\n+                    \"cdecl-unwind ABI is experimental and subject to change\"\n+                );\n+            }\n+            \"fastcall-unwind\" => {\n+                gate_feature_post!(\n+                    &self,\n+                    c_unwind,\n+                    span,\n+                    \"fastcall-unwind ABI is experimental and subject to change\"\n+                );\n+            }\n+            \"vectorcall-unwind\" => {\n+                gate_feature_post!(\n+                    &self,\n+                    c_unwind,\n+                    span,\n+                    \"vectorcall-unwind ABI is experimental and subject to change\"\n+                );\n+            }\n+            \"aapcs-unwind\" => {\n+                gate_feature_post!(\n+                    &self,\n+                    c_unwind,\n+                    span,\n+                    \"aapcs-unwind ABI is experimental and subject to change\"\n+                );\n+            }\n+            \"win64-unwind\" => {\n+                gate_feature_post!(\n+                    &self,\n+                    c_unwind,\n+                    span,\n+                    \"win64-unwind ABI is experimental and subject to change\"\n+                );\n+            }\n+            \"sysv64-unwind\" => {\n+                gate_feature_post!(\n+                    &self,\n+                    c_unwind,\n+                    span,\n+                    \"sysv64-unwind ABI is experimental and subject to change\"\n+                );\n+            }\n             \"wasm\" => {\n                 gate_feature_post!(\n                     &self,"}, {"sha": "88292a4422419774019d3a1db67a7b384d1ce27a", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f", "patch": "@@ -404,11 +404,13 @@ impl Collector<'_> {\n     fn build_dll_import(&self, abi: Abi, item: &hir::ForeignItemRef) -> DllImport {\n         let calling_convention = if self.tcx.sess.target.arch == \"x86\" {\n             match abi {\n-                Abi::C { .. } | Abi::Cdecl => DllCallingConvention::C,\n+                Abi::C { .. } | Abi::Cdecl { .. } => DllCallingConvention::C,\n                 Abi::Stdcall { .. } | Abi::System { .. } => {\n                     DllCallingConvention::Stdcall(self.i686_arg_list_size(item))\n                 }\n-                Abi::Fastcall => DllCallingConvention::Fastcall(self.i686_arg_list_size(item)),\n+                Abi::Fastcall { .. } => {\n+                    DllCallingConvention::Fastcall(self.i686_arg_list_size(item))\n+                }\n                 // Vectorcall is intentionally not supported at this time.\n                 _ => {\n                     self.tcx.sess.span_fatal(\n@@ -419,7 +421,7 @@ impl Collector<'_> {\n             }\n         } else {\n             match abi {\n-                Abi::C { .. } | Abi::Win64 | Abi::System { .. } => DllCallingConvention::C,\n+                Abi::C { .. } | Abi::Win64 { .. } | Abi::System { .. } => DllCallingConvention::C,\n                 _ => {\n                     self.tcx.sess.span_fatal(\n                         item.span,"}, {"sha": "87965b06435dd6a265a844f8b50251daed631894", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f", "patch": "@@ -2776,17 +2776,20 @@ pub fn fn_can_unwind<'tcx>(\n     // [rfc]: https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md\n     use SpecAbi::*;\n     match abi {\n-        C { unwind } | Stdcall { unwind } | System { unwind } | Thiscall { unwind } => {\n+        C { unwind }\n+        | System { unwind }\n+        | Cdecl { unwind }\n+        | Stdcall { unwind }\n+        | Fastcall { unwind }\n+        | Vectorcall { unwind }\n+        | Thiscall { unwind }\n+        | Aapcs { unwind }\n+        | Win64 { unwind }\n+        | SysV64 { unwind } => {\n             unwind\n                 || (!tcx.features().c_unwind && tcx.sess.panic_strategy() == PanicStrategy::Unwind)\n         }\n-        Cdecl\n-        | Fastcall\n-        | Vectorcall\n-        | Aapcs\n-        | Win64\n-        | SysV64\n-        | PtxKernel\n+        PtxKernel\n         | Msp430Interrupt\n         | X86Interrupt\n         | AmdGpuKernel\n@@ -2813,14 +2816,14 @@ pub fn conv_from_spec_abi(tcx: TyCtxt<'_>, abi: SpecAbi) -> Conv {\n         EfiApi => bug!(\"eficall abi should be selected elsewhere\"),\n \n         Stdcall { .. } => Conv::X86Stdcall,\n-        Fastcall => Conv::X86Fastcall,\n-        Vectorcall => Conv::X86VectorCall,\n+        Fastcall { .. } => Conv::X86Fastcall,\n+        Vectorcall { .. } => Conv::X86VectorCall,\n         Thiscall { .. } => Conv::X86ThisCall,\n         C { .. } => Conv::C,\n         Unadjusted => Conv::C,\n-        Win64 => Conv::X86_64Win64,\n-        SysV64 => Conv::X86_64SysV,\n-        Aapcs => Conv::ArmAapcs,\n+        Win64 { .. } => Conv::X86_64Win64,\n+        SysV64 { .. } => Conv::X86_64SysV,\n+        Aapcs { .. } => Conv::ArmAapcs,\n         CCmseNonSecureCall => Conv::CCmseNonSecureCall,\n         PtxKernel => Conv::PtxKernel,\n         Msp430Interrupt => Conv::Msp430Intr,\n@@ -2831,7 +2834,7 @@ pub fn conv_from_spec_abi(tcx: TyCtxt<'_>, abi: SpecAbi) -> Conv {\n         Wasm => Conv::C,\n \n         // These API constants ought to be more specific...\n-        Cdecl => Conv::C,\n+        Cdecl { .. } => Conv::C,\n     }\n }\n "}, {"sha": "43eb7ab05e0bf24a524a430f238503b4e1fbc660", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f", "patch": "@@ -658,22 +658,24 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n \n         match &cx.target_spec().arch[..] {\n             \"x86\" => {\n-                let flavor = if abi == spec::abi::Abi::Fastcall {\n+                let flavor = if let spec::abi::Abi::Fastcall { .. } = abi {\n                     x86::Flavor::Fastcall\n                 } else {\n                     x86::Flavor::General\n                 };\n                 x86::compute_abi_info(cx, self, flavor);\n             }\n-            \"x86_64\" => {\n-                if abi == spec::abi::Abi::SysV64 {\n-                    x86_64::compute_abi_info(cx, self);\n-                } else if abi == spec::abi::Abi::Win64 || cx.target_spec().is_like_windows {\n-                    x86_win64::compute_abi_info(self);\n-                } else {\n-                    x86_64::compute_abi_info(cx, self);\n+            \"x86_64\" => match abi {\n+                spec::abi::Abi::SysV64 { .. } => x86_64::compute_abi_info(cx, self),\n+                spec::abi::Abi::Win64 { .. } => x86_win64::compute_abi_info(self),\n+                _ => {\n+                    if cx.target_spec().is_like_windows {\n+                        x86_win64::compute_abi_info(self)\n+                    } else {\n+                        x86_64::compute_abi_info(cx, self)\n+                    }\n                 }\n-            }\n+            },\n             \"aarch64\" => aarch64::compute_abi_info(cx, self),\n             \"amdgpu\" => amdgpu::compute_abi_info(cx, self),\n             \"arm\" => arm::compute_abi_info(cx, self),"}, {"sha": "d9e571c72e53a946de00bb350475071640e1d77e", "filename": "compiler/rustc_target/src/spec/abi.rs", "status": "modified", "additions": 49, "deletions": 37, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs?ref=2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f", "patch": "@@ -13,14 +13,14 @@ pub enum Abi {\n     // churn. The specific values are meaningless.\n     Rust,\n     C { unwind: bool },\n-    Cdecl,\n+    Cdecl { unwind: bool },\n     Stdcall { unwind: bool },\n-    Fastcall,\n-    Vectorcall,\n+    Fastcall { unwind: bool },\n+    Vectorcall { unwind: bool },\n     Thiscall { unwind: bool },\n-    Aapcs,\n-    Win64,\n-    SysV64,\n+    Aapcs { unwind: bool },\n+    Win64 { unwind: bool },\n+    SysV64 { unwind: bool },\n     PtxKernel,\n     Msp430Interrupt,\n     X86Interrupt,\n@@ -50,16 +50,22 @@ const AbiDatas: &[AbiData] = &[\n     AbiData { abi: Abi::Rust, name: \"Rust\" },\n     AbiData { abi: Abi::C { unwind: false }, name: \"C\" },\n     AbiData { abi: Abi::C { unwind: true }, name: \"C-unwind\" },\n-    AbiData { abi: Abi::Cdecl, name: \"cdecl\" },\n+    AbiData { abi: Abi::Cdecl { unwind: false }, name: \"cdecl\" },\n+    AbiData { abi: Abi::Cdecl { unwind: true }, name: \"cdecl-unwind\" },\n     AbiData { abi: Abi::Stdcall { unwind: false }, name: \"stdcall\" },\n     AbiData { abi: Abi::Stdcall { unwind: true }, name: \"stdcall-unwind\" },\n-    AbiData { abi: Abi::Fastcall, name: \"fastcall\" },\n-    AbiData { abi: Abi::Vectorcall, name: \"vectorcall\" },\n+    AbiData { abi: Abi::Fastcall { unwind: false }, name: \"fastcall\" },\n+    AbiData { abi: Abi::Fastcall { unwind: true }, name: \"fastcall-unwind\" },\n+    AbiData { abi: Abi::Vectorcall { unwind: false }, name: \"vectorcall\" },\n+    AbiData { abi: Abi::Vectorcall { unwind: true }, name: \"vectorcall-unwind\" },\n     AbiData { abi: Abi::Thiscall { unwind: false }, name: \"thiscall\" },\n     AbiData { abi: Abi::Thiscall { unwind: true }, name: \"thiscall-unwind\" },\n-    AbiData { abi: Abi::Aapcs, name: \"aapcs\" },\n-    AbiData { abi: Abi::Win64, name: \"win64\" },\n-    AbiData { abi: Abi::SysV64, name: \"sysv64\" },\n+    AbiData { abi: Abi::Aapcs { unwind: false }, name: \"aapcs\" },\n+    AbiData { abi: Abi::Aapcs { unwind: true }, name: \"aapcs-unwind\" },\n+    AbiData { abi: Abi::Win64 { unwind: false }, name: \"win64\" },\n+    AbiData { abi: Abi::Win64 { unwind: true }, name: \"win64-unwind\" },\n+    AbiData { abi: Abi::SysV64 { unwind: false }, name: \"sysv64\" },\n+    AbiData { abi: Abi::SysV64 { unwind: true }, name: \"sysv64-unwind\" },\n     AbiData { abi: Abi::PtxKernel, name: \"ptx-kernel\" },\n     AbiData { abi: Abi::Msp430Interrupt, name: \"msp430-interrupt\" },\n     AbiData { abi: Abi::X86Interrupt, name: \"x86-interrupt\" },\n@@ -101,32 +107,38 @@ impl Abi {\n             C { unwind: false } => 1,\n             C { unwind: true } => 2,\n             // Platform-specific ABIs\n-            Cdecl => 3,\n-            Stdcall { unwind: false } => 4,\n-            Stdcall { unwind: true } => 5,\n-            Fastcall => 6,\n-            Vectorcall => 7,\n-            Thiscall { unwind: false } => 8,\n-            Thiscall { unwind: true } => 9,\n-            Aapcs => 10,\n-            Win64 => 11,\n-            SysV64 => 12,\n-            PtxKernel => 13,\n-            Msp430Interrupt => 14,\n-            X86Interrupt => 15,\n-            AmdGpuKernel => 16,\n-            EfiApi => 17,\n-            AvrInterrupt => 18,\n-            AvrNonBlockingInterrupt => 19,\n-            CCmseNonSecureCall => 20,\n-            Wasm => 21,\n+            Cdecl { unwind: false } => 3,\n+            Cdecl { unwind: true } => 4,\n+            Stdcall { unwind: false } => 5,\n+            Stdcall { unwind: true } => 6,\n+            Fastcall { unwind: false } => 7,\n+            Fastcall { unwind: true } => 8,\n+            Vectorcall { unwind: false } => 9,\n+            Vectorcall { unwind: true } => 10,\n+            Thiscall { unwind: false } => 11,\n+            Thiscall { unwind: true } => 12,\n+            Aapcs { unwind: false } => 13,\n+            Aapcs { unwind: true } => 14,\n+            Win64 { unwind: false } => 15,\n+            Win64 { unwind: true } => 16,\n+            SysV64 { unwind: false } => 17,\n+            SysV64 { unwind: true } => 18,\n+            PtxKernel => 19,\n+            Msp430Interrupt => 20,\n+            X86Interrupt => 21,\n+            AmdGpuKernel => 22,\n+            EfiApi => 23,\n+            AvrInterrupt => 24,\n+            AvrNonBlockingInterrupt => 25,\n+            CCmseNonSecureCall => 26,\n+            Wasm => 27,\n             // Cross-platform ABIs\n-            System { unwind: false } => 22,\n-            System { unwind: true } => 23,\n-            RustIntrinsic => 24,\n-            RustCall => 25,\n-            PlatformIntrinsic => 26,\n-            Unadjusted => 27,\n+            System { unwind: false } => 28,\n+            System { unwind: true } => 29,\n+            RustIntrinsic => 30,\n+            RustCall => 31,\n+            PlatformIntrinsic => 32,\n+            Unadjusted => 33,\n         };\n         debug_assert!(\n             AbiDatas"}, {"sha": "4407f22b9059923dcfa25b7843f708c0953efb3f", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f", "patch": "@@ -1559,15 +1559,15 @@ impl Target {\n                 Abi::Stdcall { unwind }\n             }\n             Abi::System { unwind } => Abi::C { unwind },\n-            Abi::EfiApi if self.arch == \"x86_64\" => Abi::Win64,\n+            Abi::EfiApi if self.arch == \"x86_64\" => Abi::Win64 { unwind: false },\n             Abi::EfiApi => Abi::C { unwind: false },\n \n             // See commentary in `is_abi_supported`.\n             Abi::Stdcall { .. } | Abi::Thiscall { .. } if self.arch == \"x86\" => abi,\n             Abi::Stdcall { unwind } | Abi::Thiscall { unwind } => Abi::C { unwind },\n-            Abi::Fastcall if self.arch == \"x86\" => abi,\n-            Abi::Vectorcall if [\"x86\", \"x86_64\"].contains(&&self.arch[..]) => abi,\n-            Abi::Fastcall | Abi::Vectorcall => Abi::C { unwind: false },\n+            Abi::Fastcall { .. } if self.arch == \"x86\" => abi,\n+            Abi::Vectorcall { .. } if [\"x86\", \"x86_64\"].contains(&&self.arch[..]) => abi,\n+            Abi::Fastcall { unwind } | Abi::Vectorcall { unwind } => Abi::C { unwind },\n \n             abi => abi,\n         }\n@@ -1584,12 +1584,12 @@ impl Target {\n             | RustCall\n             | PlatformIntrinsic\n             | Unadjusted\n-            | Cdecl\n+            | Cdecl { .. }\n             | EfiApi => true,\n             X86Interrupt => [\"x86\", \"x86_64\"].contains(&&self.arch[..]),\n-            Aapcs => \"arm\" == self.arch,\n+            Aapcs { .. } => \"arm\" == self.arch,\n             CCmseNonSecureCall => [\"arm\", \"aarch64\"].contains(&&self.arch[..]),\n-            Win64 | SysV64 => self.arch == \"x86_64\",\n+            Win64 { .. } | SysV64 { .. } => self.arch == \"x86_64\",\n             PtxKernel => self.arch == \"nvptx64\",\n             Msp430Interrupt => self.arch == \"msp430\",\n             AmdGpuKernel => self.arch == \"amdgcn\",\n@@ -1626,13 +1626,13 @@ impl Target {\n             // > convention is used.\n             //\n             // -- https://docs.microsoft.com/en-us/cpp/cpp/argument-passing-and-naming-conventions\n-            Stdcall { .. } | Fastcall | Vectorcall if self.is_like_windows => true,\n+            Stdcall { .. } | Fastcall { .. } | Vectorcall { .. } if self.is_like_windows => true,\n             // Outside of Windows we want to only support these calling conventions for the\n             // architectures for which these calling conventions are actually well defined.\n-            Stdcall { .. } | Fastcall if self.arch == \"x86\" => true,\n-            Vectorcall if [\"x86\", \"x86_64\"].contains(&&self.arch[..]) => true,\n+            Stdcall { .. } | Fastcall { .. } if self.arch == \"x86\" => true,\n+            Vectorcall { .. } if [\"x86\", \"x86_64\"].contains(&&self.arch[..]) => true,\n             // Return a `None` for other cases so that we know to emit a future compat lint.\n-            Stdcall { .. } | Fastcall | Vectorcall => return None,\n+            Stdcall { .. } | Fastcall { .. } | Vectorcall { .. } => return None,\n         })\n     }\n "}, {"sha": "d415e37ff0116435c67d6a0acf30a6c5d762c9d1", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f", "patch": "@@ -122,7 +122,7 @@ use bounds::Bounds;\n fn require_c_abi_if_c_variadic(tcx: TyCtxt<'_>, decl: &hir::FnDecl<'_>, abi: Abi, span: Span) {\n     match (decl.c_variadic, abi) {\n         // The function has the correct calling convention, or isn't a \"C-variadic\" function.\n-        (false, _) | (true, Abi::C { .. }) | (true, Abi::Cdecl) => {}\n+        (false, _) | (true, Abi::C { .. }) | (true, Abi::Cdecl { .. }) => {}\n         // The function is a \"C-variadic\" function with an incorrect calling convention.\n         (true, _) => {\n             let mut err = struct_span_err!("}, {"sha": "fb32918d5e439450e1ec61a14e5b83f63259ddf2", "filename": "src/doc/unstable-book/src/language-features/c-unwind.md", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fc-unwind.md", "raw_url": "https://github.com/rust-lang/rust/raw/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fc-unwind.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fc-unwind.md?ref=2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f", "patch": "@@ -6,9 +6,20 @@ The tracking issue for this feature is: [#74990]\n \n ------------------------\n \n-Introduces four new ABI strings: \"C-unwind\", \"stdcall-unwind\",\n-\"thiscall-unwind\", and \"system-unwind\". These enable unwinding from other\n-languages (such as C++) into Rust frames and from Rust into other languages.\n+Introduces new ABI strings:\n+- \"C-unwind\"\n+- \"cdecl-unwind\"\n+- \"stdcall-unwind\"\n+- \"fastcall-unwind\"\n+- \"vectorcall-unwind\"\n+- \"thiscall-unwind\"\n+- \"aapcs-unwind\"\n+- \"win64-unwind\"\n+- \"sysv64-unwind\"\n+- \"system-unwind\"\n+\n+These enable unwinding from other languages (such as C++) into Rust frames and\n+from Rust into other languages.\n \n See [RFC 2945] for more information.\n "}, {"sha": "1fe048068601d436e1dc85f71bc23cb446c0caf6", "filename": "src/test/codegen/unwind-abis/aapcs-unwind-abi.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/src%2Ftest%2Fcodegen%2Funwind-abis%2Faapcs-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/src%2Ftest%2Fcodegen%2Funwind-abis%2Faapcs-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Faapcs-unwind-abi.rs?ref=2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f", "patch": "@@ -0,0 +1,31 @@\n+// needs-llvm-components: arm\n+// compile-flags: --target=armv7-unknown-linux-gnueabihf --crate-type=rlib -Cno-prepopulate-passes\n+#![no_core]\n+#![feature(no_core, lang_items, c_unwind)]\n+#[lang=\"sized\"]\n+trait Sized { }\n+\n+// Test that `nounwind` atributes are correctly applied to exported `aapcs` and\n+// `aapcs-unwind` extern functions. `aapcs-unwind` functions MUST NOT have this attribute. We\n+// disable optimizations above to prevent LLVM from inferring the attribute.\n+\n+// CHECK: @rust_item_that_cannot_unwind() unnamed_addr #0 {\n+#[no_mangle]\n+pub extern \"aapcs\" fn rust_item_that_cannot_unwind() {\n+}\n+\n+// CHECK: @rust_item_that_can_unwind() unnamed_addr #1 {\n+#[no_mangle]\n+pub extern \"aapcs-unwind\" fn rust_item_that_can_unwind() {\n+}\n+\n+// Now, make some assertions that the LLVM attributes for these functions are correct.  First, make\n+// sure that the first item is correctly marked with the `nounwind` attribute:\n+//\n+// CHECK: attributes #0 = { {{.*}}nounwind{{.*}} }\n+//\n+// Next, let's assert that the second item, which CAN unwind, does not have this attribute.\n+//\n+// CHECK: attributes #1 = {\n+// CHECK-NOT: nounwind\n+// CHECK: }"}, {"sha": "52e0d2d6e02526ff3a5484bee386e744e8c5eec2", "filename": "src/test/codegen/unwind-abis/cdecl-unwind-abi.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/src%2Ftest%2Fcodegen%2Funwind-abis%2Fcdecl-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/src%2Ftest%2Fcodegen%2Funwind-abis%2Fcdecl-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fcdecl-unwind-abi.rs?ref=2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f", "patch": "@@ -0,0 +1,29 @@\n+// compile-flags: -C opt-level=0\n+\n+// Test that `nounwind` atributes are correctly applied to exported `cdecl` and\n+// `cdecl-unwind` extern functions. `cdecl-unwind` functions MUST NOT have this attribute. We\n+// disable optimizations above to prevent LLVM from inferring the attribute.\n+\n+#![crate_type = \"lib\"]\n+#![feature(c_unwind)]\n+\n+// CHECK: @rust_item_that_cannot_unwind() unnamed_addr #0 {\n+#[no_mangle]\n+pub extern \"cdecl\" fn rust_item_that_cannot_unwind() {\n+}\n+\n+// CHECK: @rust_item_that_can_unwind() unnamed_addr #1 {\n+#[no_mangle]\n+pub extern \"cdecl-unwind\" fn rust_item_that_can_unwind() {\n+}\n+\n+// Now, make some assertions that the LLVM attributes for these functions are correct.  First, make\n+// sure that the first item is correctly marked with the `nounwind` attribute:\n+//\n+// CHECK: attributes #0 = { {{.*}}nounwind{{.*}} }\n+//\n+// Next, let's assert that the second item, which CAN unwind, does not have this attribute.\n+//\n+// CHECK: attributes #1 = {\n+// CHECK-NOT: nounwind\n+// CHECK: }"}, {"sha": "ed23235ebfa809c08f0e5e1f46915b8982f4818c", "filename": "src/test/codegen/unwind-abis/fastcall-unwind-abi.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/src%2Ftest%2Fcodegen%2Funwind-abis%2Ffastcall-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/src%2Ftest%2Fcodegen%2Funwind-abis%2Ffastcall-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Ffastcall-unwind-abi.rs?ref=2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f", "patch": "@@ -0,0 +1,31 @@\n+// needs-llvm-components: x86\n+// compile-flags: --target=i686-pc-windows-msvc --crate-type=rlib -Cno-prepopulate-passes\n+#![no_core]\n+#![feature(no_core, lang_items, c_unwind)]\n+#[lang=\"sized\"]\n+trait Sized { }\n+\n+// Test that `nounwind` atributes are correctly applied to exported `fastcall` and\n+// `fastcall-unwind` extern functions. `fastcall-unwind` functions MUST NOT have this attribute. We\n+// disable optimizations above to prevent LLVM from inferring the attribute.\n+\n+// CHECK: @rust_item_that_cannot_unwind() unnamed_addr #0 {\n+#[no_mangle]\n+pub extern \"fastcall\" fn rust_item_that_cannot_unwind() {\n+}\n+\n+// CHECK: @rust_item_that_can_unwind() unnamed_addr #1 {\n+#[no_mangle]\n+pub extern \"fastcall-unwind\" fn rust_item_that_can_unwind() {\n+}\n+\n+// Now, make some assertions that the LLVM attributes for these functions are correct.  First, make\n+// sure that the first item is correctly marked with the `nounwind` attribute:\n+//\n+// CHECK: attributes #0 = { {{.*}}nounwind{{.*}} }\n+//\n+// Next, let's assert that the second item, which CAN unwind, does not have this attribute.\n+//\n+// CHECK: attributes #1 = {\n+// CHECK-NOT: nounwind\n+// CHECK: }"}, {"sha": "a38736f2a1f956ab60991d07d10752bca316d959", "filename": "src/test/codegen/unwind-abis/sysv64-unwind-abi.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/src%2Ftest%2Fcodegen%2Funwind-abis%2Fsysv64-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/src%2Ftest%2Fcodegen%2Funwind-abis%2Fsysv64-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fsysv64-unwind-abi.rs?ref=2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f", "patch": "@@ -0,0 +1,31 @@\n+// needs-llvm-components: x86\n+// compile-flags: --target=x86_64-unknown-linux-gnu --crate-type=rlib -Cno-prepopulate-passes\n+#![no_core]\n+#![feature(no_core, lang_items, c_unwind)]\n+#[lang=\"sized\"]\n+trait Sized { }\n+\n+// Test that `nounwind` atributes are correctly applied to exported `sysv64` and\n+// `sysv64-unwind` extern functions. `sysv64-unwind` functions MUST NOT have this attribute. We\n+// disable optimizations above to prevent LLVM from inferring the attribute.\n+\n+// CHECK: @rust_item_that_cannot_unwind() unnamed_addr #0 {\n+#[no_mangle]\n+pub extern \"sysv64\" fn rust_item_that_cannot_unwind() {\n+}\n+\n+// CHECK: @rust_item_that_can_unwind() unnamed_addr #1 {\n+#[no_mangle]\n+pub extern \"sysv64-unwind\" fn rust_item_that_can_unwind() {\n+}\n+\n+// Now, make some assertions that the LLVM attributes for these functions are correct.  First, make\n+// sure that the first item is correctly marked with the `nounwind` attribute:\n+//\n+// CHECK: attributes #0 = { {{.*}}nounwind{{.*}} }\n+//\n+// Next, let's assert that the second item, which CAN unwind, does not have this attribute.\n+//\n+// CHECK: attributes #1 = {\n+// CHECK-NOT: nounwind\n+// CHECK: }"}, {"sha": "0fb9612a5e4e86a3657cbe01982f125884f58c30", "filename": "src/test/codegen/unwind-abis/vectorcall-unwind-abi.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/src%2Ftest%2Fcodegen%2Funwind-abis%2Fvectorcall-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/src%2Ftest%2Fcodegen%2Funwind-abis%2Fvectorcall-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fvectorcall-unwind-abi.rs?ref=2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f", "patch": "@@ -0,0 +1,31 @@\n+// needs-llvm-components: x86\n+// compile-flags: --target=i686-pc-windows-msvc --crate-type=rlib -Cno-prepopulate-passes\n+#![no_core]\n+#![feature(no_core, lang_items, c_unwind, abi_vectorcall)]\n+#[lang=\"sized\"]\n+trait Sized { }\n+\n+// Test that `nounwind` atributes are correctly applied to exported `vectorcall` and\n+// `vectorcall-unwind` extern functions. `vectorcall-unwind` functions MUST NOT have this attribute.\n+// We disable optimizations above to prevent LLVM from inferring the attribute.\n+\n+// CHECK: @rust_item_that_cannot_unwind() unnamed_addr #0 {\n+#[no_mangle]\n+pub extern \"vectorcall\" fn rust_item_that_cannot_unwind() {\n+}\n+\n+// CHECK: @rust_item_that_can_unwind() unnamed_addr #1 {\n+#[no_mangle]\n+pub extern \"vectorcall-unwind\" fn rust_item_that_can_unwind() {\n+}\n+\n+// Now, make some assertions that the LLVM attributes for these functions are correct.  First, make\n+// sure that the first item is correctly marked with the `nounwind` attribute:\n+//\n+// CHECK: attributes #0 = { {{.*}}nounwind{{.*}} }\n+//\n+// Next, let's assert that the second item, which CAN unwind, does not have this attribute.\n+//\n+// CHECK: attributes #1 = {\n+// CHECK-NOT: nounwind\n+// CHECK: }"}, {"sha": "5d8482da63056cdc635d33fdb37eb74900fa035f", "filename": "src/test/codegen/unwind-abis/win64-unwind-abi.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/src%2Ftest%2Fcodegen%2Funwind-abis%2Fwin64-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/src%2Ftest%2Fcodegen%2Funwind-abis%2Fwin64-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fwin64-unwind-abi.rs?ref=2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f", "patch": "@@ -0,0 +1,31 @@\n+// needs-llvm-components: x86\n+// compile-flags: --target=x86_64-unknown-linux-gnu --crate-type=rlib -Cno-prepopulate-passes\n+#![no_core]\n+#![feature(no_core, lang_items, c_unwind)]\n+#[lang=\"sized\"]\n+trait Sized { }\n+\n+// Test that `nounwind` atributes are correctly applied to exported `win64` and\n+// `win64-unwind` extern functions. `win64-unwind` functions MUST NOT have this attribute. We\n+// disable optimizations above to prevent LLVM from inferring the attribute.\n+\n+// CHECK: @rust_item_that_cannot_unwind() unnamed_addr #0 {\n+#[no_mangle]\n+pub extern \"win64\" fn rust_item_that_cannot_unwind() {\n+}\n+\n+// CHECK: @rust_item_that_can_unwind() unnamed_addr #1 {\n+#[no_mangle]\n+pub extern \"win64-unwind\" fn rust_item_that_can_unwind() {\n+}\n+\n+// Now, make some assertions that the LLVM attributes for these functions are correct.  First, make\n+// sure that the first item is correctly marked with the `nounwind` attribute:\n+//\n+// CHECK: attributes #0 = { {{.*}}nounwind{{.*}} }\n+//\n+// Next, let's assert that the second item, which CAN unwind, does not have this attribute.\n+//\n+// CHECK: attributes #1 = {\n+// CHECK-NOT: nounwind\n+// CHECK: }"}, {"sha": "e5aef04b6894eaf1b3a9805eb95e812535754894", "filename": "src/test/ui/codemap_tests/unicode.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr?ref=2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f", "patch": "@@ -4,7 +4,7 @@ error[E0703]: invalid ABI: found `\u8def\u6feb\u72fc\u00e1\u0301\u0301`\n LL | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}\n    |        ^^^^^^^^^ invalid ABI\n    |\n-   = help: valid ABIs: Rust, C, C-unwind, cdecl, stdcall, stdcall-unwind, fastcall, vectorcall, thiscall, thiscall-unwind, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, wasm, system, system-unwind, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n+   = help: valid ABIs: Rust, C, C-unwind, cdecl, cdecl-unwind, stdcall, stdcall-unwind, fastcall, fastcall-unwind, vectorcall, vectorcall-unwind, thiscall, thiscall-unwind, aapcs, aapcs-unwind, win64, win64-unwind, sysv64, sysv64-unwind, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, wasm, system, system-unwind, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n \n error: aborting due to previous error\n "}, {"sha": "5f8d4315de829c48c21c2766f9a8c05ea23c4c1a", "filename": "src/test/ui/parser/issues/issue-8537.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-8537.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-8537.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-8537.stderr?ref=2a8dbdb1e2d9f44e7971d9a70b41d4d86db0112f", "patch": "@@ -4,7 +4,7 @@ error[E0703]: invalid ABI: found `invalid-ab_isize`\n LL |   \"invalid-ab_isize\"\n    |   ^^^^^^^^^^^^^^^^^^ invalid ABI\n    |\n-   = help: valid ABIs: Rust, C, C-unwind, cdecl, stdcall, stdcall-unwind, fastcall, vectorcall, thiscall, thiscall-unwind, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, wasm, system, system-unwind, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n+   = help: valid ABIs: Rust, C, C-unwind, cdecl, cdecl-unwind, stdcall, stdcall-unwind, fastcall, fastcall-unwind, vectorcall, vectorcall-unwind, thiscall, thiscall-unwind, aapcs, aapcs-unwind, win64, win64-unwind, sysv64, sysv64-unwind, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, wasm, system, system-unwind, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n \n error: aborting due to previous error\n "}]}