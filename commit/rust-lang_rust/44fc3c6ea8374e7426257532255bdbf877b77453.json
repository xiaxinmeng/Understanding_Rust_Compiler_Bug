{"sha": "44fc3c6ea8374e7426257532255bdbf877b77453", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZmMzYzZlYTgzNzRlNzQyNjI1NzUzMjI1NWJkYmY4NzdiNzc0NTM=", "commit": {"author": {"name": "Guillaume Pinot", "email": "texitoi@texitoi.eu", "date": "2013-12-01T17:50:34Z"}, "committer": {"name": "Guillaume Pinot", "email": "texitoi@texitoi.eu", "date": "2013-12-03T16:31:15Z"}, "message": "add MutableVector::mut_split(self, pred) -> DoubleEndedIterator<&mut [T]>\n\nThis method is the mutable version of ImmutableVector::split.  It is\na DoubleEndedIterator, making mut_rsplit irrelevent.  The size_hint\nmethod is not optimal because of #9629.\n\nAt the same time, clarify *split* iterator doc.", "tree": {"sha": "26ff28152c27af290baa544b46d9feaf3b1edcfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26ff28152c27af290baa544b46d9feaf3b1edcfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44fc3c6ea8374e7426257532255bdbf877b77453", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44fc3c6ea8374e7426257532255bdbf877b77453", "html_url": "https://github.com/rust-lang/rust/commit/44fc3c6ea8374e7426257532255bdbf877b77453", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44fc3c6ea8374e7426257532255bdbf877b77453/comments", "author": {"login": "TeXitoi", "id": 5787066, "node_id": "MDQ6VXNlcjU3ODcwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5787066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TeXitoi", "html_url": "https://github.com/TeXitoi", "followers_url": "https://api.github.com/users/TeXitoi/followers", "following_url": "https://api.github.com/users/TeXitoi/following{/other_user}", "gists_url": "https://api.github.com/users/TeXitoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TeXitoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TeXitoi/subscriptions", "organizations_url": "https://api.github.com/users/TeXitoi/orgs", "repos_url": "https://api.github.com/users/TeXitoi/repos", "events_url": "https://api.github.com/users/TeXitoi/events{/privacy}", "received_events_url": "https://api.github.com/users/TeXitoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TeXitoi", "id": 5787066, "node_id": "MDQ6VXNlcjU3ODcwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5787066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TeXitoi", "html_url": "https://github.com/TeXitoi", "followers_url": "https://api.github.com/users/TeXitoi/followers", "following_url": "https://api.github.com/users/TeXitoi/following{/other_user}", "gists_url": "https://api.github.com/users/TeXitoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TeXitoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TeXitoi/subscriptions", "organizations_url": "https://api.github.com/users/TeXitoi/orgs", "repos_url": "https://api.github.com/users/TeXitoi/repos", "events_url": "https://api.github.com/users/TeXitoi/events{/privacy}", "received_events_url": "https://api.github.com/users/TeXitoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25bb1a406c1b66b8df89d431046cae591593dc01", "url": "https://api.github.com/repos/rust-lang/rust/commits/25bb1a406c1b66b8df89d431046cae591593dc01", "html_url": "https://github.com/rust-lang/rust/commit/25bb1a406c1b66b8df89d431046cae591593dc01"}], "stats": {"total": 114, "additions": 110, "deletions": 4}, "files": [{"sha": "621a0be60b373581be23223c44dd9d8d204a5308", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 110, "deletions": 4, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/44fc3c6ea8374e7426257532255bdbf877b77453/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44fc3c6ea8374e7426257532255bdbf877b77453/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=44fc3c6ea8374e7426257532255bdbf877b77453", "patch": "@@ -858,20 +858,24 @@ pub trait ImmutableVector<'self, T> {\n     /// Returns a reversed iterator over a vector\n     fn rev_iter(self) -> RevIterator<'self, T>;\n     /// Returns an iterator over the subslices of the vector which are\n-    /// separated by elements that match `pred`.\n+    /// separated by elements that match `pred`.  The matched element\n+    /// is not contained in the subslices.\n     fn split(self, pred: 'self |&T| -> bool) -> SplitIterator<'self, T>;\n     /// Returns an iterator over the subslices of the vector which are\n     /// separated by elements that match `pred`, limited to splitting\n-    /// at most `n` times.\n+    /// at most `n` times.  The matched element is not contained in\n+    /// the subslices.\n     fn splitn(self, n: uint, pred: 'self |&T| -> bool) -> SplitIterator<'self, T>;\n     /// Returns an iterator over the subslices of the vector which are\n     /// separated by elements that match `pred`. This starts at the\n-    /// end of the vector and works backwards.\n+    /// end of the vector and works backwards.  The matched element is\n+    /// not contained in the subslices.\n     fn rsplit(self, pred: 'self |&T| -> bool) -> RSplitIterator<'self, T>;\n     /// Returns an iterator over the subslices of the vector which are\n     /// separated by elements that match `pred` limited to splitting\n     /// at most `n` times. This starts at the end of the vector and\n-    /// works backwards.\n+    /// works backwards.  The matched element is not contained in the\n+    /// subslices.\n     fn rsplitn(self,  n: uint, pred: 'self |&T| -> bool) -> RSplitIterator<'self, T>;\n \n     /**\n@@ -1933,6 +1937,11 @@ pub trait MutableVector<'self, T> {\n     /// Returns a reversed iterator that allows modifying each value\n     fn mut_rev_iter(self) -> MutRevIterator<'self, T>;\n \n+    /// Returns an iterator over the mutable subslices of the vector\n+    /// which are separated by elements that match `pred`.  The\n+    /// matched element is not contained in the subslices.\n+    fn mut_split(self, pred: 'self |&T| -> bool) -> MutSplitIterator<'self, T>;\n+\n     /**\n      * Returns an iterator over `size` elements of the vector at a time.\n      * The chunks are mutable and do not overlap. If `size` does not divide the\n@@ -2081,6 +2090,11 @@ impl<'self,T> MutableVector<'self, T> for &'self mut [T] {\n         self.mut_iter().invert()\n     }\n \n+    #[inline]\n+    fn mut_split(self, pred: 'self |&T| -> bool) -> MutSplitIterator<'self, T> {\n+        MutSplitIterator { v: self, pred: pred, finished: false }\n+    }\n+\n     #[inline]\n     fn mut_chunks(self, chunk_size: uint) -> MutChunkIter<'self, T> {\n         assert!(chunk_size > 0);\n@@ -2575,6 +2589,73 @@ impl<'self, T> Clone for VecIterator<'self, T> {\n iterator!{struct VecMutIterator -> *mut T, &'self mut T}\n pub type MutRevIterator<'self, T> = Invert<VecMutIterator<'self, T>>;\n \n+/// An iterator over the subslices of the vector which are separated\n+/// by elements that match `pred`.\n+pub struct MutSplitIterator<'self, T> {\n+    priv v: &'self mut [T],\n+    priv pred: 'self |t: &T| -> bool,\n+    priv finished: bool\n+}\n+\n+impl<'self, T> Iterator<&'self mut [T]> for MutSplitIterator<'self, T> {\n+    #[inline]\n+    fn next(&mut self) -> Option<&'self mut [T]> {\n+        if self.finished { return None; }\n+\n+        match self.v.iter().position(|x| (self.pred)(x)) {\n+            None => {\n+                self.finished = true;\n+                let tmp = util::replace(&mut self.v, &mut []);\n+                let len = tmp.len();\n+                let (head, tail) = tmp.mut_split_at(len);\n+                self.v = tail;\n+                Some(head)\n+            }\n+            Some(idx) => {\n+                let tmp = util::replace(&mut self.v, &mut []);\n+                let (head, tail) = tmp.mut_split_at(idx);\n+                self.v = tail.mut_slice_from(1);\n+                Some(head)\n+            }\n+        }\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        if self.finished { return (0, Some(0)) }\n+\n+        // if the predicate doesn't match anything, we yield one slice\n+        // if it matches every element, we yield len+1 empty slices.\n+        // FIXME #9629\n+        //(1, Some(self.v.len() + 1))\n+        (1, None)\n+    }\n+}\n+\n+impl<'self, T> DoubleEndedIterator<&'self mut [T]> for MutSplitIterator<'self, T> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<&'self mut [T]> {\n+        if self.finished { return None; }\n+\n+        match self.v.iter().rposition(|x| (self.pred)(x)) {\n+            None => {\n+                self.finished = true;\n+                let tmp = util::replace(&mut self.v, &mut []);\n+                let len = tmp.len();\n+                let (head, tail) = tmp.mut_split_at(len);\n+                self.v = tail;\n+                Some(head)\n+            }\n+            Some(idx) => {\n+                let tmp = util::replace(&mut self.v, &mut []);\n+                let (head, tail) = tmp.mut_split_at(idx);\n+                self.v = head;\n+                Some(tail.mut_slice_from(1))\n+            }\n+        }\n+    }\n+}\n+\n /// An iterator over a vector in (non-overlapping) mutable chunks (`size`  elements at a time). When\n /// the vector len is not evenly divided by the chunk size, the last slice of the iteration will be\n /// the remainder.\n@@ -4038,6 +4119,31 @@ mod tests {\n         x.pop_ref();\n     }\n \n+    #[test]\n+    fn test_mut_splitator() {\n+        let mut xs = [0,1,0,2,3,0,0,4,5,0];\n+        assert_eq!(xs.mut_split(|x| *x == 0).len(), 6);\n+        for slice in xs.mut_split(|x| *x == 0) {\n+            slice.reverse();\n+        }\n+        assert_eq!(xs, [0,1,0,3,2,0,0,5,4,0]);\n+\n+        let mut xs = [0,1,0,2,3,0,0,4,5,0,6,7];\n+        for slice in xs.mut_split(|x| *x == 0).take(5) {\n+            slice.reverse();\n+        }\n+        assert_eq!(xs, [0,1,0,3,2,0,0,5,4,0,6,7]);\n+    }\n+\n+    #[test]\n+    fn test_mut_splitator_invert() {\n+        let mut xs = [1,2,0,3,4,0,0,5,6,0];\n+        for slice in xs.mut_split(|x| *x == 0).invert().take(4) {\n+            slice.reverse();\n+        }\n+        assert_eq!(xs, [1,2,0,4,3,0,0,6,5,0]);\n+    }\n+\n     #[test]\n     fn test_mut_chunks() {\n         let mut v = [0u8, 1, 2, 3, 4, 5, 6];"}]}