{"sha": "c681cf781b440620aca8cad4be9b76a477fc6c1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ODFjZjc4MWI0NDA2MjBhY2E4Y2FkNGJlOWI3NmE0NzdmYzZjMWE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-09-14T14:36:27Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-09-14T14:36:39Z"}, "message": "def_collector: Factor out common field handling code", "tree": {"sha": "ecfeae3f9845d82be170b62441ffb2b2f4798788", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecfeae3f9845d82be170b62441ffb2b2f4798788"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c681cf781b440620aca8cad4be9b76a477fc6c1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c681cf781b440620aca8cad4be9b76a477fc6c1a", "html_url": "https://github.com/rust-lang/rust/commit/c681cf781b440620aca8cad4be9b76a477fc6c1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c681cf781b440620aca8cad4be9b76a477fc6c1a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc9f13e42470da7e3b1e2f870d1719895484292f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc9f13e42470da7e3b1e2f870d1719895484292f", "html_url": "https://github.com/rust-lang/rust/commit/fc9f13e42470da7e3b1e2f870d1719895484292f"}], "stats": {"total": 47, "additions": 21, "deletions": 26}, "files": [{"sha": "d1cc7a8ce988fd30efc58a0bb6ccfd7418a18c92", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 21, "deletions": 26, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c681cf781b440620aca8cad4be9b76a477fc6c1a/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c681cf781b440620aca8cad4be9b76a477fc6c1a/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=c681cf781b440620aca8cad4be9b76a477fc6c1a", "patch": "@@ -31,7 +31,7 @@ impl<'a> DefCollector<'a> {\n         self.definitions.create_def_with_parent(parent_def, node_id, data, self.expansion, span)\n     }\n \n-    pub fn with_parent<F: FnOnce(&mut Self)>(&mut self, parent_def: DefIndex, f: F) {\n+    fn with_parent<F: FnOnce(&mut Self)>(&mut self, parent_def: DefIndex, f: F) {\n         let orig_parent_def = std::mem::replace(&mut self.parent_def, parent_def);\n         f(self);\n         self.parent_def = orig_parent_def;\n@@ -74,6 +74,22 @@ impl<'a> DefCollector<'a> {\n         })\n     }\n \n+    fn collect_field(&mut self, field: &'a StructField, index: Option<usize>) {\n+        if field.is_placeholder {\n+            self.visit_macro_invoc(field.id);\n+        } else {\n+            let name = field.ident.map(|ident| ident.name)\n+                .or_else(|| index.map(sym::integer))\n+                .unwrap_or_else(|| {\n+                    let node_id = NodeId::placeholder_from_expn_id(self.expansion);\n+                    sym::integer(self.definitions.placeholder_field_indices[&node_id])\n+                })\n+                .as_interned_str();\n+            let def = self.create_def(field.id, DefPathData::ValueNs(name), field.span);\n+            self.with_parent(def, |this| visit::walk_struct_field(this, field));\n+        }\n+    }\n+\n     pub fn visit_macro_invoc(&mut self, id: NodeId) {\n         self.definitions.set_invocation_parent(id.placeholder_to_expn_id(), self.parent_def);\n     }\n@@ -174,17 +190,10 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         // It currently holds because only inert attributes are accepted on fields,\n         // and every such attribute expands into a single field after it's resolved.\n         for (index, field) in data.fields().iter().enumerate() {\n-            if field.is_placeholder {\n-                self.visit_macro_invoc(field.id);\n+            self.collect_field(field, Some(index));\n+            if field.is_placeholder && field.ident.is_none() {\n                 self.definitions.placeholder_field_indices.insert(field.id, index);\n-                continue;\n             }\n-            let name = field.ident.map(|ident| ident.name)\n-                .unwrap_or_else(|| sym::integer(index));\n-            let def = self.create_def(field.id,\n-                                      DefPathData::ValueNs(name.as_interned_str()),\n-                                      field.span);\n-            self.with_parent(def, |this| visit::walk_struct_field(this, field));\n         }\n     }\n \n@@ -344,21 +353,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     // This method is called only when we are visiting an individual field\n     // after expanding an attribute on it.\n-    fn visit_struct_field(&mut self, sf: &'a StructField) {\n-        if sf.is_placeholder {\n-            self.visit_macro_invoc(sf.id)\n-        } else {\n-            let name = sf.ident.map_or_else(\n-                || {\n-                    let expn_id = NodeId::placeholder_from_expn_id(self.expansion);\n-                    sym::integer(self.definitions.placeholder_field_indices[&expn_id])\n-                },\n-                |ident| ident.name,\n-            );\n-            let def = self.create_def(sf.id,\n-                                        DefPathData::ValueNs(name.as_interned_str()),\n-                                        sf.span);\n-            self.with_parent(def, |this| visit::walk_struct_field(this, sf));\n-        }\n+    fn visit_struct_field(&mut self, field: &'a StructField) {\n+        self.collect_field(field, None);\n     }\n }"}]}