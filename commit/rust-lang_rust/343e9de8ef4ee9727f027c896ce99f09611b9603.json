{"sha": "343e9de8ef4ee9727f027c896ce99f09611b9603", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0M2U5ZGU4ZWY0ZWU5NzI3ZjAyN2M4OTZjZTk5ZjA5NjExYjk2MDM=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-12T00:00:58Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-12T22:08:36Z"}, "message": "Proper locking with blocked_on()/wakeup() in rust_port. Closes #2787. Closes #1923.", "tree": {"sha": "203e9084453699cb8b7175a75438cfd5c9ed8d00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/203e9084453699cb8b7175a75438cfd5c9ed8d00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/343e9de8ef4ee9727f027c896ce99f09611b9603", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/343e9de8ef4ee9727f027c896ce99f09611b9603", "html_url": "https://github.com/rust-lang/rust/commit/343e9de8ef4ee9727f027c896ce99f09611b9603", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/343e9de8ef4ee9727f027c896ce99f09611b9603/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b897696a3abde84e57cda3f6e4267be3b647835c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b897696a3abde84e57cda3f6e4267be3b647835c", "html_url": "https://github.com/rust-lang/rust/commit/b897696a3abde84e57cda3f6e4267be3b647835c"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "919dadd4044eb3604d27ceaa91d7ea9e4556cab2", "filename": "src/rt/rust_port.cpp", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/343e9de8ef4ee9727f027c896ce99f09611b9603/src%2Frt%2Frust_port.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/343e9de8ef4ee9727f027c896ce99f09611b9603/src%2Frt%2Frust_port.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.cpp?ref=343e9de8ef4ee9727f027c896ce99f09611b9603", "patch": "@@ -26,9 +26,11 @@ void rust_port::deref() {\n     scoped_lock with(ref_lock);\n     ref_count--;\n     if (!ref_count) {\n+        // The port owner is waiting for the port to be detached (if it\n+        // hasn't already been killed)\n+        scoped_lock with(task->lifecycle_lock);\n         if (task->blocked_on(&detach_cond)) {\n-            // The port owner is waiting for the port to be detached\n-            task->wakeup(&detach_cond);\n+            task->wakeup_inner(&detach_cond);\n         }\n     }\n }\n@@ -64,12 +66,15 @@ void rust_port::send(void *sptr) {\n         assert(!buffer.is_empty() &&\n                \"rust_chan::transmit with nothing to send.\");\n \n-        if (task->blocked_on(this)) {\n-            KLOG(kernel, comm, \"dequeued in rendezvous_ptr\");\n-            buffer.dequeue(task->rendezvous_ptr);\n-            task->rendezvous_ptr = 0;\n-            task->wakeup(this);\n-            did_rendezvous = true;\n+        {\n+            scoped_lock with(task->lifecycle_lock);\n+            if (task->blocked_on(this)) {\n+                KLOG(kernel, comm, \"dequeued in rendezvous_ptr\");\n+                buffer.dequeue(task->rendezvous_ptr);\n+                task->rendezvous_ptr = 0;\n+                task->wakeup_inner(this);\n+                did_rendezvous = true;\n+            }\n         }\n     }\n \n@@ -78,11 +83,8 @@ void rust_port::send(void *sptr) {\n         // it may be waiting on a group of ports\n \n         rust_port_selector *port_selector = task->get_port_selector();\n-        // This check is not definitive. The port selector will take a lock\n-        // and check again whether the task is still blocked.\n-        if (task->blocked_on(port_selector)) {\n-            port_selector->msg_sent_on(this);\n-        }\n+        // The port selector will check if the task is blocked, not us.\n+        port_selector->msg_sent_on(this);\n     }\n }\n "}, {"sha": "52f9e0c3a01fd7805cc73a55e5821aaf819c1502", "filename": "src/rt/rust_port_selector.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/343e9de8ef4ee9727f027c896ce99f09611b9603/src%2Frt%2Frust_port_selector.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/343e9de8ef4ee9727f027c896ce99f09611b9603/src%2Frt%2Frust_port_selector.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port_selector.cpp?ref=343e9de8ef4ee9727f027c896ce99f09611b9603", "patch": "@@ -75,7 +75,7 @@ rust_port_selector::msg_sent_on(rust_port *port) {\n \n     // Prevent two ports from trying to wake up the task\n     // simultaneously\n-    scoped_lock with(rendezvous_lock);\n+    scoped_lock with(task->lifecycle_lock);\n \n     if (task->blocked_on(this)) {\n         for (size_t i = 0; i < n_ports; i++) {\n@@ -85,7 +85,7 @@ rust_port_selector::msg_sent_on(rust_port *port) {\n                 n_ports = 0;\n                 *task->rendezvous_ptr = (uintptr_t) port;\n                 task->rendezvous_ptr = NULL;\n-                task->wakeup(this);\n+                task->wakeup_inner(this);\n                 return;\n             }\n         }"}, {"sha": "73f2a9e4a0c3591d5924c3d68a9a7fd561d7d1be", "filename": "src/rt/rust_port_selector.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/343e9de8ef4ee9727f027c896ce99f09611b9603/src%2Frt%2Frust_port_selector.h", "raw_url": "https://github.com/rust-lang/rust/raw/343e9de8ef4ee9727f027c896ce99f09611b9603/src%2Frt%2Frust_port_selector.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port_selector.h?ref=343e9de8ef4ee9727f027c896ce99f09611b9603", "patch": "@@ -9,7 +9,6 @@ class rust_port_selector : public rust_cond {\n  private:\n     rust_port **ports;\n     size_t n_ports;\n-    lock_and_signal rendezvous_lock;\n \n  public:\n     rust_port_selector();"}, {"sha": "3d88c05b3ff9b68791e74c14bf6169fce5cd337d", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/343e9de8ef4ee9727f027c896ce99f09611b9603/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/343e9de8ef4ee9727f027c896ce99f09611b9603/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=343e9de8ef4ee9727f027c896ce99f09611b9603", "patch": "@@ -243,7 +243,7 @@ rust_task::must_fail_from_being_killed_inner() {\n // Only run this on the rust stack\n void\n rust_task::yield(bool *killed) {\n-    // FIXME (#2787): clean this up\n+    // FIXME (#2875): clean this up\n     if (must_fail_from_being_killed()) {\n         {\n             scoped_lock with(lifecycle_lock);\n@@ -346,12 +346,11 @@ void rust_task::assert_is_running()\n     assert(state == task_state_running);\n }\n \n-// FIXME (#2851, #2787): This is only used by rust_port/rust_port selector,\n-// and is inherently racy. Get rid of it.\n+// FIXME (#2851) Remove this code when rust_port goes away?\n bool\n rust_task::blocked_on(rust_cond *on)\n {\n-    scoped_lock with(lifecycle_lock);\n+    lifecycle_lock.must_have_lock();\n     return cond == on;\n }\n "}, {"sha": "1d87a0ed56c1b8ebc3519e6113d463e30c7b0265", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/343e9de8ef4ee9727f027c896ce99f09611b9603/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/343e9de8ef4ee9727f027c896ce99f09611b9603/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=343e9de8ef4ee9727f027c896ce99f09611b9603", "patch": "@@ -226,8 +226,11 @@ rust_task : public kernel_owned<rust_task>\n                                char const *file,\n                                size_t line);\n \n+    friend class rust_port;\n+    friend class rust_port_selector;\n     bool block_inner(rust_cond *on, const char* name);\n     void wakeup_inner(rust_cond *from);\n+    bool blocked_on(rust_cond *cond);\n \n public:\n \n@@ -243,7 +246,6 @@ rust_task : public kernel_owned<rust_task>\n                void *args);\n     void start();\n     void assert_is_running();\n-    bool blocked_on(rust_cond *cond); // FIXME (#2851) Get rid of this.\n \n     void *malloc(size_t sz, const char *tag, type_desc *td=0);\n     void *realloc(void *data, size_t sz);\n@@ -435,7 +437,7 @@ rust_task::call_on_rust_stack(void *args, void *fn_ptr) {\n \n     bool had_reentered_rust_stack = reentered_rust_stack;\n     {\n-        // FIXME (#2787) This must be racy. Figure it out.\n+        // FIXME (#2875) This must be racy. Figure it out.\n         scoped_lock with(lifecycle_lock);\n         reentered_rust_stack = true;\n     }"}]}