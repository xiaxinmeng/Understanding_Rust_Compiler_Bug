{"sha": "7ea93abfb2c11111496d6e1f5b82fc21c2da27ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYTkzYWJmYjJjMTExMTE0OTZkNmUxZjViODJmYzIxYzJkYTI3YWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-29T19:36:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-29T19:36:03Z"}, "message": "Auto merge of #21691 - edwardw:double-closure, r=nikomatsakis\n\nIt was considered to be impossible but actually it can\r\nhappen for nested closures. Also, because there must\r\nbe nested closures when this happens, we can use more\r\ntargeted help message.\r\n\r\nCloses #21390\r\nCloses #21600", "tree": {"sha": "baa10823066bd6782ea843a403e5652888ed319a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baa10823066bd6782ea843a403e5652888ed319a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ea93abfb2c11111496d6e1f5b82fc21c2da27ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ea93abfb2c11111496d6e1f5b82fc21c2da27ad", "html_url": "https://github.com/rust-lang/rust/commit/7ea93abfb2c11111496d6e1f5b82fc21c2da27ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ea93abfb2c11111496d6e1f5b82fc21c2da27ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "265a23320dbeaeca45b889cfea684d71dec1b8e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/265a23320dbeaeca45b889cfea684d71dec1b8e6", "html_url": "https://github.com/rust-lang/rust/commit/265a23320dbeaeca45b889cfea684d71dec1b8e6"}, {"sha": "2c6440e2a2b725807c54e713c7f472b4df4a9218", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c6440e2a2b725807c54e713c7f472b4df4a9218", "html_url": "https://github.com/rust-lang/rust/commit/2c6440e2a2b725807c54e713c7f472b4df4a9218"}], "stats": {"total": 49, "additions": 38, "deletions": 11}, "files": [{"sha": "e5271cfde5a447f63063c74076afef3d430c07cf", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7ea93abfb2c11111496d6e1f5b82fc21c2da27ad/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea93abfb2c11111496d6e1f5b82fc21c2da27ad/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=7ea93abfb2c11111496d6e1f5b82fc21c2da27ad", "patch": "@@ -770,16 +770,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             MutabilityViolation => {\n                 \"cannot assign to data\"\n             }\n-            BorrowViolation(euv::ClosureCapture(_)) => {\n-                // I don't think we can get aliasability violations\n-                // with closure captures, so no need to come up with a\n-                // good error message. The reason this cannot happen\n-                // is because we only capture local variables in\n-                // closures, and those are never aliasable.\n-                self.tcx.sess.span_bug(\n-                    span,\n-                    \"aliasability violation with closure\");\n-            }\n+            BorrowViolation(euv::ClosureCapture(_)) |\n             BorrowViolation(euv::OverloadedOperator) |\n             BorrowViolation(euv::AddrOf) |\n             BorrowViolation(euv::AutoRef) |\n@@ -809,8 +800,17 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 self.tcx.sess.span_err(span,\n                                        format!(\"{} in a captured outer \\\n                                                variable in an `Fn` closure\", prefix).as_slice());\n-                span_help!(self.tcx.sess, self.tcx.map.span(id),\n+                if let BorrowViolation(euv::ClosureCapture(_)) = kind {\n+                    // The aliasability violation with closure captures can\n+                    // happen for nested closures, so we know the enclosing\n+                    // closure incorrectly accepts an `Fn` while it needs to\n+                    // be `FnMut`.\n+                    span_help!(self.tcx.sess, self.tcx.map.span(id),\n+                           \"consider changing this to accept closures that implement `FnMut`\");\n+                } else {\n+                    span_help!(self.tcx.sess, self.tcx.map.span(id),\n                            \"consider changing this closure to take self by mutable reference\");\n+                }\n             }\n             mc::AliasableStatic(..) |\n             mc::AliasableStaticMut(..) => {"}, {"sha": "f9a79dbb9c32a2f91c0e6e8926095f452cb2f889", "filename": "src/test/compile-fail/issue-21600.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7ea93abfb2c11111496d6e1f5b82fc21c2da27ad/src%2Ftest%2Fcompile-fail%2Fissue-21600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea93abfb2c11111496d6e1f5b82fc21c2da27ad/src%2Ftest%2Fcompile-fail%2Fissue-21600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21600.rs?ref=7ea93abfb2c11111496d6e1f5b82fc21c2da27ad", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn call_it<F>(f: F) where F: Fn() { f(); }\n+\n+struct A;\n+\n+impl A {\n+    fn gen(&self) {}\n+    fn gen_mut(&mut self) {}\n+}\n+\n+fn main() {\n+    let mut x = A;\n+    call_it(|| {    //~ HELP consider changing this to accept closures that implement `FnMut`\n+        call_it(|| x.gen());\n+        call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer\n+        //~^ ERROR cannot borrow data mutably in a captured outer\n+    });\n+}"}]}