{"sha": "101a146db994f61d6ef489ebb8ad8d506e1159cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMWExNDZkYjk5NGY2MWQ2ZWY0ODllYmI4YWQ4ZDUwNmUxMTU5Y2Q=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2021-07-11T15:45:12Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2021-07-11T15:45:12Z"}, "message": "Fix #85462 by adding a marker flag\n\nThis will not affect ABI since the other variant of the enum is bigger.\nIt may break some code, but that would be very strange: usually people\ndon't continue after the first `Done` (or `None` for a normal iterator).", "tree": {"sha": "aeb11c80de3154af096a19b4eac1a0c7cbdb5dac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeb11c80de3154af096a19b4eac1a0c7cbdb5dac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/101a146db994f61d6ef489ebb8ad8d506e1159cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/101a146db994f61d6ef489ebb8ad8d506e1159cd", "html_url": "https://github.com/rust-lang/rust/commit/101a146db994f61d6ef489ebb8ad8d506e1159cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/101a146db994f61d6ef489ebb8ad8d506e1159cd/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "html_url": "https://github.com/rust-lang/rust/commit/4581c4ef6ff388dd624bdceb484fb03c33d7bae4"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "55ac1aa765c1fabc0cdf6166a1d9dfabfb9c032e", "filename": "library/core/src/str/pattern.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/101a146db994f61d6ef489ebb8ad8d506e1159cd/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101a146db994f61d6ef489ebb8ad8d506e1159cd/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs?ref=101a146db994f61d6ef489ebb8ad8d506e1159cd", "patch": "@@ -928,6 +928,8 @@ struct EmptyNeedle {\n     end: usize,\n     is_match_fw: bool,\n     is_match_bw: bool,\n+    // Needed in case of an empty haystack, see #85462\n+    is_finished: bool,\n }\n \n impl<'a, 'b> StrSearcher<'a, 'b> {\n@@ -941,6 +943,7 @@ impl<'a, 'b> StrSearcher<'a, 'b> {\n                     end: haystack.len(),\n                     is_match_fw: true,\n                     is_match_bw: true,\n+                    is_finished: false,\n                 }),\n             }\n         } else {\n@@ -966,13 +969,19 @@ unsafe impl<'a, 'b> Searcher<'a> for StrSearcher<'a, 'b> {\n     fn next(&mut self) -> SearchStep {\n         match self.searcher {\n             StrSearcherImpl::Empty(ref mut searcher) => {\n+                if searcher.is_finished {\n+                    return SearchStep::Done;\n+                }\n                 // empty needle rejects every char and matches every empty string between them\n                 let is_match = searcher.is_match_fw;\n                 searcher.is_match_fw = !searcher.is_match_fw;\n                 let pos = searcher.position;\n                 match self.haystack[pos..].chars().next() {\n                     _ if is_match => SearchStep::Match(pos, pos),\n-                    None => SearchStep::Done,\n+                    None => {\n+                        searcher.is_finished = true;\n+                        SearchStep::Done\n+                    }\n                     Some(ch) => {\n                         searcher.position += ch.len_utf8();\n                         SearchStep::Reject(pos, searcher.position)\n@@ -1045,12 +1054,18 @@ unsafe impl<'a, 'b> ReverseSearcher<'a> for StrSearcher<'a, 'b> {\n     fn next_back(&mut self) -> SearchStep {\n         match self.searcher {\n             StrSearcherImpl::Empty(ref mut searcher) => {\n+                if searcher.is_finished {\n+                    return SearchStep::Done;\n+                }\n                 let is_match = searcher.is_match_bw;\n                 searcher.is_match_bw = !searcher.is_match_bw;\n                 let end = searcher.end;\n                 match self.haystack[..end].chars().next_back() {\n                     _ if is_match => SearchStep::Match(end, end),\n-                    None => SearchStep::Done,\n+                    None => {\n+                        searcher.is_finished = true;\n+                        SearchStep::Done\n+                    }\n                     Some(ch) => {\n                         searcher.end -= ch.len_utf8();\n                         SearchStep::Reject(searcher.end, end)"}]}