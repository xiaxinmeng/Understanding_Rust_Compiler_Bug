{"sha": "5fe58d5c6ee4e9e7b4a643adc0eb66b1a9c16d86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZTU4ZDVjNmVlNGU5ZTdiNGE2NDNhZGMwZWI2NmIxYTljMTZkODY=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-28T21:48:41Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-28T21:48:41Z"}, "message": "Merge pull request #723 from mcarton/swap\n\nSwap lints", "tree": {"sha": "d56c2adddb2dfde0055d078fb619e549c24e7575", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d56c2adddb2dfde0055d078fb619e549c24e7575"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fe58d5c6ee4e9e7b4a643adc0eb66b1a9c16d86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe58d5c6ee4e9e7b4a643adc0eb66b1a9c16d86", "html_url": "https://github.com/rust-lang/rust/commit/5fe58d5c6ee4e9e7b4a643adc0eb66b1a9c16d86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fe58d5c6ee4e9e7b4a643adc0eb66b1a9c16d86/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98eb623043d4a2b0fc265d331f6b4d23bc1d74a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/98eb623043d4a2b0fc265d331f6b4d23bc1d74a6", "html_url": "https://github.com/rust-lang/rust/commit/98eb623043d4a2b0fc265d331f6b4d23bc1d74a6"}, {"sha": "76004306ccf3e3069bdf0928a70895916bea00ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/76004306ccf3e3069bdf0928a70895916bea00ff", "html_url": "https://github.com/rust-lang/rust/commit/76004306ccf3e3069bdf0928a70895916bea00ff"}], "stats": {"total": 190, "additions": 189, "deletions": 1}, "files": [{"sha": "f421cbdb7c9c211cedea5aa0b25a730d5bbe2002", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fe58d5c6ee4e9e7b4a643adc0eb66b1a9c16d86/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/5fe58d5c6ee4e9e7b4a643adc0eb66b1a9c16d86/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=5fe58d5c6ee4e9e7b4a643adc0eb66b1a9c16d86", "patch": "@@ -8,11 +8,12 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 125 lints included in this crate:\n+There are 127 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n [absurd_extreme_comparisons](https://github.com/Manishearth/rust-clippy/wiki#absurd_extreme_comparisons)             | warn    | a comparison involving a maximum or minimum value involves a case that is always true or always false\n+[almost_swapped](https://github.com/Manishearth/rust-clippy/wiki#almost_swapped)                                     | warn    | `foo = bar; bar = foo` sequence\n [approx_constant](https://github.com/Manishearth/rust-clippy/wiki#approx_constant)                                   | warn    | the approximate of a known float constant (in `std::f64::consts` or `std::f32::consts`) is found; suggests to use the constant\n [bad_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#bad_bit_mask)                                         | warn    | expressions of the form `_ & mask == select` that will only ever return `true` or `false` (because in the example `select` containing bits that `mask` doesn't have)\n [block_in_if_condition_expr](https://github.com/Manishearth/rust-clippy/wiki#block_in_if_condition_expr)             | warn    | braces can be eliminated in conditions that are expressions, e.g `if { true } ...`\n@@ -62,6 +63,7 @@ name\n [let_and_return](https://github.com/Manishearth/rust-clippy/wiki#let_and_return)                                     | warn    | creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a block\n [let_unit_value](https://github.com/Manishearth/rust-clippy/wiki#let_unit_value)                                     | warn    | creating a let binding to a value of unit type, which usually can't be used afterwards\n [linkedlist](https://github.com/Manishearth/rust-clippy/wiki#linkedlist)                                             | warn    | usage of LinkedList, usually a vector is faster, or a more specialized data structure like a VecDeque\n+[manual_swap](https://github.com/Manishearth/rust-clippy/wiki#manual_swap)                                           | warn    | manual swap\n [map_clone](https://github.com/Manishearth/rust-clippy/wiki#map_clone)                                               | warn    | using `.map(|x| x.clone())` to clone an iterator or option's contents (recommends `.cloned()` instead)\n [map_entry](https://github.com/Manishearth/rust-clippy/wiki#map_entry)                                               | warn    | use of `contains_key` followed by `insert` on a `HashMap` or `BTreeMap`\n [match_bool](https://github.com/Manishearth/rust-clippy/wiki#match_bool)                                             | warn    | a match on boolean expression; recommends `if..else` block instead"}, {"sha": "5debe2ed50ce6f30a0aede9d4fa19c0e10dca448", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fe58d5c6ee4e9e7b4a643adc0eb66b1a9c16d86/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe58d5c6ee4e9e7b4a643adc0eb66b1a9c16d86/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=5fe58d5c6ee4e9e7b4a643adc0eb66b1a9c16d86", "patch": "@@ -86,6 +86,7 @@ pub mod regex;\n pub mod returns;\n pub mod shadow;\n pub mod strings;\n+pub mod swap;\n pub mod temporary_assignment;\n pub mod transmute;\n pub mod types;\n@@ -167,6 +168,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box copies::CopyAndPaste);\n     reg.register_late_lint_pass(box format::FormatMacLint);\n     reg.register_early_lint_pass(box formatting::Formatting);\n+    reg.register_late_lint_pass(box swap::Swap);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         enum_glob_use::ENUM_GLOB_USE,\n@@ -285,6 +287,8 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,\n         strings::STRING_LIT_AS_BYTES,\n+        swap::ALMOST_SWAPPED,\n+        swap::MANUAL_SWAP,\n         temporary_assignment::TEMPORARY_ASSIGNMENT,\n         transmute::USELESS_TRANSMUTE,\n         types::ABSURD_EXTREME_COMPARISONS,"}, {"sha": "6d7212233fbbbf1b261af2ee6eba7ef79ca659ef", "filename": "src/swap.rs", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/5fe58d5c6ee4e9e7b4a643adc0eb66b1a9c16d86/src%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe58d5c6ee4e9e7b4a643adc0eb66b1a9c16d86/src%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fswap.rs?ref=5fe58d5c6ee4e9e7b4a643adc0eb66b1a9c16d86", "patch": "@@ -0,0 +1,138 @@\n+use rustc::lint::*;\n+use rustc_front::hir::*;\n+use syntax::codemap::mk_sp;\n+use utils::{differing_macro_contexts, snippet_opt, span_lint_and_then, SpanlessEq};\n+\n+/// **What it does:** This lints manual swapping.\n+///\n+/// **Why is this bad?** The `std::mem::swap` function exposes the intent better without\n+/// deinitializing or copying either variable.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust,ignore\n+/// let t = b;\n+/// b = a;\n+/// a = t;\n+/// ```\n+declare_lint! {\n+    pub MANUAL_SWAP,\n+    Warn,\n+    \"manual swap\"\n+}\n+\n+/// **What it does:** This lints `foo = bar; bar = foo` sequences.\n+///\n+/// **Why is this bad?** This looks like a failed attempt to swap.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust,ignore\n+/// a = b;\n+/// b = a;\n+/// ```\n+declare_lint! {\n+    pub ALMOST_SWAPPED,\n+    Warn,\n+    \"`foo = bar; bar = foo` sequence\"\n+}\n+\n+#[derive(Copy,Clone)]\n+pub struct Swap;\n+\n+impl LintPass for Swap {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![MANUAL_SWAP, ALMOST_SWAPPED]\n+    }\n+}\n+\n+impl LateLintPass for Swap {\n+    fn check_block(&mut self, cx: &LateContext, block: &Block) {\n+        check_manual_swap(cx, block);\n+        check_suspicious_swap(cx, block);\n+    }\n+}\n+\n+/// Implementation of the `MANUAL_SWAP` lint.\n+fn check_manual_swap(cx: &LateContext, block: &Block) {\n+    for w in block.stmts.windows(3) {\n+        if_let_chain!{[\n+            // let t = foo();\n+            let StmtDecl(ref tmp, _) = w[0].node,\n+            let DeclLocal(ref tmp) = tmp.node,\n+            let Some(ref tmp_init) = tmp.init,\n+            let PatKind::Ident(_, ref tmp_name, None) = tmp.pat.node,\n+\n+            // foo() = bar();\n+            let StmtSemi(ref first, _) = w[1].node,\n+            let ExprAssign(ref lhs1, ref rhs1) = first.node,\n+\n+            // bar() = t;\n+            let StmtSemi(ref second, _) = w[2].node,\n+            let ExprAssign(ref lhs2, ref rhs2) = second.node,\n+            let ExprPath(None, ref rhs2) = rhs2.node,\n+            rhs2.segments.len() == 1,\n+\n+            tmp_name.node.name.as_str() == rhs2.segments[0].identifier.name.as_str(),\n+            SpanlessEq::new(cx).ignore_fn().eq_expr(tmp_init, lhs1),\n+            SpanlessEq::new(cx).ignore_fn().eq_expr(rhs1, lhs2)\n+        ], {\n+            let (what, lhs, rhs) = if let (Some(first), Some(second)) = (snippet_opt(cx, lhs1.span), snippet_opt(cx, rhs1.span)) {\n+                (format!(\" `{}` and `{}`\", first, second), first, second)\n+            } else {\n+                (\"\".to_owned(), \"\".to_owned(), \"\".to_owned())\n+            };\n+\n+            let span = mk_sp(tmp.span.lo, second.span.hi);\n+\n+            span_lint_and_then(cx,\n+                               MANUAL_SWAP,\n+                               span,\n+                               &format!(\"this looks like you are swapping{} manually\", what),\n+                               |db| {\n+                                   if !what.is_empty() {\n+                                       db.span_suggestion(span, \"try\",\n+                                                          format!(\"std::mem::swap(&mut {}, &mut {})\", lhs, rhs));\n+                                       db.fileline_note(span, \"or maybe you should use `std::mem::replace`?\");\n+                                   }\n+                               });\n+        }}\n+    }\n+}\n+\n+/// Implementation of the `ALMOST_SWAPPED` lint.\n+fn check_suspicious_swap(cx: &LateContext, block: &Block) {\n+    for w in block.stmts.windows(2) {\n+        if_let_chain!{[\n+            let StmtSemi(ref first, _) = w[0].node,\n+            let StmtSemi(ref second, _) = w[1].node,\n+            !differing_macro_contexts(first.span, second.span),\n+            let ExprAssign(ref lhs0, ref rhs0) = first.node,\n+            let ExprAssign(ref lhs1, ref rhs1) = second.node,\n+            SpanlessEq::new(cx).ignore_fn().eq_expr(lhs0, rhs1),\n+            SpanlessEq::new(cx).ignore_fn().eq_expr(lhs1, rhs0)\n+        ], {\n+            let (what, lhs, rhs) = if let (Some(first), Some(second)) = (snippet_opt(cx, lhs0.span), snippet_opt(cx, rhs0.span)) {\n+                (format!(\" `{}` and `{}`\", first, second), first, second)\n+            } else {\n+                (\"\".to_owned(), \"\".to_owned(), \"\".to_owned())\n+            };\n+\n+            let span = mk_sp(first.span.lo, second.span.hi);\n+\n+            span_lint_and_then(cx,\n+                               ALMOST_SWAPPED,\n+                               span,\n+                               &format!(\"this looks like you are trying to swap{}\", what),\n+                               |db| {\n+                                   if !what.is_empty() {\n+                                       db.span_suggestion(span, \"try\",\n+                                                          format!(\"std::mem::swap(&mut {}, &mut {})\", lhs, rhs));\n+                                       db.fileline_note(span, \"or maybe you should use `std::mem::replace`?\");\n+                                   }\n+                               });\n+        }}\n+    }\n+}"}, {"sha": "cc0570e6c631012c7cc5c1937767f5e58938301f", "filename": "tests/compile-fail/swap.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5fe58d5c6ee4e9e7b4a643adc0eb66b1a9c16d86/tests%2Fcompile-fail%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe58d5c6ee4e9e7b4a643adc0eb66b1a9c16d86/tests%2Fcompile-fail%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fswap.rs?ref=5fe58d5c6ee4e9e7b4a643adc0eb66b1a9c16d86", "patch": "@@ -0,0 +1,44 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(clippy)]\n+#![allow(unused_assignments)]\n+\n+struct Foo(u32);\n+\n+fn main() {\n+    let mut a = 42;\n+    let mut b = 1337;\n+\n+    a = b;\n+    b = a;\n+    //~^^ ERROR this looks like you are trying to swap `a` and `b`\n+    //~| HELP try\n+    //~| SUGGESTION std::mem::swap(&mut a, &mut b);\n+    //~| NOTE or maybe you should use `std::mem::replace`?\n+\n+    let t = a;\n+    a = b;\n+    b = t;\n+    //~^^^ ERROR this looks like you are swapping `a` and `b` manually\n+    //~| HELP try\n+    //~| SUGGESTION std::mem::swap(&mut a, &mut b);\n+    //~| NOTE or maybe you should use `std::mem::replace`?\n+\n+    let mut c = Foo(42);\n+\n+    c.0 = a;\n+    a = c.0;\n+    //~^^ ERROR this looks like you are trying to swap `c.0` and `a`\n+    //~| HELP try\n+    //~| SUGGESTION std::mem::swap(&mut c.0, &mut a);\n+    //~| NOTE or maybe you should use `std::mem::replace`?\n+\n+    let t = c.0;\n+    c.0 = a;\n+    a = t;\n+    //~^^^ ERROR this looks like you are swapping `c.0` and `a` manually\n+    //~| HELP try\n+    //~| SUGGESTION std::mem::swap(&mut c.0, &mut a);\n+    //~| NOTE or maybe you should use `std::mem::replace`?\n+}"}]}