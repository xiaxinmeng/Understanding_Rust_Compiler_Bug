{"sha": "d277904582d530feb4701dc76508fdf473cce8f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNzc5MDQ1ODJkNTMwZmViNDcwMWRjNzY1MDhmZGY0NzNjY2U4ZjQ=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-05-22T20:57:25Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-05-22T20:57:25Z"}, "message": "Remove `macro_defs` map\n\nWe store store the `DefId` directly in `ExpnData`. This will allow us to\nserialize `ExpnData` in PR #72121 without needing to manage a side\ntable.", "tree": {"sha": "8dd72bac22b68a64ac819265d997686d1b9bbe86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dd72bac22b68a64ac819265d997686d1b9bbe86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d277904582d530feb4701dc76508fdf473cce8f4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl7IPN4ACgkQtAh+UQ6Y\nsWQQsw/+OE2ButXg3f/RVsHnWW0oL4kPGswx5CLho6q7ySbjWVb+P+UJ7VZQX0fn\nSRlctn1N0JYwxTkA7KjSpeKGMHHa9GqmKr5ZJ7FycUunldju6tU92bV9VdSh7sie\n4obYT9kivGGnQUGJ+jCrlNeDS0vEvAqwFgIxmHusHWc1aPAuYSqifRswegUFDW6r\n/eCNBYYzAiNMV451GQT+6K3ZEs+t6anxDR3zW7t35TtE/umqYB4Mdqk071pAFWBa\nnZXnd5l3bk9krl8UAoXDRi2WIg3ZBek+9Ne/3YNaExJWmZdV73LKV1Hu7YAatv5s\nESkqm+pnD9FENNXXol11aQH1hYubLvAEgKpTLcXgmPsOxkkRV5zGmkLB2LkD0ubY\nOUT+ilSjItxjHCrIWWCiveR7cRLg1Bq6KFXnpeDFhxJJpYy3lQNH+24Wkv9QZWTW\nmxeSlP1okCEB5fYUMMqyotvEn+MylFZmJrNU8DuFwat+GQP0hq75kvp0GCuKm35x\nTA+di4yD9K8fLUH7c8NLfMKNZBaeiKNbVgxlfVvbyDvTdxXU1ZaGqiutRcuEn9gl\nqrtpZgiuLeAwBDFZCYeVj8yTGP+jRgoHPq/V9jahdezmP7kPjZLLonkv59CmCRhQ\nWqKStZoHRuSd94bsto7PJSzMrjG1Y2ohN0Ngo7FO7Inrm93iNSo=\n=oaNS\n-----END PGP SIGNATURE-----", "payload": "tree 8dd72bac22b68a64ac819265d997686d1b9bbe86\nparent 215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d\nauthor Aaron Hill <aa1ronham@gmail.com> 1590181045 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1590181045 -0400\n\nRemove `macro_defs` map\n\nWe store store the `DefId` directly in `ExpnData`. This will allow us to\nserialize `ExpnData` in PR #72121 without needing to manage a side\ntable.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d277904582d530feb4701dc76508fdf473cce8f4", "html_url": "https://github.com/rust-lang/rust/commit/d277904582d530feb4701dc76508fdf473cce8f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d277904582d530feb4701dc76508fdf473cce8f4/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "html_url": "https://github.com/rust-lang/rust/commit/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d"}], "stats": {"total": 63, "additions": 44, "deletions": 19}, "files": [{"sha": "c67829f7a08e6ec3095c737dda49dfbf527484ce", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d277904582d530feb4701dc76508fdf473cce8f4/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d277904582d530feb4701dc76508fdf473cce8f4/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=d277904582d530feb4701dc76508fdf473cce8f4", "patch": "@@ -688,7 +688,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     ) -> Span {\n         span.fresh_expansion(ExpnData {\n             allow_internal_unstable,\n-            ..ExpnData::default(ExpnKind::Desugaring(reason), span, self.sess.edition())\n+            ..ExpnData::default(ExpnKind::Desugaring(reason), span, self.sess.edition(), None)\n         })\n     }\n "}, {"sha": "0137080938fdd13637313c96a26c112ac319d576", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d277904582d530feb4701dc76508fdf473cce8f4/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d277904582d530feb4701dc76508fdf473cce8f4/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=d277904582d530feb4701dc76508fdf473cce8f4", "patch": "@@ -13,6 +13,7 @@ use rustc_data_structures::sync::{self, Lrc};\n use rustc_errors::{DiagnosticBuilder, ErrorReported};\n use rustc_parse::{self, parser, MACRO_ARGUMENTS};\n use rustc_session::parse::ParseSess;\n+use rustc_span::def_id::DefId;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::{AstPass, ExpnData, ExpnId, ExpnKind};\n use rustc_span::source_map::SourceMap;\n@@ -857,7 +858,13 @@ impl SyntaxExtension {\n         SyntaxExtension::default(SyntaxExtensionKind::NonMacroAttr { mark_used }, edition)\n     }\n \n-    pub fn expn_data(&self, parent: ExpnId, call_site: Span, descr: Symbol) -> ExpnData {\n+    pub fn expn_data(\n+        &self,\n+        parent: ExpnId,\n+        call_site: Span,\n+        descr: Symbol,\n+        macro_def_id: Option<DefId>,\n+    ) -> ExpnData {\n         ExpnData {\n             kind: ExpnKind::Macro(self.macro_kind(), descr),\n             parent,\n@@ -867,6 +874,7 @@ impl SyntaxExtension {\n             allow_internal_unsafe: self.allow_internal_unsafe,\n             local_inner_macros: self.local_inner_macros,\n             edition: self.edition,\n+            macro_def_id,\n         }\n     }\n }"}, {"sha": "b505302f62501add8da868130e4401f384afa16b", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d277904582d530feb4701dc76508fdf473cce8f4/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d277904582d530feb4701dc76508fdf473cce8f4/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=d277904582d530feb4701dc76508fdf473cce8f4", "patch": "@@ -988,6 +988,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n                     ExpnKind::Macro(MacroKind::Attr, sym::derive),\n                     item.span(),\n                     self.cx.parse_sess.edition,\n+                    None,\n                 )\n             }),\n             _ => None,"}, {"sha": "c32b823fe73b20a1f808653622c98ad2f7f92491", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d277904582d530feb4701dc76508fdf473cce8f4/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d277904582d530feb4701dc76508fdf473cce8f4/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=d277904582d530feb4701dc76508fdf473cce8f4", "patch": "@@ -126,8 +126,8 @@ impl<'a> Resolver<'a> {\n     }\n \n     crate fn macro_def_scope(&mut self, expn_id: ExpnId) -> Module<'a> {\n-        let def_id = match self.macro_defs.get(&expn_id) {\n-            Some(def_id) => *def_id,\n+        let def_id = match expn_id.expn_data().macro_def_id {\n+            Some(def_id) => def_id,\n             None => return self.ast_transform_scopes.get(&expn_id).unwrap_or(&self.graph_root),\n         };\n         if let Some(id) = self.definitions.as_local_node_id(def_id) {"}, {"sha": "34368a07071fe14275a0c0101b8bf969069d28bf", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d277904582d530feb4701dc76508fdf473cce8f4/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d277904582d530feb4701dc76508fdf473cce8f4/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d277904582d530feb4701dc76508fdf473cce8f4", "patch": "@@ -922,7 +922,6 @@ pub struct Resolver<'a> {\n     dummy_ext_bang: Lrc<SyntaxExtension>,\n     dummy_ext_derive: Lrc<SyntaxExtension>,\n     non_macro_attrs: [Lrc<SyntaxExtension>; 2],\n-    macro_defs: FxHashMap<ExpnId, DefId>,\n     local_macro_def_scopes: FxHashMap<NodeId, Module<'a>>,\n     ast_transform_scopes: FxHashMap<ExpnId, Module<'a>>,\n     unused_macros: NodeMap<Span>,\n@@ -1152,9 +1151,6 @@ impl<'a> Resolver<'a> {\n         let mut invocation_parent_scopes = FxHashMap::default();\n         invocation_parent_scopes.insert(ExpnId::root(), ParentScope::module(graph_root));\n \n-        let mut macro_defs = FxHashMap::default();\n-        macro_defs.insert(ExpnId::root(), root_def_id);\n-\n         let features = session.features_untracked();\n         let non_macro_attr =\n             |mark_used| Lrc::new(SyntaxExtension::non_macro_attr(mark_used, session.edition()));\n@@ -1229,7 +1225,6 @@ impl<'a> Resolver<'a> {\n             invocation_parent_scopes,\n             output_macro_rules_scopes: Default::default(),\n             helper_attrs: Default::default(),\n-            macro_defs,\n             local_macro_def_scopes: FxHashMap::default(),\n             name_already_seen: FxHashMap::default(),\n             potentially_unused_imports: Vec::new(),\n@@ -1335,8 +1330,8 @@ impl<'a> Resolver<'a> {\n \n     fn macro_def(&self, mut ctxt: SyntaxContext) -> DefId {\n         loop {\n-            match self.macro_defs.get(&ctxt.outer_expn()) {\n-                Some(&def_id) => return def_id,\n+            match ctxt.outer_expn().expn_data().macro_def_id {\n+                Some(def_id) => return def_id,\n                 None => ctxt.remove_mark(),\n             };\n         }\n@@ -1820,7 +1815,7 @@ impl<'a> Resolver<'a> {\n                 && module.expansion.is_descendant_of(parent.expansion)\n             {\n                 // The macro is a proc macro derive\n-                if let Some(&def_id) = self.macro_defs.get(&module.expansion) {\n+                if let Some(def_id) = module.expansion.expn_data().macro_def_id {\n                     if let Some(ext) = self.get_macro_by_def_id(def_id) {\n                         if !ext.is_builtin && ext.macro_kind() == MacroKind::Derive {\n                             if parent.expansion.outer_expn_is_descendant_of(span.ctxt()) {"}, {"sha": "7027c8262678774fca3d3c5f707e5de79f7a15dd", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d277904582d530feb4701dc76508fdf473cce8f4/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d277904582d530feb4701dc76508fdf473cce8f4/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=d277904582d530feb4701dc76508fdf473cce8f4", "patch": "@@ -186,6 +186,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n             call_site,\n             self.session.edition(),\n             features.into(),\n+            None,\n         )));\n \n         let parent_scope = if let Some(module_id) = parent_module_id {\n@@ -290,13 +291,17 @@ impl<'a> base::Resolver for Resolver<'a> {\n         let (ext, res) = self.smart_resolve_macro_path(path, kind, parent_scope, force)?;\n \n         let span = invoc.span();\n-        invoc_id.set_expn_data(ext.expn_data(parent_scope.expansion, span, fast_print_path(path)));\n-\n-        if let Res::Def(_, def_id) = res {\n+        invoc_id.set_expn_data(ext.expn_data(\n+            parent_scope.expansion,\n+            span,\n+            fast_print_path(path),\n+            res.opt_def_id(),\n+        ));\n+\n+        if let Res::Def(_, _) = res {\n             if after_derive {\n                 self.session.span_err(span, \"macro attributes must be placed before `#[derive]`\");\n             }\n-            self.macro_defs.insert(invoc_id, def_id);\n             let normal_module_def_id = self.macro_def_scope(invoc_id).normal_ancestor_id;\n             self.definitions.add_parent_module_of_macro_def(invoc_id, normal_module_def_id);\n         }"}, {"sha": "c0fb84e741f4a9f56111f003678ad26512b7580a", "filename": "src/librustc_span/hygiene.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d277904582d530feb4701dc76508fdf473cce8f4/src%2Flibrustc_span%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d277904582d530feb4701dc76508fdf473cce8f4/src%2Flibrustc_span%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fhygiene.rs?ref=d277904582d530feb4701dc76508fdf473cce8f4", "patch": "@@ -25,6 +25,7 @@\n // because getting it wrong can lead to nested `HygieneData::with` calls that\n // trigger runtime aborts. (Fortunately these are obvious and easy to fix.)\n \n+use crate::def_id::{DefId, CRATE_DEF_INDEX};\n use crate::edition::Edition;\n use crate::symbol::{kw, sym, Symbol};\n use crate::GLOBALS;\n@@ -155,7 +156,12 @@ crate struct HygieneData {\n impl HygieneData {\n     crate fn new(edition: Edition) -> Self {\n         HygieneData {\n-            expn_data: vec![Some(ExpnData::default(ExpnKind::Root, DUMMY_SP, edition))],\n+            expn_data: vec![Some(ExpnData::default(\n+                ExpnKind::Root,\n+                DUMMY_SP,\n+                edition,\n+                Some(DefId::local(CRATE_DEF_INDEX)),\n+            ))],\n             syntax_context_data: vec![SyntaxContextData {\n                 outer_expn: ExpnId::root(),\n                 outer_transparency: Transparency::Opaque,\n@@ -673,11 +679,19 @@ pub struct ExpnData {\n     pub local_inner_macros: bool,\n     /// Edition of the crate in which the macro is defined.\n     pub edition: Edition,\n+    /// The `DefId` of the macro being invoked,\n+    /// if this `ExpnData` corresponds to a macro invocation\n+    pub macro_def_id: Option<DefId>,\n }\n \n impl ExpnData {\n     /// Constructs expansion data with default properties.\n-    pub fn default(kind: ExpnKind, call_site: Span, edition: Edition) -> ExpnData {\n+    pub fn default(\n+        kind: ExpnKind,\n+        call_site: Span,\n+        edition: Edition,\n+        macro_def_id: Option<DefId>,\n+    ) -> ExpnData {\n         ExpnData {\n             kind,\n             parent: ExpnId::root(),\n@@ -687,6 +701,7 @@ impl ExpnData {\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n             edition,\n+            macro_def_id,\n         }\n     }\n \n@@ -695,10 +710,11 @@ impl ExpnData {\n         call_site: Span,\n         edition: Edition,\n         allow_internal_unstable: Lrc<[Symbol]>,\n+        macro_def_id: Option<DefId>,\n     ) -> ExpnData {\n         ExpnData {\n             allow_internal_unstable: Some(allow_internal_unstable),\n-            ..ExpnData::default(kind, call_site, edition)\n+            ..ExpnData::default(kind, call_site, edition, macro_def_id)\n         }\n     }\n "}]}