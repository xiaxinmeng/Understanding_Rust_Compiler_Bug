{"sha": "99191c2e717883bfec51b49df0e412a34849fc4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MTkxYzJlNzE3ODgzYmZlYzUxYjQ5ZGYwZTQxMmEzNDg0OWZjNGE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-05T13:19:00Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-06T20:17:18Z"}, "message": "parse_meta: ditch parse_in_attr", "tree": {"sha": "7e62fb059b7c253c5a29b42df997fd38f4ce7d99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e62fb059b7c253c5a29b42df997fd38f4ce7d99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99191c2e717883bfec51b49df0e412a34849fc4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99191c2e717883bfec51b49df0e412a34849fc4a", "html_url": "https://github.com/rust-lang/rust/commit/99191c2e717883bfec51b49df0e412a34849fc4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99191c2e717883bfec51b49df0e412a34849fc4a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbc9f683125b4eb21eb3137bbd2c5295650eeaa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc9f683125b4eb21eb3137bbd2c5295650eeaa5", "html_url": "https://github.com/rust-lang/rust/commit/cbc9f683125b4eb21eb3137bbd2c5295650eeaa5"}], "stats": {"total": 147, "additions": 99, "deletions": 48}, "files": [{"sha": "072f6845853a874733778b4ad1ecc5ab5f84fac9", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/99191c2e717883bfec51b49df0e412a34849fc4a/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99191c2e717883bfec51b49df0e412a34849fc4a/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=99191c2e717883bfec51b49df0e412a34849fc4a", "patch": "@@ -18,7 +18,6 @@ use syntax::ast::{self, Attribute, AttrItem, MetaItem};\n use syntax::edition::Edition;\n use syntax::mut_visit::*;\n use syntax::ptr::P;\n-use syntax::tokenstream::DelimSpan;\n use syntax::sess::ParseSess;\n use syntax::util::map_in_place::MapInPlace;\n use syntax_pos::Span;\n@@ -139,11 +138,10 @@ impl<'a> StripUnconfigured<'a> {\n     }\n \n     fn parse_cfg_attr(&self, attr: &Attribute) -> Option<(MetaItem, Vec<(AttrItem, Span)>)> {\n-        match &attr.get_normal_item().args {\n-            ast::MacArgs::Delimited(dspan, delim, tts) if !tts.is_empty() => {\n-                if let ast::MacDelimiter::Brace | ast::MacDelimiter::Bracket = delim {\n-                    self.error_malformed_cfg_attr_wrong_delim(*dspan);\n-                }\n+        match attr.get_normal_item().args {\n+            ast::MacArgs::Delimited(dspan, delim, ref tts) if !tts.is_empty() => {\n+                let msg = \"wrong `cfg_attr` delimiters\";\n+                validate_attr::check_meta_bad_delim(self.sess, dspan, delim, msg);\n                 match parse_in(self.sess, tts.clone(), \"`cfg_attr` input\", |p| p.parse_cfg_attr()) {\n                     Ok(r) => return Some(r),\n                     Err(mut e) => e\n@@ -157,21 +155,6 @@ impl<'a> StripUnconfigured<'a> {\n         None\n     }\n \n-    fn error_malformed_cfg_attr_wrong_delim(&self, dspan: DelimSpan) {\n-        self.sess\n-            .span_diagnostic\n-            .struct_span_err(dspan.entire(), \"wrong `cfg_attr` delimiters\")\n-            .multipart_suggestion(\n-                \"the delimiters should be `(` and `)`\",\n-                vec![\n-                    (dspan.open, \"(\".to_string()),\n-                    (dspan.close, \")\".to_string()),\n-                ],\n-                Applicability::MachineApplicable,\n-            )\n-            .emit();\n-    }\n-\n     fn error_malformed_cfg_attr_missing(&self, span: Span) {\n         self.sess\n             .span_diagnostic"}, {"sha": "72436f29244cf2d1f716c94cde524719af0e4219", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/99191c2e717883bfec51b49df0e412a34849fc4a/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99191c2e717883bfec51b49df0e412a34849fc4a/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=99191c2e717883bfec51b49df0e412a34849fc4a", "patch": "@@ -284,17 +284,6 @@ pub fn parse_in<'a, T>(\n     Ok(result)\n }\n \n-/// Runs the given subparser `f` on the tokens of the given `attr`'s item.\n-fn parse_in_attr<'a, T>(\n-    sess: &'a ParseSess,\n-    attr: &ast::Attribute,\n-    f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n-) -> PResult<'a, T> {\n-    // FIXME(#66940, Centril | petrochenkov): refactor this function so it doesn't\n-    // require reconstructing and immediately re-parsing delimiters.\n-    parse_in(sess, attr.get_normal_item().args.outer_tokens(), \"attribute\", f)\n-}\n-\n // NOTE(Centril): The following probably shouldn't be here but it acknowledges the\n // fact that architecturally, we are using parsing (read on below to understand why).\n "}, {"sha": "00fd6b8a25bc3df5ec298423cb17789dd135de58", "filename": "src/librustc_parse/parser/attr.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/99191c2e717883bfec51b49df0e412a34849fc4a/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99191c2e717883bfec51b49df0e412a34849fc4a/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fattr.rs?ref=99191c2e717883bfec51b49df0e412a34849fc4a", "patch": "@@ -220,7 +220,7 @@ impl<'a> Parser<'a> {\n         Ok(attrs)\n     }\n \n-    pub(super) fn parse_unsuffixed_lit(&mut self) -> PResult<'a, ast::Lit> {\n+    crate fn parse_unsuffixed_lit(&mut self) -> PResult<'a, ast::Lit> {\n         let lit = self.parse_lit()?;\n         debug!(\"checking if {:?} is unusuffixed\", lit);\n \n@@ -247,12 +247,27 @@ impl<'a> Parser<'a> {\n             let lo = self.token.span;\n             let item = self.parse_attr_item()?;\n             expanded_attrs.push((item, lo.to(self.prev_span)));\n-            self.eat(&token::Comma);\n+            if !self.eat(&token::Comma) {\n+                break;\n+            }\n         }\n \n         Ok((cfg_predicate, expanded_attrs))\n     }\n \n+    /// Matches `COMMASEP(meta_item_inner)`.\n+    crate fn parse_meta_seq_top(&mut self) -> PResult<'a, Vec<ast::NestedMetaItem>> {\n+        // Presumably, the majority of the time there will only be one attr.\n+        let mut nmis = Vec::with_capacity(1);\n+        while self.token.kind != token::Eof {\n+            nmis.push(self.parse_meta_item_inner()?);\n+            if !self.eat(&token::Comma) {\n+                break;\n+            }\n+        }\n+        Ok(nmis)\n+    }\n+\n     /// Matches the following grammar (per RFC 1559).\n     ///\n     ///     meta_item : PATH ( '=' UNSUFFIXED_LIT | '(' meta_item_inner? ')' )? ;"}, {"sha": "94d3fe7b55167e65b69ffc5c9a5819c56106a0f1", "filename": "src/librustc_parse/validate_attr.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/99191c2e717883bfec51b49df0e412a34849fc4a/src%2Flibrustc_parse%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99191c2e717883bfec51b49df0e412a34849fc4a/src%2Flibrustc_parse%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fvalidate_attr.rs?ref=99191c2e717883bfec51b49df0e412a34849fc4a", "patch": "@@ -1,10 +1,13 @@\n //! Meta-syntax validation logic of attributes for post-expansion.\n \n+use crate::parse_in;\n+\n use rustc_errors::{PResult, Applicability};\n use rustc_feature::{AttributeTemplate, BUILTIN_ATTRIBUTE_MAP};\n-use syntax::ast::{self, Attribute, AttrKind, Ident, MacArgs, MetaItem, MetaItemKind};\n+use syntax::ast::{self, Attribute, AttrKind, Ident, MacArgs, MacDelimiter, MetaItem, MetaItemKind};\n use syntax::attr::mk_name_value_item_str;\n use syntax::early_buffered_lints::ILL_FORMED_ATTRIBUTE_INPUT;\n+use syntax::tokenstream::DelimSpan;\n use syntax::sess::ParseSess;\n use syntax_pos::{Symbol, sym};\n \n@@ -27,16 +30,45 @@ pub fn check_meta(sess: &ParseSess, attr: &Attribute) {\n pub fn parse_meta<'a>(sess: &'a ParseSess, attr: &Attribute) -> PResult<'a, MetaItem> {\n     Ok(match attr.kind {\n         AttrKind::Normal(ref item) => MetaItem {\n-            path: item.path.clone(),\n-            kind: super::parse_in_attr(sess, attr, |p| p.parse_meta_item_kind())?,\n             span: attr.span,\n+            path: item.path.clone(),\n+            kind: match &attr.get_normal_item().args {\n+                MacArgs::Empty => MetaItemKind::Word,\n+                MacArgs::Eq(_, t) => {\n+                    let v = parse_in(sess, t.clone(), \"name value\", |p| p.parse_unsuffixed_lit())?;\n+                    MetaItemKind::NameValue(v)\n+                }\n+                MacArgs::Delimited(dspan, delim, t) => {\n+                    check_meta_bad_delim(sess, *dspan, *delim, \"wrong meta list delimiters\");\n+                    let nmis = parse_in(sess, t.clone(), \"meta list\", |p| p.parse_meta_seq_top())?;\n+                    MetaItemKind::List(nmis)\n+                }\n+            }\n         },\n         AttrKind::DocComment(comment) => {\n             mk_name_value_item_str(Ident::new(sym::doc, attr.span), comment, attr.span)\n         }\n     })\n }\n \n+crate fn check_meta_bad_delim(sess: &ParseSess, span: DelimSpan, delim: MacDelimiter, msg: &str) {\n+    if let ast::MacDelimiter::Parenthesis = delim {\n+        return;\n+    }\n+\n+    sess.span_diagnostic\n+        .struct_span_err(span.entire(), msg)\n+        .multipart_suggestion(\n+            \"the delimiters should be `(` and `)`\",\n+            vec![\n+                (span.open, \"(\".to_string()),\n+                (span.close, \")\".to_string()),\n+            ],\n+            Applicability::MachineApplicable,\n+        )\n+        .emit();\n+}\n+\n /// Checks that the given meta-item is compatible with this `AttributeTemplate`.\n fn is_attr_template_compatible(template: &AttributeTemplate, meta: &ast::MetaItemKind) -> bool {\n     match meta {"}, {"sha": "520488c658676bfc07e179951269d44458e4f0a2", "filename": "src/libsyntax_expand/proc_macro.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/99191c2e717883bfec51b49df0e412a34849fc4a/src%2Flibsyntax_expand%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99191c2e717883bfec51b49df0e412a34849fc4a/src%2Flibsyntax_expand%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fproc_macro.rs?ref=99191c2e717883bfec51b49df0e412a34849fc4a", "patch": "@@ -188,14 +188,14 @@ crate fn collect_derives(cx: &mut ExtCtxt<'_>, attrs: &mut Vec<ast::Attribute>)\n             Some(x) => x,\n         };\n \n-        let mut retain_in_fm = true;\n-        let mut retain_in_map = true;\n+        let mut error_reported_filter_map = false;\n+        let mut error_reported_map = false;\n         let traits = nmis\n             .into_iter()\n             // 2) Moreover, let's ensure we have a path and not `#[derive(\"foo\")]`.\n             .filter_map(|nmi| match nmi {\n                 NestedMetaItem::Literal(lit) => {\n-                    retain_in_fm = false;\n+                    error_reported_filter_map = true;\n                     cx.struct_span_err(lit.span, \"expected path to a trait, found literal\")\n                         .help(\"for example, write `#[derive(Debug)]` for `Debug`\")\n                         .emit();\n@@ -209,7 +209,7 @@ crate fn collect_derives(cx: &mut ExtCtxt<'_>, attrs: &mut Vec<ast::Attribute>)\n             // wanted this trait to be derived, so let's keep it.\n             .map(|mi| {\n                 let mut traits_dont_accept = |title, action| {\n-                    retain_in_map = false;\n+                    error_reported_map = true;\n                     let sp = mi.span.with_lo(mi.path.span.hi());\n                     cx.struct_span_err(sp, title)\n                         .span_suggestion(\n@@ -235,7 +235,7 @@ crate fn collect_derives(cx: &mut ExtCtxt<'_>, attrs: &mut Vec<ast::Attribute>)\n             });\n \n         result.extend(traits);\n-        retain_in_fm && retain_in_map\n+        !error_reported_filter_map && !error_reported_map\n     });\n     result\n }"}, {"sha": "5b1614b69a92b6bc482cefece3f57456a12f05bc", "filename": "src/test/ui/malformed/malformed-meta-delim.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/99191c2e717883bfec51b49df0e412a34849fc4a/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-meta-delim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99191c2e717883bfec51b49df0e412a34849fc4a/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-meta-delim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-meta-delim.rs?ref=99191c2e717883bfec51b49df0e412a34849fc4a", "patch": "@@ -0,0 +1,11 @@\n+fn main() {}\n+\n+#[allow { foo_lint } ]\n+//~^ ERROR wrong meta list delimiters\n+//~| HELP the delimiters should be `(` and `)`\n+fn delim_brace() {}\n+\n+#[allow [ foo_lint ] ]\n+//~^ ERROR wrong meta list delimiters\n+//~| HELP the delimiters should be `(` and `)`\n+fn delim_bracket() {}"}, {"sha": "407193d4adebbd8784daf89623206769a145e5f5", "filename": "src/test/ui/malformed/malformed-meta-delim.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/99191c2e717883bfec51b49df0e412a34849fc4a/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-meta-delim.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99191c2e717883bfec51b49df0e412a34849fc4a/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-meta-delim.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-meta-delim.stderr?ref=99191c2e717883bfec51b49df0e412a34849fc4a", "patch": "@@ -0,0 +1,24 @@\n+error: wrong meta list delimiters\n+  --> $DIR/malformed-meta-delim.rs:3:9\n+   |\n+LL | #[allow { foo_lint } ]\n+   |         ^^^^^^^^^^^^\n+   |\n+help: the delimiters should be `(` and `)`\n+   |\n+LL | #[allow ( foo_lint ) ]\n+   |         ^          ^\n+\n+error: wrong meta list delimiters\n+  --> $DIR/malformed-meta-delim.rs:8:9\n+   |\n+LL | #[allow [ foo_lint ] ]\n+   |         ^^^^^^^^^^^^\n+   |\n+help: the delimiters should be `(` and `)`\n+   |\n+LL | #[allow ( foo_lint ) ]\n+   |         ^          ^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "8fb34f21152ab513fb1a3cfb2daeeedaee6e2e9e", "filename": "src/test/ui/on-unimplemented/expected-comma-found-token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99191c2e717883bfec51b49df0e412a34849fc4a/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99191c2e717883bfec51b49df0e412a34849fc4a/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.rs?ref=99191c2e717883bfec51b49df0e412a34849fc4a", "patch": "@@ -6,7 +6,7 @@\n \n #[rustc_on_unimplemented(\n     message=\"the message\"\n-    label=\"the label\" //~ ERROR expected one of `)` or `,`, found `label`\n+    label=\"the label\" //~ ERROR expected `,`, found `label`\n )]\n trait T {}\n "}, {"sha": "048b72ee3bcdff21f184fc6b1bb5df22a5471ccb", "filename": "src/test/ui/on-unimplemented/expected-comma-found-token.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99191c2e717883bfec51b49df0e412a34849fc4a/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99191c2e717883bfec51b49df0e412a34849fc4a/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.stderr?ref=99191c2e717883bfec51b49df0e412a34849fc4a", "patch": "@@ -1,11 +1,8 @@\n-error: expected one of `)` or `,`, found `label`\n+error: expected `,`, found `label`\n   --> $DIR/expected-comma-found-token.rs:9:5\n    |\n LL |     message=\"the message\"\n-   |                          -\n-   |                          |\n-   |                          expected one of `)` or `,`\n-   |                          help: missing `,`\n+   |                          - expected `,`\n LL |     label=\"the label\"\n    |     ^^^^^ unexpected token\n "}]}