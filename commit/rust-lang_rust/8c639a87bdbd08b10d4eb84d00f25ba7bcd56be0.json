{"sha": "8c639a87bdbd08b10d4eb84d00f25ba7bcd56be0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNjM5YTg3YmRiZDA4YjEwZDRlYjg0ZDAwZjI1YmE3YmNkNTZiZTA=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-29T18:32:57Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-29T18:32:57Z"}, "message": "Thread proc-macro types through the HIR", "tree": {"sha": "127d90ba4f4eac66081f9b78a2d53d2d713a0593", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/127d90ba4f4eac66081f9b78a2d53d2d713a0593"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c639a87bdbd08b10d4eb84d00f25ba7bcd56be0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c639a87bdbd08b10d4eb84d00f25ba7bcd56be0", "html_url": "https://github.com/rust-lang/rust/commit/8c639a87bdbd08b10d4eb84d00f25ba7bcd56be0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c639a87bdbd08b10d4eb84d00f25ba7bcd56be0/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6da603c7fe56c19a275dc7bab1f30fe1ad39707", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6da603c7fe56c19a275dc7bab1f30fe1ad39707", "html_url": "https://github.com/rust-lang/rust/commit/f6da603c7fe56c19a275dc7bab1f30fe1ad39707"}], "stats": {"total": 44, "additions": 34, "deletions": 10}, "files": [{"sha": "23cb0c839ffa9fd4a2e901ce3e340b511f9a0675", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c639a87bdbd08b10d4eb84d00f25ba7bcd56be0/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c639a87bdbd08b10d4eb84d00f25ba7bcd56be0/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=8c639a87bdbd08b10d4eb84d00f25ba7bcd56be0", "patch": "@@ -147,7 +147,7 @@ impl CrateDisplayName {\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct ProcMacroId(pub u32);\n \n-#[derive(Copy, Clone, Eq, PartialEq, Debug)]\n+#[derive(Copy, Clone, Eq, PartialEq, Debug, Hash)]\n pub enum ProcMacroKind {\n     CustomDerive,\n     FuncLike,"}, {"sha": "975ae48690b80605d26f7c58d5e744a5b5dd7c00", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8c639a87bdbd08b10d4eb84d00f25ba7bcd56be0/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c639a87bdbd08b10d4eb84d00f25ba7bcd56be0/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=8c639a87bdbd08b10d4eb84d00f25ba7bcd56be0", "patch": "@@ -1282,10 +1282,16 @@ impl BuiltinType {\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum MacroKind {\n+    /// `macro_rules!` or Macros 2.0 macro.\n     Declarative,\n-    ProcMacro,\n+    /// A built-in or custom derive.\n     Derive,\n+    /// A built-in function-like macro.\n     BuiltIn,\n+    /// A procedural attribute macro.\n+    Attr,\n+    /// A function-like procedural macro.\n+    ProcMacro,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -1315,11 +1321,13 @@ impl MacroDef {\n     pub fn kind(&self) -> MacroKind {\n         match self.id.kind {\n             MacroDefKind::Declarative(_) => MacroKind::Declarative,\n-            MacroDefKind::BuiltIn(_, _) => MacroKind::BuiltIn,\n+            MacroDefKind::BuiltIn(_, _) | MacroDefKind::BuiltInEager(_, _) => MacroKind::BuiltIn,\n             MacroDefKind::BuiltInDerive(_, _) => MacroKind::Derive,\n-            MacroDefKind::BuiltInEager(_, _) => MacroKind::BuiltIn,\n-            // FIXME might be a derive\n-            MacroDefKind::ProcMacro(_, _) => MacroKind::ProcMacro,\n+            MacroDefKind::ProcMacro(_, base_db::ProcMacroKind::CustomDerive, _) => {\n+                MacroKind::Derive\n+            }\n+            MacroDefKind::ProcMacro(_, base_db::ProcMacroKind::Attr, _) => MacroKind::Attr,\n+            MacroDefKind::ProcMacro(_, base_db::ProcMacroKind::FuncLike, _) => MacroKind::ProcMacro,\n         }\n     }\n }"}, {"sha": "d9d6c91a853925a2da5963c376931e845cca9d18", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c639a87bdbd08b10d4eb84d00f25ba7bcd56be0/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c639a87bdbd08b10d4eb84d00f25ba7bcd56be0/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=8c639a87bdbd08b10d4eb84d00f25ba7bcd56be0", "patch": "@@ -477,16 +477,21 @@ impl DefCollector<'_> {\n     /// going out of sync with what the build system sees (since we resolve using VFS state, but\n     /// Cargo builds only on-disk files). We could and probably should add diagnostics for that.\n     fn export_proc_macro(&mut self, def: ProcMacroDef, ast_id: AstId<ast::Fn>) {\n+        let kind = def.kind.to_basedb_kind();\n         self.exports_proc_macros = true;\n         let macro_def = match self.proc_macros.iter().find(|(n, _)| n == &def.name) {\n             Some((_, expander)) => MacroDefId {\n                 krate: self.def_map.krate,\n-                kind: MacroDefKind::ProcMacro(*expander, ast_id),\n+                kind: MacroDefKind::ProcMacro(*expander, kind, ast_id),\n                 local_inner: false,\n             },\n             None => MacroDefId {\n                 krate: self.def_map.krate,\n-                kind: MacroDefKind::ProcMacro(ProcMacroExpander::dummy(self.def_map.krate), ast_id),\n+                kind: MacroDefKind::ProcMacro(\n+                    ProcMacroExpander::dummy(self.def_map.krate),\n+                    kind,\n+                    ast_id,\n+                ),\n                 local_inner: false,\n             },\n         };"}, {"sha": "3f095d623f950bf19cb8c2f5000fbbe691c35c8e", "filename": "crates/hir_def/src/nameres/proc_macro.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c639a87bdbd08b10d4eb84d00f25ba7bcd56be0/crates%2Fhir_def%2Fsrc%2Fnameres%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c639a87bdbd08b10d4eb84d00f25ba7bcd56be0/crates%2Fhir_def%2Fsrc%2Fnameres%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fproc_macro.rs?ref=8c639a87bdbd08b10d4eb84d00f25ba7bcd56be0", "patch": "@@ -18,6 +18,16 @@ pub(super) enum ProcMacroKind {\n     Attr,\n }\n \n+impl ProcMacroKind {\n+    pub(super) fn to_basedb_kind(&self) -> base_db::ProcMacroKind {\n+        match self {\n+            ProcMacroKind::CustomDerive { .. } => base_db::ProcMacroKind::CustomDerive,\n+            ProcMacroKind::FnLike => base_db::ProcMacroKind::FuncLike,\n+            ProcMacroKind::Attr => base_db::ProcMacroKind::Attr,\n+        }\n+    }\n+}\n+\n impl Attrs {\n     #[rustfmt::skip]\n     pub(super) fn parse_proc_macro_decl(&self, func_name: &Name) -> Option<ProcMacroDef> {"}, {"sha": "90d8ae24018954ef2b77cdaf275c50b3c2062cfa", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c639a87bdbd08b10d4eb84d00f25ba7bcd56be0/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c639a87bdbd08b10d4eb84d00f25ba7bcd56be0/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=8c639a87bdbd08b10d4eb84d00f25ba7bcd56be0", "patch": "@@ -15,6 +15,7 @@ pub mod quote;\n pub mod eager;\n mod input;\n \n+use base_db::ProcMacroKind;\n use either::Either;\n \n pub use mbe::{ExpandError, ExpandResult};\n@@ -207,7 +208,7 @@ impl MacroDefId {\n             MacroDefKind::BuiltIn(_, id) => id,\n             MacroDefKind::BuiltInDerive(_, id) => id,\n             MacroDefKind::BuiltInEager(_, id) => id,\n-            MacroDefKind::ProcMacro(_, id) => return Either::Right(*id),\n+            MacroDefKind::ProcMacro(.., id) => return Either::Right(*id),\n         };\n         Either::Left(*id)\n     }\n@@ -224,7 +225,7 @@ pub enum MacroDefKind {\n     // FIXME: maybe just Builtin and rename BuiltinFnLikeExpander to BuiltinExpander\n     BuiltInDerive(BuiltinDeriveExpander, AstId<ast::Macro>),\n     BuiltInEager(EagerExpander, AstId<ast::Macro>),\n-    ProcMacro(ProcMacroExpander, AstId<ast::Fn>),\n+    ProcMacro(ProcMacroExpander, ProcMacroKind, AstId<ast::Fn>),\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]"}]}