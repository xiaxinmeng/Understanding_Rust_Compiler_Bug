{"sha": "71df8e655c1a7a435082de753694821f359fb8a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZGY4ZTY1NWMxYTdhNDM1MDgyZGU3NTM2OTQ4MjFmMzU5ZmI4YTk=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-08-05T01:58:48Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-08-09T14:32:33Z"}, "message": "librustc: Encode upvar_borrow_map in metadata.", "tree": {"sha": "74922fc4ac0dba9aa032073307f18d60b5d3bc26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74922fc4ac0dba9aa032073307f18d60b5d3bc26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71df8e655c1a7a435082de753694821f359fb8a9", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71df8e655c1a7a435082de753694821f359fb8a9", "html_url": "https://github.com/rust-lang/rust/commit/71df8e655c1a7a435082de753694821f359fb8a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71df8e655c1a7a435082de753694821f359fb8a9/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dca9fb261b5bf7e8c77c3a23fa3c203b469d3b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dca9fb261b5bf7e8c77c3a23fa3c203b469d3b9", "html_url": "https://github.com/rust-lang/rust/commit/5dca9fb261b5bf7e8c77c3a23fa3c203b469d3b9"}], "stats": {"total": 58, "additions": 49, "deletions": 9}, "files": [{"sha": "8ed471ec58a5e7da3a805bb7968d690245d0dc4b", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71df8e655c1a7a435082de753694821f359fb8a9/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71df8e655c1a7a435082de753694821f359fb8a9/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=71df8e655c1a7a435082de753694821f359fb8a9", "patch": "@@ -140,9 +140,10 @@ pub enum astencode_tag { // Reserves 0x40 -- 0x5f\n     tag_table_moves_map = 0x52,\n     tag_table_capture_map = 0x53,\n     tag_table_unboxed_closure_type = 0x54,\n+    tag_table_upvar_borrow_map = 0x55,\n }\n static first_astencode_tag: uint = tag_ast as uint;\n-static last_astencode_tag: uint = tag_table_unboxed_closure_type as uint;\n+static last_astencode_tag: uint = tag_table_upvar_borrow_map as uint;\n impl astencode_tag {\n     pub fn from_uint(value : uint) -> Option<astencode_tag> {\n         let is_a_tag = first_astencode_tag <= value && value <= last_astencode_tag;"}, {"sha": "33b663dea1557b5ea208b4d24b196eb5280de252", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/71df8e655c1a7a435082de753694821f359fb8a9/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71df8e655c1a7a435082de753694821f359fb8a9/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=71df8e655c1a7a435082de753694821f359fb8a9", "patch": "@@ -18,6 +18,7 @@ use driver::session::Session;\n use metadata::decoder;\n use middle::def;\n use e = metadata::encoder;\n+use middle::freevars;\n use middle::freevars::freevar_entry;\n use middle::region;\n use metadata::tydecode;\n@@ -551,6 +552,15 @@ impl tr for freevar_entry {\n     }\n }\n \n+impl tr for ty::UpvarBorrow {\n+    fn tr(&self, xcx: &ExtendedDecodeContext) -> ty::UpvarBorrow {\n+        ty::UpvarBorrow {\n+            kind: self.kind,\n+            region: self.region.tr(xcx)\n+        }\n+    }\n+}\n+\n // ______________________________________________________________________\n // Encoding and decoding of MethodCallee\n \n@@ -1061,7 +1071,29 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n                     Ok(encode_freevar_entry(rbml_w, fv_entry))\n                 });\n             })\n-        })\n+        });\n+\n+        for freevar in fv.iter() {\n+            match freevars::get_capture_mode(tcx, id) {\n+                freevars::CaptureByRef => {\n+                    rbml_w.tag(c::tag_table_upvar_borrow_map, |rbml_w| {\n+                        rbml_w.id(id);\n+                        rbml_w.tag(c::tag_table_val, |rbml_w| {\n+                            let var_id = freevar.def.def_id().node;\n+                            let upvar_id = ty::UpvarId {\n+                                var_id: var_id,\n+                                closure_expr_id: id\n+                            };\n+                            let upvar_borrow = tcx.upvar_borrow_map.borrow()\n+                                                  .get_copy(&upvar_id);\n+                            var_id.encode(rbml_w);\n+                            upvar_borrow.encode(rbml_w);\n+                        })\n+                    })\n+                }\n+                _ => {}\n+            }\n+        }\n     }\n \n     let lid = ast::DefId { krate: ast::LOCAL_CRATE, node: id };\n@@ -1468,6 +1500,15 @@ fn decode_side_tables(xcx: &ExtendedDecodeContext,\n                         }).unwrap().move_iter().collect();\n                         dcx.tcx.freevars.borrow_mut().insert(id, fv_info);\n                     }\n+                    c::tag_table_upvar_borrow_map => {\n+                        let var_id: ast::NodeId = Decodable::decode(val_dsr).unwrap();\n+                        let upvar_id = ty::UpvarId {\n+                            var_id: xcx.tr_id(var_id),\n+                            closure_expr_id: id\n+                        };\n+                        let ub: ty::UpvarBorrow = Decodable::decode(val_dsr).unwrap();\n+                        dcx.tcx.upvar_borrow_map.borrow_mut().insert(upvar_id, ub.tr(xcx));\n+                    }\n                     c::tag_table_tcache => {\n                         let pty = val_dsr.read_polytype(xcx);\n                         let lid = ast::DefId { krate: ast::LOCAL_CRATE, node: id };"}, {"sha": "eda567f7d187c1a33745f52b154601c20eac2c57", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71df8e655c1a7a435082de753694821f359fb8a9/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71df8e655c1a7a435082de753694821f359fb8a9/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=71df8e655c1a7a435082de753694821f359fb8a9", "patch": "@@ -14,6 +14,7 @@\n #![allow(non_camel_case_types)]\n \n use middle::def;\n+use middle::mem_categorization::Typer;\n use middle::resolve;\n use middle::ty;\n use util::nodemap::{DefIdSet, NodeMap, NodeSet};\n@@ -147,11 +148,8 @@ pub fn with_freevars<T>(tcx: &ty::ctxt, fid: ast::NodeId, f: |&[freevar_entry]|\n     }\n }\n \n-pub fn get_capture_mode(tcx: &ty::ctxt,\n-                        closure_expr_id: ast::NodeId)\n-                        -> CaptureMode\n-{\n-    let fn_ty = ty::node_id_to_type(tcx, closure_expr_id);\n+pub fn get_capture_mode<T: Typer>(tcx: &T, closure_expr_id: ast::NodeId) -> CaptureMode {\n+    let fn_ty = tcx.node_ty(closure_expr_id).ok().expect(\"couldn't find closure ty?\");\n     match ty::ty_closure_store(fn_ty) {\n         ty::RegionTraitStore(..) => CaptureByRef,\n         ty::UniqTraitStore => CaptureByValue"}, {"sha": "a4588da1bd7dd7361a22669e54bfd057b0036f61", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71df8e655c1a7a435082de753694821f359fb8a9/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71df8e655c1a7a435082de753694821f359fb8a9/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=71df8e655c1a7a435082de753694821f359fb8a9", "patch": "@@ -539,7 +539,7 @@ pub struct UpvarId {\n     pub closure_expr_id: ast::NodeId,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, Hash, Show, Encodable, Decodable)]\n pub enum BorrowKind {\n     /// Data must be immutable and is aliasable.\n     ImmBorrow,\n@@ -634,7 +634,7 @@ pub enum BorrowKind {\n  *   the closure, so sometimes it is necessary for them to be larger\n  *   than the closure lifetime itself.\n  */\n-#[deriving(PartialEq, Clone)]\n+#[deriving(PartialEq, Clone, Encodable, Decodable)]\n pub struct UpvarBorrow {\n     pub kind: BorrowKind,\n     pub region: ty::Region,"}]}