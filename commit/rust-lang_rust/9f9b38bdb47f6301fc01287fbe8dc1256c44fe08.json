{"sha": "9f9b38bdb47f6301fc01287fbe8dc1256c44fe08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmOWIzOGJkYjQ3ZjYzMDFmYzAxMjg3ZmJlOGRjMTI1NmM0NGZlMDg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-03T21:13:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-03T21:15:44Z"}, "message": "Cleanup presentation tests", "tree": {"sha": "802521f357257f38db18738059457a77387ea70c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/802521f357257f38db18738059457a77387ea70c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f9b38bdb47f6301fc01287fbe8dc1256c44fe08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f9b38bdb47f6301fc01287fbe8dc1256c44fe08", "html_url": "https://github.com/rust-lang/rust/commit/9f9b38bdb47f6301fc01287fbe8dc1256c44fe08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f9b38bdb47f6301fc01287fbe8dc1256c44fe08/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a095cdb87912e0174341121542af2d4a01d7d8cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a095cdb87912e0174341121542af2d4a01d7d8cd", "html_url": "https://github.com/rust-lang/rust/commit/a095cdb87912e0174341121542af2d4a01d7d8cd"}], "stats": {"total": 205, "additions": 59, "deletions": 146}, "files": [{"sha": "f472b9529593e599010df9ee5ca08b830e2c5a8a", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 51, "deletions": 142, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/9f9b38bdb47f6301fc01287fbe8dc1256c44fe08/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9b38bdb47f6301fc01287fbe8dc1256c44fe08/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=9f9b38bdb47f6301fc01287fbe8dc1256c44fe08", "patch": "@@ -460,7 +460,7 @@ mod tests {\n     use test_utils::mark;\n \n     use crate::completion::{\n-        test_utils::{do_completion, do_completion_with_options},\n+        test_utils::{check_edit, do_completion, do_completion_with_options},\n         CompletionConfig, CompletionItem, CompletionKind,\n     };\n \n@@ -636,150 +636,59 @@ fn foo() {\n     #[test]\n     fn inserts_parens_for_function_calls() {\n         mark::check!(inserts_parens_for_function_calls);\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                fn no_args() {}\n-                fn main() { no_<|> }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"main()\",\n-                source_range: 28..31,\n-                delete: 28..31,\n-                insert: \"main()$0\",\n-                kind: Function,\n-                lookup: \"main\",\n-                detail: \"fn main()\",\n-            },\n-            CompletionItem {\n-                label: \"no_args()\",\n-                source_range: 28..31,\n-                delete: 28..31,\n-                insert: \"no_args()$0\",\n-                kind: Function,\n-                lookup: \"no_args\",\n-                detail: \"fn no_args()\",\n-            },\n-        ]\n-        \"###\n-        );\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                fn with_args(x: i32, y: String) {}\n-                fn main() { with_<|> }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"main()\",\n-                source_range: 47..52,\n-                delete: 47..52,\n-                insert: \"main()$0\",\n-                kind: Function,\n-                lookup: \"main\",\n-                detail: \"fn main()\",\n-            },\n-            CompletionItem {\n-                label: \"with_args(\u2026)\",\n-                source_range: 47..52,\n-                delete: 47..52,\n-                insert: \"with_args(${1:x}, ${2:y})$0\",\n-                kind: Function,\n-                lookup: \"with_args\",\n-                detail: \"fn with_args(x: i32, y: String)\",\n-                trigger_call_info: true,\n-            },\n-        ]\n-        \"###\n+        check_edit(\n+            \"no_args\",\n+            r#\"\n+fn no_args() {}\n+fn main() { no_<|> }\n+\"#,\n+            r#\"\n+fn no_args() {}\n+fn main() { no_args()$0 }\n+\"#,\n         );\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                fn with_ignored_args(_foo: i32, ___bar: bool, ho_ge_: String) {}\n-                fn main() { with_<|> }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"main()\",\n-                source_range: 77..82,\n-                delete: 77..82,\n-                insert: \"main()$0\",\n-                kind: Function,\n-                lookup: \"main\",\n-                detail: \"fn main()\",\n-            },\n-            CompletionItem {\n-                label: \"with_ignored_args(\u2026)\",\n-                source_range: 77..82,\n-                delete: 77..82,\n-                insert: \"with_ignored_args(${1:foo}, ${2:bar}, ${3:ho_ge_})$0\",\n-                kind: Function,\n-                lookup: \"with_ignored_args\",\n-                detail: \"fn with_ignored_args(_foo: i32, ___bar: bool, ho_ge_: String)\",\n-                trigger_call_info: true,\n-            },\n-        ]\n-        \"###\n+        check_edit(\n+            \"with_args\",\n+            r#\"\n+fn with_args(x: i32, y: String) {}\n+fn main() { with_<|> }\n+\"#,\n+            r#\"\n+fn with_args(x: i32, y: String) {}\n+fn main() { with_args(${1:x}, ${2:y})$0 }\n+\"#,\n         );\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                struct S {}\n-                impl S {\n-                    fn foo(&self) {}\n-                }\n-                fn bar(s: &S) {\n-                    s.f<|>\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"foo()\",\n-                source_range: 66..67,\n-                delete: 66..67,\n-                insert: \"foo()$0\",\n-                kind: Method,\n-                lookup: \"foo\",\n-                detail: \"fn foo(&self)\",\n-            },\n-        ]\n-        \"###\n+        check_edit(\n+            \"foo\",\n+            r#\"\n+struct S;\n+impl S {\n+    fn foo(&self) {}\n+}\n+fn bar(s: &S) { s.f<|> }\n+\"#,\n+            r#\"\n+struct S;\n+impl S {\n+    fn foo(&self) {}\n+}\n+fn bar(s: &S) { s.foo()$0 }\n+\"#,\n         );\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                struct S {}\n-                impl S {\n-                    fn foo_ignored_args(&self, _a: bool, b: i32) {}\n-                }\n-                fn bar(s: &S) {\n-                    s.f<|>\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"foo_ignored_args(\u2026)\",\n-                source_range: 97..98,\n-                delete: 97..98,\n-                insert: \"foo_ignored_args(${1:a}, ${2:b})$0\",\n-                kind: Method,\n-                lookup: \"foo_ignored_args\",\n-                detail: \"fn foo_ignored_args(&self, _a: bool, b: i32)\",\n-                trigger_call_info: true,\n-            },\n-        ]\n-        \"###\n+    }\n+\n+    #[test]\n+    fn strips_underscores_from_args() {\n+        check_edit(\n+            \"foo\",\n+            r#\"\n+fn foo(_foo: i32, ___bar: bool, ho_ge_: String) {}\n+fn main() { f<|> }\n+\"#,\n+            r#\"\n+fn foo(_foo: i32, ___bar: bool, ho_ge_: String) {}\n+fn main() { foo(${1:foo}, ${2:bar}, ${3:ho_ge_})$0 }\n+\"#,\n         );\n     }\n "}, {"sha": "f251902411acef55f398e15379f11eb2a4714d54", "filename": "crates/ra_ide/src/completion/test_utils.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f9b38bdb47f6301fc01287fbe8dc1256c44fe08/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9b38bdb47f6301fc01287fbe8dc1256c44fe08/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs?ref=9f9b38bdb47f6301fc01287fbe8dc1256c44fe08", "patch": "@@ -3,7 +3,7 @@\n use hir::Semantics;\n use itertools::Itertools;\n use ra_syntax::{AstNode, NodeOrToken, SyntaxElement};\n-use stdx::format_to;\n+use stdx::{format_to, trim_indent};\n use test_utils::assert_eq_text;\n \n use crate::{\n@@ -57,14 +57,18 @@ pub(crate) fn completion_list_with_options(\n }\n \n pub(crate) fn check_edit(what: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n+    let ra_fixture_after = trim_indent(ra_fixture_after);\n     let (analysis, position) = analysis_and_position(ra_fixture_before);\n     let completions: Vec<CompletionItem> =\n         analysis.completions(&CompletionConfig::default(), position).unwrap().unwrap().into();\n-    let (completion,) =\n-        completions.into_iter().filter(|it| it.label() == what).collect_tuple().unwrap();\n+    let (completion,) = completions\n+        .iter()\n+        .filter(|it| it.lookup() == what)\n+        .collect_tuple()\n+        .unwrap_or_else(|| panic!(\"can't find {:?} completion in {:#?}\", what, completions));\n     let mut actual = analysis.file_text(position.file_id).unwrap().to_string();\n     completion.text_edit().apply(&mut actual);\n-    assert_eq_text!(ra_fixture_after, &actual)\n+    assert_eq_text!(&ra_fixture_after, &actual)\n }\n \n pub(crate) fn check_pattern_is_applicable(code: &str, check: fn(SyntaxElement) -> bool) {"}]}