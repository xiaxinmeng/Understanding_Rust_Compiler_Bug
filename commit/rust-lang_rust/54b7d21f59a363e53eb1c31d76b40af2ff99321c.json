{"sha": "54b7d21f59a363e53eb1c31d76b40af2ff99321c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YjdkMjFmNTlhMzYzZTUzZWIxYzMxZDc2YjQwYWYyZmY5OTMyMWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-12T16:20:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-12T16:20:52Z"}, "message": "Auto merge of #69950 - Centril:rollup-xh0hmvx, r=Centril\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #68899 (Add Display and Error impls for proc_macro::LexError)\n - #69011 (Document unsafe blocks in core::fmt)\n - #69674 (Rename DefKind::Method and TraitItemKind::Method )\n - #69705 (Toolstate: remove redundant beta-week check.)\n - #69722 (Tweak output for invalid negative impl AST errors)\n - #69747 (Rename rustc guide)\n - #69792 (Implement Error for TryReserveError)\n - #69830 (miri: ICE on invalid terminators)\n - #69921 (rustdoc: remove unused import)\n - #69945 (update outdated comment)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "927ba9a9388c1384392cd56cfbde1f5a74eb935c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/927ba9a9388c1384392cd56cfbde1f5a74eb935c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54b7d21f59a363e53eb1c31d76b40af2ff99321c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54b7d21f59a363e53eb1c31d76b40af2ff99321c", "html_url": "https://github.com/rust-lang/rust/commit/54b7d21f59a363e53eb1c31d76b40af2ff99321c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54b7d21f59a363e53eb1c31d76b40af2ff99321c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23de8275c9b5e5812dc54a12bdba6d80870d9dc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/23de8275c9b5e5812dc54a12bdba6d80870d9dc8", "html_url": "https://github.com/rust-lang/rust/commit/23de8275c9b5e5812dc54a12bdba6d80870d9dc8"}, {"sha": "9463cf3361d14d435263c3d3cd651c985cbbc485", "url": "https://api.github.com/repos/rust-lang/rust/commits/9463cf3361d14d435263c3d3cd651c985cbbc485", "html_url": "https://github.com/rust-lang/rust/commit/9463cf3361d14d435263c3d3cd651c985cbbc485"}], "stats": {"total": 974, "additions": 543, "deletions": 431}, "files": [{"sha": "9457cce11afbeb3e16022e552dea673f32c1d974", "filename": ".github/ISSUE_TEMPLATE/tracking_issue.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/.github%2FISSUE_TEMPLATE%2Ftracking_issue.md", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/.github%2FISSUE_TEMPLATE%2Ftracking_issue.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Ftracking_issue.md?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -36,11 +36,11 @@ for larger features an implementation could be broken up into multiple PRs.\n \n - [ ] Implement the RFC (cc @rust-lang/XXX -- can anyone write up mentoring\n       instructions?)\n-- [ ] Adjust documentation ([see instructions on rustc-guide][doc-guide])\n-- [ ] Stabilization PR ([see instructions on rustc-guide][stabilization-guide])\n+- [ ] Adjust documentation ([see instructions on rustc-dev-guide][doc-guide])\n+- [ ] Stabilization PR ([see instructions on rustc-dev-guide][stabilization-guide])\n \n-[stabilization-guide]: https://rust-lang.github.io/rustc-guide/stabilization_guide.html#stabilization-pr\n-[doc-guide]: https://rust-lang.github.io/rustc-guide/stabilization_guide.html#documentation-prs\n+[stabilization-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#stabilization-pr\n+[doc-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#documentation-prs\n \n ### Unresolved Questions\n <!--"}, {"sha": "2843944b2e1812c10e304756a2c26a8c62735d4f", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -19,7 +19,7 @@ hop on the [Rust Discord server][rust-discord] or [Rust Zulip server][rust-zulip\n \n As a reminder, all contributors are expected to follow our [Code of Conduct][coc].\n \n-The [rustc-guide] is your friend! It describes how the compiler works and how\n+The [rustc-dev-guide] is your friend! It describes how the compiler works and how\n to contribute to it in more detail than this document.\n \n If this is your first time contributing, the [walkthrough] chapter of the guide\n@@ -29,8 +29,8 @@ can give you a good example of how a typical contribution would go.\n [rust-discord]: http://discord.gg/rust-lang\n [rust-zulip]: https://rust-lang.zulipchat.com\n [coc]: https://www.rust-lang.org/conduct.html\n-[rustc-guide]: https://rust-lang.github.io/rustc-guide/\n-[walkthrough]: https://rust-lang.github.io/rustc-guide/walkthrough.html\n+[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/\n+[walkthrough]: https://rustc-dev-guide.rust-lang.org/walkthrough.html\n \n ## Feature Requests\n [feature-requests]: #feature-requests\n@@ -103,12 +103,12 @@ $ RUST_BACKTRACE=1 rustc ...\n ## The Build System\n \n For info on how to configure and build the compiler, please see [this\n-chapter][rustcguidebuild] of the rustc-guide. This chapter contains info for\n+chapter][rustcguidebuild] of the rustc-dev-guide. This chapter contains info for\n contributions to the compiler and the standard library. It also lists some\n really useful commands to the build system (`./x.py`), which could save you a\n lot of time.\n \n-[rustcguidebuild]: https://rust-lang.github.io/rustc-guide/building/how-to-build-and-run.html\n+[rustcguidebuild]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html\n \n ## Pull Requests\n [pull-requests]: #pull-requests\n@@ -336,9 +336,9 @@ to check small fixes. For example, `rustdoc src/doc/reference.md` will render\n reference to `doc/reference.html`. The CSS might be messed up, but you can\n verify that the HTML is right.\n \n-Additionally, contributions to the [rustc-guide] are always welcome. Contributions\n+Additionally, contributions to the [rustc-dev-guide] are always welcome. Contributions\n can be made directly at [the\n-rust-lang/rustc-guide](https://github.com/rust-lang/rustc-guide) repo. The issue\n+rust-lang/rustc-dev-guide](https://github.com/rust-lang/rustc-dev-guide) repo. The issue\n tracker in that repo is also a great way to find things that need doing. There\n are issues for beginners and advanced compiler devs alike!\n \n@@ -434,7 +434,7 @@ For people new to Rust, and just starting to contribute, or even for\n more seasoned developers, some useful places to look for information\n are:\n \n-* The [rustc guide] contains information about how various parts of the compiler work and how to contribute to the compiler\n+* The [rustc dev guide] contains information about how various parts of the compiler work and how to contribute to the compiler\n * [Rust Forge][rustforge] contains additional documentation, including write-ups of how to achieve common tasks\n * The [Rust Internals forum][rif], a place to ask questions and\n   discuss Rust's internals\n@@ -448,13 +448,13 @@ are:\n * **Google!** ([search only in Rust Documentation][gsearchdocs] to find types, traits, etc. quickly)\n * Don't be afraid to ask! The Rust community is friendly and helpful.\n \n-[rustc guide]: https://rust-lang.github.io/rustc-guide/about-this-guide.html\n+[rustc dev guide]: https://rustc-dev-guide.rust-lang.org/about-this-guide.html\n [gdfrustc]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/\n [gsearchdocs]: https://www.google.com/search?q=site:doc.rust-lang.org+your+query+here\n [rif]: http://internals.rust-lang.org\n [rr]: https://doc.rust-lang.org/book/README.html\n [rustforge]: https://forge.rust-lang.org/\n [tlgba]: http://tomlee.co/2014/04/a-more-detailed-tour-of-the-rust-compiler/\n [ro]: http://www.rustaceans.org/\n-[rctd]: https://rust-lang.github.io/rustc-guide/tests/intro.html\n+[rctd]: https://rustc-dev-guide.rust-lang.org/tests/intro.html\n [cheatsheet]: https://buildbot2.rust-lang.org/homu/"}, {"sha": "1cd9b8a3a2ae1855e6ea2011d23a14ce9957a09d", "filename": "README.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -15,13 +15,13 @@ Read [\"Installation\"] from [The Book].\n ## Installing from Source\n \n _Note: If you wish to contribute to the compiler, you should read [this\n-chapter][rustcguidebuild] of the rustc-guide instead of this section._\n+chapter][rustcguidebuild] of the rustc-dev-guide instead of this section._\n \n The Rust build system has a Python script called `x.py` to bootstrap building\n the compiler. More information about it may be found by running `./x.py --help`\n-or reading the [rustc guide][rustcguidebuild].\n+or reading the [rustc dev guide][rustcguidebuild].\n \n-[rustcguidebuild]: https://rust-lang.github.io/rustc-guide/building/how-to-build-and-run.html\n+[rustcguidebuild]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html\n \n ### Building on *nix\n 1. Make sure you have installed the dependencies:\n@@ -249,13 +249,13 @@ Most real-time collaboration happens in a variety of channels on the\n community, documentation, and all major contribution areas in the Rust ecosystem.\n A good place to ask for help would be the #help channel.\n \n-The [rustc guide] might be a good place to start if you want to find out how\n+The [rustc dev guide] might be a good place to start if you want to find out how\n various parts of the compiler work.\n \n Also, you may find the [rustdocs for the compiler itself][rustdocs] useful.\n \n [rust-discord]: https://discord.gg/rust-lang\n-[rustc guide]: https://rust-lang.github.io/rustc-guide/about-this-guide.html\n+[rustc dev guide]: https://rustc-dev-guide.rust-lang.org/about-this-guide.html\n [rustdocs]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/\n \n ## License"}, {"sha": "b69a92a723778b4b4224dfc37e1f85fb40c92cdb", "filename": "src/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FREADME.md?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -3,6 +3,6 @@ This directory contains the source code of the rust project, including:\n - `libstd`\n - Various submodules for tools, like rustdoc, rls, etc.\n \n-For more information on how various parts of the compiler work, see the [rustc guide].\n+For more information on how various parts of the compiler work, see the [rustc dev guide].\n \n-[rustc guide]: https://rust-lang.github.io/rustc-guide/about-this-guide.html\n+[rustc dev guide]: https://rustc-dev-guide.rust-lang.org/about-this-guide.html"}, {"sha": "f0e0f92af55fc3e7b2abab1f78cd1eaf3f909c0f", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 22, "deletions": 33, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -215,13 +215,21 @@ impl Step for ToolStateCheck {\n                             tool, old_state, state\n                         );\n                     } else {\n+                        // This warning only appears in the logs, which most\n+                        // people won't read. It's mostly here for testing and\n+                        // debugging.\n                         eprintln!(\n                             \"warning: Tool `{}` is not test-pass (is `{}`), \\\n                             this should be fixed before beta is branched.\",\n                             tool, state\n                         );\n                     }\n                 }\n+                // `publish_toolstate.py` is responsible for updating\n+                // `latest.json` and creating comments/issues warning people\n+                // if there is a regression. That all happens in a separate CI\n+                // job on the master branch once the PR has passed all tests\n+                // on the `auto` branch.\n             }\n         }\n \n@@ -230,7 +238,7 @@ impl Step for ToolStateCheck {\n         }\n \n         if builder.config.channel == \"nightly\" && env::var_os(\"TOOLSTATE_PUBLISH\").is_some() {\n-            commit_toolstate_change(&toolstates, in_beta_week);\n+            commit_toolstate_change(&toolstates);\n         }\n     }\n \n@@ -325,11 +333,11 @@ fn prepare_toolstate_config(token: &str) {\n             Err(_) => false,\n         };\n         if !success {\n-            panic!(\"git config key={} value={} successful (status: {:?})\", key, value, status);\n+            panic!(\"git config key={} value={} failed (status: {:?})\", key, value, status);\n         }\n     }\n \n-    // If changing anything here, then please check that src/ci/publish_toolstate.sh is up to date\n+    // If changing anything here, then please check that `src/ci/publish_toolstate.sh` is up to date\n     // as well.\n     git_config(\"user.email\", \"7378925+rust-toolstate-update@users.noreply.github.com\");\n     git_config(\"user.name\", \"Rust Toolstate Update\");\n@@ -373,14 +381,14 @@ fn read_old_toolstate() -> Vec<RepoState> {\n ///\n ///       * See <https://help.github.com/articles/about-commit-email-addresses/>\n ///           if a private email by GitHub is wanted.\n-fn commit_toolstate_change(current_toolstate: &ToolstateData, in_beta_week: bool) {\n-    let old_toolstate = read_old_toolstate();\n-\n+fn commit_toolstate_change(current_toolstate: &ToolstateData) {\n     let message = format!(\"({} CI update)\", OS.expect(\"linux/windows only\"));\n     let mut success = false;\n     for _ in 1..=5 {\n-        // Update the toolstate results (the new commit-to-toolstate mapping) in the toolstate repo.\n-        change_toolstate(&current_toolstate, &old_toolstate, in_beta_week);\n+        // Upload the test results (the new commit-to-toolstate mapping) to the toolstate repo.\n+        // This does *not* change the \"current toolstate\"; that only happens post-landing\n+        // via `src/ci/docker/publish_toolstate.sh`.\n+        publish_test_results(&current_toolstate);\n \n         // `git commit` failing means nothing to commit.\n         let status = t!(Command::new(\"git\")\n@@ -429,31 +437,12 @@ fn commit_toolstate_change(current_toolstate: &ToolstateData, in_beta_week: bool\n     }\n }\n \n-fn change_toolstate(\n-    current_toolstate: &ToolstateData,\n-    old_toolstate: &[RepoState],\n-    in_beta_week: bool,\n-) {\n-    let mut regressed = false;\n-    for repo_state in old_toolstate {\n-        let tool = &repo_state.tool;\n-        let state = repo_state.state();\n-        let new_state = current_toolstate[tool.as_str()];\n-\n-        if new_state != state {\n-            eprintln!(\"The state of `{}` has changed from `{}` to `{}`\", tool, state, new_state);\n-            if new_state < state {\n-                if !NIGHTLY_TOOLS.iter().any(|(name, _path)| name == tool) {\n-                    regressed = true;\n-                }\n-            }\n-        }\n-    }\n-\n-    if regressed && in_beta_week {\n-        std::process::exit(1);\n-    }\n-\n+/// Updates the \"history\" files with the latest results.\n+///\n+/// These results will later be promoted to `latest.json` by the\n+/// `publish_toolstate.py` script if the PR passes all tests and is merged to\n+/// master.\n+fn publish_test_results(current_toolstate: &ToolstateData) {\n     let commit = t!(std::process::Command::new(\"git\").arg(\"rev-parse\").arg(\"HEAD\").output());\n     let commit = t!(String::from_utf8(commit.stdout));\n "}, {"sha": "691df04e754a6fac9d1ccb6824ec4d63b1ca2ed4", "filename": "src/ci/publish_toolstate.sh", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Fci%2Fpublish_toolstate.sh", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Fci%2Fpublish_toolstate.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fpublish_toolstate.sh?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -23,7 +23,9 @@ GIT_COMMIT_MSG=\"$(git log --format=%s -n1 HEAD)\"\n cd rust-toolstate\n FAILURE=1\n for RETRY_COUNT in 1 2 3 4 5; do\n-    #  The purpose is to publish the new \"current\" toolstate in the toolstate repo.\n+    # The purpose of this is to publish the new \"current\" toolstate in the toolstate repo.\n+    # This happens post-landing, on master.\n+    # (Publishing the per-commit test results happens pre-landing in src/bootstrap/toolstate.rs).\n     \"$(ciCheckoutPath)/src/tools/publish_toolstate.py\" \"$GIT_COMMIT\" \\\n         \"$GIT_COMMIT_MSG\" \\\n         \"$MESSAGE_FILE\" \\"}, {"sha": "2d10230ffcf7a9d49d4108501470a9da6fc7f4d3", "filename": "src/doc/index.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -120,7 +120,7 @@ Rust. It's also sometimes called \"the 'nomicon.\"\n \n ## The `rustc` Contribution Guide\n \n-[The `rustc` Guide](https://rust-lang.github.io/rustc-guide/) documents how\n+[The `rustc` Guide](https://rustc-dev-guide.rust-lang.org/) documents how\n the compiler works and how to contribute to it. This is useful if you want to build\n or modify the Rust compiler from source (e.g. to target something non-standard).\n "}, {"sha": "3b552e7cc0a741ed3410f3fbfb6be6b111dd5e1b", "filename": "src/doc/rustc/src/contributing.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Fdoc%2Frustc%2Fsrc%2Fcontributing.md", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Fdoc%2Frustc%2Fsrc%2Fcontributing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcontributing.md?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,12 +1,12 @@\n # Contributing to rustc\n \n We'd love to have your help improving `rustc`! To that end, we've written [a\n-whole book][rustc_guide] on its\n+whole book][rustc_dev_guide] on its\n internals, how it works, and how to get started working on it. To learn\n more, you'll want to check that out.\n \n If you would like to contribute to _this_ book, you can find its source in the\n rustc source at [src/doc/rustc][rustc_book].\n \n-[rustc_guide]: https://rust-lang.github.io/rustc-guide/\n+[rustc_dev_guide]: https://rustc-dev-guide.rust-lang.org/\n [rustc_book]: https://github.com/rust-lang/rust/tree/master/src/doc/rustc"}, {"sha": "6b21e54f66aa0dcb6adf98a607d1d31297e1753a", "filename": "src/liballoc/collections/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Fliballoc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Fliballoc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fmod.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -42,6 +42,7 @@ pub use linked_list::LinkedList;\n pub use vec_deque::VecDeque;\n \n use crate::alloc::{Layout, LayoutErr};\n+use core::fmt::Display;\n \n /// The error type for `try_reserve` methods.\n #[derive(Clone, PartialEq, Eq, Debug)]\n@@ -77,6 +78,23 @@ impl From<LayoutErr> for TryReserveError {\n     }\n }\n \n+#[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+impl Display for TryReserveError {\n+    fn fmt(\n+        &self,\n+        fmt: &mut core::fmt::Formatter<'_>,\n+    ) -> core::result::Result<(), core::fmt::Error> {\n+        fmt.write_str(\"memory allocation failed\")?;\n+        let reason = match &self {\n+            TryReserveError::CapacityOverflow => {\n+                \" because the computed capacity exceeded the collection's maximum\"\n+            }\n+            TryReserveError::AllocError { .. } => \" because the memory allocator returned a error\",\n+        };\n+        fmt.write_str(reason)\n+    }\n+}\n+\n /// An intermediate trait for specialization of `Extend`.\n #[doc(hidden)]\n trait SpecExtend<I: IntoIterator> {"}, {"sha": "52d8349bc9a8770567f4079c2651b205bdaeab73", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -2,8 +2,6 @@ use crate::fmt::{Debug, Display, Formatter, LowerExp, Result, UpperExp};\n use crate::mem::MaybeUninit;\n use crate::num::flt2dec;\n \n-// ignore-tidy-undocumented-unsafe\n-\n // Don't inline this so callers don't use the stack space this function\n // requires unless they have to.\n #[inline(never)]\n@@ -16,6 +14,7 @@ fn float_to_decimal_common_exact<T>(\n where\n     T: flt2dec::DecodableFloat,\n {\n+    // SAFETY: Possible undefined behavior, see FIXME(#53491)\n     unsafe {\n         let mut buf = MaybeUninit::<[u8; 1024]>::uninit(); // enough for f32 and f64\n         let mut parts = MaybeUninit::<[flt2dec::Part<'_>; 4]>::uninit();\n@@ -48,6 +47,7 @@ fn float_to_decimal_common_shortest<T>(\n where\n     T: flt2dec::DecodableFloat,\n {\n+    // SAFETY: Possible undefined behavior, see FIXME(#53491)\n     unsafe {\n         // enough for f32 and f64\n         let mut buf = MaybeUninit::<[u8; flt2dec::MAX_SIG_DIGITS]>::uninit();\n@@ -103,6 +103,7 @@ fn float_to_exponential_common_exact<T>(\n where\n     T: flt2dec::DecodableFloat,\n {\n+    // SAFETY: Possible undefined behavior, see FIXME(#53491)\n     unsafe {\n         let mut buf = MaybeUninit::<[u8; 1024]>::uninit(); // enough for f32 and f64\n         let mut parts = MaybeUninit::<[flt2dec::Part<'_>; 6]>::uninit();\n@@ -132,6 +133,7 @@ fn float_to_exponential_common_shortest<T>(\n where\n     T: flt2dec::DecodableFloat,\n {\n+    // SAFETY: Possible undefined behavior, see FIXME(#53491)\n     unsafe {\n         // enough for f32 and f64\n         let mut buf = MaybeUninit::<[u8; flt2dec::MAX_SIG_DIGITS]>::uninit();"}, {"sha": "a93b34fc46cb935294d5f304d18771e47eeb4dd4", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,7 +1,5 @@\n //! Utilities for formatting and printing strings.\n \n-// ignore-tidy-undocumented-unsafe\n-\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::cell::{Cell, Ref, RefCell, RefMut, UnsafeCell};\n@@ -281,6 +279,14 @@ impl<'a> ArgumentV1<'a> {\n     #[doc(hidden)]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n     pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {\n+        // SAFETY: `mem::transmute(x)` is safe because\n+        //     1. `&'b T` keeps the lifetime it originated with `'b`\n+        //              (so as to not have an unbounded lifetime)\n+        //     2. `&'b T` and `&'b Void` have the same memory layout\n+        //              (when `T` is `Sized`, as it is here)\n+        // `mem::transmute(f)` is safe since `fn(&T, &mut Formatter<'_>) -> Result`\n+        // and `fn(&Void, &mut Formatter<'_>) -> Result` have the same ABI\n+        // (as long as `T` is `Sized`)\n         unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }\n     }\n \n@@ -1399,6 +1405,14 @@ impl<'a> Formatter<'a> {\n \n     fn write_formatted_parts(&mut self, formatted: &flt2dec::Formatted<'_>) -> Result {\n         fn write_bytes(buf: &mut dyn Write, s: &[u8]) -> Result {\n+            // SAFETY: This is used for `flt2dec::Part::Num` and `flt2dec::Part::Copy`.\n+            // It's safe to use for `flt2dec::Part::Num` since every char `c` is between\n+            // `b'0'` and `b'9'`, which means `s` is valid UTF-8.\n+            // It's also probably safe in practice to use for `flt2dec::Part::Copy(buf)`\n+            // since `buf` should be plain ASCII, but it's possible for someone to pass\n+            // in a bad value for `buf` into `flt2dec::to_shortest_str` since it is a\n+            // public function.\n+            // FIXME: Determine whether this could result in UB.\n             buf.write_str(unsafe { str::from_utf8_unchecked(s) })\n         }\n "}, {"sha": "7d77e33d743785f1c6f795b51659d411865b684a", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,7 +1,5 @@\n //! Integer and floating-point number formatting\n \n-// ignore-tidy-undocumented-unsafe\n-\n use crate::fmt;\n use crate::mem::MaybeUninit;\n use crate::num::flt2dec;\n@@ -84,6 +82,8 @@ trait GenericRadix {\n             }\n         }\n         let buf = &buf[curr..];\n+        // SAFETY: The only chars in `buf` are created by `Self::digit` which are assumed to be\n+        // valid UTF-8\n         let buf = unsafe {\n             str::from_utf8_unchecked(slice::from_raw_parts(MaybeUninit::first_ptr(buf), buf.len()))\n         };\n@@ -189,11 +189,19 @@ static DEC_DIGITS_LUT: &[u8; 200] = b\"0001020304050607080910111213141516171819\\\n macro_rules! impl_Display {\n     ($($t:ident),* as $u:ident via $conv_fn:ident named $name:ident) => {\n         fn $name(mut n: $u, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+            // 2^128 is about 3*10^38, so 39 gives an extra byte of space\n             let mut buf = [MaybeUninit::<u8>::uninit(); 39];\n             let mut curr = buf.len() as isize;\n             let buf_ptr = MaybeUninit::first_ptr_mut(&mut buf);\n             let lut_ptr = DEC_DIGITS_LUT.as_ptr();\n \n+            // SAFETY: Since `d1` and `d2` are always less than or equal to `198`, we\n+            // can copy from `lut_ptr[d1..d1 + 1]` and `lut_ptr[d2..d2 + 1]`. To show\n+            // that it's OK to copy into `buf_ptr`, notice that at the beginning\n+            // `curr == buf.len() == 39 > log(n)` since `n < 2^128 < 10^39`, and at\n+            // each step this is kept the same as `n` is divided. Since `n` is always\n+            // non-negative, this means that `curr > 0` so `buf_ptr[curr..curr + 1]`\n+            // is safe to access.\n             unsafe {\n                 // need at least 16 bits for the 4-characters-at-a-time to work.\n                 assert!(crate::mem::size_of::<$u>() >= 2);\n@@ -206,6 +214,10 @@ macro_rules! impl_Display {\n                     let d1 = (rem / 100) << 1;\n                     let d2 = (rem % 100) << 1;\n                     curr -= 4;\n+\n+                    // We are allowed to copy to `buf_ptr[curr..curr + 3]` here since\n+                    // otherwise `curr < 0`. But then `n` was originally at least `10000^10`\n+                    // which is `10^40 > 2^128 > n`.\n                     ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);\n                     ptr::copy_nonoverlapping(lut_ptr.offset(d2), buf_ptr.offset(curr + 2), 2);\n                 }\n@@ -232,6 +244,8 @@ macro_rules! impl_Display {\n                 }\n             }\n \n+            // SAFETY: `curr` > 0 (since we made `buf` large enough), and all the chars are valid\n+            // UTF-8 since `DEC_DIGITS_LUT` is\n             let buf_slice = unsafe {\n                 str::from_utf8_unchecked(\n                     slice::from_raw_parts(buf_ptr.offset(curr), buf.len() - curr as usize))\n@@ -304,6 +318,8 @@ macro_rules! impl_Exp {\n             };\n \n             // 39 digits (worst case u128) + . = 40\n+            // Since `curr` always decreases by the number of digits copied, this means\n+            // that `curr >= 0`.\n             let mut buf = [MaybeUninit::<u8>::uninit(); 40];\n             let mut curr = buf.len() as isize; //index for buf\n             let buf_ptr = MaybeUninit::first_ptr_mut(&mut buf);\n@@ -313,6 +329,8 @@ macro_rules! impl_Exp {\n             while n >= 100 {\n                 let d1 = ((n % 100) as isize) << 1;\n                 curr -= 2;\n+                // SAFETY: `d1 <= 198`, so we can copy from `lut_ptr[d1..d1 + 2]` since\n+                // `DEC_DIGITS_LUT` has a length of 200.\n                 unsafe {\n                     ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);\n                 }\n@@ -324,6 +342,7 @@ macro_rules! impl_Exp {\n             // decode second-to-last character\n             if n >= 10 {\n                 curr -= 1;\n+                // SAFETY: Safe since `40 > curr >= 0` (see comment)\n                 unsafe {\n                     *buf_ptr.offset(curr) = (n as u8 % 10_u8) + b'0';\n                 }\n@@ -333,11 +352,13 @@ macro_rules! impl_Exp {\n             // add decimal point iff >1 mantissa digit will be printed\n             if exponent != trailing_zeros || added_precision != 0 {\n                 curr -= 1;\n+                // SAFETY: Safe since `40 > curr >= 0`\n                 unsafe {\n                     *buf_ptr.offset(curr) = b'.';\n                 }\n             }\n \n+            // SAFETY: Safe since `40 > curr >= 0`\n             let buf_slice = unsafe {\n                 // decode last character\n                 curr -= 1;\n@@ -350,6 +371,8 @@ macro_rules! impl_Exp {\n             // stores 'e' (or 'E') and the up to 2-digit exponent\n             let mut exp_buf = [MaybeUninit::<u8>::uninit(); 3];\n             let exp_ptr = MaybeUninit::first_ptr_mut(&mut exp_buf);\n+            // SAFETY: In either case, `exp_buf` is written within bounds and `exp_ptr[..len]`\n+            // is contained within `exp_buf` since `len <= 3`.\n             let exp_slice = unsafe {\n                 *exp_ptr.offset(0) = if upper {b'E'} else {b'e'};\n                 let len = if exponent < 10 {"}, {"sha": "59ce14c97c0e6506941f82934038a0834fc9bc37", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -41,7 +41,7 @@ pub use diagnostic::{Diagnostic, Level, MultiSpan};\n use std::ops::{Bound, RangeBounds};\n use std::path::PathBuf;\n use std::str::FromStr;\n-use std::{fmt, iter, mem};\n+use std::{error, fmt, iter, mem};\n \n /// The main type provided by this crate, representing an abstract stream of\n /// tokens, or, more specifically, a sequence of token trees.\n@@ -66,6 +66,16 @@ pub struct LexError {\n     _inner: (),\n }\n \n+#[stable(feature = \"proc_macro_lexerror_impls\", since = \"1.44.0\")]\n+impl fmt::Display for LexError {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.write_str(\"cannot parse string into token stream\")\n+    }\n+}\n+\n+#[stable(feature = \"proc_macro_lexerror_impls\", since = \"1.44.0\")]\n+impl error::Error for LexError {}\n+\n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n impl !Send for LexError {}\n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]"}, {"sha": "de58f546cd3b5d1fb053c5a2fd8bd2d03e3a4b55", "filename": "src/librustc/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FREADME.md?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,3 +1,3 @@\n-For more information about how rustc works, see the [rustc guide].\n+For more information about how rustc works, see the [rustc dev guide].\n \n-[rustc guide]: https://rust-lang.github.io/rustc-guide/\n+[rustc dev guide]: https://rustc-dev-guide.rust-lang.org/"}, {"sha": "b9d91cd35a8ddf6ce799b94d488bffc955b2efde", "filename": "src/librustc/dep_graph/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fdep_graph%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fdep_graph%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2FREADME.md?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,4 +1,4 @@\n To learn more about how dependency tracking works in rustc, see the [rustc\n guide].\n \n-[rustc guide]: https://rust-lang.github.io/rustc-guide/query.html\n+[rustc dev guide]: https://rustc-dev-guide.rust-lang.org/query.html"}, {"sha": "a2dc1fdb34b78a563b3b650134181f833f01bf25", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -174,7 +174,7 @@ impl DepGraph {\n     /// what state they have access to. In particular, we want to\n     /// prevent implicit 'leaks' of tracked state into the task (which\n     /// could then be read without generating correct edges in the\n-    /// dep-graph -- see the [rustc guide] for more details on\n+    /// dep-graph -- see the [rustc dev guide] for more details on\n     /// the dep-graph). To this end, the task function gets exactly two\n     /// pieces of state: the context `cx` and an argument `arg`. Both\n     /// of these bits of state must be of some type that implements\n@@ -194,7 +194,7 @@ impl DepGraph {\n     /// - If you need 3+ arguments, use a tuple for the\n     ///   `arg` parameter.\n     ///\n-    /// [rustc guide]: https://rust-lang.github.io/rustc-guide/incremental-compilation.html\n+    /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/incremental-compilation.html\n     pub fn with_task<'a, C, A, R>(\n         &self,\n         key: DepNode,"}, {"sha": "d9ffe4582e7d77e75ebace0a02066e50b0fa4be4", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -60,7 +60,7 @@ impl MaybeFnLike for hir::ImplItem<'_> {\n impl MaybeFnLike for hir::TraitItem<'_> {\n     fn is_fn_like(&self) -> bool {\n         match self.kind {\n-            hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(_)) => true,\n+            hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(_)) => true,\n             _ => false,\n         }\n     }\n@@ -239,7 +239,7 @@ impl<'a> FnLikeNode<'a> {\n                 _ => bug!(\"item FnLikeNode that is not fn-like\"),\n             },\n             Node::TraitItem(ti) => match ti.kind {\n-                hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) => {\n+                hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Provided(body)) => {\n                     method(ti.hir_id, ti.ident, sig, None, body, ti.span, &ti.attrs)\n                 }\n                 _ => bug!(\"trait method FnLikeNode that is not fn-like\"),"}, {"sha": "cacb76c28619128724b2e52f84f7c94f46c15cda", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -51,7 +51,7 @@ impl<'hir> Entry<'hir> {\n             },\n \n             Node::TraitItem(ref item) => match item.kind {\n-                TraitItemKind::Method(ref sig, _) => Some(&sig.decl),\n+                TraitItemKind::Fn(ref sig, _) => Some(&sig.decl),\n                 _ => None,\n             },\n \n@@ -77,7 +77,7 @@ impl<'hir> Entry<'hir> {\n             },\n \n             Node::TraitItem(item) => match &item.kind {\n-                TraitItemKind::Method(sig, _) => Some(sig),\n+                TraitItemKind::Fn(sig, _) => Some(sig),\n                 _ => None,\n             },\n \n@@ -101,7 +101,7 @@ impl<'hir> Entry<'hir> {\n \n             Node::TraitItem(item) => match item.kind {\n                 TraitItemKind::Const(_, Some(body))\n-                | TraitItemKind::Method(_, TraitMethod::Provided(body)) => Some(body),\n+                | TraitItemKind::Fn(_, TraitMethod::Provided(body)) => Some(body),\n                 _ => None,\n             },\n \n@@ -326,12 +326,12 @@ impl<'hir> Map<'hir> {\n             },\n             Node::TraitItem(item) => match item.kind {\n                 TraitItemKind::Const(..) => DefKind::AssocConst,\n-                TraitItemKind::Method(..) => DefKind::Method,\n+                TraitItemKind::Fn(..) => DefKind::AssocFn,\n                 TraitItemKind::Type(..) => DefKind::AssocTy,\n             },\n             Node::ImplItem(item) => match item.kind {\n                 ImplItemKind::Const(..) => DefKind::AssocConst,\n-                ImplItemKind::Method(..) => DefKind::Method,\n+                ImplItemKind::Method(..) => DefKind::AssocFn,\n                 ImplItemKind::TyAlias(..) => DefKind::AssocTy,\n                 ImplItemKind::OpaqueTy(..) => DefKind::AssocOpaqueTy,\n             },\n@@ -472,7 +472,7 @@ impl<'hir> Map<'hir> {\n             | Node::AnonConst(_) => BodyOwnerKind::Const,\n             Node::Ctor(..)\n             | Node::Item(&Item { kind: ItemKind::Fn(..), .. })\n-            | Node::TraitItem(&TraitItem { kind: TraitItemKind::Method(..), .. })\n+            | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })\n             | Node::ImplItem(&ImplItem { kind: ImplItemKind::Method(..), .. }) => BodyOwnerKind::Fn,\n             Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),\n             Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,\n@@ -800,7 +800,7 @@ impl<'hir> Map<'hir> {\n                     _ => false,\n                 },\n                 Node::TraitItem(ti) => match ti.kind {\n-                    TraitItemKind::Method(..) => true,\n+                    TraitItemKind::Fn(..) => true,\n                     _ => false,\n                 },\n                 Node::ImplItem(ii) => match ii.kind {\n@@ -1311,7 +1311,7 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n         Some(Node::TraitItem(ti)) => {\n             let kind = match ti.kind {\n                 TraitItemKind::Const(..) => \"assoc constant\",\n-                TraitItemKind::Method(..) => \"trait method\",\n+                TraitItemKind::Fn(..) => \"trait method\",\n                 TraitItemKind::Type(..) => \"assoc type\",\n             };\n "}, {"sha": "30c9a2ee769fb92fc485b73534172fc673ea0019", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,6 +1,6 @@\n-//! HIR datatypes. See the [rustc guide] for more info.\n+//! HIR datatypes. See the [rustc dev guide] for more info.\n //!\n-//! [rustc guide]: https://rust-lang.github.io/rustc-guide/hir.html\n+//! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/hir.html\n \n pub mod exports;\n pub mod map;"}, {"sha": "5f7e8c849653c50f904f9e1ae45181f132f1308c", "filename": "src/librustc/infer/canonical.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -17,9 +17,9 @@\n //! `instantiate_query_result` method.\n //!\n //! For a more detailed look at what is happening here, check\n-//! out the [chapter in the rustc guide][c].\n+//! out the [chapter in the rustc dev guide][c].\n //!\n-//! [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n+//! [c]: https://rustc-dev-guide.rust-lang.org/traits/canonicalization.html\n \n use crate::infer::MemberConstraint;\n use crate::ty::subst::GenericArg;"}, {"sha": "24237235e0c4a13f3ade8b8c6b5c6c777505e1d0", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -14,9 +14,9 @@\n //!   (or `tcx`), which is the central context during most of\n //!   compilation, containing the interners and other things.\n //!\n-//! For more information about how rustc works, see the [rustc guide].\n+//! For more information about how rustc works, see the [rustc dev guide].\n //!\n-//! [rustc guide]: https://rust-lang.github.io/rustc-guide/\n+//! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/\n //!\n //! # Note\n //!"}, {"sha": "758ba4a1ab0139712072c372d160aebcd24bc206", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -2,9 +2,9 @@\n //! the parent links in the region hierarchy.\n //!\n //! For more information about how MIR-based region-checking works,\n-//! see the [rustc guide].\n+//! see the [rustc dev guide].\n //!\n-//! [rustc guide]: https://rust-lang.github.io/rustc-guide/mir/borrowck.html\n+//! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/mir/borrowck.html\n \n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::ty::{self, DefIdTree, TyCtxt};"}, {"sha": "048e24ce3aa8978ebc79c83bb4121f42264fc191", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -250,7 +250,7 @@ pub enum EvalResult {\n fn skip_stability_check_due_to_privacy(tcx: TyCtxt<'_>, mut def_id: DefId) -> bool {\n     // Check if `def_id` is a trait method.\n     match tcx.def_kind(def_id) {\n-        Some(DefKind::Method) | Some(DefKind::AssocTy) | Some(DefKind::AssocConst) => {\n+        Some(DefKind::AssocFn) | Some(DefKind::AssocTy) | Some(DefKind::AssocConst) => {\n             if let ty::TraitContainer(trait_def_id) = tcx.associated_item(def_id).container {\n                 // Trait methods do not declare visibility (even\n                 // for visibility info in cstore). Use containing"}, {"sha": "afb585c4aa339d6767a96010d286362d24e28910", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,6 +1,6 @@\n-//! MIR datatypes and passes. See the [rustc guide] for more info.\n+//! MIR datatypes and passes. See the [rustc dev guide] for more info.\n //!\n-//! [rustc guide]: https://rust-lang.github.io/rustc-guide/mir/index.html\n+//! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/mir/index.html\n \n use crate::mir::interpret::{GlobalAlloc, Scalar};\n use crate::mir::visit::MirVisitable;"}, {"sha": "6ebcc8b075462966d271d4d00d3e83878fd2a6b8", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,6 +1,6 @@\n-//! Trait Resolution. See the [rustc guide] for more information on how this works.\n+//! Trait Resolution. See the [rustc dev guide] for more information on how this works.\n //!\n-//! [rustc guide]: https://rust-lang.github.io/rustc-guide/traits/resolution.html\n+//! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/resolution.html\n \n pub mod query;\n pub mod select;"}, {"sha": "08d78b3a0b24bad391ee18195527e243a14b31a6", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,6 +1,6 @@\n-//! Candidate selection. See the [rustc guide] for more information on how this works.\n+//! Candidate selection. See the [rustc dev guide] for more information on how this works.\n //!\n-//! [rustc guide]: https://rust-lang.github.io/rustc-guide/traits/resolution.html#selection\n+//! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/resolution.html#selection\n \n use self::EvaluationResult::*;\n "}, {"sha": "6fab55e9fd935a0060cf04da0b449b25d12bc2f3", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -611,7 +611,7 @@ impl<'tcx> TypeckTables<'tcx> {\n         }\n \n         match self.type_dependent_defs().get(expr.hir_id) {\n-            Some(Ok((DefKind::Method, _))) => true,\n+            Some(Ok((DefKind::AssocFn, _))) => true,\n             _ => false,\n         }\n     }\n@@ -916,9 +916,9 @@ pub struct FreeRegionInfo {\n /// The central data structure of the compiler. It stores references\n /// to the various **arenas** and also houses the results of the\n /// various **compiler queries** that have been performed. See the\n-/// [rustc guide] for more details.\n+/// [rustc dev guide] for more details.\n ///\n-/// [rustc guide]: https://rust-lang.github.io/rustc-guide/ty.html\n+/// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/ty.html\n #[derive(Copy, Clone)]\n #[rustc_diagnostic_item = \"TyCtxt\"]\n pub struct TyCtxt<'tcx> {"}, {"sha": "c2697570dda2785040b750570f39ff7db7a9f79b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -230,7 +230,7 @@ impl AssocItem {\n     pub fn def_kind(&self) -> DefKind {\n         match self.kind {\n             AssocKind::Const => DefKind::AssocConst,\n-            AssocKind::Method => DefKind::Method,\n+            AssocKind::Method => DefKind::AssocFn,\n             AssocKind::Type => DefKind::AssocTy,\n             AssocKind::OpaqueTy => DefKind::AssocOpaqueTy,\n         }\n@@ -2872,7 +2872,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             }\n         } else {\n             match self.def_kind(def_id).expect(\"no def for `DefId`\") {\n-                DefKind::AssocConst | DefKind::Method | DefKind::AssocTy => true,\n+                DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy => true,\n                 _ => false,\n             }\n         };\n@@ -3051,7 +3051,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.\n     pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {\n         let item = if def_id.krate != LOCAL_CRATE {\n-            if let Some(DefKind::Method) = self.def_kind(def_id) {\n+            if let Some(DefKind::AssocFn) = self.def_kind(def_id) {\n                 Some(self.associated_item(def_id))\n             } else {\n                 None"}, {"sha": "8ec07b9fdeb7844820f565350d72f2b102ea6496", "filename": "src/librustc/ty/query/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fty%2Fquery%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fty%2Fquery%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2FREADME.md?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,3 +1,3 @@\n-For more information about how the query system works, see the [rustc guide].\n+For more information about how the query system works, see the [rustc dev guide].\n \n-[rustc guide]: https://rust-lang.github.io/rustc-guide/query.html\n+[rustc dev guide]: https://rustc-dev-guide.rust-lang.org/query.html"}, {"sha": "76b9aed83148235fdf68e2e9615aa0418e512362", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1396,11 +1396,11 @@ pub type Region<'tcx> = &'tcx RegionKind;\n /// the inference variable is supposed to satisfy the relation\n /// *for every value of the placeholder region*. To ensure that doesn't\n /// happen, you can use `leak_check`. This is more clearly explained\n-/// by the [rustc guide].\n+/// by the [rustc dev guide].\n ///\n /// [1]: http://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/\n /// [2]: http://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/\n-/// [rustc guide]: https://rust-lang.github.io/rustc-guide/traits/hrtb.html\n+/// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html\n #[derive(Clone, PartialEq, Eq, Hash, Copy, RustcEncodable, RustcDecodable, PartialOrd, Ord)]\n pub enum RegionKind {\n     /// Region bound in a type or fn declaration which will be"}, {"sha": "dd407dba1f4cca03b3e19bce687b40e49a3ead68", "filename": "src/librustc_ast/README.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_ast%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_ast%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2FREADME.md?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -3,7 +3,7 @@ The `rustc_ast` crate contains those things concerned purely with syntax\n lexer, macro expander, and utilities for traversing ASTs.\n \n For more information about how these things work in rustc, see the\n-rustc guide:\n+rustc dev guide:\n \n-- [Parsing](https://rust-lang.github.io/rustc-guide/the-parser.html)\n-- [Macro Expansion](https://rust-lang.github.io/rustc-guide/macro-expansion.html)\n+- [Parsing](https://rustc-dev-guide.rust-lang.org/the-parser.html)\n+- [Macro Expansion](https://rustc-dev-guide.rust-lang.org/macro-expansion.html)"}, {"sha": "7faba4600a90a4882e37f74acd17e6c7596f4d86", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -2118,14 +2118,14 @@ pub enum ImplPolarity {\n     /// `impl Trait for Type`\n     Positive,\n     /// `impl !Trait for Type`\n-    Negative,\n+    Negative(Span),\n }\n \n impl fmt::Debug for ImplPolarity {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             ImplPolarity::Positive => \"positive\".fmt(f),\n-            ImplPolarity::Negative => \"negative\".fmt(f),\n+            ImplPolarity::Negative(_) => \"negative\".fmt(f),\n         }\n     }\n }"}, {"sha": "fcc859e3b6d198a5e859e98ff5720824fd38261d", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -761,13 +761,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let names = self.lower_fn_params_to_names(&sig.decl);\n                 let (generics, sig) =\n                     self.lower_method_sig(generics, sig, trait_item_def_id, false, None);\n-                (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Required(names)))\n+                (generics, hir::TraitItemKind::Fn(sig, hir::TraitMethod::Required(names)))\n             }\n             AssocItemKind::Fn(_, ref sig, ref generics, Some(ref body)) => {\n                 let body_id = self.lower_fn_body_block(i.span, &sig.decl, Some(body));\n                 let (generics, sig) =\n                     self.lower_method_sig(generics, sig, trait_item_def_id, false, None);\n-                (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Provided(body_id)))\n+                (generics, hir::TraitItemKind::Fn(sig, hir::TraitMethod::Provided(body_id)))\n             }\n             AssocItemKind::TyAlias(_, ref generics, ref bounds, ref default) => {\n                 let ty = default.as_ref().map(|x| self.lower_ty(x, ImplTraitContext::disallowed()));"}, {"sha": "db8517bfbf0c78825b51a8d438759a76d98c1fca", "filename": "src/librustc_ast_lowering/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_ast_lowering%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_ast_lowering%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpath.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -75,7 +75,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             ParenthesizedGenericArgs::Ok\n                         }\n                         // `a::b::Trait(Args)::TraitItem`\n-                        Res::Def(DefKind::Method, _)\n+                        Res::Def(DefKind::AssocFn, _)\n                         | Res::Def(DefKind::AssocConst, _)\n                         | Res::Def(DefKind::AssocTy, _)\n                             if i + 2 == proj_start =>"}, {"sha": "a2d83a525cc7876b21ce55f9a5a7ab9be7c8de3e", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 77, "deletions": 49, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -9,6 +9,7 @@\n use rustc_ast::ast::*;\n use rustc_ast::attr;\n use rustc_ast::expand::is_proc_macro_attr;\n+use rustc_ast::ptr::P;\n use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_ast::walk_list;\n use rustc_ast_pretty::pprust;\n@@ -594,6 +595,54 @@ impl<'a> AstValidator<'a> {\n             .span_label(ident.span, format!(\"`_` is not a valid name for this `{}` item\", kind))\n             .emit();\n     }\n+\n+    fn deny_generic_params(&self, generics: &Generics, ident_span: Span) {\n+        if !generics.params.is_empty() {\n+            struct_span_err!(\n+                self.session,\n+                generics.span,\n+                E0567,\n+                \"auto traits cannot have generic parameters\"\n+            )\n+            .span_label(ident_span, \"auto trait cannot have generic parameters\")\n+            .span_suggestion(\n+                generics.span,\n+                \"remove the parameters\",\n+                String::new(),\n+                Applicability::MachineApplicable,\n+            )\n+            .emit();\n+        }\n+    }\n+\n+    fn deny_super_traits(&self, bounds: &GenericBounds, ident_span: Span) {\n+        if let [first @ last] | [first, .., last] = &bounds[..] {\n+            let span = first.span().to(last.span());\n+            struct_span_err!(self.session, span, E0568, \"auto traits cannot have super traits\")\n+                .span_label(ident_span, \"auto trait cannot have super traits\")\n+                .span_suggestion(\n+                    span,\n+                    \"remove the super traits\",\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n+        }\n+    }\n+\n+    fn deny_items(&self, trait_items: &[P<AssocItem>], ident_span: Span) {\n+        if !trait_items.is_empty() {\n+            let spans: Vec<_> = trait_items.iter().map(|i| i.ident.span).collect();\n+            struct_span_err!(\n+                self.session,\n+                spans,\n+                E0380,\n+                \"auto traits cannot have methods or associated items\"\n+            )\n+            .span_label(ident_span, \"auto trait cannot have items\")\n+            .emit();\n+        }\n+    }\n }\n \n fn validate_generic_param_order<'a>(\n@@ -779,7 +828,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 defaultness: _,\n                 constness: _,\n                 generics: _,\n-                of_trait: Some(_),\n+                of_trait: Some(ref t),\n                 ref self_ty,\n                 items: _,\n             } => {\n@@ -794,13 +843,14 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                             .help(\"use `auto trait Trait {}` instead\")\n                             .emit();\n                     }\n-                    if let (Unsafe::Yes(span), ImplPolarity::Negative) = (unsafety, polarity) {\n+                    if let (Unsafe::Yes(span), ImplPolarity::Negative(sp)) = (unsafety, polarity) {\n                         struct_span_err!(\n                             this.session,\n-                            item.span,\n+                            sp.to(t.path.span),\n                             E0198,\n                             \"negative impls cannot be unsafe\"\n                         )\n+                        .span_label(sp, \"negative because of this\")\n                         .span_label(span, \"unsafe because of this\")\n                         .emit();\n                     }\n@@ -816,38 +866,36 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 constness,\n                 generics: _,\n                 of_trait: None,\n-                self_ty: _,\n+                ref self_ty,\n                 items: _,\n             } => {\n+                let error = |annotation_span, annotation| {\n+                    let mut err = self.err_handler().struct_span_err(\n+                        self_ty.span,\n+                        &format!(\"inherent impls cannot be {}\", annotation),\n+                    );\n+                    err.span_label(annotation_span, &format!(\"{} because of this\", annotation));\n+                    err.span_label(self_ty.span, \"inherent impl for this type\");\n+                    err\n+                };\n+\n                 self.invalid_visibility(\n                     &item.vis,\n                     Some(\"place qualifiers on individual impl items instead\"),\n                 );\n                 if let Unsafe::Yes(span) = unsafety {\n-                    struct_span_err!(\n-                        self.session,\n-                        item.span,\n-                        E0197,\n-                        \"inherent impls cannot be unsafe\"\n-                    )\n-                    .span_label(span, \"unsafe because of this\")\n-                    .emit();\n+                    error(span, \"unsafe\").code(error_code!(E0197)).emit();\n                 }\n-                if polarity == ImplPolarity::Negative {\n-                    self.err_handler().span_err(item.span, \"inherent impls cannot be negative\");\n+                if let ImplPolarity::Negative(span) = polarity {\n+                    error(span, \"negative\").emit();\n                 }\n                 if let Defaultness::Default(def_span) = defaultness {\n-                    let span = self.session.source_map().def_span(item.span);\n-                    self.err_handler()\n-                        .struct_span_err(span, \"inherent impls cannot be `default`\")\n-                        .span_label(def_span, \"`default` because of this\")\n+                    error(def_span, \"`default`\")\n                         .note(\"only trait implementations may be annotated with `default`\")\n                         .emit();\n                 }\n                 if let Const::Yes(span) = constness {\n-                    self.err_handler()\n-                        .struct_span_err(item.span, \"inherent impls cannot be `const`\")\n-                        .span_label(span, \"`const` because of this\")\n+                    error(span, \"`const`\")\n                         .note(\"only trait implementations may be annotated with `const`\")\n                         .emit();\n                 }\n@@ -882,33 +930,9 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             ItemKind::Trait(is_auto, _, ref generics, ref bounds, ref trait_items) => {\n                 if is_auto == IsAuto::Yes {\n                     // Auto traits cannot have generics, super traits nor contain items.\n-                    if !generics.params.is_empty() {\n-                        struct_span_err!(\n-                            self.session,\n-                            item.span,\n-                            E0567,\n-                            \"auto traits cannot have generic parameters\"\n-                        )\n-                        .emit();\n-                    }\n-                    if !bounds.is_empty() {\n-                        struct_span_err!(\n-                            self.session,\n-                            item.span,\n-                            E0568,\n-                            \"auto traits cannot have super traits\"\n-                        )\n-                        .emit();\n-                    }\n-                    if !trait_items.is_empty() {\n-                        struct_span_err!(\n-                            self.session,\n-                            item.span,\n-                            E0380,\n-                            \"auto traits cannot have methods or associated items\"\n-                        )\n-                        .emit();\n-                    }\n+                    self.deny_generic_params(generics, item.ident.span);\n+                    self.deny_super_traits(bounds, item.ident.span);\n+                    self.deny_items(trait_items, item.ident.span);\n                 }\n                 self.no_questions_in_bounds(bounds, \"supertraits\", true);\n \n@@ -1153,9 +1177,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         }) = fk.header()\n         {\n             self.err_handler()\n-                .struct_span_err(span, \"functions cannot be both `const` and `async`\")\n+                .struct_span_err(\n+                    vec![*cspan, *aspan],\n+                    \"functions cannot be both `const` and `async`\",\n+                )\n                 .span_label(*cspan, \"`const` because of this\")\n                 .span_label(*aspan, \"`async` because of this\")\n+                .span_label(span, \"\") // Point at the fn header.\n                 .emit();\n         }\n "}, {"sha": "5f36149451dd27c29b2d2e80cc0982d72061a023", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -337,14 +337,14 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 }\n             }\n \n-            ast::ItemKind::Impl { polarity, defaultness, .. } => {\n-                if polarity == ast::ImplPolarity::Negative {\n+            ast::ItemKind::Impl { polarity, defaultness, ref of_trait, .. } => {\n+                if let ast::ImplPolarity::Negative(span) = polarity {\n                     gate_feature_post!(\n                         &self,\n                         optin_builtin_traits,\n-                        i.span,\n+                        span.to(of_trait.as_ref().map(|t| t.path.span).unwrap_or(span)),\n                         \"negative trait bounds are not yet fully implemented; \\\n-                                        use marker types for now\"\n+                         use marker types for now\"\n                     );\n                 }\n "}, {"sha": "10081d36754ba43f652593ee3ab13e91a69fdcf4", "filename": "src/librustc_ast_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_ast_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_ast_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Flib.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,3 +1,4 @@\n+#![feature(bindings_after_at)]\n //! The `rustc_ast_passes` crate contains passes which validate the AST in `syntax`\n //! parsed by `rustc_parse` and then lowered, after the passes in this crate,\n //! by `rustc_ast_lowering`."}, {"sha": "007694f7276bbf867b56c8ce5303d44fd5ca9e17", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1160,7 +1160,7 @@ impl<'a> State<'a> {\n                     self.s.space();\n                 }\n \n-                if polarity == ast::ImplPolarity::Negative {\n+                if let ast::ImplPolarity::Negative(_) = polarity {\n                     self.s.word(\"!\");\n                 }\n "}, {"sha": "97d8f76623e93f52a15369d56d4f0aab0a5cd401", "filename": "src/librustc_codegen_llvm/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_codegen_llvm%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_codegen_llvm%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2FREADME.md?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -2,6 +2,6 @@ The `codegen` crate contains the code to convert from MIR into LLVM IR,\n and then from LLVM IR into machine code. In general it contains code\n that runs towards the end of the compilation process.\n \n-For more information about how codegen works, see the [rustc guide].\n+For more information about how codegen works, see the [rustc dev guide].\n \n-[rustc guide]: https://rust-lang.github.io/rustc-guide/codegen.html\n+[rustc dev guide]: https://rustc-dev-guide.rust-lang.org/codegen.html"}, {"sha": "90d991a3a4b25d7a11468546024a89ec84b37afb", "filename": "src/librustc_codegen_ssa/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_codegen_ssa%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_codegen_ssa%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FREADME.md?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,3 +1,3 @@\n-Please read the rustc-guide chapter on [Backend Agnostic Codegen][bac].\n+Please read the rustc-dev-guide chapter on [Backend Agnostic Codegen][bac].\n \n-[bac]: https://rust-lang.github.io/rustc-guide/codegen/backend-agnostic.html\n+[bac]: https://rustc-dev-guide.rust-lang.org/codegen/backend-agnostic.html"}, {"sha": "37dc7f6ba5fe4b06d1654ee4e686ecb7ce60e577", "filename": "src/librustc_driver/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_driver%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_driver%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FREADME.md?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -5,6 +5,6 @@ not contain any of the \"main logic\" of the compiler (though it does\n have some code related to pretty printing or other minor compiler\n options).\n \n-For more information about how the driver works, see the [rustc guide].\n+For more information about how the driver works, see the [rustc dev guide].\n \n-[rustc guide]: https://rust-lang.github.io/rustc-guide/rustc-driver.html\n+[rustc dev guide]: https://rustc-dev-guide.rust-lang.org/rustc-driver.html"}, {"sha": "5b2c1453de6424554c6fc84312519b97a70a08bc", "filename": "src/librustc_hir/def.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_hir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_hir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdef.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -72,7 +72,7 @@ pub enum DefKind {\n     Static,\n     /// Refers to the struct or enum variant's constructor.\n     Ctor(CtorOf, CtorKind),\n-    Method,\n+    AssocFn,\n     AssocConst,\n \n     // Macro namespace\n@@ -107,7 +107,8 @@ impl DefKind {\n             DefKind::Union => \"union\",\n             DefKind::Trait => \"trait\",\n             DefKind::ForeignTy => \"foreign type\",\n-            DefKind::Method => \"method\",\n+            // FIXME: Update the description to \"assoc fn\"\n+            DefKind::AssocFn => \"method\",\n             DefKind::Const => \"constant\",\n             DefKind::AssocConst => \"associated constant\",\n             DefKind::TyParam => \"type parameter\",\n@@ -150,7 +151,7 @@ impl DefKind {\n             | DefKind::ConstParam\n             | DefKind::Static\n             | DefKind::Ctor(..)\n-            | DefKind::Method\n+            | DefKind::AssocFn\n             | DefKind::AssocConst => ns == Namespace::ValueNS,\n \n             DefKind::Macro(..) => ns == Namespace::MacroNS,"}, {"sha": "9993e5c55f667fc5fd28d60bbf663e8b2e707f1e", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -609,9 +609,9 @@ pub struct ModuleItems {\n /// The top-level data structure that stores the entire contents of\n /// the crate currently being compiled.\n ///\n-/// For more details, see the [rustc guide].\n+/// For more details, see the [rustc dev guide].\n ///\n-/// [rustc guide]: https://rust-lang.github.io/rustc-guide/hir.html\n+/// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/hir.html\n #[derive(RustcEncodable, RustcDecodable, Debug)]\n pub struct Crate<'hir> {\n     pub module: Mod<'hir>,\n@@ -1863,8 +1863,8 @@ pub enum TraitMethod<'hir> {\n pub enum TraitItemKind<'hir> {\n     /// An associated constant with an optional value (otherwise `impl`s must contain a value).\n     Const(&'hir Ty<'hir>, Option<BodyId>),\n-    /// A method with an optional body.\n-    Method(FnSig<'hir>, TraitMethod<'hir>),\n+    /// An associated function with an optional body.\n+    Fn(FnSig<'hir>, TraitMethod<'hir>),\n     /// An associated type with (possibly empty) bounds and optional concrete\n     /// type.\n     Type(GenericBounds<'hir>, Option<&'hir Ty<'hir>>),\n@@ -2699,7 +2699,7 @@ impl Node<'_> {\n \n     pub fn fn_decl(&self) -> Option<&FnDecl<'_>> {\n         match self {\n-            Node::TraitItem(TraitItem { kind: TraitItemKind::Method(fn_sig, _), .. })\n+            Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(fn_sig, _), .. })\n             | Node::ImplItem(ImplItem { kind: ImplItemKind::Method(fn_sig, _), .. })\n             | Node::Item(Item { kind: ItemKind::Fn(fn_sig, _, _), .. }) => Some(fn_sig.decl),\n             Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, _, _), .. }) => {"}, {"sha": "e92192c8b1f728269d27dcfc9b30241bc3a5cc3b", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -911,14 +911,14 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_nested_body, default);\n         }\n-        TraitItemKind::Method(ref sig, TraitMethod::Required(param_names)) => {\n+        TraitItemKind::Fn(ref sig, TraitMethod::Required(param_names)) => {\n             visitor.visit_id(trait_item.hir_id);\n             visitor.visit_fn_decl(&sig.decl);\n             for &param_name in param_names {\n                 visitor.visit_ident(param_name);\n             }\n         }\n-        TraitItemKind::Method(ref sig, TraitMethod::Provided(body_id)) => {\n+        TraitItemKind::Fn(ref sig, TraitMethod::Provided(body_id)) => {\n             visitor.visit_fn(\n                 FnKind::Method(trait_item.ident, sig, None, &trait_item.attrs),\n                 &sig.decl,"}, {"sha": "45f806b53f50ca907986becad5d9aaf60e42a367", "filename": "src/librustc_hir/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_hir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_hir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flib.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,6 +1,6 @@\n-//! HIR datatypes. See the [rustc guide] for more info.\n+//! HIR datatypes. See the [rustc dev guide] for more info.\n //!\n-//! [rustc guide]: https://rust-lang.github.io/rustc-guide/hir.html\n+//! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/hir.html\n \n #![feature(crate_visibility_modifier)]\n #![feature(const_fn)] // For the unsizing cast on `&[]`"}, {"sha": "7eb5cc417b7e6463b3de7476b7079ae20596e71f", "filename": "src/librustc_hir/print.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_hir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_hir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fprint.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -652,7 +652,7 @@ impl<'a> State<'a> {\n                     self.word_nbsp(\"const\");\n                 }\n \n-                if let hir::ImplPolarity::Negative = polarity {\n+                if let hir::ImplPolarity::Negative(_) = polarity {\n                     self.s.word(\"!\");\n                 }\n \n@@ -886,13 +886,13 @@ impl<'a> State<'a> {\n                     Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Inherited };\n                 self.print_associated_const(ti.ident, &ty, default, &vis);\n             }\n-            hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Required(ref arg_names)) => {\n+            hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Required(ref arg_names)) => {\n                 let vis =\n                     Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Inherited };\n                 self.print_method_sig(ti.ident, sig, &ti.generics, &vis, arg_names, None);\n                 self.s.word(\";\");\n             }\n-            hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) => {\n+            hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Provided(body)) => {\n                 let vis =\n                     Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Inherited };\n                 self.head(\"\");"}, {"sha": "b7bc555d7b410255ea8903fc8702774a3118e0cf", "filename": "src/librustc_hir/target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_hir%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_hir%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Ftarget.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -105,10 +105,10 @@ impl Target {\n     pub fn from_trait_item(trait_item: &TraitItem<'_>) -> Target {\n         match trait_item.kind {\n             TraitItemKind::Const(..) => Target::AssocConst,\n-            TraitItemKind::Method(_, hir::TraitMethod::Required(_)) => {\n+            TraitItemKind::Fn(_, hir::TraitMethod::Required(_)) => {\n                 Target::Method(MethodKind::Trait { body: false })\n             }\n-            TraitItemKind::Method(_, hir::TraitMethod::Provided(_)) => {\n+            TraitItemKind::Fn(_, hir::TraitMethod::Provided(_)) => {\n                 Target::Method(MethodKind::Trait { body: true })\n             }\n             TraitItemKind::Type(..) => Target::AssocTy,"}, {"sha": "b01fe219e1e11bb180c5934c3a40f727bf7f87ac", "filename": "src/librustc_incremental/persist/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_incremental%2Fpersist%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_incremental%2Fpersist%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2FREADME.md?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,3 +1,3 @@\n-For info on how the incremental compilation works, see the [rustc guide].\n+For info on how the incremental compilation works, see the [rustc dev guide].\n \n-[rustc guide]: https://rust-lang.github.io/rustc-guide/query.html\n+[rustc dev guide]: https://rustc-dev-guide.rust-lang.org/query.html"}, {"sha": "54815fe3468eaeeef45c17b4215cf673f570b63c", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -328,7 +328,7 @@ impl DirtyCleanVisitor<'tcx> {\n                 }\n             }\n             HirNode::TraitItem(item) => match item.kind {\n-                TraitItemKind::Method(..) => (\"Node::TraitItem\", LABELS_FN_IN_TRAIT),\n+                TraitItemKind::Fn(..) => (\"Node::TraitItem\", LABELS_FN_IN_TRAIT),\n                 TraitItemKind::Const(..) => (\"NodeTraitConst\", LABELS_CONST_IN_TRAIT),\n                 TraitItemKind::Type(..) => (\"NodeTraitType\", LABELS_CONST_IN_TRAIT),\n             },"}, {"sha": "964e378f7abc8abe495a8793206c2b6e643ac64b", "filename": "src/librustc_infer/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,9 +1,9 @@\n //! This module contains the \"canonicalizer\" itself.\n //!\n //! For an overview of what canonicalization is and how it fits into\n-//! rustc, check out the [chapter in the rustc guide][c].\n+//! rustc, check out the [chapter in the rustc dev guide][c].\n //!\n-//! [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n+//! [c]: https://rustc-dev-guide.rust-lang.org/traits/canonicalization.html\n \n use crate::infer::canonical::{\n     Canonical, CanonicalTyVarKind, CanonicalVarInfo, CanonicalVarKind, Canonicalized,\n@@ -33,9 +33,9 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     /// with a mapping M that maps `'?0` to `'static`.\n     ///\n     /// To get a good understanding of what is happening here, check\n-    /// out the [chapter in the rustc guide][c].\n+    /// out the [chapter in the rustc dev guide][c].\n     ///\n-    /// [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html#canonicalizing-the-query\n+    /// [c]: https://rustc-dev-guide.rust-lang.org/traits/canonicalization.html#canonicalizing-the-query\n     pub fn canonicalize_query<V>(\n         &self,\n         value: &V,\n@@ -77,9 +77,9 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     /// reference to `'static` alone.\n     ///\n     /// To get a good understanding of what is happening here, check\n-    /// out the [chapter in the rustc guide][c].\n+    /// out the [chapter in the rustc dev guide][c].\n     ///\n-    /// [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html#canonicalizing-the-query-result\n+    /// [c]: https://rustc-dev-guide.rust-lang.org/traits/canonicalization.html#canonicalizing-the-query-result\n     pub fn canonicalize_response<V>(&self, value: &V) -> Canonicalized<'tcx, V>\n     where\n         V: TypeFoldable<'tcx>,"}, {"sha": "0e9593e8ea6b0de92ffcd691b4654978416d57a6", "filename": "src/librustc_infer/infer/canonical/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fmod.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -17,9 +17,9 @@\n //! `instantiate_query_result` method.\n //!\n //! For a more detailed look at what is happening here, check\n-//! out the [chapter in the rustc guide][c].\n+//! out the [chapter in the rustc dev guide][c].\n //!\n-//! [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n+//! [c]: https://rustc-dev-guide.rust-lang.org/traits/canonicalization.html\n \n use crate::infer::{ConstVariableOrigin, ConstVariableOriginKind};\n use crate::infer::{InferCtxt, RegionVariableOrigin, TypeVariableOrigin, TypeVariableOriginKind};"}, {"sha": "b6c0dc3939bff2abbe1a44cc2b3e5bf5d640a02a", "filename": "src/librustc_infer/infer/canonical/query_response.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -3,9 +3,9 @@\n //! encode them therein.\n //!\n //! For an overview of what canonicaliation is and how it fits into\n-//! rustc, check out the [chapter in the rustc guide][c].\n+//! rustc, check out the [chapter in the rustc dev guide][c].\n //!\n-//! [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n+//! [c]: https://rustc-dev-guide.rust-lang.org/traits/canonicalization.html\n \n use crate::infer::canonical::substitute::{substitute_value, CanonicalExt};\n use crate::infer::canonical::{\n@@ -196,9 +196,9 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     /// the query before applying this function.)\n     ///\n     /// To get a good understanding of what is happening here, check\n-    /// out the [chapter in the rustc guide][c].\n+    /// out the [chapter in the rustc dev guide][c].\n     ///\n-    /// [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html#processing-the-canonicalized-query-result\n+    /// [c]: https://rustc-dev-guide.rust-lang.org/traits/canonicalization.html#processing-the-canonicalized-query-result\n     pub fn instantiate_query_response_and_region_obligations<R>(\n         &self,\n         cause: &ObligationCause<'tcx>,"}, {"sha": "afef32c1ffebb9d06f837029a555b948a0766253", "filename": "src/librustc_infer/infer/canonical/substitute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fsubstitute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fsubstitute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fsubstitute.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -2,9 +2,9 @@\n //! `Canonical<'tcx, T>`.\n //!\n //! For an overview of what canonicalization is and how it fits into\n-//! rustc, check out the [chapter in the rustc guide][c].\n+//! rustc, check out the [chapter in the rustc dev guide][c].\n //!\n-//! [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n+//! [c]: https://rustc-dev-guide.rust-lang.org/traits/canonicalization.html\n \n use crate::infer::canonical::{Canonical, CanonicalVarValues};\n use rustc::ty::fold::TypeFoldable;"}, {"sha": "7e418898910dc3e051cd9b856ff71c17f143ec87", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -269,7 +269,7 @@ fn item_scope_tag(item: &hir::Item<'_>) -> &'static str {\n \n fn trait_item_scope_tag(item: &hir::TraitItem<'_>) -> &'static str {\n     match item.kind {\n-        hir::TraitItemKind::Method(..) => \"method body\",\n+        hir::TraitItemKind::Fn(..) => \"method body\",\n         hir::TraitItemKind::Const(..) | hir::TraitItemKind::Type(..) => \"associated item\",\n     }\n }"}, {"sha": "fe70215dc27a5162ca5e4179da76cbd4d560e489", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -468,7 +468,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             &segment.args,\n         ) {\n             let borrow = tables.borrow();\n-            if let Some((DefKind::Method, did)) = borrow.type_dependent_def(e.hir_id) {\n+            if let Some((DefKind::AssocFn, did)) = borrow.type_dependent_def(e.hir_id) {\n                 let generics = self.tcx.generics_of(did);\n                 if !generics.params.is_empty() {\n                     err.span_suggestion("}, {"sha": "7346cb0a03393dfd9e04a9ba9e26166adff3f012", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -33,7 +33,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 let fndecl = match self.tcx().hir().get(hir_id) {\n                     Node::Item(&hir::Item { kind: hir::ItemKind::Fn(ref m, ..), .. })\n                     | Node::TraitItem(&hir::TraitItem {\n-                        kind: hir::TraitItemKind::Method(ref m, ..),\n+                        kind: hir::TraitItemKind::Fn(ref m, ..),\n                         ..\n                     })\n                     | Node::ImplItem(&hir::ImplItem {"}, {"sha": "533d0ef7e6c4b0c60f2b2c8f8a11dff710d85568", "filename": "src/librustc_infer/infer/higher_ranked/README.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Finfer%2Fhigher_ranked%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Finfer%2Fhigher_ranked%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fhigher_ranked%2FREADME.md?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,8 +1,8 @@\n To learn more about how Higher-ranked trait bounds work in the _old_ trait\n-solver, see [this chapter][oldhrtb] of the rustc-guide.\n+solver, see [this chapter][oldhrtb] of the rustc-dev-guide.\n \n To learn more about how they work in the _new_ trait solver, see [this\n chapter][newhrtb].\n \n-[oldhrtb]: https://rust-lang.github.io/rustc-guide/traits/hrtb.html\n-[newhrtb]: https://rust-lang.github.io/rustc-guide/borrow_check/region_inference.html#placeholders-and-universes\n+[oldhrtb]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html\n+[newhrtb]: https://rustc-dev-guide.rust-lang.org/borrow_check/region_inference.html#placeholders-and-universes"}, {"sha": "105b987f85e96272f36328f81b0da378cd485786", "filename": "src/librustc_infer/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -71,9 +71,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// needed (but is also permitted).\n     ///\n     /// For more information about how placeholders and HRTBs work, see\n-    /// the [rustc guide].\n+    /// the [rustc dev guide].\n     ///\n-    /// [rustc guide]: https://rust-lang.github.io/rustc-guide/traits/hrtb.html\n+    /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html\n     pub fn replace_bound_vars_with_placeholders<T>(\n         &self,\n         binder: &ty::Binder<T>,"}, {"sha": "e0b2c0bffeeb36b398c26054067235afa9176afb", "filename": "src/librustc_infer/infer/lexical_region_resolve/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2FREADME.md?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -2,6 +2,6 @@\n Lexical Region Resolution was removed in https://github.com/rust-lang/rust/pull/64790.\n \n Rust now uses Non-lexical lifetimes. For more info, please see the [borrowck\n-chapter][bc] in the rustc-guide.\n+chapter][bc] in the rustc-dev-guide.\n \n-[bc]: https://rust-lang.github.io/rustc-guide/borrow_check/region_inference.html\n+[bc]: https://rustc-dev-guide.rust-lang.org/borrow_check/region_inference.html"}, {"sha": "0231dd066772570629a89cc37e79b23b0418dd4b", "filename": "src/librustc_infer/infer/region_constraints/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2FREADME.md?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,3 +1,3 @@\n-For info on how the current borrowck works, see the [rustc guide].\n+For info on how the current borrowck works, see the [rustc dev guide].\n \n-[rustc guide]: https://rust-lang.github.io/rustc-guide/borrow_check.html\n+[rustc dev guide]: https://rustc-dev-guide.rust-lang.org/borrow_check.html"}, {"sha": "49e99b574b892916548a36a9b5368b678a8efed7", "filename": "src/librustc_infer/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Flib.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -5,9 +5,9 @@\n //!   this code handles low-level equality and subtyping operations. The\n //!   type check pass in the compiler is found in the `librustc_typeck` crate.\n //!\n-//! For more information about how rustc works, see the [rustc guide].\n+//! For more information about how rustc works, see the [rustc dev guide].\n //!\n-//! [rustc guide]: https://rust-lang.github.io/rustc-guide/\n+//! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/\n //!\n //! # Note\n //!"}, {"sha": "9cf4ed8fe573aa37ff2248e179fe987053eb07b7", "filename": "src/librustc_infer/traits/coherence.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fcoherence.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,8 +1,8 @@\n-//! See Rustc Guide chapters on [trait-resolution] and [trait-specialization] for more info on how\n-//! this works.\n+//! See Rustc Dev Guide chapters on [trait-resolution] and [trait-specialization] for more info on\n+//! how this works.\n //!\n-//! [trait-resolution]: https://rust-lang.github.io/rustc-guide/traits/resolution.html\n-//! [trait-specialization]: https://rust-lang.github.io/rustc-guide/traits/specialization.html\n+//! [trait-resolution]: https://rustc-dev-guide.rust-lang.org/traits/resolution.html\n+//! [trait-specialization]: https://rustc-dev-guide.rust-lang.org/traits/specialization.html\n \n use crate::infer::{CombinedSnapshot, InferOk, TyCtxtInferExt};\n use crate::traits::select::IntercrateAmbiguityCause;"}, {"sha": "eb34a4875961c0bcbd984b6bcef32d0a306ae9fd", "filename": "src/librustc_infer/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -70,7 +70,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 })\n             }\n             hir::Node::TraitItem(hir::TraitItem {\n-                kind: hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(body_id)),\n+                kind: hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(body_id)),\n                 ..\n             }) => self.describe_generator(*body_id).or_else(|| Some(\"a trait method\")),\n             hir::Node::ImplItem(hir::ImplItem {"}, {"sha": "228747c3f89e9efc2b781d544f519c1532c9c431", "filename": "src/librustc_infer/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -62,7 +62,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             match node {\n                 hir::Node::TraitItem(hir::TraitItem {\n                     generics,\n-                    kind: hir::TraitItemKind::Method(..),\n+                    kind: hir::TraitItemKind::Fn(..),\n                     ..\n                 }) if param_ty && self_ty == self.tcx.types.self_param => {\n                     // Restricting `Self` for a single method.\n@@ -73,7 +73,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(_, generics, _), .. })\n                 | hir::Node::TraitItem(hir::TraitItem {\n                     generics,\n-                    kind: hir::TraitItemKind::Method(..),\n+                    kind: hir::TraitItemKind::Fn(..),\n                     ..\n                 })\n                 | hir::Node::ImplItem(hir::ImplItem {\n@@ -803,7 +803,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             })\n             | Node::TraitItem(&hir::TraitItem {\n                 span,\n-                kind: hir::TraitItemKind::Method(ref sig, _),\n+                kind: hir::TraitItemKind::Fn(ref sig, _),\n                 ..\n             }) => (\n                 self.tcx.sess.source_map().def_span(span),"}, {"sha": "aa0cfedff9e8b67aced406ce66529926ef943ef5", "filename": "src/librustc_infer/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fmod.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,6 +1,6 @@\n-//! Trait Resolution. See the [rustc guide] for more information on how this works.\n+//! Trait Resolution. See the [rustc dev guide] for more information on how this works.\n //!\n-//! [rustc guide]: https://rust-lang.github.io/rustc-guide/traits/resolution.html\n+//! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/resolution.html\n \n #[allow(dead_code)]\n pub mod auto_trait;"}, {"sha": "1644746c16eb1c2e991cf7eb8ca61d3034800e7e", "filename": "src/librustc_infer/traits/query/type_op/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -44,7 +44,7 @@ pub trait TypeOp<'tcx>: Sized + fmt::Debug {\n /// first canonicalize the key and then invoke the query on the tcx,\n /// which produces the resulting query region constraints.\n ///\n-/// [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n+/// [c]: https://rustc-dev-guide.rust-lang.org/traits/canonicalization.html\n pub trait QueryTypeOp<'tcx>: fmt::Debug + Sized + TypeFoldable<'tcx> + 'tcx {\n     type QueryResponse: TypeFoldable<'tcx>;\n "}, {"sha": "b50f14475fceb2f8204fd2522cb447cc2066146f", "filename": "src/librustc_infer/traits/select.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fselect.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,8 +1,8 @@\n // ignore-tidy-filelength\n \n-//! Candidate selection. See the [rustc guide] for more information on how this works.\n+//! Candidate selection. See the [rustc dev guide] for more information on how this works.\n //!\n-//! [rustc guide]: https://rust-lang.github.io/rustc-guide/traits/resolution.html#selection\n+//! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/resolution.html#selection\n \n use self::EvaluationResult::*;\n use self::SelectionCandidate::*;\n@@ -931,10 +931,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     //\n     // The selection process begins by examining all in-scope impls,\n     // caller obligations, and so forth and assembling a list of\n-    // candidates. See the [rustc guide] for more details.\n+    // candidates. See the [rustc dev guide] for more details.\n     //\n-    // [rustc guide]:\n-    // https://rust-lang.github.io/rustc-guide/traits/resolution.html#candidate-assembly\n+    // [rustc dev guide]:\n+    // https://rustc-dev-guide.rust-lang.org/traits/resolution.html#candidate-assembly\n \n     fn candidate_from_obligation<'o>(\n         &mut self,\n@@ -2447,10 +2447,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     //\n     // Confirmation unifies the output type parameters of the trait\n     // with the values found in the obligation, possibly yielding a\n-    // type error.  See the [rustc guide] for more details.\n+    // type error.  See the [rustc dev guide] for more details.\n     //\n-    // [rustc guide]:\n-    // https://rust-lang.github.io/rustc-guide/traits/resolution.html#confirmation\n+    // [rustc dev guide]:\n+    // https://rustc-dev-guide.rust-lang.org/traits/resolution.html#confirmation\n \n     fn confirm_candidate(\n         &mut self,"}, {"sha": "51da759da99f8ffa8d902685328d837a41164b5b", "filename": "src/librustc_infer/traits/specialize/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_infer%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fspecialize%2Fmod.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -4,10 +4,10 @@\n //! At the moment, this implementation support only the simple \"chain\" rule:\n //! If any two impls overlap, one must be a strict subset of the other.\n //!\n-//! See the [rustc guide] for a bit more detail on how specialization\n+//! See the [rustc dev guide] for a bit more detail on how specialization\n //! fits together with the rest of the trait machinery.\n //!\n-//! [rustc guide]: https://rust-lang.github.io/rustc-guide/traits/specialization.html\n+//! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/specialization.html\n \n pub mod specialization_graph;\n use specialization_graph::GraphExt;"}, {"sha": "249c9af3d48013d4c1de7a8ba249a06c8dffbed4", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -465,7 +465,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n \n         let desc = match trait_item.kind {\n             hir::TraitItemKind::Const(..) => \"an associated constant\",\n-            hir::TraitItemKind::Method(..) => \"a trait method\",\n+            hir::TraitItemKind::Fn(..) => \"a trait method\",\n             hir::TraitItemKind::Type(..) => \"an associated type\",\n         };\n "}, {"sha": "37fefe680d7d26e58fbb24c09c9a5b1dd7cd2da7", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -343,7 +343,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::TraitItem<'_>) {\n-        if let hir::TraitItemKind::Method(_, hir::TraitMethod::Required(pnames)) = item.kind {\n+        if let hir::TraitItemKind::Fn(_, hir::TraitMethod::Required(pnames)) = item.kind {\n             self.check_snake_case(cx, \"trait method\", &item.ident);\n             for param_name in pnames {\n                 self.check_snake_case(cx, \"variable\", param_name);"}, {"sha": "49d05819c5ec939a49278f671c3a2c774754b79e", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -54,7 +54,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                 match callee.kind {\n                     hir::ExprKind::Path(ref qpath) => {\n                         match cx.tables.qpath_res(qpath, callee.hir_id) {\n-                            Res::Def(DefKind::Fn, def_id) | Res::Def(DefKind::Method, def_id) => {\n+                            Res::Def(DefKind::Fn, def_id) | Res::Def(DefKind::AssocFn, def_id) => {\n                                 Some(def_id)\n                             }\n                             // `Res::Local` if it was a closure, for which we"}, {"sha": "1d8eb0cde468af20fb6008e4688ca89a354a1ab8", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -505,7 +505,7 @@ impl EntryKind {\n             EntryKind::Struct(_, _) => DefKind::Struct,\n             EntryKind::Union(_, _) => DefKind::Union,\n             EntryKind::Fn(_) | EntryKind::ForeignFn(_) => DefKind::Fn,\n-            EntryKind::Method(_) => DefKind::Method,\n+            EntryKind::Method(_) => DefKind::AssocFn,\n             EntryKind::Type => DefKind::TyAlias,\n             EntryKind::TypeParam => DefKind::TyParam,\n             EntryKind::ConstParam => DefKind::ConstParam,"}, {"sha": "ce62f15f85d93683ebfffd6962352d682f52ea81", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -805,7 +805,7 @@ impl EncodeContext<'tcx> {\n                 )\n             }\n             ty::AssocKind::Method => {\n-                let fn_data = if let hir::TraitItemKind::Method(m_sig, m) = &ast_item.kind {\n+                let fn_data = if let hir::TraitItemKind::Fn(m_sig, m) = &ast_item.kind {\n                     let param_names = match *m {\n                         hir::TraitMethod::Required(ref names) => {\n                             self.encode_fn_param_names(names)"}, {"sha": "5d22ef46c41b1ddaba432401f1c64972dea775bb", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -480,7 +480,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         }))\n                         | Some(hir::Node::TraitItem(hir::TraitItem {\n                             ident,\n-                            kind: hir::TraitItemKind::Method(sig, _),\n+                            kind: hir::TraitItemKind::Fn(sig, _),\n                             ..\n                         }))\n                         | Some(hir::Node::ImplItem(hir::ImplItem {\n@@ -522,7 +522,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 hir::Node::Item(hir::Item { ident, kind: hir::ItemKind::Fn(sig, ..), .. })\n                 | hir::Node::TraitItem(hir::TraitItem {\n                     ident,\n-                    kind: hir::TraitItemKind::Method(sig, _),\n+                    kind: hir::TraitItemKind::Fn(sig, _),\n                     ..\n                 })\n                 | hir::Node::ImplItem(hir::ImplItem {"}, {"sha": "869eb1227f23b51f0986c2cf01f588b6e09f5321", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -103,6 +103,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_scalar(location.ptr, dest)?;\n             }\n \n+            sym::abort => {\n+                M::abort(self)?;\n+            }\n+\n             sym::min_align_of\n             | sym::pref_align_of\n             | sym::needs_drop"}, {"sha": "366de6e55612a5f2d2c9db85e0e85466a35c0961", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -169,6 +169,11 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx>;\n \n+    /// Called to evaluate `Abort` MIR terminator.\n+    fn abort(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx, !> {\n+        throw_unsup_format!(\"aborting execution is not supported\");\n+    }\n+\n     /// Called for all binary operations where the LHS has pointer type.\n     ///\n     /// Returns a (value, overflowed) pair if the operation succeeded"}, {"sha": "473ed9d13ecfb73a94d8ed52518e95f8a1047579", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -99,6 +99,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 }\n             }\n \n+            Abort => {\n+                M::abort(self)?;\n+            }\n+\n             // When we encounter Resume, we've finished unwinding\n             // cleanup for the current stack frame. We pop it in order\n             // to continue unwinding the next frame\n@@ -114,15 +118,13 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Unreachable => throw_ub!(Unreachable),\n \n             // These should never occur for MIR we actually run.\n-            DropAndReplace { .. } | FalseEdges { .. } | FalseUnwind { .. } => {\n+            DropAndReplace { .. }\n+            | FalseEdges { .. }\n+            | FalseUnwind { .. }\n+            | Yield { .. }\n+            | GeneratorDrop => {\n                 bug!(\"{:#?} should have been eliminated by MIR pass\", terminator.kind)\n             }\n-\n-            // These are not (yet) supported. It is unclear if they even can occur in\n-            // MIR that we actually run.\n-            Yield { .. } | GeneratorDrop | Abort => {\n-                throw_unsup_format!(\"Unsupported terminator kind: {:#?}\", terminator.kind)\n-            }\n         }\n \n         Ok(())"}, {"sha": "e7ca8b0be78c44bea0672e73a304df181d9b5928", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -545,7 +545,7 @@ fn write_mir_sig(\n     trace!(\"write_mir_sig: {:?}\", src.instance);\n     let kind = tcx.def_kind(src.def_id());\n     let is_function = match kind {\n-        Some(DefKind::Fn) | Some(DefKind::Method) | Some(DefKind::Ctor(..)) => true,\n+        Some(DefKind::Fn) | Some(DefKind::AssocFn) | Some(DefKind::Ctor(..)) => true,\n         _ => tcx.is_closure(src.def_id()),\n     };\n     match (kind, src.promoted) {"}, {"sha": "c6bc86942957cdc75a523597bc5694e6dbb79da5", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -44,7 +44,7 @@ fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n         })\n         | Node::TraitItem(hir::TraitItem {\n             kind:\n-                hir::TraitItemKind::Method(hir::FnSig { decl, .. }, hir::TraitMethod::Provided(body_id)),\n+                hir::TraitItemKind::Fn(hir::FnSig { decl, .. }, hir::TraitMethod::Provided(body_id)),\n             ..\n         }) => (*body_id, decl.output.span()),\n         Node::Item(hir::Item { kind: hir::ItemKind::Static(ty, _, body_id), .. })"}, {"sha": "9f04bc1dc769703f6822536f70f8b017400716f9", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -600,7 +600,7 @@ fn user_substs_applied_to_res<'tcx>(\n         // a tuple-struct or tuple-variant. This has the type of a\n         // `Fn` but with the user-given substitutions.\n         Res::Def(DefKind::Fn, _)\n-        | Res::Def(DefKind::Method, _)\n+        | Res::Def(DefKind::AssocFn, _)\n         | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)\n         | Res::Def(DefKind::Const, _)\n         | Res::Def(DefKind::AssocConst, _) => {\n@@ -703,7 +703,7 @@ fn convert_path_expr<'a, 'tcx>(\n     match res {\n         // A regular function, constructor function or a constant.\n         Res::Def(DefKind::Fn, _)\n-        | Res::Def(DefKind::Method, _)\n+        | Res::Def(DefKind::AssocFn, _)\n         | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)\n         | Res::SelfCtor(..) => {\n             let user_ty = user_substs_applied_to_res(cx, expr.hir_id, res);"}, {"sha": "513507f9bb83312b2b66824473d483514453e11c", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -373,6 +373,16 @@ impl<'a> Parser<'a> {\n         self.token.is_keyword(kw::Async) && self.is_keyword_ahead(1, &[kw::Fn])\n     }\n \n+    fn parse_polarity(&mut self) -> ast::ImplPolarity {\n+        // Disambiguate `impl !Trait for Type { ... }` and `impl ! { ... }` for the never type.\n+        if self.check(&token::Not) && self.look_ahead(1, |t| t.can_begin_type()) {\n+            self.bump(); // `!`\n+            ast::ImplPolarity::Negative(self.prev_token.span)\n+        } else {\n+            ast::ImplPolarity::Positive\n+        }\n+    }\n+\n     /// Parses an implementation item.\n     ///\n     /// ```\n@@ -411,13 +421,7 @@ impl<'a> Parser<'a> {\n             self.sess.gated_spans.gate(sym::const_trait_impl, span);\n         }\n \n-        // Disambiguate `impl !Trait for Type { ... }` and `impl ! { ... }` for the never type.\n-        let polarity = if self.check(&token::Not) && self.look_ahead(1, |t| t.can_begin_type()) {\n-            self.bump(); // `!`\n-            ast::ImplPolarity::Negative\n-        } else {\n-            ast::ImplPolarity::Positive\n-        };\n+        let polarity = self.parse_polarity();\n \n         // Parse both types and traits as a type, then reinterpret if necessary.\n         let err_path = |span| ast::Path::from_ident(Ident::new(kw::Invalid, span));"}, {"sha": "4a0ffc23365da9ccabe41dd1759387bf4c3d3a9d", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -391,7 +391,7 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n                     let trait_item = self.krate.trait_item(trait_item_ref.id);\n                     match trait_item.kind {\n                         hir::TraitItemKind::Const(_, Some(_))\n-                        | hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(_)) => {\n+                        | hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(_)) => {\n                             if has_allow_dead_code_or_lang_attr(\n                                 self.tcx,\n                                 trait_item.hir_id,\n@@ -682,11 +682,11 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n         match trait_item.kind {\n             hir::TraitItemKind::Const(_, Some(body_id))\n-            | hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(body_id)) => {\n+            | hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(body_id)) => {\n                 self.visit_nested_body(body_id)\n             }\n             hir::TraitItemKind::Const(_, None)\n-            | hir::TraitItemKind::Method(_, hir::TraitMethod::Required(_))\n+            | hir::TraitItemKind::Fn(_, hir::TraitMethod::Required(_))\n             | hir::TraitItemKind::Type(..) => {}\n         }\n     }"}, {"sha": "79a9f22603042aa0993faa453e92d37134e6a1a6", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -162,8 +162,8 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             },\n             Some(Node::TraitItem(trait_method)) => match trait_method.kind {\n                 hir::TraitItemKind::Const(_, ref default) => default.is_some(),\n-                hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(_)) => true,\n-                hir::TraitItemKind::Method(_, hir::TraitMethod::Required(_))\n+                hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(_)) => true,\n+                hir::TraitItemKind::Fn(_, hir::TraitMethod::Required(_))\n                 | hir::TraitItemKind::Type(..) => false,\n             },\n             Some(Node::ImplItem(impl_item)) => {\n@@ -278,11 +278,11 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             Node::TraitItem(trait_method) => {\n                 match trait_method.kind {\n                     hir::TraitItemKind::Const(_, None)\n-                    | hir::TraitItemKind::Method(_, hir::TraitMethod::Required(_)) => {\n+                    | hir::TraitItemKind::Fn(_, hir::TraitMethod::Required(_)) => {\n                         // Keep going, nothing to get exported\n                     }\n                     hir::TraitItemKind::Const(_, Some(body_id))\n-                    | hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(body_id)) => {\n+                    | hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(body_id)) => {\n                         self.visit_nested_body(body_id);\n                     }\n                     hir::TraitItemKind::Type(..) => {}"}, {"sha": "908785faff07334b142abb114d0eab668be59bc6", "filename": "src/librustc_passes/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -2,9 +2,9 @@\n //! the parent links in the region hierarchy.\n //!\n //! For more information about how MIR-based region-checking works,\n-//! see the [rustc guide].\n+//! see the [rustc dev guide].\n //!\n-//! [rustc guide]: https://rust-lang.github.io/rustc-guide/borrow_check.html\n+//! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/borrow_check.html\n \n use rustc::hir::map::Map;\n use rustc::middle::region::*;"}, {"sha": "175b2390d3083c7691daf30f6f868d5bb7ffe270", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -620,7 +620,7 @@ impl EmbargoVisitor<'tcx> {\n             | DefKind::ForeignTy\n             | DefKind::Fn\n             | DefKind::OpaqueTy\n-            | DefKind::Method\n+            | DefKind::AssocFn\n             | DefKind::Trait\n             | DefKind::TyParam\n             | DefKind::Variant => (),\n@@ -1298,7 +1298,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n             _ => None,\n         };\n         let def = def.filter(|(kind, _)| match kind {\n-            DefKind::Method\n+            DefKind::AssocFn\n             | DefKind::AssocConst\n             | DefKind::AssocTy\n             | DefKind::AssocOpaqueTy"}, {"sha": "61f511c22e6a15e45b8555ffaa5988d270d5adc3", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -874,7 +874,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             | Res::PrimTy(..)\n             | Res::ToolMod => self.r.define(parent, ident, TypeNS, (res, vis, span, expansion)),\n             Res::Def(DefKind::Fn, _)\n-            | Res::Def(DefKind::Method, _)\n+            | Res::Def(DefKind::AssocFn, _)\n             | Res::Def(DefKind::Static, _)\n             | Res::Def(DefKind::Const, _)\n             | Res::Def(DefKind::AssocConst, _)\n@@ -898,7 +898,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 let field_names = cstore.struct_field_names_untracked(def_id, self.r.session);\n                 self.insert_field_names(def_id, field_names);\n             }\n-            Res::Def(DefKind::Method, def_id) => {\n+            Res::Def(DefKind::AssocFn, def_id) => {\n                 if cstore.associated_item_cloned_untracked(def_id).method_has_self_argument {\n                     self.r.has_self.insert(def_id);\n                 }\n@@ -1243,7 +1243,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n                 if sig.decl.has_self() {\n                     self.r.has_self.insert(item_def_id);\n                 }\n-                (Res::Def(DefKind::Method, item_def_id), ValueNS)\n+                (Res::Def(DefKind::AssocFn, item_def_id), ValueNS)\n             }\n             AssocItemKind::TyAlias(..) => (Res::Def(DefKind::AssocTy, item_def_id), TypeNS),\n             AssocItemKind::Macro(_) => bug!(), // handled above"}, {"sha": "97f3ad72ee37ff822feffae5a97c69921c3e7e58", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -266,7 +266,7 @@ impl<'a> PathSource<'a> {\n                 | Res::Def(DefKind::Static, _)\n                 | Res::Local(..)\n                 | Res::Def(DefKind::Fn, _)\n-                | Res::Def(DefKind::Method, _)\n+                | Res::Def(DefKind::AssocFn, _)\n                 | Res::Def(DefKind::AssocConst, _)\n                 | Res::SelfCtor(..)\n                 | Res::Def(DefKind::ConstParam, _) => true,\n@@ -293,7 +293,7 @@ impl<'a> PathSource<'a> {\n                 _ => false,\n             },\n             PathSource::TraitItem(ns) => match res {\n-                Res::Def(DefKind::AssocConst, _) | Res::Def(DefKind::Method, _)\n+                Res::Def(DefKind::AssocConst, _) | Res::Def(DefKind::AssocFn, _)\n                     if ns == ValueNS =>\n                 {\n                     true"}, {"sha": "d1c2c194fca53f193f0f2010e9d12243bd9b4f3d", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -124,7 +124,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                             .unwrap_or(false)\n                     }\n                     Res::Def(DefKind::Ctor(..), _)\n-                    | Res::Def(DefKind::Method, _)\n+                    | Res::Def(DefKind::AssocFn, _)\n                     | Res::Def(DefKind::Const, _)\n                     | Res::Def(DefKind::AssocConst, _)\n                     | Res::SelfCtor(_)"}, {"sha": "5c0748797f04b6581bf47e65a6ef1dc99b23d6e1", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -713,7 +713,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         use self::hir::TraitItemKind::*;\n         self.missing_named_lifetime_spots.push((&trait_item.generics).into());\n         match trait_item.kind {\n-            Method(ref sig, _) => {\n+            Fn(ref sig, _) => {\n                 let tcx = self.tcx;\n                 self.visit_early_late(\n                     Some(tcx.hir().get_parent_item(trait_item.hir_id)),\n@@ -1816,8 +1816,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 match self.tcx.hir().get(fn_id) {\n                     Node::Item(&hir::Item { kind: hir::ItemKind::Fn(..), .. })\n                     | Node::TraitItem(&hir::TraitItem {\n-                        kind: hir::TraitItemKind::Method(..),\n-                        ..\n+                        kind: hir::TraitItemKind::Fn(..), ..\n                     })\n                     | Node::ImplItem(&hir::ImplItem {\n                         kind: hir::ImplItemKind::Method(..), ..\n@@ -2093,9 +2092,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             // `fn` definitions and methods.\n             Node::Item(&hir::Item { kind: hir::ItemKind::Fn(.., body), .. }) => Some(body),\n \n-            Node::TraitItem(&hir::TraitItem {\n-                kind: hir::TraitItemKind::Method(_, ref m), ..\n-            }) => {\n+            Node::TraitItem(&hir::TraitItem { kind: hir::TraitItemKind::Fn(_, ref m), .. }) => {\n                 if let hir::ItemKind::Trait(.., ref trait_items) =\n                     self.tcx.hir().expect_item(self.tcx.hir().get_parent_item(parent)).kind\n                 {"}, {"sha": "f035df3c34d3ad56ab47ba200294f5f9c825bf6d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -741,7 +741,7 @@ impl<'a> NameBinding<'a> {\n     fn is_importable(&self) -> bool {\n         match self.res() {\n             Res::Def(DefKind::AssocConst, _)\n-            | Res::Def(DefKind::Method, _)\n+            | Res::Def(DefKind::AssocFn, _)\n             | Res::Def(DefKind::AssocTy, _) => false,\n             _ => true,\n         }"}, {"sha": "e4949ea5b4b0af1c847e7ad3f4a62b4cf8508d57", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -718,7 +718,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             | Res::Def(HirDefKind::Ctor(..), _) => {\n                 Some(Ref { kind: RefKind::Variable, span, ref_id: id_from_def_id(res.def_id()) })\n             }\n-            Res::Def(HirDefKind::Method, decl_id) => {\n+            Res::Def(HirDefKind::AssocFn, decl_id) => {\n                 let def_id = if decl_id.is_local() {\n                     let ti = self.tcx.associated_item(decl_id);\n "}, {"sha": "2cffd7f365d82ccc02ce314fd2a1fb39b7be7db6", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -519,7 +519,7 @@ impl Sig for ast::Item {\n                 text.push(' ');\n \n                 let trait_sig = if let Some(ref t) = *of_trait {\n-                    if polarity == ast::ImplPolarity::Negative {\n+                    if let ast::ImplPolarity::Negative(_) = polarity {\n                         text.push('!');\n                     }\n                     let trait_sig = t.path.make(offset + text.len(), id, scx)?;"}, {"sha": "6cb7cbf14fdd70f49506eaa0ad9faa6955f824eb", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -120,6 +120,7 @@ symbols! {\n         abi_unadjusted,\n         abi_vectorcall,\n         abi_x86_interrupt,\n+        abort,\n         aborts,\n         address,\n         add_with_overflow,"}, {"sha": "ac1e03385d18110900afd26f45ac11394c205fe1", "filename": "src/librustc_target/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_target%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_target%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2FREADME.md?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,6 +1,6 @@\n `librustc_target` contains some very low-level details that are\n specific to different compilation targets and so forth.\n \n-For more information about how rustc works, see the [rustc guide].\n+For more information about how rustc works, see the [rustc dev guide].\n \n-[rustc guide]: https://rust-lang.github.io/rustc-guide/\n+[rustc dev guide]: https://rustc-dev-guide.rust-lang.org/"}, {"sha": "db392ede432e189714b6685bd56d0880c21c740d", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -185,7 +185,7 @@ crate fn environment(tcx: TyCtxt<'_>, def_id: DefId) -> Environment<'_> {\n \n     let node_kind = match node {\n         Node::TraitItem(item) => match item.kind {\n-            TraitItemKind::Method(..) => NodeKind::Fn,\n+            TraitItemKind::Fn(..) => NodeKind::Fn,\n             _ => NodeKind::Other,\n         },\n "}, {"sha": "9b48cf489ba26efadd5f22a529e8dd1685fd425b", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -108,13 +108,13 @@ impl<'tcx> Lower<PolyDomainGoal<'tcx>> for ty::Predicate<'tcx> {\n     }\n }\n \n-/// Used for implied bounds related rules (see rustc guide).\n+/// Used for implied bounds related rules (see rustc dev guide).\n trait IntoFromEnvGoal {\n     /// Transforms an existing goal into a `FromEnv` goal.\n     fn into_from_env_goal(self) -> Self;\n }\n \n-/// Used for well-formedness related rules (see rustc guide).\n+/// Used for well-formedness related rules (see rustc dev guide).\n trait IntoWellFormedGoal {\n     /// Transforms an existing goal into a `WellFormed` goal.\n     fn into_well_formed_goal(self) -> Self;\n@@ -178,7 +178,7 @@ crate fn program_clauses_for(tcx: TyCtxt<'_>, def_id: DefId) -> Clauses<'_> {\n fn program_clauses_for_trait(tcx: TyCtxt<'_>, def_id: DefId) -> Clauses<'_> {\n     // `trait Trait<P1..Pn> where WC { .. } // P0 == Self`\n \n-    // Rule Implemented-From-Env (see rustc guide)\n+    // Rule Implemented-From-Env (see rustc dev guide)\n     //\n     // ```\n     // forall<Self, P1..Pn> {\n@@ -282,7 +282,7 @@ fn program_clauses_for_impl(tcx: TyCtxt<'tcx>, def_id: DefId) -> Clauses<'tcx> {\n         return List::empty();\n     }\n \n-    // Rule Implemented-From-Impl (see rustc guide)\n+    // Rule Implemented-From-Impl (see rustc dev guide)\n     //\n     // `impl<P0..Pn> Trait<A1..An> for A0 where WC { .. }`\n     //\n@@ -501,7 +501,7 @@ pub fn program_clauses_for_associated_type_def(tcx: TyCtxt<'_>, item_id: DefId)\n }\n \n pub fn program_clauses_for_associated_type_value(tcx: TyCtxt<'_>, item_id: DefId) -> Clauses<'_> {\n-    // Rule Normalize-From-Impl (see rustc guide)\n+    // Rule Normalize-From-Impl (see rustc dev guide)\n     //\n     // ```\n     // impl<P0..Pn> Trait<A1..An> for A0 {"}, {"sha": "b61dbd8c9648e9d7b7023ddea262865b0c13b38b", "filename": "src/librustc_typeck/README.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FREADME.md?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,5 +1,5 @@\n For high-level intro to how type checking works in rustc, see the\n-[type checking] chapter of the [rustc guide].\n+[type checking] chapter of the [rustc dev guide].\n \n-[type checking]: https://rust-lang.github.io/rustc-guide/type-checking.html\n-[rustc guide]: https://rust-lang.github.io/rustc-guide/\n+[type checking]: https://rustc-dev-guide.rust-lang.org/type-checking.html\n+[rustc dev guide]: https://rustc-dev-guide.rust-lang.org/"}, {"sha": "36461f2400cef8954a3232140311b38b90bb9e74", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -2588,7 +2588,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n \n             // Case 4. Reference to a method or associated const.\n-            DefKind::Method | DefKind::AssocConst => {\n+            DefKind::AssocFn | DefKind::AssocConst => {\n                 if segments.len() >= 2 {\n                     let generics = tcx.generics_of(def_id);\n                     path_segs.push(PathSeg(generics.parent.unwrap(), last - 1));"}, {"sha": "0c8dec8f8d4a9706d3acd98efaa8b4070a510256", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -412,8 +412,8 @@ fn extract_spans_for_error_reporting<'a, 'tcx>(\n         TypeError::Mutability => {\n             if let Some(trait_m_hir_id) = tcx.hir().as_local_hir_id(trait_m.def_id) {\n                 let trait_m_iter = match tcx.hir().expect_trait_item(trait_m_hir_id).kind {\n-                    TraitItemKind::Method(ref trait_m_sig, _) => trait_m_sig.decl.inputs.iter(),\n-                    _ => bug!(\"{:?} is not a TraitItemKind::Method\", trait_m),\n+                    TraitItemKind::Fn(ref trait_m_sig, _) => trait_m_sig.decl.inputs.iter(),\n+                    _ => bug!(\"{:?} is not a TraitItemKind::Fn\", trait_m),\n                 };\n \n                 impl_m_iter\n@@ -440,10 +440,10 @@ fn extract_spans_for_error_reporting<'a, 'tcx>(\n             if let Some(trait_m_hir_id) = tcx.hir().as_local_hir_id(trait_m.def_id) {\n                 let (trait_m_output, trait_m_iter) =\n                     match tcx.hir().expect_trait_item(trait_m_hir_id).kind {\n-                        TraitItemKind::Method(ref trait_m_sig, _) => {\n+                        TraitItemKind::Fn(ref trait_m_sig, _) => {\n                             (&trait_m_sig.decl.output, trait_m_sig.decl.inputs.iter())\n                         }\n-                        _ => bug!(\"{:?} is not a TraitItemKind::Method\", trait_m),\n+                        _ => bug!(\"{:?} is not a TraitItemKind::Fn\", trait_m),\n                     };\n \n                 let impl_iter = impl_sig.inputs().iter();\n@@ -708,7 +708,7 @@ fn compare_number_of_method_arguments<'tcx>(\n         let trait_m_hir_id = tcx.hir().as_local_hir_id(trait_m.def_id);\n         let trait_span = if let Some(trait_id) = trait_m_hir_id {\n             match tcx.hir().expect_trait_item(trait_id).kind {\n-                TraitItemKind::Method(ref trait_m_sig, _) => {\n+                TraitItemKind::Fn(ref trait_m_sig, _) => {\n                     let pos = if trait_number_args > 0 { trait_number_args - 1 } else { 0 };\n                     if let Some(arg) = trait_m_sig.decl.inputs.get(pos) {\n                         Some(if pos == 0 {"}, {"sha": "7e526573773936b1a5bf493c5d82ab91af3df169", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -237,7 +237,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n                         // ZST in a temporary, so skip its type, just in case it\n                         // can significantly complicate the generator type.\n                         Res::Def(DefKind::Fn, _)\n-                        | Res::Def(DefKind::Method, _)\n+                        | Res::Def(DefKind::AssocFn, _)\n                         | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _) => {\n                             // NOTE(eddyb) this assumes a path expression has\n                             // no nested expressions to keep track of."}, {"sha": "189b05a819bab213892c8fa4b05088d31e285243", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,6 +1,6 @@\n-//! Method lookup: the secret sauce of Rust. See the [rustc guide] for more information.\n+//! Method lookup: the secret sauce of Rust. See the [rustc dev guide] for more information.\n //!\n-//! [rustc guide]: https://rust-lang.github.io/rustc-guide/method-lookup.html\n+//! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/method-lookup.html\n \n mod confirm;\n pub mod probe;"}, {"sha": "654ec372dedfffe8df4d65ac45fb164cc356599d", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -933,7 +933,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             if let ty::AssocKind::Method = item.kind {\n                                 let id = self.tcx.hir().as_local_hir_id(item.def_id);\n                                 if let Some(hir::Node::TraitItem(hir::TraitItem {\n-                                    kind: hir::TraitItemKind::Method(fn_sig, method),\n+                                    kind: hir::TraitItemKind::Fn(fn_sig, method),\n                                     ..\n                                 })) = id.map(|id| self.tcx.hir().get(id))\n                                 {"}, {"sha": "f1f505e18599aec36f51c0940ea2ecf4da8d514f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -811,7 +811,7 @@ fn primary_body_of(\n         },\n         Node::TraitItem(item) => match item.kind {\n             hir::TraitItemKind::Const(ref ty, Some(body)) => Some((body, Some(ty), None, None)),\n-            hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) => {\n+            hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Provided(body)) => {\n                 Some((body, None, Some(&sig.header), Some(&sig.decl)))\n             }\n             _ => None,\n@@ -1733,7 +1733,7 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {\n \n             for item in items.iter() {\n                 let item = tcx.hir().trait_item(item.id);\n-                if let hir::TraitItemKind::Method(sig, _) = &item.kind {\n+                if let hir::TraitItemKind::Fn(sig, _) = &item.kind {\n                     let abi = sig.header.abi;\n                     fn_maybe_err(tcx, item.ident.span, abi);\n                 }\n@@ -2976,7 +2976,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     pub fn write_method_call(&self, hir_id: hir::HirId, method: MethodCallee<'tcx>) {\n         debug!(\"write_method_call(hir_id={:?}, method={:?})\", hir_id, method);\n-        self.write_resolution(hir_id, Ok((DefKind::Method, method.def_id)));\n+        self.write_resolution(hir_id, Ok((DefKind::AssocFn, method.def_id)));\n         self.write_substs(hir_id, method.substs);\n \n         // When the method is confirmed, the `method.substs` includes\n@@ -4769,7 +4769,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             Node::TraitItem(&hir::TraitItem {\n                 ident,\n-                kind: hir::TraitItemKind::Method(ref sig, ..),\n+                kind: hir::TraitItemKind::Fn(ref sig, ..),\n                 ..\n             }) => Some((&sig.decl, ident, true)),\n             Node::ImplItem(&hir::ImplItem {\n@@ -4863,7 +4863,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ..\n                 }))\n                 | Some(Node::TraitItem(hir::TraitItem {\n-                    kind: hir::TraitItemKind::Method(.., hir::TraitMethod::Provided(body_id)),\n+                    kind: hir::TraitItemKind::Fn(.., hir::TraitMethod::Provided(body_id)),\n                     ..\n                 })) => {\n                     let body = hir.body(*body_id);\n@@ -4934,7 +4934,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .join(\", \")\n                 }\n                 Some(Node::TraitItem(hir::TraitItem {\n-                    kind: hir::TraitItemKind::Method(.., hir::TraitMethod::Required(idents)),\n+                    kind: hir::TraitItemKind::Fn(.., hir::TraitMethod::Required(idents)),\n                     ..\n                 })) => {\n                     sugg_call = idents\n@@ -5364,7 +5364,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     is_alias_variant_ctor = true;\n                 }\n             }\n-            Res::Def(DefKind::Method, def_id) | Res::Def(DefKind::AssocConst, def_id) => {\n+            Res::Def(DefKind::AssocFn, def_id) | Res::Def(DefKind::AssocConst, def_id) => {\n                 let container = tcx.associated_item(def_id).container;\n                 debug!(\"instantiate_value_path: def_id={:?} container={:?}\", def_id, container);\n                 match container {"}, {"sha": "70b39a62cd718f4ee557cdcb1b253ffe341756cb", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -707,7 +707,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.set_tainted_by_errors();\n                 return tcx.types.err;\n             }\n-            Res::Def(DefKind::Method, _)\n+            Res::Def(DefKind::AssocFn, _)\n             | Res::Def(DefKind::Ctor(_, CtorKind::Fictive), _)\n             | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _) => {\n                 report_unexpected_variant_res(tcx, res, pat.span, qpath);\n@@ -793,7 +793,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             );\n             let mut err = struct_span_err!(tcx.sess, pat.span, E0164, \"{}\", msg);\n             match (res, &pat.kind) {\n-                (Res::Def(DefKind::Fn, _), _) | (Res::Def(DefKind::Method, _), _) => {\n+                (Res::Def(DefKind::Fn, _), _) | (Res::Def(DefKind::AssocFn, _), _) => {\n                     err.span_label(pat.span, \"`fn` calls are not allowed in patterns\");\n                     err.help(\n                         \"for more information, visit \\\n@@ -830,7 +830,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 on_error();\n                 return tcx.types.err;\n             }\n-            Res::Def(DefKind::AssocConst, _) | Res::Def(DefKind::Method, _) => {\n+            Res::Def(DefKind::AssocConst, _) | Res::Def(DefKind::AssocFn, _) => {\n                 report_unexpected_res(res);\n                 return tcx.types.err;\n             }"}, {"sha": "335b4a285011681922501e2ba4a817085f976080", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -173,7 +173,7 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: DefId) {\n     let trait_item = tcx.hir().expect_trait_item(hir_id);\n \n     let method_sig = match trait_item.kind {\n-        hir::TraitItemKind::Method(ref sig, _) => Some(sig),\n+        hir::TraitItemKind::Fn(ref sig, _) => Some(sig),\n         _ => None,\n     };\n     check_object_unsafe_self_trait_by_name(tcx, &trait_item);\n@@ -207,7 +207,7 @@ fn check_object_unsafe_self_trait_by_name(tcx: TyCtxt<'_>, item: &hir::TraitItem\n         {\n             trait_should_be_self.push(ty.span)\n         }\n-        hir::TraitItemKind::Method(sig, _) => {\n+        hir::TraitItemKind::Fn(sig, _) => {\n             for ty in sig.decl.inputs {\n                 if could_be_self(trait_def_id, ty) {\n                     trait_should_be_self.push(ty.span);"}, {"sha": "3b25f67aacc63b14772537ba640c708f0f1755df", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -69,11 +69,11 @@ impl UnsafetyChecker<'tcx> {\n                     .emit();\n                 }\n \n-                (_, _, Unsafety::Unsafe, hir::ImplPolarity::Negative) => {\n+                (_, _, Unsafety::Unsafe, hir::ImplPolarity::Negative(_)) => {\n                     // Reported in AST validation\n                     self.tcx.sess.delay_span_bug(item.span, \"unsafe negative impl\");\n                 }\n-                (_, _, Unsafety::Normal, hir::ImplPolarity::Negative)\n+                (_, _, Unsafety::Normal, hir::ImplPolarity::Negative(_))\n                 | (Unsafety::Unsafe, _, Unsafety::Unsafe, hir::ImplPolarity::Positive)\n                 | (Unsafety::Normal, Some(_), Unsafety::Unsafe, hir::ImplPolarity::Positive)\n                 | (Unsafety::Normal, None, Unsafety::Normal, _) => {"}, {"sha": "cd63dacdcda0e0a3f07fa4cdd57b05c8fcdaffa0", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -715,7 +715,7 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::HirId) {\n     tcx.generics_of(def_id);\n \n     match trait_item.kind {\n-        hir::TraitItemKind::Method(..) => {\n+        hir::TraitItemKind::Fn(..) => {\n             tcx.type_of(def_id);\n             tcx.fn_sig(def_id);\n         }\n@@ -1121,7 +1121,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n \n     match node {\n         Node::TraitItem(item) => match item.kind {\n-            hir::TraitItemKind::Method(ref sig, _) => {\n+            hir::TraitItemKind::Fn(ref sig, _) => {\n                 has_late_bound_regions(tcx, &item.generics, &sig.decl)\n             }\n             _ => None,\n@@ -1437,7 +1437,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n \n     match tcx.hir().get(hir_id) {\n         TraitItem(hir::TraitItem {\n-            kind: TraitItemKind::Method(sig, TraitMethod::Provided(_)),\n+            kind: TraitItemKind::Fn(sig, TraitMethod::Provided(_)),\n             ident,\n             generics,\n             ..\n@@ -1474,7 +1474,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n         }\n \n         TraitItem(hir::TraitItem {\n-            kind: TraitItemKind::Method(FnSig { header, decl }, _),\n+            kind: TraitItemKind::Fn(FnSig { header, decl }, _),\n             ident,\n             generics,\n             ..\n@@ -1548,7 +1548,7 @@ fn impl_polarity(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ImplPolarity {\n     let is_rustc_reservation = tcx.has_attr(def_id, sym::rustc_reservation_impl);\n     let item = tcx.hir().expect_item(hir_id);\n     match &item.kind {\n-        hir::ItemKind::Impl { polarity: hir::ImplPolarity::Negative, .. } => {\n+        hir::ItemKind::Impl { polarity: hir::ImplPolarity::Negative(_), .. } => {\n             if is_rustc_reservation {\n                 tcx.sess.span_err(item.span, \"reservation impls can't be negative\");\n             }"}, {"sha": "815235adc7175f4ba80024bdb38e39584aeaf4df", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -27,7 +27,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n \n     match tcx.hir().get(hir_id) {\n         Node::TraitItem(item) => match item.kind {\n-            TraitItemKind::Method(..) => {\n+            TraitItemKind::Fn(..) => {\n                 let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 tcx.mk_fn_def(def_id, substs)\n             }"}, {"sha": "aff3768e35c557af05b00c7aeb152140b90960af", "filename": "src/librustc_typeck/constrained_generic_params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -36,7 +36,7 @@ pub fn parameters_for_impl<'tcx>(\n     vec.into_iter().collect()\n }\n \n-/// If `include_projections` is false, returns the list of parameters that are\n+/// If `include_nonconstraining` is false, returns the list of parameters that are\n /// constrained by `t` - i.e., the value of each parameter in the list is\n /// uniquely determined by `t` (see RFC 447). If it is true, return the list\n /// of parameters whose values are needed in order to constrain `ty` - these"}, {"sha": "8e06948a1095303a9784d75ad258f8f0272ffc77", "filename": "src/librustc_typeck/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fmem_categorization.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -425,7 +425,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             | Res::Def(DefKind::ConstParam, _)\n             | Res::Def(DefKind::AssocConst, _)\n             | Res::Def(DefKind::Fn, _)\n-            | Res::Def(DefKind::Method, _)\n+            | Res::Def(DefKind::AssocFn, _)\n             | Res::SelfCtor(..) => Ok(self.cat_rvalue(hir_id, span, expr_ty)),\n \n             Res::Def(DefKind::Static, _) => Ok(Place {"}, {"sha": "fc3b7201a1e6322e48a562bae5e432f4a27745f7", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -105,7 +105,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &hir::TraitItem<'_>) {\n-        if let hir::TraitItemKind::Method(..) = trait_item.kind {\n+        if let hir::TraitItemKind::Fn(..) = trait_item.kind {\n             self.visit_node_helper(trait_item.hir_id);\n         }\n     }"}, {"sha": "b1fcc3d3fe8f9535cde83184a4ee0568865bd8ea", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,7 +1,7 @@\n-//! Module for inferring the variance of type and lifetime parameters. See the [rustc guide]\n+//! Module for inferring the variance of type and lifetime parameters. See the [rustc dev guide]\n //! chapter for more info.\n //!\n-//! [rustc guide]: https://rust-lang.github.io/rustc-guide/variance.html\n+//! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/variance.html\n \n use hir::Node;\n use rustc::ty::query::Providers;\n@@ -54,7 +54,7 @@ fn variances_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[ty::Variance] {\n         },\n \n         Node::TraitItem(item) => match item.kind {\n-            hir::TraitItemKind::Method(..) => {}\n+            hir::TraitItemKind::Fn(..) => {}\n \n             _ => unsupported(),\n         },"}, {"sha": "bd44a3eda98ce3adc5f0d6d4cc557edbaf792d27", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -77,8 +77,8 @@ pub fn determine_parameters_to_be_inferred<'a, 'tcx>(\n \n     // See the following for a discussion on dep-graph management.\n     //\n-    // - https://rust-lang.github.io/rustc-guide/query.html\n-    // - https://rust-lang.github.io/rustc-guide/variance.html\n+    // - https://rustc-dev-guide.rust-lang.org/query.html\n+    // - https://rustc-dev-guide.rust-lang.org/variance.html\n     tcx.hir().krate().visit_all_item_likes(&mut terms_cx);\n \n     terms_cx\n@@ -164,7 +164,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &hir::TraitItem<'_>) {\n-        if let hir::TraitItemKind::Method(..) = trait_item.kind {\n+        if let hir::TraitItemKind::Fn(..) = trait_item.kind {\n             self.add_inferreds_for_item(trait_item.hir_id);\n         }\n     }"}, {"sha": "5a5f547068d63261e759a5e4992f328393815827", "filename": "src/librustdoc/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustdoc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustdoc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FREADME.md?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,3 +1,3 @@\n-For more information about how `librustdoc` works, see the [rustc guide].\n+For more information about how `librustdoc` works, see the [rustc dev guide].\n \n-[rustc guide]: https://rust-lang.github.io/rustc-guide/rustdoc.html\n+[rustc dev guide]: https://rustc-dev-guide.rust-lang.org/rustdoc.html"}, {"sha": "f600b3308e882d17ac3be99c4dfce168f2a830f6", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -12,7 +12,6 @@ use rustc_hir::Mutability;\n use rustc_metadata::creader::LoadedMacro;\n use rustc_mir::const_eval::is_min_const_fn;\n use rustc_span::hygiene::MacroKind;\n-use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n use crate::clean::{self, GetDefId, ToSource, TypeKind};"}, {"sha": "661666b6637f124d8698637845616dad8babc3cd", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1082,10 +1082,10 @@ impl Clean<Item> for hir::TraitItem<'_> {\n             hir::TraitItemKind::Const(ref ty, default) => {\n                 AssocConstItem(ty.clean(cx), default.map(|e| print_const_expr(cx, e)))\n             }\n-            hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) => {\n+            hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Provided(body)) => {\n                 MethodItem((sig, &self.generics, body, None).clean(cx))\n             }\n-            hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Required(ref names)) => {\n+            hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Required(ref names)) => {\n                 let (generics, decl) = enter_impl_trait(cx, || {\n                     (self.generics.clean(cx), (&*sig.decl, &names[..]).clean(cx))\n                 });"}, {"sha": "75355b84fee835963cfa838bb4504c8b02a59c45", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -149,7 +149,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 // In case this is a trait item, skip the\n                 // early return and try looking for the trait.\n                 let value = match res {\n-                    Res::Def(DefKind::Method, _) | Res::Def(DefKind::AssocConst, _) => true,\n+                    Res::Def(DefKind::AssocFn, _) | Res::Def(DefKind::AssocConst, _) => true,\n                     Res::Def(DefKind::AssocTy, _) => false,\n                     Res::Def(DefKind::Variant, _) => {\n                         return handle_variant(cx, res, extra_fragment);\n@@ -813,7 +813,7 @@ fn ambiguity_error(\n \n                     for (res, ns) in candidates {\n                         let (action, mut suggestion) = match res {\n-                            Res::Def(DefKind::Method, _) | Res::Def(DefKind::Fn, _) => {\n+                            Res::Def(DefKind::AssocFn, _) | Res::Def(DefKind::Fn, _) => {\n                                 (\"add parentheses\", format!(\"{}()\", path_str))\n                             }\n                             Res::Def(DefKind::Macro(..), _) => {"}, {"sha": "2a370f192964f8b5ae0841abfc6006128024abe8", "filename": "src/libstd/error.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -552,6 +552,9 @@ impl Error for char::ParseCharError {\n     }\n }\n \n+#[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+impl Error for alloc::collections::TryReserveError {}\n+\n // Copied from `any.rs`.\n impl dyn Error + 'static {\n     /// Returns `true` if the boxed type is the same as `T`"}, {"sha": "ea540bd0b18a98e7b9bae81b0c9a37d4d6281e19", "filename": "src/test/COMPILER_TESTS.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2FCOMPILER_TESTS.md", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2FCOMPILER_TESTS.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2FCOMPILER_TESTS.md?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,4 +1,4 @@\n # Compiler Test Documentation\n \n Documentation for the compiler testing framework can be found in\n-[the rustc guide](https://rust-lang.github.io/rustc-guide/tests/intro.html).\n+[the rustc dev guide](https://rustc-dev-guide.rust-lang.org/tests/intro.html)."}, {"sha": "4e59bb507676f27e5e83a58b2f58075a4e2b37fa", "filename": "src/test/ui/async-await/no-const-async.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,8 +1,8 @@\n error: functions cannot be both `const` and `async`\n-  --> $DIR/no-const-async.rs:4:1\n+  --> $DIR/no-const-async.rs:4:5\n    |\n LL | pub const async fn x() {}\n-   | ^^^^-----^-----^^^^^^^^^^\n+   | ----^^^^^-^^^^^----------\n    |     |     |\n    |     |     `async` because of this\n    |     `const` because of this"}, {"sha": "4040e66c6af776f65aa5f99e5a0f5fafd9504761", "filename": "src/test/ui/auto-trait-validation.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Fauto-trait-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Fauto-trait-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-trait-validation.stderr?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,20 +1,26 @@\n error[E0567]: auto traits cannot have generic parameters\n-  --> $DIR/auto-trait-validation.rs:3:1\n+  --> $DIR/auto-trait-validation.rs:3:19\n    |\n LL | auto trait Generic<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            -------^^^ help: remove the parameters\n+   |            |\n+   |            auto trait cannot have generic parameters\n \n error[E0568]: auto traits cannot have super traits\n-  --> $DIR/auto-trait-validation.rs:5:1\n+  --> $DIR/auto-trait-validation.rs:5:20\n    |\n LL | auto trait Bound : Copy {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            -----   ^^^^ help: remove the super traits\n+   |            |\n+   |            auto trait cannot have super traits\n \n error[E0380]: auto traits cannot have methods or associated items\n-  --> $DIR/auto-trait-validation.rs:7:1\n+  --> $DIR/auto-trait-validation.rs:7:25\n    |\n LL | auto trait MyTrait { fn foo() {} }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            -------      ^^^\n+   |            |\n+   |            auto trait cannot have items\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1bd37f395902a287e532460cf11a3409fce3cfcd", "filename": "src/test/ui/coherence/coherence-negative-impls-safe.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.stderr?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,9 +1,10 @@\n error[E0198]: negative impls cannot be unsafe\n-  --> $DIR/coherence-negative-impls-safe.rs:7:1\n+  --> $DIR/coherence-negative-impls-safe.rs:7:13\n    |\n LL | unsafe impl !Send for TestType {}\n-   | ------^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n+   | ------      -^^^^\n+   | |           |\n+   | |           negative because of this\n    | unsafe because of this\n \n error: aborting due to previous error"}, {"sha": "35e1042649ef9e382e40b324b5e71d158a9e172d", "filename": "src/test/ui/error-codes/E0197.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,8 +1,8 @@\n error[E0197]: inherent impls cannot be unsafe\n-  --> $DIR/E0197.rs:3:1\n+  --> $DIR/E0197.rs:3:13\n    |\n LL | unsafe impl Foo { }\n-   | ------^^^^^^^^^^^^^\n+   | ------      ^^^ inherent impl for this type\n    | |\n    | unsafe because of this\n "}, {"sha": "bb2efefb427bad08dff28f7c81b1450fb58b7179", "filename": "src/test/ui/error-codes/E0198.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,9 +1,10 @@\n error[E0198]: negative impls cannot be unsafe\n-  --> $DIR/E0198.rs:5:1\n+  --> $DIR/E0198.rs:5:13\n    |\n LL | unsafe impl !Send for Foo { }\n-   | ------^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n+   | ------      -^^^^\n+   | |           |\n+   | |           negative because of this\n    | unsafe because of this\n \n error: aborting due to previous error"}, {"sha": "490d29ad8a35f33eef20f9ffde326f6b0a3b404b", "filename": "src/test/ui/feature-gates/feature-gate-optin-builtin-traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -8,10 +8,10 @@ LL | auto trait AutoDummyTrait {}\n    = help: add `#![feature(optin_builtin_traits)]` to the crate attributes to enable\n \n error[E0658]: negative trait bounds are not yet fully implemented; use marker types for now\n-  --> $DIR/feature-gate-optin-builtin-traits.rs:9:1\n+  --> $DIR/feature-gate-optin-builtin-traits.rs:9:6\n    |\n LL | impl !AutoDummyTrait for DummyStruct {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |      ^^^^^^^^^^^^^^^\n    |\n    = note: see issue #13231 <https://github.com/rust-lang/rust/issues/13231> for more information\n    = help: add `#![feature(optin_builtin_traits)]` to the crate attributes to enable"}, {"sha": "d20bb4bd90726f66d6cf2ce15c6221a5197e4ee2", "filename": "src/test/ui/issues/issue-23080-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -3,8 +3,7 @@\n #![feature(optin_builtin_traits)]\n \n unsafe auto trait Trait {\n-//~^ ERROR E0380\n-    type Output;\n+    type Output; //~ ERROR E0380\n }\n \n fn call_method<T: Trait>(x: T) {}"}, {"sha": "fcd1ecfa98288ff1d43db80a2e7d50b50ce2ed15", "filename": "src/test/ui/issues/issue-23080-2.stderr", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,11 +1,10 @@\n error[E0380]: auto traits cannot have methods or associated items\n-  --> $DIR/issue-23080-2.rs:5:1\n+  --> $DIR/issue-23080-2.rs:6:10\n    |\n-LL | / unsafe auto trait Trait {\n-LL | |\n-LL | |     type Output;\n-LL | | }\n-   | |_^\n+LL | unsafe auto trait Trait {\n+   |                   ----- auto trait cannot have items\n+LL |     type Output;\n+   |          ^^^^^^\n \n error[E0275]: overflow evaluating the requirement `<() as Trait>::Output`\n    |"}, {"sha": "fa5c35316bc28d4853fe4868586a435c1fc6d395", "filename": "src/test/ui/issues/issue-23080.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Fissues%2Fissue-23080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Fissues%2Fissue-23080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080.rs?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,8 +1,7 @@\n #![feature(optin_builtin_traits)]\n \n unsafe auto trait Trait {\n-//~^ ERROR E0380\n-    fn method(&self) {\n+    fn method(&self) { //~ ERROR E0380\n         println!(\"Hello\");\n     }\n }"}, {"sha": "dbb9861b5784a8669a26114a3a13b7113c3c0017", "filename": "src/test/ui/issues/issue-23080.stderr", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,13 +1,10 @@\n error[E0380]: auto traits cannot have methods or associated items\n-  --> $DIR/issue-23080.rs:3:1\n+  --> $DIR/issue-23080.rs:4:8\n    |\n-LL | / unsafe auto trait Trait {\n-LL | |\n-LL | |     fn method(&self) {\n-LL | |         println!(\"Hello\");\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | unsafe auto trait Trait {\n+   |                   ----- auto trait cannot have items\n+LL |     fn method(&self) {\n+   |        ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d6b36fbb71450ed258c04fa042c687ac93b21920", "filename": "src/test/ui/parser/fn-header-semantic-fail.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -2,7 +2,7 @@ error: functions cannot be both `const` and `async`\n   --> $DIR/fn-header-semantic-fail.rs:13:5\n    |\n LL |     const async unsafe extern \"C\" fn ff5() {} // OK.\n-   |     -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^-^^^^^------------------------------\n    |     |     |\n    |     |     `async` because of this\n    |     `const` because of this\n@@ -45,7 +45,7 @@ error: functions cannot be both `const` and `async`\n   --> $DIR/fn-header-semantic-fail.rs:21:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5();\n-   |         -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^-^^^^^----------------------------\n    |         |     |\n    |         |     `async` because of this\n    |         `const` because of this\n@@ -88,7 +88,7 @@ error: functions cannot be both `const` and `async`\n   --> $DIR/fn-header-semantic-fail.rs:34:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n-   |         -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^-^^^^^------------------------------\n    |         |     |\n    |         |     `async` because of this\n    |         `const` because of this\n@@ -97,7 +97,7 @@ error: functions cannot be both `const` and `async`\n   --> $DIR/fn-header-semantic-fail.rs:46:9\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n-   |         -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^-^^^^^------------------------------\n    |         |     |\n    |         |     `async` because of this\n    |         `const` because of this\n@@ -160,7 +160,7 @@ error: functions cannot be both `const` and `async`\n   --> $DIR/fn-header-semantic-fail.rs:55:9\n    |\n LL |         const async unsafe extern \"C\" fn fe5();\n-   |         -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^-^^^^^----------------------------\n    |         |     |\n    |         |     `async` because of this\n    |         `const` because of this"}, {"sha": "834f6a409f5b69bcbf8c1410a51f6c365880c05f", "filename": "src/test/ui/rfc-2632-const-trait-impl/inherent-impl.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,18 +1,18 @@\n error: inherent impls cannot be `const`\n-  --> $DIR/inherent-impl.rs:9:1\n+  --> $DIR/inherent-impl.rs:9:12\n    |\n LL | impl const S {}\n-   | ^^^^^-----^^^^^\n+   |      ----- ^ inherent impl for this type\n    |      |\n    |      `const` because of this\n    |\n    = note: only trait implementations may be annotated with `const`\n \n error: inherent impls cannot be `const`\n-  --> $DIR/inherent-impl.rs:12:1\n+  --> $DIR/inherent-impl.rs:12:12\n    |\n LL | impl const T {}\n-   | ^^^^^-----^^^^^\n+   |      ----- ^ inherent impl for this type\n    |      |\n    |      `const` because of this\n    |"}, {"sha": "6e19d79e48f6b136e02150e6a6154c2cceb8fbb6", "filename": "src/test/ui/specialization/defaultimpl/validation.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,8 +1,8 @@\n error: inherent impls cannot be `default`\n-  --> $DIR/validation.rs:7:1\n+  --> $DIR/validation.rs:7:14\n    |\n LL | default impl S {}\n-   | -------^^^^^^^\n+   | -------      ^ inherent impl for this type\n    | |\n    | `default` because of this\n    |"}, {"sha": "5d4c1b354f700614cb27649b367962a9f5dc471c", "filename": "src/test/ui/syntax-trait-polarity-feature-gate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: negative trait bounds are not yet fully implemented; use marker types for now\n-  --> $DIR/syntax-trait-polarity-feature-gate.rs:7:1\n+  --> $DIR/syntax-trait-polarity-feature-gate.rs:7:6\n    |\n LL | impl !Send for TestType {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |      ^^^^^\n    |\n    = note: see issue #13231 <https://github.com/rust-lang/rust/issues/13231> for more information\n    = help: add `#![feature(optin_builtin_traits)]` to the crate attributes to enable"}, {"sha": "5777e0ade908eb315ecf16ab0b6311ab9b747f57", "filename": "src/test/ui/syntax-trait-polarity.stderr", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,29 +1,35 @@\n error: inherent impls cannot be negative\n-  --> $DIR/syntax-trait-polarity.rs:7:1\n+  --> $DIR/syntax-trait-polarity.rs:7:7\n    |\n LL | impl !TestType {}\n-   | ^^^^^^^^^^^^^^^^^\n+   |      -^^^^^^^^ inherent impl for this type\n+   |      |\n+   |      negative because of this\n \n error[E0198]: negative impls cannot be unsafe\n-  --> $DIR/syntax-trait-polarity.rs:12:1\n+  --> $DIR/syntax-trait-polarity.rs:12:13\n    |\n LL | unsafe impl !Send for TestType {}\n-   | ------^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n+   | ------      -^^^^\n+   | |           |\n+   | |           negative because of this\n    | unsafe because of this\n \n error: inherent impls cannot be negative\n-  --> $DIR/syntax-trait-polarity.rs:19:1\n+  --> $DIR/syntax-trait-polarity.rs:19:10\n    |\n LL | impl<T> !TestType2<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         -^^^^^^^^^^^^ inherent impl for this type\n+   |         |\n+   |         negative because of this\n \n error[E0198]: negative impls cannot be unsafe\n-  --> $DIR/syntax-trait-polarity.rs:22:1\n+  --> $DIR/syntax-trait-polarity.rs:22:16\n    |\n LL | unsafe impl<T> !Send for TestType2<T> {}\n-   | ------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n+   | ------         -^^^^\n+   | |              |\n+   | |              negative because of this\n    | unsafe because of this\n \n error[E0192]: negative impls are only allowed for auto traits (e.g., `Send` and `Sync`)"}, {"sha": "0738d2973e2d7585ff28efa876e207ac43eaf0a4", "filename": "src/test/ui/traits/trait-safety-inherent-impl.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Ftraits%2Ftrait-safety-inherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Ftraits%2Ftrait-safety-inherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-safety-inherent-impl.stderr?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,14 +1,10 @@\n error[E0197]: inherent impls cannot be unsafe\n-  --> $DIR/trait-safety-inherent-impl.rs:5:1\n+  --> $DIR/trait-safety-inherent-impl.rs:5:13\n    |\n-LL |   unsafe impl SomeStruct {\n-   |   ^-----\n-   |   |\n-   |  _unsafe because of this\n+LL | unsafe impl SomeStruct {\n+   | ------      ^^^^^^^^^^ inherent impl for this type\n    | |\n-LL | |     fn foo(self) { }\n-LL | | }\n-   | |_^\n+   | unsafe because of this\n \n error: aborting due to previous error\n "}, {"sha": "a83ff3701511d8e608e57e39d993d71a7b41a552", "filename": "src/test/ui/traits/traits-inductive-overflow-supertrait-oibit.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,8 +1,10 @@\n error[E0568]: auto traits cannot have super traits\n-  --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:7:1\n+  --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:7:19\n    |\n LL | auto trait Magic: Copy {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            -----  ^^^^ help: remove the super traits\n+   |            |\n+   |            auto trait cannot have super traits\n \n error[E0277]: the trait bound `NoClone: std::marker::Copy` is not satisfied\n   --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:15:23"}, {"sha": "e3976293277549ae8972901670efa6ef51ca37e2", "filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits-2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.stderr?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,8 +1,10 @@\n error[E0568]: auto traits cannot have super traits\n-  --> $DIR/typeck-auto-trait-no-supertraits-2.rs:3:1\n+  --> $DIR/typeck-auto-trait-no-supertraits-2.rs:3:20\n    |\n LL | auto trait Magic : Sized where Option<Self> : Magic {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            -----   ^^^^^ help: remove the super traits\n+   |            |\n+   |            auto trait cannot have super traits\n \n error: aborting due to previous error\n "}, {"sha": "b1602e3642ecb4d190f0736c2be7c6f7bdc19aa3", "filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.stderr?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,8 +1,10 @@\n error[E0568]: auto traits cannot have super traits\n-  --> $DIR/typeck-auto-trait-no-supertraits.rs:27:1\n+  --> $DIR/typeck-auto-trait-no-supertraits.rs:27:19\n    |\n LL | auto trait Magic: Copy {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            -----  ^^^^ help: remove the super traits\n+   |            |\n+   |            auto trait cannot have super traits\n \n error: aborting due to previous error\n "}, {"sha": "b389cd0373cc4da052b52f36660472b1f98089a9", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -1,11 +1,10 @@\n #!/usr/bin/env python\n # -*- coding: utf-8 -*-\n \n-# This script publishes the new \"current\" toolstate in the toolstate repo (not to be\n-# confused with publishing the test results, which happens in\n-# `src/ci/docker/x86_64-gnu-tools/checktools.sh`).\n-# It is set as callback for `src/ci/docker/x86_64-gnu-tools/repo.sh` by the CI scripts\n-# when a new commit lands on `master` (i.e., after it passed all checks on `auto`).\n+# This script computes the new \"current\" toolstate for the toolstate repo (not to be\n+# confused with publishing the test results, which happens in `src/bootstrap/toolstate.rs`).\n+# It gets called from `src/ci/publish_toolstate.sh` when a new commit lands on `master`\n+# (i.e., after it passed all checks on `auto`).\n \n from __future__ import print_function\n "}, {"sha": "13777d7a6c47d1ab936d8471cf2777be75be2091", "filename": "triagebot.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b7d21f59a363e53eb1c31d76b40af2ff99321c/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/54b7d21f59a363e53eb1c31d76b40af2ff99321c/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=54b7d21f59a363e53eb1c31d76b40af2ff99321c", "patch": "@@ -17,7 +17,7 @@ Hey LLVM ICE-breakers! This bug has been identified as a good\n [instructions] for tackling these sorts of bugs. Maybe take a look?\n Thanks! <3\n \n-[instructions]: https://rust-lang.github.io/rustc-guide/ice-breaker/llvm.html\n+[instructions]: https://rustc-dev-guide.rust-lang.org/ice-breaker/llvm.html\n \"\"\"\n label = \"ICEBreaker-LLVM\"\n \n@@ -28,6 +28,6 @@ Hey Cleanup Crew ICE-breakers! This bug has been identified as a good\n [instructions] for tackling these sorts of bugs. Maybe take a look?\n Thanks! <3\n \n-[instructions]: https://rust-lang.github.io/rustc-guide/ice-breaker/cleanup-crew.html\n+[instructions]: https://rustc-dev-guide.rust-lang.org/ice-breaker/cleanup-crew.html\n \"\"\"\n label = \"ICEBreaker-Cleanup-Crew\""}]}