{"sha": "c11f689d2475dd9ab956e881238d5d7b6b485efb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMWY2ODlkMjQ3NWRkOWFiOTU2ZTg4MTIzOGQ1ZDdiNmI0ODVlZmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-29T21:42:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-29T21:42:34Z"}, "message": "Auto merge of #44169 - arielb1:rollup, r=arielb1\n\nRollup of 12 pull requests\n\n- Successful merges: #43705, #43778, #43918, #44076, #44117, #44121, #44126, #44134, #44135, #44141, #44144, #44158\n- Failed merges:", "tree": {"sha": "11a1116831ee2df7ac555f88bc2ab29ebc1a60bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11a1116831ee2df7ac555f88bc2ab29ebc1a60bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c11f689d2475dd9ab956e881238d5d7b6b485efb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c11f689d2475dd9ab956e881238d5d7b6b485efb", "html_url": "https://github.com/rust-lang/rust/commit/c11f689d2475dd9ab956e881238d5d7b6b485efb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c11f689d2475dd9ab956e881238d5d7b6b485efb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "630e02f25be1e65b316857c5bd8022da0b96db40", "url": "https://api.github.com/repos/rust-lang/rust/commits/630e02f25be1e65b316857c5bd8022da0b96db40", "html_url": "https://github.com/rust-lang/rust/commit/630e02f25be1e65b316857c5bd8022da0b96db40"}, {"sha": "be0ac0124c992f22d69df0b4d9e27d50a0130575", "url": "https://api.github.com/repos/rust-lang/rust/commits/be0ac0124c992f22d69df0b4d9e27d50a0130575", "html_url": "https://github.com/rust-lang/rust/commit/be0ac0124c992f22d69df0b4d9e27d50a0130575"}], "stats": {"total": 299, "additions": 207, "deletions": 92}, "files": [{"sha": "746f85a9d59d67291137c0ce5347a26759fa2cfa", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=c11f689d2475dd9ab956e881238d5d7b6b485efb", "patch": "@@ -724,6 +724,9 @@ impl Step for Src {\n         let dst_src = dst.join(\"rust\");\n         t!(fs::create_dir_all(&dst_src));\n \n+        let src_files = [\n+            \"src/Cargo.lock\",\n+        ];\n         // This is the reduced set of paths which will become the rust-src component\n         // (essentially libstd and all of its path dependencies)\n         let std_src_dirs = [\n@@ -759,6 +762,9 @@ impl Step for Src {\n         ];\n \n         copy_src_dirs(build, &std_src_dirs[..], &std_src_dirs_exclude[..], &dst_src);\n+        for file in src_files.iter() {\n+            copy(&build.src.join(file), &dst_src.join(file));\n+        }\n \n         // Create source tarball in rust-installer format\n         let mut cmd = rust_installer(builder);"}, {"sha": "7546d7fd4f07af7405c217aa4f718082566d4643", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=c11f689d2475dd9ab956e881238d5d7b6b485efb", "patch": "@@ -136,7 +136,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n             None => {\n                 // No subcommand -- show the general usage and subcommand help\n                 println!(\"{}\\n\", subcommand_help);\n-                process::exit(0);\n+                process::exit(1);\n             }\n         };\n "}, {"sha": "84a9e56b644c8cb2d2551b6463249aba745d14cf", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=c11f689d2475dd9ab956e881238d5d7b6b485efb", "patch": "@@ -123,7 +123,6 @@ extern crate build_helper;\n extern crate serde_derive;\n #[macro_use]\n extern crate lazy_static;\n-extern crate serde;\n extern crate serde_json;\n extern crate cmake;\n extern crate filetime;"}, {"sha": "e759f1a3e6f85c073f532e5955e32ab51cb5eede", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=c11f689d2475dd9ab956e881238d5d7b6b485efb", "patch": "@@ -198,7 +198,7 @@ tool!(\n     Linkchecker, \"src/tools/linkchecker\", \"linkchecker\", Mode::Libstd;\n     CargoTest, \"src/tools/cargotest\", \"cargotest\", Mode::Libstd;\n     Compiletest, \"src/tools/compiletest\", \"compiletest\", Mode::Libtest;\n-    BuildManifest, \"src/tools/build-manifest\", \"build-manifest\", Mode::Librustc;\n+    BuildManifest, \"src/tools/build-manifest\", \"build-manifest\", Mode::Libstd;\n     RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\", Mode::Libstd;\n     RustInstaller, \"src/tools/rust-installer\", \"rust-installer\", Mode::Libstd;\n );"}, {"sha": "8ea388fddf8848c8a8c4f3c31e75be7cb25bac40", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=c11f689d2475dd9ab956e881238d5d7b6b485efb", "patch": "@@ -242,7 +242,7 @@ macro_rules! impl_Display {\n                 // decode last 1 or 2 chars\n                 if n < 10 {\n                     curr -= 1;\n-                    *buf_ptr.offset(curr) = (n as u8) + 48;\n+                    *buf_ptr.offset(curr) = (n as u8) + b'0';\n                 } else {\n                     let d1 = n << 1;\n                     curr -= 2;"}, {"sha": "138e04c7737e06caf0e876894f2f3b014f9a164b", "filename": "src/libcore/option.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=c11f689d2475dd9ab956e881238d5d7b6b485efb", "patch": "@@ -774,6 +774,26 @@ impl<'a, T: Clone> Option<&'a T> {\n     }\n }\n \n+impl<'a, T: Clone> Option<&'a mut T> {\n+    /// Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the\n+    /// option.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_ref_mut_cloned)]\n+    /// let mut x = 12;\n+    /// let opt_x = Some(&mut x);\n+    /// assert_eq!(opt_x, Some(&mut 12));\n+    /// let cloned = opt_x.cloned();\n+    /// assert_eq!(cloned, Some(12));\n+    /// ```\n+    #[unstable(feature = \"option_ref_mut_cloned\", issue = \"43738\")]\n+    pub fn cloned(self) -> Option<T> {\n+        self.map(|t| t.clone())\n+    }\n+}\n+\n impl<T: Default> Option<T> {\n     /// Returns the contained value or a default\n     ///"}, {"sha": "2c756be02f16a5de2695f4f4b583adea12f293e4", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=c11f689d2475dd9ab956e881238d5d7b6b485efb", "patch": "@@ -306,6 +306,12 @@ impl Handler {\n         self.continue_after_error.set(continue_after_error);\n     }\n \n+    // NOTE: DO NOT call this function from rustc, as it relies on `err_count` being non-zero\n+    // if an error happened to avoid ICEs. This function should only be called from tools.\n+    pub fn reset_err_count(&self) {\n+        self.err_count.set(0);\n+    }\n+\n     pub fn struct_dummy<'a>(&'a self) -> DiagnosticBuilder<'a> {\n         DiagnosticBuilder::new(self, Level::Cancelled, \"\")\n     }"}, {"sha": "10a3878073e97534da24dbe9268891d2a3f28d64", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=c11f689d2475dd9ab956e881238d5d7b6b485efb", "patch": "@@ -228,7 +228,7 @@ impl<'a> fmt::Display for WhereClause<'a> {\n         }\n \n         if end_newline {\n-            //add a space so stripping <br> tags and breaking spaces still renders properly\n+            // add a space so stripping <br> tags and breaking spaces still renders properly\n             if f.alternate() {\n                 clause.push(' ');\n             } else {"}, {"sha": "e6b236deac4eed88911e35dbd9870f11ed038fb3", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 43, "deletions": 15, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=c11f689d2475dd9ab956e881238d5d7b6b485efb", "patch": "@@ -172,6 +172,21 @@ impl<'a> Classifier<'a> {\n         }\n     }\n \n+    /// Gets the next token out of the lexer, emitting fatal errors if lexing fails.\n+    fn try_next_token(&mut self) -> io::Result<TokenAndSpan> {\n+        match self.lexer.try_next_token() {\n+            Ok(tas) => Ok(tas),\n+            Err(_) => {\n+                self.lexer.emit_fatal_errors();\n+                self.lexer.sess.span_diagnostic\n+                    .struct_warn(\"Backing out of syntax highlighting\")\n+                    .note(\"You probably did not intend to render this as a rust code-block\")\n+                    .emit();\n+                Err(io::Error::new(io::ErrorKind::Other, \"\"))\n+            }\n+        }\n+    }\n+\n     /// Exhausts the `lexer` writing the output into `out`.\n     ///\n     /// The general structure for this method is to iterate over each token,\n@@ -183,18 +198,7 @@ impl<'a> Classifier<'a> {\n                                    out: &mut W)\n                                    -> io::Result<()> {\n         loop {\n-            let next = match self.lexer.try_next_token() {\n-                Ok(tas) => tas,\n-                Err(_) => {\n-                    self.lexer.emit_fatal_errors();\n-                    self.lexer.sess.span_diagnostic\n-                        .struct_warn(\"Backing out of syntax highlighting\")\n-                        .note(\"You probably did not intend to render this as a rust code-block\")\n-                        .emit();\n-                    return Err(io::Error::new(io::ErrorKind::Other, \"\"));\n-                }\n-            };\n-\n+            let next = self.try_next_token()?;\n             if next.tok == token::Eof {\n                 break;\n             }\n@@ -255,13 +259,37 @@ impl<'a> Classifier<'a> {\n                 }\n             }\n \n-            // This is the start of an attribute. We're going to want to\n+            // This might be the start of an attribute. We're going to want to\n             // continue highlighting it as an attribute until the ending ']' is\n             // seen, so skip out early. Down below we terminate the attribute\n             // span when we see the ']'.\n             token::Pound => {\n-                self.in_attribute = true;\n-                out.enter_span(Class::Attribute)?;\n+                // We can't be sure that our # begins an attribute (it could\n+                // just be appearing in a macro) until we read either `#![` or\n+                // `#[` from the input stream.\n+                //\n+                // We don't want to start highlighting as an attribute until\n+                // we're confident there is going to be a ] coming up, as\n+                // otherwise # tokens in macros highlight the rest of the input\n+                // as an attribute.\n+\n+                // Case 1: #![inner_attribute]\n+                if self.lexer.peek().tok == token::Not {\n+                    self.try_next_token()?; // NOTE: consumes `!` token!\n+                    if self.lexer.peek().tok == token::OpenDelim(token::Bracket) {\n+                        self.in_attribute = true;\n+                        out.enter_span(Class::Attribute)?;\n+                    }\n+                    out.string(\"#\", Class::None, None)?;\n+                    out.string(\"!\", Class::None, None)?;\n+                    return Ok(());\n+                }\n+\n+                // Case 2: #[outer_attribute]\n+                if self.lexer.peek().tok == token::OpenDelim(token::Bracket) {\n+                    self.in_attribute = true;\n+                    out.enter_span(Class::Attribute)?;\n+                }\n                 out.string(\"#\", Class::None, None)?;\n                 return Ok(());\n             }"}, {"sha": "5b8c7503a791d83d15e46c7ed153afe4011c2a76", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c11f689d2475dd9ab956e881238d5d7b6b485efb", "patch": "@@ -1523,17 +1523,15 @@ impl<'a> fmt::Display for Item<'a> {\n                 } else {\n                     write!(fmt, \"Module \")?;\n                 },\n-            clean::FunctionItem(..) | clean::ForeignFunctionItem(..) =>\n-                write!(fmt, \"Function \")?,\n+            clean::FunctionItem(..) | clean::ForeignFunctionItem(..) => write!(fmt, \"Function \")?,\n             clean::TraitItem(..) => write!(fmt, \"Trait \")?,\n             clean::StructItem(..) => write!(fmt, \"Struct \")?,\n             clean::UnionItem(..) => write!(fmt, \"Union \")?,\n             clean::EnumItem(..) => write!(fmt, \"Enum \")?,\n             clean::TypedefItem(..) => write!(fmt, \"Type Definition \")?,\n             clean::MacroItem(..) => write!(fmt, \"Macro \")?,\n             clean::PrimitiveItem(..) => write!(fmt, \"Primitive Type \")?,\n-            clean::StaticItem(..) | clean::ForeignStaticItem(..) =>\n-                write!(fmt, \"Static \")?,\n+            clean::StaticItem(..) | clean::ForeignStaticItem(..) => write!(fmt, \"Static \")?,\n             clean::ConstantItem(..) => write!(fmt, \"Constant \")?,\n             _ => {\n                 // We don't generate pages for any other type."}, {"sha": "312dfce8d39c27215ca9b31cdfddd8fd7ef1d2cf", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=c11f689d2475dd9ab956e881238d5d7b6b485efb", "patch": "@@ -329,6 +329,10 @@ h4 > code, h3 > code, .invisible > code {\n \tdisplay: inline-block;\n }\n \n+.in-band > code {\n+\tdisplay: inline-block;\n+}\n+\n #main { position: relative; }\n #main > .since {\n \ttop: inherit;\n@@ -447,7 +451,8 @@ a {\n }\n \n .in-band:hover > .anchor {\n-\tdisplay: initial;\n+\tdisplay: inline-block;\n+\tposition: absolute;\n }\n .anchor {\n \tdisplay: none;"}, {"sha": "9ef19cd64b386f89a6ff7be7e60e8b795d16c80e", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 66, "deletions": 22, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=c11f689d2475dd9ab956e881238d5d7b6b485efb", "patch": "@@ -705,30 +705,74 @@ impl hash::Hash for SocketAddrV6 {\n ///\n /// # Examples\n ///\n+/// Creating a [`SocketAddr`] iterator that yields one item:\n+///\n+/// ```\n+/// use std::net::{ToSocketAddrs, SocketAddr};\n+///\n+/// let addr = SocketAddr::from(([127, 0, 0, 1], 443));\n+/// let mut addrs_iter = addr.to_socket_addrs().unwrap();\n+///\n+/// assert_eq!(Some(addr), addrs_iter.next());\n+/// assert!(addrs_iter.next().is_none());\n+/// ```\n+///\n+/// Creating a [`SocketAddr`] iterator from a hostname:\n+///\n /// ```no_run\n-/// use std::net::{SocketAddrV4, TcpStream, UdpSocket, TcpListener, Ipv4Addr};\n-///\n-/// fn main() {\n-///     let ip = Ipv4Addr::new(127, 0, 0, 1);\n-///     let port = 12345;\n-///\n-///     // The following lines are equivalent modulo possible \"localhost\" name\n-///     // resolution differences\n-///     let tcp_s = TcpStream::connect(SocketAddrV4::new(ip, port));\n-///     let tcp_s = TcpStream::connect((ip, port));\n-///     let tcp_s = TcpStream::connect((\"127.0.0.1\", port));\n-///     let tcp_s = TcpStream::connect((\"localhost\", port));\n-///     let tcp_s = TcpStream::connect(\"127.0.0.1:12345\");\n-///     let tcp_s = TcpStream::connect(\"localhost:12345\");\n-///\n-///     // TcpListener::bind(), UdpSocket::bind() and UdpSocket::send_to()\n-///     // behave similarly\n-///     let tcp_l = TcpListener::bind(\"localhost:12345\");\n-///\n-///     let mut udp_s = UdpSocket::bind((\"127.0.0.1\", port)).unwrap();\n-///     udp_s.send_to(&[7], (ip, 23451)).unwrap();\n-/// }\n+/// use std::net::{SocketAddr, ToSocketAddrs};\n+///\n+/// // assuming 'localhost' resolves to 127.0.0.1\n+/// let mut addrs_iter = \"localhost:443\".to_socket_addrs().unwrap();\n+/// assert_eq!(addrs_iter.next(), Some(SocketAddr::from(([127, 0, 0, 1], 443))));\n+/// assert!(addrs_iter.next().is_none());\n+///\n+/// // assuming 'foo' does not resolve\n+/// assert!(\"foo:443\".to_socket_addrs().is_err());\n /// ```\n+///\n+/// Creating a [`SocketAddr`] iterator that yields multiple items:\n+///\n+/// ```\n+/// use std::net::{SocketAddr, ToSocketAddrs};\n+///\n+/// let addr1 = SocketAddr::from(([0, 0, 0, 0], 80));\n+/// let addr2 = SocketAddr::from(([127, 0, 0, 1], 443));\n+/// let addrs = vec![addr1, addr2];\n+///\n+/// let mut addrs_iter = (&addrs[..]).to_socket_addrs().unwrap();\n+///\n+/// assert_eq!(Some(addr1), addrs_iter.next());\n+/// assert_eq!(Some(addr2), addrs_iter.next());\n+/// assert!(addrs_iter.next().is_none());\n+/// ```\n+///\n+/// Attempting to create a [`SocketAddr`] iterator from an improperly formatted\n+/// socket address `&str` (missing the port):\n+///\n+/// ```\n+/// use std::io;\n+/// use std::net::ToSocketAddrs;\n+///\n+/// let err = \"127.0.0.1\".to_socket_addrs().unwrap_err();\n+/// assert_eq!(err.kind(), io::ErrorKind::InvalidInput);\n+/// ```\n+///\n+/// [`TcpStream::connect`] is an example of an function that utilizes\n+/// `ToSocketsAddr` as a trait bound on its parameter in order to accept\n+/// different types:\n+///\n+/// ```no_run\n+/// use std::net::{TcpStream, Ipv4Addr};\n+///\n+/// let stream = TcpStream::connect((\"127.0.0.1\", 443));\n+/// // or\n+/// let stream = TcpStream::connect(\"127.0.0.1.443\");\n+/// // or\n+/// let stream = TcpStream::connect((Ipv4Addr::new(127, 0, 0, 1), 443));\n+/// ```\n+///\n+/// [`TcpStream::connect`]: ../../std/net/struct.TcpStream.html#method.connect\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ToSocketAddrs {\n     /// Returned iterator over socket addresses which this type may correspond"}, {"sha": "991cf4cf2b375aae64d296717d4bc304f7fe79f1", "filename": "src/test/rustdoc/issue-41783.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Ftest%2Frustdoc%2Fissue-41783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Ftest%2Frustdoc%2Fissue-41783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-41783.rs?ref=c11f689d2475dd9ab956e881238d5d7b6b485efb", "patch": "@@ -12,14 +12,18 @@\n // @!has - 'space'\n // @!has - 'comment'\n // @has - '# <span class=\"ident\">single'\n-// @has - '#<span class=\"attribute\"># <span class=\"ident\">double</span>'\n-// @has - '#<span class=\"attribute\">#<span class=\"attribute\"># <span class=\"ident\">triple</span>'\n+// @has - '## <span class=\"ident\">double</span>'\n+// @has - '### <span class=\"ident\">triple</span>'\n+// @has - '<span class=\"attribute\">#[<span class=\"ident\">outer</span>]</span>'\n+// @has - '<span class=\"attribute\">#![<span class=\"ident\">inner</span>]</span>'\n \n /// ```no_run\n /// # # space\n /// # comment\n /// ## single\n /// ### double\n /// #### triple\n+/// ##[outer]\n+/// ##![inner]\n /// ```\n pub struct Foo;"}, {"sha": "e2be021e7cc39357608a9e9d67ee89a3b0d81cc2", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=c11f689d2475dd9ab956e881238d5d7b6b485efb", "patch": "@@ -239,7 +239,12 @@ impl Builder {\n         self.package(\"rust-std\", &mut manifest.pkg, TARGETS);\n         self.package(\"rust-docs\", &mut manifest.pkg, TARGETS);\n         self.package(\"rust-src\", &mut manifest.pkg, &[\"*\"]);\n-        self.package(\"rls\", &mut manifest.pkg, HOSTS);\n+        let rls_package_name = if self.rust_release == \"nightly\" {\n+            \"rls\"\n+        } else {\n+            \"rls-preview\"\n+        };\n+        self.package(rls_package_name, &mut manifest.pkg, HOSTS);\n         self.package(\"rust-analysis\", &mut manifest.pkg, TARGETS);\n \n         let mut pkg = Package {\n@@ -276,7 +281,7 @@ impl Builder {\n             }\n \n             extensions.push(Component {\n-                pkg: \"rls\".to_string(),\n+                pkg: rls_package_name.to_string(),\n                 target: host.to_string(),\n             });\n             extensions.push(Component {\n@@ -353,7 +358,7 @@ impl Builder {\n             format!(\"rust-src-{}.tar.gz\", self.rust_release)\n         } else if component == \"cargo\" {\n             format!(\"cargo-{}-{}.tar.gz\", self.cargo_release, target)\n-        } else if component == \"rls\" {\n+        } else if component == \"rls\" || component == \"rls-preview\" {\n             format!(\"rls-{}-{}.tar.gz\", self.rls_release, target)\n         } else {\n             format!(\"{}-{}-{}.tar.gz\", component, self.rust_release, target)\n@@ -363,7 +368,7 @@ impl Builder {\n     fn cached_version(&self, component: &str) -> &str {\n         if component == \"cargo\" {\n             &self.cargo_version\n-        } else if component == \"rls\" {\n+        } else if component == \"rls\" || component == \"rls-preview\" {\n             &self.rls_version\n         } else {\n             &self.rust_version"}, {"sha": "cee7e52c7f3c63f23edce8c7bde77322cc90ab26", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f689d2475dd9ab956e881238d5d7b6b485efb/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=c11f689d2475dd9ab956e881238d5d7b6b485efb", "patch": "@@ -83,117 +83,117 @@ impl fmt::Display for Mode {\n \n #[derive(Clone)]\n pub struct Config {\n-    // The library paths required for running the compiler\n+    /// The library paths required for running the compiler\n     pub compile_lib_path: PathBuf,\n \n-    // The library paths required for running compiled programs\n+    /// The library paths required for running compiled programs\n     pub run_lib_path: PathBuf,\n \n-    // The rustc executable\n+    /// The rustc executable\n     pub rustc_path: PathBuf,\n \n-    // The rustdoc executable\n+    /// The rustdoc executable\n     pub rustdoc_path: Option<PathBuf>,\n \n-    // The python executable to use for LLDB\n+    /// The python executable to use for LLDB\n     pub lldb_python: String,\n \n-    // The python executable to use for htmldocck\n+    /// The python executable to use for htmldocck\n     pub docck_python: String,\n \n-    // The llvm FileCheck binary path\n+    /// The llvm FileCheck binary path\n     pub llvm_filecheck: Option<PathBuf>,\n \n-    // The valgrind path\n+    /// The valgrind path\n     pub valgrind_path: Option<String>,\n \n-    // Whether to fail if we can't run run-pass-valgrind tests under valgrind\n-    // (or, alternatively, to silently run them like regular run-pass tests).\n+    /// Whether to fail if we can't run run-pass-valgrind tests under valgrind\n+    /// (or, alternatively, to silently run them like regular run-pass tests).\n     pub force_valgrind: bool,\n \n-    // The directory containing the tests to run\n+    /// The directory containing the tests to run\n     pub src_base: PathBuf,\n \n-    // The directory where programs should be built\n+    /// The directory where programs should be built\n     pub build_base: PathBuf,\n \n-    // The name of the stage being built (stage1, etc)\n+    /// The name of the stage being built (stage1, etc)\n     pub stage_id: String,\n \n-    // The test mode, compile-fail, run-fail, run-pass\n+    /// The test mode, compile-fail, run-fail, run-pass\n     pub mode: Mode,\n \n-    // Run ignored tests\n+    /// Run ignored tests\n     pub run_ignored: bool,\n \n-    // Only run tests that match this filter\n+    /// Only run tests that match this filter\n     pub filter: Option<String>,\n \n-    // Exactly match the filter, rather than a substring\n+    /// Exactly match the filter, rather than a substring\n     pub filter_exact: bool,\n \n-    // Write out a parseable log of tests that were run\n+    /// Write out a parseable log of tests that were run\n     pub logfile: Option<PathBuf>,\n \n-    // A command line to prefix program execution with,\n-    // for running under valgrind\n+    /// A command line to prefix program execution with,\n+    /// for running under valgrind\n     pub runtool: Option<String>,\n \n-    // Flags to pass to the compiler when building for the host\n+    /// Flags to pass to the compiler when building for the host\n     pub host_rustcflags: Option<String>,\n \n-    // Flags to pass to the compiler when building for the target\n+    /// Flags to pass to the compiler when building for the target\n     pub target_rustcflags: Option<String>,\n \n-    // Target system to be tested\n+    /// Target system to be tested\n     pub target: String,\n \n-    // Host triple for the compiler being invoked\n+    /// Host triple for the compiler being invoked\n     pub host: String,\n \n-    // Path to / name of the GDB executable\n+    /// Path to / name of the GDB executable\n     pub gdb: Option<String>,\n \n-    // Version of GDB, encoded as ((major * 1000) + minor) * 1000 + patch\n+    /// Version of GDB, encoded as ((major * 1000) + minor) * 1000 + patch\n     pub gdb_version: Option<u32>,\n \n-    // Whether GDB has native rust support\n+    /// Whether GDB has native rust support\n     pub gdb_native_rust: bool,\n \n-    // Version of LLDB\n+    /// Version of LLDB\n     pub lldb_version: Option<String>,\n \n-    // Version of LLVM\n+    /// Version of LLVM\n     pub llvm_version: Option<String>,\n \n-    // Is LLVM a system LLVM\n+    /// Is LLVM a system LLVM\n     pub system_llvm: bool,\n \n-    // Path to the android tools\n+    /// Path to the android tools\n     pub android_cross_path: PathBuf,\n \n-    // Extra parameter to run adb on arm-linux-androideabi\n+    /// Extra parameter to run adb on arm-linux-androideabi\n     pub adb_path: String,\n \n-    // Extra parameter to run test suite on arm-linux-androideabi\n+    /// Extra parameter to run test suite on arm-linux-androideabi\n     pub adb_test_dir: String,\n \n-    // status whether android device available or not\n+    /// status whether android device available or not\n     pub adb_device_status: bool,\n \n-    // the path containing LLDB's Python module\n+    /// the path containing LLDB's Python module\n     pub lldb_python_dir: Option<String>,\n \n-    // Explain what's going on\n+    /// Explain what's going on\n     pub verbose: bool,\n \n-    // Print one character per test instead of one line\n+    /// Print one character per test instead of one line\n     pub quiet: bool,\n \n-    // Whether to use colors in test.\n+    /// Whether to use colors in test.\n     pub color: ColorConfig,\n \n-    // where to find the remote test client process, if we're using it\n+    /// where to find the remote test client process, if we're using it\n     pub remote_test_client: Option<PathBuf>,\n \n     // Configuration for various run-make tests frobbing things like C compilers"}]}