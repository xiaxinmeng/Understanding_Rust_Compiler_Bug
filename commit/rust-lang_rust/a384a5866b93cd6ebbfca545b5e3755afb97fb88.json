{"sha": "a384a5866b93cd6ebbfca545b5e3755afb97fb88", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzODRhNTg2NmI5M2NkNmViYmZjYTU0NWI1ZTM3NTVhZmI5N2ZiODg=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-10-29T16:05:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-29T16:05:08Z"}, "message": "Rollup merge of #76138 - camelid:rc-fully-qualified-syntax, r=steveklabnik\n\nExplain fully qualified syntax for `Rc` and `Arc`\n\nAlso cleaned up some other small things.\n\n@rustbot modify labels: T-doc", "tree": {"sha": "840a2b6c437ea2c279c9084ba23f9dba01c7562f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/840a2b6c437ea2c279c9084ba23f9dba01c7562f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a384a5866b93cd6ebbfca545b5e3755afb97fb88", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfmug1CRBK7hj4Ov3rIwAAdHIIAKfRyRmfalfaFOhjb12OYF6+\n697p6aVtS8jy2F7rE1b53mhin0gwA5oui+1UcU6FS+j7k/bl10tcMjfg1RwfcS0B\n1nYjFzwP/7pyOzqWnAhq6HgND6+tr9iZ12x8Ns53JcW0W5IY7HCORY0tk945lRnR\nwPXbNhOQEIqPBz8EofuePZSW4PXd+ieAAG25O5fImSyUXLiVTKsV33NDlDDbCaiP\nuLK9HCrO/HKfPUmiqAOgn2OuoaVeeAplB2D3DMjnHzKnce+5qSgNEYzPk+DeD+Tc\nr2QhB7YPRdQlHn5+6XoosLZDA4rKH9lL1m++Jco+KdSLBoI48pE5OMwIEj9aMM4=\n=xto2\n-----END PGP SIGNATURE-----\n", "payload": "tree 840a2b6c437ea2c279c9084ba23f9dba01c7562f\nparent 21682109613ddc1bbb92ef03f55f681214fc9203\nparent 4e30e10f25ed39453ef69666a98e9650c7222c52\nauthor Jonas Schievink <jonasschievink@gmail.com> 1603987508 +0100\ncommitter GitHub <noreply@github.com> 1603987508 +0100\n\nRollup merge of #76138 - camelid:rc-fully-qualified-syntax, r=steveklabnik\n\nExplain fully qualified syntax for `Rc` and `Arc`\n\nAlso cleaned up some other small things.\n\n@rustbot modify labels: T-doc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a384a5866b93cd6ebbfca545b5e3755afb97fb88", "html_url": "https://github.com/rust-lang/rust/commit/a384a5866b93cd6ebbfca545b5e3755afb97fb88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a384a5866b93cd6ebbfca545b5e3755afb97fb88/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21682109613ddc1bbb92ef03f55f681214fc9203", "url": "https://api.github.com/repos/rust-lang/rust/commits/21682109613ddc1bbb92ef03f55f681214fc9203", "html_url": "https://github.com/rust-lang/rust/commit/21682109613ddc1bbb92ef03f55f681214fc9203"}, {"sha": "4e30e10f25ed39453ef69666a98e9650c7222c52", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e30e10f25ed39453ef69666a98e9650c7222c52", "html_url": "https://github.com/rust-lang/rust/commit/4e30e10f25ed39453ef69666a98e9650c7222c52"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "6dcd0c6056c3039f9189c41685865ec6a97ea5a2", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a384a5866b93cd6ebbfca545b5e3755afb97fb88/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a384a5866b93cd6ebbfca545b5e3755afb97fb88/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=a384a5866b93cd6ebbfca545b5e3755afb97fb88", "patch": "@@ -11,7 +11,7 @@\n //! is no exception: you cannot generally obtain a mutable reference to\n //! something inside an [`Rc`]. If you need mutability, put a [`Cell`]\n //! or [`RefCell`] inside the [`Rc`]; see [an example of mutability\n-//! inside an Rc][mutability].\n+//! inside an `Rc`][mutability].\n //!\n //! [`Rc`] uses non-atomic reference counting. This means that overhead is very\n //! low, but an [`Rc`] cannot be sent between threads, and consequently [`Rc`]\n@@ -35,15 +35,29 @@\n //! `Rc<T>` automatically dereferences to `T` (via the [`Deref`] trait),\n //! so you can call `T`'s methods on a value of type [`Rc<T>`][`Rc`]. To avoid name\n //! clashes with `T`'s methods, the methods of [`Rc<T>`][`Rc`] itself are associated\n-//! functions, called using function-like syntax:\n+//! functions, called using [fully qualified syntax]:\n //!\n //! ```\n //! use std::rc::Rc;\n-//! let my_rc = Rc::new(());\n //!\n+//! let my_rc = Rc::new(());\n //! Rc::downgrade(&my_rc);\n //! ```\n //!\n+//! `Rc<T>`'s implementations of traits like `Clone` may also be called using\n+//! fully qualified syntax. Some people prefer to use fully qualified syntax,\n+//! while others prefer using method-call syntax.\n+//!\n+//! ```\n+//! use std::rc::Rc;\n+//!\n+//! let rc = Rc::new(());\n+//! // Method-call syntax\n+//! let rc2 = rc.clone();\n+//! // Fully qualified syntax\n+//! let rc3 = Rc::clone(&rc);\n+//! ```\n+//!\n //! [`Weak<T>`][`Weak`] does not auto-dereference to `T`, because the inner value may have\n //! already been dropped.\n //!\n@@ -54,6 +68,7 @@\n //!\n //! ```\n //! use std::rc::Rc;\n+//!\n //! let foo = Rc::new(vec![1.0, 2.0, 3.0]);\n //! // The two syntaxes below are equivalent.\n //! let a = foo.clone();\n@@ -218,7 +233,7 @@\n //! [`Cell`]: core::cell::Cell\n //! [`RefCell`]: core::cell::RefCell\n //! [send]: core::marker::Send\n-//! [arc]: ../../std/sync/struct.Arc.html\n+//! [arc]: crate::sync::Arc\n //! [`Deref`]: core::ops::Deref\n //! [downgrade]: Rc::downgrade\n //! [upgrade]: Weak::upgrade\n@@ -272,10 +287,9 @@ struct RcBox<T: ?Sized> {\n ///\n /// The inherent methods of `Rc` are all associated functions, which means\n /// that you have to call them as e.g., [`Rc::get_mut(&mut value)`][get_mut] instead of\n-/// `value.get_mut()`. This avoids conflicts with methods of the inner\n-/// type `T`.\n+/// `value.get_mut()`. This avoids conflicts with methods of the inner type `T`.\n ///\n-/// [get_mut]: #method.get_mut\n+/// [get_mut]: Rc::get_mut\n #[cfg_attr(not(test), rustc_diagnostic_item = \"Rc\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Rc<T: ?Sized> {"}, {"sha": "5ab930a5208843bfdb68035ea1b9bbb24ea4306a", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a384a5866b93cd6ebbfca545b5e3755afb97fb88/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a384a5866b93cd6ebbfca545b5e3755afb97fb88/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=a384a5866b93cd6ebbfca545b5e3755afb97fb88", "patch": "@@ -129,15 +129,29 @@ macro_rules! acquire {\n /// `Arc<T>` automatically dereferences to `T` (via the [`Deref`][deref] trait),\n /// so you can call `T`'s methods on a value of type `Arc<T>`. To avoid name\n /// clashes with `T`'s methods, the methods of `Arc<T>` itself are associated\n-/// functions, called using function-like syntax:\n+/// functions, called using [fully qualified syntax]:\n ///\n /// ```\n /// use std::sync::Arc;\n-/// let my_arc = Arc::new(());\n ///\n+/// let my_arc = Arc::new(());\n /// Arc::downgrade(&my_arc);\n /// ```\n ///\n+/// `Arc<T>`'s implementations of traits like `Clone` may also be called using\n+/// fully qualified syntax. Some people prefer to use fully qualified syntax,\n+/// while others prefer using method-call syntax.\n+///\n+/// ```\n+/// use std::sync::Arc;\n+///\n+/// let arc = Arc::new(());\n+/// // Method-call syntax\n+/// let arc2 = arc.clone();\n+/// // Fully qualified syntax\n+/// let arc3 = Arc::clone(&arc);\n+/// ```\n+///\n /// [`Weak<T>`][Weak] does not auto-dereference to `T`, because the inner value may have\n /// already been dropped.\n ///\n@@ -154,6 +168,7 @@ macro_rules! acquire {\n /// [`RefCell<T>`]: core::cell::RefCell\n /// [`std::sync`]: ../../std/sync/index.html\n /// [`Arc::clone(&from)`]: Arc::clone\n+/// [fully qualified syntax]: https://doc.rust-lang.org/book/ch19-03-advanced-traits.html#fully-qualified-syntax-for-disambiguation-calling-methods-with-the-same-name\n ///\n /// # Examples\n ///"}]}