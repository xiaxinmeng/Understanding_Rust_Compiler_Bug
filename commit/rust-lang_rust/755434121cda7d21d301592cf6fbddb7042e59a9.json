{"sha": "755434121cda7d21d301592cf6fbddb7042e59a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NTQzNDEyMWNkYTdkMjFkMzAxNTkyY2Y2ZmJkZGI3MDQyZTU5YTk=", "commit": {"author": {"name": "Hrvoje Nik\u0161i\u0107", "email": "hniksic@gmail.com", "date": "2020-03-18T10:30:39Z"}, "committer": {"name": "Hrvoje Niksic", "email": "hniksic@gmail.com", "date": "2020-03-19T13:50:33Z"}, "message": "Minor re-wordings and typo fixes.\n\nCo-Authored-By: Ralf Jung <post@ralfj.de>", "tree": {"sha": "67452f13c9e7588cda5e7907dab0449df1ab28e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67452f13c9e7588cda5e7907dab0449df1ab28e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/755434121cda7d21d301592cf6fbddb7042e59a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/755434121cda7d21d301592cf6fbddb7042e59a9", "html_url": "https://github.com/rust-lang/rust/commit/755434121cda7d21d301592cf6fbddb7042e59a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/755434121cda7d21d301592cf6fbddb7042e59a9/comments", "author": {"login": "hniksic", "id": 1078190, "node_id": "MDQ6VXNlcjEwNzgxOTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1078190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hniksic", "html_url": "https://github.com/hniksic", "followers_url": "https://api.github.com/users/hniksic/followers", "following_url": "https://api.github.com/users/hniksic/following{/other_user}", "gists_url": "https://api.github.com/users/hniksic/gists{/gist_id}", "starred_url": "https://api.github.com/users/hniksic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hniksic/subscriptions", "organizations_url": "https://api.github.com/users/hniksic/orgs", "repos_url": "https://api.github.com/users/hniksic/repos", "events_url": "https://api.github.com/users/hniksic/events{/privacy}", "received_events_url": "https://api.github.com/users/hniksic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hniksic", "id": 1078190, "node_id": "MDQ6VXNlcjEwNzgxOTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1078190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hniksic", "html_url": "https://github.com/hniksic", "followers_url": "https://api.github.com/users/hniksic/followers", "following_url": "https://api.github.com/users/hniksic/following{/other_user}", "gists_url": "https://api.github.com/users/hniksic/gists{/gist_id}", "starred_url": "https://api.github.com/users/hniksic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hniksic/subscriptions", "organizations_url": "https://api.github.com/users/hniksic/orgs", "repos_url": "https://api.github.com/users/hniksic/repos", "events_url": "https://api.github.com/users/hniksic/events{/privacy}", "received_events_url": "https://api.github.com/users/hniksic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a08b0e3006aeb997e42d5df135eea63b071fa75", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a08b0e3006aeb997e42d5df135eea63b071fa75", "html_url": "https://github.com/rust-lang/rust/commit/2a08b0e3006aeb997e42d5df135eea63b071fa75"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "253847612adadeeeca9dcade25e7e1dcfdba7987", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/755434121cda7d21d301592cf6fbddb7042e59a9/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755434121cda7d21d301592cf6fbddb7042e59a9/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=755434121cda7d21d301592cf6fbddb7042e59a9", "patch": "@@ -70,14 +70,14 @@ pub use crate::intrinsics::transmute;\n /// mem::forget(file);\n /// ```\n ///\n-/// This is useful when the ownership of the underlying was previously\n+/// This is useful when the ownership of the underlying resource was previously\n /// transferred to code outside of Rust, for example by transmitting the raw\n /// file descriptor to C code.\n ///\n /// # Relationship with `ManuallyDrop`\n ///\n-/// Using `mem::forget` to transmit memory ownership is error-prone and is best\n-/// replaced with `ManuallyDrop`. Consider, for example, this code:\n+/// While `mem::forget` can also be used to transfer *memory* ownership, doing so is error-prone.\n+/// [`ManuallyDrop`] should be used instead. Consider, for example, this code:\n ///\n /// ```\n /// use std::mem;\n@@ -97,9 +97,9 @@ pub use crate::intrinsics::transmute;\n ///   `mem::forget()`, a panic within it would cause a double free because the same memory\n ///   is handled by both `v` and `s`.\n /// * After calling `v.as_mut_ptr()` and transmitting the ownership of the data to `s`,\n-///   the `v` value is invalid. Although moving a value to `mem::forget` (which won't\n-///   inspect it) seems safe, some types have strict requirements on their values that\n-///   make them invalid when dangling or no longer owned.  Using invalid values in any\n+///   the `v` value is invalid. Even when a value is just moved to `mem::forget` (which won't\n+///   inspect it), some types have strict requirements on their values that\n+///   make them invalid when dangling or no longer owned. Using invalid values in any\n ///   way, including passing them to or returning them from functions, constitutes\n ///   undefined behavior and may break the assumptions made by the compiler.\n ///\n@@ -123,11 +123,11 @@ pub use crate::intrinsics::transmute;\n ///\n /// `ManuallyDrop` robustly prevents double-free because we disable `v`'s destructor\n /// before doing anything else. `mem::forget()` doesn't allow this because it consumes its\n-/// argument, forcing us to call it only after extracting anything we need from `v`.  Even\n+/// argument, forcing us to call it only after extracting anything we need from `v`. Even\n /// if a panic were introduced between construction of `ManuallyDrop` and building the\n /// string (which cannot happen in the code as shown), it would result in a leak and not a\n /// double free. In other words, `ManuallyDrop` errs on the side of leaking instead of\n-/// erring on the side of dropping.\n+/// erring on the side of (double-)dropping.\n ///\n /// Also, `ManuallyDrop` prevents us from having to \"touch\" `v` after transferring the\n /// ownership to `s` - the final step of interacting with `v` to dispoe of it without"}]}