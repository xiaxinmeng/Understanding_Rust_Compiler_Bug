{"sha": "2bcc15188854ff184c85426b5aa60535ed1bd8a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiY2MxNTE4ODg1NGZmMTg0Yzg1NDI2YjVhYTYwNTM1ZWQxYmQ4YTg=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-11T18:53:50Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-11T19:19:11Z"}, "message": "new lint for Option.unwrap() and Result.unwrap()\n\nThe latter is set to Allow by default (fixes #24)", "tree": {"sha": "1777ceaeae24540257b8b585556421fbba260d06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1777ceaeae24540257b8b585556421fbba260d06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bcc15188854ff184c85426b5aa60535ed1bd8a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bcc15188854ff184c85426b5aa60535ed1bd8a8", "html_url": "https://github.com/rust-lang/rust/commit/2bcc15188854ff184c85426b5aa60535ed1bd8a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bcc15188854ff184c85426b5aa60535ed1bd8a8/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf96042c65b4c232d0a73f6a8514e59e0358719b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf96042c65b4c232d0a73f6a8514e59e0358719b", "html_url": "https://github.com/rust-lang/rust/commit/cf96042c65b4c232d0a73f6a8514e59e0358719b"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "4009aa1cf8d764626a817cefa50dd4e68daafa2f", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bcc15188854ff184c85426b5aa60535ed1bd8a8/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bcc15188854ff184c85426b5aa60535ed1bd8a8/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2bcc15188854ff184c85426b5aa60535ed1bd8a8", "patch": "@@ -29,6 +29,7 @@ pub mod collapsible_if;\n pub mod unicode;\n pub mod utils;\n pub mod strings;\n+pub mod methods;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n@@ -55,6 +56,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box unicode::Unicode as LintPassObject);\n     reg.register_lint_pass(box strings::StringAdd as LintPassObject);\n     reg.register_lint_pass(box misc::NeedlessReturn as LintPassObject);\n+    reg.register_lint_pass(box methods::MethodsPass as LintPassObject);\n \n     reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n                                            misc::SINGLE_MATCH, misc::STR_TO_STRING,\n@@ -77,5 +79,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n                                            strings::STRING_ADD_ASSIGN,\n                                            misc::NEEDLESS_RETURN,\n                                            misc::MODULO_ONE,\n+                                           methods::OPTION_UNWRAP_USED,\n+                                           methods::RESULT_UNWRAP_USED,\n                                            ]);\n }"}, {"sha": "3d9aa8c6ffc1c7ccf10c0b43a16f3d18df5749a8", "filename": "src/methods.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2bcc15188854ff184c85426b5aa60535ed1bd8a8/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bcc15188854ff184c85426b5aa60535ed1bd8a8/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=2bcc15188854ff184c85426b5aa60535ed1bd8a8", "patch": "@@ -0,0 +1,39 @@\n+use syntax::ast::*;\n+use rustc::lint::{Context, LintPass, LintArray};\n+use rustc::middle::ty;\n+\n+use utils::{span_lint, match_def_path, walk_ptrs_ty};\n+\n+#[derive(Copy,Clone)]\n+pub struct MethodsPass;\n+\n+declare_lint!(pub OPTION_UNWRAP_USED, Warn,\n+              \"Warn on using unwrap() on an Option value\");\n+declare_lint!(pub RESULT_UNWRAP_USED, Allow,\n+              \"Warn on using unwrap() on a Result value\");\n+\n+impl LintPass for MethodsPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(OPTION_UNWRAP_USED, RESULT_UNWRAP_USED)\n+    }\n+\n+    fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n+        if let ExprMethodCall(ref ident, _, ref args) = expr.node {\n+            if ident.node.name == \"unwrap\" {\n+                if let ty::TyEnum(did, _) = walk_ptrs_ty(cx.tcx.expr_ty(&*args[0])).sty {\n+                    if match_def_path(cx, did.did, &[\"core\", \"option\", \"Option\"]) {\n+                        span_lint(cx, OPTION_UNWRAP_USED, expr.span,\n+                                  \"used unwrap() on an Option value. If you don't want \\\n+                                   to handle the None case gracefully, consider using\n+                                   expect() to provide a better panic message.\");\n+                    }\n+                    else if match_def_path(cx, did.did, &[\"core\", \"result\", \"Result\"]) {\n+                        span_lint(cx, RESULT_UNWRAP_USED, expr.span,\n+                                  \"used unwrap() on a Result value. Graceful handling \\\n+                                   of Err values is preferred.\");\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "e989dffe5a774c8087e6592e3251b2597d12b260", "filename": "tests/compile-fail/methods.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2bcc15188854ff184c85426b5aa60535ed1bd8a8/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bcc15188854ff184c85426b5aa60535ed1bd8a8/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=2bcc15188854ff184c85426b5aa60535ed1bd8a8", "patch": "@@ -0,0 +1,11 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(option_unwrap_used, result_unwrap_used)]\n+fn main() {\n+    let opt = Some(0);\n+    let _ = opt.unwrap();  //~ERROR\n+\n+    let res: Result<i32, ()> = Ok(0);\n+    let _ = res.unwrap();  //~ERROR\n+}"}]}