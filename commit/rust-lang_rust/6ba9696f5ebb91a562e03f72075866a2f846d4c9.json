{"sha": "6ba9696f5ebb91a562e03f72075866a2f846d4c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYTk2OTZmNWViYjkxYTU2MmUwM2Y3MjA3NTg2NmEyZjg0NmQ0Yzk=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-08T14:36:34Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-18T13:41:34Z"}, "message": "Add documentation for asm!", "tree": {"sha": "a19e66cdd1a71d7b2cda0b109e2d7cf1b439534a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a19e66cdd1a71d7b2cda0b109e2d7cf1b439534a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ba9696f5ebb91a562e03f72075866a2f846d4c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ba9696f5ebb91a562e03f72075866a2f846d4c9", "html_url": "https://github.com/rust-lang/rust/commit/6ba9696f5ebb91a562e03f72075866a2f846d4c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ba9696f5ebb91a562e03f72075866a2f846d4c9/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aa9aaada5f7ebd0236bf7ebdbbce6ec8b684239", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aa9aaada5f7ebd0236bf7ebdbbce6ec8b684239", "html_url": "https://github.com/rust-lang/rust/commit/2aa9aaada5f7ebd0236bf7ebdbbce6ec8b684239"}], "stats": {"total": 713, "additions": 695, "deletions": 18}, "files": [{"sha": "bc55cd4a5bd7369f13b1d61d3c29fdecf6d5fbe0", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "added", "additions": 678, "deletions": 0, "changes": 678, "blob_url": "https://github.com/rust-lang/rust/blob/6ba9696f5ebb91a562e03f72075866a2f846d4c9/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/6ba9696f5ebb91a562e03f72075866a2f846d4c9/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=6ba9696f5ebb91a562e03f72075866a2f846d4c9", "patch": "@@ -0,0 +1,678 @@\n+# `asm`\n+\n+The tracking issue for this feature is: [#72016]\n+\n+[#72016]: https://github.com/rust-lang/rust/issues/72016\n+\n+------------------------\n+\n+For extremely low-level manipulations and performance reasons, one\n+might wish to control the CPU directly. Rust supports using inline\n+assembly to do this via the `asm!` macro.\n+\n+# Guide-level explanation\n+[guide-level-explanation]: #guide-level-explanation\n+\n+Rust provides support for inline assembly via the `asm!` macro.\n+It can be used to embed handwritten assembly in the assembly output generated by the compiler.\n+Generally this should not be necessary, but might be where the required performance or timing\n+cannot be otherwise achieved. Accessing low level hardware primitives, e.g. in kernel code, may also demand this functionality.\n+\n+> **Note**: the examples here are given in x86/x86-64 assembly, but ARM, AArch64 and RISC-V are also supported.\n+\n+## Basic usage\n+\n+Let us start with the simplest possible example:\n+\n+```rust\n+unsafe {\n+    asm!(\"nop\");\n+}\n+```\n+\n+This will insert a NOP (no operation) instruction into the assembly generated by the compiler.\n+Note that all `asm!` invocations have to be inside an `unsafe` block, as they could insert\n+arbitrary instructions and break various invariants. The instructions to be inserted are listed\n+in the first argument of the `asm!` macro as a string literal.\n+\n+## Inputs and outputs\n+\n+Now inserting an instruction that does nothing is rather boring. Let us do something that\n+actually acts on data:\n+\n+```rust\n+let x: u64;\n+unsafe {\n+    asm!(\"mov {}, 5\", out(reg) x);\n+}\n+assert_eq!(x, 5);\n+```\n+\n+This will write the value `5` into the `u64` variable `x`.\n+You can see that the string literal we use to specify instructions is actually a template string.\n+It is governed by the same rules as Rust [format strings][format-syntax].\n+The arguments that are inserted into the template however look a bit different then you may\n+be familiar with. First we need to specify if the variable is an input or an output of the\n+inline assembly. In this case it is an output. We declared this by writing `out`.\n+We also need to specify in what kind of register the assembly expects the variable.\n+In this case we put it in an arbitrary general purpose register by specifying `reg`.\n+The compiler will choose an appropriate register to insert into\n+the template and will read the variable from there after the inline assembly finishes executing.\n+\n+Let us see another example that also uses an input:\n+\n+```rust\n+let i: u64 = 3;\n+let o: u64;\n+unsafe {\n+    asm!(\"\n+        mov {0}, {1}\n+        add {0}, {number}\n+    \", out(reg) o, in(reg) i, number = const 5);\n+}\n+assert_eq!(o, 8);\n+```\n+\n+This will add `5` to the input in variable `i` and write the result to variable `o`.\n+The particular way this assembly does this is first copying the value from `i` to the output,\n+and then adding `5` to it.\n+\n+The example shows a few things:\n+\n+First we can see that inputs are declared by writing `in` instead of `out`.\n+\n+Second one of our operands has a type we haven't seen yet, `const`.\n+This tells the compiler to expand this argument to value directly inside the assembly template.\n+This is only possible for constants and literals.\n+\n+Third we can see that we can specify an argument number, or name as in any format string.\n+For inline assembly templates this is particularly useful as arguments are often used more than once.\n+For more complex inline assembly using this facility is generally recommended, as it improves\n+readability, and allows reordering instructions without changing the argument order.\n+\n+We can further refine the above example to avoid the `mov` instruction:\n+\n+```rust\n+let mut x: u64 = 3;\n+unsafe {\n+    asm!(\"add {0}, {number}\", inout(reg) x, number = const 5);\n+}\n+assert_eq!(x, 8);\n+```\n+\n+We can see that `inout` is used to specify an argument that is both input and output.\n+This is different from specifying an input and output separately in that it is guaranteed to assign both to the same register.\n+\n+It is also possible to specify different variables for the input and output parts of an `inout` operand:\n+\n+```rust\n+let x: u64 = 3;\n+let y: u64;\n+unsafe {\n+    asm!(\"add {0}, {number}\", inout(reg) x => y, number = const 5);\n+}\n+assert_eq!(y, 8);\n+```\n+\n+## Late output operands\n+\n+The Rust compiler is conservative with its allocation of operands. It is assumed that an `out`\n+can be written at any time, and can therefore not share its location with any other argument.\n+However, to guarantee optimal performance it is important to use as few registers as possible,\n+so they won't have to be saved and reloaded around the inline assembly block.\n+To achieve this Rust provides a `lateout` specifier. This can be used on any output that is\n+written only after all inputs have been consumed.\n+There is also a `inlateout` variant of this specifier.\n+\n+Here is an example where `inlateout` *cannot* be used:\n+\n+```rust\n+let mut a: u64 = 4;\n+let b: u64 = 4;\n+let c: u64 = 4;\n+unsafe {\n+    asm!(\"\n+        add {0}, {1}\n+        add {0}, {2}\n+    \", inout(reg) a, in(reg) b, in(reg) c);\n+}\n+assert_eq!(a, 12);\n+```\n+\n+Here the compiler is free to allocate the same register for inputs `b` and `c` since it knows they have the same value. However it must allocate a separate register for `a` since it uses `inout` and not `inlateout`. If `inlateout` was used, then `a` and `c` could be allocated to the same register, in which case the first instruction to overwrite the value of `c` and cause the assembly code to produce the wrong result.\n+\n+However the following example can use `inlateout` since the output is only modified after all input registers have been read:\n+\n+```rust\n+let mut a: u64 = 4;\n+let b: u64 = 4;\n+unsafe {\n+    asm!(\"add {0}, {1}\", inlateout(reg) a, in(reg) b);\n+}\n+assert_eq!(a, 8);\n+```\n+\n+As you can see, this assembly fragment will still work correctly if `a` and `b` are assigned to the same register.\n+\n+## Explicit register operands\n+\n+Some instructions require that the operands be in a specific register.\n+Therefore, Rust inline assembly provides some more specific constraint specifiers.\n+While `reg` is generally available on any architecture, these are highly architecture specific. E.g. for x86 the general purpose registers `eax`, `ebx`, `ecx`, `edx`, `ebp`, `esi`, and `edi`\n+among others can be addressed by their name.\n+\n+```rust\n+unsafe {\n+    asm!(\"out 0x64, rax\", in(\"rax\") cmd);\n+}\n+```\n+\n+In this example we call the `out` instruction to output the content of the `cmd` variable\n+to port `0x64`. Since the `out` instruction only accepts `rax` (and its sub registers) as operand\n+we had to use the `rax` constraint specifier.\n+\n+Note that unlike other operand types, explicit register operands cannot be used in the template string: you can't use `{}` and should write the register name directly instead. Also, they must appear at the end of the operand list after all other operand types.\n+\n+Consider this example which uses the x86 `mul` instruction:\n+\n+```rust\n+fn mul(a: u64, b: u64) -> u128 {\n+    let lo: u64;\n+    let hi: u64;\n+\n+    unsafe {\n+        asm!(\n+            // The x86 mul instruction takes rax as an implicit input and writes\n+            // the 128-bit result of the multiplication to rax:rdx.\n+            \"mul {}\",\n+            in(reg) a,\n+            inlateout(\"rax\") b => lo,\n+            lateout(\"rdx\") hi\n+        );\n+    }\n+\n+    hi as u128 << 64 + lo as u128\n+}\n+```\n+\n+This uses the `mul` instruction to multiply two 64-bit inputs with a 128-bit result.\n+The only explicit operand is a register, that we fill from the variable `a`.\n+The second operand is implicit, and must be the `rax` register, which we fill from the variable `b`.\n+The lower 64 bits of the result are stored in `rax` from which we fill the variable `lo`.\n+The higher 64 bits are stored in `rdx` from which we fill the variable `hi`.\n+\n+## Clobbered registers\n+\n+In many cases inline assembly will modify state that is not needed as an output.\n+Usually this is either because we have to use a scratch register in the assembly,\n+or instructions modify state that we don't need to further examine.\n+This state is generally referred to as being \"clobbered\".\n+We need to tell the compiler about this since it may need to save and restore this state\n+around the inline assembly block.\n+\n+```rust\n+let ebx: u64;\n+let ecx: u64;\n+\n+unsafe {\n+    asm!(\n+        \"cpuid\",\n+        // EAX 4 selects the \"Deterministic Cache Parameters\" CPUID leaf\n+        inout(\"eax\") 4 => _,\n+        // ECX 0 selects the L0 cache information.\n+        inout(\"ecx\") 0 => ecx,\n+        lateout(\"ebx\") ebx,\n+        lateout(\"edx\") _\n+    );\n+}\n+\n+println!(\n+    \"L1 Cache: {}\",\n+    ((ebx >> 22) + 1) * (((ebx >> 12) & 0x3ff) + 1) * ((ebx & 0xfff) + 1) * (ecx + 1)\n+);\n+```\n+\n+In the example above we use the `cpuid` instruction to get the L1 cache size.\n+This instruction writes to `eax`, `ebx`, `ecx`, and `edx`, but for the cache size we only care about the contents of `ebx` and `ecx`.\n+\n+However we still need to tell the compiler that `eax` and `edx` have been modified so that it can save any values that were in these registers before the asm. This is done by declaring these as outputs but with `_` instead of a variable name, which indicates that the output value is to be discarded.\n+\n+This can also be used with a general register class (e.g. `reg`) to obtain a scratch register for use inside the asm code:\n+\n+```rust\n+// Multiply x by 6 using shifts and adds\n+let mut x: u64 = 4;\n+unsafe {\n+    asm!(\"\n+        mov {tmp}, {x}\n+        shl {tmp}, 1\n+        shl {x}, 2\n+        add {x}, {tmp}\n+    \", x = inout(reg) x, tmp = out(reg) _);\n+}\n+assert_eq!(x, 4 * 6);\n+```\n+\n+## Symbol operands\n+\n+A special operand type, `sym`, allows you to use the symbol name of a `fn` or `static` in inline assembly code.\n+This allows you to call a function or access a global variable without needing to keep its address in a register.\n+\n+```rust\n+extern \"C\" fn foo(arg: i32) {\n+    println!(\"arg = {}\", arg);\n+}\n+\n+fn call_foo(arg: i32) {\n+    unsafe {\n+        asm!(\n+            \"call {}\"\n+            sym foo,\n+            // 1st argument in rdi, which is caller-saved\n+            inout(\"rdi\") arg => _,\n+            // All caller-saved registers must be marked as clobberred\n+            out(\"rax\") _, out(\"rcx\") _, out(\"rdx\") _, out(\"rsi\") _,\n+            out(\"r8\") _, out(\"r9\") _, out(\"r10\") _, out(\"r11\") _,\n+            out(\"xmm0\") _, out(\"xmm1\") _, out(\"xmm2\") _, out(\"xmm3\") _,\n+            out(\"xmm4\") _, out(\"xmm5\") _, out(\"xmm6\") _, out(\"xmm7\") _,\n+            out(\"xmm8\") _, out(\"xmm9\") _, out(\"xmm10\") _, out(\"xmm11\") _,\n+            out(\"xmm12\") _, out(\"xmm13\") _, out(\"xmm14\") _, out(\"xmm15\") _,\n+        )\n+    }\n+}\n+```\n+\n+Note that the `fn` or `static` item does not need to be public or `#[no_mangle]`:\n+the compiler will automatically insert the appropriate mangled symbol name into the assembly code.\n+\n+## Register template modifiers\n+\n+In some cases, fine control is needed over the way a register name is formatted when inserted into the template string. This is needed when an architecture's assembly language has several names for the same register, each typically being a \"view\" over a subset of the register (e.g. the low 32 bits of a 64-bit register).\n+\n+By default the compiler will always choose the name that refers to the full register size (e.g. `rax` on x86-64, `eax` on x86, etc).\n+\n+This default can be overriden by using modifiers on the template string operands, just like you would with format strings:\n+\n+```rust\n+let mut x: u16 = 0xab;\n+\n+unsafe {\n+    asm!(\"mov {0:h}, {0:b}\", inout(reg_abcd) x);\n+}\n+\n+assert_eq!(x, 0xabab);\n+```\n+\n+In this example, we use the `reg_abcd` register class to restrict the register allocator to the 4 legacy x86 register (`ax`, `bx`, `cx`, `dx`) of which the first two bytes can be addressed independently.\n+\n+Let us assume that the register allocator has chosen to allocate `x` in the `ax` register.\n+The `h` modifier will emit the register name for the high byte of that register and the `b` modifier will emit the register name for the low byte. The asm code will therefore be expanded as `mov ah, al` which copies the low byte of the value into the high byte.\n+\n+If you use a smaller data type (e.g. `u16`) with an operand and forget the use template modifiers, the compiler will emit a warning and suggest the correct modifier to use.\n+\n+## Options\n+\n+By default, an inline assembly block is treated the same way as an external FFI function call with a custom calling convention: it may read/write memory, have observable side effects, etc. However in many cases, it is desirable to give the compiler more information about what the assembly code is actually doing so that it can optimize better.\n+\n+Let's take our previous example of an `add` instruction:\n+\n+```rust\n+let mut a: u64 = 4;\n+let b: u64 = 4;\n+unsafe {\n+    asm!(\n+        \"add {0}, {1}\",\n+        inlateout(reg) a, in(reg) b,\n+        options(pure, nomem, nostack)\n+    );\n+}\n+assert_eq!(a, 8);\n+```\n+\n+Options can be provided as an optional final argument to the `asm!` macro. We specified three options here:\n+- `pure` means that the asm code has no observable side effects and that its output depends only on its inputs. This allows the compiler optimizer to call the inline asm fewer times or even eliminate it entirely.\n+- `nomem` means that the asm code does not read or write to memory. By default the compiler will assume that inline assembly can read or write any memory address that is accessible to it (e.g. through a pointer passed as an operand, or a global).\n+- `nostack` means that the asm code does not push any data onto the stack. This allows the compiler to use optimizations such as the stack red zone on x86-64 to avoid stack pointer adjustments.\n+\n+These allow the compiler to better optimize code using `asm!`, for example by eliminating pure `asm!` blocks whose outputs are not needed.\n+\n+See the reference for the full list of available options and their effects.\n+\n+# Reference-level explanation\n+[reference-level-explanation]: #reference-level-explanation\n+\n+Inline assembler is implemented as an unsafe macro `asm!()`.\n+The first argument to this macro is a template string literal used to build the final assembly.\n+The following arguments specify input and output operands.\n+When required, options are specified as the final argument.\n+\n+The following ABNF specifies the general syntax:\n+\n+```\n+dir_spec := \"in\" / \"out\" / \"lateout\" / \"inout\" / \"inlateout\"\n+reg_spec := <register class> / \"<explicit register>\"\n+operand_expr := expr / \"_\" / expr \"=>\" expr / expr \"=>\" \"_\"\n+reg_operand := dir_spec \"(\" reg_spec \")\" operand_expr\n+operand := reg_operand / \"const\" const_expr / \"sym\" path\n+option := \"pure\" / \"nomem\" / \"readonly\" / \"preserves_flags\" / \"noreturn\" / \"att_syntax\"\n+options := \"options(\" option *[\",\" option] [\",\"] \")\"\n+asm := \"asm!(\" format_string *(\",\" [ident \"=\"] operand) [\",\" options] [\",\"] \")\"\n+```\n+\n+The macro will initially be supported only on ARM, AArch64, x86, x86-64 and RISC-V targets. Support for more targets may be added in the future. The compiler will emit an error if `asm!` is used on an unsupported target.\n+\n+[format-syntax]: https://doc.rust-lang.org/std/fmt/#syntax\n+\n+## Template string\n+\n+The assembler template uses the same syntax as [format strings][format-syntax] (i.e. placeholders are specified by curly braces). The corresponding arguments are accessed in order, by index, or by name. However, implicit named arguments (introduced by [RFC #2795][rfc-2795]) are not supported.\n+\n+As with format strings, named arguments must appear after positional arguments. Explicit register operands must appear at the end of the operand list, after any named arguments if any. Explicit register operands cannot be used by placeholders in the template string. All other operands must appear at least once in the template string, otherwise a compiler error is generated.\n+\n+The exact assembly code syntax is target-specific and opaque to the compiler except for the way operands are substituted into the template string to form the code passed to the assembler.\n+\n+The 4 targets specified in this RFC (x86, ARM, AArch64, RISC-V) all use the assembly code syntax of the GNU assembler (GAS). On x86, the `.intel_syntax noprefix` mode of GAS is used by default. On ARM, the `.syntax unified` mode is used. These targets impose an additional restriction on the assembly code: any assembler state (e.g. the current section which can be changed with `.section`) must be restored to its original value at the end of the asm string. Assembly code that does not conform to the GAS syntax will result in assembler-specific behavior.\n+\n+[rfc-2795]: https://github.com/rust-lang/rfcs/pull/2795\n+\n+## Operand type\n+\n+Several types of operands are supported:\n+\n+* `in(<reg>) <expr>`\n+  - `<reg>` can refer to a register class or an explicit register. The allocated register name is substituted into the asm template string.\n+  - The allocated register will contain the value of `<expr>` at the start of the asm code.\n+  - The allocated register must contain the same value at the end of the asm code (except if a `lateout` is allocated to the same register).\n+* `out(<reg>) <expr>`\n+  - `<reg>` can refer to a register class or an explicit register. The allocated register name is substituted into the asm template string.\n+  - The allocated register will contain an undefined value at the start of the asm code.\n+  - `<expr>` must be a (possibly uninitialized) place expression, to which the contents of the allocated register is written to at the end of the asm code.\n+  - An underscore (`_`) may be specified instead of an expression, which will cause the contents of the register to be discarded at the end of the asm code (effectively acting as a clobber).\n+* `lateout(<reg>) <expr>`\n+  - Identical to `out` except that the register allocator can reuse a register allocated to an `in`.\n+  - You should only write to the register after all inputs are read, otherwise you may clobber an input.\n+* `inout(<reg>) <expr>`\n+  - `<reg>` can refer to a register class or an explicit register. The allocated register name is substituted into the asm template string.\n+  - The allocated register will contain the value of `<expr>` at the start of the asm code.\n+  - `<expr>` must be a mutable initialized place expression, to which the contents of the allocated register is written to at the end of the asm code.\n+* `inout(<reg>) <in expr> => <out expr>`\n+  - Same as `inout` except that the initial value of the register is taken from the value of `<in expr>`.\n+  - `<out expr>` must be a (possibly uninitialized) place expression, to which the contents of the allocated register is written to at the end of the asm code.\n+  - An underscore (`_`) may be specified instead of an expression for `<out expr>`, which will cause the contents of the register to be discarded at the end of the asm code (effectively acting as a clobber).\n+  - `<in expr>` and `<out expr>` may have different types.\n+* `inlateout(<reg>) <expr>` / `inlateout(<reg>) <in expr> => <out expr>`\n+  - Identical to `inout` except that the register allocator can reuse a register allocated to an `in` (this can happen if the compiler knows the `in` has the same initial value as the `inlateout`).\n+  - You should only write to the register after all inputs are read, otherwise you may clobber an input.\n+* `const <expr>`\n+  - `<expr>` must be an integer or floating-point constant expression.\n+  - The value of the expression is formatted as a string and substituted directly into the asm template string.\n+* `sym <path>`\n+  - `<path>` must refer to a `fn` or `static`.\n+  - A mangled symbol name referring to the item is substituted into the asm template string.\n+  - The substituted string does not include any modifiers (e.g. GOT, PLT, relocations, etc).\n+  - `<path>` is allowed to point to a `#[thread_local]` static, in which case the asm code can combine the symbol with relocations (e.g. `@plt`, `@TPOFF`) to read from thread-local data.\n+\n+## Register operands\n+\n+Input and output operands can be specified either as an explicit register or as a register class from which the register allocator can select a register. Explicit registers are specified as string literals (e.g. `\"eax\"`) while register classes are specified as identifiers (e.g. `reg`). Using string literals for register names enables support for architectures that use special characters in register names, such as MIPS (`$0`, `$1`, etc).\n+\n+Note that explicit registers treat register aliases (e.g. `r14` vs `lr` on ARM) and smaller views of a register (e.g. `eax` vs `rax`) as equivalent to the base register. It is a compile-time error to use the same explicit register for two input operands or two output operands. Additionally, it is also a compile-time error to use overlapping registers (e.g. ARM VFP) in input operands or in output operands.\n+\n+Only the following types are allowed as operands for inline assembly:\n+- Integers (signed and unsigned)\n+- Floating-point numbers\n+- Pointers (thin only)\n+- Function pointers\n+- SIMD vectors (structs defined with `#[repr(simd)]` and which implement `Copy`)\n+\n+Here is the list of currently supported register classes:\n+\n+| Architecture | Register class | Registers | LLVM constraint code |\n+| ------------ | -------------- | --------- | -------------------- |\n+| x86 | `reg` | `ax`, `bx`, `cx`, `dx`, `si`, `di`, `r[8-15]` (x86-64 only) | `r` |\n+| x86 | `reg_abcd` | `ax`, `bx`, `cx`, `dx` | `Q` |\n+| x86-32 | `reg_byte` | `al`, `bl`, `cl`, `dl`, `ah`, `bh`, `ch`, `dh` | `q` |\n+| x86-64 | `reg_byte` | `al`, `bl`, `cl`, `dl`, `sil`, `dil`, `r[8-15]b`, `ah`\\*, `bh`\\*, `ch`\\*, `dh`\\* | `q` |\n+| x86 | `xmm_reg` | `xmm[0-7]` (x86) `xmm[0-15]` (x86-64) | `x` |\n+| x86 | `ymm_reg` | `ymm[0-7]` (x86) `ymm[0-15]` (x86-64) | `x` |\n+| x86 | `zmm_reg` | `zmm[0-7]` (x86) `zmm[0-31]` (x86-64) | `v` |\n+| x86 | `kreg` | `k[1-7]` | `Yk` |\n+| AArch64 | `reg` | `x[0-28]`, `x30` | `r` |\n+| AArch64 | `vreg` | `v[0-31]` | `w` |\n+| AArch64 | `vreg_low16` | `v[0-15]` | `x` |\n+| ARM | `reg` | `r[0-r10]`, `r12`, `r14` | `r` |\n+| ARM (Thumb) | `reg_thumb` | `r[0-r7]` | `l` |\n+| ARM (ARM) | `reg_thumb` | `r[0-r10]`, `r12`, `r14` | `l` |\n+| ARM | `sreg` | `s[0-31]` | `t` |\n+| ARM | `sreg_low16` | `s[0-15]` | `x` |\n+| ARM | `dreg` | `d[0-31]` | `w` |\n+| ARM | `dreg_low16` | `d[0-15]` | `t` |\n+| ARM | `dreg_low8` | `d[0-8]` | `x` |\n+| ARM | `qreg` | `q[0-15]` | `w` |\n+| ARM | `qreg_low8` | `q[0-7]` | `t` |\n+| ARM | `qreg_low4` | `q[0-3]` | `x` |\n+| RISC-V | `reg` | `x1`, `x[5-7]`, `x[9-15]`, `x[16-31]` (non-RV32E) | `r` |\n+| RISC-V | `freg` | `f[0-31]` | `f` |\n+\n+> **Note**: On x86 we treat `reg_byte` differently from `reg` because the compiler can allocate `al` and `ah` separately whereas `reg` reserves the whole register.\n+>\n+> Note #2: On x86-64 the high byte registers (e.g. `ah`) are only available when used as an explicit register. Specifying the `reg_byte` register class for an operand will always allocate a low byte register.\n+\n+Additional register classes may be added in the future based on demand (e.g. MMX, x87, etc).\n+\n+Each register class has constraints on which value types they can be used with. This is necessary because the way a value is loaded into a register depends on its type. For example, on big-endian systems, loading a `i32x4` and a `i8x16` into a SIMD register may result in different register contents even if the byte-wise memory representation of both values is identical. The availability of supported types for a particular register class may depend on what target features are currently enabled.\n+\n+| Architecture | Register class | Target feature | Allowed types |\n+| ------------ | -------------- | -------------- | ------------- |\n+| x86-32 | `reg` | None | `i16`, `i32`, `f32` |\n+| x86-64 | `reg` | None | `i16`, `i32`, `f32`, `i64`, `f64` |\n+| x86 | `reg_byte` | None | `i8` |\n+| x86 | `xmm_reg` | `sse` | `i32`, `f32`, `i64`, `f64`, <br> `i8x16`, `i16x8`, `i32x4`, `i64x2`, `f32x4`, `f64x2` |\n+| x86 | `ymm_reg` | `avx` | `i32`, `f32`, `i64`, `f64`, <br> `i8x16`, `i16x8`, `i32x4`, `i64x2`, `f32x4`, `f64x2` <br> `i8x32`, `i16x16`, `i32x8`, `i64x4`, `f32x8`, `f64x4` |\n+| x86 | `zmm_reg` | `avx512f` | `i32`, `f32`, `i64`, `f64`, <br> `i8x16`, `i16x8`, `i32x4`, `i64x2`, `f32x4`, `f64x2` <br> `i8x32`, `i16x16`, `i32x8`, `i64x4`, `f32x8`, `f64x4` <br> `i8x64`, `i16x32`, `i32x16`, `i64x8`, `f32x16`, `f64x8` |\n+| x86 | `kreg` | `axv512f` | `i8`, `i16` |\n+| x86 | `kreg` | `axv512bw` | `i32`, `i64` |\n+| AArch64 | `reg` | None | `i8`, `i16`, `i32`, `f32`, `i64`, `f64` |\n+| AArch64 | `vreg` | `fp` | `i8`, `i16`, `i32`, `f32`, `i64`, `f64`, <br> `i8x8`, `i16x4`, `i32x2`, `i64x1`, `f32x2`, `f64x1`, <br> `i8x16`, `i16x8`, `i32x4`, `i64x2`, `f32x4`, `f64x2` |\n+| ARM | `reg` | None | `i8`, `i16`, `i32`, `f32` |\n+| ARM | `sreg` | `vfp2` | `i32`, `f32` |\n+| ARM | `dreg` | `vfp2` | `i64`, `f64`, `i8x8`, `i16x4`, `i32x2`, `i64x1`, `f32x2` |\n+| ARM | `qreg` | `neon` | `i8x16`, `i16x8`, `i32x4`, `i64x2`, `f32x4` |\n+| RISC-V32 | `reg` | None | `i8`, `i16`, `i32`, `f32` |\n+| RISC-V64 | `reg` | None | `i8`, `i16`, `i32`, `f32`, `i64`, `f64` |\n+| RISC-V | `freg` | `f` | `f32` |\n+| RISC-V | `freg` | `d` | `f64` |\n+\n+> **Note**: For the purposes of the above table pointers, function pointers and `isize`/`usize` are treated as the equivalent integer type (`i16`/`i32`/`i64` depending on the target).\n+\n+If a value is of a smaller size than the register it is allocated in then the upper bits of that register will have an undefined value for inputs and will be ignored for outputs. The only exception is the `freg` register class on RISC-V where `f32` values are NaN-boxed in a `f64` as required by the RISC-V architecture.\n+\n+When separate input and output expressions are specified for an `inout` operand, both expressions must have the same type. The only exception is if both operands are pointers or integers, in which case they are only required to have the same size. This restriction exists because the register allocators in LLVM and GCC sometimes cannot handle tied operands with different types.\n+\n+## Register names\n+\n+Some registers have multiple names. These are all treated by the compiler as identical to the base register name. Here is the list of all supported register aliases:\n+\n+| Architecture | Base register | Aliases |\n+| ------------ | ------------- | ------- |\n+| x86 | `ax` | `eax`, `rax` |\n+| x86 | `bx` | `ebx`, `rbx` |\n+| x86 | `cx` | `ecx`, `rcx` |\n+| x86 | `dx` | `edx`, `rdx` |\n+| x86 | `si` | `esi`, `rsi` |\n+| x86 | `di` | `edi`, `rdi` |\n+| x86 | `bp` | `bpl`, `ebp`, `rbp` |\n+| x86 | `sp` | `spl`, `esp`, `rsp` |\n+| x86 | `ip` | `eip`, `rip` |\n+| x86 | `st(0)` | `st` |\n+| x86 | `r[8-15]` | `r[8-15]b`, `r[8-15]w`, `r[8-15]d` |\n+| x86 | `xmm[0-31]` | `ymm[0-31]`, `zmm[0-31]` |\n+| AArch64 | `x[0-30]` | `w[0-30]` |\n+| AArch64 | `x29` | `fp` |\n+| AArch64 | `x30` | `lr` |\n+| AArch64 | `sp` | `wsp` |\n+| AArch64 | `xzr` | `wzr` |\n+| AArch64 | `v[0-31]` | `b[0-31]`, `h[0-31]`, `s[0-31]`, `d[0-31]`, `q[0-31]` |\n+| ARM | `r[0-3]` | `a[1-4]` |\n+| ARM | `r[4-9]` | `v[1-6]` |\n+| ARM | `r9` | `rfp` |\n+| ARM | `r10` | `sl` |\n+| ARM | `r11` | `fp` |\n+| ARM | `r12` | `ip` |\n+| ARM | `r13` | `sp` |\n+| ARM | `r14` | `lr` |\n+| ARM | `r15` | `pc` |\n+| RISC-V | `x0` | `zero` |\n+| RISC-V | `x1` | `ra` |\n+| RISC-V | `x2` | `sp` |\n+| RISC-V | `x3` | `gp` |\n+| RISC-V | `x4` | `tp` |\n+| RISC-V | `x[5-7]` | `t[0-2]` |\n+| RISC-V | `x8` | `fp`, `s0` |\n+| RISC-V | `x9` | `s1` |\n+| RISC-V | `x[10-17]` | `a[0-7]` |\n+| RISC-V | `x[18-27]` | `s[2-11]` |\n+| RISC-V | `x[28-31]` | `t[3-6]` |\n+| RISC-V | `f[0-7]` | `ft[0-7]` |\n+| RISC-V | `f[8-9]` | `fs[0-1]` |\n+| RISC-V | `f[10-17]` | `fa[0-7]` |\n+| RISC-V | `f[18-27]` | `fs[2-11]` |\n+| RISC-V | `f[28-31]` | `ft[8-11]` |\n+\n+Some registers cannot be used for input or output operands:\n+\n+| Architecture | Unsupported register | Reason |\n+| ------------ | -------------------- | ------ |\n+| All | `sp` | The stack pointer must be restored to its original value at the end of an asm code block. |\n+| All | `bp` (x86), `r11` (ARM), `x29` (AArch64), `x8` (RISC-V) | The frame pointer cannot be used as an input or output. |\n+| x86 | `k0` | This is a constant zero register which can't be modified. |\n+| x86 | `ip` | This is the program counter, not a real register. |\n+| x86 | `mm[0-7]` | MMX registers are not currently supported (but may be in the future). |\n+| x86 | `st([0-7])` | x87 registers are not currently supported (but may be in the future). |\n+| AArch64 | `xzr` | This is a constant zero register which can't be modified. |\n+| ARM | `pc` | This is the program counter, not a real register. |\n+| RISC-V | `x0` | This is a constant zero register which can't be modified. |\n+| RISC-V | `gp`, `tp` | These registers are reserved and cannot be used as inputs or outputs. |\n+\n+## Template modifiers\n+\n+The placeholders can be augmented by modifiers which are specified after the `:` in the curly braces. These modifiers do not affect register allocation, but change the way operands are formatted when inserted into the template string. Only one modifier is allowed per template placeholder.\n+\n+The supported modifiers are a subset of LLVM's (and GCC's) [asm template argument modifiers][llvm-argmod], but do not use the same letter codes.\n+\n+| Architecture | Register class | Modifier | Example output | LLVM modifier |\n+| ------------ | -------------- | -------- | -------------- | ------------- |\n+| x86-32 | `reg` | None | `eax` | `k` |\n+| x86-64 | `reg` | None | `rax` | `q` |\n+| x86-32 | `reg_abcd` | `l` | `al` | `b` |\n+| x86-64 | `reg` | `l` | `al` | `b` |\n+| x86 | `reg_abcd` | `h` | `ah` | `h` |\n+| x86 | `reg` | `x` | `ax` | `w` |\n+| x86 | `reg` | `e` | `eax` | `k` |\n+| x86-64 | `reg` | `r` | `rax` | `q` |\n+| x86 | `reg_byte` | None | `al` / `ah` | None |\n+| x86 | `xmm_reg` | None | `xmm0` | `x` |\n+| x86 | `ymm_reg` | None | `ymm0` | `t` |\n+| x86 | `zmm_reg` | None | `zmm0` | `g` |\n+| x86 | `*mm_reg` | `x` | `xmm0` | `x` |\n+| x86 | `*mm_reg` | `y` | `ymm0` | `t` |\n+| x86 | `*mm_reg` | `z` | `zmm0` | `g` |\n+| x86 | `kreg` | None | `k1` | None |\n+| AArch64 | `reg` | None | `x0` | `x` |\n+| AArch64 | `reg` | `w` | `w0` | `w` |\n+| AArch64 | `reg` | `x` | `x0` | `x` |\n+| AArch64 | `vreg` | None | `v0` | None |\n+| AArch64 | `vreg` | `v` | `v0` | None |\n+| AArch64 | `vreg` | `b` | `b0` | `b` |\n+| AArch64 | `vreg` | `h` | `h0` | `h` |\n+| AArch64 | `vreg` | `s` | `s0` | `s` |\n+| AArch64 | `vreg` | `d` | `d0` | `d` |\n+| AArch64 | `vreg` | `q` | `q0` | `q` |\n+| ARM | `reg` | None | `r0` | None |\n+| ARM | `sreg` | None | `s0` | None |\n+| ARM | `dreg` | None | `d0` | `P` |\n+| ARM | `qreg` | None | `q0` | `q` |\n+| ARM | `qreg` | `e` / `f` | `d0` / `d1` | `e` / `f` |\n+| RISC-V | `reg` | None | `x1` | None |\n+| RISC-V | `freg` | None | `f0` | None |\n+\n+> Notes:\n+> - on ARM `e` / `f`: this prints the low or high doubleword register name of a NEON quad (128-bit) register.\n+> - on x86: our behavior for `reg` with no modifiers differs from what GCC does. GCC will infer the modifier based on the operand value type, while we default to the full register size.\n+> - on x86 `xmm_reg`: the `x`, `t` and `g` LLVM modifiers are not yet implemented in LLVM (they are supported by GCC only), but this should be a simple change.\n+\n+As stated in the previous section, passing an input value smaller than the register width will result in the upper bits of the register containing undefined values. This is not a problem if the inline asm only accesses the lower bits of the register, which can be done by using a template modifier to use a subregister name in the asm code (e.g. `ax` instead of `rax`). Since this an easy pitfall, the compiler will suggest a template modifier to use where appropriate given the input type. If all references to an operand already have modifiers then the warning is suppressed for that operand.\n+\n+[llvm-argmod]: http://llvm.org/docs/LangRef.html#asm-template-argument-modifiers\n+\n+## Options\n+\n+Flags are used to further influence the behavior of the inline assembly block.\n+Currently the following options are defined:\n+- `pure`: The `asm` block has no side effects, and its outputs depend only on its direct inputs (i.e. the values themselves, not what they point to) or values read from memory (unless the `nomem` options is also set). This allows the compiler to execute the `asm` block fewer times than specified in the program (e.g. by hoisting it out of a loop) or even eliminate it entirely if the outputs are not used.\n+- `nomem`: The `asm` blocks does not read or write to any memory. This allows the compiler to cache the values of modified global variables in registers across the `asm` block since it knows that they are not read or written to by the `asm`.\n+- `readonly`: The `asm` block does not write to any memory. This allows the compiler to cache the values of unmodified global variables in registers across the `asm` block since it knows that they are not written to by the `asm`.\n+- `preserves_flags`: The `asm` block does not modify the flags register (defined in the [rules][rules] below). This allows the compiler to avoid recomputing the condition flags after the `asm` block.\n+- `noreturn`: The `asm` block never returns, and its return type is defined as `!` (never). Behavior is undefined if execution falls through past the end of the asm code. A `noreturn` asm block behaves just like a function which doesn't return; notably, local variables in scope are not dropped before it is invoked.\n+- `nostack`: The `asm` block does not push data to the stack, or write to the stack red-zone (if supported by the target). If this option is *not* used then the stack pointer is guaranteed to be suitably aligned (according to the target ABI) for a function call.\n+- `att_syntax`: This option is only valid on x86, and causes the assembler to use the `.att_syntax prefix` mode of the GNU assembler. Register operands are substituted in with a leading `%`.\n+\n+The compiler performs some additional checks on options:\n+- The `nomem` and `readonly` options are mutually exclusive: it is a compile-time error to specify both.\n+- The `pure` option must be combined with either the `nomem` or `readonly` options, otherwise a compile-time error is emitted.\n+- It is a compile-time error to specify `pure` on an asm block with no outputs or only discarded outputs (`_`).\n+- It is a compile-time error to specify `noreturn` on an asm block with outputs.\n+\n+## Rules for inline assembly\n+[rules]: #rules\n+\n+- Any registers not specified as inputs will contain an undefined value on entry to the asm block.\n+  - An \"undefined value\" in the context of inline assembly means that the register can (non-deterministically) have any one of the possible values allowed by the architecture. Notably it is not the same as an LLVM `undef` which can have a different value every time you read it (since such a concept does not exist in assembly code).\n+- Any registers not specified as outputs must have the same value upon exiting the asm block as they had on entry, otherwise behavior is undefined.\n+  - This only applies to registers which can be specified as an input or output. Other registers follow target-specific rules.\n+  - Note that a `lateout` may be allocated to the same register as an `in`, in which case this rule does not apply. Code should not rely on this however since it depends on the results of register allocation.\n+- Behavior is undefined if execution unwinds out of an asm block.\n+  - This also applies if the assembly code calls a function which then unwinds.\n+- The set of memory locations that assembly code is allowed the read and write are the same as those allowed for an FFI function.\n+  - Refer to the unsafe code guidelines for the exact rules.\n+  - If the `readonly` option is set, then only memory reads are allowed.\n+  - If the `nomem` option is set then no reads or writes to memory are allowed.\n+  - These rules do not apply to memory which is private to the asm code, such as stack space allocated within the asm block.\n+- The compiler cannot assume that the instructions in the asm are the ones that will actually end up executed.\n+  - This effectively means that the compiler must treat the `asm!` as a black box and only take the interface specification into account, not the instructions themselves.\n+  - Runtime code patching is allowed, via target-specific mechanisms (outside the scope of this RFC).\n+- Unless the `nostack` option is set, asm code is allowed to use stack space below the stack pointer.\n+  - On entry to the asm block the stack pointer is guaranteed to be suitably aligned (according to the target ABI) for a function call.\n+  - You are responsible for making sure you don't overflow the stack (e.g. use stack probing to ensure you hit a guard page).\n+  - You should adjust the stack pointer when allocating stack memory as required by the target ABI.\n+  - The stack pointer must be restored to its original value before leaving the asm block.\n+- If the `noreturn` option is set then behavior is undefined if execution falls through to the end of the asm block.\n+- If the `pure` option is set then behavior is undefined if the `asm` has side-effects other than its direct outputs. Behavior is also undefined if two executions of the `asm` code with the same inputs result in different outputs.\n+  - When used with the `nomem` option, \"inputs\" are just the direct inputs of the `asm!`.\n+  - When used with the `readonly` option, \"inputs\" comprise the direct inputs of the `asm!` and any memory that the `asm!` block is allowed to read.\n+- These flags registers must be restored upon exiting the asm block if the `preserves_flags` option is set:\n+  - x86\n+    - Status flags in `EFLAGS` (CF, PF, AF, ZF, SF, OF).\n+    - Direction flag in `EFLAGS` (DF).\n+    - Floating-point status word (all).\n+    - Floating-point exception flags in `MXCSR` (PE, UE, OE, ZE, DE, IE).\n+  - ARM\n+    - Condition flags in `CPSR` (N, Z, C, V)\n+    - Saturation flag in `CPSR` (Q)\n+    - Greater than or equal flags in `CPSR` (GE).\n+    - Condition flags in `FPSCR` (N, Z, C, V)\n+    - Saturation flag in `FPSCR` (QC)\n+    - Floating-point exception flags in `FPSCR` (IDC, IXC, UFC, OFC, DZC, IOC).\n+  - AArch64\n+    - Condition flags (`NZCV` register).\n+    - Floating-point status (`FPSR` register).\n+  - RISC-V\n+    - Floating-point exception flags in `fcsr` (`fflags`).\n+- The requirement of restoring the stack pointer and non-output registers to their original value only applies when exiting an `asm!` block.\n+  - This means that `asm!` blocks that never return (even if not marked `noreturn`) don't need to preserve these registers.\n+  - When returning to a different `asm!` block than you entered (e.g. for context switching), these registers must contain the value they had upon entering the `asm!` block that you are *exiting*.\n+    - You cannot exit an `asm!` block that has not been entered. Neither can you exit an `asm!` block that has already been exited.\n+    - You are responsible for switching any target-specific state (e.g. thread-local storage, stack bounds).\n+    - The set of memory locations that you may access is the intersection of those allowed by the `asm!` blocks you entered and exited.\n+\n+> **Note**: As a general rule, these are the flags which are *not* preserved when performing a function call."}, {"sha": "1d4d7013e94275741336b10bde798bc27dca4f42", "filename": "src/libcore/macros/mod.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6ba9696f5ebb91a562e03f72075866a2f846d4c9/src%2Flibcore%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba9696f5ebb91a562e03f72075866a2f846d4c9/src%2Flibcore%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros%2Fmod.rs?ref=6ba9696f5ebb91a562e03f72075866a2f846d4c9", "patch": "@@ -1293,30 +1293,29 @@ pub(crate) mod builtin {\n     /// [unstable book]: ../unstable-book/library-features/asm.html\n     #[unstable(\n         feature = \"asm\",\n-        issue = \"70173\",\n+        issue = \"72016\",\n         reason = \"inline assembly is not stable enough for use and is subject to change\"\n     )]\n     #[rustc_builtin_macro]\n     #[macro_export]\n     macro_rules! asm {\n-        (\"assembly template\"\n-                        : $(\"output\"(operand),)*\n-                        : $(\"input\"(operand),)*\n-                        : $(\"clobbers\",)*\n-                        : $(\"options\",)*) => {\n+        (\"assembly template\",\n+            $(operands,)*\n+            $(options($(option),*))?\n+        ) => {\n             /* compiler built-in */\n         };\n     }\n \n-    /// Inline assembly.\n+    /// LLVM-style inline assembly.\n     ///\n     /// Read the [unstable book] for the usage.\n     ///\n     /// [unstable book]: ../unstable-book/library-features/llvm-asm.html\n     #[unstable(\n         feature = \"llvm_asm\",\n         issue = \"70173\",\n-        reason = \"inline assembly is not stable enough for use and is subject to change\"\n+        reason = \"LLVM-style inline assembly will never be stabilized, prefer using asm! instead\"\n     )]\n     #[rustc_builtin_macro]\n     #[macro_export]"}, {"sha": "fccd1b96f60dbe24873b98df3deb2adb2c7d4723", "filename": "src/librustc_error_codes/error_codes/E0660.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ba9696f5ebb91a562e03f72075866a2f846d4c9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0660.md", "raw_url": "https://github.com/rust-lang/rust/raw/6ba9696f5ebb91a562e03f72075866a2f846d4c9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0660.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0660.md?ref=6ba9696f5ebb91a562e03f72075866a2f846d4c9", "patch": "@@ -7,6 +7,6 @@ llvm_asm!(\"nop\" \"nop\");\n ```\n \n Considering that this would be a long explanation, we instead recommend you\n-take a look at the [`asm`] chapter of the Unstable book:\n+take a look at the [`llvm_asm`] chapter of the Unstable book:\n \n-[asm]: https://doc.rust-lang.org/stable/unstable-book/library-features/asm.html\n+[llvm_asm]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html"}, {"sha": "f1debee7a18f188795781a9a17c09c36857abab4", "filename": "src/librustc_error_codes/error_codes/E0661.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ba9696f5ebb91a562e03f72075866a2f846d4c9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0661.md", "raw_url": "https://github.com/rust-lang/rust/raw/6ba9696f5ebb91a562e03f72075866a2f846d4c9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0661.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0661.md?ref=6ba9696f5ebb91a562e03f72075866a2f846d4c9", "patch": "@@ -8,6 +8,6 @@ llvm_asm!(\"nop\" : \"r\"(a));\n ```\n \n Considering that this would be a long explanation, we instead recommend you\n-take a look at the [`asm`] chapter of the Unstable book:\n+take a look at the [`llvm_asm`] chapter of the Unstable book:\n \n-[asm]: https://doc.rust-lang.org/stable/unstable-book/library-features/asm.html\n+[llvm_asm]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html"}, {"sha": "d4765f078b0e6d975ecbea7a4500e521dfad7028", "filename": "src/librustc_error_codes/error_codes/E0662.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ba9696f5ebb91a562e03f72075866a2f846d4c9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0662.md", "raw_url": "https://github.com/rust-lang/rust/raw/6ba9696f5ebb91a562e03f72075866a2f846d4c9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0662.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0662.md?ref=6ba9696f5ebb91a562e03f72075866a2f846d4c9", "patch": "@@ -11,6 +11,6 @@ llvm_asm!(\"xor %eax, %eax\"\n ```\n \n Considering that this would be a long explanation, we instead recommend you\n-take a look at the [`asm`] chapter of the Unstable book:\n+take a look at the [`llvm_asm`] chapter of the Unstable book:\n \n-[asm]: https://doc.rust-lang.org/stable/unstable-book/library-features/asm.html\n+[llvm_asm]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html"}, {"sha": "d5a85b275db632a83dd8e7d0ba7131fbf61820f6", "filename": "src/librustc_error_codes/error_codes/E0663.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ba9696f5ebb91a562e03f72075866a2f846d4c9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0663.md", "raw_url": "https://github.com/rust-lang/rust/raw/6ba9696f5ebb91a562e03f72075866a2f846d4c9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0663.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0663.md?ref=6ba9696f5ebb91a562e03f72075866a2f846d4c9", "patch": "@@ -11,6 +11,6 @@ llvm_asm!(\"xor %eax, %eax\"\n ```\n \n Considering that this would be a long explanation, we instead recommend you\n-take a look at the [`asm`] chapter of the Unstable book:\n+take a look at the [`llvm_asm`] chapter of the Unstable book:\n \n-[asm]: https://doc.rust-lang.org/stable/unstable-book/library-features/asm.html\n+[llvm_asm]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html"}, {"sha": "ce9c9491df3d767f1fe6e9513749071ce7497e6f", "filename": "src/librustc_error_codes/error_codes/E0664.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ba9696f5ebb91a562e03f72075866a2f846d4c9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0664.md", "raw_url": "https://github.com/rust-lang/rust/raw/6ba9696f5ebb91a562e03f72075866a2f846d4c9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0664.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0664.md?ref=6ba9696f5ebb91a562e03f72075866a2f846d4c9", "patch": "@@ -11,6 +11,6 @@ llvm_asm!(\"mov $$0x200, %eax\"\n ```\n \n Considering that this would be a long explanation, we instead recommend you\n-take a look at the [`asm`] chapter of the Unstable book:\n+take a look at the [`llvm_asm`] chapter of the Unstable book:\n \n-[asm]: https://doc.rust-lang.org/stable/unstable-book/library-features/asm.html\n+[llvm_asm]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html"}]}