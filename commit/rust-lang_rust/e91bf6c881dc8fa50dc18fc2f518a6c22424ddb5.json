{"sha": "e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MWJmNmM4ODFkYzhmYTUwZGMxOGZjMmY1MThhNmMyMjQyNGRkYjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-12T01:28:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-12T01:28:37Z"}, "message": "Auto merge of #69478 - avr-rust:avr-support-upstream, r=jonas-schievink\n\nEnable AVR as a Tier 3 target upstream\n\nTracking issue: #44052.\n\nThings intentionally left out of the initial upstream:\n\n* The `target_cpu` flag\n\nI have made the cleanup suggestions by @jplatte and @jplatte in https://github.com/avr-rust/rust/commit/043550d9db0582add42e5837f636f61acb26b915.\n\nAnybody feel free to give the branch a test and see how it fares, or make suggestions on the code patch itself.", "tree": {"sha": "54be1329599cb0f0c7d7cae62620894009d1b37d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54be1329599cb0f0c7d7cae62620894009d1b37d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "html_url": "https://github.com/rust-lang/rust/commit/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14027f3e784de815de726a8fb0e74875781c9caf", "url": "https://api.github.com/repos/rust-lang/rust/commits/14027f3e784de815de726a8fb0e74875781c9caf", "html_url": "https://github.com/rust-lang/rust/commit/14027f3e784de815de726a8fb0e74875781c9caf"}, {"sha": "0340359b2a3e9af1cd94cbf7831f8b77b9bf77a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0340359b2a3e9af1cd94cbf7831f8b77b9bf77a1", "html_url": "https://github.com/rust-lang/rust/commit/0340359b2a3e9af1cd94cbf7831f8b77b9bf77a1"}], "stats": {"total": 207, "additions": 201, "deletions": 6}, "files": [{"sha": "d995554913f8429927581cba17291d5ac9c02ef1", "filename": "config.toml.example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -69,7 +69,7 @@\n # the same format as above, but since these targets are experimental, they are\n # not built by default and the experimental Rust compilation targets that depend\n # on them will not work unless the user opts in to building them.\n-#experimental-targets = \"\"\n+#experimental-targets = \"AVR\"\n \n # Cap the number of parallel linker invocations when compiling LLVM.\n # This can be useful when building LLVM with debug info, which significantly"}, {"sha": "252a6316e574b99cdf440b6b90d7ee2b155daa58", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -144,7 +144,7 @@ impl Step for Llvm {\n \n         let llvm_exp_targets = match builder.config.llvm_experimental_targets {\n             Some(ref s) => s,\n-            None => \"\",\n+            None => \"AVR\",\n         };\n \n         let assertions = if builder.config.llvm_assertions { \"ON\" } else { \"OFF\" };"}, {"sha": "777284ca5c0962854e4cfb9d11752e32da36d7af", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -1345,14 +1345,24 @@ macro_rules! fnptr_impls_safety_abi {\n         #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n         impl<Ret, $($Arg),*> fmt::Pointer for $FnTy {\n             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                fmt::Pointer::fmt(&(*self as *const ()), f)\n+                // HACK: The intermediate cast as usize is required for AVR\n+                // so that the address space of the source function pointer\n+                // is preserved in the final function pointer.\n+                //\n+                // https://github.com/avr-rust/rust/issues/143\n+                fmt::Pointer::fmt(&(*self as usize as *const ()), f)\n             }\n         }\n \n         #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n         impl<Ret, $($Arg),*> fmt::Debug for $FnTy {\n             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                fmt::Pointer::fmt(&(*self as *const ()), f)\n+                // HACK: The intermediate cast as usize is required for AVR\n+                // so that the address space of the source function pointer\n+                // is preserved in the final function pointer.\n+                //\n+                // https://github.com/avr-rust/rust/issues/143\n+                fmt::Pointer::fmt(&(*self as usize as *const ()), f)\n             }\n         }\n     }"}, {"sha": "a7b0c9cf81be6706d053ed6a90d6f8a9ddf8e3d4", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -121,6 +121,14 @@ impl<'a> PostExpansionVisitor<'a> {\n                     \"amdgpu-kernel ABI is experimental and subject to change\"\n                 );\n             }\n+            \"avr-interrupt\" | \"avr-non-blocking-interrupt\" => {\n+                gate_feature_post!(\n+                    &self,\n+                    abi_avr_interrupt,\n+                    span,\n+                    \"avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\"\n+                );\n+            }\n             \"efiapi\" => {\n                 gate_feature_post!(\n                     &self,"}, {"sha": "099c402703d09f44260df9feab87947654dadcf5", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -375,6 +375,8 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n         match self.conv {\n             Conv::C | Conv::Rust => llvm::CCallConv,\n             Conv::AmdGpuKernel => llvm::AmdGpuKernel,\n+            Conv::AvrInterrupt => llvm::AvrInterrupt,\n+            Conv::AvrNonBlockingInterrupt => llvm::AvrNonBlockingInterrupt,\n             Conv::ArmAapcs => llvm::ArmAapcsCallConv,\n             Conv::Msp430Intr => llvm::Msp430Intr,\n             Conv::PtxKernel => llvm::PtxKernel,"}, {"sha": "54cf99e1c6d6cfdf5d3b48313bdd4bc6c7774cfb", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -45,6 +45,8 @@ pub enum CallConv {\n     X86_64_Win64 = 79,\n     X86_VectorCall = 80,\n     X86_Intr = 83,\n+    AvrNonBlockingInterrupt = 84,\n+    AvrInterrupt = 85,\n     AmdGpuKernel = 91,\n }\n "}, {"sha": "b4935236b6a97c8d3aaf70926d6172b201cbc1b0", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -574,6 +574,9 @@ declare_features! (\n     /// No longer treat an unsafe function as an unsafe block.\n     (active, unsafe_block_in_unsafe_fn, \"1.45.0\", Some(71668), None),\n \n+    /// Allows `extern \"avr-interrupt\" fn()` and `extern \"avr-non-blocking-interrupt\" fn()`.\n+    (active, abi_avr_interrupt, \"1.45.0\", Some(69664), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "ada48bc147e47866750a725b1c35f57e1a0b58b9", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -78,6 +78,7 @@ fn main() {\n         \"arm\",\n         \"aarch64\",\n         \"amdgpu\",\n+        \"avr\",\n         \"mips\",\n         \"powerpc\",\n         \"systemz\","}, {"sha": "79e1a6cc5dcdb7e3cb3024948bad3541bdbb6b9d", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -76,6 +76,14 @@ pub fn initialize_available_targets() {\n         LLVMInitializeAMDGPUAsmPrinter,\n         LLVMInitializeAMDGPUAsmParser\n     );\n+    init_target!(\n+        llvm_component = \"avr\",\n+        LLVMInitializeAVRTargetInfo,\n+        LLVMInitializeAVRTarget,\n+        LLVMInitializeAVRTargetMC,\n+        LLVMInitializeAVRAsmPrinter,\n+        LLVMInitializeAVRAsmParser\n+    );\n     init_target!(\n         llvm_component = \"mips\",\n         LLVMInitializeMipsTargetInfo,"}, {"sha": "f5bca90c2bd523d7075ff4eaeb0307b90480d1ca", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -2529,6 +2529,8 @@ where\n             Msp430Interrupt => Conv::Msp430Intr,\n             X86Interrupt => Conv::X86Intr,\n             AmdGpuKernel => Conv::AmdGpuKernel,\n+            AvrInterrupt => Conv::AvrInterrupt,\n+            AvrNonBlockingInterrupt => Conv::AvrNonBlockingInterrupt,\n \n             // These API constants ought to be more specific...\n             Cdecl => Conv::C,"}, {"sha": "fea5880f01ebd045dace8ff38305a0eee202b611", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -120,6 +120,7 @@ symbols! {\n         abi_unadjusted,\n         abi_vectorcall,\n         abi_x86_interrupt,\n+        abi_avr_interrupt,\n         abort,\n         aborts,\n         address,"}, {"sha": "c1f7a1e3af58612af767fb4bcf15e8d685796e5f", "filename": "src/librustc_target/abi/call/avr.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_target%2Fabi%2Fcall%2Favr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_target%2Fabi%2Fcall%2Favr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Favr.rs?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -0,0 +1,59 @@\n+//! LLVM-frontend specific AVR calling convention implementation.\n+//!\n+//! # Current calling convention ABI\n+//!\n+//! Inherited from Clang's `clang::DefaultABIInfo` implementation - self described\n+//! as\n+//!\n+//! > the default implementation for ABI specific details. This implementation\n+//! > provides information which results in\n+//! > self-consistent and sensible LLVM IR generation, but does not\n+//! > conform to any particular ABI.\n+//! >\n+//! > - Doxygen Doxumentation of `clang::DefaultABIInfo`\n+//!\n+//! This calling convention may not match AVR-GCC in all cases.\n+//!\n+//! In the future, an AVR-GCC compatible argument classification ABI should be\n+//! adopted in both Rust and Clang.\n+//!\n+//! *NOTE*: Currently, this module implements the same calling convention\n+//! that clang with AVR currently does - the default, simple, unspecialized\n+//! ABI implementation available to all targets. This ABI is not\n+//! binary-compatible with AVR-GCC. Once LLVM [PR46140](https://bugs.llvm.org/show_bug.cgi?id=46140)\n+//! is completed, this module should be updated to match so that both Clang\n+//! and Rust emit code to the same AVR-GCC compatible ABI.\n+//!\n+//! In particular, both Clang and Rust may not have the same semantics\n+//! when promoting arguments to indirect references as AVR-GCC. It is important\n+//! to note that the core AVR ABI implementation within LLVM itself is ABI\n+//! compatible with AVR-GCC - Rust and AVR-GCC only differ in the small amount\n+//! of compiler frontend specific calling convention logic implemented here.\n+\n+use crate::abi::call::{ArgAbi, FnAbi};\n+\n+fn classify_ret_ty<Ty>(ret: &mut ArgAbi<'_, Ty>) {\n+    if ret.layout.is_aggregate() {\n+        ret.make_indirect();\n+    }\n+}\n+\n+fn classify_arg_ty<Ty>(arg: &mut ArgAbi<'_, Ty>) {\n+    if arg.layout.is_aggregate() {\n+        arg.make_indirect();\n+    }\n+}\n+\n+pub fn compute_abi_info<Ty>(fty: &mut FnAbi<'_, Ty>) {\n+    if !fty.ret.is_ignore() {\n+        classify_ret_ty(&mut fty.ret);\n+    }\n+\n+    for arg in &mut fty.args {\n+        if arg.is_ignore() {\n+            continue;\n+        }\n+\n+        classify_arg_ty(arg);\n+    }\n+}"}, {"sha": "8f7e2bba5aa6d785ea72f08fbd39d01ef7bfd55e", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -5,6 +5,7 @@ use crate::spec::{self, HasTargetSpec};\n mod aarch64;\n mod amdgpu;\n mod arm;\n+mod avr;\n mod hexagon;\n mod mips;\n mod mips64;\n@@ -525,6 +526,8 @@ pub enum Conv {\n     X86_64Win64,\n \n     AmdGpuKernel,\n+    AvrInterrupt,\n+    AvrNonBlockingInterrupt,\n }\n \n /// Metadata describing how the arguments to a native function\n@@ -580,6 +583,7 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n             \"aarch64\" => aarch64::compute_abi_info(cx, self),\n             \"amdgpu\" => amdgpu::compute_abi_info(cx, self),\n             \"arm\" => arm::compute_abi_info(cx, self),\n+            \"avr\" => avr::compute_abi_info(self),\n             \"mips\" => mips::compute_abi_info(cx, self),\n             \"mips64\" => mips64::compute_abi_info(cx, self),\n             \"powerpc\" => powerpc::compute_abi_info(self),"}, {"sha": "a5c874bb4ac050a2c305b4f9b95cd3137d6a0079", "filename": "src/librustc_target/spec/abi.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_target%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_target%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fabi.rs?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -34,6 +34,8 @@ pub enum Abi {\n     X86Interrupt,\n     AmdGpuKernel,\n     EfiApi,\n+    AvrInterrupt,\n+    AvrNonBlockingInterrupt,\n \n     // Multiplatform / generic ABIs\n     System,\n@@ -73,6 +75,12 @@ const AbiDatas: &[AbiData] = &[\n     AbiData { abi: Abi::X86Interrupt, name: \"x86-interrupt\", generic: false },\n     AbiData { abi: Abi::AmdGpuKernel, name: \"amdgpu-kernel\", generic: false },\n     AbiData { abi: Abi::EfiApi, name: \"efiapi\", generic: false },\n+    AbiData { abi: Abi::AvrInterrupt, name: \"avr-interrupt\", generic: false },\n+    AbiData {\n+        abi: Abi::AvrNonBlockingInterrupt,\n+        name: \"avr-non-blocking-interrupt\",\n+        generic: false,\n+    },\n     // Cross-platform ABIs\n     AbiData { abi: Abi::System, name: \"system\", generic: true },\n     AbiData { abi: Abi::RustIntrinsic, name: \"rust-intrinsic\", generic: true },"}, {"sha": "f90a8def0aa2f8699086d546426f3e3d0d697f2a", "filename": "src/librustc_target/spec/avr_unknown_unknown.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_target%2Fspec%2Favr_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_target%2Fspec%2Favr_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Favr_unknown_unknown.rs?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -0,0 +1,17 @@\n+use crate::spec::{LinkerFlavor, Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        llvm_target: \"avr-unknown-unknown\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"16\".to_string(),\n+        data_layout: \"e-P1-p:16:8-i8:8-i16:8-i32:8-i64:8-f32:8-f64:8-n8-a:8\".to_string(),\n+        arch: \"avr\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        target_os: \"unknown\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        target_c_int_width: 16.to_string(),\n+        options: super::freestanding_base::opts(),\n+    })\n+}"}, {"sha": "5402ea074fae1ee891c64a17560783761408ff6e", "filename": "src/librustc_target/spec/freestanding_base.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_target%2Fspec%2Ffreestanding_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_target%2Fspec%2Ffreestanding_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Ffreestanding_base.rs?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -0,0 +1,30 @@\n+use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n+use std::default::Default;\n+\n+pub fn opts() -> TargetOptions {\n+    let mut args = LinkArgs::new();\n+\n+    args.insert(\n+        LinkerFlavor::Gcc,\n+        vec![\n+            // We want to be able to strip as much executable code as possible\n+            // from the linker command line, and this flag indicates to the\n+            // linker that it can avoid linking in dynamic libraries that don't\n+            // actually satisfy any symbols up to that point (as with many other\n+            // resolutions the linker does). This option only applies to all\n+            // following libraries so we're sure to pass it as one of the first\n+            // arguments.\n+            \"-Wl,--as-needed\".to_string(),\n+        ],\n+    );\n+\n+    TargetOptions {\n+        dynamic_linking: false,\n+        executables: true,\n+        linker_is_gnu: true,\n+        has_rpath: false,\n+        pre_link_args: args,\n+        position_independent_executables: false,\n+        ..Default::default()\n+    }\n+}"}, {"sha": "29250f21383be600b306bb99957f200e87717e82", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -54,6 +54,7 @@ mod arm_base;\n mod cloudabi_base;\n mod dragonfly_base;\n mod freebsd_base;\n+mod freestanding_base;\n mod fuchsia_base;\n mod haiku_base;\n mod hermit_base;\n@@ -579,6 +580,8 @@ supported_targets! {\n     (\"aarch64-fuchsia\", aarch64_fuchsia),\n     (\"x86_64-fuchsia\", x86_64_fuchsia),\n \n+    (\"avr-unknown-unknown\", avr_unknown_unknown),\n+\n     (\"x86_64-unknown-l4re-uclibc\", x86_64_unknown_l4re_uclibc),\n \n     (\"aarch64-unknown-redox\", aarch64_unknown_redox),"}, {"sha": "3d252fe70afebaba44760c9c2b71da88ed09ecc2", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -203,6 +203,12 @@ void LLVMRustAddLastExtensionPasses(\n #define SUBTARGET_AARCH64\n #endif\n \n+#ifdef LLVM_COMPONENT_AVR\n+#define SUBTARGET_AVR SUBTARGET(AVR)\n+#else\n+#define SUBTARGET_AVR\n+#endif\n+\n #ifdef LLVM_COMPONENT_MIPS\n #define SUBTARGET_MIPS SUBTARGET(Mips)\n #else\n@@ -249,6 +255,7 @@ void LLVMRustAddLastExtensionPasses(\n   SUBTARGET_X86                                                                \\\n   SUBTARGET_ARM                                                                \\\n   SUBTARGET_AARCH64                                                            \\\n+  SUBTARGET_AVR                                                                \\\n   SUBTARGET_MIPS                                                               \\\n   SUBTARGET_PPC                                                                \\\n   SUBTARGET_SYSTEMZ                                                            \\"}, {"sha": "8b85adb58453f1ef303d2dc52d9b8a391fb3d3c1", "filename": "src/test/ui/codemap_tests/unicode.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -4,7 +4,7 @@ error[E0703]: invalid ABI: found `\u8def\u6feb\u72fc\u00e1\u0301\u0301`\n LL | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}\n    |        ^^^^^^^^^ invalid ABI\n    |\n-   = help: valid ABIs: Rust, C, cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n+   = help: valid ABIs: Rust, C, cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n \n error: aborting due to previous error\n "}, {"sha": "0d7df8182c45819ab34fd211dc26cfbba2d2d022", "filename": "src/test/ui/feature-gates/feature-gate-abi-avr-interrupt.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-avr-interrupt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-avr-interrupt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-avr-interrupt.rs?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -0,0 +1,9 @@\n+// Test that the AVR interrupt ABI cannot be used when avr_interrupt\n+// feature gate is not used.\n+\n+extern \"avr-interrupt\" fn foo() {}\n+//~^ ERROR avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "be7040e1491feba9eba13407a72a539be2c82f73", "filename": "src/test/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-avr-interrupt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-avr-interrupt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-avr-interrupt.stderr?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi-avr-interrupt.rs:4:8\n+   |\n+LL | extern \"avr-interrupt\" fn foo() {}\n+   |        ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #69664 <https://github.com/rust-lang/rust/issues/69664> for more information\n+   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "e33adb239d78d52e89bd15201680fca3ce7d5d5f", "filename": "src/test/ui/parser/issue-8537.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -4,7 +4,7 @@ error[E0703]: invalid ABI: found `invalid-ab_isize`\n LL |   \"invalid-ab_isize\"\n    |   ^^^^^^^^^^^^^^^^^^ invalid ABI\n    |\n-   = help: valid ABIs: Rust, C, cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n+   = help: valid ABIs: Rust, C, cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n \n error: aborting due to previous error\n "}, {"sha": "f7355433463d68b08a065ff58b6506e8072a184e", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -27,6 +27,12 @@ fn test_parse_normalization_string() {\n     let first = parse_normalization_string(&mut s);\n     assert_eq!(first, Some(\"something (32 bits)\".to_owned()));\n     assert_eq!(s, \" -> \\\"something ($WORD bits).\");\n+\n+    // Nothing to normalize (No quotes, 16-bit)\n+    let mut s = \"normalize-stderr-16bit: something (16 bits) -> something ($WORD bits).\";\n+    let first = parse_normalization_string(&mut s);\n+    assert_eq!(first, None);\n+    assert_eq!(s, r#\"normalize-stderr-16bit: something (16 bits) -> something ($WORD bits).\"#);\n }\n \n fn config() -> Config {"}, {"sha": "ca36a15ffc7de31634414acd793015723c529a4f", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "patch": "@@ -47,6 +47,7 @@ const ARCH_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"armv7\", \"arm\"),\n     (\"armv7s\", \"arm\"),\n     (\"asmjs\", \"asmjs\"),\n+    (\"avr\", \"avr\"),\n     (\"hexagon\", \"hexagon\"),\n     (\"i386\", \"x86\"),\n     (\"i586\", \"x86\"),\n@@ -114,6 +115,8 @@ pub fn matches_env(triple: &str, name: &str) -> bool {\n pub fn get_pointer_width(triple: &str) -> &'static str {\n     if (triple.contains(\"64\") && !triple.ends_with(\"gnux32\")) || triple.starts_with(\"s390x\") {\n         \"64bit\"\n+    } else if triple.starts_with(\"avr\") {\n+        \"16bit\"\n     } else {\n         \"32bit\"\n     }"}]}