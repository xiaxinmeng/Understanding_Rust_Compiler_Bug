{"sha": "396022b90b315ab35be3317836528d83bdd0c042", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NjAyMmI5MGIzMTVhYjM1YmUzMzE3ODM2NTI4ZDgzYmRkMGMwNDI=", "commit": {"author": {"name": "Ryan Levick", "email": "ryan.levick@gmail.com", "date": "2021-01-08T09:00:39Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-02-09T20:54:46Z"}, "message": "Visit more targets when checking attrs", "tree": {"sha": "5e4775df8fd080e15758b11d437e996c02fe693f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e4775df8fd080e15758b11d437e996c02fe693f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/396022b90b315ab35be3317836528d83bdd0c042", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/396022b90b315ab35be3317836528d83bdd0c042", "html_url": "https://github.com/rust-lang/rust/commit/396022b90b315ab35be3317836528d83bdd0c042", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/396022b90b315ab35be3317836528d83bdd0c042/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea098255f74923d69ea234ee526df6b9cecc3b9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea098255f74923d69ea234ee526df6b9cecc3b9b", "html_url": "https://github.com/rust-lang/rust/commit/ea098255f74923d69ea234ee526df6b9cecc3b9b"}], "stats": {"total": 42, "additions": 25, "deletions": 17}, "files": [{"sha": "473477bf22da26b91cbdc7758c364146135046b9", "filename": "compiler/rustc_hir/src/target.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/396022b90b315ab35be3317836528d83bdd0c042/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396022b90b315ab35be3317836528d83bdd0c042/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs?ref=396022b90b315ab35be3317836528d83bdd0c042", "patch": "@@ -54,6 +54,7 @@ pub enum Target {\n     ForeignTy,\n     GenericParam(GenericParamKind),\n     MacroDef,\n+    Param,\n }\n \n impl Display for Target {\n@@ -96,6 +97,7 @@ impl Display for Target {\n                     GenericParamKind::Const => \"const parameter\",\n                 },\n                 Target::MacroDef => \"macro def\",\n+                Target::Param => \"function param\",\n             }\n         )\n     }"}, {"sha": "2c79eeeb0e6d22af72a7ed37ce2c6b6f34c4c3e2", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/396022b90b315ab35be3317836528d83bdd0c042/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396022b90b315ab35be3317836528d83bdd0c042/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=396022b90b315ab35be3317836528d83bdd0c042", "patch": "@@ -1101,17 +1101,6 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         intravisit::walk_arm(self, arm);\n     }\n \n-    fn visit_macro_def(&mut self, macro_def: &'tcx hir::MacroDef<'tcx>) {\n-        self.check_attributes(\n-            macro_def.hir_id,\n-            &macro_def.attrs,\n-            &macro_def.span,\n-            Target::MacroDef,\n-            None,\n-        );\n-        intravisit::walk_macro_def(self, macro_def);\n-    }\n-\n     fn visit_foreign_item(&mut self, f_item: &'tcx ForeignItem<'tcx>) {\n         let target = Target::from_foreign_item(f_item);\n         self.check_attributes(\n@@ -1157,6 +1146,23 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         self.check_attributes(variant.id, variant.attrs, &variant.span, Target::Variant, None);\n         intravisit::walk_variant(self, variant, generics, item_id)\n     }\n+\n+    fn visit_macro_def(&mut self, macro_def: &'tcx hir::MacroDef<'tcx>) {\n+        self.check_attributes(\n+            macro_def.hir_id,\n+            macro_def.attrs,\n+            &macro_def.span,\n+            Target::MacroDef,\n+            None,\n+        );\n+        intravisit::walk_macro_def(self, macro_def);\n+    }\n+\n+    fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n+        self.check_attributes(param.hir_id, param.attrs, &param.span, Target::Param, None);\n+\n+        intravisit::walk_param(self, param);\n+    }\n }\n \n fn is_c_like_enum(item: &Item<'_>) -> bool {"}, {"sha": "65d8bcd9972e65bf82b6c1b9ecbcccaf34379d24", "filename": "src/test/ui/proc-macro/ambiguous-builtin-attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/396022b90b315ab35be3317836528d83bdd0c042/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396022b90b315ab35be3317836528d83bdd0c042/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.rs?ref=396022b90b315ab35be3317836528d83bdd0c042", "patch": "@@ -3,8 +3,8 @@\n #![feature(decl_macro)] //~ ERROR `feature` is ambiguous\n \n extern crate builtin_attrs;\n-use builtin_attrs::{test, bench};\n use builtin_attrs::*;\n+use builtin_attrs::{bench, test};\n \n #[repr(C)] //~ ERROR `repr` is ambiguous\n struct S;"}, {"sha": "1ad991db3be4450e6861de7ae4dadd516871d27d", "filename": "src/test/ui/proc-macro/ambiguous-builtin-attrs.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/396022b90b315ab35be3317836528d83bdd0c042/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/396022b90b315ab35be3317836528d83bdd0c042/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.stderr?ref=396022b90b315ab35be3317836528d83bdd0c042", "patch": "@@ -12,7 +12,7 @@ LL | #[repr(C)]\n    |\n    = note: `repr` could refer to a built-in attribute\n note: `repr` could also refer to the attribute macro imported here\n-  --> $DIR/ambiguous-builtin-attrs.rs:7:5\n+  --> $DIR/ambiguous-builtin-attrs.rs:6:5\n    |\n LL | use builtin_attrs::*;\n    |     ^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL | #[cfg_attr(all(), repr(C))]\n    |\n    = note: `repr` could refer to a built-in attribute\n note: `repr` could also refer to the attribute macro imported here\n-  --> $DIR/ambiguous-builtin-attrs.rs:7:5\n+  --> $DIR/ambiguous-builtin-attrs.rs:6:5\n    |\n LL | use builtin_attrs::*;\n    |     ^^^^^^^^^^^^^^^^\n@@ -40,7 +40,7 @@ LL | fn non_macro_expanded_location<#[repr(C)] T>() {\n    |\n    = note: `repr` could refer to a built-in attribute\n note: `repr` could also refer to the attribute macro imported here\n-  --> $DIR/ambiguous-builtin-attrs.rs:7:5\n+  --> $DIR/ambiguous-builtin-attrs.rs:6:5\n    |\n LL | use builtin_attrs::*;\n    |     ^^^^^^^^^^^^^^^^\n@@ -54,7 +54,7 @@ LL |         #[repr(C)]\n    |\n    = note: `repr` could refer to a built-in attribute\n note: `repr` could also refer to the attribute macro imported here\n-  --> $DIR/ambiguous-builtin-attrs.rs:7:5\n+  --> $DIR/ambiguous-builtin-attrs.rs:6:5\n    |\n LL | use builtin_attrs::*;\n    |     ^^^^^^^^^^^^^^^^\n@@ -82,7 +82,7 @@ LL | #![feature(decl_macro)]\n    |\n    = note: `feature` could refer to a built-in attribute\n note: `feature` could also refer to the attribute macro imported here\n-  --> $DIR/ambiguous-builtin-attrs.rs:7:5\n+  --> $DIR/ambiguous-builtin-attrs.rs:6:5\n    |\n LL | use builtin_attrs::*;\n    |     ^^^^^^^^^^^^^^^^"}]}