{"sha": "7784c7a701ba944decf671f80dea581d68667663", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ODRjN2E3MDFiYTk0NGRlY2Y2NzFmODBkZWE1ODFkNjg2Njc2NjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-09T10:49:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-09T10:49:54Z"}, "message": "resolve extern crates propertly", "tree": {"sha": "548400065966f715ae203e6f6e0fcfd9f12e4470", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/548400065966f715ae203e6f6e0fcfd9f12e4470"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7784c7a701ba944decf671f80dea581d68667663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7784c7a701ba944decf671f80dea581d68667663", "html_url": "https://github.com/rust-lang/rust/commit/7784c7a701ba944decf671f80dea581d68667663", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7784c7a701ba944decf671f80dea581d68667663/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e89da32bb7cf7388946964e1e34df722527d0838", "url": "https://api.github.com/repos/rust-lang/rust/commits/e89da32bb7cf7388946964e1e34df722527d0838", "html_url": "https://github.com/rust-lang/rust/commit/e89da32bb7cf7388946964e1e34df722527d0838"}], "stats": {"total": 149, "additions": 98, "deletions": 51}, "files": [{"sha": "2f7551597fc6150bef8f72449448128bbcfc5dee", "filename": "crates/ra_db/src/mock.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7784c7a701ba944decf671f80dea581d68667663/crates%2Fra_db%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7784c7a701ba944decf671f80dea581d68667663/crates%2Fra_db%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Fmock.rs?ref=7784c7a701ba944decf671f80dea581d68667663", "patch": "@@ -5,7 +5,7 @@ use relative_path::{RelativePath, RelativePathBuf};\n \n use crate::{FileId, FileResolver, SourceRoot, FileResolverImp};\n \n-#[derive(Default, Debug)]\n+#[derive(Default, Debug, Clone)]\n pub struct FileMap(Vec<(FileId, RelativePathBuf)>);\n \n impl FileMap {\n@@ -28,6 +28,11 @@ impl FileMap {\n         self.iter().map(|(id, _)| id).collect()\n     }\n \n+    pub fn file_id(&self, path: &str) -> FileId {\n+        assert!(path.starts_with('/'));\n+        self.iter().find(|(_, p)| p == &path[1..]).unwrap().0\n+    }\n+\n     fn iter<'a>(&'a self) -> impl Iterator<Item = (FileId, &'a RelativePath)> + 'a {\n         self.0\n             .iter()"}, {"sha": "b7193c4f3f7808c7a4503ae932ebd189d47ec4bb", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7784c7a701ba944decf671f80dea581d68667663/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7784c7a701ba944decf671f80dea581d68667663/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=7784c7a701ba944decf671f80dea581d68667663", "patch": "@@ -2,7 +2,7 @@ use std::sync::Arc;\n \n use parking_lot::Mutex;\n use salsa::{self, Database};\n-use ra_db::{LocationIntener, BaseDatabase, FilePosition, mock::FileMap, FileId, WORKSPACE};\n+use ra_db::{LocationIntener, BaseDatabase, FilePosition, mock::FileMap, FileId, WORKSPACE, CrateGraph};\n use relative_path::RelativePathBuf;\n use test_utils::{parse_fixture, CURSOR_MARKER, extract_offset};\n \n@@ -16,7 +16,24 @@ pub(crate) struct MockDatabase {\n }\n \n impl MockDatabase {\n+    pub(crate) fn with_files(fixture: &str) -> (MockDatabase, FileMap) {\n+        let (db, file_map, position) = MockDatabase::from_fixture(fixture);\n+        assert!(position.is_none());\n+        (db, file_map)\n+    }\n+\n     pub(crate) fn with_position(fixture: &str) -> (MockDatabase, FilePosition) {\n+        let (db, _, position) = MockDatabase::from_fixture(fixture);\n+        let position = position.expect(\"expected a marker ( <|> )\");\n+        (db, position)\n+    }\n+\n+    pub(crate) fn set_crate_graph(&mut self, crate_graph: CrateGraph) {\n+        self.query_mut(ra_db::CrateGraphQuery)\n+            .set((), Arc::new(crate_graph));\n+    }\n+\n+    fn from_fixture(fixture: &str) -> (MockDatabase, FileMap, Option<FilePosition>) {\n         let mut db = MockDatabase::default();\n \n         let mut position = None;\n@@ -32,11 +49,10 @@ impl MockDatabase {\n                 db.add_file(&mut file_map, &entry.meta, &entry.text);\n             }\n         }\n-        let position = position.expect(\"expected a marker (<|>)\");\n-        let source_root = file_map.into_source_root();\n+        let source_root = file_map.clone().into_source_root();\n         db.query_mut(ra_db::SourceRootQuery)\n             .set(WORKSPACE, Arc::new(source_root));\n-        (db, position)\n+        (db, file_map, position)\n     }\n \n     fn add_file(&mut self, file_map: &mut FileMap, path: &str, text: &str) -> FileId {"}, {"sha": "9afeade9e5c1295a06dd1a96a5357743755d203e", "filename": "crates/ra_hir/src/module/nameres.rs", "status": "modified", "additions": 37, "deletions": 44, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/7784c7a701ba944decf671f80dea581d68667663/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7784c7a701ba944decf671f80dea581d68667663/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs?ref=7784c7a701ba944decf671f80dea581d68667663", "patch": "@@ -228,7 +228,7 @@ where\n \n     pub(crate) fn resolve(mut self) -> Cancelable<ItemMap> {\n         for (&module_id, items) in self.input.iter() {\n-            self.populate_module(module_id, items)\n+            self.populate_module(module_id, items)?;\n         }\n \n         for &module_id in self.input.keys() {\n@@ -238,11 +238,25 @@ where\n         Ok(self.result)\n     }\n \n-    fn populate_module(&mut self, module_id: ModuleId, input: &InputModuleItems) {\n+    fn populate_module(&mut self, module_id: ModuleId, input: &InputModuleItems) -> Cancelable<()> {\n         let file_id = module_id.source(&self.module_tree).file_id();\n \n         let mut module_items = ModuleScope::default();\n \n+        // Populate extern crates prelude\n+        {\n+            let root_id = module_id.crate_root(&self.module_tree);\n+            let file_id = root_id.source(&self.module_tree).file_id();\n+            let crate_graph = self.db.crate_graph();\n+            if let Some(crate_id) = crate_graph.crate_id_for_crate_root(file_id) {\n+                let krate = Crate::new(crate_id);\n+                for dep in krate.dependencies(self.db) {\n+                    if let Some(module) = dep.krate.root_module(self.db)? {\n+                        self.add_module_item(&mut module_items, dep.name, module.module_id);\n+                    }\n+                }\n+            };\n+        }\n         for import in input.imports.iter() {\n             if let Some(name) = import.path.segments.iter().last() {\n                 if let ImportKind::Named(import) = import.kind {\n@@ -256,10 +270,9 @@ where\n                 }\n             }\n         }\n-\n+        // Populate explicitelly declared items, except modules\n         for item in input.items.iter() {\n             if item.kind == MODULE {\n-                // handle submodules separatelly\n                 continue;\n             }\n             let def_loc = DefLoc {\n@@ -279,22 +292,28 @@ where\n             module_items.items.insert(item.name.clone(), resolution);\n         }\n \n+        // Populate modules\n         for (name, module_id) in module_id.children(&self.module_tree) {\n-            let def_loc = DefLoc {\n-                kind: DefKind::Module,\n-                source_root_id: self.source_root,\n-                module_id,\n-                source_item_id: module_id.source(&self.module_tree).0,\n-            };\n-            let def_id = def_loc.id(self.db);\n-            let resolution = Resolution {\n-                def_id: Some(def_id),\n-                import: None,\n-            };\n-            module_items.items.insert(name, resolution);\n+            self.add_module_item(&mut module_items, name, module_id);\n         }\n \n         self.result.per_module.insert(module_id, module_items);\n+        Ok(())\n+    }\n+\n+    fn add_module_item(&self, module_items: &mut ModuleScope, name: SmolStr, module_id: ModuleId) {\n+        let def_loc = DefLoc {\n+            kind: DefKind::Module,\n+            source_root_id: self.source_root,\n+            module_id,\n+            source_item_id: module_id.source(&self.module_tree).0,\n+        };\n+        let def_id = def_loc.id(self.db);\n+        let resolution = Resolution {\n+            def_id: Some(def_id),\n+            import: None,\n+        };\n+        module_items.items.insert(name, resolution);\n     }\n \n     fn resolve_imports(&mut self, module_id: ModuleId) -> Cancelable<()> {\n@@ -309,35 +328,9 @@ where\n             ImportKind::Glob => return Ok(()),\n             ImportKind::Named(ptr) => ptr,\n         };\n-        let mut segments = import.path.segments.iter().enumerate();\n \n         let mut curr = match import.path.kind {\n-            PathKind::Plain => {\n-                let root_id = module_id.crate_root(&self.module_tree);\n-                let file_id = root_id.source(&self.module_tree).file_id();\n-                let crate_graph = self.db.crate_graph();\n-                let crate_id = match crate_graph.crate_id_for_crate_root(file_id) {\n-                    None => return Ok(()),\n-                    Some(it) => it,\n-                };\n-                let krate = Crate::new(crate_id);\n-                let crate_name = match segments.next() {\n-                    None => return Ok(()),\n-                    Some((_, it)) => it,\n-                };\n-                match krate\n-                    .dependencies(self.db)\n-                    .into_iter()\n-                    .find(|it| &it.name == crate_name)\n-                {\n-                    None => return Ok(()),\n-                    Some(dep) => match dep.krate.root_module(self.db)? {\n-                        None => return Ok(()),\n-                        Some(it) => it.module_id,\n-                    },\n-                }\n-            }\n-            PathKind::Self_ => module_id,\n+            PathKind::Plain | PathKind::Self_ => module_id,\n             PathKind::Super => {\n                 match module_id.parent(&self.module_tree) {\n                     Some(it) => it,\n@@ -348,7 +341,7 @@ where\n             PathKind::Crate => module_id.crate_root(&self.module_tree),\n         };\n \n-        for (i, name) in segments {\n+        for (i, name) in import.path.segments.iter().enumerate() {\n             let is_last = i == import.path.segments.len() - 1;\n \n             let def_id = match self.result.per_module[&curr].items.get(name) {"}, {"sha": "9ddc32dcd9a8cb307ee53522a70210258702f798", "filename": "crates/ra_hir/src/module/nameres/tests.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7784c7a701ba944decf671f80dea581d68667663/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7784c7a701ba944decf671f80dea581d68667663/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres%2Ftests.rs?ref=7784c7a701ba944decf671f80dea581d68667663", "patch": "@@ -1,7 +1,7 @@\n use std::sync::Arc;\n \n use salsa::Database;\n-use ra_db::FilesDatabase;\n+use ra_db::{FilesDatabase, CrateGraph};\n use ra_syntax::SmolStr;\n \n use crate::{\n@@ -21,7 +21,7 @@ fn item_map(fixture: &str) -> (Arc<hir::ItemMap>, hir::ModuleId) {\n }\n \n #[test]\n-fn test_item_map() {\n+fn item_map_smoke_test() {\n     let (item_map, module_id) = item_map(\n         \"\n         //- /lib.rs\n@@ -42,6 +42,39 @@ fn test_item_map() {\n     assert!(resolution.def_id.is_some());\n }\n \n+#[test]\n+fn item_map_across_crates() {\n+    let (mut db, files) = MockDatabase::with_files(\n+        \"\n+        //- /main.rs\n+        use test_crate::Baz;\n+\n+        //- /lib.rs\n+        pub struct Baz;\n+    \",\n+    );\n+    let main_id = files.file_id(\"/main.rs\");\n+    let lib_id = files.file_id(\"/lib.rs\");\n+\n+    let mut crate_graph = CrateGraph::default();\n+    let main_crate = crate_graph.add_crate_root(main_id);\n+    let lib_crate = crate_graph.add_crate_root(lib_id);\n+    crate_graph.add_dep(main_crate, \"test_crate\".into(), lib_crate);\n+\n+    db.set_crate_graph(crate_graph);\n+\n+    let source_root = db.file_source_root(main_id);\n+    let module = hir::source_binder::module_from_file_id(&db, main_id)\n+        .unwrap()\n+        .unwrap();\n+    let module_id = module.module_id;\n+    let item_map = db.item_map(source_root).unwrap();\n+\n+    let name = SmolStr::from(\"Baz\");\n+    let resolution = &item_map.per_module[&module_id].items[&name];\n+    assert!(resolution.def_id.is_some());\n+}\n+\n #[test]\n fn typing_inside_a_function_should_not_invalidate_item_map() {\n     let (mut db, pos) = MockDatabase::with_position("}]}