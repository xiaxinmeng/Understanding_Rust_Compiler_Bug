{"sha": "f9ed8d4d23cd210f24ca303c72b436bfbe84741f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZWQ4ZDRkMjNjZDIxMGYyNGNhMzAzYzcyYjQzNmJmYmU4NDc0MWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-11T11:00:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-11T13:01:57Z"}, "message": "envapsulate navigation target better", "tree": {"sha": "0fc1e57980421ff42e68f5ee8dc699a38dc0fbb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fc1e57980421ff42e68f5ee8dc699a38dc0fbb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9ed8d4d23cd210f24ca303c72b436bfbe84741f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9ed8d4d23cd210f24ca303c72b436bfbe84741f", "html_url": "https://github.com/rust-lang/rust/commit/f9ed8d4d23cd210f24ca303c72b436bfbe84741f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9ed8d4d23cd210f24ca303c72b436bfbe84741f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d3d05d5d70943d8b1356a7e2c8d8b63a1ec470d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d3d05d5d70943d8b1356a7e2c8d8b63a1ec470d", "html_url": "https://github.com/rust-lang/rust/commit/1d3d05d5d70943d8b1356a7e2c8d8b63a1ec470d"}], "stats": {"total": 198, "additions": 102, "deletions": 96}, "files": [{"sha": "8ec6b9b2b025599c024fe22341eba033bc3289dd", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9ed8d4d23cd210f24ca303c72b436bfbe84741f/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9ed8d4d23cd210f24ca303c72b436bfbe84741f/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=f9ed8d4d23cd210f24ca303c72b436bfbe84741f", "patch": "@@ -274,6 +274,8 @@ pub struct Function {\n     pub(crate) def_id: DefId,\n }\n \n+pub use crate::code_model_impl::function::ScopeEntryWithSyntax;\n+\n /// The declared signature of a function.\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct FnSignature {"}, {"sha": "009175bab96315dd2cc1fb76e610fd6940b9aed3", "filename": "crates/ra_hir/src/code_model_impl/function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9ed8d4d23cd210f24ca303c72b436bfbe84741f/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9ed8d4d23cd210f24ca303c72b436bfbe84741f/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs?ref=f9ed8d4d23cd210f24ca303c72b436bfbe84741f", "patch": "@@ -15,7 +15,7 @@ use crate::{\n     impl_block::ImplBlock,\n };\n \n-pub use self::scope::{FnScopes, ScopesWithSyntaxMapping};\n+pub use self::scope::{FnScopes, ScopesWithSyntaxMapping, ScopeEntryWithSyntax};\n \n impl Function {\n     pub(crate) fn new(def_id: DefId) -> Function {"}, {"sha": "fe8be570072b67f545a9aba8813834f1655b1df4", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9ed8d4d23cd210f24ca303c72b436bfbe84741f/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9ed8d4d23cd210f24ca303c72b436bfbe84741f/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=f9ed8d4d23cd210f24ca303c72b436bfbe84741f", "patch": "@@ -59,5 +59,5 @@ pub use self::code_model_api::{\n     Def,\n     Module, ModuleSource, Problem,\n     Struct, Enum, EnumVariant,\n-    Function, FnSignature,\n+    Function, FnSignature, ScopeEntryWithSyntax,\n };"}, {"sha": "4706dc7331e66afd7194bdc07faf1a3bfdb83859", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f9ed8d4d23cd210f24ca303c72b436bfbe84741f/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9ed8d4d23cd210f24ca303c72b436bfbe84741f/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=f9ed8d4d23cd210f24ca303c72b436bfbe84741f", "patch": "@@ -1,6 +1,6 @@\n use ra_db::{FileId, Cancelable, SyntaxDatabase};\n use ra_syntax::{\n-    TextRange, AstNode, ast, SyntaxKind::{NAME, MODULE},\n+    AstNode, ast,\n     algo::find_node_at_offset,\n };\n \n@@ -32,13 +32,7 @@ pub(crate) fn reference_definition(\n         let scope = fn_descr.scopes(db)?;\n         // First try to resolve the symbol locally\n         if let Some(entry) = scope.resolve_local_name(name_ref) {\n-            let nav = NavigationTarget {\n-                file_id,\n-                name: entry.name().to_string().into(),\n-                range: entry.ptr().range(),\n-                kind: NAME,\n-                ptr: None,\n-            };\n+            let nav = NavigationTarget::from_scope_entry(file_id, &entry);\n             return Ok(vec![nav]);\n         };\n     }\n@@ -79,18 +73,7 @@ fn name_definition(\n             if let Some(child_module) =\n                 hir::source_binder::module_from_declaration(db, file_id, module)?\n             {\n-                let (file_id, _) = child_module.definition_source(db)?;\n-                let name = match child_module.name(db)? {\n-                    Some(name) => name.to_string().into(),\n-                    None => \"\".into(),\n-                };\n-                let nav = NavigationTarget {\n-                    file_id,\n-                    name,\n-                    range: TextRange::offset_len(0.into(), 0.into()),\n-                    kind: MODULE,\n-                    ptr: None,\n-                };\n+                let nav = NavigationTarget::from_module(db, child_module)?;\n                 return Ok(Some(vec![nav]));\n             }\n         }"}, {"sha": "9b06a0e58fcb15539d1df92f0b4a83cfe8d081f5", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9ed8d4d23cd210f24ca303c72b436bfbe84741f/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9ed8d4d23cd210f24ca303c72b436bfbe84741f/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=f9ed8d4d23cd210f24ca303c72b436bfbe84741f", "patch": "@@ -88,11 +88,11 @@ fn doc_text_for(db: &RootDatabase, nav: NavigationTarget) -> Cancelable<Option<S\n \n impl NavigationTarget {\n     fn node(&self, db: &RootDatabase) -> Option<TreePtr<SyntaxNode>> {\n-        let source_file = db.source_file(self.file_id);\n+        let source_file = db.source_file(self.file_id());\n         let source_file = source_file.syntax();\n         let node = source_file\n             .descendants()\n-            .find(|node| node.kind() == self.kind && node.range() == self.range)?\n+            .find(|node| node.kind() == self.kind() && node.range() == self.range())?\n             .to_owned();\n         Some(node)\n     }"}, {"sha": "12bfe17613a7c969ed70d7338a9a34ed23132011", "filename": "crates/ra_ide_api/src/imp.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f9ed8d4d23cd210f24ca303c72b436bfbe84741f/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9ed8d4d23cd210f24ca303c72b436bfbe84741f/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimp.rs?ref=f9ed8d4d23cd210f24ca303c72b436bfbe84741f", "patch": "@@ -11,7 +11,6 @@ use ra_syntax::{\n     TextRange, AstNode, SourceFile,\n     ast::{self, NameOwner},\n     algo::find_node_at_offset,\n-    SyntaxKind::*,\n };\n \n use crate::{\n@@ -109,18 +108,8 @@ impl db::RootDatabase {\n             None => return Ok(Vec::new()),\n             Some(it) => it,\n         };\n-        let (file_id, ast_module) = match module.declaration_source(self)? {\n-            None => return Ok(Vec::new()),\n-            Some(it) => it,\n-        };\n-        let name = ast_module.name().unwrap();\n-        Ok(vec![NavigationTarget {\n-            file_id,\n-            name: name.text().clone(),\n-            range: name.syntax().range(),\n-            kind: MODULE,\n-            ptr: None,\n-        }])\n+        let nav = NavigationTarget::from_module(self, module)?;\n+        Ok(vec![nav])\n     }\n     /// Returns `Vec` for the same reason as `parent_module`\n     pub(crate) fn crate_for(&self, file_id: FileId) -> Cancelable<Vec<CrateId>> {"}, {"sha": "2873bab36a3ae8f9f573e77271ff698e4e5c73d3", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 3, "deletions": 35, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f9ed8d4d23cd210f24ca303c72b436bfbe84741f/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9ed8d4d23cd210f24ca303c72b436bfbe84741f/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=f9ed8d4d23cd210f24ca303c72b436bfbe84741f", "patch": "@@ -34,9 +34,9 @@ mod syntax_highlighting;\n \n use std::{fmt, sync::Arc};\n \n-use ra_syntax::{SmolStr, SourceFile, TreePtr, SyntaxKind, TextRange, TextUnit};\n+use ra_syntax::{SourceFile, TreePtr, TextRange, TextUnit};\n use ra_text_edit::TextEdit;\n-use ra_db::{SyntaxDatabase, FilesDatabase, LocalSyntaxPtr, BaseDatabase};\n+use ra_db::{SyntaxDatabase, FilesDatabase, BaseDatabase};\n use rayon::prelude::*;\n use relative_path::RelativePathBuf;\n use rustc_hash::FxHashMap;\n@@ -50,6 +50,7 @@ use crate::{\n pub use crate::{\n     completion::{CompletionItem, CompletionItemKind, InsertText},\n     runnables::{Runnable, RunnableKind},\n+    navigation_target::NavigationTarget,\n };\n pub use ra_ide_api_light::{\n     Fold, FoldKind, HighlightedRange, Severity, StructureNode,\n@@ -243,39 +244,6 @@ impl Query {\n     }\n }\n \n-/// `NavigationTarget` represents and element in the editor's UI which you can\n-/// click on to navigate to a particular piece of code.\n-///\n-/// Typically, a `NavigationTarget` corresponds to some element in the source\n-/// code, like a function or a struct, but this is not strictly required.\n-#[derive(Debug, Clone)]\n-pub struct NavigationTarget {\n-    file_id: FileId,\n-    name: SmolStr,\n-    kind: SyntaxKind,\n-    range: TextRange,\n-    // Should be DefId ideally\n-    ptr: Option<LocalSyntaxPtr>,\n-}\n-\n-impl NavigationTarget {\n-    pub fn name(&self) -> &SmolStr {\n-        &self.name\n-    }\n-\n-    pub fn kind(&self) -> SyntaxKind {\n-        self.kind\n-    }\n-\n-    pub fn file_id(&self) -> FileId {\n-        self.file_id\n-    }\n-\n-    pub fn range(&self) -> TextRange {\n-        self.range\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct RangeInfo<T> {\n     pub range: TextRange,"}, {"sha": "943e62eb8b475e1cb38d4b4d4e0fd2e9c285d780", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 88, "deletions": 24, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/f9ed8d4d23cd210f24ca303c72b436bfbe84741f/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9ed8d4d23cd210f24ca303c72b436bfbe84741f/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=f9ed8d4d23cd210f24ca303c72b436bfbe84741f", "patch": "@@ -1,27 +1,98 @@\n use ra_db::{FileId, LocalSyntaxPtr, Cancelable};\n use ra_syntax::{\n-    SyntaxNode, AstNode, SmolStr,\n-    ast\n+    SyntaxNode, AstNode, SmolStr, TextRange, ast,\n+    SyntaxKind::{self, NAME},\n };\n use hir::{Def, ModuleSource};\n \n-use crate::{\n-    NavigationTarget,\n-    FileSymbol,\n-    db::RootDatabase,\n-};\n+use crate::{FileSymbol, db::RootDatabase};\n+\n+/// `NavigationTarget` represents and element in the editor's UI which you can\n+/// click on to navigate to a particular piece of code.\n+///\n+/// Typically, a `NavigationTarget` corresponds to some element in the source\n+/// code, like a function or a struct, but this is not strictly required.\n+#[derive(Debug, Clone)]\n+pub struct NavigationTarget {\n+    file_id: FileId,\n+    name: SmolStr,\n+    kind: SyntaxKind,\n+    range: TextRange,\n+    focus_range: Option<TextRange>,\n+    // Should be DefId ideally\n+    ptr: Option<LocalSyntaxPtr>,\n+}\n \n impl NavigationTarget {\n+    pub fn name(&self) -> &SmolStr {\n+        &self.name\n+    }\n+\n+    pub fn kind(&self) -> SyntaxKind {\n+        self.kind\n+    }\n+\n+    pub fn file_id(&self) -> FileId {\n+        self.file_id\n+    }\n+\n+    pub fn range(&self) -> TextRange {\n+        self.range\n+    }\n+\n+    /// A \"most interesting\" range withing the `range`.\n+    ///\n+    /// Typically, `range` is the whole syntax node, including doc comments, and\n+    /// `focus_range` is the range of the identifier.\n+    pub fn focus_range(&self) -> Option<TextRange> {\n+        self.focus_range\n+    }\n+\n     pub(crate) fn from_symbol(symbol: FileSymbol) -> NavigationTarget {\n         NavigationTarget {\n             file_id: symbol.file_id,\n             name: symbol.name.clone(),\n             kind: symbol.ptr.kind(),\n             range: symbol.ptr.range(),\n+            focus_range: None,\n             ptr: Some(symbol.ptr.clone()),\n         }\n     }\n \n+    pub(crate) fn from_scope_entry(\n+        file_id: FileId,\n+        entry: &hir::ScopeEntryWithSyntax,\n+    ) -> NavigationTarget {\n+        NavigationTarget {\n+            file_id,\n+            name: entry.name().to_string().into(),\n+            range: entry.ptr().range(),\n+            focus_range: None,\n+            kind: NAME,\n+            ptr: None,\n+        }\n+    }\n+\n+    pub(crate) fn from_module(\n+        db: &RootDatabase,\n+        module: hir::Module,\n+    ) -> Cancelable<NavigationTarget> {\n+        let (file_id, source) = module.definition_source(db)?;\n+        let name = module\n+            .name(db)?\n+            .map(|it| it.to_string().into())\n+            .unwrap_or_default();\n+        let res = match source {\n+            ModuleSource::SourceFile(node) => {\n+                NavigationTarget::from_syntax(file_id, name, None, node.syntax())\n+            }\n+            ModuleSource::Module(node) => {\n+                NavigationTarget::from_syntax(file_id, name, None, node.syntax())\n+            }\n+        };\n+        Ok(res)\n+    }\n+\n     // TODO once Def::Item is gone, this should be able to always return a NavigationTarget\n     pub(crate) fn from_def(db: &RootDatabase, def: Def) -> Cancelable<Option<NavigationTarget>> {\n         let res = match def {\n@@ -41,37 +112,30 @@ impl NavigationTarget {\n                 let (file_id, node) = f.source(db)?;\n                 NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n-            Def::Module(m) => {\n-                let (file_id, source) = m.definition_source(db)?;\n-                let name = m\n-                    .name(db)?\n-                    .map(|it| it.to_string().into())\n-                    .unwrap_or_default();\n-                match source {\n-                    ModuleSource::SourceFile(node) => {\n-                        NavigationTarget::from_syntax(file_id, name, node.syntax())\n-                    }\n-                    ModuleSource::Module(node) => {\n-                        NavigationTarget::from_syntax(file_id, name, node.syntax())\n-                    }\n-                }\n-            }\n+            Def::Module(m) => NavigationTarget::from_module(db, m)?,\n             Def::Item => return Ok(None),\n         };\n         Ok(Some(res))\n     }\n \n     fn from_named(file_id: FileId, node: &impl ast::NameOwner) -> NavigationTarget {\n         let name = node.name().map(|it| it.text().clone()).unwrap_or_default();\n-        NavigationTarget::from_syntax(file_id, name, node.syntax())\n+        let focus_range = node.name().map(|it| it.syntax().range());\n+        NavigationTarget::from_syntax(file_id, name, focus_range, node.syntax())\n     }\n \n-    fn from_syntax(file_id: FileId, name: SmolStr, node: &SyntaxNode) -> NavigationTarget {\n+    fn from_syntax(\n+        file_id: FileId,\n+        name: SmolStr,\n+        focus_range: Option<TextRange>,\n+        node: &SyntaxNode,\n+    ) -> NavigationTarget {\n         NavigationTarget {\n             file_id,\n             name,\n             kind: node.kind(),\n             range: node.range(),\n+            focus_range,\n             ptr: Some(LocalSyntaxPtr::new(node)),\n         }\n     }"}]}