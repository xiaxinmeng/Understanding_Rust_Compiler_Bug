{"sha": "1956286368809718c70692e422893559ec487c62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NTYyODYzNjg4MDk3MThjNzA2OTJlNDIyODkzNTU5ZWM0ODdjNjI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-09T16:11:44Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-09T16:11:44Z"}, "message": "Add expression scopes for blocks", "tree": {"sha": "949e74c9e03c956a8d7fdaaab6aca9568d75a950", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/949e74c9e03c956a8d7fdaaab6aca9568d75a950"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1956286368809718c70692e422893559ec487c62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1956286368809718c70692e422893559ec487c62", "html_url": "https://github.com/rust-lang/rust/commit/1956286368809718c70692e422893559ec487c62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1956286368809718c70692e422893559ec487c62/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12c7b66a7c6963d42ab5f33a9ac3f0b30e351b69", "url": "https://api.github.com/repos/rust-lang/rust/commits/12c7b66a7c6963d42ab5f33a9ac3f0b30e351b69", "html_url": "https://github.com/rust-lang/rust/commit/12c7b66a7c6963d42ab5f33a9ac3f0b30e351b69"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "210b4a617ffcb607b96c3889e5ebf5271d970406", "filename": "crates/hir_def/src/body/scope.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1956286368809718c70692e422893559ec487c62/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1956286368809718c70692e422893559ec487c62/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs?ref=1956286368809718c70692e422893559ec487c62", "patch": "@@ -9,7 +9,7 @@ use crate::{\n     body::Body,\n     db::DefDatabase,\n     expr::{Expr, ExprId, Pat, PatId, Statement},\n-    DefWithBodyId,\n+    BlockId, DefWithBodyId,\n };\n \n pub type ScopeId = Idx<ScopeData>;\n@@ -39,6 +39,7 @@ impl ScopeEntry {\n #[derive(Debug, PartialEq, Eq)]\n pub struct ScopeData {\n     parent: Option<ScopeId>,\n+    block: Option<BlockId>,\n     entries: Vec<ScopeEntry>,\n }\n \n@@ -61,6 +62,11 @@ impl ExprScopes {\n         &self.scopes[scope].entries\n     }\n \n+    /// If `scope` refers to a block expression scope, returns the corresponding `BlockId`.\n+    pub fn block(&self, scope: ScopeId) -> Option<BlockId> {\n+        self.scopes[scope].block\n+    }\n+\n     pub fn scope_chain(&self, scope: Option<ScopeId>) -> impl Iterator<Item = ScopeId> + '_ {\n         std::iter::successors(scope, move |&scope| self.scopes[scope].parent)\n     }\n@@ -79,11 +85,15 @@ impl ExprScopes {\n     }\n \n     fn root_scope(&mut self) -> ScopeId {\n-        self.scopes.alloc(ScopeData { parent: None, entries: vec![] })\n+        self.scopes.alloc(ScopeData { parent: None, block: None, entries: vec![] })\n     }\n \n     fn new_scope(&mut self, parent: ScopeId) -> ScopeId {\n-        self.scopes.alloc(ScopeData { parent: Some(parent), entries: vec![] })\n+        self.scopes.alloc(ScopeData { parent: Some(parent), block: None, entries: vec![] })\n+    }\n+\n+    fn new_block_scope(&mut self, parent: ScopeId, block: BlockId) -> ScopeId {\n+        self.scopes.alloc(ScopeData { parent: Some(parent), block: Some(block), entries: vec![] })\n     }\n \n     fn add_bindings(&mut self, body: &Body, scope: ScopeId, pat: PatId) {\n@@ -136,7 +146,11 @@ fn compute_block_scopes(\n fn compute_expr_scopes(expr: ExprId, body: &Body, scopes: &mut ExprScopes, scope: ScopeId) {\n     scopes.set_scope(expr, scope);\n     match &body[expr] {\n-        Expr::Block { statements, tail, .. } => {\n+        Expr::Block { statements, tail, id, .. } => {\n+            let scope = scopes.new_block_scope(scope, *id);\n+            // Overwrite the old scope for the block expr, so that every block scope can be found\n+            // via the block itself (important for blocks that only contain items, no expressions).\n+            scopes.set_scope(expr, scope);\n             compute_block_scopes(&statements, *tail, body, scopes, scope);\n         }\n         Expr::For { iterable, pat, body: body_expr, .. } => {"}]}