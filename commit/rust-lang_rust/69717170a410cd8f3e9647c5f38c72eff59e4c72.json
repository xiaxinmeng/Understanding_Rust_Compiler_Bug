{"sha": "69717170a410cd8f3e9647c5f38c72eff59e4c72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NzE3MTcwYTQxMGNkOGYzZTk2NDdjNWYzOGM3MmVmZjU5ZTRjNzI=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-17T12:48:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-17T12:48:51Z"}, "message": "Rollup merge of #40456 - frewsxcv:frewsxcv-docs-function-parens, r=GuillaumeGomez\n\nRemove function invokation parens from documentation links.\n\nThis was never established as a convention we should follow in the 'More\nAPI Documentation Conventions' RFC:\n\nhttps://github.com/rust-lang/rfcs/blob/master/text/1574-more-api-documentation-conventions.md", "tree": {"sha": "5cd7e118760ba07a67235c947c6b2985ae67b63f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cd7e118760ba07a67235c947c6b2985ae67b63f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69717170a410cd8f3e9647c5f38c72eff59e4c72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69717170a410cd8f3e9647c5f38c72eff59e4c72", "html_url": "https://github.com/rust-lang/rust/commit/69717170a410cd8f3e9647c5f38c72eff59e4c72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69717170a410cd8f3e9647c5f38c72eff59e4c72/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "739d89aef5c8a0fbe6314d0dc9a681db1ff136c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/739d89aef5c8a0fbe6314d0dc9a681db1ff136c4", "html_url": "https://github.com/rust-lang/rust/commit/739d89aef5c8a0fbe6314d0dc9a681db1ff136c4"}, {"sha": "e7b0f2badf7c3393f1b36339b121054d05353442", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7b0f2badf7c3393f1b36339b121054d05353442", "html_url": "https://github.com/rust-lang/rust/commit/e7b0f2badf7c3393f1b36339b121054d05353442"}], "stats": {"total": 982, "additions": 491, "deletions": 491}, "files": [{"sha": "3dd9aa3885bc0f84c710f924fd7bc0ffc5dc1c30", "filename": "src/doc/book/src/ffi.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Fdoc%2Fbook%2Fsrc%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Fdoc%2Fbook%2Fsrc%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fffi.md?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -687,7 +687,7 @@ attribute turns off Rust's name mangling, so that it is easier to link to.\n \n It\u2019s important to be mindful of `panic!`s when working with FFI. A `panic!`\n across an FFI boundary is undefined behavior. If you\u2019re writing code that may\n-panic, you should run it in a closure with [`catch_unwind()`]:\n+panic, you should run it in a closure with [`catch_unwind`]:\n \n ```rust\n use std::panic::catch_unwind;\n@@ -706,11 +706,11 @@ pub extern fn oh_no() -> i32 {\n fn main() {}\n ```\n \n-Please note that [`catch_unwind()`] will only catch unwinding panics, not\n-those who abort the process. See the documentation of [`catch_unwind()`]\n+Please note that [`catch_unwind`] will only catch unwinding panics, not\n+those who abort the process. See the documentation of [`catch_unwind`]\n for more information.\n \n-[`catch_unwind()`]: ../std/panic/fn.catch_unwind.html\n+[`catch_unwind`]: ../std/panic/fn.catch_unwind.html\n \n # Representing opaque structs\n "}, {"sha": "bbb43b4a9ef4bac098bf9917fe59db3e091048d8", "filename": "src/doc/book/src/guessing-game.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Fdoc%2Fbook%2Fsrc%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Fdoc%2Fbook%2Fsrc%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fguessing-game.md?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -217,7 +217,7 @@ The next part will use this handle to get input from the user:\n .read_line(&mut guess)\n ```\n \n-Here, we call the [`read_line()`][read_line] method on our handle.\n+Here, we call the [`read_line`][read_line] method on our handle.\n [Methods][method] are like associated functions, but are only available on a\n particular instance of a type, rather than the type itself. We\u2019re also passing\n one argument to `read_line()`: `&mut guess`."}, {"sha": "eb449b266067985ce09f91215e52eed8b162f28a", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -13,7 +13,7 @@\n //! Single-threaded reference-counting pointers.\n //!\n //! The type [`Rc<T>`][`Rc`] provides shared ownership of a value of type `T`,\n-//! allocated in the heap. Invoking [`clone()`][clone] on [`Rc`] produces a new\n+//! allocated in the heap. Invoking [`clone`][clone] on [`Rc`] produces a new\n //! pointer to the same value in the heap. When the last [`Rc`] pointer to a\n //! given value is destroyed, the pointed-to value is also destroyed.\n //!\n@@ -30,7 +30,7 @@\n //! threads. If you need multi-threaded, atomic reference counting, use\n //! [`sync::Arc`][arc].\n //!\n-//! The [`downgrade()`][downgrade] method can be used to create a non-owning\n+//! The [`downgrade`][downgrade] method can be used to create a non-owning\n //! [`Weak`] pointer. A [`Weak`] pointer can be [`upgrade`][upgrade]d\n //! to an [`Rc`], but this will return [`None`] if the value has\n //! already been dropped."}, {"sha": "519117ff9e5196ec1a686f5c4e2513c49d9d8707", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -218,10 +218,10 @@ pub struct BinaryHeap<T> {\n     data: Vec<T>,\n }\n \n-/// A container object that represents the result of the [`peek_mut()`] method\n+/// A container object that represents the result of the [`peek_mut`] method\n /// on `BinaryHeap`. See its documentation for details.\n ///\n-/// [`peek_mut()`]: struct.BinaryHeap.html#method.peek_mut\n+/// [`peek_mut`]: struct.BinaryHeap.html#method.peek_mut\n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n pub struct PeekMut<'a, T: 'a + Ord> {\n     heap: &'a mut BinaryHeap<T>,"}, {"sha": "11fc1d553f28e7a60bda0b2eee9989fd6a0838cd", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -73,10 +73,10 @@\n //! the element type of the slice is `i32`, the element type of the iterator is\n //! `&mut i32`.\n //!\n-//! * [`.iter()`] and [`.iter_mut()`] are the explicit methods to return the default\n+//! * [`.iter`] and [`.iter_mut`] are the explicit methods to return the default\n //!   iterators.\n-//! * Further methods that return iterators are [`.split()`], [`.splitn()`],\n-//!   [`.chunks()`], [`.windows()`] and more.\n+//! * Further methods that return iterators are [`.split`], [`.splitn`],\n+//!   [`.chunks`], [`.windows`] and more.\n //!\n //! *[See also the slice primitive type](../../std/primitive.slice.html).*\n //!\n@@ -85,12 +85,12 @@\n //! [`Ord`]: ../../std/cmp/trait.Ord.html\n //! [`Iter`]: struct.Iter.html\n //! [`Hash`]: ../../std/hash/trait.Hash.html\n-//! [`.iter()`]: ../../std/primitive.slice.html#method.iter\n-//! [`.iter_mut()`]: ../../std/primitive.slice.html#method.iter_mut\n-//! [`.split()`]: ../../std/primitive.slice.html#method.split\n-//! [`.splitn()`]: ../../std/primitive.slice.html#method.splitn\n-//! [`.chunks()`]: ../../std/primitive.slice.html#method.chunks\n-//! [`.windows()`]: ../../std/primitive.slice.html#method.windows\n+//! [`.iter`]: ../../std/primitive.slice.html#method.iter\n+//! [`.iter_mut`]: ../../std/primitive.slice.html#method.iter_mut\n+//! [`.split`]: ../../std/primitive.slice.html#method.split\n+//! [`.splitn`]: ../../std/primitive.slice.html#method.splitn\n+//! [`.chunks`]: ../../std/primitive.slice.html#method.chunks\n+//! [`.windows`]: ../../std/primitive.slice.html#method.windows\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n // Many of the usings in this module are only used in the test configuration.\n@@ -368,9 +368,9 @@ impl<T> [T] {\n     }\n \n     /// Returns a mutable reference to an element or subslice depending on the\n-    /// type of index (see [`get()`]) or `None` if the index is out of bounds.\n+    /// type of index (see [`get`]) or `None` if the index is out of bounds.\n     ///\n-    /// [`get()`]: #method.get\n+    /// [`get`]: #method.get\n     ///\n     /// # Examples\n     ///"}, {"sha": "90e54a383d623730a0612d802f79473110e740a0", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -298,9 +298,9 @@ impl str {\n     /// excluding `end`.\n     ///\n     /// To get a mutable string slice instead, see the\n-    /// [`slice_mut_unchecked()`] method.\n+    /// [`slice_mut_unchecked`] method.\n     ///\n-    /// [`slice_mut_unchecked()`]: #method.slice_mut_unchecked\n+    /// [`slice_mut_unchecked`]: #method.slice_mut_unchecked\n     ///\n     /// # Safety\n     ///\n@@ -341,9 +341,9 @@ impl str {\n     /// excluding `end`.\n     ///\n     /// To get an immutable string slice instead, see the\n-    /// [`slice_unchecked()`] method.\n+    /// [`slice_unchecked`] method.\n     ///\n-    /// [`slice_unchecked()`]: #method.slice_unchecked\n+    /// [`slice_unchecked`]: #method.slice_unchecked\n     ///\n     /// # Safety\n     ///\n@@ -367,10 +367,10 @@ impl str {\n     /// The two slices returned go from the start of the string slice to `mid`,\n     /// and from `mid` to the end of the string slice.\n     ///\n-    /// To get mutable string slices instead, see the [`split_at_mut()`]\n+    /// To get mutable string slices instead, see the [`split_at_mut`]\n     /// method.\n     ///\n-    /// [`split_at_mut()`]: #method.split_at_mut\n+    /// [`split_at_mut`]: #method.split_at_mut\n     ///\n     /// # Panics\n     ///\n@@ -403,9 +403,9 @@ impl str {\n     /// The two slices returned go from the start of the string slice to `mid`,\n     /// and from `mid` to the end of the string slice.\n     ///\n-    /// To get immutable string slices instead, see the [`split_at()`] method.\n+    /// To get immutable string slices instead, see the [`split_at`] method.\n     ///\n-    /// [`split_at()`]: #method.split_at\n+    /// [`split_at`]: #method.split_at\n     ///\n     /// # Panics\n     ///\n@@ -824,10 +824,10 @@ impl str {\n     /// [`DoubleEndedIterator`]: iter/trait.DoubleEndedIterator.html\n     ///\n     /// If the pattern allows a reverse search but its results might differ\n-    /// from a forward search, the [`rsplit()`] method can be used.\n+    /// from a forward search, the [`rsplit`] method can be used.\n     ///\n     /// [`char`]: primitive.char.html\n-    /// [`rsplit()`]: #method.rsplit\n+    /// [`rsplit`]: #method.rsplit\n     ///\n     /// # Examples\n     ///\n@@ -912,9 +912,9 @@ impl str {\n     /// assert_eq!(d, &[\"a\", \"b\", \"c\"]);\n     /// ```\n     ///\n-    /// Use [`split_whitespace()`] for this behavior.\n+    /// Use [`split_whitespace`] for this behavior.\n     ///\n-    /// [`split_whitespace()`]: #method.split_whitespace\n+    /// [`split_whitespace`]: #method.split_whitespace\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn split<'a, P: Pattern<'a>>(&'a self, pat: P) -> Split<'a, P> {\n         core_str::StrExt::split(self, pat)\n@@ -936,9 +936,9 @@ impl str {\n     ///\n     /// [`DoubleEndedIterator`]: iter/trait.DoubleEndedIterator.html\n     ///\n-    /// For iterating from the front, the [`split()`] method can be used.\n+    /// For iterating from the front, the [`split`] method can be used.\n     ///\n-    /// [`split()`]: #method.split\n+    /// [`split`]: #method.split\n     ///\n     /// # Examples\n     ///\n@@ -977,10 +977,10 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines the\n     /// split.\n     ///\n-    /// Equivalent to [`split()`], except that the trailing substring\n+    /// Equivalent to [`split`], except that the trailing substring\n     /// is skipped if empty.\n     ///\n-    /// [`split()`]: #method.split\n+    /// [`split`]: #method.split\n     ///\n     /// This method can be used for string data that is _terminated_,\n     /// rather than _separated_ by a pattern.\n@@ -995,9 +995,9 @@ impl str {\n     /// [`char`]: primitive.char.html\n     ///\n     /// If the pattern allows a reverse search but its results might differ\n-    /// from a forward search, the [`rsplit_terminator()`] method can be used.\n+    /// from a forward search, the [`rsplit_terminator`] method can be used.\n     ///\n-    /// [`rsplit_terminator()`]: #method.rsplit_terminator\n+    /// [`rsplit_terminator`]: #method.rsplit_terminator\n     ///\n     /// # Examples\n     ///\n@@ -1025,10 +1025,10 @@ impl str {\n     ///\n     /// [`char`]: primitive.char.html\n     ///\n-    /// Equivalent to [`split()`], except that the trailing substring is\n+    /// Equivalent to [`split`], except that the trailing substring is\n     /// skipped if empty.\n     ///\n-    /// [`split()`]: #method.split\n+    /// [`split`]: #method.split\n     ///\n     /// This method can be used for string data that is _terminated_,\n     /// rather than _separated_ by a pattern.\n@@ -1039,10 +1039,10 @@ impl str {\n     /// reverse search, and it will be double ended if a forward/reverse\n     /// search yields the same elements.\n     ///\n-    /// For iterating from the front, the [`split_terminator()`] method can be\n+    /// For iterating from the front, the [`split_terminator`] method can be\n     /// used.\n     ///\n-    /// [`split_terminator()`]: #method.split_terminator\n+    /// [`split_terminator`]: #method.split_terminator\n     ///\n     /// # Examples\n     ///\n@@ -1076,10 +1076,10 @@ impl str {\n     /// The returned iterator will not be double ended, because it is\n     /// not efficient to support.\n     ///\n-    /// If the pattern allows a reverse search, the [`rsplitn()`] method can be\n+    /// If the pattern allows a reverse search, the [`rsplitn`] method can be\n     /// used.\n     ///\n-    /// [`rsplitn()`]: #method.rsplitn\n+    /// [`rsplitn`]: #method.rsplitn\n     ///\n     /// # Examples\n     ///\n@@ -1127,9 +1127,9 @@ impl str {\n     /// The returned iterator will not be double ended, because it is not\n     /// efficient to support.\n     ///\n-    /// For splitting from the front, the [`splitn()`] method can be used.\n+    /// For splitting from the front, the [`splitn`] method can be used.\n     ///\n-    /// [`splitn()`]: #method.splitn\n+    /// [`splitn`]: #method.splitn\n     ///\n     /// # Examples\n     ///\n@@ -1177,9 +1177,9 @@ impl str {\n     /// [`char`]: primitive.char.html\n     ///\n     /// If the pattern allows a reverse search but its results might differ\n-    /// from a forward search, the [`rmatches()`] method can be used.\n+    /// from a forward search, the [`rmatches`] method can be used.\n     ///\n-    /// [`rmatches()`]: #method.rmatches\n+    /// [`rmatches`]: #method.rmatches\n     ///\n     /// # Examples\n     ///\n@@ -1213,9 +1213,9 @@ impl str {\n     ///\n     /// [`DoubleEndedIterator`]: iter/trait.DoubleEndedIterator.html\n     ///\n-    /// For iterating from the front, the [`matches()`] method can be used.\n+    /// For iterating from the front, the [`matches`] method can be used.\n     ///\n-    /// [`matches()`]: #method.matches\n+    /// [`matches`]: #method.matches\n     ///\n     /// # Examples\n     ///\n@@ -1255,9 +1255,9 @@ impl str {\n     /// [`DoubleEndedIterator`]: iter/trait.DoubleEndedIterator.html\n     ///\n     /// If the pattern allows a reverse search but its results might differ\n-    /// from a forward search, the [`rmatch_indices()`] method can be used.\n+    /// from a forward search, the [`rmatch_indices`] method can be used.\n     ///\n-    /// [`rmatch_indices()`]: #method.rmatch_indices\n+    /// [`rmatch_indices`]: #method.rmatch_indices\n     ///\n     /// # Examples\n     ///\n@@ -1297,9 +1297,9 @@ impl str {\n     ///\n     /// [`DoubleEndedIterator`]: iter/trait.DoubleEndedIterator.html\n     ///\n-    /// For iterating from the front, the [`match_indices()`] method can be used.\n+    /// For iterating from the front, the [`match_indices`] method can be used.\n     ///\n-    /// [`match_indices()`]: #method.match_indices\n+    /// [`match_indices`]: #method.match_indices\n     ///\n     /// # Examples\n     ///"}, {"sha": "0ee4c8b8e95a60bec3e8d06cea73460f03bcb274", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -89,8 +89,8 @@ use boxed::Box;\n /// let hello = String::from(\"Hello, world!\");\n /// ```\n ///\n-/// You can append a [`char`] to a `String` with the [`push()`] method, and\n-/// append a [`&str`] with the [`push_str()`] method:\n+/// You can append a [`char`] to a `String` with the [`push`] method, and\n+/// append a [`&str`] with the [`push_str`] method:\n ///\n /// ```\n /// let mut hello = String::from(\"Hello, \");\n@@ -100,11 +100,11 @@ use boxed::Box;\n /// ```\n ///\n /// [`char`]: ../../std/primitive.char.html\n-/// [`push()`]: #method.push\n-/// [`push_str()`]: #method.push_str\n+/// [`push`]: #method.push\n+/// [`push_str`]: #method.push_str\n ///\n /// If you have a vector of UTF-8 bytes, you can create a `String` from it with\n-/// the [`from_utf8()`] method:\n+/// the [`from_utf8`] method:\n ///\n /// ```\n /// // some bytes, in a vector\n@@ -116,7 +116,7 @@ use boxed::Box;\n /// assert_eq!(\"\ud83d\udc96\", sparkle_heart);\n /// ```\n ///\n-/// [`from_utf8()`]: #method.from_utf8\n+/// [`from_utf8`]: #method.from_utf8\n ///\n /// # UTF-8\n ///\n@@ -136,11 +136,11 @@ use boxed::Box;\n /// Indexing is intended to be a constant-time operation, but UTF-8 encoding\n /// does not allow us to do this. Furthermore, it's not clear what sort of\n /// thing the index should return: a byte, a codepoint, or a grapheme cluster.\n-/// The [`bytes()`] and [`chars()`] methods return iterators over the first\n+/// The [`bytes`] and [`chars`] methods return iterators over the first\n /// two, respectively.\n ///\n-/// [`bytes()`]: #method.bytes\n-/// [`chars()`]: #method.chars\n+/// [`bytes`]: #method.bytes\n+/// [`chars`]: #method.chars\n ///\n /// # Deref\n ///\n@@ -174,7 +174,7 @@ use boxed::Box;\n ///\n /// This buffer is always stored on the heap.\n ///\n-/// You can look at these with the [`as_ptr()`], [`len()`], and [`capacity()`]\n+/// You can look at these with the [`as_ptr`], [`len`], and [`capacity`]\n /// methods:\n ///\n /// ```\n@@ -200,9 +200,9 @@ use boxed::Box;\n /// assert_eq!(String::from(\"Once upon a time...\"), s);\n /// ```\n ///\n-/// [`as_ptr()`]: #method.as_ptr\n-/// [`len()`]: #method.len\n-/// [`capacity()`]: #method.capacity\n+/// [`as_ptr`]: #method.as_ptr\n+/// [`len`]: #method.len\n+/// [`capacity`]: #method.capacity\n ///\n /// If a `String` has enough capacity, adding elements to it will not\n /// re-allocate. For example, consider this program:\n@@ -231,7 +231,7 @@ use boxed::Box;\n ///\n /// At first, we have no memory allocated at all, but as we append to the\n /// string, it increases its capacity appropriately. If we instead use the\n-/// [`with_capacity()`] method to allocate the correct capacity initially:\n+/// [`with_capacity`] method to allocate the correct capacity initially:\n ///\n /// ```\n /// let mut s = String::with_capacity(25);\n@@ -244,7 +244,7 @@ use boxed::Box;\n /// }\n /// ```\n ///\n-/// [`with_capacity()`]: #method.with_capacity\n+/// [`with_capacity`]: #method.with_capacity\n ///\n /// We end up with a different output:\n ///\n@@ -266,25 +266,25 @@ pub struct String {\n \n /// A possible error value when converting a `String` from a UTF-8 byte vector.\n ///\n-/// This type is the error type for the [`from_utf8()`] method on [`String`]. It\n+/// This type is the error type for the [`from_utf8`] method on [`String`]. It\n /// is designed in such a way to carefully avoid reallocations: the\n-/// [`into_bytes()`] method will give back the byte vector that was used in the\n+/// [`into_bytes`] method will give back the byte vector that was used in the\n /// conversion attempt.\n ///\n-/// [`from_utf8()`]: struct.String.html#method.from_utf8\n+/// [`from_utf8`]: struct.String.html#method.from_utf8\n /// [`String`]: struct.String.html\n-/// [`into_bytes()`]: struct.FromUtf8Error.html#method.into_bytes\n+/// [`into_bytes`]: struct.FromUtf8Error.html#method.into_bytes\n ///\n /// The [`Utf8Error`] type provided by [`std::str`] represents an error that may\n /// occur when converting a slice of [`u8`]s to a [`&str`]. In this sense, it's\n /// an analogue to `FromUtf8Error`, and you can get one from a `FromUtf8Error`\n-/// through the [`utf8_error()`] method.\n+/// through the [`utf8_error`] method.\n ///\n /// [`Utf8Error`]: ../../std/str/struct.Utf8Error.html\n /// [`std::str`]: ../../std/str/index.html\n /// [`u8`]: ../../std/primitive.u8.html\n /// [`&str`]: ../../std/primitive.str.html\n-/// [`utf8_error()`]: #method.utf8_error\n+/// [`utf8_error`]: #method.utf8_error\n ///\n /// # Examples\n ///\n@@ -308,9 +308,9 @@ pub struct FromUtf8Error {\n \n /// A possible error value when converting a `String` from a UTF-16 byte slice.\n ///\n-/// This type is the error type for the [`from_utf16()`] method on [`String`].\n+/// This type is the error type for the [`from_utf16`] method on [`String`].\n ///\n-/// [`from_utf16()`]: struct.String.html#method.from_utf16\n+/// [`from_utf16`]: struct.String.html#method.from_utf16\n /// [`String`]: struct.String.html\n ///\n /// # Examples\n@@ -335,10 +335,10 @@ impl String {\n     /// buffer. While that means that this initial operation is very\n     /// inexpensive, but may cause excessive allocation later, when you add\n     /// data. If you have an idea of how much data the `String` will hold,\n-    /// consider the [`with_capacity()`] method to prevent excessive\n+    /// consider the [`with_capacity`] method to prevent excessive\n     /// re-allocation.\n     ///\n-    /// [`with_capacity()`]: #method.with_capacity\n+    /// [`with_capacity`]: #method.with_capacity\n     ///\n     /// # Examples\n     ///\n@@ -356,18 +356,18 @@ impl String {\n     /// Creates a new empty `String` with a particular capacity.\n     ///\n     /// `String`s have an internal buffer to hold their data. The capacity is\n-    /// the length of that buffer, and can be queried with the [`capacity()`]\n+    /// the length of that buffer, and can be queried with the [`capacity`]\n     /// method. This method creates an empty `String`, but one with an initial\n     /// buffer that can hold `capacity` bytes. This is useful when you may be\n     /// appending a bunch of data to the `String`, reducing the number of\n     /// reallocations it needs to do.\n     ///\n-    /// [`capacity()`]: #method.capacity\n+    /// [`capacity`]: #method.capacity\n     ///\n     /// If the given capacity is `0`, no allocation will occur, and this method\n-    /// is identical to the [`new()`] method.\n+    /// is identical to the [`new`] method.\n     ///\n-    /// [`new()`]: #method.new\n+    /// [`new`]: #method.new\n     ///\n     /// # Examples\n     ///\n@@ -420,18 +420,18 @@ impl String {\n     ///\n     /// If you are sure that the byte slice is valid UTF-8, and you don't want\n     /// to incur the overhead of the validity check, there is an unsafe version\n-    /// of this function, [`from_utf8_unchecked()`], which has the same behavior\n+    /// of this function, [`from_utf8_unchecked`], which has the same behavior\n     /// but skips the check.\n     ///\n-    /// [`from_utf8_unchecked()`]: struct.String.html#method.from_utf8_unchecked\n+    /// [`from_utf8_unchecked`]: struct.String.html#method.from_utf8_unchecked\n     ///\n     /// This method will take care to not copy the vector, for efficiency's\n     /// sake.\n     ///\n     /// If you need a `&str` instead of a `String`, consider\n-    /// [`str::from_utf8()`].\n+    /// [`str::from_utf8`].\n     ///\n-    /// [`str::from_utf8()`]: ../../std/str/fn.from_utf8.html\n+    /// [`str::from_utf8`]: ../../std/str/fn.from_utf8.html\n     ///\n     /// The inverse of this method is [`as_bytes`].\n     ///\n@@ -497,10 +497,10 @@ impl String {\n     ///\n     /// If you are sure that the byte slice is valid UTF-8, and you don't want\n     /// to incur the overhead of the conversion, there is an unsafe version\n-    /// of this function, [`from_utf8_unchecked()`], which has the same behavior\n+    /// of this function, [`from_utf8_unchecked`], which has the same behavior\n     /// but skips the checks.\n     ///\n-    /// [`from_utf8_unchecked()`]: struct.String.html#method.from_utf8_unchecked\n+    /// [`from_utf8_unchecked`]: struct.String.html#method.from_utf8_unchecked\n     ///\n     /// This function returns a [`Cow<'a, str>`]. If our byte slice is invalid\n     /// UTF-8, then we need to insert the replacement characters, which will\n@@ -738,9 +738,9 @@ impl String {\n     /// Converts a vector of bytes to a `String` without checking that the\n     /// string contains valid UTF-8.\n     ///\n-    /// See the safe version, [`from_utf8()`], for more details.\n+    /// See the safe version, [`from_utf8`], for more details.\n     ///\n-    /// [`from_utf8()`]: struct.String.html#method.from_utf8\n+    /// [`from_utf8`]: struct.String.html#method.from_utf8\n     ///\n     /// # Safety\n     ///\n@@ -845,10 +845,10 @@ impl String {\n     /// The capacity may be increased by more than `additional` bytes if it\n     /// chooses, to prevent frequent reallocations.\n     ///\n-    /// If you do not want this \"at least\" behavior, see the [`reserve_exact()`]\n+    /// If you do not want this \"at least\" behavior, see the [`reserve_exact`]\n     /// method.\n     ///\n-    /// [`reserve_exact()`]: #method.reserve_exact\n+    /// [`reserve_exact`]: #method.reserve_exact\n     ///\n     /// # Panics\n     ///\n@@ -892,10 +892,10 @@ impl String {\n     /// Ensures that this `String`'s capacity is `additional` bytes\n     /// larger than its length.\n     ///\n-    /// Consider using the [`reserve()`] method unless you absolutely know\n+    /// Consider using the [`reserve`] method unless you absolutely know\n     /// better than the allocator.\n     ///\n-    /// [`reserve()`]: #method.reserve\n+    /// [`reserve`]: #method.reserve\n     ///\n     /// # Panics\n     ///\n@@ -1699,9 +1699,9 @@ impl<'a> Add<&'a str> for String {\n \n /// Implements the `+=` operator for appending to a `String`.\n ///\n-/// This has the same behavior as the [`push_str()`] method.\n+/// This has the same behavior as the [`push_str`] method.\n ///\n-/// [`push_str()`]: struct.String.html#method.push_str\n+/// [`push_str`]: struct.String.html#method.push_str\n #[stable(feature = \"stringaddassign\", since = \"1.12.0\")]\n impl<'a> AddAssign<&'a str> for String {\n     #[inline]\n@@ -1830,14 +1830,14 @@ impl ops::DerefMut for String {\n ///\n /// This `enum` is slightly awkward: it will never actually exist. This error is\n /// part of the type signature of the implementation of [`FromStr`] on\n-/// [`String`]. The return type of [`from_str()`], requires that an error be\n+/// [`String`]. The return type of [`from_str`], requires that an error be\n /// defined, but, given that a [`String`] can always be made into a new\n /// [`String`] without error, this type will never actually be returned. As\n /// such, it is only here to satisfy said signature, and is useless otherwise.\n ///\n /// [`FromStr`]: ../../std/str/trait.FromStr.html\n /// [`String`]: struct.String.html\n-/// [`from_str()`]: ../../std/str/trait.FromStr.html#tymethod.from_str\n+/// [`from_str`]: ../../std/str/trait.FromStr.html#tymethod.from_str\n #[stable(feature = \"str_parse_error\", since = \"1.5.0\")]\n #[derive(Copy)]\n pub enum ParseError {}\n@@ -2058,10 +2058,10 @@ impl fmt::Write for String {\n \n /// A draining iterator for `String`.\n ///\n-/// This struct is created by the [`drain()`] method on [`String`]. See its\n+/// This struct is created by the [`drain`] method on [`String`]. See its\n /// documentation for more.\n ///\n-/// [`drain()`]: struct.String.html#method.drain\n+/// [`drain`]: struct.String.html#method.drain\n /// [`String`]: struct.String.html\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n pub struct Drain<'a> {"}, {"sha": "f3cd5eee5c1c815a30a459a042804c0e2e76eac7", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -16,7 +16,7 @@\n //!\n //! # Examples\n //!\n-//! You can explicitly create a [`Vec<T>`] with [`new()`]:\n+//! You can explicitly create a [`Vec<T>`] with [`new`]:\n //!\n //! ```\n //! let v: Vec<i32> = Vec::new();\n@@ -58,7 +58,7 @@\n //! ```\n //!\n //! [`Vec<T>`]: ../../std/vec/struct.Vec.html\n-//! [`new()`]: ../../std/vec/struct.Vec.html#method.new\n+//! [`new`]: ../../std/vec/struct.Vec.html#method.new\n //! [`push`]: ../../std/vec/struct.Vec.html#method.push\n //! [`Index`]: ../../std/ops/trait.Index.html\n //! [`IndexMut`]: ../../std/ops/trait.IndexMut.html\n@@ -216,19 +216,19 @@ use Bound::{Excluded, Included, Unbounded};\n /// The pointer will never be null, so this type is null-pointer-optimized.\n ///\n /// However, the pointer may not actually point to allocated memory. In particular,\n-/// if you construct a `Vec` with capacity 0 via [`Vec::new()`], [`vec![]`][`vec!`],\n-/// [`Vec::with_capacity(0)`][`Vec::with_capacity`], or by calling [`shrink_to_fit()`]\n+/// if you construct a `Vec` with capacity 0 via [`Vec::new`], [`vec![]`][`vec!`],\n+/// [`Vec::with_capacity(0)`][`Vec::with_capacity`], or by calling [`shrink_to_fit`]\n /// on an empty Vec, it will not allocate memory. Similarly, if you store zero-sized\n /// types inside a `Vec`, it will not allocate space for them. *Note that in this case\n-/// the `Vec` may not report a [`capacity()`] of 0*. `Vec` will allocate if and only\n-/// if [`mem::size_of::<T>()`]` * capacity() > 0`. In general, `Vec`'s allocation\n+/// the `Vec` may not report a [`capacity`] of 0*. `Vec` will allocate if and only\n+/// if [`mem::size_of::<T>`]` * capacity() > 0`. In general, `Vec`'s allocation\n /// details are subtle enough that it is strongly recommended that you only\n /// free memory allocated by a `Vec` by creating a new `Vec` and dropping it.\n ///\n /// If a `Vec` *has* allocated memory, then the memory it points to is on the heap\n /// (as defined by the allocator Rust is configured to use by default), and its\n-/// pointer points to [`len()`] initialized elements in order (what you would see\n-/// if you coerced it to a slice), followed by [`capacity()`]` - `[`len()`]\n+/// pointer points to [`len`] initialized elements in order (what you would see\n+/// if you coerced it to a slice), followed by [`capacity`]` - `[`len`]\n /// logically uninitialized elements.\n ///\n /// `Vec` will never perform a \"small optimization\" where elements are actually\n@@ -244,13 +244,13 @@ use Bound::{Excluded, Included, Unbounded};\n ///\n /// `Vec` will never automatically shrink itself, even if completely empty. This\n /// ensures no unnecessary allocations or deallocations occur. Emptying a `Vec`\n-/// and then filling it back up to the same [`len()`] should incur no calls to\n+/// and then filling it back up to the same [`len`] should incur no calls to\n /// the allocator. If you wish to free up unused memory, use\n-/// [`shrink_to_fit`][`shrink_to_fit()`].\n+/// [`shrink_to_fit`][`shrink_to_fit`].\n ///\n /// [`push`] and [`insert`] will never (re)allocate if the reported capacity is\n /// sufficient. [`push`] and [`insert`] *will* (re)allocate if\n-/// [`len()`]` == `[`capacity()`]. That is, the reported capacity is completely\n+/// [`len`]` == `[`capacity`]. That is, the reported capacity is completely\n /// accurate, and can be relied on. It can even be used to manually free the memory\n /// allocated by a `Vec` if desired. Bulk insertion methods *may* reallocate, even\n /// when not necessary.\n@@ -262,7 +262,7 @@ use Bound::{Excluded, Included, Unbounded};\n ///\n /// `vec![x; n]`, `vec![a, b, c, d]`, and\n /// [`Vec::with_capacity(n)`][`Vec::with_capacity`], will all produce a `Vec`\n-/// with exactly the requested capacity. If [`len()`]` == `[`capacity()`],\n+/// with exactly the requested capacity. If [`len`]` == `[`capacity`],\n /// (as is the case for the [`vec!`] macro), then a `Vec<T>` can be converted to\n /// and from a [`Box<[T]>`][owned slice] without reallocating or moving the elements.\n ///\n@@ -283,11 +283,11 @@ use Bound::{Excluded, Included, Unbounded};\n /// [`String`]: ../../std/string/struct.String.html\n /// [`&str`]: ../../std/primitive.str.html\n /// [`Vec::with_capacity`]: ../../std/vec/struct.Vec.html#method.with_capacity\n-/// [`Vec::new()`]: ../../std/vec/struct.Vec.html#method.new\n-/// [`shrink_to_fit()`]: ../../std/vec/struct.Vec.html#method.shrink_to_fit\n-/// [`capacity()`]: ../../std/vec/struct.Vec.html#method.capacity\n-/// [`mem::size_of::<T>()`]: ../../std/mem/fn.size_of.html\n-/// [`len()`]: ../../std/vec/struct.Vec.html#method.len\n+/// [`Vec::new`]: ../../std/vec/struct.Vec.html#method.new\n+/// [`shrink_to_fit`]: ../../std/vec/struct.Vec.html#method.shrink_to_fit\n+/// [`capacity`]: ../../std/vec/struct.Vec.html#method.capacity\n+/// [`mem::size_of::<T>`]: ../../std/mem/fn.size_of.html\n+/// [`len`]: ../../std/vec/struct.Vec.html#method.len\n /// [`push`]: ../../std/vec/struct.Vec.html#method.push\n /// [`insert`]: ../../std/vec/struct.Vec.html#method.insert\n /// [`reserve`]: ../../std/vec/struct.Vec.html#method.reserve\n@@ -504,12 +504,12 @@ impl<T> Vec<T> {\n     /// Converts the vector into [`Box<[T]>`][owned slice].\n     ///\n     /// Note that this will drop any excess capacity. Calling this and\n-    /// converting back to a vector with [`into_vec()`] is equivalent to calling\n-    /// [`shrink_to_fit()`].\n+    /// converting back to a vector with [`into_vec`] is equivalent to calling\n+    /// [`shrink_to_fit`].\n     ///\n     /// [owned slice]: ../../std/boxed/struct.Box.html\n-    /// [`into_vec()`]: ../../std/primitive.slice.html#method.into_vec\n-    /// [`shrink_to_fit()`]: #method.shrink_to_fit\n+    /// [`into_vec`]: ../../std/primitive.slice.html#method.into_vec\n+    /// [`shrink_to_fit`]: #method.shrink_to_fit\n     ///\n     /// # Examples\n     ///"}, {"sha": "a9282b5b02fea6164095138e48ff770ca5cf0ae2", "filename": "src/libcore/char.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -97,9 +97,9 @@ pub const MAX: char = '\\u{10ffff}';\n /// [`as`]: ../../book/casting-between-types.html#as\n ///\n /// For an unsafe version of this function which ignores these checks, see\n-/// [`from_u32_unchecked()`].\n+/// [`from_u32_unchecked`].\n ///\n-/// [`from_u32_unchecked()`]: fn.from_u32_unchecked.html\n+/// [`from_u32_unchecked`]: fn.from_u32_unchecked.html\n ///\n /// # Examples\n ///\n@@ -152,9 +152,9 @@ pub fn from_u32(i: u32) -> Option<char> {\n ///\n /// This function is unsafe, as it may construct invalid `char` values.\n ///\n-/// For a safe version of this function, see the [`from_u32()`] function.\n+/// For a safe version of this function, see the [`from_u32`] function.\n ///\n-/// [`from_u32()`]: fn.from_u32.html\n+/// [`from_u32`]: fn.from_u32.html\n ///\n /// # Examples\n ///\n@@ -479,10 +479,10 @@ impl CharExt for char {\n /// Returns an iterator that yields the hexadecimal Unicode escape of a\n /// character, as `char`s.\n ///\n-/// This `struct` is created by the [`escape_unicode()`] method on [`char`]. See\n+/// This `struct` is created by the [`escape_unicode`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`escape_unicode()`]: ../../std/primitive.char.html#method.escape_unicode\n+/// [`escape_unicode`]: ../../std/primitive.char.html#method.escape_unicode\n /// [`char`]: ../../std/primitive.char.html\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -600,10 +600,10 @@ impl fmt::Display for EscapeUnicode {\n \n /// An iterator that yields the literal escape code of a `char`.\n ///\n-/// This `struct` is created by the [`escape_default()`] method on [`char`]. See\n+/// This `struct` is created by the [`escape_default`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`escape_default()`]: ../../std/primitive.char.html#method.escape_default\n+/// [`escape_default`]: ../../std/primitive.char.html#method.escape_default\n /// [`char`]: ../../std/primitive.char.html\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -713,10 +713,10 @@ impl fmt::Display for EscapeDefault {\n \n /// An iterator that yields the literal escape code of a `char`.\n ///\n-/// This `struct` is created by the [`escape_debug()`] method on [`char`]. See its\n+/// This `struct` is created by the [`escape_debug`] method on [`char`]. See its\n /// documentation for more.\n ///\n-/// [`escape_debug()`]: ../../std/primitive.char.html#method.escape_debug\n+/// [`escape_debug`]: ../../std/primitive.char.html#method.escape_debug\n /// [`char`]: ../../std/primitive.char.html\n #[unstable(feature = \"char_escape_debug\", issue = \"35068\")]\n #[derive(Clone, Debug)]"}, {"sha": "97b9525da6715ddc66f544a5b73faf0ce96a9f07", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -61,7 +61,7 @@\n /// ## Derivable\n ///\n /// This trait can be used with `#[derive]` if all fields are `Clone`. The `derive`d\n-/// implementation of [`clone()`] calls [`clone()`] on each field.\n+/// implementation of [`clone`] calls [`clone`] on each field.\n ///\n /// ## How can I implement `Clone`?\n ///\n@@ -75,7 +75,7 @@\n /// `Clone` cannot be `derive`d, but can be implemented as:\n ///\n /// [`Copy`]: ../../std/marker/trait.Copy.html\n-/// [`clone()`]: trait.Clone.html#tymethod.clone\n+/// [`clone`]: trait.Clone.html#tymethod.clone\n ///\n /// ```\n /// #[derive(Copy)]"}, {"sha": "70e285f202e52f74eb257cd310c43f03a90e02c4", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -154,14 +154,14 @@ pub trait AsMut<T: ?Sized> {\n /// # Generic Impls\n ///\n /// - [`From<T>`][From]` for U` implies `Into<U> for T`\n-/// - [`into()`] is reflexive, which means that `Into<T> for T` is implemented\n+/// - [`into`] is reflexive, which means that `Into<T> for T` is implemented\n ///\n /// [`TryInto`]: trait.TryInto.html\n /// [`Option<T>`]: ../../std/option/enum.Option.html\n /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n /// [`String`]: ../../std/string/struct.String.html\n /// [From]: trait.From.html\n-/// [`into()`]: trait.Into.html#tymethod.into\n+/// [`into`]: trait.Into.html#tymethod.into\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Into<T>: Sized {\n     /// Performs the conversion.\n@@ -187,14 +187,14 @@ pub trait Into<T>: Sized {\n /// # Generic impls\n ///\n /// - `From<T> for U` implies [`Into<U>`]` for T`\n-/// - [`from()`] is reflexive, which means that `From<T> for T` is implemented\n+/// - [`from`] is reflexive, which means that `From<T> for T` is implemented\n ///\n /// [`TryFrom`]: trait.TryFrom.html\n /// [`Option<T>`]: ../../std/option/enum.Option.html\n /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n /// [`String`]: ../../std/string/struct.String.html\n /// [`Into<U>`]: trait.Into.html\n-/// [`from()`]: trait.From.html#tymethod.from\n+/// [`from`]: trait.From.html#tymethod.from\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait From<T>: Sized {\n     /// Performs the conversion."}, {"sha": "aadeaac83d5c85d7d622e8dac1e8e68ab9bdb9e2", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -106,7 +106,7 @@ mod sip;\n ///\n /// This trait can be used with `#[derive]` if all fields implement `Hash`.\n /// When `derive`d, the resulting hash will be the combination of the values\n-/// from calling [`.hash()`] on each field.\n+/// from calling [`.hash`] on each field.\n ///\n /// ## How can I implement `Hash`?\n ///\n@@ -133,7 +133,7 @@ mod sip;\n /// [`Eq`]: ../../std/cmp/trait.Eq.html\n /// [`HashMap`]: ../../std/collections/struct.HashMap.html\n /// [`HashSet`]: ../../std/collections/struct.HashSet.html\n-/// [`.hash()`]: #tymethod.hash\n+/// [`.hash`]: #tymethod.hash\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Hash {\n     /// Feeds this value into the state given, updating the hasher as necessary."}, {"sha": "1301c311c14caa361f22bb6471cb9b492cc76dc1", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -140,11 +140,11 @@ pub trait Iterator {\n \n     /// Consumes the iterator, counting the number of iterations and returning it.\n     ///\n-    /// This method will evaluate the iterator until its [`next()`] returns\n+    /// This method will evaluate the iterator until its [`next`] returns\n     /// [`None`]. Once [`None`] is encountered, `count()` returns the number of\n-    /// times it called [`next()`].\n+    /// times it called [`next`].\n     ///\n-    /// [`next()`]: #tymethod.next\n+    /// [`next`]: #tymethod.next\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     ///\n     /// # Overflow Behavior\n@@ -323,7 +323,7 @@ pub trait Iterator {\n     ///\n     /// In other words, it zips two iterators together, into a single one.\n     ///\n-    /// When either iterator returns [`None`], all further calls to [`next()`]\n+    /// When either iterator returns [`None`], all further calls to [`next`]\n     /// will return [`None`].\n     ///\n     /// # Examples\n@@ -364,7 +364,7 @@ pub trait Iterator {\n     ///\n     /// `zip()` is often used to zip an infinite iterator to a finite one.\n     /// This works because the finite iterator will eventually return [`None`],\n-    /// ending the zipper. Zipping with `(0..)` can look a lot like [`enumerate()`]:\n+    /// ending the zipper. Zipping with `(0..)` can look a lot like [`enumerate`]:\n     ///\n     /// ```\n     /// let enumerate: Vec<_> = \"foo\".chars().enumerate().collect();\n@@ -381,8 +381,8 @@ pub trait Iterator {\n     /// assert_eq!((2, 'o'), zipper[2]);\n     /// ```\n     ///\n-    /// [`enumerate()`]: trait.Iterator.html#method.enumerate\n-    /// [`next()`]: ../../std/iter/trait.Iterator.html#tymethod.next\n+    /// [`enumerate`]: trait.Iterator.html#method.enumerate\n+    /// [`next`]: ../../std/iter/trait.Iterator.html#tymethod.next\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -524,11 +524,11 @@ pub trait Iterator {\n     /// closure returns [`None`], it will try again, and call the closure on the\n     /// next element, seeing if it will return [`Some`].\n     ///\n-    /// Why `filter_map()` and not just [`filter()`].[`map()`]? The key is in this\n+    /// Why `filter_map()` and not just [`filter()`].[`map`]? The key is in this\n     /// part:\n     ///\n-    /// [`filter()`]: #method.filter\n-    /// [`map()`]: #method.map\n+    /// [`filter`]: #method.filter\n+    /// [`map`]: #method.map\n     ///\n     /// > If the closure returns [`Some(element)`][`Some`], then that element is returned.\n     ///\n@@ -550,7 +550,7 @@ pub trait Iterator {\n     /// assert_eq!(iter.next(), None);\n     /// ```\n     ///\n-    /// Here's the same example, but with [`filter()`] and [`map()`]:\n+    /// Here's the same example, but with [`filter`] and [`map`]:\n     ///\n     /// ```\n     /// let a = [\"1\", \"2\", \"lol\"];\n@@ -585,7 +585,7 @@ pub trait Iterator {\n     /// iterator.\n     ///\n     /// `enumerate()` keeps its count as a [`usize`]. If you want to count by a\n-    /// different sized integer, the [`zip()`] function provides similar\n+    /// different sized integer, the [`zip`] function provides similar\n     /// functionality.\n     ///\n     /// # Overflow Behavior\n@@ -601,7 +601,7 @@ pub trait Iterator {\n     ///\n     /// [`usize::MAX`]: ../../std/usize/constant.MAX.html\n     /// [`usize`]: ../../std/primitive.usize.html\n-    /// [`zip()`]: #method.zip\n+    /// [`zip`]: #method.zip\n     ///\n     /// # Examples\n     ///\n@@ -624,16 +624,16 @@ pub trait Iterator {\n     /// Creates an iterator which can use `peek` to look at the next element of\n     /// the iterator without consuming it.\n     ///\n-    /// Adds a [`peek()`] method to an iterator. See its documentation for\n+    /// Adds a [`peek`] method to an iterator. See its documentation for\n     /// more information.\n     ///\n-    /// Note that the underlying iterator is still advanced when [`peek()`] is\n+    /// Note that the underlying iterator is still advanced when [`peek`] is\n     /// called for the first time: In order to retrieve the next element,\n-    /// [`next()`] is called on the underlying iterator, hence any side effects of\n-    /// the [`next()`] method will occur.\n+    /// [`next`] is called on the underlying iterator, hence any side effects of\n+    /// the [`next`] method will occur.\n     ///\n-    /// [`peek()`]: struct.Peekable.html#method.peek\n-    /// [`next()`]: ../../std/iter/trait.Iterator.html#tymethod.next\n+    /// [`peek`]: struct.Peekable.html#method.peek\n+    /// [`next`]: ../../std/iter/trait.Iterator.html#tymethod.next\n     ///\n     /// # Examples\n     ///\n@@ -666,9 +666,9 @@ pub trait Iterator {\n         Peekable{iter: self, peeked: None}\n     }\n \n-    /// Creates an iterator that [`skip()`]s elements based on a predicate.\n+    /// Creates an iterator that [`skip`]s elements based on a predicate.\n     ///\n-    /// [`skip()`]: #method.skip\n+    /// [`skip`]: #method.skip\n     ///\n     /// `skip_while()` takes a closure as an argument. It will call this\n     /// closure on each element of the iterator, and ignore elements\n@@ -863,10 +863,10 @@ pub trait Iterator {\n         Take{iter: self, n: n}\n     }\n \n-    /// An iterator adaptor similar to [`fold()`] that holds internal state and\n+    /// An iterator adaptor similar to [`fold`] that holds internal state and\n     /// produces a new iterator.\n     ///\n-    /// [`fold()`]: #method.fold\n+    /// [`fold`]: #method.fold\n     ///\n     /// `scan()` takes two arguments: an initial value which seeds the internal\n     /// state, and a closure with two arguments, the first being a mutable\n@@ -910,16 +910,16 @@ pub trait Iterator {\n \n     /// Creates an iterator that works like map, but flattens nested structure.\n     ///\n-    /// The [`map()`] adapter is very useful, but only when the closure\n+    /// The [`map`] adapter is very useful, but only when the closure\n     /// argument produces values. If it produces an iterator instead, there's\n     /// an extra layer of indirection. `flat_map()` will remove this extra layer\n     /// on its own.\n     ///\n-    /// Another way of thinking about `flat_map()`: [`map()`]'s closure returns\n+    /// Another way of thinking about `flat_map()`: [`map`]'s closure returns\n     /// one item for each element, and `flat_map()`'s closure returns an\n     /// iterator for each element.\n     ///\n-    /// [`map()`]: #method.map\n+    /// [`map`]: #method.map\n     ///\n     /// # Examples\n     ///\n@@ -1106,7 +1106,7 @@ pub trait Iterator {\n     /// library, used in a variety of contexts.\n     ///\n     /// The most basic pattern in which `collect()` is used is to turn one\n-    /// collection into another. You take a collection, call [`iter()`] on it,\n+    /// collection into another. You take a collection, call [`iter`] on it,\n     /// do a bunch of transformations, and then `collect()` at the end.\n     ///\n     /// One of the keys to `collect()`'s power is that many things you might\n@@ -1211,7 +1211,7 @@ pub trait Iterator {\n     /// assert_eq!(Ok(vec![1, 3]), result);\n     /// ```\n     ///\n-    /// [`iter()`]: ../../std/iter/trait.Iterator.html#tymethod.next\n+    /// [`iter`]: ../../std/iter/trait.Iterator.html#tymethod.next\n     /// [`String`]: ../../std/string/struct.String.html\n     /// [`char`]: ../../std/primitive.char.html\n     /// [`Result`]: ../../std/result/enum.Result.html\n@@ -1816,9 +1816,9 @@ pub trait Iterator {\n     /// collections: one from the left elements of the pairs, and one\n     /// from the right elements.\n     ///\n-    /// This function is, in some sense, the opposite of [`zip()`].\n+    /// This function is, in some sense, the opposite of [`zip`].\n     ///\n-    /// [`zip()`]: #method.zip\n+    /// [`zip`]: #method.zip\n     ///\n     /// # Examples\n     ///\n@@ -1849,12 +1849,12 @@ pub trait Iterator {\n         (ts, us)\n     }\n \n-    /// Creates an iterator which [`clone()`]s all of its elements.\n+    /// Creates an iterator which [`clone`]s all of its elements.\n     ///\n     /// This is useful when you have an iterator over `&T`, but you need an\n     /// iterator over `T`.\n     ///\n-    /// [`clone()`]: ../../std/clone/trait.Clone.html#tymethod.clone\n+    /// [`clone`]: ../../std/clone/trait.Clone.html#tymethod.clone\n     ///\n     /// # Examples\n     ///"}, {"sha": "04394e0a3a876c811ab3ce7d3af3543b2713b3af", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -48,23 +48,23 @@\n //! }\n //! ```\n //!\n-//! An iterator has a method, [`next()`], which when called, returns an\n-//! [`Option`]`<Item>`. [`next()`] will return `Some(Item)` as long as there\n+//! An iterator has a method, [`next`], which when called, returns an\n+//! [`Option`]`<Item>`. [`next`] will return `Some(Item)` as long as there\n //! are elements, and once they've all been exhausted, will return `None` to\n //! indicate that iteration is finished. Individual iterators may choose to\n-//! resume iteration, and so calling [`next()`] again may or may not eventually\n+//! resume iteration, and so calling [`next`] again may or may not eventually\n //! start returning `Some(Item)` again at some point.\n //!\n //! [`Iterator`]'s full definition includes a number of other methods as well,\n-//! but they are default methods, built on top of [`next()`], and so you get\n+//! but they are default methods, built on top of [`next`], and so you get\n //! them for free.\n //!\n //! Iterators are also composable, and it's common to chain them together to do\n //! more complex forms of processing. See the [Adapters](#adapters) section\n //! below for more details.\n //!\n //! [`Iterator`]: trait.Iterator.html\n-//! [`next()`]: trait.Iterator.html#tymethod.next\n+//! [`next`]: trait.Iterator.html#tymethod.next\n //! [`Option`]: ../../std/option/enum.Option.html\n //!\n //! # The three forms of iteration\n@@ -168,13 +168,13 @@\n //! produce an iterator. What gives?\n //!\n //! There's a trait in the standard library for converting something into an\n-//! iterator: [`IntoIterator`]. This trait has one method, [`into_iter()`],\n+//! iterator: [`IntoIterator`]. This trait has one method, [`into_iter`],\n //! which converts the thing implementing [`IntoIterator`] into an iterator.\n //! Let's take a look at that `for` loop again, and what the compiler converts\n //! it into:\n //!\n //! [`IntoIterator`]: trait.IntoIterator.html\n-//! [`into_iter()`]: trait.IntoIterator.html#tymethod.into_iter\n+//! [`into_iter`]: trait.IntoIterator.html#tymethod.into_iter\n //!\n //! ```\n //! let values = vec![1, 2, 3, 4, 5];\n@@ -202,7 +202,7 @@\n //! ```\n //!\n //! First, we call `into_iter()` on the value. Then, we match on the iterator\n-//! that returns, calling [`next()`] over and over until we see a `None`. At\n+//! that returns, calling [`next`] over and over until we see a `None`. At\n //! that point, we `break` out of the loop, and we're done iterating.\n //!\n //! There's one more subtle bit here: the standard library contains an\n@@ -225,19 +225,19 @@\n //! often called 'iterator adapters', as they're a form of the 'adapter\n //! pattern'.\n //!\n-//! Common iterator adapters include [`map()`], [`take()`], and [`filter()`].\n+//! Common iterator adapters include [`map`], [`take`], and [`filter`].\n //! For more, see their documentation.\n //!\n-//! [`map()`]: trait.Iterator.html#method.map\n-//! [`take()`]: trait.Iterator.html#method.take\n-//! [`filter()`]: trait.Iterator.html#method.filter\n+//! [`map`]: trait.Iterator.html#method.map\n+//! [`take`]: trait.Iterator.html#method.take\n+//! [`filter`]: trait.Iterator.html#method.filter\n //!\n //! # Laziness\n //!\n //! Iterators (and iterator [adapters](#adapters)) are *lazy*. This means that\n //! just creating an iterator doesn't _do_ a whole lot. Nothing really happens\n-//! until you call [`next()`]. This is sometimes a source of confusion when\n-//! creating an iterator solely for its side effects. For example, the [`map()`]\n+//! until you call [`next`]. This is sometimes a source of confusion when\n+//! creating an iterator solely for its side effects. For example, the [`map`]\n //! method calls a closure on each element it iterates over:\n //!\n //! ```\n@@ -254,7 +254,7 @@\n //! do nothing unless consumed\n //! ```\n //!\n-//! The idiomatic way to write a [`map()`] for its side effects is to use a\n+//! The idiomatic way to write a [`map`] for its side effects is to use a\n //! `for` loop instead:\n //!\n //! ```\n@@ -265,12 +265,12 @@\n //! }\n //! ```\n //!\n-//! [`map()`]: trait.Iterator.html#method.map\n+//! [`map`]: trait.Iterator.html#method.map\n //!\n //! The two most common ways to evaluate an iterator are to use a `for` loop\n-//! like this, or using the [`collect()`] method to produce a new collection.\n+//! like this, or using the [`collect`] method to produce a new collection.\n //!\n-//! [`collect()`]: trait.Iterator.html#method.collect\n+//! [`collect`]: trait.Iterator.html#method.collect\n //!\n //! # Infinity\n //!\n@@ -281,7 +281,7 @@\n //! let numbers = 0..;\n //! ```\n //!\n-//! It is common to use the [`take()`] iterator adapter to turn an infinite\n+//! It is common to use the [`take`] iterator adapter to turn an infinite\n //! iterator into a finite one:\n //!\n //! ```\n@@ -295,7 +295,7 @@\n //!\n //! This will print the numbers `0` through `4`, each on their own line.\n //!\n-//! [`take()`]: trait.Iterator.html#method.take\n+//! [`take`]: trait.Iterator.html#method.take\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -338,10 +338,10 @@ mod traits;\n \n /// A double-ended iterator with the direction inverted.\n ///\n-/// This `struct` is created by the [`rev()`] method on [`Iterator`]. See its\n+/// This `struct` is created by the [`rev`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`rev()`]: trait.Iterator.html#method.rev\n+/// [`rev`]: trait.Iterator.html#method.rev\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n@@ -389,10 +389,10 @@ unsafe impl<I> TrustedLen for Rev<I>\n \n /// An iterator that clones the elements of an underlying iterator.\n ///\n-/// This `struct` is created by the [`cloned()`] method on [`Iterator`]. See its\n+/// This `struct` is created by the [`cloned`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`cloned()`]: trait.Iterator.html#method.cloned\n+/// [`cloned`]: trait.Iterator.html#method.cloned\n /// [`Iterator`]: trait.Iterator.html\n #[stable(feature = \"iter_cloned\", since = \"1.1.0\")]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n@@ -469,10 +469,10 @@ unsafe impl<'a, I, T: 'a> TrustedLen for Cloned<I>\n \n /// An iterator that repeats endlessly.\n ///\n-/// This `struct` is created by the [`cycle()`] method on [`Iterator`]. See its\n+/// This `struct` is created by the [`cycle`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`cycle()`]: trait.Iterator.html#method.cycle\n+/// [`cycle`]: trait.Iterator.html#method.cycle\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n@@ -510,10 +510,10 @@ impl<I> FusedIterator for Cycle<I> where I: Clone + Iterator {}\n \n /// An iterator that strings two iterators together.\n ///\n-/// This `struct` is created by the [`chain()`] method on [`Iterator`]. See its\n+/// This `struct` is created by the [`chain`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`chain()`]: trait.Iterator.html#method.chain\n+/// [`chain`]: trait.Iterator.html#method.chain\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n@@ -703,10 +703,10 @@ unsafe impl<A, B> TrustedLen for Chain<A, B>\n \n /// An iterator that iterates two other iterators simultaneously.\n ///\n-/// This `struct` is created by the [`zip()`] method on [`Iterator`]. See its\n+/// This `struct` is created by the [`zip`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`zip()`]: trait.Iterator.html#method.zip\n+/// [`zip`]: trait.Iterator.html#method.zip\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n@@ -925,16 +925,16 @@ unsafe impl<A, B> TrustedLen for Zip<A, B>\n \n /// An iterator that maps the values of `iter` with `f`.\n ///\n-/// This `struct` is created by the [`map()`] method on [`Iterator`]. See its\n+/// This `struct` is created by the [`map`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`map()`]: trait.Iterator.html#method.map\n+/// [`map`]: trait.Iterator.html#method.map\n /// [`Iterator`]: trait.Iterator.html\n ///\n /// # Notes about side effects\n ///\n-/// The [`map()`] iterator implements [`DoubleEndedIterator`], meaning that\n-/// you can also [`map()`] backwards:\n+/// The [`map`] iterator implements [`DoubleEndedIterator`], meaning that\n+/// you can also [`map`] backwards:\n ///\n /// ```rust\n /// let v: Vec<i32> = vec![1, 2, 3].into_iter().map(|x| x + 1).rev().collect();\n@@ -1058,10 +1058,10 @@ unsafe impl<B, I, F> TrustedRandomAccess for Map<I, F>\n \n /// An iterator that filters the elements of `iter` with `predicate`.\n ///\n-/// This `struct` is created by the [`filter()`] method on [`Iterator`]. See its\n+/// This `struct` is created by the [`filter`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`filter()`]: trait.Iterator.html#method.filter\n+/// [`filter`]: trait.Iterator.html#method.filter\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1142,10 +1142,10 @@ impl<I: FusedIterator, P> FusedIterator for Filter<I, P>\n \n /// An iterator that uses `f` to both filter and map elements from `iter`.\n ///\n-/// This `struct` is created by the [`filter_map()`] method on [`Iterator`]. See its\n+/// This `struct` is created by the [`filter_map`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`filter_map()`]: trait.Iterator.html#method.filter_map\n+/// [`filter_map`]: trait.Iterator.html#method.filter_map\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1208,10 +1208,10 @@ impl<B, I: FusedIterator, F> FusedIterator for FilterMap<I, F>\n \n /// An iterator that yields the current count and the element during iteration.\n ///\n-/// This `struct` is created by the [`enumerate()`] method on [`Iterator`]. See its\n+/// This `struct` is created by the [`enumerate`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`enumerate()`]: trait.Iterator.html#method.enumerate\n+/// [`enumerate`]: trait.Iterator.html#method.enumerate\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n@@ -1317,10 +1317,10 @@ unsafe impl<I> TrustedLen for Enumerate<I>\n /// An iterator with a `peek()` that returns an optional reference to the next\n /// element.\n ///\n-/// This `struct` is created by the [`peekable()`] method on [`Iterator`]. See its\n+/// This `struct` is created by the [`peekable`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`peekable()`]: trait.Iterator.html#method.peekable\n+/// [`peekable`]: trait.Iterator.html#method.peekable\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n@@ -1401,10 +1401,10 @@ impl<I: FusedIterator> FusedIterator for Peekable<I> {}\n impl<I: Iterator> Peekable<I> {\n     /// Returns a reference to the next() value without advancing the iterator.\n     ///\n-    /// Like [`next()`], if there is a value, it is wrapped in a `Some(T)`.\n+    /// Like [`next`], if there is a value, it is wrapped in a `Some(T)`.\n     /// But if the iteration is over, `None` is returned.\n     ///\n-    /// [`next()`]: trait.Iterator.html#tymethod.next\n+    /// [`next`]: trait.Iterator.html#tymethod.next\n     ///\n     /// Because `peek()` returns a reference, and many iterators iterate over\n     /// references, there can be a possibly confusing situation where the\n@@ -1452,10 +1452,10 @@ impl<I: Iterator> Peekable<I> {\n \n /// An iterator that rejects elements while `predicate` is true.\n ///\n-/// This `struct` is created by the [`skip_while()`] method on [`Iterator`]. See its\n+/// This `struct` is created by the [`skip_while`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`skip_while()`]: trait.Iterator.html#method.skip_while\n+/// [`skip_while`]: trait.Iterator.html#method.skip_while\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1506,10 +1506,10 @@ impl<I, P> FusedIterator for SkipWhile<I, P>\n \n /// An iterator that only accepts elements while `predicate` is true.\n ///\n-/// This `struct` is created by the [`take_while()`] method on [`Iterator`]. See its\n+/// This `struct` is created by the [`take_while`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`take_while()`]: trait.Iterator.html#method.take_while\n+/// [`take_while`]: trait.Iterator.html#method.take_while\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1565,10 +1565,10 @@ impl<I, P> FusedIterator for TakeWhile<I, P>\n \n /// An iterator that skips over `n` elements of `iter`.\n ///\n-/// This `struct` is created by the [`skip()`] method on [`Iterator`]. See its\n+/// This `struct` is created by the [`skip`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`skip()`]: trait.Iterator.html#method.skip\n+/// [`skip`]: trait.Iterator.html#method.skip\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n@@ -1659,10 +1659,10 @@ impl<I> FusedIterator for Skip<I> where I: FusedIterator {}\n \n /// An iterator that only iterates over the first `n` iterations of `iter`.\n ///\n-/// This `struct` is created by the [`take()`] method on [`Iterator`]. See its\n+/// This `struct` is created by the [`take`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`take()`]: trait.Iterator.html#method.take\n+/// [`take`]: trait.Iterator.html#method.take\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n@@ -1723,10 +1723,10 @@ impl<I> FusedIterator for Take<I> where I: FusedIterator {}\n \n /// An iterator to maintain state while iterating another iterator.\n ///\n-/// This `struct` is created by the [`scan()`] method on [`Iterator`]. See its\n+/// This `struct` is created by the [`scan`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`scan()`]: trait.Iterator.html#method.scan\n+/// [`scan`]: trait.Iterator.html#method.scan\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1773,10 +1773,10 @@ impl<B, I, St, F> FusedIterator for Scan<I, St, F>\n /// An iterator that maps each element to an iterator, and yields the elements\n /// of the produced iterators.\n ///\n-/// This `struct` is created by the [`flat_map()`] method on [`Iterator`]. See its\n+/// This `struct` is created by the [`flat_map`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`flat_map()`]: trait.Iterator.html#method.flat_map\n+/// [`flat_map`]: trait.Iterator.html#method.flat_map\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1863,10 +1863,10 @@ impl<I, U, F> FusedIterator for FlatMap<I, U, F>\n /// An iterator that yields `None` forever after the underlying iterator\n /// yields `None` once.\n ///\n-/// This `struct` is created by the [`fuse()`] method on [`Iterator`]. See its\n+/// This `struct` is created by the [`fuse`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`fuse()`]: trait.Iterator.html#method.fuse\n+/// [`fuse`]: trait.Iterator.html#method.fuse\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n@@ -2012,10 +2012,10 @@ impl<I> ExactSizeIterator for Fuse<I> where I: ExactSizeIterator {\n /// An iterator that calls a function with a reference to each element before\n /// yielding it.\n ///\n-/// This `struct` is created by the [`inspect()`] method on [`Iterator`]. See its\n+/// This `struct` is created by the [`inspect`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`inspect()`]: trait.Iterator.html#method.inspect\n+/// [`inspect`]: trait.Iterator.html#method.inspect\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "b405f35d5e4dbac5316db6491d50d87c3dc16403", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -16,9 +16,9 @@ use super::{FusedIterator, TrustedLen};\n \n /// An iterator that repeats an element endlessly.\n ///\n-/// This `struct` is created by the [`repeat()`] function. See its documentation for more.\n+/// This `struct` is created by the [`repeat`] function. See its documentation for more.\n ///\n-/// [`repeat()`]: fn.repeat.html\n+/// [`repeat`]: fn.repeat.html\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Repeat<A> {\n@@ -50,9 +50,9 @@ impl<A: Clone> FusedIterator for Repeat<A> {}\n /// over and over and \ud83d\udd01.\n ///\n /// Infinite iterators like `repeat()` are often used with adapters like\n-/// [`take()`], in order to make them finite.\n+/// [`take`], in order to make them finite.\n ///\n-/// [`take()`]: trait.Iterator.html#method.take\n+/// [`take`]: trait.Iterator.html#method.take\n ///\n /// # Examples\n ///\n@@ -74,7 +74,7 @@ impl<A: Clone> FusedIterator for Repeat<A> {}\n /// assert_eq!(Some(4), fours.next());\n /// ```\n ///\n-/// Going finite with [`take()`]:\n+/// Going finite with [`take`]:\n ///\n /// ```\n /// use std::iter;\n@@ -98,9 +98,9 @@ pub fn repeat<T: Clone>(elt: T) -> Repeat<T> {\n \n /// An iterator that yields nothing.\n ///\n-/// This `struct` is created by the [`empty()`] function. See its documentation for more.\n+/// This `struct` is created by the [`empty`] function. See its documentation for more.\n ///\n-/// [`empty()`]: fn.empty.html\n+/// [`empty`]: fn.empty.html\n #[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n pub struct Empty<T>(marker::PhantomData<T>);\n \n@@ -183,9 +183,9 @@ pub fn empty<T>() -> Empty<T> {\n \n /// An iterator that yields an element exactly once.\n ///\n-/// This `struct` is created by the [`once()`] function. See its documentation for more.\n+/// This `struct` is created by the [`once`] function. See its documentation for more.\n ///\n-/// [`once()`]: fn.once.html\n+/// [`once`]: fn.once.html\n #[derive(Clone, Debug)]\n #[stable(feature = \"iter_once\", since = \"1.2.0\")]\n pub struct Once<T> {\n@@ -227,12 +227,12 @@ impl<T> FusedIterator for Once<T> {}\n \n /// Creates an iterator that yields an element exactly once.\n ///\n-/// This is commonly used to adapt a single value into a [`chain()`] of other\n+/// This is commonly used to adapt a single value into a [`chain`] of other\n /// kinds of iteration. Maybe you have an iterator that covers almost\n /// everything, but you need an extra special case. Maybe you have a function\n /// which works on iterators, but you only need to process one value.\n ///\n-/// [`chain()`]: trait.Iterator.html#method.chain\n+/// [`chain`]: trait.Iterator.html#method.chain\n ///\n /// # Examples\n ///"}, {"sha": "3415b0eea9bd01519090bdd9c20567e906eb2819", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -16,13 +16,13 @@ use num::Wrapping;\n /// created from an iterator. This is common for types which describe a\n /// collection of some kind.\n ///\n-/// `FromIterator`'s [`from_iter()`] is rarely called explicitly, and is instead\n-/// used through [`Iterator`]'s [`collect()`] method. See [`collect()`]'s\n+/// `FromIterator`'s [`from_iter`] is rarely called explicitly, and is instead\n+/// used through [`Iterator`]'s [`collect`] method. See [`collect`]'s\n /// documentation for more examples.\n ///\n-/// [`from_iter()`]: #tymethod.from_iter\n+/// [`from_iter`]: #tymethod.from_iter\n /// [`Iterator`]: trait.Iterator.html\n-/// [`collect()`]: trait.Iterator.html#method.collect\n+/// [`collect`]: trait.Iterator.html#method.collect\n ///\n /// See also: [`IntoIterator`].\n ///\n@@ -42,7 +42,7 @@ use num::Wrapping;\n /// assert_eq!(v, vec![5, 5, 5, 5, 5]);\n /// ```\n ///\n-/// Using [`collect()`] to implicitly use `FromIterator`:\n+/// Using [`collect`] to implicitly use `FromIterator`:\n ///\n /// ```\n /// let five_fives = std::iter::repeat(5).take(5);\n@@ -487,17 +487,17 @@ impl<'a, I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for &'a mut I {\n /// backwards, a good start is to know where the end is.\n ///\n /// When implementing an `ExactSizeIterator`, You must also implement\n-/// [`Iterator`]. When doing so, the implementation of [`size_hint()`] *must*\n+/// [`Iterator`]. When doing so, the implementation of [`size_hint`] *must*\n /// return the exact size of the iterator.\n ///\n /// [`Iterator`]: trait.Iterator.html\n-/// [`size_hint()`]: trait.Iterator.html#method.size_hint\n+/// [`size_hint`]: trait.Iterator.html#method.size_hint\n ///\n-/// The [`len()`] method has a default implementation, so you usually shouldn't\n+/// The [`len`] method has a default implementation, so you usually shouldn't\n /// implement it. However, you may be able to provide a more performant\n /// implementation than the default, so overriding it in this case makes sense.\n ///\n-/// [`len()`]: #method.len\n+/// [`len`]: #method.len\n ///\n /// # Examples\n ///\n@@ -557,11 +557,11 @@ pub trait ExactSizeIterator: Iterator {\n     /// implementation, you can do so. See the [trait-level] docs for an\n     /// example.\n     ///\n-    /// This function has the same safety guarantees as the [`size_hint()`]\n+    /// This function has the same safety guarantees as the [`size_hint`]\n     /// function.\n     ///\n     /// [trait-level]: trait.ExactSizeIterator.html\n-    /// [`size_hint()`]: trait.Iterator.html#method.size_hint\n+    /// [`size_hint`]: trait.Iterator.html#method.size_hint\n     ///\n     /// # Examples\n     ///\n@@ -624,14 +624,14 @@ impl<'a, I: ExactSizeIterator + ?Sized> ExactSizeIterator for &'a mut I {\n \n /// Trait to represent types that can be created by summing up an iterator.\n ///\n-/// This trait is used to implement the [`sum()`] method on iterators. Types which\n-/// implement the trait can be generated by the [`sum()`] method. Like\n+/// This trait is used to implement the [`sum`] method on iterators. Types which\n+/// implement the trait can be generated by the [`sum`] method. Like\n /// [`FromIterator`] this trait should rarely be called directly and instead\n-/// interacted with through [`Iterator::sum()`].\n+/// interacted with through [`Iterator::sum`].\n ///\n-/// [`sum()`]: ../../std/iter/trait.Sum.html#tymethod.sum\n+/// [`sum`]: ../../std/iter/trait.Sum.html#tymethod.sum\n /// [`FromIterator`]: ../../std/iter/trait.FromIterator.html\n-/// [`Iterator::sum()`]: ../../std/iter/trait.Iterator.html#method.sum\n+/// [`Iterator::sum`]: ../../std/iter/trait.Iterator.html#method.sum\n #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n pub trait Sum<A = Self>: Sized {\n     /// Method which takes an iterator and generates `Self` from the elements by\n@@ -643,14 +643,14 @@ pub trait Sum<A = Self>: Sized {\n /// Trait to represent types that can be created by multiplying elements of an\n /// iterator.\n ///\n-/// This trait is used to implement the [`product()`] method on iterators. Types\n-/// which implement the trait can be generated by the [`product()`] method. Like\n+/// This trait is used to implement the [`product`] method on iterators. Types\n+/// which implement the trait can be generated by the [`product`] method. Like\n /// [`FromIterator`] this trait should rarely be called directly and instead\n-/// interacted with through [`Iterator::product()`].\n+/// interacted with through [`Iterator::product`].\n ///\n-/// [`product()`]: ../../std/iter/trait.Product.html#tymethod.product\n+/// [`product`]: ../../std/iter/trait.Product.html#tymethod.product\n /// [`FromIterator`]: ../../std/iter/trait.FromIterator.html\n-/// [`Iterator::product()`]: ../../std/iter/trait.Iterator.html#method.product\n+/// [`Iterator::product`]: ../../std/iter/trait.Iterator.html#method.product\n #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n pub trait Product<A = Self>: Sized {\n     /// Method which takes an iterator and generates `Self` from the elements by\n@@ -823,12 +823,12 @@ impl<T, U, E> Product<Result<U, E>> for Result<T, E>\n /// that behave this way because it allows for some significant optimizations.\n ///\n /// Note: In general, you should not use `FusedIterator` in generic bounds if\n-/// you need a fused iterator. Instead, you should just call [`Iterator::fuse()`]\n+/// you need a fused iterator. Instead, you should just call [`Iterator::fuse`]\n /// on the iterator. If the iterator is already fused, the additional [`Fuse`]\n /// wrapper will be a no-op with no performance penalty.\n ///\n /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-/// [`Iterator::fuse()`]: ../../std/iter/trait.Iterator.html#method.fuse\n+/// [`Iterator::fuse`]: ../../std/iter/trait.Iterator.html#method.fuse\n /// [`Fuse`]: ../../std/iter/struct.Fuse.html\n #[unstable(feature = \"fused\", issue = \"35602\")]\n pub trait FusedIterator: Iterator {}\n@@ -848,11 +848,11 @@ impl<'a, I: FusedIterator + ?Sized> FusedIterator for &'a mut I {}\n /// # Safety\n ///\n /// This trait must only be implemented when the contract is upheld.\n-/// Consumers of this trait must inspect [`.size_hint()`]\u2019s upper bound.\n+/// Consumers of this trait must inspect [`.size_hint`]\u2019s upper bound.\n ///\n /// [`None`]: ../../std/option/enum.Option.html#variant.None\n /// [`usize::MAX`]: ../../std/usize/constant.MAX.html\n-/// [`.size_hint()`]: ../../std/iter/trait.Iterator.html#method.size_hint\n+/// [`.size_hint`]: ../../std/iter/trait.Iterator.html#method.size_hint\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n pub unsafe trait TrustedLen : Iterator {}\n "}, {"sha": "021079f85f6be2292001ad9fb70a0ecc8c83d81e", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -90,10 +90,10 @@ macro_rules! assert {\n /// On panic, this macro will print the values of the expressions with their\n /// debug representations.\n ///\n-/// Like [`assert!()`], this macro has a second version, where a custom\n+/// Like [`assert!`], this macro has a second version, where a custom\n /// panic message can be provided.\n ///\n-/// [`assert!()`]: macro.assert.html\n+/// [`assert!`]: macro.assert.html\n ///\n /// # Examples\n ///"}, {"sha": "393c01b0105c5c63d427e042d27bc46592509607", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -245,7 +245,7 @@ pub trait Unsize<T: ?Sized> {\n /// [`String`]'s buffer, leading to a double free.\n ///\n /// Generalizing the latter case, any type implementing [`Drop`] can't be `Copy`, because it's\n-/// managing some resource besides its own [`size_of::<T>()`] bytes.\n+/// managing some resource besides its own [`size_of::<T>`] bytes.\n ///\n /// If you try to implement `Copy` on a struct or enum containing non-`Copy` data, you will get\n /// the error [E0204].\n@@ -262,7 +262,7 @@ pub trait Unsize<T: ?Sized> {\n /// [`Vec<T>`]: ../../std/vec/struct.Vec.html\n /// [`String`]: ../../std/string/struct.String.html\n /// [`Drop`]: ../../std/ops/trait.Drop.html\n-/// [`size_of::<T>()`]: ../../std/mem/fn.size_of.html\n+/// [`size_of::<T>`]: ../../std/mem/fn.size_of.html\n /// [`Clone`]: ../clone/trait.Clone.html\n /// [`String`]: ../../std/string/struct.String.html\n /// [`i32`]: ../../std/primitive.i32.html"}, {"sha": "ba65e4494a8bbed54cb47b242d3b3161265b4c36", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -617,7 +617,7 @@ pub fn drop<T>(_x: T) { }\n /// the contained value.\n ///\n /// This function will unsafely assume the pointer `src` is valid for\n-/// [`size_of::<U>()`][size_of] bytes by transmuting `&T` to `&U` and then reading\n+/// [`size_of::<U>`][size_of] bytes by transmuting `&T` to `&U` and then reading\n /// the `&U`. It will also unsafely create a copy of the contained value instead of\n /// moving out of `src`.\n ///"}, {"sha": "81c80ba51152d72cd14d49db6309e9f1f9ca13e3", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -2390,11 +2390,11 @@ impl usize {\n \n /// A classification of floating point numbers.\n ///\n-/// This `enum` is used as the return type for [`f32::classify()`] and [`f64::classify()`]. See\n+/// This `enum` is used as the return type for [`f32::classify`] and [`f64::classify`]. See\n /// their documentation for more.\n ///\n-/// [`f32::classify()`]: ../../std/primitive.f32.html#method.classify\n-/// [`f64::classify()`]: ../../std/primitive.f64.html#method.classify\n+/// [`f32::classify`]: ../../std/primitive.f32.html#method.classify\n+/// [`f64::classify`]: ../../std/primitive.f64.html#method.classify\n ///\n /// # Examples\n ///\n@@ -2756,9 +2756,9 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, Par\n /// An error which can be returned when parsing an integer.\n ///\n /// This error is used as the error type for the `from_str_radix()` functions\n-/// on the primitive integer types, such as [`i8::from_str_radix()`].\n+/// on the primitive integer types, such as [`i8::from_str_radix`].\n ///\n-/// [`i8::from_str_radix()`]: ../../std/primitive.i8.html#method.from_str_radix\n+/// [`i8::from_str_radix`]: ../../std/primitive.i8.html#method.from_str_radix\n #[derive(Debug, Clone, PartialEq, Eq)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ParseIntError {"}, {"sha": "686cc21eba1a0aafca8436250d940dc4ead374d6", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -30,7 +30,7 @@\n //! contexts involving built-in types, this is usually not a problem.\n //! However, using these operators in generic code, requires some\n //! attention if values have to be reused as opposed to letting the operators\n-//! consume them. One option is to occasionally use [`clone()`].\n+//! consume them. One option is to occasionally use [`clone`].\n //! Another option is to rely on the types involved providing additional\n //! operator implementations for references. For example, for a user-defined\n //! type `T` which is supposed to support addition, it is probably a good\n@@ -143,7 +143,7 @@\n //! [`FnOnce`]: trait.FnOnce.html\n //! [`Add`]: trait.Add.html\n //! [`Sub`]: trait.Sub.html\n-//! [`clone()`]: ../clone/trait.Clone.html#tymethod.clone\n+//! [`clone`]: ../clone/trait.Clone.html#tymethod.clone\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -2027,7 +2027,7 @@ impl fmt::Debug for RangeFull {\n /// A (half-open) range which is bounded at both ends: { x | start <= x < end }.\n /// Use `start..end` (two dots) for its shorthand.\n ///\n-/// See the [`contains()`](#method.contains) method for its characterization.\n+/// See the [`contains`](#method.contains) method for its characterization.\n ///\n /// # Examples\n ///\n@@ -2085,7 +2085,7 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n /// A range which is only bounded below: { x | start <= x }.\n /// Use `start..` for its shorthand.\n ///\n-/// See the [`contains()`](#method.contains) method for its characterization.\n+/// See the [`contains`](#method.contains) method for its characterization.\n ///\n /// Note: Currently, no overflow checking is done for the iterator\n /// implementation; if you use an integer range and the integer overflows, it\n@@ -2141,7 +2141,7 @@ impl<Idx: PartialOrd<Idx>> RangeFrom<Idx> {\n /// A range which is only bounded above: { x | x < end }.\n /// Use `..end` (two dots) for its shorthand.\n ///\n-/// See the [`contains()`](#method.contains) method for its characterization.\n+/// See the [`contains`](#method.contains) method for its characterization.\n ///\n /// It cannot serve as an iterator because it doesn't have a starting point.\n ///\n@@ -2207,7 +2207,7 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// An inclusive range which is bounded at both ends: { x | start <= x <= end }.\n /// Use `start...end` (three dots) for its shorthand.\n ///\n-/// See the [`contains()`](#method.contains) method for its characterization.\n+/// See the [`contains`](#method.contains) method for its characterization.\n ///\n /// # Examples\n ///\n@@ -2293,7 +2293,7 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n /// An inclusive range which is only bounded above: { x | x <= end }.\n /// Use `...end` (three dots) for its shorthand.\n ///\n-/// See the [`contains()`](#method.contains) method for its characterization.\n+/// See the [`contains`](#method.contains) method for its characterization.\n ///\n /// It cannot serve as an iterator because it doesn't have a starting point.\n ///"}, {"sha": "0775142651006469185cbcbd22809efec25c0f56", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -28,12 +28,12 @@ pub mod pattern;\n /// A trait to abstract the idea of creating a new instance of a type from a\n /// string.\n ///\n-/// `FromStr`'s [`from_str()`] method is often used implicitly, through\n-/// [`str`]'s [`parse()`] method. See [`parse()`]'s documentation for examples.\n+/// `FromStr`'s [`from_str`] method is often used implicitly, through\n+/// [`str`]'s [`parse`] method. See [`parse`]'s documentation for examples.\n ///\n-/// [`from_str()`]: #tymethod.from_str\n+/// [`from_str`]: #tymethod.from_str\n /// [`str`]: ../../std/primitive.str.html\n-/// [`parse()`]: ../../std/primitive.str.html#method.parse\n+/// [`parse`]: ../../std/primitive.str.html#method.parse\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait FromStr: Sized {\n     /// The associated error which can be returned from parsing.\n@@ -182,13 +182,13 @@ impl Utf8Error {\n ///\n /// If you are sure that the byte slice is valid UTF-8, and you don't want to\n /// incur the overhead of the validity check, there is an unsafe version of\n-/// this function, [`from_utf8_unchecked()`][fromutf8u], which has the same\n+/// this function, [`from_utf8_unchecked`][fromutf8u], which has the same\n /// behavior but skips the check.\n ///\n /// [fromutf8u]: fn.from_utf8_unchecked.html\n ///\n /// If you need a `String` instead of a `&str`, consider\n-/// [`String::from_utf8()`][string].\n+/// [`String::from_utf8`][string].\n ///\n /// [string]: ../../std/string/struct.String.html#method.from_utf8\n ///\n@@ -283,7 +283,7 @@ unsafe fn from_raw_parts_mut<'a>(p: *mut u8, len: usize) -> &'a mut str {\n /// Converts a slice of bytes to a string slice without checking\n /// that the string contains valid UTF-8.\n ///\n-/// See the safe version, [`from_utf8()`][fromutf8], for more information.\n+/// See the safe version, [`from_utf8`][fromutf8], for more information.\n ///\n /// [fromutf8]: fn.from_utf8.html\n ///\n@@ -333,9 +333,9 @@ Section: Iterators\n \n /// Iterator for the char (representing *Unicode Scalar Values*) of a string\n ///\n-/// Created with the method [`chars()`].\n+/// Created with the method [`chars`].\n ///\n-/// [`chars()`]: ../../std/primitive.str.html#method.chars\n+/// [`chars`]: ../../std/primitive.str.html#method.chars\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chars<'a> {\n@@ -590,9 +590,9 @@ impl<'a> CharIndices<'a> {\n /// External iterator for a string's bytes.\n /// Use with the `std::iter` module.\n ///\n-/// Created with the method [`bytes()`].\n+/// Created with the method [`bytes`].\n ///\n-/// [`bytes()`]: ../../std/primitive.str.html#method.bytes\n+/// [`bytes`]: ../../std/primitive.str.html#method.bytes\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone, Debug)]\n pub struct Bytes<'a>(Cloned<slice::Iter<'a, u8>>);\n@@ -925,14 +925,14 @@ impl<'a, P: Pattern<'a>> SplitInternal<'a, P> {\n \n generate_pattern_iterators! {\n     forward:\n-        /// Created with the method [`split()`].\n+        /// Created with the method [`split`].\n         ///\n-        /// [`split()`]: ../../std/primitive.str.html#method.split\n+        /// [`split`]: ../../std/primitive.str.html#method.split\n         struct Split;\n     reverse:\n-        /// Created with the method [`rsplit()`].\n+        /// Created with the method [`rsplit`].\n         ///\n-        /// [`rsplit()`]: ../../std/primitive.str.html#method.rsplit\n+        /// [`rsplit`]: ../../std/primitive.str.html#method.rsplit\n         struct RSplit;\n     stability:\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -943,14 +943,14 @@ generate_pattern_iterators! {\n \n generate_pattern_iterators! {\n     forward:\n-        /// Created with the method [`split_terminator()`].\n+        /// Created with the method [`split_terminator`].\n         ///\n-        /// [`split_terminator()`]: ../../std/primitive.str.html#method.split_terminator\n+        /// [`split_terminator`]: ../../std/primitive.str.html#method.split_terminator\n         struct SplitTerminator;\n     reverse:\n-        /// Created with the method [`rsplit_terminator()`].\n+        /// Created with the method [`rsplit_terminator`].\n         ///\n-        /// [`rsplit_terminator()`]: ../../std/primitive.str.html#method.rsplit_terminator\n+        /// [`rsplit_terminator`]: ../../std/primitive.str.html#method.rsplit_terminator\n         struct RSplitTerminator;\n     stability:\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1003,14 +1003,14 @@ impl<'a, P: Pattern<'a>> SplitNInternal<'a, P> {\n \n generate_pattern_iterators! {\n     forward:\n-        /// Created with the method [`splitn()`].\n+        /// Created with the method [`splitn`].\n         ///\n-        /// [`splitn()`]: ../../std/primitive.str.html#method.splitn\n+        /// [`splitn`]: ../../std/primitive.str.html#method.splitn\n         struct SplitN;\n     reverse:\n-        /// Created with the method [`rsplitn()`].\n+        /// Created with the method [`rsplitn`].\n         ///\n-        /// [`rsplitn()`]: ../../std/primitive.str.html#method.rsplitn\n+        /// [`rsplitn`]: ../../std/primitive.str.html#method.rsplitn\n         struct RSplitN;\n     stability:\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1054,14 +1054,14 @@ impl<'a, P: Pattern<'a>> MatchIndicesInternal<'a, P> {\n \n generate_pattern_iterators! {\n     forward:\n-        /// Created with the method [`match_indices()`].\n+        /// Created with the method [`match_indices`].\n         ///\n-        /// [`match_indices()`]: ../../std/primitive.str.html#method.match_indices\n+        /// [`match_indices`]: ../../std/primitive.str.html#method.match_indices\n         struct MatchIndices;\n     reverse:\n-        /// Created with the method [`rmatch_indices()`].\n+        /// Created with the method [`rmatch_indices`].\n         ///\n-        /// [`rmatch_indices()`]: ../../std/primitive.str.html#method.rmatch_indices\n+        /// [`rmatch_indices`]: ../../std/primitive.str.html#method.rmatch_indices\n         struct RMatchIndices;\n     stability:\n         #[stable(feature = \"str_match_indices\", since = \"1.5.0\")]\n@@ -1107,14 +1107,14 @@ impl<'a, P: Pattern<'a>> MatchesInternal<'a, P> {\n \n generate_pattern_iterators! {\n     forward:\n-        /// Created with the method [`matches()`].\n+        /// Created with the method [`matches`].\n         ///\n-        /// [`matches()`]: ../../std/primitive.str.html#method.matches\n+        /// [`matches`]: ../../std/primitive.str.html#method.matches\n         struct Matches;\n     reverse:\n-        /// Created with the method [`rmatches()`].\n+        /// Created with the method [`rmatches`].\n         ///\n-        /// [`rmatches()`]: ../../std/primitive.str.html#method.rmatches\n+        /// [`rmatches`]: ../../std/primitive.str.html#method.rmatches\n         struct RMatches;\n     stability:\n         #[stable(feature = \"str_matches\", since = \"1.2.0\")]\n@@ -1123,9 +1123,9 @@ generate_pattern_iterators! {\n     delegate double ended;\n }\n \n-/// Created with the method [`lines()`].\n+/// Created with the method [`lines`].\n ///\n-/// [`lines()`]: ../../std/primitive.str.html#method.lines\n+/// [`lines`]: ../../std/primitive.str.html#method.lines\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone, Debug)]\n pub struct Lines<'a>(Map<SplitTerminator<'a, char>, LinesAnyMap>);\n@@ -1156,9 +1156,9 @@ impl<'a> DoubleEndedIterator for Lines<'a> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a> FusedIterator for Lines<'a> {}\n \n-/// Created with the method [`lines_any()`].\n+/// Created with the method [`lines_any`].\n ///\n-/// [`lines_any()`]: ../../std/primitive.str.html#method.lines_any\n+/// [`lines_any`]: ../../std/primitive.str.html#method.lines_any\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_deprecated(since = \"1.4.0\", reason = \"use lines()/Lines instead now\")]\n #[derive(Clone, Debug)]"}, {"sha": "b074e8b86b9a329f6068d84ce55cf07b6fd35a17", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -142,14 +142,14 @@ pub struct DirEntry(fs_imp::DirEntry);\n /// [`File::open`]: struct.File.html#method.open\n /// [`File::create`]: struct.File.html#method.create\n ///\n-/// Generally speaking, when using `OpenOptions`, you'll first call [`new()`],\n-/// then chain calls to methods to set each option, then call [`open()`],\n+/// Generally speaking, when using `OpenOptions`, you'll first call [`new`],\n+/// then chain calls to methods to set each option, then call [`open`],\n /// passing the path of the file you're trying to open. This will give you a\n /// [`io::Result`][result] with a [`File`][file] inside that you can further\n /// operate on.\n ///\n-/// [`new()`]: struct.OpenOptions.html#method.new\n-/// [`open()`]: struct.OpenOptions.html#method.open\n+/// [`new`]: struct.OpenOptions.html#method.new\n+/// [`open`]: struct.OpenOptions.html#method.open\n /// [result]: ../io/type.Result.html\n /// [file]: struct.File.html\n ///"}, {"sha": "fb67eaf3c63a903f4c2b4eb9b994539c04c688f7", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -140,13 +140,13 @@ pub enum ErrorKind {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     TimedOut,\n     /// An error returned when an operation could not be completed because a\n-    /// call to [`write()`] returned [`Ok(0)`].\n+    /// call to [`write`] returned [`Ok(0)`].\n     ///\n     /// This typically means that an operation could only succeed if it wrote a\n     /// particular number of bytes but only a smaller number of bytes could be\n     /// written.\n     ///\n-    /// [`write()`]: ../../std/io/trait.Write.html#tymethod.write\n+    /// [`write`]: ../../std/io/trait.Write.html#tymethod.write\n     /// [`Ok(0)`]: ../../std/io/type.Result.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     WriteZero,"}, {"sha": "850885a8c0f3aaf76799ab398ce79bf132f8e00f", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -21,7 +21,7 @@\n //! of other types, and you can implement them for your types too. As such,\n //! you'll see a few different types of I/O throughout the documentation in\n //! this module: [`File`]s, [`TcpStream`]s, and sometimes even [`Vec<T>`]s. For\n-//! example, [`Read`] adds a [`read()`] method, which we can use on `File`s:\n+//! example, [`Read`] adds a [`read`] method, which we can use on `File`s:\n //!\n //! ```\n //! use std::io;\n@@ -106,7 +106,7 @@\n //! ```\n //!\n //! [`BufWriter`] doesn't add any new ways of writing; it just buffers every call\n-//! to [`write()`]:\n+//! to [`write`]:\n //!\n //! ```\n //! use std::io;\n@@ -157,7 +157,7 @@\n //! # }\n //! ```\n //!\n-//! Of course, using [`io::stdout()`] directly is less common than something like\n+//! Of course, using [`io::stdout`] directly is less common than something like\n //! [`println!`].\n //!\n //! ## Iterator types\n@@ -245,13 +245,13 @@\n //! [`Vec<T>`]: ../vec/struct.Vec.html\n //! [`BufReader`]: struct.BufReader.html\n //! [`BufWriter`]: struct.BufWriter.html\n-//! [`write()`]: trait.Write.html#tymethod.write\n-//! [`io::stdout()`]: fn.stdout.html\n+//! [`write`]: trait.Write.html#tymethod.write\n+//! [`io::stdout`]: fn.stdout.html\n //! [`println!`]: ../macro.println.html\n //! [`Lines`]: struct.Lines.html\n //! [`io::Result`]: type.Result.html\n //! [`?` operator]: ../../book/syntax-index.html\n-//! [`read()`]: trait.Read.html#tymethod.read\n+//! [`read`]: trait.Read.html#tymethod.read\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -530,7 +530,7 @@ pub trait Read {\n     /// If the data in this stream is *not* valid UTF-8 then an error is\n     /// returned and `buf` is unchanged.\n     ///\n-    /// See [`read_to_end()`][readtoend] for other error semantics.\n+    /// See [`read_to_end`][readtoend] for other error semantics.\n     ///\n     /// [readtoend]: #method.read_to_end\n     ///\n@@ -815,21 +815,21 @@ pub trait Read {\n ///\n /// Implementors of the `Write` trait are sometimes called 'writers'.\n ///\n-/// Writers are defined by two required methods, [`write()`] and [`flush()`]:\n+/// Writers are defined by two required methods, [`write`] and [`flush`]:\n ///\n-/// * The [`write()`] method will attempt to write some data into the object,\n+/// * The [`write`] method will attempt to write some data into the object,\n ///   returning how many bytes were successfully written.\n ///\n-/// * The [`flush()`] method is useful for adaptors and explicit buffers\n+/// * The [`flush`] method is useful for adaptors and explicit buffers\n ///   themselves for ensuring that all buffered data has been pushed out to the\n ///   'true sink'.\n ///\n /// Writers are intended to be composable with one another. Many implementors\n /// throughout [`std::io`] take and provide types which implement the `Write`\n /// trait.\n ///\n-/// [`write()`]: #tymethod.write\n-/// [`flush()`]: #tymethod.flush\n+/// [`write`]: #tymethod.write\n+/// [`flush`]: #tymethod.flush\n /// [`std::io`]: index.html\n ///\n /// # Examples\n@@ -1159,7 +1159,7 @@ fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>)\n ///\n /// For example, reading line-by-line is inefficient without using a buffer, so\n /// if you want to read by line, you'll need `BufRead`, which includes a\n-/// [`read_line()`] method as well as a [`lines()`] iterator.\n+/// [`read_line`] method as well as a [`lines`] iterator.\n ///\n /// # Examples\n ///\n@@ -1183,8 +1183,8 @@ fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>)\n ///\n /// [`BufReader`]: struct.BufReader.html\n /// [`File`]: ../fs/struct.File.html\n-/// [`read_line()`]: #method.read_line\n-/// [`lines()`]: #method.lines\n+/// [`read_line`]: #method.read_line\n+/// [`lines`]: #method.lines\n /// [`Read`]: trait.Read.html\n ///\n /// ```\n@@ -1209,13 +1209,13 @@ pub trait BufRead: Read {\n     /// Fills the internal buffer of this object, returning the buffer contents.\n     ///\n     /// This function is a lower-level call. It needs to be paired with the\n-    /// [`consume()`] method to function properly. When calling this\n+    /// [`consume`] method to function properly. When calling this\n     /// method, none of the contents will be \"read\" in the sense that later\n-    /// calling `read` may return the same contents. As such, [`consume()`] must\n+    /// calling `read` may return the same contents. As such, [`consume`] must\n     /// be called with the number of bytes that are consumed from this buffer to\n     /// ensure that the bytes are never returned twice.\n     ///\n-    /// [`consume()`]: #tymethod.consume\n+    /// [`consume`]: #tymethod.consume\n     ///\n     /// An empty buffer returned indicates that the stream has reached EOF.\n     ///\n@@ -1256,21 +1256,21 @@ pub trait BufRead: Read {\n     /// so they should no longer be returned in calls to `read`.\n     ///\n     /// This function is a lower-level call. It needs to be paired with the\n-    /// [`fill_buf()`] method to function properly. This function does\n+    /// [`fill_buf`] method to function properly. This function does\n     /// not perform any I/O, it simply informs this object that some amount of\n-    /// its buffer, returned from [`fill_buf()`], has been consumed and should\n+    /// its buffer, returned from [`fill_buf`], has been consumed and should\n     /// no longer be returned. As such, this function may do odd things if\n-    /// [`fill_buf()`] isn't called before calling it.\n+    /// [`fill_buf`] isn't called before calling it.\n     ///\n     /// The `amt` must be `<=` the number of bytes in the buffer returned by\n-    /// [`fill_buf()`].\n+    /// [`fill_buf`].\n     ///\n     /// # Examples\n     ///\n-    /// Since `consume()` is meant to be used with [`fill_buf()`],\n+    /// Since `consume()` is meant to be used with [`fill_buf`],\n     /// that method's example includes an example of `consume()`.\n     ///\n-    /// [`fill_buf()`]: #tymethod.fill_buf\n+    /// [`fill_buf`]: #tymethod.fill_buf\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn consume(&mut self, amt: usize);\n \n@@ -1285,7 +1285,7 @@ pub trait BufRead: Read {\n     /// # Errors\n     ///\n     /// This function will ignore all instances of [`ErrorKind::Interrupted`] and\n-    /// will otherwise return any errors returned by [`fill_buf()`].\n+    /// will otherwise return any errors returned by [`fill_buf`].\n     ///\n     /// If an I/O error is encountered then all bytes read so far will be\n     /// present in `buf` and its length will have been adjusted appropriately.\n@@ -1295,7 +1295,7 @@ pub trait BufRead: Read {\n     /// A locked standard input implements `BufRead`. In this example, we'll\n     /// read from standard input until we see an `a` byte.\n     ///\n-    /// [`fill_buf()`]: #tymethod.fill_buf\n+    /// [`fill_buf`]: #tymethod.fill_buf\n     /// [`ErrorKind::Interrupted`]: enum.ErrorKind.html#variant.Interrupted\n     ///\n     /// ```\n@@ -1330,7 +1330,7 @@ pub trait BufRead: Read {\n     ///\n     /// # Errors\n     ///\n-    /// This function has the same error semantics as [`read_until()`] and will\n+    /// This function has the same error semantics as [`read_until`] and will\n     /// also return an error if the read bytes are not valid UTF-8. If an I/O\n     /// error is encountered then `buf` may contain some bytes already read in\n     /// the event that all data read so far was valid UTF-8.\n@@ -1339,11 +1339,11 @@ pub trait BufRead: Read {\n     ///\n     /// A locked standard input implements `BufRead`. In this example, we'll\n     /// read all of the lines from standard input. If we were to do this in\n-    /// an actual project, the [`lines()`] method would be easier, of\n+    /// an actual project, the [`lines`] method would be easier, of\n     /// course.\n     ///\n-    /// [`lines()`]: #method.lines\n-    /// [`read_until()`]: #method.read_until\n+    /// [`lines`]: #method.lines\n+    /// [`read_until`]: #method.read_until\n     ///\n     /// ```\n     /// use std::io;\n@@ -1375,7 +1375,7 @@ pub trait BufRead: Read {\n     /// [`io::Result`]`<`[`Vec<u8>`]`>`. Each vector returned will *not* have\n     /// the delimiter byte at the end.\n     ///\n-    /// This function will yield errors whenever [`read_until()`] would have\n+    /// This function will yield errors whenever [`read_until`] would have\n     /// also yielded an error.\n     ///\n     /// # Examples\n@@ -1385,7 +1385,7 @@ pub trait BufRead: Read {\n     ///\n     /// [`io::Result`]: type.Result.html\n     /// [`Vec<u8>`]: ../vec/struct.Vec.html\n-    /// [`read_until()`]: #method.read_until\n+    /// [`read_until`]: #method.read_until\n     ///\n     /// ```\n     /// use std::io;\n@@ -1428,9 +1428,9 @@ pub trait BufRead: Read {\n     ///\n     /// # Errors\n     ///\n-    /// Each line of the iterator has the same error semantics as [`BufRead::read_line()`].\n+    /// Each line of the iterator has the same error semantics as [`BufRead::read_line`].\n     ///\n-    /// [`BufRead::read_line()`]: trait.BufRead.html#method.read_line\n+    /// [`BufRead::read_line`]: trait.BufRead.html#method.read_line\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn lines(self) -> Lines<Self> where Self: Sized {\n         Lines { buf: self }\n@@ -1439,10 +1439,10 @@ pub trait BufRead: Read {\n \n /// Adaptor to chain together two readers.\n ///\n-/// This struct is generally created by calling [`chain()`] on a reader.\n-/// Please see the documentation of [`chain()`] for more details.\n+/// This struct is generally created by calling [`chain`] on a reader.\n+/// Please see the documentation of [`chain`] for more details.\n ///\n-/// [`chain()`]: trait.Read.html#method.chain\n+/// [`chain`]: trait.Read.html#method.chain\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chain<T, U> {\n     first: T,\n@@ -1496,10 +1496,10 @@ impl<T: BufRead, U: BufRead> BufRead for Chain<T, U> {\n \n /// Reader adaptor which limits the bytes read from an underlying reader.\n ///\n-/// This struct is generally created by calling [`take()`] on a reader.\n-/// Please see the documentation of [`take()`] for more details.\n+/// This struct is generally created by calling [`take`] on a reader.\n+/// Please see the documentation of [`take`] for more details.\n ///\n-/// [`take()`]: trait.Read.html#method.take\n+/// [`take`]: trait.Read.html#method.take\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct Take<T> {\n@@ -1614,10 +1614,10 @@ fn read_one_byte(reader: &mut Read) -> Option<Result<u8>> {\n \n /// An iterator over `u8` values of a reader.\n ///\n-/// This struct is generally created by calling [`bytes()`] on a reader.\n-/// Please see the documentation of [`bytes()`] for more details.\n+/// This struct is generally created by calling [`bytes`] on a reader.\n+/// Please see the documentation of [`bytes`] for more details.\n ///\n-/// [`bytes()`]: trait.Read.html#method.bytes\n+/// [`bytes`]: trait.Read.html#method.bytes\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct Bytes<R> {\n@@ -1635,7 +1635,7 @@ impl<R: Read> Iterator for Bytes<R> {\n \n /// An iterator over the `char`s of a reader.\n ///\n-/// This struct is generally created by calling [`chars()`][chars] on a reader.\n+/// This struct is generally created by calling [`chars`][chars] on a reader.\n /// Please see the documentation of `chars()` for more details.\n ///\n /// [chars]: trait.Read.html#method.chars\n@@ -1726,7 +1726,7 @@ impl fmt::Display for CharsError {\n /// An iterator over the contents of an instance of `BufRead` split on a\n /// particular byte.\n ///\n-/// This struct is generally created by calling [`split()`][split] on a\n+/// This struct is generally created by calling [`split`][split] on a\n /// `BufRead`. Please see the documentation of `split()` for more details.\n ///\n /// [split]: trait.BufRead.html#method.split\n@@ -1758,7 +1758,7 @@ impl<B: BufRead> Iterator for Split<B> {\n \n /// An iterator over the lines of an instance of `BufRead`.\n ///\n-/// This struct is generally created by calling [`lines()`][lines] on a\n+/// This struct is generally created by calling [`lines`][lines] on a\n /// `BufRead`. Please see the documentation of `lines()` for more details.\n ///\n /// [lines]: trait.BufRead.html#method.lines"}, {"sha": "38ad23e14b3ebc01a174787c05a06a1b94687094", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -332,11 +332,11 @@ impl<'a> fmt::Debug for StdinLock<'a> {\n ///\n /// Each handle shares a global buffer of data to be written to the standard\n /// output stream. Access is also synchronized via a lock and explicit control\n-/// over locking is available via the [`lock()`] method.\n+/// over locking is available via the [`lock`] method.\n ///\n /// Created by the [`io::stdout`] method.\n ///\n-/// [`lock()`]: #method.lock\n+/// [`lock`]: #method.lock\n /// [`io::stdout`]: fn.stdout.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Stdout {"}, {"sha": "078f1ad3f6cfe5b0410e027aa5b8649127c55deb", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -63,7 +63,7 @@ pub fn copy<R: ?Sized, W: ?Sized>(reader: &mut R, writer: &mut W) -> io::Result<\n \n /// A reader which is always at EOF.\n ///\n-/// This struct is generally created by calling [`empty()`][empty]. Please see\n+/// This struct is generally created by calling [`empty`][empty]. Please see\n /// the documentation of `empty()` for more details.\n ///\n /// [empty]: fn.empty.html\n@@ -107,7 +107,7 @@ impl fmt::Debug for Empty {\n \n /// A reader which yields one byte over and over and over and over and over and...\n ///\n-/// This struct is generally created by calling [`repeat()`][repeat]. Please\n+/// This struct is generally created by calling [`repeat`][repeat]. Please\n /// see the documentation of `repeat()` for more details.\n ///\n /// [repeat]: fn.repeat.html\n@@ -150,7 +150,7 @@ impl fmt::Debug for Repeat {\n \n /// A writer which will move data into the void.\n ///\n-/// This struct is generally created by calling [`sink()`][sink]. Please\n+/// This struct is generally created by calling [`sink`][sink]. Please\n /// see the documentation of `sink()` for more details.\n ///\n /// [sink]: fn.sink.html"}, {"sha": "2c83518d38880f093d2869eb6be37f4595c62c1f", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -21,7 +21,7 @@\n //! contained an `extern crate std;` import at the [crate root]. Therefore the\n //! standard library can be accessed in [`use`] statements through the path\n //! `std`, as in [`use std::env`], or in expressions through the absolute path\n-//! `::std`, as in [`::std::env::args()`].\n+//! `::std`, as in [`::std::env::args`].\n //!\n //! # How to read this documentation\n //!\n@@ -156,7 +156,7 @@\n //! [TCP]: net/struct.TcpStream.html\n //! [The Rust Prelude]: prelude/index.html\n //! [UDP]: net/struct.UdpSocket.html\n-//! [`::std::env::args()`]: env/fn.args.html\n+//! [`::std::env::args`]: env/fn.args.html\n //! [`Arc`]: sync/struct.Arc.html\n //! [owned slice]: boxed/index.html\n //! [`Cell`]: cell/struct.Cell.html"}, {"sha": "a07972468e68a3afdfeff1d871d15ea413791fbb", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -183,7 +183,7 @@ impl TcpStream {\n \n     /// Sets the read timeout to the timeout specified.\n     ///\n-    /// If the value specified is [`None`], then [`read()`] calls will block\n+    /// If the value specified is [`None`], then [`read`] calls will block\n     /// indefinitely. It is an error to pass the zero `Duration` to this\n     /// method.\n     ///\n@@ -194,7 +194,7 @@ impl TcpStream {\n     /// error of the kind [`WouldBlock`], but Windows may return [`TimedOut`].\n     ///\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`read()`]: ../../std/io/trait.Read.html#tymethod.read\n+    /// [`read`]: ../../std/io/trait.Read.html#tymethod.read\n     /// [`WouldBlock`]: ../../std/io/enum.ErrorKind.html#variant.WouldBlock\n     /// [`TimedOut`]: ../../std/io/enum.ErrorKind.html#variant.TimedOut\n     ///\n@@ -214,7 +214,7 @@ impl TcpStream {\n \n     /// Sets the write timeout to the timeout specified.\n     ///\n-    /// If the value specified is [`None`], then [`write()`] calls will block\n+    /// If the value specified is [`None`], then [`write`] calls will block\n     /// indefinitely. It is an error to pass the zero [`Duration`] to this\n     /// method.\n     ///\n@@ -225,7 +225,7 @@ impl TcpStream {\n     /// an error of the kind [`WouldBlock`], but Windows may return [`TimedOut`].\n     ///\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`write()`]: ../../std/io/trait.Write.html#tymethod.write\n+    /// [`write`]: ../../std/io/trait.Write.html#tymethod.write\n     /// [`Duration`]: ../../std/time/struct.Duration.html\n     /// [`WouldBlock`]: ../../std/io/enum.ErrorKind.html#variant.WouldBlock\n     /// [`TimedOut`]: ../../std/io/enum.ErrorKind.html#variant.TimedOut\n@@ -246,14 +246,14 @@ impl TcpStream {\n \n     /// Returns the read timeout of this socket.\n     ///\n-    /// If the timeout is [`None`], then [`read()`] calls will block indefinitely.\n+    /// If the timeout is [`None`], then [`read`] calls will block indefinitely.\n     ///\n     /// # Note\n     ///\n     /// Some platforms do not provide access to the current timeout.\n     ///\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`read()`]: ../../std/io/trait.Read.html#tymethod.read\n+    /// [`read`]: ../../std/io/trait.Read.html#tymethod.read\n     ///\n     /// # Examples\n     ///\n@@ -272,14 +272,14 @@ impl TcpStream {\n \n     /// Returns the write timeout of this socket.\n     ///\n-    /// If the timeout is [`None`], then [`write()`] calls will block indefinitely.\n+    /// If the timeout is [`None`], then [`write`] calls will block indefinitely.\n     ///\n     /// # Note\n     ///\n     /// Some platforms do not provide access to the current timeout.\n     ///\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`write()`]: ../../std/io/trait.Write.html#tymethod.write\n+    /// [`write`]: ../../std/io/trait.Write.html#tymethod.write\n     ///\n     /// # Examples\n     ///\n@@ -618,7 +618,7 @@ impl TcpListener {\n \n     /// Gets the value of the `IP_TTL` option for this socket.\n     ///\n-    /// For more information about this option, see [`set_ttl()`][link].\n+    /// For more information about this option, see [`set_ttl`][link].\n     ///\n     /// [link]: #method.set_ttl\n     ///"}, {"sha": "1ebce939348401d5087250e7cd365a092b717614", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -175,7 +175,7 @@ impl UdpSocket {\n \n     /// Sets the read timeout to the timeout specified.\n     ///\n-    /// If the value specified is [`None`], then [`read()`] calls will block\n+    /// If the value specified is [`None`], then [`read`] calls will block\n     /// indefinitely. It is an error to pass the zero [`Duration`] to this\n     /// method.\n     ///\n@@ -186,7 +186,7 @@ impl UdpSocket {\n     /// error of the kind [`WouldBlock`], but Windows may return [`TimedOut`].\n     ///\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`read()`]: ../../std/io/trait.Read.html#tymethod.read\n+    /// [`read`]: ../../std/io/trait.Read.html#tymethod.read\n     /// [`Duration`]: ../../std/time/struct.Duration.html\n     /// [`WouldBlock`]: ../../std/io/enum.ErrorKind.html#variant.WouldBlock\n     /// [`TimedOut`]: ../../std/io/enum.ErrorKind.html#variant.TimedOut\n@@ -206,7 +206,7 @@ impl UdpSocket {\n \n     /// Sets the write timeout to the timeout specified.\n     ///\n-    /// If the value specified is [`None`], then [`write()`] calls will block\n+    /// If the value specified is [`None`], then [`write`] calls will block\n     /// indefinitely. It is an error to pass the zero [`Duration`] to this\n     /// method.\n     ///\n@@ -217,7 +217,7 @@ impl UdpSocket {\n     /// an error of the kind [`WouldBlock`], but Windows may return [`TimedOut`].\n     ///\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`write()`]: ../../std/io/trait.Write.html#tymethod.write\n+    /// [`write`]: ../../std/io/trait.Write.html#tymethod.write\n     /// [`Duration`]: ../../std/time/struct.Duration.html\n     /// [`WouldBlock`]: ../../std/io/enum.ErrorKind.html#variant.WouldBlock\n     /// [`TimedOut`]: ../../std/io/enum.ErrorKind.html#variant.TimedOut\n@@ -237,10 +237,10 @@ impl UdpSocket {\n \n     /// Returns the read timeout of this socket.\n     ///\n-    /// If the timeout is [`None`], then [`read()`] calls will block indefinitely.\n+    /// If the timeout is [`None`], then [`read`] calls will block indefinitely.\n     ///\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`read()`]: ../../std/io/trait.Read.html#tymethod.read\n+    /// [`read`]: ../../std/io/trait.Read.html#tymethod.read\n     ///\n     /// # Examples\n     ///\n@@ -258,10 +258,10 @@ impl UdpSocket {\n \n     /// Returns the write timeout of this socket.\n     ///\n-    /// If the timeout is [`None`], then [`write()`] calls will block indefinitely.\n+    /// If the timeout is [`None`], then [`write`] calls will block indefinitely.\n     ///\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`write()`]: ../../std/io/trait.Write.html#tymethod.write\n+    /// [`write`]: ../../std/io/trait.Write.html#tymethod.write\n     ///\n     /// # Examples\n     ///\n@@ -560,10 +560,10 @@ impl UdpSocket {\n \n     /// Sends data on the socket to the remote address to which it is connected.\n     ///\n-    /// The [`connect()`] method will connect this socket to a remote address. This\n+    /// The [`connect`] method will connect this socket to a remote address. This\n     /// method will fail if the socket is not connected.\n     ///\n-    /// [`connect()`]: #method.connect\n+    /// [`connect`]: #method.connect\n     ///\n     /// # Examples\n     ///"}, {"sha": "6f46a73698f35c49d5f4ef43f6bd939c8ef9422f", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -160,10 +160,10 @@ pub fn take_hook() -> Box<Fn(&PanicInfo) + 'static + Sync + Send> {\n \n /// A struct providing information about a panic.\n ///\n-/// `PanicInfo` structure is passed to a panic hook set by the [`set_hook()`]\n+/// `PanicInfo` structure is passed to a panic hook set by the [`set_hook`]\n /// function.\n ///\n-/// [`set_hook()`]: ../../std/panic/fn.set_hook.html\n+/// [`set_hook`]: ../../std/panic/fn.set_hook.html\n ///\n /// # Examples\n ///\n@@ -237,9 +237,9 @@ impl<'a> PanicInfo<'a> {\n \n /// A struct containing information about the location of a panic.\n ///\n-/// This structure is created by the [`location()`] method of [`PanicInfo`].\n+/// This structure is created by the [`location`] method of [`PanicInfo`].\n ///\n-/// [`location()`]: ../../std/panic/struct.PanicInfo.html#method.location\n+/// [`location`]: ../../std/panic/struct.PanicInfo.html#method.location\n /// [`PanicInfo`]: ../../std/panic/struct.PanicInfo.html\n ///\n /// # Examples"}, {"sha": "8f1c2ae0c8daa187e8e91fa98efba5e9d4d1c3c6", "filename": "src/libstd/path.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -1065,13 +1065,13 @@ impl PathBuf {\n         self.inner.push(path);\n     }\n \n-    /// Truncate `self` to [`self.parent()`].\n+    /// Truncate `self` to [`self.parent`].\n     ///\n-    /// Returns false and does nothing if [`self.file_name()`] is `None`.\n+    /// Returns false and does nothing if [`self.file_name`] is `None`.\n     /// Otherwise, returns `true`.\n     ///\n-    /// [`self.parent()`]: struct.PathBuf.html#method.parent\n-    /// [`self.file_name()`]: struct.PathBuf.html#method.file_name\n+    /// [`self.parent`]: struct.PathBuf.html#method.parent\n+    /// [`self.file_name`]: struct.PathBuf.html#method.file_name\n     ///\n     /// # Examples\n     ///\n@@ -1096,12 +1096,12 @@ impl PathBuf {\n         }\n     }\n \n-    /// Updates [`self.file_name()`] to `file_name`.\n+    /// Updates [`self.file_name`] to `file_name`.\n     ///\n-    /// If [`self.file_name()`] was [`None`], this is equivalent to pushing\n+    /// If [`self.file_name`] was [`None`], this is equivalent to pushing\n     /// `file_name`.\n     ///\n-    /// [`self.file_name()`]: struct.PathBuf.html#method.file_name\n+    /// [`self.file_name`]: struct.PathBuf.html#method.file_name\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n@@ -1130,15 +1130,15 @@ impl PathBuf {\n         self.push(file_name);\n     }\n \n-    /// Updates [`self.extension()`] to `extension`.\n+    /// Updates [`self.extension`] to `extension`.\n     ///\n-    /// If [`self.file_name()`] is `None`, does nothing and returns `false`.\n+    /// If [`self.file_name`] is `None`, does nothing and returns `false`.\n     ///\n-    /// Otherwise, returns `true`; if [`self.extension()`] is [`None`], the\n+    /// Otherwise, returns `true`; if [`self.extension`] is [`None`], the\n     /// extension is added; otherwise it is replaced.\n     ///\n-    /// [`self.file_name()`]: struct.PathBuf.html#method.file_name\n-    /// [`self.extension()`]: struct.PathBuf.html#method.extension\n+    /// [`self.file_name`]: struct.PathBuf.html#method.file_name\n+    /// [`self.extension`]: struct.PathBuf.html#method.extension\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n@@ -1747,9 +1747,9 @@ impl Path {\n         iter_after(self.components().rev(), child.components().rev()).is_some()\n     }\n \n-    /// Extracts the stem (non-extension) portion of [`self.file_name()`].\n+    /// Extracts the stem (non-extension) portion of [`self.file_name`].\n     ///\n-    /// [`self.file_name()`]: struct.Path.html#method.file_name\n+    /// [`self.file_name`]: struct.Path.html#method.file_name\n     ///\n     /// The stem is:\n     ///\n@@ -1774,7 +1774,7 @@ impl Path {\n         self.file_name().map(split_file_at_dot).and_then(|(before, after)| before.or(after))\n     }\n \n-    /// Extracts the extension of [`self.file_name()`], if possible.\n+    /// Extracts the extension of [`self.file_name`], if possible.\n     ///\n     /// The extension is:\n     ///\n@@ -1783,7 +1783,7 @@ impl Path {\n     /// * [`None`], if the file name begins with `.` and has no other `.`s within;\n     /// * Otherwise, the portion of the file name after the final `.`\n     ///\n-    /// [`self.file_name()`]: struct.Path.html#method.file_name\n+    /// [`self.file_name`]: struct.Path.html#method.file_name\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     ///\n     /// # Examples"}, {"sha": "c71e0b2a7035af1415270d94e4ac23fee64d57bf", "filename": "src/libstd/prelude/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fmod.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -60,9 +60,9 @@\n //!   value.\n //! * [`std::boxed`]::[`Box`], a way to allocate values on the heap.\n //! * [`std::borrow`]::[`ToOwned`], The conversion trait that defines\n-//!   [`to_owned()`], the generic method for creating an owned type from a\n+//!   [`to_owned`], the generic method for creating an owned type from a\n //!   borrowed type.\n-//! * [`std::clone`]::[`Clone`], the ubiquitous trait that defines [`clone()`],\n+//! * [`std::clone`]::[`Clone`], the ubiquitous trait that defines [`clone`],\n //!   the method for producing a copy of a value.\n //! * [`std::cmp`]::{[`PartialEq`], [`PartialOrd`], [`Eq`], [`Ord`] }. The\n //!   comparison traits, which implement the comparison operators and are often\n@@ -117,7 +117,7 @@\n //! [`ToOwned`]: ../borrow/trait.ToOwned.html\n //! [`ToString`]: ../string/trait.ToString.html\n //! [`Vec`]: ../vec/struct.Vec.html\n-//! [`clone()`]: ../clone/trait.Clone.html#tymethod.clone\n+//! [`clone`]: ../clone/trait.Clone.html#tymethod.clone\n //! [`drop`]: ../mem/fn.drop.html\n //! [`std::borrow`]: ../borrow/index.html\n //! [`std::boxed`]: ../boxed/index.html\n@@ -135,7 +135,7 @@\n //! [`std::slice`]: ../slice/index.html\n //! [`std::string`]: ../string/index.html\n //! [`std::vec`]: ../vec/index.html\n-//! [`to_owned()`]: ../borrow/trait.ToOwned.html#tymethod.to_owned\n+//! [`to_owned`]: ../borrow/trait.ToOwned.html#tymethod.to_owned\n //! [book-closures]: ../../book/closures.html\n //! [book-dtor]: ../../book/drop.html\n //! [book-enums]: ../../book/enums.html"}, {"sha": "7d6d16f4748452c70d9924d2c0a5c66f99f8d582", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -420,7 +420,7 @@ mod prim_slice { }\n /// # Representation\n ///\n /// A `&str` is made up of two components: a pointer to some bytes, and a\n-/// length. You can look at these with the [`.as_ptr()`] and [`len()`] methods:\n+/// length. You can look at these with the [`.as_ptr`] and [`len`] methods:\n ///\n /// ```\n /// use std::slice;\n@@ -447,8 +447,8 @@ mod prim_slice { }\n /// assert_eq!(s, Ok(story));\n /// ```\n ///\n-/// [`.as_ptr()`]: #method.as_ptr\n-/// [`len()`]: #method.len\n+/// [`.as_ptr`]: #method.as_ptr\n+/// [`len`]: #method.len\n ///\n /// Note: This example shows the internals of `&str`. `unsafe` should not be\n /// used to get a string slice under normal circumstances. Use `.as_slice()`"}, {"sha": "295a49d6a8e8916050ad20267b666b06bce6c07f", "filename": "src/libstd/sync/barrier.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fbarrier.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -52,10 +52,10 @@ struct BarrierState {\n \n /// A result returned from wait.\n ///\n-/// Currently this opaque structure only has one method, [`.is_leader()`]. Only\n+/// Currently this opaque structure only has one method, [`.is_leader`]. Only\n /// one thread will receive a result that will return `true` from this function.\n ///\n-/// [`.is_leader()`]: #method.is_leader\n+/// [`.is_leader`]: #method.is_leader\n ///\n /// # Examples\n ///"}, {"sha": "7ad9d9ee37ce60e83dc8a4a6b74407d3aafc1def", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -150,7 +150,7 @@ impl Condvar {\n     ///\n     /// This function will atomically unlock the mutex specified (represented by\n     /// `guard`) and block the current thread. This means that any calls\n-    /// to [`notify_one()`] or [`notify_all()`] which happen logically after the\n+    /// to [`notify_one`] or [`notify_all`] which happen logically after the\n     /// mutex is unlocked are candidates to wake this thread up. When this\n     /// function call returns, the lock specified will have been re-acquired.\n     ///\n@@ -167,16 +167,16 @@ impl Condvar {\n     ///\n     /// # Panics\n     ///\n-    /// This function will [`panic!()`] if it is used with more than one mutex\n+    /// This function will [`panic!`] if it is used with more than one mutex\n     /// over time. Each condition variable is dynamically bound to exactly one\n     /// mutex to ensure defined behavior across platforms. If this functionality\n     /// is not desired, then unsafe primitives in `sys` are provided.\n     ///\n-    /// [`notify_one()`]: #method.notify_one\n-    /// [`notify_all()`]: #method.notify_all\n+    /// [`notify_one`]: #method.notify_one\n+    /// [`notify_all`]: #method.notify_all\n     /// [poisoning]: ../sync/struct.Mutex.html#poisoning\n     /// [`Mutex`]: ../sync/struct.Mutex.html\n-    /// [`panic!()`]: ../../std/macro.panic.html\n+    /// [`panic!`]: ../../std/macro.panic.html\n     ///\n     /// # Examples\n     ///\n@@ -359,11 +359,11 @@ impl Condvar {\n     /// be woken up from its call to [`wait`] or [`wait_timeout`]. Calls to\n     /// `notify_one` are not buffered in any way.\n     ///\n-    /// To wake up all threads, see [`notify_all()`].\n+    /// To wake up all threads, see [`notify_all`].\n     ///\n     /// [`wait`]: #method.wait\n     /// [`wait_timeout`]: #method.wait_timeout\n-    /// [`notify_all()`]: #method.notify_all\n+    /// [`notify_all`]: #method.notify_all\n     ///\n     /// # Examples\n     ///\n@@ -401,9 +401,9 @@ impl Condvar {\n     /// variable are awoken. Calls to `notify_all()` are not buffered in any\n     /// way.\n     ///\n-    /// To wake up only one thread, see [`notify_one()`].\n+    /// To wake up only one thread, see [`notify_one`].\n     ///\n-    /// [`notify_one()`]: #method.notify_one\n+    /// [`notify_one`]: #method.notify_one\n     ///\n     /// # Examples\n     ///"}, {"sha": "71dd94161c03df8625c719e73a2e595fccbdea72", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -460,10 +460,10 @@ impl<T> UnsafeFlavor<T> for Receiver<T> {\n /// All data sent on the sender will become available on the receiver, and no\n /// send will block the calling thread (this channel has an \"infinite buffer\").\n ///\n-/// If the [`Receiver`] is disconnected while trying to [`send()`] with the\n-/// [`Sender`], the [`send()`] method will return an error.\n+/// If the [`Receiver`] is disconnected while trying to [`send`] with the\n+/// [`Sender`], the [`send`] method will return an error.\n ///\n-/// [`send()`]: ../../../std/sync/mpsc/struct.Sender.html#method.send\n+/// [`send`]: ../../../std/sync/mpsc/struct.Sender.html#method.send\n /// [`Sender`]: ../../../std/sync/mpsc/struct.Sender.html\n /// [`Receiver`]: ../../../std/sync/mpsc/struct.Receiver.html\n ///\n@@ -504,13 +504,13 @@ pub fn channel<T>() -> (Sender<T>, Receiver<T>) {\n /// `bound` specifies the buffer size. When the internal buffer becomes full,\n /// future sends will *block* waiting for the buffer to open up. Note that a\n /// buffer size of 0 is valid, in which case this becomes \"rendezvous channel\"\n-/// where each [`send()`] will not return until a recv is paired with it.\n+/// where each [`send`] will not return until a recv is paired with it.\n ///\n /// Like asynchronous channels, if the [`Receiver`] is disconnected while\n-/// trying to [`send()`] with the [`SyncSender`], the [`send()`] method will\n+/// trying to [`send`] with the [`SyncSender`], the [`send`] method will\n /// return an error.\n ///\n-/// [`send()`]: ../../../std/sync/mpsc/struct.SyncSender.html#method.send\n+/// [`send`]: ../../../std/sync/mpsc/struct.SyncSender.html#method.send\n /// [`SyncSender`]: ../../../std/sync/mpsc/struct.SyncSender.html\n /// [`Receiver`]: ../../../std/sync/mpsc/struct.Receiver.html\n ///"}, {"sha": "48d8d34dbe090377bc232b433acafbb88c7b4206", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -135,13 +135,13 @@ unsafe impl<T: ?Sized + Send> Sync for Mutex<T> { }\n /// The data protected by the mutex can be access through this guard via its\n /// [`Deref`] and [`DerefMut`] implementations.\n ///\n-/// This structure is created by the [`lock()`] and [`try_lock()`] methods on\n+/// This structure is created by the [`lock`] and [`try_lock`] methods on\n /// [`Mutex`].\n ///\n /// [`Deref`]: ../../std/ops/trait.Deref.html\n /// [`DerefMut`]: ../../std/ops/trait.DerefMut.html\n-/// [`lock()`]: struct.Mutex.html#method.lock\n-/// [`try_lock()`]: struct.Mutex.html#method.try_lock\n+/// [`lock`]: struct.Mutex.html#method.lock\n+/// [`try_lock`]: struct.Mutex.html#method.try_lock\n /// [`Mutex`]: struct.Mutex.html\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "d26f2f7bb7e3c7222ec6694254860ddaa9be2d01", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -78,11 +78,11 @@ unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n /// RAII structure used to release the shared read access of a lock when\n /// dropped.\n ///\n-/// This structure is created by the [`read()`] and [`try_read()`] methods on\n+/// This structure is created by the [`read`] and [`try_read`] methods on\n /// [`RwLock`].\n ///\n-/// [`read()`]: struct.RwLock.html#method.read\n-/// [`try_read()`]: struct.RwLock.html#method.try_read\n+/// [`read`]: struct.RwLock.html#method.read\n+/// [`try_read`]: struct.RwLock.html#method.try_read\n /// [`RwLock`]: struct.RwLock.html\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -96,11 +96,11 @@ impl<'a, T: ?Sized> !marker::Send for RwLockReadGuard<'a, T> {}\n /// RAII structure used to release the exclusive write access of a lock when\n /// dropped.\n ///\n-/// This structure is created by the [`write()`] and [`try_write()`] methods\n+/// This structure is created by the [`write`] and [`try_write`] methods\n /// on [`RwLock`].\n ///\n-/// [`write()`]: struct.RwLock.html#method.write\n-/// [`try_write()`]: struct.RwLock.html#method.try_write\n+/// [`write`]: struct.RwLock.html#method.write\n+/// [`try_write`]: struct.RwLock.html#method.try_write\n /// [`RwLock`]: struct.RwLock.html\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "d5933d316c4bd3ab0a7df621690aa613ab9f9b3b", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -375,12 +375,12 @@ impl UnixStream {\n \n     /// Sets the read timeout for the socket.\n     ///\n-    /// If the provided value is [`None`], then [`read()`] calls will block\n+    /// If the provided value is [`None`], then [`read`] calls will block\n     /// indefinitely. It is an error to pass the zero [`Duration`] to this\n     /// method.\n     ///\n     /// [`None`]: ../../../../std/option/enum.Option.html#variant.None\n-    /// [`read()`]: ../../../../std/io/trait.Read.html#tymethod.read\n+    /// [`read`]: ../../../../std/io/trait.Read.html#tymethod.read\n     /// [`Duration`]: ../../../../std/time/struct.Duration.html\n     ///\n     /// # Examples\n@@ -399,12 +399,12 @@ impl UnixStream {\n \n     /// Sets the write timeout for the socket.\n     ///\n-    /// If the provided value is [`None`], then [`write()`] calls will block\n+    /// If the provided value is [`None`], then [`write`] calls will block\n     /// indefinitely. It is an error to pass the zero [`Duration`] to this\n     /// method.\n     ///\n     /// [`None`]: ../../../../std/option/enum.Option.html#variant.None\n-    /// [`read()`]: ../../../../std/io/trait.Write.html#tymethod.write\n+    /// [`read`]: ../../../../std/io/trait.Write.html#tymethod.write\n     /// [`Duration`]: ../../../../std/time/struct.Duration.html\n     ///\n     /// # Examples\n@@ -974,12 +974,12 @@ impl UnixDatagram {\n \n     /// Connects the socket to the specified address.\n     ///\n-    /// The [`send()`] method may be used to send data to the specified address.\n-    /// [`recv()`] and [`recv_from()`] will only receive data from that address.\n+    /// The [`send`] method may be used to send data to the specified address.\n+    /// [`recv`] and [`recv_from`] will only receive data from that address.\n     ///\n-    /// [`send()`]: #method.send\n-    /// [`recv()`]: #method.recv\n-    /// [`recv_from()`]: #method.recv_from\n+    /// [`send`]: #method.send\n+    /// [`recv`]: #method.recv\n+    /// [`recv_from`]: #method.recv_from\n     ///\n     /// # Examples\n     ///\n@@ -1047,9 +1047,9 @@ impl UnixDatagram {\n \n     /// Returns the address of this socket's peer.\n     ///\n-    /// The [`connect()`] method will connect the socket to a peer.\n+    /// The [`connect`] method will connect the socket to a peer.\n     ///\n-    /// [`connect()`]: #method.connect\n+    /// [`connect`]: #method.connect\n     ///\n     /// # Examples\n     ///\n@@ -1178,13 +1178,13 @@ impl UnixDatagram {\n \n     /// Sets the read timeout for the socket.\n     ///\n-    /// If the provided value is [`None`], then [`recv()`] and [`recv_from()`] calls will\n+    /// If the provided value is [`None`], then [`recv`] and [`recv_from`] calls will\n     /// block indefinitely. It is an error to pass the zero [`Duration`] to this\n     /// method.\n     ///\n     /// [`None`]: ../../../../std/option/enum.Option.html#variant.None\n-    /// [`recv()`]: #method.recv\n-    /// [`recv_from()`]: #method.recv_from\n+    /// [`recv`]: #method.recv\n+    /// [`recv_from`]: #method.recv_from\n     /// [`Duration`]: ../../../../std/time/struct.Duration.html\n     ///\n     /// # Examples\n@@ -1203,13 +1203,13 @@ impl UnixDatagram {\n \n     /// Sets the write timeout for the socket.\n     ///\n-    /// If the provided value is [`None`], then [`send()`] and [`send_to()`] calls will\n+    /// If the provided value is [`None`], then [`send`] and [`send_to`] calls will\n     /// block indefinitely. It is an error to pass the zero [`Duration`] to this\n     /// method.\n     ///\n     /// [`None`]: ../../../../std/option/enum.Option.html#variant.None\n-    /// [`send()`]: #method.send\n-    /// [`send_to()`]: #method.send_to\n+    /// [`send`]: #method.send\n+    /// [`send_to`]: #method.send_to\n     /// [`Duration`]: ../../../../std/time/struct.Duration.html\n     ///\n     /// # Examples"}, {"sha": "64c2be25222a0c8336c286bd1dd973a54397341b", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -90,29 +90,29 @@\n //! two ways:\n //!\n //! * By spawning a new thread, e.g. using the [`thread::spawn`][`spawn`]\n-//!   function, and calling [`thread()`] on the [`JoinHandle`].\n-//! * By requesting the current thread, using the [`thread::current()`] function.\n+//!   function, and calling [`thread`] on the [`JoinHandle`].\n+//! * By requesting the current thread, using the [`thread::current`] function.\n //!\n-//! The [`thread::current()`] function is available even for threads not spawned\n+//! The [`thread::current`] function is available even for threads not spawned\n //! by the APIs of this module.\n //!\n //! ## Blocking support: park and unpark\n //!\n //! Every thread is equipped with some basic low-level blocking support, via the\n-//! [`thread::park()`][`park()`] function and [`thread::Thread::unpark()`][`unpark()`]\n-//! method. [`park()`] blocks the current thread, which can then be resumed from\n-//! another thread by calling the [`unpark()`] method on the blocked thread's handle.\n+//! [`thread::park`][`park`] function and [`thread::Thread::unpark()`][`unpark`]\n+//! method. [`park`] blocks the current thread, which can then be resumed from\n+//! another thread by calling the [`unpark`] method on the blocked thread's handle.\n //!\n //! Conceptually, each [`Thread`] handle has an associated token, which is\n //! initially not present:\n //!\n-//! * The [`thread::park()`][`park()`] function blocks the current thread unless or until\n+//! * The [`thread::park`][`park`] function blocks the current thread unless or until\n //!   the token is available for its thread handle, at which point it atomically\n //!   consumes the token. It may also return *spuriously*, without consuming the\n-//!   token. [`thread::park_timeout()`] does the same, but allows specifying a\n+//!   token. [`thread::park_timeout`] does the same, but allows specifying a\n //!   maximum time to block the thread for.\n //!\n-//! * The [`unpark()`] method on a [`Thread`] atomically makes the token available\n+//! * The [`unpark`] method on a [`Thread`] atomically makes the token available\n //!   if it wasn't already.\n //!\n //! In other words, each [`Thread`] acts a bit like a semaphore with initial count\n@@ -122,7 +122,7 @@\n //! The API is typically used by acquiring a handle to the current thread,\n //! placing that handle in a shared data structure so that other threads can\n //! find it, and then `park`ing. When some desired condition is met, another\n-//! thread calls [`unpark()`] on the handle.\n+//! thread calls [`unpark`] on the handle.\n //!\n //! The motivation for this design is twofold:\n //!\n@@ -151,18 +151,18 @@\n //! [`Arc`]: ../../std/sync/struct.Arc.html\n //! [`spawn`]: ../../std/thread/fn.spawn.html\n //! [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n-//! [`thread()`]: ../../std/thread/struct.JoinHandle.html#method.thread\n+//! [`thread`]: ../../std/thread/struct.JoinHandle.html#method.thread\n //! [`join`]: ../../std/thread/struct.JoinHandle.html#method.join\n //! [`Result`]: ../../std/result/enum.Result.html\n //! [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n //! [`Err`]: ../../std/result/enum.Result.html#variant.Err\n //! [`panic!`]: ../../std/macro.panic.html\n //! [`Builder`]: ../../std/thread/struct.Builder.html\n-//! [`thread::current()`]: ../../std/thread/fn.spawn.html\n+//! [`thread::current`]: ../../std/thread/fn.spawn.html\n //! [`Thread`]: ../../std/thread/struct.Thread.html\n-//! [`park()`]: ../../std/thread/fn.park.html\n-//! [`unpark()`]: ../../std/thread/struct.Thread.html#method.unpark\n-//! [`thread::park_timeout()`]: ../../std/thread/fn.park_timeout.html\n+//! [`park`]: ../../std/thread/fn.park.html\n+//! [`unpark`]: ../../std/thread/struct.Thread.html#method.unpark\n+//! [`thread::park_timeout`]: ../../std/thread/fn.park_timeout.html\n //! [`Cell`]: ../cell/struct.Cell.html\n //! [`RefCell`]: ../cell/struct.RefCell.html\n //! [`thread_local!`]: ../macro.thread_local.html\n@@ -547,7 +547,7 @@ pub fn sleep(dur: Duration) {\n /// Blocks unless or until the current thread's token is made available.\n ///\n /// Every thread is equipped with some basic low-level blocking support, via\n-/// the `park()` function and the [`unpark()`][unpark] method. These can be\n+/// the `park()` function and the [`unpark`][unpark] method. These can be\n /// used as a more CPU-efficient implementation of a spinlock.\n ///\n /// [unpark]: struct.Thread.html#method.unpark"}, {"sha": "682eec490bc652ccbd15020834454150e8fbd2ac", "filename": "src/libstd_unicode/char.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69717170a410cd8f3e9647c5f38c72eff59e4c72/src%2Flibstd_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fchar.rs?ref=69717170a410cd8f3e9647c5f38c72eff59e4c72", "patch": "@@ -49,10 +49,10 @@ pub use tables::UNICODE_VERSION;\n \n /// Returns an iterator that yields the lowercase equivalent of a `char`.\n ///\n-/// This `struct` is created by the [`to_lowercase()`] method on [`char`]. See\n+/// This `struct` is created by the [`to_lowercase`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`to_lowercase()`]: ../../std/primitive.char.html#method.to_lowercase\n+/// [`to_lowercase`]: ../../std/primitive.char.html#method.to_lowercase\n /// [`char`]: ../../std/primitive.char.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ToLowercase(CaseMappingIter);\n@@ -70,10 +70,10 @@ impl FusedIterator for ToLowercase {}\n \n /// Returns an iterator that yields the uppercase equivalent of a `char`.\n ///\n-/// This `struct` is created by the [`to_uppercase()`] method on [`char`]. See\n+/// This `struct` is created by the [`to_uppercase`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`to_uppercase()`]: ../../std/primitive.char.html#method.to_uppercase\n+/// [`to_uppercase`]: ../../std/primitive.char.html#method.to_uppercase\n /// [`char`]: ../../std/primitive.char.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ToUppercase(CaseMappingIter);\n@@ -183,7 +183,7 @@ impl char {\n     /// * `a-z`\n     /// * `A-Z`\n     ///\n-    /// For a more comprehensive understanding of 'digit', see [`is_numeric()`][is_numeric].\n+    /// For a more comprehensive understanding of 'digit', see [`is_numeric`][is_numeric].\n     ///\n     /// [is_numeric]: #method.is_numeric\n     ///\n@@ -465,10 +465,10 @@ impl char {\n     /// Returns the number of 16-bit code units this `char` would need if\n     /// encoded in UTF-16.\n     ///\n-    /// See the documentation for [`len_utf8()`] for more explanation of this\n+    /// See the documentation for [`len_utf8`] for more explanation of this\n     /// concept. This function is a mirror, but for UTF-16 instead of UTF-8.\n     ///\n-    /// [`len_utf8()`]: #method.len_utf8\n+    /// [`len_utf8`]: #method.len_utf8\n     ///\n     /// # Examples\n     ///"}]}