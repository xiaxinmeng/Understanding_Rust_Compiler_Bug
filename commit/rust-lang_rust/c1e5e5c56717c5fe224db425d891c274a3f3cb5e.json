{"sha": "c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZTVlNWM1NjcxN2M1ZmUyMjRkYjQyNWQ4OTFjMjc0YTNmM2NiNWU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-03T03:22:22Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-03T03:22:22Z"}, "message": "On object safety violation, point at source when possible", "tree": {"sha": "7ecaa81f0c9ca5821811815c864484d456b3722e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ecaa81f0c9ca5821811815c864484d456b3722e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "html_url": "https://github.com/rust-lang/rust/commit/c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ea932ab0e622104c97d3818350388de3012c833", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ea932ab0e622104c97d3818350388de3012c833", "html_url": "https://github.com/rust-lang/rust/commit/3ea932ab0e622104c97d3818350388de3012c833"}], "stats": {"total": 213, "additions": 129, "deletions": 84}, "files": [{"sha": "03cc00d87e3cd3091843b68545bb2e32672efc5e", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -1384,7 +1384,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         let mut reported_violations = FxHashSet::default();\n         for violation in violations {\n             if reported_violations.insert(violation.clone()) {\n-                err.note(&violation.error_msg());\n+                match violation.span() {\n+                    Some(span) => err.span_label(span, violation.error_msg()),\n+                    None => err.note(&violation.error_msg()),\n+                };\n             }\n         }\n         Some(err)"}, {"sha": "50f497e302e6d68c815c4f03bb570def496f09a2", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -32,10 +32,10 @@ pub enum ObjectSafetyViolation {\n     SupertraitSelf,\n \n     /// Method has something illegal.\n-    Method(ast::Name, MethodViolationCode),\n+    Method(ast::Name, MethodViolationCode, Span),\n \n     /// Associated const.\n-    AssocConst(ast::Name),\n+    AssocConst(ast::Name, Span),\n }\n \n impl ObjectSafetyViolation {\n@@ -46,24 +46,33 @@ impl ObjectSafetyViolation {\n             ObjectSafetyViolation::SupertraitSelf =>\n                 \"the trait cannot use `Self` as a type parameter \\\n                  in the supertraits or where-clauses\".into(),\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod) =>\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod, _) =>\n                 format!(\"associated function `{}` has no `self` parameter\", name).into(),\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelf) => format!(\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelf, _) => format!(\n                 \"method `{}` references the `Self` type in its arguments or return type\",\n                 name,\n             ).into(),\n             ObjectSafetyViolation::Method(\n                 name,\n-                MethodViolationCode::WhereClauseReferencesSelf(_),\n+                MethodViolationCode::WhereClauseReferencesSelf,\n+                _,\n             ) => format!(\"method `{}` references the `Self` type in where clauses\", name).into(),\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::Generic) =>\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::Generic, _) =>\n                 format!(\"method `{}` has generic type parameters\", name).into(),\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::UndispatchableReceiver) =>\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::UndispatchableReceiver, _) =>\n                 format!(\"method `{}`'s receiver cannot be dispatched on\", name).into(),\n-            ObjectSafetyViolation::AssocConst(name) =>\n+            ObjectSafetyViolation::AssocConst(name, _) =>\n                 format!(\"the trait cannot contain associated consts like `{}`\", name).into(),\n         }\n     }\n+\n+    pub fn span(&self) -> Option<Span> {\n+        match self {\n+            ObjectSafetyViolation::AssocConst(_, span) |\n+            ObjectSafetyViolation::Method(_, _, span) => Some(*span),\n+            _ => None,\n+        }\n+    }\n }\n \n /// Reasons a method might not be object-safe.\n@@ -76,7 +85,7 @@ pub enum MethodViolationCode {\n     ReferencesSelf,\n \n     /// e.g., `fn foo(&self) where Self: Clone`\n-    WhereClauseReferencesSelf(Span),\n+    WhereClauseReferencesSelf,\n \n     /// e.g., `fn foo<A>()`\n     Generic,\n@@ -90,9 +99,10 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// astconv -- currently, `Self` in supertraits. This is needed\n     /// because `object_safety_violations` can't be used during\n     /// type collection.\n-    pub fn astconv_object_safety_violations(self, trait_def_id: DefId)\n-                                            -> Vec<ObjectSafetyViolation>\n-    {\n+    pub fn astconv_object_safety_violations(\n+        self,\n+        trait_def_id: DefId,\n+    ) -> Vec<ObjectSafetyViolation> {\n         debug_assert!(self.generics_of(trait_def_id).has_self);\n         let violations = traits::supertrait_def_ids(self, trait_def_id)\n             .filter(|&def_id| self.predicates_reference_self(def_id, true))\n@@ -130,7 +140,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n \n         match self.virtual_call_violation_for_method(trait_def_id, method) {\n-            None | Some(MethodViolationCode::WhereClauseReferencesSelf(_)) => true,\n+            None | Some(MethodViolationCode::WhereClauseReferencesSelf) => true,\n             Some(_) => false,\n         }\n     }\n@@ -140,12 +150,15 @@ impl<'tcx> TyCtxt<'tcx> {\n         let mut violations: Vec<_> = self.associated_items(trait_def_id)\n             .filter(|item| item.kind == ty::AssocKind::Method)\n             .filter_map(|item|\n-                self.object_safety_violation_for_method(trait_def_id, &item)\n-                    .map(|code| ObjectSafetyViolation::Method(item.ident.name, code))\n+                self.object_safety_violation_for_method(trait_def_id, &item).map(|code| {\n+                    ObjectSafetyViolation::Method(item.ident.name, code, item.ident.span)\n+                })\n             ).filter(|violation| {\n-                if let ObjectSafetyViolation::Method(_,\n-                    MethodViolationCode::WhereClauseReferencesSelf(span)) = violation\n-                {\n+                if let ObjectSafetyViolation::Method(\n+                    _,\n+                    MethodViolationCode::WhereClauseReferencesSelf,\n+                    span,\n+                ) = violation {\n                     // Using `CRATE_NODE_ID` is wrong, but it's hard to get a more precise id.\n                     // It's also hard to get a use site span, so we use the method definition span.\n                     self.lint_node_note(\n@@ -171,7 +184,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         violations.extend(self.associated_items(trait_def_id)\n             .filter(|item| item.kind == ty::AssocKind::Const)\n-            .map(|item| ObjectSafetyViolation::AssocConst(item.ident.name)));\n+            .map(|item| ObjectSafetyViolation::AssocConst(item.ident.name, item.ident.span)));\n \n         debug!(\"object_safety_violations_for_trait(trait_def_id={:?}) = {:?}\",\n                trait_def_id,\n@@ -327,8 +340,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 .visit_tys_shallow(|t| {\n                     self.contains_illegal_self_type_reference(trait_def_id, t)\n                 }) {\n-            let span = self.def_span(method.def_id);\n-            return Some(MethodViolationCode::WhereClauseReferencesSelf(span));\n+            return Some(MethodViolationCode::WhereClauseReferencesSelf);\n         }\n \n         let receiver_ty = self.liberate_late_bound_regions("}, {"sha": "a5d7fc5b7024685e0d7d9b677bb7a6853f3f8934", "filename": "src/test/ui/associated-const/associated-const-in-trait.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/associated-const-in-trait.rs:9:6\n    |\n+LL |     const N: usize;\n+   |           - the trait cannot contain associated consts like `N`\n+...\n LL | impl dyn Trait {\n    |      ^^^^^^^^^ the trait `Trait` cannot be made into an object\n-   |\n-   = note: the trait cannot contain associated consts like `N`\n \n error: aborting due to previous error\n "}, {"sha": "2626eab3cbf23388a6ce1c3913980f1b0bd40089", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -1,10 +1,10 @@\n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:11:6\n    |\n+LL | trait NotObjectSafe { fn eq(&self, other: Self); }\n+   |                          -- method `eq` references the `Self` type in its arguments or return type\n LL | impl NotObjectSafe for dyn NotObjectSafe { }\n    |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n-   |\n-   = note: method `eq` references the `Self` type in its arguments or return type\n \n error: aborting due to previous error\n "}, {"sha": "2626eab3cbf23388a6ce1c3913980f1b0bd40089", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.re.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -1,10 +1,10 @@\n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:11:6\n    |\n+LL | trait NotObjectSafe { fn eq(&self, other: Self); }\n+   |                          -- method `eq` references the `Self` type in its arguments or return type\n LL | impl NotObjectSafe for dyn NotObjectSafe { }\n    |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n-   |\n-   = note: method `eq` references the `Self` type in its arguments or return type\n \n error: aborting due to previous error\n "}, {"sha": "5b384045a486abce4305ac22682809efd07ead89", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -61,8 +61,9 @@ error[E0038]: the trait `X` cannot be made into an object\n    |\n LL | impl dyn X {\n    |      ^^^^^ the trait `X` cannot be made into an object\n-   |\n-   = note: associated function `xxx` has no `self` parameter\n+...\n+LL |     fn xxx() { ### }\n+   |        --- associated function `xxx` has no `self` parameter\n \n error: aborting due to 9 previous errors\n "}, {"sha": "19439651394234071986e9fd56e3f16f9a4b1a12", "filename": "src/test/ui/error-codes/E0033-teach.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -1,14 +1,13 @@\n // compile-flags: -Z teach\n \n trait SomeTrait {\n-    fn foo();\n+    fn foo(); //~ associated function `foo` has no `self` parameter\n }\n \n fn main() {\n     let trait_obj: &dyn SomeTrait = SomeTrait;\n     //~^ ERROR expected value, found trait `SomeTrait`\n     //~| ERROR E0038\n-    //~| associated function `foo` has no `self` parameter\n \n     let &invalid = trait_obj;\n     //~^ ERROR E0033"}, {"sha": "80f3d4441bd9faf6acfd0bc1350aa7b79a8cedc4", "filename": "src/test/ui/error-codes/E0033-teach.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -7,13 +7,14 @@ LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n error[E0038]: the trait `SomeTrait` cannot be made into an object\n   --> $DIR/E0033-teach.rs:8:20\n    |\n+LL |     fn foo();\n+   |        --- associated function `foo` has no `self` parameter\n+...\n LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n    |                    ^^^^^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n-   |\n-   = note: associated function `foo` has no `self` parameter\n \n error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n-  --> $DIR/E0033-teach.rs:13:9\n+  --> $DIR/E0033-teach.rs:12:9\n    |\n LL |     let &invalid = trait_obj;\n    |         ^^^^^^^^ type `&dyn SomeTrait` cannot be dereferenced"}, {"sha": "e5f0530f45ff86ae0a5550512d394184db90fe58", "filename": "src/test/ui/error-codes/E0033.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -1,12 +1,11 @@\n trait SomeTrait {\n-    fn foo();\n+    fn foo(); //~ associated function `foo` has no `self` parameter\n }\n \n fn main() {\n     let trait_obj: &dyn SomeTrait = SomeTrait;\n     //~^ ERROR expected value, found trait `SomeTrait`\n     //~| ERROR E0038\n-    //~| associated function `foo` has no `self` parameter\n \n     let &invalid = trait_obj;\n     //~^ ERROR E0033"}, {"sha": "c2843796cc851b82c578555ab57ccfbf1ce9dc66", "filename": "src/test/ui/error-codes/E0033.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -7,13 +7,14 @@ LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n error[E0038]: the trait `SomeTrait` cannot be made into an object\n   --> $DIR/E0033.rs:6:20\n    |\n+LL |     fn foo();\n+   |        --- associated function `foo` has no `self` parameter\n+...\n LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n    |                    ^^^^^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n-   |\n-   = note: associated function `foo` has no `self` parameter\n \n error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n-  --> $DIR/E0033.rs:11:9\n+  --> $DIR/E0033.rs:10:9\n    |\n LL |     let &invalid = trait_obj;\n    |         ^^^^^^^^ type `&dyn SomeTrait` cannot be dereferenced"}, {"sha": "93a7681393b29eef11602d8dae5ea3416ee3ee14", "filename": "src/test/ui/error-codes/E0038.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/E0038.rs:5:1\n    |\n+LL |     fn foo(&self) -> Self;\n+   |        --- method `foo` references the `Self` type in its arguments or return type\n+...\n LL | fn call_foo(x: Box<dyn Trait>) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n-   |\n-   = note: method `foo` references the `Self` type in its arguments or return type\n \n error: aborting due to previous error\n "}, {"sha": "d5e7092801ecd9b3806bc9fa5360f7b39940b20e", "filename": "src/test/ui/issues/issue-18959.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-18959.rs:11:1\n    |\n+LL | pub trait Foo { fn foo<T>(&self, ext_thing: &T); }\n+   |                    --- method `foo` has generic type parameters\n+...\n LL | fn foo(b: &dyn Bar) {\n    | ^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: method `foo` has generic type parameters\n \n error: aborting due to previous error\n "}, {"sha": "92bfdf1f26e93828b4eb0796d05086b17dc7826d", "filename": "src/test/ui/issues/issue-19380.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Qiz` cannot be made into an object\n   --> $DIR/issue-19380.rs:11:3\n    |\n+LL |   fn qiz();\n+   |      --- associated function `qiz` has no `self` parameter\n+...\n LL |   foos: &'static [&'static (dyn Qiz + 'static)]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Qiz` cannot be made into an object\n-   |\n-   = note: associated function `qiz` has no `self` parameter\n \n error: aborting due to previous error\n "}, {"sha": "5415a45f7d621c41812f53ed39eb7bd0ed9fae59", "filename": "src/test/ui/issues/issue-19538.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -1,18 +1,21 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-19538.rs:17:15\n    |\n+LL |     fn foo<T>(&self, val: T);\n+   |        --- method `foo` has generic type parameters\n+...\n LL |     let test: &mut dyn Bar = &mut thing;\n    |               ^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: method `foo` has generic type parameters\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-19538.rs:17:30\n    |\n+LL |     fn foo<T>(&self, val: T);\n+   |        --- method `foo` has generic type parameters\n+...\n LL |     let test: &mut dyn Bar = &mut thing;\n    |                              ^^^^^^^^^^ the trait `Bar` cannot be made into an object\n    |\n-   = note: method `foo` has generic type parameters\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&mut dyn Bar>` for `&mut Thing`\n \n error: aborting due to 2 previous errors"}, {"sha": "02475ea97e3d1fe81fd8a95851f873912b24bffc", "filename": "src/test/ui/issues/issue-50781.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -1,8 +1,8 @@\n error: the trait `X` cannot be made into an object\n-  --> $DIR/issue-50781.rs:6:5\n+  --> $DIR/issue-50781.rs:6:8\n    |\n LL |     fn foo(&self) where Self: Trait;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^\n    |\n note: lint level defined here\n   --> $DIR/issue-50781.rs:1:9"}, {"sha": "7d5aa00356e0b5b767cedf8af3c89e84c12d41f4", "filename": "src/test/ui/object-safety/object-safety-associated-consts.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.stderr?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-associated-consts.rs:9:1\n    |\n+LL |     const X: usize;\n+   |           - the trait cannot contain associated consts like `X`\n+...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: the trait cannot contain associated consts like `X`\n \n error: aborting due to previous error\n "}, {"sha": "b25e0052e4163f98c46a95c955af2671a7b68cad", "filename": "src/test/ui/object-safety/object-safety-generics.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.stderr?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -1,18 +1,20 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:14:1\n    |\n+LL |     fn bar<T>(&self, t: T);\n+   |        --- method `bar` has generic type parameters\n+...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: method `bar` has generic type parameters\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:19:1\n    |\n+LL |     fn bar<T>(&self, t: T);\n+   |        --- method `bar` has generic type parameters\n+...\n LL | fn make_bar_explicit<T:Bar>(t: &T) -> &dyn Bar {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: method `bar` has generic type parameters\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e2d1e773809bbd55b4251f1f288680c2c96677e6", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.stderr?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -1,18 +1,20 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:17:1\n    |\n+LL |     fn bar(&self, x: &Self);\n+   |        --- method `bar` references the `Self` type in its arguments or return type\n+...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: method `bar` references the `Self` type in its arguments or return type\n \n error[E0038]: the trait `Baz` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:22:1\n    |\n+LL |     fn bar(&self) -> Self;\n+   |        --- method `bar` references the `Self` type in its arguments or return type\n+...\n LL | fn make_baz<T:Baz>(t: &T) -> &dyn Baz {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Baz` cannot be made into an object\n-   |\n-   = note: method `bar` references the `Self` type in its arguments or return type\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0de783f60ea4743fd9c5a61ecc14c1a5bcdf502a", "filename": "src/test/ui/object-safety/object-safety-no-static.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.stderr?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/object-safety-no-static.rs:8:1\n    |\n+LL |     fn foo();\n+   |        --- associated function `foo` has no `self` parameter\n+...\n LL | fn foo_implicit<T:Foo+'static>(b: Box<T>) -> Box<dyn Foo + 'static> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n-   |\n-   = note: associated function `foo` has no `self` parameter\n \n error: aborting due to previous error\n "}, {"sha": "087d1a5b9d3656e2b96aaee5fca1ec90ff76889d", "filename": "src/test/ui/resolve/issue-3907-2.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -3,8 +3,6 @@ error[E0038]: the trait `issue_3907::Foo` cannot be made into an object\n    |\n LL | fn bar(_x: Foo) {}\n    | ^^^^^^^^^^^^^^^ the trait `issue_3907::Foo` cannot be made into an object\n-   |\n-   = note: associated function `bar` has no `self` parameter\n \n error: aborting due to previous error\n "}, {"sha": "9fb1500afce47aa9fa10bc8deadf76246e44bf42", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.stderr?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -1,18 +1,21 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:31:32\n    |\n+LL |     fn foo(self: &Rc<Self>) -> usize;\n+   |        --- method `foo`'s receiver cannot be dispatched on\n+...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n    |                                ^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n-   |\n-   = note: method `foo`'s receiver cannot be dispatched on\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:31:13\n    |\n+LL |     fn foo(self: &Rc<Self>) -> usize;\n+   |        --- method `foo`'s receiver cannot be dispatched on\n+...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n    |             ^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n-   = note: method `foo`'s receiver cannot be dispatched on\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::rc::Rc<dyn Foo>>` for `std::rc::Rc<usize>`\n \n error: aborting due to 2 previous errors"}, {"sha": "aec648d7b8473d0561d99a87b82bf773f80ae7f6", "filename": "src/test/ui/traits/trait-item-privacy.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -103,12 +103,17 @@ LL |     C::A;\n error[E0038]: the trait `assoc_const::C` cannot be made into an object\n   --> $DIR/trait-item-privacy.rs:101:5\n    |\n+LL |         const A: u8 = 0;\n+   |               - the trait cannot contain associated consts like `A`\n+...\n+LL |         const B: u8 = 0;\n+   |               - the trait cannot contain associated consts like `B`\n+...\n+LL |         const C: u8 = 0;\n+   |               - the trait cannot contain associated consts like `C`\n+...\n LL |     C::A;\n    |     ^^^^ the trait `assoc_const::C` cannot be made into an object\n-   |\n-   = note: the trait cannot contain associated consts like `C`\n-   = note: the trait cannot contain associated consts like `B`\n-   = note: the trait cannot contain associated consts like `A`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/trait-item-privacy.rs:115:12"}, {"sha": "3ac1e96b30c95121989a9d3fdd11a980864f3a6b", "filename": "src/test/ui/traits/trait-object-safety.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -1,19 +1,22 @@\n error[E0038]: the trait `Tr` cannot be made into an object\n   --> $DIR/trait-object-safety.rs:15:22\n    |\n+LL |     fn foo();\n+   |        --- associated function `foo` has no `self` parameter\n+...\n LL |     let _: &dyn Tr = &St;\n    |                      ^^^ the trait `Tr` cannot be made into an object\n    |\n-   = note: associated function `foo` has no `self` parameter\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Tr>` for `&St`\n \n error[E0038]: the trait `Tr` cannot be made into an object\n   --> $DIR/trait-object-safety.rs:15:12\n    |\n+LL |     fn foo();\n+   |        --- associated function `foo` has no `self` parameter\n+...\n LL |     let _: &dyn Tr = &St;\n    |            ^^^^^^^ the trait `Tr` cannot be made into an object\n-   |\n-   = note: associated function `foo` has no `self` parameter\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4d2aca0d4094ac6ae243e6eb625a48cf54bcdb1b", "filename": "src/test/ui/traits/trait-test-2.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -13,20 +13,25 @@ LL |     10.blah::<i32, i32>();\n error[E0038]: the trait `bar` cannot be made into an object\n   --> $DIR/trait-test-2.rs:11:16\n    |\n+LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n+   |                ---                    ---- method `blah` has generic type parameters\n+   |                |\n+   |                method `dup` references the `Self` type in its arguments or return type\n+...\n LL |     (box 10 as Box<dyn bar>).dup();\n    |                ^^^^^^^^^^^^ the trait `bar` cannot be made into an object\n-   |\n-   = note: method `dup` references the `Self` type in its arguments or return type\n-   = note: method `blah` has generic type parameters\n \n error[E0038]: the trait `bar` cannot be made into an object\n   --> $DIR/trait-test-2.rs:11:6\n    |\n+LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n+   |                ---                    ---- method `blah` has generic type parameters\n+   |                |\n+   |                method `dup` references the `Self` type in its arguments or return type\n+...\n LL |     (box 10 as Box<dyn bar>).dup();\n    |      ^^^^^^ the trait `bar` cannot be made into an object\n    |\n-   = note: method `dup` references the `Self` type in its arguments or return type\n-   = note: method `blah` has generic type parameters\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn bar>>` for `std::boxed::Box<{integer}>`\n \n error: aborting due to 4 previous errors"}, {"sha": "03df5b821188952e0501df7d66db395cf5f9db1c", "filename": "src/test/ui/type/type-parameter-defaults-referencing-Self-ppaux.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -13,10 +13,11 @@ LL |     let y = x as dyn MyAdd<i32>;\n error[E0038]: the trait `MyAdd` cannot be made into an object\n   --> $DIR/type-parameter-defaults-referencing-Self-ppaux.rs:14:18\n    |\n+LL | trait MyAdd<Rhs=Self> { fn add(&self, other: &Rhs) -> Self; }\n+   |                            --- method `add` references the `Self` type in its arguments or return type\n+...\n LL |     let y = x as dyn MyAdd<i32>;\n    |                  ^^^^^^^^^^^^^^ the trait `MyAdd` cannot be made into an object\n-   |\n-   = note: method `add` references the `Self` type in its arguments or return type\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d11af11f05051fff63b9e30eb9bb9488c918311e", "filename": "src/test/ui/wf/wf-object-safe.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e5e5c56717c5fe224db425d891c274a3f3cb5e/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr?ref=c1e5e5c56717c5fe224db425d891c274a3f3cb5e", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `A` cannot be made into an object\n   --> $DIR/wf-object-safe.rs:9:13\n    |\n+LL |     fn foo(&self, _x: &Self);\n+   |        --- method `foo` references the `Self` type in its arguments or return type\n+...\n LL |     let _x: &dyn A;\n    |             ^^^^^^ the trait `A` cannot be made into an object\n-   |\n-   = note: method `foo` references the `Self` type in its arguments or return type\n \n error: aborting due to previous error\n "}]}