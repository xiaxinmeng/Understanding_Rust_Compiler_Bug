{"sha": "a409076df4ac1e80d0e8b4ed55608cbd354129ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MDkwNzZkZjRhYzFlODBkMGU4YjRlZDU1NjA4Y2JkMzU0MTI5ZWY=", "commit": {"author": {"name": "Ruud van Asseldonk", "email": "ruuda@google.com", "date": "2016-03-05T15:25:58Z"}, "committer": {"name": "Ruud van Asseldonk", "email": "ruuda@google.com", "date": "2016-03-05T15:37:11Z"}, "message": "Regenerate x86 platform intrinsics\n\nThe exact command used was:\n\n    $ cd src/etc/platform-intrinsics/x86\n    $ python2 ../generator.py --format compiler-defs -i info.json   \\\n      sse.json sse2.json sse3.json ssse3.json sse41.json sse42.json \\\n      avx.json avx2.json fma.json                                   \\\n      > ../../../librustc_platform_intrinsics/x86.rs", "tree": {"sha": "e4e3247b582beba584320a491d264d1ced0d7250", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4e3247b582beba584320a491d264d1ced0d7250"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a409076df4ac1e80d0e8b4ed55608cbd354129ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a409076df4ac1e80d0e8b4ed55608cbd354129ef", "html_url": "https://github.com/rust-lang/rust/commit/a409076df4ac1e80d0e8b4ed55608cbd354129ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a409076df4ac1e80d0e8b4ed55608cbd354129ef/comments", "author": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ce0cf1c87012dca1f21513566eab8b3210b029b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ce0cf1c87012dca1f21513566eab8b3210b029b", "html_url": "https://github.com/rust-lang/rust/commit/0ce0cf1c87012dca1f21513566eab8b3210b029b"}], "stats": {"total": 120, "additions": 120, "deletions": 0}, "files": [{"sha": "168ae79ab748ff6fcd73fb34d727fc0c0a1b0f91", "filename": "src/librustc_platform_intrinsics/x86.rs", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/a409076df4ac1e80d0e8b4ed55608cbd354129ef/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a409076df4ac1e80d0e8b4ed55608cbd354129ef/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fx86.rs?ref=a409076df4ac1e80d0e8b4ed55608cbd354129ef", "patch": "@@ -1108,6 +1108,126 @@ pub fn find<'tcx>(_tcx: &TyCtxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             output: v(u(16), 16),\n             definition: Named(\"llvm.x86.avx2.psubus.w\")\n         },\n+        \"_fmadd_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), v(f(32), 4), v(f(32), 4)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.fma.vfmadd.ps\")\n+        },\n+        \"_fmadd_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), v(f(64), 2), v(f(64), 2)],\n+            output: v(f(64), 2),\n+            definition: Named(\"llvm.x86.fma.vfmadd.pd\")\n+        },\n+        \"256_fmadd_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), v(f(32), 8), v(f(32), 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.fma.vfmadd.ps.256\")\n+        },\n+        \"256_fmadd_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4), v(f(64), 4), v(f(64), 4)],\n+            output: v(f(64), 4),\n+            definition: Named(\"llvm.x86.fma.vfmadd.pd.256\")\n+        },\n+        \"_fmaddsub_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), v(f(32), 4), v(f(32), 4)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.fma.vfmaddsub.ps\")\n+        },\n+        \"_fmaddsub_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), v(f(64), 2), v(f(64), 2)],\n+            output: v(f(64), 2),\n+            definition: Named(\"llvm.x86.fma.vfmaddsub.pd\")\n+        },\n+        \"256_fmaddsub_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), v(f(32), 8), v(f(32), 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.fma.vfmaddsub.ps.256\")\n+        },\n+        \"256_fmaddsub_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4), v(f(64), 4), v(f(64), 4)],\n+            output: v(f(64), 4),\n+            definition: Named(\"llvm.x86.fma.vfmaddsub.pd.256\")\n+        },\n+        \"_fmsub_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), v(f(32), 4), v(f(32), 4)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.fma.vfmsub.ps\")\n+        },\n+        \"_fmsub_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), v(f(64), 2), v(f(64), 2)],\n+            output: v(f(64), 2),\n+            definition: Named(\"llvm.x86.fma.vfmsub.pd\")\n+        },\n+        \"256_fmsub_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), v(f(32), 8), v(f(32), 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.fma.vfmsub.ps.256\")\n+        },\n+        \"256_fmsub_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4), v(f(64), 4), v(f(64), 4)],\n+            output: v(f(64), 4),\n+            definition: Named(\"llvm.x86.fma.vfmsub.pd.256\")\n+        },\n+        \"_fmsubadd_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), v(f(32), 4), v(f(32), 4)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.fma.vfmsubadd.ps\")\n+        },\n+        \"_fmsubadd_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), v(f(64), 2), v(f(64), 2)],\n+            output: v(f(64), 2),\n+            definition: Named(\"llvm.x86.fma.vfmsubadd.pd\")\n+        },\n+        \"256_fmsubadd_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), v(f(32), 8), v(f(32), 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.fma.vfmsubadd.ps.256\")\n+        },\n+        \"256_fmsubadd_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4), v(f(64), 4), v(f(64), 4)],\n+            output: v(f(64), 4),\n+            definition: Named(\"llvm.x86.fma.vfmsubadd.pd.256\")\n+        },\n+        \"_fnmadd_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), v(f(32), 4), v(f(32), 4)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.fma.vfnmadd.ps\")\n+        },\n+        \"_fnmadd_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), v(f(64), 2), v(f(64), 2)],\n+            output: v(f(64), 2),\n+            definition: Named(\"llvm.x86.fma.vfnmadd.pd\")\n+        },\n+        \"256_fnmadd_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), v(f(32), 8), v(f(32), 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.fma.vfnmadd.ps.256\")\n+        },\n+        \"256_fnmadd_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4), v(f(64), 4), v(f(64), 4)],\n+            output: v(f(64), 4),\n+            definition: Named(\"llvm.x86.fma.vfnmadd.pd.256\")\n+        },\n+        \"_fnmsub_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), v(f(32), 4), v(f(32), 4)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.fma.vfnmsub.ps\")\n+        },\n+        \"_fnmsub_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), v(f(64), 2), v(f(64), 2)],\n+            output: v(f(64), 2),\n+            definition: Named(\"llvm.x86.fma.vfnmsub.pd\")\n+        },\n+        \"256_fnmsub_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), v(f(32), 8), v(f(32), 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.fma.vfnmsub.ps.256\")\n+        },\n+        \"256_fnmsub_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4), v(f(64), 4), v(f(64), 4)],\n+            output: v(f(64), 4),\n+            definition: Named(\"llvm.x86.fma.vfnmsub.pd.256\")\n+        },\n         _ => return None,\n     })\n }"}]}