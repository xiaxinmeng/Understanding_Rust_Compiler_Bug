{"sha": "c66ae29883faaed0fd32ad03165e6882069c4832", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NmFlMjk4ODNmYWFlZDBmZDMyYWQwMzE2NWU2ODgyMDY5YzQ4MzI=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-10-07T20:12:21Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-10-07T20:14:28Z"}, "message": "rewrite checked_{div,rem} to no contain any reference to panics\n\neven without optimizations", "tree": {"sha": "cab3e1f2faa99017847bccd01e8c795c815a3708", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cab3e1f2faa99017847bccd01e8c795c815a3708"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c66ae29883faaed0fd32ad03165e6882069c4832", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c66ae29883faaed0fd32ad03165e6882069c4832", "html_url": "https://github.com/rust-lang/rust/commit/c66ae29883faaed0fd32ad03165e6882069c4832", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c66ae29883faaed0fd32ad03165e6882069c4832/comments", "author": null, "committer": null, "parents": [{"sha": "ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "html_url": "https://github.com/rust-lang/rust/commit/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "516d6f7c4a0bd956d978b8090e9fc2e9bd78f844", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c66ae29883faaed0fd32ad03165e6882069c4832/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66ae29883faaed0fd32ad03165e6882069c4832/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c66ae29883faaed0fd32ad03165e6882069c4832", "patch": "@@ -516,11 +516,10 @@ macro_rules! int_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n         pub fn checked_div(self, other: Self) -> Option<Self> {\n-            if other == 0 {\n+            if other == 0 || (self == Self::min_value() && other == -1) {\n                 None\n             } else {\n-                let (a, b) = self.overflowing_div(other);\n-                if b {None} else {Some(a)}\n+                Some(unsafe { intrinsics::unchecked_div(self, other) })\n             }\n         }\n \n@@ -541,11 +540,10 @@ macro_rules! int_impl {\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         #[inline]\n         pub fn checked_rem(self, other: Self) -> Option<Self> {\n-            if other == 0 {\n+            if other == 0 || (self == Self::min_value() && other == -1) {\n                 None\n             } else {\n-                let (a, b) = self.overflowing_rem(other);\n-                if b {None} else {Some(a)}\n+                Some(unsafe { intrinsics::unchecked_rem(self, other) })\n             }\n         }\n \n@@ -1688,7 +1686,7 @@ macro_rules! uint_impl {\n         pub fn checked_div(self, other: Self) -> Option<Self> {\n             match other {\n                 0 => None,\n-                other => Some(self / other),\n+                other => Some(unsafe { intrinsics::unchecked_div(self, other) }),\n             }\n         }\n \n@@ -1709,7 +1707,7 @@ macro_rules! uint_impl {\n             if other == 0 {\n                 None\n             } else {\n-                Some(self % other)\n+                Some(unsafe { intrinsics::unchecked_rem(self, other) })\n             }\n         }\n "}]}