{"sha": "0ad4e2cc963e94131f63ffe2244a5a221b781eeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZDRlMmNjOTYzZTk0MTMxZjYzZmZlMjI0NGE1YTIyMWI3ODFlZWI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-04-01T18:22:59Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-04-01T18:22:59Z"}, "message": "Rustup to rustc 1.35.0-nightly (e3428db7c 2019-03-31)", "tree": {"sha": "6e87d0e8535411e97fdfad4d6b9e6f5027731de4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e87d0e8535411e97fdfad4d6b9e6f5027731de4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ad4e2cc963e94131f63ffe2244a5a221b781eeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad4e2cc963e94131f63ffe2244a5a221b781eeb", "html_url": "https://github.com/rust-lang/rust/commit/0ad4e2cc963e94131f63ffe2244a5a221b781eeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ad4e2cc963e94131f63ffe2244a5a221b781eeb/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50e70086ba5c51e23370331144ba75676773c0ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/50e70086ba5c51e23370331144ba75676773c0ce", "html_url": "https://github.com/rust-lang/rust/commit/50e70086ba5c51e23370331144ba75676773c0ce"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "fbc7692ee4e689ea41144dc027fe6af645cad6e8", "filename": "src/base.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0ad4e2cc963e94131f63ffe2244a5a221b781eeb/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad4e2cc963e94131f63ffe2244a5a221b781eeb/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=0ad4e2cc963e94131f63ffe2244a5a221b781eeb", "patch": "@@ -388,7 +388,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                 layout::Variants::Single { index } => {\n                     assert_eq!(index, *variant_index);\n                 }\n-                layout::Variants::Tagged { .. } => {\n+                layout::Variants::Multiple { discr_kind: layout::DiscriminantKind::Tag, .. } => {\n                     let ptr = place.place_field(fx, mir::Field::new(0));\n                     let to = layout\n                         .ty\n@@ -399,10 +399,12 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     let discr = CValue::const_val(fx, ptr.layout().ty, to as u64 as i64);\n                     ptr.write_cvalue(fx, discr);\n                 }\n-                layout::Variants::NicheFilling {\n-                    dataful_variant,\n-                    ref niche_variants,\n-                    niche_start,\n+                layout::Variants::Multiple {\n+                    discr_kind: layout::DiscriminantKind::Niche {\n+                        dataful_variant,\n+                        ref niche_variants,\n+                        niche_start,\n+                    },\n                     ..\n                 } => {\n                     if *variant_index != dataful_variant {\n@@ -613,7 +615,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                         lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n                     }\n                 }\n-                Rvalue::Cast(CastKind::ClosureFnPointer, operand, _ty) => {\n+                Rvalue::Cast(CastKind::ClosureFnPointer(_), operand, _ty) => {\n                     let operand = trans_operand(fx, operand);\n                     match operand.layout().ty.sty {\n                         ty::Closure(def_id, substs) => {\n@@ -742,45 +744,44 @@ pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n     if layout.abi == layout::Abi::Uninhabited {\n         return trap_unreachable_ret_value(fx, dest_layout);\n     }\n-    match layout.variants {\n+\n+    let (discr_scalar, discr_kind) = match &layout.variants {\n         layout::Variants::Single { index } => {\n             let discr_val = layout\n                 .ty\n                 .ty_adt_def()\n                 .map_or(index.as_u32() as u128, |def| {\n-                    def.discriminant_for_variant(fx.tcx, index).val\n+                    def.discriminant_for_variant(fx.tcx, *index).val\n                 });\n             return CValue::const_val(fx, dest_layout.ty, discr_val as u64 as i64);\n         }\n-        layout::Variants::Tagged { .. } | layout::Variants::NicheFilling { .. } => {}\n-    }\n+        layout::Variants::Multiple { discr, discr_kind, variants: _ } => (discr, discr_kind),\n+    };\n \n     let discr = place.place_field(fx, mir::Field::new(0)).to_cvalue(fx);\n     let discr_ty = discr.layout().ty;\n     let lldiscr = discr.load_scalar(fx);\n-    match layout.variants {\n-        layout::Variants::Single { .. } => bug!(),\n-        layout::Variants::Tagged { ref tag, .. } => {\n-            let signed = match tag.value {\n+    match discr_kind {\n+        layout::DiscriminantKind::Tag => {\n+            let signed = match discr_scalar.value {\n                 layout::Int(_, signed) => signed,\n                 _ => false,\n             };\n             let val = clif_intcast(fx, lldiscr, fx.clif_type(dest_layout.ty).unwrap(), signed);\n             return CValue::ByVal(val, dest_layout);\n         }\n-        layout::Variants::NicheFilling {\n+        layout::DiscriminantKind::Niche {\n             dataful_variant,\n             ref niche_variants,\n             niche_start,\n-            ..\n         } => {\n             let niche_llty = fx.clif_type(discr_ty).unwrap();\n             let dest_clif_ty = fx.clif_type(dest_layout.ty).unwrap();\n             if niche_variants.start() == niche_variants.end() {\n                 let b = fx\n                     .bcx\n                     .ins()\n-                    .icmp_imm(IntCC::Equal, lldiscr, niche_start as u64 as i64);\n+                    .icmp_imm(IntCC::Equal, lldiscr, *niche_start as u64 as i64);\n                 let if_true = fx\n                     .bcx\n                     .ins()"}]}