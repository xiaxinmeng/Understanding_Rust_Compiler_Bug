{"sha": "127b6c4c18998695edfafc195c682bf3f42e203e", "node_id": "C_kwDOAAsO6NoAKDEyN2I2YzRjMTg5OTg2OTVlZGZhZmMxOTVjNjgyYmYzZjQyZTIwM2U", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-08-01T17:50:21Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-08-05T12:47:49Z"}, "message": "cleanup code w/ pointers in std a little", "tree": {"sha": "b392b581fa91941caf441b81f00e2c3cb5547514", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b392b581fa91941caf441b81f00e2c3cb5547514"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/127b6c4c18998695edfafc195c682bf3f42e203e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/127b6c4c18998695edfafc195c682bf3f42e203e", "html_url": "https://github.com/rust-lang/rust/commit/127b6c4c18998695edfafc195c682bf3f42e203e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/127b6c4c18998695edfafc195c682bf3f42e203e/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f5d8d49eb6111931091f700d07518cd2b80bc18", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5d8d49eb6111931091f700d07518cd2b80bc18", "html_url": "https://github.com/rust-lang/rust/commit/1f5d8d49eb6111931091f700d07518cd2b80bc18"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "6756eecd0e0f8ca6bc446b899595a56de3ef6b1a", "filename": "library/core/src/alloc/global.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/127b6c4c18998695edfafc195c682bf3f42e203e/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127b6c4c18998695edfafc195c682bf3f42e203e/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs?ref=127b6c4c18998695edfafc195c682bf3f42e203e", "patch": "@@ -74,7 +74,7 @@ use crate::ptr;\n ///         {\n ///             return null_mut();\n ///         };\n-///         (self.arena.get() as *mut u8).add(allocated)\n+///         self.arena.get().cast::<u8>().add(allocated)\n ///     }\n ///     unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {}\n /// }"}, {"sha": "2f2d8329baa467b7950dcf6da24fc997dda6b0b1", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/127b6c4c18998695edfafc195c682bf3f42e203e/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127b6c4c18998695edfafc195c682bf3f42e203e/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=127b6c4c18998695edfafc195c682bf3f42e203e", "patch": "@@ -1270,8 +1270,8 @@ impl<T: ?Sized> *const T {\n     /// # fn foo(n: usize) {\n     /// # use std::mem::align_of;\n     /// # unsafe {\n-    /// let x = [5u8, 6u8, 7u8, 8u8, 9u8];\n-    /// let ptr = x.as_ptr().add(n) as *const u8;\n+    /// let x = [5u8, 6, 7, 8, 9];\n+    /// let ptr = x.as_ptr().add(n);\n     /// let offset = ptr.align_offset(align_of::<u16>());\n     /// if offset < x.len() - n - 1 {\n     ///     let u16_ptr = ptr.add(offset) as *const u16;"}, {"sha": "e932c72ad9860d45f7e9850f2c27c0cb9e75bd46", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/127b6c4c18998695edfafc195c682bf3f42e203e/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127b6c4c18998695edfafc195c682bf3f42e203e/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=127b6c4c18998695edfafc195c682bf3f42e203e", "patch": "@@ -1548,12 +1548,13 @@ impl<T: ?Sized> *mut T {\n     /// # fn foo(n: usize) {\n     /// # use std::mem::align_of;\n     /// # unsafe {\n-    /// let x = [5u8, 6u8, 7u8, 8u8, 9u8];\n-    /// let ptr = x.as_ptr().add(n) as *const u8;\n+    /// let mut x = [5u8, 6, 7, 8, 9];\n+    /// let ptr = x.as_mut_ptr().add(n);\n     /// let offset = ptr.align_offset(align_of::<u16>());\n     /// if offset < x.len() - n - 1 {\n-    ///     let u16_ptr = ptr.add(offset) as *const u16;\n+    ///     let u16_ptr = ptr.add(offset) as *mut u16;\n     ///     assert_ne!(*u16_ptr, 500);\n+    ///     *u16_ptr = 0;\n     /// } else {\n     ///     // while the pointer can be aligned via `offset`, it would point\n     ///     // outside the allocation"}, {"sha": "c310ffe091d2c77aab0b1c2b7147ad37bafe7881", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/127b6c4c18998695edfafc195c682bf3f42e203e/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127b6c4c18998695edfafc195c682bf3f42e203e/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=127b6c4c18998695edfafc195c682bf3f42e203e", "patch": "@@ -92,7 +92,7 @@ impl<'a, T> Iter<'a, T> {\n             assume(!ptr.is_null());\n \n             let end = if mem::size_of::<T>() == 0 {\n-                (ptr as *const u8).wrapping_add(slice.len()) as *const T\n+                ptr.wrapping_byte_add(slice.len())\n             } else {\n                 ptr.add(slice.len())\n             };\n@@ -228,7 +228,7 @@ impl<'a, T> IterMut<'a, T> {\n             assume(!ptr.is_null());\n \n             let end = if mem::size_of::<T>() == 0 {\n-                (ptr as *mut u8).wrapping_add(slice.len()) as *mut T\n+                ptr.wrapping_byte_add(slice.len())\n             } else {\n                 ptr.add(slice.len())\n             };"}, {"sha": "d874f08317f6142c27d86d010b39569d42b5fab5", "filename": "library/core/tests/const_ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/127b6c4c18998695edfafc195c682bf3f42e203e/library%2Fcore%2Ftests%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127b6c4c18998695edfafc195c682bf3f42e203e/library%2Fcore%2Ftests%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fconst_ptr.rs?ref=127b6c4c18998695edfafc195c682bf3f42e203e", "patch": "@@ -3,7 +3,7 @@ const DATA: [u16; 2] = [u16::from_ne_bytes([0x01, 0x23]), u16::from_ne_bytes([0x\n \n const fn unaligned_ptr() -> *const u16 {\n     // Since DATA.as_ptr() is aligned to two bytes, adding 1 byte to that produces an unaligned *const u16\n-    unsafe { (DATA.as_ptr() as *const u8).add(1) as *const u16 }\n+    unsafe { DATA.as_ptr().byte_add(1) }\n }\n \n #[test]\n@@ -67,7 +67,7 @@ fn write() {\n     const fn write_unaligned() -> [u16; 2] {\n         let mut two_aligned = [0u16; 2];\n         unsafe {\n-            let unaligned_ptr = (two_aligned.as_mut_ptr() as *mut u8).add(1) as *mut u16;\n+            let unaligned_ptr = two_aligned.as_mut_ptr().byte_add(1);\n             ptr::write_unaligned(unaligned_ptr, u16::from_ne_bytes([0x23, 0x45]));\n         }\n         two_aligned\n@@ -91,7 +91,7 @@ fn mut_ptr_write() {\n     const fn write_unaligned() -> [u16; 2] {\n         let mut two_aligned = [0u16; 2];\n         unsafe {\n-            let unaligned_ptr = (two_aligned.as_mut_ptr() as *mut u8).add(1) as *mut u16;\n+            let unaligned_ptr = two_aligned.as_mut_ptr().byte_add(1);\n             unaligned_ptr.write_unaligned(u16::from_ne_bytes([0x23, 0x45]));\n         }\n         two_aligned"}, {"sha": "df9b1073a0994d533e97ba18e54fd8afff623e95", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/127b6c4c18998695edfafc195c682bf3f42e203e/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127b6c4c18998695edfafc195c682bf3f42e203e/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=127b6c4c18998695edfafc195c682bf3f42e203e", "patch": "@@ -14,6 +14,7 @@\n #![feature(const_maybe_uninit_assume_init_read)]\n #![feature(const_nonnull_new)]\n #![feature(const_num_from_num)]\n+#![feature(const_pointer_byte_offsets)]\n #![feature(const_ptr_as_ref)]\n #![feature(const_ptr_read)]\n #![feature(const_ptr_write)]\n@@ -74,6 +75,7 @@\n #![feature(never_type)]\n #![feature(unwrap_infallible)]\n #![feature(result_into_ok_or_err)]\n+#![feature(pointer_byte_offsets)]\n #![feature(portable_simd)]\n #![feature(ptr_metadata)]\n #![feature(once_cell)]"}, {"sha": "66fa1efbf103f26115a00c5e78bbf8edb433a1f3", "filename": "library/std/src/sys/sgx/abi/usercalls/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/127b6c4c18998695edfafc195c682bf3f42e203e/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127b6c4c18998695edfafc195c682bf3f42e203e/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs?ref=127b6c4c18998695edfafc195c682bf3f42e203e", "patch": "@@ -115,7 +115,7 @@ pub unsafe trait UserSafe {\n     /// * the pointer is null.\n     /// * the pointed-to range is not in user memory.\n     unsafe fn check_ptr(ptr: *const Self) {\n-        let is_aligned = |p| -> bool { 0 == (p as usize) & (Self::align_of() - 1) };\n+        let is_aligned = |p: *const u8| -> bool { 0 == p.addr() & (Self::align_of() - 1) };\n \n         assert!(is_aligned(ptr as *const u8));\n         assert!(is_user_range(ptr as _, mem::size_of_val(unsafe { &*ptr })));"}, {"sha": "d715ae45401e654d88c251a0db98e2c1e6038196", "filename": "library/std/src/sys/unsupported/alloc.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/127b6c4c18998695edfafc195c682bf3f42e203e/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127b6c4c18998695edfafc195c682bf3f42e203e/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Falloc.rs?ref=127b6c4c18998695edfafc195c682bf3f42e203e", "patch": "@@ -1,22 +1,23 @@\n use crate::alloc::{GlobalAlloc, Layout, System};\n+use crate::ptr::null_mut;\n \n #[stable(feature = \"alloc_system_type\", since = \"1.28.0\")]\n unsafe impl GlobalAlloc for System {\n     #[inline]\n     unsafe fn alloc(&self, _layout: Layout) -> *mut u8 {\n-        0 as *mut u8\n+        null_mut()\n     }\n \n     #[inline]\n     unsafe fn alloc_zeroed(&self, _layout: Layout) -> *mut u8 {\n-        0 as *mut u8\n+        null_mut()\n     }\n \n     #[inline]\n     unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {}\n \n     #[inline]\n     unsafe fn realloc(&self, _ptr: *mut u8, _layout: Layout, _new_size: usize) -> *mut u8 {\n-        0 as *mut u8\n+        null_mut()\n     }\n }"}]}