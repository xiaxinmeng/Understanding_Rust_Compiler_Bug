{"sha": "1b86bd73cd5e8e463f50e5c53968125d0ab4e1f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiODZiZDczY2Q1ZThlNDYzZjUwZTVjNTM5NjgxMjVkMGFiNGUxZjA=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-28T13:18:37Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-28T16:29:40Z"}, "message": "is_union returns ty to avoid computing it twice", "tree": {"sha": "a30a226dfaeead3fe6eafbad7687fc14ed8507b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a30a226dfaeead3fe6eafbad7687fc14ed8507b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b86bd73cd5e8e463f50e5c53968125d0ab4e1f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b86bd73cd5e8e463f50e5c53968125d0ab4e1f0", "html_url": "https://github.com/rust-lang/rust/commit/1b86bd73cd5e8e463f50e5c53968125d0ab4e1f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b86bd73cd5e8e463f50e5c53968125d0ab4e1f0/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7da118581c9dc839c8bf3fbb622bab9ce32bbf38", "url": "https://api.github.com/repos/rust-lang/rust/commits/7da118581c9dc839c8bf3fbb622bab9ce32bbf38", "html_url": "https://github.com/rust-lang/rust/commit/7da118581c9dc839c8bf3fbb622bab9ce32bbf38"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "58adc24b809875fa2122a9e42167241537a54426", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1b86bd73cd5e8e463f50e5c53968125d0ab4e1f0/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b86bd73cd5e8e463f50e5c53968125d0ab4e1f0/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=1b86bd73cd5e8e463f50e5c53968125d0ab4e1f0", "patch": "@@ -595,11 +595,9 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     ) -> (String, String, String, String) {\n         // Define a small closure that we can use to check if the type of a place\n         // is a union.\n-        let is_union = |place: &Place<'tcx>| -> bool {\n-            place.ty(self.mir, self.infcx.tcx).ty\n-                .ty_adt_def()\n-                .map(|adt| adt.is_union())\n-                .unwrap_or(false)\n+        let union_ty = |place: &Place<'tcx>| -> Option<Ty<'tcx>> {\n+            let ty = place.ty(self.mir, self.infcx.tcx).ty;\n+            ty.ty_adt_def().filter(|adt| adt.is_union()).map(|_| ty)\n         };\n \n         // Start with an empty tuple, so we can use the functions on `Option` to reduce some\n@@ -619,7 +617,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 let mut current = first_borrowed_place;\n                 while let Place::Projection(box Projection { base, elem }) = current {\n                     match elem {\n-                        ProjectionElem::Field(field, _) if is_union(base) => {\n+                        ProjectionElem::Field(field, _) if union_ty(base).is_some() => {\n                             return Some((base, field));\n                         },\n                         _ => current = base,\n@@ -632,25 +630,29 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 // borrowed place and look for a access to a different field of the same union.\n                 let mut current = second_borrowed_place;\n                 while let Place::Projection(box Projection { base, elem }) = current {\n-                    match elem {\n-                        ProjectionElem::Field(field, _) if {\n-                            is_union(base) && field != target_field && base == target_base\n-                        } => {\n-                            let desc_base = self.describe_place(base)\n-                                .unwrap_or_else(|| \"_\".to_owned());\n-                            let desc_first = self.describe_place(first_borrowed_place)\n-                                .unwrap_or_else(|| \"_\".to_owned());\n-                            let desc_second = self.describe_place(second_borrowed_place)\n-                                .unwrap_or_else(|| \"_\".to_owned());\n-\n-                            // Also compute the name of the union type, eg. `Foo` so we\n-                            // can add a helpful note with it.\n-                            let ty = base.ty(self.mir, self.infcx.tcx).ty;\n-\n-                            return Some((desc_base, desc_first, desc_second, ty.to_string()));\n-                        },\n-                        _ => current = base,\n+                    if let ProjectionElem::Field(field, _) = elem {\n+                        if let Some(union_ty) = union_ty(base) {\n+                            if field != target_field && base == target_base {\n+                                let desc_base =\n+                                    self.describe_place(base).unwrap_or_else(|| \"_\".to_owned());\n+                                let desc_first = self\n+                                    .describe_place(first_borrowed_place)\n+                                    .unwrap_or_else(|| \"_\".to_owned());\n+                                let desc_second = self\n+                                    .describe_place(second_borrowed_place)\n+                                    .unwrap_or_else(|| \"_\".to_owned());\n+\n+                                return Some((\n+                                    desc_base,\n+                                    desc_first,\n+                                    desc_second,\n+                                    union_ty.to_string(),\n+                                ));\n+                            }\n+                        }\n                     }\n+\n+                    current = base;\n                 }\n                 None\n             })"}]}