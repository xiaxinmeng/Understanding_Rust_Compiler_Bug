{"sha": "d70cd490711509707085e043d18b9862436407f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MGNkNDkwNzExNTA5NzA3MDg1ZTA0M2QxOGI5ODYyNDM2NDA3Zjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-14T02:18:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-14T02:18:04Z"}, "message": "Auto merge of #38854 - Mark-Simulacrum:immediate-refactor, r=eddyb\n\nSimplify type_is_immediate and type_is_fat_ptr\n\nr? @eddyb", "tree": {"sha": "54cb3cd43a3e3135bfdae00114f7dddbee4feb02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54cb3cd43a3e3135bfdae00114f7dddbee4feb02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d70cd490711509707085e043d18b9862436407f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d70cd490711509707085e043d18b9862436407f8", "html_url": "https://github.com/rust-lang/rust/commit/d70cd490711509707085e043d18b9862436407f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d70cd490711509707085e043d18b9862436407f8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7789881747f2ae40a520ae169eb90eb5d93795cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7789881747f2ae40a520ae169eb90eb5d93795cc", "html_url": "https://github.com/rust-lang/rust/commit/7789881747f2ae40a520ae169eb90eb5d93795cc"}, {"sha": "43cf5b92310be5abb35a872f52615ace28bbed32", "url": "https://api.github.com/repos/rust-lang/rust/commits/43cf5b92310be5abb35a872f52615ace28bbed32", "html_url": "https://github.com/rust-lang/rust/commit/43cf5b92310be5abb35a872f52615ace28bbed32"}], "stats": {"total": 74, "additions": 27, "deletions": 47}, "files": [{"sha": "419267cb269c98e68159bf45ae8a2a81da995334", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 19, "deletions": 26, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d70cd490711509707085e043d18b9862436407f8/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d70cd490711509707085e043d18b9862436407f8/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=d70cd490711509707085e043d18b9862436407f8", "patch": "@@ -45,37 +45,30 @@ use rustc_i128::u128;\n pub use context::{CrateContext, SharedCrateContext};\n \n pub fn type_is_fat_ptr<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n-    match ty.sty {\n-        ty::TyRawPtr(ty::TypeAndMut{ty, ..}) |\n-        ty::TyRef(_, ty::TypeAndMut{ty, ..}) |\n-        ty::TyBox(ty) => {\n-            !ccx.shared().type_is_sized(ty)\n-        }\n-        _ => {\n-            false\n-        }\n+    if let Layout::FatPointer { .. } = *ccx.layout_of(ty) {\n+        true\n+    } else {\n+        false\n     }\n }\n \n pub fn type_is_immediate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n-    use machine::llsize_of_alloc;\n-    use type_of::sizing_type_of;\n-\n-    let simple = ty.is_scalar() ||\n-        ty.is_unique() || ty.is_region_ptr() ||\n-        ty.is_simd();\n-    if simple && !type_is_fat_ptr(ccx, ty) {\n-        return true;\n-    }\n-    if !ccx.shared().type_is_sized(ty) {\n-        return false;\n-    }\n-    match ty.sty {\n-        ty::TyAdt(..) | ty::TyTuple(..) | ty::TyArray(..) | ty::TyClosure(..) => {\n-            let llty = sizing_type_of(ccx, ty);\n-            llsize_of_alloc(ccx, llty) <= llsize_of_alloc(ccx, ccx.int_type())\n+    let layout = ccx.layout_of(ty);\n+    match *layout {\n+        Layout::CEnum { .. } |\n+        Layout::Scalar { .. } |\n+        Layout::Vector { .. } => true,\n+\n+        Layout::FatPointer { .. } => false,\n+\n+        Layout::Array { .. } |\n+        Layout::Univariant { .. } |\n+        Layout::General { .. } |\n+        Layout::UntaggedUnion { .. } |\n+        Layout::RawNullablePointer { .. } |\n+        Layout::StructWrappedNullablePointer { .. } => {\n+            !layout.is_unsized() && layout.size(&ccx.tcx().data_layout).bytes() == 0\n         }\n-        _ => type_is_zero_size(ccx, ty)\n     }\n }\n "}, {"sha": "1b97a8d010cfeafbe13f12ae03c000505beec03c", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d70cd490711509707085e043d18b9862436407f8/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d70cd490711509707085e043d18b9862436407f8/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=d70cd490711509707085e043d18b9862436407f8", "patch": "@@ -260,37 +260,24 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                         let r_t_out = CastTy::from_ty(cast_ty).expect(\"bad output type for cast\");\n                         let ll_t_in = type_of::immediate_type_of(bcx.ccx, operand.ty);\n                         let ll_t_out = type_of::immediate_type_of(bcx.ccx, cast_ty);\n-                        let (llval, signed) = if let CastTy::Int(IntTy::CEnum) = r_t_in {\n-                            let l = bcx.ccx.layout_of(operand.ty);\n-                            let discr = match operand.val {\n-                                OperandValue::Immediate(llval) => llval,\n-                                OperandValue::Ref(llptr) => {\n-                                    adt::trans_get_discr(&bcx, operand.ty, llptr, None, true)\n-                                }\n-                                OperandValue::Pair(..) => bug!(\"Unexpected Pair operand\")\n-                            };\n-                            let (signed, min, max) = match l {\n-                                &Layout::CEnum { signed, min, max, .. } => {\n-                                    (signed, min, max)\n-                                }\n-                                _ => bug!(\"CEnum {:?} is not an enum\", operand)\n-                            };\n-\n+                        let llval = operand.immediate();\n+                        let l = bcx.ccx.layout_of(operand.ty);\n+                        let signed = if let Layout::CEnum { signed, min, max, .. } = *l {\n                             if max > min {\n                                 // We want `table[e as usize]` to not\n                                 // have bound checks, and this is the most\n                                 // convenient place to put the `assume`.\n \n                                 base::call_assume(&bcx, bcx.icmp(\n                                     llvm::IntULE,\n-                                    discr,\n-                                    C_integral(common::val_ty(discr), max, false)\n-                                ))\n+                                    llval,\n+                                    C_integral(common::val_ty(llval), max, false)\n+                                ));\n                             }\n \n-                            (discr, signed)\n+                            signed\n                         } else {\n-                            (operand.immediate(), operand.ty.is_signed())\n+                            operand.ty.is_signed()\n                         };\n \n                         let newval = match (r_t_in, r_t_out) {"}]}