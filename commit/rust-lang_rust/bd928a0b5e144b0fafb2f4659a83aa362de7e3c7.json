{"sha": "bd928a0b5e144b0fafb2f4659a83aa362de7e3c7", "node_id": "C_kwDOAAsO6NoAKGJkOTI4YTBiNWUxNDRiMGZhZmIyZjQ2NTlhODNhYTM2MmRlN2UzYzc", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2023-05-05T11:54:58Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2023-05-05T15:19:18Z"}, "message": "Disallow (min) specialization imps with no items\n\nSuch implementations are usually mistakes and are not used in the\ncompiler or standard library (after this commit) so forbid them with\n`min_specialization`.", "tree": {"sha": "513fc04e72ed87cdff16d8c991cc4e089edf16e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/513fc04e72ed87cdff16d8c991cc4e089edf16e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7", "html_url": "https://github.com/rust-lang/rust/commit/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd9a7bf848e412c81e3045245acbd5a01641a610", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd9a7bf848e412c81e3045245acbd5a01641a610", "html_url": "https://github.com/rust-lang/rust/commit/dd9a7bf848e412c81e3045245acbd5a01641a610"}], "stats": {"total": 135, "additions": 112, "deletions": 23}, "files": [{"sha": "311a42aa42a3d5f2cdbea48bbcd33fab2d32e299", "filename": "compiler/rustc_data_structures/src/owned_slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice.rs?ref=bd928a0b5e144b0fafb2f4659a83aa362de7e3c7", "patch": "@@ -109,9 +109,11 @@ impl Borrow<[u8]> for OwnedSlice {\n }\n \n // Safety: `OwnedSlice` is conceptually `(&'self.1 [u8], Box<dyn Send + Sync>)`, which is `Send`\n+#[cfg(parallel_compiler)]\n unsafe impl Send for OwnedSlice {}\n \n // Safety: `OwnedSlice` is conceptually `(&'self.1 [u8], Box<dyn Send + Sync>)`, which is `Sync`\n+#[cfg(parallel_compiler)]\n unsafe impl Sync for OwnedSlice {}\n \n #[cfg(test)]"}, {"sha": "c130eaae7554f956926b126b0a71b29121706918", "filename": "compiler/rustc_hir_analysis/messages.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fmessages.ftl?ref=bd928a0b5e144b0fafb2f4659a83aa362de7e3c7", "patch": "@@ -275,6 +275,9 @@ hir_analysis_specialization_trait = implementing `rustc_specialization_trait` tr\n hir_analysis_closure_implicit_hrtb = implicit types in closure signatures are forbidden when `for<...>` is present\n     .label = `for<...>` is here\n \n+hir_analysis_empty_specialization = specialization impl does not specialize any associated items\n+    .note = impl is a specialization of this impl\n+\n hir_analysis_const_specialize = cannot specialize on const impl with non-const impl\n \n hir_analysis_static_specialize = cannot specialize on `'static` lifetime"}, {"sha": "32e91af2608d510ecb11d477a4c0c7acaa2eb140", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=bd928a0b5e144b0fafb2f4659a83aa362de7e3c7", "patch": "@@ -803,6 +803,15 @@ pub(crate) struct ClosureImplicitHrtb {\n     pub for_sp: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_empty_specialization)]\n+pub(crate) struct EmptySpecialization {\n+    #[primary_span]\n+    pub span: Span,\n+    #[note]\n+    pub base_impl_span: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(hir_analysis_const_specialize)]\n pub(crate) struct ConstSpecialize {"}, {"sha": "4f0df5c5677b1bdb45898ae2f11e3cdbc3ea3909", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=bd928a0b5e144b0fafb2f4659a83aa362de7e3c7", "patch": "@@ -100,12 +100,19 @@ fn parent_specialization_node(tcx: TyCtxt<'_>, impl1_def_id: LocalDefId) -> Opti\n         // Implementing a normal trait isn't a specialization.\n         return None;\n     }\n+    if trait_def.is_marker {\n+        // Overlapping marker implementations are not really specializations.\n+        return None;\n+    }\n     Some(impl2_node)\n }\n \n /// Check that `impl1` is a sound specialization\n #[instrument(level = \"debug\", skip(tcx))]\n fn check_always_applicable(tcx: TyCtxt<'_>, impl1_def_id: LocalDefId, impl2_node: Node) {\n+    let span = tcx.def_span(impl1_def_id);\n+    check_has_items(tcx, impl1_def_id, impl2_node, span);\n+\n     if let Some((impl1_substs, impl2_substs)) = get_impl_substs(tcx, impl1_def_id, impl2_node) {\n         let impl2_def_id = impl2_node.def_id();\n         debug!(?impl2_def_id, ?impl2_substs);\n@@ -116,14 +123,20 @@ fn check_always_applicable(tcx: TyCtxt<'_>, impl1_def_id: LocalDefId, impl2_node\n             unconstrained_parent_impl_substs(tcx, impl2_def_id, impl2_substs)\n         };\n \n-        let span = tcx.def_span(impl1_def_id);\n         check_constness(tcx, impl1_def_id, impl2_node, span);\n         check_static_lifetimes(tcx, &parent_substs, span);\n         check_duplicate_params(tcx, impl1_substs, &parent_substs, span);\n         check_predicates(tcx, impl1_def_id, impl1_substs, impl2_node, impl2_substs, span);\n     }\n }\n \n+fn check_has_items(tcx: TyCtxt<'_>, impl1_def_id: LocalDefId, impl2_node: Node, span: Span) {\n+    if let Node::Impl(impl2_id) = impl2_node && tcx.associated_item_def_ids(impl1_def_id).is_empty() {\n+        let base_impl_span = tcx.def_span(impl2_id);\n+        tcx.sess.emit_err(errors::EmptySpecialization { span, base_impl_span });\n+    }\n+}\n+\n /// Check that the specializing impl `impl1` is at least as const as the base\n /// impl `impl2`\n fn check_constness(tcx: TyCtxt<'_>, impl1_def_id: LocalDefId, impl2_node: Node, span: Span) {"}, {"sha": "f2841182a1a372aa537300b450e4cb06adc7b37a", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=bd928a0b5e144b0fafb2f4659a83aa362de7e3c7", "patch": "@@ -2728,8 +2728,6 @@ pub struct UserTypeProjection {\n     pub projs: Vec<ProjectionKind>,\n }\n \n-impl Copy for ProjectionKind {}\n-\n impl UserTypeProjection {\n     pub(crate) fn index(mut self) -> Self {\n         self.projs.push(ProjectionElem::Index(()));"}, {"sha": "f31123f16f140696eecb4fe7e837508ae4df84ca", "filename": "tests/ui/rfc-2632-const-trait-impl/specialization/const-default-bound-non-const-specialized-bound.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.rs?ref=bd928a0b5e144b0fafb2f4659a83aa362de7e3c7", "patch": "@@ -12,7 +12,9 @@ trait Specialize {}\n trait Foo {}\n \n #[const_trait]\n-trait Bar {}\n+trait Bar {\n+    fn bar();\n+}\n \n // bgr360: I was only able to exercise the code path that raises the\n // \"missing ~const qualifier\" error by making this base impl non-const, even\n@@ -21,26 +23,36 @@ trait Bar {}\n impl<T> Bar for T\n where\n     T: ~const Foo,\n-{}\n+{\n+    default fn bar() {}\n+}\n \n impl<T> Bar for T\n where\n     T: Foo, //~ ERROR missing `~const` qualifier\n     T: Specialize,\n-{}\n+{\n+    fn bar() {}\n+}\n \n #[const_trait]\n-trait Baz {}\n+trait Baz {\n+    fn baz();\n+}\n \n impl<T> const Baz for T\n where\n     T: ~const Foo,\n-{}\n+{\n+    default fn baz() {}\n+}\n \n impl<T> const Baz for T //~ ERROR conflicting implementations of trait `Baz`\n where\n     T: Foo,\n     T: Specialize,\n-{}\n+{\n+    fn baz() {}\n+}\n \n fn main() {}"}, {"sha": "057cf4aea8a0f4a29b12ad60db669d2b004eaa3e", "filename": "tests/ui/rfc-2632-const-trait-impl/specialization/const-default-bound-non-const-specialized-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.stderr?ref=bd928a0b5e144b0fafb2f4659a83aa362de7e3c7", "patch": "@@ -1,11 +1,11 @@\n error: missing `~const` qualifier for specialization\n-  --> $DIR/const-default-bound-non-const-specialized-bound.rs:28:8\n+  --> $DIR/const-default-bound-non-const-specialized-bound.rs:32:8\n    |\n LL |     T: Foo,\n    |        ^^^\n \n error[E0119]: conflicting implementations of trait `Baz`\n-  --> $DIR/const-default-bound-non-const-specialized-bound.rs:40:1\n+  --> $DIR/const-default-bound-non-const-specialized-bound.rs:50:1\n    |\n LL | impl<T> const Baz for T\n    | ----------------------- first implementation here"}, {"sha": "92d8be6bb166631593e5c161052c4afdb20d1abf", "filename": "tests/ui/rfc-2632-const-trait-impl/specialization/issue-95186-specialize-on-tilde-const.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95186-specialize-on-tilde-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95186-specialize-on-tilde-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95186-specialize-on-tilde-const.rs?ref=bd928a0b5e144b0fafb2f4659a83aa362de7e3c7", "patch": "@@ -11,27 +11,39 @@\n trait Specialize {}\n \n #[const_trait]\n-trait Foo {}\n+trait Foo {\n+    fn foo();\n+}\n \n-impl<T> const Foo for T {}\n+impl<T> const Foo for T {\n+    default fn foo() {}\n+}\n \n impl<T> const Foo for T\n where\n     T: ~const Specialize,\n-{}\n+{\n+    fn foo() {}\n+}\n \n #[const_trait]\n-trait Bar {}\n+trait Bar {\n+    fn bar() {}\n+}\n \n impl<T> const Bar for T\n where\n     T: ~const Foo,\n-{}\n+{\n+    default fn bar() {}\n+}\n \n impl<T> const Bar for T\n where\n     T: ~const Foo,\n     T: ~const Specialize,\n-{}\n+{\n+    fn bar() {}\n+}\n \n fn main() {}"}, {"sha": "51bfaf73b57b45dae3024cd73cc2b040b333ca03", "filename": "tests/ui/rfc-2632-const-trait-impl/specialization/issue-95187-same-trait-bound-different-constness.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95187-same-trait-bound-different-constness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95187-same-trait-bound-different-constness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95187-same-trait-bound-different-constness.rs?ref=bd928a0b5e144b0fafb2f4659a83aa362de7e3c7", "patch": "@@ -15,31 +15,43 @@ trait Specialize {}\n trait Foo {}\n \n #[const_trait]\n-trait Bar {}\n+trait Bar {\n+    fn bar();\n+}\n \n impl<T> Bar for T\n where\n     T: Foo,\n-{}\n+{\n+    default fn bar() {}\n+}\n \n impl<T> const Bar for T\n where\n     T: ~const Foo,\n     T: Specialize,\n-{}\n+{\n+    fn bar() {}\n+}\n \n #[const_trait]\n-trait Baz {}\n+trait Baz {\n+    fn baz();\n+}\n \n impl<T> const Baz for T\n where\n     T: Foo,\n-{}\n+{\n+    default fn baz() {}\n+}\n \n impl<T> const Baz for T\n where\n     T: ~const Foo,\n     T: Specialize,\n-{}\n+{\n+    fn baz() {}\n+}\n \n fn main() {}"}, {"sha": "ef92254d4651c74eae9d664568e3ed10e40b0bba", "filename": "tests/ui/specialization/min_specialization/specialize_nothing.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_nothing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_nothing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_nothing.rs?ref=bd928a0b5e144b0fafb2f4659a83aa362de7e3c7", "patch": "@@ -0,0 +1,14 @@\n+#![feature(min_specialization)]\n+\n+trait Special {\n+    fn be_special();\n+}\n+\n+impl<T> Special for T {\n+    fn be_special() {}\n+}\n+\n+impl Special for usize {}\n+//~^ ERROR specialization impl does not specialize any associated items\n+\n+fn main() {}"}, {"sha": "65f73781cae22f0bf5811fe2564bedd7e2ea0e19", "filename": "tests/ui/specialization/min_specialization/specialize_nothing.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_nothing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_nothing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_nothing.stderr?ref=bd928a0b5e144b0fafb2f4659a83aa362de7e3c7", "patch": "@@ -0,0 +1,14 @@\n+error: specialization impl does not specialize any associated items\n+  --> $DIR/specialize_nothing.rs:11:1\n+   |\n+LL | impl Special for usize {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: impl is a specialization of this impl\n+  --> $DIR/specialize_nothing.rs:7:1\n+   |\n+LL | impl<T> Special for T {\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}