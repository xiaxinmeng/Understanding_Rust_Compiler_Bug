{"sha": "05f2326c0570fdd64f53532a089bbbc361d190e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZjIzMjZjMDU3MGZkZDY0ZjUzNTMyYTA4OWJiYmMzNjFkMTkwZTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-21T13:54:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-21T13:54:22Z"}, "message": "Auto merge of #87347 - GuillaumeGomez:rollup-ke92xxc, r=GuillaumeGomez\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #87187 (Fix NixOS detection)\n - #87206 (avoid temporary vectors/reuse iterators)\n - #87230 (Fix docblock <table> overflow)\n - #87273 (Recognize bounds on impls as const bounds)\n - #87279 (Add comments explaining the unix command-line argument support.)\n - #87301 (Fix typo in compile.rs)\n - #87311 (Get back the more precise suggestion spans of old regionck)\n - #87321 (Add long explanation for E0722)\n - #87342 (Add long explanation for E0757)\n\nFailed merges:\n\n - #87270 (Don't display <table> in item summary)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4b1f69fd54478ba6be8edf9cefdacda297a8ba01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b1f69fd54478ba6be8edf9cefdacda297a8ba01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05f2326c0570fdd64f53532a089bbbc361d190e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05f2326c0570fdd64f53532a089bbbc361d190e6", "html_url": "https://github.com/rust-lang/rust/commit/05f2326c0570fdd64f53532a089bbbc361d190e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05f2326c0570fdd64f53532a089bbbc361d190e6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf932aa584f2ba1a1744f3ef0b21f14387276fb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf932aa584f2ba1a1744f3ef0b21f14387276fb6", "html_url": "https://github.com/rust-lang/rust/commit/cf932aa584f2ba1a1744f3ef0b21f14387276fb6"}, {"sha": "3a8bc0d7da1c675e3c56e9f703eb5fdc20874b2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a8bc0d7da1c675e3c56e9f703eb5fdc20874b2f", "html_url": "https://github.com/rust-lang/rust/commit/3a8bc0d7da1c675e3c56e9f703eb5fdc20874b2f"}], "stats": {"total": 245, "additions": 184, "deletions": 61}, "files": [{"sha": "00d75be4399649987e9b491aa19fb81cf36e7838", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/ty.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -72,13 +72,9 @@ impl Path {\n     ) -> ast::Path {\n         let mut idents = self.path.iter().map(|s| Ident::new(*s, span)).collect();\n         let lt = mk_lifetimes(cx, span, &self.lifetime);\n-        let tys: Vec<P<ast::Ty>> =\n-            self.params.iter().map(|t| t.to_ty(cx, span, self_ty, self_generics)).collect();\n-        let params = lt\n-            .into_iter()\n-            .map(GenericArg::Lifetime)\n-            .chain(tys.into_iter().map(GenericArg::Type))\n-            .collect();\n+        let tys = self.params.iter().map(|t| t.to_ty(cx, span, self_ty, self_generics));\n+        let params =\n+            lt.into_iter().map(GenericArg::Lifetime).chain(tys.map(GenericArg::Type)).collect();\n \n         match self.kind {\n             PathKind::Global => cx.path_all(span, true, idents, params),"}, {"sha": "1aa5f9959744d975a15b344f07eadb8fcac0060e", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -418,6 +418,7 @@ E0716: include_str!(\"./error_codes/E0716.md\"),\n E0718: include_str!(\"./error_codes/E0718.md\"),\n E0719: include_str!(\"./error_codes/E0719.md\"),\n E0720: include_str!(\"./error_codes/E0720.md\"),\n+E0722: include_str!(\"./error_codes/E0722.md\"),\n E0724: include_str!(\"./error_codes/E0724.md\"),\n E0725: include_str!(\"./error_codes/E0725.md\"),\n E0727: include_str!(\"./error_codes/E0727.md\"),\n@@ -449,6 +450,7 @@ E0753: include_str!(\"./error_codes/E0753.md\"),\n E0754: include_str!(\"./error_codes/E0754.md\"),\n E0755: include_str!(\"./error_codes/E0755.md\"),\n E0756: include_str!(\"./error_codes/E0756.md\"),\n+E0757: include_str!(\"./error_codes/E0757.md\"),\n E0758: include_str!(\"./error_codes/E0758.md\"),\n E0759: include_str!(\"./error_codes/E0759.md\"),\n E0760: include_str!(\"./error_codes/E0760.md\"),\n@@ -634,10 +636,8 @@ E0783: include_str!(\"./error_codes/E0783.md\"),\n     E0711, // a feature has been declared with conflicting stability attributes\n     E0717, // rustc_promotable without stability attribute\n //  E0721, // `await` keyword\n-    E0722, // Malformed `#[optimize]` attribute\n //    E0723, unstable feature in `const` context\n     E0726, // non-explicit (not `'_`) elided lifetime in unsupported position\n //  E0738, // Removed; errored on `#[track_caller] fn`s in `extern \"Rust\" { ... }`.\n-    E0757, // `#[ffi_const]` functions cannot be `#[ffi_pure]`\n     E0772, // `'static' obligation coming from `impl dyn Trait {}` or `impl Foo for dyn Bar {}`.\n }"}, {"sha": "570717a92bd7999535b2972198957378f7f451d6", "filename": "compiler/rustc_error_codes/src/error_codes/E0722.md", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0722.md", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0722.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0722.md?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -0,0 +1,31 @@\n+The `optimize` attribute was malformed.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0722\n+#![feature(optimize_attribute)]\n+\n+#[optimize(something)] // error: invalid argument\n+pub fn something() {}\n+```\n+\n+The `#[optimize]` attribute should be used as follows:\n+\n+- `#[optimize(size)]` -- instructs the optimization pipeline to generate code\n+  that's smaller rather than faster\n+\n+- `#[optimize(speed)]` -- instructs the optimization pipeline to generate code\n+  that's faster rather than smaller\n+\n+For example:\n+\n+```\n+#![feature(optimize_attribute)]\n+\n+#[optimize(size)]\n+pub fn something() {}\n+```\n+\n+See [RFC 2412] for more details.\n+\n+[RFC 2412]: https://rust-lang.github.io/rfcs/2412-optimize-attr.html"}, {"sha": "41b06b23c4f2b2d6aec61000b6132c7c6757392d", "filename": "compiler/rustc_error_codes/src/error_codes/E0757.md", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0757.md", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0757.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0757.md?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -0,0 +1,33 @@\n+A function was given both the `ffi_const` and `ffi_pure` attributes.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0757\n+#![feature(ffi_const, ffi_pure)]\n+\n+extern \"C\" {\n+    #[ffi_const]\n+    #[ffi_pure] // error: `#[ffi_const]` function cannot be `#[ffi_pure]`\n+    pub fn square(num: i32) -> i32;\n+}\n+```\n+\n+As `ffi_const` provides stronger guarantees than `ffi_pure`, remove the\n+`ffi_pure` attribute:\n+\n+```\n+#![feature(ffi_const)]\n+\n+extern \"C\" {\n+    #[ffi_const]\n+    pub fn square(num: i32) -> i32;\n+}\n+```\n+\n+You can get more information about `const` and `pure` in the [GCC documentation\n+on Common Function Attributes]. The unstable Rust Book has more information\n+about [`ffi_const`] and [`ffi_pure`].\n+\n+[GCC documentation on Common Function Attributes]: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html\n+[`ffi_const`]: https://doc.rust-lang.org/nightly/unstable-book/language-features/ffi-const.html\n+[`ffi_pure`]: https://doc.rust-lang.org/nightly/unstable-book/language-features/ffi-pure.html"}, {"sha": "6aff2fdbd1f220e6964f2340cc371bfb5ff1bea2", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -3060,6 +3060,27 @@ impl<'hir> Node<'hir> {\n             Node::Crate(_) | Node::Visibility(_) => None,\n         }\n     }\n+\n+    /// Returns `Constness::Const` when this node is a const fn/impl.\n+    pub fn constness(&self) -> Constness {\n+        match self {\n+            Node::Item(Item {\n+                kind: ItemKind::Fn(FnSig { header: FnHeader { constness, .. }, .. }, ..),\n+                ..\n+            })\n+            | Node::TraitItem(TraitItem {\n+                kind: TraitItemKind::Fn(FnSig { header: FnHeader { constness, .. }, .. }, ..),\n+                ..\n+            })\n+            | Node::ImplItem(ImplItem {\n+                kind: ImplItemKind::Fn(FnSig { header: FnHeader { constness, .. }, .. }, ..),\n+                ..\n+            })\n+            | Node::Item(Item { kind: ItemKind::Impl(Impl { constness, .. }), .. }) => *constness,\n+\n+            _ => Constness::NotConst,\n+        }\n+    }\n }\n \n // Some nodes are used a lot. Make sure they don't unintentionally get bigger."}, {"sha": "426db95aca16e8dab5657c489d3172b378d12bc2", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -2130,7 +2130,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let new_lt = generics\n             .as_ref()\n             .and_then(|(parent_g, g)| {\n-                let possible: Vec<_> = (b'a'..=b'z').map(|c| format!(\"'{}\", c as char)).collect();\n+                let mut possible = (b'a'..=b'z').map(|c| format!(\"'{}\", c as char));\n                 let mut lts_names = g\n                     .params\n                     .iter()\n@@ -2146,7 +2146,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     );\n                 }\n                 let lts = lts_names.iter().map(|s| -> &str { &*s }).collect::<Vec<_>>();\n-                possible.into_iter().find(|candidate| !lts.contains(&candidate.as_str()))\n+                possible.find(|candidate| !lts.contains(&candidate.as_str()))\n             })\n             .unwrap_or(\"'lt\".to_string());\n         let add_lt_sugg = generics"}, {"sha": "1460c2378d1c9bfd6b874edcfce93d92f12e2457", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::mir::{ConstraintCategory, ReturnConstraint};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, RegionVid, Ty};\n use rustc_span::symbol::{kw, sym};\n-use rustc_span::Span;\n+use rustc_span::{BytePos, Span};\n \n use crate::util::borrowck_errors;\n \n@@ -641,12 +641,14 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         } else {\n                             \"'_\".to_string()\n                         };\n-                        let suggestion = if snippet.ends_with(';') {\n+                        let span = if snippet.ends_with(';') {\n                             // `type X = impl Trait;`\n-                            format!(\"{} + {};\", &snippet[..snippet.len() - 1], suggestable_fr_name)\n+                            span.with_hi(span.hi() - BytePos(1))\n                         } else {\n-                            format!(\"{} + {}\", snippet, suggestable_fr_name)\n+                            span\n                         };\n+                        let suggestion = format!(\" + {}\", suggestable_fr_name);\n+                        let span = span.shrink_to_hi();\n                         diag.span_suggestion(\n                             span,\n                             &format!("}, {"sha": "cfc538ef500a12d2e43d4846dc8d46ca23c037b7", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -897,16 +897,19 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                                 permitted = true;\n                             }\n                         }\n-                        let mut const_impls = true;\n-                        tcx.for_each_relevant_impl(trait_id, substs.type_at(0), |imp| {\n-                            if const_impls {\n-                                if let hir::Constness::NotConst = tcx.impl_constness(imp) {\n-                                    const_impls = false;\n+                        if !permitted {\n+                            // if trait's impls are all const, permit the call.\n+                            let mut const_impls = true;\n+                            tcx.for_each_relevant_impl(trait_id, substs.type_at(0), |imp| {\n+                                if const_impls {\n+                                    if let hir::Constness::NotConst = tcx.impl_constness(imp) {\n+                                        const_impls = false;\n+                                    }\n                                 }\n+                            });\n+                            if const_impls {\n+                                permitted = true;\n                             }\n-                        });\n-                        if const_impls {\n-                            permitted = true;\n                         }\n                     }\n "}, {"sha": "13686cfec809a8635e683129330341d1a222a62e", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -15,7 +15,6 @@ use rustc_hir::def_id::DefId;\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n-use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Const, Ty, TyCtxt};\n@@ -175,13 +174,7 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n     }\n \n     fn default_constness_for_trait_bounds(&self) -> hir::Constness {\n-        // FIXME: refactor this into a method\n-        let node = self.tcx.hir().get(self.body_id);\n-        if let Some(fn_like) = FnLikeNode::from_node(node) {\n-            fn_like.constness()\n-        } else {\n-            hir::Constness::NotConst\n-        }\n+        self.tcx.hir().get(self.body_id).constness()\n     }\n \n     fn get_type_parameter_bounds("}, {"sha": "1a4c2eb5155849168bcb719b3763737abc840ea3", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -35,7 +35,6 @@ use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::weak_lang_items;\n use rustc_hir::{GenericParamKind, HirId, Node};\n-use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::mono::Linkage;\n@@ -358,11 +357,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n     }\n \n     fn default_constness_for_trait_bounds(&self) -> hir::Constness {\n-        if let Some(fn_like) = FnLikeNode::from_node(self.node()) {\n-            fn_like.constness()\n-        } else {\n-            hir::Constness::NotConst\n-        }\n+        self.node().constness()\n     }\n \n     fn get_type_parameter_bounds("}, {"sha": "0bd1ea645779f6d524e1cb9e27156bcfe3f82b38", "filename": "library/std/src/sys/unix/args.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -77,10 +77,18 @@ mod imp {\n     use crate::ptr;\n     use crate::sync::atomic::{AtomicIsize, AtomicPtr, Ordering};\n \n+    // The system-provided argc and argv, which we store in static memory\n+    // here so that we can defer the work of parsing them until its actually\n+    // needed.\n+    //\n+    // Note that we never mutate argv/argc, the argv array, or the argv\n+    // strings, which allows the code in this file to be very simple.\n     static ARGC: AtomicIsize = AtomicIsize::new(0);\n     static ARGV: AtomicPtr<*const u8> = AtomicPtr::new(ptr::null_mut());\n \n     unsafe fn really_init(argc: isize, argv: *const *const u8) {\n+        // These don't need to be ordered with each other or other stores,\n+        // because they only hold the unmodified system-provide argv/argc.\n         ARGC.store(argc, Ordering::Relaxed);\n         ARGV.store(argv as *mut _, Ordering::Relaxed);\n     }\n@@ -122,8 +130,14 @@ mod imp {\n \n     fn clone() -> Vec<OsString> {\n         unsafe {\n-            // Load ARGC and ARGV without a lock. If the store to either ARGV or\n-            // ARGC isn't visible yet, we'll return an empty argument list.\n+            // Load ARGC and ARGV, which hold the unmodified system-provided\n+            // argc/argv, so we can read the pointed-to memory without atomics\n+            // or synchronization.\n+            //\n+            // If either ARGC or ARGV is still zero or null, then either there\n+            // really are no arguments, or someone is asking for `args()`\n+            // before initialization has completed, and we return an empty\n+            // list.\n             let argv = ARGV.load(Ordering::Relaxed);\n             let argc = if argv.is_null() { 0 } else { ARGC.load(Ordering::Relaxed) };\n             (0..argc)"}, {"sha": "d2cf929aa266f82a0b9618b68aa528a92a7de65c", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -580,7 +580,13 @@ def fix_bin_or_dylib(self, fname):\n         if ostype != \"Linux\":\n             return\n \n-        if not os.path.exists(\"/etc/NIXOS\"):\n+        # Use `/etc/os-release` instead of `/etc/NIXOS`.\n+        # The latter one does not exist on NixOS when using tmpfs as root.\n+        try:\n+            with open(\"/etc/os-release\", \"r\") as f:\n+                if not any(line.strip() == \"ID=nixos\" for line in f):\n+                    return\n+        except FileNotFoundError:\n             return\n         if os.path.exists(\"/lib\"):\n             return"}, {"sha": "77d2684b5d2a4870ff1826df2e0a1244eea2eaa1", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -2,7 +2,7 @@\n //! library.\n //!\n //! This module contains some of the real meat in the rustbuild build system\n-//! which is where Cargo is used to compiler the standard library, libtest, and\n+//! which is where Cargo is used to compile the standard library, libtest, and\n //! compiler. This module is also responsible for assembling the sysroot as it\n //! goes along from the output of the previous stage.\n "}, {"sha": "6672093eb7bc60cc83ce13eb0d450474125724f0", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -560,7 +560,8 @@ nav.sub {\n .docblock table {\n \tmargin: .5em 0;\n \twidth: calc(100% - 2px);\n-\tborder: 1px dashed;\n+\toverflow-x: auto;\n+\tdisplay: block;\n }\n \n .docblock table td {"}, {"sha": "354cdd2fb035b2d9e9d7e471b0ce551fa5c13aa9", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -140,7 +140,7 @@ pre, .rustdoc.source .example-wrap {\n \tborder-bottom-color: #5c6773;\n }\n \n-.docblock table, .docblock table td, .docblock table th {\n+.docblock table td, .docblock table th {\n \tborder-color: #5c6773;\n }\n "}, {"sha": "b4f5a13c815095282834bf8cca2b5bc394d1e673", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -97,7 +97,7 @@ pre, .rustdoc.source .example-wrap {\n \tborder-bottom-color: #DDD;\n }\n \n-.docblock table, .docblock table td, .docblock table th {\n+.docblock table td, .docblock table th {\n \tborder-color: #ddd;\n }\n "}, {"sha": "29cbcd65ce81de54800ed4ecadf9de47cf67fc83", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -97,7 +97,7 @@ pre, .rustdoc.source .example-wrap {\n \tborder-bottom-color: #ddd;\n }\n \n-.docblock table, .docblock table td, .docblock table th {\n+.docblock table td, .docblock table th {\n \tborder-color: #ddd;\n }\n "}, {"sha": "9ab7cd0fa07b04c4dd2ad746e5380c9884af8e63", "filename": "src/test/rustdoc-gui/docblock-table-overflow.goml", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Ftest%2Frustdoc-gui%2Fdocblock-table-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Ftest%2Frustdoc-gui%2Fdocblock-table-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdocblock-table-overflow.goml?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -0,0 +1,9 @@\n+// This test ensures that the type declaration content overflow is handled inside the <pre> directly.\n+goto: file://|DOC_PATH|/lib2/long_table/struct.Foo.html\n+// We set a fixed size so there is no chance of \"random\" resize.\n+size: (1100, 800)\n+// Logically, the \".docblock\" and the \"<p>\" should have the same scroll width.\n+compare-elements-property: (\".top-doc .docblock\", \".top-doc .docblock > p\", [\"scrollWidth\"])\n+assert-property: (\".top-doc .docblock\", {\"scrollWidth\": \"816\"})\n+// However, since there is overflow in the <table>, its scroll width is bigger.\n+assert-property: (\".top-doc .docblock table\", {\"scrollWidth\": \"1573\"})"}, {"sha": "86ae330e0098f09350812e7b290567fded87ce7f", "filename": "src/test/rustdoc-gui/src/lib2/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -57,3 +57,12 @@ pub mod long_trait {\n     pub trait ALongNameBecauseItHelpsTestingTheCurrentProblem: DerefMut<Target = u32>\n         + From<u128> + Send + Sync + AsRef<str> + 'static {}\n }\n+\n+pub mod long_table {\n+    /// | This::is::a::kinda::very::long::header::number::one | This::is::a::kinda::very::long::header::number::two | This::is::a::kinda::very::long::header::number::one | This::is::a::kinda::very::long::header::number::two |\n+    /// | ----------- | ----------- | ----------- | ----------- |\n+    /// | This::is::a::kinda::long::content::number::one | This::is::a::kinda::very::long::content::number::two | This::is::a::kinda::long::content::number::one | This::is::a::kinda::very::long::content::number::two |\n+    ///\n+    /// I wanna sqdkfnqds f dsqf qds f dsqf dsq f dsq f qds f qds f qds f dsqq f dsf sqdf dsq fds f dsq f dq f ds fq sd fqds f dsq f sqd fsq df sd fdsqfqsd fdsq f dsq f dsqfd s dfq\n+    pub struct Foo;\n+}"}, {"sha": "31e1bb209f98ec5fc6b7cbea4c4766a555c87247", "filename": "src/test/rustdoc-gui/src/lib2/src/lib.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf932aa584f2ba1a1744f3ef0b21f14387276fb6/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf932aa584f2ba1a1744f3ef0b21f14387276fb6/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fsrc%2Flib.rs?ref=cf932aa584f2ba1a1744f3ef0b21f14387276fb6", "patch": "@@ -1,7 +0,0 @@\n-#[cfg(test)]\n-mod tests {\n-    #[test]\n-    fn it_works() {\n-        assert_eq!(2 + 2, 4);\n-    }\n-}"}, {"sha": "a3ced35155f370a465449d788fe91e75202c83aa", "filename": "src/test/ui/feature-gates/feature-gate-optimize_attribute.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optimize_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optimize_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optimize_attribute.stderr?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -51,4 +51,5 @@ LL | #[optimize(banana)]\n \n error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors have detailed explanations: E0658, E0722.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "0c30c9dc50c0d8ecd206482d9ed766bc57108629", "filename": "src/test/ui/ffi_const2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Ftest%2Fui%2Fffi_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Ftest%2Fui%2Fffi_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fffi_const2.stderr?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -6,3 +6,4 @@ LL |     #[ffi_pure]\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0757`."}, {"sha": "e9d620877345423f65e0683bad69c34df47ab0ce", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -9,7 +9,7 @@ LL | fn elided(x: &i32) -> impl Copy { x }\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n-   |                       ^^^^^^^^^^^^^^\n+   |                                 ^^^^\n \n error: lifetime may not live long enough\n   --> $DIR/must_outlive_least_region_or_bound.rs:5:32\n@@ -23,7 +23,7 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n-   |                                ^^^^^^^^^^^^^^\n+   |                                          ^^^^\n \n error: lifetime may not live long enough\n   --> $DIR/must_outlive_least_region_or_bound.rs:7:46"}, {"sha": "6c5264671a9120c3f397bc612d465736f98a4d24", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -9,7 +9,7 @@ LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                           ^^^^\n \n error: lifetime may not live long enough\n   --> $DIR/static-return-lifetime-infered.rs:9:37\n@@ -23,7 +23,7 @@ LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n-   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                             ^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "536c1d737402346f87f5209e4bf0be7f11e5c01f", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-in-impl.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+#![feature(const_fn_trait_bound)]\n+#![feature(const_trait_impl)]\n+\n+trait MyPartialEq {\n+    fn eq(&self, other: &Self) -> bool;\n+}\n+\n+impl<T: PartialEq> const MyPartialEq for T {\n+    fn eq(&self, other: &Self) -> bool {\n+        PartialEq::eq(self, other)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a678731934f6e0e75a75cb6fc6bd453a54dadc3a", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -9,7 +9,7 @@ LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n-   |                                     ^^^^^^^^^^^^^^^\n+   |                                                ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "962593e411e92a16aac8f7d1a3f35edaf77268ae", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -9,7 +9,7 @@ LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n-   |                               ^^^^^^^^^^^^^^^\n+   |                                          ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "05ba7808600b01131933898a9206009e9f8c3542", "filename": "src/test/ui/suggestions/lifetimes/trait-object-nested-in-impl-trait.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05f2326c0570fdd64f53532a089bbbc361d190e6/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.nll.stderr?ref=05f2326c0570fdd64f53532a089bbbc361d190e6", "patch": "@@ -9,7 +9,7 @@ LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> {\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> + '_ {\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                          ^^^^\n \n error: lifetime may not live long enough\n   --> $DIR/trait-object-nested-in-impl-trait.rs:39:9\n@@ -47,7 +47,7 @@ LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> {\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> + 'a {\n-   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                                 ^^^^\n \n error: aborting due to 4 previous errors\n "}]}