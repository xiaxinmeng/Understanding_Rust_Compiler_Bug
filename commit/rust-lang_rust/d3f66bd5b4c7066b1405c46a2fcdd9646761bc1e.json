{"sha": "d3f66bd5b4c7066b1405c46a2fcdd9646761bc1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZjY2YmQ1YjRjNzA2NmIxNDA1YzQ2YTJmY2RkOTY0Njc2MWJjMWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-24T19:56:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-24T19:56:06Z"}, "message": "auto merge of #15779 : alexcrichton/rust/no-nul-terminator, r=pcwalton\n\nApparently the default getFile implementation for a memory buffer in LLVM ends\r\nup requiring a null terminator at the end of the file. This isn't true a good\r\nbit of the time apparently on OSX. There have been a number of failed\r\nnightly/snapshot builds recently with this strange assertion.\r\n\r\nThis modifies the calls to MemoryBuffer::getFile to explicitly not ask for a\r\nnull terminator.", "tree": {"sha": "86dfc193fa5107cdba2b266fce6b73c842ea292d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86dfc193fa5107cdba2b266fce6b73c842ea292d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3f66bd5b4c7066b1405c46a2fcdd9646761bc1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f66bd5b4c7066b1405c46a2fcdd9646761bc1e", "html_url": "https://github.com/rust-lang/rust/commit/d3f66bd5b4c7066b1405c46a2fcdd9646761bc1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3f66bd5b4c7066b1405c46a2fcdd9646761bc1e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c05bb4ec7d640b45ca87ead7b6090aaeb2acf060", "url": "https://api.github.com/repos/rust-lang/rust/commits/c05bb4ec7d640b45ca87ead7b6090aaeb2acf060", "html_url": "https://github.com/rust-lang/rust/commit/c05bb4ec7d640b45ca87ead7b6090aaeb2acf060"}, {"sha": "b29d106b7ca57214f30bef0ab49bb7c3399230fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/b29d106b7ca57214f30bef0ab49bb7c3399230fe", "html_url": "https://github.com/rust-lang/rust/commit/b29d106b7ca57214f30bef0ab49bb7c3399230fe"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "e28a78b1ee729194ee2209aea562db5e3d3ea9a2", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d3f66bd5b4c7066b1405c46a2fcdd9646761bc1e/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d3f66bd5b4c7066b1405c46a2fcdd9646761bc1e/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=d3f66bd5b4c7066b1405c46a2fcdd9646761bc1e", "patch": "@@ -31,16 +31,30 @@ using namespace llvm::object;\n \n static char *LastError;\n \n+#if LLVM_VERSION_MINOR >= 5\n+extern \"C\" LLVMMemoryBufferRef\n+LLVMRustCreateMemoryBufferWithContentsOfFile(const char *Path) {\n+  ErrorOr<std::unique_ptr<MemoryBuffer>> buf_or = MemoryBuffer::getFile(Path,\n+                                                                        -1,\n+                                                                        false);\n+  if (!buf_or) {\n+      LLVMRustSetLastError(buf_or.getError().message().c_str());\n+      return nullptr;\n+  }\n+  return wrap(buf_or.get().release());\n+}\n+#else\n extern \"C\" LLVMMemoryBufferRef\n LLVMRustCreateMemoryBufferWithContentsOfFile(const char *Path) {\n-  LLVMMemoryBufferRef MemBuf = NULL;\n-  char *err = NULL;\n-  LLVMCreateMemoryBufferWithContentsOfFile(Path, &MemBuf, &err);\n-  if (err != NULL) {\n-    LLVMRustSetLastError(err);\n+  OwningPtr<MemoryBuffer> buf;\n+  error_code err = MemoryBuffer::getFile(Path, buf, -1, false);\n+  if (err) {\n+      LLVMRustSetLastError(err.message().c_str());\n+      return NULL;\n   }\n-  return MemBuf;\n+  return wrap(buf.take());\n }\n+#endif\n \n extern \"C\" char *LLVMRustGetLastError(void) {\n   char *ret = LastError;\n@@ -658,10 +672,12 @@ LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n #if LLVM_VERSION_MINOR >= 5\n extern \"C\" void*\n LLVMRustOpenArchive(char *path) {\n-    ErrorOr<std::unique_ptr<MemoryBuffer>> buf_or = MemoryBuffer::getFile(path);\n+    ErrorOr<std::unique_ptr<MemoryBuffer>> buf_or = MemoryBuffer::getFile(path,\n+                                                                          -1,\n+                                                                          false);\n     if (!buf_or) {\n         LLVMRustSetLastError(buf_or.getError().message().c_str());\n-        return NULL;\n+        return nullptr;\n     }\n \n     std::error_code err;\n@@ -676,7 +692,7 @@ LLVMRustOpenArchive(char *path) {\n extern \"C\" void*\n LLVMRustOpenArchive(char *path) {\n     OwningPtr<MemoryBuffer> buf;\n-    error_code err = MemoryBuffer::getFile(path, buf);\n+    error_code err = MemoryBuffer::getFile(path, buf, -1, false);\n     if (err) {\n         LLVMRustSetLastError(err.message().c_str());\n         return NULL;"}]}