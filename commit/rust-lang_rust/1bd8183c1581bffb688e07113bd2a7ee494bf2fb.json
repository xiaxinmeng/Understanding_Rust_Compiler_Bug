{"sha": "1bd8183c1581bffb688e07113bd2a7ee494bf2fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZDgxODNjMTU4MWJmZmI2ODhlMDcxMTNiZDJhN2VlNDk0YmYyZmI=", "commit": {"author": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2016-03-24T05:16:23Z"}, "committer": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2016-03-26T23:21:00Z"}, "message": "Don't hardcode item-type anchor ids\n\nThese should always correspond to the values in `ItemType::to_static_str`", "tree": {"sha": "020a99ce722ea9d455cfd664c4b1f04fa2aa440a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/020a99ce722ea9d455cfd664c4b1f04fa2aa440a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bd8183c1581bffb688e07113bd2a7ee494bf2fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bd8183c1581bffb688e07113bd2a7ee494bf2fb", "html_url": "https://github.com/rust-lang/rust/commit/1bd8183c1581bffb688e07113bd2a7ee494bf2fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bd8183c1581bffb688e07113bd2a7ee494bf2fb/comments", "author": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e33ef4c42c5e4c4400a8cd470ac851a4dff0789", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e33ef4c42c5e4c4400a8cd470ac851a4dff0789", "html_url": "https://github.com/rust-lang/rust/commit/3e33ef4c42c5e4c4400a8cd470ac851a4dff0789"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "24b84212a893c4aaa54c1186ef81ec5eec5560bd", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1bd8183c1581bffb688e07113bd2a7ee494bf2fb/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd8183c1581bffb688e07113bd2a7ee494bf2fb/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=1bd8183c1581bffb688e07113bd2a7ee494bf2fb", "patch": "@@ -2160,8 +2160,9 @@ fn item_struct(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n             write!(w, \"<h2 class='fields'>Fields</h2>\\n<table>\")?;\n             for field in fields {\n                 write!(w, \"<tr class='stab {stab}'>\n-                             <td id='structfield.{name}'>\\\n+                             <td id='{shortty}.{name}'>\\\n                                <code>{name}</code></td><td>\",\n+                       shortty = ItemType::StructField,\n                        stab = field.stability_class(),\n                        name = field.name.as_ref().unwrap())?;\n                 document(w, cx, field)?;\n@@ -2231,7 +2232,8 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     if !e.variants.is_empty() {\n         write!(w, \"<h2 class='variants'>Variants</h2>\\n<table class='variants_table'>\")?;\n         for variant in &e.variants {\n-            write!(w, \"<tr><td id='variant.{name}'><code>{name}</code></td><td>\",\n+            write!(w, \"<tr><td id='{shortty}.{name}'><code>{name}</code></td><td>\",\n+                   shortty = ItemType::Variant,\n                    name = variant.name.as_ref().unwrap())?;\n             document(w, cx, variant)?;\n \n@@ -2247,8 +2249,9 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                            <table>\")?;\n                 for field in fields {\n                     write!(w, \"<tr><td \\\n-                               id='variant.{v}.field.{f}'>\\\n+                               id='{shortty}.{v}.field.{f}'>\\\n                                <code>{f}</code></td><td>\",\n+                           shortty = ItemType::Variant,\n                            v = variant.name.as_ref().unwrap(),\n                            f = field.name.as_ref().unwrap())?;\n                     document(w, cx, field)?;\n@@ -2460,6 +2463,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n     fn doctraititem(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item,\n                     link: AssocItemLink, render_static: bool,\n                     outer_version: Option<&str>) -> fmt::Result {\n+        let shortty = shortty(item);\n         let name = item.name.as_ref().unwrap();\n \n         let is_static = match item.inner {\n@@ -2472,35 +2476,35 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n             clean::MethodItem(..) | clean::TyMethodItem(..) => {\n                 // Only render when the method is not static or we allow static methods\n                 if !is_static || render_static {\n-                    let id = derive_id(format!(\"method.{}\", name));\n-                    write!(w, \"<h4 id='{}' class='{}'>\", id, shortty(item))?;\n+                    let id = derive_id(format!(\"{}.{}\", shortty, name));\n+                    write!(w, \"<h4 id='{}' class='{}'>\", id, shortty)?;\n                     render_stability_since_raw(w, item.stable_since(), outer_version)?;\n                     write!(w, \"<code>\")?;\n                     render_assoc_item(w, item, link)?;\n                     write!(w, \"</code></h4>\\n\")?;\n                 }\n             }\n             clean::TypedefItem(ref tydef, _) => {\n-                let id = derive_id(format!(\"associatedtype.{}\", name));\n-                write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty(item))?;\n+                let id = derive_id(format!(\"{}.{}\", ItemType::AssociatedType, name));\n+                write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty)?;\n                 write!(w, \"type {} = {}\", name, tydef.type_)?;\n                 write!(w, \"</code></h4>\\n\")?;\n             }\n             clean::AssociatedConstItem(ref ty, ref default) => {\n-                let id = derive_id(format!(\"associatedconstant.{}\", name));\n-                write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty(item))?;\n+                let id = derive_id(format!(\"{}.{}\", shortty, name));\n+                write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty)?;\n                 assoc_const(w, item, ty, default.as_ref())?;\n                 write!(w, \"</code></h4>\\n\")?;\n             }\n             clean::ConstantItem(ref c) => {\n-                let id = derive_id(format!(\"associatedconstant.{}\", name));\n-                write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty(item))?;\n+                let id = derive_id(format!(\"{}.{}\", shortty, name));\n+                write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty)?;\n                 assoc_const(w, item, &c.type_, Some(&c.expr))?;\n                 write!(w, \"</code></h4>\\n\")?;\n             }\n             clean::AssociatedTypeItem(ref bounds, ref default) => {\n-                let id = derive_id(format!(\"associatedtype.{}\", name));\n-                write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty(item))?;\n+                let id = derive_id(format!(\"{}.{}\", shortty, name));\n+                write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty)?;\n                 assoc_type(w, item, bounds, default)?;\n                 write!(w, \"</code></h4>\\n\")?;\n             }"}]}