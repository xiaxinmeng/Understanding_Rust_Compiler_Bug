{"sha": "850dfdae60cd8b28a40b099f8e390534205b9ede", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MGRmZGFlNjBjZDhiMjhhNDBiMDk5ZjhlMzkwNTM0MjA1YjllZGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-23T20:58:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-23T20:58:14Z"}, "message": "Auto merge of #4680 - hellow554:debug_assert_mut_call, r=flip1995\n\nAdd lint for debug_assert_with_mut_call\n\ncloses #1526\n\n**What does not work:**\n\n* detecting a mut call in the format string itself, e.g. `debug_assert!(false, \"{}\", vec![1].pop())`\n* detecting `*mut T` usage (pointer)\n\n---\n\nchangelog: add new lint `debug_assert_with_mut_call`", "tree": {"sha": "0b7cf68dacd7367aa041c58cd845a9f25080f42e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b7cf68dacd7367aa041c58cd845a9f25080f42e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/850dfdae60cd8b28a40b099f8e390534205b9ede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/850dfdae60cd8b28a40b099f8e390534205b9ede", "html_url": "https://github.com/rust-lang/rust/commit/850dfdae60cd8b28a40b099f8e390534205b9ede", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/850dfdae60cd8b28a40b099f8e390534205b9ede/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "087e5eaea5c23d65e2b58b5f89e52b3a9f8aa31b", "url": "https://api.github.com/repos/rust-lang/rust/commits/087e5eaea5c23d65e2b58b5f89e52b3a9f8aa31b", "html_url": "https://github.com/rust-lang/rust/commit/087e5eaea5c23d65e2b58b5f89e52b3a9f8aa31b"}, {"sha": "5572476a36f85959ec820d0886548a747ce0570a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5572476a36f85959ec820d0886548a747ce0570a", "html_url": "https://github.com/rust-lang/rust/commit/5572476a36f85959ec820d0886548a747ce0570a"}], "stats": {"total": 467, "additions": 465, "deletions": 2}, "files": [{"sha": "7b32914854febb59606bc887778aa1c075dc6910", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/850dfdae60cd8b28a40b099f8e390534205b9ede/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/850dfdae60cd8b28a40b099f8e390534205b9ede/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=850dfdae60cd8b28a40b099f8e390534205b9ede", "patch": "@@ -966,6 +966,7 @@ Released 2018-09-13\n [`copy_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#copy_iterator\n [`crosspointer_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#crosspointer_transmute\n [`dbg_macro`]: https://rust-lang.github.io/rust-clippy/master/index.html#dbg_macro\n+[`debug_assert_with_mut_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#debug_assert_with_mut_call\n [`decimal_literal_representation`]: https://rust-lang.github.io/rust-clippy/master/index.html#decimal_literal_representation\n [`declare_interior_mutable_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#declare_interior_mutable_const\n [`default_trait_access`]: https://rust-lang.github.io/rust-clippy/master/index.html#default_trait_access"}, {"sha": "87ef441eadd5971144f6cd79484d14d1f374095c", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/850dfdae60cd8b28a40b099f8e390534205b9ede/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/850dfdae60cd8b28a40b099f8e390534205b9ede/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=850dfdae60cd8b28a40b099f8e390534205b9ede", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 331 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 332 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "8f0b3c21682edef5d447ed9d34732c3c80e00229", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/850dfdae60cd8b28a40b099f8e390534205b9ede/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/850dfdae60cd8b28a40b099f8e390534205b9ede/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=850dfdae60cd8b28a40b099f8e390534205b9ede", "patch": "@@ -230,6 +230,7 @@ pub mod mul_add;\n pub mod multiple_crate_versions;\n pub mod mut_mut;\n pub mod mut_reference;\n+pub mod mutable_debug_assertion;\n pub mod mutex_atomic;\n pub mod needless_bool;\n pub mod needless_borrow;\n@@ -610,6 +611,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n     reg.register_late_lint_pass(box comparison_chain::ComparisonChain);\n     reg.register_late_lint_pass(box mul_add::MulAddCheck);\n     reg.register_late_lint_pass(box unused_self::UnusedSelf);\n+    reg.register_late_lint_pass(box mutable_debug_assertion::DebugAssertWithMutCall);\n \n     reg.register_lint_group(\"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -855,6 +857,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         misc_early::ZERO_PREFIXED_LITERAL,\n         mul_add::MANUAL_MUL_ADD,\n         mut_reference::UNNECESSARY_MUT_PASSED,\n+        mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL,\n         mutex_atomic::MUTEX_ATOMIC,\n         needless_bool::BOOL_COMPARISON,\n         needless_bool::NEEDLESS_BOOL,\n@@ -1160,6 +1163,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         misc::CMP_NAN,\n         misc::FLOAT_CMP,\n         misc::MODULO_ONE,\n+        mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL,\n         non_copy_const::BORROW_INTERIOR_MUTABLE_CONST,\n         non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST,\n         open_options::NONSENSICAL_OPEN_OPTIONS,"}, {"sha": "1184db0587b9db78c659cb2b16a44fd46aef5bcd", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/850dfdae60cd8b28a40b099f8e390534205b9ede/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/850dfdae60cd8b28a40b099f8e390534205b9ede/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=850dfdae60cd8b28a40b099f8e390534205b9ede", "patch": "@@ -0,0 +1,155 @@\n+use crate::utils::{is_direct_expn_of, span_lint};\n+use if_chain::if_chain;\n+use matches::matches;\n+use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc::hir::{Expr, ExprKind, Mutability, StmtKind, UnOp};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_lint_pass, declare_tool_lint, ty};\n+use syntax_pos::Span;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for function/method calls with a mutable\n+    /// parameter in `debug_assert!`, `debug_assert_eq!` and `debug_assert_ne!` macros.\n+    ///\n+    /// **Why is this bad?** In release builds `debug_assert!` macros are optimized out by the\n+    /// compiler.\n+    /// Therefore mutating something in a `debug_assert!` macro results in different behaviour\n+    /// between a release and debug build.\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// **Example:**\n+    /// ```rust,ignore\n+    /// debug_assert_eq!(vec![3].pop(), Some(3));\n+    /// // or\n+    /// fn take_a_mut_parameter(_: &mut u32) -> bool { unimplemented!() }\n+    /// debug_assert!(take_a_mut_parameter(&mut 5));\n+    /// ```\n+    pub DEBUG_ASSERT_WITH_MUT_CALL,\n+    correctness,\n+    \"mutable arguments in `debug_assert{,_ne,_eq}!`\"\n+}\n+\n+declare_lint_pass!(DebugAssertWithMutCall => [DEBUG_ASSERT_WITH_MUT_CALL]);\n+\n+const DEBUG_MACRO_NAMES: [&str; 3] = [\"debug_assert\", \"debug_assert_eq\", \"debug_assert_ne\"];\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DebugAssertWithMutCall {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+        for dmn in &DEBUG_MACRO_NAMES {\n+            if is_direct_expn_of(e.span, dmn).is_some() {\n+                if let Some(span) = extract_call(cx, e) {\n+                    span_lint(\n+                        cx,\n+                        DEBUG_ASSERT_WITH_MUT_CALL,\n+                        span,\n+                        &format!(\"do not call a function with mutable arguments inside of `{}!`\", dmn),\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+//HACK(hellow554): remove this when #4694 is implemented\n+#[allow(clippy::cognitive_complexity)]\n+fn extract_call<'a, 'tcx>(cx: &'a LateContext<'a, 'tcx>, e: &'tcx Expr) -> Option<Span> {\n+    if_chain! {\n+        if let ExprKind::Block(ref block, _) = e.kind;\n+        if block.stmts.len() == 1;\n+        if let StmtKind::Semi(ref matchexpr) = block.stmts[0].kind;\n+        then {\n+            if_chain! {\n+                if let ExprKind::Match(ref ifclause, _, _) = matchexpr.kind;\n+                if let ExprKind::DropTemps(ref droptmp) = ifclause.kind;\n+                if let ExprKind::Unary(UnOp::UnNot, ref condition) = droptmp.kind;\n+                then {\n+                    // debug_assert\n+                    let mut visitor = MutArgVisitor::new(cx);\n+                    visitor.visit_expr(condition);\n+                    return visitor.expr_span();\n+                } else {\n+                    // debug_assert_{eq,ne}\n+                    if_chain! {\n+                        if let ExprKind::Block(ref matchblock, _) = matchexpr.kind;\n+                        if let Some(ref matchheader) = matchblock.expr;\n+                        if let ExprKind::Match(ref headerexpr, _, _) = matchheader.kind;\n+                        if let ExprKind::Tup(ref conditions) = headerexpr.kind;\n+                        if conditions.len() == 2;\n+                        then {\n+                            if let ExprKind::AddrOf(_, ref lhs) = conditions[0].kind {\n+                                let mut visitor = MutArgVisitor::new(cx);\n+                                visitor.visit_expr(lhs);\n+                                if let Some(span) = visitor.expr_span() {\n+                                    return Some(span);\n+                                }\n+                            }\n+                            if let ExprKind::AddrOf(_, ref rhs) = conditions[1].kind {\n+                                let mut visitor = MutArgVisitor::new(cx);\n+                                visitor.visit_expr(rhs);\n+                                if let Some(span) = visitor.expr_span() {\n+                                    return Some(span);\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    None\n+}\n+\n+struct MutArgVisitor<'a, 'tcx> {\n+    cx: &'a LateContext<'a, 'tcx>,\n+    expr_span: Option<Span>,\n+    found: bool,\n+}\n+\n+impl<'a, 'tcx> MutArgVisitor<'a, 'tcx> {\n+    fn new(cx: &'a LateContext<'a, 'tcx>) -> Self {\n+        Self {\n+            cx,\n+            expr_span: None,\n+            found: false,\n+        }\n+    }\n+\n+    fn expr_span(&self) -> Option<Span> {\n+        if self.found {\n+            self.expr_span\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for MutArgVisitor<'a, 'tcx> {\n+    fn visit_expr(&mut self, expr: &'tcx Expr) {\n+        match expr.kind {\n+            ExprKind::AddrOf(Mutability::MutMutable, _) => {\n+                self.found = true;\n+                return;\n+            },\n+            ExprKind::Path(_) => {\n+                if let Some(adj) = self.cx.tables.adjustments().get(expr.hir_id) {\n+                    if adj\n+                        .iter()\n+                        .any(|a| matches!(a.target.kind, ty::Ref(_, _, Mutability::MutMutable)))\n+                    {\n+                        self.found = true;\n+                        return;\n+                    }\n+                }\n+            },\n+            _ if !self.found => self.expr_span = Some(expr.span),\n+            _ => return,\n+        }\n+        walk_expr(self, expr)\n+    }\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.cx.tcx.hir())\n+    }\n+}"}, {"sha": "48ca368f5a933ef19152953c7cc8a483810b48dd", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/850dfdae60cd8b28a40b099f8e390534205b9ede/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/850dfdae60cd8b28a40b099f8e390534205b9ede/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=850dfdae60cd8b28a40b099f8e390534205b9ede", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 331] = [\n+pub const ALL_LINTS: [Lint; 332] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -280,6 +280,13 @@ pub const ALL_LINTS: [Lint; 331] = [\n         deprecation: None,\n         module: \"dbg_macro\",\n     },\n+    Lint {\n+        name: \"debug_assert_with_mut_call\",\n+        group: \"correctness\",\n+        desc: \"mutable arguments in `debug_assert{,_ne,_eq}!`\",\n+        deprecation: None,\n+        module: \"mutable_debug_assertion\",\n+    },\n     Lint {\n         name: \"decimal_literal_representation\",\n         group: \"restriction\","}, {"sha": "a588547b943a4b20b3cc86bcd18e3c2e18c08d25", "filename": "tests/ui/debug_assert_with_mut_call.rs", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/850dfdae60cd8b28a40b099f8e390534205b9ede/tests%2Fui%2Fdebug_assert_with_mut_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/850dfdae60cd8b28a40b099f8e390534205b9ede/tests%2Fui%2Fdebug_assert_with_mut_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdebug_assert_with_mut_call.rs?ref=850dfdae60cd8b28a40b099f8e390534205b9ede", "patch": "@@ -0,0 +1,124 @@\n+#![feature(custom_inner_attributes)]\n+#![rustfmt::skip]\n+#![allow(clippy::trivially_copy_pass_by_ref, clippy::cognitive_complexity, clippy::redundant_closure_call)]\n+\n+struct S;\n+\n+impl S {\n+    fn bool_self_ref(&self) -> bool { false }\n+    fn bool_self_mut(&mut self) -> bool { false }\n+    fn bool_self_ref_arg_ref(&self, _: &u32) -> bool { false }\n+    fn bool_self_ref_arg_mut(&self, _: &mut u32) -> bool { false }\n+    fn bool_self_mut_arg_ref(&mut self, _: &u32) -> bool { false }\n+    fn bool_self_mut_arg_mut(&mut self, _: &mut u32) -> bool { false }\n+\n+    fn u32_self_ref(&self) -> u32 { 0 }\n+    fn u32_self_mut(&mut self) -> u32 { 0 }\n+    fn u32_self_ref_arg_ref(&self, _: &u32) -> u32 { 0 }\n+    fn u32_self_ref_arg_mut(&self, _: &mut u32) -> u32 { 0 }\n+    fn u32_self_mut_arg_ref(&mut self, _: &u32) -> u32 { 0 }\n+    fn u32_self_mut_arg_mut(&mut self, _: &mut u32) -> u32 { 0 }\n+}\n+\n+fn bool_ref(_: &u32) -> bool { false }\n+fn bool_mut(_: &mut u32) -> bool { false }\n+fn u32_ref(_: &u32) -> u32 { 0 }\n+fn u32_mut(_: &mut u32) -> u32 { 0 }\n+\n+fn func_non_mutable() {\n+    debug_assert!(bool_ref(&3));\n+    debug_assert!(!bool_ref(&3));\n+\n+    debug_assert_eq!(0, u32_ref(&3));\n+    debug_assert_eq!(u32_ref(&3), 0);\n+\n+    debug_assert_ne!(1, u32_ref(&3));\n+    debug_assert_ne!(u32_ref(&3), 1);\n+}\n+\n+fn func_mutable() {\n+    debug_assert!(bool_mut(&mut 3));\n+    debug_assert!(!bool_mut(&mut 3));\n+\n+    debug_assert_eq!(0, u32_mut(&mut 3));\n+    debug_assert_eq!(u32_mut(&mut 3), 0);\n+\n+    debug_assert_ne!(1, u32_mut(&mut 3));\n+    debug_assert_ne!(u32_mut(&mut 3), 1);\n+}\n+\n+fn method_non_mutable() {\n+    debug_assert!(S.bool_self_ref());\n+    debug_assert!(S.bool_self_ref_arg_ref(&3));\n+\n+    debug_assert_eq!(S.u32_self_ref(), 0);\n+    debug_assert_eq!(S.u32_self_ref_arg_ref(&3), 0);\n+\n+    debug_assert_ne!(S.u32_self_ref(), 1);\n+    debug_assert_ne!(S.u32_self_ref_arg_ref(&3), 1);\n+}\n+\n+fn method_mutable() {\n+    debug_assert!(S.bool_self_mut());\n+    debug_assert!(!S.bool_self_mut());\n+    debug_assert!(S.bool_self_ref_arg_mut(&mut 3));\n+    debug_assert!(S.bool_self_mut_arg_ref(&3));\n+    debug_assert!(S.bool_self_mut_arg_mut(&mut 3));\n+\n+    debug_assert_eq!(S.u32_self_mut(), 0);\n+    debug_assert_eq!(S.u32_self_mut_arg_ref(&3), 0);\n+    debug_assert_eq!(S.u32_self_ref_arg_mut(&mut 3), 0);\n+    debug_assert_eq!(S.u32_self_mut_arg_mut(&mut 3), 0);\n+\n+    debug_assert_ne!(S.u32_self_mut(), 1);\n+    debug_assert_ne!(S.u32_self_mut_arg_ref(&3), 1);\n+    debug_assert_ne!(S.u32_self_ref_arg_mut(&mut 3), 1);\n+    debug_assert_ne!(S.u32_self_mut_arg_mut(&mut 3), 1);\n+}\n+\n+fn misc() {\n+    // with variable\n+    let mut v: Vec<u32> = vec![1, 2, 3, 4];\n+    debug_assert_eq!(v.get(0), Some(&1));\n+    debug_assert_ne!(v[0], 2);\n+    debug_assert_eq!(v.pop(), Some(1));\n+    debug_assert_ne!(Some(3), v.pop());\n+\n+    let a = &mut 3;\n+    debug_assert!(bool_mut(a));\n+\n+    // nested\n+    debug_assert!(!(bool_ref(&u32_mut(&mut 3))));\n+\n+    // chained\n+    debug_assert_eq!(v.pop().unwrap(), 3);\n+\n+    // format args\n+    debug_assert!(bool_ref(&3), \"w/o format\");\n+    debug_assert!(bool_mut(&mut 3), \"w/o format\");\n+    debug_assert!(bool_ref(&3), \"{} format\", \"w/\");\n+    debug_assert!(bool_mut(&mut 3), \"{} format\", \"w/\");\n+\n+    // sub block\n+    let mut x = 42_u32;\n+    debug_assert!({\n+        bool_mut(&mut x);\n+        x > 10\n+    });\n+\n+    // closures\n+    debug_assert!((|| {\n+        let mut x = 42;\n+        bool_mut(&mut x);\n+        x > 10\n+    })());\n+}\n+\n+fn main() {\n+    func_non_mutable();\n+    func_mutable();\n+    method_non_mutable();\n+    method_mutable();\n+\n+    misc();\n+}"}, {"sha": "48c7f4ea85edacf8d1a88d7bec690c57bf8cc136", "filename": "tests/ui/debug_assert_with_mut_call.stderr", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/850dfdae60cd8b28a40b099f8e390534205b9ede/tests%2Fui%2Fdebug_assert_with_mut_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/850dfdae60cd8b28a40b099f8e390534205b9ede/tests%2Fui%2Fdebug_assert_with_mut_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdebug_assert_with_mut_call.stderr?ref=850dfdae60cd8b28a40b099f8e390534205b9ede", "patch": "@@ -0,0 +1,172 @@\n+error: do not call a function with mutable arguments inside of `debug_assert!`\n+  --> $DIR/debug_assert_with_mut_call.rs:40:19\n+   |\n+LL |     debug_assert!(bool_mut(&mut 3));\n+   |                   ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(clippy::debug_assert_with_mut_call)]` on by default\n+\n+error: do not call a function with mutable arguments inside of `debug_assert!`\n+  --> $DIR/debug_assert_with_mut_call.rs:41:20\n+   |\n+LL |     debug_assert!(!bool_mut(&mut 3));\n+   |                    ^^^^^^^^^^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert_eq!`\n+  --> $DIR/debug_assert_with_mut_call.rs:43:25\n+   |\n+LL |     debug_assert_eq!(0, u32_mut(&mut 3));\n+   |                         ^^^^^^^^^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert_eq!`\n+  --> $DIR/debug_assert_with_mut_call.rs:44:22\n+   |\n+LL |     debug_assert_eq!(u32_mut(&mut 3), 0);\n+   |                      ^^^^^^^^^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert_ne!`\n+  --> $DIR/debug_assert_with_mut_call.rs:46:25\n+   |\n+LL |     debug_assert_ne!(1, u32_mut(&mut 3));\n+   |                         ^^^^^^^^^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert_ne!`\n+  --> $DIR/debug_assert_with_mut_call.rs:47:22\n+   |\n+LL |     debug_assert_ne!(u32_mut(&mut 3), 1);\n+   |                      ^^^^^^^^^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert!`\n+  --> $DIR/debug_assert_with_mut_call.rs:62:19\n+   |\n+LL |     debug_assert!(S.bool_self_mut());\n+   |                   ^^^^^^^^^^^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert!`\n+  --> $DIR/debug_assert_with_mut_call.rs:63:20\n+   |\n+LL |     debug_assert!(!S.bool_self_mut());\n+   |                    ^^^^^^^^^^^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert!`\n+  --> $DIR/debug_assert_with_mut_call.rs:64:19\n+   |\n+LL |     debug_assert!(S.bool_self_ref_arg_mut(&mut 3));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert!`\n+  --> $DIR/debug_assert_with_mut_call.rs:65:19\n+   |\n+LL |     debug_assert!(S.bool_self_mut_arg_ref(&3));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert!`\n+  --> $DIR/debug_assert_with_mut_call.rs:66:19\n+   |\n+LL |     debug_assert!(S.bool_self_mut_arg_mut(&mut 3));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert_eq!`\n+  --> $DIR/debug_assert_with_mut_call.rs:68:22\n+   |\n+LL |     debug_assert_eq!(S.u32_self_mut(), 0);\n+   |                      ^^^^^^^^^^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert_eq!`\n+  --> $DIR/debug_assert_with_mut_call.rs:69:22\n+   |\n+LL |     debug_assert_eq!(S.u32_self_mut_arg_ref(&3), 0);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert_eq!`\n+  --> $DIR/debug_assert_with_mut_call.rs:70:22\n+   |\n+LL |     debug_assert_eq!(S.u32_self_ref_arg_mut(&mut 3), 0);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert_eq!`\n+  --> $DIR/debug_assert_with_mut_call.rs:71:22\n+   |\n+LL |     debug_assert_eq!(S.u32_self_mut_arg_mut(&mut 3), 0);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert_ne!`\n+  --> $DIR/debug_assert_with_mut_call.rs:73:22\n+   |\n+LL |     debug_assert_ne!(S.u32_self_mut(), 1);\n+   |                      ^^^^^^^^^^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert_ne!`\n+  --> $DIR/debug_assert_with_mut_call.rs:74:22\n+   |\n+LL |     debug_assert_ne!(S.u32_self_mut_arg_ref(&3), 1);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert_ne!`\n+  --> $DIR/debug_assert_with_mut_call.rs:75:22\n+   |\n+LL |     debug_assert_ne!(S.u32_self_ref_arg_mut(&mut 3), 1);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert_ne!`\n+  --> $DIR/debug_assert_with_mut_call.rs:76:22\n+   |\n+LL |     debug_assert_ne!(S.u32_self_mut_arg_mut(&mut 3), 1);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert_eq!`\n+  --> $DIR/debug_assert_with_mut_call.rs:84:22\n+   |\n+LL |     debug_assert_eq!(v.pop(), Some(1));\n+   |                      ^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert_ne!`\n+  --> $DIR/debug_assert_with_mut_call.rs:85:31\n+   |\n+LL |     debug_assert_ne!(Some(3), v.pop());\n+   |                               ^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert!`\n+  --> $DIR/debug_assert_with_mut_call.rs:88:19\n+   |\n+LL |     debug_assert!(bool_mut(a));\n+   |                   ^^^^^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert!`\n+  --> $DIR/debug_assert_with_mut_call.rs:91:31\n+   |\n+LL |     debug_assert!(!(bool_ref(&u32_mut(&mut 3))));\n+   |                               ^^^^^^^^^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert_eq!`\n+  --> $DIR/debug_assert_with_mut_call.rs:94:22\n+   |\n+LL |     debug_assert_eq!(v.pop().unwrap(), 3);\n+   |                      ^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert!`\n+  --> $DIR/debug_assert_with_mut_call.rs:98:19\n+   |\n+LL |     debug_assert!(bool_mut(&mut 3), \"w/o format\");\n+   |                   ^^^^^^^^^^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert!`\n+  --> $DIR/debug_assert_with_mut_call.rs:100:19\n+   |\n+LL |     debug_assert!(bool_mut(&mut 3), \"{} format\", \"w/\");\n+   |                   ^^^^^^^^^^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert!`\n+  --> $DIR/debug_assert_with_mut_call.rs:105:9\n+   |\n+LL |         bool_mut(&mut x);\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: do not call a function with mutable arguments inside of `debug_assert!`\n+  --> $DIR/debug_assert_with_mut_call.rs:112:9\n+   |\n+LL |         bool_mut(&mut x);\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 28 previous errors\n+"}]}