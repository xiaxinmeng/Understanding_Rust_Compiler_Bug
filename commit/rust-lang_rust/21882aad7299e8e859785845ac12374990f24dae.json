{"sha": "21882aad7299e8e859785845ac12374990f24dae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxODgyYWFkNzI5OWU4ZTg1OTc4NTg0NWFjMTIzNzQ5OTBmMjRkYWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-28T19:01:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-28T19:01:51Z"}, "message": "Auto merge of #47204 - varkor:unsafecell-into_inner-safe, r=alexcrichton\n\nMake UnsafeCell::into_inner safe\n\nThis fixes #35067. It will require a Crater run as discussed in that\nissue.", "tree": {"sha": "9ab0ec27b9832d7ed017afa31e772a0616cfd796", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ab0ec27b9832d7ed017afa31e772a0616cfd796"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21882aad7299e8e859785845ac12374990f24dae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21882aad7299e8e859785845ac12374990f24dae", "html_url": "https://github.com/rust-lang/rust/commit/21882aad7299e8e859785845ac12374990f24dae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21882aad7299e8e859785845ac12374990f24dae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "771873c84137842c78cfc39625613b95867d21ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/771873c84137842c78cfc39625613b95867d21ef", "html_url": "https://github.com/rust-lang/rust/commit/771873c84137842c78cfc39625613b95867d21ef"}, {"sha": "4829d502cceb779468ab7f69a95223bd31a5cf46", "url": "https://api.github.com/repos/rust-lang/rust/commits/4829d502cceb779468ab7f69a95223bd31a5cf46", "html_url": "https://github.com/rust-lang/rust/commit/4829d502cceb779468ab7f69a95223bd31a5cf46"}], "stats": {"total": 19, "additions": 7, "deletions": 12}, "files": [{"sha": "ec0d1b704dcebbfcf7631ccacc20f8808589fede", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/21882aad7299e8e859785845ac12374990f24dae/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21882aad7299e8e859785845ac12374990f24dae/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=21882aad7299e8e859785845ac12374990f24dae", "patch": "@@ -450,7 +450,7 @@ impl<T> Cell<T> {\n     /// ```\n     #[stable(feature = \"move_cell\", since = \"1.17.0\")]\n     pub fn into_inner(self) -> T {\n-        unsafe { self.value.into_inner() }\n+        self.value.into_inner()\n     }\n }\n \n@@ -569,7 +569,7 @@ impl<T> RefCell<T> {\n         // compiler statically verifies that it is not currently borrowed.\n         // Therefore the following assertion is just a `debug_assert!`.\n         debug_assert!(self.borrow.get() == UNUSED);\n-        unsafe { self.value.into_inner() }\n+        self.value.into_inner()\n     }\n \n     /// Replaces the wrapped value with a new one, returning the old value,\n@@ -1220,23 +1220,18 @@ impl<T> UnsafeCell<T> {\n \n     /// Unwraps the value.\n     ///\n-    /// # Safety\n-    ///\n-    /// This function is unsafe because this thread or another thread may currently be\n-    /// inspecting the inner value.\n-    ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::cell::UnsafeCell;\n     ///\n     /// let uc = UnsafeCell::new(5);\n     ///\n-    /// let five = unsafe { uc.into_inner() };\n+    /// let five = uc.into_inner();\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub unsafe fn into_inner(self) -> T {\n+    pub fn into_inner(self) -> T {\n         self.value\n     }\n }"}, {"sha": "8b47143f63caa7a6718154fb60836d8228bfecfc", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21882aad7299e8e859785845ac12374990f24dae/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21882aad7299e8e859785845ac12374990f24dae/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=21882aad7299e8e859785845ac12374990f24dae", "patch": "@@ -285,7 +285,7 @@ impl AtomicBool {\n     #[inline]\n     #[stable(feature = \"atomic_access\", since = \"1.15.0\")]\n     pub fn into_inner(self) -> bool {\n-        unsafe { self.v.into_inner() != 0 }\n+        self.v.into_inner() != 0\n     }\n \n     /// Loads a value from the bool.\n@@ -695,7 +695,7 @@ impl<T> AtomicPtr<T> {\n     #[inline]\n     #[stable(feature = \"atomic_access\", since = \"1.15.0\")]\n     pub fn into_inner(self) -> *mut T {\n-        unsafe { self.p.into_inner() }\n+        self.p.into_inner()\n     }\n \n     /// Loads a value from the pointer.\n@@ -1051,7 +1051,7 @@ macro_rules! atomic_int {\n             #[inline]\n             #[$stable_access]\n             pub fn into_inner(self) -> $int_type {\n-                unsafe { self.v.into_inner() }\n+                self.v.into_inner()\n             }\n \n             /// Loads a value from the atomic integer."}]}