{"sha": "e0672589d3d37a90e25a8c1025c5447745a03875", "node_id": "C_kwDOAAsO6NoAKGUwNjcyNTg5ZDNkMzdhOTBlMjVhOGMxMDI1YzU0NDc3NDVhMDM4NzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-14T12:23:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-14T12:23:47Z"}, "message": "Auto merge of #2370 - RalfJung:weak-mem-test, r=RalfJung\n\nadd another weak mem consistency test\n\n`@cbeuw` your code seems to do this correctly? :D", "tree": {"sha": "b1936f321fade78952c477880d8582ba51d5b3b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1936f321fade78952c477880d8582ba51d5b3b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0672589d3d37a90e25a8c1025c5447745a03875", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0672589d3d37a90e25a8c1025c5447745a03875", "html_url": "https://github.com/rust-lang/rust/commit/e0672589d3d37a90e25a8c1025c5447745a03875", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0672589d3d37a90e25a8c1025c5447745a03875/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f6e01ef3b3fb5459af3523b0747124a843400a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f6e01ef3b3fb5459af3523b0747124a843400a4", "html_url": "https://github.com/rust-lang/rust/commit/6f6e01ef3b3fb5459af3523b0747124a843400a4"}, {"sha": "b8a0c49e51a65aff7189da95583fb5273c02ce37", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8a0c49e51a65aff7189da95583fb5273c02ce37", "html_url": "https://github.com/rust-lang/rust/commit/b8a0c49e51a65aff7189da95583fb5273c02ce37"}], "stats": {"total": 118, "additions": 102, "deletions": 16}, "files": [{"sha": "8b7ce50d2d42e5350c2bfb7337a63d47119805d1", "filename": "tests/pass/0weak_memory_consistency.rs", "status": "modified", "additions": 48, "deletions": 5, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e0672589d3d37a90e25a8c1025c5447745a03875/tests%2Fpass%2F0weak_memory_consistency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0672589d3d37a90e25a8c1025c5447745a03875/tests%2Fpass%2F0weak_memory_consistency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2F0weak_memory_consistency.rs?ref=e0672589d3d37a90e25a8c1025c5447745a03875", "patch": "@@ -20,8 +20,8 @@\n // \"Mathematizing C++ concurrency\", ACM SIGPLAN Notices, vol. 46, no. 1, pp. 55-66, 2011.\n // Available: https://ss265.host.cs.st-andrews.ac.uk/papers/n3132.pdf.\n \n-use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering::*;\n+use std::sync::atomic::{fence, AtomicBool, AtomicI32};\n use std::thread::spawn;\n \n #[derive(Copy, Clone)]\n@@ -32,13 +32,19 @@ unsafe impl<T> Sync for EvilSend<T> {}\n \n // We can't create static items because we need to run each test\n // multiple times\n-fn static_atomic(val: usize) -> &'static AtomicUsize {\n-    let ret = Box::leak(Box::new(AtomicUsize::new(val)));\n+fn static_atomic(val: i32) -> &'static AtomicI32 {\n+    let ret = Box::leak(Box::new(AtomicI32::new(val)));\n+    ret.store(val, Relaxed); // work around https://github.com/rust-lang/miri/issues/2164\n+    ret\n+}\n+fn static_atomic_bool(val: bool) -> &'static AtomicBool {\n+    let ret = Box::leak(Box::new(AtomicBool::new(val)));\n+    ret.store(val, Relaxed); // work around https://github.com/rust-lang/miri/issues/2164\n     ret\n }\n \n // Spins until it acquires a pre-determined value.\n-fn acquires_value(loc: &AtomicUsize, val: usize) -> usize {\n+fn acquires_value(loc: &AtomicI32, val: i32) -> i32 {\n     while loc.load(Acquire) != val {\n         std::hint::spin_loop();\n     }\n@@ -207,7 +213,7 @@ fn test_sc_store_buffering() {\n }\n \n fn test_single_thread() {\n-    let x = AtomicUsize::new(42);\n+    let x = AtomicI32::new(42);\n \n     assert_eq!(x.load(Relaxed), 42);\n \n@@ -216,6 +222,42 @@ fn test_single_thread() {\n     assert_eq!(x.load(Relaxed), 43);\n }\n \n+fn test_sync_through_rmw_and_fences() {\n+    // Example from https://github.com/llvm/llvm-project/issues/56450#issuecomment-1183695905\n+    #[no_mangle]\n+    pub fn rdmw(storing: &AtomicI32, sync: &AtomicI32, loading: &AtomicI32) -> i32 {\n+        storing.store(1, Relaxed);\n+        fence(Release);\n+        sync.fetch_add(0, Relaxed);\n+        fence(Acquire);\n+        loading.load(Relaxed)\n+    }\n+\n+    let x = static_atomic(0);\n+    let y = static_atomic(0);\n+    let z = static_atomic(0);\n+\n+    // Since each thread is so short, we need to make sure that they truely run at the same time\n+    // Otherwise t1 will finish before t2 even starts\n+    let go = static_atomic_bool(false);\n+\n+    let t1 = spawn(move || {\n+        while !go.load(Relaxed) {}\n+        rdmw(y, x, z)\n+    });\n+\n+    let t2 = spawn(move || {\n+        while !go.load(Relaxed) {}\n+        rdmw(z, x, y)\n+    });\n+\n+    go.store(true, Relaxed);\n+\n+    let a = t1.join().unwrap();\n+    let b = t2.join().unwrap();\n+    assert_ne!((a, b), (0, 0));\n+}\n+\n pub fn main() {\n     for _ in 0..50 {\n         test_single_thread();\n@@ -225,5 +267,6 @@ pub fn main() {\n         test_wrc();\n         test_corr();\n         test_sc_store_buffering();\n+        test_sync_through_rmw_and_fences();\n     }\n }"}, {"sha": "71d57dd11ec788e2ce7f644818628648164c19ca", "filename": "tests/pass/weak_memory/weak.rs", "status": "modified", "additions": 54, "deletions": 11, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/e0672589d3d37a90e25a8c1025c5447745a03875/tests%2Fpass%2Fweak_memory%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0672589d3d37a90e25a8c1025c5447745a03875/tests%2Fpass%2Fweak_memory%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fweak_memory%2Fweak.rs?ref=e0672589d3d37a90e25a8c1025c5447745a03875", "patch": "@@ -8,8 +8,8 @@\n // Spurious failure is possible, if you are really unlucky with\n // the RNG and always read the latest value from the store buffer.\n \n-use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering::*;\n+use std::sync::atomic::{fence, AtomicUsize};\n use std::thread::spawn;\n \n #[derive(Copy, Clone)]\n@@ -70,9 +70,9 @@ fn seq_cst() -> bool {\n     r3 == 1\n }\n \n-fn initialization_write() -> bool {\n+fn initialization_write(add_fence: bool) -> bool {\n     let x = static_atomic(11);\n-    assert_eq!(x.load(Relaxed), 11);\n+    assert_eq!(x.load(Relaxed), 11); // work around https://github.com/rust-lang/miri/issues/2164\n \n     let wait = static_atomic(0);\n \n@@ -85,6 +85,9 @@ fn initialization_write() -> bool {\n \n     let j2 = spawn(move || {\n         reads_value(wait, 1);\n+        if add_fence {\n+            fence(AcqRel);\n+        }\n         x.load(Relaxed)\n     });\n \n@@ -94,15 +97,55 @@ fn initialization_write() -> bool {\n     r2 == 11\n }\n \n-// Asserts that the function returns true at least once in 100 runs\n-macro_rules! assert_once {\n-    ($f:ident) => {\n-        assert!(std::iter::repeat_with(|| $f()).take(100).any(|x| x));\n-    };\n+fn faa_replaced_by_load() -> bool {\n+    // Example from https://github.com/llvm/llvm-project/issues/56450#issuecomment-1183695905\n+    #[no_mangle]\n+    pub fn rdmw(storing: &AtomicUsize, sync: &AtomicUsize, loading: &AtomicUsize) -> usize {\n+        storing.store(1, Relaxed);\n+        fence(Release);\n+        // sync.fetch_add(0, Relaxed);\n+        sync.load(Relaxed);\n+        fence(Acquire);\n+        loading.load(Relaxed)\n+    }\n+\n+    let x = static_atomic(0);\n+    assert_eq!(x.load(Relaxed), 0); // work around https://github.com/rust-lang/miri/issues/2164\n+    let y = static_atomic(0);\n+    assert_eq!(y.load(Relaxed), 0); // work around https://github.com/rust-lang/miri/issues/2164\n+    let z = static_atomic(0);\n+    assert_eq!(z.load(Relaxed), 0); // work around https://github.com/rust-lang/miri/issues/2164\n+\n+    // Since each thread is so short, we need to make sure that they truely run at the same time\n+    // Otherwise t1 will finish before t2 even starts\n+    let go = static_atomic(0);\n+\n+    let t1 = spawn(move || {\n+        while go.load(Relaxed) == 0 {}\n+        rdmw(y, x, z)\n+    });\n+\n+    let t2 = spawn(move || {\n+        while go.load(Relaxed) == 0 {}\n+        rdmw(z, x, y)\n+    });\n+\n+    go.store(1, Relaxed);\n+\n+    let a = t1.join().unwrap();\n+    let b = t2.join().unwrap();\n+    (a, b) == (0, 0)\n+}\n+\n+/// Asserts that the function returns true at least once in 100 runs\n+fn assert_once(f: fn() -> bool) {\n+    assert!(std::iter::repeat_with(|| f()).take(100).any(|x| x));\n }\n \n pub fn main() {\n-    assert_once!(relaxed);\n-    assert_once!(seq_cst);\n-    assert_once!(initialization_write);\n+    assert_once(relaxed);\n+    assert_once(seq_cst);\n+    assert_once(|| initialization_write(false));\n+    assert_once(|| initialization_write(true));\n+    assert_once(faa_replaced_by_load);\n }"}]}