{"sha": "c483808e0ff9836bc1cda0ce95d77c8b7d3be91c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ODM4MDhlMGZmOTgzNmJjMWNkYTBjZTk1ZDc3YzhiN2QzYmU5MWM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-25T02:21:15Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-25T02:21:15Z"}, "message": "Factor out some trans bits.", "tree": {"sha": "6608921a85bd2628893f1b636f66eea74a03d016", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6608921a85bd2628893f1b636f66eea74a03d016"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c483808e0ff9836bc1cda0ce95d77c8b7d3be91c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c483808e0ff9836bc1cda0ce95d77c8b7d3be91c", "html_url": "https://github.com/rust-lang/rust/commit/c483808e0ff9836bc1cda0ce95d77c8b7d3be91c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c483808e0ff9836bc1cda0ce95d77c8b7d3be91c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c60be2f32f70f9181a261ae2c2b4efe353d0f85", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c60be2f32f70f9181a261ae2c2b4efe353d0f85", "html_url": "https://github.com/rust-lang/rust/commit/1c60be2f32f70f9181a261ae2c2b4efe353d0f85"}], "stats": {"total": 86, "additions": 44, "deletions": 42}, "files": [{"sha": "b43ffb82c4b3ee186662bb0676cc5ae15394517c", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 44, "deletions": 42, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/c483808e0ff9836bc1cda0ce95d77c8b7d3be91c/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/c483808e0ff9836bc1cda0ce95d77c8b7d3be91c/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=c483808e0ff9836bc1cda0ce95d77c8b7d3be91c", "patch": "@@ -2041,9 +2041,12 @@ let trans_visitor\n         |];\n       List.iter patch fwd_jmps\n \n-  and trans_check_expr (e:Ast.expr) : unit =\n-    let fwd_jmps = trans_cond false e in\n-      trans_cond_fail (Fmt.fmt_to_str Ast.fmt_expr e) fwd_jmps\n+  and trans_check_expr (id:node_id) (e:Ast.expr) : unit =\n+    match expr_type cx e with\n+        Ast.TY_bool ->\n+          let fwd_jmps = trans_cond false e in\n+            trans_cond_fail (Fmt.fmt_to_str Ast.fmt_expr e) fwd_jmps\n+      | _ -> bugi cx id \"check expr on non-bool\"\n \n   and trans_malloc (dst:Il.cell) (nbytes:Il.operand) : unit =\n     trans_upcall \"upcall_malloc\" dst [| nbytes |]\n@@ -4062,31 +4065,50 @@ let trans_visitor\n               emit (Il.binary op dst_cell (Il.Cell dst_cell) src_oper);\n \n \n+  and trans_call id dst flv args =\n+    let init = maybe_init id \"call\" dst in\n+    let ty = lval_ty cx flv in\n+    let ty_params =\n+      match\n+        htab_search\n+          cx.ctxt_call_lval_params (lval_base_id flv)\n+      with\n+          Some params -> params\n+        | None -> [| |]\n+    in\n+      match ty with\n+          Ast.TY_fn _ ->\n+            let (dst_cell, _) = trans_lval_maybe_init init dst in\n+            let fn_ptr =\n+              trans_prepare_fn_call init cx dst_cell flv\n+                ty_params None args\n+            in\n+              call_code (code_of_operand fn_ptr)\n+        | _ -> bug () \"Calling unexpected lval.\"\n+\n+\n+  and trans_log id a =\n+    match atom_type cx a with\n+        (* NB: If you extend this, be sure to update the\n+         * typechecking code in type.ml as well. *)\n+        Ast.TY_str -> trans_log_str a\n+      | Ast.TY_int | Ast.TY_uint | Ast.TY_bool\n+      | Ast.TY_char | Ast.TY_mach (TY_u8)\n+      | Ast.TY_mach (TY_u16) | Ast.TY_mach (TY_u32)\n+      | Ast.TY_mach (TY_i8) | Ast.TY_mach (TY_i16)\n+      | Ast.TY_mach (TY_i32) ->\n+          trans_log_int a\n+      | _ -> bugi cx id \"unimplemented logging type\"\n+\n \n   and trans_stmt_full (stmt:Ast.stmt) : unit =\n     match stmt.node with\n \n         Ast.STMT_log a ->\n-          begin\n-            match atom_type cx a with\n-                (* NB: If you extend this, be sure to update the\n-                 * typechecking code in type.ml as well. *)\n-                Ast.TY_str -> trans_log_str a\n-              | Ast.TY_int | Ast.TY_uint | Ast.TY_bool\n-              | Ast.TY_char | Ast.TY_mach (TY_u8)\n-              | Ast.TY_mach (TY_u16) | Ast.TY_mach (TY_u32)\n-              | Ast.TY_mach (TY_i8) | Ast.TY_mach (TY_i16)\n-              | Ast.TY_mach (TY_i32) ->\n-                  trans_log_int a\n-              | _ -> bugi cx stmt.id \"unimplemented logging type\"\n-          end\n+          trans_log stmt.id a\n \n       | Ast.STMT_check_expr e ->\n-          begin\n-            match expr_type cx e with\n-                Ast.TY_bool -> trans_check_expr e\n-              | _ -> bugi cx stmt.id \"check expr on non-bool\"\n-          end\n+          trans_check_expr stmt.id e\n \n       | Ast.STMT_yield ->\n           trans_yield ()\n@@ -4113,27 +4135,7 @@ let trans_visitor\n           trans_copy_binop dst binop a_src\n \n       | Ast.STMT_call (dst, flv, args) ->\n-          begin\n-            let init = maybe_init stmt.id \"call\" dst in\n-            let ty = lval_ty cx flv in\n-            let ty_params =\n-              match\n-                htab_search\n-                  cx.ctxt_call_lval_params (lval_base_id flv)\n-              with\n-                  Some params -> params\n-                | None -> [| |]\n-            in\n-              match ty with\n-                  Ast.TY_fn _ ->\n-                    let (dst_cell, _) = trans_lval_maybe_init init dst in\n-                    let fn_ptr =\n-                      trans_prepare_fn_call init cx dst_cell flv\n-                        ty_params None args\n-                    in\n-                      call_code (code_of_operand fn_ptr)\n-                | _ -> bug () \"Calling unexpected lval.\"\n-          end\n+          trans_call stmt.id dst flv args\n \n       | Ast.STMT_bind (dst, flv, args) ->\n           begin"}]}