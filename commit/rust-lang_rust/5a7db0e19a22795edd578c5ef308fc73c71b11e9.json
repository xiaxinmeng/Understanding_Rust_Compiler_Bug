{"sha": "5a7db0e19a22795edd578c5ef308fc73c71b11e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhN2RiMGUxOWEyMjc5NWVkZDU3OGM1ZWYzMDhmYzczYzcxYjExZTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-24T23:05:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-24T23:05:03Z"}, "message": "Rollup merge of #62901 - petrochenkov:serde, r=Centril\n\ncleanup: Remove `extern crate serialize as rustc_serialize`s", "tree": {"sha": "b3532ef0d6a5f35f5e139c123c06127b78e2d149", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3532ef0d6a5f35f5e139c123c06127b78e2d149"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a7db0e19a22795edd578c5ef308fc73c71b11e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdOOQfCRBK7hj4Ov3rIwAAdHIIABdx2HQMbcdhZvHuOZQ0Zqh2\nKPBtXrCt8CpXGrgvaa8LfByz+h4sthAy8pUPaLfATv4j6E3KYrmzjoWQ83e7uK3/\nuzUIegZy4Qn2J05tiez3WIiUu46U/F9/h/WL9Jg5lYTFhXlJokmxmsEZlUEhg7SG\nKMIgK/QFjPff14twlzUYCUcN5mVb45dYRza8MykfAjbZG/4rGvH5R4+yWEoO4EWt\nqLqxEQnpmPSYoMDUef9sBSI3UA/iHB9Z/0NcuLI0j8AzsdFmTOXR8JwuTeZFLod8\nk2rDhMXDqt4l5OzrByaaPhLiPrfTQxO37sEW5eaebxq+niujj6HtO2Zh0E84tcI=\n=wHgI\n-----END PGP SIGNATURE-----\n", "payload": "tree b3532ef0d6a5f35f5e139c123c06127b78e2d149\nparent e5590425e9624df0528e9f1a8972e6ff258deb9e\nparent 614037171bf0140390033cc60f5e99aac079a0e5\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564009503 +0200\ncommitter GitHub <noreply@github.com> 1564009503 +0200\n\nRollup merge of #62901 - petrochenkov:serde, r=Centril\n\ncleanup: Remove `extern crate serialize as rustc_serialize`s\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7db0e19a22795edd578c5ef308fc73c71b11e9", "html_url": "https://github.com/rust-lang/rust/commit/5a7db0e19a22795edd578c5ef308fc73c71b11e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a7db0e19a22795edd578c5ef308fc73c71b11e9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5590425e9624df0528e9f1a8972e6ff258deb9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5590425e9624df0528e9f1a8972e6ff258deb9e", "html_url": "https://github.com/rust-lang/rust/commit/e5590425e9624df0528e9f1a8972e6ff258deb9e"}, {"sha": "614037171bf0140390033cc60f5e99aac079a0e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/614037171bf0140390033cc60f5e99aac079a0e5", "html_url": "https://github.com/rust-lang/rust/commit/614037171bf0140390033cc60f5e99aac079a0e5"}], "stats": {"total": 246, "additions": 99, "deletions": 147}, "files": [{"sha": "0222a3dde7ab977e656d83a50685e891f663bd62", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -27,7 +27,7 @@ rustc_target = { path = \"../librustc_target\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n backtrace = \"0.3.3\""}, {"sha": "f3edb5f8621176fb016d86c625e08b351a9df4be", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -1,7 +1,6 @@\n use crate::ty::{self, TyCtxt};\n use crate::hir::map::definitions::FIRST_FREE_DEF_INDEX;\n use rustc_data_structures::indexed_vec::Idx;\n-use serialize;\n use std::fmt;\n use std::u32;\n \n@@ -93,8 +92,8 @@ impl fmt::Display for CrateNum {\n     }\n }\n \n-impl serialize::UseSpecializedEncodable for CrateNum {}\n-impl serialize::UseSpecializedDecodable for CrateNum {}\n+impl rustc_serialize::UseSpecializedEncodable for CrateNum {}\n+impl rustc_serialize::UseSpecializedDecodable for CrateNum {}\n \n newtype_index! {\n     /// A DefIndex is an index into the hir-map for a crate, identifying a\n@@ -134,8 +133,8 @@ impl DefIndex {\n     }\n }\n \n-impl serialize::UseSpecializedEncodable for DefIndex {}\n-impl serialize::UseSpecializedDecodable for DefIndex {}\n+impl rustc_serialize::UseSpecializedEncodable for DefIndex {}\n+impl rustc_serialize::UseSpecializedDecodable for DefIndex {}\n \n /// A `DefId` identifies a particular *definition*, by combining a crate\n /// index and a def index.\n@@ -186,8 +185,8 @@ impl DefId {\n     }\n }\n \n-impl serialize::UseSpecializedEncodable for DefId {}\n-impl serialize::UseSpecializedDecodable for DefId {}\n+impl rustc_serialize::UseSpecializedEncodable for DefId {}\n+impl rustc_serialize::UseSpecializedDecodable for DefId {}\n \n /// A LocalDefId is equivalent to a DefId with `krate == LOCAL_CRATE`. Since\n /// we encode this information in the type, we can ensure at compile time that\n@@ -220,5 +219,5 @@ impl fmt::Debug for LocalDefId {\n     }\n }\n \n-impl serialize::UseSpecializedEncodable for LocalDefId {}\n-impl serialize::UseSpecializedDecodable for LocalDefId {}\n+impl rustc_serialize::UseSpecializedEncodable for LocalDefId {}\n+impl rustc_serialize::UseSpecializedDecodable for LocalDefId {}"}, {"sha": "3708a905a4b03c72b082eeb34a58a1520ab28172", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -34,7 +34,7 @@ use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_macros::HashStable;\n \n-use serialize::{self, Encoder, Encodable, Decoder, Decodable};\n+use rustc_serialize::{self, Encoder, Encodable, Decoder, Decodable};\n use std::collections::{BTreeSet, BTreeMap};\n use std::fmt;\n use smallvec::SmallVec;\n@@ -92,7 +92,7 @@ impl HirId {\n     }\n }\n \n-impl serialize::UseSpecializedEncodable for HirId {\n+impl rustc_serialize::UseSpecializedEncodable for HirId {\n     fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         let HirId {\n             owner,\n@@ -104,7 +104,7 @@ impl serialize::UseSpecializedEncodable for HirId {\n     }\n }\n \n-impl serialize::UseSpecializedDecodable for HirId {\n+impl rustc_serialize::UseSpecializedDecodable for HirId {\n     fn default_decode<D: Decoder>(d: &mut D) -> Result<HirId, D::Error> {\n         let owner = DefIndex::decode(d)?;\n         let local_id = ItemLocalId::decode(d)?;"}, {"sha": "1976b4c9e54ffde84e92a495482b7f679e8ca6fa", "filename": "src/librustc/hir/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fhir%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fhir%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fptr.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -7,7 +7,7 @@ use std::iter::FromIterator;\n use std::ops::Deref;\n use std::{slice, vec};\n \n-use serialize::{Encodable, Decodable, Encoder, Decoder};\n+use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n \n use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n                                            HashStable};"}, {"sha": "6840611d4be79282e3f352a792ffca8ae2fe19a1", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -27,7 +27,7 @@ use crate::infer::region_constraints::MemberConstraint;\n use crate::mir::interpret::ConstValue;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_macros::HashStable;\n-use serialize::UseSpecializedDecodable;\n+use rustc_serialize::UseSpecializedDecodable;\n use smallvec::SmallVec;\n use std::ops::Index;\n use syntax::source_map::Span;"}, {"sha": "c7d4fa3aec65461f14c0e5b86f238cd14affcb09", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -75,16 +75,8 @@ extern crate getopts;\n extern crate libc;\n #[macro_use] extern crate rustc_macros;\n #[macro_use] extern crate rustc_data_structures;\n-\n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n-\n-// FIXME: This import is used by deriving `RustcDecodable` and `RustcEncodable`. Removing this\n-// results in a bunch of \"failed to resolve\" errors. Hopefully, the compiler moves to serde or\n-// something, and we can get rid of this.\n-#[allow(rust_2018_idioms)]\n-extern crate serialize as rustc_serialize;\n-\n #[macro_use] extern crate smallvec;\n \n // Use the test crate here so we depend on getopts through it. This allow tools to link to both"}, {"sha": "859bc86d3a07d160b970dacfb39335e5b29224ea", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -23,7 +23,7 @@ use crate::lint::{LintArray, Level, Lint, LintId, LintPass, LintBuffer};\n use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::lint::levels::{LintLevelSets, LintLevelsBuilder};\n use crate::middle::privacy::AccessLevels;\n-use crate::rustc_serialize::{Decoder, Decodable, Encoder, Encodable};\n+use rustc_serialize::{Decoder, Decodable, Encoder, Encodable};\n use crate::session::{config, early_error, Session};\n use crate::ty::{self, print::Printer, subst::Kind, TyCtxt, Ty};\n use crate::ty::layout::{LayoutError, LayoutOf, TyLayout};"}, {"sha": "3d33e249536c70dcfb3efcb8f328149242efae24", "filename": "src/librustc/mir/cache.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fcache.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -1,27 +1,25 @@\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::sync::{RwLock, MappedReadGuard, ReadGuard};\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n-                                           StableHasherResult};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableHasherResult};\n+use rustc_serialize::{Encodable, Encoder, Decodable, Decoder};\n use crate::ich::StableHashingContext;\n use crate::mir::{Body, BasicBlock};\n \n-use crate::rustc_serialize as serialize;\n-\n #[derive(Clone, Debug)]\n pub struct Cache {\n     predecessors: RwLock<Option<IndexVec<BasicBlock, Vec<BasicBlock>>>>\n }\n \n \n-impl serialize::Encodable for Cache {\n-    fn encode<S: serialize::Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        serialize::Encodable::encode(&(), s)\n+impl rustc_serialize::Encodable for Cache {\n+    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        Encodable::encode(&(), s)\n     }\n }\n \n-impl serialize::Decodable for Cache {\n-    fn decode<D: serialize::Decoder>(d: &mut D) -> Result<Self, D::Error> {\n-        serialize::Decodable::decode(d).map(|_v: ()| Self::new())\n+impl rustc_serialize::Decodable for Cache {\n+    fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n+        Decodable::decode(d).map(|_v: ()| Self::new())\n     }\n }\n "}, {"sha": "51b2d0272a59713c89ae2b6db91e6d0af73f2f92", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -113,7 +113,7 @@ impl<Tag> Allocation<Tag> {\n     }\n }\n \n-impl<'tcx> ::serialize::UseSpecializedDecodable for &'tcx Allocation {}\n+impl<'tcx> rustc_serialize::UseSpecializedDecodable for &'tcx Allocation {}\n \n /// Byte accessors\n impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {"}, {"sha": "121b6ac0ac88c66f7350fa3578acf16118ddf94a", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -27,7 +27,7 @@ use crate::hir::def_id::DefId;\n use crate::ty::{self, TyCtxt, Instance, subst::UnpackedKind};\n use crate::ty::layout::{self, Size};\n use std::io;\n-use crate::rustc_serialize::{Encoder, Decodable, Encodable};\n+use rustc_serialize::{Encoder, Decodable, Encodable};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{Lock as Mutex, HashMapExt};\n use rustc_data_structures::tiny_list::TinyList;\n@@ -51,8 +51,8 @@ pub struct GlobalId<'tcx> {\n #[derive(Copy, Clone, Eq, Hash, Ord, PartialEq, PartialOrd, Debug)]\n pub struct AllocId(pub u64);\n \n-impl crate::rustc_serialize::UseSpecializedEncodable for AllocId {}\n-impl crate::rustc_serialize::UseSpecializedDecodable for AllocId {}\n+impl rustc_serialize::UseSpecializedEncodable for AllocId {}\n+impl rustc_serialize::UseSpecializedDecodable for AllocId {}\n \n #[derive(RustcDecodable, RustcEncodable)]\n enum AllocDiscriminant {"}, {"sha": "50f16858c0486835a750f9534b0c271c85dd8689", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -9,7 +9,6 @@ use crate::hir::def_id::DefId;\n use crate::hir::{self, InlineAsm as HirInlineAsm};\n use crate::mir::interpret::{ConstValue, PanicMessage, Scalar};\n use crate::mir::visit::MirVisitable;\n-use crate::rustc_serialize as serialize;\n use crate::ty::adjustment::PointerCast;\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::layout::VariantIdx;\n@@ -28,6 +27,7 @@ use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::sync::MappedReadGuard;\n use rustc_macros::HashStable;\n+use rustc_serialize::{Encodable, Decodable};\n use smallvec::SmallVec;\n use std::borrow::Cow;\n use std::fmt::{self, Debug, Display, Formatter, Write};\n@@ -463,8 +463,8 @@ impl<T> ClearCrossCrate<T> {\n     }\n }\n \n-impl<T: serialize::Encodable> serialize::UseSpecializedEncodable for ClearCrossCrate<T> {}\n-impl<T: serialize::Decodable> serialize::UseSpecializedDecodable for ClearCrossCrate<T> {}\n+impl<T: Encodable> rustc_serialize::UseSpecializedEncodable for ClearCrossCrate<T> {}\n+impl<T: Decodable> rustc_serialize::UseSpecializedDecodable for ClearCrossCrate<T> {}\n \n /// Grouped information about the source code origin of a MIR entity.\n /// Intended to be inspected by diagnostics and debuginfo."}, {"sha": "e3c6eca02d55404cf6a7714bff868e9be07ca24c", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -10,7 +10,7 @@ use crate::arena::ArenaAllocatable;\n use crate::hir::def_id::{DefId, CrateNum};\n use crate::infer::canonical::{CanonicalVarInfo, CanonicalVarInfos};\n use rustc_data_structures::fx::FxHashMap;\n-use crate::rustc_serialize::{Decodable, Decoder, Encoder, Encodable, opaque};\n+use rustc_serialize::{Decodable, Decoder, Encoder, Encodable, opaque};\n use std::hash::Hash;\n use std::intrinsics;\n use crate::ty::{self, Ty, TyCtxt};\n@@ -333,7 +333,7 @@ macro_rules! implement_ty_decoder {\n             use $crate::ty::codec::*;\n             use $crate::ty::subst::SubstsRef;\n             use $crate::hir::def_id::{CrateNum};\n-            use crate::rustc_serialize::{Decoder, SpecializedDecoder};\n+            use rustc_serialize::{Decoder, SpecializedDecoder};\n             use std::borrow::Cow;\n \n             impl<$($typaram ),*> Decoder for $DecoderName<$($typaram),*> {"}, {"sha": "44897c8e9037693b64708bac5cd28316ad4cc739", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -32,7 +32,7 @@ use crate::util::nodemap::{NodeSet, DefIdMap, FxHashMap};\n use arena::SyncDroplessArena;\n use crate::session::DataTypeKind;\n \n-use serialize::{self, Encodable, Encoder};\n+use rustc_serialize::{self, Encodable, Encoder};\n use std::cell::RefCell;\n use std::cmp::{self, Ordering};\n use std::fmt;\n@@ -588,8 +588,8 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ty::TyS<'tcx> {\n \n pub type Ty<'tcx> = &'tcx TyS<'tcx>;\n \n-impl<'tcx> serialize::UseSpecializedEncodable for Ty<'tcx> {}\n-impl<'tcx> serialize::UseSpecializedDecodable for Ty<'tcx> {}\n+impl<'tcx> rustc_serialize::UseSpecializedEncodable for Ty<'tcx> {}\n+impl<'tcx> rustc_serialize::UseSpecializedDecodable for Ty<'tcx> {}\n \n pub type CanonicalTy<'tcx> = Canonical<'tcx, Ty<'tcx>>;\n \n@@ -708,7 +708,7 @@ impl<'a, T> IntoIterator for &'a List<T> {\n     }\n }\n \n-impl<'tcx> serialize::UseSpecializedDecodable for &'tcx List<Ty<'tcx>> {}\n+impl<'tcx> rustc_serialize::UseSpecializedDecodable for &'tcx List<Ty<'tcx>> {}\n \n impl<T> List<T> {\n     #[inline(always)]\n@@ -1009,8 +1009,8 @@ pub struct GenericPredicates<'tcx> {\n     pub predicates: Vec<(Predicate<'tcx>, Span)>,\n }\n \n-impl<'tcx> serialize::UseSpecializedEncodable for GenericPredicates<'tcx> {}\n-impl<'tcx> serialize::UseSpecializedDecodable for GenericPredicates<'tcx> {}\n+impl<'tcx> rustc_serialize::UseSpecializedEncodable for GenericPredicates<'tcx> {}\n+impl<'tcx> rustc_serialize::UseSpecializedDecodable for GenericPredicates<'tcx> {}\n \n impl<'tcx> GenericPredicates<'tcx> {\n     pub fn instantiate(\n@@ -1985,13 +1985,13 @@ impl Hash for AdtDef {\n     }\n }\n \n-impl<'tcx> serialize::UseSpecializedEncodable for &'tcx AdtDef {\n+impl<'tcx> rustc_serialize::UseSpecializedEncodable for &'tcx AdtDef {\n     fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         self.did.encode(s)\n     }\n }\n \n-impl<'tcx> serialize::UseSpecializedDecodable for &'tcx AdtDef {}\n+impl<'tcx> rustc_serialize::UseSpecializedDecodable for &'tcx AdtDef {}\n \n \n impl<'a> HashStable<StableHashingContext<'a>> for AdtDef {"}, {"sha": "211a28fe9315ffc1d6bb10dae32c1cd8b42f7a95", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -5,7 +5,7 @@ use crate::hir::map::definitions::DefPathHash;\n use crate::ich::{CachingSourceMapView, Fingerprint};\n use crate::mir::{self, interpret};\n use crate::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n-use crate::rustc_serialize::{Decodable, Decoder, Encodable, Encoder, opaque,\n+use rustc_serialize::{Decodable, Decoder, Encodable, Encoder, opaque,\n                       SpecializedDecoder, SpecializedEncoder,\n                       UseSpecializedDecodable, UseSpecializedEncodable};\n use crate::session::{CrateDisambiguator, Session};"}, {"sha": "49a0fd827fbd89679577efa612a16164f0cb5a68", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -26,7 +26,6 @@ use rustc_target::spec::abi;\n use syntax::ast::{self, Ident};\n use syntax::symbol::{kw, InternedString};\n \n-use serialize;\n use self::InferTy::*;\n use self::TyKind::*;\n \n@@ -640,7 +639,7 @@ impl<'tcx> Binder<ExistentialPredicate<'tcx>> {\n     }\n }\n \n-impl<'tcx> serialize::UseSpecializedDecodable for &'tcx List<ExistentialPredicate<'tcx>> {}\n+impl<'tcx> rustc_serialize::UseSpecializedDecodable for &'tcx List<ExistentialPredicate<'tcx>> {}\n \n impl<'tcx> List<ExistentialPredicate<'tcx>> {\n     /// Returns the \"principal def id\" of this set of existential predicates.\n@@ -1324,7 +1323,7 @@ pub enum RegionKind {\n     ReClosureBound(RegionVid),\n }\n \n-impl<'tcx> serialize::UseSpecializedDecodable for Region<'tcx> {}\n+impl<'tcx> rustc_serialize::UseSpecializedDecodable for Region<'tcx> {}\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug, PartialOrd, Ord)]\n pub struct EarlyBoundRegion {\n@@ -2333,7 +2332,7 @@ impl<'tcx> Const<'tcx> {\n     }\n }\n \n-impl<'tcx> serialize::UseSpecializedDecodable for &'tcx Const<'tcx> {}\n+impl<'tcx> rustc_serialize::UseSpecializedDecodable for &'tcx Const<'tcx> {}\n \n /// An inference variable for a const, for use in const generics.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd,"}, {"sha": "ea829da783e9b488bc4f79f98fd0d1bb40b7afc2", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -6,7 +6,7 @@ use crate::ty::{self, Lift, List, Ty, TyCtxt, InferConst, ParamConst};\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::mir::interpret::ConstValue;\n \n-use serialize::{self, Encodable, Encoder, Decodable, Decoder};\n+use rustc_serialize::{self, Encodable, Encoder, Decodable, Decoder};\n use syntax_pos::{Span, DUMMY_SP};\n use smallvec::SmallVec;\n use rustc_macros::HashStable;\n@@ -399,7 +399,7 @@ impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n     }\n }\n \n-impl<'tcx> serialize::UseSpecializedDecodable for SubstsRef<'tcx> {}\n+impl<'tcx> rustc_serialize::UseSpecializedDecodable for SubstsRef<'tcx> {}\n \n ///////////////////////////////////////////////////////////////////////////\n // Public trait `Subst`"}, {"sha": "90d7320987c957613689ca5681edc3968bc1ab4b", "filename": "src/librustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FCargo.toml?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -20,7 +20,7 @@ jobserver = \"0.1.11\"\n parking_lot = \"0.7\"\n tempfile = \"3.0.5\"\n \n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc = { path = \"../librustc\" }"}, {"sha": "882963f9174ece77a76ddbc2c5b1250ca04d20ce", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -16,7 +16,7 @@ use rustc::session::config::{self, CrateType, OptLevel, DebugInfo,\n                              LinkerPluginLto, Lto};\n use rustc::ty::TyCtxt;\n use rustc_target::spec::{LinkerFlavor, LldFlavor};\n-use serialize::{json, Encoder};\n+use rustc_serialize::{json, Encoder};\n \n /// For all the linkers we support, and information they might\n /// need out of the shared crate context before we get rid of it."}, {"sha": "2a9e81a788e52fad48c3d9a107283cffd17240b6", "filename": "src/librustc_codegen_ssa/back/wasm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_codegen_ssa%2Fback%2Fwasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_codegen_ssa%2Fback%2Fwasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwasm.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -2,7 +2,7 @@ use std::fs;\n use std::path::Path;\n use std::str;\n \n-use serialize::leb128;\n+use rustc_serialize::leb128;\n \n // https://webassembly.github.io/spec/core/binary/modules.html#binary-importsec\n const WASM_CUSTOM_SECTION_ID: u8 = 0;"}, {"sha": "288676ce3ff6780b213fd1ba0ceb920d09133962", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -15,7 +15,7 @@ indexmap = \"1\"\n log = \"0.4\"\n jobserver_crate = { version = \"0.1.13\", package = \"jobserver\" }\n lazy_static = \"1\"\n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n graphviz = { path = \"../libgraphviz\" }\n cfg-if = \"0.1.2\"\n crossbeam-utils = { version = \"0.6.5\", features = [\"nightly\"] }"}, {"sha": "c8012bb9424615bd0974fd9a35b8e7097958d8e8", "filename": "src/librustc_data_structures/fingerprint.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_data_structures%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_data_structures%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ffingerprint.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -1,7 +1,6 @@\n use crate::stable_hasher;\n use std::mem;\n-use serialize;\n-use serialize::opaque::{EncodeResult, Encoder, Decoder};\n+use rustc_serialize::opaque::{EncodeResult, Encoder, Decoder};\n \n #[derive(Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Clone, Copy)]\n pub struct Fingerprint(u64, u64);\n@@ -85,17 +84,17 @@ impl stable_hasher::StableHasherResult for Fingerprint {\n \n impl_stable_hash_via_hash!(Fingerprint);\n \n-impl serialize::UseSpecializedEncodable for Fingerprint { }\n+impl rustc_serialize::UseSpecializedEncodable for Fingerprint { }\n \n-impl serialize::UseSpecializedDecodable for Fingerprint { }\n+impl rustc_serialize::UseSpecializedDecodable for Fingerprint { }\n \n-impl serialize::SpecializedEncoder<Fingerprint> for serialize::opaque::Encoder {\n+impl rustc_serialize::SpecializedEncoder<Fingerprint> for Encoder {\n     fn specialized_encode(&mut self, f: &Fingerprint) -> Result<(), Self::Error> {\n         f.encode_opaque(self)\n     }\n }\n \n-impl<'a> serialize::SpecializedDecoder<Fingerprint> for serialize::opaque::Decoder<'a> {\n+impl<'a> rustc_serialize::SpecializedDecoder<Fingerprint> for Decoder<'a> {\n     fn specialized_decode(&mut self) -> Result<Fingerprint, Self::Error> {\n         Fingerprint::decode_opaque(self)\n     }"}, {"sha": "6f40d059be27f60fa9d54f1b5bf328f50d1af7c3", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -1,3 +1,5 @@\n+use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n+\n use std::fmt::Debug;\n use std::iter::{self, FromIterator};\n use std::slice;\n@@ -8,8 +10,6 @@ use std::hash::Hash;\n use std::vec;\n use std::u32;\n \n-use rustc_serialize as serialize;\n-\n /// Represents some newtyped `usize` wrapper.\n ///\n /// Purpose: avoid mixing indexes for different bitvector domains.\n@@ -398,17 +398,9 @@ macro_rules! newtype_index {\n     );\n \n     (@decodable $type:ident) => (\n-        impl $type {\n-            fn __decodable__impl__hack() {\n-                mod __more_hacks_because__self_doesnt_work_in_functions {\n-                    extern crate serialize;\n-                    use self::serialize::{Decodable, Decoder};\n-                    impl Decodable for super::$type {\n-                        fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n-                            d.read_u32().map(Self::from)\n-                        }\n-                    }\n-                }\n+        impl ::rustc_serialize::Decodable for $type {\n+            fn decode<D: ::rustc_serialize::Decoder>(d: &mut D) -> Result<Self, D::Error> {\n+                d.read_u32().map(Self::from)\n             }\n         }\n     );\n@@ -521,15 +513,15 @@ pub struct IndexVec<I: Idx, T> {\n // not the phantom data.\n unsafe impl<I: Idx, T> Send for IndexVec<I, T> where T: Send {}\n \n-impl<I: Idx, T: serialize::Encodable> serialize::Encodable for IndexVec<I, T> {\n-    fn encode<S: serialize::Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        serialize::Encodable::encode(&self.raw, s)\n+impl<I: Idx, T: Encodable> Encodable for IndexVec<I, T> {\n+    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        Encodable::encode(&self.raw, s)\n     }\n }\n \n-impl<I: Idx, T: serialize::Decodable> serialize::Decodable for IndexVec<I, T> {\n-    fn decode<D: serialize::Decoder>(d: &mut D) -> Result<Self, D::Error> {\n-        serialize::Decodable::decode(d).map(|v| {\n+impl<I: Idx, T: Decodable> Decodable for IndexVec<I, T> {\n+    fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n+        Decodable::decode(d).map(|v| {\n             IndexVec { raw: v, _marker: PhantomData }\n         })\n     }"}, {"sha": "3047119029abc6834e8c1dc9aab42bdec2adf517", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -31,8 +31,6 @@\n \n #[macro_use]\n extern crate log;\n-#[allow(unused_extern_crates)]\n-extern crate serialize as rustc_serialize; // used by deriving\n #[cfg(unix)]\n extern crate libc;\n #[macro_use]"}, {"sha": "3123c182b0f4cb8058511d7ad54870be2a997224", "filename": "src/librustc_data_structures/svh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_data_structures%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_data_structures%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsvh.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -7,7 +7,7 @@\n \n use std::fmt;\n use std::hash::{Hash, Hasher};\n-use serialize::{Encodable, Decodable, Encoder, Decoder};\n+use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n \n use crate::stable_hasher;\n "}, {"sha": "3162af5086d8020d7979dea3b87d79dc29d62bcc", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -34,7 +34,7 @@ rustc_traits = { path = \"../librustc_traits\" }\n rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n rustc_interface = { path = \"../librustc_interface\" }\n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n syntax_ext = { path = \"../libsyntax_ext\" }"}, {"sha": "c139be07aa1d384011fcf523de1c71d9a9896d25", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -46,7 +46,7 @@ use rustc_interface::interface;\n use rustc_interface::util::get_codegen_sysroot;\n use rustc_data_structures::sync::SeqCst;\n \n-use serialize::json::ToJson;\n+use rustc_serialize::json::ToJson;\n \n use std::borrow::Cow;\n use std::cmp::max;"}, {"sha": "5a192e472aa85a50eb281586748cd628d5c359b5", "filename": "src/librustc_errors/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2FCargo.toml?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -11,7 +11,7 @@ doctest = false\n \n [dependencies]\n log = \"0.4\"\n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n unicode-width = \"0.1.4\""}, {"sha": "0a6c02c0ca68f66d5e495fcbd795d61cc15829b3", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -12,9 +12,6 @@\n #![deny(rust_2018_idioms)]\n #![deny(unused_lifetimes)]\n \n-#[allow(unused_extern_crates)]\n-extern crate serialize as rustc_serialize; // used by deriving\n-\n pub use emitter::ColorConfig;\n \n use Level::*;"}, {"sha": "a931ad3b66e21949228c27a2fd89a28a02a6bd9d", "filename": "src/librustc_incremental/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_incremental%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_incremental%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2FCargo.toml?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -15,7 +15,7 @@ log = \"0.4\"\n rand = \"0.6\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_fs_util = { path = \"../librustc_fs_util\" }"}, {"sha": "55aba7caa9d42e46e99540e54f84d110ddb03b0d", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -12,9 +12,6 @@\n #![deny(unused_lifetimes)]\n \n #[macro_use] extern crate rustc;\n-#[allow(unused_extern_crates)]\n-extern crate serialize as rustc_serialize; // used by deriving\n-\n #[macro_use] extern crate log;\n \n mod assert_dep_graph;"}, {"sha": "a90254e7e185f514d80187a73bb9845260cb342d", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -16,7 +16,7 @@ smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }\n syntax_ext = { path = \"../libsyntax_ext\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc = { path = \"../librustc\" }\n rustc_allocator = { path = \"../librustc_allocator\" }\n rustc_ast_borrowck = { path = \"../librustc_ast_borrowck\" }"}, {"sha": "b334971353ca321682518b26dac4560906a43fe0", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -52,7 +52,7 @@ use syntax::feature_gate::AttributeType;\n use syntax_pos::{FileName, edition::Edition, hygiene};\n use syntax_ext;\n \n-use serialize::json;\n+use rustc_serialize::json;\n use tempfile::Builder as TempFileBuilder;\n \n use std::any::Any;"}, {"sha": "9b79dc6350ca67c086ebaf9a2e531a991a5efd21", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -15,7 +15,7 @@ use rustc::ty::steal::Steal;\n use rustc::dep_graph::DepGraph;\n use rustc_passes::hir_stats;\n use rustc_plugin::registry::Registry;\n-use serialize::json;\n+use rustc_serialize::json;\n use std::cell::{Ref, RefMut, RefCell};\n use std::ops::Deref;\n use std::rc::Rc;"}, {"sha": "a9f054d5e8be80a32e02c194ddc4d03d27afe643", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -18,7 +18,7 @@ rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_target = { path = \"../librustc_target\" }\n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n stable_deref_trait = \"1.0.0\"\n syntax = { path = \"../libsyntax\" }\n syntax_ext = { path = \"../libsyntax_ext\" }"}, {"sha": "b0fe06039f4e28da0b78f3026109ca83e0de9906", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -18,8 +18,6 @@\n #![deny(unused_lifetimes)]\n \n extern crate libc;\n-#[allow(unused_extern_crates)]\n-extern crate serialize as rustc_serialize; // used by deriving\n extern crate proc_macro;\n \n #[macro_use]"}, {"sha": "b7dd1d03e44ae5a107285c6572a554505fe05a96", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -13,7 +13,6 @@ use rustc::ty::{self, Ty, ReprOptions};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n use rustc_data_structures::svh::Svh;\n \n-use rustc_serialize as serialize;\n use syntax::{ast, attr};\n use syntax::edition::Edition;\n use syntax::symbol::Symbol;\n@@ -85,8 +84,8 @@ impl<T> Clone for Lazy<T> {\n     }\n }\n \n-impl<T> serialize::UseSpecializedEncodable for Lazy<T> {}\n-impl<T> serialize::UseSpecializedDecodable for Lazy<T> {}\n+impl<T> rustc_serialize::UseSpecializedEncodable for Lazy<T> {}\n+impl<T> rustc_serialize::UseSpecializedDecodable for Lazy<T> {}\n \n /// A sequence of type T referred to by its absolute position\n /// in the metadata and length, and which can be decoded lazily.\n@@ -133,8 +132,8 @@ impl<T> Clone for LazySeq<T> {\n     }\n }\n \n-impl<T> serialize::UseSpecializedEncodable for LazySeq<T> {}\n-impl<T> serialize::UseSpecializedDecodable for LazySeq<T> {}\n+impl<T> rustc_serialize::UseSpecializedEncodable for LazySeq<T> {}\n+impl<T> rustc_serialize::UseSpecializedDecodable for LazySeq<T> {}\n \n /// Encoding / decoding state for `Lazy` and `LazySeq`.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]"}, {"sha": "21008c737289f68a3ed842f73debab69b6e18bd5", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -20,7 +20,7 @@ rustc = { path = \"../librustc\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n byteorder = { version = \"1.1\", features = [\"i128\"] }"}, {"sha": "964f04d79b960723fd3bb0cf0ab5897c17510125", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -30,13 +30,9 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![deny(unused_lifetimes)]\n \n #[macro_use] extern crate log;\n-#[macro_use]\n-extern crate rustc;\n+#[macro_use] extern crate rustc;\n #[macro_use] extern crate rustc_data_structures;\n-#[allow(unused_extern_crates)]\n-extern crate serialize as rustc_serialize; // used by deriving\n-#[macro_use]\n-extern crate syntax;\n+#[macro_use] extern crate syntax;\n \n mod error_codes;\n "}, {"sha": "cab1e0e01371d73c8a3ddc4d8e3deb37d20ae1ee", "filename": "src/librustc_target/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_target%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_target%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2FCargo.toml?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -12,5 +12,5 @@ path = \"lib.rs\"\n bitflags = \"1.0\"\n log = \"0.4\"\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "a14bc66cc3833318585a34c29dd550cc76a3d9a8", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -18,8 +18,5 @@\n \n #[macro_use] extern crate log;\n \n-#[allow(unused_extern_crates)]\n-extern crate serialize as rustc_serialize; // used by deriving\n-\n pub mod abi;\n pub mod spec;"}, {"sha": "34b580acbd5c0b09c146e39677dfd014f4b4164c", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -34,7 +34,7 @@\n //! the target's settings, though `target-feature` and `link-args` will *add*\n //! to the list specified by the target, rather than replace.\n \n-use serialize::json::{Json, ToJson};\n+use rustc_serialize::json::{Json, ToJson};\n use std::collections::BTreeMap;\n use std::default::Default;\n use std::{fmt, io};\n@@ -306,7 +306,7 @@ macro_rules! supported_targets {\n \n         #[cfg(test)]\n         mod test_json_encode_decode {\n-            use serialize::json::ToJson;\n+            use rustc_serialize::json::ToJson;\n             use super::Target;\n             $(use super::$module;)+\n \n@@ -1200,7 +1200,7 @@ impl Target {\n     pub fn search(target_triple: &TargetTriple) -> Result<Target, String> {\n         use std::env;\n         use std::fs;\n-        use serialize::json;\n+        use rustc_serialize::json;\n \n         fn load_file(path: &Path) -> Result<Target, String> {\n             let contents = fs::read(path).map_err(|e| e.to_string())?;"}, {"sha": "3fb6bda679bc1173522da11c328c8acb5465a9ff", "filename": "src/libserialize/tests/json.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibserialize%2Ftests%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibserialize%2Ftests%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Ftests%2Fjson.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -1,4 +1,3 @@\n-#[allow(unused_extern_crates)]\n extern crate serialize as rustc_serialize;\n \n use rustc_serialize::{Encodable, Decodable};"}, {"sha": "fff6fc69e78428301107b5c101cf70b6d0f47ff3", "filename": "src/libserialize/tests/opaque.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibserialize%2Ftests%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibserialize%2Ftests%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Ftests%2Fopaque.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -1,4 +1,3 @@\n-#[allow(unused_extern_crates)]\n extern crate serialize as rustc_serialize;\n \n use rustc_serialize::{Encodable, Decodable};"}, {"sha": "d4a9acc1569b40eb67b4f76b2a98a9382f1ded8b", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -11,7 +11,7 @@ doctest = false\n \n [dependencies]\n bitflags = \"1.0\"\n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n log = \"0.4\"\n scoped-tls = \"1.0\"\n lazy_static = \"1.0.0\""}, {"sha": "dbfad3ef7f4def966752958c786a5d91eabd0177", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -22,7 +22,7 @@ use syntax_pos::{Span, DUMMY_SP};\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n-use serialize::{self, Decoder, Encoder};\n+use rustc_serialize::{self, Decoder, Encoder};\n use std::fmt;\n \n pub use rustc_target::abi::FloatTy;\n@@ -266,13 +266,13 @@ impl fmt::Display for NodeId {\n     }\n }\n \n-impl serialize::UseSpecializedEncodable for NodeId {\n+impl rustc_serialize::UseSpecializedEncodable for NodeId {\n     fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         s.emit_u32(self.as_u32())\n     }\n }\n \n-impl serialize::UseSpecializedDecodable for NodeId {\n+impl rustc_serialize::UseSpecializedDecodable for NodeId {\n     fn default_decode<D: Decoder>(d: &mut D) -> Result<NodeId, D::Error> {\n         d.read_u32().map(NodeId::from_u32)\n     }\n@@ -2414,12 +2414,11 @@ impl ForeignItemKind {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use serialize;\n \n     // Are ASTs encodable?\n     #[test]\n     fn check_asts_encodable() {\n-        fn assert_encodable<T: serialize::Encodable>() {}\n+        fn assert_encodable<T: rustc_serialize::Encodable>() {}\n         assert_encodable::<Crate>();\n     }\n }"}, {"sha": "0507a322a5fb240581a8acc09bf7ae3189500f0c", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -24,9 +24,6 @@\n \n #![recursion_limit=\"256\"]\n \n-#[allow(unused_extern_crates)]\n-extern crate serialize as rustc_serialize; // used by deriving\n-\n pub use errors;\n use rustc_data_structures::sync::Lock;\n use rustc_data_structures::bit_set::GrowableBitSet;"}, {"sha": "b5eb8ca94c07a7fc2a8c4404ed332c1376c73999", "filename": "src/libsyntax/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibsyntax%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibsyntax%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fptr.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -31,7 +31,7 @@ use std::iter::FromIterator;\n use std::ops::{Deref, DerefMut};\n use std::{slice, vec};\n \n-use serialize::{Encodable, Decodable, Encoder, Decoder};\n+use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n \n use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n                                            HashStable};"}, {"sha": "34e68944926df66bf90e15b6e99f2a0f1977d2e0", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -23,7 +23,7 @@ use syntax_pos::{BytePos, ExpnId, Span, DUMMY_SP};\n #[cfg(target_arch = \"x86_64\")]\n use rustc_data_structures::static_assert_size;\n use rustc_data_structures::sync::Lrc;\n-use serialize::{Decoder, Decodable, Encoder, Encodable};\n+use rustc_serialize::{Decoder, Decodable, Encoder, Encodable};\n use smallvec::{SmallVec, smallvec};\n \n use std::borrow::Cow;"}, {"sha": "bc13d2a1611323a6574659387e2445ddbe15f1c7", "filename": "src/libsyntax_pos/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibsyntax_pos%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibsyntax_pos%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2FCargo.toml?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -10,7 +10,7 @@ path = \"lib.rs\"\n doctest = false\n \n [dependencies]\n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n arena = { path = \"../libarena\" }"}, {"sha": "a96e5ef2323eeb28f3620a2647e0fb546957e7b5", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -30,7 +30,7 @@ use crate::{Span, DUMMY_SP};\n use crate::edition::Edition;\n use crate::symbol::{kw, Symbol};\n \n-use serialize::{Encodable, Decodable, Encoder, Decoder};\n+use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use std::fmt;"}, {"sha": "e5f0892b37be8dcdd726d10a9fadcb461e2deb0e", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -19,10 +19,7 @@\n #![feature(specialization)]\n #![feature(step_trait)]\n \n-use serialize::{Encodable, Decodable, Encoder, Decoder};\n-\n-#[allow(unused_extern_crates)]\n-extern crate serialize as rustc_serialize; // used by deriving\n+use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n \n pub mod edition;\n use edition::Edition;\n@@ -594,7 +591,7 @@ impl Default for Span {\n     }\n }\n \n-impl serialize::UseSpecializedEncodable for Span {\n+impl rustc_serialize::UseSpecializedEncodable for Span {\n     fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         let span = self.data();\n         s.emit_struct(\"Span\", 2, |s| {\n@@ -609,7 +606,7 @@ impl serialize::UseSpecializedEncodable for Span {\n     }\n }\n \n-impl serialize::UseSpecializedDecodable for Span {\n+impl rustc_serialize::UseSpecializedDecodable for Span {\n     fn default_decode<D: Decoder>(d: &mut D) -> Result<Span, D::Error> {\n         d.read_struct(\"Span\", 2, |d| {\n             let lo = d.read_struct_field(\"lo\", 0, Decodable::decode)?;"}, {"sha": "308f7d5d4e3fbf5c8b34b0557679e861bbc96f8d", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7db0e19a22795edd578c5ef308fc73c71b11e9/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=5a7db0e19a22795edd578c5ef308fc73c71b11e9", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::newtype_index;\n use rustc_macros::symbols;\n-use serialize::{Decodable, Decoder, Encodable, Encoder};\n+use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n \n use std::cmp::{PartialEq, Ordering, PartialOrd, Ord};\n use std::fmt;"}]}