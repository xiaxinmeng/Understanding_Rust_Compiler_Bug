{"sha": "0210fd3d7303a626f6e821bde8fdfea056cc043b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMTBmZDNkNzMwM2E2MjZmNmU4MjFiZGU4ZmRmZWEwNTZjYzA0M2I=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-08-05T10:29:38Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-08-10T00:50:26Z"}, "message": "Transmute between big endian `s6_addr` and `[u16; 8]`.\n\nThe old code already made the assumption to reinterpret\n`Ipv6Addr` as `[u16; 8]`.\n\nGlibc, Linux, FreeBSD, Win32 all makes this assumption.\nThe main motivation of using union it to better optimize code.\n\nref:\n* https://docs.microsoft.com/en-us/windows/win32/api/in6addr/ns-in6addr-in6_addr\n* https://github.com/freebsd/freebsd/blob/1d6e4247415d264485ee94b59fdbc12e0c566fd0/contrib/ntp/lib/isc/include/isc/ipv6.h#L63\n* https://github.com/zephyrproject-rtos/zephyr/blob/8b531aa996bba254c03129658490af59597acd78/include/net/net_ip.h#L137\n* https://sourceware.org/git/?p=glibc.git;a=blob;f=inet/netinet/in.h;h=f6355c7efe5192b88337b136ef687fe9a5ed648c;hb=HEAD#l216\n\nCo-authored-by: Josh Stone <cuviper@gmail.com>\nCo-authored-by: Peter Atashian <retep998@gmail.com>", "tree": {"sha": "e59a3a06fcc6579a9cf7bdb5178587eb6a8eb21b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e59a3a06fcc6579a9cf7bdb5178587eb6a8eb21b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0210fd3d7303a626f6e821bde8fdfea056cc043b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0210fd3d7303a626f6e821bde8fdfea056cc043b", "html_url": "https://github.com/rust-lang/rust/commit/0210fd3d7303a626f6e821bde8fdfea056cc043b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0210fd3d7303a626f6e821bde8fdfea056cc043b/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5fef3c715f69bbc5ab2f9e18b9e79308f1e33ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5fef3c715f69bbc5ab2f9e18b9e79308f1e33ae", "html_url": "https://github.com/rust-lang/rust/commit/f5fef3c715f69bbc5ab2f9e18b9e79308f1e33ae"}], "stats": {"total": 55, "additions": 28, "deletions": 27}, "files": [{"sha": "f0487e0dff148417154224000b2652f18667808f", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0210fd3d7303a626f6e821bde8fdfea056cc043b/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0210fd3d7303a626f6e821bde8fdfea056cc043b/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=0210fd3d7303a626f6e821bde8fdfea056cc043b", "patch": "@@ -249,6 +249,7 @@\n #![feature(clamp)]\n #![feature(concat_idents)]\n #![feature(const_cstr_unchecked)]\n+#![feature(const_fn_transmute)]\n #![feature(const_raw_ptr_deref)]\n #![feature(container_error_extra)]\n #![feature(core_intrinsics)]"}, {"sha": "5d103e6403750ca9152a4c5e9bcf064bbf71c7ac", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0210fd3d7303a626f6e821bde8fdfea056cc043b/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0210fd3d7303a626f6e821bde8fdfea056cc043b/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=0210fd3d7303a626f6e821bde8fdfea056cc043b", "patch": "@@ -10,6 +10,7 @@ use crate::cmp::Ordering;\n use crate::fmt::{self, Write as FmtWrite};\n use crate::hash;\n use crate::io::Write as IoWrite;\n+use crate::mem::transmute;\n use crate::sys::net::netc as c;\n use crate::sys_common::{AsInner, FromInner};\n \n@@ -1045,27 +1046,23 @@ impl Ipv6Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.32.0\")]\n+    #[allow_internal_unstable(const_fn_transmute)]\n     pub const fn new(a: u16, b: u16, c: u16, d: u16, e: u16, f: u16, g: u16, h: u16) -> Ipv6Addr {\n+        let addr16 = [\n+            a.to_be(),\n+            b.to_be(),\n+            c.to_be(),\n+            d.to_be(),\n+            e.to_be(),\n+            f.to_be(),\n+            g.to_be(),\n+            h.to_be(),\n+        ];\n         Ipv6Addr {\n             inner: c::in6_addr {\n-                s6_addr: [\n-                    (a >> 8) as u8,\n-                    a as u8,\n-                    (b >> 8) as u8,\n-                    b as u8,\n-                    (c >> 8) as u8,\n-                    c as u8,\n-                    (d >> 8) as u8,\n-                    d as u8,\n-                    (e >> 8) as u8,\n-                    e as u8,\n-                    (f >> 8) as u8,\n-                    f as u8,\n-                    (g >> 8) as u8,\n-                    g as u8,\n-                    (h >> 8) as u8,\n-                    h as u8,\n-                ],\n+                // All elements in `addr16` are big endian.\n+                // SAFETY: `[u16; 8]` is always safe to transmute to `[u8; 16]`.\n+                s6_addr: unsafe { transmute::<_, [u8; 16]>(addr16) },\n             },\n         }\n     }\n@@ -1108,16 +1105,19 @@ impl Ipv6Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn segments(&self) -> [u16; 8] {\n-        let arr = &self.inner.s6_addr;\n+        // All elements in `s6_addr` must be big endian.\n+        // SAFETY: `[u8; 16]` is always safe to transmute to `[u16; 8]`.\n+        let [a, b, c, d, e, f, g, h] = unsafe { transmute::<_, [u16; 8]>(self.inner.s6_addr) };\n+        // We want native endian u16\n         [\n-            u16::from_be_bytes([arr[0], arr[1]]),\n-            u16::from_be_bytes([arr[2], arr[3]]),\n-            u16::from_be_bytes([arr[4], arr[5]]),\n-            u16::from_be_bytes([arr[6], arr[7]]),\n-            u16::from_be_bytes([arr[8], arr[9]]),\n-            u16::from_be_bytes([arr[10], arr[11]]),\n-            u16::from_be_bytes([arr[12], arr[13]]),\n-            u16::from_be_bytes([arr[14], arr[15]]),\n+            u16::from_be(a),\n+            u16::from_be(b),\n+            u16::from_be(c),\n+            u16::from_be(d),\n+            u16::from_be(e),\n+            u16::from_be(f),\n+            u16::from_be(g),\n+            u16::from_be(h),\n         ]\n     }\n "}]}