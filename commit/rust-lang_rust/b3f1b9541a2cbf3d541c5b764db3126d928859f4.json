{"sha": "b3f1b9541a2cbf3d541c5b764db3126d928859f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZjFiOTU0MWEyY2JmM2Q1NDFjNWI3NjRkYjMxMjZkOTI4ODU5ZjQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-25T21:58:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-25T21:58:53Z"}, "message": "Rollup merge of #72061 - lcnr:const-inference-test, r=eddyb\n\nadd regression tests for stalled_on const vars\n\ncloses #70180\n\nAfaict this has been fixed sometime after #70213\n\n`trait_ref_type_vars` correctly adds const infers and I did not find any remaining `FIXME`s which correspond to this issue.\nhttps://github.com/rust-lang/rust/blob/7c59a81a5fcbaaca311f744cd7c68d99bfbb05d3/src/librustc_trait_selection/traits/fulfill.rs#L555-L557\n\nAdded both examples from the issue as regression tests and renamed `trait_ref_type_vars` -> `trait_ref_infer_vars`.\n\nr? @eddyb", "tree": {"sha": "becfd68a2d2181245f15cebd018e6d78d2603596", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/becfd68a2d2181245f15cebd018e6d78d2603596"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3f1b9541a2cbf3d541c5b764db3126d928859f4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJezD+dCRBK7hj4Ov3rIwAAdHIIADDnrlHMoB7gTSAlosksvRQA\nGZuglKU4m4Fzbze7JXmhhc835pbXa7s+81cWlQQ5di4PF/sJ+98kwN767FRAPwhQ\nAYk0fh02tf7DhYTWbVmUQ+Ae98xOd2c3Rso2aak6KLkRkSVUP83GayMPc+kmtbJz\n4mTsEqYmq5ZsIMwtUWAfAHO5/qHHENUuIbw5E7AI6AiF1YEqCDYFEj2kWr1qArPV\nRYQ2zewJmxYkYq5GGdQTXhKXnJ9/ZqQwcKFASLUgp0ZhmF5xpvMf8S0CdFxxXLJj\nDqDBcpihTYx5e1wvVo4lGLMEPxztUun+vd+RrsykAHcHhN6IxtTcvbmXu/EkyC0=\n=GGpP\n-----END PGP SIGNATURE-----\n", "payload": "tree becfd68a2d2181245f15cebd018e6d78d2603596\nparent f93bb2a50b37bc8bafe4d960e2afd839eaa854ed\nparent a8c152dfc921e8ec2c00f65e7c731197e522a96d\nauthor Dylan DPC <dylan.dpc@gmail.com> 1590443933 +0200\ncommitter GitHub <noreply@github.com> 1590443933 +0200\n\nRollup merge of #72061 - lcnr:const-inference-test, r=eddyb\n\nadd regression tests for stalled_on const vars\n\ncloses #70180\n\nAfaict this has been fixed sometime after #70213\n\n`trait_ref_type_vars` correctly adds const infers and I did not find any remaining `FIXME`s which correspond to this issue.\nhttps://github.com/rust-lang/rust/blob/7c59a81a5fcbaaca311f744cd7c68d99bfbb05d3/src/librustc_trait_selection/traits/fulfill.rs#L555-L557\n\nAdded both examples from the issue as regression tests and renamed `trait_ref_type_vars` -> `trait_ref_infer_vars`.\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f1b9541a2cbf3d541c5b764db3126d928859f4", "html_url": "https://github.com/rust-lang/rust/commit/b3f1b9541a2cbf3d541c5b764db3126d928859f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3f1b9541a2cbf3d541c5b764db3126d928859f4/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f93bb2a50b37bc8bafe4d960e2afd839eaa854ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/f93bb2a50b37bc8bafe4d960e2afd839eaa854ed", "html_url": "https://github.com/rust-lang/rust/commit/f93bb2a50b37bc8bafe4d960e2afd839eaa854ed"}, {"sha": "a8c152dfc921e8ec2c00f65e7c731197e522a96d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8c152dfc921e8ec2c00f65e7c731197e522a96d", "html_url": "https://github.com/rust-lang/rust/commit/a8c152dfc921e8ec2c00f65e7c731197e522a96d"}], "stats": {"total": 78, "additions": 74, "deletions": 4}, "files": [{"sha": "e2ee22d8a55f8f0555e045cf1eb92f008b752401", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b3f1b9541a2cbf3d541c5b764db3126d928859f4/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f1b9541a2cbf3d541c5b764db3126d928859f4/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=b3f1b9541a2cbf3d541c5b764db3126d928859f4", "patch": "@@ -357,7 +357,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                         // trait selection is because we don't have enough\n                         // information about the types in the trait.\n                         pending_obligation.stalled_on =\n-                            trait_ref_type_vars(self.selcx, data.to_poly_trait_ref());\n+                            trait_ref_infer_vars(self.selcx, data.to_poly_trait_ref());\n \n                         debug!(\n                             \"process_predicate: pending obligation {:?} now stalled on {:?}\",\n@@ -435,7 +435,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                     Ok(None) => {\n                         let tcx = self.selcx.tcx();\n                         pending_obligation.stalled_on =\n-                            trait_ref_type_vars(self.selcx, data.to_poly_trait_ref(tcx));\n+                            trait_ref_infer_vars(self.selcx, data.to_poly_trait_ref(tcx));\n                         ProcessResult::Unchanged\n                     }\n                     Ok(Some(os)) => ProcessResult::Changed(mk_pending(infcx, os)),\n@@ -603,8 +603,8 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n     }\n }\n \n-/// Returns the set of type inference variables contained in a trait ref.\n-fn trait_ref_type_vars<'a, 'tcx>(\n+/// Returns the set of inference variables contained in a trait ref.\n+fn trait_ref_infer_vars<'a, 'tcx>(\n     selcx: &mut SelectionContext<'a, 'tcx>,\n     trait_ref: ty::PolyTraitRef<'tcx>,\n ) -> Vec<TyOrConstInferVar<'tcx>> {"}, {"sha": "ff2a5250263d5585a73120f8834b2062b7d16e2b", "filename": "src/test/ui/const-generics/issue-70180-1-stalled_on.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b3f1b9541a2cbf3d541c5b764db3126d928859f4/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-1-stalled_on.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f1b9541a2cbf3d541c5b764db3126d928859f4/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-1-stalled_on.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-1-stalled_on.rs?ref=b3f1b9541a2cbf3d541c5b764db3126d928859f4", "patch": "@@ -0,0 +1,35 @@\n+// build-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+pub fn works() {\n+    let array/*: [_; _]*/ = default_array();\n+    let _: [_; 4] = array;\n+    Foo::foo(&array);\n+}\n+\n+pub fn didnt_work() {\n+    let array/*: [_; _]*/ = default_array();\n+    Foo::foo(&array);\n+    let _: [_; 4] = array;\n+}\n+\n+trait Foo {\n+    fn foo(&self) {}\n+}\n+\n+impl Foo for [i32; 4] {}\n+impl Foo for [i64; 8] {}\n+\n+// Only needed because `[_; _]` is not valid type syntax.\n+fn default_array<T, const N: usize>() -> [T; N]\n+where\n+    [T; N]: Default,\n+{\n+    Default::default()\n+}\n+\n+fn main() {\n+    works();\n+    didnt_work();\n+}"}, {"sha": "83338668f4ffde204681938230d23def9e833184", "filename": "src/test/ui/const-generics/issue-70180-2-stalled_on.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b3f1b9541a2cbf3d541c5b764db3126d928859f4/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-2-stalled_on.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f1b9541a2cbf3d541c5b764db3126d928859f4/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-2-stalled_on.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-2-stalled_on.rs?ref=b3f1b9541a2cbf3d541c5b764db3126d928859f4", "patch": "@@ -0,0 +1,35 @@\n+// build-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+fn works() {\n+    let array/*: [u8; _]*/ = default_byte_array();\n+    let _: [_; 4] = array;\n+    Foo::foo(&array);\n+}\n+\n+fn didnt_work() {\n+    let array/*: [u8; _]*/ = default_byte_array();\n+    Foo::foo(&array);\n+    let _: [_; 4] = array;\n+}\n+\n+trait Foo<T> {\n+    fn foo(&self) {}\n+}\n+\n+impl Foo<i32> for [u8; 4] {}\n+impl Foo<i64> for [u8; 8] {}\n+\n+// Only needed because `[u8; _]` is not valid type syntax.\n+fn default_byte_array<const N: usize>() -> [u8; N]\n+where\n+    [u8; N]: Default,\n+{\n+    Default::default()\n+}\n+\n+fn main() {\n+    works();\n+    didnt_work();\n+}"}]}