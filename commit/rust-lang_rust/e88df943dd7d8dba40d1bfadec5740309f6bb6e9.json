{"sha": "e88df943dd7d8dba40d1bfadec5740309f6bb6e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OGRmOTQzZGQ3ZDhkYmE0MGQxYmZhZGVjNTc0MDMwOWY2YmI2ZTk=", "commit": {"author": {"name": "Masood Malekghassemi", "email": "atash@google.com", "date": "2016-07-25T23:37:30Z"}, "committer": {"name": "Masood Malekghassemi", "email": "atash@google.com", "date": "2016-07-26T00:38:05Z"}, "message": "Use &mut for CombineFields in inference relations", "tree": {"sha": "986b64b8bcd135554b1f9916f94730ecb5ed464f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/986b64b8bcd135554b1f9916f94730ecb5ed464f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e88df943dd7d8dba40d1bfadec5740309f6bb6e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e88df943dd7d8dba40d1bfadec5740309f6bb6e9", "html_url": "https://github.com/rust-lang/rust/commit/e88df943dd7d8dba40d1bfadec5740309f6bb6e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e88df943dd7d8dba40d1bfadec5740309f6bb6e9/comments", "author": {"login": "soltanmm-google", "id": 21180148, "node_id": "MDQ6VXNlcjIxMTgwMTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/21180148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soltanmm-google", "html_url": "https://github.com/soltanmm-google", "followers_url": "https://api.github.com/users/soltanmm-google/followers", "following_url": "https://api.github.com/users/soltanmm-google/following{/other_user}", "gists_url": "https://api.github.com/users/soltanmm-google/gists{/gist_id}", "starred_url": "https://api.github.com/users/soltanmm-google/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soltanmm-google/subscriptions", "organizations_url": "https://api.github.com/users/soltanmm-google/orgs", "repos_url": "https://api.github.com/users/soltanmm-google/repos", "events_url": "https://api.github.com/users/soltanmm-google/events{/privacy}", "received_events_url": "https://api.github.com/users/soltanmm-google/received_events", "type": "User", "site_admin": false}, "committer": {"login": "soltanmm-google", "id": 21180148, "node_id": "MDQ6VXNlcjIxMTgwMTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/21180148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soltanmm-google", "html_url": "https://github.com/soltanmm-google", "followers_url": "https://api.github.com/users/soltanmm-google/followers", "following_url": "https://api.github.com/users/soltanmm-google/following{/other_user}", "gists_url": "https://api.github.com/users/soltanmm-google/gists{/gist_id}", "starred_url": "https://api.github.com/users/soltanmm-google/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soltanmm-google/subscriptions", "organizations_url": "https://api.github.com/users/soltanmm-google/orgs", "repos_url": "https://api.github.com/users/soltanmm-google/repos", "events_url": "https://api.github.com/users/soltanmm-google/events{/privacy}", "received_events_url": "https://api.github.com/users/soltanmm-google/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622", "url": "https://api.github.com/repos/rust-lang/rust/commits/dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622", "html_url": "https://github.com/rust-lang/rust/commit/dddaf34cfc3d8c143d4a7cd59349c7da1a2e4622"}], "stats": {"total": 136, "additions": 58, "deletions": 78}, "files": [{"sha": "e54522b84336b65b51fa4c580d349d9c3d45365e", "filename": "src/librustc/infer/bivariate.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e88df943dd7d8dba40d1bfadec5740309f6bb6e9/src%2Flibrustc%2Finfer%2Fbivariate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88df943dd7d8dba40d1bfadec5740309f6bb6e9/src%2Flibrustc%2Finfer%2Fbivariate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fbivariate.rs?ref=e88df943dd7d8dba40d1bfadec5740309f6bb6e9", "patch": "@@ -32,18 +32,18 @@ use ty::{self, Ty, TyCtxt};\n use ty::TyVar;\n use ty::relate::{Relate, RelateResult, TypeRelation};\n \n-pub struct Bivariate<'infcx, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n-    fields: CombineFields<'infcx, 'gcx, 'tcx>,\n+pub struct Bivariate<'combine, 'infcx: 'combine, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n+    fields: &'combine mut CombineFields<'infcx, 'gcx, 'tcx>,\n     a_is_expected: bool,\n }\n \n-impl<'infcx, 'gcx, 'tcx> Bivariate<'infcx, 'gcx, 'tcx> {\n-    pub fn new(fields: CombineFields<'infcx, 'gcx, 'tcx>, a_is_expected: bool) -> Bivariate<'infcx, 'gcx, 'tcx> {\n+impl<'combine, 'infcx, 'gcx, 'tcx> Bivariate<'combine, 'infcx, 'gcx, 'tcx> {\n+    pub fn new(fields: &'combine mut CombineFields<'infcx, 'gcx, 'tcx>, a_is_expected: bool) -> Bivariate<'combine, 'infcx, 'gcx, 'tcx> {\n         Bivariate { fields: fields, a_is_expected: a_is_expected }\n     }\n }\n \n-impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Bivariate<'infcx, 'gcx, 'tcx> {\n+impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Bivariate<'combine, 'infcx, 'gcx, 'tcx> {\n     fn tag(&self) -> &'static str { \"Bivariate\" }\n \n     fn tcx(&self) -> TyCtxt<'infcx, 'gcx, 'tcx> { self.fields.tcx() }"}, {"sha": "fc5b52ee30a505ee889c4ea5eff8a889b3251877", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e88df943dd7d8dba40d1bfadec5740309f6bb6e9/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88df943dd7d8dba40d1bfadec5740309f6bb6e9/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=e88df943dd7d8dba40d1bfadec5740309f6bb6e9", "patch": "@@ -154,27 +154,27 @@ impl<'infcx, 'gcx, 'tcx> CombineFields<'infcx, 'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    pub fn equate(&self, a_is_expected: bool) -> Equate<'infcx, 'gcx, 'tcx> {\n-        Equate::new(self.clone(), a_is_expected)\n+    pub fn equate<'a>(&'a mut self, a_is_expected: bool) -> Equate<'a, 'infcx, 'gcx, 'tcx> {\n+        Equate::new(self, a_is_expected)\n     }\n \n-    pub fn bivariate(&self, a_is_expected: bool) -> Bivariate<'infcx, 'gcx, 'tcx> {\n-        Bivariate::new(self.clone(), a_is_expected)\n+    pub fn bivariate<'a>(&'a mut self, a_is_expected: bool) -> Bivariate<'a, 'infcx, 'gcx, 'tcx> {\n+        Bivariate::new(self, a_is_expected)\n     }\n \n-    pub fn sub(&self, a_is_expected: bool) -> Sub<'infcx, 'gcx, 'tcx> {\n-        Sub::new(self.clone(), a_is_expected)\n+    pub fn sub<'a>(&'a mut self, a_is_expected: bool) -> Sub<'a, 'infcx, 'gcx, 'tcx> {\n+        Sub::new(self, a_is_expected)\n     }\n \n-    pub fn lub(&self, a_is_expected: bool) -> Lub<'infcx, 'gcx, 'tcx> {\n-        Lub::new(self.clone(), a_is_expected)\n+    pub fn lub<'a>(&'a mut self, a_is_expected: bool) -> Lub<'a, 'infcx, 'gcx, 'tcx> {\n+        Lub::new(self, a_is_expected)\n     }\n \n-    pub fn glb(&self, a_is_expected: bool) -> Glb<'infcx, 'gcx, 'tcx> {\n-        Glb::new(self.clone(), a_is_expected)\n+    pub fn glb<'a>(&'a mut self, a_is_expected: bool) -> Glb<'a, 'infcx, 'gcx, 'tcx> {\n+        Glb::new(self, a_is_expected)\n     }\n \n-    pub fn instantiate(&self,\n+    pub fn instantiate(&mut self,\n                        a_ty: Ty<'tcx>,\n                        dir: RelationDir,\n                        b_vid: ty::TyVid,"}, {"sha": "09800412e0bf865f719e0daf5c75e83fdf946b0f", "filename": "src/librustc/infer/equate.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e88df943dd7d8dba40d1bfadec5740309f6bb6e9/src%2Flibrustc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88df943dd7d8dba40d1bfadec5740309f6bb6e9/src%2Flibrustc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fequate.rs?ref=e88df943dd7d8dba40d1bfadec5740309f6bb6e9", "patch": "@@ -15,25 +15,20 @@ use super::type_variable::{EqTo};\n use ty::{self, Ty, TyCtxt};\n use ty::TyVar;\n use ty::relate::{Relate, RelateResult, TypeRelation};\n-use traits::PredicateObligations;\n \n /// Ensures `a` is made equal to `b`. Returns `a` on success.\n-pub struct Equate<'infcx, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n-    fields: CombineFields<'infcx, 'gcx, 'tcx>,\n+pub struct Equate<'combine, 'infcx: 'combine, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n+    fields: &'combine mut CombineFields<'infcx, 'gcx, 'tcx>,\n     a_is_expected: bool,\n }\n \n-impl<'infcx, 'gcx, 'tcx> Equate<'infcx, 'gcx, 'tcx> {\n-    pub fn new(fields: CombineFields<'infcx, 'gcx, 'tcx>, a_is_expected: bool) -> Equate<'infcx, 'gcx, 'tcx> {\n+impl<'combine, 'infcx, 'gcx, 'tcx> Equate<'combine, 'infcx, 'gcx, 'tcx> {\n+    pub fn new(fields: &'combine mut CombineFields<'infcx, 'gcx, 'tcx>, a_is_expected: bool) -> Equate<'combine, 'infcx, 'gcx, 'tcx> {\n         Equate { fields: fields, a_is_expected: a_is_expected }\n     }\n-\n-    pub fn obligations(self) -> PredicateObligations<'tcx> {\n-        self.fields.obligations\n-    }\n }\n \n-impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Equate<'infcx, 'gcx, 'tcx> {\n+impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Equate<'combine, 'infcx, 'gcx, 'tcx> {\n     fn tag(&self) -> &'static str { \"Equate\" }\n \n     fn tcx(&self) -> TyCtxt<'infcx, 'gcx, 'tcx> { self.fields.tcx() }"}, {"sha": "46d5991b7adbcf54db5f86e46bb3c2b7ad26422a", "filename": "src/librustc/infer/glb.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e88df943dd7d8dba40d1bfadec5740309f6bb6e9/src%2Flibrustc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88df943dd7d8dba40d1bfadec5740309f6bb6e9/src%2Flibrustc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fglb.rs?ref=e88df943dd7d8dba40d1bfadec5740309f6bb6e9", "patch": "@@ -15,25 +15,20 @@ use super::Subtype;\n \n use ty::{self, Ty, TyCtxt};\n use ty::relate::{Relate, RelateResult, TypeRelation};\n-use traits::PredicateObligations;\n \n /// \"Greatest lower bound\" (common subtype)\n-pub struct Glb<'infcx, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n-    fields: CombineFields<'infcx, 'gcx, 'tcx>,\n+pub struct Glb<'combine, 'infcx: 'combine, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n+    fields: &'combine mut CombineFields<'infcx, 'gcx, 'tcx>,\n     a_is_expected: bool,\n }\n \n-impl<'infcx, 'gcx, 'tcx> Glb<'infcx, 'gcx, 'tcx> {\n-    pub fn new(fields: CombineFields<'infcx, 'gcx, 'tcx>, a_is_expected: bool) -> Glb<'infcx, 'gcx, 'tcx> {\n+impl<'combine, 'infcx, 'gcx, 'tcx> Glb<'combine, 'infcx, 'gcx, 'tcx> {\n+    pub fn new(fields: &'combine mut CombineFields<'infcx, 'gcx, 'tcx>, a_is_expected: bool) -> Glb<'combine, 'infcx, 'gcx, 'tcx> {\n         Glb { fields: fields, a_is_expected: a_is_expected }\n     }\n-\n-    pub fn obligations(self) -> PredicateObligations<'tcx> {\n-        self.fields.obligations\n-    }\n }\n \n-impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Glb<'infcx, 'gcx, 'tcx> {\n+impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Glb<'combine, 'infcx, 'gcx, 'tcx> {\n     fn tag(&self) -> &'static str { \"Glb\" }\n \n     fn tcx(&self) -> TyCtxt<'infcx, 'gcx, 'tcx> { self.fields.tcx() }\n@@ -76,12 +71,12 @@ impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Glb<'infcx, 'gcx,\n     }\n }\n \n-impl<'infcx, 'gcx, 'tcx> LatticeDir<'infcx, 'gcx, 'tcx> for Glb<'infcx, 'gcx, 'tcx> {\n+impl<'combine, 'infcx, 'gcx, 'tcx> LatticeDir<'infcx, 'gcx, 'tcx> for Glb<'combine, 'infcx, 'gcx, 'tcx> {\n     fn infcx(&self) -> &'infcx InferCtxt<'infcx, 'gcx, 'tcx> {\n         self.fields.infcx\n     }\n \n-    fn relate_bound(&self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()> {\n+    fn relate_bound(&mut self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()> {\n         let mut sub = self.fields.sub(self.a_is_expected);\n         sub.relate(&v, &a)?;\n         sub.relate(&v, &b)?;"}, {"sha": "743d6135fbb5b555a9c61b151a023626a2325dd1", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e88df943dd7d8dba40d1bfadec5740309f6bb6e9/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88df943dd7d8dba40d1bfadec5740309f6bb6e9/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=e88df943dd7d8dba40d1bfadec5740309f6bb6e9", "patch": "@@ -40,7 +40,7 @@ pub struct HrMatchResult<U> {\n }\n \n impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n-    pub fn higher_ranked_sub<T>(&self, a: &Binder<T>, b: &Binder<T>, a_is_expected: bool)\n+    pub fn higher_ranked_sub<T>(&mut self, a: &Binder<T>, b: &Binder<T>, a_is_expected: bool)\n                                 -> RelateResult<'tcx, Binder<T>>\n         where T: Relate<'tcx>\n     {\n@@ -106,7 +106,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n     /// NB. It should not happen that there are LBR appearing in `U`\n     /// that do not appear in `T`. If that happens, those regions are\n     /// unconstrained, and this routine replaces them with `'static`.\n-    pub fn higher_ranked_match<T, U>(&self,\n+    pub fn higher_ranked_match<T, U>(&mut self,\n                                      span: Span,\n                                      a_pair: &Binder<(T, U)>,\n                                      b_match: &T,\n@@ -222,7 +222,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n         });\n     }\n \n-    pub fn higher_ranked_lub<T>(&self, a: &Binder<T>, b: &Binder<T>, a_is_expected: bool)\n+    pub fn higher_ranked_lub<T>(&mut self, a: &Binder<T>, b: &Binder<T>, a_is_expected: bool)\n                                 -> RelateResult<'tcx, Binder<T>>\n         where T: Relate<'tcx>\n     {\n@@ -312,7 +312,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn higher_ranked_glb<T>(&self, a: &Binder<T>, b: &Binder<T>, a_is_expected: bool)\n+    pub fn higher_ranked_glb<T>(&mut self, a: &Binder<T>, b: &Binder<T>, a_is_expected: bool)\n                                 -> RelateResult<'tcx, Binder<T>>\n         where T: Relate<'tcx>\n     {"}, {"sha": "eda78428e61ad41c4690fccc8adf8668e8ad6ed2", "filename": "src/librustc/infer/lattice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e88df943dd7d8dba40d1bfadec5740309f6bb6e9/src%2Flibrustc%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88df943dd7d8dba40d1bfadec5740309f6bb6e9/src%2Flibrustc%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flattice.rs?ref=e88df943dd7d8dba40d1bfadec5740309f6bb6e9", "patch": "@@ -40,7 +40,7 @@ pub trait LatticeDir<'f, 'gcx: 'f+'tcx, 'tcx: 'f> : TypeRelation<'f, 'gcx, 'tcx>\n \n     // Relates the type `v` to `a` and `b` such that `v` represents\n     // the LUB/GLB of `a` and `b` as appropriate.\n-    fn relate_bound(&self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()>;\n+    fn relate_bound(&mut self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()>;\n }\n \n pub fn super_lattice_tys<'a, 'gcx, 'tcx, L>(this: &mut L,"}, {"sha": "2639e06f2e5cdc914d2dbc28cd9995810d40d8b3", "filename": "src/librustc/infer/lub.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e88df943dd7d8dba40d1bfadec5740309f6bb6e9/src%2Flibrustc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88df943dd7d8dba40d1bfadec5740309f6bb6e9/src%2Flibrustc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flub.rs?ref=e88df943dd7d8dba40d1bfadec5740309f6bb6e9", "patch": "@@ -15,25 +15,20 @@ use super::Subtype;\n \n use ty::{self, Ty, TyCtxt};\n use ty::relate::{Relate, RelateResult, TypeRelation};\n-use traits::PredicateObligations;\n \n /// \"Least upper bound\" (common supertype)\n-pub struct Lub<'infcx, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n-    fields: CombineFields<'infcx, 'gcx, 'tcx>,\n+pub struct Lub<'combine, 'infcx: 'combine, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n+    fields: &'combine mut CombineFields<'infcx, 'gcx, 'tcx>,\n     a_is_expected: bool,\n }\n \n-impl<'infcx, 'gcx, 'tcx> Lub<'infcx, 'gcx, 'tcx> {\n-    pub fn new(fields: CombineFields<'infcx, 'gcx, 'tcx>, a_is_expected: bool) -> Lub<'infcx, 'gcx, 'tcx> {\n+impl<'combine, 'infcx, 'gcx, 'tcx> Lub<'combine, 'infcx, 'gcx, 'tcx> {\n+    pub fn new(fields: &'combine mut CombineFields<'infcx, 'gcx, 'tcx>, a_is_expected: bool) -> Lub<'combine, 'infcx, 'gcx, 'tcx> {\n         Lub { fields: fields, a_is_expected: a_is_expected }\n     }\n-\n-    pub fn obligations(self) -> PredicateObligations<'tcx> {\n-        self.fields.obligations\n-    }\n }\n \n-impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Lub<'infcx, 'gcx, 'tcx> {\n+impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Lub<'combine, 'infcx, 'gcx, 'tcx> {\n     fn tag(&self) -> &'static str { \"Lub\" }\n \n     fn tcx(&self) -> TyCtxt<'infcx, 'gcx, 'tcx> { self.fields.tcx() }\n@@ -76,12 +71,12 @@ impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Lub<'infcx, 'gcx,\n     }\n }\n \n-impl<'infcx, 'gcx, 'tcx> LatticeDir<'infcx, 'gcx, 'tcx> for Lub<'infcx, 'gcx, 'tcx> {\n+impl<'combine, 'infcx, 'gcx, 'tcx> LatticeDir<'infcx, 'gcx, 'tcx> for Lub<'combine, 'infcx, 'gcx, 'tcx> {\n     fn infcx(&self) -> &'infcx InferCtxt<'infcx, 'gcx, 'tcx> {\n         self.fields.infcx\n     }\n \n-    fn relate_bound(&self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()> {\n+    fn relate_bound(&mut self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()> {\n         let mut sub = self.fields.sub(self.a_is_expected);\n         sub.relate(&a, &v)?;\n         sub.relate(&b, &v)?;"}, {"sha": "58d2b963bbf15d3100655bc123ab4499724e62ce", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e88df943dd7d8dba40d1bfadec5740309f6bb6e9/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88df943dd7d8dba40d1bfadec5740309f6bb6e9/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=e88df943dd7d8dba40d1bfadec5740309f6bb6e9", "patch": "@@ -813,36 +813,36 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         -> InferResult<'tcx, T>\n         where T: Relate<'tcx>\n     {\n-        let mut equate = self.combine_fields(trace).equate(a_is_expected);\n-        let result = equate.relate(a, b);\n-        result.map(|t| InferOk { value: t, obligations: equate.obligations() })\n+        let mut fields = self.combine_fields(trace);\n+        let result = fields.equate(a_is_expected).relate(a, b);\n+        result.map(move |t| InferOk { value: t, obligations: fields.obligations })\n     }\n \n     pub fn sub<T>(&'a self, a_is_expected: bool, trace: TypeTrace<'tcx>, a: &T, b: &T)\n         -> InferResult<'tcx, T>\n         where T: Relate<'tcx>\n     {\n-        let mut sub = self.combine_fields(trace).sub(a_is_expected);\n-        let result = sub.relate(a, b);\n-        result.map(|t| InferOk { value: t, obligations: sub.obligations() })\n+        let mut fields = self.combine_fields(trace);\n+        let result = fields.sub(a_is_expected).relate(a, b);\n+        result.map(move |t| InferOk { value: t, obligations: fields.obligations })\n     }\n \n     pub fn lub<T>(&'a self, a_is_expected: bool, trace: TypeTrace<'tcx>, a: &T, b: &T)\n         -> InferResult<'tcx, T>\n         where T: Relate<'tcx>\n     {\n-        let mut lub = self.combine_fields(trace).lub(a_is_expected);\n-        let result = lub.relate(a, b);\n-        result.map(|t| InferOk { value: t, obligations: lub.obligations() })\n+        let mut fields = self.combine_fields(trace);\n+        let result = fields.lub(a_is_expected).relate(a, b);\n+        result.map(move |t| InferOk { value: t, obligations: fields.obligations })\n     }\n \n     pub fn glb<T>(&'a self, a_is_expected: bool, trace: TypeTrace<'tcx>, a: &T, b: &T)\n         -> InferResult<'tcx, T>\n         where T: Relate<'tcx>\n     {\n-        let mut glb = self.combine_fields(trace).glb(a_is_expected);\n-        let result = glb.relate(a, b);\n-        result.map(|t| InferOk { value: t, obligations: glb.obligations() })\n+        let mut fields = self.combine_fields(trace);\n+        let result = fields.glb(a_is_expected).relate(a, b);\n+        result.map(move |t| InferOk { value: t, obligations: fields.obligations })\n     }\n \n     fn start_snapshot(&self) -> CombinedSnapshot {\n@@ -1645,7 +1645,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         };\n \n         let match_pair = match_a.map_bound(|p| (p.projection_ty.trait_ref, p.ty));\n-        let combine = self.combine_fields(trace);\n+        let mut combine = self.combine_fields(trace);\n         let result = combine.higher_ranked_match(span, &match_pair, &match_b, true)?;\n         Ok(InferOk { value: result, obligations: combine.obligations })\n     }"}, {"sha": "a3e50a23d3f4602a9e581f3d496f448ad052eab2", "filename": "src/librustc/infer/sub.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e88df943dd7d8dba40d1bfadec5740309f6bb6e9/src%2Flibrustc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88df943dd7d8dba40d1bfadec5740309f6bb6e9/src%2Flibrustc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fsub.rs?ref=e88df943dd7d8dba40d1bfadec5740309f6bb6e9", "patch": "@@ -15,24 +15,19 @@ use super::type_variable::{SubtypeOf, SupertypeOf};\n use ty::{self, Ty, TyCtxt};\n use ty::TyVar;\n use ty::relate::{Cause, Relate, RelateResult, TypeRelation};\n-use traits::PredicateObligations;\n use std::mem;\n \n /// Ensures `a` is made a subtype of `b`. Returns `a` on success.\n-pub struct Sub<'infcx, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n-    fields: CombineFields<'infcx, 'gcx, 'tcx>,\n+pub struct Sub<'combine, 'infcx: 'combine, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n+    fields: &'combine mut CombineFields<'infcx, 'gcx, 'tcx>,\n     a_is_expected: bool,\n }\n \n-impl<'infcx, 'gcx, 'tcx> Sub<'infcx, 'gcx, 'tcx> {\n-    pub fn new(f: CombineFields<'infcx, 'gcx, 'tcx>, a_is_expected: bool) -> Sub<'infcx, 'gcx, 'tcx> {\n+impl<'combine, 'infcx, 'gcx, 'tcx> Sub<'combine, 'infcx, 'gcx, 'tcx> {\n+    pub fn new(f: &'combine mut CombineFields<'infcx, 'gcx, 'tcx>, a_is_expected: bool) -> Sub<'combine, 'infcx, 'gcx, 'tcx> {\n         Sub { fields: f, a_is_expected: a_is_expected }\n     }\n \n-    pub fn obligations(self) -> PredicateObligations<'tcx> {\n-        self.fields.obligations\n-    }\n-\n     fn with_expected_switched<R, F: FnOnce(&mut Self) -> R>(&mut self, f: F) -> R {\n         self.a_is_expected = !self.a_is_expected;\n         let result = f(self);\n@@ -41,7 +36,7 @@ impl<'infcx, 'gcx, 'tcx> Sub<'infcx, 'gcx, 'tcx> {\n     }\n }\n \n-impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Sub<'infcx, 'gcx, 'tcx> {\n+impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Sub<'combine, 'infcx, 'gcx, 'tcx> {\n     fn tag(&self) -> &'static str { \"Sub\" }\n     fn tcx(&self) -> TyCtxt<'infcx, 'gcx, 'tcx> { self.fields.infcx.tcx }\n     fn a_is_expected(&self) -> bool { self.a_is_expected }"}]}