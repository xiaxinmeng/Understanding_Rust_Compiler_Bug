{"sha": "2facb5e061971afbf6bd2fabe3966d5de9d46489", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYWNiNWUwNjE5NzFhZmJmNmJkMmZhYmUzOTY2ZDVkZTlkNDY0ODk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-13T08:32:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-13T11:16:46Z"}, "message": "cleanups", "tree": {"sha": "90c57ec3794cf995efdb224465858323520def52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90c57ec3794cf995efdb224465858323520def52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2facb5e061971afbf6bd2fabe3966d5de9d46489", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2facb5e061971afbf6bd2fabe3966d5de9d46489", "html_url": "https://github.com/rust-lang/rust/commit/2facb5e061971afbf6bd2fabe3966d5de9d46489", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2facb5e061971afbf6bd2fabe3966d5de9d46489/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b260641e0caa3938151afe66fa3bf5691b8c3caa", "url": "https://api.github.com/repos/rust-lang/rust/commits/b260641e0caa3938151afe66fa3bf5691b8c3caa", "html_url": "https://github.com/rust-lang/rust/commit/b260641e0caa3938151afe66fa3bf5691b8c3caa"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "58f365128b9b749b6a28845f9fb87aede978f9d3", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2facb5e061971afbf6bd2fabe3966d5de9d46489/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2facb5e061971afbf6bd2fabe3966d5de9d46489/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=2facb5e061971afbf6bd2fabe3966d5de9d46489", "patch": "@@ -1,7 +1,6 @@\n use std::sync::Arc;\n \n use rustc_hash::FxHashMap;\n-use ra_syntax::TextRange;\n use ra_arena::{Arena, RawId, impl_arena_id};\n \n use crate::{\n@@ -171,22 +170,14 @@ fn compute_expr_scopes(expr: ExprId, body: &Body, scopes: &mut ExprScopes, scope\n     };\n }\n \n-#[derive(Debug)]\n-pub struct ReferenceDescriptor {\n-    pub range: TextRange,\n-    pub name: String,\n-}\n-\n #[cfg(test)]\n mod tests {\n     use ra_db::SourceDatabase;\n-    use ra_syntax::{algo::find_node_at_offset, AstNode, SyntaxNodePtr};\n+    use ra_syntax::{algo::find_node_at_offset, AstNode, SyntaxNodePtr, ast};\n     use test_utils::{extract_offset, assert_eq_text};\n \n     use crate::{source_binder::SourceAnalyzer, mock::MockDatabase};\n \n-    use super::*;\n-\n     fn do_check(code: &str, expected: &[&str]) {\n         let (off, code) = extract_offset(code);\n         let code = {"}, {"sha": "bd035ced95dd7d3b07cb7dba110a5a8fc6530a63", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2facb5e061971afbf6bd2fabe3966d5de9d46489/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2facb5e061971afbf6bd2fabe3966d5de9d46489/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=2facb5e061971afbf6bd2fabe3966d5de9d46489", "patch": "@@ -10,7 +10,7 @@ use std::sync::Arc;\n use rustc_hash::{FxHashSet, FxHashMap};\n use ra_db::{FileId, FilePosition};\n use ra_syntax::{\n-    SyntaxNode, AstPtr, TextUnit, SyntaxNodePtr,\n+    SyntaxNode, AstPtr, TextUnit, SyntaxNodePtr, TextRange,\n     ast::{self, AstNode, NameOwner},\n     algo::find_node_at_offset,\n     SyntaxKind::*,\n@@ -19,7 +19,7 @@ use ra_syntax::{\n use crate::{\n     HirDatabase, Function, Struct, Enum, Const, Static, Either, DefWithBody, PerNs, Name,\n     AsName, Module, HirFileId, Crate, Trait, Resolver,\n-    expr::{BodySourceMap, scope::{ReferenceDescriptor, ScopeId, ExprScopes}},\n+    expr::{BodySourceMap, scope::{ScopeId, ExprScopes}},\n     ids::LocationCtx,\n     expr, AstId\n };\n@@ -203,6 +203,12 @@ impl ScopeEntryWithSyntax {\n     }\n }\n \n+#[derive(Debug)]\n+pub struct ReferenceDescriptor {\n+    pub range: TextRange,\n+    pub name: String,\n+}\n+\n impl SourceAnalyzer {\n     pub fn new(\n         db: &impl HirDatabase,\n@@ -318,6 +324,8 @@ impl SourceAnalyzer {\n     }\n \n     pub fn find_all_refs(&self, pat: &ast::BindPat) -> Vec<ReferenceDescriptor> {\n+        // FIXME: at least, this should work with any DefWithBody, but ideally\n+        // this should be hir-based altogether\n         let fn_def = pat.syntax().ancestors().find_map(ast::FnDef::cast).unwrap();\n         let ptr = Either::A(AstPtr::new(pat.into()));\n         fn_def\n@@ -329,7 +337,7 @@ impl SourceAnalyzer {\n                 Some(entry) => entry.ptr() == ptr,\n             })\n             .map(|name_ref| ReferenceDescriptor {\n-                name: name_ref.syntax().text().to_string(),\n+                name: name_ref.text().to_string(),\n                 range: name_ref.syntax().range(),\n             })\n             .collect()"}]}