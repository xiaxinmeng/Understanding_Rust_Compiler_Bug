{"sha": "3c0a6d6922db63981d18de7e1dbd9842648d7227", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMGE2ZDY5MjJkYjYzOTgxZDE4ZGU3ZTFkYmQ5ODQyNjQ4ZDcyMjc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-10T20:34:54Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-10T20:34:54Z"}, "message": "simplify reallocate", "tree": {"sha": "c05a9bd531cf786556e54e5143908ed35c4587b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c05a9bd531cf786556e54e5143908ed35c4587b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c0a6d6922db63981d18de7e1dbd9842648d7227", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c0a6d6922db63981d18de7e1dbd9842648d7227", "html_url": "https://github.com/rust-lang/rust/commit/3c0a6d6922db63981d18de7e1dbd9842648d7227", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c0a6d6922db63981d18de7e1dbd9842648d7227/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8bd42e8d473e6fcce76f7690023820fe34c09a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8bd42e8d473e6fcce76f7690023820fe34c09a3", "html_url": "https://github.com/rust-lang/rust/commit/b8bd42e8d473e6fcce76f7690023820fe34c09a3"}], "stats": {"total": 49, "additions": 8, "deletions": 41}, "files": [{"sha": "64549f45b39ceb14ff6fcab936808e09523e84c3", "filename": "src/memory.rs", "status": "modified", "additions": 7, "deletions": 40, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/3c0a6d6922db63981d18de7e1dbd9842648d7227/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0a6d6922db63981d18de7e1dbd9842648d7227/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=3c0a6d6922db63981d18de7e1dbd9842648d7227", "patch": "@@ -224,6 +224,8 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     // TODO(solson): Track which allocations were returned from __rust_allocate and report an error\n     // when reallocating/deallocating any others.\n     pub fn reallocate(&mut self, ptr: Pointer, old_size: u64, new_size: u64, align: u64) -> EvalResult<'tcx, Pointer> {\n+        use std::cmp::min;\n+\n         assert!(align.is_power_of_two());\n         // TODO(solson): Report error about non-__rust_allocate'd pointer.\n         if ptr.offset != 0 || self.get(ptr.alloc_id).is_err() {\n@@ -233,39 +235,12 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             return Err(EvalError::ReallocatedStaticMemory);\n         }\n \n-        let size = self.get(ptr.alloc_id)?.bytes.len() as u64;\n-        let real_align = self.get(ptr.alloc_id)?.align;\n-        if size != old_size || real_align != align {\n-            return Err(EvalError::IncorrectAllocationInformation);\n-        }\n+        // For simplicities' sake, we implement reallocate as \"alloc, copy, dealloc\"\n+        let new_ptr = self.allocate(new_size, align)?;\n+        self.copy(PrimVal::Ptr(ptr), PrimVal::Ptr(new_ptr), min(old_size, new_size), align, /*nonoverlapping*/true)?;\n+        self.deallocate(ptr, Some((old_size, align)))?;\n \n-        if new_size > size {\n-            let amount = new_size - size;\n-            self.memory_usage += amount;\n-            let alloc = self.get_mut(ptr.alloc_id)?;\n-            assert_eq!(amount as usize as u64, amount);\n-            alloc.bytes.extend(iter::repeat(0).take(amount as usize));\n-            alloc.undef_mask.grow(amount, false);\n-        } else if size > new_size {\n-            self.memory_usage -= size - new_size;\n-            self.clear_relocations(ptr.offset(new_size, self.layout)?, size - new_size)?;\n-            let alloc = self.get_mut(ptr.alloc_id)?;\n-            // `as usize` is fine here, since it is smaller than `size`, which came from a usize\n-            alloc.bytes.truncate(new_size as usize);\n-            alloc.bytes.shrink_to_fit();\n-            alloc.undef_mask.truncate(new_size);\n-        }\n-\n-        // Change allocation ID.  We do this after the above to be able to re-use methods like `clear_relocations`.\n-        let id = {\n-            let alloc = self.alloc_map.remove(&ptr.alloc_id).expect(\"We already used this pointer above\");\n-            let id = self.next_id;\n-            self.next_id.0 += 1;\n-            self.alloc_map.insert(id, alloc);\n-            id\n-        };\n-\n-        Ok(Pointer::new(id, 0))\n+        Ok(new_ptr)\n     }\n \n     // TODO(solson): See comment on `reallocate`.\n@@ -1138,14 +1113,6 @@ impl UndefMask {\n         self.len += amount;\n         self.set_range_inbounds(start, start + amount, new_state);\n     }\n-\n-    fn truncate(&mut self, length: u64) {\n-        self.len = length;\n-        let truncate = self.len / BLOCK_SIZE + 1;\n-        assert_eq!(truncate as usize as u64, truncate);\n-        self.blocks.truncate(truncate as usize);\n-        self.blocks.shrink_to_fit();\n-    }\n }\n \n fn bit_index(bits: u64) -> (usize, usize) {"}, {"sha": "23fe93c5af668fdc3333d488270049af1f5242e6", "filename": "tests/compile-fail/reallocate-bad-alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c0a6d6922db63981d18de7e1dbd9842648d7227/tests%2Fcompile-fail%2Freallocate-bad-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0a6d6922db63981d18de7e1dbd9842648d7227/tests%2Fcompile-fail%2Freallocate-bad-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-bad-alignment.rs?ref=3c0a6d6922db63981d18de7e1dbd9842648d7227", "patch": "@@ -2,7 +2,7 @@\n \n extern crate alloc;\n \n-// error-pattern: tried to deallocate or reallocate using incorrect alignment or size\n+// error-pattern: tried to access memory with alignment 1, but alignment 2 is required\n \n use alloc::heap::*;\n fn main() {"}]}