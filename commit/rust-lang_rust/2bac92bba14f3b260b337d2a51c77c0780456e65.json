{"sha": "2bac92bba14f3b260b337d2a51c77c0780456e65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYWM5MmJiYTE0ZjNiMjYwYjMzN2QyYTUxYzc3YzA3ODA0NTZlNjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-08T13:33:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-08T13:33:53Z"}, "message": "Auto merge of #74533 - nikic:issue-74425, r=eddyb\n\nEmit == null instead of <= null for niche check\n\nWhen the niche maximum is zero, emit a \"== zero\" check instead of a \"<= zero\" check. In particular, this avoids the awkward case of \"<= null\". While LLVM does canonicalize this to \"== null\", this apparently doesn't happen for constant expressions, leading to the issue in #74425. While that can be addressed on the LLVM side, it still seems prudent to emit sensible IR here, because this will allow null checks to be optimized earlier in the pipeline.\n\nFixes #74425.", "tree": {"sha": "92e808c9d9a93e2423dd62fd12eaa2165b9b6ac2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92e808c9d9a93e2423dd62fd12eaa2165b9b6ac2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bac92bba14f3b260b337d2a51c77c0780456e65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bac92bba14f3b260b337d2a51c77c0780456e65", "html_url": "https://github.com/rust-lang/rust/commit/2bac92bba14f3b260b337d2a51c77c0780456e65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bac92bba14f3b260b337d2a51c77c0780456e65/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c989ac132a81503ceaaa1054da0a3a8c5c305ef0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c989ac132a81503ceaaa1054da0a3a8c5c305ef0", "html_url": "https://github.com/rust-lang/rust/commit/c989ac132a81503ceaaa1054da0a3a8c5c305ef0"}, {"sha": "7e5c7cf8e32d43b1c7fca06effbc7739634c31a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e5c7cf8e32d43b1c7fca06effbc7739634c31a0", "html_url": "https://github.com/rust-lang/rust/commit/7e5c7cf8e32d43b1c7fca06effbc7739634c31a0"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "05656774f0e9556cfefeee295ad905e548e30976", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2bac92bba14f3b260b337d2a51c77c0780456e65/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bac92bba14f3b260b337d2a51c77c0780456e65/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=2bac92bba14f3b260b337d2a51c77c0780456e65", "patch": "@@ -253,14 +253,13 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n                     bx.sub(tag, bx.cx().const_uint_big(niche_llty, niche_start))\n                 };\n                 let relative_max = niche_variants.end().as_u32() - niche_variants.start().as_u32();\n-                let is_niche = {\n-                    let relative_max = if relative_max == 0 {\n-                        // Avoid calling `const_uint`, which wouldn't work for pointers.\n-                        // FIXME(eddyb) check the actual primitive type here.\n-                        bx.cx().const_null(niche_llty)\n-                    } else {\n-                        bx.cx().const_uint(niche_llty, relative_max as u64)\n-                    };\n+                let is_niche = if relative_max == 0 {\n+                    // Avoid calling `const_uint`, which wouldn't work for pointers.\n+                    // Also use canonical == 0 instead of non-canonical u<= 0.\n+                    // FIXME(eddyb) check the actual primitive type here.\n+                    bx.icmp(IntPredicate::IntEQ, relative_discr, bx.cx().const_null(niche_llty))\n+                } else {\n+                    let relative_max = bx.cx().const_uint(niche_llty, relative_max as u64);\n                     bx.icmp(IntPredicate::IntULE, relative_discr, relative_max)\n                 };\n "}, {"sha": "59c47de4129c5043f70bf684d418fa5069353b7b", "filename": "src/test/codegen/some-global-nonnull.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2bac92bba14f3b260b337d2a51c77c0780456e65/src%2Ftest%2Fcodegen%2Fsome-global-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bac92bba14f3b260b337d2a51c77c0780456e65/src%2Ftest%2Fcodegen%2Fsome-global-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsome-global-nonnull.rs?ref=2bac92bba14f3b260b337d2a51c77c0780456e65", "patch": "@@ -0,0 +1,25 @@\n+// compile-flags: -O\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK-LABEL: @test\n+// CHECK-NEXT: start:\n+// CHECK-NEXT: tail call void @ext_fn0()\n+#[no_mangle]\n+pub fn test() {\n+    test_inner(Some(inner0));\n+}\n+\n+fn test_inner(f_maybe: Option<fn()>) {\n+    if let Some(f) = f_maybe {\n+        f();\n+    }\n+}\n+\n+fn inner0() {\n+    unsafe { ext_fn0() };\n+}\n+\n+extern \"C\" {\n+    fn ext_fn0();\n+}"}]}