{"sha": "f0c0c2ae91061a2b6041658a6e406c757e4e5483", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwYzBjMmFlOTEwNjFhMmI2MDQxNjU4YTZlNDA2Yzc1N2U0ZTU0ODM=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-09T13:10:34Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-11T15:03:16Z"}, "message": "rustc: remove proc -> once || coercions.", "tree": {"sha": "b532cc6103efe85b82caef252d40e2dcafa83c87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b532cc6103efe85b82caef252d40e2dcafa83c87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0c0c2ae91061a2b6041658a6e406c757e4e5483", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c0c2ae91061a2b6041658a6e406c757e4e5483", "html_url": "https://github.com/rust-lang/rust/commit/f0c0c2ae91061a2b6041658a6e406c757e4e5483", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0c0c2ae91061a2b6041658a6e406c757e4e5483/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "402d946868c4d775eebd29b4e13d3897f5cc2d47", "url": "https://api.github.com/repos/rust-lang/rust/commits/402d946868c4d775eebd29b4e13d3897f5cc2d47", "html_url": "https://github.com/rust-lang/rust/commit/402d946868c4d775eebd29b4e13d3897f5cc2d47"}], "stats": {"total": 111, "additions": 10, "deletions": 101}, "files": [{"sha": "f0a6c5f16f77d34978b853afa823fbc5fcfb9357", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f0c0c2ae91061a2b6041658a6e406c757e4e5483/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c0c2ae91061a2b6041658a6e406c757e4e5483/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=f0c0c2ae91061a2b6041658a6e406c757e4e5483", "patch": "@@ -451,17 +451,8 @@ impl<'a> GatherLoanCtxt<'a> {\n                                              r,\n                                              AutoRef)\n                     }\n-                    ty::AutoBorrowFn(r) => {\n-                        let cmt_deref = mc.cat_deref_fn_or_obj(expr, cmt, 0);\n-                        self.guarantee_valid(expr.id,\n-                                             expr.span,\n-                                             cmt_deref,\n-                                             ast::MutImmutable,\n-                                             r,\n-                                             AutoRef)\n-                    }\n                     ty::AutoBorrowObj(r, m) => {\n-                        let cmt_deref = mc.cat_deref_fn_or_obj(expr, cmt, 0);\n+                        let cmt_deref = mc.cat_deref_obj(expr, cmt);\n                         self.guarantee_valid(expr.id,\n                                              expr.span,\n                                              cmt_deref,"}, {"sha": "f76aae9eef4aa8364669326bbf08e90f484d96f4", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f0c0c2ae91061a2b6041658a6e406c757e4e5483/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c0c2ae91061a2b6041658a6e406c757e4e5483/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=f0c0c2ae91061a2b6041658a6e406c757e4e5483", "patch": "@@ -686,19 +686,8 @@ impl<TYPER:Typer> MemCategorizationContext<TYPER> {\n         }\n     }\n \n-    pub fn cat_deref_fn_or_obj<N:ast_node>(&mut self,\n-                                           node: &N,\n-                                           base_cmt: cmt,\n-                                           deref_cnt: uint)\n-                                           -> cmt {\n-        // Bit of a hack: the \"dereference\" of a function pointer like\n-        // `@fn()` is a mere logical concept. We interpret it as\n-        // dereferencing the environment pointer; of course, we don't\n-        // know what type lies at the other end, so we just call it\n-        // `()` (the empty tuple).\n-\n-        let opaque_ty = ty::mk_tup(self.tcx(), Vec::new());\n-        self.cat_deref_common(node, base_cmt, deref_cnt, opaque_ty)\n+    pub fn cat_deref_obj<N:ast_node>(&mut self, node: &N, base_cmt: cmt) -> cmt {\n+        self.cat_deref_common(node, base_cmt, 0, ty::mk_nil())\n     }\n \n     fn cat_deref<N:ast_node>(&mut self,"}, {"sha": "e19408520f6ee765a516fd3cfcd6d741edbf702a", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f0c0c2ae91061a2b6041658a6e406c757e4e5483/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c0c2ae91061a2b6041658a6e406c757e4e5483/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=f0c0c2ae91061a2b6041658a6e406c757e4e5483", "patch": "@@ -62,7 +62,7 @@ use middle::trans::type_of;\n use middle::trans::write_guard;\n use middle::ty::struct_fields;\n use middle::ty::{AutoBorrowObj, AutoDerefRef, AutoAddEnv, AutoObject, AutoUnsafe};\n-use middle::ty::{AutoPtr, AutoBorrowVec, AutoBorrowVecRef, AutoBorrowFn};\n+use middle::ty::{AutoPtr, AutoBorrowVec, AutoBorrowVecRef};\n use middle::ty;\n use middle::typeck::MethodCall;\n use util::common::indenter;\n@@ -200,14 +200,6 @@ fn apply_adjustments<'a>(bcx: &'a Block<'a>,\n                 Some(AutoBorrowVecRef(..)) => {\n                     unpack_datum!(bcx, auto_slice_and_ref(bcx, expr, datum))\n                 }\n-                Some(AutoBorrowFn(..)) => {\n-                    let adjusted_ty = ty::adjust_ty(bcx.tcx(), expr.span, expr.id, datum.ty,\n-                                                    Some(adjustment), |method_call| {\n-                        bcx.ccx().maps.method_map.borrow()\n-                           .find(&method_call).map(|method| method.ty)\n-                    });\n-                    unpack_datum!(bcx, auto_borrow_fn(bcx, adjusted_ty, datum))\n-                }\n                 Some(AutoBorrowObj(..)) => {\n                     unpack_datum!(bcx, auto_borrow_obj(bcx, expr, datum))\n                 }\n@@ -225,20 +217,6 @@ fn apply_adjustments<'a>(bcx: &'a Block<'a>,\n     debug!(\"after adjustments, datum={}\", datum.to_str(bcx.ccx()));\n     return DatumBlock {bcx: bcx, datum: datum};\n \n-    fn auto_borrow_fn<'a>(\n-                      bcx: &'a Block<'a>,\n-                      adjusted_ty: ty::t,\n-                      datum: Datum<Expr>)\n-                      -> DatumBlock<'a, Expr> {\n-        // Currently, all closure types are represented precisely the\n-        // same, so no runtime adjustment is required, but we still\n-        // must patchup the type.\n-        DatumBlock {bcx: bcx,\n-                    datum: Datum {val: datum.val,\n-                                  ty: adjusted_ty,\n-                                  kind: datum.kind}}\n-    }\n-\n     fn auto_slice<'a>(\n                   bcx: &'a Block<'a>,\n                   expr: &ast::Expr,"}, {"sha": "af53c31ad4eecd9fdea0002f60f462a45f01af70", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f0c0c2ae91061a2b6041658a6e406c757e4e5483/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c0c2ae91061a2b6041658a6e406c757e4e5483/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=f0c0c2ae91061a2b6041658a6e406c757e4e5483", "patch": "@@ -239,9 +239,6 @@ pub enum AutoRef {\n     /// Convert from ~[]/&[] to &&[] (or str)\n     AutoBorrowVecRef(Region, ast::Mutability),\n \n-    /// Convert from @fn()/~fn()/|| to ||\n-    AutoBorrowFn(Region),\n-\n     /// Convert from T to *T\n     AutoUnsafe(ast::Mutability),\n \n@@ -2906,10 +2903,6 @@ pub fn adjust_ty(cx: &ctxt,\n                                     })\n                                 }\n \n-                                AutoBorrowFn(r) => {\n-                                    borrow_fn(cx, span, r, adjusted_ty)\n-                                }\n-\n                                 AutoUnsafe(m) => {\n                                     mk_ptr(cx, mt {ty: adjusted_ty, mutbl: m})\n                                 }\n@@ -2951,24 +2944,6 @@ pub fn adjust_ty(cx: &ctxt,\n         }\n     }\n \n-    fn borrow_fn(cx: &ctxt, span: Span, r: Region, ty: ty::t) -> ty::t {\n-        match get(ty).sty {\n-            ty_closure(ref fty) => {\n-                ty::mk_closure(cx, ClosureTy {\n-                    store: RegionTraitStore(r, ast::MutMutable),\n-                    ..(**fty).clone()\n-                })\n-            }\n-\n-            ref s => {\n-                cx.sess.span_bug(\n-                    span,\n-                    format!(\"borrow-fn associated with bad sty: {:?}\",\n-                         s));\n-            }\n-        }\n-    }\n-\n     fn borrow_obj(cx: &ctxt, span: Span, r: Region,\n                   m: ast::Mutability, ty: ty::t) -> ty::t {\n         match get(ty).sty {\n@@ -2992,7 +2967,6 @@ impl AutoRef {\n             ty::AutoPtr(r, m) => ty::AutoPtr(f(r), m),\n             ty::AutoBorrowVec(r, m) => ty::AutoBorrowVec(f(r), m),\n             ty::AutoBorrowVecRef(r, m) => ty::AutoBorrowVecRef(f(r), m),\n-            ty::AutoBorrowFn(r) => ty::AutoBorrowFn(f(r)),\n             ty::AutoUnsafe(m) => ty::AutoUnsafe(m),\n             ty::AutoBorrowObj(r, m) => ty::AutoBorrowObj(f(r), m),\n         }"}, {"sha": "9e7bb1b10f60f3279ea4bca78888585fa09e227f", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f0c0c2ae91061a2b6041658a6e406c757e4e5483/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c0c2ae91061a2b6041658a6e406c757e4e5483/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=f0c0c2ae91061a2b6041658a6e406c757e4e5483", "patch": "@@ -1123,13 +1123,8 @@ fn link_autoref(rcx: &mut Rcx,\n             link_region(mc.typer, expr.span, r, m, cmt_index);\n         }\n \n-        ty::AutoBorrowFn(r) => {\n-            let cmt_deref = mc.cat_deref_fn_or_obj(expr, expr_cmt, 0);\n-            link_region(mc.typer, expr.span, r, ast::MutImmutable, cmt_deref);\n-        }\n-\n         ty::AutoBorrowObj(r, m) => {\n-            let cmt_deref = mc.cat_deref_fn_or_obj(expr, expr_cmt, 0);\n+            let cmt_deref = mc.cat_deref_obj(expr, expr_cmt);\n             link_region(mc.typer, expr.span, r, m, cmt_deref);\n         }\n "}, {"sha": "7d1ffa4451fb764ef14a51670019bcc5dd5177a5", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f0c0c2ae91061a2b6041658a6e406c757e4e5483/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c0c2ae91061a2b6041658a6e406c757e4e5483/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=f0c0c2ae91061a2b6041658a6e406c757e4e5483", "patch": "@@ -65,8 +65,7 @@ we may want to adjust precisely when coercions occur.\n */\n \n \n-use middle::ty::{AutoPtr, AutoBorrowVec, AutoBorrowFn, AutoBorrowObj};\n-use middle::ty::{AutoDerefRef};\n+use middle::ty::{AutoPtr, AutoBorrowVec, AutoBorrowObj, AutoDerefRef};\n use middle::ty::{VstoreSlice, VstoreUniq};\n use middle::ty::{mt};\n use middle::ty;\n@@ -342,31 +341,14 @@ impl<'f> Coerce<'f> {\n                a.inf_str(self.get_ref().infcx), sty_a,\n                b.inf_str(self.get_ref().infcx));\n \n-        let fn_ty = match *sty_a {\n-            ty::ty_closure(ref f) if f.store == ty::UniqTraitStore => {\n-                (*f).clone()\n-            }\n+        match *sty_a {\n             ty::ty_bare_fn(ref f) => {\n-                return self.coerce_from_bare_fn(a, f, b);\n+                self.coerce_from_bare_fn(a, f, b)\n             }\n             _ => {\n-                return self.subtype(a, b);\n+                self.subtype(a, b)\n             }\n-        };\n-\n-        let r_borrow = self.get_ref().infcx.next_region_var(Coercion(self.get_ref().trace));\n-        let a_borrowed = ty::mk_closure(\n-            self.get_ref().infcx.tcx,\n-            ty::ClosureTy {\n-                store: ty::RegionTraitStore(r_borrow, ast::MutMutable),\n-                .. *fn_ty\n-            });\n-\n-        if_ok!(self.subtype(a_borrowed, b));\n-        Ok(Some(@AutoDerefRef(AutoDerefRef {\n-            autoderefs: 0,\n-            autoref: Some(AutoBorrowFn(r_borrow))\n-        })))\n+        }\n     }\n \n     fn coerce_from_bare_fn(&self, a: ty::t, fn_ty_a: &ty::BareFnTy, b: ty::t)"}]}