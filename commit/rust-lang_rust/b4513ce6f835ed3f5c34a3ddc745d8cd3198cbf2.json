{"sha": "b4513ce6f835ed3f5c34a3ddc745d8cd3198cbf2", "node_id": "C_kwDOAAsO6NoAKGI0NTEzY2U2ZjgzNWVkM2Y1YzM0YTNkZGM3NDVkOGNkMzE5OGNiZjI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-20T22:50:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-20T22:50:26Z"}, "message": "Rollup merge of #101310 - zachs18:rc_get_unchecked_mut_docs_soundness, r=Mark-Simulacrum\n\nClarify and restrict when `{Arc,Rc}::get_unchecked_mut` is allowed.\n\n(Tracking issue for `{Arc,Rc}::get_unchecked_mut`: #63292)\n\n(I'm using `Rc` in this comment, but it applies for `Arc` all the same).\n\nAs currently documented, `Rc::get_unchecked_mut` can lead to unsoundness when multiple `Rc`/`Weak` pointers to the same allocation exist. The current documentation only requires that other `Rc`/`Weak` pointers to the same allocation \"must not be dereferenced for the duration of the returned borrow\". This can lead to unsoundness in (at least) two ways: variance, and `Rc<str>`/`Rc<[u8]>` aliasing. ([playground link](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=d7e2d091c389f463d121630ab0a37320)).\n\nThis PR changes the documentation of `Rc::get_unchecked_mut` to restrict usage to when all `Rc<T>`/`Weak<T>` have the exact same `T` (including lifetimes). I believe this is sufficient to prevent unsoundness, while still allowing `get_unchecked_mut` to be called on an aliased `Rc` as long as the safety contract is upheld by the caller.\n\n## Alternatives\n\n* A less strict, but still sound alternative would be to say that the caller must only write values which are valid for all aliased `Rc`/`Weak` inner types. (This was [mentioned](https://github.com/rust-lang/rust/issues/63292#issuecomment-568284090) in the tracking issue). This may be too complicated to clearly express in the documentation.\n* A more strict alternative would be to say that there must not be any aliased `Rc`/`Weak` pointers, i.e. it is required that get_mut would return `Some(_)`. (This was also mentioned in the tracking issue). There is at least one codebase that this would cause to become unsound ([here](https://github.com/kaimast/lsm-rs/blob/be5a164d770d850d905e510e2966ad4b1cc9aa5e/src/memtable.rs#L166), where additional locking is used to ensure unique access to an aliased `Rc<T>`;  I saw this because it was linked on the tracking issue).", "tree": {"sha": "489b4a96bbf05ccbf66a5d7416bba84405eb472f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/489b4a96bbf05ccbf66a5d7416bba84405eb472f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4513ce6f835ed3f5c34a3ddc745d8cd3198cbf2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjeq8yCRBK7hj4Ov3rIwAAkpkIACVcAg26chyi1k5sgseChfM1\nsI11JGm/UEWVub6zg+Hru9BxpFh7RdjEQrsUxphm5aA9FXc596bz8nIEHmaAy6mQ\n1DoUTpczoyFJpcMQQYMmZpoKWIAXSaRTXwhGrVDLeR4BAgDL3FaDjj0I83iN/Qlf\nqu5a0tbJ43BTEZPknqqnL5eqfF6QZizTZuVsJs0b6nB8xTacCjfL/Jxxjr/xU+oZ\nZMBomhdkYToGiVoodi5wcQ8yhMn+wia1ZNsXOjtQbnW+qdd/VB4rvBTlDD3igfj5\nE/DANkvQ3mm0QUl4sdEvJ1Til+XX2WNdEgRNW4Dv9IxS7Z1Wm3ANujn7nL190+o=\n=Tckh\n-----END PGP SIGNATURE-----\n", "payload": "tree 489b4a96bbf05ccbf66a5d7416bba84405eb472f\nparent a28f3c88e50a77bc2a91889241248c4543854e61\nparent 734f7244723f579433b7defcd1fd1c2e66406737\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1668984626 +0100\ncommitter GitHub <noreply@github.com> 1668984626 +0100\n\nRollup merge of #101310 - zachs18:rc_get_unchecked_mut_docs_soundness, r=Mark-Simulacrum\n\nClarify and restrict when `{Arc,Rc}::get_unchecked_mut` is allowed.\n\n(Tracking issue for `{Arc,Rc}::get_unchecked_mut`: #63292)\n\n(I'm using `Rc` in this comment, but it applies for `Arc` all the same).\n\nAs currently documented, `Rc::get_unchecked_mut` can lead to unsoundness when multiple `Rc`/`Weak` pointers to the same allocation exist. The current documentation only requires that other `Rc`/`Weak` pointers to the same allocation \"must not be dereferenced for the duration of the returned borrow\". This can lead to unsoundness in (at least) two ways: variance, and `Rc<str>`/`Rc<[u8]>` aliasing. ([playground link](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=d7e2d091c389f463d121630ab0a37320)).\n\nThis PR changes the documentation of `Rc::get_unchecked_mut` to restrict usage to when all `Rc<T>`/`Weak<T>` have the exact same `T` (including lifetimes). I believe this is sufficient to prevent unsoundness, while still allowing `get_unchecked_mut` to be called on an aliased `Rc` as long as the safety contract is upheld by the caller.\n\n## Alternatives\n\n* A less strict, but still sound alternative would be to say that the caller must only write values which are valid for all aliased `Rc`/`Weak` inner types. (This was [mentioned](https://github.com/rust-lang/rust/issues/63292#issuecomment-568284090) in the tracking issue). This may be too complicated to clearly express in the documentation.\n* A more strict alternative would be to say that there must not be any aliased `Rc`/`Weak` pointers, i.e. it is required that get_mut would return `Some(_)`. (This was also mentioned in the tracking issue). There is at least one codebase that this would cause to become unsound ([here](https://github.com/kaimast/lsm-rs/blob/be5a164d770d850d905e510e2966ad4b1cc9aa5e/src/memtable.rs#L166), where additional locking is used to ensure unique access to an aliased `Rc<T>`;  I saw this because it was linked on the tracking issue).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4513ce6f835ed3f5c34a3ddc745d8cd3198cbf2", "html_url": "https://github.com/rust-lang/rust/commit/b4513ce6f835ed3f5c34a3ddc745d8cd3198cbf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4513ce6f835ed3f5c34a3ddc745d8cd3198cbf2/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a28f3c88e50a77bc2a91889241248c4543854e61", "url": "https://api.github.com/repos/rust-lang/rust/commits/a28f3c88e50a77bc2a91889241248c4543854e61", "html_url": "https://github.com/rust-lang/rust/commit/a28f3c88e50a77bc2a91889241248c4543854e61"}, {"sha": "734f7244723f579433b7defcd1fd1c2e66406737", "url": "https://api.github.com/repos/rust-lang/rust/commits/734f7244723f579433b7defcd1fd1c2e66406737", "html_url": "https://github.com/rust-lang/rust/commit/734f7244723f579433b7defcd1fd1c2e66406737"}], "stats": {"total": 82, "additions": 74, "deletions": 8}, "files": [{"sha": "38e31b1802a42f0ee0dcf2f10cb725ba3693e624", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b4513ce6f835ed3f5c34a3ddc745d8cd3198cbf2/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4513ce6f835ed3f5c34a3ddc745d8cd3198cbf2/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=b4513ce6f835ed3f5c34a3ddc745d8cd3198cbf2", "patch": "@@ -1091,10 +1091,11 @@ impl<T: ?Sized> Rc<T> {\n     ///\n     /// # Safety\n     ///\n-    /// Any other `Rc` or [`Weak`] pointers to the same allocation must not be dereferenced\n-    /// for the duration of the returned borrow.\n-    /// This is trivially the case if no such pointers exist,\n-    /// for example immediately after `Rc::new`.\n+    /// If any other `Rc` or [`Weak`] pointers to the same allocation exist, then\n+    /// they must be must not be dereferenced or have active borrows for the duration\n+    /// of the returned borrow, and their inner type must be exactly the same as the\n+    /// inner type of this Rc (including lifetimes). This is trivially the case if no\n+    /// such pointers exist, for example immediately after `Rc::new`.\n     ///\n     /// # Examples\n     ///\n@@ -1109,6 +1110,38 @@ impl<T: ?Sized> Rc<T> {\n     /// }\n     /// assert_eq!(*x, \"foo\");\n     /// ```\n+    /// Other `Rc` pointers to the same allocation must be to the same type.\n+    /// ```no_run\n+    /// #![feature(get_mut_unchecked)]\n+    ///\n+    /// use std::rc::Rc;\n+    ///\n+    /// let x: Rc<str> = Rc::from(\"Hello, world!\");\n+    /// let mut y: Rc<[u8]> = x.clone().into();\n+    /// unsafe {\n+    ///     // this is Undefined Behavior, because x's inner type is str, not [u8]\n+    ///     Rc::get_mut_unchecked(&mut y).fill(0xff); // 0xff is invalid in UTF-8\n+    /// }\n+    /// println!(\"{}\", &*x); // Invalid UTF-8 in a str\n+    /// ```\n+    /// Other `Rc` pointers to the same allocation must be to the exact same type, including lifetimes.\n+    /// ```no_run\n+    /// #![feature(get_mut_unchecked)]\n+    ///\n+    /// use std::rc::Rc;\n+    ///\n+    /// let x: Rc<&str> = Rc::new(\"Hello, world!\");\n+    /// {\n+    ///     let s = String::from(\"Oh, no!\");\n+    ///     let mut y: Rc<&str> = x.clone().into();\n+    ///     unsafe {\n+    ///         // this is Undefined Behavior, because x's inner type\n+    ///         // is &'long str, not &'short str\n+    ///         *Rc::get_mut_unchecked(&mut y) = &s;\n+    ///     }\n+    /// }\n+    /// println!(\"{}\", &*x); // Use-after-free\n+    /// ```\n     #[inline]\n     #[unstable(feature = \"get_mut_unchecked\", issue = \"63292\")]\n     pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {"}, {"sha": "f7dc4d1094ca3f8b1a0d160435ba6aa2653fa828", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b4513ce6f835ed3f5c34a3ddc745d8cd3198cbf2/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4513ce6f835ed3f5c34a3ddc745d8cd3198cbf2/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=b4513ce6f835ed3f5c34a3ddc745d8cd3198cbf2", "patch": "@@ -1587,10 +1587,11 @@ impl<T: ?Sized> Arc<T> {\n     ///\n     /// # Safety\n     ///\n-    /// Any other `Arc` or [`Weak`] pointers to the same allocation must not be dereferenced\n-    /// for the duration of the returned borrow.\n-    /// This is trivially the case if no such pointers exist,\n-    /// for example immediately after `Arc::new`.\n+    /// If any other `Arc` or [`Weak`] pointers to the same allocation exist, then\n+    /// they must be must not be dereferenced or have active borrows for the duration\n+    /// of the returned borrow, and their inner type must be exactly the same as the\n+    /// inner type of this Rc (including lifetimes). This is trivially the case if no\n+    /// such pointers exist, for example immediately after `Arc::new`.\n     ///\n     /// # Examples\n     ///\n@@ -1605,6 +1606,38 @@ impl<T: ?Sized> Arc<T> {\n     /// }\n     /// assert_eq!(*x, \"foo\");\n     /// ```\n+    /// Other `Arc` pointers to the same allocation must be to the same type.\n+    /// ```no_run\n+    /// #![feature(get_mut_unchecked)]\n+    ///\n+    /// use std::sync::Arc;\n+    ///\n+    /// let x: Arc<str> = Arc::from(\"Hello, world!\");\n+    /// let mut y: Arc<[u8]> = x.clone().into();\n+    /// unsafe {\n+    ///     // this is Undefined Behavior, because x's inner type is str, not [u8]\n+    ///     Arc::get_mut_unchecked(&mut y).fill(0xff); // 0xff is invalid in UTF-8\n+    /// }\n+    /// println!(\"{}\", &*x); // Invalid UTF-8 in a str\n+    /// ```\n+    /// Other `Arc` pointers to the same allocation must be to the exact same type, including lifetimes.\n+    /// ```no_run\n+    /// #![feature(get_mut_unchecked)]\n+    ///\n+    /// use std::sync::Arc;\n+    ///\n+    /// let x: Arc<&str> = Arc::new(\"Hello, world!\");\n+    /// {\n+    ///     let s = String::from(\"Oh, no!\");\n+    ///     let mut y: Arc<&str> = x.clone().into();\n+    ///     unsafe {\n+    ///         // this is Undefined Behavior, because x's inner type\n+    ///         // is &'long str, not &'short str\n+    ///         *Arc::get_mut_unchecked(&mut y) = &s;\n+    ///     }\n+    /// }\n+    /// println!(\"{}\", &*x); // Use-after-free\n+    /// ```\n     #[inline]\n     #[unstable(feature = \"get_mut_unchecked\", issue = \"63292\")]\n     pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {"}]}