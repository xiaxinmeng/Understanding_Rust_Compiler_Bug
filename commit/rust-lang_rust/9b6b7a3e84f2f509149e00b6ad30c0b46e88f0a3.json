{"sha": "9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3", "node_id": "C_kwDOAAsO6NoAKDliNmI3YTNlODRmMmY1MDkxNDllMDBiNmFkMzBjMGI0NmU4OGYwYTM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-08T20:24:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-08T20:24:50Z"}, "message": "Rollup merge of #108846 - celinval:smir-poc, r=oli-obk\n\nStableMIR: Proof-of-concept implementation + test\n\nThis PR is part of the [project Stable MIR](https://github.com/rust-lang/project-stable-mir). The PR deletes old re-exports from rustc_smir and introduces a proof-of-concept implementation for APIs to retrieve crate information.\n\nThe implementation follows the [design described here](https://hackmd.io/XhnYHKKuR6-LChhobvlT-g?view), but instead of using separate crates for the implementation, it uses separate modules inside `rustc_smir`.\n\nThe API introduced at this point should be seen just as an example on how we are planning to structure the communication between tools and the compiler.\n\nI have not explored yet what should be the right granularity, the best starting point for users, neither the best way to implement it.\n\nr? ``````@oli-obk``````", "tree": {"sha": "6be99cf2d6663cba464edc2d01a1df56b2863ae6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6be99cf2d6663cba464edc2d01a1df56b2863ae6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkCO8SCRBK7hj4Ov3rIwAAZQUIAI6O0nTELERr7rWJAs0vzG+w\nm8pdNSIRgct1viMr8U7f1Uzn2HuGDFLm5uP/dwJ8QIjDYurTb/R8K/fBpCEu/wIB\n3FLwXguU/iMytNUaPHgcRWEJ3oCSXFQZFttozmycMt3Q8/N1XpGH/fX3xEKdtG4U\n8Gd9s8bhgKiHofPAm8tCH2DelpsQaYJbWztjfsc5lv/cXKnJL3mLH5JEoiAuyvSi\nQSTSQjstC5xKcSa5k5X1swDJiKkDXw9+rTq9cvocqh0ylU2fnNvquabR4VrcWop/\nEebPznWBRb3rI1Ri7qwmvfNX79AApJUS/g4e4AotlI5gjV6JHrffJMIszVlnLPs=\n=I8Kn\n-----END PGP SIGNATURE-----\n", "payload": "tree 6be99cf2d6663cba464edc2d01a1df56b2863ae6\nparent 6c91ce27c3639b3b4b4b4c038dc535c02dc9dfbd\nparent 5eaeb71b9f0c27a3bfab666b3f5288c83c63eafe\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678307090 +0100\ncommitter GitHub <noreply@github.com> 1678307090 +0100\n\nRollup merge of #108846 - celinval:smir-poc, r=oli-obk\n\nStableMIR: Proof-of-concept implementation + test\n\nThis PR is part of the [project Stable MIR](https://github.com/rust-lang/project-stable-mir). The PR deletes old re-exports from rustc_smir and introduces a proof-of-concept implementation for APIs to retrieve crate information.\n\nThe implementation follows the [design described here](https://hackmd.io/XhnYHKKuR6-LChhobvlT-g?view), but instead of using separate crates for the implementation, it uses separate modules inside `rustc_smir`.\n\nThe API introduced at this point should be seen just as an example on how we are planning to structure the communication between tools and the compiler.\n\nI have not explored yet what should be the right granularity, the best starting point for users, neither the best way to implement it.\n\nr? ``````@oli-obk``````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3", "html_url": "https://github.com/rust-lang/rust/commit/9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c91ce27c3639b3b4b4b4c038dc535c02dc9dfbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c91ce27c3639b3b4b4b4c038dc535c02dc9dfbd", "html_url": "https://github.com/rust-lang/rust/commit/6c91ce27c3639b3b4b4b4c038dc535c02dc9dfbd"}, {"sha": "5eaeb71b9f0c27a3bfab666b3f5288c83c63eafe", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eaeb71b9f0c27a3bfab666b3f5288c83c63eafe", "html_url": "https://github.com/rust-lang/rust/commit/5eaeb71b9f0c27a3bfab666b3f5288c83c63eafe"}], "stats": {"total": 340, "additions": 274, "deletions": 66}, "files": [{"sha": "47bf654c8f4ef069232909c920cbc7d341bc86e7", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3", "patch": "@@ -4669,15 +4669,9 @@ dependencies = [\n name = \"rustc_smir\"\n version = \"0.0.0\"\n dependencies = [\n- \"rustc_borrowck\",\n- \"rustc_driver\",\n- \"rustc_hir\",\n- \"rustc_interface\",\n  \"rustc_middle\",\n- \"rustc_mir_dataflow\",\n- \"rustc_mir_transform\",\n- \"rustc_serialize\",\n- \"rustc_trait_selection\",\n+ \"rustc_span\",\n+ \"tracing\",\n ]\n \n [[package]]"}, {"sha": "fb97ee5bebe6ef0657529f838b898e7e3578305c", "filename": "compiler/rustc_smir/Cargo.toml", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3/compiler%2Frustc_smir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3/compiler%2Frustc_smir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2FCargo.toml?ref=9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3", "patch": "@@ -4,25 +4,12 @@ version = \"0.0.0\"\n edition = \"2021\"\n \n [dependencies]\n-rustc_borrowck = { path = \"../rustc_borrowck\", optional = true }\n-rustc_driver = { path = \"../rustc_driver\", optional = true }\n-rustc_hir = { path = \"../rustc_hir\", optional = true }\n-rustc_interface = { path = \"../rustc_interface\", optional = true }\n rustc_middle = { path = \"../rustc_middle\", optional = true }\n-rustc_mir_dataflow = { path = \"../rustc_mir_dataflow\", optional = true }\n-rustc_mir_transform = { path = \"../rustc_mir_transform\", optional = true }\n-rustc_serialize = { path = \"../rustc_serialize\", optional = true }\n-rustc_trait_selection = { path = \"../rustc_trait_selection\", optional = true }\n+rustc_span = { path = \"../rustc_span\", optional = true }\n+tracing = \"0.1\"\n \n [features]\n default = [\n-    \"rustc_borrowck\",\n-    \"rustc_driver\",\n-    \"rustc_hir\",\n-    \"rustc_interface\",\n     \"rustc_middle\",\n-    \"rustc_mir_dataflow\",\n-    \"rustc_mir_transform\",\n-    \"rustc_serialize\",\n-    \"rustc_trait_selection\",\n+    \"rustc_span\",\n ]"}, {"sha": "31dee955f491fee6321b13ed2041566414da483e", "filename": "compiler/rustc_smir/README.md", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3/compiler%2Frustc_smir%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3/compiler%2Frustc_smir%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2FREADME.md?ref=9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3", "patch": "@@ -73,3 +73,40 @@ git subtree pull --prefix=compiler/rustc_smir https://github.com/rust-lang/proje\n Note: only ever sync to rustc from the project-stable-mir's `smir` branch. Do not sync with your own forks.\n \n Then open a PR against rustc just like a regular PR.\n+\n+## Stable MIR Design\n+\n+The stable-mir will follow a similar approach to proc-macro2. It\u2019s\n+implementation will eventually be broken down into two main crates:\n+\n+- `stable_mir`: Public crate, to be published on crates.io, which will contain\n+the stable data structure as well as proxy APIs to make calls to the\n+compiler.\n+- `rustc_smir`: The compiler crate that will translate from internal MIR to\n+SMIR. This crate will also implement APIs that will be invoked by\n+stable-mir to query the compiler for more information.\n+\n+This will help tools to communicate with the rust compiler via stable APIs. Tools will depend on\n+`stable_mir` crate, which will invoke the compiler using APIs defined in `rustc_smir`. I.e.:\n+\n+```\n+    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+    \u2502   External Tool     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502           \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   Rust Compiler     \u2502\n+    \u2502                     \u2502          \u2502 \u2502           \u2502 \u2502          \u2502                     \u2502\n+    \u2502                     \u2502stable_mir| \u2502           \u2502 \u2502rustc_smir\u2502                     \u2502\n+    \u2502                     \u2502          \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba| \u2502          \u2502                     \u2502\n+    \u2502                     \u2502          \u2502 \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502          \u2502                     \u2502\n+    \u2502                     \u2502          \u2502 \u2502           \u2502 \u2502          \u2502                     \u2502\n+    \u2502                     \u2502          \u2502 \u2502           \u2502 \u2502          \u2502                     \u2502\n+    \u2502                     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502           \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                     \u2502\n+    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+More details can be found here:\n+https://hackmd.io/XhnYHKKuR6-LChhobvlT-g?view\n+\n+For now, the code for these two crates are in separate modules of this crate.\n+The modules have the same name for simplicity. We also have a third module,\n+`rustc_internal` which will expose APIs and definitions that allow users to\n+gather information from internal MIR constructs that haven't been exposed in\n+the `stable_mir` module."}, {"sha": "157dfd620ee1bda6d9c5295659944752a3ab5edb", "filename": "compiler/rustc_smir/rust-toolchain.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3/compiler%2Frustc_smir%2Frust-toolchain.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3/compiler%2Frustc_smir%2Frust-toolchain.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Frust-toolchain.toml?ref=9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-06-01\"\n+channel = \"nightly-2023-02-28\"\n components = [ \"rustfmt\", \"rustc-dev\" ]"}, {"sha": "54d474db038e9ddd9ee1b90acc8e459523a49e91", "filename": "compiler/rustc_smir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3/compiler%2Frustc_smir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3/compiler%2Frustc_smir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Flib.rs?ref=9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3", "patch": "@@ -11,9 +11,9 @@\n     test(attr(allow(unused_variables), deny(warnings)))\n )]\n #![cfg_attr(not(feature = \"default\"), feature(rustc_private))]\n-#![deny(rustc::untranslatable_diagnostic)]\n-#![deny(rustc::diagnostic_outside_of_impl)]\n \n-pub mod mir;\n+pub mod rustc_internal;\n+pub mod stable_mir;\n \n-pub mod very_unstable;\n+// Make this module private for now since external users should not call these directly.\n+mod rustc_smir;"}, {"sha": "887e6572930669053b7d5de98996d47255f8c0ed", "filename": "compiler/rustc_smir/src/mir.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c91ce27c3639b3b4b4b4c038dc535c02dc9dfbd/compiler%2Frustc_smir%2Fsrc%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c91ce27c3639b3b4b4b4c038dc535c02dc9dfbd/compiler%2Frustc_smir%2Fsrc%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fmir.rs?ref=6c91ce27c3639b3b4b4b4c038dc535c02dc9dfbd", "patch": "@@ -1,10 +0,0 @@\n-pub use crate::very_unstable::hir::ImplicitSelfKind;\n-pub use crate::very_unstable::middle::mir::{\n-    visit::MutVisitor, AggregateKind, AssertKind, BasicBlock, BasicBlockData, BinOp, BindingForm,\n-    BlockTailInfo, Body, BorrowKind, CastKind, ClearCrossCrate, Constant, ConstantKind,\n-    CopyNonOverlapping, Coverage, FakeReadCause, Field, GeneratorInfo, InlineAsmOperand, Local,\n-    LocalDecl, LocalInfo, LocalKind, Location, MirPhase, MirSource, NullOp, Operand, Place,\n-    PlaceRef, ProjectionElem, ProjectionKind, Promoted, RetagKind, Rvalue, Safety, SourceInfo,\n-    SourceScope, SourceScopeData, SourceScopeLocalData, Statement, StatementKind, UnOp,\n-    UserTypeProjection, UserTypeProjections, VarBindingForm, VarDebugInfo, VarDebugInfoContents,\n-};"}, {"sha": "3eaff9c051f1c8f098f8939427a664990f67431c", "filename": "compiler/rustc_smir/src/rustc_internal/mod.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs?ref=9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3", "patch": "@@ -0,0 +1,15 @@\n+//! Module that implements the bridge between Stable MIR and internal compiler MIR.\n+//!\n+//! For that, we define APIs that will temporarily be public to 3P that exposes rustc internal APIs\n+//! until stable MIR is complete.\n+\n+use crate::stable_mir;\n+pub use rustc_span::def_id::{CrateNum, DefId};\n+\n+pub fn item_def_id(item: &stable_mir::CrateItem) -> DefId {\n+    item.0\n+}\n+\n+pub fn crate_num(item: &stable_mir::Crate) -> CrateNum {\n+    item.id.into()\n+}"}, {"sha": "d956f0ac802134baf8b79250ab3a5bc71396ab69", "filename": "compiler/rustc_smir/src/rustc_smir/mod.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs?ref=9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3", "patch": "@@ -0,0 +1,48 @@\n+//! Module that implements what will become the rustc side of Stable MIR.\n+//!\n+//! This module is responsible for building Stable MIR components from internal components.\n+//!\n+//! This module is not intended to be invoked directly by users. It will eventually\n+//! become the public API of rustc that will be invoked by the `stable_mir` crate.\n+//!\n+//! For now, we are developing everything inside `rustc`, thus, we keep this module private.\n+\n+use crate::stable_mir::{self};\n+use rustc_middle::ty::{tls::with, TyCtxt};\n+use rustc_span::def_id::{CrateNum, LOCAL_CRATE};\n+use tracing::debug;\n+\n+/// Get information about the local crate.\n+pub fn local_crate() -> stable_mir::Crate {\n+    with(|tcx| smir_crate(tcx, LOCAL_CRATE))\n+}\n+\n+/// Retrieve a list of all external crates.\n+pub fn external_crates() -> Vec<stable_mir::Crate> {\n+    with(|tcx| tcx.crates(()).iter().map(|crate_num| smir_crate(tcx, *crate_num)).collect())\n+}\n+\n+/// Find a crate with the given name.\n+pub fn find_crate(name: &str) -> Option<stable_mir::Crate> {\n+    with(|tcx| {\n+        [LOCAL_CRATE].iter().chain(tcx.crates(()).iter()).find_map(|crate_num| {\n+            let crate_name = tcx.crate_name(*crate_num).to_string();\n+            (name == crate_name).then(|| smir_crate(tcx, *crate_num))\n+        })\n+    })\n+}\n+\n+/// Retrieve all items of the local crate that have a MIR associated with them.\n+pub fn all_local_items() -> stable_mir::CrateItems {\n+    with(|tcx| {\n+        tcx.mir_keys(()).iter().map(|item| stable_mir::CrateItem(item.to_def_id())).collect()\n+    })\n+}\n+\n+/// Build a stable mir crate from a given crate number.\n+fn smir_crate(tcx: TyCtxt<'_>, crate_num: CrateNum) -> stable_mir::Crate {\n+    let crate_name = tcx.crate_name(crate_num).to_string();\n+    let is_local = crate_num == LOCAL_CRATE;\n+    debug!(?crate_name, ?crate_num, \"smir_crate\");\n+    stable_mir::Crate { id: crate_num.into(), name: crate_name, is_local }\n+}"}, {"sha": "cbf52e691fb475f00dd39696dd4ad447ac5b296f", "filename": "compiler/rustc_smir/src/stable_mir/mod.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs?ref=9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3", "patch": "@@ -0,0 +1,60 @@\n+//! Module that implements the public interface to the Stable MIR.\n+//!\n+//! This module shall contain all type definitions and APIs that we expect 3P tools to invoke to\n+//! interact with the compiler.\n+//!\n+//! The goal is to eventually move this module to its own crate which shall be published on\n+//! [crates.io](https://crates.io).\n+//!\n+//! ## Note:\n+//!\n+//! There shouldn't be any direct references to internal compiler constructs in this module.\n+//! If you need an internal construct, consider using `rustc_internal` or `rustc_smir`.\n+\n+use crate::rustc_internal;\n+\n+/// Use String for now but we should replace it.\n+pub type Symbol = String;\n+\n+/// The number that identifies a crate.\n+pub type CrateNum = usize;\n+\n+/// A unique identification number for each item accessible for the current compilation unit.\n+pub type DefId = usize;\n+\n+/// A list of crate items.\n+pub type CrateItems = Vec<CrateItem>;\n+\n+/// Holds information about a crate.\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+pub struct Crate {\n+    pub(crate) id: CrateNum,\n+    pub name: Symbol,\n+    pub is_local: bool,\n+}\n+\n+/// Holds information about an item in the crate.\n+/// For now, it only stores the item DefId. Use functions inside `rustc_internal` module to\n+/// use this item.\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+pub struct CrateItem(pub(crate) rustc_internal::DefId);\n+\n+/// Access to the local crate.\n+pub fn local_crate() -> Crate {\n+    crate::rustc_smir::local_crate()\n+}\n+\n+/// Try to find a crate with the given name.\n+pub fn find_crate(name: &str) -> Option<Crate> {\n+    crate::rustc_smir::find_crate(name)\n+}\n+\n+/// Try to find a crate with the given name.\n+pub fn external_crates() -> Vec<Crate> {\n+    crate::rustc_smir::external_crates()\n+}\n+\n+/// Retrieve all items in the local crate that have a MIR associated with them.\n+pub fn all_local_items() -> CrateItems {\n+    crate::rustc_smir::all_local_items()\n+}"}, {"sha": "12ba133dbb169403305825f59f39eba7cff394a6", "filename": "compiler/rustc_smir/src/very_unstable.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6c91ce27c3639b3b4b4b4c038dc535c02dc9dfbd/compiler%2Frustc_smir%2Fsrc%2Fvery_unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c91ce27c3639b3b4b4b4c038dc535c02dc9dfbd/compiler%2Frustc_smir%2Fsrc%2Fvery_unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fvery_unstable.rs?ref=6c91ce27c3639b3b4b4b4c038dc535c02dc9dfbd", "patch": "@@ -1,27 +0,0 @@\n-//! This module reexports various crates and modules from unstable rustc APIs.\n-//! Add anything you need here and it will get slowly transferred to a stable API.\n-//! Only use rustc_smir in your dependencies and use the reexports here instead of\n-//! directly referring to the unstable crates.\n-\n-macro_rules! crates {\n-    ($($rustc_name:ident -> $name:ident,)*) => {\n-        $(\n-            #[cfg(not(feature = \"default\"))]\n-            pub extern crate $rustc_name as $name;\n-            #[cfg(feature = \"default\")]\n-            pub use $rustc_name as $name;\n-        )*\n-    }\n-}\n-\n-crates! {\n-    rustc_borrowck -> borrowck,\n-    rustc_driver -> driver,\n-    rustc_hir -> hir,\n-    rustc_interface -> interface,\n-    rustc_middle -> middle,\n-    rustc_mir_dataflow -> dataflow,\n-    rustc_mir_transform -> transform,\n-    rustc_serialize -> serialize,\n-    rustc_trait_selection -> trait_selection,\n-}"}, {"sha": "4458ab0162e953084e3e147a772d5d9307993524", "filename": "tests/ui-fulldeps/stable-mir/crate-info.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs?ref=9b6b7a3e84f2f509149e00b6ad30c0b46e88f0a3", "patch": "@@ -0,0 +1,104 @@\n+// run-pass\n+// Test that users are able to use stable mir APIs to retrieve information of the current crate\n+\n+// ignore-stage-1\n+// ignore-cross-compile\n+// ignore-remote\n+\n+#![feature(rustc_private)]\n+\n+extern crate rustc_driver;\n+extern crate rustc_hir;\n+extern crate rustc_interface;\n+extern crate rustc_middle;\n+extern crate rustc_smir;\n+\n+use rustc_driver::{Callbacks, Compilation, RunCompiler};\n+use rustc_hir::def::DefKind;\n+use rustc_interface::{interface, Queries};\n+use rustc_middle::ty::TyCtxt;\n+use rustc_smir::{rustc_internal, stable_mir};\n+use std::io::Write;\n+\n+const CRATE_NAME: &str = \"input\";\n+\n+/// This function uses the Stable MIR APIs to get information about the test crate.\n+fn test_stable_mir(tcx: TyCtxt<'_>) {\n+    // Get the local crate using stable_mir API.\n+    let local = stable_mir::local_crate();\n+    assert_eq!(&local.name, CRATE_NAME);\n+\n+    // Find items in the local crate.\n+    let items = stable_mir::all_local_items();\n+    assert!(has_item(tcx, &items, (DefKind::Fn, \"foo_bar\")));\n+    assert!(has_item(tcx, &items, (DefKind::Fn, \"foo::bar\")));\n+\n+    // Find the `std` crate.\n+    assert!(stable_mir::find_crate(\"std\").is_some());\n+}\n+\n+// Use internal API to find a function in a crate.\n+fn has_item(tcx: TyCtxt, items: &stable_mir::CrateItems, item: (DefKind, &str)) -> bool {\n+    items.iter().any(|crate_item| {\n+        let def_id = rustc_internal::item_def_id(crate_item);\n+        tcx.def_kind(def_id) == item.0 && tcx.def_path_str(def_id) == item.1\n+    })\n+}\n+\n+/// This test will generate and analyze a dummy crate using the stable mir.\n+/// For that, it will first write the dummy crate into a file.\n+/// It will invoke the compiler using a custom Callback implementation, which will\n+/// invoke Stable MIR APIs after the compiler has finished its analysis.\n+fn main() {\n+    let path = \"input.rs\";\n+    generate_input(&path).unwrap();\n+    let args = vec![\n+        \"rustc\".to_string(),\n+        \"--crate-type=lib\".to_string(),\n+        \"--crate-name\".to_string(),\n+        CRATE_NAME.to_string(),\n+        path.to_string(),\n+    ];\n+    rustc_driver::catch_fatal_errors(|| {\n+        RunCompiler::new(&args, &mut SMirCalls {}).run().unwrap();\n+    })\n+    .unwrap();\n+}\n+\n+struct SMirCalls {}\n+\n+impl Callbacks for SMirCalls {\n+    /// Called after analysis. Return value instructs the compiler whether to\n+    /// continue the compilation afterwards (defaults to `Compilation::Continue`)\n+    fn after_analysis<'tcx>(\n+        &mut self,\n+        _compiler: &interface::Compiler,\n+        queries: &'tcx Queries<'tcx>,\n+    ) -> Compilation {\n+        queries.global_ctxt().unwrap().enter(|tcx| {\n+            test_stable_mir(tcx);\n+        });\n+        // No need to keep going.\n+        Compilation::Stop\n+    }\n+}\n+\n+fn generate_input(path: &str) -> std::io::Result<()> {\n+    let mut file = std::fs::File::create(path)?;\n+    write!(\n+        file,\n+        r#\"\n+    mod foo {{\n+        pub fn bar(i: i32) -> i64 {{\n+            i as i64\n+        }}\n+    }}\n+\n+    pub fn foo_bar(x: i32, y: i32) -> i64 {{\n+        let x_64 = foo::bar(x);\n+        let y_64 = foo::bar(y);\n+        x_64.wrapping_add(y_64)\n+    }}\"#\n+    )?;\n+    Ok(())\n+}"}]}