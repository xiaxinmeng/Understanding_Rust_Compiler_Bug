{"sha": "1b01629f189f1c4050bd5c7eac81e44ba2c7a76f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMDE2MjlmMTg5ZjFjNDA1MGJkNWM3ZWFjODFlNDRiYTJjN2E3NmY=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-01-08T08:24:43Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-13T22:37:59Z"}, "message": "Make vectors (& old ports) of zero-size types allocate one byte each.", "tree": {"sha": "a958ba05b82b2948ca24891931c704f69ad9014f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a958ba05b82b2948ca24891931c704f69ad9014f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b01629f189f1c4050bd5c7eac81e44ba2c7a76f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b01629f189f1c4050bd5c7eac81e44ba2c7a76f", "html_url": "https://github.com/rust-lang/rust/commit/1b01629f189f1c4050bd5c7eac81e44ba2c7a76f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b01629f189f1c4050bd5c7eac81e44ba2c7a76f/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea53c48ca23ec4e46454d48936c209d2a67cf892", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea53c48ca23ec4e46454d48936c209d2a67cf892", "html_url": "https://github.com/rust-lang/rust/commit/ea53c48ca23ec4e46454d48936c209d2a67cf892"}], "stats": {"total": 74, "additions": 59, "deletions": 15}, "files": [{"sha": "ae3116b08f0c42d33ba581d1b5844a0f27af52bf", "filename": "src/libcore/oldcomm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b01629f189f1c4050bd5c7eac81e44ba2c7a76f/src%2Flibcore%2Foldcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b01629f189f1c4050bd5c7eac81e44ba2c7a76f/src%2Flibcore%2Foldcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foldcomm.rs?ref=1b01629f189f1c4050bd5c7eac81e44ba2c7a76f", "patch": "@@ -91,7 +91,8 @@ pub enum Chan<T: Owned> {\n /// Constructs a port\n pub fn Port<T: Owned>() -> Port<T> {\n     unsafe {\n-        Port_(@PortPtr(rustrt::new_port(sys::size_of::<T>() as size_t)))\n+        Port_(@PortPtr(rustrt::new_port(sys::nonzero_size_of::<T>()\n+                                        as size_t)))\n     }\n }\n "}, {"sha": "322aa895eb46caf24d48fc93f206306ee027875c", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1b01629f189f1c4050bd5c7eac81e44ba2c7a76f/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b01629f189f1c4050bd5c7eac81e44ba2c7a76f/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=1b01629f189f1c4050bd5c7eac81e44ba2c7a76f", "patch": "@@ -87,6 +87,17 @@ pub pure fn size_of<T>() -> uint {\n     unsafe { rusti::size_of::<T>() }\n }\n \n+/**\n+ * Returns the size of a type, or 1 if the actual size is zero.\n+ *\n+ * Useful for building structures containing variable-length arrays.\n+ */\n+#[inline(always)]\n+pub pure fn nonzero_size_of<T>() -> uint {\n+    let s = size_of::<T>();\n+    if s == 0 { 1 } else { s }\n+}\n+\n /**\n  * Returns the ABI-required minimum alignment of a type\n  *\n@@ -146,7 +157,7 @@ pub pure fn begin_unwind_(msg: *c_char, file: *c_char, line: size_t) -> ! {\n #[cfg(test)]\n pub mod tests {\n     use cast;\n-    use sys::{Closure, pref_align_of, size_of};\n+    use sys::{Closure, pref_align_of, size_of, nonzero_size_of};\n \n     #[test]\n     pub fn size_of_basic() {\n@@ -171,6 +182,14 @@ pub mod tests {\n         assert size_of::<*uint>() == 8u;\n     }\n \n+    #[test]\n+    pub fn nonzero_size_of_basic() {\n+        type Z = [i8 * 0];\n+        assert size_of::<Z>() == 0u;\n+        assert nonzero_size_of::<Z>() == 1u;\n+        assert nonzero_size_of::<uint>() == size_of::<uint>();\n+    }\n+\n     #[test]\n     pub fn align_of_basic() {\n         assert pref_align_of::<u8>() == 1u;"}, {"sha": "29767f3c1e0ccc3d6ac1a6bb387329c5136b5b08", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1b01629f189f1c4050bd5c7eac81e44ba2c7a76f/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b01629f189f1c4050bd5c7eac81e44ba2c7a76f/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=1b01629f189f1c4050bd5c7eac81e44ba2c7a76f", "patch": "@@ -103,7 +103,7 @@ pub fn reserve_at_least<T>(v: &mut ~[T], n: uint) {\n pub pure fn capacity<T>(v: &const ~[T]) -> uint {\n     unsafe {\n         let repr: **raw::VecRepr = ::cast::transmute(v);\n-        (**repr).unboxed.alloc / sys::size_of::<T>()\n+        (**repr).unboxed.alloc / sys::nonzero_size_of::<T>()\n     }\n }\n \n@@ -276,7 +276,7 @@ pub pure fn view<T>(v: &r/[T], start: uint, end: uint) -> &r/[T] {\n         unsafe {\n             ::cast::reinterpret_cast(\n                 &(ptr::offset(p, start),\n-                  (end - start) * sys::size_of::<T>()))\n+                  (end - start) * sys::nonzero_size_of::<T>()))\n         }\n     }\n }\n@@ -289,7 +289,7 @@ pub pure fn mut_view<T>(v: &r/[mut T], start: uint, end: uint) -> &r/[mut T] {\n         unsafe {\n             ::cast::reinterpret_cast(\n                 &(ptr::mut_offset(p, start),\n-                  (end - start) * sys::size_of::<T>()))\n+                  (end - start) * sys::nonzero_size_of::<T>()))\n         }\n     }\n }\n@@ -303,7 +303,7 @@ pub pure fn const_view<T>(v: &r/[const T], start: uint,\n         unsafe {\n             ::cast::reinterpret_cast(\n                 &(ptr::const_offset(p, start),\n-                  (end - start) * sys::size_of::<T>()))\n+                  (end - start) * sys::nonzero_size_of::<T>()))\n         }\n     }\n }\n@@ -608,7 +608,7 @@ pub fn push<T>(v: &mut ~[T], initval: T) {\n unsafe fn push_fast<T>(v: &mut ~[T], initval: T) {\n     let repr: **raw::VecRepr = ::cast::transmute(v);\n     let fill = (**repr).unboxed.fill;\n-    (**repr).unboxed.fill += sys::size_of::<T>();\n+    (**repr).unboxed.fill += sys::nonzero_size_of::<T>();\n     let p = addr_of(&((**repr).unboxed.data));\n     let p = ptr::offset(p, fill) as *mut T;\n     rusti::move_val_init(&mut(*p), move initval);\n@@ -1449,7 +1449,7 @@ pub pure fn as_imm_buf<T,U>(s: &[T],\n         let v : *(*T,uint) =\n             ::cast::reinterpret_cast(&addr_of(&s));\n         let (buf,len) = *v;\n-        f(buf, len / sys::size_of::<T>())\n+        f(buf, len / sys::nonzero_size_of::<T>())\n     }\n }\n \n@@ -1462,7 +1462,7 @@ pub pure fn as_const_buf<T,U>(s: &[const T],\n         let v : *(*const T,uint) =\n             ::cast::reinterpret_cast(&addr_of(&s));\n         let (buf,len) = *v;\n-        f(buf, len / sys::size_of::<T>())\n+        f(buf, len / sys::nonzero_size_of::<T>())\n     }\n }\n \n@@ -1475,7 +1475,7 @@ pub pure fn as_mut_buf<T,U>(s: &[mut T],\n         let v : *(*mut T,uint) =\n             ::cast::reinterpret_cast(&addr_of(&s));\n         let (buf,len) = *v;\n-        f(buf, len / sys::size_of::<T>())\n+        f(buf, len / sys::nonzero_size_of::<T>())\n     }\n }\n \n@@ -1992,7 +1992,7 @@ pub mod raw {\n     #[inline(always)]\n     pub unsafe fn set_len<T>(v: &mut ~[T], new_len: uint) {\n         let repr: **VecRepr = ::cast::transmute(v);\n-        (**repr).unboxed.fill = new_len * sys::size_of::<T>();\n+        (**repr).unboxed.fill = new_len * sys::nonzero_size_of::<T>();\n     }\n \n     /**\n@@ -2032,7 +2032,7 @@ pub mod raw {\n     pub unsafe fn buf_as_slice<T,U>(p: *T,\n                                     len: uint,\n                                     f: fn(v: &[T]) -> U) -> U {\n-        let pair = (p, len * sys::size_of::<T>());\n+        let pair = (p, len * sys::nonzero_size_of::<T>());\n         let v : *(&blk/[T]) =\n             ::cast::reinterpret_cast(&addr_of(&pair));\n         f(*v)\n@@ -2501,6 +2501,18 @@ mod tests {\n         assert (!is_not_empty::<int>(~[]));\n     }\n \n+    #[test]\n+    fn test_len_divzero() {\n+        type Z = [i8 * 0];\n+        let v0 : &[Z] = &[];\n+        let v1 : &[Z] = &[[]];\n+        let v2 : &[Z] = &[[], []];\n+        assert(sys::size_of::<Z>() == 0);\n+        assert(len(v0) == 0);\n+        assert(len(v1) == 1);\n+        assert(len(v2) == 2);\n+    }\n+\n     #[test]\n     fn test_head() {\n         let a = ~[11, 12];"}, {"sha": "bc1cd5ec911205895e84a93476fa383207246a42", "filename": "src/librustc/middle/trans/machine.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1b01629f189f1c4050bd5c7eac81e44ba2c7a76f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b01629f189f1c4050bd5c7eac81e44ba2c7a76f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs?ref=1b01629f189f1c4050bd5c7eac81e44ba2c7a76f", "patch": "@@ -132,6 +132,17 @@ pub fn llsize_of(cx: @crate_ctxt, t: TypeRef) -> ValueRef {\n     }\n }\n \n+// Returns the \"default\" size of t (see above), or 1 if the size would\n+// be zero.  This is important for things like vectors that expect\n+// space to be consumed.\n+pub fn nonzero_llsize_of(cx: @crate_ctxt, t: TypeRef) -> ValueRef {\n+    if llbitsize_of_real(cx, t) == 0 {\n+        unsafe { llvm::LLVMConstInt(cx.int_type, 1, False) }\n+    } else {\n+        llsize_of(cx, t)\n+    }\n+}\n+\n // Returns the preferred alignment of the given type for the current target.\n // The preffered alignment may be larger than the alignment used when\n // packing the type into structs. This will be used for things like"}, {"sha": "9db607773eb4a273361e6cb291ebadcf51c5f449", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b01629f189f1c4050bd5c7eac81e44ba2c7a76f/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b01629f189f1c4050bd5c7eac81e44ba2c7a76f/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=1b01629f189f1c4050bd5c7eac81e44ba2c7a76f", "patch": "@@ -17,7 +17,7 @@ use middle::trans::datum::*;\n use middle::trans::expr::{Dest, Ignore, SaveIn};\n use middle::trans::expr;\n use middle::trans::glue;\n-use middle::trans::shape::llsize_of;\n+use middle::trans::shape::{llsize_of, nonzero_llsize_of};\n use middle::trans::type_of;\n use middle::ty;\n use util::common::indenter;\n@@ -96,7 +96,7 @@ fn alloc_vec(bcx: block, unit_ty: ty::t, elts: uint, heap: heap) -> Result {\n     let _icx = bcx.insn_ctxt(\"tvec::alloc_uniq\");\n     let ccx = bcx.ccx();\n     let llunitty = type_of::type_of(ccx, unit_ty);\n-    let unit_sz = llsize_of(ccx, llunitty);\n+    let unit_sz = nonzero_llsize_of(ccx, llunitty);\n \n     let fill = Mul(bcx, C_uint(ccx, elts), unit_sz);\n     let alloc = if elts < 4u { Mul(bcx, C_int(ccx, 4), unit_sz) }\n@@ -418,7 +418,8 @@ fn vec_types(bcx: block, vec_ty: ty::t) -> VecTypes {\n     let ccx = bcx.ccx();\n     let unit_ty = ty::sequence_element_type(bcx.tcx(), vec_ty);\n     let llunit_ty = type_of::type_of(ccx, unit_ty);\n-    let llunit_size = llsize_of(ccx, llunit_ty);\n+    let llunit_size = nonzero_llsize_of(ccx, llunit_ty);\n+\n     VecTypes {vec_ty: vec_ty,\n               unit_ty: unit_ty,\n               llunit_ty: llunit_ty,"}]}