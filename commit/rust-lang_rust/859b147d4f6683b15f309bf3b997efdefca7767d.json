{"sha": "859b147d4f6683b15f309bf3b997efdefca7767d", "node_id": "C_kwDOAAsO6NoAKDg1OWIxNDdkNGY2NjgzYjE1ZjMwOWJmM2I5OTdlZmRlZmNhNzc2N2Q", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-11-16T22:40:55Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-11-23T12:36:03Z"}, "message": "Pass ObligationCtxt from enter_canonical_trait_query and use ObligationCtxt API", "tree": {"sha": "0e1256c9ac2fdf7fafc1a22deda4301e9c94fad8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e1256c9ac2fdf7fafc1a22deda4301e9c94fad8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/859b147d4f6683b15f309bf3b997efdefca7767d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIyBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmN+E7MACgkQgTGiTgx5\n76/uEA/4khFJh/4qgcuuzPtmMVadEK0O+8940GhO7mn2DnvAIlt3vGnz9ggj17/E\nkwdpLuCaRvN3rufPdy4J2fy4UazjAJf0ez0jyUIJLtdrLoP9ACisDmEQvPXmemcf\nUt1OtaUCreZi3F/V224Vxu+/M5fQDM8XOV+l5b6p0rJm6LnYXGe7VL7QYJmAIUQp\nO+aKg0NRKjmebDgEqYI8jN4euGyBf79CMJFwaqQGVexlViX+OGCKvemm7G3JGryA\nkOKHBKP2TBiDb+WNM5+YRaUNeX94b9WUwHXURwLBIRHXf0QTzVM/YC7tM+BjG+rJ\nGfTB9vcFepNu5it4Zyk2XLxyj0F4QrsAMkkeC8A+cmjye/CJUkPvgXl3P2hA9uZb\n7kAMGMYALqWhnNA6x8BpCBeoLAULGJBMaCvnin7u1dcIIfZCJLEqyKKlLXpgys7f\nIUm/DcfOBYQ77rxcvO+xtjuyp+kJDny55XdKCeqA6+m33+lt/m+CoGiErqgLOFz2\nPRXdscVawuxddnHqDh4kk4eL0I0lWIGH239oQLiAVZUi4qGZslVkS6UjihygX+df\nTpJdMabxRi0qFpVPVh13V87W5l6UYatrelX+rC9tSYVvhTVU+7A4JiYbnKrYUm6l\nICrLiHhm75mK/+42sMyAslLL5AkYkvIAADusSYpC714fff1+1w==\n=F/uT\n-----END PGP SIGNATURE-----", "payload": "tree 0e1256c9ac2fdf7fafc1a22deda4301e9c94fad8\nparent 5b3a06a3c2584d303cb40637a50a4bc3f0d8cedf\nauthor Santiago Pastorino <spastorino@gmail.com> 1668638455 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1669206963 -0300\n\nPass ObligationCtxt from enter_canonical_trait_query and use ObligationCtxt API\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/859b147d4f6683b15f309bf3b997efdefca7767d", "html_url": "https://github.com/rust-lang/rust/commit/859b147d4f6683b15f309bf3b997efdefca7767d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/859b147d4f6683b15f309bf3b997efdefca7767d/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b3a06a3c2584d303cb40637a50a4bc3f0d8cedf", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3a06a3c2584d303cb40637a50a4bc3f0d8cedf", "html_url": "https://github.com/rust-lang/rust/commit/5b3a06a3c2584d303cb40637a50a4bc3f0d8cedf"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "3ab353c96380230b75d1e3b7902eb8769dfe6abe", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/859b147d4f6683b15f309bf3b997efdefca7767d/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b147d4f6683b15f309bf3b997efdefca7767d/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=859b147d4f6683b15f309bf3b997efdefca7767d", "patch": "@@ -5,16 +5,15 @@\n use rustc_hir as hir;\n use rustc_infer::infer::canonical::{self, Canonical};\n use rustc_infer::infer::outlives::components::{push_outlives_components, Component};\n-use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n+use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::query::OutlivesBound;\n-use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable};\n use rustc_span::source_map::DUMMY_SP;\n use rustc_trait_selection::infer::InferCtxtBuilderExt;\n use rustc_trait_selection::traits::query::{CanonicalTyGoal, Fallible, NoSolution};\n use rustc_trait_selection::traits::wf;\n-use rustc_trait_selection::traits::{TraitEngine, TraitEngineExt};\n+use rustc_trait_selection::traits::ObligationCtxt;\n use smallvec::{smallvec, SmallVec};\n \n pub(crate) fn provide(p: &mut Providers) {\n@@ -30,16 +29,16 @@ fn implied_outlives_bounds<'tcx>(\n > {\n     tcx.infer_ctxt().enter_canonical_trait_query(&goal, |ocx, key| {\n         let (param_env, ty) = key.into_parts();\n-        compute_implied_outlives_bounds(&ocx.infcx, param_env, ty)\n+        compute_implied_outlives_bounds(ocx, param_env, ty)\n     })\n }\n \n fn compute_implied_outlives_bounds<'tcx>(\n-    infcx: &InferCtxt<'tcx>,\n+    ocx: &ObligationCtxt<'_, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     ty: Ty<'tcx>,\n ) -> Fallible<Vec<OutlivesBound<'tcx>>> {\n-    let tcx = infcx.tcx;\n+    let tcx = ocx.infcx.tcx;\n \n     // Sometimes when we ask what it takes for T: WF, we get back that\n     // U: WF is required; in that case, we push U onto this stack and\n@@ -52,8 +51,6 @@ fn compute_implied_outlives_bounds<'tcx>(\n     let mut outlives_bounds: Vec<ty::OutlivesPredicate<ty::GenericArg<'tcx>, ty::Region<'tcx>>> =\n         vec![];\n \n-    let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new(tcx);\n-\n     while let Some(arg) = wf_args.pop() {\n         if !checked_wf_args.insert(arg) {\n             continue;\n@@ -70,15 +67,15 @@ fn compute_implied_outlives_bounds<'tcx>(\n         // FIXME(@lcnr): It's not really \"always fine\", having fewer implied\n         // bounds can be backward incompatible, e.g. #101951 was caused by\n         // us not dealing with inference vars in `TypeOutlives` predicates.\n-        let obligations = wf::obligations(infcx, param_env, hir::CRATE_HIR_ID, 0, arg, DUMMY_SP)\n-            .unwrap_or_default();\n+        let obligations =\n+            wf::obligations(ocx.infcx, param_env, hir::CRATE_HIR_ID, 0, arg, DUMMY_SP)\n+                .unwrap_or_default();\n \n         // While these predicates should all be implied by other parts of\n         // the program, they are still relevant as they may constrain\n         // inference variables, which is necessary to add the correct\n         // implied bounds in some cases, mostly when dealing with projections.\n-        fulfill_cx.register_predicate_obligations(\n-            infcx,\n+        ocx.register_obligations(\n             obligations.iter().filter(|o| o.predicate.has_non_region_infer()).cloned(),\n         );\n \n@@ -116,9 +113,9 @@ fn compute_implied_outlives_bounds<'tcx>(\n         }));\n     }\n \n-    // Ensure that those obligations that we had to solve\n-    // get solved *here*.\n-    match fulfill_cx.select_all_or_error(infcx).as_slice() {\n+    // This call to `select_all_or_error` is necessary to constrain inference variables, which we\n+    // use further down when computing the implied bounds.\n+    match ocx.select_all_or_error().as_slice() {\n         [] => (),\n         _ => return Err(NoSolution),\n     }\n@@ -130,7 +127,7 @@ fn compute_implied_outlives_bounds<'tcx>(\n         .flat_map(|ty::OutlivesPredicate(a, r_b)| match a.unpack() {\n             ty::GenericArgKind::Lifetime(r_a) => vec![OutlivesBound::RegionSubRegion(r_b, r_a)],\n             ty::GenericArgKind::Type(ty_a) => {\n-                let ty_a = infcx.resolve_vars_if_possible(ty_a);\n+                let ty_a = ocx.infcx.resolve_vars_if_possible(ty_a);\n                 let mut components = smallvec![];\n                 push_outlives_components(tcx, ty_a, &mut components);\n                 implied_bounds_from_components(r_b, components)"}]}