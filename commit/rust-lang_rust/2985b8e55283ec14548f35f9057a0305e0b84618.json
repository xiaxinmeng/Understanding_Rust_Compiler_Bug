{"sha": "2985b8e55283ec14548f35f9057a0305e0b84618", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ODViOGU1NTI4M2VjMTQ1NDhmMzVmOTA1N2EwMzA1ZTBiODQ2MTg=", "commit": {"author": {"name": "Mahmut Bulut", "email": "mahmutbulut0@gmail.com", "date": "2012-10-23T06:42:30Z"}, "committer": {"name": "Mahmut Bulut", "email": "mahmutbulut0@gmail.com", "date": "2012-10-23T06:42:30Z"}, "message": "* Parsing sequence changed\n1- visibility parse\n2- purity parse", "tree": {"sha": "4d55e0bef2b353a4fff0e60ba78919b47c0e46cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d55e0bef2b353a4fff0e60ba78919b47c0e46cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2985b8e55283ec14548f35f9057a0305e0b84618", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2985b8e55283ec14548f35f9057a0305e0b84618", "html_url": "https://github.com/rust-lang/rust/commit/2985b8e55283ec14548f35f9057a0305e0b84618", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2985b8e55283ec14548f35f9057a0305e0b84618/comments", "author": {"login": "vertexclique", "id": 578559, "node_id": "MDQ6VXNlcjU3ODU1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/578559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vertexclique", "html_url": "https://github.com/vertexclique", "followers_url": "https://api.github.com/users/vertexclique/followers", "following_url": "https://api.github.com/users/vertexclique/following{/other_user}", "gists_url": "https://api.github.com/users/vertexclique/gists{/gist_id}", "starred_url": "https://api.github.com/users/vertexclique/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vertexclique/subscriptions", "organizations_url": "https://api.github.com/users/vertexclique/orgs", "repos_url": "https://api.github.com/users/vertexclique/repos", "events_url": "https://api.github.com/users/vertexclique/events{/privacy}", "received_events_url": "https://api.github.com/users/vertexclique/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vertexclique", "id": 578559, "node_id": "MDQ6VXNlcjU3ODU1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/578559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vertexclique", "html_url": "https://github.com/vertexclique", "followers_url": "https://api.github.com/users/vertexclique/followers", "following_url": "https://api.github.com/users/vertexclique/following{/other_user}", "gists_url": "https://api.github.com/users/vertexclique/gists{/gist_id}", "starred_url": "https://api.github.com/users/vertexclique/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vertexclique/subscriptions", "organizations_url": "https://api.github.com/users/vertexclique/orgs", "repos_url": "https://api.github.com/users/vertexclique/repos", "events_url": "https://api.github.com/users/vertexclique/events{/privacy}", "received_events_url": "https://api.github.com/users/vertexclique/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42c05fe642efa726dc6cde624b40b638741724ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/42c05fe642efa726dc6cde624b40b638741724ee", "html_url": "https://github.com/rust-lang/rust/commit/42c05fe642efa726dc6cde624b40b638741724ee"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "ed9be96f027730e394585646be31d7c903c21851", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2985b8e55283ec14548f35f9057a0305e0b84618/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2985b8e55283ec14548f35f9057a0305e0b84618/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2985b8e55283ec14548f35f9057a0305e0b84618", "patch": "@@ -333,10 +333,11 @@ impl Parser {\n             let is_static = p.parse_staticness();\n             let static_sty = spanned(lo, p.span.hi, sty_static);\n \n+\t\t\tlet vis = p.parse_visibility();\n             let pur = p.parse_fn_purity();\n             // NB: at the moment, trait methods are public by default; this\n             // could change.\n-            let vis = p.parse_visibility();\n+            \n             let ident = p.parse_method_name();\n \n             let tps = p.parse_ty_params();\n@@ -2528,13 +2529,14 @@ impl Parser {\n         self.parse_value_ident()\n     }\n \n-    fn parse_method(pr: visibility) -> @method {\n+    fn parse_method() -> @method {\n         let attrs = self.parse_outer_attributes();\n         let lo = self.span.lo;\n \n         let is_static = self.parse_staticness();\n         let static_sty = spanned(lo, self.span.hi, sty_static);\n-\n+\t\t\n+\t\tlet visa = self.parse_visibility();\n         let pur = self.parse_fn_purity();\n         let ident = self.parse_method_name();\n         let tps = self.parse_ty_params();\n@@ -2549,7 +2551,7 @@ impl Parser {\n         @{ident: ident, attrs: attrs,\n           tps: tps, self_ty: self_ty, purity: pur, decl: decl,\n           body: body, id: self.get_id(), span: mk_sp(lo, body.span.hi),\n-          self_id: self.get_id(), vis: pr}\n+          self_id: self.get_id(), vis: visa}\n     }\n \n     fn parse_item_trait() -> item_info {\n@@ -2606,8 +2608,7 @@ impl Parser {\n         let mut meths = ~[];\n         self.expect(token::LBRACE);\n         while !self.eat(token::RBRACE) {\n-            let vis = self.parse_visibility();\n-            meths.push(self.parse_method(vis));\n+            meths.push(self.parse_method());\n         }\n         (ident, item_impl(tps, opt_trait, ty, meths), None)\n     }\n@@ -2763,7 +2764,7 @@ impl Parser {\n             return a_var;\n         } else {\n             self.obsolete(copy self.span, ObsoleteClassMethod);\n-            return @method_member(self.parse_method(vis));\n+            return @method_member(self.parse_method());\n         }\n     }\n \n@@ -2869,9 +2870,9 @@ impl Parser {\n         (id, item_mod(m), Some(inner_attrs.inner))\n     }\n \n-    fn parse_item_foreign_fn(vis: ast::visibility,\n-                             +attrs: ~[attribute]) -> @foreign_item {\n+    fn parse_item_foreign_fn( +attrs: ~[attribute]) -> @foreign_item {\n         let lo = self.span.lo;\n+        let vis = self.parse_visibility();\n         let purity = self.parse_fn_purity();\n         let t = self.parse_fn_header();\n         let (decl, _) = self.parse_fn_decl(|p| p.parse_arg());\n@@ -2919,7 +2920,7 @@ impl Parser {\n         if self.is_keyword(~\"const\") {\n             self.parse_item_foreign_const(vis, move attrs)\n         } else {\n-            self.parse_item_foreign_fn(vis, move attrs)\n+            self.parse_item_foreign_fn( move attrs)\n         }\n     }\n \n@@ -3239,7 +3240,7 @@ impl Parser {\n                                           maybe_append(attrs, extra_attrs)));\n         } else if foreign_items_allowed &&\n             (self.is_keyword(~\"fn\") || self.is_keyword(~\"pure\")) {\n-                let item = self.parse_item_foreign_fn(visibility, attrs);\n+                let item = self.parse_item_foreign_fn(attrs);\n                 return iovi_foreign_item(item);\n         } else if items_allowed && self.is_keyword(~\"unsafe\")\n             && self.look_ahead(1u) != token::LBRACE {"}]}