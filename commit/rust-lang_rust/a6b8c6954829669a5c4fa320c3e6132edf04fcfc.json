{"sha": "a6b8c6954829669a5c4fa320c3e6132edf04fcfc", "node_id": "C_kwDOAAsO6NoAKGE2YjhjNjk1NDgyOTY2OWE1YzRmYTMyMGMzZTYxMzJlZGYwNGZjZmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-03T20:18:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-03T20:18:14Z"}, "message": "Auto merge of #95833 - notriddle:notriddle/human-readable-signals, r=yaahc\n\nstd: `<ExitStatus as Display>::fmt` name the signal it died from\n\nRelated to #95601", "tree": {"sha": "f962ba05af88d885ecb43e0b0cd7949767d7ce97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f962ba05af88d885ecb43e0b0cd7949767d7ce97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6b8c6954829669a5c4fa320c3e6132edf04fcfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6b8c6954829669a5c4fa320c3e6132edf04fcfc", "html_url": "https://github.com/rust-lang/rust/commit/a6b8c6954829669a5c4fa320c3e6132edf04fcfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6b8c6954829669a5c4fa320c3e6132edf04fcfc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e9b92cb43a489b34e2bcb8d21f36198e02eedbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e9b92cb43a489b34e2bcb8d21f36198e02eedbc", "html_url": "https://github.com/rust-lang/rust/commit/7e9b92cb43a489b34e2bcb8d21f36198e02eedbc"}, {"sha": "22791bbccd6dd8c1c3981fc9cb662774f2117d3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/22791bbccd6dd8c1c3981fc9cb662774f2117d3b", "html_url": "https://github.com/rust-lang/rust/commit/22791bbccd6dd8c1c3981fc9cb662774f2117d3b"}], "stats": {"total": 88, "additions": 82, "deletions": 6}, "files": [{"sha": "ef29aa3c8907888d4aa8c4f26564dc9cd5fc898e", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 79, "deletions": 3, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/a6b8c6954829669a5c4fa320c3e6132edf04fcfc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b8c6954829669a5c4fa320c3e6132edf04fcfc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=a6b8c6954829669a5c4fa320c3e6132edf04fcfc", "patch": "@@ -695,18 +695,94 @@ impl From<c_int> for ExitStatus {\n     }\n }\n \n+/// Convert a signal number to a readable, searchable name.\n+///\n+/// This string should be displayed right after the signal number.\n+/// If a signal is unrecognized, it returns the empty string, so that\n+/// you just get the number like \"0\". If it is recognized, you'll get\n+/// something like \"9 (SIGKILL)\".\n+fn signal_string(signal: i32) -> &'static str {\n+    match signal {\n+        libc::SIGHUP => \" (SIGHUP)\",\n+        libc::SIGINT => \" (SIGINT)\",\n+        libc::SIGQUIT => \" (SIGQUIT)\",\n+        libc::SIGILL => \" (SIGILL)\",\n+        libc::SIGTRAP => \" (SIGTRAP)\",\n+        libc::SIGABRT => \" (SIGABRT)\",\n+        libc::SIGBUS => \" (SIGBUS)\",\n+        libc::SIGFPE => \" (SIGFPE)\",\n+        libc::SIGKILL => \" (SIGKILL)\",\n+        libc::SIGUSR1 => \" (SIGUSR1)\",\n+        libc::SIGSEGV => \" (SIGSEGV)\",\n+        libc::SIGUSR2 => \" (SIGUSR2)\",\n+        libc::SIGPIPE => \" (SIGPIPE)\",\n+        libc::SIGALRM => \" (SIGALRM)\",\n+        libc::SIGTERM => \" (SIGTERM)\",\n+        libc::SIGCHLD => \" (SIGCHLD)\",\n+        libc::SIGCONT => \" (SIGCONT)\",\n+        libc::SIGSTOP => \" (SIGSTOP)\",\n+        libc::SIGTSTP => \" (SIGTSTP)\",\n+        libc::SIGTTIN => \" (SIGTTIN)\",\n+        libc::SIGTTOU => \" (SIGTTOU)\",\n+        libc::SIGURG => \" (SIGURG)\",\n+        libc::SIGXCPU => \" (SIGXCPU)\",\n+        libc::SIGXFSZ => \" (SIGXFSZ)\",\n+        libc::SIGVTALRM => \" (SIGVTALRM)\",\n+        libc::SIGPROF => \" (SIGPROF)\",\n+        libc::SIGWINCH => \" (SIGWINCH)\",\n+        libc::SIGIO => \" (SIGIO)\",\n+        libc::SIGSYS => \" (SIGSYS)\",\n+        // For information on Linux signals, run `man 7 signal`\n+        #[cfg(all(\n+            target_os = \"linux\",\n+            any(\n+                target_arch = \"x86_64\",\n+                target_arch = \"x86\",\n+                target_arch = \"arm\",\n+                target_arch = \"aarch64\"\n+            )\n+        ))]\n+        libc::SIGSTKFLT => \" (SIGSTKFLT)\",\n+        #[cfg(target_os = \"linux\")]\n+        libc::SIGPWR => \" (SIGPWR)\",\n+        #[cfg(any(\n+            target_os = \"macos\",\n+            target_os = \"ios\",\n+            target_os = \"tvos\",\n+            target_os = \"freebsd\",\n+            target_os = \"netbsd\",\n+            target_os = \"openbsd\",\n+            target_os = \"dragonfly\"\n+        ))]\n+        libc::SIGEMT => \" (SIGEMT)\",\n+        #[cfg(any(\n+            target_os = \"macos\",\n+            target_os = \"ios\",\n+            target_os = \"tvos\",\n+            target_os = \"freebsd\",\n+            target_os = \"netbsd\",\n+            target_os = \"openbsd\",\n+            target_os = \"dragonfly\"\n+        ))]\n+        libc::SIGINFO => \" (SIGINFO)\",\n+        _ => \"\",\n+    }\n+}\n+\n impl fmt::Display for ExitStatus {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if let Some(code) = self.code() {\n             write!(f, \"exit status: {code}\")\n         } else if let Some(signal) = self.signal() {\n+            let signal_string = signal_string(signal);\n             if self.core_dumped() {\n-                write!(f, \"signal: {signal} (core dumped)\")\n+                write!(f, \"signal: {signal}{signal_string} (core dumped)\")\n             } else {\n-                write!(f, \"signal: {signal}\")\n+                write!(f, \"signal: {signal}{signal_string}\")\n             }\n         } else if let Some(signal) = self.stopped_signal() {\n-            write!(f, \"stopped (not terminated) by signal: {signal}\")\n+            let signal_string = signal_string(signal);\n+            write!(f, \"stopped (not terminated) by signal: {signal}{signal_string}\")\n         } else if self.continued() {\n             write!(f, \"continued (WIFCONTINUED)\")\n         } else {"}, {"sha": "e0e2d478fad731129216a02eefe66d7a4055d878", "filename": "library/std/src/sys/unix/process/process_unix/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6b8c6954829669a5c4fa320c3e6132edf04fcfc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b8c6954829669a5c4fa320c3e6132edf04fcfc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix%2Ftests.rs?ref=a6b8c6954829669a5c4fa320c3e6132edf04fcfc", "patch": "@@ -14,8 +14,8 @@ fn exitstatus_display_tests() {\n \n     let t = |v, s| assert_eq!(s, format!(\"{}\", <ExitStatus as ExitStatusExt>::from_raw(v)));\n \n-    t(0x0000f, \"signal: 15\");\n-    t(0x0008b, \"signal: 11 (core dumped)\");\n+    t(0x0000f, \"signal: 15 (SIGTERM)\");\n+    t(0x0008b, \"signal: 11 (SIGSEGV) (core dumped)\");\n     t(0x00000, \"exit status: 0\");\n     t(0x0ff00, \"exit status: 255\");\n \n@@ -24,7 +24,7 @@ fn exitstatus_display_tests() {\n     // The purpose of this test is to test our string formatting, not our understanding of the wait\n     // status magic numbers.  So restrict these to Linux.\n     if cfg!(target_os = \"linux\") {\n-        t(0x0137f, \"stopped (not terminated) by signal: 19\");\n+        t(0x0137f, \"stopped (not terminated) by signal: 19 (SIGSTOP)\");\n         t(0x0ffff, \"continued (WIFCONTINUED)\");\n     }\n "}]}