{"sha": "72f0180f7bcf033604822a6ab6e65cc9ccf7540f", "node_id": "C_kwDOAAsO6NoAKDcyZjAxODBmN2JjZjAzMzYwNDgyMmE2YWI2ZTY1Y2M5Y2NmNzU0MGY", "commit": {"author": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2021-10-04T14:31:40Z"}, "committer": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2021-10-04T14:31:40Z"}, "message": "Fix ICE in `implicit_hasher`", "tree": {"sha": "7476c6739681f599e4c94da59f984b65a77292f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7476c6739681f599e4c94da59f984b65a77292f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72f0180f7bcf033604822a6ab6e65cc9ccf7540f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72f0180f7bcf033604822a6ab6e65cc9ccf7540f", "html_url": "https://github.com/rust-lang/rust/commit/72f0180f7bcf033604822a6ab6e65cc9ccf7540f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72f0180f7bcf033604822a6ab6e65cc9ccf7540f/comments", "author": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63b04f7d7f3ab6c34ecc1c732a6c61bf100f0ab3", "url": "https://api.github.com/repos/rust-lang/rust/commits/63b04f7d7f3ab6c34ecc1c732a6c61bf100f0ab3", "html_url": "https://github.com/rust-lang/rust/commit/63b04f7d7f3ab6c34ecc1c732a6c61bf100f0ab3"}], "stats": {"total": 59, "additions": 41, "deletions": 18}, "files": [{"sha": "77318e74ca843e12a3e2059f3a08b240548e9326", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/72f0180f7bcf033604822a6ab6e65cc9ccf7540f/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f0180f7bcf033604822a6ab6e65cc9ccf7540f/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=72f0180f7bcf033604822a6ab6e65cc9ccf7540f", "patch": "@@ -167,12 +167,20 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n                             continue;\n                         }\n                         let generics_suggestion_span = generics.span.substitute_dummy({\n-                            let pos = snippet_opt(cx, item.span.until(body.params[0].pat.span))\n-                                .and_then(|snip| {\n-                                    let i = snip.find(\"fn\")?;\n-                                    Some(item.span.lo() + BytePos((i + (&snip[i..]).find('(')?) as u32))\n-                                })\n-                                .expect(\"failed to create span for type parameters\");\n+                            let pos = snippet_opt(\n+                                cx,\n+                                Span::new(\n+                                    item.span.lo(),\n+                                    body.params[0].pat.span.lo(),\n+                                    item.span.ctxt(),\n+                                    item.span.parent(),\n+                                ),\n+                            )\n+                            .and_then(|snip| {\n+                                let i = snip.find(\"fn\")?;\n+                                Some(item.span.lo() + BytePos((i + (&snip[i..]).find('(')?) as u32))\n+                            })\n+                            .expect(\"failed to create span for type parameters\");\n                             Span::new(pos, pos, item.span.ctxt(), item.span.parent())\n                         });\n "}, {"sha": "aa69b0974101c822a06a790c742bed645e46813b", "filename": "tests/ui/implicit_hasher.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72f0180f7bcf033604822a6ab6e65cc9ccf7540f/tests%2Fui%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f0180f7bcf033604822a6ab6e65cc9ccf7540f/tests%2Fui%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.rs?ref=72f0180f7bcf033604822a6ab6e65cc9ccf7540f", "patch": "@@ -1,3 +1,4 @@\n+// edition:2018\n // aux-build:implicit_hasher_macros.rs\n #![deny(clippy::implicit_hasher)]\n #![allow(unused)]\n@@ -96,4 +97,7 @@ __implicit_hasher_test_macro!(impl<K, V> for HashMap<K, V> where V: test_macro::\n // #4260\n implicit_hasher_fn!();\n \n+// #7712\n+pub async fn election_vote(_data: HashMap<i32, i32>) {}\n+\n fn main() {}"}, {"sha": "dad5ab71f157f13a0ff5a23c857223ef83d7cf98", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/72f0180f7bcf033604822a6ab6e65cc9ccf7540f/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72f0180f7bcf033604822a6ab6e65cc9ccf7540f/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=72f0180f7bcf033604822a6ab6e65cc9ccf7540f", "patch": "@@ -1,11 +1,11 @@\n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:16:35\n+  --> $DIR/implicit_hasher.rs:17:35\n    |\n LL | impl<K: Hash + Eq, V> Foo<i8> for HashMap<K, V> {\n    |                                   ^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/implicit_hasher.rs:2:9\n+  --> $DIR/implicit_hasher.rs:3:9\n    |\n LL | #![deny(clippy::implicit_hasher)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -19,7 +19,7 @@ LL |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default:\n    |          ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:25:36\n+  --> $DIR/implicit_hasher.rs:26:36\n    |\n LL | impl<K: Hash + Eq, V> Foo<i8> for (HashMap<K, V>,) {\n    |                                    ^^^^^^^^^^^^^\n@@ -34,7 +34,7 @@ LL |         ((HashMap::default(),), (HashMap::with_capacity_and_hasher(10, Defa\n    |           ~~~~~~~~~~~~~~~~~~     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:30:19\n+  --> $DIR/implicit_hasher.rs:31:19\n    |\n LL | impl Foo<i16> for HashMap<String, String> {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -49,7 +49,7 @@ LL |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default:\n    |          ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: impl for `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:47:32\n+  --> $DIR/implicit_hasher.rs:48:32\n    |\n LL | impl<T: Hash + Eq> Foo<i8> for HashSet<T> {\n    |                                ^^^^^^^^^^\n@@ -64,7 +64,7 @@ LL |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default:\n    |          ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: impl for `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:52:19\n+  --> $DIR/implicit_hasher.rs:53:19\n    |\n LL | impl Foo<i16> for HashSet<String> {\n    |                   ^^^^^^^^^^^^^^^\n@@ -79,7 +79,7 @@ LL |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default:\n    |          ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: parameter of type `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:69:23\n+  --> $DIR/implicit_hasher.rs:70:23\n    |\n LL | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                       ^^^^^^^^^^^^^^^^^\n@@ -90,7 +90,7 @@ LL | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _s\n    |           +++++++++++++++++++++++++++++            ~~~~~~~~~~~~~~~~~~~~\n \n error: parameter of type `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:69:53\n+  --> $DIR/implicit_hasher.rs:70:53\n    |\n LL | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                                                     ^^^^^^^^^^^^\n@@ -101,7 +101,7 @@ LL | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set:\n    |           +++++++++++++++++++++++++++++                                          ~~~~~~~~~~~~~~~\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:73:43\n+  --> $DIR/implicit_hasher.rs:74:43\n    |\n LL |         impl<K: Hash + Eq, V> Foo<u8> for HashMap<K, V> {\n    |                                           ^^^^^^^^^^^^^\n@@ -120,7 +120,7 @@ LL |                 (HashMap::default(), HashMap::with_capacity_and_hasher(10,\n    |                  ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: parameter of type `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:81:33\n+  --> $DIR/implicit_hasher.rs:82:33\n    |\n LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                                 ^^^^^^^^^^^^^^^^^\n@@ -135,7 +135,7 @@ LL |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i\n    |                     +++++++++++++++++++++++++++++            ~~~~~~~~~~~~~~~~~~~~\n \n error: parameter of type `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:81:63\n+  --> $DIR/implicit_hasher.rs:82:63\n    |\n LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                                                               ^^^^^^^^^^^^\n@@ -149,5 +149,16 @@ help: consider adding a type parameter\n LL |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32, S>) {}\n    |                     +++++++++++++++++++++++++++++                                          ~~~~~~~~~~~~~~~\n \n-error: aborting due to 10 previous errors\n+error: parameter of type `HashMap` should be generalized over different hashers\n+  --> $DIR/implicit_hasher.rs:101:35\n+   |\n+LL | pub async fn election_vote(_data: HashMap<i32, i32>) {}\n+   |                                   ^^^^^^^^^^^^^^^^^\n+   |\n+help: consider adding a type parameter\n+   |\n+LL | pub async fn election_vote<S: ::std::hash::BuildHasher>(_data: HashMap<i32, i32, S>) {}\n+   |                           +++++++++++++++++++++++++++++        ~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to 11 previous errors\n "}]}