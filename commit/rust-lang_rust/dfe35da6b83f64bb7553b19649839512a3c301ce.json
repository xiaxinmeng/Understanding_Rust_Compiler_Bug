{"sha": "dfe35da6b83f64bb7553b19649839512a3c301ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZTM1ZGE2YjgzZjY0YmI3NTUzYjE5NjQ5ODM5NTEyYTNjMzAxY2U=", "commit": {"author": {"name": "Oliver 'ker' Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-09T16:54:11Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T11:34:48Z"}, "message": "[breaking-change] don't glob export ast::TraitItemKind variants", "tree": {"sha": "e7348bffc69553401af4fe3758a8dac42bd6417a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7348bffc69553401af4fe3758a8dac42bd6417a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfe35da6b83f64bb7553b19649839512a3c301ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfe35da6b83f64bb7553b19649839512a3c301ce", "html_url": "https://github.com/rust-lang/rust/commit/dfe35da6b83f64bb7553b19649839512a3c301ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfe35da6b83f64bb7553b19649839512a3c301ce/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "url": "https://api.github.com/repos/rust-lang/rust/commits/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "html_url": "https://github.com/rust-lang/rust/commit/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b"}], "stats": {"total": 78, "additions": 38, "deletions": 40}, "files": [{"sha": "71f9d3c7e745840cf377e9dbcc0926384cbe9873", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe35da6b83f64bb7553b19649839512a3c301ce/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe35da6b83f64bb7553b19649839512a3c301ce/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=dfe35da6b83f64bb7553b19649839512a3c301ce", "patch": "@@ -616,7 +616,7 @@ impl fold::Folder for ReplaceBodyWithLoop {\n \n     fn fold_trait_item(&mut self, i: P<ast::TraitItem>) -> SmallVector<P<ast::TraitItem>> {\n         match i.node {\n-            ast::ConstTraitItem(..) => {\n+            ast::TraitItemKind::Const(..) => {\n                 self.within_static_or_const = true;\n                 let ret = fold::noop_fold_trait_item(i, self);\n                 self.within_static_or_const = false;"}, {"sha": "412e6a68a58cae1943682edfacd5b44b914a4911", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfe35da6b83f64bb7553b19649839512a3c301ce/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe35da6b83f64bb7553b19649839512a3c301ce/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=dfe35da6b83f64bb7553b19649839512a3c301ce", "patch": "@@ -728,15 +728,15 @@ pub fn lower_trait_item(lctx: &LoweringContext, i: &TraitItem) -> hir::TraitItem\n         name: i.ident.name,\n         attrs: lower_attrs(lctx, &i.attrs),\n         node: match i.node {\n-            ConstTraitItem(ref ty, ref default) => {\n+            TraitItemKind::Const(ref ty, ref default) => {\n                 hir::ConstTraitItem(lower_ty(lctx, ty),\n                                     default.as_ref().map(|x| lower_expr(lctx, x)))\n             }\n-            MethodTraitItem(ref sig, ref body) => {\n+            TraitItemKind::Method(ref sig, ref body) => {\n                 hir::MethodTraitItem(lower_method_sig(lctx, sig),\n                                      body.as_ref().map(|x| lower_block(lctx, x)))\n             }\n-            TypeTraitItem(ref bounds, ref default) => {\n+            TraitItemKind::Type(ref bounds, ref default) => {\n                 hir::TypeTraitItem(lower_bounds(lctx, bounds),\n                                    default.as_ref().map(|x| lower_ty(lctx, x)))\n             }"}, {"sha": "1d12abbb9cb79d63a64ab104cf1e07498d4e5e18", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfe35da6b83f64bb7553b19649839512a3c301ce/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe35da6b83f64bb7553b19649839512a3c301ce/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=dfe35da6b83f64bb7553b19649839512a3c301ce", "patch": "@@ -1020,22 +1020,22 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n     fn visit_trait_item(&mut self, trait_item: &ast::TraitItem) {\n         self.process_macro_use(trait_item.span, trait_item.id);\n         match trait_item.node {\n-            ast::ConstTraitItem(ref ty, Some(ref expr)) => {\n+            ast::TraitItemKind::Const(ref ty, Some(ref expr)) => {\n                 self.process_const(trait_item.id,\n                                    trait_item.ident.name,\n                                    trait_item.span,\n                                    &*ty,\n                                    &*expr);\n             }\n-            ast::MethodTraitItem(ref sig, ref body) => {\n+            ast::TraitItemKind::Method(ref sig, ref body) => {\n                 self.process_method(sig,\n                                     body.as_ref().map(|x| &**x),\n                                     trait_item.id,\n                                     trait_item.ident.name,\n                                     trait_item.span);\n             }\n-            ast::ConstTraitItem(_, None) |\n-            ast::TypeTraitItem(..) => {}\n+            ast::TraitItemKind::Const(_, None) |\n+            ast::TraitItemKind::Type(..) => {}\n         }\n     }\n "}, {"sha": "796e5923578f31eac3327703b689b85554ddfe7c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dfe35da6b83f64bb7553b19649839512a3c301ce/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe35da6b83f64bb7553b19649839512a3c301ce/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=dfe35da6b83f64bb7553b19649839512a3c301ce", "patch": "@@ -14,7 +14,6 @@ pub use self::Pat_::*;\n pub use self::PathListItem_::*;\n pub use self::StrStyle::*;\n pub use self::StructFieldKind::*;\n-pub use self::TraitItem_::*;\n pub use self::TyParamBound::*;\n pub use self::UnsafeSource::*;\n pub use self::ViewPath_::*;\n@@ -1324,15 +1323,15 @@ pub struct TraitItem {\n     pub id: NodeId,\n     pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n-    pub node: TraitItem_,\n+    pub node: TraitItemKind,\n     pub span: Span,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum TraitItem_ {\n-    ConstTraitItem(P<Ty>, Option<P<Expr>>),\n-    MethodTraitItem(MethodSig, Option<P<Block>>),\n-    TypeTraitItem(TyParamBounds, Option<P<Ty>>),\n+pub enum TraitItemKind {\n+    Const(P<Ty>, Option<P<Expr>>),\n+    Method(MethodSig, Option<P<Block>>),\n+    Type(TyParamBounds, Option<P<Ty>>),\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]"}, {"sha": "c4bbe709f346f6dbe46c0c8ed430eeb1c43b117f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfe35da6b83f64bb7553b19649839512a3c301ce/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe35da6b83f64bb7553b19649839512a3c301ce/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=dfe35da6b83f64bb7553b19649839512a3c301ce", "patch": "@@ -919,14 +919,14 @@ fn expand_annotatable(a: Annotatable,\n         },\n \n         Annotatable::TraitItem(it) => match it.node {\n-            ast::MethodTraitItem(_, Some(_)) => SmallVector::one(it.map(|ti| ast::TraitItem {\n+            ast::TraitItemKind::Method(_, Some(_)) => SmallVector::one(it.map(|ti| ast::TraitItem {\n                 id: ti.id,\n                 ident: ti.ident,\n                 attrs: ti.attrs,\n                 node: match ti.node  {\n-                    ast::MethodTraitItem(sig, Some(body)) => {\n+                    ast::TraitItemKind::Method(sig, Some(body)) => {\n                         let (sig, body) = expand_and_rename_method(sig, body, fld);\n-                        ast::MethodTraitItem(sig, Some(body))\n+                        ast::TraitItemKind::Method(sig, Some(body))\n                     }\n                     _ => unreachable!()\n                 },"}, {"sha": "9bf1dd49db572ceb0f00f62f606571f604aeb18e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfe35da6b83f64bb7553b19649839512a3c301ce/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe35da6b83f64bb7553b19649839512a3c301ce/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=dfe35da6b83f64bb7553b19649839512a3c301ce", "patch": "@@ -1071,17 +1071,17 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n \n     fn visit_trait_item(&mut self, ti: &'v ast::TraitItem) {\n         match ti.node {\n-            ast::ConstTraitItem(..) => {\n+            ast::TraitItemKind::Const(..) => {\n                 self.gate_feature(\"associated_consts\",\n                                   ti.span,\n                                   \"associated constants are experimental\")\n             }\n-            ast::MethodTraitItem(ref sig, _) => {\n+            ast::TraitItemKind::Method(ref sig, _) => {\n                 if sig.constness == ast::Constness::Const {\n                     self.gate_feature(\"const_fn\", ti.span, \"const fn is unstable\");\n                 }\n             }\n-            ast::TypeTraitItem(_, Some(_)) => {\n+            ast::TraitItemKind::Type(_, Some(_)) => {\n                 self.gate_feature(\"associated_type_defaults\", ti.span,\n                                   \"associated type defaults are unstable\");\n             }"}, {"sha": "08b0c0c539f5e3d45fa909a10e443102c111a811", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dfe35da6b83f64bb7553b19649839512a3c301ce/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe35da6b83f64bb7553b19649839512a3c301ce/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=dfe35da6b83f64bb7553b19649839512a3c301ce", "patch": "@@ -969,16 +969,16 @@ pub fn noop_fold_trait_item<T: Folder>(i: P<TraitItem>, folder: &mut T)\n         ident: folder.fold_ident(ident),\n         attrs: fold_attrs(attrs, folder),\n         node: match node {\n-            ConstTraitItem(ty, default) => {\n-                ConstTraitItem(folder.fold_ty(ty),\n+            TraitItemKind::Const(ty, default) => {\n+                TraitItemKind::Const(folder.fold_ty(ty),\n                                default.map(|x| folder.fold_expr(x)))\n             }\n-            MethodTraitItem(sig, body) => {\n-                MethodTraitItem(noop_fold_method_sig(sig, folder),\n+            TraitItemKind::Method(sig, body) => {\n+                TraitItemKind::Method(noop_fold_method_sig(sig, folder),\n                                 body.map(|x| folder.fold_block(x)))\n             }\n-            TypeTraitItem(bounds, default) => {\n-                TypeTraitItem(folder.fold_bounds(bounds),\n+            TraitItemKind::Type(bounds, default) => {\n+                TraitItemKind::Type(folder.fold_bounds(bounds),\n                               default.map(|x| folder.fold_ty(x)))\n             }\n         },"}, {"sha": "d8fab03d21a09ca3c8af2711949bd312450d92ed", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dfe35da6b83f64bb7553b19649839512a3c301ce/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe35da6b83f64bb7553b19649839512a3c301ce/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=dfe35da6b83f64bb7553b19649839512a3c301ce", "patch": "@@ -13,11 +13,11 @@ pub use self::PathParsingMode::*;\n use abi::{self, Abi};\n use ast::BareFnTy;\n use ast::{RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n-use ast::{Public, Unsafety};\n-use ast::{Mod, Arg, Arm, Attribute, BindingMode};\n+use ast::Unsafety;\n+use ast::{Mod, Arg, Arm, Attribute, BindingMode, TraitItemKind};\n use ast::Block;\n use ast::{BlockCheckMode, CaptureBy};\n-use ast::{Constness, ConstTraitItem, Crate, CrateConfig};\n+use ast::{Constness, Crate, CrateConfig};\n use ast::{Decl, DeclKind};\n use ast::{EMPTY_CTXT, EnumDef, ExplicitSelf};\n use ast::{Expr, ExprKind};\n@@ -39,7 +39,6 @@ use ast::StrStyle;\n use ast::SelfKind;\n use ast::{Delimited, SequenceRepetition, TokenTree, TraitItem, TraitRef};\n use ast::{Ty, TyKind, TypeBinding, TyParam, TyParamBounds};\n-use ast::TypeTraitItem;\n use ast::UnnamedField;\n use ast::{ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n use ast::{Visibility, WhereClause};\n@@ -1188,7 +1187,7 @@ impl<'a> Parser<'a> {\n             let (name, node) = if p.eat_keyword(keywords::Type) {\n                 let TyParam {ident, bounds, default, ..} = try!(p.parse_ty_param());\n                 try!(p.expect(&token::Semi));\n-                (ident, TypeTraitItem(bounds, default))\n+                (ident, TraitItemKind::Type(bounds, default))\n             } else if p.is_const_item() {\n                 try!(p.expect_keyword(keywords::Const));\n                 let ident = try!(p.parse_ident());\n@@ -1203,7 +1202,7 @@ impl<'a> Parser<'a> {\n                     try!(p.expect(&token::Semi));\n                     None\n                 };\n-                (ident, ConstTraitItem(ty, default))\n+                (ident, TraitItemKind::Const(ty, default))\n             } else {\n                 let (constness, unsafety, abi) = try!(p.parse_fn_front_matter());\n \n@@ -1247,7 +1246,7 @@ impl<'a> Parser<'a> {\n                                        token_str)[..]))\n                   }\n                 };\n-                (ident, ast::MethodTraitItem(sig, body))\n+                (ident, ast::TraitItemKind::Method(sig, body))\n             };\n \n             Ok(P(TraitItem {"}, {"sha": "6e8f0781b4e5f77d8ece7c111a8bb0688254a214", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfe35da6b83f64bb7553b19649839512a3c301ce/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe35da6b83f64bb7553b19649839512a3c301ce/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=dfe35da6b83f64bb7553b19649839512a3c301ce", "patch": "@@ -1552,12 +1552,12 @@ impl<'a> State<'a> {\n         try!(self.maybe_print_comment(ti.span.lo));\n         try!(self.print_outer_attributes(&ti.attrs));\n         match ti.node {\n-            ast::ConstTraitItem(ref ty, ref default) => {\n+            ast::TraitItemKind::Const(ref ty, ref default) => {\n                 try!(self.print_associated_const(ti.ident, &ty,\n                                                  default.as_ref().map(|expr| &**expr),\n                                                  ast::Inherited));\n             }\n-            ast::MethodTraitItem(ref sig, ref body) => {\n+            ast::TraitItemKind::Method(ref sig, ref body) => {\n                 if body.is_some() {\n                     try!(self.head(\"\"));\n                 }\n@@ -1569,7 +1569,7 @@ impl<'a> State<'a> {\n                     try!(word(&mut self.s, \";\"));\n                 }\n             }\n-            ast::TypeTraitItem(ref bounds, ref default) => {\n+            ast::TraitItemKind::Type(ref bounds, ref default) => {\n                 try!(self.print_associated_type(ti.ident, Some(bounds),\n                                                 default.as_ref().map(|ty| &**ty)));\n             }"}, {"sha": "66ac370c149f8c63e2f0b4cba1b5e7e39d41e0b4", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfe35da6b83f64bb7553b19649839512a3c301ce/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe35da6b83f64bb7553b19649839512a3c301ce/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=dfe35da6b83f64bb7553b19649839512a3c301ce", "patch": "@@ -565,20 +565,20 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n     visitor.visit_ident(trait_item.span, trait_item.ident);\n     walk_list!(visitor, visit_attribute, &trait_item.attrs);\n     match trait_item.node {\n-        ConstTraitItem(ref ty, ref default) => {\n+        TraitItemKind::Const(ref ty, ref default) => {\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, default);\n         }\n-        MethodTraitItem(ref sig, None) => {\n+        TraitItemKind::Method(ref sig, None) => {\n             visitor.visit_explicit_self(&sig.explicit_self);\n             visitor.visit_generics(&sig.generics);\n             walk_fn_decl(visitor, &sig.decl);\n         }\n-        MethodTraitItem(ref sig, Some(ref body)) => {\n+        TraitItemKind::Method(ref sig, Some(ref body)) => {\n             visitor.visit_fn(FnKind::Method(trait_item.ident, sig, None), &sig.decl,\n                              body, trait_item.span, trait_item.id);\n         }\n-        TypeTraitItem(ref bounds, ref default) => {\n+        TraitItemKind::Type(ref bounds, ref default) => {\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n             walk_list!(visitor, visit_ty, default);\n         }"}]}