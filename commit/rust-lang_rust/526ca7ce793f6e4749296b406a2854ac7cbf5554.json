{"sha": "526ca7ce793f6e4749296b406a2854ac7cbf5554", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNmNhN2NlNzkzZjZlNDc0OTI5NmI0MDZhMjg1NGFjN2NiZjU1NTQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-10-01T17:53:03Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-10-01T19:15:35Z"}, "message": "All `proc_macro_span` APIs tracked at #54725 now", "tree": {"sha": "c16fd5ebc9f8e7bf89e30d5ba6413b8e184e2788", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c16fd5ebc9f8e7bf89e30d5ba6413b8e184e2788"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/526ca7ce793f6e4749296b406a2854ac7cbf5554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/526ca7ce793f6e4749296b406a2854ac7cbf5554", "html_url": "https://github.com/rust-lang/rust/commit/526ca7ce793f6e4749296b406a2854ac7cbf5554", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/526ca7ce793f6e4749296b406a2854ac7cbf5554/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76625234924bb9dbdd9d4783c227999f7e352c73", "url": "https://api.github.com/repos/rust-lang/rust/commits/76625234924bb9dbdd9d4783c227999f7e352c73", "html_url": "https://github.com/rust-lang/rust/commit/76625234924bb9dbdd9d4783c227999f7e352c73"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "1a2b16a4fed063654eb6b59e0c0e4f9e51470783", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/526ca7ce793f6e4749296b406a2854ac7cbf5554/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526ca7ce793f6e4749296b406a2854ac7cbf5554/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=526ca7ce793f6e4749296b406a2854ac7cbf5554", "patch": "@@ -298,7 +298,7 @@ impl Span {\n     }\n \n     /// The original source file into which this span points.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn source_file(&self) -> SourceFile {\n         SourceFile {\n             source_file: __internal::lookup_char_pos(self.0.lo()).file,\n@@ -307,21 +307,21 @@ impl Span {\n \n     /// The `Span` for the tokens in the previous macro expansion from which\n     /// `self` was generated from, if any.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn parent(&self) -> Option<Span> {\n         self.0.parent().map(Span)\n     }\n \n     /// The span for the origin source code that `self` was generated from. If\n     /// this `Span` wasn't generated from other macro expansions then the return\n     /// value is the same as `*self`.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn source(&self) -> Span {\n         Span(self.0.source_callsite())\n     }\n \n     /// Get the starting line/column in the source file for this span.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn start(&self) -> LineColumn {\n         let loc = __internal::lookup_char_pos(self.0.lo());\n         LineColumn {\n@@ -331,7 +331,7 @@ impl Span {\n     }\n \n     /// Get the ending line/column in the source file for this span.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn end(&self) -> LineColumn {\n         let loc = __internal::lookup_char_pos(self.0.hi());\n         LineColumn {\n@@ -343,7 +343,7 @@ impl Span {\n     /// Create a new span encompassing `self` and `other`.\n     ///\n     /// Returns `None` if `self` and `other` are from different files.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn join(&self, other: Span) -> Option<Span> {\n         let self_loc = __internal::lookup_char_pos(self.0.lo());\n         let other_loc = __internal::lookup_char_pos(other.0.lo());\n@@ -355,20 +355,20 @@ impl Span {\n \n     /// Creates a new span with the same line/column information as `self` but\n     /// that resolves symbols as though it were at `other`.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn resolved_at(&self, other: Span) -> Span {\n         Span(self.0.with_ctxt(other.0.ctxt()))\n     }\n \n     /// Creates a new span with the same name resolution behavior as `self` but\n     /// with the line/column information of `other`.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn located_at(&self, other: Span) -> Span {\n         other.resolved_at(*self)\n     }\n \n     /// Compares to spans to see if they're equal.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn eq(&self, other: &Span) -> bool {\n         self.0 == other.0\n     }\n@@ -391,33 +391,33 @@ impl fmt::Debug for Span {\n }\n \n /// A line-column pair representing the start or end of a `Span`.\n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub struct LineColumn {\n     /// The 1-indexed line in the source file on which the span starts or ends (inclusive).\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub line: usize,\n     /// The 0-indexed column (in UTF-8 characters) in the source file on which\n     /// the span starts or ends (inclusive).\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub column: usize\n }\n \n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl !Send for LineColumn {}\n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl !Sync for LineColumn {}\n \n /// The source file of a given `Span`.\n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n #[derive(Clone)]\n pub struct SourceFile {\n     source_file: Lrc<syntax_pos::SourceFile>,\n }\n \n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl !Send for SourceFile {}\n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl !Sync for SourceFile {}\n \n impl SourceFile {\n@@ -431,7 +431,7 @@ impl SourceFile {\n     /// the command line, the path as given may not actually be valid.\n     ///\n     /// [`is_real`]: #method.is_real\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn path(&self) -> PathBuf {\n         match self.source_file.name {\n             FileName::Real(ref path) => path.clone(),\n@@ -441,7 +441,7 @@ impl SourceFile {\n \n     /// Returns `true` if this source file is a real source file, and not generated by an external\n     /// macro's expansion.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn is_real(&self) -> bool {\n         // This is a hack until intercrate spans are implemented and we can have real source files\n         // for spans generated in external macros.\n@@ -451,7 +451,7 @@ impl SourceFile {\n }\n \n \n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl fmt::Debug for SourceFile {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"SourceFile\")\n@@ -461,14 +461,14 @@ impl fmt::Debug for SourceFile {\n     }\n }\n \n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl PartialEq for SourceFile {\n     fn eq(&self, other: &Self) -> bool {\n         Lrc::ptr_eq(&self.source_file, &other.source_file)\n     }\n }\n \n-#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl Eq for SourceFile {}\n \n /// A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).\n@@ -679,7 +679,7 @@ impl Group {\n     /// pub fn span_open(&self) -> Span {\n     ///                 ^\n     /// ```\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn span_open(&self) -> Span {\n         Span(self.span.open)\n     }\n@@ -690,7 +690,7 @@ impl Group {\n     /// pub fn span_close(&self) -> Span {\n     ///                        ^\n     /// ```\n-    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn span_close(&self) -> Span {\n         Span(self.span.close)\n     }"}]}