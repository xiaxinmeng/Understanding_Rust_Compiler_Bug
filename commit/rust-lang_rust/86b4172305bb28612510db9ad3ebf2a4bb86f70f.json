{"sha": "86b4172305bb28612510db9ad3ebf2a4bb86f70f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2YjQxNzIzMDViYjI4NjEyNTEwZGI5YWQzZWJmMmE0YmI4NmY3MGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-24T08:14:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-24T08:14:30Z"}, "message": "Auto merge of #77028 - andjo403:mini, r=matthewjasper\n\nMove MiniSet to data_structures\n\nremove the need for T to be copy from MiniSet as was done for MiniMap\n\nMiniMap and MiniSet was added by https://github.com/rust-lang/rust/pull/72412\n\nthink that this can be used in https://github.com/rust-lang/rust/pull/68828", "tree": {"sha": "0f92ff0fad8ef55d42fa819d584339fdf623134e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f92ff0fad8ef55d42fa819d584339fdf623134e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86b4172305bb28612510db9ad3ebf2a4bb86f70f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86b4172305bb28612510db9ad3ebf2a4bb86f70f", "html_url": "https://github.com/rust-lang/rust/commit/86b4172305bb28612510db9ad3ebf2a4bb86f70f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86b4172305bb28612510db9ad3ebf2a4bb86f70f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5562bb6d749df0469cd1407e97252f51ecbef066", "url": "https://api.github.com/repos/rust-lang/rust/commits/5562bb6d749df0469cd1407e97252f51ecbef066", "html_url": "https://github.com/rust-lang/rust/commit/5562bb6d749df0469cd1407e97252f51ecbef066"}, {"sha": "6586c37beca21869f698ef2de10d1df7be7e7879", "url": "https://api.github.com/repos/rust-lang/rust/commits/6586c37beca21869f698ef2de10d1df7be7e7879", "html_url": "https://github.com/rust-lang/rust/commit/6586c37beca21869f698ef2de10d1df7be7e7879"}], "stats": {"total": 96, "additions": 46, "deletions": 50}, "files": [{"sha": "26a9e64b85af429789925efb6b0833bb3c8430dd", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b4172305bb28612510db9ad3ebf2a4bb86f70f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/86b4172305bb28612510db9ad3ebf2a4bb86f70f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=86b4172305bb28612510db9ad3ebf2a4bb86f70f", "patch": "@@ -3638,7 +3638,6 @@ dependencies = [\n name = \"rustc_infer\"\n version = \"0.0.0\"\n dependencies = [\n- \"arrayvec\",\n  \"rustc_ast\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n@@ -3778,7 +3777,6 @@ dependencies = [\n name = \"rustc_middle\"\n version = \"0.0.0\"\n dependencies = [\n- \"arrayvec\",\n  \"bitflags\",\n  \"chalk-ir\",\n  \"measureme\","}, {"sha": "5990e94ab7e981660f143582ec7b30b75ca07307", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86b4172305bb28612510db9ad3ebf2a4bb86f70f/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b4172305bb28612510db9ad3ebf2a4bb86f70f/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=86b4172305bb28612510db9ad3ebf2a4bb86f70f", "patch": "@@ -102,6 +102,7 @@ pub mod work_queue;\n pub use atomic_ref::AtomicRef;\n pub mod frozen;\n pub mod mini_map;\n+pub mod mini_set;\n pub mod tagged_ptr;\n pub mod temp_dir;\n pub mod unhash;"}, {"sha": "9d45af723deb673463a75aac988cbff7c6282ecb", "filename": "compiler/rustc_data_structures/src/mini_set.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/86b4172305bb28612510db9ad3ebf2a4bb86f70f/compiler%2Frustc_data_structures%2Fsrc%2Fmini_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b4172305bb28612510db9ad3ebf2a4bb86f70f/compiler%2Frustc_data_structures%2Fsrc%2Fmini_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fmini_set.rs?ref=86b4172305bb28612510db9ad3ebf2a4bb86f70f", "patch": "@@ -0,0 +1,41 @@\n+use crate::fx::FxHashSet;\n+use arrayvec::ArrayVec;\n+use std::hash::Hash;\n+/// Small-storage-optimized implementation of a set.\n+///\n+/// Stores elements in a small array up to a certain length\n+/// and switches to `HashSet` when that length is exceeded.\n+pub enum MiniSet<T> {\n+    Array(ArrayVec<[T; 8]>),\n+    Set(FxHashSet<T>),\n+}\n+\n+impl<T: Eq + Hash> MiniSet<T> {\n+    /// Creates an empty `MiniSet`.\n+    pub fn new() -> Self {\n+        MiniSet::Array(ArrayVec::new())\n+    }\n+\n+    /// Adds a value to the set.\n+    ///\n+    /// If the set did not have this value present, true is returned.\n+    ///\n+    /// If the set did have this value present, false is returned.\n+    pub fn insert(&mut self, elem: T) -> bool {\n+        match self {\n+            MiniSet::Array(array) => {\n+                if array.iter().any(|e| *e == elem) {\n+                    false\n+                } else {\n+                    if let Err(error) = array.try_push(elem) {\n+                        let mut set: FxHashSet<T> = array.drain(..).collect();\n+                        set.insert(error.element());\n+                        *self = MiniSet::Set(set);\n+                    }\n+                    true\n+                }\n+            }\n+            MiniSet::Set(set) => set.insert(elem),\n+        }\n+    }\n+}"}, {"sha": "5dba4106c9423b5274c864286f42459f6ad003a5", "filename": "compiler/rustc_infer/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86b4172305bb28612510db9ad3ebf2a4bb86f70f/compiler%2Frustc_infer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/86b4172305bb28612510db9ad3ebf2a4bb86f70f/compiler%2Frustc_infer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2FCargo.toml?ref=86b4172305bb28612510db9ad3ebf2a4bb86f70f", "patch": "@@ -21,5 +21,4 @@ rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_target = { path = \"../rustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n-arrayvec = { version = \"0.5.1\", default-features = false }\n rustc_ast = { path = \"../rustc_ast\" }"}, {"sha": "21b0836563f6c1c744e7fef68040dd32590a9bdd", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b4172305bb28612510db9ad3ebf2a4bb86f70f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b4172305bb28612510db9ad3ebf2a4bb86f70f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=86b4172305bb28612510db9ad3ebf2a4bb86f70f", "patch": "@@ -1,9 +1,9 @@\n use crate::infer::outlives::env::RegionBoundPairs;\n use crate::infer::{GenericKind, VerifyBound};\n use rustc_data_structures::captures::Captures;\n+use rustc_data_structures::mini_set::MiniSet;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n-use rustc_middle::ty::walk::MiniSet;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n /// The `TypeOutlives` struct has the job of \"lowering\" a `T: 'a`"}, {"sha": "a5a860a38b3e8f45d4d24f868ba37be82c911326", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86b4172305bb28612510db9ad3ebf2a4bb86f70f/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/86b4172305bb28612510db9ad3ebf2a4bb86f70f/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=86b4172305bb28612510db9ad3ebf2a4bb86f70f", "patch": "@@ -28,6 +28,5 @@ rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n chalk-ir = \"0.21.0\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n-arrayvec = { version = \"0.5.1\", default-features = false }\n measureme = \"0.7.1\"\n rustc_session = { path = \"../rustc_session\" }"}, {"sha": "ca992d36e9545d5080f6b544cd28290f50e70a22", "filename": "compiler/rustc_middle/src/ty/outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b4172305bb28612510db9ad3ebf2a4bb86f70f/compiler%2Frustc_middle%2Fsrc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b4172305bb28612510db9ad3ebf2a4bb86f70f/compiler%2Frustc_middle%2Fsrc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Foutlives.rs?ref=86b4172305bb28612510db9ad3ebf2a4bb86f70f", "patch": "@@ -3,8 +3,8 @@\n // RFC for reference.\n \n use crate::ty::subst::{GenericArg, GenericArgKind};\n-use crate::ty::walk::MiniSet;\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use rustc_data_structures::mini_set::MiniSet;\n use smallvec::SmallVec;\n \n #[derive(Debug)]"}, {"sha": "225ea2399fbfd95ac2f3551e69a15deb3a550205", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b4172305bb28612510db9ad3ebf2a4bb86f70f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b4172305bb28612510db9ad3ebf2a4bb86f70f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=86b4172305bb28612510db9ad3ebf2a4bb86f70f", "patch": "@@ -2,9 +2,9 @@ use crate::ty::subst::{GenericArg, Subst};\n use crate::ty::{self, DefIdTree, Ty, TyCtxt};\n \n use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::mini_set::MiniSet;\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n-use rustc_middle::ty::walk::MiniSet;\n \n // `pretty` is a separate module only for organization.\n mod pretty;"}, {"sha": "80ade7dda4ca13aa0b2cb974f15b66b823a92337", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 43, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/86b4172305bb28612510db9ad3ebf2a4bb86f70f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b4172305bb28612510db9ad3ebf2a4bb86f70f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=86b4172305bb28612510db9ad3ebf2a4bb86f70f", "patch": "@@ -3,50 +3,8 @@\n \n use crate::ty;\n use crate::ty::subst::{GenericArg, GenericArgKind};\n-use arrayvec::ArrayVec;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::mini_set::MiniSet;\n use smallvec::{self, SmallVec};\n-use std::hash::Hash;\n-\n-/// Small-storage-optimized implementation of a set\n-/// made specifically for walking type tree.\n-///\n-/// Stores elements in a small array up to a certain length\n-/// and switches to `HashSet` when that length is exceeded.\n-pub enum MiniSet<T> {\n-    Array(ArrayVec<[T; 8]>),\n-    Set(FxHashSet<T>),\n-}\n-\n-impl<T: Eq + Hash + Copy> MiniSet<T> {\n-    /// Creates an empty `MiniSet`.\n-    pub fn new() -> Self {\n-        MiniSet::Array(ArrayVec::new())\n-    }\n-\n-    /// Adds a value to the set.\n-    ///\n-    /// If the set did not have this value present, true is returned.\n-    ///\n-    /// If the set did have this value present, false is returned.\n-    pub fn insert(&mut self, elem: T) -> bool {\n-        match self {\n-            MiniSet::Array(array) => {\n-                if array.iter().any(|e| *e == elem) {\n-                    false\n-                } else {\n-                    if array.try_push(elem).is_err() {\n-                        let mut set: FxHashSet<T> = array.iter().copied().collect();\n-                        set.insert(elem);\n-                        *self = MiniSet::Set(set);\n-                    }\n-                    true\n-                }\n-            }\n-            MiniSet::Set(set) => set.insert(elem),\n-        }\n-    }\n-}\n \n // The TypeWalker's stack is hot enough that it's worth going to some effort to\n // avoid heap allocations."}]}