{"sha": "4ad62488258972bdb0e2df225d100f99ef58dbad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZDYyNDg4MjU4OTcyYmRiMGUyZGYyMjVkMTAwZjk5ZWY1OGRiYWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-03T19:57:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-03T19:57:07Z"}, "message": "Auto merge of #69506 - Centril:stmt-semi-none, r=petrochenkov\n\nencode `;` stmt without expr as `StmtKind::Empty`\n\nInstead of encoding `;` statements without a an expression as a tuple in AST, encode it as `ast::StmtKind::Empty`.\n\nr? @petrochenkov", "tree": {"sha": "9fad9efa1cd3991235b3afda3f0bde98caad9a62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fad9efa1cd3991235b3afda3f0bde98caad9a62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ad62488258972bdb0e2df225d100f99ef58dbad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ad62488258972bdb0e2df225d100f99ef58dbad", "html_url": "https://github.com/rust-lang/rust/commit/4ad62488258972bdb0e2df225d100f99ef58dbad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ad62488258972bdb0e2df225d100f99ef58dbad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47", "html_url": "https://github.com/rust-lang/rust/commit/3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47"}, {"sha": "176fe3f8ac79e58e35793e6a92c75eed3c8e5b91", "url": "https://api.github.com/repos/rust-lang/rust/commits/176fe3f8ac79e58e35793e6a92c75eed3c8e5b91", "html_url": "https://github.com/rust-lang/rust/commit/176fe3f8ac79e58e35793e6a92c75eed3c8e5b91"}], "stats": {"total": 175, "additions": 73, "deletions": 102}, "files": [{"sha": "88564647d61f953f30f870ddaac7aa25bfb3858c", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=4ad62488258972bdb0e2df225d100f99ef58dbad", "patch": "@@ -913,6 +913,8 @@ pub enum StmtKind {\n     Expr(P<Expr>),\n     /// Expr with a trailing semi-colon.\n     Semi(P<Expr>),\n+    /// Just a trailing semi-colon.\n+    Empty,\n     /// Macro.\n     Mac(P<(Mac, MacStmtStyle, AttrVec)>),\n }"}, {"sha": "53515cee28119df54ab6963eb909bf6c9defeb3d", "filename": "src/librustc_ast/attr/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fattr%2Fmod.rs?ref=4ad62488258972bdb0e2df225d100f99ef58dbad", "patch": "@@ -674,8 +674,8 @@ impl HasAttrs for StmtKind {\n     fn attrs(&self) -> &[Attribute] {\n         match *self {\n             StmtKind::Local(ref local) => local.attrs(),\n-            StmtKind::Item(..) => &[],\n             StmtKind::Expr(ref expr) | StmtKind::Semi(ref expr) => expr.attrs(),\n+            StmtKind::Empty | StmtKind::Item(..) => &[],\n             StmtKind::Mac(ref mac) => {\n                 let (_, _, ref attrs) = **mac;\n                 attrs.attrs()\n@@ -686,9 +686,8 @@ impl HasAttrs for StmtKind {\n     fn visit_attrs(&mut self, f: impl FnOnce(&mut Vec<Attribute>)) {\n         match self {\n             StmtKind::Local(local) => local.visit_attrs(f),\n-            StmtKind::Item(..) => {}\n-            StmtKind::Expr(expr) => expr.visit_attrs(f),\n-            StmtKind::Semi(expr) => expr.visit_attrs(f),\n+            StmtKind::Expr(expr) | StmtKind::Semi(expr) => expr.visit_attrs(f),\n+            StmtKind::Empty | StmtKind::Item(..) => {}\n             StmtKind::Mac(mac) => {\n                 let (_mac, _style, attrs) = mac.deref_mut();\n                 attrs.visit_attrs(f);"}, {"sha": "a9b06f602f6299a323c958a444edb3156d153533", "filename": "src/librustc_ast/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Flibrustc_ast%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Flibrustc_ast%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fmut_visit.rs?ref=4ad62488258972bdb0e2df225d100f99ef58dbad", "patch": "@@ -1265,6 +1265,7 @@ pub fn noop_flat_map_stmt_kind<T: MutVisitor>(\n         StmtKind::Item(item) => vis.flat_map_item(item).into_iter().map(StmtKind::Item).collect(),\n         StmtKind::Expr(expr) => vis.filter_map_expr(expr).into_iter().map(StmtKind::Expr).collect(),\n         StmtKind::Semi(expr) => vis.filter_map_expr(expr).into_iter().map(StmtKind::Semi).collect(),\n+        StmtKind::Empty => smallvec![StmtKind::Empty],\n         StmtKind::Mac(mut mac) => {\n             let (mac_, _semi, attrs) = mac.deref_mut();\n             vis.visit_mac(mac_);"}, {"sha": "c92a4db6dee0b57507e19e0990690ca380ce83d9", "filename": "src/librustc_ast/visit.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Flibrustc_ast%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Flibrustc_ast%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fvisit.rs?ref=4ad62488258972bdb0e2df225d100f99ef58dbad", "patch": "@@ -669,9 +669,8 @@ pub fn walk_stmt<'a, V: Visitor<'a>>(visitor: &mut V, statement: &'a Stmt) {\n     match statement.kind {\n         StmtKind::Local(ref local) => visitor.visit_local(local),\n         StmtKind::Item(ref item) => visitor.visit_item(item),\n-        StmtKind::Expr(ref expression) | StmtKind::Semi(ref expression) => {\n-            visitor.visit_expr(expression)\n-        }\n+        StmtKind::Expr(ref expr) | StmtKind::Semi(ref expr) => visitor.visit_expr(expr),\n+        StmtKind::Empty => {}\n         StmtKind::Mac(ref mac) => {\n             let (ref mac, _, ref attrs) = **mac;\n             visitor.visit_mac(mac);"}, {"sha": "df71b05ac2c98e42d749afe2255fd4fe26468fca", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=4ad62488258972bdb0e2df225d100f99ef58dbad", "patch": "@@ -2281,6 +2281,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             }\n             StmtKind::Expr(ref e) => hir::StmtKind::Expr(self.lower_expr(e)),\n             StmtKind::Semi(ref e) => hir::StmtKind::Semi(self.lower_expr(e)),\n+            StmtKind::Empty => return smallvec![],\n             StmtKind::Mac(..) => panic!(\"shouldn't exist here\"),\n         };\n         smallvec![hir::Stmt { hir_id: self.lower_node_id(s.id), kind, span: s.span }]"}, {"sha": "f95c154bb3b5a8228d4a9c1cd443b922ab024a80", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=4ad62488258972bdb0e2df225d100f99ef58dbad", "patch": "@@ -1446,19 +1446,13 @@ impl<'a> State<'a> {\n                 }\n             }\n             ast::StmtKind::Semi(ref expr) => {\n-                match expr.kind {\n-                    // Filter out empty `Tup` exprs created for the `redundant_semicolon`\n-                    // lint, as they shouldn't be visible and interact poorly\n-                    // with proc macros.\n-                    ast::ExprKind::Tup(ref exprs) if exprs.is_empty() && expr.attrs.is_empty() => {\n-                        ()\n-                    }\n-                    _ => {\n-                        self.space_if_not_bol();\n-                        self.print_expr_outer_attr_style(expr, false);\n-                        self.s.word(\";\");\n-                    }\n-                }\n+                self.space_if_not_bol();\n+                self.print_expr_outer_attr_style(expr, false);\n+                self.s.word(\";\");\n+            }\n+            ast::StmtKind::Empty => {\n+                self.space_if_not_bol();\n+                self.s.word(\";\");\n             }\n             ast::StmtKind::Mac(ref mac) => {\n                 let (ref mac, style, ref attrs) = **mac;"}, {"sha": "e1680015beadd41a4b97fd5205718857dfacdbf0", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=4ad62488258972bdb0e2df225d100f99ef58dbad", "patch": "@@ -775,7 +775,10 @@ impl EarlyLintPass for UnusedDocComment {\n             ast::StmtKind::Local(..) => \"statements\",\n             ast::StmtKind::Item(..) => \"inner items\",\n             // expressions will be reported by `check_expr`.\n-            ast::StmtKind::Semi(..) | ast::StmtKind::Expr(..) | ast::StmtKind::Mac(..) => return,\n+            ast::StmtKind::Empty\n+            | ast::StmtKind::Semi(_)\n+            | ast::StmtKind::Expr(_)\n+            | ast::StmtKind::Mac(_) => return,\n         };\n \n         warn_if_doc(cx, stmt.span, kind, stmt.kind.attrs());"}, {"sha": "825ac04bc09201deafccfd913ee8d701bc05f639", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=4ad62488258972bdb0e2df225d100f99ef58dbad", "patch": "@@ -113,7 +113,7 @@ macro_rules! early_lint_passes {\n                 WhileTrue: WhileTrue,\n                 NonAsciiIdents: NonAsciiIdents,\n                 IncompleteFeatures: IncompleteFeatures,\n-                RedundantSemicolon: RedundantSemicolon,\n+                RedundantSemicolons: RedundantSemicolons,\n                 UnusedDocComment: UnusedDocComment,\n             ]\n         );\n@@ -274,7 +274,8 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n         UNUSED_EXTERN_CRATES,\n         UNUSED_FEATURES,\n         UNUSED_LABELS,\n-        UNUSED_PARENS\n+        UNUSED_PARENS,\n+        REDUNDANT_SEMICOLONS\n     );\n \n     add_lint_group!(\n@@ -307,6 +308,7 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n     store.register_renamed(\"unused_doc_comment\", \"unused_doc_comments\");\n     store.register_renamed(\"async_idents\", \"keyword_idents\");\n     store.register_renamed(\"exceeding_bitshifts\", \"arithmetic_overflow\");\n+    store.register_renamed(\"redundant_semicolon\", \"redundant_semicolons\");\n     store.register_removed(\"unknown_features\", \"replaced by an error\");\n     store.register_removed(\"unsigned_negation\", \"replaced by negate_unsigned feature gate\");\n     store.register_removed(\"negate_unsigned\", \"cast a signed value instead\");"}, {"sha": "0f807cd497e56b93fdb8d9ea93fa68b73ddbf6c3", "filename": "src/librustc_lint/redundant_semicolon.rs", "status": "modified", "additions": 28, "deletions": 37, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Flibrustc_lint%2Fredundant_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Flibrustc_lint%2Fredundant_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fredundant_semicolon.rs?ref=4ad62488258972bdb0e2df225d100f99ef58dbad", "patch": "@@ -1,50 +1,41 @@\n use crate::{EarlyContext, EarlyLintPass, LintContext};\n-use rustc_ast::ast::{ExprKind, Stmt, StmtKind};\n+use rustc_ast::ast::{Block, StmtKind};\n use rustc_errors::Applicability;\n+use rustc_span::Span;\n \n declare_lint! {\n-    pub REDUNDANT_SEMICOLON,\n+    pub REDUNDANT_SEMICOLONS,\n     Warn,\n     \"detects unnecessary trailing semicolons\"\n }\n \n-declare_lint_pass!(RedundantSemicolon => [REDUNDANT_SEMICOLON]);\n+declare_lint_pass!(RedundantSemicolons => [REDUNDANT_SEMICOLONS]);\n \n-impl EarlyLintPass for RedundantSemicolon {\n-    fn check_stmt(&mut self, cx: &EarlyContext<'_>, stmt: &Stmt) {\n-        if let StmtKind::Semi(expr) = &stmt.kind {\n-            if let ExprKind::Tup(ref v) = &expr.kind {\n-                if v.is_empty() {\n-                    // Strings of excess semicolons are encoded as empty tuple expressions\n-                    // during the parsing stage, so we check for empty tuple expressions\n-                    // which span only semicolons\n-                    if let Ok(source_str) = cx.sess().source_map().span_to_snippet(stmt.span) {\n-                        if source_str.chars().all(|c| c == ';') {\n-                            let multiple = (stmt.span.hi() - stmt.span.lo()).0 > 1;\n-                            let msg = if multiple {\n-                                \"unnecessary trailing semicolons\"\n-                            } else {\n-                                \"unnecessary trailing semicolon\"\n-                            };\n-                            cx.struct_span_lint(REDUNDANT_SEMICOLON, stmt.span, |lint| {\n-                                let mut err = lint.build(&msg);\n-                                let suggest_msg = if multiple {\n-                                    \"remove these semicolons\"\n-                                } else {\n-                                    \"remove this semicolon\"\n-                                };\n-                                err.span_suggestion(\n-                                    stmt.span,\n-                                    &suggest_msg,\n-                                    String::new(),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n-                                err.emit();\n-                            });\n-                        }\n-                    }\n-                }\n+impl EarlyLintPass for RedundantSemicolons {\n+    fn check_block(&mut self, cx: &EarlyContext<'_>, block: &Block) {\n+        let mut seq = None;\n+        for stmt in block.stmts.iter() {\n+            match (&stmt.kind, &mut seq) {\n+                (StmtKind::Empty, None) => seq = Some((stmt.span, false)),\n+                (StmtKind::Empty, Some(seq)) => *seq = (seq.0.to(stmt.span), true),\n+                (_, seq) => maybe_lint_redundant_semis(cx, seq),\n             }\n         }\n+        maybe_lint_redundant_semis(cx, &mut seq);\n+    }\n+}\n+\n+fn maybe_lint_redundant_semis(cx: &EarlyContext<'_>, seq: &mut Option<(Span, bool)>) {\n+    if let Some((span, multiple)) = seq.take() {\n+        cx.struct_span_lint(REDUNDANT_SEMICOLONS, span, |lint| {\n+            let (msg, rem) = if multiple {\n+                (\"unnecessary trailing semicolons\", \"remove these semicolons\")\n+            } else {\n+                (\"unnecessary trailing semicolon\", \"remove this semicolon\")\n+            };\n+            lint.build(msg)\n+                .span_suggestion(span, rem, String::new(), Applicability::MaybeIncorrect)\n+                .emit();\n+        });\n     }\n }"}, {"sha": "3864ec3aaa163be822f4e007d3a07a0025536870", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=4ad62488258972bdb0e2df225d100f99ef58dbad", "patch": "@@ -59,23 +59,10 @@ impl<'a> Parser<'a> {\n         } else if let Some(item) = self.parse_stmt_item(attrs.clone())? {\n             // FIXME: Bad copy of attrs\n             self.mk_stmt(lo.to(item.span), StmtKind::Item(P(item)))\n-        } else if self.token == token::Semi {\n+        } else if self.eat(&token::Semi) {\n             // Do not attempt to parse an expression if we're done here.\n             self.error_outer_attrs(&attrs);\n-            self.bump();\n-            let mut last_semi = lo;\n-            while self.token == token::Semi {\n-                last_semi = self.token.span;\n-                self.bump();\n-            }\n-            // We are encoding a string of semicolons as an an empty tuple that spans\n-            // the excess semicolons to preserve this info until the lint stage.\n-            let kind = StmtKind::Semi(self.mk_expr(\n-                lo.to(last_semi),\n-                ExprKind::Tup(Vec::new()),\n-                AttrVec::new(),\n-            ));\n-            self.mk_stmt(lo.to(last_semi), kind)\n+            self.mk_stmt(lo, StmtKind::Empty)\n         } else if self.token != token::CloseDelim(token::Brace) {\n             // Remainder are line-expr stmts.\n             let e = self.parse_expr_res(Restrictions::STMT_EXPR, Some(attrs.into()))?;\n@@ -144,12 +131,11 @@ impl<'a> Parser<'a> {\n     /// Error on outer attributes in this context.\n     /// Also error if the previous token was a doc comment.\n     fn error_outer_attrs(&self, attrs: &[Attribute]) {\n-        if !attrs.is_empty() {\n-            if matches!(self.prev_token.kind, TokenKind::DocComment(..)) {\n-                self.span_fatal_err(self.prev_token.span, Error::UselessDocComment).emit();\n+        if let [.., last] = attrs {\n+            if last.is_doc_comment() {\n+                self.span_fatal_err(last.span, Error::UselessDocComment).emit();\n             } else if attrs.iter().any(|a| a.style == AttrStyle::Outer) {\n-                self.struct_span_err(self.token.span, \"expected statement after outer attribute\")\n-                    .emit();\n+                self.struct_span_err(last.span, \"expected statement after outer attribute\").emit();\n             }\n         }\n     }\n@@ -401,6 +387,7 @@ impl<'a> Parser<'a> {\n                 self.expect_semi()?;\n                 eat_semi = false;\n             }\n+            StmtKind::Empty => eat_semi = false,\n             _ => {}\n         }\n "}, {"sha": "decee1f2f16291befeef349d7a89bce2bc441a7c", "filename": "src/test/ui/block-expr-precedence.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Ftest%2Fui%2Fblock-expr-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Ftest%2Fui%2Fblock-expr-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-expr-precedence.stderr?ref=4ad62488258972bdb0e2df225d100f99ef58dbad", "patch": "@@ -4,5 +4,5 @@ warning: unnecessary trailing semicolons\n LL |   if (true) { 12; };;; -num;\n    |                     ^^ help: remove these semicolons\n    |\n-   = note: `#[warn(redundant_semicolon)]` on by default\n+   = note: `#[warn(redundant_semicolons)]` on by default\n "}, {"sha": "818819f9ff67a53f6dacf8cebb17001163fd16a4", "filename": "src/test/ui/consts/const_let_eq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq.rs?ref=4ad62488258972bdb0e2df225d100f99ef58dbad", "patch": "@@ -5,6 +5,7 @@ struct Bar<T> { x: T }\n struct W(u32);\n struct A { a: u32 }\n \n+#[allow(redundant_semicolons)]\n const fn basics((a,): (u32,)) -> u32 {\n     // Deferred assignment:\n     let b: u32;"}, {"sha": "bc0ef26eb2fe525fa40afd77a91f5e59c82e3c1b", "filename": "src/test/ui/consts/const_let_eq_float.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq_float.rs?ref=4ad62488258972bdb0e2df225d100f99ef58dbad", "patch": "@@ -7,6 +7,7 @@ struct Bar<T> { x: T }\n struct W(f32);\n struct A { a: f32 }\n \n+#[allow(redundant_semicolons)]\n const fn basics((a,): (f32,)) -> f32 {\n     // Deferred assignment:\n     let b: f32;"}, {"sha": "08a5c6c2b634a3ddb73c6b31ab8d430da96aaa6a", "filename": "src/test/ui/lint/redundant-semicolon/redundant-semi-proc-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.rs?ref=4ad62488258972bdb0e2df225d100f99ef58dbad", "patch": "@@ -1,6 +1,6 @@\n // aux-build:redundant-semi-proc-macro-def.rs\n \n-#![deny(redundant_semicolon)]\n+#![deny(redundant_semicolons)]\n extern crate redundant_semi_proc_macro;\n use redundant_semi_proc_macro::should_preserve_spans;\n "}, {"sha": "a79fba9bf3f009897feee1ad0b447f8949a9d5e5", "filename": "src/test/ui/lint/redundant-semicolon/redundant-semi-proc-macro.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr?ref=4ad62488258972bdb0e2df225d100f99ef58dbad", "patch": "@@ -1,4 +1,4 @@\n-TokenStream [Ident { ident: \"fn\", span: #0 bytes(197..199) }, Ident { ident: \"span_preservation\", span: #0 bytes(200..217) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(217..219) }, Group { delimiter: Brace, stream: TokenStream [Ident { ident: \"let\", span: #0 bytes(227..230) }, Ident { ident: \"tst\", span: #0 bytes(231..234) }, Punct { ch: '=', spacing: Alone, span: #0 bytes(235..236) }, Literal { lit: Lit { kind: Integer, symbol: \"123\", suffix: None }, span: Span { lo: BytePos(237), hi: BytePos(240), ctxt: #0 } }, Punct { ch: ';', spacing: Joint, span: #0 bytes(240..241) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(241..242) }, Ident { ident: \"match\", span: #0 bytes(288..293) }, Ident { ident: \"tst\", span: #0 bytes(294..297) }, Group { delimiter: Brace, stream: TokenStream [Literal { lit: Lit { kind: Integer, symbol: \"123\", suffix: None }, span: Span { lo: BytePos(482), hi: BytePos(485), ctxt: #0 } }, Punct { ch: '=', spacing: Joint, span: #0 bytes(486..488) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(486..488) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(489..491) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(491..492) }, Ident { ident: \"_\", span: #0 bytes(501..502) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(503..505) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(503..505) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(506..508) }], span: #0 bytes(298..514) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(514..515) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(515..516) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(516..517) }], span: #0 bytes(221..561) }]\n+TokenStream [Ident { ident: \"fn\", span: #0 bytes(198..200) }, Ident { ident: \"span_preservation\", span: #0 bytes(201..218) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(218..220) }, Group { delimiter: Brace, stream: TokenStream [Ident { ident: \"let\", span: #0 bytes(228..231) }, Ident { ident: \"tst\", span: #0 bytes(232..235) }, Punct { ch: '=', spacing: Alone, span: #0 bytes(236..237) }, Literal { lit: Lit { kind: Integer, symbol: \"123\", suffix: None }, span: Span { lo: BytePos(238), hi: BytePos(241), ctxt: #0 } }, Punct { ch: ';', spacing: Joint, span: #0 bytes(241..242) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(242..243) }, Ident { ident: \"match\", span: #0 bytes(289..294) }, Ident { ident: \"tst\", span: #0 bytes(295..298) }, Group { delimiter: Brace, stream: TokenStream [Literal { lit: Lit { kind: Integer, symbol: \"123\", suffix: None }, span: Span { lo: BytePos(483), hi: BytePos(486), ctxt: #0 } }, Punct { ch: '=', spacing: Joint, span: #0 bytes(487..489) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(487..489) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(490..492) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(492..493) }, Ident { ident: \"_\", span: #0 bytes(502..503) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(504..506) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(504..506) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(507..509) }], span: #0 bytes(299..515) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(515..516) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(516..517) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(517..518) }], span: #0 bytes(222..562) }]\n error: unnecessary trailing semicolon\n   --> $DIR/redundant-semi-proc-macro.rs:9:19\n    |\n@@ -8,8 +8,8 @@ LL |     let tst = 123;;\n note: the lint level is defined here\n   --> $DIR/redundant-semi-proc-macro.rs:3:9\n    |\n-LL | #![deny(redundant_semicolon)]\n-   |         ^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(redundant_semicolons)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unnecessary trailing semicolons\n   --> $DIR/redundant-semi-proc-macro.rs:16:7"}, {"sha": "b1bb3ab3b17ba75ac3bf55311d507a5f37c88a31", "filename": "src/test/ui/parser/attr-dangling-in-fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Ftest%2Fui%2Fparser%2Fattr-dangling-in-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Ftest%2Fui%2Fparser%2Fattr-dangling-in-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-dangling-in-fn.stderr?ref=4ad62488258972bdb0e2df225d100f99ef58dbad", "patch": "@@ -1,8 +1,8 @@\n error: expected statement after outer attribute\n-  --> $DIR/attr-dangling-in-fn.rs:5:1\n+  --> $DIR/attr-dangling-in-fn.rs:4:3\n    |\n-LL | }\n-   | ^\n+LL |   #[foo = \"bar\"]\n+   |   ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b03db85422d0c65ec82fc5b20274e390dfeceaf9", "filename": "src/test/ui/parser/attr-stmt-expr-attr-bad.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr?ref=4ad62488258972bdb0e2df225d100f99ef58dbad", "patch": "@@ -411,16 +411,16 @@ LL | #[cfg(FALSE)] fn e() { let _ = x.#[attr]foo(); }\n    |                                  ^ expected one of `.`, `;`, `?`, or an operator\n \n error: expected statement after outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:114:44\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:114:37\n    |\n LL | #[cfg(FALSE)] fn e() { { fn foo() { #[attr]; } } }\n-   |                                            ^\n+   |                                     ^^^^^^^\n \n error: expected statement after outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:116:45\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:116:37\n    |\n LL | #[cfg(FALSE)] fn e() { { fn foo() { #[attr] } } }\n-   |                                             ^\n+   |                                     ^^^^^^^\n \n error: aborting due to 57 previous errors\n "}, {"sha": "405a7e1e2a33b9eca931dfe4b53b87cd884f2e25", "filename": "src/test/ui/parser/doc-before-semi.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Ftest%2Fui%2Fparser%2Fdoc-before-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Ftest%2Fui%2Fparser%2Fdoc-before-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-semi.rs?ref=4ad62488258972bdb0e2df225d100f99ef58dbad", "patch": "@@ -3,6 +3,4 @@ fn main() {\n     //~^ ERROR found a documentation comment that doesn't document anything\n     //~| HELP maybe a comment was intended\n     ;\n-    //~^ WARNING unnecessary trailing semicolon\n-    //~| HELP remove this semicolon\n }"}, {"sha": "e6bade18d0a2da70c392493f5fe8656a6742782d", "filename": "src/test/ui/parser/doc-before-semi.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Ftest%2Fui%2Fparser%2Fdoc-before-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ad62488258972bdb0e2df225d100f99ef58dbad/src%2Ftest%2Fui%2Fparser%2Fdoc-before-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-semi.stderr?ref=4ad62488258972bdb0e2df225d100f99ef58dbad", "patch": "@@ -6,14 +6,6 @@ LL |     /// hi\n    |\n    = help: doc comments must come before what they document, maybe a comment was intended with `//`?\n \n-warning: unnecessary trailing semicolon\n-  --> $DIR/doc-before-semi.rs:5:5\n-   |\n-LL |     ;\n-   |     ^ help: remove this semicolon\n-   |\n-   = note: `#[warn(redundant_semicolon)]` on by default\n-\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0585`."}]}