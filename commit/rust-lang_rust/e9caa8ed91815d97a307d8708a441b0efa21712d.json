{"sha": "e9caa8ed91815d97a307d8708a441b0efa21712d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5Y2FhOGVkOTE4MTVkOTdhMzA3ZDg3MDhhNDQxYjBlZmEyMTcxMmQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-26T16:03:51Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-27T12:59:19Z"}, "message": "Do not spawn a thread if we do not use concurrency", "tree": {"sha": "31028d6574839182a0b10cb501348af97b20eb51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31028d6574839182a0b10cb501348af97b20eb51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9caa8ed91815d97a307d8708a441b0efa21712d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9caa8ed91815d97a307d8708a441b0efa21712d", "html_url": "https://github.com/rust-lang/rust/commit/e9caa8ed91815d97a307d8708a441b0efa21712d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9caa8ed91815d97a307d8708a441b0efa21712d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f460eac66e029a5165cac91e6bda0ee3af805b1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f460eac66e029a5165cac91e6bda0ee3af805b1e", "html_url": "https://github.com/rust-lang/rust/commit/f460eac66e029a5165cac91e6bda0ee3af805b1e"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "ace314c081f54abb02179916bdfb6a25168d83e8", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e9caa8ed91815d97a307d8708a441b0efa21712d/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9caa8ed91815d97a307d8708a441b0efa21712d/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=e9caa8ed91815d97a307d8708a441b0efa21712d", "patch": "@@ -1150,7 +1150,7 @@ where\n         while !remaining.is_empty() {\n             let test = remaining.pop().unwrap();\n             callback(TeWait(test.desc.clone()))?;\n-            run_test(opts, !opts.run_tests, test, tx.clone());\n+            run_test(opts, !opts.run_tests, test, tx.clone(), /*concurrency*/false);\n             let (test, result, stdout) = rx.recv().unwrap();\n             callback(TeResult(test, result, stdout))?;\n         }\n@@ -1161,7 +1161,7 @@ where\n                 let timeout = Instant::now() + Duration::from_secs(TEST_WARN_TIMEOUT_S);\n                 running_tests.insert(test.desc.clone(), timeout);\n                 callback(TeWait(test.desc.clone()))?; //here no pad\n-                run_test(opts, !opts.run_tests, test, tx.clone());\n+                run_test(opts, !opts.run_tests, test, tx.clone(), /*concurrency*/true);\n                 pending += 1;\n             }\n \n@@ -1193,7 +1193,7 @@ where\n         // All benchmarks run at the end, in serial.\n         for b in filtered_benchs {\n             callback(TeWait(b.desc.clone()))?;\n-            run_test(opts, false, b, tx.clone());\n+            run_test(opts, false, b, tx.clone(), /*concurrency*/true);\n             let (test, result, stdout) = rx.recv().unwrap();\n             callback(TeResult(test, result, stdout))?;\n         }\n@@ -1395,6 +1395,7 @@ pub fn run_test(\n     force_ignore: bool,\n     test: TestDescAndFn,\n     monitor_ch: Sender<MonitorMsg>,\n+    concurrency: bool,\n ) {\n     let TestDescAndFn { desc, testfn } = test;\n \n@@ -1411,6 +1412,7 @@ pub fn run_test(\n         monitor_ch: Sender<MonitorMsg>,\n         nocapture: bool,\n         testfn: Box<dyn FnBox() + Send>,\n+        concurrency: bool,\n     ) {\n         // Buffer for capturing standard I/O\n         let data = Arc::new(Mutex::new(Vec::new()));\n@@ -1445,7 +1447,7 @@ pub fn run_test(\n         // the test synchronously, regardless of the concurrency\n         // level.\n         let supports_threads = !cfg!(target_os = \"emscripten\") && !cfg!(target_arch = \"wasm32\");\n-        if supports_threads {\n+        if concurrency && supports_threads {\n             let cfg = thread::Builder::new().name(name.as_slice().to_owned());\n             cfg.spawn(runtest).unwrap();\n         } else {\n@@ -1466,13 +1468,14 @@ pub fn run_test(\n         }\n         DynTestFn(f) => {\n             let cb = move || __rust_begin_short_backtrace(f);\n-            run_test_inner(desc, monitor_ch, opts.nocapture, Box::new(cb))\n+            run_test_inner(desc, monitor_ch, opts.nocapture, Box::new(cb), concurrency)\n         }\n         StaticTestFn(f) => run_test_inner(\n             desc,\n             monitor_ch,\n             opts.nocapture,\n             Box::new(move || __rust_begin_short_backtrace(f)),\n+            concurrency,\n         ),\n     }\n }"}]}