{"sha": "1969c2e312303faa458cf19dad9783165e3c72c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NjljMmUzMTIzMDNmYWE0NThjZjE5ZGFkOTc4MzE2NWUzYzcyYzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-26T07:10:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-26T07:10:44Z"}, "message": "Auto merge of #85711 - JohnTitor:rollup-8why04t, r=JohnTitor\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #84048 (Avoid CJK legacy fonts in Windows)\n - #85529 (doc: clarify Mutex::try_lock, etc. errors)\n - #85590 (Fix bootstrap using host exe suffix for cargo)\n - #85610 (Fix pointer provenance in <[T]>::copy_within)\n - #85623 (Remove stray .stderr files)\n - #85645 (Demote `ControlFlow::{from|into}_try` to `pub(crate)`)\n - #85647 (Revert \"Move llvm submodule updates to rustbuild\")\n - #85666 (Document shared_from_cow functions)\n - #85668 (Fix tasklist example in rustdoc book.)\n - #85672 (Move stability attribute for items under the `ip` feature)\n - #85699 (Update books)\n - #85701 (Update cargo)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1f31c97a13f474a8f383e86360a1b8d2aa3468b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f31c97a13f474a8f383e86360a1b8d2aa3468b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1969c2e312303faa458cf19dad9783165e3c72c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1969c2e312303faa458cf19dad9783165e3c72c8", "html_url": "https://github.com/rust-lang/rust/commit/1969c2e312303faa458cf19dad9783165e3c72c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1969c2e312303faa458cf19dad9783165e3c72c8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54bdfa125722c9ee6fadb61818f861b1102fd300", "url": "https://api.github.com/repos/rust-lang/rust/commits/54bdfa125722c9ee6fadb61818f861b1102fd300", "html_url": "https://github.com/rust-lang/rust/commit/54bdfa125722c9ee6fadb61818f861b1102fd300"}, {"sha": "7c0677ad9b2843eec8ad5330ac7cf29935ec3a22", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c0677ad9b2843eec8ad5330ac7cf29935ec3a22", "html_url": "https://github.com/rust-lang/rust/commit/7c0677ad9b2843eec8ad5330ac7cf29935ec3a22"}], "stats": {"total": 421, "additions": 223, "deletions": 198}, "files": [{"sha": "f131182a89633939108adc060962e6653a3ac5af", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1969c2e312303faa458cf19dad9783165e3c72c8/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1969c2e312303faa458cf19dad9783165e3c72c8/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -1859,6 +1859,18 @@ where\n     B: ToOwned + ?Sized,\n     Rc<B>: From<&'a B> + From<B::Owned>,\n {\n+    /// Create a reference-counted pointer from\n+    /// a clone-on-write pointer by copying its content.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// # use std::rc::Rc;\n+    /// # use std::borrow::Cow;\n+    /// let cow: Cow<str> = Cow::Borrowed(\"eggplant\");\n+    /// let shared: Rc<str> = Rc::from(cow);\n+    /// assert_eq!(\"eggplant\", &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(cow: Cow<'a, B>) -> Rc<B> {\n         match cow {"}, {"sha": "a8fa028fc9009e8a2700a500338835e936bc6c5d", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1969c2e312303faa458cf19dad9783165e3c72c8/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1969c2e312303faa458cf19dad9783165e3c72c8/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -2413,6 +2413,18 @@ where\n     B: ToOwned + ?Sized,\n     Arc<B>: From<&'a B> + From<B::Owned>,\n {\n+    /// Create an atomically reference-counted pointer from\n+    /// a clone-on-write pointer by copying its content.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// # use std::sync::Arc;\n+    /// # use std::borrow::Cow;\n+    /// let cow: Cow<str> = Cow::Borrowed(\"eggplant\");\n+    /// let shared: Arc<str> = Arc::from(cow);\n+    /// assert_eq!(\"eggplant\", &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(cow: Cow<'a, B>) -> Arc<B> {\n         match cow {"}, {"sha": "9d9398fb56d8a46d61a6f43b6fd7bcb6f899c11d", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1969c2e312303faa458cf19dad9783165e3c72c8/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1969c2e312303faa458cf19dad9783165e3c72c8/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -187,42 +187,41 @@ impl<B, C> ControlFlow<B, C> {\n #[cfg(bootstrap)]\n impl<R: ops::TryV1> ControlFlow<R, R::Output> {\n     /// Create a `ControlFlow` from any type implementing `Try`.\n-    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n     #[inline]\n-    pub fn from_try(r: R) -> Self {\n+    pub(crate) fn from_try(r: R) -> Self {\n         match R::into_result(r) {\n             Ok(v) => ControlFlow::Continue(v),\n             Err(v) => ControlFlow::Break(R::from_error(v)),\n         }\n     }\n \n     /// Convert a `ControlFlow` into any type implementing `Try`;\n-    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n     #[inline]\n-    pub fn into_try(self) -> R {\n+    pub(crate) fn into_try(self) -> R {\n         match self {\n             ControlFlow::Continue(v) => R::from_ok(v),\n             ControlFlow::Break(v) => v,\n         }\n     }\n }\n \n+/// These are used only as part of implementing the iterator adapters.\n+/// They have mediocre names and non-obvious semantics, so aren't\n+/// currently on a path to potential stabilization.\n #[cfg(not(bootstrap))]\n impl<R: ops::TryV2> ControlFlow<R, R::Output> {\n     /// Create a `ControlFlow` from any type implementing `Try`.\n-    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n     #[inline]\n-    pub fn from_try(r: R) -> Self {\n+    pub(crate) fn from_try(r: R) -> Self {\n         match R::branch(r) {\n             ControlFlow::Continue(v) => ControlFlow::Continue(v),\n             ControlFlow::Break(v) => ControlFlow::Break(R::from_residual(v)),\n         }\n     }\n \n     /// Convert a `ControlFlow` into any type implementing `Try`;\n-    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n     #[inline]\n-    pub fn into_try(self) -> R {\n+    pub(crate) fn into_try(self) -> R {\n         match self {\n             ControlFlow::Continue(v) => R::from_output(v),\n             ControlFlow::Break(v) => v,"}, {"sha": "3bcea4e6d25ed4eb285f6d1f0a1990b18c35f662", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1969c2e312303faa458cf19dad9783165e3c72c8/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1969c2e312303faa458cf19dad9783165e3c72c8/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -3096,7 +3096,11 @@ impl<T> [T] {\n         // SAFETY: the conditions for `ptr::copy` have all been checked above,\n         // as have those for `ptr::add`.\n         unsafe {\n-            ptr::copy(self.as_ptr().add(src_start), self.as_mut_ptr().add(dest), count);\n+            // Derive both `src_ptr` and `dest_ptr` from the same loan\n+            let ptr = self.as_mut_ptr();\n+            let src_ptr = ptr.add(src_start);\n+            let dest_ptr = ptr.add(dest);\n+            ptr::copy(src_ptr, dest_ptr, count);\n         }\n     }\n "}, {"sha": "a8261709cea9f0d15034cad249f2ec702396057c", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1969c2e312303faa458cf19dad9783165e3c72c8/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1969c2e312303faa458cf19dad9783165e3c72c8/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -1,11 +1,3 @@\n-#![unstable(\n-    feature = \"ip\",\n-    reason = \"extra functionality has not been \\\n-                                      scrutinized to the level that it should \\\n-                                      be to be stable\",\n-    issue = \"27709\"\n-)]\n-\n // Tests for this module\n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests;\n@@ -126,6 +118,7 @@ pub struct Ipv6Addr {\n \n #[allow(missing_docs)]\n #[derive(Copy, PartialEq, Eq, Clone, Hash, Debug)]\n+#[unstable(feature = \"ip\", issue = \"27709\")]\n pub enum Ipv6MulticastScope {\n     InterfaceLocal,\n     LinkLocal,\n@@ -199,6 +192,7 @@ impl IpAddr {\n     /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0x1c9, 0, 0, 0xafc8, 0, 0x1)).is_global(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_global(&self) -> bool {\n         match self {\n@@ -249,6 +243,7 @@ impl IpAddr {\n     /// );\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_documentation(&self) -> bool {\n         match self {\n@@ -549,6 +544,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(80, 9, 12, 3).is_global(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_global(&self) -> bool {\n         // check if this address is 192.0.0.9 or 192.0.0.10. These addresses are the only two\n@@ -587,6 +583,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(100, 128, 0, 0).is_shared(), false);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_shared(&self) -> bool {\n         self.octets()[0] == 100 && (self.octets()[1] & 0b1100_0000 == 0b0100_0000)\n@@ -620,6 +617,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(191, 255, 255, 255).is_ietf_protocol_assignment(), false);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_ietf_protocol_assignment(&self) -> bool {\n         self.octets()[0] == 192 && self.octets()[1] == 0 && self.octets()[2] == 0\n@@ -644,6 +642,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(198, 20, 0, 0).is_benchmarking(), false);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_benchmarking(&self) -> bool {\n         self.octets()[0] == 198 && (self.octets()[1] & 0xfe) == 18\n@@ -677,6 +676,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(255, 255, 255, 255).is_reserved(), false);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_reserved(&self) -> bool {\n         self.octets()[0] & 240 == 240 && !self.is_broadcast()\n@@ -1234,6 +1234,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0x1c9, 0, 0, 0xafc8, 0, 0x1).is_global(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_global(&self) -> bool {\n         match self.multicast_scope() {\n@@ -1260,6 +1261,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0xfc02, 0, 0, 0, 0, 0, 0, 0).is_unique_local(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_unique_local(&self) -> bool {\n         (self.segments()[0] & 0xfe00) == 0xfc00\n@@ -1315,6 +1317,7 @@ impl Ipv6Addr {\n     /// [IETF RFC 4291 section 2.5.6]: https://tools.ietf.org/html/rfc4291#section-2.5.6\n     /// [RFC 4291 errata 4406]: https://www.rfc-editor.org/errata/eid4406\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_unicast_link_local_strict(&self) -> bool {\n         matches!(self.segments(), [0xfe80, 0, 0, 0, ..])\n@@ -1369,6 +1372,7 @@ impl Ipv6Addr {\n     /// [IETF RFC 4291 section 2.4]: https://tools.ietf.org/html/rfc4291#section-2.4\n     /// [RFC 4291 errata 4406]: https://www.rfc-editor.org/errata/eid4406\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_unicast_link_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfe80\n@@ -1409,6 +1413,7 @@ impl Ipv6Addr {\n     ///\n     /// [RFC 3879]: https://tools.ietf.org/html/rfc3879\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_unicast_site_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfec0\n@@ -1432,6 +1437,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0).is_documentation(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_documentation(&self) -> bool {\n         (self.segments()[0] == 0x2001) && (self.segments()[1] == 0xdb8)\n@@ -1468,6 +1474,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unicast_global(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_unicast_global(&self) -> bool {\n         !self.is_multicast()\n@@ -1494,6 +1501,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).multicast_scope(), None);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn multicast_scope(&self) -> Option<Ipv6MulticastScope> {\n         if self.is_multicast() {\n@@ -1555,6 +1563,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1).to_ipv4_mapped(), None);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn to_ipv4_mapped(&self) -> Option<Ipv4Addr> {\n         match self.octets() {"}, {"sha": "e7c5479ab9bb6fa59fd621adab13c5b0ddbc0de5", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1969c2e312303faa458cf19dad9783165e3c72c8/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1969c2e312303faa458cf19dad9783165e3c72c8/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -294,8 +294,14 @@ impl<T: ?Sized> Mutex<T> {\n     /// # Errors\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n-    /// this call will return an error if the mutex would otherwise be\n-    /// acquired.\n+    /// this call will return the [`Poisoned`] error if the mutex would\n+    /// otherwise be acquired.\n+    ///\n+    /// If the mutex could not be acquired because it is already locked, then\n+    /// this call will return the [`WouldBlock`] error.\n+    ///\n+    /// [`Poisoned`]: TryLockError::Poisoned\n+    /// [`WouldBlock`]: TryLockError::WouldBlock\n     ///\n     /// # Examples\n     ///"}, {"sha": "9d521ab14cbf3b264a052edb556977a129612c12", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1969c2e312303faa458cf19dad9783165e3c72c8/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1969c2e312303faa458cf19dad9783165e3c72c8/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -199,11 +199,17 @@ impl<T: ?Sized> RwLock<T> {\n     ///\n     /// # Errors\n     ///\n-    /// This function will return an error if the RwLock is poisoned. An RwLock\n-    /// is poisoned whenever a writer panics while holding an exclusive lock. An\n-    /// error will only be returned if the lock would have otherwise been\n+    /// This function will return the [`Poisoned`] error if the RwLock is poisoned.\n+    /// An RwLock is poisoned whenever a writer panics while holding an exclusive\n+    /// lock. `Poisoned` will only be returned if the lock would have otherwise been\n     /// acquired.\n     ///\n+    /// This function will return the [`WouldBlock`] error if the RwLock could not\n+    /// be acquired because it was already locked exclusively.\n+    ///\n+    /// [`Poisoned`]: TryLockError::Poisoned\n+    /// [`WouldBlock`]: TryLockError::WouldBlock\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -281,10 +287,17 @@ impl<T: ?Sized> RwLock<T> {\n     ///\n     /// # Errors\n     ///\n-    /// This function will return an error if the RwLock is poisoned. An RwLock\n-    /// is poisoned whenever a writer panics while holding an exclusive lock. An\n-    /// error will only be returned if the lock would have otherwise been\n-    /// acquired.\n+    /// This function will return the [`Poisoned`] error if the RwLock is\n+    /// poisoned. An RwLock is poisoned whenever a writer panics while holding\n+    /// an exclusive lock. `Poisoned` will only be returned if the lock would have\n+    /// otherwise been acquired.\n+    ///\n+    /// This function will return the [`WouldBlock`] error if the RwLock could not\n+    /// be acquired because it was already locked exclusively.\n+    ///\n+    /// [`Poisoned`]: TryLockError::Poisoned\n+    /// [`WouldBlock`]: TryLockError::WouldBlock\n+    ///\n     ///\n     /// # Examples\n     ///"}, {"sha": "149a899cef7a0cf615c88dfa94c6e3443af4d26d", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -991,20 +991,28 @@ def update_submodules(self):\n         ).decode(default_encoding).splitlines()]\n         filtered_submodules = []\n         submodules_names = []\n+        llvm_checked_out = os.path.exists(os.path.join(self.rust_root, \"src/llvm-project/.git\"))\n+        external_llvm_provided = self.get_toml('llvm-config') or self.downloading_llvm()\n+        llvm_needed = not self.get_toml('codegen-backends', 'rust') \\\n+            or \"llvm\" in self.get_toml('codegen-backends', 'rust')\n         for module in submodules:\n-            # This is handled by native::Llvm in rustbuild, not here\n             if module.endswith(\"llvm-project\"):\n-                continue\n+                # Don't sync the llvm-project submodule if an external LLVM was\n+                # provided, if we are downloading LLVM or if the LLVM backend is\n+                # not being built. Also, if the submodule has been initialized\n+                # already, sync it anyways so that it doesn't mess up contributor\n+                # pull requests.\n+                if external_llvm_provided or not llvm_needed:\n+                    if self.get_toml('lld') != 'true' and not llvm_checked_out:\n+                        continue\n             check = self.check_submodule(module, slow_submodules)\n             filtered_submodules.append((module, check))\n             submodules_names.append(module)\n         recorded = subprocess.Popen([\"git\", \"ls-tree\", \"HEAD\"] + submodules_names,\n                                     cwd=self.rust_root, stdout=subprocess.PIPE)\n         recorded = recorded.communicate()[0].decode(default_encoding).strip().splitlines()\n-        # { filename: hash }\n         recorded_submodules = {}\n         for data in recorded:\n-            # [mode, kind, hash, filename]\n             data = data.split()\n             recorded_submodules[data[3]] = data[2]\n         for module in filtered_submodules:"}, {"sha": "2960dd3df6bf48b81a98cbd0ee8c80e42a6176f2", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -472,22 +472,12 @@ impl Build {\n         slice::from_ref(&self.build.triple)\n     }\n \n-    /// If the LLVM submodule has been initialized already, sync it unconditionally. This avoids\n-    /// contributors checking in a submodule change by accident.\n-    pub fn maybe_update_llvm_submodule(&self) {\n-        if self.in_tree_llvm_info.is_git() {\n-            native::update_llvm_submodule(self);\n-        }\n-    }\n-\n     /// Executes the entire build, as configured by the flags and configuration.\n     pub fn build(&mut self) {\n         unsafe {\n             job::setup(self);\n         }\n \n-        self.maybe_update_llvm_submodule();\n-\n         if let Subcommand::Format { check, paths } = &self.config.cmd {\n             return format::format(self, *check, &paths);\n         }"}, {"sha": "bde0a96f03013d22aeb30a80e8a600a15f252ebc", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 83, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -21,7 +21,7 @@ use build_helper::{output, t};\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::config::TargetSelection;\n use crate::util::{self, exe};\n-use crate::{Build, GitRepo};\n+use crate::GitRepo;\n use build_helper::up_to_date;\n \n pub struct Meta {\n@@ -91,85 +91,6 @@ pub fn prebuilt_llvm_config(\n     Err(Meta { stamp, build_llvm_config, out_dir, root: root.into() })\n }\n \n-// modified from `check_submodule` and `update_submodule` in bootstrap.py\n-pub(crate) fn update_llvm_submodule(build: &Build) {\n-    let llvm_project = &Path::new(\"src\").join(\"llvm-project\");\n-\n-    fn dir_is_empty(dir: &Path) -> bool {\n-        t!(std::fs::read_dir(dir)).next().is_none()\n-    }\n-\n-    // NOTE: The check for the empty directory is here because when running x.py\n-    // the first time, the llvm submodule won't be checked out. Check it out\n-    // now so we can build it.\n-    if !build.in_tree_llvm_info.is_git() && !dir_is_empty(&build.config.src.join(llvm_project)) {\n-        return;\n-    }\n-\n-    // check_submodule\n-    let checked_out = if build.config.fast_submodules {\n-        Some(output(\n-            Command::new(\"git\")\n-                .args(&[\"rev-parse\", \"HEAD\"])\n-                .current_dir(build.config.src.join(llvm_project)),\n-        ))\n-    } else {\n-        None\n-    };\n-\n-    // update_submodules\n-    let recorded = output(\n-        Command::new(\"git\")\n-            .args(&[\"ls-tree\", \"HEAD\"])\n-            .arg(llvm_project)\n-            .current_dir(&build.config.src),\n-    );\n-    let hash =\n-        recorded.split(' ').nth(2).unwrap_or_else(|| panic!(\"unexpected output `{}`\", recorded));\n-\n-    // update_submodule\n-    if let Some(llvm_hash) = checked_out {\n-        if hash == llvm_hash {\n-            // already checked out\n-            return;\n-        }\n-    }\n-\n-    println!(\"Updating submodule {}\", llvm_project.display());\n-    build.run(\n-        Command::new(\"git\")\n-            .args(&[\"submodule\", \"-q\", \"sync\"])\n-            .arg(llvm_project)\n-            .current_dir(&build.config.src),\n-    );\n-\n-    // Try passing `--progress` to start, then run git again without if that fails.\n-    let update = |progress: bool| {\n-        let mut git = Command::new(\"git\");\n-        git.args(&[\"submodule\", \"update\", \"--init\", \"--recursive\"]);\n-        if progress {\n-            git.arg(\"--progress\");\n-        }\n-        git.arg(llvm_project).current_dir(&build.config.src);\n-        git\n-    };\n-    // NOTE: doesn't use `try_run` because this shouldn't print an error if it fails.\n-    if !update(true).status().map_or(false, |status| status.success()) {\n-        build.run(&mut update(false));\n-    }\n-\n-    build.run(\n-        Command::new(\"git\")\n-            .args(&[\"reset\", \"-q\", \"--hard\"])\n-            .current_dir(build.config.src.join(llvm_project)),\n-    );\n-    build.run(\n-        Command::new(\"git\")\n-            .args(&[\"clean\", \"-qdfx\"])\n-            .current_dir(build.config.src.join(llvm_project)),\n-    );\n-}\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Llvm {\n     pub target: TargetSelection,\n@@ -207,9 +128,6 @@ impl Step for Llvm {\n                 Err(m) => m,\n             };\n \n-        if !builder.config.dry_run {\n-            update_llvm_submodule(builder);\n-        }\n         if builder.config.llvm_link_shared\n             && (target.contains(\"windows\") || target.contains(\"apple-darwin\"))\n         {"}, {"sha": "64e4be6863a62f824d2bf87ca2ddd2fdf93770c0", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -217,9 +217,8 @@ impl Step for ToolBuild {\n             if tool == \"tidy\" {\n                 tool = \"rust-tidy\";\n             }\n-            let cargo_out =\n-                builder.cargo_out(compiler, self.mode, target).join(exe(tool, compiler.host));\n-            let bin = builder.tools_dir(compiler).join(exe(tool, compiler.host));\n+            let cargo_out = builder.cargo_out(compiler, self.mode, target).join(exe(tool, target));\n+            let bin = builder.tools_dir(compiler).join(exe(tool, target));\n             builder.copy(&cargo_out, &bin);\n             Some(bin)\n         }"}, {"sha": "80f804174ed082e20527f8206cd6aef5bbf5eb19", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -130,7 +130,6 @@ pub fn make(host: &str) -> PathBuf {\n     }\n }\n \n-#[track_caller]\n pub fn output(cmd: &mut Command) -> String {\n     let output = match cmd.stderr(Stdio::inherit()).output() {\n         Ok(status) => status,"}, {"sha": "302a115e8f71876dfc884aebb0ca5ccb02b8a962", "filename": "src/doc/edition-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fedition-guide?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -1 +1 @@\n-Subproject commit 1da3c411f17adb1ba5de1683bb6acee83362b54a\n+Subproject commit 302a115e8f71876dfc884aebb0ca5ccb02b8a962"}, {"sha": "7349d173fa28a0bb834cf0264a05286620ef0923", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -1 +1 @@\n-Subproject commit 569c3391f5c0cc43433bc77831d17f8ff4d76602\n+Subproject commit 7349d173fa28a0bb834cf0264a05286620ef0923"}, {"sha": "9c68af3ce6ccca2395e1868addef26a0542e9ddd", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -1 +1 @@\n-Subproject commit 5aa457bf1b54bd2cd5d4cf49797f29299bdf89a7\n+Subproject commit 9c68af3ce6ccca2395e1868addef26a0542e9ddd"}, {"sha": "805e016c5792ad2adabb66e348233067d5ea9f10", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -1 +1 @@\n-Subproject commit 5f8c6da200ada77760a2fe1096938ef58151c9a6\n+Subproject commit 805e016c5792ad2adabb66e348233067d5ea9f10"}, {"sha": "50de7f0682adc5d95ce858fe6318d19b4b951553", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -1 +1 @@\n-Subproject commit 1e6c7fbda4c45e85adf63ff3f82fa9c870b1447f\n+Subproject commit 50de7f0682adc5d95ce858fe6318d19b4b951553"}, {"sha": "f89495cca3a31c4b43f849291abbfd2a2577de87", "filename": "src/doc/rustdoc/src/how-to-write-documentation.md", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -229,15 +229,13 @@ Example:\n \n ```md\n - [x] Complete task\n-- [ ] IncComplete task\n+- [ ] Incomplete task\n ```\n \n-This will render as\n+This will render as:\n \n-<ul>\n-    <li><input type=\"checkbox\"></li>\n-    <li><input type=\"checkbox\" checked></li>\n-</ul>\n+> - [x] Complete task\n+> - [ ] Incomplete task\n \n See the specification for the [task list extension] for more details.\n "}, {"sha": "dd0fb3a9e02ee899d8b51af7c5f5a0ff7def7c8d", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -33,6 +33,8 @@ crate static FILES_UNVERSIONED: Lazy<FxHashMap<&str, &[u8]>> = Lazy::new(|| {\n         \"SourceCodePro-Semibold.ttf.woff\" => static_files::source_code_pro::SEMIBOLD,\n         \"SourceCodePro-It.ttf.woff\" => static_files::source_code_pro::ITALIC,\n         \"SourceCodePro-LICENSE.txt\" => static_files::source_code_pro::LICENSE,\n+        \"noto-sans-kr-v13-korean-regular.woff\" => static_files::noto_sans_kr::REGULAR,\n+        \"noto-sans-kr-v13-korean-regular-LICENSE.txt\" => static_files::noto_sans_kr::LICENSE,\n         \"LICENSE-MIT.txt\" => static_files::LICENSE_MIT,\n         \"LICENSE-APACHE.txt\" => static_files::LICENSE_APACHE,\n         \"COPYRIGHT.txt\" => static_files::COPYRIGHT,"}, {"sha": "922d5fdc18dc9666ee3238485185749242476562", "filename": "src/librustdoc/html/static/noto-sans-kr-v13-korean-regular-LICENSE.txt", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fnoto-sans-kr-v13-korean-regular-LICENSE.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fnoto-sans-kr-v13-korean-regular-LICENSE.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fnoto-sans-kr-v13-korean-regular-LICENSE.txt?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -0,0 +1,93 @@\n+Copyright 2014, 2015 Adobe Systems Incorporated (http://www.adobe.com/), with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark of Adobe Systems Incorporated in the United States and/or other countries.\n+\n+This Font Software is licensed under the SIL Open Font License, Version 1.1.\n+\n+This license is copied below, and is also available with a FAQ at: http://scripts.sil.org/OFL\n+\n+\n+-----------------------------------------------------------\n+SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007\n+-----------------------------------------------------------\n+\n+PREAMBLE\n+The goals of the Open Font License (OFL) are to stimulate worldwide\n+development of collaborative font projects, to support the font creation\n+efforts of academic and linguistic communities, and to provide a free and\n+open framework in which fonts may be shared and improved in partnership\n+with others.\n+\n+The OFL allows the licensed fonts to be used, studied, modified and\n+redistributed freely as long as they are not sold by themselves. The\n+fonts, including any derivative works, can be bundled, embedded,\n+redistributed and/or sold with any software provided that any reserved\n+names are not used by derivative works. The fonts and derivatives,\n+however, cannot be released under any other type of license. The\n+requirement for fonts to remain under this license does not apply\n+to any document created using the fonts or their derivatives.\n+\n+DEFINITIONS\n+\"Font Software\" refers to the set of files released by the Copyright\n+Holder(s) under this license and clearly marked as such. This may\n+include source files, build scripts and documentation.\n+\n+\"Reserved Font Name\" refers to any names specified as such after the\n+copyright statement(s).\n+\n+\"Original Version\" refers to the collection of Font Software components as\n+distributed by the Copyright Holder(s).\n+\n+\"Modified Version\" refers to any derivative made by adding to, deleting,\n+or substituting -- in part or in whole -- any of the components of the\n+Original Version, by changing formats or by porting the Font Software to a\n+new environment.\n+\n+\"Author\" refers to any designer, engineer, programmer, technical\n+writer or other person who contributed to the Font Software.\n+\n+PERMISSION & CONDITIONS\n+Permission is hereby granted, free of charge, to any person obtaining\n+a copy of the Font Software, to use, study, copy, merge, embed, modify,\n+redistribute, and sell modified and unmodified copies of the Font\n+Software, subject to the following conditions:\n+\n+1) Neither the Font Software nor any of its individual components,\n+in Original or Modified Versions, may be sold by itself.\n+\n+2) Original or Modified Versions of the Font Software may be bundled,\n+redistributed and/or sold with any software, provided that each copy\n+contains the above copyright notice and this license. These can be\n+included either as stand-alone text files, human-readable headers or\n+in the appropriate machine-readable metadata fields within text or\n+binary files as long as those fields can be easily viewed by the user.\n+\n+3) No Modified Version of the Font Software may use the Reserved Font\n+Name(s) unless explicit written permission is granted by the corresponding\n+Copyright Holder. This restriction only applies to the primary font name as\n+presented to the users.\n+\n+4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font\n+Software shall not be used to promote, endorse or advertise any\n+Modified Version, except to acknowledge the contribution(s) of the\n+Copyright Holder(s) and the Author(s) or with their explicit written\n+permission.\n+\n+5) The Font Software, modified or unmodified, in part or in whole,\n+must be distributed entirely under this license, and must not be\n+distributed under any other license. The requirement for fonts to\n+remain under this license does not apply to any document created\n+using the Font Software.\n+\n+TERMINATION\n+This license becomes null and void if any of the above conditions are\n+not met.\n+\n+DISCLAIMER\n+THE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\n+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT\n+OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE\n+COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n+INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL\n+DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n+FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM\n+OTHER DEALINGS IN THE FONT SOFTWARE."}, {"sha": "01d6b6b54664c35f8180f7c245514d22751f9307", "filename": "src/librustdoc/html/static/noto-sans-kr-v13-korean-regular.woff", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fnoto-sans-kr-v13-korean-regular.woff", "raw_url": "https://github.com/rust-lang/rust/raw/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fnoto-sans-kr-v13-korean-regular.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fnoto-sans-kr-v13-korean-regular.woff?ref=1969c2e312303faa458cf19dad9783165e3c72c8"}, {"sha": "f3866e211d95364fa6065fe01775643b0b85c717", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -66,6 +66,14 @@\n \tfont-display: swap;\n }\n \n+/* Avoid using legacy CJK serif fonts in Windows like Batang */\n+@font-face {\n+\tfont-family: 'Noto Sans KR';\n+\tsrc: url(\"noto-sans-kr-v13-korean-regular.woff\") format(\"woff\");\n+\tfont-display: swap;\n+\tunicode-range: U+A960-A97F, U+AC00-D7AF, U+D7B0-D7FF;\n+}\n+\n * {\n \t-webkit-box-sizing: border-box;\n \t-moz-box-sizing: border-box;\n@@ -90,7 +98,7 @@ html {\n /* General structure and fonts */\n \n body {\n-\tfont: 16px/1.4 \"Source Serif 4\", serif;\n+\tfont: 16px/1.4 \"Source Serif 4\", \"Noto Sans KR\", serif;\n \tmargin: 0;\n \tposition: relative;\n \tpadding: 10px 15px 20px 15px;"}, {"sha": "0e4fb086a157a899ce2a4c235adeeb0d43aad58e", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -126,6 +126,17 @@ crate mod source_code_pro {\n     crate static LICENSE: &[u8] = include_bytes!(\"static/SourceCodePro-LICENSE.txt\");\n }\n \n+crate mod noto_sans_kr {\n+    /// The file `noto-sans-kr-v13-korean-regular.woff`, the Regular variant of the Noto Sans KR\n+    /// font.\n+    crate static REGULAR: &[u8] = include_bytes!(\"static/noto-sans-kr-v13-korean-regular.woff\");\n+\n+    /// The file `noto-sans-kr-v13-korean-regular-LICENSE.txt`, the license text of the Noto Sans KR\n+    /// font.\n+    crate static LICENSE: &[u8] =\n+        include_bytes!(\"static/noto-sans-kr-v13-korean-regular-LICENSE.txt\");\n+}\n+\n /// Files related to the sidebar in rustdoc sources.\n crate mod sidebar {\n     /// File script to handle sidebar."}, {"sha": "348cd1fdf37b3d3ceed08eb9d862824187ba1c7e", "filename": "src/test/run-make-fulldeps/print-unversioned-files/unversioned-files.txt", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2Funversioned-files.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1969c2e312303faa458cf19dad9783165e3c72c8/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2Funversioned-files.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2Funversioned-files.txt?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -14,3 +14,5 @@ SourceSerif4-Bold.ttf.woff\n SourceSerif4-It.ttf.woff\n SourceSerif4-LICENSE.md\n SourceSerif4-Regular.ttf.woff\n+noto-sans-kr-v13-korean-regular-LICENSE.txt\n+noto-sans-kr-v13-korean-regular.woff"}, {"sha": "8282bc3db05073882bca837ac9fc7f19c0e7ff29", "filename": "src/test/ui/cast/cast-ptr-to-int-const.with_feature.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/54bdfa125722c9ee6fadb61818f861b1102fd300/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.with_feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54bdfa125722c9ee6fadb61818f861b1102fd300/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.with_feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.with_feature.stderr?ref=54bdfa125722c9ee6fadb61818f861b1102fd300", "patch": "@@ -1,19 +0,0 @@\n-error[E0133]: cast of pointer to int is unsafe and requires unsafe function or block\n-  --> $DIR/cast-ptr-to-int-const.rs:16:9\n-   |\n-LL |         &Y as *const u32 as usize\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ cast of pointer to int\n-   |\n-   = note: casting pointers to integers in constants\n-\n-error[E0133]: cast of pointer to int is unsafe and requires unsafe function or block\n-  --> $DIR/cast-ptr-to-int-const.rs:23:5\n-   |\n-LL |     &0 as *const i32 as usize\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ cast of pointer to int\n-   |\n-   = note: casting pointers to integers in constants\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0133`."}, {"sha": "c87fa1a14a4c87a33ea29dba24cc6d387ab3946a", "filename": "src/test/ui/cast/cast-ptr-to-int-const.without_feature.stderr", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/54bdfa125722c9ee6fadb61818f861b1102fd300/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.without_feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54bdfa125722c9ee6fadb61818f861b1102fd300/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.without_feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.without_feature.stderr?ref=54bdfa125722c9ee6fadb61818f861b1102fd300", "patch": "@@ -1,39 +0,0 @@\n-error[E0658]: casting pointers to integers in constants is unstable\n-  --> $DIR/cast-ptr-to-int-const.rs:8:9\n-   |\n-LL |         main as usize\n-   |         ^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n-   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n-\n-error[E0658]: casting pointers to integers in constants is unstable\n-  --> $DIR/cast-ptr-to-int-const.rs:12:9\n-   |\n-LL |         &Y as *const u32 as usize\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n-   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n-\n-error[E0658]: casting pointers to integers in constants is unstable\n-  --> $DIR/cast-ptr-to-int-const.rs:16:9\n-   |\n-LL |         &Y as *const u32 as usize\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n-   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n-\n-error[E0658]: casting pointers to integers in constant functions is unstable\n-  --> $DIR/cast-ptr-to-int-const.rs:23:5\n-   |\n-LL |     &0 as *const i32 as usize\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n-   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "e931e4796b61de593aa1097649445e535c9c7ee0", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=1969c2e312303faa458cf19dad9783165e3c72c8", "patch": "@@ -1 +1 @@\n-Subproject commit 070e459c2d8b79c5b2ac5218064e7603329c92ae\n+Subproject commit e931e4796b61de593aa1097649445e535c9c7ee0"}]}