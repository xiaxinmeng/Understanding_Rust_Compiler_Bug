{"sha": "d3e75ea37546ad197cc5a1efa522a054a54d78b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZTc1ZWEzNzU0NmFkMTk3Y2M1YTFlZmE1MjJhMDU0YTU0ZDc4YjQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-04T20:36:54Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-04T20:37:11Z"}, "message": "Parse 'loop' and 'again' the same", "tree": {"sha": "91df69327b7197e8ed97396deef1a626a726c26e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91df69327b7197e8ed97396deef1a626a726c26e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3e75ea37546ad197cc5a1efa522a054a54d78b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e75ea37546ad197cc5a1efa522a054a54d78b4", "html_url": "https://github.com/rust-lang/rust/commit/d3e75ea37546ad197cc5a1efa522a054a54d78b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3e75ea37546ad197cc5a1efa522a054a54d78b4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "443f79922dd9a8542ecda59e03030d54540653c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/443f79922dd9a8542ecda59e03030d54540653c5", "html_url": "https://github.com/rust-lang/rust/commit/443f79922dd9a8542ecda59e03030d54540653c5"}], "stats": {"total": 63, "additions": 41, "deletions": 22}, "files": [{"sha": "5f91d22f5d0c5b4322af06a8a5da6b019bcc4b37", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 35, "deletions": 18, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d3e75ea37546ad197cc5a1efa522a054a54d78b4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e75ea37546ad197cc5a1efa522a054a54d78b4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d3e75ea37546ad197cc5a1efa522a054a54d78b4", "patch": "@@ -883,7 +883,7 @@ struct parser {\n             return pexpr(self.parse_sugary_call_expr(~\"do\", expr_do_body));\n         } else if self.eat_keyword(~\"while\") {\n             return pexpr(self.parse_while_expr());\n-        } else if self.eat_keyword(~\"loop\") {\n+        } else if self.eat_keyword(~\"again\") || self.eat_keyword(~\"loop\") {\n             return pexpr(self.parse_loop_expr());\n         } else if self.eat_keyword(~\"match\") {\n             return pexpr(self.parse_alt_expr());\n@@ -969,13 +969,6 @@ struct parser {\n                 ex = expr_break(None);\n             }\n             hi = self.span.hi;\n-        } else if self.eat_keyword(~\"again\") {\n-            if is_ident(self.token) {\n-                ex = expr_again(Some(self.parse_ident()));\n-            } else {\n-                ex = expr_again(None);\n-            }\n-            hi = self.span.hi;\n         } else if self.eat_keyword(~\"copy\") {\n             let e = self.parse_expr();\n             ex = expr_copy(e);\n@@ -1609,18 +1602,42 @@ struct parser {\n     }\n \n     fn parse_loop_expr() -> @expr {\n-        let opt_ident;\n-        if is_ident(self.token) && !self.is_any_keyword(copy self.token) {\n-            opt_ident = Some(self.parse_ident());\n-            self.expect(token::COLON);\n+        // loop headers look like 'loop {' or 'loop unsafe {'\n+        let is_loop_header =\n+            self.token == token::LBRACE\n+            || (is_ident(copy self.token)\n+                && self.look_ahead(1) == token::LBRACE);\n+        // labeled loop headers look like 'loop foo: {'\n+        let is_labeled_loop_header =\n+            is_ident(self.token)\n+            && !self.is_any_keyword(copy self.token)\n+            && self.look_ahead(1) == token::COLON;\n+\n+        if is_loop_header || is_labeled_loop_header {\n+            // This is a loop body\n+            let opt_ident;\n+            if is_labeled_loop_header {\n+                opt_ident = Some(self.parse_ident());\n+                self.expect(token::COLON);\n+            } else {\n+                opt_ident = None;\n+            }\n+\n+            let lo = self.last_span.lo;\n+            let body = self.parse_block_no_value();\n+            let mut hi = body.span.hi;\n+            return self.mk_expr(lo, hi, expr_loop(body, opt_ident));\n         } else {\n-            opt_ident = None;\n+            // This is a 'continue' expression\n+            let lo = self.span.lo;\n+            let ex = if is_ident(self.token) {\n+                expr_again(Some(self.parse_ident()))\n+            } else {\n+                expr_again(None)\n+            };\n+            let hi = self.span.hi;\n+            return self.mk_expr(lo, hi, ex);\n         }\n-\n-        let lo = self.last_span.lo;\n-        let body = self.parse_block_no_value();\n-        let mut hi = body.span.hi;\n-        return self.mk_expr(lo, hi, expr_loop(body, opt_ident));\n     }\n \n     // For distingishing between record literals and blocks"}, {"sha": "dd5fc57f684e24316f165a5bb38f1d3af1c9ae5d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3e75ea37546ad197cc5a1efa522a054a54d78b4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e75ea37546ad197cc5a1efa522a054a54d78b4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d3e75ea37546ad197cc5a1efa522a054a54d78b4", "patch": "@@ -883,7 +883,9 @@ fn print_possibly_embedded_block_(s: ps, blk: ast::blk, embedded: embed_type,\n // alt, do, & while unambiguously without being parenthesized\n fn print_maybe_parens_discrim(s: ps, e: @ast::expr) {\n     let disambig = match e.node {\n-      ast::expr_ret(None) | ast::expr_fail(None) => true,\n+      ast::expr_ret(None)\n+      | ast::expr_fail(None)\n+      | ast::expr_again(*) => true,\n       _ => false\n     };\n     if disambig { popen(s); }"}, {"sha": "20276fff8177280f5693d1937510fd9a9d53c849", "filename": "src/test/run-pass/loop-break-cont.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3e75ea37546ad197cc5a1efa522a054a54d78b4/src%2Ftest%2Frun-pass%2Floop-break-cont.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e75ea37546ad197cc5a1efa522a054a54d78b4/src%2Ftest%2Frun-pass%2Floop-break-cont.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-break-cont.rs?ref=d3e75ea37546ad197cc5a1efa522a054a54d78b4", "patch": "@@ -17,7 +17,7 @@ fn main() {\n     is_even = false;\n     i += 1u;\n     if i % 2u != 0u {\n-        again;\n+        loop;\n     }\n     is_even = true;\n   }\n@@ -30,7 +30,7 @@ fn main() {\n     is_even = false;\n     i += 1u;\n     if i % 2u != 0u {\n-        again;\n+        loop;\n     }\n     is_even = true;\n   }"}, {"sha": "9db274a7ec4ed0b178a8b6168e55368bf3a57b93", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e75ea37546ad197cc5a1efa522a054a54d78b4/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e75ea37546ad197cc5a1efa522a054a54d78b4/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=d3e75ea37546ad197cc5a1efa522a054a54d78b4", "patch": "@@ -59,7 +59,7 @@ fn canttouchthis() -> uint {\n fn angrydome() {\n     loop { if break { } }\n     let mut i = 0;\n-    loop { i += 1; if i == 1 { match again { 1 => { }, _ => fail ~\"wat\" } }\n+    loop { i += 1; if i == 1 { match (again) { 1 => { }, _ => fail ~\"wat\" } }\n       break; }\n }\n "}]}