{"sha": "2dfad1e3f81d649124bba15f96fd8e96431cd4fc", "node_id": "C_kwDOAAsO6NoAKDJkZmFkMWUzZjgxZDY0OTEyNGJiYTE1Zjk2ZmQ4ZTk2NDMxY2Q0ZmM", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-28T09:03:30Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-29T14:30:54Z"}, "message": "Use futex-based locks and thread parker on NetBSD.", "tree": {"sha": "f259c6662a691c600f86377eee647cbf6013a5ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f259c6662a691c600f86377eee647cbf6013a5ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dfad1e3f81d649124bba15f96fd8e96431cd4fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dfad1e3f81d649124bba15f96fd8e96431cd4fc", "html_url": "https://github.com/rust-lang/rust/commit/2dfad1e3f81d649124bba15f96fd8e96431cd4fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dfad1e3f81d649124bba15f96fd8e96431cd4fc/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afe1a256ce6612c8c98b5f8a15f797dced1cf696", "url": "https://api.github.com/repos/rust-lang/rust/commits/afe1a256ce6612c8c98b5f8a15f797dced1cf696", "html_url": "https://github.com/rust-lang/rust/commit/afe1a256ce6612c8c98b5f8a15f797dced1cf696"}], "stats": {"total": 77, "additions": 53, "deletions": 24}, "files": [{"sha": "64ed146b0367a32c92b20273d8395764f52e90ac", "filename": "library/std/src/sys/unix/futex.rs", "status": "modified", "additions": 51, "deletions": 24, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/2dfad1e3f81d649124bba15f96fd8e96431cd4fc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dfad1e3f81d649124bba15f96fd8e96431cd4fc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs?ref=2dfad1e3f81d649124bba15f96fd8e96431cd4fc", "patch": "@@ -3,17 +3,21 @@\n     target_os = \"android\",\n     all(target_os = \"emscripten\", target_feature = \"atomics\"),\n     target_os = \"openbsd\",\n+    target_os = \"netbsd\",\n ))]\n \n use crate::sync::atomic::AtomicU32;\n use crate::time::Duration;\n \n+#[cfg(target_os = \"netbsd\")]\n+pub const SYS___futex: i32 = 166;\n+\n /// Wait for a futex_wake operation to wake us.\n ///\n /// Returns directly if the futex doesn't hold the expected value.\n ///\n /// Returns false on timeout, and true in all other cases.\n-#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+#[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"netbsd\"))]\n pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool {\n     use super::time::Timespec;\n     use crate::ptr::null;\n@@ -34,15 +38,32 @@ pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -\n         // Use FUTEX_WAIT_BITSET rather than FUTEX_WAIT to be able to give an\n         // absolute time rather than a relative time.\n         let r = unsafe {\n-            libc::syscall(\n-                libc::SYS_futex,\n-                futex as *const AtomicU32,\n-                libc::FUTEX_WAIT_BITSET | libc::FUTEX_PRIVATE_FLAG,\n-                expected,\n-                timespec.as_ref().map_or(null(), |t| &t.t as *const libc::timespec),\n-                null::<u32>(), // This argument is unused for FUTEX_WAIT_BITSET.\n-                !0u32,         // A full bitmask, to make it behave like a regular FUTEX_WAIT.\n-            )\n+            cfg_if::cfg_if! {\n+                if #[cfg(target_os = \"netbsd\")] {\n+                    // Netbsd's futex syscall takes addr2 and val2 as separate arguments.\n+                    // (Both are unused for FUTEX_WAIT[_BITSET].)\n+                    libc::syscall(\n+                        SYS___futex,\n+                        futex as *const AtomicU32,\n+                        libc::FUTEX_WAIT_BITSET | libc::FUTEX_PRIVATE_FLAG,\n+                        expected,\n+                        timespec.as_ref().map_or(null(), |t| &t.t as *const libc::timespec),\n+                        null::<u32>(), // addr2: This argument is unused for FUTEX_WAIT_BITSET.\n+                        0,             // val2: This argument is unused for FUTEX_WAIT_BITSET.\n+                        !0u32,         // val3 / bitmask: A full bitmask, to make it behave like a regular FUTEX_WAIT.\n+                    )\n+                } else {\n+                    libc::syscall(\n+                        libc::SYS_futex,\n+                        futex as *const AtomicU32,\n+                        libc::FUTEX_WAIT_BITSET | libc::FUTEX_PRIVATE_FLAG,\n+                        expected,\n+                        timespec.as_ref().map_or(null(), |t| &t.t as *const libc::timespec),\n+                        null::<u32>(), // This argument is unused for FUTEX_WAIT_BITSET.\n+                        !0u32,         // A full bitmask, to make it behave like a regular FUTEX_WAIT.\n+                    )\n+                }\n+            }\n         };\n \n         match (r < 0).then(super::os::errno) {\n@@ -57,28 +78,34 @@ pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -\n ///\n /// Returns true if this actually woke up such a thread,\n /// or false if no thread was waiting on this futex.\n-#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+#[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"netbsd\"))]\n pub fn futex_wake(futex: &AtomicU32) -> bool {\n+    let ptr = futex as *const AtomicU32;\n+    let op = libc::FUTEX_WAKE | libc::FUTEX_PRIVATE_FLAG;\n     unsafe {\n-        libc::syscall(\n-            libc::SYS_futex,\n-            futex as *const AtomicU32,\n-            libc::FUTEX_WAKE | libc::FUTEX_PRIVATE_FLAG,\n-            1,\n-        ) > 0\n+        cfg_if::cfg_if! {\n+            if #[cfg(target_os = \"netbsd\")] {\n+                libc::syscall(SYS___futex, ptr, op, 1) > 0\n+            } else {\n+                libc::syscall(libc::SYS_futex, ptr, op, 1) > 0\n+            }\n+        }\n     }\n }\n \n /// Wake up all threads that are waiting on futex_wait on this futex.\n-#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+#[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"netbsd\"))]\n pub fn futex_wake_all(futex: &AtomicU32) {\n+    let ptr = futex as *const AtomicU32;\n+    let op = libc::FUTEX_WAKE | libc::FUTEX_PRIVATE_FLAG;\n     unsafe {\n-        libc::syscall(\n-            libc::SYS_futex,\n-            futex as *const AtomicU32,\n-            libc::FUTEX_WAKE | libc::FUTEX_PRIVATE_FLAG,\n-            i32::MAX,\n-        );\n+        cfg_if::cfg_if! {\n+            if #[cfg(target_os = \"netbsd\")] {\n+                libc::syscall(SYS___futex, ptr, op, i32::MAX);\n+            } else {\n+                libc::syscall(libc::SYS_futex, ptr, op, i32::MAX);\n+            }\n+        }\n     }\n }\n "}, {"sha": "61fc0d5841dc910ad2d5dbcd15277dc21f1335bc", "filename": "library/std/src/sys/unix/locks/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2dfad1e3f81d649124bba15f96fd8e96431cd4fc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dfad1e3f81d649124bba15f96fd8e96431cd4fc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs?ref=2dfad1e3f81d649124bba15f96fd8e96431cd4fc", "patch": "@@ -4,6 +4,7 @@ cfg_if::cfg_if! {\n         target_os = \"android\",\n         all(target_os = \"emscripten\", target_feature = \"atomics\"),\n         target_os = \"openbsd\",\n+        target_os = \"netbsd\",\n     ))] {\n         mod futex;\n         mod futex_rwlock;"}, {"sha": "4ff76aea23dc41b00dd7c80623068d7c5bd33815", "filename": "library/std/src/sys_common/thread_parker/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2dfad1e3f81d649124bba15f96fd8e96431cd4fc/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dfad1e3f81d649124bba15f96fd8e96431cd4fc/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs?ref=2dfad1e3f81d649124bba15f96fd8e96431cd4fc", "patch": "@@ -4,6 +4,7 @@ cfg_if::cfg_if! {\n         target_os = \"android\",\n         all(target_arch = \"wasm32\", target_feature = \"atomics\"),\n         target_os = \"openbsd\",\n+        target_os = \"netbsd\",\n     ))] {\n         mod futex;\n         pub use futex::Parker;"}]}