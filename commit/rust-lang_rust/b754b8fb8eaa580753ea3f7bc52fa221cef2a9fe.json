{"sha": "b754b8fb8eaa580753ea3f7bc52fa221cef2a9fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NTRiOGZiOGVhYTU4MDc1M2VhM2Y3YmM1MmZhMjIxY2VmMmE5ZmU=", "commit": {"author": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2019-04-13T20:54:57Z"}, "committer": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2019-04-13T20:54:57Z"}, "message": "Expand note on mutable references", "tree": {"sha": "72ec6bdd3895b9be36a6844a3cce562568e3a10e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72ec6bdd3895b9be36a6844a3cce562568e3a10e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b754b8fb8eaa580753ea3f7bc52fa221cef2a9fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b754b8fb8eaa580753ea3f7bc52fa221cef2a9fe", "html_url": "https://github.com/rust-lang/rust/commit/b754b8fb8eaa580753ea3f7bc52fa221cef2a9fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b754b8fb8eaa580753ea3f7bc52fa221cef2a9fe/comments", "author": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9c9d1c305488eb1125d6a10367c81a5c411039c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9c9d1c305488eb1125d6a10367c81a5c411039c", "html_url": "https://github.com/rust-lang/rust/commit/e9c9d1c305488eb1125d6a10367c81a5c411039c"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "d1ebe5ed72adf16304b5aeaa7a0d4dfe6bf7c64e", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b754b8fb8eaa580753ea3f7bc52fa221cef2a9fe/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b754b8fb8eaa580753ea3f7bc52fa221cef2a9fe/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=b754b8fb8eaa580753ea3f7bc52fa221cef2a9fe", "patch": "@@ -176,7 +176,10 @@\n //! i.e., an operation with type `fn(Pin<&Struct>) -> Pin<&Field>`?  In a\n //! similar vein, when can a generic wrapper type (such as `Vec<T>`, `Box<T>`,\n //! or `RefCell<T>`) have an operation with type `fn(Pin<&Wrapper<T>>) ->\n-//! Pin<&T>` (or similarly `fn(Pin<&mut Wrapper<T>>) -> Pin<&mut T>`)?\n+//! Pin<&T>`?\n+//!\n+//! Note: For the entirety of this discussion, the same applies for mutable references as it\n+//! does for shared references.\n //!\n //! Having a pinning projection for some field means that pinning is \"structural\":\n //! when the wrapper is pinned, the field must be considered pinned, too."}]}