{"sha": "1729965808dec239aa46f2eafaa39261f491a0b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3Mjk5NjU4MDhkZWMyMzlhYTQ2ZjJlYWZhYTM5MjYxZjQ5MWEwYjQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-05T21:47:10Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-05T21:48:51Z"}, "message": "rename InterpretCx -> InterpCx", "tree": {"sha": "ba6d40973a3ba54eccc80851f4cccbeb755d5243", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba6d40973a3ba54eccc80851f4cccbeb755d5243"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1729965808dec239aa46f2eafaa39261f491a0b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1729965808dec239aa46f2eafaa39261f491a0b4", "html_url": "https://github.com/rust-lang/rust/commit/1729965808dec239aa46f2eafaa39261f491a0b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1729965808dec239aa46f2eafaa39261f491a0b4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f23b782101c03331413870a11a787d4b605b84df", "url": "https://api.github.com/repos/rust-lang/rust/commits/f23b782101c03331413870a11a787d4b605b84df", "html_url": "https://github.com/rust-lang/rust/commit/f23b782101c03331413870a11a787d4b605b84df"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "b29ce3537706bf01be3da729f03cf40c1e1370d4", "filename": "src/eval.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1729965808dec239aa46f2eafaa39261f491a0b4/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1729965808dec239aa46f2eafaa39261f491a0b4/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=1729965808dec239aa46f2eafaa39261f491a0b4", "patch": "@@ -8,7 +8,7 @@ use rustc::hir::def_id::DefId;\n use rustc::mir;\n \n use crate::{\n-    InterpResult, InterpError, InterpretCx, StackPopCleanup, struct_error,\n+    InterpResult, InterpError, InterpCx, StackPopCleanup, struct_error,\n     Scalar, Tag, Pointer,\n     MemoryExtra, MiriMemoryKind, Evaluator, TlsEvalContextExt,\n };\n@@ -28,8 +28,8 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     tcx: TyCtxt<'tcx>,\n     main_id: DefId,\n     config: MiriConfig,\n-) -> InterpResult<'tcx, InterpretCx<'mir, 'tcx, Evaluator<'tcx>>> {\n-    let mut ecx = InterpretCx::new(\n+) -> InterpResult<'tcx, InterpCx<'mir, 'tcx, Evaluator<'tcx>>> {\n+    let mut ecx = InterpCx::new(\n         tcx.at(syntax::source_map::DUMMY_SP),\n         ty::ParamEnv::reveal_all(),\n         Evaluator::new(),\n@@ -43,7 +43,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         config.validate\n     };\n \n-    // FIXME: InterpretCx::new should take an initial MemoryExtra\n+    // FIXME: InterpCx::new should take an initial MemoryExtra\n     ecx.memory_mut().extra = MemoryExtra::new(config.seed.map(StdRng::seed_from_u64), validate);\n     \n     let main_instance = ty::Instance::mono(ecx.tcx.tcx, main_id);"}, {"sha": "930eeee96b5939e73c72902da0c9d85debd284c8", "filename": "src/machine.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1729965808dec239aa46f2eafaa39261f491a0b4/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1729965808dec239aa46f2eafaa39261f491a0b4/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=1729965808dec239aa46f2eafaa39261f491a0b4", "patch": "@@ -105,8 +105,8 @@ impl<'tcx> Evaluator<'tcx> {\n     }\n }\n \n-/// A rustc InterpretCx for Miri.\n-pub type MiriEvalContext<'mir, 'tcx> = InterpretCx<'mir, 'tcx, Evaluator<'tcx>>;\n+/// A rustc InterpCx for Miri.\n+pub type MiriEvalContext<'mir, 'tcx> = InterpCx<'mir, 'tcx, Evaluator<'tcx>>;\n \n /// A little trait that's useful to be inherited by extension traits.\n pub trait MiriEvalContextExt<'mir, 'tcx> {\n@@ -138,14 +138,14 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     const STATIC_KIND: Option<MiriMemoryKind> = Some(MiriMemoryKind::Static);\n \n     #[inline(always)]\n-    fn enforce_validity(ecx: &InterpretCx<'mir, 'tcx, Self>) -> bool {\n+    fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n         ecx.memory().extra.validate\n     }\n \n     /// Returns `Ok()` when the function was handled; fail otherwise.\n     #[inline(always)]\n     fn find_fn(\n-        ecx: &mut InterpretCx<'mir, 'tcx, Self>,\n+        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Tag>],\n         dest: Option<PlaceTy<'tcx, Tag>>,\n@@ -156,7 +156,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn call_intrinsic(\n-        ecx: &mut rustc_mir::interpret::InterpretCx<'mir, 'tcx, Self>,\n+        ecx: &mut rustc_mir::interpret::InterpCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Tag>],\n         dest: PlaceTy<'tcx, Tag>,\n@@ -166,7 +166,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn ptr_op(\n-        ecx: &rustc_mir::interpret::InterpretCx<'mir, 'tcx, Self>,\n+        ecx: &rustc_mir::interpret::InterpCx<'mir, 'tcx, Self>,\n         bin_op: mir::BinOp,\n         left: ImmTy<'tcx, Tag>,\n         right: ImmTy<'tcx, Tag>,\n@@ -175,7 +175,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     fn box_alloc(\n-        ecx: &mut InterpretCx<'mir, 'tcx, Self>,\n+        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         dest: PlaceTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx> {\n         trace!(\"box_alloc for {:?}\", dest.layout.ty);\n@@ -241,7 +241,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     #[inline(always)]\n-    fn before_terminator(_ecx: &mut InterpretCx<'mir, 'tcx, Self>) -> InterpResult<'tcx>\n+    fn before_terminator(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx>\n     {\n         // We are not interested in detecting loops.\n         Ok(())\n@@ -311,7 +311,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn retag(\n-        ecx: &mut InterpretCx<'mir, 'tcx, Self>,\n+        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         kind: mir::RetagKind,\n         place: PlaceTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx> {\n@@ -325,14 +325,14 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn stack_push(\n-        ecx: &mut InterpretCx<'mir, 'tcx, Self>,\n+        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n     ) -> InterpResult<'tcx, stacked_borrows::CallId> {\n         Ok(ecx.memory().extra.stacked_borrows.borrow_mut().new_call())\n     }\n \n     #[inline(always)]\n     fn stack_pop(\n-        ecx: &mut InterpretCx<'mir, 'tcx, Self>,\n+        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         extra: stacked_borrows::CallId,\n     ) -> InterpResult<'tcx> {\n         Ok(ecx.memory().extra.stacked_borrows.borrow_mut().end_call(extra))"}, {"sha": "2fe2ecc19581aacdc1e29ae6d9b91b80e31af73d", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1729965808dec239aa46f2eafaa39261f491a0b4/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1729965808dec239aa46f2eafaa39261f491a0b4/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=1729965808dec239aa46f2eafaa39261f491a0b4", "patch": "@@ -345,7 +345,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 trace!(\"__rust_maybe_catch_panic: {:?}\", f_instance);\n \n                 // Now we make a function call.\n-                // TODO: consider making this reusable? `InterpretCx::step` does something similar\n+                // TODO: consider making this reusable? `InterpCx::step` does something similar\n                 // for the TLS destructors, and of course `eval_main`.\n                 let mir = this.load_mir(f_instance.def)?;\n                 let ret_place = MPlaceTy::dangling(this.layout_of(this.tcx.mk_unit())?, this).into();"}]}