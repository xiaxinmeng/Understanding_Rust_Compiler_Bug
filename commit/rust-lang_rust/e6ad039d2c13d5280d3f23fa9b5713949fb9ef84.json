{"sha": "e6ad039d2c13d5280d3f23fa9b5713949fb9ef84", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2YWQwMzlkMmMxM2Q1MjgwZDNmMjNmYTliNTcxMzk0OWZiOWVmODQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-28T21:37:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-28T21:37:42Z"}, "message": "Auto merge of #29415 - nikomatsakis:issue-29161, r=nikomatsakis\n\nFix corner case in privacy that was causing ICEs when the `source_did` was not crate-local.\r\n\r\nFull confession: I only kinda sorta understand this code, but afaict it's legit for `source_did` to be from another crate.\r\n\r\nr? @alexcrichton", "tree": {"sha": "c266d06d201f30feda5f2a60e652b4c03ad94dfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c266d06d201f30feda5f2a60e652b4c03ad94dfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6ad039d2c13d5280d3f23fa9b5713949fb9ef84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6ad039d2c13d5280d3f23fa9b5713949fb9ef84", "html_url": "https://github.com/rust-lang/rust/commit/e6ad039d2c13d5280d3f23fa9b5713949fb9ef84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6ad039d2c13d5280d3f23fa9b5713949fb9ef84/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65623dba0d0c39de0e7cc66a31bce45328c3caa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/65623dba0d0c39de0e7cc66a31bce45328c3caa8", "html_url": "https://github.com/rust-lang/rust/commit/65623dba0d0c39de0e7cc66a31bce45328c3caa8"}, {"sha": "19996d4cdf754ecb59ba3718d631c1ece307d5a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/19996d4cdf754ecb59ba3718d631c1ece307d5a3", "html_url": "https://github.com/rust-lang/rust/commit/19996d4cdf754ecb59ba3718d631c1ece307d5a3"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "dd990abaa9aa3241d1c492db683db8fd4e3e2eda", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e6ad039d2c13d5280d3f23fa9b5713949fb9ef84/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6ad039d2c13d5280d3f23fa9b5713949fb9ef84/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=e6ad039d2c13d5280d3f23fa9b5713949fb9ef84", "patch": "@@ -389,6 +389,7 @@ struct PrivacyVisitor<'a, 'tcx: 'a> {\n     external_exports: ExternalExports,\n }\n \n+#[derive(Debug)]\n enum PrivacyResult {\n     Allowable,\n     ExternallyDenied,\n@@ -645,9 +646,17 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n     /// Guarantee that a particular definition is public. Returns a CheckResult\n     /// which contains any errors found. These can be reported using `report_error`.\n     /// If the result is `None`, no errors were found.\n-    fn ensure_public(&self, span: Span, to_check: DefId,\n-                     source_did: Option<DefId>, msg: &str) -> CheckResult {\n-        let id = match self.def_privacy(to_check) {\n+    fn ensure_public(&self,\n+                     span: Span,\n+                     to_check: DefId,\n+                     source_did: Option<DefId>,\n+                     msg: &str)\n+                     -> CheckResult {\n+        debug!(\"ensure_public(span={:?}, to_check={:?}, source_did={:?}, msg={:?})\",\n+               span, to_check, source_did, msg);\n+        let def_privacy = self.def_privacy(to_check);\n+        debug!(\"ensure_public: def_privacy={:?}\", def_privacy);\n+        let id = match def_privacy {\n             ExternallyDenied => {\n                 return Some((span, format!(\"{} is private\", msg), None))\n             }\n@@ -662,8 +671,8 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n         // ancestry. (Both the item being checked and its parent must\n         // be local.)\n         let def_id = source_did.unwrap_or(to_check);\n-        let node_id = self.tcx.map.as_local_node_id(def_id).unwrap();\n-        let (err_span, err_msg) = if id == node_id {\n+        let node_id = self.tcx.map.as_local_node_id(def_id);\n+        let (err_span, err_msg) = if Some(id) == node_id {\n             return Some((span, format!(\"{} is private\", msg), None));\n         } else {\n             (span, format!(\"{} is inaccessible\", msg))"}, {"sha": "1821f5717cf7916ad33d7529afd607172a8de514", "filename": "src/test/compile-fail/issue-29161.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e6ad039d2c13d5280d3f23fa9b5713949fb9ef84/src%2Ftest%2Fcompile-fail%2Fissue-29161.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6ad039d2c13d5280d3f23fa9b5713949fb9ef84/src%2Ftest%2Fcompile-fail%2Fissue-29161.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-29161.rs?ref=e6ad039d2c13d5280d3f23fa9b5713949fb9ef84", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod a {\n+    struct A;\n+\n+    impl Default for A {\n+        pub fn default() -> A {\n+            //~^ ERROR E0449\n+            A;\n+        }\n+    }\n+}\n+\n+\n+fn main() {\n+    a::A::default();\n+    //~^ ERROR method `default` is inaccessible\n+ }"}]}