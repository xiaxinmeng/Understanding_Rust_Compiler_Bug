{"sha": "47d8ba9095219fe018c9dd86453d2853a59555fe", "node_id": "C_kwDOAAsO6NoAKDQ3ZDhiYTkwOTUyMTlmZTAxOGM5ZGQ4NjQ1M2QyODUzYTU5NTU1ZmU", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-04-29T15:58:43Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-04-29T15:58:43Z"}, "message": "handle compiler emitting only excluded strings", "tree": {"sha": "899bf7354d46c4f22f8a09fd6501e5f0932a7052", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/899bf7354d46c4f22f8a09fd6501e5f0932a7052"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47d8ba9095219fe018c9dd86453d2853a59555fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmJsC0UACgkQzXazX3c0\ndp6aVA//XWGbDw4ztoyBArDuUlNhMsD5iCBFRq8kZw5tDOWU1Hf5vUAMUgeiOtyt\nzxZVB+prKkEJ6MtR7w65JEX/WnJU+XojfXlI5YHUvTCvg9uxh0Vd4NiYCjPiLEC7\nMp4FIxldBl3d1K3wFsXDeZraNi8URxsdf8ElO0oDKu5NFpomMZtFH0sJ/HfzvPUL\nNQbOuttQP3R/XFKi6fNMZ2MbzS1b1XPTTkCfnW9OYoMPA/1OxMsnGFrNHw61MzhH\nPQorJ6tkTa1WUh+0IcSvoqZBMvZ0n1Z3sABahdG0NzjFbfLY6/8IVcb1LFe0z9aa\nWn5FCJTcSxgpAku0z2ECOndlXk/w2jLv+VZ3F3kc+O5SoZTf4KpIsgtWXcyCL9he\nFJx7krHXVXkf5FZcLaYbG0p40THglWjcf44QNCyM6La8oqr4JLGj0y2qtQQr2lg+\ngP4a6mLuIPA0MK9UcW6fINDXfQKgLpziFGCKvh4GoGGjsxZUnwjNr6EwM+Lbs1M6\nK5f5tRg9HOgLSRWwcNRwd9oL0jP7QD5Gsxh/4ntKcvjWO7zKDrSXaw5UjOH9S16d\nlFE3X0pea68BAQ0w/8MDqf23uz53Dh2plFWY5FbiA56pFt+iSQi/hTOQrNbQhxYX\nO5n6tMsBnkND5GojWH3pPp5IeUuDhjXQqSBKoTDtKbk1JWTnzwI=\n=b8de\n-----END PGP SIGNATURE-----", "payload": "tree 899bf7354d46c4f22f8a09fd6501e5f0932a7052\nparent 73497b11bb4d0926dca58c9ca1f65746dff673e8\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1651247923 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1651247923 +0200\n\nhandle compiler emitting only excluded strings\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47d8ba9095219fe018c9dd86453d2853a59555fe", "html_url": "https://github.com/rust-lang/rust/commit/47d8ba9095219fe018c9dd86453d2853a59555fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47d8ba9095219fe018c9dd86453d2853a59555fe/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73497b11bb4d0926dca58c9ca1f65746dff673e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/73497b11bb4d0926dca58c9ca1f65746dff673e8", "html_url": "https://github.com/rust-lang/rust/commit/73497b11bb4d0926dca58c9ca1f65746dff673e8"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "4c48cd0ce7714082706f79c763707eb849ab67fb", "filename": "src/tools/compiletest/src/read2.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/47d8ba9095219fe018c9dd86453d2853a59555fe/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47d8ba9095219fe018c9dd86453d2853a59555fe/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs?ref=47d8ba9095219fe018c9dd86453d2853a59555fe", "patch": "@@ -11,9 +11,10 @@ pub fn read2_abbreviated(mut child: Child, exclude_from_len: &[String]) -> io::R\n \n     const HEAD_LEN: usize = 160 * 1024;\n     const TAIL_LEN: usize = 256 * 1024;\n+    const EXCLUDED_PLACEHOLDER_LEN: isize = 32;\n \n     enum ProcOutput {\n-        Full { bytes: Vec<u8>, excluded_len: usize },\n+        Full { bytes: Vec<u8>, excluded_len: isize },\n         Abbreviated { head: Vec<u8>, skipped: usize, tail: Box<[u8]> },\n     }\n \n@@ -30,17 +31,22 @@ pub fn read2_abbreviated(mut child: Child, exclude_from_len: &[String]) -> io::R\n                     // paths when calculating the string length, while still including the full\n                     // path in the output. This could result in some output being larger than the\n                     // threshold, but it's better than having nondeterministic failures.\n+                    //\n+                    // The compiler emitting only excluded strings is addressed by adding a\n+                    // placeholder size for each excluded segment, which will eventually reach\n+                    // the configured threshold.\n                     for pattern in exclude_from_len {\n                         let pattern_bytes = pattern.as_bytes();\n                         let matches = data\n                             .windows(pattern_bytes.len())\n                             .filter(|window| window == &pattern_bytes)\n                             .count();\n-                        *excluded_len += matches * pattern_bytes.len();\n+                        *excluded_len += matches as isize\n+                            * (EXCLUDED_PLACEHOLDER_LEN - pattern_bytes.len() as isize);\n                     }\n \n                     let new_len = bytes.len();\n-                    if new_len.saturating_sub(*excluded_len) <= HEAD_LEN + TAIL_LEN {\n+                    if (new_len as isize + *excluded_len) as usize <= HEAD_LEN + TAIL_LEN {\n                         return;\n                     }\n "}]}