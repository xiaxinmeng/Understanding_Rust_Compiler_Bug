{"sha": "1595c9d767de72340358028e87d3eb386af0adfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1OTVjOWQ3NjdkZTcyMzQwMzU4MDI4ZTg3ZDNlYjM4NmFmMGFkZmU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-14T00:25:36Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-14T00:57:43Z"}, "message": "rustc: Assignment expressions have nil type. Closes #483", "tree": {"sha": "6e308e6fbce519d768285a653e0462744510e386", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e308e6fbce519d768285a653e0462744510e386"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1595c9d767de72340358028e87d3eb386af0adfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1595c9d767de72340358028e87d3eb386af0adfe", "html_url": "https://github.com/rust-lang/rust/commit/1595c9d767de72340358028e87d3eb386af0adfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1595c9d767de72340358028e87d3eb386af0adfe/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d65ad8c31c47a14a2b23e9991a34c02e79ec741e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d65ad8c31c47a14a2b23e9991a34c02e79ec741e", "html_url": "https://github.com/rust-lang/rust/commit/d65ad8c31c47a14a2b23e9991a34c02e79ec741e"}], "stats": {"total": 59, "additions": 46, "deletions": 13}, "files": [{"sha": "6c419be8b34215069689c5a5bdfea97230310ac8", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1595c9d767de72340358028e87d3eb386af0adfe/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1595c9d767de72340358028e87d3eb386af0adfe/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=1595c9d767de72340358028e87d3eb386af0adfe", "patch": "@@ -5832,30 +5832,32 @@ fn trans_expr_out(&@block_ctxt cx, &@ast::expr e, out_method output)\n             ret res(next_cx, sub.val);\n         }\n \n-        case (ast::expr_move(?dst, ?src, ?ann)) {\n+        case (ast::expr_move(?dst, ?src, _)) {\n             auto lhs_res = trans_lval(cx, dst);\n             assert (lhs_res.is_mem);\n             *(lhs_res.res.bcx) = rec(sp=src.span with *(lhs_res.res.bcx));\n             auto rhs_res = trans_lval(lhs_res.res.bcx, src);\n-            auto t = node_ann_type(cx.fcx.lcx.ccx, ann);\n+            auto t = ty::expr_ty(cx.fcx.lcx.ccx.tcx, src);\n             // FIXME: calculate copy init-ness in typestate.\n-            ret move_val(rhs_res.res.bcx, DROP_EXISTING,\n-                         lhs_res.res.val, rhs_res.res.val, t);\n+            auto move_res =  move_val(rhs_res.res.bcx, DROP_EXISTING,\n+                                      lhs_res.res.val, rhs_res.res.val, t);\n+            ret res(move_res.bcx, C_nil());\n         }\n \n-        case (ast::expr_assign(?dst, ?src, ?ann)) {\n+        case (ast::expr_assign(?dst, ?src, _)) {\n             auto lhs_res = trans_lval(cx, dst);\n             assert (lhs_res.is_mem);\n             *(lhs_res.res.bcx) = rec(sp=src.span with *(lhs_res.res.bcx));\n             auto rhs_res = trans_expr(lhs_res.res.bcx, src);\n-            auto t = node_ann_type(cx.fcx.lcx.ccx, ann);\n+            auto t = ty::expr_ty(cx.fcx.lcx.ccx.tcx, src);\n             // FIXME: calculate copy init-ness in typestate.\n-            ret copy_val(rhs_res.bcx, DROP_EXISTING,\n-                        lhs_res.res.val, rhs_res.val, t);\n+            auto copy_res = copy_val(rhs_res.bcx, DROP_EXISTING,\n+                                     lhs_res.res.val, rhs_res.val, t);\n+            ret res(copy_res.bcx, C_nil());\n         }\n \n-        case (ast::expr_assign_op(?op, ?dst, ?src, ?ann)) {\n-            auto t = node_ann_type(cx.fcx.lcx.ccx, ann);\n+        case (ast::expr_assign_op(?op, ?dst, ?src, _)) {\n+            auto t = ty::expr_ty(cx.fcx.lcx.ccx.tcx, src);\n             auto lhs_res = trans_lval(cx, dst);\n             assert (lhs_res.is_mem);\n             *(lhs_res.res.bcx) = rec(sp=src.span with *(lhs_res.res.bcx));\n@@ -5875,8 +5877,9 @@ fn trans_expr_out(&@block_ctxt cx, &@ast::expr e, out_method output)\n             auto v = trans_eager_binop(rhs_res.bcx, op, t,\n                                        lhs_val, rhs_res.val);\n             // FIXME: calculate copy init-ness in typestate.\n-            ret copy_val(v.bcx, DROP_EXISTING,\n-                        lhs_res.res.val, v.val, t);\n+            auto copy_res = copy_val(v.bcx, DROP_EXISTING,\n+                                     lhs_res.res.val, v.val, t);\n+            ret res(copy_res.bcx, C_nil());\n         }\n \n         case (ast::expr_bind(?f, ?args, ?ann)) {"}, {"sha": "99dfe96da62a747e6b961f776d9a3ee9f6c79b47", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1595c9d767de72340358028e87d3eb386af0adfe/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1595c9d767de72340358028e87d3eb386af0adfe/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=1595c9d767de72340358028e87d3eb386af0adfe", "patch": "@@ -1504,7 +1504,7 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n         auto typ = demand::simple(fcx, sp,\n                                   expr_ty(fcx.ccx.tcx, lhs),\n                                   expr_ty(fcx.ccx.tcx, rhs));\n-        write::ty_only_fixup(fcx, a.id, typ);\n+        write::ty_only_fixup(fcx, a.id, ty::mk_nil(fcx.ccx.tcx));\n     }\n \n     // A generic function for checking call expressions"}, {"sha": "72a0fba2ea5f5be448a4aae2ba137532f0032f9e", "filename": "src/test/run-pass/assign-assign.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1595c9d767de72340358028e87d3eb386af0adfe/src%2Ftest%2Frun-pass%2Fassign-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1595c9d767de72340358028e87d3eb386af0adfe/src%2Ftest%2Frun-pass%2Fassign-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassign-assign.rs?ref=1595c9d767de72340358028e87d3eb386af0adfe", "patch": "@@ -0,0 +1,30 @@\n+// xfail-stage0\n+\n+// Issue 483 - Assignment expressions result in nil\n+\n+fn test_assign() {\n+  let int x;\n+\n+  let () y = (x = 10);\n+  assert (x == 10);\n+  auto z = (x = 11);\n+  assert (x == 11);\n+  z = (x = 12);\n+  assert ( x == 12);\n+}\n+\n+fn test_assign_op() {\n+  let int x = 0;\n+\n+  let () y = (x += 10);\n+  assert (x == 10);\n+  auto z = (x += 11);\n+  assert (x == 21);\n+  z = (x += 12);\n+  assert ( x == 33);\n+}\n+\n+fn main() {\n+  test_assign();\n+  test_assign_op();\n+}"}]}