{"sha": "017e1726ff658117f43854181fb75c6b26a53b88", "node_id": "C_kwDOAAsO6NoAKDAxN2UxNzI2ZmY2NTgxMTdmNDM4NTQxODFmYjc1YzZiMjZhNTNiODg", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-07-26T11:29:18Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-07-26T11:29:18Z"}, "message": "Remove dead code from cg_llvm", "tree": {"sha": "86f409a249f66d21f1570e200d9cae3afbcae3a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86f409a249f66d21f1570e200d9cae3afbcae3a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/017e1726ff658117f43854181fb75c6b26a53b88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/017e1726ff658117f43854181fb75c6b26a53b88", "html_url": "https://github.com/rust-lang/rust/commit/017e1726ff658117f43854181fb75c6b26a53b88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/017e1726ff658117f43854181fb75c6b26a53b88/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b629c85bd74dfb730a3e9308312b007c0bf027cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b629c85bd74dfb730a3e9308312b007c0bf027cb", "html_url": "https://github.com/rust-lang/rust/commit/b629c85bd74dfb730a3e9308312b007c0bf027cb"}], "stats": {"total": 100, "additions": 0, "deletions": 100}, "files": [{"sha": "45de284d22a6735bafb39d1d8eead2604de9cf95", "filename": "compiler/rustc_codegen_llvm/src/llvm/diagnostic.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/017e1726ff658117f43854181fb75c6b26a53b88/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017e1726ff658117f43854181fb75c6b26a53b88/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fdiagnostic.rs?ref=017e1726ff658117f43854181fb75c6b26a53b88", "patch": "@@ -20,19 +20,6 @@ pub enum OptimizationDiagnosticKind {\n     OptimizationRemarkOther,\n }\n \n-impl OptimizationDiagnosticKind {\n-    pub fn describe(self) -> &'static str {\n-        match self {\n-            OptimizationRemark | OptimizationRemarkOther => \"remark\",\n-            OptimizationMissed => \"missed\",\n-            OptimizationAnalysis => \"analysis\",\n-            OptimizationAnalysisFPCommute => \"floating-point\",\n-            OptimizationAnalysisAliasing => \"aliasing\",\n-            OptimizationFailure => \"failure\",\n-        }\n-    }\n-}\n-\n pub struct OptimizationDiagnostic<'ll> {\n     pub kind: OptimizationDiagnosticKind,\n     pub pass_name: String,"}, {"sha": "58deda507c8106348c677f1ebab49b42c6e2bf64", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/017e1726ff658117f43854181fb75c6b26a53b88/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017e1726ff658117f43854181fb75c6b26a53b88/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=017e1726ff658117f43854181fb75c6b26a53b88", "patch": "@@ -569,16 +569,6 @@ pub enum ArchiveKind {\n     K_COFF,\n }\n \n-/// LLVMRustPassKind\n-#[derive(Copy, Clone, PartialEq, Debug)]\n-#[repr(C)]\n-#[allow(dead_code)] // Variants constructed by C++.\n-pub enum PassKind {\n-    Other,\n-    Function,\n-    Module,\n-}\n-\n // LLVMRustThinLTOData\n extern \"C\" {\n     pub type ThinLTOData;\n@@ -589,10 +579,6 @@ extern \"C\" {\n     pub type ThinLTOBuffer;\n }\n \n-// LLVMRustModuleNameCallback\n-pub type ThinLTOModuleNameCallback =\n-    unsafe extern \"C\" fn(*mut c_void, *const c_char, *const c_char);\n-\n /// LLVMRustThinLTOModule\n #[repr(C)]\n pub struct ThinLTOModule {\n@@ -658,9 +644,6 @@ extern \"C\" {\n }\n #[repr(C)]\n pub struct Builder<'a>(InvariantOpaque<'a>);\n-extern \"C\" {\n-    pub type MemoryBuffer;\n-}\n #[repr(C)]\n pub struct PassManager<'a>(InvariantOpaque<'a>);\n extern \"C\" {\n@@ -1013,7 +996,6 @@ extern \"C\" {\n     pub fn LLVMSetDataLayout(M: &Module, Triple: *const c_char);\n \n     /// See Module::setModuleInlineAsm.\n-    pub fn LLVMSetModuleInlineAsm2(M: &Module, Asm: *const c_char, AsmLen: size_t);\n     pub fn LLVMRustAppendModuleInlineAsm(M: &Module, Asm: *const c_char, AsmLen: size_t);\n \n     /// See llvm::LLVMTypeKind::getTypeID.\n@@ -1167,7 +1149,6 @@ extern \"C\" {\n     pub fn LLVMGetInitializer(GlobalVar: &Value) -> Option<&Value>;\n     pub fn LLVMSetInitializer<'a>(GlobalVar: &'a Value, ConstantVal: &'a Value);\n     pub fn LLVMIsThreadLocal(GlobalVar: &Value) -> Bool;\n-    pub fn LLVMSetThreadLocal(GlobalVar: &Value, IsThreadLocal: Bool);\n     pub fn LLVMSetThreadLocalMode(GlobalVar: &Value, Mode: ThreadLocalMode);\n     pub fn LLVMIsGlobalConstant(GlobalVar: &Value) -> Bool;\n     pub fn LLVMSetGlobalConstant(GlobalVar: &Value, IsConstant: Bool);\n@@ -2246,7 +2227,6 @@ extern \"C\" {\n \n     pub fn LLVMIsAConstantInt(value_ref: &Value) -> Option<&ConstantInt>;\n \n-    pub fn LLVMRustPassKind(Pass: &Pass) -> PassKind;\n     pub fn LLVMRustFindAndCreatePass(Pass: *const c_char) -> Option<&'static mut Pass>;\n     pub fn LLVMRustCreateAddressSanitizerFunctionPass(Recover: bool) -> &'static mut Pass;\n     pub fn LLVMRustCreateModuleAddressSanitizerPass(Recover: bool) -> &'static mut Pass;\n@@ -2363,7 +2343,6 @@ extern \"C\" {\n     ) -> LLVMRustResult;\n     pub fn LLVMRustSetLLVMOptions(Argc: c_int, Argv: *const *const c_char);\n     pub fn LLVMRustPrintPasses();\n-    pub fn LLVMRustGetInstructionCount(M: &Module) -> u32;\n     pub fn LLVMRustSetNormalizedTarget(M: &Module, triple: *const c_char);\n     pub fn LLVMRustAddAlwaysInlinePass(P: &PassManagerBuilder, AddLifetimes: bool);\n     pub fn LLVMRustRunRestrictionPass(M: &Module, syms: *const *const c_char, len: size_t);\n@@ -2461,7 +2440,6 @@ extern \"C\" {\n     pub fn LLVMRustPositionBuilderAtStart<'a>(B: &Builder<'a>, BB: &'a BasicBlock);\n \n     pub fn LLVMRustSetComdat<'a>(M: &'a Module, V: &'a Value, Name: *const c_char, NameLen: size_t);\n-    pub fn LLVMRustUnsetComdat(V: &Value);\n     pub fn LLVMRustSetModulePICLevel(M: &Module);\n     pub fn LLVMRustSetModulePIELevel(M: &Module);\n     pub fn LLVMRustSetModuleCodeModel(M: &Module, Model: CodeModel);\n@@ -2493,11 +2471,6 @@ extern \"C\" {\n         Module: &Module,\n         Target: &TargetMachine,\n     ) -> bool;\n-    pub fn LLVMRustGetThinLTOModuleImports(\n-        Data: *const ThinLTOData,\n-        ModuleNameCallback: ThinLTOModuleNameCallback,\n-        CallbackPayload: *mut c_void,\n-    );\n     pub fn LLVMRustFreeThinLTOData(Data: &'static mut ThinLTOData);\n     pub fn LLVMRustParseBitcodeForLTO(\n         Context: &Context,"}, {"sha": "fd9076eb363cbbdceeabc9a238e1a015322d9c62", "filename": "compiler/rustc_codegen_llvm/src/llvm/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/017e1726ff658117f43854181fb75c6b26a53b88/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017e1726ff658117f43854181fb75c6b26a53b88/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs?ref=017e1726ff658117f43854181fb75c6b26a53b88", "patch": "@@ -158,12 +158,6 @@ pub fn SetUniqueComdat(llmod: &Module, val: &Value) {\n     }\n }\n \n-pub fn UnsetComdat(val: &Value) {\n-    unsafe {\n-        LLVMRustUnsetComdat(val);\n-    }\n-}\n-\n pub fn SetUnnamedAddress(global: &Value, unnamed: UnnamedAddr) {\n     unsafe {\n         LLVMSetUnnamedAddress(global, unnamed);"}, {"sha": "0a6bd49992d9932f37326f75cfba45d046ed6e1e", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/017e1726ff658117f43854181fb75c6b26a53b88/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/017e1726ff658117f43854181fb75c6b26a53b88/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=017e1726ff658117f43854181fb75c6b26a53b88", "patch": "@@ -90,23 +90,6 @@ extern \"C\" void LLVMTimeTraceProfilerFinish(const char* FileName) {\n   timeTraceProfilerCleanup();\n }\n \n-enum class LLVMRustPassKind {\n-  Other,\n-  Function,\n-  Module,\n-};\n-\n-static LLVMRustPassKind toRust(PassKind Kind) {\n-  switch (Kind) {\n-  case PT_Function:\n-    return LLVMRustPassKind::Function;\n-  case PT_Module:\n-    return LLVMRustPassKind::Module;\n-  default:\n-    return LLVMRustPassKind::Other;\n-  }\n-}\n-\n extern \"C\" LLVMPassRef LLVMRustFindAndCreatePass(const char *PassName) {\n #if LLVM_VERSION_LT(15, 0)\n   StringRef SR(PassName);\n@@ -172,12 +155,6 @@ extern \"C\" LLVMPassRef LLVMRustCreateHWAddressSanitizerPass(bool Recover) {\n #endif\n }\n \n-extern \"C\" LLVMRustPassKind LLVMRustPassKind(LLVMPassRef RustPass) {\n-  assert(RustPass);\n-  Pass *Pass = unwrap(RustPass);\n-  return toRust(Pass->getPassKind());\n-}\n-\n extern \"C\" void LLVMRustAddPass(LLVMPassManagerRef PMR, LLVMPassRef RustPass) {\n #if LLVM_VERSION_LT(15, 0)\n   assert(RustPass);\n@@ -1604,28 +1581,6 @@ LLVMRustPrepareThinLTOImport(const LLVMRustThinLTOData *Data, LLVMModuleRef M,\n   return true;\n }\n \n-extern \"C\" typedef void (*LLVMRustModuleNameCallback)(void*, // payload\n-                                                      const char*, // importing module name\n-                                                      const char*); // imported module name\n-\n-// Calls `module_name_callback` for each module import done by ThinLTO.\n-// The callback is provided with regular null-terminated C strings.\n-extern \"C\" void\n-LLVMRustGetThinLTOModules(const LLVMRustThinLTOData *data,\n-                                LLVMRustModuleNameCallback module_name_callback,\n-                                void* callback_payload) {\n-  for (const auto& importing_module : data->ImportLists) {\n-    const std::string importing_module_id = importing_module.getKey().str();\n-    const auto& imports = importing_module.getValue();\n-    for (const auto& imported_module : imports) {\n-      const std::string imported_module_id = imported_module.getKey().str();\n-      module_name_callback(callback_payload,\n-                           importing_module_id.c_str(),\n-                           imported_module_id.c_str());\n-    }\n-  }\n-}\n-\n // This struct and various functions are sort of a hack right now, but the\n // problem is that we've got in-memory LLVM modules after we generate and\n // optimize all codegen-units for one compilation in rustc. To be compatible"}, {"sha": "97e77bebe666353f256c57a84a7bf0ca0442d956", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/017e1726ff658117f43854181fb75c6b26a53b88/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/017e1726ff658117f43854181fb75c6b26a53b88/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=017e1726ff658117f43854181fb75c6b26a53b88", "patch": "@@ -88,10 +88,6 @@ extern \"C\" char *LLVMRustGetLastError(void) {\n   return Ret;\n }\n \n-extern \"C\" unsigned int LLVMRustGetInstructionCount(LLVMModuleRef M) {\n-  return unwrap(M)->getInstructionCount();\n-}\n-\n extern \"C\" void LLVMRustSetLastError(const char *Err) {\n   free((void *)LastError);\n   LastError = strdup(Err);\n@@ -1460,11 +1456,6 @@ extern \"C\" void LLVMRustSetComdat(LLVMModuleRef M, LLVMValueRef V,\n   }\n }\n \n-extern \"C\" void LLVMRustUnsetComdat(LLVMValueRef V) {\n-  GlobalObject *GV = unwrap<GlobalObject>(V);\n-  GV->setComdat(nullptr);\n-}\n-\n enum class LLVMRustLinkage {\n   ExternalLinkage = 0,\n   AvailableExternallyLinkage = 1,"}]}