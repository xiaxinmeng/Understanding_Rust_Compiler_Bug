{"sha": "6dacb1aa678046940d3fae7a68bd0112accecfd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYWNiMWFhNjc4MDQ2OTQwZDNmYWU3YTY4YmQwMTEyYWNjZWNmZDQ=", "commit": {"author": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-17T20:56:55Z"}, "committer": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-24T06:20:34Z"}, "message": "Change lint name to `suboptimal_flops`", "tree": {"sha": "03f0f8062c2353e746c2f3653b7f63f082e2b709", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03f0f8062c2353e746c2f3653b7f63f082e2b709"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dacb1aa678046940d3fae7a68bd0112accecfd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dacb1aa678046940d3fae7a68bd0112accecfd4", "html_url": "https://github.com/rust-lang/rust/commit/6dacb1aa678046940d3fae7a68bd0112accecfd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dacb1aa678046940d3fae7a68bd0112accecfd4/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc03f465c3801887aa53b0f6eaf35d9b55827b95", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc03f465c3801887aa53b0f6eaf35d9b55827b95", "html_url": "https://github.com/rust-lang/rust/commit/bc03f465c3801887aa53b0f6eaf35d9b55827b95"}], "stats": {"total": 86, "additions": 45, "deletions": 41}, "files": [{"sha": "87ece835f7f00db0a108ca1a1800971d0eab1b02", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6dacb1aa678046940d3fae7a68bd0112accecfd4/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/6dacb1aa678046940d3fae7a68bd0112accecfd4/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=6dacb1aa678046940d3fae7a68bd0112accecfd4", "patch": "@@ -1349,6 +1349,7 @@ Released 2018-09-13\n [`string_lit_as_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_lit_as_bytes\n [`string_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_to_string\n [`struct_excessive_bools`]: https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools\n+[`suboptimal_flops`]: https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops\n [`suspicious_arithmetic_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_arithmetic_impl\n [`suspicious_assignment_formatting`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_assignment_formatting\n [`suspicious_else_formatting`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_else_formatting"}, {"sha": "61938405d92d2866426cba0a7bb32c7a8497a196", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6dacb1aa678046940d3fae7a68bd0112accecfd4/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dacb1aa678046940d3fae7a68bd0112accecfd4/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=6dacb1aa678046940d3fae7a68bd0112accecfd4", "patch": "@@ -4,10 +4,10 @@ use crate::consts::{\n };\n use crate::utils::*;\n use if_chain::if_chain;\n-use rustc_hir::*;\n-use rustc_lint::{LateContext, LateLintPass};\n use rustc::ty;\n use rustc_errors::Applicability;\n+use rustc_hir::*;\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::f32::consts as f32_consts;\n use std::f64::consts as f64_consts;\n@@ -16,11 +16,10 @@ use syntax::ast;\n \n declare_clippy_lint! {\n     /// **What it does:** Looks for floating-point expressions that\n-    /// can be expressed using built-in methods to improve accuracy,\n-    /// performance and/or succinctness.\n+    /// can be expressed using built-in methods to improve both\n+    /// accuracy and performance.\n     ///\n-    /// **Why is this bad?** Negatively affects accuracy, performance\n-    /// and/or readability.\n+    /// **Why is this bad?** Negatively impacts accuracy and performance.\n     ///\n     /// **Known problems:** None\n     ///\n@@ -59,16 +58,16 @@ declare_clippy_lint! {\n     /// let _ = a.exp_m1();\n     /// let _ = a.powi(2);\n     /// ```\n-    pub FLOATING_POINT_IMPROVEMENTS,\n+    pub SUBOPTIMAL_FLOPS,\n     nursery,\n-    \"looks for improvements to floating-point expressions\"\n+    \"usage of sub-optimal floating point operations\"\n }\n \n-declare_lint_pass!(FloatingPointArithmetic => [FLOATING_POINT_IMPROVEMENTS]);\n+declare_lint_pass!(FloatingPointArithmetic => [SUBOPTIMAL_FLOPS]);\n \n // Returns the specialized log method for a given base if base is constant\n // and is one of 2, 10 and e\n-fn get_specialized_log_method(cx: &LateContext<'_, '_>, base: &Expr) -> Option<&'static str> {\n+fn get_specialized_log_method(cx: &LateContext<'_, '_>, base: &Expr<'_>) -> Option<&'static str> {\n     if let Some((value, _)) = constant(cx, cx.tables, base) {\n         if F32(2.0) == value || F64(2.0) == value {\n             return Some(\"log2\");\n@@ -124,7 +123,7 @@ fn check_log_base(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args: &[Expr<'_>])\n     if let Some(method) = get_specialized_log_method(cx, &args[1]) {\n         span_lint_and_sugg(\n             cx,\n-            FLOATING_POINT_IMPROVEMENTS,\n+            SUBOPTIMAL_FLOPS,\n             expr.span,\n             \"logarithm for bases 2, 10 and e can be computed more accurately\",\n             \"consider using\",\n@@ -136,7 +135,7 @@ fn check_log_base(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args: &[Expr<'_>])\n \n // TODO: Lint expressions of the form `(x + y).ln()` where y > 1 and\n // suggest usage of `(x + (y - 1)).ln_1p()` instead\n-fn check_ln1p(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n+fn check_ln1p(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n     if_chain! {\n         if let ExprKind::Binary(op, ref lhs, ref rhs) = &args[0].kind;\n         if op.node == BinOpKind::Add;\n@@ -149,7 +148,7 @@ fn check_ln1p(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n \n             span_lint_and_sugg(\n                 cx,\n-                FLOATING_POINT_IMPROVEMENTS,\n+                SUBOPTIMAL_FLOPS,\n                 expr.span,\n                 \"ln(1 + x) can be computed more accurately\",\n                 \"consider using\",\n@@ -185,7 +184,7 @@ fn get_integer_from_float_constant(value: &Constant) -> Option<i64> {\n     }\n }\n \n-fn check_powf(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n+fn check_powf(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n     // Check receiver\n     if let Some((value, _)) = constant(cx, cx.tables, &args[0]) {\n         let method;\n@@ -200,7 +199,7 @@ fn check_powf(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n \n         span_lint_and_sugg(\n             cx,\n-            FLOATING_POINT_IMPROVEMENTS,\n+            SUBOPTIMAL_FLOPS,\n             expr.span,\n             \"exponent for bases 2 and e can be computed more accurately\",\n             \"consider using\",\n@@ -223,7 +222,7 @@ fn check_powf(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n         } else if let Some(exponent) = get_integer_from_float_constant(&value) {\n             span_lint_and_sugg(\n                 cx,\n-                FLOATING_POINT_IMPROVEMENTS,\n+                SUBOPTIMAL_FLOPS,\n                 expr.span,\n                 \"exponentiation with integer powers can be computed more efficiently\",\n                 \"consider using\",\n@@ -238,7 +237,7 @@ fn check_powf(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n \n         span_lint_and_sugg(\n             cx,\n-            FLOATING_POINT_IMPROVEMENTS,\n+            SUBOPTIMAL_FLOPS,\n             expr.span,\n             help,\n             \"consider using\",\n@@ -250,7 +249,7 @@ fn check_powf(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n \n // TODO: Lint expressions of the form `x.exp() - y` where y > 1\n // and suggest usage of `x.exp_m1() - (y - 1)` instead\n-fn check_expm1(cx: &LateContext<'_, '_>, expr: &Expr) {\n+fn check_expm1(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n     if_chain! {\n         if let ExprKind::Binary(op, ref lhs, ref rhs) = expr.kind;\n         if op.node == BinOpKind::Sub;\n@@ -263,7 +262,7 @@ fn check_expm1(cx: &LateContext<'_, '_>, expr: &Expr) {\n         then {\n             span_lint_and_sugg(\n                 cx,\n-                FLOATING_POINT_IMPROVEMENTS,\n+                SUBOPTIMAL_FLOPS,\n                 expr.span,\n                 \"(e.pow(x) - 1) can be computed more accurately\",\n                 \"consider using\",\n@@ -278,7 +277,7 @@ fn check_expm1(cx: &LateContext<'_, '_>, expr: &Expr) {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FloatingPointArithmetic {\n-    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n         if let ExprKind::MethodCall(ref path, _, args) = &expr.kind {\n             let recv_ty = cx.tables.expr_ty(&args[0]);\n "}, {"sha": "59ad7e7a651a91d897c7888774cd39a48b2ca46e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6dacb1aa678046940d3fae7a68bd0112accecfd4/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dacb1aa678046940d3fae7a68bd0112accecfd4/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=6dacb1aa678046940d3fae7a68bd0112accecfd4", "patch": "@@ -538,6 +538,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &fallible_impl_from::FALLIBLE_IMPL_FROM,\n         &float_literal::EXCESSIVE_PRECISION,\n         &float_literal::LOSSY_FLOAT_LITERAL,\n+        &floating_point_arithmetic::SUBOPTIMAL_FLOPS,\n         &format::USELESS_FORMAT,\n         &formatting::POSSIBLE_MISSING_COMMA,\n         &formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n@@ -1649,7 +1650,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n         LintId::of(&attrs::EMPTY_LINE_AFTER_OUTER_ATTR),\n         LintId::of(&fallible_impl_from::FALLIBLE_IMPL_FROM),\n-        LintId::of(&floating_point_arithmetic::FLOATING_POINT_IMPROVEMENTS),\n+        LintId::of(&floating_point_arithmetic::SUBOPTIMAL_FLOPS),\n         LintId::of(&missing_const_for_fn::MISSING_CONST_FOR_FN),\n         LintId::of(&mul_add::MANUAL_MUL_ADD),\n         LintId::of(&mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),"}, {"sha": "de086f863e0189696f1998a1be978a1beafebfa6", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6dacb1aa678046940d3fae7a68bd0112accecfd4/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dacb1aa678046940d3fae7a68bd0112accecfd4/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=6dacb1aa678046940d3fae7a68bd0112accecfd4", "patch": "@@ -1960,6 +1960,13 @@ pub const ALL_LINTS: [Lint; 357] = [\n         deprecation: None,\n         module: \"excessive_bools\",\n     },\n+    Lint {\n+        name: \"suboptimal_flops\",\n+        group: \"nursery\",\n+        desc: \"usage of sub-optimal floating point operations\",\n+        deprecation: None,\n+        module: \"floating_point_arithmetic\",\n+    },\n     Lint {\n         name: \"suspicious_arithmetic_impl\",\n         group: \"correctness\","}, {"sha": "c7fe0d035689938400d8f0e8e5f3de6e2a6f24b9", "filename": "tests/ui/floating_point_exp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dacb1aa678046940d3fae7a68bd0112accecfd4/tests%2Fui%2Ffloating_point_exp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dacb1aa678046940d3fae7a68bd0112accecfd4/tests%2Fui%2Ffloating_point_exp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_exp.rs?ref=6dacb1aa678046940d3fae7a68bd0112accecfd4", "patch": "@@ -1,4 +1,4 @@\n-#![warn(clippy::floating_point_improvements)]\n+#![warn(clippy::suboptimal_flops)]\n \n fn main() {\n     let x = 2f32;"}, {"sha": "83adca8a46c91bb121fa5f4e0a8ab795b70b6e5a", "filename": "tests/ui/floating_point_exp.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dacb1aa678046940d3fae7a68bd0112accecfd4/tests%2Fui%2Ffloating_point_exp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dacb1aa678046940d3fae7a68bd0112accecfd4/tests%2Fui%2Ffloating_point_exp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_exp.stderr?ref=6dacb1aa678046940d3fae7a68bd0112accecfd4", "patch": "@@ -4,7 +4,7 @@ error: (e.pow(x) - 1) can be computed more accurately\n LL |     let _ = x.exp() - 1.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n    |\n-   = note: `-D clippy::floating-point-improvements` implied by `-D warnings`\n+   = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n \n error: (e.pow(x) - 1) can be computed more accurately\n   --> $DIR/floating_point_exp.rs:6:13"}, {"sha": "c26f71f3067d55cc84c7ff8852d47502b3e9bf59", "filename": "tests/ui/floating_point_log.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dacb1aa678046940d3fae7a68bd0112accecfd4/tests%2Fui%2Ffloating_point_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dacb1aa678046940d3fae7a68bd0112accecfd4/tests%2Fui%2Ffloating_point_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.rs?ref=6dacb1aa678046940d3fae7a68bd0112accecfd4", "patch": "@@ -1,5 +1,5 @@\n #![allow(dead_code)]\n-#![warn(clippy::floating_point_improvements)]\n+#![warn(clippy::suboptimal_flops)]\n \n const TWO: f32 = 2.0;\n const E: f32 = std::f32::consts::E;"}, {"sha": "db2fc999b6c3da446b0c943c5a16999bc40ef52d", "filename": "tests/ui/floating_point_log.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dacb1aa678046940d3fae7a68bd0112accecfd4/tests%2Fui%2Ffloating_point_log.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dacb1aa678046940d3fae7a68bd0112accecfd4/tests%2Fui%2Ffloating_point_log.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.stderr?ref=6dacb1aa678046940d3fae7a68bd0112accecfd4", "patch": "@@ -4,7 +4,7 @@ error: logarithm for bases 2, 10 and e can be computed more accurately\n LL |     let _ = x.log(2f32);\n    |             ^^^^^^^^^^^ help: consider using: `x.log2()`\n    |\n-   = note: `-D clippy::floating-point-improvements` implied by `-D warnings`\n+   = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n   --> $DIR/floating_point_log.rs:10:13"}, {"sha": "2076821b5b044fe6e451aff9aa545e8c952a4307", "filename": "tests/ui/floating_point_powf.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6dacb1aa678046940d3fae7a68bd0112accecfd4/tests%2Fui%2Ffloating_point_powf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dacb1aa678046940d3fae7a68bd0112accecfd4/tests%2Fui%2Ffloating_point_powf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.rs?ref=6dacb1aa678046940d3fae7a68bd0112accecfd4", "patch": "@@ -1,4 +1,4 @@\n-#![warn(clippy::floating_point_improvements)]\n+#![warn(clippy::suboptimal_flops)]\n \n fn main() {\n     let x = 3f32;\n@@ -14,8 +14,6 @@ fn main() {\n     let _ = x.powf(-2.0);\n     let _ = x.powf(2.1);\n     let _ = x.powf(-2.1);\n-    let _ = x.powf(16_777_217.0);\n-    let _ = x.powf(-16_777_217.0);\n \n     let x = 3f64;\n     let _ = 2f64.powf(x);\n@@ -30,6 +28,4 @@ fn main() {\n     let _ = x.powf(-2.0);\n     let _ = x.powf(2.1);\n     let _ = x.powf(-2.1);\n-    let _ = x.powf(9_007_199_254_740_993.0);\n-    let _ = x.powf(-9_007_199_254_740_993.0);\n }"}, {"sha": "35e0c5e56fd841f88eb94b2aad559a2b604ff93d", "filename": "tests/ui/floating_point_powf.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6dacb1aa678046940d3fae7a68bd0112accecfd4/tests%2Fui%2Ffloating_point_powf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dacb1aa678046940d3fae7a68bd0112accecfd4/tests%2Fui%2Ffloating_point_powf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.stderr?ref=6dacb1aa678046940d3fae7a68bd0112accecfd4", "patch": "@@ -4,7 +4,7 @@ error: exponent for bases 2 and e can be computed more accurately\n LL |     let _ = 2f32.powf(x);\n    |             ^^^^^^^^^^^^ help: consider using: `x.exp2()`\n    |\n-   = note: `-D clippy::floating-point-improvements` implied by `-D warnings`\n+   = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n \n error: exponent for bases 2 and e can be computed more accurately\n   --> $DIR/floating_point_powf.rs:6:13\n@@ -61,61 +61,61 @@ LL |     let _ = x.powf(-2.0);\n    |             ^^^^^^^^^^^^ help: consider using: `x.powi(-2)`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:21:13\n+  --> $DIR/floating_point_powf.rs:19:13\n    |\n LL |     let _ = 2f64.powf(x);\n    |             ^^^^^^^^^^^^ help: consider using: `x.exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:22:13\n+  --> $DIR/floating_point_powf.rs:20:13\n    |\n LL |     let _ = 2f64.powf(3.1);\n    |             ^^^^^^^^^^^^^^ help: consider using: `3.1f64.exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:23:13\n+  --> $DIR/floating_point_powf.rs:21:13\n    |\n LL |     let _ = 2f64.powf(-3.1);\n    |             ^^^^^^^^^^^^^^^ help: consider using: `(-3.1f64).exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:24:13\n+  --> $DIR/floating_point_powf.rs:22:13\n    |\n LL |     let _ = std::f64::consts::E.powf(x);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.exp()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:25:13\n+  --> $DIR/floating_point_powf.rs:23:13\n    |\n LL |     let _ = std::f64::consts::E.powf(3.1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `3.1f64.exp()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:26:13\n+  --> $DIR/floating_point_powf.rs:24:13\n    |\n LL |     let _ = std::f64::consts::E.powf(-3.1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(-3.1f64).exp()`\n \n error: square-root of a number can be computed more efficiently and accurately\n-  --> $DIR/floating_point_powf.rs:27:13\n+  --> $DIR/floating_point_powf.rs:25:13\n    |\n LL |     let _ = x.powf(1.0 / 2.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.sqrt()`\n \n error: cube-root of a number can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:28:13\n+  --> $DIR/floating_point_powf.rs:26:13\n    |\n LL |     let _ = x.powf(1.0 / 3.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.cbrt()`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:29:13\n+  --> $DIR/floating_point_powf.rs:27:13\n    |\n LL |     let _ = x.powf(2.0);\n    |             ^^^^^^^^^^^ help: consider using: `x.powi(2)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:30:13\n+  --> $DIR/floating_point_powf.rs:28:13\n    |\n LL |     let _ = x.powf(-2.0);\n    |             ^^^^^^^^^^^^ help: consider using: `x.powi(-2)`"}]}