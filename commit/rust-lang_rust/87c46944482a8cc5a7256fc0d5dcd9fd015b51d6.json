{"sha": "87c46944482a8cc5a7256fc0d5dcd9fd015b51d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YzQ2OTQ0NDgyYThjYzVhNzI1NmZjMGQ1ZGNkOWZkMDE1YjUxZDY=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-04-22T03:01:40Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-05-18T03:10:40Z"}, "message": "Add file sync shims\n\nAdds implementations for fsync, fdatasync, and sync_file_range", "tree": {"sha": "062dd7dc35a7f93e421eff2b50a4757c8e0fc696", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/062dd7dc35a7f93e421eff2b50a4757c8e0fc696"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87c46944482a8cc5a7256fc0d5dcd9fd015b51d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87c46944482a8cc5a7256fc0d5dcd9fd015b51d6", "html_url": "https://github.com/rust-lang/rust/commit/87c46944482a8cc5a7256fc0d5dcd9fd015b51d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87c46944482a8cc5a7256fc0d5dcd9fd015b51d6/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac09e2f5cde7b8d37d83027b064a1a03af8128a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac09e2f5cde7b8d37d83027b064a1a03af8128a5", "html_url": "https://github.com/rust-lang/rust/commit/ac09e2f5cde7b8d37d83027b064a1a03af8128a5"}], "stats": {"total": 135, "additions": 134, "deletions": 1}, "files": [{"sha": "6311f0a4a9fc4c2f5e48437213b664864d3855cf", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87c46944482a8cc5a7256fc0d5dcd9fd015b51d6/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c46944482a8cc5a7256fc0d5dcd9fd015b51d6/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=87c46944482a8cc5a7256fc0d5dcd9fd015b51d6", "patch": "@@ -136,6 +136,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // \"lseek\" is only used on macOS which is 64bit-only, so `i64` always works.\n                 this.write_scalar(Scalar::from_i64(result), dest)?;\n             }\n+            \"fsync\" => {\n+                let result = this.fsync(args[0])?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n+            }\n+            \"fdatasync\" => {\n+                let result = this.fdatasync(args[0])?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n+            }\n \n             // Allocation\n             \"posix_memalign\" => {"}, {"sha": "16d7d059e73b214e7918bbe2d169a563c3007c23", "filename": "src/shims/foreign_items/posix/linux.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/87c46944482a8cc5a7256fc0d5dcd9fd015b51d6/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c46944482a8cc5a7256fc0d5dcd9fd015b51d6/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs?ref=87c46944482a8cc5a7256fc0d5dcd9fd015b51d6", "patch": "@@ -54,6 +54,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // fadvise is only informational, we can ignore it.\n                 this.write_null(dest)?;\n             }\n+            // Linux-only\n+            \"sync_file_range\" => {\n+                let result = this.sync_file_range(args[0], args[1], args[2], args[3])?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n+            }\n \n             // Time related shims\n             \"clock_gettime\" => {"}, {"sha": "b7579f6cb732e5f0ead25132c398551658c32db8", "filename": "src/shims/fs.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/87c46944482a8cc5a7256fc0d5dcd9fd015b51d6/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c46944482a8cc5a7256fc0d5dcd9fd015b51d6/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=87c46944482a8cc5a7256fc0d5dcd9fd015b51d6", "patch": "@@ -375,6 +375,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 fh.insert_fd_with_min_fd(FileHandle { file: duplicated, writable }, start)\n             });\n             this.try_unwrap_io_result(fd_result)\n+        } else if this.tcx.sess.target.target.target_os == \"macos\"\n+            && cmd == this.eval_libc_i32(\"F_FULLFSYNC\")?\n+        {\n+            if let Some(FileHandle { file, writable: _ }) = this.machine.file_handler.handles.get_mut(&fd) {\n+                let result = file.sync_all();\n+                this.try_unwrap_io_result(result.map(|_| 0i32))\n+            } else {\n+                this.handle_not_found()\n+            }\n         } else {\n             throw_unsup_format!(\"the {:#x} command is not supported for `fcntl`)\", cmd);\n         }\n@@ -1103,6 +1112,59 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             this.handle_not_found()\n         }\n     }\n+\n+    fn fsync(&mut self, fd_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        this.check_no_isolation(\"fsync\")?;\n+\n+        let fd = this.read_scalar(fd_op)?.to_i32()?;\n+        if let Some(FileHandle { file, writable: _ }) = this.machine.file_handler.handles.get_mut(&fd) {\n+            let result = file.sync_all();\n+            this.try_unwrap_io_result(result.map(|_| 0i32))\n+        } else {\n+            this.handle_not_found()\n+        }\n+    }\n+\n+    fn fdatasync(&mut self, fd_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        this.check_no_isolation(\"fdatasync\")?;\n+\n+        let fd = this.read_scalar(fd_op)?.to_i32()?;\n+        if let Some(FileHandle { file, writable: _ }) = this.machine.file_handler.handles.get_mut(&fd) {\n+            let result = file.sync_data();\n+            this.try_unwrap_io_result(result.map(|_| 0i32))\n+        } else {\n+            this.handle_not_found()\n+        }\n+    }\n+\n+    fn sync_file_range(\n+        &mut self,\n+        fd_op: OpTy<'tcx, Tag>,\n+        offset_op: OpTy<'tcx, Tag>,\n+        nbytes_op: OpTy<'tcx, Tag>,\n+        flags_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        this.check_no_isolation(\"sync_file_range\")?;\n+\n+        let fd = this.read_scalar(fd_op)?.to_i32()?;\n+        let _offset = this.read_scalar(offset_op)?.to_i64()?;\n+        let _nbytes = this.read_scalar(nbytes_op)?.to_i64()?;\n+        let _flags = this.read_scalar(flags_op)?.to_u32()?;\n+        if let Some(FileHandle { file, writable: _ }) = this.machine.file_handler.handles.get_mut(&fd) {\n+            // In the interest of host compatibility, we conservatively ignore\n+            // offset, nbytes, and flags, and sync the entire file.\n+            let result = file.sync_data();\n+            this.try_unwrap_io_result(result.map(|_| 0i32))\n+        } else {\n+            this.handle_not_found()\n+        }\n+    }\n }\n \n /// Extracts the number of seconds and nanoseconds elapsed between `time` and the unix epoch when"}, {"sha": "df022a7c70d8ee59195c860a08043147d105489e", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/87c46944482a8cc5a7256fc0d5dcd9fd015b51d6/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c46944482a8cc5a7256fc0d5dcd9fd015b51d6/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=87c46944482a8cc5a7256fc0d5dcd9fd015b51d6", "patch": "@@ -14,6 +14,8 @@ fn main() {\n     test_seek();\n     test_metadata();\n     test_file_set_len();\n+    test_file_sync_all();\n+    test_file_sync_data();\n     test_symlink();\n     test_errors();\n     test_rename();\n@@ -182,6 +184,28 @@ fn test_file_set_len() {\n     remove_file(&path).unwrap();\n }\n \n+fn test_file_sync_all() {\n+    let bytes = b\"Hello, World!\\n\";\n+    let path = prepare_with_content(\"miri_test_fs_sync_all.txt\", bytes);\n+\n+    // Test that we can call sync_all (can't readily test effects of this operation)\n+    let file = File::open(&path).unwrap();\n+    file.sync_all().unwrap();\n+\n+    remove_file(&path).unwrap();\n+}\n+\n+fn test_file_sync_data() {\n+    let bytes = b\"Hello, World!\\n\";\n+    let path = prepare_with_content(\"miri_test_fs_sync_data.txt\", bytes);\n+\n+    // Test that we can call sync_data (can't readily test effects of this operation)\n+    let file = File::open(&path).unwrap();\n+    file.sync_data().unwrap();\n+\n+    remove_file(&path).unwrap();\n+}\n+\n fn test_symlink() {\n     let bytes = b\"Hello, World!\\n\";\n     let path = prepare_with_content(\"miri_test_fs_link_target.txt\", bytes);"}, {"sha": "5897c46f63755b4cea97961f08b7bdebb16884ea", "filename": "tests/run-pass/libc.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/87c46944482a8cc5a7256fc0d5dcd9fd015b51d6/tests%2Frun-pass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c46944482a8cc5a7256fc0d5dcd9fd015b51d6/tests%2Frun-pass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Flibc.rs?ref=87c46944482a8cc5a7256fc0d5dcd9fd015b51d6", "patch": "@@ -17,7 +17,7 @@ fn test_posix_fadvise() {\n     use std::io::Write;\n     use std::os::unix::io::AsRawFd;\n \n-    let path = tmp().join(\"miri_test_libc.txt\");\n+    let path = tmp().join(\"miri_test_libc_posix_fadvise.txt\");\n     // Cleanup before test\n     remove_file(&path).ok();\n \n@@ -40,6 +40,37 @@ fn test_posix_fadvise() {\n     assert_eq!(result, 0);\n }\n \n+#[cfg(target_os = \"linux\")]\n+fn test_sync_file_range() {\n+    use std::fs::{remove_file, File};\n+    use std::io::Write;\n+    use std::os::unix::io::AsRawFd;\n+\n+    let path = tmp().join(\"miri_test_libc_sync_file_range.txt\");\n+    // Cleanup before test\n+    remove_file(&path).ok();\n+\n+    // Write to a file\n+    let mut file = File::create(&path).unwrap();\n+    let bytes = b\"Hello, World!\\n\";\n+    file.write(bytes).unwrap();\n+\n+    // Test calling sync_file_range on a file.\n+    let result = unsafe {\n+        libc::sync_file_range(\n+            file.as_raw_fd(),\n+            0,\n+            0,\n+            libc::SYNC_FILE_RANGE_WAIT_BEFORE\n+                | libc::SYNC_FILE_RANGE_WRITE\n+                | libc::SYNC_FILE_RANGE_WAIT_AFTER,\n+        )\n+    };\n+    drop(file);\n+    remove_file(&path).unwrap();\n+    assert_eq!(result, 0);\n+}\n+\n fn test_mutex_libc_init_recursive() {\n     unsafe {\n         let mut attr: libc::pthread_mutexattr_t = std::mem::zeroed();\n@@ -169,6 +200,9 @@ fn main() {\n     #[cfg(target_os = \"linux\")]\n     test_posix_fadvise();\n \n+    #[cfg(target_os = \"linux\")]\n+    test_sync_file_range();\n+\n     test_mutex_libc_init_recursive();\n     test_mutex_libc_init_normal();\n     test_mutex_libc_init_errorcheck();"}]}