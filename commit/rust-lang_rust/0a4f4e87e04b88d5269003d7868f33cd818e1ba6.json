{"sha": "0a4f4e87e04b88d5269003d7868f33cd818e1ba6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNGY0ZTg3ZTA0Yjg4ZDUyNjkwMDNkNzg2OGYzM2NkODE4ZTFiYTY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-08-09T03:11:16Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-08-09T03:11:16Z"}, "message": "Fix ICE #75307 in `format`\n\nRemove usages of `unwrap` (even when some are safe today).", "tree": {"sha": "e74fcb513bd64e923f8e71f745aa73c3e53b2be4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e74fcb513bd64e923f8e71f745aa73c3e53b2be4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a4f4e87e04b88d5269003d7868f33cd818e1ba6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a4f4e87e04b88d5269003d7868f33cd818e1ba6", "html_url": "https://github.com/rust-lang/rust/commit/0a4f4e87e04b88d5269003d7868f33cd818e1ba6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a4f4e87e04b88d5269003d7868f33cd818e1ba6/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db870ea71b6dcc7a91b999420b88f41d3cdd13e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/db870ea71b6dcc7a91b999420b88f41d3cdd13e1", "html_url": "https://github.com/rust-lang/rust/commit/db870ea71b6dcc7a91b999420b88f41d3cdd13e1"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "78cead02b7b7cc6fcdfaf1121a45a4b7032ae6e2", "filename": "src/librustc_builtin_macros/format.rs", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0a4f4e87e04b88d5269003d7868f33cd818e1ba6/src%2Flibrustc_builtin_macros%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4f4e87e04b88d5269003d7868f33cd818e1ba6/src%2Flibrustc_builtin_macros%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat.rs?ref=0a4f4e87e04b88d5269003d7868f33cd818e1ba6", "patch": "@@ -149,7 +149,7 @@ fn parse_args<'a>(\n                 return Err(err);\n             } else {\n                 // ...after that delegate to `expect` to also include the other expected tokens.\n-                return Err(p.expect(&token::Comma).err().unwrap());\n+                let _ = p.expect(&token::Comma)?;\n             }\n         }\n         first = false;\n@@ -359,24 +359,18 @@ impl<'a, 'b> Context<'a, 'b> {\n             // for `println!(\"{7:7$}\", 1);`\n             refs.sort();\n             refs.dedup();\n-            let (arg_list, mut sp) = if refs.len() == 1 {\n-                let spans: Vec<_> = spans.into_iter().filter_map(|sp| sp.copied()).collect();\n-                (\n-                    format!(\"argument {}\", refs[0]),\n-                    if spans.is_empty() {\n-                        MultiSpan::from_span(self.fmtsp)\n-                    } else {\n-                        MultiSpan::from_spans(spans)\n-                    },\n-                )\n+            let spans: Vec<_> = spans.into_iter().filter_map(|sp| sp.copied()).collect();\n+            let sp = if self.arg_spans.is_empty() || spans.is_empty() {\n+                MultiSpan::from_span(self.fmtsp)\n+            } else {\n+                MultiSpan::from_spans(spans)\n+            };\n+            let arg_list = if refs.len() == 1 {\n+                format!(\"argument {}\", refs[0])\n             } else {\n-                let pos = MultiSpan::from_spans(spans.into_iter().map(|s| *s.unwrap()).collect());\n                 let reg = refs.pop().unwrap();\n-                (format!(\"arguments {head} and {tail}\", head = refs.join(\", \"), tail = reg,), pos)\n+                format!(\"arguments {head} and {tail}\", head = refs.join(\", \"), tail = reg)\n             };\n-            if self.arg_spans.is_empty() {\n-                sp = MultiSpan::from_span(self.fmtsp);\n-            }\n \n             e = self.ecx.struct_span_err(\n                 sp,\n@@ -1067,10 +1061,9 @@ pub fn expand_preparsed_format_args(\n         let args_unused = errs_len;\n \n         let mut diag = {\n-            if errs_len == 1 {\n-                let (sp, msg) = errs.into_iter().next().unwrap();\n-                let mut diag = cx.ecx.struct_span_err(sp, msg);\n-                diag.span_label(sp, msg);\n+            if let [(sp, msg)] = &errs[..] {\n+                let mut diag = cx.ecx.struct_span_err(*sp, *msg);\n+                diag.span_label(*sp, *msg);\n                 diag\n             } else {\n                 let mut diag = cx.ecx.struct_span_err("}, {"sha": "2fe112a3b95d4001627246bbe5a19f02174a4987", "filename": "src/test/ui/issues/issue-75307.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a4f4e87e04b88d5269003d7868f33cd818e1ba6/src%2Ftest%2Fui%2Fissues%2Fissue-75307.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4f4e87e04b88d5269003d7868f33cd818e1ba6/src%2Ftest%2Fui%2Fissues%2Fissue-75307.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75307.rs?ref=0a4f4e87e04b88d5269003d7868f33cd818e1ba6", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    format!(r\"{}{}{}\", named_arg=1); //~ ERROR invalid reference to positional arguments 1 and 2\n+}"}, {"sha": "4a5d997e00d74a7daca2d07678606aaeb46f7564", "filename": "src/test/ui/issues/issue-75307.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a4f4e87e04b88d5269003d7868f33cd818e1ba6/src%2Ftest%2Fui%2Fissues%2Fissue-75307.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a4f4e87e04b88d5269003d7868f33cd818e1ba6/src%2Ftest%2Fui%2Fissues%2Fissue-75307.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75307.stderr?ref=0a4f4e87e04b88d5269003d7868f33cd818e1ba6", "patch": "@@ -0,0 +1,10 @@\n+error: invalid reference to positional arguments 1 and 2 (there is 1 argument)\n+  --> $DIR/issue-75307.rs:2:13\n+   |\n+LL |     format!(r\"{}{}{}\", named_arg=1);\n+   |             ^^^^^^^^^\n+   |\n+   = note: positional arguments are zero-based\n+\n+error: aborting due to previous error\n+"}]}