{"sha": "1522a47dce9ef791dd415a7b48bd03bc68fb0aa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1MjJhNDdkY2U5ZWY3OTFkZDQxNWE3YjQ4YmQwM2JjNjhmYjBhYTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-29T12:45:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-29T12:45:14Z"}, "message": "Auto merge of #795 - RalfJung:intptrcast, r=RalfJung\n\ntweak inttoptr allocation behavior\n\n- Make `align_addr` not offset by `align` for no reason.\n- Add some random slack between allocations to give them the chance to not be aligned.\n\nCc @christianpoveda\n\nFixes https://github.com/rust-lang/miri/issues/791", "tree": {"sha": "b94022a439a4380a36b930be6fd6a17d56b4818a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b94022a439a4380a36b930be6fd6a17d56b4818a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1522a47dce9ef791dd415a7b48bd03bc68fb0aa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1522a47dce9ef791dd415a7b48bd03bc68fb0aa7", "html_url": "https://github.com/rust-lang/rust/commit/1522a47dce9ef791dd415a7b48bd03bc68fb0aa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1522a47dce9ef791dd415a7b48bd03bc68fb0aa7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e424753ba4a9532d7f28660d317c99efc074f50", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e424753ba4a9532d7f28660d317c99efc074f50", "html_url": "https://github.com/rust-lang/rust/commit/9e424753ba4a9532d7f28660d317c99efc074f50"}, {"sha": "0bb50ada34b3d4fe0ad6be0041f6bd68bacb1cb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb50ada34b3d4fe0ad6be0041f6bd68bacb1cb0", "html_url": "https://github.com/rust-lang/rust/commit/0bb50ada34b3d4fe0ad6be0041f6bd68bacb1cb0"}], "stats": {"total": 64, "additions": 55, "deletions": 9}, "files": [{"sha": "ec97a77357cf8c12297a9d04fb2e13b994758df9", "filename": "src/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1522a47dce9ef791dd415a7b48bd03bc68fb0aa7/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1522a47dce9ef791dd415a7b48bd03bc68fb0aa7/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=1522a47dce9ef791dd415a7b48bd03bc68fb0aa7", "patch": "@@ -10,7 +10,7 @@ use rustc::mir;\n use crate::{\n     InterpResult, InterpError, InterpretCx, StackPopCleanup, struct_error,\n     Scalar, Tag, Pointer,\n-    MiriMemoryKind, Evaluator, TlsEvalContextExt,\n+    MemoryExtra, MiriMemoryKind, Evaluator, TlsEvalContextExt,\n };\n \n /// Configuration needed to spawn a Miri instance.\n@@ -36,7 +36,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     );\n \n     // FIXME: InterpretCx::new should take an initial MemoryExtra\n-    ecx.memory_mut().extra.rng = config.seed.map(StdRng::seed_from_u64);\n+    ecx.memory_mut().extra = MemoryExtra::with_rng(config.seed.map(StdRng::seed_from_u64));\n     \n     let main_instance = ty::Instance::mono(ecx.tcx.tcx, main_id);\n     let main_mir = ecx.load_mir(main_instance.def)?;"}, {"sha": "66783f3200e0d9e6d76bc832e20f0d0c6ae22a07", "filename": "src/fn_call.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1522a47dce9ef791dd415a7b48bd03bc68fb0aa7/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1522a47dce9ef791dd415a7b48bd03bc68fb0aa7/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=1522a47dce9ef791dd415a7b48bd03bc68fb0aa7", "patch": "@@ -982,6 +982,7 @@ fn gen_random<'mir, 'tcx>(\n \n     let data = match &mut this.memory_mut().extra.rng {\n         Some(rng) => {\n+            let mut rng = rng.borrow_mut();\n             let mut data = vec![0; len];\n             rng.fill_bytes(&mut data);\n             data"}, {"sha": "a41a139062d8de09b6196b7b28773ccb1907eb1d", "filename": "src/intptrcast.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1522a47dce9ef791dd415a7b48bd03bc68fb0aa7/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1522a47dce9ef791dd415a7b48bd03bc68fb0aa7/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=1522a47dce9ef791dd415a7b48bd03bc68fb0aa7", "patch": "@@ -1,5 +1,7 @@\n use std::cell::{Cell, RefCell};\n \n+use rand::Rng;\n+\n use rustc::mir::interpret::{AllocId, Pointer, InterpResult};\n use rustc_mir::interpret::Memory;\n use rustc_target::abi::Size;\n@@ -73,14 +75,24 @@ impl<'mir, 'tcx> GlobalState {\n         let mut global_state = memory.extra.intptrcast.borrow_mut();\n \n         let alloc = memory.get(ptr.alloc_id)?;\n+        let align = alloc.align.bytes();\n \n         let base_addr = match alloc.extra.intptrcast.base_addr.get() { \n             Some(base_addr) => base_addr,\n             None => {\n                 // This allocation does not have a base address yet, pick one.\n-                let base_addr = Self::align_addr(global_state.next_base_addr, alloc.align.bytes());\n-                global_state.next_base_addr = base_addr + alloc.bytes.len() as u64;\n+                // Leave some space to the previous allocation, to give it some chance to be less aligned.\n+                let slack = {\n+                    let mut rng = memory.extra.rng.as_ref().unwrap().borrow_mut();\n+                    // This means that `(global_state.next_base_addr + slack) % 16` is uniformly distributed.\n+                    rng.gen_range(0, 16)\n+                };\n+                // From next_base_addr + slack, round up to adjust for alignment.\n+                let base_addr = Self::align_addr(global_state.next_base_addr + slack, align);\n                 alloc.extra.intptrcast.base_addr.set(Some(base_addr));\n+\n+                // Remember next base address.\n+                global_state.next_base_addr = base_addr + alloc.bytes.len() as u64;\n                 // Given that `next_base_addr` increases in each allocation, pushing the\n                 // corresponding tuple keeps `int_to_ptr_map` sorted\n                 global_state.int_to_ptr_map.push((base_addr, ptr.alloc_id)); \n@@ -89,13 +101,27 @@ impl<'mir, 'tcx> GlobalState {\n             }\n         };\n \n-        debug_assert_eq!(base_addr % alloc.align.bytes(), 0); // sanity check\n+        debug_assert_eq!(base_addr % align, 0); // sanity check\n         Ok(base_addr + ptr.offset.bytes())\n     }\n \n     /// Shifts `addr` to make it aligned with `align` by rounding `addr` to the smallest multiple\n-    /// of `align` that is strictly larger to `addr`\n+    /// of `align` that is larger or equal to `addr`\n     fn align_addr(addr: u64, align: u64) -> u64 {\n-        addr + align - addr % align\n+        match addr % align {\n+            0 => addr,\n+            rem => addr + align - rem\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn test_align_addr() {\n+        assert_eq!(GlobalState::align_addr(37, 4), 40);\n+        assert_eq!(GlobalState::align_addr(44, 4), 44);\n     }\n }"}, {"sha": "c956fd0f33a980ffef0ed483fa6a941f49016992", "filename": "src/machine.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1522a47dce9ef791dd415a7b48bd03bc68fb0aa7/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1522a47dce9ef791dd415a7b48bd03bc68fb0aa7/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=1522a47dce9ef791dd415a7b48bd03bc68fb0aa7", "patch": "@@ -1,6 +1,7 @@\n use std::rc::Rc;\n use std::borrow::Cow;\n use std::collections::HashMap;\n+use std::cell::RefCell;\n \n use rand::rngs::StdRng;\n \n@@ -46,15 +47,15 @@ pub struct MemoryExtra {\n     pub intptrcast: intptrcast::MemoryExtra,\n     /// The random number generator to use if Miri is running in non-deterministic mode and to\n     /// enable intptrcast\n-    pub(crate) rng: Option<StdRng>\n+    pub(crate) rng: Option<RefCell<StdRng>>\n }\n \n impl MemoryExtra {\n     pub fn with_rng(rng: Option<StdRng>) -> Self {\n         MemoryExtra {\n             stacked_borrows: Default::default(),\n             intptrcast: Default::default(),\n-            rng,\n+            rng: rng.map(RefCell::new),\n         }\n     }\n }"}, {"sha": "5a35844d1256d98a5b5ea5326d4e68f163429c82", "filename": "tests/compile-fail/intptrcast_alignment_check.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1522a47dce9ef791dd415a7b48bd03bc68fb0aa7/tests%2Fcompile-fail%2Fintptrcast_alignment_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1522a47dce9ef791dd415a7b48bd03bc68fb0aa7/tests%2Fcompile-fail%2Fintptrcast_alignment_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintptrcast_alignment_check.rs?ref=1522a47dce9ef791dd415a7b48bd03bc68fb0aa7", "patch": "@@ -0,0 +1,18 @@\n+// Validation makes this fail in the wrong place\n+// compile-flags: -Zmiri-disable-validation -Zmiri-seed=0000000000000000\n+\n+// Even with intptrcast and without validation, we want to be *sure* to catch bugs\n+// that arise from pointers being insufficiently aligned. The only way to achieve\n+// that is not not let programs exploit integer information for alignment, so here\n+// we test that this is indeed the case.\n+fn main() {\n+    let x = &mut [0u8; 3];\n+    let base_addr = x as *mut _ as usize;\n+    let u16_ref = unsafe { if base_addr % 2 == 0 {\n+        &mut *(base_addr as *mut u16)\n+    } else {\n+        &mut *((base_addr+1) as *mut u16)\n+    } };\n+    *u16_ref = 2; //~ ERROR tried to access memory with alignment 1, but alignment 2 is required\n+    println!(\"{:?}\", x);\n+}"}]}