{"sha": "c75c4a579bdea69fc9b93697aa2531daf82540fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NWM0YTU3OWJkZWE2OWZjOWI5MzY5N2FhMjUzMWRhZjgyNTQwZmM=", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2021-02-23T22:02:05Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2021-02-23T23:43:35Z"}, "message": "replaced some map_or with map_or_else", "tree": {"sha": "625a3f482229b40902893946eb17acebb6051371", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/625a3f482229b40902893946eb17acebb6051371"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c75c4a579bdea69fc9b93697aa2531daf82540fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c75c4a579bdea69fc9b93697aa2531daf82540fc", "html_url": "https://github.com/rust-lang/rust/commit/c75c4a579bdea69fc9b93697aa2531daf82540fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c75c4a579bdea69fc9b93697aa2531daf82540fc/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a", "html_url": "https://github.com/rust-lang/rust/commit/5ff1be197eaa8a014718b26b1fcbe0ced33b6e1a"}], "stats": {"total": 152, "additions": 82, "deletions": 70}, "files": [{"sha": "2f1cc7fccfc61f83a4f9446c9d8af63eb1aa2f8c", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=c75c4a579bdea69fc9b93697aa2531daf82540fc", "patch": "@@ -2372,7 +2372,7 @@ fn compute_type_parameters(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>) -> &'ll DIAr\n     fn get_parameter_names(cx: &CodegenCx<'_, '_>, generics: &ty::Generics) -> Vec<Symbol> {\n         let mut names = generics\n             .parent\n-            .map_or(vec![], |def_id| get_parameter_names(cx, cx.tcx.generics_of(def_id)));\n+            .map_or_else(|| vec![], |def_id| get_parameter_names(cx, cx.tcx.generics_of(def_id)));\n         names.extend(generics.params.iter().map(|param| param.name));\n         names\n     }"}, {"sha": "21585bf77a029b9b5e5b2d99bb677d37dc3c38fa", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=c75c4a579bdea69fc9b93697aa2531daf82540fc", "patch": "@@ -481,9 +481,10 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         }\n \n         fn get_parameter_names(cx: &CodegenCx<'_, '_>, generics: &ty::Generics) -> Vec<Symbol> {\n-            let mut names = generics\n-                .parent\n-                .map_or(vec![], |def_id| get_parameter_names(cx, cx.tcx.generics_of(def_id)));\n+            let mut names = generics.parent.map_or_else(\n+                || vec![],\n+                |def_id| get_parameter_names(cx, cx.tcx.generics_of(def_id)),\n+            );\n             names.extend(generics.params.iter().map(|param| param.name));\n             names\n         }"}, {"sha": "ca973222cca8c3d41fea7716255f498f340045d6", "filename": "compiler/rustc_codegen_llvm/src/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmetadata.rs?ref=c75c4a579bdea69fc9b93697aa2531daf82540fc", "patch": "@@ -65,8 +65,8 @@ fn search_meta_section<'a>(\n         while llvm::LLVMIsSectionIteratorAtEnd(of.llof, si.llsi) == False {\n             let mut name_buf = None;\n             let name_len = llvm::LLVMRustGetSectionName(si.llsi, &mut name_buf);\n-            let name = name_buf.map_or(\n-                String::new(), // We got a NULL ptr, ignore `name_len`.\n+            let name = name_buf.map_or_else(\n+                || String::new(), // We got a NULL ptr, ignore `name_len`.\n                 |buf| {\n                     String::from_utf8(\n                         slice::from_raw_parts(buf.as_ptr() as *const u8, name_len as usize)"}, {"sha": "291e7ef045e4f6c9f7e390c745110dbfa8f89d43", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=c75c4a579bdea69fc9b93697aa2531daf82540fc", "patch": "@@ -409,7 +409,7 @@ fn add_query_description_impl(\n     };\n \n     let (tcx, desc) = modifiers.desc;\n-    let tcx = tcx.as_ref().map_or(quote! { _ }, |t| quote! { #t });\n+    let tcx = tcx.as_ref().map_or_else(|| quote! { _ }, |t| quote! { #t });\n \n     let desc = quote! {\n         #[allow(unused_variables)]"}, {"sha": "62c314d90f5916d35f22ac8486e3200b5f32c8da", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=c75c4a579bdea69fc9b93697aa2531daf82540fc", "patch": "@@ -50,7 +50,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n \n     let name =\n         with_no_trimmed_paths(|| ty::tls::with(|tcx| tcx.def_path_str(cid.instance.def_id())));\n-    let prom = cid.promoted.map_or(String::new(), |p| format!(\"::promoted[{:?}]\", p));\n+    let prom = cid.promoted.map_or_else(|| String::new(), |p| format!(\"::promoted[{:?}]\", p));\n     trace!(\"eval_body_using_ecx: pushing stack frame for global: {}{}\", name, prom);\n \n     ecx.push_stack_frame("}, {"sha": "b5b5278b5ce6df18e6291878827f45a9f6bf6b68", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=c75c4a579bdea69fc9b93697aa2531daf82540fc", "patch": "@@ -223,7 +223,7 @@ impl<'a> Parser<'a> {\n         fn tokens_to_string(tokens: &[TokenType]) -> String {\n             let mut i = tokens.iter();\n             // This might be a sign we need a connect method on `Iterator`.\n-            let b = i.next().map_or(String::new(), |t| t.to_string());\n+            let b = i.next().map_or_else(|| String::new(), |t| t.to_string());\n             i.enumerate().fold(b, |mut b, (i, a)| {\n                 if tokens.len() > 2 && i == tokens.len() - 2 {\n                     b.push_str(\", or \");"}, {"sha": "d7c643d0f6fed649c5d30c5ed04a198bed69208d", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 57, "deletions": 54, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=c75c4a579bdea69fc9b93697aa2531daf82540fc", "patch": "@@ -1971,65 +1971,68 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         // Therefore, we would compute `object_lifetime_defaults` to a\n         // vector like `['x, 'static]`. Note that the vector only\n         // includes type parameters.\n-        let object_lifetime_defaults = type_def_id.map_or(vec![], |def_id| {\n-            let in_body = {\n-                let mut scope = self.scope;\n-                loop {\n-                    match *scope {\n-                        Scope::Root => break false,\n-\n-                        Scope::Body { .. } => break true,\n-\n-                        Scope::Binder { s, .. }\n-                        | Scope::Elision { s, .. }\n-                        | Scope::ObjectLifetimeDefault { s, .. } => {\n-                            scope = s;\n+        let object_lifetime_defaults = type_def_id.map_or_else(\n+            || vec![],\n+            |def_id| {\n+                let in_body = {\n+                    let mut scope = self.scope;\n+                    loop {\n+                        match *scope {\n+                            Scope::Root => break false,\n+\n+                            Scope::Body { .. } => break true,\n+\n+                            Scope::Binder { s, .. }\n+                            | Scope::Elision { s, .. }\n+                            | Scope::ObjectLifetimeDefault { s, .. } => {\n+                                scope = s;\n+                            }\n                         }\n                     }\n-                }\n-            };\n+                };\n \n-            let map = &self.map;\n-            let unsubst = if let Some(def_id) = def_id.as_local() {\n-                let id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n-                &map.object_lifetime_defaults[&id]\n-            } else {\n-                let tcx = self.tcx;\n-                self.xcrate_object_lifetime_defaults.entry(def_id).or_insert_with(|| {\n-                    tcx.generics_of(def_id)\n-                        .params\n-                        .iter()\n-                        .filter_map(|param| match param.kind {\n-                            GenericParamDefKind::Type { object_lifetime_default, .. } => {\n-                                Some(object_lifetime_default)\n+                let map = &self.map;\n+                let unsubst = if let Some(def_id) = def_id.as_local() {\n+                    let id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n+                    &map.object_lifetime_defaults[&id]\n+                } else {\n+                    let tcx = self.tcx;\n+                    self.xcrate_object_lifetime_defaults.entry(def_id).or_insert_with(|| {\n+                        tcx.generics_of(def_id)\n+                            .params\n+                            .iter()\n+                            .filter_map(|param| match param.kind {\n+                                GenericParamDefKind::Type { object_lifetime_default, .. } => {\n+                                    Some(object_lifetime_default)\n+                                }\n+                                GenericParamDefKind::Lifetime | GenericParamDefKind::Const => None,\n+                            })\n+                            .collect()\n+                    })\n+                };\n+                debug!(\"visit_segment_args: unsubst={:?}\", unsubst);\n+                unsubst\n+                    .iter()\n+                    .map(|set| match *set {\n+                        Set1::Empty => {\n+                            if in_body {\n+                                None\n+                            } else {\n+                                Some(Region::Static)\n                             }\n-                            GenericParamDefKind::Lifetime | GenericParamDefKind::Const => None,\n-                        })\n-                        .collect()\n-                })\n-            };\n-            debug!(\"visit_segment_args: unsubst={:?}\", unsubst);\n-            unsubst\n-                .iter()\n-                .map(|set| match *set {\n-                    Set1::Empty => {\n-                        if in_body {\n-                            None\n-                        } else {\n-                            Some(Region::Static)\n                         }\n-                    }\n-                    Set1::One(r) => {\n-                        let lifetimes = generic_args.args.iter().filter_map(|arg| match arg {\n-                            GenericArg::Lifetime(lt) => Some(lt),\n-                            _ => None,\n-                        });\n-                        r.subst(lifetimes, map)\n-                    }\n-                    Set1::Many => None,\n-                })\n-                .collect()\n-        });\n+                        Set1::One(r) => {\n+                            let lifetimes = generic_args.args.iter().filter_map(|arg| match arg {\n+                                GenericArg::Lifetime(lt) => Some(lt),\n+                                _ => None,\n+                            });\n+                            r.subst(lifetimes, map)\n+                        }\n+                        Set1::Many => None,\n+                    })\n+                    .collect()\n+            },\n+        );\n \n         debug!(\"visit_segment_args: object_lifetime_defaults={:?}\", object_lifetime_defaults);\n "}, {"sha": "9759ab8a8a6a4f85fb5002f920b08f87ee344221", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=c75c4a579bdea69fc9b93697aa2531daf82540fc", "patch": "@@ -349,7 +349,7 @@ fn report_negative_positive_conflict(\n         E0751,\n         \"found both positive and negative implementation of trait `{}`{}:\",\n         overlap.trait_desc,\n-        overlap.self_desc.clone().map_or(String::new(), |ty| format!(\" for type `{}`\", ty))\n+        overlap.self_desc.clone().map_or_else(|| String::new(), |ty| format!(\" for type `{}`\", ty))\n     );\n \n     match tcx.span_of_impl(negative_impl_def_id) {\n@@ -397,7 +397,10 @@ fn report_conflicting_impls(\n         let msg = format!(\n             \"conflicting implementations of trait `{}`{}:{}\",\n             overlap.trait_desc,\n-            overlap.self_desc.clone().map_or(String::new(), |ty| { format!(\" for type `{}`\", ty) }),\n+            overlap\n+                .self_desc\n+                .clone()\n+                .map_or_else(|| String::new(), |ty| { format!(\" for type `{}`\", ty) }),\n             match used_to_be_allowed {\n                 Some(FutureCompatOverlapErrorKind::Issue33140) => \" (E0119)\",\n                 _ => \"\",\n@@ -415,7 +418,9 @@ fn report_conflicting_impls(\n                     impl_span,\n                     format!(\n                         \"conflicting implementation{}\",\n-                        overlap.self_desc.map_or(String::new(), |ty| format!(\" for `{}`\", ty))\n+                        overlap\n+                            .self_desc\n+                            .map_or_else(|| String::new(), |ty| format!(\" for `{}`\", ty))\n                     ),\n                 );\n             }"}, {"sha": "54d3f11566da96e8574bc65a58fcf942064c74e1", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=c75c4a579bdea69fc9b93697aa2531daf82540fc", "patch": "@@ -1695,7 +1695,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             } else {\n                 self.fcx\n                     .associated_item(def_id, name, Namespace::ValueNS)\n-                    .map_or(Vec::new(), |x| vec![x])\n+                    .map_or_else(|| Vec::new(), |x| vec![x])\n             }\n         } else {\n             self.tcx.associated_items(def_id).in_definition_order().copied().collect()"}, {"sha": "bb85336d7fb2d681ae9be5769ed1591ea577c390", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=c75c4a579bdea69fc9b93697aa2531daf82540fc", "patch": "@@ -1062,7 +1062,10 @@ fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, span: Span) {\n         E0533,\n         \"expected unit struct, unit variant or constant, found {}{}\",\n         res.descr(),\n-        tcx.sess.source_map().span_to_snippet(span).map_or(String::new(), |s| format!(\" `{}`\", s)),\n+        tcx.sess\n+            .source_map()\n+            .span_to_snippet(span)\n+            .map_or_else(|_| String::new(), |s| format!(\" `{}`\", s)),\n     )\n     .emit();\n }"}, {"sha": "f8ca916caf127b5f13c248478f9b50183437b017", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=c75c4a579bdea69fc9b93697aa2531daf82540fc", "patch": "@@ -879,7 +879,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let sm = tcx.sess.source_map();\n             let path_str = sm\n                 .span_to_snippet(sm.span_until_char(pat.span, '('))\n-                .map_or(String::new(), |s| format!(\" `{}`\", s.trim_end()));\n+                .map_or_else(|_| String::new(), |s| format!(\" `{}`\", s.trim_end()));\n             let msg = format!(\n                 \"expected tuple struct or tuple variant, found {}{}\",\n                 res.descr(),"}, {"sha": "9fbc56f051beba0f20033b61cbf225001c528605", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75c4a579bdea69fc9b93697aa2531daf82540fc/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=c75c4a579bdea69fc9b93697aa2531daf82540fc", "patch": "@@ -2387,7 +2387,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n                     .sess\n                     .source_map()\n                     .span_to_snippet(ast_ty.span)\n-                    .map_or(String::new(), |s| format!(\" `{}`\", s));\n+                    .map_or_else(|_| String::new(), |s| format!(\" `{}`\", s));\n                 tcx.sess\n                     .struct_span_err(\n                         ast_ty.span,"}]}