{"sha": "8e0ea60a04c463bf52fc81dbbf182f4739525681", "node_id": "C_kwDOAAsO6NoAKDhlMGVhNjBhMDRjNDYzYmY1MmZjODFkYmJmMTgyZjQ3Mzk1MjU2ODE", "commit": {"author": {"name": "onestacked", "email": "chrisi.schrefl@gmail.com", "date": "2022-09-23T11:43:34Z"}, "committer": {"name": "onestacked", "email": "chrisi.schrefl@gmail.com", "date": "2022-09-23T11:43:34Z"}, "message": "Constifed Try trait", "tree": {"sha": "5d97939e718c6256585a67115ef6fdafb90651f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d97939e718c6256585a67115ef6fdafb90651f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e0ea60a04c463bf52fc81dbbf182f4739525681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e0ea60a04c463bf52fc81dbbf182f4739525681", "html_url": "https://github.com/rust-lang/rust/commit/8e0ea60a04c463bf52fc81dbbf182f4739525681", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e0ea60a04c463bf52fc81dbbf182f4739525681/comments", "author": {"login": "chriss0612", "id": 18047460, "node_id": "MDQ6VXNlcjE4MDQ3NDYw", "avatar_url": "https://avatars.githubusercontent.com/u/18047460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chriss0612", "html_url": "https://github.com/chriss0612", "followers_url": "https://api.github.com/users/chriss0612/followers", "following_url": "https://api.github.com/users/chriss0612/following{/other_user}", "gists_url": "https://api.github.com/users/chriss0612/gists{/gist_id}", "starred_url": "https://api.github.com/users/chriss0612/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chriss0612/subscriptions", "organizations_url": "https://api.github.com/users/chriss0612/orgs", "repos_url": "https://api.github.com/users/chriss0612/repos", "events_url": "https://api.github.com/users/chriss0612/events{/privacy}", "received_events_url": "https://api.github.com/users/chriss0612/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chriss0612", "id": 18047460, "node_id": "MDQ6VXNlcjE4MDQ3NDYw", "avatar_url": "https://avatars.githubusercontent.com/u/18047460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chriss0612", "html_url": "https://github.com/chriss0612", "followers_url": "https://api.github.com/users/chriss0612/followers", "following_url": "https://api.github.com/users/chriss0612/following{/other_user}", "gists_url": "https://api.github.com/users/chriss0612/gists{/gist_id}", "starred_url": "https://api.github.com/users/chriss0612/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chriss0612/subscriptions", "organizations_url": "https://api.github.com/users/chriss0612/orgs", "repos_url": "https://api.github.com/users/chriss0612/repos", "events_url": "https://api.github.com/users/chriss0612/events{/privacy}", "received_events_url": "https://api.github.com/users/chriss0612/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b2f717dfaf4835aa644d925a12c93db8f15dd61", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b2f717dfaf4835aa644d925a12c93db8f15dd61", "html_url": "https://github.com/rust-lang/rust/commit/0b2f717dfaf4835aa644d925a12c93db8f15dd61"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "489fb13c0dc97aff6df6fd8bd16f7c26c4283bb8", "filename": "library/core/src/iter/adapters/array_chunks.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8e0ea60a04c463bf52fc81dbbf182f4739525681/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0ea60a04c463bf52fc81dbbf182f4739525681/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs?ref=8e0ea60a04c463bf52fc81dbbf182f4739525681", "patch": "@@ -1,4 +1,5 @@\n use crate::array;\n+use crate::const_closure::ConstFnMutClosure;\n use crate::iter::{ByRefSized, FusedIterator, Iterator};\n use crate::ops::{ControlFlow, NeverShortCircuit, Try};\n \n@@ -82,12 +83,12 @@ where\n         }\n     }\n \n-    fn fold<B, F>(mut self, init: B, f: F) -> B\n+    fn fold<B, F>(mut self, init: B, mut f: F) -> B\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        self.try_fold(init, NeverShortCircuit::wrap_mut_2(f)).0\n+        self.try_fold(init, ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp)).0\n     }\n }\n \n@@ -126,12 +127,12 @@ where\n         try { acc }\n     }\n \n-    fn rfold<B, F>(mut self, init: B, f: F) -> B\n+    fn rfold<B, F>(mut self, init: B, mut f: F) -> B\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        self.try_rfold(init, NeverShortCircuit::wrap_mut_2(f)).0\n+        self.try_rfold(init, ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp)).0\n     }\n }\n "}, {"sha": "1945e402ff50ed8e4875cebd8f7bb7c98202f9fa", "filename": "library/core/src/iter/adapters/by_ref_sized.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8e0ea60a04c463bf52fc81dbbf182f4739525681/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0ea60a04c463bf52fc81dbbf182f4739525681/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs?ref=8e0ea60a04c463bf52fc81dbbf182f4739525681", "patch": "@@ -1,4 +1,7 @@\n-use crate::ops::{NeverShortCircuit, Try};\n+use crate::{\n+    const_closure::ConstFnMutClosure,\n+    ops::{NeverShortCircuit, Try},\n+};\n \n /// Like `Iterator::by_ref`, but requiring `Sized` so it can forward generics.\n ///\n@@ -36,12 +39,13 @@ impl<I: Iterator> Iterator for ByRefSized<'_, I> {\n     }\n \n     #[inline]\n-    fn fold<B, F>(self, init: B, f: F) -> B\n+    fn fold<B, F>(self, init: B, mut f: F) -> B\n     where\n         F: FnMut(B, Self::Item) -> B,\n     {\n         // `fold` needs ownership, so this can't forward directly.\n-        I::try_fold(self.0, init, NeverShortCircuit::wrap_mut_2(f)).0\n+        I::try_fold(self.0, init, ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp))\n+            .0\n     }\n \n     #[inline]\n@@ -72,12 +76,17 @@ impl<I: DoubleEndedIterator> DoubleEndedIterator for ByRefSized<'_, I> {\n     }\n \n     #[inline]\n-    fn rfold<B, F>(self, init: B, f: F) -> B\n+    fn rfold<B, F>(self, init: B, mut f: F) -> B\n     where\n         F: FnMut(B, Self::Item) -> B,\n     {\n         // `rfold` needs ownership, so this can't forward directly.\n-        I::try_rfold(self.0, init, NeverShortCircuit::wrap_mut_2(f)).0\n+        I::try_rfold(\n+            self.0,\n+            init,\n+            ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp),\n+        )\n+        .0\n     }\n \n     #[inline]"}, {"sha": "de3a534f81b8adf4b0655e4f1471232ec45fde64", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e0ea60a04c463bf52fc81dbbf182f4739525681/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0ea60a04c463bf52fc81dbbf182f4739525681/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=8e0ea60a04c463bf52fc81dbbf182f4739525681", "patch": "@@ -1,3 +1,4 @@\n+use crate::const_closure::ConstFnMutClosure;\n use crate::iter::{InPlaceIterable, Iterator};\n use crate::ops::{ChangeOutputType, ControlFlow, FromResidual, NeverShortCircuit, Residual, Try};\n \n@@ -203,12 +204,12 @@ where\n             .into_try()\n     }\n \n-    fn fold<B, F>(mut self, init: B, fold: F) -> B\n+    fn fold<B, F>(mut self, init: B, mut fold: F) -> B\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        self.try_fold(init, NeverShortCircuit::wrap_mut_2(fold)).0\n+        self.try_fold(init, ConstFnMutClosure::new(&mut fold, NeverShortCircuit::wrap_mut_2_imp)).0\n     }\n }\n "}, {"sha": "8d236a9fecaea27afe29996d3e3e048cc7bad329", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e0ea60a04c463bf52fc81dbbf182f4739525681/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0ea60a04c463bf52fc81dbbf182f4739525681/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=8e0ea60a04c463bf52fc81dbbf182f4739525681", "patch": "@@ -126,7 +126,7 @@ impl<B, C> const ops::FromResidual for ControlFlow<B, C> {\n }\n \n #[unstable(feature = \"try_trait_v2_residual\", issue = \"91285\")]\n-impl<B, C> ops::Residual<C> for ControlFlow<B, convert::Infallible> {\n+impl<B, C> const ops::Residual<C> for ControlFlow<B, convert::Infallible> {\n     type TryType = ControlFlow<B, C>;\n }\n "}, {"sha": "4d0d4e12adbf899fc1b4b86772fc8580ac5e9d86", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8e0ea60a04c463bf52fc81dbbf182f4739525681/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0ea60a04c463bf52fc81dbbf182f4739525681/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=8e0ea60a04c463bf52fc81dbbf182f4739525681", "patch": "@@ -129,7 +129,7 @@ use crate::ops::ControlFlow;\n #[doc(alias = \"?\")]\n #[lang = \"Try\"]\n #[const_trait]\n-pub trait Try: FromResidual {\n+pub trait Try: ~const FromResidual {\n     /// The type of the value produced by `?` when *not* short-circuiting.\n     #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n     type Output;\n@@ -438,10 +438,11 @@ where\n /// and in the other direction,\n /// `<Result<Infallible, E> as Residual<T>>::TryType = Result<T, E>`.\n #[unstable(feature = \"try_trait_v2_residual\", issue = \"91285\")]\n+#[const_trait]\n pub trait Residual<O> {\n     /// The \"return\" type of this meta-function.\n     #[unstable(feature = \"try_trait_v2_residual\", issue = \"91285\")]\n-    type TryType: Try<Output = O, Residual = Self>;\n+    type TryType: ~const Try<Output = O, Residual = Self>;\n }\n \n #[unstable(feature = \"pub_crate_should_not_need_unstable_attr\", issue = \"none\")]\n@@ -460,14 +461,17 @@ pub(crate) struct NeverShortCircuit<T>(pub T);\n impl<T> NeverShortCircuit<T> {\n     /// Wrap a binary `FnMut` to return its result wrapped in a `NeverShortCircuit`.\n     #[inline]\n-    pub fn wrap_mut_2<A, B>(mut f: impl FnMut(A, B) -> T) -> impl FnMut(A, B) -> Self {\n-        move |a, b| NeverShortCircuit(f(a, b))\n+    pub const fn wrap_mut_2_imp<A, B, F: ~const FnMut(A, B) -> T>(\n+        f: &mut F,\n+        (a, b): (A, B),\n+    ) -> NeverShortCircuit<T> {\n+        NeverShortCircuit(f(a, b))\n     }\n }\n \n pub(crate) enum NeverShortCircuitResidual {}\n \n-impl<T> Try for NeverShortCircuit<T> {\n+impl<T> const Try for NeverShortCircuit<T> {\n     type Output = T;\n     type Residual = NeverShortCircuitResidual;\n \n@@ -482,14 +486,14 @@ impl<T> Try for NeverShortCircuit<T> {\n     }\n }\n \n-impl<T> FromResidual for NeverShortCircuit<T> {\n+impl<T> const FromResidual for NeverShortCircuit<T> {\n     #[inline]\n     fn from_residual(never: NeverShortCircuitResidual) -> Self {\n         match never {}\n     }\n }\n \n-impl<T> Residual<T> for NeverShortCircuitResidual {\n+impl<T> const Residual<T> for NeverShortCircuitResidual {\n     type TryType = NeverShortCircuit<T>;\n }\n "}]}