{"sha": "3226a804ad2969c7fe26bade949fe478de80e94d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMjZhODA0YWQyOTY5YzdmZTI2YmFkZTk0OWZlNDc4ZGU4MGU5NGQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-09-12T20:56:11Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-09-12T21:11:25Z"}, "message": "rustpkg: Support sub-package-IDs\n\nPackage IDs can now refer to a subdirectory of a particular source\ntree, and not just a top-level directory with a src/ directory as its\nparent.\n\nFor example, referring to the package ID a/b/c/d , in workspace W,\nif W/src/a is a package, will build the sources for the package in\na/b/c/d (and not other crates in W/src/a).\n\nCloses #6408", "tree": {"sha": "1578c752f02d06132b747fc42545d4b267d1a747", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1578c752f02d06132b747fc42545d4b267d1a747"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3226a804ad2969c7fe26bade949fe478de80e94d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3226a804ad2969c7fe26bade949fe478de80e94d", "html_url": "https://github.com/rust-lang/rust/commit/3226a804ad2969c7fe26bade949fe478de80e94d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3226a804ad2969c7fe26bade949fe478de80e94d/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6be8d353bc25e160bc988e91744571547d12cab", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6be8d353bc25e160bc988e91744571547d12cab", "html_url": "https://github.com/rust-lang/rust/commit/a6be8d353bc25e160bc988e91744571547d12cab"}], "stats": {"total": 172, "additions": 137, "deletions": 35}, "files": [{"sha": "bc2fcdd7fe9b2b19b30d71b5a69fb34afb3bab40", "filename": "src/librustpkg/package_id.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3226a804ad2969c7fe26bade949fe478de80e94d/src%2Flibrustpkg%2Fpackage_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3226a804ad2969c7fe26bade949fe478de80e94d/src%2Flibrustpkg%2Fpackage_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpackage_id.rs?ref=3226a804ad2969c7fe26bade949fe478de80e94d", "patch": "@@ -99,7 +99,35 @@ impl PkgId {\n     /// True if the ID has multiple components\n     pub fn is_complex(&self) -> bool {\n         self.short_name != self.path.to_str()\n-     }\n+    }\n+\n+    pub fn prefixes_iter(&self) -> Prefixes {\n+        Prefixes {\n+            components: self.path.components().to_owned(),\n+            remaining: ~[]\n+        }\n+    }\n+\n+}\n+\n+struct Prefixes {\n+    priv components: ~[~str],\n+    priv remaining: ~[~str]\n+}\n+\n+impl Iterator<(Path, Path)> for Prefixes {\n+    #[inline]\n+    fn next(&mut self) -> Option<(Path, Path)> {\n+        if self.components.len() <= 1 {\n+            None\n+        }\n+        else {\n+            let last = self.components.pop();\n+            self.remaining.push(last);\n+            // converting to str and then back is a little unfortunate\n+            Some((Path(self.components.to_str()), Path(self.remaining.to_str())))\n+        }\n+    }\n }\n \n impl ToStr for PkgId {\n@@ -119,3 +147,4 @@ pub fn hash(data: ~str) -> ~str {\n     write(hasher, data);\n     hasher.result_str()\n }\n+"}, {"sha": "dc76c18ac28c5c3a2942a3e215c7c2deeb683be6", "filename": "src/librustpkg/package_source.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3226a804ad2969c7fe26bade949fe478de80e94d/src%2Flibrustpkg%2Fpackage_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3226a804ad2969c7fe26bade949fe478de80e94d/src%2Flibrustpkg%2Fpackage_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpackage_source.rs?ref=3226a804ad2969c7fe26bade949fe478de80e94d", "patch": "@@ -77,6 +77,33 @@ impl PkgSrc {\n         let dir: Path = match path {\n             Some(d) => (*d).clone(),\n             None => {\n+                // See if any of the prefixes of this package ID form a valid package ID\n+                // That is, is this a package ID that points into the middle of a workspace?\n+                for (prefix, suffix) in id.prefixes_iter() {\n+                    let package_id = PkgId::new(prefix.to_str());\n+                    let path = workspace.push(\"src\").push_rel(&package_id.path);\n+                    debug!(\"in loop: checking if %s is a directory\", path.to_str());\n+                    if os::path_is_dir(&path) {\n+                        let ps = PkgSrc::new(workspace.clone(),\n+                                             use_rust_path_hack,\n+                                             PkgId::new(prefix.to_str()));\n+                        debug!(\"pkgsrc: Returning [%s|%s|%s]\", workspace.to_str(),\n+                               ps.start_dir.push_rel(&suffix).to_str(), ps.id.to_str());\n+\n+                        return PkgSrc {\n+                            workspace: workspace,\n+                            start_dir: ps.start_dir.push_rel(&suffix),\n+                            id: ps.id,\n+                            libs: ~[],\n+                            mains: ~[],\n+                            tests: ~[],\n+                            benchs: ~[]\n+                        }\n+\n+                    };\n+                }\n+\n+                // Ok, no prefixes work, so try fetching from git\n                 let mut ok_d = None;\n                 for w in to_try.iter() {\n                     debug!(\"Calling fetch_git on %s\", w.to_str());\n@@ -93,16 +120,17 @@ impl PkgSrc {\n                         if use_rust_path_hack {\n                             match find_dir_using_rust_path_hack(&id) {\n                                 Some(d) => d,\n-                                None => cond.raise((id.clone(),\n-                                    ~\"supplied path for package dir does not \\\n-                                     exist, and couldn't interpret it as a URL fragment\"))\n+                                None => {\n+                                    cond.raise((id.clone(),\n+                                        ~\"supplied path for package dir does not \\\n+                                        exist, and couldn't interpret it as a URL fragment\"))\n+                                }\n                             }\n                         }\n                         else {\n                             cond.raise((id.clone(),\n-                                        ~\"supplied path for package dir does not \\\n-                                        exist, and couldn't interpret it as a URL fragment\"))\n-\n+                                ~\"supplied path for package dir does not \\\n+                                exist, and couldn't interpret it as a URL fragment\"))\n                         }\n                     }\n                 }\n@@ -115,6 +143,9 @@ impl PkgSrc {\n                                         non-directory\"));\n         }\n \n+        debug!(\"pkgsrc: Returning {%s|%s|%s}\", workspace.to_str(),\n+               dir.to_str(), id.to_str());\n+\n         PkgSrc {\n             workspace: workspace,\n             start_dir: dir,"}, {"sha": "d3789ec5adfd8f7ccaaf3d281a9a999c697bc39d", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3226a804ad2969c7fe26bade949fe478de80e94d/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3226a804ad2969c7fe26bade949fe478de80e94d/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=3226a804ad2969c7fe26bade949fe478de80e94d", "patch": "@@ -49,8 +49,6 @@ pub fn make_dir_rwx(p: &Path) -> bool { os::make_dir(p, U_RWX) }\n /// True if there's a directory in <workspace> with\n /// pkgid's short name\n pub fn workspace_contains_package_id(pkgid: &PkgId, workspace: &Path) -> bool {\n-    debug!(\"Checking in src dir of %s for %s\",\n-           workspace.to_str(), pkgid.to_str());\n     workspace_contains_package_id_(pkgid, workspace, |p| { p.push(\"src\") }).is_some()\n }\n \n@@ -141,9 +139,17 @@ pub fn built_library_in_workspace(pkgid: &PkgId, workspace: &Path) -> Option<Pat\n }\n \n /// Does the actual searching stuff\n-pub fn installed_library_in_workspace(short_name: &str, workspace: &Path) -> Option<Path> {\n+pub fn installed_library_in_workspace(pkg_path: &Path, workspace: &Path) -> Option<Path> {\n     // This could break once we're handling multiple versions better -- I should add a test for it\n-    library_in_workspace(&Path(short_name), short_name, Install, workspace, \"lib\", &NoVersion)\n+    match pkg_path.filename() {\n+        None => None,\n+        Some(short_name) => library_in_workspace(pkg_path,\n+                                                 short_name,\n+                                                 Install,\n+                                                 workspace,\n+                                                 \"lib\",\n+                                                 &NoVersion)\n+    }\n }\n \n /// `workspace` is used to figure out the directory to search."}, {"sha": "37976ea5c488d81174424120ed63916462460730", "filename": "src/librustpkg/search.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3226a804ad2969c7fe26bade949fe478de80e94d/src%2Flibrustpkg%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3226a804ad2969c7fe26bade949fe478de80e94d/src%2Flibrustpkg%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fsearch.rs?ref=3226a804ad2969c7fe26bade949fe478de80e94d", "patch": "@@ -15,10 +15,11 @@ use version::Version;\n /// return Some(p) (returns the first one of there are multiple matches.) Return\n /// None if there's no such path.\n /// FIXME #8711: This ignores the desired version.\n-pub fn find_installed_library_in_rust_path(short_name: &str, _version: &Version) -> Option<Path> {\n+pub fn find_installed_library_in_rust_path(pkg_path: &Path, _version: &Version) -> Option<Path> {\n     let rp = rust_path();\n+    debug!(\"find_installed_library_in_rust_path: looking for path %s\", pkg_path.to_str());\n     for p in rp.iter() {\n-        match installed_library_in_workspace(short_name, p) {\n+        match installed_library_in_workspace(pkg_path, p) {\n             Some(path) => return Some(path),\n             None => ()\n         }"}, {"sha": "cef422be77a89b9874c7d8d5f8b09af4ee6015b8", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 51, "deletions": 20, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/3226a804ad2969c7fe26bade949fe478de80e94d/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3226a804ad2969c7fe26bade949fe478de80e94d/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=3226a804ad2969c7fe26bade949fe478de80e94d", "patch": "@@ -328,13 +328,13 @@ fn create_local_package_with_custom_build_hook(pkgid: &PkgId,\n \n }\n \n-fn assert_lib_exists(repo: &Path, short_name: &str, v: Version) {\n-    assert!(lib_exists(repo, short_name, v));\n+fn assert_lib_exists(repo: &Path, pkg_path: &Path, v: Version) {\n+    assert!(lib_exists(repo, pkg_path, v));\n }\n \n-fn lib_exists(repo: &Path, short_name: &str, _v: Version) -> bool { // ??? version?\n-    debug!(\"assert_lib_exists: repo = %s, short_name = %s\", repo.to_str(), short_name);\n-    let lib = installed_library_in_workspace(short_name, repo);\n+fn lib_exists(repo: &Path, pkg_path: &Path, _v: Version) -> bool { // ??? version?\n+    debug!(\"assert_lib_exists: repo = %s, pkg_path = %s\", repo.to_str(), pkg_path.to_str());\n+    let lib = installed_library_in_workspace(pkg_path, repo);\n     debug!(\"assert_lib_exists: checking whether %? exists\", lib);\n     lib.is_some() && {\n         let libname = lib.get_ref();\n@@ -507,7 +507,7 @@ fn test_install_valid() {\n     assert!(os::path_exists(&exec));\n     assert!(is_rwx(&exec));\n \n-    let lib = installed_library_in_workspace(temp_pkg_id.short_name, &temp_workspace);\n+    let lib = installed_library_in_workspace(&temp_pkg_id.path, &temp_workspace);\n     debug!(\"lib = %?\", lib);\n     assert!(lib.map_default(false, |l| os::path_exists(l)));\n     assert!(lib.map_default(false, |l| is_rwx(l)));\n@@ -571,7 +571,7 @@ fn test_install_git() {\n     let _built_lib =\n         built_library_in_workspace(&temp_pkg_id,\n                                    &ws).expect(\"test_install_git: built lib should exist\");\n-    assert_lib_exists(&ws, temp_pkg_id.short_name, temp_pkg_id.version.clone());\n+    assert_lib_exists(&ws, &temp_pkg_id.path, temp_pkg_id.version.clone());\n     let built_test = built_test_in_workspace(&temp_pkg_id,\n                          &ws).expect(\"test_install_git: built test should exist\");\n     assert!(os::path_exists(&built_test));\n@@ -685,7 +685,7 @@ fn test_package_request_version() {\n \n     command_line_test([~\"install\", fmt!(\"%s#0.3\", local_path)], &repo);\n \n-    assert!(match installed_library_in_workspace(\"test_pkg_version\", &repo.push(\".rust\")) {\n+    assert!(match installed_library_in_workspace(&Path(\"test_pkg_version\"), &repo.push(\".rust\")) {\n         Some(p) => {\n             debug!(\"installed: %s\", p.to_str());\n             p.to_str().ends_with(fmt!(\"0.3%s\", os::consts::DLL_SUFFIX))\n@@ -731,7 +731,7 @@ fn rustpkg_library_target() {\n \n     add_git_tag(&package_dir, ~\"1.0\");\n     command_line_test([~\"install\", ~\"foo\"], &foo_repo);\n-    assert_lib_exists(&foo_repo.push(\".rust\"), \"foo\", ExactRevision(~\"1.0\"));\n+    assert_lib_exists(&foo_repo.push(\".rust\"), &Path(\"foo\"), ExactRevision(~\"1.0\"));\n }\n \n #[test]\n@@ -754,7 +754,7 @@ fn package_script_with_default_build() {\n         fail!(\"Couldn't copy file\");\n     }\n     command_line_test([~\"install\", ~\"fancy-lib\"], &dir);\n-    assert_lib_exists(&dir, \"fancy-lib\", NoVersion);\n+    assert_lib_exists(&dir, &Path(\"fancy-lib\"), NoVersion);\n     assert!(os::path_exists(&dir.push(\"build\").push(\"fancy-lib\").push(\"generated.rs\")));\n }\n \n@@ -783,7 +783,7 @@ fn rustpkg_install_no_arg() {\n               \"fn main() { let _x = (); }\");\n     debug!(\"install_no_arg: dir = %s\", package_dir.to_str());\n     command_line_test([~\"install\"], &package_dir);\n-    assert_lib_exists(&tmp, \"foo\", NoVersion);\n+    assert_lib_exists(&tmp, &Path(\"foo\"), NoVersion);\n }\n \n #[test]\n@@ -1172,11 +1172,11 @@ fn rust_path_hack_test(hack_flag: bool) {\n        dest_workspace.to_str(), workspace.push_many([\"src\", \"foo-0.1\"]).to_str());\n    command_line_test_with_env(~[~\"install\"] + if hack_flag { ~[~\"--rust-path-hack\"] } else { ~[] } +\n                                ~[~\"foo\"], &dest_workspace, rust_path);\n-   assert_lib_exists(&dest_workspace, \"foo\", NoVersion);\n+   assert_lib_exists(&dest_workspace, &Path(\"foo\"), NoVersion);\n    assert_executable_exists(&dest_workspace, \"foo\");\n    assert_built_library_exists(&dest_workspace, \"foo\");\n    assert_built_executable_exists(&dest_workspace, \"foo\");\n-   assert!(!lib_exists(&workspace, \"foo\", NoVersion));\n+   assert!(!lib_exists(&workspace, &Path(\"foo\"), NoVersion));\n    assert!(!executable_exists(&workspace, \"foo\"));\n    assert!(!built_library_exists(&workspace, \"foo\"));\n    assert!(!built_executable_exists(&workspace, \"foo\"));\n@@ -1212,9 +1212,9 @@ fn rust_path_hack_cwd() {\n    debug!(\"declare -x RUST_PATH=%s\", dest_workspace.to_str());\n    command_line_test_with_env([~\"install\", ~\"--rust-path-hack\", ~\"foo\"], &cwd, rust_path);\n    debug!(\"Checking that foo exists in %s\", dest_workspace.to_str());\n-   assert_lib_exists(&dest_workspace, \"foo\", NoVersion);\n+   assert_lib_exists(&dest_workspace, &Path(\"foo\"), NoVersion);\n    assert_built_library_exists(&dest_workspace, \"foo\");\n-   assert!(!lib_exists(&cwd, \"foo\", NoVersion));\n+   assert!(!lib_exists(&cwd, &Path(\"foo\"), NoVersion));\n    assert!(!built_library_exists(&cwd, \"foo\"));\n }\n \n@@ -1232,9 +1232,9 @@ fn rust_path_hack_multi_path() {\n    debug!(\"declare -x RUST_PATH=%s\", dest_workspace.to_str());\n    command_line_test_with_env([~\"install\", ~\"--rust-path-hack\", name.clone()], &subdir, rust_path);\n    debug!(\"Checking that %s exists in %s\", name, dest_workspace.to_str());\n-   assert_lib_exists(&dest_workspace, \"quux\", NoVersion);\n+   assert_lib_exists(&dest_workspace, &Path(\"quux\"), NoVersion);\n    assert_built_library_exists(&dest_workspace, name);\n-   assert!(!lib_exists(&subdir, \"quux\", NoVersion));\n+   assert!(!lib_exists(&subdir, &Path(\"quux\"), NoVersion));\n    assert!(!built_library_exists(&subdir, name));\n }\n \n@@ -1251,9 +1251,9 @@ fn rust_path_hack_install_no_arg() {\n    debug!(\"declare -x RUST_PATH=%s\", dest_workspace.to_str());\n    command_line_test_with_env([~\"install\", ~\"--rust-path-hack\"], &source_dir, rust_path);\n    debug!(\"Checking that foo exists in %s\", dest_workspace.to_str());\n-   assert_lib_exists(&dest_workspace, \"foo\", NoVersion);\n+   assert_lib_exists(&dest_workspace, &Path(\"foo\"), NoVersion);\n    assert_built_library_exists(&dest_workspace, \"foo\");\n-   assert!(!lib_exists(&source_dir, \"foo\", NoVersion));\n+   assert!(!lib_exists(&source_dir, &Path(\"foo\"), NoVersion));\n    assert!(!built_library_exists(&cwd, \"foo\"));\n }\n \n@@ -1378,7 +1378,7 @@ fn notrans_flag_fail() {\n         // we can't tell\n         assert!(!built_executable_exists(&workspace, \"foo\"));\n         assert!(!object_file_exists(&workspace, \"foo\"));\n-        assert!(!lib_exists(&workspace, \"foo\", NoVersion));\n+        assert!(!lib_exists(&workspace, &Path(\"foo\"), NoVersion));\n     }\n }\n \n@@ -1550,6 +1550,37 @@ fn test_optimized_build() {\n     assert!(built_executable_exists(&workspace, \"foo\"));\n }\n \n+fn pkgid_pointing_to_subdir() {\n+    // The actual repo is mockgithub.com/mozilla/some_repo\n+    // rustpkg should recognize that and treat the part after some_repo/ as a subdir\n+    let workspace = mkdtemp(&os::tmpdir(), \"parent_repo\").expect(\"Couldn't create temp dir\");\n+    assert!(os::mkdir_recursive(&workspace.push_many([~\"src\", ~\"mockgithub.com\",\n+                                                     ~\"mozilla\", ~\"some_repo\"]), U_RWX));\n+\n+    let foo_dir = workspace.push_many([~\"src\", ~\"mockgithub.com\", ~\"mozilla\", ~\"some_repo\",\n+                                       ~\"extras\", ~\"foo\"]);\n+    let bar_dir = workspace.push_many([~\"src\", ~\"mockgithub.com\", ~\"mozilla\", ~\"some_repo\",\n+                                       ~\"extras\", ~\"bar\"]);\n+    assert!(os::mkdir_recursive(&foo_dir, U_RWX));\n+    assert!(os::mkdir_recursive(&bar_dir, U_RWX));\n+    writeFile(&foo_dir.push(\"lib.rs\"), \"pub fn f() {}\");\n+    writeFile(&bar_dir.push(\"lib.rs\"), \"pub fn g() {}\");\n+\n+    debug!(\"Creating a file in %s\", workspace.to_str());\n+    let testpkg_dir = workspace.push_many([~\"src\", ~\"testpkg-0.1\"]);\n+    assert!(os::mkdir_recursive(&testpkg_dir, U_RWX));\n+\n+    writeFile(&testpkg_dir.push(\"main.rs\"),\n+              \"extern mod foo = \\\"mockgithub.com/mozilla/some_repo/extras/foo\\\";\\n\n+               extern mod bar = \\\"mockgithub.com/mozilla/some_repo/extras/bar\\\";\\n\n+               use foo::f; use bar::g; \\n\n+               fn main() { f(); g(); }\");\n+\n+    debug!(\"RUST_PATH=%s\", workspace.to_str());\n+    command_line_test([~\"install\", ~\"testpkg\"], &workspace);\n+    assert_executable_exists(&workspace, \"testpkg\");\n+}\n+\n /// Returns true if p exists and is executable\n fn is_executable(p: &Path) -> bool {\n     use std::libc::consts::os::posix88::{S_IXUSR};"}, {"sha": "15fc7d376217b1e00f73a95c7b267f3c6a0ca953", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3226a804ad2969c7fe26bade949fe478de80e94d/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3226a804ad2969c7fe26bade949fe478de80e94d/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=3226a804ad2969c7fe26bade949fe478de80e94d", "patch": "@@ -378,7 +378,8 @@ pub fn find_and_install_dependencies(ctxt: &BuildContext,\n                     Some(p) => p,\n                     None => sess.str_of(lib_ident)\n                 };\n-                match installed_library_in_workspace(lib_name, &ctxt.sysroot()) {\n+                debug!(\"Finding and installing... %s\", lib_name);\n+                match installed_library_in_workspace(&Path(lib_name), &ctxt.sysroot()) {\n                     Some(ref installed_path) => {\n                         debug!(\"It exists: %s\", installed_path.to_str());\n                         // Say that [path for c] has a discovered dependency on\n@@ -420,8 +421,9 @@ pub fn find_and_install_dependencies(ctxt: &BuildContext,\n                             }\n                         }\n                         // Also, add an additional search path\n+                        debug!(\"Adding additional search path: %s\", lib_name);\n                         let installed_library =\n-                            installed_library_in_workspace(lib_name, workspace)\n+                            installed_library_in_workspace(&Path(lib_name), workspace)\n                                 .expect( fmt!(\"rustpkg failed to install dependency %s\",\n                                               lib_name));\n                         let install_dir = installed_library.pop();"}, {"sha": "dfe548c298e8ed12a70b139c3c72b2e226c6b634", "filename": "src/librustpkg/workspace.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3226a804ad2969c7fe26bade949fe478de80e94d/src%2Flibrustpkg%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3226a804ad2969c7fe26bade949fe478de80e94d/src%2Flibrustpkg%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fworkspace.rs?ref=3226a804ad2969c7fe26bade949fe478de80e94d", "patch": "@@ -38,6 +38,8 @@ pub fn each_pkg_parent_workspace(cx: &Context, pkgid: &PkgId, action: &fn(&Path)\n     return true;\n }\n \n+/// Given a package ID, return a vector of all of the workspaces in\n+/// the RUST_PATH that contain it\n pub fn pkg_parent_workspaces(cx: &Context, pkgid: &PkgId) -> ~[Path] {\n     let rs: ~[Path] = rust_path().move_iter()\n         .filter(|ws| workspace_contains_package_id(pkgid, ws))"}]}