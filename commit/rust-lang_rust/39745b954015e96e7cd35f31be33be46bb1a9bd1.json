{"sha": "39745b954015e96e7cd35f31be33be46bb1a9bd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NzQ1Yjk1NDAxNWU5NmU3Y2QzNWYzMWJlMzNiZTQ2YmIxYTliZDE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-08-02T02:23:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-02T02:23:58Z"}, "message": "Merge pull request #1846 from topecongiro/where-clause-span\n\nUse Span from ast::WhereClause", "tree": {"sha": "ab281a4608740bac62481cbd046a6bfe020ee78b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab281a4608740bac62481cbd046a6bfe020ee78b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39745b954015e96e7cd35f31be33be46bb1a9bd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39745b954015e96e7cd35f31be33be46bb1a9bd1", "html_url": "https://github.com/rust-lang/rust/commit/39745b954015e96e7cd35f31be33be46bb1a9bd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39745b954015e96e7cd35f31be33be46bb1a9bd1/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c283d3e64368d045ff5a9668f897be871b4f626c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c283d3e64368d045ff5a9668f897be871b4f626c", "html_url": "https://github.com/rust-lang/rust/commit/c283d3e64368d045ff5a9668f897be871b4f626c"}, {"sha": "e636fe732edb760e4b201bae6456bbe04ea895bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e636fe732edb760e4b201bae6456bbe04ea895bc", "html_url": "https://github.com/rust-lang/rust/commit/e636fe732edb760e4b201bae6456bbe04ea895bc"}], "stats": {"total": 26, "additions": 3, "deletions": 23}, "files": [{"sha": "f05554905af55da966d5d33a7c21967833d7c0fe", "filename": "src/items.rs", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/39745b954015e96e7cd35f31be33be46bb1a9bd1/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39745b954015e96e7cd35f31be33be46bb1a9bd1/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=39745b954015e96e7cd35f31be33be46bb1a9bd1", "patch": "@@ -39,7 +39,6 @@ fn type_annotation_separator(config: &Config) -> &str {\n     )\n }\n \n-\n // Statements of the form\n // let pat: ty = init;\n impl Rewrite for ast::Local {\n@@ -591,7 +590,6 @@ pub fn format_impl(\n             false,\n             last_line_width(&ref_and_type) == 1,\n             where_span_end,\n-            item.span,\n             self_ty.span.hi,\n         ));\n \n@@ -987,7 +985,6 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n             false,\n             trait_bound_str.is_empty() && last_line_width(&generics_str) == 1,\n             None,\n-            item.span,\n             pos_before_where,\n         ));\n         // If the where clause cannot fit on the same line,\n@@ -1220,7 +1217,6 @@ fn format_tuple_struct(\n                 true,\n                 false,\n                 None,\n-                span,\n                 body_hi,\n             ))\n         }\n@@ -1321,7 +1317,6 @@ pub fn rewrite_type_alias(\n         true,\n         true,\n         Some(span.hi),\n-        span,\n         generics.span.hi,\n     ));\n     result.push_str(&where_clause_str);\n@@ -2045,10 +2040,6 @@ fn rewrite_fn_base(\n                     force_new_line_for_brace = true;\n                 }\n             }\n-        } else {\n-            // FIXME it would be nice to catch comments between the return type\n-            // and the where clause, but we don't have a span for the where\n-            // clause.\n         }\n     }\n \n@@ -2079,7 +2070,6 @@ fn rewrite_fn_base(\n             !has_braces,\n             put_args_in_block && ret_str.is_empty(),\n             Some(span.hi),\n-            span,\n             pos_before_where,\n         ) {\n             if !where_clause_str.contains('\\n') {\n@@ -2105,7 +2095,6 @@ fn rewrite_fn_base(\n         !has_braces,\n         put_args_in_block && ret_str.is_empty(),\n         Some(span.hi),\n-        span,\n         pos_before_where,\n     ));\n \n@@ -2507,13 +2496,12 @@ fn rewrite_where_clause_rfc_style(\n     // where clause can be kept on the current line.\n     snuggle: bool,\n     span_end: Option<BytePos>,\n-    span: Span,\n     span_end_before_where: BytePos,\n ) -> Option<String> {\n     let block_shape = shape.block().with_max_width(context.config);\n \n     let (span_before, span_after) =\n-        missing_span_before_after_where(context, span.hi, span_end_before_where, where_clause);\n+        missing_span_before_after_where(span_end_before_where, where_clause);\n     let (comment_before, comment_after) = try_opt!(rewrite_comments_before_after_where(\n         context,\n         span_before,\n@@ -2594,7 +2582,6 @@ fn rewrite_where_clause(\n     suppress_comma: bool,\n     snuggle: bool,\n     span_end: Option<BytePos>,\n-    span: Span,\n     span_end_before_where: BytePos,\n ) -> Option<String> {\n     if where_clause.predicates.is_empty() {\n@@ -2610,7 +2597,6 @@ fn rewrite_where_clause(\n             suppress_comma,\n             snuggle,\n             span_end,\n-            span,\n             span_end_before_where,\n         );\n     }\n@@ -2695,17 +2681,12 @@ fn rewrite_where_clause(\n }\n \n fn missing_span_before_after_where(\n-    context: &RewriteContext,\n-    item_end: BytePos,\n     before_item_span_end: BytePos,\n     where_clause: &ast::WhereClause,\n ) -> (Span, Span) {\n-    let snippet = context.snippet(mk_sp(before_item_span_end, item_end));\n-    let pos_before_where =\n-        before_item_span_end + BytePos(snippet.find_uncommented(\"where\").unwrap() as u32);\n-    let missing_span_before = mk_sp(before_item_span_end, pos_before_where);\n+    let missing_span_before = mk_sp(before_item_span_end, where_clause.span.lo);\n     // 5 = `where`\n-    let pos_after_where = pos_before_where + BytePos(5);\n+    let pos_after_where = where_clause.span.lo + BytePos(5);\n     let missing_span_after = mk_sp(pos_after_where, where_clause.predicates[0].span().lo);\n     (missing_span_before, missing_span_after)\n }\n@@ -2776,7 +2757,6 @@ fn format_generics(\n             false,\n             trimmed_last_line_width(&result) == 1,\n             Some(span.hi),\n-            span,\n             generics.span.hi,\n         ));\n         result.push_str(&where_clause_str);"}]}