{"sha": "4d97b2889345d69fa72233b787b30cff73232465", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkOTdiMjg4OTM0NWQ2OWZhNzIyMzNiNzg3YjMwY2ZmNzMyMzI0NjU=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2018-11-18T18:51:56Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2019-01-24T18:13:51Z"}, "message": "Support revisions for codegen tests\n\n`compile-flags: -Copt-level` will avoid adding -O. Similarly for -g and\n-Cdebuglevel.", "tree": {"sha": "79fe78d9537f549c195864bccaa6d390cff72591", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79fe78d9537f549c195864bccaa6d390cff72591"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d97b2889345d69fa72233b787b30cff73232465", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d97b2889345d69fa72233b787b30cff73232465", "html_url": "https://github.com/rust-lang/rust/commit/4d97b2889345d69fa72233b787b30cff73232465", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d97b2889345d69fa72233b787b30cff73232465/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcf5482cdacd166268f9672f34697dd1da05ceea", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcf5482cdacd166268f9672f34697dd1da05ceea", "html_url": "https://github.com/rust-lang/rust/commit/dcf5482cdacd166268f9672f34697dd1da05ceea"}], "stats": {"total": 164, "additions": 115, "deletions": 49}, "files": [{"sha": "a7d4f910f7a2d06d8b245ed2041258d1d033598a", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d97b2889345d69fa72233b787b30cff73232465/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d97b2889345d69fa72233b787b30cff73232465/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=4d97b2889345d69fa72233b787b30cff73232465", "patch": "@@ -155,8 +155,6 @@ pub fn from_fn_attrs(\n     let codegen_fn_attrs = id.map(|id| cx.tcx.codegen_fn_attrs(id))\n         .unwrap_or_else(|| CodegenFnAttrs::new());\n \n-    inline(cx, llfn, codegen_fn_attrs.inline);\n-\n     match codegen_fn_attrs.optimize {\n         OptimizeAttr::None => {\n             match cx.tcx.sess.opts.optimize {\n@@ -173,7 +171,7 @@ pub fn from_fn_attrs(\n                 OptLevel::No => {\n                     llvm::Attribute::MinSize.unapply_llfn(Function, llfn);\n                     llvm::Attribute::OptimizeForSize.unapply_llfn(Function, llfn);\n-                    llvm::Attribute::OptimizeNone.apply_llfn(Function, llfn);\n+                    llvm::Attribute::OptimizeNone.unapply_llfn(Function, llfn);\n                 }\n                 _ => {}\n             }\n@@ -190,6 +188,8 @@ pub fn from_fn_attrs(\n         }\n     }\n \n+    inline(cx, llfn, codegen_fn_attrs.inline);\n+\n     // The `uwtable` attribute according to LLVM is:\n     //\n     //     This attribute indicates that the ABI being targeted requires that an"}, {"sha": "da45e0200d85f82ca671495c7835e0c502386220", "filename": "src/librustc_codegen_llvm/declare.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d97b2889345d69fa72233b787b30cff73232465/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d97b2889345d69fa72233b787b30cff73232465/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdeclare.rs?ref=4d97b2889345d69fa72233b787b30cff73232465", "patch": "@@ -65,7 +65,7 @@ fn declare_raw_fn(\n         }\n     }\n \n-    // FIXME(opt): this is kinda duplicated with similar code in attributes::from_fm_attrs\u2026\n+    // FIXME(opt): this is kinda duplicated with similar code in attributes::from_fn_attrs\u2026\n     match cx.tcx.sess.opts.optimize {\n         OptLevel::Size => {\n             llvm::Attribute::MinSize.unapply_llfn(Function, llfn);\n@@ -80,7 +80,7 @@ fn declare_raw_fn(\n         OptLevel::No => {\n             llvm::Attribute::MinSize.unapply_llfn(Function, llfn);\n             llvm::Attribute::OptimizeForSize.unapply_llfn(Function, llfn);\n-            llvm::Attribute::OptimizeNone.apply_llfn(Function, llfn);\n+            llvm::Attribute::OptimizeNone.unapply_llfn(Function, llfn);\n         }\n         _ => {}\n     }"}, {"sha": "912af782a8f361aa805bb63d866a139a811ed970", "filename": "src/test/codegen/inline-always-works-always.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4d97b2889345d69fa72233b787b30cff73232465/src%2Ftest%2Fcodegen%2Finline-always-works-always.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d97b2889345d69fa72233b787b30cff73232465/src%2Ftest%2Fcodegen%2Finline-always-works-always.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Finline-always-works-always.rs?ref=4d97b2889345d69fa72233b787b30cff73232465", "patch": "@@ -0,0 +1,21 @@\n+// revisions: NO-OPT SIZE-OPT SPEED-OPT\n+//[NO-OPT] compile-flags: -Copt-level=0\n+//[SIZE-OPT] compile-flags: -Copt-level=s\n+//[SPEED-OPT] compile-flags: -Copt-level=3\n+\n+#![crate_type=\"rlib\"]\n+\n+#[no_mangle]\n+#[inline(always)]\n+pub extern \"C\" fn callee() -> u32 {\n+    4 + 4\n+}\n+\n+// CHECK-LABEL: caller\n+// SIZE-OPT: ret i32 8\n+// SPEED-OPT: ret i32 8\n+// NO-OPT: ret i32 8\n+#[no_mangle]\n+pub extern \"C\" fn caller() -> u32 {\n+    callee()\n+}"}, {"sha": "376447e5b5db0cd61be2297c4e312266a34baba1", "filename": "src/test/codegen/optimize-attr-1.rs", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/4d97b2889345d69fa72233b787b30cff73232465/src%2Ftest%2Fcodegen%2Foptimize-attr-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d97b2889345d69fa72233b787b30cff73232465/src%2Ftest%2Fcodegen%2Foptimize-attr-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Foptimize-attr-1.rs?ref=4d97b2889345d69fa72233b787b30cff73232465", "patch": "@@ -1,49 +1,50 @@\n // revisions: NO-OPT SIZE-OPT SPEED-OPT\n-// [NO-OPT]compile-flags: -Copt-level=0\n-// [SIZE-OPT]compile-flags: -Copt-level=s\n-// [SPEED-OPT]compile-flags: -Copt-level=3\n+//[NO-OPT] compile-flags: -Copt-level=0 -Ccodegen-units=1\n+//[SIZE-OPT] compile-flags: -Copt-level=s -Ccodegen-units=1\n+//[SPEED-OPT] compile-flags: -Copt-level=3 -Ccodegen-units=1\n \n #![feature(optimize_attribute)]\n #![crate_type=\"rlib\"]\n \n-// NO-OPT: Function Attrs:{{.*}}optnone\n-// NO-OPT-NOT: {{optsize|minsize}}\n-// NO-OPT-NEXT: @nothing\n+// CHECK-LABEL: define i32 @nothing\n+// CHECK-SAME: [[NOTHING_ATTRS:#[0-9]+]]\n // NO-OPT: ret i32 %1\n-//\n-// SIZE-OPT: Function Attrs:{{.*}}optsize\n-// SIZE-OPT-NOT: {{minsize|optnone}}\n-// SIZE-OPT-NEXT: @nothing\n-// SIZE-OPT-NEXT: start\n-// SIZE-OPT-NEXT: ret i32 4\n-//\n-// SPEED-OPT: Function Attrs:\n-// SPEED-OPT-NOT: {{minsize|optnone|optsize}}\n-// SPEED-OPT-NEXT: @nothing\n-// SPEED-OPT-NEXT: start\n-// SPEED-OPT-NEXT: ret i32 4\n+// SIZE-OPT: ret i32 4\n+// SPEEC-OPT: ret i32 4\n #[no_mangle]\n pub fn nothing() -> i32 {\n     2 + 2\n }\n \n-// CHECK: Function Attrs:{{.*}} minsize{{.*}}optsize\n-// CHECK-NEXT: @size\n-// CHECK-NEXT: start\n-// CHECK-NEXT: ret i32 4\n+// CHECK-LABEL: define i32 @size\n+// CHECK-SAME: [[SIZE_ATTRS:#[0-9]+]]\n+// NO-OPT: ret i32 %1\n+// SIZE-OPT: ret i32 6\n+// SPEED-OPT: ret i32 6\n #[optimize(size)]\n #[no_mangle]\n pub fn size() -> i32 {\n-    2 + 2\n+    3 + 3\n }\n \n-// CHECK: Function Attrs:\n-// CHECK-NOT: {{minsize|optsize|optnone}}\n-// CHECK-NEXT: @speed\n-// CHECK-NEXT: start\n-// CHECK-NEXT: ret i32 4\n+// CHECK-LABEL: define i32 @speed\n+// NO-OPT-SAME: [[NOTHING_ATTRS]]\n+// SPEED-OPT-SAME: [[NOTHING_ATTRS]]\n+// SIZE-OPT-SAME: [[SPEED_ATTRS:#[0-9]+]]\n+// NO-OPT: ret i32 %1\n+// SIZE-OPT: ret i32 8\n+// SPEED-OPT: ret i32 8\n #[optimize(speed)]\n #[no_mangle]\n pub fn speed() -> i32 {\n-    2 + 2\n+    4 + 4\n }\n+\n+// NO-OPT-DAG: attributes [[SIZE_ATTRS]] = {{.*}}minsize{{.*}}optsize{{.*}}\n+// SPEED-OPT-DAG: attributes [[SIZE_ATTRS]] = {{.*}}minsize{{.*}}optsize{{.*}}\n+// SIZE-OPT-DAG: attributes [[NOTHING_ATTRS]] = {{.*}}optsize{{.*}}\n+// SIZE-OPT-DAG: attributes [[SIZE_ATTRS]] = {{.*}}minsize{{.*}}optsize{{.*}}\n+\n+// SIZE-OPT: attributes [[SPEED_ATTRS]]\n+// SIZE-OPT-NOT: minsize\n+// SIZE-OPT-NOT: optsize"}, {"sha": "394e408e415878b522142aeb6e5e2293d3f7966d", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d97b2889345d69fa72233b787b30cff73232465/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d97b2889345d69fa72233b787b30cff73232465/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=4d97b2889345d69fa72233b787b30cff73232465", "patch": "@@ -542,6 +542,8 @@ fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut dyn FnMut(&str)) {\n         \"#\"\n     };\n \n+    // FIXME: would be nice to allow some whitespace between comment and brace :)\n+    // It took me like 2 days to debug why compile-flags weren\u2019t taken into account for my test :)\n     let comment_with_brace = comment.to_string() + \"[\";\n \n     let rdr = BufReader::new(File::open(testfile).unwrap());"}, {"sha": "375dc1c1283384f303b69180a19ed8456bbd5fad", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 57, "deletions": 15, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/4d97b2889345d69fa72233b787b30cff73232465/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d97b2889345d69fa72233b787b30cff73232465/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=4d97b2889345d69fa72233b787b30cff73232465", "patch": "@@ -552,9 +552,10 @@ impl<'test> TestCx<'test> {\n             .args(&[\"--target\", &self.config.target])\n             .arg(\"-L\")\n             .arg(&aux_dir)\n-            .args(self.split_maybe_args(&self.config.target_rustcflags))\n             .args(&self.props.compile_flags)\n             .envs(self.props.exec_env.clone());\n+        self.maybe_add_external_args(&mut rustc,\n+                                     self.split_maybe_args(&self.config.target_rustcflags));\n \n         let src = match read_from {\n             ReadFrom::Stdin(src) => Some(src),\n@@ -587,6 +588,15 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n+    fn set_revision_flags(&self, cmd: &mut Command) {\n+        if let Some(revision) = self.revision {\n+            // Normalize revisions to be lowercase and replace `-`s with `_`s.\n+            // Otherwise the `--cfg` flag is not valid.\n+            let normalized_revision = revision.to_lowercase().replace(\"-\", \"_\");\n+            cmd.args(&[\"--cfg\", &normalized_revision]);\n+        }\n+    }\n+\n     fn typecheck_source(&self, src: String) -> ProcRes {\n         let mut rustc = Command::new(&self.config.rustc_path);\n \n@@ -612,12 +622,9 @@ impl<'test> TestCx<'test> {\n             .arg(&self.config.build_base)\n             .arg(\"-L\")\n             .arg(aux_dir);\n-\n-        if let Some(revision) = self.revision {\n-            rustc.args(&[\"--cfg\", revision]);\n-        }\n-\n-        rustc.args(self.split_maybe_args(&self.config.target_rustcflags));\n+        self.set_revision_flags(&mut rustc);\n+        self.maybe_add_external_args(&mut rustc,\n+                                     self.split_maybe_args(&self.config.target_rustcflags));\n         rustc.args(&self.props.compile_flags);\n \n         self.compose_and_run_compiler(rustc, Some(src))\n@@ -1119,6 +1126,35 @@ impl<'test> TestCx<'test> {\n         Some(new_options.join(\" \"))\n     }\n \n+    fn maybe_add_external_args(&self, cmd: &mut Command, args: Vec<String>) {\n+        // Filter out the arguments that should not be added by runtest here.\n+        //\n+        // Notable use-cases are: do not add our optimisation flag if\n+        // `compile-flags: -Copt-level=x` and similar for debug-info level as well.\n+        const OPT_FLAGS: &[&str] = &[\"-O\", \"-Copt-level=\", /*-C<space>*/\"opt-level=\"];\n+        const DEBUG_FLAGS: &[&str] = &[\"-g\", \"-Cdebuginfo=\", /*-C<space>*/\"debuginfo=\"];\n+\n+        // FIXME: ideally we would \"just\" check the `cmd` itself, but it does not allow inspecting\n+        // its arguments. They need to be collected separately. For now I cannot be bothered to\n+        // implement this the \"right\" way.\n+        let have_opt_flag = self.props.compile_flags.iter().any(|arg| {\n+            OPT_FLAGS.iter().any(|f| arg.starts_with(f))\n+        });\n+        let have_debug_flag = self.props.compile_flags.iter().any(|arg| {\n+            DEBUG_FLAGS.iter().any(|f| arg.starts_with(f))\n+        });\n+\n+        for arg in args {\n+            if OPT_FLAGS.iter().any(|f| arg.starts_with(f)) && have_opt_flag {\n+                continue;\n+            }\n+            if DEBUG_FLAGS.iter().any(|f| arg.starts_with(f)) && have_debug_flag {\n+                continue;\n+            }\n+            cmd.arg(arg);\n+        }\n+    }\n+\n     fn check_debugger_output(&self, debugger_run_result: &ProcRes, check_lines: &[String]) {\n         let num_check_lines = check_lines.len();\n \n@@ -1707,10 +1743,7 @@ impl<'test> TestCx<'test> {\n \n             rustc.arg(&format!(\"--target={}\", target));\n         }\n-\n-        if let Some(revision) = self.revision {\n-            rustc.args(&[\"--cfg\", revision]);\n-        }\n+        self.set_revision_flags(&mut rustc);\n \n         if !is_rustdoc {\n             if let Some(ref incremental_dir) = self.props.incremental_dir {\n@@ -1810,9 +1843,11 @@ impl<'test> TestCx<'test> {\n         }\n \n         if self.props.force_host {\n-            rustc.args(self.split_maybe_args(&self.config.host_rustcflags));\n+            self.maybe_add_external_args(&mut rustc,\n+                                         self.split_maybe_args(&self.config.host_rustcflags));\n         } else {\n-            rustc.args(self.split_maybe_args(&self.config.target_rustcflags));\n+            self.maybe_add_external_args(&mut rustc,\n+                                         self.split_maybe_args(&self.config.target_rustcflags));\n             if !is_rustdoc {\n                 if let Some(ref linker) = self.config.linker {\n                     rustc.arg(format!(\"-Clinker={}\", linker));\n@@ -2065,12 +2100,19 @@ impl<'test> TestCx<'test> {\n             .arg(\"--input-file\")\n             .arg(irfile)\n             .arg(&self.testpaths.file);\n+        // It would be more appropriate to make most of the arguments configurable through\n+        // a comment-attribute similar to `compile-flags`. For example, --check-prefixes is a very\n+        // useful flag.\n+        //\n+        // For now, though\u2026\n+        if let Some(rev) = self.revision {\n+            let prefixes = format!(\"CHECK,{}\", rev);\n+            filecheck.args(&[\"--check-prefixes\", &prefixes]);\n+        }\n         self.compose_and_run(filecheck, \"\", None, None)\n     }\n \n     fn run_codegen_test(&self) {\n-        assert!(self.revision.is_none(), \"revisions not relevant here\");\n-\n         if self.config.llvm_filecheck.is_none() {\n             self.fatal(\"missing --llvm-filecheck\");\n         }"}]}