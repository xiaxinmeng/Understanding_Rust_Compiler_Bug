{"sha": "64b720229c1fc819db00a45d43a3a0815a3b5809", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YjcyMDIyOWMxZmM4MTlkYjAwYTQ1ZDQzYTNhMDgxNWEzYjU4MDk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-07T21:48:48Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-09T01:20:02Z"}, "message": "Remove ErrorCandidate in favor of just generating an ambiguous result", "tree": {"sha": "893361ddfd4e947c4fe371671b5e2412d5e4159c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/893361ddfd4e947c4fe371671b5e2412d5e4159c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64b720229c1fc819db00a45d43a3a0815a3b5809", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64b720229c1fc819db00a45d43a3a0815a3b5809", "html_url": "https://github.com/rust-lang/rust/commit/64b720229c1fc819db00a45d43a3a0815a3b5809", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64b720229c1fc819db00a45d43a3a0815a3b5809/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc", "html_url": "https://github.com/rust-lang/rust/commit/b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "0f95aa74b6fd731f5f93720b23e09067219ffff5", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64b720229c1fc819db00a45d43a3a0815a3b5809/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b720229c1fc819db00a45d43a3a0815a3b5809/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=64b720229c1fc819db00a45d43a3a0815a3b5809", "patch": "@@ -63,9 +63,9 @@ fn overlap<'cx, 'tcx>(selcx: &mut SelectionContext<'cx, 'tcx>,\n                                                                 b_def_id,\n                                                                 util::fresh_type_vars_for_impl);\n \n-    debug!(\"overlap: a_trait_ref={:?}\", a_trait_ref);\n+    debug!(\"overlap: a_trait_ref={:?} a_obligations={:?}\", a_trait_ref, a_obligations);\n \n-    debug!(\"overlap: b_trait_ref={:?}\", b_trait_ref);\n+    debug!(\"overlap: b_trait_ref={:?} b_obligations={:?}\", b_trait_ref, b_obligations);\n \n     // Do `a` and `b` unify? If not, no overlap.\n     if let Err(_) = infer::mk_eq_trait_refs(selcx.infcx(),"}, {"sha": "f6d0da904a40f0bd15b197c854a0777da08aeaff", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/64b720229c1fc819db00a45d43a3a0815a3b5809/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b720229c1fc819db00a45d43a3a0815a3b5809/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=64b720229c1fc819db00a45d43a3a0815a3b5809", "patch": "@@ -210,8 +210,6 @@ enum SelectionCandidate<'tcx> {\n     BuiltinObjectCandidate,\n \n     BuiltinUnsizeCandidate,\n-\n-    ErrorCandidate,\n }\n \n struct SelectionCandidateSet<'tcx> {\n@@ -753,8 +751,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                               stack: &TraitObligationStack<'o, 'tcx>)\n                                               -> SelectionResult<'tcx, SelectionCandidate<'tcx>>\n     {\n-        if stack.obligation.predicate.0.self_ty().references_error() {\n-            return Ok(Some(ErrorCandidate));\n+        if stack.obligation.predicate.references_error() {\n+            // If we encounter a `TyError`, we generally prefer the\n+            // most \"optimistic\" result in response -- that is, the\n+            // one least likely to report downstream errors. But\n+            // because this routine is shared by coherence and by\n+            // trait selection, there isn't an obvious \"right\" choice\n+            // here in that respect, so we opt to just return\n+            // ambiguity and let the upstream clients sort it out.\n+            return Ok(None);\n         }\n \n         if !self.is_knowable(stack) {\n@@ -1587,7 +1592,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     true\n                 },\n                 &ParamCandidate(..) => false,\n-                &ErrorCandidate => false // propagate errors\n             },\n             _ => false\n         }\n@@ -1998,10 +2002,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     try!(self.confirm_builtin_candidate(obligation, builtin_bound))))\n             }\n \n-            ErrorCandidate => {\n-                Ok(VtableBuiltin(VtableBuiltinData { nested: vec![] }))\n-            }\n-\n             ParamCandidate(param) => {\n                 let obligations = self.confirm_param_candidate(obligation, param);\n                 Ok(VtableParam(obligations))"}]}