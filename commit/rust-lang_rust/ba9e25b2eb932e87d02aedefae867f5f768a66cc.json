{"sha": "ba9e25b2eb932e87d02aedefae867f5f768a66cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhOWUyNWIyZWI5MzJlODdkMDJhZWRlZmFlODY3ZjVmNzY4YTY2Y2M=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-09T14:08:34Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-09T14:08:34Z"}, "message": "No more terminators", "tree": {"sha": "fc49bc0015a593f6f290fc9b03c28e3920a5afed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc49bc0015a593f6f290fc9b03c28e3920a5afed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba9e25b2eb932e87d02aedefae867f5f768a66cc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXWXhiAAoJEFbW7qD8Z6xG9BMP/jR64ibmSglIsVWJ/iXNHwrR\ns4buvLFtGqVhwS4F9N+1HAeXqYCVTAxz4hNYGFxVTwIw+Aa+p4chU5d3xH6JZF19\nz40P4vmgDe8JWuZu04rjL+iPiLSlCPkxho5PKj+N0e1j+TG5Mi8dD+cyQYEuomgI\n2KfbOOE+R0qHWDWnLgqQjZH6u2rvr88hTzBbcZdTknR8IvUUlPP5JMsEmn8wgS+c\neVXa3U1xsLFU/q1kgLyMvFWYSlmDcE2r1P6x7rSxV8QfozTk6Qfyklz8aPzbQdNn\nK892cZxMaqP5bExbdbnb6NfPnjoT1aaJEYriARx5gXRDsw0BE27jhB70mCTE1Xf2\n/6cQm9XVmQjxi/ivAY2JdGeqdH0rJABkhvQLGMsw6n9ydxb43awbMdoWh7mNG3pY\nYwg+gHMM1k9a2T1Qibzo7PnIJPxonFM+WZHCIw+rlx840IaV15+hvoIs6B8GDww5\nBRKsqhwsGvmi9ALk0TbdkmAfrUUazMrgjTAGhV2lIGxHavvg8f5J9cis3dr3a02t\nFLoAlTtMQc6KYDPEUPAe6bY43kd7eUFvo/TfSeRcfkQ9uk7GEmuXDkRtzr91thmT\nHYUdQbL2Z4Hws2a+7Gg4J47S6fXo8vh5I2debvj9buxXw1rnv4MWloZiQPo/VpB+\n6IWygO2H/UIPJz7hOrS6\n=3Mpc\n-----END PGP SIGNATURE-----", "payload": "tree fc49bc0015a593f6f290fc9b03c28e3920a5afed\nparent 8fec1a7aa776ed0f1373a1531b8665f4e35919f5\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465481314 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465481314 +0200\n\nNo more terminators"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba9e25b2eb932e87d02aedefae867f5f768a66cc", "html_url": "https://github.com/rust-lang/rust/commit/ba9e25b2eb932e87d02aedefae867f5f768a66cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba9e25b2eb932e87d02aedefae867f5f768a66cc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fec1a7aa776ed0f1373a1531b8665f4e35919f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fec1a7aa776ed0f1373a1531b8665f4e35919f5", "html_url": "https://github.com/rust-lang/rust/commit/8fec1a7aa776ed0f1373a1531b8665f4e35919f5"}], "stats": {"total": 54, "additions": 14, "deletions": 40}, "files": [{"sha": "1e65bc0aeaec53de493af19befa465810492f09d", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 9, "deletions": 28, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ba9e25b2eb932e87d02aedefae867f5f768a66cc/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9e25b2eb932e87d02aedefae867f5f768a66cc/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=ba9e25b2eb932e87d02aedefae867f5f768a66cc", "patch": "@@ -99,18 +99,6 @@ enum CachedMir<'mir, 'tcx: 'mir> {\n     Owned(Rc<mir::Mir<'tcx>>)\n }\n \n-/// Represents the action to be taken in the main loop as a result of executing a terminator.\n-enum TerminatorTarget {\n-    /// Make a local jump to the next block\n-    Block,\n-\n-    /// Start executing from the new current frame. (For function calls.)\n-    Call,\n-\n-    /// Stop executing the current frame and resume the previous frame.\n-    Return,\n-}\n-\n #[derive(Clone, Debug, Eq, PartialEq, Hash)]\n /// Uniquely identifies a specific constant or static\n struct ConstantId<'tcx> {\n@@ -412,21 +400,19 @@ impl<'a, 'tcx> GlobalEvalContext<'a, 'tcx> {\n     }\n \n     fn eval_terminator(&mut self, terminator: &mir::Terminator<'tcx>)\n-            -> EvalResult<TerminatorTarget> {\n+            -> EvalResult<()> {\n         use rustc::mir::repr::TerminatorKind::*;\n-        let target = match terminator.kind {\n-            Return => TerminatorTarget::Return,\n+        match terminator.kind {\n+            Return => self.pop_stack_frame(),\n \n             Goto { target } => {\n                 self.frame_mut().next_block = target;\n-                TerminatorTarget::Block\n             },\n \n             If { ref cond, targets: (then_target, else_target) } => {\n                 let cond_ptr = self.eval_operand(cond)?;\n                 let cond_val = self.memory.read_bool(cond_ptr)?;\n                 self.frame_mut().next_block = if cond_val { then_target } else { else_target };\n-                TerminatorTarget::Block\n             }\n \n             SwitchInt { ref discr, ref values, ref targets, .. } => {\n@@ -450,7 +436,6 @@ impl<'a, 'tcx> GlobalEvalContext<'a, 'tcx> {\n                 }\n \n                 self.frame_mut().next_block = target_block;\n-                TerminatorTarget::Block\n             }\n \n             Switch { ref discr, ref targets, adt_def } => {\n@@ -463,7 +448,6 @@ impl<'a, 'tcx> GlobalEvalContext<'a, 'tcx> {\n                 match matching {\n                     Some(i) => {\n                         self.frame_mut().next_block = targets[i];\n-                        TerminatorTarget::Block\n                     },\n                     None => return Err(EvalError::InvalidDiscriminant),\n                 }\n@@ -549,8 +533,6 @@ impl<'a, 'tcx> GlobalEvalContext<'a, 'tcx> {\n                                     let dest = self.frame().locals[i];\n                                     self.move_(src, dest, src_ty)?;\n                                 }\n-\n-                                TerminatorTarget::Call\n                             }\n \n                             abi => return Err(EvalError::Unimplemented(format!(\"can't handle function with {:?} ABI\", abi))),\n@@ -566,13 +548,12 @@ impl<'a, 'tcx> GlobalEvalContext<'a, 'tcx> {\n                 let ty = self.lvalue_ty(value);\n                 self.drop(ptr, ty)?;\n                 self.frame_mut().next_block = target;\n-                TerminatorTarget::Block\n             }\n \n             Resume => unimplemented!(),\n-        };\n+        }\n \n-        Ok(target)\n+        Ok(())\n     }\n \n     fn drop(&mut self, ptr: Pointer, ty: Ty<'tcx>) -> EvalResult<()> {\n@@ -662,7 +643,7 @@ impl<'a, 'tcx> GlobalEvalContext<'a, 'tcx> {\n         args: &[mir::Operand<'tcx>],\n         dest: Pointer,\n         dest_size: usize\n-    ) -> EvalResult<TerminatorTarget> {\n+    ) -> EvalResult<()> {\n         let args_res: EvalResult<Vec<Pointer>> = args.iter()\n             .map(|arg| self.eval_operand(arg))\n             .collect();\n@@ -799,7 +780,7 @@ impl<'a, 'tcx> GlobalEvalContext<'a, 'tcx> {\n         // Since we pushed no stack frame, the main loop will act\n         // as if the call just completed and it's returning to the\n         // current frame.\n-        Ok(TerminatorTarget::Call)\n+        Ok(())\n     }\n \n     fn call_c_abi(\n@@ -808,7 +789,7 @@ impl<'a, 'tcx> GlobalEvalContext<'a, 'tcx> {\n         args: &[mir::Operand<'tcx>],\n         dest: Pointer,\n         dest_size: usize,\n-    ) -> EvalResult<TerminatorTarget> {\n+    ) -> EvalResult<()> {\n         let name = self.tcx.item_name(def_id);\n         let attrs = self.tcx.get_attrs(def_id);\n         let link_name = match attr::first_attr_value_str_by_name(&attrs, \"link_name\") {\n@@ -861,7 +842,7 @@ impl<'a, 'tcx> GlobalEvalContext<'a, 'tcx> {\n         // Since we pushed no stack frame, the main loop will act\n         // as if the call just completed and it's returning to the\n         // current frame.\n-        Ok(TerminatorTarget::Call)\n+        Ok(())\n     }\n \n     fn assign_fields<I: IntoIterator<Item = u64>>("}, {"sha": "38490bbc26b2d26832294baef03f6dc0e4c1f602", "filename": "src/interpreter/stepper.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ba9e25b2eb932e87d02aedefae867f5f768a66cc/src%2Finterpreter%2Fstepper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9e25b2eb932e87d02aedefae867f5f768a66cc/src%2Finterpreter%2Fstepper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstepper.rs?ref=ba9e25b2eb932e87d02aedefae867f5f768a66cc", "patch": "@@ -1,6 +1,5 @@\n use super::{\n     CachedMir,\n-    TerminatorTarget,\n     ConstantId,\n     GlobalEvalContext,\n     ConstantKind,\n@@ -42,17 +41,11 @@ impl<'fncx, 'a, 'tcx> Stepper<'fncx, 'a, 'tcx> {\n     fn terminator(&mut self, terminator: &mir::Terminator<'tcx>) -> EvalResult<()> {\n         // after a terminator we go to a new block\n         self.gecx.frame_mut().stmt = 0;\n-        let term = {\n-            trace!(\"{:?}\", terminator.kind);\n-            let result = self.gecx.eval_terminator(terminator);\n-            self.gecx.maybe_report(result)?\n-        };\n-        match term {\n-            TerminatorTarget::Return => {\n-                self.gecx.pop_stack_frame();\n-            },\n-            TerminatorTarget::Block |\n-            TerminatorTarget::Call => trace!(\"// {:?}\", self.gecx.frame().next_block),\n+        trace!(\"{:?}\", terminator.kind);\n+        let result = self.gecx.eval_terminator(terminator);\n+        self.gecx.maybe_report(result)?;\n+        if !self.gecx.stack.is_empty() {\n+            trace!(\"// {:?}\", self.gecx.frame().next_block);\n         }\n         Ok(())\n     }"}]}