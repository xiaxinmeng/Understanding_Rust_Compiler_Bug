{"sha": "e51810df2c11e2a58de77d4b304f78d93851fca9", "node_id": "C_kwDOAAsO6NoAKGU1MTgxMGRmMmMxMWUyYTU4ZGU3N2Q0YjMwNGY3OGQ5Mzg1MWZjYTk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-12-23T14:57:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-12-23T15:04:09Z"}, "message": "add and document MIRI_LIB_SRC env var to set the source from which Miri builds the standard library", "tree": {"sha": "05e8d7640915ed3d9bf07f8bdf3a5716f1daea71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05e8d7640915ed3d9bf07f8bdf3a5716f1daea71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e51810df2c11e2a58de77d4b304f78d93851fca9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e51810df2c11e2a58de77d4b304f78d93851fca9", "html_url": "https://github.com/rust-lang/rust/commit/e51810df2c11e2a58de77d4b304f78d93851fca9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e51810df2c11e2a58de77d4b304f78d93851fca9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e969615937e9fdb7d293206e19f425b6184450de", "url": "https://api.github.com/repos/rust-lang/rust/commits/e969615937e9fdb7d293206e19f425b6184450de", "html_url": "https://github.com/rust-lang/rust/commit/e969615937e9fdb7d293206e19f425b6184450de"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "359378504343fa497243c6c25ea47168cb6462fd", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e51810df2c11e2a58de77d4b304f78d93851fca9/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/e51810df2c11e2a58de77d4b304f78d93851fca9/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=e51810df2c11e2a58de77d4b304f78d93851fca9", "patch": "@@ -107,6 +107,16 @@ There's a test for the cargo wrapper in the `test-cargo-miri` directory; run\n `./run-test.py` in there to execute it. Like `./miri test`, this respects the\n `MIRI_TEST_TARGET` environment variable to execute the test for another target.\n \n+### Using a modified standard library\n+\n+Miri re-builds the standard library into a custom sysroot, so it is fairly easy\n+to test Miri against a modified standard library -- you do not even have to\n+build Miri yourself, the Miri shipped by `rustup` will work. All you have to do\n+is set the `MIRI_LIB_SRC` environment variable to the `library` folder of a\n+`rust-lang/rust` repository checkout. Note that changing files in that directory\n+does not automatically trigger a re-build of the standard library; you have to\n+clear the Miri build cache manually (on Linux, `rm -rf ~/.cache/miri`).\n+\n ## Configuring `rust-analyzer`\n \n To configure `rust-analyzer` and VS Code for working on Miri, save the following"}, {"sha": "fb9a5566990307e81912622ff65b66ef67e220d9", "filename": "README.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e51810df2c11e2a58de77d4b304f78d93851fca9/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/e51810df2c11e2a58de77d4b304f78d93851fca9/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=e51810df2c11e2a58de77d4b304f78d93851fca9", "patch": "@@ -306,6 +306,12 @@ Moreover, Miri recognizes some environment variables:\n   Miri executions, also [see \"Testing the Miri driver\" in `CONTRIBUTING.md`][testing-miri].\n * `MIRIFLAGS` (recognized by `cargo miri` and the test suite) defines extra\n   flags to be passed to Miri.\n+* `MIRI_LIB_SRC` defines the directory where Miri expects the sources of the\n+  standard library that it will build and use for interpretation. This directory\n+  must point to the `library` subdirectory of a `rust-lang/rust` repository\n+  checkout. Note that changing files in that directory does not automatically\n+  trigger a re-build of the standard library; you have to clear the Miri build\n+  cache manually (on Linux, `rm -rf ~/.cache/miri`).\n * `MIRI_SYSROOT` (recognized by `cargo miri` and the test suite)\n   indicates the sysroot to use.  To do the same thing with `miri`\n   directly, use the `--sysroot` flag."}, {"sha": "a946f798883381c47ab03c0036cf931f5caa1ec8", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e51810df2c11e2a58de77d4b304f78d93851fca9/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e51810df2c11e2a58de77d4b304f78d93851fca9/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=e51810df2c11e2a58de77d4b304f78d93851fca9", "patch": "@@ -1,5 +1,5 @@\n use std::env;\n-use std::ffi::OsString;\n+use std::ffi::{OsStr, OsString};\n use std::fmt::Write as _;\n use std::fs::{self, File};\n use std::io::{self, BufRead, BufReader, BufWriter, Read, Write};\n@@ -341,8 +341,11 @@ fn setup(subcommand: MiriCommand) {\n         ask_to_run(cmd, ask_user, \"install a recent enough xargo\");\n     }\n \n-    // Determine where the rust sources are located.  `XARGO_RUST_SRC` env var trumps everything.\n-    let rust_src = match std::env::var_os(\"XARGO_RUST_SRC\") {\n+    // Determine where the rust sources are located.  The env vars manually setting the source\n+    // (`MIRI_LIB_SRC`, `XARGO_RUST_SRC`) trump auto-detection.\n+    let rust_src_env_var =\n+        std::env::var_os(\"MIRI_LIB_SRC\").or_else(|| std::env::var_os(\"XARGO_RUST_SRC\"));\n+    let rust_src = match rust_src_env_var {\n         Some(path) => {\n             let path = PathBuf::from(path);\n             // Make path absolute if possible.\n@@ -376,6 +379,13 @@ fn setup(subcommand: MiriCommand) {\n     if !rust_src.exists() {\n         show_error(format!(\"given Rust source directory `{}` does not exist.\", rust_src.display()));\n     }\n+    if rust_src.file_name().and_then(OsStr::to_str) != Some(\"library\") {\n+        show_error(format!(\n+            \"given Rust source directory `{}` does not seem to be the `library` subdirectory of \\\n+             a Rust source checkout.\",\n+            rust_src.display()\n+        ));\n+    }\n \n     // Next, we need our own libstd. Prepare a xargo project for that purpose.\n     // We will do this work in whatever is a good cache dir for this platform."}]}