{"sha": "1f7df1956a8c78652aedee67172d7d52f395d785", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmN2RmMTk1NmE4Yzc4NjUyYWVkZWU2NzE3MmQ3ZDUyZjM5NWQ3ODU=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-12T10:53:51Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-15T17:32:43Z"}, "message": "Replace `type_alias_impl_trait` by `min_type_alias_impl_trait` with no actual changes in behaviour\n\nThis makes `type_alias_impl_trait` not actually do anything anymore", "tree": {"sha": "93810ac52314f3185bb8c2a5776dce061893da5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93810ac52314f3185bb8c2a5776dce061893da5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f7df1956a8c78652aedee67172d7d52f395d785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f7df1956a8c78652aedee67172d7d52f395d785", "html_url": "https://github.com/rust-lang/rust/commit/1f7df1956a8c78652aedee67172d7d52f395d785", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f7df1956a8c78652aedee67172d7d52f395d785/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19dce738f916570403c5fe8030d639778715c521", "url": "https://api.github.com/repos/rust-lang/rust/commits/19dce738f916570403c5fe8030d639778715c521", "html_url": "https://github.com/rust-lang/rust/commit/19dce738f916570403c5fe8030d639778715c521"}], "stats": {"total": 5390, "additions": 4814, "deletions": 576}, "files": [{"sha": "0ca9c12f4c133fae83193cadc23c20bda972648c", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -279,7 +279,7 @@ impl<'a> PostExpansionVisitor<'a> {\n                 if let ast::TyKind::ImplTrait(..) = ty.kind {\n                     gate_feature_post!(\n                         &self.vis,\n-                        type_alias_impl_trait,\n+                        min_type_alias_impl_trait,\n                         ty.span,\n                         \"`impl Trait` in type aliases is unstable\"\n                     );"}, {"sha": "79ec9c264998ce8622fc8c6aa1bbd7aae58d9c13", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -638,6 +638,9 @@ declare_features! (\n     /// Allows `pub` on `macro_rules` items.\n     (active, pub_macro_rules, \"1.52.0\", Some(78855), None),\n \n+    /// Allows the use of type alias impl trait in function return positions\n+    (active, min_type_alias_impl_trait, \"1.52.0\", Some(63063), None),\n+\n     /// Allows associated types in inherent impls.\n     (active, inherent_associated_types, \"1.52.0\", Some(8995), None),\n \n@@ -670,6 +673,7 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::capture_disjoint_fields,\n     sym::const_generics_defaults,\n     sym::inherent_associated_types,\n+    sym::type_alias_impl_trait,\n ];\n \n /// Some features are not allowed to be used together at the same time, if"}, {"sha": "aff66053c93bcb2d6ab30bf61bf63eb0ac579154", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -106,7 +106,7 @@ declare_features! (\n      Some(\"subsumed by `.await` syntax\")),\n     /// Allows defining `existential type`s.\n     (removed, existential_type, \"1.38.0\", Some(63063), None,\n-     Some(\"removed in favor of `#![feature(type_alias_impl_trait)]`\")),\n+     Some(\"removed in favor of `#![feature(min_type_alias_impl_trait)]`\")),\n     /// Allows using the macros:\n     /// + `__diagnostic_used`\n     /// + `__register_diagnostic`"}, {"sha": "7bd1a21cc918ae12dfc9cf27dc9bda662f086b88", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -736,6 +736,7 @@ symbols! {\n         min_const_generics,\n         min_const_unsafe_fn,\n         min_specialization,\n+        min_type_alias_impl_trait,\n         minnumf32,\n         minnumf64,\n         mips_target_feature,"}, {"sha": "bde75031f6190267e66f0a2fad3573fcafe2cb5d", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -142,7 +142,8 @@\n #![feature(alloc_layout_extra)]\n #![feature(trusted_random_access)]\n #![feature(try_trait)]\n-#![feature(type_alias_impl_trait)]\n+#![cfg_attr(bootstrap, feature(type_alias_impl_trait))]\n+#![cfg_attr(not(bootstrap), feature(min_type_alias_impl_trait))]\n #![feature(associated_type_bounds)]\n #![feature(slice_group_by)]\n #![feature(decl_macro)]"}, {"sha": "3e7b428023487a2e7dd55170d7aef3fe45758dee", "filename": "src/test/rustdoc-ui/error-in-impl-trait/trait-alias-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(type_alias_impl_trait)]\n+#![feature(min_type_alias_impl_trait)]\n \n pub trait ValidTrait {}\n type ImplTrait = impl ValidTrait;"}, {"sha": "7ebf4d544de1ee43fd26dc7c48853af64adb90ac", "filename": "src/test/rustdoc-ui/error-in-impl-trait/trait-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(type_alias_impl_trait)]\n+#![feature(min_type_alias_impl_trait)]\n \n pub trait ValidTrait {}\n type ImplTrait = impl ValidTrait;"}, {"sha": "9b4129e771f87839ac3a00030776fb5252b527ab", "filename": "src/test/rustdoc/auxiliary/issue-73061.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-73061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-73061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-73061.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,6 +1,6 @@\n //edition:2018\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(min_type_alias_impl_trait)]\n \n pub trait Foo {\n     type X: std::future::Future<Output = ()>;"}, {"sha": "bf73a833580c5ce80b26d8c30687c84b7bf755bf", "filename": "src/test/rustdoc/impl-trait-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Frustdoc%2Fimpl-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Frustdoc%2Fimpl-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-trait-alias.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(min_type_alias_impl_trait)]\n \n trait MyTrait {}\n impl MyTrait for i32 {}"}, {"sha": "da4945aadf7f927efe3e3c8aa27a0b69c903b937", "filename": "src/test/rustdoc/return-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Frustdoc%2Freturn-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Frustdoc%2Freturn-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Freturn-impl-trait.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(min_type_alias_impl_trait)]\n \n pub trait Backend {}\n "}, {"sha": "bde2d034e254deb675df50fa37ea5c0d1996d03e", "filename": "src/test/ui/associated-type-bounds/duplicate.full_tait.stderr", "status": "added", "additions": 572, "deletions": 0, "changes": 572, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,572 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/duplicate.rs:6:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/duplicate.rs:8:12\n+   |\n+LL | #![feature(impl_trait_in_bindings)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:13:36\n+   |\n+LL | struct SI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n+   |                        ----------  ^^^^^^^^^^ re-bound here\n+   |                        |\n+   |                        `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:15:36\n+   |\n+LL | struct SI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n+   |                        ----------  ^^^^^^^^^^ re-bound here\n+   |                        |\n+   |                        `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:17:39\n+   |\n+LL | struct SI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n+   |                        -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                        |\n+   |                        `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:19:45\n+   |\n+LL | struct SW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n+   |                                 ----------  ^^^^^^^^^^ re-bound here\n+   |                                 |\n+   |                                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:21:45\n+   |\n+LL | struct SW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n+   |                                 ----------  ^^^^^^^^^^ re-bound here\n+   |                                 |\n+   |                                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:23:48\n+   |\n+LL | struct SW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n+   |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                                 |\n+   |                                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:26:34\n+   |\n+LL | enum EI1<T: Iterator<Item: Copy, Item: Send>> { V(T) }\n+   |                      ----------  ^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:28:34\n+   |\n+LL | enum EI2<T: Iterator<Item: Copy, Item: Copy>> { V(T) }\n+   |                      ----------  ^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:30:37\n+   |\n+LL | enum EI3<T: Iterator<Item: 'static, Item: 'static>> { V(T) }\n+   |                      -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:32:43\n+   |\n+LL | enum EW1<T> where T: Iterator<Item: Copy, Item: Send> { V(T) }\n+   |                               ----------  ^^^^^^^^^^ re-bound here\n+   |                               |\n+   |                               `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:34:43\n+   |\n+LL | enum EW2<T> where T: Iterator<Item: Copy, Item: Copy> { V(T) }\n+   |                               ----------  ^^^^^^^^^^ re-bound here\n+   |                               |\n+   |                               `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:36:46\n+   |\n+LL | enum EW3<T> where T: Iterator<Item: 'static, Item: 'static> { V(T) }\n+   |                               -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                               |\n+   |                               `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:39:35\n+   |\n+LL | union UI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n+   |                       ----------  ^^^^^^^^^^ re-bound here\n+   |                       |\n+   |                       `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:41:35\n+   |\n+LL | union UI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n+   |                       ----------  ^^^^^^^^^^ re-bound here\n+   |                       |\n+   |                       `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:43:38\n+   |\n+LL | union UI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n+   |                       -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                       |\n+   |                       `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:45:44\n+   |\n+LL | union UW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n+   |                                ----------  ^^^^^^^^^^ re-bound here\n+   |                                |\n+   |                                `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:47:44\n+   |\n+LL | union UW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n+   |                                ----------  ^^^^^^^^^^ re-bound here\n+   |                                |\n+   |                                `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:49:47\n+   |\n+LL | union UW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n+   |                                -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                                |\n+   |                                `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:52:32\n+   |\n+LL | fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n+   |                    ----------  ^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:54:32\n+   |\n+LL | fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n+   |                    ----------  ^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:56:35\n+   |\n+LL | fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n+   |                    -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:58:43\n+   |\n+LL | fn FW1<T>() where T: Iterator<Item: Copy, Item: Send> {}\n+   |                               ----------  ^^^^^^^^^^ re-bound here\n+   |                               |\n+   |                               `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:60:43\n+   |\n+LL | fn FW2<T>() where T: Iterator<Item: Copy, Item: Copy> {}\n+   |                               ----------  ^^^^^^^^^^ re-bound here\n+   |                               |\n+   |                               `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:62:46\n+   |\n+LL | fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n+   |                               -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                               |\n+   |                               `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:68:40\n+   |\n+LL | fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n+   |                            ----------  ^^^^^^^^^^ re-bound here\n+   |                            |\n+   |                            `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:70:40\n+   |\n+LL | fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n+   |                            ----------  ^^^^^^^^^^ re-bound here\n+   |                            |\n+   |                            `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:72:43\n+   |\n+LL | fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n+   |                            -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                            |\n+   |                            `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:75:39\n+   |\n+LL | const CIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n+   |                           ----------  ^^^^^^^^^^ re-bound here\n+   |                           |\n+   |                           `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:77:39\n+   |\n+LL | const CIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n+   |                           ----------  ^^^^^^^^^^ re-bound here\n+   |                           |\n+   |                           `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:79:42\n+   |\n+LL | const CIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n+   |                           -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                           |\n+   |                           `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:81:40\n+   |\n+LL | static SIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n+   |                            ----------  ^^^^^^^^^^ re-bound here\n+   |                            |\n+   |                            `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:83:40\n+   |\n+LL | static SIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n+   |                            ----------  ^^^^^^^^^^ re-bound here\n+   |                            |\n+   |                            `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:85:43\n+   |\n+LL | static SIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n+   |                            -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                            |\n+   |                            `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:88:46\n+   |\n+LL | fn lit1() { let _: impl Iterator<Item: Copy, Item: Send> = iter::empty(); }\n+   |                                  ----------  ^^^^^^^^^^ re-bound here\n+   |                                  |\n+   |                                  `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:90:46\n+   |\n+LL | fn lit2() { let _: impl Iterator<Item: Copy, Item: Copy> = iter::empty(); }\n+   |                                  ----------  ^^^^^^^^^^ re-bound here\n+   |                                  |\n+   |                                  `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:92:49\n+   |\n+LL | fn lit3() { let _: impl Iterator<Item: 'static, Item: 'static> = iter::empty(); }\n+   |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                                  |\n+   |                                  `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:95:35\n+   |\n+LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n+   |                       ----------  ^^^^^^^^^^ re-bound here\n+   |                       |\n+   |                       `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:97:35\n+   |\n+LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n+   |                       ----------  ^^^^^^^^^^ re-bound here\n+   |                       |\n+   |                       `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:99:38\n+   |\n+LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n+   |                       -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                       |\n+   |                       `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:101:44\n+   |\n+LL | type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n+   |                                ----------  ^^^^^^^^^^ re-bound here\n+   |                                |\n+   |                                `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:103:44\n+   |\n+LL | type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n+   |                                ----------  ^^^^^^^^^^ re-bound here\n+   |                                |\n+   |                                `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:105:47\n+   |\n+LL | type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n+   |                                -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                                |\n+   |                                `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:108:36\n+   |\n+LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n+   |                        ----------  ^^^^^^^^^^ re-bound here\n+   |                        |\n+   |                        `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:110:36\n+   |\n+LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n+   |                        ----------  ^^^^^^^^^^ re-bound here\n+   |                        |\n+   |                        `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:112:39\n+   |\n+LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n+   |                        -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                        |\n+   |                        `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:114:40\n+   |\n+LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n+   |                            ----------  ^^^^^^^^^^ re-bound here\n+   |                            |\n+   |                            `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:116:40\n+   |\n+LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n+   |                            ----------  ^^^^^^^^^^ re-bound here\n+   |                            |\n+   |                            `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:118:43\n+   |\n+LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n+   |                            -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                            |\n+   |                            `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:121:36\n+   |\n+LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n+   |                        ----------  ^^^^^^^^^^ re-bound here\n+   |                        |\n+   |                        `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:123:36\n+   |\n+LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n+   |                        ----------  ^^^^^^^^^^ re-bound here\n+   |                        |\n+   |                        `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:125:39\n+   |\n+LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n+   |                        -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                        |\n+   |                        `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:127:34\n+   |\n+LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n+   |                      ----------  ^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:129:34\n+   |\n+LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n+   |                      ----------  ^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:131:37\n+   |\n+LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n+   |                      -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:133:45\n+   |\n+LL | trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n+   |                                 ----------  ^^^^^^^^^^ re-bound here\n+   |                                 |\n+   |                                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:135:45\n+   |\n+LL | trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n+   |                                 ----------  ^^^^^^^^^^ re-bound here\n+   |                                 |\n+   |                                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:137:48\n+   |\n+LL | trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n+   |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                                 |\n+   |                                 `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:139:46\n+   |\n+LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n+   |                                  ----------  ^^^^^^^^^^ re-bound here\n+   |                                  |\n+   |                                  `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:139:46\n+   |\n+LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n+   |                                  ----------  ^^^^^^^^^^ re-bound here\n+   |                                  |\n+   |                                  `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:142:46\n+   |\n+LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n+   |                                  ----------  ^^^^^^^^^^ re-bound here\n+   |                                  |\n+   |                                  `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:142:46\n+   |\n+LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n+   |                                  ----------  ^^^^^^^^^^ re-bound here\n+   |                                  |\n+   |                                  `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:145:49\n+   |\n+LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n+   |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                                  |\n+   |                                  `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:145:49\n+   |\n+LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n+   |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                                  |\n+   |                                  `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:155:40\n+   |\n+LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n+   |                            ----------  ^^^^^^^^^^ re-bound here\n+   |                            |\n+   |                            `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:157:44\n+   |\n+LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n+   |                                ----------  ^^^^^^^^^^ re-bound here\n+   |                                |\n+   |                                `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:159:43\n+   |\n+LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n+   |                            -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                            |\n+   |                            `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:148:43\n+   |\n+LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n+   |                               ----------  ^^^^^^^^^^ re-bound here\n+   |                               |\n+   |                               `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:150:43\n+   |\n+LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n+   |                               ----------  ^^^^^^^^^^ re-bound here\n+   |                               |\n+   |                               `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:152:46\n+   |\n+LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n+   |                               -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                               |\n+   |                               `Item` bound here first\n+\n+error: aborting due to 69 previous errors; 2 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0719`."}, {"sha": "cc775dee4a2fd73ab4d1a76b58163caa6cdc9391", "filename": "src/test/ui/associated-type-bounds/duplicate.min_tait.stderr", "status": "renamed", "additions": 70, "deletions": 70, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/duplicate.rs:5:12\n+  --> $DIR/duplicate.rs:8:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,551 +8,551 @@ LL | #![feature(impl_trait_in_bindings)]\n    = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:10:36\n+  --> $DIR/duplicate.rs:13:36\n    |\n LL | struct SI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:12:36\n+  --> $DIR/duplicate.rs:15:36\n    |\n LL | struct SI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:14:39\n+  --> $DIR/duplicate.rs:17:39\n    |\n LL | struct SI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:16:45\n+  --> $DIR/duplicate.rs:19:45\n    |\n LL | struct SW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:18:45\n+  --> $DIR/duplicate.rs:21:45\n    |\n LL | struct SW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:20:48\n+  --> $DIR/duplicate.rs:23:48\n    |\n LL | struct SW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:23:34\n+  --> $DIR/duplicate.rs:26:34\n    |\n LL | enum EI1<T: Iterator<Item: Copy, Item: Send>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:25:34\n+  --> $DIR/duplicate.rs:28:34\n    |\n LL | enum EI2<T: Iterator<Item: Copy, Item: Copy>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:27:37\n+  --> $DIR/duplicate.rs:30:37\n    |\n LL | enum EI3<T: Iterator<Item: 'static, Item: 'static>> { V(T) }\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:29:43\n+  --> $DIR/duplicate.rs:32:43\n    |\n LL | enum EW1<T> where T: Iterator<Item: Copy, Item: Send> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:31:43\n+  --> $DIR/duplicate.rs:34:43\n    |\n LL | enum EW2<T> where T: Iterator<Item: Copy, Item: Copy> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:33:46\n+  --> $DIR/duplicate.rs:36:46\n    |\n LL | enum EW3<T> where T: Iterator<Item: 'static, Item: 'static> { V(T) }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:36:35\n+  --> $DIR/duplicate.rs:39:35\n    |\n LL | union UI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:38:35\n+  --> $DIR/duplicate.rs:41:35\n    |\n LL | union UI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:40:38\n+  --> $DIR/duplicate.rs:43:38\n    |\n LL | union UI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:42:44\n+  --> $DIR/duplicate.rs:45:44\n    |\n LL | union UW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:44:44\n+  --> $DIR/duplicate.rs:47:44\n    |\n LL | union UW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:46:47\n+  --> $DIR/duplicate.rs:49:47\n    |\n LL | union UW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:49:32\n+  --> $DIR/duplicate.rs:52:32\n    |\n LL | fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:51:32\n+  --> $DIR/duplicate.rs:54:32\n    |\n LL | fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:53:35\n+  --> $DIR/duplicate.rs:56:35\n    |\n LL | fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n    |                    -------------  ^^^^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:55:43\n+  --> $DIR/duplicate.rs:58:43\n    |\n LL | fn FW1<T>() where T: Iterator<Item: Copy, Item: Send> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:57:43\n+  --> $DIR/duplicate.rs:60:43\n    |\n LL | fn FW2<T>() where T: Iterator<Item: Copy, Item: Copy> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:59:46\n+  --> $DIR/duplicate.rs:62:46\n    |\n LL | fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:65:40\n+  --> $DIR/duplicate.rs:68:40\n    |\n LL | fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:67:40\n+  --> $DIR/duplicate.rs:70:40\n    |\n LL | fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:69:43\n+  --> $DIR/duplicate.rs:72:43\n    |\n LL | fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:72:39\n+  --> $DIR/duplicate.rs:75:39\n    |\n LL | const CIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n    |                           ----------  ^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:74:39\n+  --> $DIR/duplicate.rs:77:39\n    |\n LL | const CIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n    |                           ----------  ^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:76:42\n+  --> $DIR/duplicate.rs:79:42\n    |\n LL | const CIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n    |                           -------------  ^^^^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:78:40\n+  --> $DIR/duplicate.rs:81:40\n    |\n LL | static SIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:80:40\n+  --> $DIR/duplicate.rs:83:40\n    |\n LL | static SIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:82:43\n+  --> $DIR/duplicate.rs:85:43\n    |\n LL | static SIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:85:46\n+  --> $DIR/duplicate.rs:88:46\n    |\n LL | fn lit1() { let _: impl Iterator<Item: Copy, Item: Send> = iter::empty(); }\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:87:46\n+  --> $DIR/duplicate.rs:90:46\n    |\n LL | fn lit2() { let _: impl Iterator<Item: Copy, Item: Copy> = iter::empty(); }\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:89:49\n+  --> $DIR/duplicate.rs:92:49\n    |\n LL | fn lit3() { let _: impl Iterator<Item: 'static, Item: 'static> = iter::empty(); }\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:92:35\n+  --> $DIR/duplicate.rs:95:35\n    |\n LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:94:35\n+  --> $DIR/duplicate.rs:97:35\n    |\n LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:96:38\n+  --> $DIR/duplicate.rs:99:38\n    |\n LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:98:44\n+  --> $DIR/duplicate.rs:101:44\n    |\n LL | type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:100:44\n+  --> $DIR/duplicate.rs:103:44\n    |\n LL | type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:102:47\n+  --> $DIR/duplicate.rs:105:47\n    |\n LL | type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:105:36\n+  --> $DIR/duplicate.rs:108:36\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:107:36\n+  --> $DIR/duplicate.rs:110:36\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:109:39\n+  --> $DIR/duplicate.rs:112:39\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:111:40\n+  --> $DIR/duplicate.rs:114:40\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:113:40\n+  --> $DIR/duplicate.rs:116:40\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:115:43\n+  --> $DIR/duplicate.rs:118:43\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:118:36\n+  --> $DIR/duplicate.rs:121:36\n    |\n LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:120:36\n+  --> $DIR/duplicate.rs:123:36\n    |\n LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:122:39\n+  --> $DIR/duplicate.rs:125:39\n    |\n LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:124:34\n+  --> $DIR/duplicate.rs:127:34\n    |\n LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:126:34\n+  --> $DIR/duplicate.rs:129:34\n    |\n LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:128:37\n+  --> $DIR/duplicate.rs:131:37\n    |\n LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:130:45\n+  --> $DIR/duplicate.rs:133:45\n    |\n LL | trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:132:45\n+  --> $DIR/duplicate.rs:135:45\n    |\n LL | trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:134:48\n+  --> $DIR/duplicate.rs:137:48\n    |\n LL | trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:136:46\n+  --> $DIR/duplicate.rs:139:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:136:46\n+  --> $DIR/duplicate.rs:139:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:139:46\n+  --> $DIR/duplicate.rs:142:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:139:46\n+  --> $DIR/duplicate.rs:142:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:142:49\n+  --> $DIR/duplicate.rs:145:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:142:49\n+  --> $DIR/duplicate.rs:145:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:152:40\n+  --> $DIR/duplicate.rs:155:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:154:44\n+  --> $DIR/duplicate.rs:157:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:156:43\n+  --> $DIR/duplicate.rs:159:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:145:43\n+  --> $DIR/duplicate.rs:148:43\n    |\n LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:147:43\n+  --> $DIR/duplicate.rs:150:43\n    |\n LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:149:46\n+  --> $DIR/duplicate.rs:152:46\n    |\n LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here", "previous_filename": "src/test/ui/associated-type-bounds/duplicate.stderr"}, {"sha": "a7bbeaf38e74f8fdeed9b7926aa80c7201f8098c", "filename": "src/test/ui/associated-type-bounds/duplicate.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,7 +1,10 @@\n // ignore-tidy-linelength\n \n #![feature(associated_type_bounds)]\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n #![feature(impl_trait_in_bindings)] //~ WARN the feature `impl_trait_in_bindings` is incomplete\n #![feature(untagged_unions)]\n "}, {"sha": "d4da4babf4e113a6cc80138b4168038511feb254", "filename": "src/test/ui/associated-type-bounds/trait-alias-impl-trait.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/trait-alias-impl-trait.rs:6:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "cf20631af5bca0edc5c85527dfe13c121a5085e8", "filename": "src/test/ui/associated-type-bounds/trait-alias-impl-trait.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,7 +1,10 @@\n // run-pass\n \n #![feature(associated_type_bounds)]\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n use std::ops::Add;\n "}, {"sha": "9857f7e2677a8daaf560fdfc0fc03081975651f3", "filename": "src/test/ui/associated-types/issue-63591.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63591.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63591.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63591.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-63591.rs:6:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "bba9ae2d9e70f033b888100c296e9b51e7458ffe", "filename": "src/test/ui/associated-types/issue-63591.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63591.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63591.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63591.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,7 +1,10 @@\n // check-pass\n \n #![feature(associated_type_bounds)]\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "cc61becd71b1f7c6b7f4838afa99a82a06ed9966", "filename": "src/test/ui/async-await/issues/issue-60655-latebound-regions.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-60655-latebound-regions.rs:8:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "f8b6a43896166690c7c3dcec913d7476bf9c846c", "filename": "src/test/ui/async-await/issues/issue-60655-latebound-regions.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -3,7 +3,10 @@\n // check-pass\n // edition:2018\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n use std::future::Future;\n "}, {"sha": "ffe297a5a6a2fa151cdad712ac1c2bf949606af9", "filename": "src/test/ui/feature-gates/feature-gate-min_type_alias_impl_trait.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_type_alias_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_type_alias_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_type_alias_impl_trait.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,50 @@\n+// ignore-compare-mode-chalk\n+use std::fmt::Debug;\n+\n+type Foo = impl Debug; //~ ERROR `impl Trait` in type aliases is unstable\n+\n+trait Bar {\n+    type Baa: Debug;\n+    fn define() -> Self::Baa;\n+}\n+\n+impl Bar for () {\n+    type Baa = impl Debug; //~ ERROR `impl Trait` in type aliases is unstable\n+    fn define() -> Self::Baa {\n+        0\n+    }\n+}\n+\n+fn define() -> Foo {\n+    0\n+}\n+\n+trait TraitWithDefault {\n+    type Assoc = impl Debug;\n+    //~^ ERROR associated type defaults are unstable\n+    //~| ERROR `impl Trait` not allowed outside of function\n+    //~| ERROR `impl Trait` in type aliases is unstable\n+}\n+\n+type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+//~^ ERROR `impl Trait` in type aliases is unstable\n+//~| ERROR `impl Trait` in type aliases is unstable\n+//~| ERROR `impl Trait` in type aliases is unstable\n+//~| ERROR `impl Trait` in type aliases is unstable\n+\n+fn define_multiple() -> NestedFree {\n+    (vec![true], 0u8, 0i32..1)\n+}\n+\n+impl Bar for u8 {\n+    type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n+    //~^ ERROR `impl Trait` in type aliases is unstable\n+    //~| ERROR `impl Trait` in type aliases is unstable\n+    //~| ERROR `impl Trait` in type aliases is unstable\n+    //~| ERROR `impl Trait` in type aliases is unstable\n+    fn define() -> Self::Baa {\n+        (vec![true], 0u8, 0i32..1)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "b82867c67025a398e283e9776b4d5499642bf542", "filename": "src/test/ui/feature-gates/feature-gate-min_type_alias_impl_trait.stderr", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_type_alias_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_type_alias_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_type_alias_impl_trait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,118 @@\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:4:12\n+   |\n+LL | type Foo = impl Debug;\n+   |            ^^^^^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:12:16\n+   |\n+LL |     type Baa = impl Debug;\n+   |                ^^^^^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0658]: associated type defaults are unstable\n+  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:23:5\n+   |\n+LL |     type Assoc = impl Debug;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #29661 <https://github.com/rust-lang/rust/issues/29661> for more information\n+   = help: add `#![feature(associated_type_defaults)]` to the crate attributes to enable\n+\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:23:18\n+   |\n+LL |     type Assoc = impl Debug;\n+   |                  ^^^^^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:29:24\n+   |\n+LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+   |                        ^^^^^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:29:37\n+   |\n+LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+   |                                     ^^^^^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:29:49\n+   |\n+LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:29:70\n+   |\n+LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+   |                                                                      ^^^^^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:40:21\n+   |\n+LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n+   |                     ^^^^^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:40:34\n+   |\n+LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n+   |                                  ^^^^^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:40:46\n+   |\n+LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:40:67\n+   |\n+LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n+   |                                                                   ^^^^^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:23:18\n+   |\n+LL |     type Assoc = impl Debug;\n+   |                  ^^^^^^^^^^\n+\n+error: aborting due to 13 previous errors\n+\n+Some errors have detailed explanations: E0562, E0658.\n+For more information about an error, try `rustc --explain E0562`."}, {"sha": "3b31bc159c0b3ef8bb071bb57793a3bb95db718c", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.rs", "status": "modified", "additions": 22, "deletions": 35, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,50 +1,37 @@\n // ignore-compare-mode-chalk\n+#![feature(min_type_alias_impl_trait)]\n use std::fmt::Debug;\n \n-type Foo = impl Debug; //~ ERROR `impl Trait` in type aliases is unstable\n+type Foo = impl Debug;\n+//~^ ERROR could not find defining uses\n \n-trait Bar {\n-    type Baa: Debug;\n-    fn define() -> Self::Baa;\n+struct Bar(Foo);\n+fn define() -> Bar {\n+    Bar(42) //~ ERROR mismatched types\n }\n \n-impl Bar for () {\n-    type Baa = impl Debug; //~ ERROR `impl Trait` in type aliases is unstable\n-    fn define() -> Self::Baa {\n-        0\n-    }\n-}\n-\n-fn define() -> Foo {\n-    0\n-}\n+type Foo2 = impl Debug;\n \n-trait TraitWithDefault {\n-    type Assoc = impl Debug;\n-    //~^ ERROR associated type defaults are unstable\n-    //~| ERROR `impl Trait` not allowed outside of function\n-    //~| ERROR `impl Trait` in type aliases is unstable\n+fn define2() {\n+    let x = || -> Foo2 { 42 };\n }\n \n-type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n-//~^ ERROR `impl Trait` in type aliases is unstable\n-//~| ERROR `impl Trait` in type aliases is unstable\n-//~| ERROR `impl Trait` in type aliases is unstable\n-//~| ERROR `impl Trait` in type aliases is unstable\n+type Foo3 = impl Debug;\n+//~^ ERROR could not find defining uses\n \n-fn define_multiple() -> NestedFree {\n-    (vec![true], 0u8, 0i32..1)\n+fn define3(x: Foo3) {\n+    let y: i32 = x; //~ ERROR mismatched types\n }\n+fn define3_1() {\n+    define3(42) //~ ERROR mismatched types\n+}\n+\n+type Foo4 = impl Debug;\n+//~^ ERROR could not find defining uses\n \n-impl Bar for u8 {\n-    type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n-    //~^ ERROR `impl Trait` in type aliases is unstable\n-    //~| ERROR `impl Trait` in type aliases is unstable\n-    //~| ERROR `impl Trait` in type aliases is unstable\n-    //~| ERROR `impl Trait` in type aliases is unstable\n-    fn define() -> Self::Baa {\n-        (vec![true], 0u8, 0i32..1)\n-    }\n+fn define4() {\n+    let y: Foo4 = 42;\n+    //~^ ERROR mismatched types\n }\n \n fn main() {}"}, {"sha": "da3ddb1c50979f852528bc26518b9b028dd54c88", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.stderr", "status": "modified", "additions": 54, "deletions": 99, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,118 +1,73 @@\n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:4:12\n+error[E0308]: mismatched types\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:10:9\n    |\n LL | type Foo = impl Debug;\n-   |            ^^^^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:12:16\n-   |\n-LL |     type Baa = impl Debug;\n-   |                ^^^^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error[E0658]: associated type defaults are unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:23:5\n-   |\n-LL |     type Assoc = impl Debug;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ---------- the expected opaque type\n+...\n+LL |     Bar(42)\n+   |         ^^ expected opaque type, found integer\n    |\n-   = note: see issue #29661 <https://github.com/rust-lang/rust/issues/29661> for more information\n-   = help: add `#![feature(associated_type_defaults)]` to the crate attributes to enable\n+   = note: expected opaque type `impl Debug`\n+                     found type `{integer}`\n \n-error[E0658]: `impl Trait` in type aliases is unstable\n+error[E0308]: mismatched types\n   --> $DIR/feature-gate-type_alias_impl_trait.rs:23:18\n    |\n-LL |     type Assoc = impl Debug;\n-   |                  ^^^^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:29:24\n-   |\n-LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n-   |                        ^^^^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:29:37\n-   |\n-LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n-   |                                     ^^^^^^^^^^\n+LL | type Foo3 = impl Debug;\n+   |             ---------- the found opaque type\n+...\n+LL |     let y: i32 = x;\n+   |            ---   ^ expected `i32`, found opaque type\n+   |            |\n+   |            expected due to this\n    |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+   = note:     expected type `i32`\n+           found opaque type `impl Debug`\n \n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:29:49\n+error[E0308]: mismatched types\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:26:13\n    |\n-LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n-   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type Foo3 = impl Debug;\n+   |             ---------- the expected opaque type\n+...\n+LL |     define3(42)\n+   |             ^^ expected opaque type, found integer\n    |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+   = note: expected opaque type `impl Debug`\n+                     found type `{integer}`\n \n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:29:70\n-   |\n-LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n-   |                                                                      ^^^^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+error[E0308]: mismatched types\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:33:19\n+   |\n+LL | type Foo4 = impl Debug;\n+   |             ---------- the expected opaque type\n+...\n+LL |     let y: Foo4 = 42;\n+   |            ----   ^^ expected opaque type, found integer\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected opaque type `impl Debug`\n+                     found type `{integer}`\n \n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:40:21\n+error: could not find defining uses\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:5:12\n    |\n-LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n-   |                     ^^^^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:40:34\n-   |\n-LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n-   |                                  ^^^^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:40:46\n-   |\n-LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+LL | type Foo = impl Debug;\n+   |            ^^^^^^^^^^\n \n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:40:67\n-   |\n-LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n-   |                                                                   ^^^^^^^^^^\n+error: could not find defining uses\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:19:13\n    |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+LL | type Foo3 = impl Debug;\n+   |             ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:23:18\n+error: could not find defining uses\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:29:13\n    |\n-LL |     type Assoc = impl Debug;\n-   |                  ^^^^^^^^^^\n+LL | type Foo4 = impl Debug;\n+   |             ^^^^^^^^^^\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 7 previous errors\n \n-Some errors have detailed explanations: E0562, E0658.\n-For more information about an error, try `rustc --explain E0562`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "805a4d1d000cd86f22ff693518825d10de7924ca", "filename": "src/test/ui/generator/layout-error.full_tait.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,26 @@\n+error[E0425]: cannot find value `Foo` in this scope\n+  --> $DIR/layout-error.rs:25:17\n+   |\n+LL |         let a = Foo;\n+   |                 ^^^ not found in this scope\n+\n+warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/layout-error.rs:8:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/layout-error.rs:8:56\n+   |\n+LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n+   |                                                        ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: aborting due to previous error; 2 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "1be39856883673387e7a05da96bb2994fb02e870", "filename": "src/test/ui/generator/layout-error.min_tait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error[E0425]: cannot find value `Foo` in this scope\n-  --> $DIR/layout-error.rs:21:17\n+  --> $DIR/layout-error.rs:25:17\n    |\n LL |         let a = Foo;\n    |                 ^^^ not found in this scope", "previous_filename": "src/test/ui/generator/layout-error.stderr"}, {"sha": "549c6f6ebe75eead460e31ded2507c05ae21f651", "filename": "src/test/ui/generator/layout-error.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -3,7 +3,11 @@\n //\n // edition:2018\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n+//[full_tait]~| WARN incomplete\n use std::future::Future;\n \n pub struct Task<F: Future>(F);"}, {"sha": "59cd8e04513fb4170307e1570a5da27ad8e8e38d", "filename": "src/test/ui/generator/metadata-sufficient-for-layout.full_tait.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,19 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/metadata-sufficient-for-layout.rs:11:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/metadata-sufficient-for-layout.rs:11:55\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "7d474c82eefc090284fb097300e58c06c8def4a8", "filename": "src/test/ui/generator/metadata-sufficient-for-layout.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -6,7 +6,11 @@\n // aux-build:metadata-sufficient-for-layout.rs\n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+//[full_tait]~^ WARN incomplete\n+//[full_tait]~| WARN incomplete\n #![feature(generator_trait)]\n \n extern crate metadata_sufficient_for_layout;"}, {"sha": "174c4c62da92ed94d5d485221a165bb2bfd851f7", "filename": "src/test/ui/impl-trait/associated-impl-trait-type-generic-trait.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/associated-impl-trait-type-generic-trait.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "b2dad596ffa9c46f504539b7865b664b89d96851", "filename": "src/test/ui/impl-trait/associated-impl-trait-type-generic-trait.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}"}, {"sha": "e3dd4a60b4df7e9dd5e7f5cb50f9130539ea8583", "filename": "src/test/ui/impl-trait/associated-impl-trait-type-trivial.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/associated-impl-trait-type-trivial.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "c101ba229483047c05fd9082939be6bb6881a703", "filename": "src/test/ui/impl-trait/associated-impl-trait-type-trivial.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}"}, {"sha": "39147b00a346e800895019f38f01f7fda9b7b81b", "filename": "src/test/ui/impl-trait/associated-impl-trait-type.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/associated-impl-trait-type.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "5c28eba2261fc6e58251450d4598136d16e30cb8", "filename": "src/test/ui/impl-trait/associated-impl-trait-type.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}"}, {"sha": "7ac08ab492129b4e31075addb1ea09780c751a65", "filename": "src/test/ui/impl-trait/auto-trait.full_tait.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,21 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/auto-trait.rs:5:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`:\n+  --> $DIR/auto-trait.rs:24:1\n+   |\n+LL | impl<T: Send> AnotherTrait for T {}\n+   | -------------------------------- first implementation here\n+...\n+LL | impl AnotherTrait for D<OpaqueType> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<impl OpaqueTrait>`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "a497dd67e9e088b9ed28321dd2fbb41f878bc00d", "filename": "src/test/ui/impl-trait/auto-trait.min_tait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`:\n-  --> $DIR/auto-trait.rs:21:1\n+  --> $DIR/auto-trait.rs:24:1\n    |\n LL | impl<T: Send> AnotherTrait for T {}\n    | -------------------------------- first implementation here", "previous_filename": "src/test/ui/impl-trait/auto-trait.stderr"}, {"sha": "c965a34c12b32baa338cf2410afdd3aa732dd1f3", "filename": "src/test/ui/impl-trait/auto-trait.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,6 +1,9 @@\n // Tests that type alias impls traits do not leak auto-traits for\n // the purposes of coherence checking\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n trait OpaqueTrait {}\n impl<T> OpaqueTrait for T {}"}, {"sha": "6a01753b4c29caafad20bfc95700a511a56e4359", "filename": "src/test/ui/impl-trait/bound-normalization-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -4,7 +4,7 @@\n //[sa] compile-flags: -Z save-analysis\n //-^ To make this the regression test for #75962.\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(min_type_alias_impl_trait)]\n #![feature(impl_trait_in_bindings)]\n //~^ WARNING the feature `impl_trait_in_bindings` is incomplete\n "}, {"sha": "5195333884a836703d572bb0923386300f1f506b", "filename": "src/test/ui/impl-trait/issue-55872-1.full_tait.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,57 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-55872-1.rs:4:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/issue-55872-1.rs:18:5\n+   |\n+LL |     fn foo<T>() -> Self::E;\n+   |     ----------------------- definition of `foo` from trait\n+...\n+LL |     fn foo<T: Default>() -> Self::E {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Default`\n+\n+error[E0277]: the trait bound `S: Copy` is not satisfied in `(S, T)`\n+  --> $DIR/issue-55872-1.rs:14:14\n+   |\n+LL |     type E = impl Copy;\n+   |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `S`\n+   |\n+   = note: required because it appears within the type `(S, T)`\n+help: consider further restricting this bound\n+   |\n+LL | impl<S: Default + Copy> Bar for S {\n+   |                 ^^^^^^\n+\n+error[E0277]: the trait bound `T: Copy` is not satisfied in `(S, T)`\n+  --> $DIR/issue-55872-1.rs:14:14\n+   |\n+LL |     type E = impl Copy;\n+   |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `T`\n+   |\n+   = note: required because it appears within the type `(S, T)`\n+help: consider further restricting this bound\n+   |\n+LL |     fn foo<T: Default + Copy>() -> Self::E {\n+   |                       ^^^^^^\n+\n+error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+  --> $DIR/issue-55872-1.rs:18:37\n+   |\n+LL |       fn foo<T: Default>() -> Self::E {\n+   |  _____________________________________^\n+LL | |\n+LL | |\n+LL | |         (S::default(), T::default())\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to 4 previous errors; 1 warning emitted\n+\n+Some errors have detailed explanations: E0276, E0277.\n+For more information about an error, try `rustc --explain E0276`."}, {"sha": "26fc200c2a2d5240e1a8196958d67391f6629784", "filename": "src/test/ui/impl-trait/issue-55872-1.min_tait.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/issue-55872-1.rs:15:5\n+  --> $DIR/issue-55872-1.rs:18:5\n    |\n LL |     fn foo<T>() -> Self::E;\n    |     ----------------------- definition of `foo` from trait\n@@ -8,7 +8,7 @@ LL |     fn foo<T: Default>() -> Self::E {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Default`\n \n error[E0277]: the trait bound `S: Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:11:14\n+  --> $DIR/issue-55872-1.rs:14:14\n    |\n LL |     type E = impl Copy;\n    |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `S`\n@@ -20,7 +20,7 @@ LL | impl<S: Default + Copy> Bar for S {\n    |                 ^^^^^^\n \n error[E0277]: the trait bound `T: Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:11:14\n+  --> $DIR/issue-55872-1.rs:14:14\n    |\n LL |     type E = impl Copy;\n    |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `T`\n@@ -32,7 +32,7 @@ LL |     fn foo<T: Default + Copy>() -> Self::E {\n    |                       ^^^^^^\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-1.rs:15:37\n+  --> $DIR/issue-55872-1.rs:18:37\n    |\n LL |       fn foo<T: Default>() -> Self::E {\n    |  _____________________________________^", "previous_filename": "src/test/ui/impl-trait/issue-55872-1.stderr"}, {"sha": "e5e437cd84b6df3c3dbd22d6531a4bb1052a577c", "filename": "src/test/ui/impl-trait/issue-55872-1.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,8 @@\n // ignore-tidy-linelength\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n pub trait Bar {\n     type E: Copy;"}, {"sha": "14a5c0ba97e331fd4544f9d7e6b334c1c8045e44", "filename": "src/test/ui/impl-trait/issue-55872-2.full_tait.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,28 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-55872-2.rs:7:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0277]: the trait bound `impl Future: Copy` is not satisfied\n+  --> $DIR/issue-55872-2.rs:17:14\n+   |\n+LL |     type E = impl std::marker::Copy;\n+   |              ^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future`\n+\n+error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+  --> $DIR/issue-55872-2.rs:19:28\n+   |\n+LL |       fn foo<T>() -> Self::E {\n+   |  ____________________________^\n+LL | |\n+LL | |         async {}\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c8df502345a3543e9e37b32d996343296cb15dd6", "filename": "src/test/ui/impl-trait/issue-55872-2.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `impl Future: Copy` is not satisfied\n-  --> $DIR/issue-55872-2.rs:14:14\n+  --> $DIR/issue-55872-2.rs:17:14\n    |\n LL |     type E = impl std::marker::Copy;\n    |              ^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future`\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-2.rs:16:28\n+  --> $DIR/issue-55872-2.rs:19:28\n    |\n LL |       fn foo<T>() -> Self::E {\n    |  ____________________________^", "previous_filename": "src/test/ui/impl-trait/issue-55872-2.stderr"}, {"sha": "9c2e9b860c4b0dbcc1820277679afb9e4c990751", "filename": "src/test/ui/impl-trait/issue-55872-2.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -2,7 +2,10 @@\n // ignore-tidy-linelength\n // ignore-compare-mode-chalk\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n pub trait Bar {\n     type E: Copy;\n@@ -14,7 +17,7 @@ impl<S> Bar for S {\n     type E = impl std::marker::Copy;\n     //~^ ERROR the trait bound `impl Future: Copy` is not satisfied [E0277]\n     fn foo<T>() -> Self::E {\n-    //~^ ERROR type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+        //~^ ERROR type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n         async {}\n     }\n }"}, {"sha": "5a35689a7372a9cb6cd0954eb02be188e9c69d6d", "filename": "src/test/ui/impl-trait/issue-55872.full_tait.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,21 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-55872.rs:5:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+  --> $DIR/issue-55872.rs:17:28\n+   |\n+LL |       fn foo<T>() -> Self::E {\n+   |  ____________________________^\n+LL | |\n+LL | |         || ()\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "9baf2834643838c897cfff69d6cf79bcddd67e11", "filename": "src/test/ui/impl-trait/issue-55872.min_tait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872.rs:14:28\n+  --> $DIR/issue-55872.rs:17:28\n    |\n LL |       fn foo<T>() -> Self::E {\n    |  ____________________________^", "previous_filename": "src/test/ui/impl-trait/issue-55872.stderr"}, {"sha": "9a31cf521b3820d995874522a2cf8b3a5ca378ec", "filename": "src/test/ui/impl-trait/issue-55872.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,6 +1,9 @@\n // ignore-tidy-linelength\n // ignore-compare-mode-chalk\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n pub trait Bar {\n     type E: Copy;"}, {"sha": "906578c291f16f60ddb7d51cbc955a4e8a9cd02b", "filename": "src/test/ui/impl-trait/issues/issue-53457.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-53457.rs:5:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "c44e7f01f25d0598494fff28719bfd33d9506d08", "filename": "src/test/ui/impl-trait/issues/issue-53457.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,6 +1,9 @@\n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n type X = impl Clone;\n "}, {"sha": "bd4d4fdf2a6b4a7c51d66d9c124bc53048e314e9", "filename": "src/test/ui/impl-trait/issues/issue-70877.full_tait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error[E0271]: type mismatch resolving `<Bar as Iterator>::Item == Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n-  --> $DIR/issue-70877.rs:9:12\n+  --> $DIR/issue-70877.rs:11:12\n    |\n LL | type FooRet = impl std::fmt::Debug;\n    |               -------------------- the expected opaque type", "previous_filename": "src/test/ui/impl-trait/issues/issue-70877.stderr"}, {"sha": "bd4d4fdf2a6b4a7c51d66d9c124bc53048e314e9", "filename": "src/test/ui/impl-trait/issues/issue-70877.min_tait.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,15 @@\n+error[E0271]: type mismatch resolving `<Bar as Iterator>::Item == Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n+  --> $DIR/issue-70877.rs:11:12\n+   |\n+LL | type FooRet = impl std::fmt::Debug;\n+   |               -------------------- the expected opaque type\n+...\n+LL | type Foo = impl Iterator<Item = FooItem>;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected opaque type, found enum `Option`\n+   |\n+   = note: expected struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> impl Debug + 'static)>`\n+              found struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "7ca0f90e2dced687a3fbda9124f686e0e365059d", "filename": "src/test/ui/impl-trait/issues/issue-70877.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,6 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n #![feature(impl_trait_in_bindings)]\n #![allow(incomplete_features)]\n "}, {"sha": "d7327aa46bcef82b076884caca2cbe871292f306", "filename": "src/test/ui/impl-trait/issues/issue-78722.full_tait.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,35 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-78722.rs:5:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-78722.rs:7:12\n+   |\n+LL | #![feature(impl_trait_in_bindings)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+\n+error: `async` blocks are not allowed in constants\n+  --> $DIR/issue-78722.rs:17:20\n+   |\n+LL |         let f: F = async { 1 };\n+   |                    ^^^^^^^^^^^\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/issue-78722.rs:17:13\n+   |\n+LL |         let f: F = async { 1 };\n+   |             ^ constants cannot evaluate destructors\n+...\n+LL |     }],\n+   |     - value is dropped here\n+\n+error: aborting due to 2 previous errors; 2 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0493`."}, {"sha": "01ec71e7a5053eef421c8d5fe6f96c0a562003fc", "filename": "src/test/ui/impl-trait/issues/issue-78722.min_tait.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-78722.rs:4:12\n+  --> $DIR/issue-78722.rs:7:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,13 +8,13 @@ LL | #![feature(impl_trait_in_bindings)]\n    = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n error: `async` blocks are not allowed in constants\n-  --> $DIR/issue-78722.rs:14:20\n+  --> $DIR/issue-78722.rs:17:20\n    |\n LL |         let f: F = async { 1 };\n    |                    ^^^^^^^^^^^\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/issue-78722.rs:14:13\n+  --> $DIR/issue-78722.rs:17:13\n    |\n LL |         let f: F = async { 1 };\n    |             ^ constants cannot evaluate destructors", "previous_filename": "src/test/ui/impl-trait/issues/issue-78722.stderr"}, {"sha": "0999ec63e032c5cd4dec5a5d08033e579152b6fd", "filename": "src/test/ui/impl-trait/issues/issue-78722.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,6 +1,9 @@\n // edition:2018\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n #![feature(impl_trait_in_bindings)]\n //~^ WARN the feature `impl_trait_in_bindings` is incomplete\n "}, {"sha": "b2ebc7230b945ecd2bd70544b7536b2b0dd78f38", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling-2.full_tait.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,24 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/error-handling-2.rs:6:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/error-handling-2.rs:16:60\n+   |\n+LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n+   |                                                            ^^^^^^^^^\n+   |\n+note: hidden type `*mut &'a i32` captures the lifetime `'a` as defined on the function body at 16:8\n+  --> $DIR/error-handling-2.rs:16:8\n+   |\n+LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n+   |        ^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "53745c290d03d178bd14dcc7d3beab8a650c248a", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling-2.min_tait.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/error-handling-2.rs:13:60\n+  --> $DIR/error-handling-2.rs:16:60\n    |\n LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |                                                            ^^^^^^^^^\n    |\n-note: hidden type `*mut &'a i32` captures the lifetime `'a` as defined on the function body at 13:8\n-  --> $DIR/error-handling-2.rs:13:8\n+note: hidden type `*mut &'a i32` captures the lifetime `'a` as defined on the function body at 16:8\n+  --> $DIR/error-handling-2.rs:16:8\n    |\n LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |        ^^", "previous_filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling-2.stderr"}, {"sha": "196ddf9b8e4ab2a3fa91e03be34b0b98800fad73", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling-2.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,7 +1,10 @@\n // compile-flags:-Zborrowck=mir\n \n #![feature(member_constraints)]\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n #[derive(Clone)]\n struct CopyIfEq<T, U>(T, U);"}, {"sha": "d7a9e5463b358da3bcd2a9e4842d89cbc0b5939e", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.full_tait.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,24 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/error-handling.rs:6:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: lifetime may not live long enough\n+  --> $DIR/error-handling.rs:26:16\n+   |\n+LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n+   |        --  -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+...\n+LL |         let _: &'b i32 = *u.0;\n+   |                ^^^^^^^ type annotation requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "e2d745cdec804f4a5f5e1293686e9b4ca17f7a23", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.min_tait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/error-handling.rs:23:16\n+  --> $DIR/error-handling.rs:26:16\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |        --  -- lifetime `'b` defined here", "previous_filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.stderr"}, {"sha": "b5adabb7abd22390c481bd3de86cb9dc019f5383", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,7 +1,10 @@\n // compile-flags:-Zborrowck=mir\n \n #![feature(member_constraints)]\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n #[derive(Clone)]\n struct CopyIfEq<T, U>(T, U);"}, {"sha": "9d345502aab4d0c093d1c30610eff035be71b18c", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-type-alias-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-type-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-type-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-type-alias-impl-trait.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -4,8 +4,7 @@\n //[mir]compile-flags: -Z borrowck=mir\n \n #![feature(member_constraints)]\n-#![feature(type_alias_impl_trait)]\n-\n+#![feature(min_type_alias_impl_trait)]\n trait Trait<'a, 'b> { }\n impl<T> Trait<'_, '_> for T { }\n "}, {"sha": "2611205893f48e543474ba10bdf06e290209b347", "filename": "src/test/ui/impl-trait/negative-reasoning.full_tait.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/negative-reasoning.rs:5:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`:\n+  --> $DIR/negative-reasoning.rs:22:1\n+   |\n+LL | impl<T: std::fmt::Debug> AnotherTrait for T {}\n+   | ------------------------------------------- first implementation here\n+...\n+LL | impl AnotherTrait for D<OpaqueType> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<impl OpaqueTrait>`\n+   |\n+   = note: upstream crates may add a new impl of trait `std::fmt::Debug` for type `impl OpaqueTrait` in future versions\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "bd74b56fecc1054dca29f05780f0343135772591", "filename": "src/test/ui/impl-trait/negative-reasoning.min_tait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`:\n-  --> $DIR/negative-reasoning.rs:19:1\n+  --> $DIR/negative-reasoning.rs:22:1\n    |\n LL | impl<T: std::fmt::Debug> AnotherTrait for T {}\n    | ------------------------------------------- first implementation here", "previous_filename": "src/test/ui/impl-trait/negative-reasoning.stderr"}, {"sha": "7f608cc99db15c0d048fd2e4afb899e15da9c759", "filename": "src/test/ui/impl-trait/negative-reasoning.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,6 +1,9 @@\n // Tests that we cannot assume that an opaque type does *not* implement some\n // other trait\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n trait OpaqueTrait {}\n impl<T> OpaqueTrait for T {}"}, {"sha": "965e3e4887bb25a15e92122a37a69b3b9ac0b0dd", "filename": "src/test/ui/impl-trait/type-alias-generic-param.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/type-alias-generic-param.rs:8:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "733e10e56f88e75f93534754aa2c0dde93cf71af", "filename": "src/test/ui/impl-trait/type-alias-generic-param.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -3,7 +3,10 @@\n // types in 'item' position when generic parameters are involved\n //\n // run-pass\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n trait Meow {\n     type MeowType;"}, {"sha": "ec939e5718a949ea693b52aa8c389f2f928f1ad1", "filename": "src/test/ui/impl-trait/type-alias-impl-trait-in-fn-body.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-impl-trait-in-fn-body.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-impl-trait-in-fn-body.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-impl-trait-in-fn-body.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/type-alias-impl-trait-in-fn-body.rs:5:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "32ca4af3043484c766438588326f28318ecb4d83", "filename": "src/test/ui/impl-trait/type-alias-impl-trait-in-fn-body.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-impl-trait-in-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-impl-trait-in-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-impl-trait-in-fn-body.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,6 +1,9 @@\n // build-pass (FIXME(62277): could be check-pass?)\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "3fdeddc0a86eb4ec3b9ff00f2d08db7c193ee9c1", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -23,7 +23,7 @@ LL |     type Out = impl Debug;\n    |                ^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n   --> $DIR/where-allowed.rs:157:23\n@@ -32,7 +32,7 @@ LL | type InTypeAlias<R> = impl Debug;\n    |                       ^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n   --> $DIR/where-allowed.rs:161:39\n@@ -41,7 +41,7 @@ LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:15:40"}, {"sha": "a448f85b7625dcdeb3eebe1424ae62620ccf2155", "filename": "src/test/ui/issues/issue-60662.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fissues%2Fissue-60662.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fissues%2Fissue-60662.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60662.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-60662.rs:6:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "9ee4434d559592c4d999be076f450e7b3476442f", "filename": "src/test/ui/issues/issue-60662.full_tait.stdout", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fissues%2Fissue-60662.full_tait.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fissues%2Fissue-60662.full_tait.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60662.full_tait.stdout?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,6 +1,8 @@\n // check-pass\n // compile-flags: -Z unpretty=hir\n \n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n #![feature(type_alias_impl_trait)]\n #[prelude_import]\n use ::std::prelude::rust_2015::*;", "previous_filename": "src/test/ui/issues/issue-60662.stdout"}, {"sha": "d0db578f57091894d9f9b7a682cdbd94da28ca89", "filename": "src/test/ui/issues/issue-60662.min_tait.stdout", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fissues%2Fissue-60662.min_tait.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fissues%2Fissue-60662.min_tait.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60662.min_tait.stdout?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+// compile-flags: -Z unpretty=hir\n+\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#[prelude_import]\n+use ::std::prelude::rust_2015::*;\n+#[macro_use]\n+extern crate std;\n+\n+trait Animal { }\n+\n+fn main() {\n+              pub type ServeFut = /*impl Trait*/;\n+          }"}, {"sha": "1320d2bbe93d064c69f3a4fa540b6ae2920c4ddb", "filename": "src/test/ui/issues/issue-60662.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fissues%2Fissue-60662.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fissues%2Fissue-60662.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60662.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,7 +1,10 @@\n // check-pass\n // compile-flags: -Z unpretty=hir\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n trait Animal {\n }"}, {"sha": "317955f0e39dd3e95c3bb3b1b4d86abfff2f26b7", "filename": "src/test/ui/layout/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flayout%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flayout%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fdebug.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n // normalize-stderr-test \"pref: Align \\{\\n *pow2: [1-3],\\n *\\}\" -> \"pref: $$PREF_ALIGN\"\n-#![feature(never_type, rustc_attrs, type_alias_impl_trait)]\n+#![feature(never_type, rustc_attrs, min_type_alias_impl_trait)]\n #![crate_type = \"lib\"]\n \n #[rustc_layout(debug)]"}, {"sha": "4c58537e309ea5ac50ec82b3226c07596d97e46f", "filename": "src/test/ui/layout/hexagon-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -4,7 +4,7 @@\n // Verify that the hexagon targets implement the repr(C) for enums correctly.\n //\n // See #82100\n-#![feature(never_type, rustc_attrs, type_alias_impl_trait, no_core, lang_items)]\n+#![feature(never_type, rustc_attrs, no_core, lang_items)]\n #![crate_type = \"lib\"]\n #![no_core]\n "}, {"sha": "65b4631010f20eafed7bc4bb7e3b0828ef082452", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.full_tait.stderr", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,81 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/inline-trait-and-foreign-items.rs:4:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: `#[inline]` is ignored on constants\n+  --> $DIR/inline-trait-and-foreign-items.rs:10:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/inline-trait-and-foreign-items.rs:7:9\n+   |\n+LL | #![warn(unused_attributes)]\n+   |         ^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: see issue #65833 <https://github.com/rust-lang/rust/issues/65833> for more information\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/inline-trait-and-foreign-items.rs:14:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+LL |     type T;\n+   |     ------- not a function or closure\n+\n+warning: `#[inline]` is ignored on constants\n+  --> $DIR/inline-trait-and-foreign-items.rs:21:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: see issue #65833 <https://github.com/rust-lang/rust/issues/65833> for more information\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/inline-trait-and-foreign-items.rs:25:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+LL |     type T = Self;\n+   |     -------------- not a function or closure\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/inline-trait-and-foreign-items.rs:28:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+LL |     type U = impl Trait;\n+   |     -------------------- not a function or closure\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/inline-trait-and-foreign-items.rs:33:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+LL |     static X: u32;\n+   |     -------------- not a function or closure\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/inline-trait-and-foreign-items.rs:36:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+LL |     type T;\n+   |     ------- not a function or closure\n+\n+error: could not find defining uses\n+  --> $DIR/inline-trait-and-foreign-items.rs:29:14\n+   |\n+LL |     type U = impl Trait;\n+   |              ^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors; 3 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0518`."}, {"sha": "b9f123905a70cf310dc05e0e0024fe7f7111f9ef", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.min_tait.stderr", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,27 +1,27 @@\n warning: `#[inline]` is ignored on constants\n-  --> $DIR/inline-trait-and-foreign-items.rs:7:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:10:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/inline-trait-and-foreign-items.rs:4:9\n+  --> $DIR/inline-trait-and-foreign-items.rs:7:9\n    |\n LL | #![warn(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: see issue #65833 <https://github.com/rust-lang/rust/issues/65833> for more information\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:11:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:14:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n LL |     type T;\n    |     ------- not a function or closure\n \n warning: `#[inline]` is ignored on constants\n-  --> $DIR/inline-trait-and-foreign-items.rs:18:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:21:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n@@ -30,39 +30,39 @@ LL |     #[inline]\n    = note: see issue #65833 <https://github.com/rust-lang/rust/issues/65833> for more information\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:22:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:25:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n LL |     type T = Self;\n    |     -------------- not a function or closure\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:25:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:28:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n LL |     type U = impl Trait;\n    |     -------------------- not a function or closure\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:30:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:33:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n LL |     static X: u32;\n    |     -------------- not a function or closure\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:33:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:36:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n LL |     type T;\n    |     ------- not a function or closure\n \n error: could not find defining uses\n-  --> $DIR/inline-trait-and-foreign-items.rs:26:14\n+  --> $DIR/inline-trait-and-foreign-items.rs:29:14\n    |\n LL |     type U = impl Trait;\n    |              ^^^^^^^^^^", "previous_filename": "src/test/ui/lint/inline-trait-and-foreign-items.stderr"}, {"sha": "3103cc9d31dc86a238e8481e0ed1cd6391222c8a", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,8 @@\n #![feature(extern_types)]\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n #![warn(unused_attributes)]\n "}, {"sha": "619ca15839b39765f38269c1f439b19ed5c7c72c", "filename": "src/test/ui/lint/lint-ctypes-73249-2.full_tait.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,24 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/lint-ctypes-73249-2.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: `extern` block uses type `impl Baz`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-73249-2.rs:29:25\n+   |\n+LL |     pub fn lint_me() -> A<()>;\n+   |                         ^^^^^ not FFI-safe\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-ctypes-73249-2.rs:5:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: opaque types have no C equivalent\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "479bd5744735fb331645c9c4ca63810560fa8cca", "filename": "src/test/ui/lint/lint-ctypes-73249-2.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73249-2.rs:26:25\n+  --> $DIR/lint-ctypes-73249-2.rs:29:25\n    |\n LL |     pub fn lint_me() -> A<()>;\n    |                         ^^^^^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73249-2.rs:2:9\n+  --> $DIR/lint-ctypes-73249-2.rs:5:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/lint/lint-ctypes-73249-2.stderr"}, {"sha": "f3313f892175b7b59c48c1cc7a10cf1d790d126a", "filename": "src/test/ui/lint/lint-ctypes-73249-2.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n #![deny(improper_ctypes)]\n \n pub trait Baz { }"}, {"sha": "af0f26a9f43e6f7f610412eab2f3c6910f8023ff", "filename": "src/test/ui/lint/lint-ctypes-73249-3.full_tait.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,24 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/lint-ctypes-73249-3.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: `extern` block uses type `impl Baz`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-73249-3.rs:21:25\n+   |\n+LL |     pub fn lint_me() -> A;\n+   |                         ^ not FFI-safe\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-ctypes-73249-3.rs:5:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: opaque types have no C equivalent\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "880581ff05d227c43d4b58508477988a5090bb93", "filename": "src/test/ui/lint/lint-ctypes-73249-3.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73249-3.rs:18:25\n+  --> $DIR/lint-ctypes-73249-3.rs:21:25\n    |\n LL |     pub fn lint_me() -> A;\n    |                         ^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73249-3.rs:2:9\n+  --> $DIR/lint-ctypes-73249-3.rs:5:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/lint/lint-ctypes-73249-3.stderr"}, {"sha": "966c7d5ce3cb65bfe298b686d480a7f33f021c5b", "filename": "src/test/ui/lint/lint-ctypes-73249-3.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n #![deny(improper_ctypes)]\n \n pub trait Baz { }"}, {"sha": "b80084fce068c3b13159bb36698eb879510c436c", "filename": "src/test/ui/lint/lint-ctypes-73249-5.full_tait.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,24 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/lint-ctypes-73249-5.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: `extern` block uses type `impl Baz`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-73249-5.rs:21:25\n+   |\n+LL |     pub fn lint_me() -> A;\n+   |                         ^ not FFI-safe\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-ctypes-73249-5.rs:5:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: opaque types have no C equivalent\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "f42549d9096565ea729f4229a82e355ce2fbb29b", "filename": "src/test/ui/lint/lint-ctypes-73249-5.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73249-5.rs:18:25\n+  --> $DIR/lint-ctypes-73249-5.rs:21:25\n    |\n LL |     pub fn lint_me() -> A;\n    |                         ^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73249-5.rs:2:9\n+  --> $DIR/lint-ctypes-73249-5.rs:5:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/lint/lint-ctypes-73249-5.stderr"}, {"sha": "81979a9b6e6965cc577b68fcdf9fbc3c0bb51bf6", "filename": "src/test/ui/lint/lint-ctypes-73249-5.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n #![deny(improper_ctypes)]\n \n pub trait Baz { }"}, {"sha": "5610230380b8019cc4d34bdb3f9dd5dbfe12a62e", "filename": "src/test/ui/lint/lint-ctypes-73251-1.full_tait.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,24 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/lint-ctypes-73251-1.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: `extern` block uses type `impl Baz`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-73251-1.rs:24:25\n+   |\n+LL |     pub fn lint_me() -> <u32 as Foo>::Assoc;\n+   |                         ^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-ctypes-73251-1.rs:5:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: opaque types have no C equivalent\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "5b00fc4cce657b2dbd9eb6b348480cef79dc05f2", "filename": "src/test/ui/lint/lint-ctypes-73251-1.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73251-1.rs:21:25\n+  --> $DIR/lint-ctypes-73251-1.rs:24:25\n    |\n LL |     pub fn lint_me() -> <u32 as Foo>::Assoc;\n    |                         ^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73251-1.rs:2:9\n+  --> $DIR/lint-ctypes-73251-1.rs:5:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/lint/lint-ctypes-73251-1.stderr"}, {"sha": "3f15a2fb42c424f7c43da61d1d05ffd5773b6700", "filename": "src/test/ui/lint/lint-ctypes-73251-1.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n #![deny(improper_ctypes)]\n \n pub trait Baz { }"}, {"sha": "19911264a36d7fa48908d681c4b9f5777ea040fd", "filename": "src/test/ui/lint/lint-ctypes-73251-2.full_tait.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,24 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/lint-ctypes-73251-2.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: `extern` block uses type `impl TraitA`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-73251-2.rs:32:25\n+   |\n+LL |     pub fn lint_me() -> <AliasB as TraitB>::Assoc;\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-ctypes-73251-2.rs:5:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: opaque types have no C equivalent\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "4130ee7b4cb6b8abcbf917bbbe0cecd148840164", "filename": "src/test/ui/lint/lint-ctypes-73251-2.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error: `extern` block uses type `impl TraitA`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73251-2.rs:29:25\n+  --> $DIR/lint-ctypes-73251-2.rs:32:25\n    |\n LL |     pub fn lint_me() -> <AliasB as TraitB>::Assoc;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73251-2.rs:2:9\n+  --> $DIR/lint-ctypes-73251-2.rs:5:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/lint/lint-ctypes-73251-2.stderr"}, {"sha": "888671daca5e4164da42087e5fae24ee2166f4d8", "filename": "src/test/ui/lint/lint-ctypes-73251-2.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n #![deny(improper_ctypes)]\n \n pub trait TraitA {"}, {"sha": "577cf6cf5453c5d798b6bca2f18e5eda54cb89b9", "filename": "src/test/ui/lint/lint-ctypes-73251.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/lint-ctypes-73251.rs:5:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "36e541612d16bbd8b66427b423f37f267028992b", "filename": "src/test/ui/lint/lint-ctypes-73251.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,6 +1,9 @@\n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n #![deny(improper_ctypes)]\n \n pub trait Foo {"}, {"sha": "5433d6e6ae2412fa82d01219fa6ad4e0d8a484c4", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.full_tait.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,24 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/opaque-ty-ffi-unsafe.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: `extern` block uses type `impl Fn<()>`, which is not FFI-safe\n+  --> $DIR/opaque-ty-ffi-unsafe.rs:14:17\n+   |\n+LL |     pub fn a(_: A);\n+   |                 ^ not FFI-safe\n+   |\n+note: the lint level is defined here\n+  --> $DIR/opaque-ty-ffi-unsafe.rs:5:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: opaque types have no C equivalent\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "2f20912d2a6ead8562024de70c0a19901b6313cb", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error: `extern` block uses type `impl Fn<()>`, which is not FFI-safe\n-  --> $DIR/opaque-ty-ffi-unsafe.rs:11:17\n+  --> $DIR/opaque-ty-ffi-unsafe.rs:14:17\n    |\n LL |     pub fn a(_: A);\n    |                 ^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/opaque-ty-ffi-unsafe.rs:2:9\n+  --> $DIR/opaque-ty-ffi-unsafe.rs:5:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.stderr"}, {"sha": "0e9df9195523a14dd58e7e2395539bb2592131fc", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n #![deny(improper_ctypes)]\n \n type A = impl Fn();"}, {"sha": "d3d1002cd628de1f64bd2af090fb34abcb8c6b82", "filename": "src/test/ui/mir/issue-75053.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: -Z mir-opt-level=3\n // build-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(min_type_alias_impl_trait)]\n \n use std::marker::PhantomData;\n "}, {"sha": "a74c7c93a2eb5bbddf24c02af4bd9ebd8e35d972", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.full_tait.stderr", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,77 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/private-in-public-assoc-ty.rs:7:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0446]: private type `Priv` in public interface\n+  --> $DIR/private-in-public-assoc-ty.rs:20:9\n+   |\n+LL |     struct Priv;\n+   |     ------------ `Priv` declared as private\n+...\n+LL |         type A = Priv;\n+   |         ^^^^^^^^^^^^^^ can't leak private type\n+\n+warning: private trait `PrivTr` in public interface (error E0445)\n+  --> $DIR/private-in-public-assoc-ty.rs:27:9\n+   |\n+LL |         type Alias1: PrivTr;\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(private_in_public)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n+\n+warning: private type `Priv` in public interface (error E0446)\n+  --> $DIR/private-in-public-assoc-ty.rs:30:9\n+   |\n+LL |         type Alias2: PubTrAux1<Priv> = u8;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n+\n+warning: private type `Priv` in public interface (error E0446)\n+  --> $DIR/private-in-public-assoc-ty.rs:33:9\n+   |\n+LL |         type Alias3: PubTrAux2<A = Priv> = u8;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n+\n+error[E0446]: private type `Priv` in public interface\n+  --> $DIR/private-in-public-assoc-ty.rs:37:9\n+   |\n+LL |     struct Priv;\n+   |     ------------ `Priv` declared as private\n+...\n+LL |         type Alias4 = Priv;\n+   |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n+\n+error[E0446]: private type `Priv` in public interface\n+  --> $DIR/private-in-public-assoc-ty.rs:44:9\n+   |\n+LL |     struct Priv;\n+   |     ------------ `Priv` declared as private\n+...\n+LL |         type Alias1 = Priv;\n+   |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n+\n+error[E0445]: private trait `PrivTr` in public interface\n+  --> $DIR/private-in-public-assoc-ty.rs:47:9\n+   |\n+LL |     trait PrivTr {}\n+   |     ------------ `PrivTr` declared as private\n+...\n+LL |         type Exist = impl PrivTr;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n+\n+error: aborting due to 4 previous errors; 4 warnings emitted\n+\n+Some errors have detailed explanations: E0445, E0446.\n+For more information about an error, try `rustc --explain E0445`."}, {"sha": "36230ffd04b7cfdeb3aa4421748ad44ce48e277c", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.min_tait.stderr", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error[E0446]: private type `Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:17:9\n+  --> $DIR/private-in-public-assoc-ty.rs:20:9\n    |\n LL |     struct Priv;\n    |     ------------ `Priv` declared as private\n@@ -8,7 +8,7 @@ LL |         type A = Priv;\n    |         ^^^^^^^^^^^^^^ can't leak private type\n \n warning: private trait `PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-assoc-ty.rs:24:9\n+  --> $DIR/private-in-public-assoc-ty.rs:27:9\n    |\n LL |         type Alias1: PrivTr;\n    |         ^^^^^^^^^^^^^^^^^^^^\n@@ -18,7 +18,7 @@ LL |         type Alias1: PrivTr;\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n warning: private type `Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-assoc-ty.rs:27:9\n+  --> $DIR/private-in-public-assoc-ty.rs:30:9\n    |\n LL |         type Alias2: PubTrAux1<Priv> = u8;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -27,7 +27,7 @@ LL |         type Alias2: PubTrAux1<Priv> = u8;\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n warning: private type `Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-assoc-ty.rs:30:9\n+  --> $DIR/private-in-public-assoc-ty.rs:33:9\n    |\n LL |         type Alias3: PubTrAux2<A = Priv> = u8;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -36,7 +36,7 @@ LL |         type Alias3: PubTrAux2<A = Priv> = u8;\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error[E0446]: private type `Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:34:9\n+  --> $DIR/private-in-public-assoc-ty.rs:37:9\n    |\n LL |     struct Priv;\n    |     ------------ `Priv` declared as private\n@@ -45,7 +45,7 @@ LL |         type Alias4 = Priv;\n    |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:41:9\n+  --> $DIR/private-in-public-assoc-ty.rs:44:9\n    |\n LL |     struct Priv;\n    |     ------------ `Priv` declared as private\n@@ -54,7 +54,7 @@ LL |         type Alias1 = Priv;\n    |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0445]: private trait `PrivTr` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:44:9\n+  --> $DIR/private-in-public-assoc-ty.rs:47:9\n    |\n LL |     trait PrivTr {}\n    |     ------------ `PrivTr` declared as private", "previous_filename": "src/test/ui/privacy/private-in-public-assoc-ty.stderr"}, {"sha": "f8fb565943092a08786c9f217cc9fd005e853b7e", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -2,7 +2,10 @@\n // This test also ensures that the checks are performed even inside private modules.\n \n #![feature(associated_type_defaults)]\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n mod m {\n     struct Priv;"}, {"sha": "c419c7ee4d44abdcc8c6a725588eb3643039e458", "filename": "src/test/ui/privacy/private-in-public-type-alias-impl-trait.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/private-in-public-type-alias-impl-trait.rs:5:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "8443631253f78931e17e7e86630de92570911821", "filename": "src/test/ui/privacy/private-in-public-type-alias-impl-trait.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,6 +1,9 @@\n // build-pass (FIXME(62277): could be check-pass?)\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n #![deny(private_in_public)]\n \n pub type Pub = impl Default;"}, {"sha": "193aed2615ce6429c762643604e6a216b8793dd3", "filename": "src/test/ui/save-analysis/issue-68621.full_tait.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-68621.rs:5:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: could not find defining uses\n+  --> $DIR/issue-68621.rs:17:19\n+   |\n+LL |     type Future = impl Trait;\n+   |                   ^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "cccfb3de8fb1b10401feb7f388c0cee62325cd49", "filename": "src/test/ui/save-analysis/issue-68621.min_tait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error: could not find defining uses\n-  --> $DIR/issue-68621.rs:14:19\n+  --> $DIR/issue-68621.rs:17:19\n    |\n LL |     type Future = impl Trait;\n    |                   ^^^^^^^^^^", "previous_filename": "src/test/ui/save-analysis/issue-68621.stderr"}, {"sha": "1f4a9080cc934b45a5230a90d83295f04410c779", "filename": "src/test/ui/save-analysis/issue-68621.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,6 +1,9 @@\n // compile-flags: -Zsave-analysis\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n trait Trait {}\n "}, {"sha": "7b43d1d86bcd45710c82565deacf386021ca1db7", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-const.full_tait.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,19 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/assoc-type-const.rs:7:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/assoc-type-const.rs:9:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "d4b9132cc927b5ec0abfcb1a63ffd8a4d4b91dfe", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-const.min_tait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/assoc-type-const.rs:6:12\n+  --> $DIR/assoc-type-const.rs:9:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/type-alias-impl-trait/assoc-type-const.stderr"}, {"sha": "be065c3b6beac9fd5a94cddd8e1eac8ad4d417f9", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-const.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -2,7 +2,10 @@\n // const generics in an associated opaque type\n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n "}, {"sha": "01263cde8bb1997da4b063c0cdd24c51cc8cb2c6", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime-unconstrained.full_tait.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,18 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/assoc-type-lifetime-unconstrained.rs:6:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/assoc-type-lifetime-unconstrained.rs:20:6\n+   |\n+LL | impl<'a, I> UnwrapItemsExt for I {\n+   |      ^^ unconstrained lifetime parameter\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "afcdab5f479dfccf6ad5e3851d41b618bb26fdea", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime-unconstrained.min_tait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/assoc-type-lifetime-unconstrained.rs:17:6\n+  --> $DIR/assoc-type-lifetime-unconstrained.rs:20:6\n    |\n LL | impl<'a, I> UnwrapItemsExt for I {\n    |      ^^ unconstrained lifetime parameter", "previous_filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime-unconstrained.stderr"}, {"sha": "39cc75e688b8302616d240a7aa904e149f9630fd", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime-unconstrained.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,7 +1,10 @@\n // Tests that we don't allow unconstrained lifetime parameters in impls when\n // the lifetime is used in an associated opaque type.\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n trait UnwrapItemsExt {\n     type Iter;"}, {"sha": "31afbf14e658c65ec5b43cb66b6aa056ea0514d9", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/assoc-type-lifetime.rs:7:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "ebbdbb67dbe6f98e1f0ae4833729e750a73f27be", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -2,7 +2,10 @@\n // lifetimes are used in an associated opaque type\n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n trait UnwrapItemsExt<'a> {\n     type Iter;"}, {"sha": "2c48d815e0de4118c38c4d3b2360f13fe278dc5e", "filename": "src/test/ui/type-alias-impl-trait/associated-type-alias-impl-trait.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-alias-impl-trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-alias-impl-trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-alias-impl-trait.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/associated-type-alias-impl-trait.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "8d2b1826790b3bae6a17358ab72f61d0e853906a", "filename": "src/test/ui/type-alias-impl-trait/associated-type-alias-impl-trait.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-alias-impl-trait.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}"}, {"sha": "2a09d0f00f84cf812bfb87e18eb2cd3fa8f0e8a0", "filename": "src/test/ui/type-alias-impl-trait/associated-type-lifetime-ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-lifetime-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-lifetime-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-lifetime-ice.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -7,7 +7,7 @@\n \n // Regression test for https://github.com/rust-lang/rust/issues/78450\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(min_type_alias_impl_trait)]\n #![no_std]\n \n pub trait AssociatedImpl {"}, {"sha": "94e1fa73de88420afb3c7da337b6adf8692b1821", "filename": "src/test/ui/type-alias-impl-trait/auxiliary/cross_crate_ice.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,8 +1,10 @@\n // Crate that exports an opaque `impl Trait` type. Used for testing cross-crate.\n \n-#![crate_type=\"rlib\"]\n-\n-#![feature(type_alias_impl_trait)]\n+#![crate_type = \"rlib\"]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n pub type Foo = impl std::fmt::Debug;\n "}, {"sha": "65bc594dcf2f74abe491a8cd1d0c0de8288bb9b6", "filename": "src/test/ui/type-alias-impl-trait/auxiliary/cross_crate_ice2.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice2.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,8 +1,10 @@\n // Crate that exports an opaque `impl Trait` type. Used for testing cross-crate.\n \n-#![crate_type=\"rlib\"]\n-\n-#![feature(type_alias_impl_trait)]\n+#![crate_type = \"rlib\"]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n pub trait View {\n     type Tmp: Iterator<Item = u32>;"}, {"sha": "b45105ea8f29ec9fe33adf64e946d9432608a66e", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,8 +1,9 @@\n // build-pass (FIXME(62277): could be check-pass?)\n \n #![allow(warnings)]\n-\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n \n fn main() {\n }"}, {"sha": "164564e8516fc6a07a907a322bc019aedf63b4b3", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.full_tait.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/bound_reduction2.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/bound_reduction2.rs:18:46\n+   |\n+LL | fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> {\n+   |                                              ^^^^^^^^^^^^^\n+   |\n+note: used non-generic type `<T as TraitWithAssoc>::Assoc` for generic parameter\n+  --> $DIR/bound_reduction2.rs:12:10\n+   |\n+LL | type Foo<V> = impl Trait<V>;\n+   |          ^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "d3520a9bac2f37120c1af399fec97ddb7da53c3c", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/bound_reduction2.rs:15:46\n+  --> $DIR/bound_reduction2.rs:18:46\n    |\n LL | fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> {\n    |                                              ^^^^^^^^^^^^^\n    |\n note: used non-generic type `<T as TraitWithAssoc>::Assoc` for generic parameter\n-  --> $DIR/bound_reduction2.rs:9:10\n+  --> $DIR/bound_reduction2.rs:12:10\n    |\n LL | type Foo<V> = impl Trait<V>;\n    |          ^", "previous_filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.stderr"}, {"sha": "b94b21e4244a28fa82312de3314c7539badc13e5", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "871ef22f3ebcf7f9a58dc0189b029b29cc50c4b5", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked-2.full_tait.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/bounds-are-checked-2.rs:6:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0277]: the trait bound `T: Clone` is not satisfied\n+  --> $DIR/bounds-are-checked-2.rs:9:13\n+   |\n+LL | type X<T> = impl Clone;\n+   |             ^^^^^^^^^^ the trait `Clone` is not implemented for `T`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | type X<T: Clone> = impl Clone;\n+   |         ^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "20656e5e553204125abcbd5c1159abd50a4bf76c", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked-2.min_tait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `T: Clone` is not satisfied\n-  --> $DIR/bounds-are-checked-2.rs:6:13\n+  --> $DIR/bounds-are-checked-2.rs:9:13\n    |\n LL | type X<T> = impl Clone;\n    |             ^^^^^^^^^^ the trait `Clone` is not implemented for `T`", "previous_filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked-2.stderr"}, {"sha": "fecc2543bce1969c703de989135493dadacb0cd9", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked-2.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,7 +1,10 @@\n // Make sure that we check that impl trait types implement the traits that they\n // claim to.\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n type X<T> = impl Clone;\n //~^ ERROR the trait bound `T: Clone` is not satisfied"}, {"sha": "ca89421cd8bf1281c2c063619773d93489da3192", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked.full_tait.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,35 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/bounds-are-checked.rs:6:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: unnecessary lifetime parameter `'a`\n+  --> $DIR/bounds-are-checked.rs:12:6\n+   |\n+LL | fn f<'a: 'static>(t: &'a str) -> X<'a> {\n+   |      ^^^^^^^^^^^\n+   |\n+   = help: you can use the `'static` lifetime directly, in place of `'a`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/bounds-are-checked.rs:9:14\n+   |\n+LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected trait `From<&'a str>`\n+              found trait `From<&'static str>`\n+note: the lifetime `'a` as defined on the item at 9:8...\n+  --> $DIR/bounds-are-checked.rs:9:8\n+   |\n+LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n+   |        ^^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error: aborting due to previous error; 2 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "9a451cb108373794b985117f535181888f0ec937", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked.min_tait.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,21 +1,21 @@\n warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/bounds-are-checked.rs:9:6\n+  --> $DIR/bounds-are-checked.rs:12:6\n    |\n LL | fn f<'a: 'static>(t: &'a str) -> X<'a> {\n    |      ^^^^^^^^^^^\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'a`\n \n error[E0308]: mismatched types\n-  --> $DIR/bounds-are-checked.rs:6:14\n+  --> $DIR/bounds-are-checked.rs:9:14\n    |\n LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected trait `From<&'a str>`\n               found trait `From<&'static str>`\n-note: the lifetime `'a` as defined on the item at 6:8...\n-  --> $DIR/bounds-are-checked.rs:6:8\n+note: the lifetime `'a` as defined on the item at 9:8...\n+  --> $DIR/bounds-are-checked.rs:9:8\n    |\n LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n    |        ^^", "previous_filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked.stderr"}, {"sha": "5e1faaa3b0839b1e92927dd23a69f6468d6e4e6e", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,7 +1,10 @@\n // Make sure that we check that impl trait types implement the traits that they\n // claim to.\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n type X<'a> = impl Into<&'static str> + From<&'a str>;\n //~^ ERROR mismatched types"}, {"sha": "68de0c961ba1ca76ae952d51ae5b0c57e8b56d49", "filename": "src/test/ui/type-alias-impl-trait/coherence.full_tait.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,18 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/coherence.rs:4:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/coherence.rs:17:6\n+   |\n+LL | impl<T> foreign_crate::ForeignTrait for AliasOfForeignType<T> {}\n+   |      ^ unconstrained type parameter\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "4da52369fdb5dd926bfc968a2376aafb5f1cea71", "filename": "src/test/ui/type-alias-impl-trait/coherence.min_tait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/coherence.rs:14:6\n+  --> $DIR/coherence.rs:17:6\n    |\n LL | impl<T> foreign_crate::ForeignTrait for AliasOfForeignType<T> {}\n    |      ^ unconstrained type parameter", "previous_filename": "src/test/ui/type-alias-impl-trait/coherence.stderr"}, {"sha": "51babb0e61bd3e1b1266b753a4a232e2be7c46e3", "filename": "src/test/ui/type-alias-impl-trait/coherence.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,8 @@\n // aux-build:foreign-crate.rs\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n extern crate foreign_crate;\n "}, {"sha": "5fc79cf9561fa2be3ef84742afc0ede477402a00", "filename": "src/test/ui/type-alias-impl-trait/declared_but_never_defined.full_tait.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/declared_but_never_defined.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: could not find defining uses\n+  --> $DIR/declared_but_never_defined.rs:9:12\n+   |\n+LL | type Bar = impl std::fmt::Debug;\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "b731e41b149a8db3d1fd4cc86dc7cdf38a20e4d8", "filename": "src/test/ui/type-alias-impl-trait/declared_but_never_defined.min_tait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error: could not find defining uses\n-  --> $DIR/declared_but_never_defined.rs:6:12\n+  --> $DIR/declared_but_never_defined.rs:9:12\n    |\n LL | type Bar = impl std::fmt::Debug;\n    |            ^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/type-alias-impl-trait/declared_but_never_defined.stderr"}, {"sha": "ac92bea8c47a46722ed28ca3e88ed6f7bb7c95c6", "filename": "src/test/ui/type-alias-impl-trait/declared_but_never_defined.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "eeccc598f529c5672fd51a38f37ca6ecf48d1059", "filename": "src/test/ui/type-alias-impl-trait/declared_but_not_defined_in_scope.full_tait.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,32 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/declared_but_not_defined_in_scope.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: could not find defining uses\n+  --> $DIR/declared_but_not_defined_in_scope.rs:10:20\n+   |\n+LL |     pub type Boo = impl ::std::fmt::Debug;\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/declared_but_not_defined_in_scope.rs:14:5\n+   |\n+LL |     pub type Boo = impl ::std::fmt::Debug;\n+   |                    ---------------------- the expected opaque type\n+...\n+LL | fn bomp() -> boo::Boo {\n+   |              -------- expected `impl Debug` because of return type\n+LL |     \"\"\n+   |     ^^ expected opaque type, found `&str`\n+   |\n+   = note: expected opaque type `impl Debug`\n+                found reference `&'static str`\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "20057c3aa51855526ac0909e8fc93c2dd57e7fde", "filename": "src/test/ui/type-alias-impl-trait/declared_but_not_defined_in_scope.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error: could not find defining uses\n-  --> $DIR/declared_but_not_defined_in_scope.rs:7:20\n+  --> $DIR/declared_but_not_defined_in_scope.rs:10:20\n    |\n LL |     pub type Boo = impl ::std::fmt::Debug;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/declared_but_not_defined_in_scope.rs:11:5\n+  --> $DIR/declared_but_not_defined_in_scope.rs:14:5\n    |\n LL |     pub type Boo = impl ::std::fmt::Debug;\n    |                    ---------------------- the expected opaque type", "previous_filename": "src/test/ui/type-alias-impl-trait/declared_but_not_defined_in_scope.stderr"}, {"sha": "2bbae98db448c13b67648e3c9832a8db64d3f0d6", "filename": "src/test/ui/type-alias-impl-trait/declared_but_not_defined_in_scope.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "60fa141884db32d9ace90d33dafe70ad6b3d2c74", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses.full_tait.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/different_defining_uses.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/different_defining_uses.rs:15:1\n+   |\n+LL | fn bar() -> Foo {\n+   | ^^^^^^^^^^^^^^^ expected `&'static str`, got `i32`\n+   |\n+note: previous use here\n+  --> $DIR/different_defining_uses.rs:11:1\n+   |\n+LL | fn foo() -> Foo {\n+   | ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "904ee58685cbf59d591aa8228281d15b3d3f635a", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/different_defining_uses.rs:12:1\n+  --> $DIR/different_defining_uses.rs:15:1\n    |\n LL | fn bar() -> Foo {\n    | ^^^^^^^^^^^^^^^ expected `&'static str`, got `i32`\n    |\n note: previous use here\n-  --> $DIR/different_defining_uses.rs:8:1\n+  --> $DIR/different_defining_uses.rs:11:1\n    |\n LL | fn foo() -> Foo {\n    | ^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/type-alias-impl-trait/different_defining_uses.stderr"}, {"sha": "542de6b62e19739028754d0404c5f22c48d9c187", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "5c5ae7eadcbcf8fa4ca329f1f76d6061225b3379", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type.full_tait.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,35 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/different_defining_uses_never_type.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/different_defining_uses_never_type.rs:15:1\n+   |\n+LL | fn bar() -> Foo {\n+   | ^^^^^^^^^^^^^^^ expected `&'static str`, got `()`\n+   |\n+note: previous use here\n+  --> $DIR/different_defining_uses_never_type.rs:11:1\n+   |\n+LL | fn foo() -> Foo {\n+   | ^^^^^^^^^^^^^^^\n+\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/different_defining_uses_never_type.rs:19:1\n+   |\n+LL | fn boo() -> Foo {\n+   | ^^^^^^^^^^^^^^^ expected `&'static str`, got `()`\n+   |\n+note: previous use here\n+  --> $DIR/different_defining_uses_never_type.rs:11:1\n+   |\n+LL | fn foo() -> Foo {\n+   | ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+"}, {"sha": "9cf2c583687370bf6d9d1633fff0ed2da58905d1", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type.min_tait.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,23 +1,23 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/different_defining_uses_never_type.rs:12:1\n+  --> $DIR/different_defining_uses_never_type.rs:15:1\n    |\n LL | fn bar() -> Foo {\n    | ^^^^^^^^^^^^^^^ expected `&'static str`, got `()`\n    |\n note: previous use here\n-  --> $DIR/different_defining_uses_never_type.rs:8:1\n+  --> $DIR/different_defining_uses_never_type.rs:11:1\n    |\n LL | fn foo() -> Foo {\n    | ^^^^^^^^^^^^^^^\n \n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/different_defining_uses_never_type.rs:16:1\n+  --> $DIR/different_defining_uses_never_type.rs:19:1\n    |\n LL | fn boo() -> Foo {\n    | ^^^^^^^^^^^^^^^ expected `&'static str`, got `()`\n    |\n note: previous use here\n-  --> $DIR/different_defining_uses_never_type.rs:8:1\n+  --> $DIR/different_defining_uses_never_type.rs:11:1\n    |\n LL | fn foo() -> Foo {\n    | ^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type.stderr"}, {"sha": "72352a74a04b6e01590963ecb736ab619f9ddd63", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "b69622b77bfc49ea3d4070acf1bdcf17bce382c3", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type2.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type2.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/different_defining_uses_never_type2.rs:5:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "ac9884b3e4501ce47e773b3b1e39084df0b14c4e", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type2.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type2.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,6 +1,9 @@\n // build-pass (FIXME(62277): could be check-pass?)\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "9641d756cb03e746fbed5ee342dfae3f2ebd3ff5", "filename": "src/test/ui/type-alias-impl-trait/fallback.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/fallback.rs:7:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "84fec75655fb2e15fab03df9fdc560d816318d8c", "filename": "src/test/ui/type-alias-impl-trait/fallback.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -2,7 +2,10 @@\n // inference variable being completely unconstrained.\n //\n // check-pass\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n type Foo = impl Copy;\n "}, {"sha": "972e5d94288250dc536e8174543ef2a4abd73b87", "filename": "src/test/ui/type-alias-impl-trait/generic_different_defining_uses.full_tait.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/generic_different_defining_uses.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/generic_different_defining_uses.rs:14:1\n+   |\n+LL | fn my_iter2<T>(t: T) -> MyIter<T> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `std::iter::Once<T>`, got `std::option::IntoIter<T>`\n+   |\n+note: previous use here\n+  --> $DIR/generic_different_defining_uses.rs:10:1\n+   |\n+LL | fn my_iter<T>(t: T) -> MyIter<T> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "911683862c263f6d2a171f4219d75d8be7c32b42", "filename": "src/test/ui/type-alias-impl-trait/generic_different_defining_uses.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_different_defining_uses.rs:11:1\n+  --> $DIR/generic_different_defining_uses.rs:14:1\n    |\n LL | fn my_iter2<T>(t: T) -> MyIter<T> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `std::iter::Once<T>`, got `std::option::IntoIter<T>`\n    |\n note: previous use here\n-  --> $DIR/generic_different_defining_uses.rs:7:1\n+  --> $DIR/generic_different_defining_uses.rs:10:1\n    |\n LL | fn my_iter<T>(t: T) -> MyIter<T> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_different_defining_uses.stderr"}, {"sha": "4eb603df583a810a8a4c0f948a51be6b25877f86", "filename": "src/test/ui/type-alias-impl-trait/generic_different_defining_uses.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "ecf0e39ed6f6100beca95c984009b51715a672a6", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_lifetime_param.full_tait.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/generic_duplicate_lifetime_param.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_duplicate_lifetime_param.rs:10:26\n+   |\n+LL | fn one<'a>(t: &'a ()) -> Two<'a, 'a> {\n+   |                          ^^^^^^^^^^^\n+   |\n+note: lifetime used multiple times\n+  --> $DIR/generic_duplicate_lifetime_param.rs:8:10\n+   |\n+LL | type Two<'a, 'b> = impl std::fmt::Debug;\n+   |          ^^  ^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "1aad312056bb50491e94cc07fd9c2094524f813f", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_lifetime_param.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_lifetime_param.rs:7:26\n+  --> $DIR/generic_duplicate_lifetime_param.rs:10:26\n    |\n LL | fn one<'a>(t: &'a ()) -> Two<'a, 'a> {\n    |                          ^^^^^^^^^^^\n    |\n note: lifetime used multiple times\n-  --> $DIR/generic_duplicate_lifetime_param.rs:5:10\n+  --> $DIR/generic_duplicate_lifetime_param.rs:8:10\n    |\n LL | type Two<'a, 'b> = impl std::fmt::Debug;\n    |          ^^  ^^", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_lifetime_param.stderr"}, {"sha": "d838d497238d5d1aec693250357725c825f8f468", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_lifetime_param.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "805cea7127ddf9ff8f0a717794af1e8f5bd9d4b1", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.full_tait.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,35 +1,35 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use.rs:13:30\n+  --> $DIR/generic_duplicate_param_use.rs:16:30\n    |\n LL | fn one_ty<T: Debug>(t: T) -> TwoTys<T, T> {\n    |                              ^^^^^^^^^^^^\n    |\n note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use.rs:9:13\n+  --> $DIR/generic_duplicate_param_use.rs:12:13\n    |\n LL | type TwoTys<T, U> = impl Debug;\n    |             ^  ^\n \n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use.rs:18:36\n+  --> $DIR/generic_duplicate_param_use.rs:21:36\n    |\n LL | fn one_lifetime<'a>(t: &'a u32) -> TwoLifetimes<'a, 'a> {\n    |                                    ^^^^^^^^^^^^^^^^^^^^\n    |\n note: lifetime used multiple times\n-  --> $DIR/generic_duplicate_param_use.rs:10:19\n+  --> $DIR/generic_duplicate_param_use.rs:13:19\n    |\n LL | type TwoLifetimes<'a, 'b> = impl Debug;\n    |                   ^^  ^^\n \n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use.rs:23:50\n+  --> $DIR/generic_duplicate_param_use.rs:26:50\n    |\n LL | fn one_const<const N: usize>(t: *mut [u8; N]) -> TwoConsts<N, N> {\n    |                                                  ^^^^^^^^^^^^^^^\n    |\n note: constant used multiple times\n-  --> $DIR/generic_duplicate_param_use.rs:11:22\n+  --> $DIR/generic_duplicate_param_use.rs:14:22\n    |\n LL | type TwoConsts<const X: usize, const Y: usize> = impl Debug;\n    |                      ^               ^", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.stderr"}, {"sha": "805cea7127ddf9ff8f0a717794af1e8f5bd9d4b1", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.min_tait.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,38 @@\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_duplicate_param_use.rs:16:30\n+   |\n+LL | fn one_ty<T: Debug>(t: T) -> TwoTys<T, T> {\n+   |                              ^^^^^^^^^^^^\n+   |\n+note: type used multiple times\n+  --> $DIR/generic_duplicate_param_use.rs:12:13\n+   |\n+LL | type TwoTys<T, U> = impl Debug;\n+   |             ^  ^\n+\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_duplicate_param_use.rs:21:36\n+   |\n+LL | fn one_lifetime<'a>(t: &'a u32) -> TwoLifetimes<'a, 'a> {\n+   |                                    ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lifetime used multiple times\n+  --> $DIR/generic_duplicate_param_use.rs:13:19\n+   |\n+LL | type TwoLifetimes<'a, 'b> = impl Debug;\n+   |                   ^^  ^^\n+\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_duplicate_param_use.rs:26:50\n+   |\n+LL | fn one_const<const N: usize>(t: *mut [u8; N]) -> TwoConsts<N, N> {\n+   |                                                  ^^^^^^^^^^^^^^^\n+   |\n+note: constant used multiple times\n+  --> $DIR/generic_duplicate_param_use.rs:14:22\n+   |\n+LL | type TwoConsts<const X: usize, const Y: usize> = impl Debug;\n+   |                      ^               ^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "12ff5a2e713d8afdd487cee26534f31b66f4d0f3", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait, const_generics)]\n+#![feature(const_generics)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n #![allow(incomplete_features)]\n \n use std::fmt::Debug;"}, {"sha": "ef7d4f1be4eea98e6a104b95b568d251bddff994", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use10.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/generic_duplicate_param_use10.rs:4:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "c7a7ded2127a93b20920a1506f5ab6b13453f814", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use10.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,8 @@\n // check-pass\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "357d477c9f1e25ed42b172edac48fd3efb133466", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.full_tait.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/generic_duplicate_param_use2.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_duplicate_param_use2.rs:13:27\n+   |\n+LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n+   |                           ^^^^^^^^^\n+   |\n+note: type used multiple times\n+  --> $DIR/generic_duplicate_param_use2.rs:11:10\n+   |\n+LL | type Two<T, U> = impl Debug;\n+   |          ^  ^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "805ab67816f972aa3520876dcac3404bf7783c42", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use3.rs:10:27\n+  --> $DIR/generic_duplicate_param_use2.rs:13:27\n    |\n LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n    |                           ^^^^^^^^^\n    |\n note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use3.rs:8:10\n+  --> $DIR/generic_duplicate_param_use2.rs:11:10\n    |\n LL | type Two<T, U> = impl Debug;\n    |          ^  ^", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.stderr"}, {"sha": "ff5166228239464f7ab3fb6e924011c3193f9170", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "b2004c8416c4950e9e38ce808fed33bd50a839af", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.full_tait.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/generic_duplicate_param_use3.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_duplicate_param_use3.rs:13:27\n+   |\n+LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n+   |                           ^^^^^^^^^\n+   |\n+note: type used multiple times\n+  --> $DIR/generic_duplicate_param_use3.rs:11:10\n+   |\n+LL | type Two<T, U> = impl Debug;\n+   |          ^  ^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "43af9eca63ef2ccf2aeee9b789ec58994dc2afc8", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use4.rs:10:27\n+  --> $DIR/generic_duplicate_param_use3.rs:13:27\n    |\n LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n    |                           ^^^^^^^^^\n    |\n note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use4.rs:8:10\n+  --> $DIR/generic_duplicate_param_use3.rs:11:10\n    |\n LL | type Two<T, U> = impl Debug;\n    |          ^  ^", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use4.stderr"}, {"sha": "f7d1cc1ad4e5cf67d8de53b0f903c788d8db67c4", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "f5db77a08d74cc420afeff428071d6dc4c0f9a75", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use4.full_tait.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/generic_duplicate_param_use4.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_duplicate_param_use4.rs:13:27\n+   |\n+LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n+   |                           ^^^^^^^^^\n+   |\n+note: type used multiple times\n+  --> $DIR/generic_duplicate_param_use4.rs:11:10\n+   |\n+LL | type Two<T, U> = impl Debug;\n+   |          ^  ^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "f8e2b5104608d3f534765966c74d745214bb6b7e", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use4.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use2.rs:10:27\n+  --> $DIR/generic_duplicate_param_use4.rs:13:27\n    |\n LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n    |                           ^^^^^^^^^\n    |\n note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use2.rs:8:10\n+  --> $DIR/generic_duplicate_param_use4.rs:11:10\n    |\n LL | type Two<T, U> = impl Debug;\n    |          ^  ^", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.stderr"}, {"sha": "26583a6ce9b9f52016a9d5019c7ab26ecc7f1c86", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use4.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "8a0c411c7754a6675d340f055b7f35152bc709e8", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.full_tait.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,48 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/generic_duplicate_param_use5.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/generic_duplicate_param_use5.rs:19:1\n+   |\n+LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, U)`, got `(U, T)`\n+   |\n+note: previous use here\n+  --> $DIR/generic_duplicate_param_use5.rs:15:1\n+   |\n+LL | fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `T` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use5.rs:11:18\n+   |\n+LL | type Two<T, U> = impl Debug;\n+   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(T, U)`\n+help: consider restricting type parameter `T`\n+   |\n+LL | type Two<T: Debug, U> = impl Debug;\n+   |           ^^^^^^^\n+\n+error[E0277]: `U` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use5.rs:11:18\n+   |\n+LL | type Two<T, U> = impl Debug;\n+   |                  ^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(T, U)`\n+help: consider restricting type parameter `U`\n+   |\n+LL | type Two<T, U: Debug> = impl Debug;\n+   |              ^^^^^^^\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "35115ccb2d678db16be7a1fd6b507e9cb5e0591b", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.min_tait.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,17 +1,17 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use5.rs:16:1\n+  --> $DIR/generic_duplicate_param_use5.rs:19:1\n    |\n LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, U)`, got `(U, T)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use5.rs:12:1\n+  --> $DIR/generic_duplicate_param_use5.rs:15:1\n    |\n LL | fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use5.rs:8:18\n+  --> $DIR/generic_duplicate_param_use5.rs:11:18\n    |\n LL | type Two<T, U> = impl Debug;\n    |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n@@ -23,7 +23,7 @@ LL | type Two<T: Debug, U> = impl Debug;\n    |           ^^^^^^^\n \n error[E0277]: `U` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use5.rs:8:18\n+  --> $DIR/generic_duplicate_param_use5.rs:11:18\n    |\n LL | type Two<T, U> = impl Debug;\n    |                  ^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.stderr"}, {"sha": "af473e8245acf1052dea66bfb94338f1630ec09f", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "8f72c333e817cab5a364d71db661cda4a0f5b6b9", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.full_tait.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,36 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/generic_duplicate_param_use6.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/generic_duplicate_param_use6.rs:18:1\n+   |\n+LL | fn three<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, T)`, got `(U, T)`\n+   |\n+note: previous use here\n+  --> $DIR/generic_duplicate_param_use6.rs:14:1\n+   |\n+LL | fn two<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `T` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use6.rs:11:18\n+   |\n+LL | type Two<T, U> = impl Debug;\n+   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(T, T)`\n+help: consider restricting type parameter `T`\n+   |\n+LL | type Two<T: Debug, U> = impl Debug;\n+   |           ^^^^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "922c9a7420848ddf053464611abcf8ef6bdc9c3e", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.min_tait.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,17 +1,17 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use6.rs:15:1\n+  --> $DIR/generic_duplicate_param_use6.rs:18:1\n    |\n LL | fn three<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, T)`, got `(U, T)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use6.rs:11:1\n+  --> $DIR/generic_duplicate_param_use6.rs:14:1\n    |\n LL | fn two<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use6.rs:8:18\n+  --> $DIR/generic_duplicate_param_use6.rs:11:18\n    |\n LL | type Two<T, U> = impl Debug;\n    |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.stderr"}, {"sha": "01afb2f449648e692482360b3460631efdd320b0", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "d80c8326ad6c6de3299ef082c026e54e52df1a7e", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use7.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/generic_duplicate_param_use7.rs:4:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "184e3a5f926ba117ad96a04ac157cbeb76733be5", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use7.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,8 @@\n // check-pass\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "a93321d4d050828ef0291d1558c6fc71733b60db", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.full_tait.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,36 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/generic_duplicate_param_use8.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/generic_duplicate_param_use8.rs:17:1\n+   |\n+LL | fn three<T: Debug, U: Debug>(_: T, u: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, u32)`, got `(U, u32)`\n+   |\n+note: previous use here\n+  --> $DIR/generic_duplicate_param_use8.rs:13:1\n+   |\n+LL | fn two<T: Debug, U: Debug>(t: T, _: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `T` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use8.rs:10:18\n+   |\n+LL | type Two<T, U> = impl Debug;\n+   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(T, u32)`\n+help: consider restricting type parameter `T`\n+   |\n+LL | type Two<T: Debug, U> = impl Debug;\n+   |           ^^^^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "25ac60799f668c2fceaedc7827707662f81b05fc", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.min_tait.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,17 +1,17 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use8.rs:14:1\n+  --> $DIR/generic_duplicate_param_use8.rs:17:1\n    |\n LL | fn three<T: Debug, U: Debug>(_: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, u32)`, got `(U, u32)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use8.rs:10:1\n+  --> $DIR/generic_duplicate_param_use8.rs:13:1\n    |\n LL | fn two<T: Debug, U: Debug>(t: T, _: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use8.rs:7:18\n+  --> $DIR/generic_duplicate_param_use8.rs:10:18\n    |\n LL | type Two<T, U> = impl Debug;\n    |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.stderr"}, {"sha": "ecb8b2cedb488c2f6c4e98b08f9bf1d7724ab3c8", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "098be7929d6f2239f656cde8c21549c470c3300d", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.full_tait.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,60 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/generic_duplicate_param_use9.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/generic_duplicate_param_use9.rs:24:1\n+   |\n+LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(A, B, <A as Foo>::Bar)`, got `(A, B, i32)`\n+   |\n+note: previous use here\n+  --> $DIR/generic_duplicate_param_use9.rs:20:1\n+   |\n+LL | fn two<T: Debug + Foo, U: Debug>(t: T, u: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `A: Foo` is not satisfied in `(A, B, <A as Foo>::Bar)`\n+  --> $DIR/generic_duplicate_param_use9.rs:10:18\n+   |\n+LL | type Two<A, B> = impl Debug;\n+   |                  ^^^^^^^^^^ within `(A, B, <A as Foo>::Bar)`, the trait `Foo` is not implemented for `A`\n+   |\n+   = note: required because it appears within the type `(A, B, <A as Foo>::Bar)`\n+help: consider restricting type parameter `A`\n+   |\n+LL | type Two<A: Foo, B> = impl Debug;\n+   |           ^^^^^\n+\n+error[E0277]: `A` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use9.rs:10:18\n+   |\n+LL | type Two<A, B> = impl Debug;\n+   |                  ^^^^^^^^^^ `A` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(A, B, <A as Foo>::Bar)`\n+help: consider restricting type parameter `A`\n+   |\n+LL | type Two<A: Debug, B> = impl Debug;\n+   |           ^^^^^^^\n+\n+error[E0277]: `B` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use9.rs:10:18\n+   |\n+LL | type Two<A, B> = impl Debug;\n+   |                  ^^^^^^^^^^ `B` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(A, B, <A as Foo>::Bar)`\n+help: consider restricting type parameter `B`\n+   |\n+LL | type Two<A, B: Debug> = impl Debug;\n+   |              ^^^^^^^\n+\n+error: aborting due to 4 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "b59e10c1b06f1782db6c389aadd0263e127954e5", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.min_tait.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,17 +1,17 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use9.rs:21:1\n+  --> $DIR/generic_duplicate_param_use9.rs:24:1\n    |\n LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(A, B, <A as Foo>::Bar)`, got `(A, B, i32)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use9.rs:17:1\n+  --> $DIR/generic_duplicate_param_use9.rs:20:1\n    |\n LL | fn two<T: Debug + Foo, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `A: Foo` is not satisfied in `(A, B, <A as Foo>::Bar)`\n-  --> $DIR/generic_duplicate_param_use9.rs:7:18\n+  --> $DIR/generic_duplicate_param_use9.rs:10:18\n    |\n LL | type Two<A, B> = impl Debug;\n    |                  ^^^^^^^^^^ within `(A, B, <A as Foo>::Bar)`, the trait `Foo` is not implemented for `A`\n@@ -23,7 +23,7 @@ LL | type Two<A: Foo, B> = impl Debug;\n    |           ^^^^^\n \n error[E0277]: `A` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use9.rs:7:18\n+  --> $DIR/generic_duplicate_param_use9.rs:10:18\n    |\n LL | type Two<A, B> = impl Debug;\n    |                  ^^^^^^^^^^ `A` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n@@ -35,7 +35,7 @@ LL | type Two<A: Debug, B> = impl Debug;\n    |           ^^^^^^^\n \n error[E0277]: `B` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use9.rs:7:18\n+  --> $DIR/generic_duplicate_param_use9.rs:10:18\n    |\n LL | type Two<A, B> = impl Debug;\n    |                  ^^^^^^^^^^ `B` cannot be formatted using `{:?}` because it doesn't implement `Debug`", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.stderr"}, {"sha": "5eced6cfa5a0b93942bb639231b44cbfb392e0d8", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "39817757f18b4ea47ee5a2ab3298a06c809e0d0b", "filename": "src/test/ui/type-alias-impl-trait/generic_lifetime_param.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/generic_lifetime_param.rs:5:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "dbe7cfd1c81fcda93ef7376a3106ddefcbde3739", "filename": "src/test/ui/type-alias-impl-trait/generic_lifetime_param.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,6 +1,9 @@\n // build-pass (FIXME(62277): could be check-pass?)\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "4d7eddfb2fb45ae2a9e93f5c94c414b29585c63f", "filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.full_tait.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,17 +1,17 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_nondefining_use.rs:14:21\n+  --> $DIR/generic_nondefining_use.rs:17:21\n    |\n LL | fn concrete_ty() -> OneTy<u32> {\n    |                     ^^^^^^^^^^\n    |\n note: used non-generic type `u32` for generic parameter\n-  --> $DIR/generic_nondefining_use.rs:8:12\n+  --> $DIR/generic_nondefining_use.rs:11:12\n    |\n LL | type OneTy<T> = impl Debug;\n    |            ^\n \n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_nondefining_use.rs:19:27\n+  --> $DIR/generic_nondefining_use.rs:22:27\n    |\n LL | type OneLifetime<'a> = impl Debug;\n    |                  -- cannot use static lifetime; use a bound lifetime instead or remove the lifetime parameter from the opaque type\n@@ -20,13 +20,13 @@ LL | fn concrete_lifetime() -> OneLifetime<'static> {\n    |                           ^^^^^^^^^^^^^^^^^^^^\n \n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_nondefining_use.rs:24:24\n+  --> $DIR/generic_nondefining_use.rs:27:24\n    |\n LL | fn concrete_const() -> OneConst<{123}> {\n    |                        ^^^^^^^^^^^^^^^\n    |\n note: used non-generic constant `{123}` for generic parameter\n-  --> $DIR/generic_nondefining_use.rs:10:21\n+  --> $DIR/generic_nondefining_use.rs:13:21\n    |\n LL | type OneConst<const X: usize> = impl Debug;\n    |                     ^", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.stderr"}, {"sha": "4d7eddfb2fb45ae2a9e93f5c94c414b29585c63f", "filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.min_tait.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,35 @@\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_nondefining_use.rs:17:21\n+   |\n+LL | fn concrete_ty() -> OneTy<u32> {\n+   |                     ^^^^^^^^^^\n+   |\n+note: used non-generic type `u32` for generic parameter\n+  --> $DIR/generic_nondefining_use.rs:11:12\n+   |\n+LL | type OneTy<T> = impl Debug;\n+   |            ^\n+\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_nondefining_use.rs:22:27\n+   |\n+LL | type OneLifetime<'a> = impl Debug;\n+   |                  -- cannot use static lifetime; use a bound lifetime instead or remove the lifetime parameter from the opaque type\n+...\n+LL | fn concrete_lifetime() -> OneLifetime<'static> {\n+   |                           ^^^^^^^^^^^^^^^^^^^^\n+\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/generic_nondefining_use.rs:27:24\n+   |\n+LL | fn concrete_const() -> OneConst<{123}> {\n+   |                        ^^^^^^^^^^^^^^^\n+   |\n+note: used non-generic constant `{123}` for generic parameter\n+  --> $DIR/generic_nondefining_use.rs:13:21\n+   |\n+LL | type OneConst<const X: usize> = impl Debug;\n+   |                     ^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "c69884d8d6edb8337d1ff97181624c3ee7e64079", "filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait, const_generics)]\n+#![feature(const_generics)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n #![allow(incomplete_features)]\n \n use std::fmt::Debug;"}, {"sha": "819ef7b771232ed5fe4b9568de543335944a06f3", "filename": "src/test/ui/type-alias-impl-trait/generic_not_used.full_tait.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,27 @@\n+error: at least one trait must be specified\n+  --> $DIR/generic_not_used.rs:8:33\n+   |\n+LL | type WrongGeneric<T: 'static> = impl 'static;\n+   |                                 ^^^^^^^^^^^^\n+\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/generic_not_used.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: type parameter `V` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+  --> $DIR/generic_not_used.rs:11:73\n+   |\n+LL |   fn wrong_generic<U: 'static, V: 'static>(_: U, v: V) -> WrongGeneric<U> {\n+   |  _________________________________________________________________________^\n+LL | |\n+LL | |     v\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+"}, {"sha": "fe7f5f6c71e043ca7859efac40c1394707f43c66", "filename": "src/test/ui/type-alias-impl-trait/generic_not_used.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_not_used.rs:5:33\n+  --> $DIR/generic_not_used.rs:8:33\n    |\n LL | type WrongGeneric<T: 'static> = impl 'static;\n    |                                 ^^^^^^^^^^^^\n \n error: type parameter `V` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/generic_not_used.rs:8:73\n+  --> $DIR/generic_not_used.rs:11:73\n    |\n LL |   fn wrong_generic<U: 'static, V: 'static>(_: U, v: V) -> WrongGeneric<U> {\n    |  _________________________________________________________________________^", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_not_used.stderr"}, {"sha": "68f50b2151ff1f4c08b3f359545f92a3b64a6824", "filename": "src/test/ui/type-alias-impl-trait/generic_not_used.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "6394a1f8e8509f1f6b4780f217e46ae2dacab15b", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.full_tait.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,51 @@\n+error: at least one trait must be specified\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n+   |\n+LL | type WrongGeneric<T> = impl 'static;\n+   |                        ^^^^^^^^^^^^\n+\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0308]: mismatched types\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:9:18\n+   |\n+LL |     let z: i32 = x;\n+   |            ---   ^ expected `i32`, found opaque type\n+   |            |\n+   |            expected due to this\n+...\n+LL | type WrongGeneric<T> = impl 'static;\n+   |                        ------------ the found opaque type\n+   |\n+   = note:     expected type `i32`\n+           found opaque type `impl Sized`\n+\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n+   |\n+LL | type WrongGeneric<T> = impl 'static;\n+   |                        ^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+...\n+LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n+   |                  - help: consider adding an explicit lifetime bound...: `T: 'static`\n+\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n+   |\n+LL | type WrongGeneric<T> = impl 'static;\n+   |                        ^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   = note: ...so that the type `T` will meet its required lifetime bounds\n+\n+error: aborting due to 4 previous errors; 1 warning emitted\n+\n+Some errors have detailed explanations: E0308, E0310.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "49ead8b094c1977f95bcef33e12889ee18c5b28d", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.min_tait.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:9:24\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                        ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:6:18\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:9:18\n    |\n LL |     let z: i32 = x;\n    |            ---   ^ expected `i32`, found opaque type\n@@ -19,7 +19,7 @@ LL | type WrongGeneric<T> = impl 'static;\n            found opaque type `impl Sized`\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:9:24\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                        ^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n@@ -28,7 +28,7 @@ LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n    |                  - help: consider adding an explicit lifetime bound...: `T: 'static`\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:9:24\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                        ^^^^^^^^^^^^", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.stderr"}, {"sha": "3dda34ff668ced241736e9bc2d45f0f54781a0ba", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n fn main() {\n     let y = 42;"}, {"sha": "c4778a46fb0886d50485d934aad98db9f89739be", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.full_tait.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,32 @@\n+error: at least one trait must be specified\n+  --> $DIR/generic_underconstrained.rs:9:35\n+   |\n+LL | type Underconstrained<T: Trait> = impl 'static;\n+   |                                   ^^^^^^^^^^^^\n+\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/generic_underconstrained.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0277]: the trait bound `T: Trait` is not satisfied\n+  --> $DIR/generic_underconstrained.rs:13:31\n+   |\n+LL | type Underconstrained<T: Trait> = impl 'static;\n+   |                          ----- required by this bound in `Underconstrained`\n+...\n+LL | fn underconstrain<T>(_: T) -> Underconstrained<T> {\n+   |                               ^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn underconstrain<T: Trait>(_: T) -> Underconstrained<T> {\n+   |                    ^^^^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "6c1d6debee8163b658fc6184a4fb55c5f90fdef8", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained.rs:6:35\n+  --> $DIR/generic_underconstrained.rs:9:35\n    |\n LL | type Underconstrained<T: Trait> = impl 'static;\n    |                                   ^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: Trait` is not satisfied\n-  --> $DIR/generic_underconstrained.rs:10:31\n+  --> $DIR/generic_underconstrained.rs:13:31\n    |\n LL | type Underconstrained<T: Trait> = impl 'static;\n    |                          ----- required by this bound in `Underconstrained`", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.stderr"}, {"sha": "f4c4a1b72cb9d22b9f0989439d1709212a8a4488", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "ca263ba4f5b415954b2ab3686df5c3d6e835bb34", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.full_tait.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,52 @@\n+error: at least one trait must be specified\n+  --> $DIR/generic_underconstrained2.rs:8:45\n+   |\n+LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n+   |                                             ^^^^^^^^^^^^\n+\n+error: at least one trait must be specified\n+  --> $DIR/generic_underconstrained2.rs:17:46\n+   |\n+LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n+   |                                              ^^^^^^^^^^^^\n+\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/generic_underconstrained2.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0277]: `U` doesn't implement `Debug`\n+  --> $DIR/generic_underconstrained2.rs:12:33\n+   |\n+LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n+   |                          --------------- required by this bound in `Underconstrained`\n+...\n+LL | fn underconstrained<U>(_: U) -> Underconstrained<U> {\n+   |                                 ^^^^^^^^^^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+help: consider restricting type parameter `U`\n+   |\n+LL | fn underconstrained<U: Debug>(_: U) -> Underconstrained<U> {\n+   |                      ^^^^^^^\n+\n+error[E0277]: `V` doesn't implement `Debug`\n+  --> $DIR/generic_underconstrained2.rs:21:43\n+   |\n+LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n+   |                           --------------- required by this bound in `Underconstrained2`\n+...\n+LL | fn underconstrained2<U, V>(_: U, _: V) -> Underconstrained2<V> {\n+   |                                           ^^^^^^^^^^^^^^^^^^^^ `V` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+help: consider restricting type parameter `V`\n+   |\n+LL | fn underconstrained2<U, V: Debug>(_: U, _: V) -> Underconstrained2<V> {\n+   |                          ^^^^^^^\n+\n+error: aborting due to 4 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "6ce32f457e3ec38599f0f66acd63611486c1d36c", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.min_tait.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,17 +1,17 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained2.rs:5:45\n+  --> $DIR/generic_underconstrained2.rs:8:45\n    |\n LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n    |                                             ^^^^^^^^^^^^\n \n error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained2.rs:14:46\n+  --> $DIR/generic_underconstrained2.rs:17:46\n    |\n LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n    |                                              ^^^^^^^^^^^^\n \n error[E0277]: `U` doesn't implement `Debug`\n-  --> $DIR/generic_underconstrained2.rs:9:33\n+  --> $DIR/generic_underconstrained2.rs:12:33\n    |\n LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n    |                          --------------- required by this bound in `Underconstrained`\n@@ -25,7 +25,7 @@ LL | fn underconstrained<U: Debug>(_: U) -> Underconstrained<U> {\n    |                      ^^^^^^^\n \n error[E0277]: `V` doesn't implement `Debug`\n-  --> $DIR/generic_underconstrained2.rs:18:43\n+  --> $DIR/generic_underconstrained2.rs:21:43\n    |\n LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n    |                           --------------- required by this bound in `Underconstrained2`", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.stderr"}, {"sha": "b3fb0748d2a62d5347b7a66a24fb863da02a84a4", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "bdd88134290c8776e4e393ce1699cdc1922418c9", "filename": "src/test/ui/type-alias-impl-trait/impl-with-unconstrained-param.full_tait.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,18 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/impl-with-unconstrained-param.rs:6:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/impl-with-unconstrained-param.rs:14:6\n+   |\n+LL | impl<T> X for () {\n+   |      ^ unconstrained type parameter\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "eb59766b91396c10b2d7a08c5ecca83306d86569", "filename": "src/test/ui/type-alias-impl-trait/impl-with-unconstrained-param.min_tait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/impl-with-unconstrained-param.rs:11:6\n+  --> $DIR/impl-with-unconstrained-param.rs:14:6\n    |\n LL | impl<T> X for () {\n    |      ^ unconstrained type parameter", "previous_filename": "src/test/ui/type-alias-impl-trait/impl-with-unconstrained-param.stderr"}, {"sha": "1aefa2474ffcd5fd2ddd89860453de18d4ba028f", "filename": "src/test/ui/type-alias-impl-trait/impl-with-unconstrained-param.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,7 +1,10 @@\n // Ensure that we don't ICE if associated type impl trait is used in an impl\n // with an unconstrained type parameter.\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n trait X {\n     type I;"}, {"sha": "30521b8bf7d9198b921a552db39ae6a1d865a54b", "filename": "src/test/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.full_tait.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,32 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/incoherent-assoc-imp-trait.rs:6:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0119]: conflicting implementations of trait `std::ops::FnOnce<()>` for type `&_`:\n+  --> $DIR/incoherent-assoc-imp-trait.rs:13:1\n+   |\n+LL | impl<F> FnOnce<()> for &F {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl<A, F> FnOnce<A> for &F\n+             where F: Fn<A>, F: ?Sized;\n+\n+error[E0210]: type parameter `F` must be used as the type parameter for some local type (e.g., `MyStruct<F>`)\n+  --> $DIR/incoherent-assoc-imp-trait.rs:13:6\n+   |\n+LL | impl<F> FnOnce<()> for &F {\n+   |      ^ type parameter `F` must be used as the type parameter for some local type\n+   |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which it is implemented is local\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+Some errors have detailed explanations: E0119, E0210.\n+For more information about an error, try `rustc --explain E0119`."}, {"sha": "a0427624ec3fe5050a15f42b3cbdb27727a720a0", "filename": "src/test/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `std::ops::FnOnce<()>` for type `&_`:\n-  --> $DIR/incoherent-assoc-imp-trait.rs:10:1\n+  --> $DIR/incoherent-assoc-imp-trait.rs:13:1\n    |\n LL | impl<F> FnOnce<()> for &F {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -9,7 +9,7 @@ LL | impl<F> FnOnce<()> for &F {\n              where F: Fn<A>, F: ?Sized;\n \n error[E0210]: type parameter `F` must be used as the type parameter for some local type (e.g., `MyStruct<F>`)\n-  --> $DIR/incoherent-assoc-imp-trait.rs:10:6\n+  --> $DIR/incoherent-assoc-imp-trait.rs:13:6\n    |\n LL | impl<F> FnOnce<()> for &F {\n    |      ^ type parameter `F` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.stderr"}, {"sha": "b52b9c18f0845fd919de4d93735064bf109736de", "filename": "src/test/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,7 +1,10 @@\n // Regression test for issue 67856\n \n #![feature(unboxed_closures)]\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n #![feature(fn_traits)]\n \n trait MyTrait {}"}, {"sha": "4effd87120e7d1badd314efbb4a5a2d813116fad", "filename": "src/test/ui/type-alias-impl-trait/issue-52843-closure-constrain.full_tait.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-52843-closure-constrain.rs:5:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/issue-52843-closure-constrain.rs:13:16\n+   |\n+LL |     let null = || -> Opaque { 0 };\n+   |                ^^^^^^^^^^^^^^^^^^ expected `String`, got `i32`\n+   |\n+note: previous use here\n+  --> $DIR/issue-52843-closure-constrain.rs:12:5\n+   |\n+LL |     fn _unused() -> Opaque { String::new() }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "d71e12c60fff5b75655578f827735676f5fa8804", "filename": "src/test/ui/type-alias-impl-trait/issue-52843-closure-constrain.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/issue-52843-closure-constrain.rs:10:16\n+  --> $DIR/issue-52843-closure-constrain.rs:13:16\n    |\n LL |     let null = || -> Opaque { 0 };\n    |                ^^^^^^^^^^^^^^^^^^ expected `String`, got `i32`\n    |\n note: previous use here\n-  --> $DIR/issue-52843-closure-constrain.rs:9:5\n+  --> $DIR/issue-52843-closure-constrain.rs:12:5\n    |\n LL |     fn _unused() -> Opaque { String::new() }\n    |     ^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-52843-closure-constrain.stderr"}, {"sha": "e4ccb3742bc8808497c75d378b3967339f5d892b", "filename": "src/test/ui/type-alias-impl-trait/issue-52843-closure-constrain.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,6 +1,9 @@\n // Checks to ensure that we properly detect when a closure constrains an opaque type\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "14f4f62d7a5f79bc6bf42c1ae7823d4aa1608c7f", "filename": "src/test/ui/type-alias-impl-trait/issue-52843.full_tait.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-52843.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0277]: the trait bound `T: Default` is not satisfied\n+  --> $DIR/issue-52843.rs:6:15\n+   |\n+LL | type Foo<T> = impl Default;\n+   |               ^^^^^^^^^^^^ the trait `Default` is not implemented for `T`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | type Foo<T: Default> = impl Default;\n+   |           ^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "6dda27f515e7915ad330d81fd47334c0a4795cae", "filename": "src/test/ui/type-alias-impl-trait/issue-52843.min_tait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `T: Default` is not satisfied\n-  --> $DIR/issue-52843.rs:3:15\n+  --> $DIR/issue-52843.rs:6:15\n    |\n LL | type Foo<T> = impl Default;\n    |               ^^^^^^^^^^^^ the trait `Default` is not implemented for `T`", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-52843.stderr"}, {"sha": "14f9db6eae2c78305f26a8c27e1dd627d5237542", "filename": "src/test/ui/type-alias-impl-trait/issue-52843.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n type Foo<T> = impl Default;\n //~^ ERROR: the trait bound `T: Default` is not satisfied"}, {"sha": "38756ce4eb8dcd9a8f5df1b152ead36662c86ef4", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.full_tait.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,19 @@\n+warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-53096.rs:5:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-53096.rs:5:56\n+   |\n+LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n+   |                                                        ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "00c04935e509019384323f3648eeaa758cb820c0", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,6 +1,10 @@\n // check-pass\n #![feature(const_impl_trait, const_fn_fn_ptr_basics)]\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n+//[full_tait]~| WARN incomplete\n \n type Foo = impl Fn() -> usize;\n const fn bar() -> Foo { || 0usize }"}, {"sha": "8c2d713c1607c9eac56a4181e4384c3dc5aa7601", "filename": "src/test/ui/type-alias-impl-trait/issue-53598.full_tait.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,21 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-53598.rs:5:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+  --> $DIR/issue-53598.rs:24:42\n+   |\n+LL |       fn foo<T: Debug>(_: T) -> Self::Item {\n+   |  __________________________________________^\n+LL | |\n+LL | |         S::<T>(Default::default())\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "cb5d6ec80403d34bef3f48d40e5f944436757212", "filename": "src/test/ui/type-alias-impl-trait/issue-53598.min_tait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-53598.rs:21:42\n+  --> $DIR/issue-53598.rs:24:42\n    |\n LL |       fn foo<T: Debug>(_: T) -> Self::Item {\n    |  __________________________________________^", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-53598.stderr"}, {"sha": "1388c587db954a03e24e87c79221035f89dd7fb7", "filename": "src/test/ui/type-alias-impl-trait/issue-53598.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,6 +1,9 @@\n // ignore-tidy-linelength\n // ignore-compare-mode-chalk\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "fe3b739dd0b5f49971c0d07fd73c4d7ceeba5d86", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.full_tait.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,19 @@\n+warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-53678-generator-and-const-fn.rs:6:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-53678-generator-and-const-fn.rs:6:56\n+   |\n+LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n+   |                                                        ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "35001eb70a02237f1c60eaace22cc75580e16624", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,6 +1,11 @@\n // check-pass\n \n-#![feature(const_impl_trait, generators, generator_trait, type_alias_impl_trait)]\n+#![feature(const_impl_trait, generators, generator_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n+//[full_tait]~| WARN incomplete\n \n use std::ops::Generator;\n "}, {"sha": "98778210bfb370c53e7eafc6b5e58d3065d464d5", "filename": "src/test/ui/type-alias-impl-trait/issue-55099-lifetime-inference.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-55099-lifetime-inference.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-55099-lifetime-inference.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-55099-lifetime-inference.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-55099-lifetime-inference.rs:8:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "2c24e9d744ae21648fa99505d8784764960b2e66", "filename": "src/test/ui/type-alias-impl-trait/issue-55099-lifetime-inference.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-55099-lifetime-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-55099-lifetime-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-55099-lifetime-inference.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -3,7 +3,10 @@\n // Tests that we don't incorrectly consider a lifetime to part\n // of the concrete type\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n trait Future {\n }"}, {"sha": "d31c232fc2391b5e91db715bcb535c28a70cf2ed", "filename": "src/test/ui/type-alias-impl-trait/issue-57188-associate-impl-capture.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-57188-associate-impl-capture.rs:7:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "645a4c5696d45a31432b9581f0661fb6df697900", "filename": "src/test/ui/type-alias-impl-trait/issue-57188-associate-impl-capture.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -2,7 +2,10 @@\n \n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n struct Baz<'a> {\n     source: &'a str,"}, {"sha": "d90f328708a7bdeb9a482a1a903952248437ad2f", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.full_tait.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,67 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-57611-trait-alias.rs:8:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: implementation of `FnOnce` is not general enough\n+  --> $DIR/issue-57611-trait-alias.rs:20:16\n+   |\n+LL |     type Bar = impl Baz<Self, Self>;\n+   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n+   |\n+   = note: closure with signature `fn(&'2 X) -> &X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-57611-trait-alias.rs:20:16\n+   |\n+LL |     type Bar = impl Baz<Self, Self>;\n+   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `for<'r> Fn<(&'r X,)>`\n+              found type `Fn<(&'<empty> X,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-57611-trait-alias.rs:28:9\n+   |\n+LL |         |x| x\n+   |         ^^^^^\n+\n+error: implementation of `FnOnce` is not general enough\n+  --> $DIR/issue-57611-trait-alias.rs:20:16\n+   |\n+LL |     type Bar = impl Baz<Self, Self>;\n+   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n+   |\n+   = note: closure with signature `fn(&'2 X) -> &'2 X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-57611-trait-alias.rs:20:16\n+   |\n+LL |     type Bar = impl Baz<Self, Self>;\n+   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `for<'r> Fn<(&'r X,)>`\n+              found type `Fn<(&'<empty> X,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-57611-trait-alias.rs:28:9\n+   |\n+LL |         |x| x\n+   |         ^^^^^\n+\n+error: implementation of `FnOnce` is not general enough\n+  --> $DIR/issue-57611-trait-alias.rs:20:16\n+   |\n+LL |     type Bar = impl Baz<Self, Self>;\n+   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n+   |\n+   = note: closure with signature `fn(&'2 X) -> &'2 X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n+\n+error: aborting due to 5 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "d019f40757eedf9cc8af457cb509f25af57ba602", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.min_tait.stderr", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:17:16\n+  --> $DIR/issue-57611-trait-alias.rs:20:16\n    |\n LL |     type Bar = impl Baz<Self, Self>;\n    |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n@@ -8,21 +8,21 @@ LL |     type Bar = impl Baz<Self, Self>;\n    = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-57611-trait-alias.rs:17:16\n+  --> $DIR/issue-57611-trait-alias.rs:20:16\n    |\n LL |     type Bar = impl Baz<Self, Self>;\n    |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'r> Fn<(&'r X,)>`\n               found type `Fn<(&'<empty> X,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:25:9\n+  --> $DIR/issue-57611-trait-alias.rs:28:9\n    |\n LL |         |x| x\n    |         ^^^^^\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:17:16\n+  --> $DIR/issue-57611-trait-alias.rs:20:16\n    |\n LL |     type Bar = impl Baz<Self, Self>;\n    |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n@@ -31,21 +31,21 @@ LL |     type Bar = impl Baz<Self, Self>;\n    = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-57611-trait-alias.rs:17:16\n+  --> $DIR/issue-57611-trait-alias.rs:20:16\n    |\n LL |     type Bar = impl Baz<Self, Self>;\n    |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'r> Fn<(&'r X,)>`\n               found type `Fn<(&'<empty> X,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:25:9\n+  --> $DIR/issue-57611-trait-alias.rs:28:9\n    |\n LL |         |x| x\n    |         ^^^^^\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:17:16\n+  --> $DIR/issue-57611-trait-alias.rs:20:16\n    |\n LL |     type Bar = impl Baz<Self, Self>;\n    |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.stderr"}, {"sha": "ccc727e0bf01b10349e95ac0a7378fdbeb2518ba", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -3,7 +3,10 @@\n // FIXME: This should compile, but it currently doesn't\n \n #![feature(trait_alias)]\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n trait Foo {\n     type Bar: Baz<Self, Self>;"}, {"sha": "f92a5997a9bf3607ab6b8d7fffb4ee428d5aae29", "filename": "src/test/ui/type-alias-impl-trait/issue-57700.full_tait.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,21 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-57700.rs:6:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: type parameter `impl Deref<Target = Self>` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+  --> $DIR/issue-57700.rs:20:58\n+   |\n+LL |       fn foo(self: impl Deref<Target = Self>) -> Self::Bar {\n+   |  __________________________________________________________^\n+LL | |\n+LL | |         self\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "1aaa42b99ac61ea8a77913a45289dbe15f85fa7f", "filename": "src/test/ui/type-alias-impl-trait/issue-57700.min_tait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `impl Deref<Target = Self>` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-57700.rs:17:58\n+  --> $DIR/issue-57700.rs:20:58\n    |\n LL |       fn foo(self: impl Deref<Target = Self>) -> Self::Bar {\n    |  __________________________________________________________^", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-57700.stderr"}, {"sha": "c7a123ad24056466e37d172a35a28a0484773cb4", "filename": "src/test/ui/type-alias-impl-trait/issue-57700.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,7 +1,10 @@\n // ignore-tidy-linelength\n // ignore-compare-mode-chalk\n #![feature(arbitrary_self_types)]\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n use std::ops::Deref;\n "}, {"sha": "b35361c89a485e442ee310dac4a641eff2bfcb48", "filename": "src/test/ui/type-alias-impl-trait/issue-57807-associated-type.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-57807-associated-type.rs:7:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "0a021149e700d2ccae596d3ad79ee2ce58bb4cbe", "filename": "src/test/ui/type-alias-impl-trait/issue-57807-associated-type.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -2,7 +2,10 @@\n // that we properly unify associated types within\n // a type alias impl trait\n // check-pass\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n trait Bar {\n     type A;"}, {"sha": "f0fd5f2f056ab8f76e6876681d9863c68ca3e794", "filename": "src/test/ui/type-alias-impl-trait/issue-58887.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-58887.rs:5:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "f0803a663de39d57799949df2540c0b29629a9a6", "filename": "src/test/ui/type-alias-impl-trait/issue-58887.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,6 +1,9 @@\n // run-pass\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n trait UnwrapItemsExt {\n     type Iter;"}, {"sha": "164b8881714e7e0a96dd1507edc9e73b713e90f4", "filename": "src/test/ui/type-alias-impl-trait/issue-58951.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-58951.rs:5:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "3b1ea0d676bb41c8bf046645c2c4676e83dae6f6", "filename": "src/test/ui/type-alias-impl-trait/issue-58951.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,6 +1,9 @@\n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n type A = impl Iterator;\n "}, {"sha": "461b8517ca4bd9adc9c042405d896b995c1988e3", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -5,7 +5,7 @@ LL |     type Item = impl Bug;\n    |                 ^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `(): Bug` is not satisfied\n   --> $DIR/issue-60371.rs:10:17"}, {"sha": "31f7a77818c77c237cba4ae31baea3942463b7e6", "filename": "src/test/ui/type-alias-impl-trait/issue-60407.full_tait.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,19 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-60407.rs:5:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-60407.rs:5:55\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "e2a2fb838b9dd453fa5d0d9d390f1b16a3108709", "filename": "src/test/ui/type-alias-impl-trait/issue-60407.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,6 +1,10 @@\n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+//[full_tait]~^ WARN incomplete\n+//[full_tait]~| WARN incomplete\n \n type Debuggable = impl core::fmt::Debug;\n "}, {"sha": "72b6b0648f98f9bb2b42c235364309cbc5f32c2b", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.full_tait.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-60564.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/issue-60564.rs:22:34\n+   |\n+LL |     fn iter_bits(self, n: u8) -> Self::BitsIter {\n+   |                                  ^^^^^^^^^^^^^^\n+   |\n+note: used non-generic type `u8` for generic parameter\n+  --> $DIR/issue-60564.rs:11:25\n+   |\n+LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n+   |                         ^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "72668c8056fc576a177b6e757bf811648d9b7e78", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-60564.rs:19:34\n+  --> $DIR/issue-60564.rs:22:34\n    |\n LL |     fn iter_bits(self, n: u8) -> Self::BitsIter {\n    |                                  ^^^^^^^^^^^^^^\n    |\n note: used non-generic type `u8` for generic parameter\n-  --> $DIR/issue-60564.rs:8:25\n+  --> $DIR/issue-60564.rs:11:25\n    |\n LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n    |                         ^", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-60564.stderr"}, {"sha": "10fbbd2ef292e95513bce05f3fde05cfd54a55f0", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n trait IterBits {\n     type BitsIter: Iterator<Item = u8>;"}, {"sha": "1fc38d2f549a13b29573c7faf0b5b3ce01d05781", "filename": "src/test/ui/type-alias-impl-trait/issue-62000-associate-impl-trait-lifetimes.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-62000-associate-impl-trait-lifetimes.rs:7:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "4d9ca47b9474a7e132944e57b44a212ada9aa7d8", "filename": "src/test/ui/type-alias-impl-trait/issue-62000-associate-impl-trait-lifetimes.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -2,7 +2,10 @@\n \n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n trait MyTrait {\n     type AssocType: Send;"}, {"sha": "1c6759e3454b568bb7727faf430ec3d3df59baf6", "filename": "src/test/ui/type-alias-impl-trait/issue-63263-closure-return.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-63263-closure-return.rs:9:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "3b8f6afcb00542df50c29465082f293ddceb4904", "filename": "src/test/ui/type-alias-impl-trait/issue-63263-closure-return.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -4,7 +4,8 @@\n \n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(min_type_alias_impl_trait, type_alias_impl_trait)]\n+//~^ WARN incomplete\n \n pub type Closure = impl FnOnce();\n "}, {"sha": "e1f4ecd3b98144ea540dd188a92958cff061a6f4", "filename": "src/test/ui/type-alias-impl-trait/issue-63263-closure-return.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-63263-closure-return.rs:7:39\n+   |\n+LL | #![feature(min_type_alias_impl_trait, type_alias_impl_trait)]\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "f544f61df97f387b97ac72cbd512b239a37b0de7", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.full_tait.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,21 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-63279.rs:5:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0271]: type mismatch resolving `<[closure@$DIR/issue-63279.rs:11:5: 11:28] as FnOnce<()>>::Output == ()`\n+  --> $DIR/issue-63279.rs:8:16\n+   |\n+LL | type Closure = impl FnOnce();\n+   |                ^^^^^^^^^^^^^ expected opaque type, found `()`\n+   |\n+   = note: expected opaque type `impl FnOnce<()>`\n+                found unit type `()`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "3ecca1270a9672032254b68142602228fb9b2d8a", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n-error[E0271]: type mismatch resolving `<[closure@$DIR/issue-63279.rs:8:5: 8:28] as FnOnce<()>>::Output == ()`\n-  --> $DIR/issue-63279.rs:5:16\n+error[E0271]: type mismatch resolving `<[closure@$DIR/issue-63279.rs:11:5: 11:28] as FnOnce<()>>::Output == ()`\n+  --> $DIR/issue-63279.rs:8:16\n    |\n LL | type Closure = impl FnOnce();\n    |                ^^^^^^^^^^^^^ expected opaque type, found `()`", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-63279.stderr"}, {"sha": "3b0bddf8f7bf9f286400199105effa858c2406ac", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,6 +1,9 @@\n // compile-flags: -Zsave-analysis\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n type Closure = impl FnOnce(); //~ ERROR: type mismatch resolving\n "}, {"sha": "fc8d8147167b37a6942b175cd1b78c6c1d9cd8fa", "filename": "src/test/ui/type-alias-impl-trait/issue-63677-type-alias-coherence.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63677-type-alias-coherence.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63677-type-alias-coherence.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63677-type-alias-coherence.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-63677-type-alias-coherence.rs:7:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "62d11ad38d62d8d3022117a4b5bcc0fe04a1d74e", "filename": "src/test/ui/type-alias-impl-trait/issue-63677-type-alias-coherence.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63677-type-alias-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63677-type-alias-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63677-type-alias-coherence.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -2,7 +2,10 @@\n // Regression test for issue #63677 - ensure that\n // coherence checking can properly handle 'impl trait'\n // in type aliases\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n pub trait Trait {}\n pub struct S1<T>(T);"}, {"sha": "8a51c14a0087790080cd8fb58f11c19a74277f04", "filename": "src/test/ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,19 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:6:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:6:55\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "09709639c7be01ab9d4073eae9586f5c3ca2be88", "filename": "src/test/ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,7 +1,11 @@\n // compile-flags: -Zsave-analysis\n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait, rustc_attrs)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+//[full_tait]~^ WARN incomplete\n+//[full_tait]~| WARN incomplete\n \n type T = impl Sized;\n // The concrete type referred by impl-trait-type-alias(`T`) is guaranteed"}, {"sha": "ab05e4b1cbecaabb84b0cc023e596c774bc3a2d2", "filename": "src/test/ui/type-alias-impl-trait/issue-65918.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65918.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65918.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65918.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -2,7 +2,10 @@\n \n // build-pass\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n use std::marker::PhantomData;\n "}, {"sha": "2fc46574512cce4742bd1c51f9ad751ad0793b7e", "filename": "src/test/ui/type-alias-impl-trait/issue-66580-closure-coherence.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-66580-closure-coherence.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-66580-closure-coherence.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-66580-closure-coherence.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-66580-closure-coherence.rs:7:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "7b3ddc7886841da8e674d20e35988fb1b8ec32fa", "filename": "src/test/ui/type-alias-impl-trait/issue-66580-closure-coherence.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-66580-closure-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-66580-closure-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-66580-closure-coherence.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -2,7 +2,10 @@\n // Ensures that we don't try to determine whether a closure\n // is foreign when it's the underlying type of an opaque type\n // check-pass\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n type Closure = impl FnOnce();\n "}, {"sha": "81e27da0949af562a13a54e0f9313c1625aec416", "filename": "src/test/ui/type-alias-impl-trait/issue-67844-nested-opaque.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-67844-nested-opaque.rs:8:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "b9e29a01cddf9159f7c79e6941ad7614d8c16242", "filename": "src/test/ui/type-alias-impl-trait/issue-67844-nested-opaque.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -3,7 +3,10 @@\n // Ensures that we properly handle nested TAIT occurrences\n // with generic parameters\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n trait WithAssoc { type AssocType; }\n "}, {"sha": "8b1ad19ac0cbffb1ebff0f12f189d5ac76bdd2e4", "filename": "src/test/ui/type-alias-impl-trait/issue-68368-non-defining-use.full_tait.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-68368-non-defining-use.rs:7:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/issue-68368-non-defining-use.rs:11:15\n+   |\n+LL | fn f<'a>() -> Alias<'a, ()> {}\n+   |               ^^^^^^^^^^^^^\n+   |\n+note: used non-generic type `()` for generic parameter\n+  --> $DIR/issue-68368-non-defining-use.rs:10:16\n+   |\n+LL | type Alias<'a, U> = impl Trait<U>;\n+   |                ^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "01ae457851f2461efdedb2cebc71bb71de97b74a", "filename": "src/test/ui/type-alias-impl-trait/issue-68368-non-defining-use.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-68368-non-defining-use.rs:8:15\n+  --> $DIR/issue-68368-non-defining-use.rs:11:15\n    |\n LL | fn f<'a>() -> Alias<'a, ()> {}\n    |               ^^^^^^^^^^^^^\n    |\n note: used non-generic type `()` for generic parameter\n-  --> $DIR/issue-68368-non-defining-use.rs:7:16\n+  --> $DIR/issue-68368-non-defining-use.rs:10:16\n    |\n LL | type Alias<'a, U> = impl Trait<U>;\n    |                ^", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-68368-non-defining-use.stderr"}, {"sha": "92465076733bc5e36bae6a2c0bea925d3e6a0ca2", "filename": "src/test/ui/type-alias-impl-trait/issue-68368-non-defining-use.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -2,7 +2,10 @@\n // Ensures that we don't ICE when emitting an error\n // for a non-defining use when lifetimes are involved\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n trait Trait<T> {}\n type Alias<'a, U> = impl Trait<U>;\n fn f<'a>() -> Alias<'a, ()> {}"}, {"sha": "7f120af2408bf9d6c1848eae9d79d97213110375", "filename": "src/test/ui/type-alias-impl-trait/issue-69136-inner-lifetime-resolve-error.full_tait.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,20 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-69136-inner-lifetime-resolve-error.rs:5:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/issue-69136-inner-lifetime-resolve-error.rs:20:65\n+   |\n+LL | type Return<A> = impl WithAssoc<A, AssocType = impl SomeTrait + 'a>;\n+   |             -                                                   ^^ undeclared lifetime\n+   |             |\n+   |             help: consider introducing lifetime `'a` here: `'a,`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0261`."}, {"sha": "e1fc94c3472a3bdfa295c354b1c5a00479abdf6e", "filename": "src/test/ui/type-alias-impl-trait/issue-69136-inner-lifetime-resolve-error.min_tait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/issue-69136-inner-lifetime-resolve-error.rs:17:65\n+  --> $DIR/issue-69136-inner-lifetime-resolve-error.rs:20:65\n    |\n LL | type Return<A> = impl WithAssoc<A, AssocType = impl SomeTrait + 'a>;\n    |             -                                                   ^^ undeclared lifetime", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-69136-inner-lifetime-resolve-error.stderr"}, {"sha": "61161d44e51ab6891a519d8785855cb7c9b3a670", "filename": "src/test/ui/type-alias-impl-trait/issue-69136-inner-lifetime-resolve-error.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,6 +1,9 @@\n // Regression test for #69136\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n trait SomeTrait {}\n "}, {"sha": "61e2e20dfd043fc769acb7d56cadb21847c282eb", "filename": "src/test/ui/type-alias-impl-trait/issue-69136-inner-lifetime-resolve-ok.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-ok.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-ok.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-ok.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-69136-inner-lifetime-resolve-ok.rs:7:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "01df967a4a51560109df3a5d52817034deebdeac", "filename": "src/test/ui/type-alias-impl-trait/issue-69136-inner-lifetime-resolve-ok.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-ok.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -2,7 +2,10 @@\n \n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n trait SomeTrait {}\n "}, {"sha": "9fe2e2cf88ee937dd41c7f496a74ec151d9591d1", "filename": "src/test/ui/type-alias-impl-trait/issue-70121.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-70121.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-70121.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-70121.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-70121.rs:5:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "150eca46975da48417113bc73467d2619e64ba4d", "filename": "src/test/ui/type-alias-impl-trait/issue-70121.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-70121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-70121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-70121.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,6 +1,9 @@\n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n pub type Successors<'a> = impl Iterator<Item = &'a ()>;\n "}, {"sha": "e7729e47c36ddedccd741986bec58e31bad08cfd", "filename": "src/test/ui/type-alias-impl-trait/issue-74244.full_tait.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,18 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-74244.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-74244.rs:12:6\n+   |\n+LL | impl<T> Allocator for DefaultAllocator {\n+   |      ^ unconstrained type parameter\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "6ee8c58826dd4ee4753ce590913108dba74f9154", "filename": "src/test/ui/type-alias-impl-trait/issue-74244.min_tait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74244.rs:9:6\n+  --> $DIR/issue-74244.rs:12:6\n    |\n LL | impl<T> Allocator for DefaultAllocator {\n    |      ^ unconstrained type parameter", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-74244.stderr"}, {"sha": "890eb23ef951145f3f2b8a129d2b5d236dd737ff", "filename": "src/test/ui/type-alias-impl-trait/issue-74244.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n trait Allocator {\n     type Buffer;"}, {"sha": "0880136d71b01798c3bc958ff80c91bc9a7acd6a", "filename": "src/test/ui/type-alias-impl-trait/issue-74761.full_tait.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,24 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-74761.rs:4:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-74761.rs:11:6\n+   |\n+LL | impl<'a, 'b> A for () {\n+   |      ^^ unconstrained lifetime parameter\n+\n+error[E0207]: the lifetime parameter `'b` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-74761.rs:11:10\n+   |\n+LL | impl<'a, 'b> A for () {\n+   |          ^^ unconstrained lifetime parameter\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "20ebdd9cb504c98ee03ef6059f3e09c9caf13c96", "filename": "src/test/ui/type-alias-impl-trait/issue-74761.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74761.rs:8:6\n+  --> $DIR/issue-74761.rs:11:6\n    |\n LL | impl<'a, 'b> A for () {\n    |      ^^ unconstrained lifetime parameter\n \n error[E0207]: the lifetime parameter `'b` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74761.rs:8:10\n+  --> $DIR/issue-74761.rs:11:10\n    |\n LL | impl<'a, 'b> A for () {\n    |          ^^ unconstrained lifetime parameter", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-74761.stderr"}, {"sha": "66bb079b25a813a380cfecbd9bfaa637eb8569f1", "filename": "src/test/ui/type-alias-impl-trait/issue-74761.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,8 @@\n #![feature(member_constraints)]\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n pub trait A {\n     type B;"}, {"sha": "8fb4a3b662565f29a369a3122170aebce9ec04cd", "filename": "src/test/ui/type-alias-impl-trait/issue-76202-trait-impl-for-tait.full_tait.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-76202-trait-impl-for-tait.rs:6:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: cannot implement trait on type alias impl trait\n+  --> $DIR/issue-76202-trait-impl-for-tait.rs:19:1\n+   |\n+LL | impl Test for F {\n+   | ^^^^^^^^^^^^^^^\n+   |\n+note: type alias impl trait defined here\n+  --> $DIR/issue-76202-trait-impl-for-tait.rs:12:10\n+   |\n+LL | type F = impl Dummy;\n+   |          ^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "3754553772c2543e3e303d8314e1814f9b830aac", "filename": "src/test/ui/type-alias-impl-trait/issue-76202-trait-impl-for-tait.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error: cannot implement trait on type alias impl trait\n-  --> $DIR/issue-76202-trait-impl-for-tait.rs:16:1\n+  --> $DIR/issue-76202-trait-impl-for-tait.rs:19:1\n    |\n LL | impl Test for F {\n    | ^^^^^^^^^^^^^^^\n    |\n note: type alias impl trait defined here\n-  --> $DIR/issue-76202-trait-impl-for-tait.rs:9:10\n+  --> $DIR/issue-76202-trait-impl-for-tait.rs:12:10\n    |\n LL | type F = impl Dummy;\n    |          ^^^^^^^^^^", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-76202-trait-impl-for-tait.stderr"}, {"sha": "276c770fe486f31ce934c109c7f3d3f51bf87ea3", "filename": "src/test/ui/type-alias-impl-trait/issue-76202-trait-impl-for-tait.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,7 +1,10 @@\n // Regression test for issue #76202\n // Tests that we don't ICE when we have a trait impl on a TAIT.\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n trait Dummy {}\n impl Dummy for () {}"}, {"sha": "5e4307be17a0426a22c8049f66b8e73a05bdf8f4", "filename": "src/test/ui/type-alias-impl-trait/nested_type_alias_impl_trait.full_tait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested_type_alias_impl_trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested_type_alias_impl_trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested_type_alias_impl_trait.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/nested_type_alias_impl_trait.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "f03563dfed6d27709664929d798b9f57d00df636", "filename": "src/test/ui/type-alias-impl-trait/nested_type_alias_impl_trait.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested_type_alias_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested_type_alias_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested_type_alias_impl_trait.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n // build-pass (FIXME(62277): could be check-pass?)\n mod my_mod {\n   use std::fmt::Debug;"}, {"sha": "45c95469e95c24740b20bdfa94a19d0759d121c0", "filename": "src/test/ui/type-alias-impl-trait/never_reveal_concrete_type.full_tait.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,33 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/never_reveal_concrete_type.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0308]: mismatched types\n+  --> $DIR/never_reveal_concrete_type.rs:16:27\n+   |\n+LL | type NoReveal = impl std::fmt::Debug;\n+   |                 -------------------- the found opaque type\n+...\n+LL |     let _: &'static str = x;\n+   |            ------------   ^ expected `&str`, found opaque type\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected reference `&'static str`\n+            found opaque type `impl Debug`\n+\n+error[E0605]: non-primitive cast: `impl Debug` as `&'static str`\n+  --> $DIR/never_reveal_concrete_type.rs:17:13\n+   |\n+LL |     let _ = x as &'static str;\n+   |             ^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+Some errors have detailed explanations: E0308, E0605.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "530f8876cf20056b2944e512d298dda7527f5903", "filename": "src/test/ui/type-alias-impl-trait/never_reveal_concrete_type.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/never_reveal_concrete_type.rs:13:27\n+  --> $DIR/never_reveal_concrete_type.rs:16:27\n    |\n LL | type NoReveal = impl std::fmt::Debug;\n    |                 -------------------- the found opaque type\n@@ -13,7 +13,7 @@ LL |     let _: &'static str = x;\n             found opaque type `impl Debug`\n \n error[E0605]: non-primitive cast: `impl Debug` as `&'static str`\n-  --> $DIR/never_reveal_concrete_type.rs:14:13\n+  --> $DIR/never_reveal_concrete_type.rs:17:13\n    |\n LL |     let _ = x as &'static str;\n    |             ^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object", "previous_filename": "src/test/ui/type-alias-impl-trait/never_reveal_concrete_type.stderr"}, {"sha": "c555b9cdded8ab7c893e7a611f44df2916963442", "filename": "src/test/ui/type-alias-impl-trait/never_reveal_concrete_type.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "faddecb21766446bb7bd398efc2aec7a9ae8a4e7", "filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.full_tait.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/no_inferrable_concrete_type.rs:6:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: could not find defining uses\n+  --> $DIR/no_inferrable_concrete_type.rs:9:12\n+   |\n+LL | type Foo = impl Copy;\n+   |            ^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "3194bd7610712d77379be1be3f246e591f743677", "filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.min_tait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error: could not find defining uses\n-  --> $DIR/no_inferrable_concrete_type.rs:6:12\n+  --> $DIR/no_inferrable_concrete_type.rs:9:12\n    |\n LL | type Foo = impl Copy;\n    |            ^^^^^^^^^", "previous_filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.stderr"}, {"sha": "4fdaa033fb0404628e4faae304d35ac64c097ff1", "filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,7 +1,10 @@\n // Issue 52985: user code provides no use case that allows a type alias `impl Trait`\n // We now emit a 'could not find defining uses' error\n \n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n type Foo = impl Copy; //~ could not find defining uses\n "}, {"sha": "8699b21929ff2cdaf1dc406dec5d616cba006ac6", "filename": "src/test/ui/type-alias-impl-trait/no_revealing_outside_defining_module.full_tait.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,40 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/no_revealing_outside_defining_module.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0308]: mismatched types\n+  --> $DIR/no_revealing_outside_defining_module.rs:18:19\n+   |\n+LL |     pub type Boo = impl ::std::fmt::Debug;\n+   |                    ---------------------- the found opaque type\n+...\n+LL |     let _: &str = bomp();\n+   |            ----   ^^^^^^ expected `&str`, found opaque type\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected reference `&str`\n+            found opaque type `impl Debug`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/no_revealing_outside_defining_module.rs:22:5\n+   |\n+LL |     pub type Boo = impl ::std::fmt::Debug;\n+   |                    ---------------------- the expected opaque type\n+...\n+LL | fn bomp() -> boo::Boo {\n+   |              -------- expected `impl Debug` because of return type\n+LL |     \"\"\n+   |     ^^ expected opaque type, found `&str`\n+   |\n+   = note: expected opaque type `impl Debug`\n+                found reference `&'static str`\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "faaab4393521e340af8b02fc34c6428f8c67493b", "filename": "src/test/ui/type-alias-impl-trait/no_revealing_outside_defining_module.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/no_revealing_outside_defining_module.rs:15:19\n+  --> $DIR/no_revealing_outside_defining_module.rs:18:19\n    |\n LL |     pub type Boo = impl ::std::fmt::Debug;\n    |                    ---------------------- the found opaque type\n@@ -13,7 +13,7 @@ LL |     let _: &str = bomp();\n             found opaque type `impl Debug`\n \n error[E0308]: mismatched types\n-  --> $DIR/no_revealing_outside_defining_module.rs:19:5\n+  --> $DIR/no_revealing_outside_defining_module.rs:22:5\n    |\n LL |     pub type Boo = impl ::std::fmt::Debug;\n    |                    ---------------------- the expected opaque type", "previous_filename": "src/test/ui/type-alias-impl-trait/no_revealing_outside_defining_module.stderr"}, {"sha": "566c311b9bdf30f75286e3e1635663ffb6147f6b", "filename": "src/test/ui/type-alias-impl-trait/no_revealing_outside_defining_module.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n fn main() {}\n "}, {"sha": "76e3500e8a90ec238e5ffacbf6d82057be662721", "filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.full_tait.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/not_a_defining_use.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: non-defining opaque type use in defining scope\n+  --> $DIR/not_a_defining_use.rs:12:27\n+   |\n+LL | fn two<T: Debug>(t: T) -> Two<T, u32> {\n+   |                           ^^^^^^^^^^^\n+   |\n+note: used non-generic type `u32` for generic parameter\n+  --> $DIR/not_a_defining_use.rs:10:13\n+   |\n+LL | type Two<T, U> = impl Debug;\n+   |             ^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "f5dbfecc742f5aec2d83aca3a7e8541a1307e8ae", "filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.min_tait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/not_a_defining_use.rs:9:27\n+  --> $DIR/not_a_defining_use.rs:12:27\n    |\n LL | fn two<T: Debug>(t: T) -> Two<T, u32> {\n    |                           ^^^^^^^^^^^\n    |\n note: used non-generic type `u32` for generic parameter\n-  --> $DIR/not_a_defining_use.rs:7:13\n+  --> $DIR/not_a_defining_use.rs:10:13\n    |\n LL | type Two<T, U> = impl Debug;\n    |             ^", "previous_filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.stderr"}, {"sha": "e58f33fcff48de9e594292cc2750133a3c238e9b", "filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "38f086ec45d688ac876c6bb4fe99ae64552f1738", "filename": "src/test/ui/type-alias-impl-trait/not_well_formed.full_tait.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,18 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/not_well_formed.rs:3:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0220]: associated type `Assoc` not found for `V`\n+  --> $DIR/not_well_formed.rs:13:29\n+   |\n+LL | type Foo<V> = impl Trait<V::Assoc>;\n+   |                             ^^^^^ associated type `Assoc` not found\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0220`."}, {"sha": "3bac38cef7da89e396149d02097d43b20e461062", "filename": "src/test/ui/type-alias-impl-trait/not_well_formed.min_tait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error[E0220]: associated type `Assoc` not found for `V`\n-  --> $DIR/not_well_formed.rs:10:29\n+  --> $DIR/not_well_formed.rs:13:29\n    |\n LL | type Foo<V> = impl Trait<V::Assoc>;\n    |                             ^^^^^ associated type `Assoc` not found", "previous_filename": "src/test/ui/type-alias-impl-trait/not_well_formed.stderr"}, {"sha": "6d511c581888cd9a54b1274be0a52f20fcd192c3", "filename": "src/test/ui/type-alias-impl-trait/not_well_formed.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,7 @@\n-#![feature(type_alias_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+//[full_tait]~^ WARN incomplete\n \n fn main() {\n }"}, {"sha": "b560c0c918a86df37acd223d89a2b04776fe7152", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.full_tait.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,25 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/structural-match-no-leak.rs:4:32\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/structural-match-no-leak.rs:4:55\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+\n+error: `impl Send` cannot be used in patterns\n+  --> $DIR/structural-match-no-leak.rs:19:9\n+   |\n+LL |         LEAK_FREE => (),\n+   |         ^^^^^^^^^\n+\n+error: aborting due to previous error; 2 warnings emitted\n+"}, {"sha": "f1ac45ba5db87c6a4fd0d20254654ad1a44c4f7d", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.min_tait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error: `impl Send` cannot be used in patterns\n-  --> $DIR/structural-match-no-leak.rs:14:9\n+  --> $DIR/structural-match-no-leak.rs:19:9\n    |\n LL |         LEAK_FREE => (),\n    |         ^^^^^^^^^", "previous_filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.stderr"}, {"sha": "34d9663223bb0653239a7fc2a597d53725f09605", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,4 +1,9 @@\n-#![feature(const_impl_trait, type_alias_impl_trait)]\n+#![feature(const_impl_trait)]\n+// revisions: min_tait full_tait\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+//[full_tait]~^ WARN incomplete\n+//[full_tait]~| WARN incomplete\n \n type Bar = impl Send;\n "}, {"sha": "4202d0fff43b4523e26f748a41db034ddae43a60", "filename": "src/test/ui/type-alias-impl-trait/structural-match.full_tait.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.full_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/structural-match.rs:4:36\n+   |\n+LL | #![cfg_attr(not(min_tait), feature(type_alias_impl_trait, min_type_alias_impl_trait))]\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error: `impl Send` cannot be used in patterns\n+  --> $DIR/structural-match.rs:19:9\n+   |\n+LL |         VALUE => (),\n+   |         ^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "f63b1fb23df7e67003203de2aa1a56ff22d5f8c0", "filename": "src/test/ui/type-alias-impl-trait/structural-match.min_tait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7df1956a8c78652aedee67172d7d52f395d785/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.min_tait.stderr?ref=1f7df1956a8c78652aedee67172d7d52f395d785", "patch": "@@ -1,5 +1,5 @@\n error: `impl Send` cannot be used in patterns\n-  --> $DIR/structural-match.rs:15:9\n+  --> $DIR/structural-match.rs:19:9\n    |\n LL |         VALUE => (),\n    |         ^^^^^", "previous_filename": "src/test/ui/type-alias-impl-trait/structural-match.stderr"}]}