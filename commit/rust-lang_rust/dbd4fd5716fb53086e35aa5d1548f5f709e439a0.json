{"sha": "dbd4fd5716fb53086e35aa5d1548f5f709e439a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZDRmZDU3MTZmYjUzMDg2ZTM1YWE1ZDE1NDhmNWY3MDllNDM5YTA=", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-07-03T18:20:01Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-07-18T14:55:57Z"}, "message": "feat(rustc_lint): add `dyn_drop`\n\nBased on the conversation in #86747.\n\nExplanation\n-----------\n\nA trait object bound of the form `dyn Drop` is most likely misleading\nand not what the programmer intended.\n\n`Drop` bounds do not actually indicate whether a type can be trivially\ndropped or not, because a composite type containing `Drop` types does\nnot necessarily implement `Drop` itself. Na\u00efvely, one might be tempted\nto write a deferred drop system, to pull cleaning up memory out of a\nlatency-sensitive code path, using `dyn Drop` trait objects. However,\nthis breaks down e.g. when `T` is `String`, which does not implement\n`Drop`, but should probably be accepted.\n\nTo write a trait object bound that accepts anything, use a placeholder\ntrait with a blanket implementation.\n\n```rust\ntrait Placeholder {}\nimpl<T> Placeholder for T {}\nfn foo(_x: Box<dyn Placeholder>) {}\n```", "tree": {"sha": "370fcc1d53a7ba536b430e99a0c621b676b6eeb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/370fcc1d53a7ba536b430e99a0c621b676b6eeb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbd4fd5716fb53086e35aa5d1548f5f709e439a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbd4fd5716fb53086e35aa5d1548f5f709e439a0", "html_url": "https://github.com/rust-lang/rust/commit/dbd4fd5716fb53086e35aa5d1548f5f709e439a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbd4fd5716fb53086e35aa5d1548f5f709e439a0/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18073052d8c3544ccb73effd289ed3acda0d66c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/18073052d8c3544ccb73effd289ed3acda0d66c0", "html_url": "https://github.com/rust-lang/rust/commit/18073052d8c3544ccb73effd289ed3acda0d66c0"}], "stats": {"total": 117, "additions": 116, "deletions": 1}, "files": [{"sha": "e713ce7c71bec3bf4ff1fdae9a752fbb7084bc5f", "filename": "compiler/rustc_lint/src/traits.rs", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/dbd4fd5716fb53086e35aa5d1548f5f709e439a0/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd4fd5716fb53086e35aa5d1548f5f709e439a0/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs?ref=dbd4fd5716fb53086e35aa5d1548f5f709e439a0", "patch": "@@ -37,10 +37,47 @@ declare_lint! {\n     \"bounds of the form `T: Drop` are useless\"\n }\n \n+declare_lint! {\n+    /// The `dyn_drop` lint checks for trait objects with `std::ops::Drop`.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// fn foo(_x: Box<dyn Drop>) {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// A trait object bound of the form `dyn Drop` is most likely misleading\n+    /// and not what the programmer intended.\n+    ///\n+    /// `Drop` bounds do not actually indicate whether a type can be trivially\n+    /// dropped or not, because a composite type containing `Drop` types does\n+    /// not necessarily implement `Drop` itself. Na\u00efvely, one might be tempted\n+    /// to write a deferred drop system, to pull cleaning up memory out of a\n+    /// latency-sensitive code path, using `dyn Drop` trait objects. However,\n+    /// this breaks down e.g. when `T` is `String`, which does not implement\n+    /// `Drop`, but should probably be accepted.\n+    ///\n+    /// To write a trait object bound that accepts anything, use a placeholder\n+    /// trait with a blanket implementation.\n+    ///\n+    /// ```rust\n+    /// trait Placeholder {}\n+    /// impl<T> Placeholder for T {}\n+    /// fn foo(_x: Box<dyn Placeholder>) {}\n+    /// ```\n+    pub DYN_DROP,\n+    Warn,\n+    \"trait objects of the form `dyn Drop` are useless\"\n+}\n+\n declare_lint_pass!(\n     /// Lint for bounds of the form `T: Drop`, which usually\n     /// indicate an attempt to emulate `std::mem::needs_drop`.\n-    DropTraitConstraints => [DROP_BOUNDS]\n+    DropTraitConstraints => [DROP_BOUNDS, DYN_DROP]\n );\n \n impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n@@ -75,4 +112,28 @@ impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n             }\n         }\n     }\n+\n+    fn check_ty(&mut self, cx: &LateContext<'_>, ty: &'tcx hir::Ty<'tcx>) {\n+        let bounds = match &ty.kind {\n+            hir::TyKind::TraitObject(bounds, _lifetime, _syntax) => bounds,\n+            _ => return,\n+        };\n+        for bound in &bounds[..] {\n+            let def_id = bound.trait_ref.trait_def_id();\n+            if cx.tcx.lang_items().drop_trait() == def_id {\n+                cx.struct_span_lint(DYN_DROP, bound.span, |lint| {\n+                    let needs_drop = match cx.tcx.get_diagnostic_item(sym::needs_drop) {\n+                        Some(needs_drop) => needs_drop,\n+                        None => return,\n+                    };\n+                    let msg = format!(\n+                        \"types that do not implement `Drop` can still have drop glue, consider \\\n+                        instead using `{}` to detect whether a type is trivially dropped\",\n+                        cx.tcx.def_path_str(needs_drop)\n+                    );\n+                    lint.build(&msg).emit()\n+                });\n+            }\n+        }\n+    }\n }"}, {"sha": "e1668a3f188d59dd8771267c748cf521a52f25c9", "filename": "src/test/ui/dyn-drop/dyn-drop.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dbd4fd5716fb53086e35aa5d1548f5f709e439a0/src%2Ftest%2Fui%2Fdyn-drop%2Fdyn-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd4fd5716fb53086e35aa5d1548f5f709e439a0/src%2Ftest%2Fui%2Fdyn-drop%2Fdyn-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-drop%2Fdyn-drop.rs?ref=dbd4fd5716fb53086e35aa5d1548f5f709e439a0", "patch": "@@ -0,0 +1,16 @@\n+#![deny(dyn_drop)]\n+#![allow(bare_trait_objects)]\n+fn foo(_: Box<dyn Drop>) {} //~ ERROR\n+fn bar(_: &dyn Drop) {} //~ERROR\n+fn baz(_: *mut Drop) {} //~ ERROR\n+struct Foo {\n+  _x: Box<dyn Drop> //~ ERROR\n+}\n+trait Bar {\n+  type T: ?Sized;\n+}\n+struct Baz {}\n+impl Bar for Baz {\n+  type T = dyn Drop; //~ ERROR\n+}\n+fn main() {}"}, {"sha": "1b1dbc4d12d4c2c7cb27805ea18ec7f73feb1285", "filename": "src/test/ui/dyn-drop/dyn-drop.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/dbd4fd5716fb53086e35aa5d1548f5f709e439a0/src%2Ftest%2Fui%2Fdyn-drop%2Fdyn-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbd4fd5716fb53086e35aa5d1548f5f709e439a0/src%2Ftest%2Fui%2Fdyn-drop%2Fdyn-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-drop%2Fdyn-drop.stderr?ref=dbd4fd5716fb53086e35aa5d1548f5f709e439a0", "patch": "@@ -0,0 +1,38 @@\n+error: types that do not implement `Drop` can still have drop glue, consider instead using `std::mem::needs_drop` to detect whether a type is trivially dropped\n+  --> $DIR/dyn-drop.rs:3:19\n+   |\n+LL | fn foo(_: Box<dyn Drop>) {}\n+   |                   ^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/dyn-drop.rs:1:9\n+   |\n+LL | #![deny(dyn_drop)]\n+   |         ^^^^^^^^\n+\n+error: types that do not implement `Drop` can still have drop glue, consider instead using `std::mem::needs_drop` to detect whether a type is trivially dropped\n+  --> $DIR/dyn-drop.rs:4:16\n+   |\n+LL | fn bar(_: &dyn Drop) {}\n+   |                ^^^^\n+\n+error: types that do not implement `Drop` can still have drop glue, consider instead using `std::mem::needs_drop` to detect whether a type is trivially dropped\n+  --> $DIR/dyn-drop.rs:5:16\n+   |\n+LL | fn baz(_: *mut Drop) {}\n+   |                ^^^^\n+\n+error: types that do not implement `Drop` can still have drop glue, consider instead using `std::mem::needs_drop` to detect whether a type is trivially dropped\n+  --> $DIR/dyn-drop.rs:7:15\n+   |\n+LL |   _x: Box<dyn Drop>\n+   |               ^^^^\n+\n+error: types that do not implement `Drop` can still have drop glue, consider instead using `std::mem::needs_drop` to detect whether a type is trivially dropped\n+  --> $DIR/dyn-drop.rs:14:16\n+   |\n+LL |   type T = dyn Drop;\n+   |                ^^^^\n+\n+error: aborting due to 5 previous errors\n+"}]}