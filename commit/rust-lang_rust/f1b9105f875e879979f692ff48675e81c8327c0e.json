{"sha": "f1b9105f875e879979f692ff48675e81c8327c0e", "node_id": "C_kwDOAAsO6NoAKGYxYjkxMDVmODc1ZTg3OTk3OWY2OTJmZjQ4Njc1ZTgxYzgzMjdjMGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-25T02:29:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-25T02:29:54Z"}, "message": "Auto merge of #10454 - Alexendoo:transmutes-expressible-as-ptr-casts-parens, r=Jarcho\n\nWrap `transmutes_expressible_as_ptr_casts` suggestions in parentheses\n\nchangelog: [`transmutes_expressible_as_ptr_casts`]: Fix suggestion missing wrapping parentheses\n\nFixes #10449\n\nr? `@Jarcho`\n\nIs this the best way to go about this? `unused_parens` will catch the unnecessary ones but emitting them in the first place isn't ideal", "tree": {"sha": "b41d721a658f64abe452c2230cde66520d8ddc49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b41d721a658f64abe452c2230cde66520d8ddc49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1b9105f875e879979f692ff48675e81c8327c0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1b9105f875e879979f692ff48675e81c8327c0e", "html_url": "https://github.com/rust-lang/rust/commit/f1b9105f875e879979f692ff48675e81c8327c0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1b9105f875e879979f692ff48675e81c8327c0e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed6c15a64b18220608b57fed2107877118174d16", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed6c15a64b18220608b57fed2107877118174d16", "html_url": "https://github.com/rust-lang/rust/commit/ed6c15a64b18220608b57fed2107877118174d16"}, {"sha": "ecc201253ee060071442f6f0c1a52b380aa3b3af", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecc201253ee060071442f6f0c1a52b380aa3b3af", "html_url": "https://github.com/rust-lang/rust/commit/ecc201253ee060071442f6f0c1a52b380aa3b3af"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "85cd74f23ef7e27c5b57a87332974f459001e2d2", "filename": "clippy_lints/src/transmute/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f1b9105f875e879979f692ff48675e81c8327c0e/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b9105f875e879979f692ff48675e81c8327c0e/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs?ref=f1b9105f875e879979f692ff48675e81c8327c0e", "patch": "@@ -2,8 +2,9 @@ use super::utils::check_cast;\n use super::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::sugg::Sugg;\n+use rustc_ast::ExprPrecedence;\n use rustc_errors::Applicability;\n-use rustc_hir::Expr;\n+use rustc_hir::{Expr, Node};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{cast::CastKind, Ty};\n \n@@ -19,7 +20,7 @@ pub(super) fn check<'tcx>(\n ) -> bool {\n     use CastKind::{AddrPtrCast, ArrayPtrCast, FnPtrAddrCast, FnPtrPtrCast, PtrAddrCast, PtrPtrCast};\n     let mut app = Applicability::MachineApplicable;\n-    let sugg = match check_cast(cx, e, from_ty, to_ty) {\n+    let mut sugg = match check_cast(cx, e, from_ty, to_ty) {\n         Some(PtrPtrCast | AddrPtrCast | ArrayPtrCast | FnPtrPtrCast | FnPtrAddrCast) => {\n             Sugg::hir_with_context(cx, arg, e.span.ctxt(), \"..\", &mut app)\n                 .as_ty(to_ty.to_string())\n@@ -39,6 +40,12 @@ pub(super) fn check<'tcx>(\n         _ => return false,\n     };\n \n+    if let Node::Expr(parent) = cx.tcx.hir().get_parent(e.hir_id)\n+        && parent.precedence().order() > ExprPrecedence::Cast.order()\n+    {\n+        sugg = format!(\"({sugg})\");\n+    }\n+\n     span_lint_and_sugg(\n         cx,\n         TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,"}, {"sha": "cc84ba25bd0d79edf9ef503b3ff218ebad3404df", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.fixed", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1b9105f875e879979f692ff48675e81c8327c0e/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f1b9105f875e879979f692ff48675e81c8327c0e/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed?ref=f1b9105f875e879979f692ff48675e81c8327c0e", "patch": "@@ -4,7 +4,7 @@\n // would otherwise be responsible for\n #![warn(clippy::useless_transmute)]\n #![warn(clippy::transmute_ptr_to_ptr)]\n-#![allow(dead_code, unused_unsafe, clippy::borrow_as_ptr)]\n+#![allow(unused, clippy::borrow_as_ptr)]\n \n use std::mem::{size_of, transmute};\n \n@@ -77,3 +77,9 @@ fn cannot_be_expressed_as_pointer_cast(in_param: Single) -> Pair {\n \n     unsafe { transmute::<Single, Pair>(in_param) }\n }\n+\n+fn issue_10449() {\n+    fn f() {}\n+\n+    let _x: u8 = unsafe { *(f as *const u8) };\n+}"}, {"sha": "aa65ab4dd2475372fa1ba7ab3ddf2a119a279e0e", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1b9105f875e879979f692ff48675e81c8327c0e/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b9105f875e879979f692ff48675e81c8327c0e/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs?ref=f1b9105f875e879979f692ff48675e81c8327c0e", "patch": "@@ -4,7 +4,7 @@\n // would otherwise be responsible for\n #![warn(clippy::useless_transmute)]\n #![warn(clippy::transmute_ptr_to_ptr)]\n-#![allow(dead_code, unused_unsafe, clippy::borrow_as_ptr)]\n+#![allow(unused, clippy::borrow_as_ptr)]\n \n use std::mem::{size_of, transmute};\n \n@@ -77,3 +77,9 @@ fn cannot_be_expressed_as_pointer_cast(in_param: Single) -> Pair {\n \n     unsafe { transmute::<Single, Pair>(in_param) }\n }\n+\n+fn issue_10449() {\n+    fn f() {}\n+\n+    let _x: u8 = unsafe { *std::mem::transmute::<fn(), *const u8>(f) };\n+}"}, {"sha": "58f5162c78e78839bdafd892fa8dd5a096cb3095", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1b9105f875e879979f692ff48675e81c8327c0e/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1b9105f875e879979f692ff48675e81c8327c0e/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr?ref=f1b9105f875e879979f692ff48675e81c8327c0e", "patch": "@@ -58,5 +58,11 @@ error: transmute from a reference to a pointer\n LL |     unsafe { transmute::<&[i32; 1], *const u8>(in_param) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `in_param as *const [i32; 1] as *const u8`\n \n-error: aborting due to 9 previous errors\n+error: transmute from `fn()` to `*const u8` which could be expressed as a pointer cast instead\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:84:28\n+   |\n+LL |     let _x: u8 = unsafe { *std::mem::transmute::<fn(), *const u8>(f) };\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(f as *const u8)`\n+\n+error: aborting due to 10 previous errors\n "}]}