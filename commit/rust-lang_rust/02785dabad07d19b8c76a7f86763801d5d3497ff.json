{"sha": "02785dabad07d19b8c76a7f86763801d5d3497ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNzg1ZGFiYWQwN2QxOWI4Yzc2YTdmODY3NjM4MDFkNWQzNDk3ZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-16T05:03:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-16T05:03:20Z"}, "message": "Auto merge of #62704 - Mark-Simulacrum:rollup-oi94s2j, r=Mark-Simulacrum\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #62103 (Add debug assertions to write_bytes and copy*)\n - #62405 (Remove never_type feature requirement for exhaustive patterns)\n - #62491 (Fix Pin urls in Option documentation)\n - #62533 (Add missing links for CannotReallocInPlace type)\n - #62634 (Less unsafe in the array example of MaybeUninit docs)\n - #62639 (Make VaListImpl<'f> invariant over the 'f lifetime)\n - #62646 (Tweak wording in feature gate errors)\n - #62662 (add spaces in front of trait requirements in libcore/cell.rs)\n - #62668 (Fix #62660)\n - #62673 (miri validation: better error messages for dangling references)\n - #62680 (Actually call `visit_block_entry` in `DataflowResultsConsumer`)\n - #62685 (Add info about undefined behavior to as_ref suggestions)\n - #62689 (Fix typo in RawWaker::new documentation)\n - #62698 (SGX target: don't pretend to be GNU/Linux to LLVM)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "d2b3c2f98ca7ab753a084f6c2e1450539cd9b7ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2b3c2f98ca7ab753a084f6c2e1450539cd9b7ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02785dabad07d19b8c76a7f86763801d5d3497ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02785dabad07d19b8c76a7f86763801d5d3497ff", "html_url": "https://github.com/rust-lang/rust/commit/02785dabad07d19b8c76a7f86763801d5d3497ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02785dabad07d19b8c76a7f86763801d5d3497ff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b65a86ebace8600c8e269e8bfe3365cdc460e68", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b65a86ebace8600c8e269e8bfe3365cdc460e68", "html_url": "https://github.com/rust-lang/rust/commit/4b65a86ebace8600c8e269e8bfe3365cdc460e68"}, {"sha": "da0c8feba49e5741420f545add7243e7c0ecc881", "url": "https://api.github.com/repos/rust-lang/rust/commits/da0c8feba49e5741420f545add7243e7c0ecc881", "html_url": "https://github.com/rust-lang/rust/commit/da0c8feba49e5741420f545add7243e7c0ecc881"}], "stats": {"total": 463, "additions": 307, "deletions": 156}, "files": [{"sha": "70337f79d500d0123619f513dfc53a0844c0f046", "filename": "Cargo.lock", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -25,7 +25,7 @@ dependencies = [\n name = \"alloc\"\n version = \"0.0.0\"\n dependencies = [\n- \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_xorshift 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -131,7 +131,7 @@ dependencies = [\n  \"autocfg 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"backtrace-sys 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-demangle 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n@@ -143,7 +143,7 @@ version = \"0.1.27\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n@@ -373,7 +373,7 @@ name = \"cfg-if\"\n version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n \n@@ -502,7 +502,7 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.16\"\n+version = \"0.1.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -834,7 +834,7 @@ name = \"dlmalloc\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n@@ -1008,7 +1008,7 @@ name = \"fortanix-sgx-abi\"\n version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n \n@@ -1199,7 +1199,7 @@ name = \"hashbrown\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-alloc 1.0.0\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n@@ -2066,7 +2066,7 @@ dependencies = [\n name = \"panic_abort\"\n version = \"0.0.0\"\n dependencies = [\n- \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -2077,7 +2077,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"alloc 0.0.0\",\n  \"cfg-if 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unwind 0.0.0\",\n@@ -2263,7 +2263,7 @@ name = \"profiler_builtins\"\n version = \"0.0.0\"\n dependencies = [\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -2835,7 +2835,7 @@ name = \"rustc-demangle\"\n version = \"0.1.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n \n@@ -2941,7 +2941,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -3160,7 +3160,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -3223,7 +3223,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -3341,7 +3341,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -3648,7 +3648,7 @@ dependencies = [\n  \"backtrace 0.3.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"dlmalloc 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fortanix-sgx-abi 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -4309,7 +4309,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -4527,7 +4527,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum colored 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b0aa3473e85a3161b59845d6096b289bb577874cafeaf75ea1b1beaa6572c7fc\"\n \"checksum commoncrypto 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d056a8586ba25a1e4d61cb090900e495952c7886786fc55f909ab2f819b69007\"\n \"checksum commoncrypto-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1fed34f46747aa73dfaa578069fd8279d2818ade2b55f38f22a9401c7f4083e2\"\n-\"checksum compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e79ed19793c99771b386d76e08c3419409bb3d418b81a8b8afc73524247461cf\"\n+\"checksum compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad9b4731b9e701aefe9e6bd1e9173f30526661508f9aaadaa5caec25ddf95585\"\n \"checksum compiletest_rs 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f40ecc9332b68270998995c00f8051ee856121764a0d3230e64c9efd059d27b6\"\n \"checksum constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ff012e225ce166d4422e0e78419d901719760f62ae2b7969ca6b564d1b54a9e\"\n \"checksum core-foundation 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4e2640d6d0bf22e82bed1b73c6aef8d5dd31e5abe6666c57e6d45e2649f4f887\""}, {"sha": "487f3b76fc75f7296aa119deb050f71ba6b28936", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -359,9 +359,12 @@ impl fmt::Display for AllocErr {\n     }\n }\n \n-/// The `CannotReallocInPlace` error is used when `grow_in_place` or\n-/// `shrink_in_place` were unable to reuse the given memory block for\n+/// The `CannotReallocInPlace` error is used when [`grow_in_place`] or\n+/// [`shrink_in_place`] were unable to reuse the given memory block for\n /// a requested layout.\n+///\n+/// [`grow_in_place`]: ./trait.Alloc.html#method.grow_in_place\n+/// [`shrink_in_place`]: ./trait.Alloc.html#method.shrink_in_place\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct CannotReallocInPlace;"}, {"sha": "f74e945b3cc1bf58b652e938f4629ce727026e87", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -290,7 +290,7 @@ impl<T:Copy> Clone for Cell<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T:Default> Default for Cell<T> {\n+impl<T: Default> Default for Cell<T> {\n     /// Creates a `Cell<T>`, with the `Default` value for T.\n     #[inline]\n     fn default() -> Cell<T> {\n@@ -299,18 +299,18 @@ impl<T:Default> Default for Cell<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T:PartialEq + Copy> PartialEq for Cell<T> {\n+impl<T: PartialEq + Copy> PartialEq for Cell<T> {\n     #[inline]\n     fn eq(&self, other: &Cell<T>) -> bool {\n         self.get() == other.get()\n     }\n }\n \n #[stable(feature = \"cell_eq\", since = \"1.2.0\")]\n-impl<T:Eq + Copy> Eq for Cell<T> {}\n+impl<T: Eq + Copy> Eq for Cell<T> {}\n \n #[stable(feature = \"cell_ord\", since = \"1.10.0\")]\n-impl<T:PartialOrd + Copy> PartialOrd for Cell<T> {\n+impl<T: PartialOrd + Copy> PartialOrd for Cell<T> {\n     #[inline]\n     fn partial_cmp(&self, other: &Cell<T>) -> Option<Ordering> {\n         self.get().partial_cmp(&other.get())\n@@ -338,7 +338,7 @@ impl<T:PartialOrd + Copy> PartialOrd for Cell<T> {\n }\n \n #[stable(feature = \"cell_ord\", since = \"1.10.0\")]\n-impl<T:Ord + Copy> Ord for Cell<T> {\n+impl<T: Ord + Copy> Ord for Cell<T> {\n     #[inline]\n     fn cmp(&self, other: &Cell<T>) -> Ordering {\n         self.get().cmp(&other.get())\n@@ -1008,7 +1008,7 @@ impl<T: Clone> Clone for RefCell<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T:Default> Default for RefCell<T> {\n+impl<T: Default> Default for RefCell<T> {\n     /// Creates a `RefCell<T>`, with the `Default` value for T.\n     #[inline]\n     fn default() -> RefCell<T> {"}, {"sha": "eda0e7c518c58290b6f212c2319dae92ee038948", "filename": "src/libcore/ffi.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -60,7 +60,10 @@ impl fmt::Debug for c_void {\n #[lang = \"va_list\"]\n pub struct VaListImpl<'f> {\n     ptr: *mut c_void,\n-    _marker: PhantomData<&'f c_void>,\n+\n+    // Invariant over `'f`, so each `VaListImpl<'f>` object is tied to\n+    // the region of the function it's defined in\n+    _marker: PhantomData<&'f mut &'f c_void>,\n }\n \n #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n@@ -96,7 +99,7 @@ pub struct VaListImpl<'f> {\n     vr_top: *mut c_void,\n     gr_offs: i32,\n     vr_offs: i32,\n-    _marker: PhantomData<&'f c_void>,\n+    _marker: PhantomData<&'f mut &'f c_void>,\n }\n \n /// PowerPC ABI implementation of a `va_list`.\n@@ -114,7 +117,7 @@ pub struct VaListImpl<'f> {\n     reserved: u16,\n     overflow_arg_area: *mut c_void,\n     reg_save_area: *mut c_void,\n-    _marker: PhantomData<&'f c_void>,\n+    _marker: PhantomData<&'f mut &'f c_void>,\n }\n \n /// x86_64 ABI implementation of a `va_list`.\n@@ -131,7 +134,7 @@ pub struct VaListImpl<'f> {\n     fp_offset: i32,\n     overflow_arg_area: *mut c_void,\n     reg_save_area: *mut c_void,\n-    _marker: PhantomData<&'f c_void>,\n+    _marker: PhantomData<&'f mut &'f c_void>,\n }\n \n /// asm.js ABI implementation of a `va_list`.\n@@ -148,7 +151,7 @@ pub struct VaListImpl<'f> {\n #[lang = \"va_list\"]\n pub struct VaListImpl<'f> {\n     inner: [crate::mem::MaybeUninit<i32>; 4],\n-    _marker: PhantomData<&'f c_void>,\n+    _marker: PhantomData<&'f mut &'f c_void>,\n }\n \n #[cfg(all(target_arch = \"asmjs\", not(windows)))]"}, {"sha": "56e45c3695f61830594cbaaba62ea3076b27381f", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -36,6 +36,8 @@\n             issue = \"0\")]\n #![allow(missing_docs)]\n \n+use crate::mem;\n+\n #[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n #[rustc_deprecated(reason = \"no longer an intrinsic - use `ptr::drop_in_place` directly\",\n                    since = \"1.18.0\")]\n@@ -1323,6 +1325,26 @@ extern \"rust-intrinsic\" {\n // (`transmute` also falls into this category, but it cannot be wrapped due to the\n // check that `T` and `U` have the same size.)\n \n+/// Checks whether `ptr` is properly aligned with respect to\n+/// `align_of::<T>()`.\n+pub(crate) fn is_aligned_and_not_null<T>(ptr: *const T) -> bool {\n+    !ptr.is_null() && ptr as usize % mem::align_of::<T>() == 0\n+}\n+\n+/// Checks whether the regions of memory starting at `src` and `dst` of size\n+/// `count * size_of::<T>()` overlap.\n+fn overlaps<T>(src: *const T, dst: *const T, count: usize) -> bool {\n+    let src_usize = src as usize;\n+    let dst_usize = dst as usize;\n+    let size = mem::size_of::<T>().checked_mul(count).unwrap();\n+    let diff = if src_usize > dst_usize {\n+        src_usize - dst_usize\n+    } else {\n+        dst_usize - src_usize\n+    };\n+    size > diff\n+}\n+\n /// Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source\n /// and destination must *not* overlap.\n ///\n@@ -1412,7 +1434,11 @@ pub unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {\n     extern \"rust-intrinsic\" {\n         fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n     }\n-    copy_nonoverlapping(src, dst, count);\n+\n+    debug_assert!(is_aligned_and_not_null(src), \"attempt to copy from unaligned or null pointer\");\n+    debug_assert!(is_aligned_and_not_null(dst), \"attempt to copy to unaligned or null pointer\");\n+    debug_assert!(!overlaps(src, dst, count), \"attempt to copy to overlapping memory\");\n+    copy_nonoverlapping(src, dst, count)\n }\n \n /// Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source\n@@ -1472,6 +1498,9 @@ pub unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n     extern \"rust-intrinsic\" {\n         fn copy<T>(src: *const T, dst: *mut T, count: usize);\n     }\n+\n+    debug_assert!(is_aligned_and_not_null(src), \"attempt to copy from unaligned or null pointer\");\n+    debug_assert!(is_aligned_and_not_null(dst), \"attempt to copy to unaligned or null pointer\");\n     copy(src, dst, count)\n }\n \n@@ -1553,5 +1582,7 @@ pub unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n     extern \"rust-intrinsic\" {\n         fn write_bytes<T>(dst: *mut T, val: u8, count: usize);\n     }\n+\n+    debug_assert!(is_aligned_and_not_null(dst), \"attempt to write to unaligned or null pointer\");\n     write_bytes(dst, val, count)\n }"}, {"sha": "f6f7ccffdb005d097cd688b7388465cc025214c5", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -112,7 +112,6 @@ use crate::mem::ManuallyDrop;\n ///\n /// ```\n /// use std::mem::{self, MaybeUninit};\n-/// use std::ptr;\n ///\n /// let data = {\n ///     // Create an uninitialized array of `MaybeUninit`. The `assume_init` is\n@@ -122,10 +121,13 @@ use crate::mem::ManuallyDrop;\n ///         MaybeUninit::uninit().assume_init()\n ///     };\n ///\n-///     // Dropping a `MaybeUninit` does nothing, so if there is a panic during this loop,\n-///     // we have a memory leak, but there is no memory safety issue.\n+///     // Dropping a `MaybeUninit` does nothing. Thus using raw pointer\n+///     // assignment instead of `ptr::write` does not cause the old\n+///     // uninitialized value to be dropped. Also if there is a panic during\n+///     // this loop, we have a memory leak, but there is no memory safety\n+///     // issue.\n ///     for elem in &mut data[..] {\n-///         unsafe { ptr::write(elem.as_mut_ptr(), vec![42]); }\n+///         *elem = MaybeUninit::new(vec![42]);\n ///     }\n ///\n ///     // Everything is initialized. Transmute the array to the\n@@ -151,7 +153,7 @@ use crate::mem::ManuallyDrop;\n /// let mut data_len: usize = 0;\n ///\n /// for elem in &mut data[0..500] {\n-///     unsafe { ptr::write(elem.as_mut_ptr(), String::from(\"hello\")); }\n+///     *elem = MaybeUninit::new(String::from(\"hello\"));\n ///     data_len += 1;\n /// }\n ///"}, {"sha": "0b3ef41891b5f6929719e72a3e27dea2f5971254", "filename": "src/libcore/option.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -291,6 +291,8 @@ impl<T> Option<T> {\n \n \n     /// Converts from [`Pin`]`<&Option<T>>` to `Option<`[`Pin`]`<&T>>`.\n+    ///\n+    /// [`Pin`]: ../pin/struct.Pin.html\n     #[inline]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn as_pin_ref<'a>(self: Pin<&'a Option<T>>) -> Option<Pin<&'a T>> {\n@@ -300,6 +302,8 @@ impl<T> Option<T> {\n     }\n \n     /// Converts from [`Pin`]`<&mut Option<T>>` to `Option<`[`Pin`]`<&mut T>>`.\n+    ///\n+    /// [`Pin`]: ../pin/struct.Pin.html\n     #[inline]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn as_pin_mut<'a>(self: Pin<&'a mut Option<T>>) -> Option<Pin<&'a mut T>> {"}, {"sha": "1397a52fbbefc4e64f0782c14d4f8e6b21bf5800", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -25,7 +25,7 @@\n use crate::cmp::Ordering::{self, Less, Equal, Greater};\n use crate::cmp;\n use crate::fmt;\n-use crate::intrinsics::{assume, exact_div, unchecked_sub};\n+use crate::intrinsics::{assume, exact_div, unchecked_sub, is_aligned_and_not_null};\n use crate::isize;\n use crate::iter::*;\n use crate::ops::{FnMut, Try, self};\n@@ -5228,7 +5228,7 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksExactMut<'a, T> {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n-    debug_assert!(data as usize % mem::align_of::<T>() == 0, \"attempt to create unaligned slice\");\n+    debug_assert!(is_aligned_and_not_null(data), \"attempt to create unaligned or null slice\");\n     debug_assert!(mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,\n                   \"attempt to create slice covering half the address space\");\n     &*ptr::slice_from_raw_parts(data, len)\n@@ -5249,7 +5249,7 @@ pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {\n-    debug_assert!(data as usize % mem::align_of::<T>() == 0, \"attempt to create unaligned slice\");\n+    debug_assert!(is_aligned_and_not_null(data), \"attempt to create unaligned or null slice\");\n     debug_assert!(mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,\n                   \"attempt to create slice covering half the address space\");\n     &mut *ptr::slice_from_raw_parts_mut(data, len)"}, {"sha": "6f841bd2adf41a9be45c16512042475952e85512", "filename": "src/libcore/task/wake.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibcore%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibcore%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fwake.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -31,7 +31,7 @@ impl RawWaker {\n     /// The `data` pointer can be used to store arbitrary data as required\n     /// by the executor. This could be e.g. a type-erased pointer to an `Arc`\n     /// that is associated with the task.\n-    /// The value of this poiner will get passed to all functions that are part\n+    /// The value of this pointer will get passed to all functions that are part\n     /// of the `vtable` as the first parameter.\n     ///\n     /// The `vtable` customizes the behavior of a `Waker` which gets created"}, {"sha": "d9b748f71f011994a57d431a79ac242bb4e4f23f", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -161,7 +161,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             PatternKind::Variant { adt_def, substs, variant_index, ref subpatterns } => {\n                 let irrefutable = adt_def.variants.iter_enumerated().all(|(i, v)| {\n                     i == variant_index || {\n-                        self.hir.tcx().features().never_type &&\n                         self.hir.tcx().features().exhaustive_patterns &&\n                         !v.uninhabited_from(self.hir.tcx(), substs, adt_def.adt_kind()).is_empty()\n                     }"}, {"sha": "f05dfad32572d76f2df83326b40b0b7357a2ada2", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -333,6 +333,8 @@ pub(crate) trait DataflowResultsConsumer<'a, 'tcx: 'a> {\n     }\n \n     fn process_basic_block(&mut self, bb: BasicBlock, flow_state: &mut Self::FlowState) {\n+        self.visit_block_entry(bb, flow_state);\n+\n         let BasicBlockData { ref statements, ref terminator, is_cleanup: _ } =\n             self.body()[bb];\n         let mut location = Location { block: bb, statement_index: 0 };"}, {"sha": "da9780ac0a305ba93278f55fca283a889a9599be", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -414,12 +414,12 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                                     required.bytes(), has.bytes()), self.path),\n                             InterpError::ReadBytesAsPointer =>\n                                 return validation_failure!(\n-                                    \"integer pointer in non-ZST reference\",\n+                                    \"dangling reference (created from integer)\",\n                                     self.path\n                                 ),\n                             _ =>\n                                 return validation_failure!(\n-                                    \"dangling (not entirely in bounds) reference\",\n+                                    \"dangling reference (not entirely in bounds)\",\n                                     self.path\n                                 ),\n                         }"}, {"sha": "7c24c88f7aee07a2e28464b4f8f7df49bdac56a6", "filename": "src/librustc_target/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -65,7 +65,7 @@ pub fn target() -> Result<Target, String> {\n         ..Default::default()\n     };\n     Ok(Target {\n-        llvm_target: \"x86_64-unknown-linux-gnu\".into(),\n+        llvm_target: \"x86_64-elf\".into(),\n         target_endian: \"little\".into(),\n         target_pointer_width: \"64\".into(),\n         target_c_int_width: \"32\".into(),"}, {"sha": "5febc694def0ca1e2a0c4bd963ab93d04f72342b", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -331,6 +331,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             err.note(\"try using `<*const T>::as_ref()` to get a reference to the \\\n                                       type behind the pointer: https://doc.rust-lang.org/std/\\\n                                       primitive.pointer.html#method.as_ref\");\n+                            err.note(\"using `<*const T>::as_ref()` on a pointer \\\n+                                      which is unaligned or points to invalid \\\n+                                      or uninitialized memory is undefined behavior\");\n                         }\n                         err\n                     }"}, {"sha": "ed7d6c35fb97a8bf066307a139e8963ca39a9a7e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -1451,7 +1451,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     template!(Word),\n     Gated(Stability::Unstable,\n         sym::dropck_eyepatch,\n-        \"may_dangle has unstable semantics and may be removed in the future\",\n+        \"`may_dangle` has unstable semantics and may be removed in the future\",\n         cfg_fn!(dropck_eyepatch))),\n     (sym::unwind, Whitelisted, template!(List: \"allowed|aborts\"), Gated(Stability::Unstable,\n                                 sym::unwind_attributes,\n@@ -1693,8 +1693,8 @@ impl<'a> Context<'a> {\n             // Only run the custom attribute lint during regular feature gate\n             // checking. Macro gating runs before the plugin attributes are\n             // registered, so we skip this in that case.\n-            let msg = format!(\"The attribute `{}` is currently unknown to the compiler and \\\n-                                may have meaning added to it in the future\", attr.path);\n+            let msg = format!(\"the attribute `{}` is currently unknown to the compiler and \\\n+                               may have meaning added to it in the future\", attr.path);\n             gate_feature!(self, custom_attribute, attr.span, &msg);\n         }\n     }"}, {"sha": "050b614d1477b38e079c8954b47d31de37fb9d79", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -1498,7 +1498,7 @@ impl<'a> Parser<'a> {\n         F: Fn(&token::Token) -> bool\n     {\n         let attrs = self.parse_arg_attributes()?;\n-        if let Ok(Some(mut arg)) = self.parse_self_arg() {\n+        if let Some(mut arg) = self.parse_self_arg()? {\n             arg.attrs = attrs.into();\n             return self.recover_bad_self_arg(arg, is_trait_item);\n         }"}, {"sha": "7f99ca724cf7380d102afbd06bfebbb16c8e736e", "filename": "src/test/codegen/issue-45222.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fcodegen%2Fissue-45222.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fcodegen%2Fissue-45222.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-45222.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -O\n+// ignore-debug: the debug assertions get in the way\n \n #![crate_type = \"lib\"]\n "}, {"sha": "c79542767774a3d7557e261868f5d65dde2315c5", "filename": "src/test/codegen/issue-45466.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fcodegen%2Fissue-45466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fcodegen%2Fissue-45466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-45466.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -O\n+// ignore-debug: the debug assertions get in the way\n \n #![crate_type=\"rlib\"]\n "}, {"sha": "6205e6a6559c9b6fc8b982dae24f0e34d77009aa", "filename": "src/test/codegen/swap-small-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fcodegen%2Fswap-small-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fcodegen%2Fswap-small-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fswap-small-types.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: -O\n // only-x86_64\n+// ignore-debug: the debug assertions get in the way\n \n #![crate_type = \"lib\"]\n "}, {"sha": "4947d6e529108f82320bd0747f619bbcb5faecf7", "filename": "src/test/ui/c-variadic/variadic-ffi-4.nll.stderr", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.nll.stderr?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -23,6 +23,16 @@ LL |     let _ = ap.with_copy(|ap| { ap });\n    |                           | return type of closure is core::ffi::VaList<'2, '_>\n    |                           has type `core::ffi::VaList<'1, '_>`\n \n+error: lifetime may not live long enough\n+  --> $DIR/variadic-ffi-4.rs:20:5\n+   |\n+LL | pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+   |                                               -------                   ------- has type `core::ffi::VaListImpl<'2>`\n+   |                                               |\n+   |                                               has type `&mut core::ffi::VaListImpl<'1>`\n+LL |     *ap0 = ap1;\n+   |     ^^^^ assignment requires that `'1` must outlive `'2`\n+\n error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:20:5\n    |\n@@ -34,7 +44,7 @@ LL |     *ap0 = ap1;\n    |     ^^^^ assignment requires that `'1` must outlive `'2`\n \n error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-4.rs:24:5\n+  --> $DIR/variadic-ffi-4.rs:25:5\n    |\n LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n    |                                               ---                   ------- has type `core::ffi::VaListImpl<'2>`\n@@ -44,7 +54,7 @@ LL |     ap0 = &mut ap1;\n    |     ^^^^^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n \n error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-4.rs:24:5\n+  --> $DIR/variadic-ffi-4.rs:25:5\n    |\n LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n    |                                               ---                   ------- has type `core::ffi::VaListImpl<'1>`\n@@ -54,15 +64,15 @@ LL |     ap0 = &mut ap1;\n    |     ^^^^^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n \n error[E0384]: cannot assign to immutable argument `ap0`\n-  --> $DIR/variadic-ffi-4.rs:24:5\n+  --> $DIR/variadic-ffi-4.rs:25:5\n    |\n LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n    |                                               --- help: make this binding mutable: `mut ap0`\n LL |     ap0 = &mut ap1;\n    |     ^^^^^^^^^^^^^^ cannot assign to immutable argument\n \n error[E0597]: `ap1` does not live long enough\n-  --> $DIR/variadic-ffi-4.rs:24:11\n+  --> $DIR/variadic-ffi-4.rs:25:11\n    |\n LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n    |                                                    - let's call the lifetime of this reference `'1`\n@@ -76,16 +86,26 @@ LL | }\n    | - `ap1` dropped here while still borrowed\n \n error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-4.rs:32:5\n+  --> $DIR/variadic-ffi-4.rs:33:12\n+   |\n+LL | pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+   |                                               -------                   ------- has type `core::ffi::VaListImpl<'2>`\n+   |                                               |\n+   |                                               has type `&mut core::ffi::VaListImpl<'1>`\n+LL |     *ap0 = ap1.clone();\n+   |            ^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variadic-ffi-4.rs:33:12\n    |\n LL | pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n    |                                               -------                   ------- has type `core::ffi::VaListImpl<'1>`\n    |                                               |\n    |                                               has type `&mut core::ffi::VaListImpl<'2>`\n LL |     *ap0 = ap1.clone();\n-   |     ^^^^ assignment requires that `'1` must outlive `'2`\n+   |            ^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 11 previous errors\n \n Some errors have detailed explanations: E0384, E0597, E0621.\n For more information about an error, try `rustc --explain E0384`."}, {"sha": "4a50d352a5b20aca025ecdc48788802fa74d32d6", "filename": "src/test/ui/c-variadic/variadic-ffi-4.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -18,6 +18,7 @@ pub unsafe extern \"C\" fn no_escape2(_: usize, ap: ...) {\n \n pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n     *ap0 = ap1; //~ ERROR: mismatched types\n+    //~^ ERROR: mismatched types\n }\n \n pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n@@ -29,5 +30,6 @@ pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...\n }\n \n pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n-    *ap0 = ap1.clone(); //~ ERROR: cannot infer an appropriate lifetime\n+    *ap0 = ap1.clone(); //~ ERROR: mismatched types\n+    //~^ ERROR: mismatched types\n }"}, {"sha": "7aa510e61130428e9903f669dff0f9da8f31adf0", "filename": "src/test/ui/c-variadic/variadic-ffi-4.stderr", "status": "modified", "additions": 86, "deletions": 36, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -52,24 +52,51 @@ note: the anonymous lifetime #3 defined on the function body at 19:1...\n    |\n LL | / pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     *ap0 = ap1;\n+LL | |\n LL | | }\n    | |_^\n note: ...does not necessarily outlive the anonymous lifetime #2 defined on the function body at 19:1\n   --> $DIR/variadic-ffi-4.rs:19:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     *ap0 = ap1;\n+LL | |\n+LL | | }\n+   | |_^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/variadic-ffi-4.rs:20:12\n+   |\n+LL |     *ap0 = ap1;\n+   |            ^^^ lifetime mismatch\n+   |\n+   = note: expected type `core::ffi::VaListImpl<'_>`\n+              found type `core::ffi::VaListImpl<'_>`\n+note: the anonymous lifetime #2 defined on the function body at 19:1...\n+  --> $DIR/variadic-ffi-4.rs:19:1\n+   |\n+LL | / pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+LL | |     *ap0 = ap1;\n+LL | |\n+LL | | }\n+   | |_^\n+note: ...does not necessarily outlive the anonymous lifetime #3 defined on the function body at 19:1\n+  --> $DIR/variadic-ffi-4.rs:19:1\n+   |\n+LL | / pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+LL | |     *ap0 = ap1;\n+LL | |\n LL | | }\n    | |_^\n \n error[E0490]: a value of type `core::ffi::VaListImpl<'_>` is borrowed for too long\n-  --> $DIR/variadic-ffi-4.rs:24:11\n+  --> $DIR/variadic-ffi-4.rs:25:11\n    |\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^\n    |\n-note: the type is valid for the anonymous lifetime #1 defined on the function body at 23:1\n-  --> $DIR/variadic-ffi-4.rs:23:1\n+note: the type is valid for the anonymous lifetime #1 defined on the function body at 24:1\n+  --> $DIR/variadic-ffi-4.rs:24:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n@@ -79,8 +106,8 @@ LL | |\n LL | |\n LL | | }\n    | |_^\n-note: but the borrow lasts for the anonymous lifetime #3 defined on the function body at 23:1\n-  --> $DIR/variadic-ffi-4.rs:23:1\n+note: but the borrow lasts for the anonymous lifetime #3 defined on the function body at 24:1\n+  --> $DIR/variadic-ffi-4.rs:24:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n@@ -92,15 +119,15 @@ LL | | }\n    | |_^\n \n error[E0308]: mismatched types\n-  --> $DIR/variadic-ffi-4.rs:24:11\n+  --> $DIR/variadic-ffi-4.rs:25:11\n    |\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `&mut core::ffi::VaListImpl<'_>`\n               found type `&mut core::ffi::VaListImpl<'_>`\n-note: the anonymous lifetime #3 defined on the function body at 23:1...\n-  --> $DIR/variadic-ffi-4.rs:23:1\n+note: the anonymous lifetime #3 defined on the function body at 24:1...\n+  --> $DIR/variadic-ffi-4.rs:24:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n@@ -110,8 +137,8 @@ LL | |\n LL | |\n LL | | }\n    | |_^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the function body at 23:1\n-  --> $DIR/variadic-ffi-4.rs:23:1\n+note: ...does not necessarily outlive the anonymous lifetime #2 defined on the function body at 24:1\n+  --> $DIR/variadic-ffi-4.rs:24:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n@@ -123,15 +150,15 @@ LL | | }\n    | |_^\n \n error[E0308]: mismatched types\n-  --> $DIR/variadic-ffi-4.rs:24:11\n+  --> $DIR/variadic-ffi-4.rs:25:11\n    |\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `&mut core::ffi::VaListImpl<'_>`\n               found type `&mut core::ffi::VaListImpl<'_>`\n-note: the anonymous lifetime #2 defined on the function body at 23:1...\n-  --> $DIR/variadic-ffi-4.rs:23:1\n+note: the anonymous lifetime #2 defined on the function body at 24:1...\n+  --> $DIR/variadic-ffi-4.rs:24:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n@@ -141,8 +168,8 @@ LL | |\n LL | |\n LL | | }\n    | |_^\n-note: ...does not necessarily outlive the anonymous lifetime #3 defined on the function body at 23:1\n-  --> $DIR/variadic-ffi-4.rs:23:1\n+note: ...does not necessarily outlive the anonymous lifetime #3 defined on the function body at 24:1\n+  --> $DIR/variadic-ffi-4.rs:24:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n@@ -154,13 +181,13 @@ LL | | }\n    | |_^\n \n error[E0495]: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n-  --> $DIR/variadic-ffi-4.rs:24:11\n+  --> $DIR/variadic-ffi-4.rs:25:11\n    |\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #3 defined on the function body at 23:1...\n-  --> $DIR/variadic-ffi-4.rs:23:1\n+note: first, the lifetime cannot outlive the anonymous lifetime #3 defined on the function body at 24:1...\n+  --> $DIR/variadic-ffi-4.rs:24:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n@@ -171,12 +198,12 @@ LL | |\n LL | | }\n    | |_^\n note: ...so that the type `core::ffi::VaListImpl<'_>` is not borrowed for too long\n-  --> $DIR/variadic-ffi-4.rs:24:11\n+  --> $DIR/variadic-ffi-4.rs:25:11\n    |\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^\n-note: but, the lifetime must be valid for the anonymous lifetime #1 defined on the function body at 23:1...\n-  --> $DIR/variadic-ffi-4.rs:23:1\n+note: but, the lifetime must be valid for the anonymous lifetime #1 defined on the function body at 24:1...\n+  --> $DIR/variadic-ffi-4.rs:24:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n@@ -187,39 +214,62 @@ LL | |\n LL | | }\n    | |_^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/variadic-ffi-4.rs:24:11\n+  --> $DIR/variadic-ffi-4.rs:25:11\n    |\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^\n \n-error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/variadic-ffi-4.rs:32:16\n+error[E0308]: mismatched types\n+  --> $DIR/variadic-ffi-4.rs:33:12\n    |\n LL |     *ap0 = ap1.clone();\n-   |                ^^^^^\n+   |            ^^^^^^^^^^^ lifetime mismatch\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #3 defined on the function body at 31:1...\n-  --> $DIR/variadic-ffi-4.rs:31:1\n+   = note: expected type `core::ffi::VaListImpl<'_>`\n+              found type `core::ffi::VaListImpl<'_>`\n+note: the anonymous lifetime #3 defined on the function body at 32:1...\n+  --> $DIR/variadic-ffi-4.rs:32:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     *ap0 = ap1.clone();\n+LL | |\n LL | | }\n    | |_^\n-   = note: ...so that the types are compatible:\n-           expected &core::ffi::VaListImpl<'_>\n-              found &core::ffi::VaListImpl<'_>\n-note: but, the lifetime must be valid for the anonymous lifetime #2 defined on the function body at 31:1...\n-  --> $DIR/variadic-ffi-4.rs:31:1\n+note: ...does not necessarily outlive the anonymous lifetime #2 defined on the function body at 32:1\n+  --> $DIR/variadic-ffi-4.rs:32:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     *ap0 = ap1.clone();\n+LL | |\n+LL | | }\n+   | |_^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/variadic-ffi-4.rs:33:12\n+   |\n+LL |     *ap0 = ap1.clone();\n+   |            ^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `core::ffi::VaListImpl<'_>`\n+              found type `core::ffi::VaListImpl<'_>`\n+note: the anonymous lifetime #2 defined on the function body at 32:1...\n+  --> $DIR/variadic-ffi-4.rs:32:1\n+   |\n+LL | / pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+LL | |     *ap0 = ap1.clone();\n+LL | |\n+LL | | }\n+   | |_^\n+note: ...does not necessarily outlive the anonymous lifetime #3 defined on the function body at 32:1\n+  --> $DIR/variadic-ffi-4.rs:32:1\n+   |\n+LL | / pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+LL | |     *ap0 = ap1.clone();\n+LL | |\n LL | | }\n    | |_^\n-   = note: ...so that the expression is assignable:\n-           expected core::ffi::VaListImpl<'_>\n-              found core::ffi::VaListImpl<'_>\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 11 previous errors\n \n Some errors have detailed explanations: E0308, E0621.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "1f9731fcfbefb5915b4e9cb9794f9d452ed5023e", "filename": "src/test/ui/conditional-compilation/cfg-generic-params.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.stderr?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -16,7 +16,7 @@ error: only lifetime parameters can be used in this context\n LL | struct WhereBad where for<#[cfg(no)] 'a, #[cfg(yes)] T> u8: Copy;\n    |                                                      ^\n \n-error[E0658]: The attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/cfg-generic-params.rs:19:29\n    |\n LL | fn f_lt_yes<#[cfg_attr(yes, unknown)] 'a>() {}\n@@ -25,7 +25,7 @@ LL | fn f_lt_yes<#[cfg_attr(yes, unknown)] 'a>() {}\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/cfg-generic-params.rs:21:29\n    |\n LL | fn f_ty_yes<#[cfg_attr(yes, unknown)] T>() {}\n@@ -34,7 +34,7 @@ LL | fn f_ty_yes<#[cfg_attr(yes, unknown)] T>() {}\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/cfg-generic-params.rs:24:34\n    |\n LL | type FnYes = for<#[cfg_attr(yes, unknown)] 'a> fn();\n@@ -43,7 +43,7 @@ LL | type FnYes = for<#[cfg_attr(yes, unknown)] 'a> fn();\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/cfg-generic-params.rs:28:40\n    |\n LL | type PolyYes = dyn for<#[cfg_attr(yes, unknown)] 'a> Copy;\n@@ -52,7 +52,7 @@ LL | type PolyYes = dyn for<#[cfg_attr(yes, unknown)] 'a> Copy;\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/cfg-generic-params.rs:32:43\n    |\n LL | struct WhereYes where for<#[cfg_attr(yes, unknown)] 'a> u8: Copy;"}, {"sha": "f1702955ed7b1618829066d125d360f09ceba8b8", "filename": "src/test/ui/consts/const-eval/ub-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -34,7 +34,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref.rs:20:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered integer pointer in non-ZST reference\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling reference (created from integer)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n "}, {"sha": "aac32ecc5b74757f7e2df4803086a569f806a04b", "filename": "src/test/ui/consts/const-eval/union-ub-fat-ptr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.stderr?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:78:1\n    |\n LL | const B: &str = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 999 } }.str};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling (not entirely in bounds) reference\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling reference (not entirely in bounds)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n@@ -26,7 +26,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:90:1\n    |\n LL | const B2: &[u8] = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 999 } }.slice};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling (not entirely in bounds) reference\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling reference (not entirely in bounds)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n "}, {"sha": "8fe11cb02a021b0c05e1287b69329b438058c460", "filename": "src/test/ui/feature-gates/feature-gate-custom_attribute2.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -4,54 +4,54 @@\n // gate-test-custom_attribute\n \n struct StLt<#[lt_struct] 'a>(&'a u32);\n-//~^ ERROR The attribute `lt_struct` is currently unknown to the compiler\n+//~^ ERROR the attribute `lt_struct` is currently unknown to the compiler\n struct StTy<#[ty_struct] I>(I);\n-//~^ ERROR The attribute `ty_struct` is currently unknown to the compiler\n+//~^ ERROR the attribute `ty_struct` is currently unknown to the compiler\n \n enum EnLt<#[lt_enum] 'b> { A(&'b u32), B }\n-//~^ ERROR The attribute `lt_enum` is currently unknown to the compiler\n+//~^ ERROR the attribute `lt_enum` is currently unknown to the compiler\n enum EnTy<#[ty_enum] J> { A(J), B }\n-//~^ ERROR The attribute `ty_enum` is currently unknown to the compiler\n+//~^ ERROR the attribute `ty_enum` is currently unknown to the compiler\n \n trait TrLt<#[lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n-//~^ ERROR The attribute `lt_trait` is currently unknown to the compiler\n+//~^ ERROR the attribute `lt_trait` is currently unknown to the compiler\n trait TrTy<#[ty_trait] K> { fn foo(&self, _: K); }\n-//~^ ERROR The attribute `ty_trait` is currently unknown to the compiler\n+//~^ ERROR the attribute `ty_trait` is currently unknown to the compiler\n \n type TyLt<#[lt_type] 'd> = &'d u32;\n-//~^ ERROR The attribute `lt_type` is currently unknown to the compiler\n+//~^ ERROR the attribute `lt_type` is currently unknown to the compiler\n type TyTy<#[ty_type] L> = (L, );\n-//~^ ERROR The attribute `ty_type` is currently unknown to the compiler\n+//~^ ERROR the attribute `ty_type` is currently unknown to the compiler\n \n impl<#[lt_inherent] 'e> StLt<'e> { }\n-//~^ ERROR The attribute `lt_inherent` is currently unknown to the compiler\n+//~^ ERROR the attribute `lt_inherent` is currently unknown to the compiler\n impl<#[ty_inherent] M> StTy<M> { }\n-//~^ ERROR The attribute `ty_inherent` is currently unknown to the compiler\n+//~^ ERROR the attribute `ty_inherent` is currently unknown to the compiler\n \n impl<#[lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n-    //~^ ERROR The attribute `lt_impl_for` is currently unknown to the compiler\n+    //~^ ERROR the attribute `lt_impl_for` is currently unknown to the compiler\n     fn foo(&self, _: &'f [u32]) -> &'f u32 { loop { } }\n }\n impl<#[ty_impl_for] N> TrTy<N> for StTy<N> {\n-    //~^ ERROR The attribute `ty_impl_for` is currently unknown to the compiler\n+    //~^ ERROR the attribute `ty_impl_for` is currently unknown to the compiler\n     fn foo(&self, _: N) { }\n }\n \n fn f_lt<#[lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n-//~^ ERROR The attribute `lt_fn` is currently unknown to the compiler\n+//~^ ERROR the attribute `lt_fn` is currently unknown to the compiler\n fn f_ty<#[ty_fn] O>(_: O) { }\n-//~^ ERROR The attribute `ty_fn` is currently unknown to the compiler\n+//~^ ERROR the attribute `ty_fn` is currently unknown to the compiler\n \n impl<I> StTy<I> {\n     fn m_lt<#[lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n-    //~^ ERROR The attribute `lt_meth` is currently unknown to the compiler\n+    //~^ ERROR the attribute `lt_meth` is currently unknown to the compiler\n     fn m_ty<#[ty_meth] P>(_: P) { }\n-    //~^ ERROR The attribute `ty_meth` is currently unknown to the compiler\n+    //~^ ERROR the attribute `ty_meth` is currently unknown to the compiler\n }\n \n fn hof_lt<Q>(_: Q)\n     where Q: for <#[lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n-    //~^ ERROR The attribute `lt_hof` is currently unknown to the compiler\n+    //~^ ERROR the attribute `lt_hof` is currently unknown to the compiler\n {\n }\n "}, {"sha": "15e0c41b90637909c936075e767e9c45462ca5c8", "filename": "src/test/ui/feature-gates/feature-gate-custom_attribute2.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.stderr?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: The attribute `lt_struct` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `lt_struct` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:6:13\n    |\n LL | struct StLt<#[lt_struct] 'a>(&'a u32);\n@@ -7,7 +7,7 @@ LL | struct StLt<#[lt_struct] 'a>(&'a u32);\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `ty_struct` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `ty_struct` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:8:13\n    |\n LL | struct StTy<#[ty_struct] I>(I);\n@@ -16,7 +16,7 @@ LL | struct StTy<#[ty_struct] I>(I);\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `lt_enum` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `lt_enum` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:11:11\n    |\n LL | enum EnLt<#[lt_enum] 'b> { A(&'b u32), B }\n@@ -25,7 +25,7 @@ LL | enum EnLt<#[lt_enum] 'b> { A(&'b u32), B }\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `ty_enum` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `ty_enum` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:13:11\n    |\n LL | enum EnTy<#[ty_enum] J> { A(J), B }\n@@ -34,7 +34,7 @@ LL | enum EnTy<#[ty_enum] J> { A(J), B }\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `lt_trait` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `lt_trait` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:16:12\n    |\n LL | trait TrLt<#[lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n@@ -43,7 +43,7 @@ LL | trait TrLt<#[lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `ty_trait` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `ty_trait` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:18:12\n    |\n LL | trait TrTy<#[ty_trait] K> { fn foo(&self, _: K); }\n@@ -52,7 +52,7 @@ LL | trait TrTy<#[ty_trait] K> { fn foo(&self, _: K); }\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `lt_type` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `lt_type` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:21:11\n    |\n LL | type TyLt<#[lt_type] 'd> = &'d u32;\n@@ -61,7 +61,7 @@ LL | type TyLt<#[lt_type] 'd> = &'d u32;\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `ty_type` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `ty_type` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:23:11\n    |\n LL | type TyTy<#[ty_type] L> = (L, );\n@@ -70,7 +70,7 @@ LL | type TyTy<#[ty_type] L> = (L, );\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `lt_inherent` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `lt_inherent` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:26:6\n    |\n LL | impl<#[lt_inherent] 'e> StLt<'e> { }\n@@ -79,7 +79,7 @@ LL | impl<#[lt_inherent] 'e> StLt<'e> { }\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `ty_inherent` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `ty_inherent` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:28:6\n    |\n LL | impl<#[ty_inherent] M> StTy<M> { }\n@@ -88,7 +88,7 @@ LL | impl<#[ty_inherent] M> StTy<M> { }\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `lt_impl_for` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `lt_impl_for` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:31:6\n    |\n LL | impl<#[lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n@@ -97,7 +97,7 @@ LL | impl<#[lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `ty_impl_for` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `ty_impl_for` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:35:6\n    |\n LL | impl<#[ty_impl_for] N> TrTy<N> for StTy<N> {\n@@ -106,7 +106,7 @@ LL | impl<#[ty_impl_for] N> TrTy<N> for StTy<N> {\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `lt_fn` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `lt_fn` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:40:9\n    |\n LL | fn f_lt<#[lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n@@ -115,7 +115,7 @@ LL | fn f_lt<#[lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `ty_fn` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `ty_fn` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:42:9\n    |\n LL | fn f_ty<#[ty_fn] O>(_: O) { }\n@@ -124,7 +124,7 @@ LL | fn f_ty<#[ty_fn] O>(_: O) { }\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `lt_meth` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `lt_meth` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:46:13\n    |\n LL |     fn m_lt<#[lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n@@ -133,7 +133,7 @@ LL |     fn m_lt<#[lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `ty_meth` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `ty_meth` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:48:13\n    |\n LL |     fn m_ty<#[ty_meth] P>(_: P) { }\n@@ -142,7 +142,7 @@ LL |     fn m_ty<#[ty_meth] P>(_: P) { }\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `lt_hof` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `lt_hof` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/feature-gate-custom_attribute2.rs:53:19\n    |\n LL |     where Q: for <#[lt_hof] 'i> Fn(&'i [u32]) -> &'i u32"}, {"sha": "23db92c15df650155725b14555eeba49096a668d", "filename": "src/test/ui/feature-gates/feature-gate-may-dangle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-may-dangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-may-dangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-may-dangle.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -4,7 +4,7 @@\n \n struct Pt<A>(A);\n unsafe impl<#[may_dangle] A> Drop for Pt<A> {\n-    //~^ ERROR may_dangle has unstable semantics and may be removed in the future\n+    //~^ ERROR `may_dangle` has unstable semantics and may be removed in the future\n     fn drop(&mut self) { }\n }\n "}, {"sha": "b344d7375747331ca9984f61b7e86fb492bb1ca0", "filename": "src/test/ui/feature-gates/feature-gate-may-dangle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-may-dangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-may-dangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-may-dangle.stderr?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: may_dangle has unstable semantics and may be removed in the future\n+error[E0658]: `may_dangle` has unstable semantics and may be removed in the future\n   --> $DIR/feature-gate-may-dangle.rs:6:13\n    |\n LL | unsafe impl<#[may_dangle] A> Drop for Pt<A> {"}, {"sha": "8e4e09b13a9bd26ffa19931334228e627d7db101", "filename": "src/test/ui/issues/issue-21596.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -5,6 +5,7 @@ LL |     println!(\"{}\", z.to_string());\n    |                      ^^^^^^^^^\n    |\n    = note: try using `<*const T>::as_ref()` to get a reference to the type behind the pointer: https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref\n+   = note: using `<*const T>::as_ref()` on a pointer which is unaligned or points to invalid or uninitialized memory is undefined behavior\n    = note: the method `to_string` exists but the following trait bounds were not satisfied:\n            `*const u8 : std::string::ToString`\n "}, {"sha": "33c8a9fa328ca2ee696ec3e88907f6f14c1f0069", "filename": "src/test/ui/parser/issue-62660.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Fparser%2Fissue-62660.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Fparser%2Fissue-62660.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62660.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -0,0 +1,11 @@\n+// Regression test for issue #62660: if a receiver's type does not\n+// successfully parse, emit the correct error instead of ICE-ing the compiler.\n+\n+struct Foo;\n+\n+impl Foo {\n+    pub fn foo(_: i32, self: Box<Self) {}\n+    //~^ ERROR expected one of `!`, `(`, `+`, `,`, `::`, `<`, or `>`, found `)`\n+}\n+\n+fn main() {}"}, {"sha": "3a8f6797b82fb7f5829ea2be7c137e147b26794b", "filename": "src/test/ui/parser/issue-62660.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Fparser%2Fissue-62660.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Fparser%2Fissue-62660.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62660.stderr?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -0,0 +1,8 @@\n+error: expected one of `!`, `(`, `+`, `,`, `::`, `<`, or `>`, found `)`\n+  --> $DIR/issue-62660.rs:7:38\n+   |\n+LL |     pub fn foo(_: i32, self: Box<Self) {}\n+   |                                      ^ expected one of 7 possible tokens here\n+\n+error: aborting due to previous error\n+"}, {"sha": "a7f6f8bfb13d60f81382c5ad3111cbbe6decbecd", "filename": "src/test/ui/proc-macro/proc-macro-gates2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.stderr?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: The attribute `empty_attr` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `empty_attr` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/proc-macro-gates2.rs:12:11\n    |\n LL | fn _test6<#[empty_attr] T>() {}\n@@ -7,7 +7,7 @@ LL | fn _test6<#[empty_attr] T>() {}\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `empty_attr` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `empty_attr` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/proc-macro-gates2.rs:17:9\n    |\n LL |         #[empty_attr]"}, {"sha": "b957c673a41f1a207a36c3c4186d3cc22504a3a3", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-builtin-attrs.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -5,7 +5,7 @@ extern \"C\" {\n         /// Foo\n         //~^ ERROR documentation comments cannot be applied to function\n         #[test] a: i32,\n-        //~^ ERROR The attribute `test` is currently unknown to the compiler and may have\n+        //~^ ERROR the attribute `test` is currently unknown to the compiler and may have\n         /// Bar\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n@@ -21,7 +21,7 @@ type FnType = fn(\n     /// Foo\n     //~^ ERROR documentation comments cannot be applied to function\n     #[test] a: u32,\n-    //~^ ERROR The attribute `test` is currently unknown to the compiler and may have\n+    //~^ ERROR the attribute `test` is currently unknown to the compiler and may have\n     /// Bar\n     //~^ ERROR documentation comments cannot be applied to function\n     #[must_use]\n@@ -36,7 +36,7 @@ pub fn foo(\n     /// Foo\n     //~^ ERROR documentation comments cannot be applied to function\n     #[test] a: u32,\n-    //~^ ERROR The attribute `test` is currently unknown to the compiler and may have\n+    //~^ ERROR the attribute `test` is currently unknown to the compiler and may have\n     /// Bar\n     //~^ ERROR documentation comments cannot be applied to function\n     #[must_use]\n@@ -56,7 +56,7 @@ impl SelfStruct {\n         /// Bar\n         //~^ ERROR documentation comments cannot be applied to function\n         #[test] a: i32,\n-        //~^ ERROR The attribute `test` is currently unknown to the compiler and may have\n+        //~^ ERROR the attribute `test` is currently unknown to the compiler and may have\n         /// Baz\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n@@ -77,7 +77,7 @@ impl RefStruct {\n         /// Bar\n         //~^ ERROR documentation comments cannot be applied to function\n         #[test] a: i32,\n-        //~^ ERROR The attribute `test` is currently unknown to the compiler and may have\n+        //~^ ERROR the attribute `test` is currently unknown to the compiler and may have\n         /// Baz\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n@@ -96,7 +96,7 @@ trait RefTrait {\n         /// Bar\n         //~^ ERROR documentation comments cannot be applied to function\n         #[test] a: i32,\n-        //~^ ERROR The attribute `test` is currently unknown to the compiler and may have\n+        //~^ ERROR the attribute `test` is currently unknown to the compiler and may have\n         /// Baz\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n@@ -115,7 +115,7 @@ impl RefTrait for RefStruct {\n         /// Bar\n         //~^ ERROR documentation comments cannot be applied to function\n         #[test] a: i32,\n-        //~^ ERROR The attribute `test` is currently unknown to the compiler and may have\n+        //~^ ERROR the attribute `test` is currently unknown to the compiler and may have\n         /// Baz\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n@@ -132,7 +132,7 @@ fn main() {\n         /// Foo\n         //~^ ERROR documentation comments cannot be applied to function\n         #[test] a: u32,\n-        //~^ ERROR The attribute `test` is currently unknown to the compiler and may have\n+        //~^ ERROR the attribute `test` is currently unknown to the compiler and may have\n         /// Bar\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]"}, {"sha": "a57572abb3513c98419b4185409d3b1dae087e74", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-builtin-attrs.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -262,7 +262,7 @@ error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-i\n LL |         #[no_mangle] b: i32\n    |         ^^^^^^^^^^^^\n \n-error[E0658]: The attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/param-attrs-builtin-attrs.rs:7:9\n    |\n LL |         #[test] a: i32,\n@@ -271,7 +271,7 @@ LL |         #[test] a: i32,\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/param-attrs-builtin-attrs.rs:23:5\n    |\n LL |     #[test] a: u32,\n@@ -280,7 +280,7 @@ LL |     #[test] a: u32,\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/param-attrs-builtin-attrs.rs:38:5\n    |\n LL |     #[test] a: u32,\n@@ -289,7 +289,7 @@ LL |     #[test] a: u32,\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/param-attrs-builtin-attrs.rs:58:9\n    |\n LL |         #[test] a: i32,\n@@ -298,7 +298,7 @@ LL |         #[test] a: i32,\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/param-attrs-builtin-attrs.rs:79:9\n    |\n LL |         #[test] a: i32,\n@@ -307,7 +307,7 @@ LL |         #[test] a: i32,\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/param-attrs-builtin-attrs.rs:98:9\n    |\n LL |         #[test] a: i32,\n@@ -316,7 +316,7 @@ LL |         #[test] a: i32,\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/param-attrs-builtin-attrs.rs:117:9\n    |\n LL |         #[test] a: i32,\n@@ -325,7 +325,7 @@ LL |         #[test] a: i32,\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: The attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n+error[E0658]: the attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n   --> $DIR/param-attrs-builtin-attrs.rs:134:9\n    |\n LL |         #[test] a: u32,"}, {"sha": "b59432078350ef94ca277a4ae7ece407557fa8bf", "filename": "src/test/ui/uninhabited/exhaustive-wo-nevertype-issue-51221.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Funinhabited%2Fexhaustive-wo-nevertype-issue-51221.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02785dabad07d19b8c76a7f86763801d5d3497ff/src%2Ftest%2Fui%2Funinhabited%2Fexhaustive-wo-nevertype-issue-51221.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Fexhaustive-wo-nevertype-issue-51221.rs?ref=02785dabad07d19b8c76a7f86763801d5d3497ff", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+#![feature(exhaustive_patterns)]\n+\n+enum Void {}\n+fn main() {\n+    let a: Option<Void> = None;\n+    let None = a;\n+}"}]}