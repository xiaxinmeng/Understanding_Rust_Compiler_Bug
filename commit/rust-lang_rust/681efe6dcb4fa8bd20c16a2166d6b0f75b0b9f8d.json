{"sha": "681efe6dcb4fa8bd20c16a2166d6b0f75b0b9f8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MWVmZTZkY2I0ZmE4YmQyMGMxNmEyMTY2ZDZiMGY3NWIwYjlmOGQ=", "commit": {"author": {"name": "DropDemBits", "email": "r3usrlnd@gmail.com", "date": "2021-08-30T23:09:29Z"}, "committer": {"name": "DropDemBits", "email": "r3usrlnd@gmail.com", "date": "2021-08-31T01:26:21Z"}, "message": "feat: Properly indent extracted struct and enum", "tree": {"sha": "781c8a15c02e5358590fa53b4cc063d52dca1463", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/781c8a15c02e5358590fa53b4cc063d52dca1463"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/681efe6dcb4fa8bd20c16a2166d6b0f75b0b9f8d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEosE1rSpoNOieSVDGiUkQv4PnA0cFAmEthXIACgkQiUkQv4Pn\nA0d6Awv+NPmgMdD6pSP4Qm+lQTwYaARVbsUqVctzo5QC+YWPc6tDMdlG1MBiwca2\nHi91clodo4S5hd93cTycW8S8PD2N6DK4chNB9wVmqPaCbbso0txjhfsDkzps7uE7\nVHaLGzXEH4CX43/x+7nkddWKvUYLwfYEv4xhnicdArVoEYgZP2ZrbUiw9X4vA4QP\nC+8xrn93DMjlENYopGPDVaVF7awaA4IXXxtXUfxzHmh1jqfQRwTQCuBw5ilfdvw3\nm2xz8agwS+McVEQSHp7zpYh1eMUsPc1FOZLHwgI+pFW0JnNbNopCUCqxFDnu6N+C\n9nCrtmKwsfK8Xu5uGHkRmXre6Pn1aRctdZ3ZWDW05F7FXG/mfnHgnjlzZLw/XNUU\nZISbeuoa3Eoki14UfdqJ6Grf072ix7BDLbPgJ5MRyicBI8bJyl4OCDHT0uCaitEt\noeI0Ew38UHLZHFBmSbbo1ZMoMFR/4mvFmsLrgWrm+O5KHHLru1j53uvkJ0LEZ6Fg\nlhCHJyFL\n=K72O\n-----END PGP SIGNATURE-----", "payload": "tree 781c8a15c02e5358590fa53b4cc063d52dca1463\nparent 5c704f11d2ef82d7517680bba6dd0015d750fca2\nauthor DropDemBits <r3usrlnd@gmail.com> 1630364969 -0400\ncommitter DropDemBits <r3usrlnd@gmail.com> 1630373181 -0400\n\nfeat: Properly indent extracted struct and enum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/681efe6dcb4fa8bd20c16a2166d6b0f75b0b9f8d", "html_url": "https://github.com/rust-lang/rust/commit/681efe6dcb4fa8bd20c16a2166d6b0f75b0b9f8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/681efe6dcb4fa8bd20c16a2166d6b0f75b0b9f8d/comments", "author": {"login": "DropDemBits", "id": 13354275, "node_id": "MDQ6VXNlcjEzMzU0Mjc1", "avatar_url": "https://avatars.githubusercontent.com/u/13354275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DropDemBits", "html_url": "https://github.com/DropDemBits", "followers_url": "https://api.github.com/users/DropDemBits/followers", "following_url": "https://api.github.com/users/DropDemBits/following{/other_user}", "gists_url": "https://api.github.com/users/DropDemBits/gists{/gist_id}", "starred_url": "https://api.github.com/users/DropDemBits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DropDemBits/subscriptions", "organizations_url": "https://api.github.com/users/DropDemBits/orgs", "repos_url": "https://api.github.com/users/DropDemBits/repos", "events_url": "https://api.github.com/users/DropDemBits/events{/privacy}", "received_events_url": "https://api.github.com/users/DropDemBits/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DropDemBits", "id": 13354275, "node_id": "MDQ6VXNlcjEzMzU0Mjc1", "avatar_url": "https://avatars.githubusercontent.com/u/13354275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DropDemBits", "html_url": "https://github.com/DropDemBits", "followers_url": "https://api.github.com/users/DropDemBits/followers", "following_url": "https://api.github.com/users/DropDemBits/following{/other_user}", "gists_url": "https://api.github.com/users/DropDemBits/gists{/gist_id}", "starred_url": "https://api.github.com/users/DropDemBits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DropDemBits/subscriptions", "organizations_url": "https://api.github.com/users/DropDemBits/orgs", "repos_url": "https://api.github.com/users/DropDemBits/repos", "events_url": "https://api.github.com/users/DropDemBits/events{/privacy}", "received_events_url": "https://api.github.com/users/DropDemBits/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c704f11d2ef82d7517680bba6dd0015d750fca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c704f11d2ef82d7517680bba6dd0015d750fca2", "html_url": "https://github.com/rust-lang/rust/commit/5c704f11d2ef82d7517680bba6dd0015d750fca2"}], "stats": {"total": 101, "additions": 79, "deletions": 22}, "files": [{"sha": "87aeddbb560227528cb914d8465239882343db20", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 79, "deletions": 22, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/681efe6dcb4fa8bd20c16a2166d6b0f75b0b9f8d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681efe6dcb4fa8bd20c16a2166d6b0f75b0b9f8d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=681efe6dcb4fa8bd20c16a2166d6b0f75b0b9f8d", "patch": "@@ -15,8 +15,8 @@ use itertools::Itertools;\n use rustc_hash::FxHashSet;\n use syntax::{\n     ast::{\n-        self, make, AstNode, AttrsOwner, GenericParamsOwner, NameOwner, TypeBoundsOwner,\n-        VisibilityOwner,\n+        self, edit_in_place::Indent, make, AstNode, AttrsOwner, GenericParamsOwner, NameOwner,\n+        TypeBoundsOwner, VisibilityOwner,\n     },\n     match_ast,\n     ted::{self, Position},\n@@ -89,6 +89,7 @@ pub(crate) fn extract_struct_from_enum_variant(\n                 });\n             }\n             builder.edit_file(ctx.frange.file_id);\n+\n             let variant = builder.make_mut(variant.clone());\n             if let Some(references) = def_file_references {\n                 let processed = process_references(\n@@ -104,10 +105,18 @@ pub(crate) fn extract_struct_from_enum_variant(\n                 });\n             }\n \n-            let def = create_struct_def(variant_name.clone(), &field_list, &enum_ast);\n+            let indent = enum_ast.indent_level();\n+            let def = create_struct_def(variant_name.clone(), &variant, &field_list, &enum_ast);\n+            def.reindent_to(indent);\n+\n             let start_offset = &variant.parent_enum().syntax().clone();\n-            ted::insert_raw(ted::Position::before(start_offset), def.syntax());\n-            ted::insert_raw(ted::Position::before(start_offset), &make::tokens::blank_line());\n+            ted::insert_all_raw(\n+                ted::Position::before(start_offset),\n+                vec![\n+                    def.syntax().clone().into(),\n+                    make::tokens::whitespace(&format!(\"\\n\\n{}\", indent)).into(),\n+                ],\n+            );\n \n             update_variant(&variant, enum_ast.generic_param_list());\n         },\n@@ -163,7 +172,7 @@ fn create_struct_def(\n     };\n \n     // for fields without any existing visibility, use pub visibility\n-    let field_list = match field_list {\n+    let field_list: ast::FieldList = match field_list {\n         Either::Left(field_list) => {\n             let field_list = field_list.clone_for_update();\n \n@@ -188,6 +197,8 @@ fn create_struct_def(\n         }\n     };\n \n+    field_list.reindent_to(IndentLevel::single());\n+\n     // FIXME: This uses all the generic params of the enum, but the variant might not use all of them.\n     let strukt =\n         make::struct_(enum_.visibility(), variant_name, enum_.generic_param_list(), field_list)\n@@ -364,6 +375,52 @@ enum Enum { Variant(Variant) }\"#,\n         );\n     }\n \n+    #[test]\n+    fn test_extract_struct_indent_to_parent_enum() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            r#\"\n+enum Enum {\n+    Variant {\n+        field: u32$0\n+    }\n+}\"#,\n+            r#\"\n+struct Variant{\n+    pub field: u32\n+}\n+\n+enum Enum {\n+    Variant(Variant)\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_struct_indent_to_parent_enum_in_mod() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            r#\"\n+mod indenting {\n+    enum Enum {\n+        Variant {\n+            field: u32$0\n+        }\n+    }\n+}\"#,\n+            r#\"\n+mod indenting {\n+    struct Variant{\n+        pub field: u32\n+    }\n+\n+    enum Enum {\n+        Variant(Variant)\n+    }\n+}\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_extract_struct_keep_comments_and_attrs_one_field_named() {\n         check_assist(\n@@ -380,12 +437,12 @@ enum A {\n }\"#,\n             r#\"\n struct One{\n-        // leading comment\n-        /// doc comment\n-        #[an_attr]\n-        pub foo: u32\n-        // trailing comment\n-    }\n+    // leading comment\n+    /// doc comment\n+    #[an_attr]\n+    pub foo: u32\n+    // trailing comment\n+}\n \n enum A {\n     One(One)\n@@ -412,15 +469,15 @@ enum A {\n }\"#,\n             r#\"\n struct One{\n-        // comment\n-        /// doc\n-        #[attr]\n-        pub foo: u32,\n-        // comment\n-        #[attr]\n-        /// doc\n-        pub bar: u32\n-    }\n+    // comment\n+    /// doc\n+    #[attr]\n+    pub foo: u32,\n+    // comment\n+    #[attr]\n+    /// doc\n+    pub bar: u32\n+}\n \n enum A {\n     One(One)\n@@ -527,7 +584,7 @@ mod my_mod {\n \n         pub struct MyField(pub u8, pub u8);\n \n-pub enum MyEnum {\n+        pub enum MyEnum {\n             MyField(MyField),\n         }\n     }"}]}