{"sha": "082c001843ccf7eb4e20ce8c2f739c1b9eef02d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MmMwMDE4NDNjY2Y3ZWI0ZTIwY2U4YzJmNzM5YzFiOWVlZjAyZDQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-05T12:59:33Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-06T04:52:25Z"}, "message": "Add visit_static()", "tree": {"sha": "452eaf984f3786fac4ac076232ab6733708520a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/452eaf984f3786fac4ac076232ab6733708520a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/082c001843ccf7eb4e20ce8c2f739c1b9eef02d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/082c001843ccf7eb4e20ce8c2f739c1b9eef02d4", "html_url": "https://github.com/rust-lang/rust/commit/082c001843ccf7eb4e20ce8c2f739c1b9eef02d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/082c001843ccf7eb4e20ce8c2f739c1b9eef02d4/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b2b7f67ee3b504d267a9791ea76c1230fdbc666", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b2b7f67ee3b504d267a9791ea76c1230fdbc666", "html_url": "https://github.com/rust-lang/rust/commit/3b2b7f67ee3b504d267a9791ea76c1230fdbc666"}], "stats": {"total": 137, "additions": 63, "deletions": 74}, "files": [{"sha": "829d9a1e2d7f018d39a39b497d0582f8c6cee942", "filename": "src/items.rs", "status": "modified", "additions": 58, "deletions": 16, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/082c001843ccf7eb4e20ce8c2f739c1b9eef02d4/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082c001843ccf7eb4e20ce8c2f739c1b9eef02d4/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=082c001843ccf7eb4e20ce8c2f739c1b9eef02d4", "patch": "@@ -411,6 +411,11 @@ impl<'a> FmtVisitor<'a> {\n         None\n     }\n \n+    pub fn visit_static(&mut self, static_parts: &StaticParts) {\n+        let rewrite = rewrite_static(&self.get_context(), static_parts, self.block_indent);\n+        self.push_rewrite(static_parts.span, rewrite);\n+    }\n+\n     pub fn visit_struct(&mut self, struct_parts: &StructParts) {\n         let is_tuple = struct_parts.def.is_tuple();\n         let rewrite = format_struct(&self.get_context(), struct_parts, self.block_indent, None)\n@@ -1480,44 +1485,81 @@ pub fn rewrite_struct_field(\n }\n \n pub struct StaticParts<'a> {\n+    prefix: &'a str,\n     vis: &'a ast::Visibility,\n     ident: ast::Ident,\n     ty: &'a ast::Ty,\n     mutability: ast::Mutability,\n     expr_opt: Option<&'a ptr::P<ast::Expr>>,\n+    span: Span,\n }\n \n impl<'a> StaticParts<'a> {\n-    pub fn new(\n-        vis: &'a ast::Visibility,\n-        ident: ast::Ident,\n-        ty: &'a ast::Ty,\n-        mutability: ast::Mutability,\n-        expr_opt: Option<&'a ptr::P<ast::Expr>>,\n-    ) -> StaticParts<'a> {\n+    pub fn from_item(item: &'a ast::Item) -> Self {\n+        let (prefix, ty, mutability, expr) = match item.node {\n+            ast::ItemKind::Static(ref ty, mutability, ref expr) => (\"static\", ty, mutability, expr),\n+            ast::ItemKind::Const(ref ty, ref expr) => {\n+                (\"const\", ty, ast::Mutability::Immutable, expr)\n+            }\n+            _ => unreachable!(),\n+        };\n         StaticParts {\n-            vis,\n-            ident,\n-            ty,\n-            mutability,\n-            expr_opt,\n+            prefix: prefix,\n+            vis: &item.vis,\n+            ident: item.ident,\n+            ty: ty,\n+            mutability: mutability,\n+            expr_opt: Some(expr),\n+            span: item.span,\n+        }\n+    }\n+\n+    pub fn from_trait_item(ti: &'a ast::TraitItem) -> Self {\n+        let (ty, expr_opt) = match ti.node {\n+            ast::TraitItemKind::Const(ref ty, ref expr_opt) => (ty, expr_opt),\n+            _ => unreachable!(),\n+        };\n+        StaticParts {\n+            prefix: \"const\",\n+            vis: &ast::Visibility::Inherited,\n+            ident: ti.ident,\n+            ty: ty,\n+            mutability: ast::Mutability::Immutable,\n+            expr_opt: expr_opt.as_ref(),\n+            span: ti.span,\n+        }\n+    }\n+\n+    pub fn from_impl_item(ii: &'a ast::ImplItem) -> Self {\n+        let (ty, expr) = match ii.node {\n+            ast::ImplItemKind::Const(ref ty, ref expr) => (ty, expr),\n+            _ => unreachable!(),\n+        };\n+        StaticParts {\n+            prefix: \"const\",\n+            vis: &ii.vis,\n+            ident: ii.ident,\n+            ty: ty,\n+            mutability: ast::Mutability::Immutable,\n+            expr_opt: Some(expr),\n+            span: ii.span,\n         }\n     }\n }\n \n-pub fn rewrite_static(\n-    prefix: &str,\n+fn rewrite_static(\n+    context: &RewriteContext,\n     static_parts: &StaticParts,\n     offset: Indent,\n-    span: Span,\n-    context: &RewriteContext,\n ) -> Option<String> {\n     let StaticParts {\n+        prefix,\n         vis,\n         ident,\n         ty,\n         mutability,\n         expr_opt,\n+        span,\n     } = *static_parts;\n     let colon = colon_spaces(\n         context.config.space_before_type_annotation(),"}, {"sha": "417b12b2d53215686ebdc3cbd484f1c8c3fb269a", "filename": "src/visitor.rs", "status": "modified", "additions": 5, "deletions": 58, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/082c001843ccf7eb4e20ce8c2f739c1b9eef02d4/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082c001843ccf7eb4e20ce8c2f739c1b9eef02d4/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=082c001843ccf7eb4e20ce8c2f739c1b9eef02d4", "patch": "@@ -24,7 +24,7 @@ use comment::{contains_comment, recover_missing_comment_in_span, remove_trailing\n use comment::rewrite_comment;\n use config::{BraceStyle, Config};\n use items::{format_impl, format_trait, rewrite_associated_impl_type, rewrite_associated_type,\n-            rewrite_static, rewrite_type_alias, FnSig, StaticParts, StructParts};\n+            rewrite_type_alias, FnSig, StaticParts, StructParts};\n use lists::{itemize_list, write_list, DefinitiveListTactic, ListFormatting, SeparatorPlace,\n             SeparatorTactic};\n use macros::{rewrite_macro, MacroPosition};\n@@ -363,31 +363,8 @@ impl<'a> FmtVisitor<'a> {\n                 self.format_missing_with_indent(source!(self, item.span).lo());\n                 self.format_foreign_mod(foreign_mod, item.span);\n             }\n-            ast::ItemKind::Static(ref ty, mutability, ref expr) => {\n-                let rewrite = rewrite_static(\n-                    \"static\",\n-                    &StaticParts::new(&item.vis, item.ident, ty, mutability, Some(expr)),\n-                    self.block_indent,\n-                    item.span,\n-                    &self.get_context(),\n-                );\n-                self.push_rewrite(item.span, rewrite);\n-            }\n-            ast::ItemKind::Const(ref ty, ref expr) => {\n-                let rewrite = rewrite_static(\n-                    \"const\",\n-                    &StaticParts::new(\n-                        &item.vis,\n-                        item.ident,\n-                        ty,\n-                        ast::Mutability::Immutable,\n-                        Some(expr),\n-                    ),\n-                    self.block_indent,\n-                    item.span,\n-                    &self.get_context(),\n-                );\n-                self.push_rewrite(item.span, rewrite);\n+            ast::ItemKind::Static(..) | ast::ItemKind::Const(..) => {\n+                self.visit_static(&StaticParts::from_item(item));\n             }\n             ast::ItemKind::AutoImpl(..) => {\n                 // FIXME(#78): format impl definitions.\n@@ -435,22 +412,7 @@ impl<'a> FmtVisitor<'a> {\n         }\n \n         match ti.node {\n-            ast::TraitItemKind::Const(ref ty, ref expr_opt) => {\n-                let rewrite = rewrite_static(\n-                    \"const\",\n-                    &StaticParts::new(\n-                        &ast::Visibility::Inherited,\n-                        ti.ident,\n-                        ty,\n-                        ast::Mutability::Immutable,\n-                        expr_opt.as_ref(),\n-                    ),\n-                    self.block_indent,\n-                    ti.span,\n-                    &self.get_context(),\n-                );\n-                self.push_rewrite(ti.span, rewrite);\n-            }\n+            ast::TraitItemKind::Const(..) => self.visit_static(&StaticParts::from_trait_item(ti)),\n             ast::TraitItemKind::Method(ref sig, None) => {\n                 let indent = self.block_indent;\n                 let rewrite =\n@@ -502,22 +464,7 @@ impl<'a> FmtVisitor<'a> {\n                     Some(&ii.attrs),\n                 );\n             }\n-            ast::ImplItemKind::Const(ref ty, ref expr) => {\n-                let rewrite = rewrite_static(\n-                    \"const\",\n-                    &StaticParts::new(\n-                        &ii.vis,\n-                        ii.ident,\n-                        ty,\n-                        ast::Mutability::Immutable,\n-                        Some(expr),\n-                    ),\n-                    self.block_indent,\n-                    ii.span,\n-                    &self.get_context(),\n-                );\n-                self.push_rewrite(ii.span, rewrite);\n-            }\n+            ast::ImplItemKind::Const(..) => self.visit_static(&StaticParts::from_impl_item(ii)),\n             ast::ImplItemKind::Type(ref ty) => {\n                 let rewrite = rewrite_associated_impl_type(\n                     ii.ident,"}]}