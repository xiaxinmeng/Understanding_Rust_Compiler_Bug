{"sha": "f16eac928a7feec28825db36acd259aca2382381", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNmVhYzkyOGE3ZmVlYzI4ODI1ZGIzNmFjZDI1OWFjYTIzODIzODE=", "commit": {"author": {"name": "Pavel Sountsov", "email": "siege@google.com", "date": "2016-05-06T04:48:44Z"}, "committer": {"name": "SiegeLord", "email": "slabode@aim.com", "date": "2016-05-10T15:21:00Z"}, "message": "Make --emit dep-info work correctly with -Z no-analysis again.\n\nPreviously, it would attempt to resolve some external crates that weren't\nnecessary for dep-info output.\n\nFixes #33231.", "tree": {"sha": "e71139d1a2ca8371fc0906f108e511f7a7f3d510", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e71139d1a2ca8371fc0906f108e511f7a7f3d510"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f16eac928a7feec28825db36acd259aca2382381", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f16eac928a7feec28825db36acd259aca2382381", "html_url": "https://github.com/rust-lang/rust/commit/f16eac928a7feec28825db36acd259aca2382381", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f16eac928a7feec28825db36acd259aca2382381/comments", "author": {"login": "SiegeLordEx", "id": 43966695, "node_id": "MDQ6VXNlcjQzOTY2Njk1", "avatar_url": "https://avatars.githubusercontent.com/u/43966695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SiegeLordEx", "html_url": "https://github.com/SiegeLordEx", "followers_url": "https://api.github.com/users/SiegeLordEx/followers", "following_url": "https://api.github.com/users/SiegeLordEx/following{/other_user}", "gists_url": "https://api.github.com/users/SiegeLordEx/gists{/gist_id}", "starred_url": "https://api.github.com/users/SiegeLordEx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SiegeLordEx/subscriptions", "organizations_url": "https://api.github.com/users/SiegeLordEx/orgs", "repos_url": "https://api.github.com/users/SiegeLordEx/repos", "events_url": "https://api.github.com/users/SiegeLordEx/events{/privacy}", "received_events_url": "https://api.github.com/users/SiegeLordEx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SiegeLord", "id": 480550, "node_id": "MDQ6VXNlcjQ4MDU1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/480550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SiegeLord", "html_url": "https://github.com/SiegeLord", "followers_url": "https://api.github.com/users/SiegeLord/followers", "following_url": "https://api.github.com/users/SiegeLord/following{/other_user}", "gists_url": "https://api.github.com/users/SiegeLord/gists{/gist_id}", "starred_url": "https://api.github.com/users/SiegeLord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SiegeLord/subscriptions", "organizations_url": "https://api.github.com/users/SiegeLord/orgs", "repos_url": "https://api.github.com/users/SiegeLord/repos", "events_url": "https://api.github.com/users/SiegeLord/events{/privacy}", "received_events_url": "https://api.github.com/users/SiegeLord/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6588097d4d65e567fb234c042e61ad8ce4d41e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6588097d4d65e567fb234c042e61ad8ce4d41e6", "html_url": "https://github.com/rust-lang/rust/commit/d6588097d4d65e567fb234c042e61ad8ce4d41e6"}], "stats": {"total": 133, "additions": 93, "deletions": 40}, "files": [{"sha": "0d5ecc53a7900a396d596e811b3b0287d5ced029", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 46, "deletions": 16, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/f16eac928a7feec28825db36acd259aca2382381/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16eac928a7feec28825db36acd259aca2382381/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=f16eac928a7feec28825db36acd259aca2382381", "patch": "@@ -138,6 +138,20 @@ pub fn compile_input(sess: &Session,\n                                                                  &id),\n                                 Ok(()));\n \n+        write_out_deps(sess, &outputs, &id);\n+\n+        {            controller_entry_point!(after_write_deps,\n+                                    sess,\n+                                    CompileState::state_after_write_deps(input,\n+                                                                         sess,\n+                                                                         outdir,\n+                                                                         output,\n+                                                                         &cstore,\n+                                                                         &expanded_crate,\n+                                                                         &id),\n+                                    Ok(()));\n+        }\n+\n         let expanded_crate = assign_node_ids(sess, expanded_crate);\n         let dep_graph = DepGraph::new(sess.opts.build_dep_graph());\n \n@@ -173,25 +187,22 @@ pub fn compile_input(sess: &Session,\n                            \"indexing hir\",\n                            move || hir_map::map_crate(hir_forest, defs));\n \n-\n-        write_out_deps(sess, &outputs, &id);\n-\n         {\n             let _ignore = hir_map.dep_graph.in_ignore();\n-            controller_entry_point!(after_write_deps,\n+            controller_entry_point!(after_ast,\n                                     sess,\n-                                    CompileState::state_after_write_deps(input,\n-                                                                         sess,\n-                                                                         outdir,\n-                                                                         output,\n-                                                                         &arenas,\n-                                                                         &cstore,\n-                                                                         &hir_map,\n-                                                                         &analysis,\n-                                                                         &resolutions,\n-                                                                         &expanded_crate,\n-                                                                         &hir_map.krate(),\n-                                                                         &id),\n+                                    CompileState::state_after_ast(input,\n+                                                                  sess,\n+                                                                  outdir,\n+                                                                  output,\n+                                                                  &arenas,\n+                                                                  &cstore,\n+                                                                  &hir_map,\n+                                                                  &analysis,\n+                                                                  &resolutions,\n+                                                                  &expanded_crate,\n+                                                                  &hir_map.krate(),\n+                                                                  &id),\n                                     Ok(()));\n         }\n \n@@ -311,6 +322,7 @@ pub struct CompileController<'a> {\n     pub after_parse: PhaseController<'a>,\n     pub after_expand: PhaseController<'a>,\n     pub after_write_deps: PhaseController<'a>,\n+    pub after_ast: PhaseController<'a>,\n     pub after_analysis: PhaseController<'a>,\n     pub after_llvm: PhaseController<'a>,\n \n@@ -323,6 +335,7 @@ impl<'a> CompileController<'a> {\n             after_parse: PhaseController::basic(),\n             after_expand: PhaseController::basic(),\n             after_write_deps: PhaseController::basic(),\n+            after_ast: PhaseController::basic(),\n             after_analysis: PhaseController::basic(),\n             after_llvm: PhaseController::basic(),\n             make_glob_map: resolve::MakeGlobMap::No,\n@@ -430,6 +443,23 @@ impl<'a, 'b, 'ast, 'tcx> CompileState<'a, 'b, 'ast, 'tcx> {\n     }\n \n     fn state_after_write_deps(input: &'a Input,\n+                              session: &'ast Session,\n+                              out_dir: &'a Option<PathBuf>,\n+                              out_file: &'a Option<PathBuf>,\n+                              cstore: &'a CStore,\n+                              krate: &'a ast::Crate,\n+                              crate_name: &'a str)\n+                              -> CompileState<'a, 'b, 'ast, 'tcx> {\n+        CompileState {\n+            crate_name: Some(crate_name),\n+            cstore: Some(cstore),\n+            expanded_crate: Some(krate),\n+            out_file: out_file.as_ref().map(|s| &**s),\n+            ..CompileState::empty(input, session, out_dir)\n+        }\n+    }\n+\n+    fn state_after_ast(input: &'a Input,\n                               session: &'ast Session,\n                               out_dir: &'a Option<PathBuf>,\n                               out_file: &'a Option<PathBuf>,"}, {"sha": "483ba044add629c918d65a19bc12249d9fe8e532", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f16eac928a7feec28825db36acd259aca2382381/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16eac928a7feec28825db36acd259aca2382381/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=f16eac928a7feec28825db36acd259aca2382381", "patch": "@@ -461,23 +461,23 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n \n         if let Some((ppm, opt_uii)) = parse_pretty(sess, matches) {\n             if ppm.needs_ast_map(&opt_uii) {\n-                control.after_write_deps.stop = Compilation::Stop;\n+                control.after_ast.stop = Compilation::Stop;\n \n                 control.after_parse.callback = box move |state| {\n                     state.krate = Some(pretty::fold_crate(state.krate.take().unwrap(), ppm));\n                 };\n-                control.after_write_deps.callback = box move |state| {\n-                    pretty::print_after_write_deps(state.session,\n-                                                   state.ast_map.unwrap(),\n-                                                   state.analysis.unwrap(),\n-                                                   state.resolutions.unwrap(),\n-                                                   state.input,\n-                                                   &state.expanded_crate.take().unwrap(),\n-                                                   state.crate_name.unwrap(),\n-                                                   ppm,\n-                                                   state.arenas.unwrap(),\n-                                                   opt_uii.clone(),\n-                                                   state.out_file);\n+                control.after_ast.callback = box move |state| {\n+                    pretty::print_after_ast(state.session,\n+                                            state.ast_map.unwrap(),\n+                                            state.analysis.unwrap(),\n+                                            state.resolutions.unwrap(),\n+                                            state.input,\n+                                            &state.expanded_crate.take().unwrap(),\n+                                            state.crate_name.unwrap(),\n+                                            ppm,\n+                                            state.arenas.unwrap(),\n+                                            opt_uii.clone(),\n+                                            state.out_file);\n                 };\n             } else {\n                 control.after_parse.stop = Compilation::Stop;"}, {"sha": "2fd015bf5b80e640a5db6477d1485150ac4358cf", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f16eac928a7feec28825db36acd259aca2382381/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16eac928a7feec28825db36acd259aca2382381/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=f16eac928a7feec28825db36acd259aca2382381", "patch": "@@ -812,17 +812,17 @@ pub fn print_after_parsing(sess: &Session,\n     write_output(out, ofile);\n }\n \n-pub fn print_after_write_deps<'tcx, 'a: 'tcx>(sess: &'a Session,\n-                                              ast_map: &hir_map::Map<'tcx>,\n-                                              analysis: &ty::CrateAnalysis,\n-                                              resolutions: &Resolutions,\n-                                              input: &Input,\n-                                              krate: &ast::Crate,\n-                                              crate_name: &str,\n-                                              ppm: PpMode,\n-                                              arenas: &'tcx ty::CtxtArenas<'tcx>,\n-                                              opt_uii: Option<UserIdentifiedItem>,\n-                                              ofile: Option<&Path>) {\n+pub fn print_after_ast<'tcx, 'a: 'tcx>(sess: &'a Session,\n+                                       ast_map: &hir_map::Map<'tcx>,\n+                                       analysis: &ty::CrateAnalysis,\n+                                       resolutions: &Resolutions,\n+                                       input: &Input,\n+                                       krate: &ast::Crate,\n+                                       crate_name: &str,\n+                                       ppm: PpMode,\n+                                       arenas: &'tcx ty::CtxtArenas<'tcx>,\n+                                       opt_uii: Option<UserIdentifiedItem>,\n+                                       ofile: Option<&Path>) {\n     let dep_graph = DepGraph::new(false);\n     let _ignore = dep_graph.in_ignore();\n "}, {"sha": "8d31de3781c2d7a2c763a18f5dd3a3ebb7552b49", "filename": "src/test/run-make/dep-info-no-analysis/Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f16eac928a7feec28825db36acd259aca2382381/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/f16eac928a7feec28825db36acd259aca2382381/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2FMakefile?ref=f16eac928a7feec28825db36acd259aca2382381", "patch": "@@ -0,0 +1,6 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) -o $(TMPDIR)/input.dd -Z no-analysis --emit dep-info input.rs\n+\tsed -i \"s@$(TMPDIR)/@@g\" $(TMPDIR)/input.dd\n+\tdiff -u $(TMPDIR)/input.dd input.dd"}, {"sha": "f2c8676515b8ad2c73f634f5397b9c3fda24d3a0", "filename": "src/test/run-make/dep-info-no-analysis/input.dd", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f16eac928a7feec28825db36acd259aca2382381/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.dd", "raw_url": "https://github.com/rust-lang/rust/raw/f16eac928a7feec28825db36acd259aca2382381/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.dd", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.dd?ref=f16eac928a7feec28825db36acd259aca2382381", "patch": "@@ -0,0 +1,3 @@\n+input.dd: input.rs\n+\n+input.rs:"}, {"sha": "523b0f0670ce4eadc19fe8d8800f7f46f495bcb5", "filename": "src/test/run-make/dep-info-no-analysis/input.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f16eac928a7feec28825db36acd259aca2382381/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16eac928a7feec28825db36acd259aca2382381/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.rs?ref=f16eac928a7feec28825db36acd259aca2382381", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that dep info can be emitted without resolving external crates.\n+extern crate not_there;\n+\n+fn main() {}"}]}