{"sha": "79873f79b19f15dae9d44b8e57047c6f34514ed4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ODczZjc5YjE5ZjE1ZGFlOWQ0NGI4ZTU3MDQ3YzZmMzQ1MTRlZDQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-09T16:18:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-09T16:18:23Z"}, "message": "Rollup merge of #58762 - petrochenkov:unwind, r=Mark-Simulacrum\n\nMention `unwind(aborts)` in diagnostics for `#[unwind]`\n\nSimplify input validation for `#[unwind]`, add tests\n\ncc https://github.com/rust-lang/rust/issues/58760\nr? @Mark-Simulacrum", "tree": {"sha": "855ffc9ef1c64c01f4fb05c035e67453b58f1af5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/855ffc9ef1c64c01f4fb05c035e67453b58f1af5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79873f79b19f15dae9d44b8e57047c6f34514ed4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcg+dPCRBK7hj4Ov3rIwAAdHIIADXOIglSduxn63BFycdQy+gi\nD+j3RoicZJzjlpvx1boEyozwodCjGo5uwfsdIJ8YONAQGN/CJhyDQ/BsK9bzrhv/\nzYp9cpFSJjiifDHJMHF0uO8pWMhdtij99NbNHUU/2E8ajX05odDfwcgbZOEwa1Gf\nkQ1dtWvYXbcxDcnP3AFTWCYBPACwTIQnfnLSPiREL7CdpHwYZ4ZeyW48FpP9RYYv\nDnLFcejNkHRkr1Mzw2B9vf75gkHTh3nFjwiPBDi1gFT8c+3BigwOyvkw/EebXkuO\nHPf0LtR3Zai5C8YJ0yKxP2sp1978WJip10wlFio7B2U43NEu1n0guO/5PFBbZ20=\n=WvlH\n-----END PGP SIGNATURE-----\n", "payload": "tree 855ffc9ef1c64c01f4fb05c035e67453b58f1af5\nparent f1e317b7138978422403580dbfd4f493fa135272\nparent dc00a8adee77f04a450e2f02be97b4e308af863e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1552148303 +0100\ncommitter GitHub <noreply@github.com> 1552148303 +0100\n\nRollup merge of #58762 - petrochenkov:unwind, r=Mark-Simulacrum\n\nMention `unwind(aborts)` in diagnostics for `#[unwind]`\n\nSimplify input validation for `#[unwind]`, add tests\n\ncc https://github.com/rust-lang/rust/issues/58760\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79873f79b19f15dae9d44b8e57047c6f34514ed4", "html_url": "https://github.com/rust-lang/rust/commit/79873f79b19f15dae9d44b8e57047c6f34514ed4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79873f79b19f15dae9d44b8e57047c6f34514ed4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1e317b7138978422403580dbfd4f493fa135272", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1e317b7138978422403580dbfd4f493fa135272", "html_url": "https://github.com/rust-lang/rust/commit/f1e317b7138978422403580dbfd4f493fa135272"}, {"sha": "dc00a8adee77f04a450e2f02be97b4e308af863e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc00a8adee77f04a450e2f02be97b4e308af863e", "html_url": "https://github.com/rust-lang/rust/commit/dc00a8adee77f04a450e2f02be97b4e308af863e"}], "stats": {"total": 108, "additions": 74, "deletions": 34}, "files": [{"sha": "c8e48dea1f34c2cb04bad10d663d71728a97272b", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/79873f79b19f15dae9d44b8e57047c6f34514ed4/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79873f79b19f15dae9d44b8e57047c6f34514ed4/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=79873f79b19f15dae9d44b8e57047c6f34514ed4", "patch": "@@ -579,6 +579,10 @@ fn should_abort_on_panic<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     // Not callable from C, so we can safely unwind through these\n     if abi == Abi::Rust || abi == Abi::RustCall { return false; }\n \n+    // Validate `#[unwind]` syntax regardless of platform-specific panic strategy\n+    let attrs = &tcx.get_attrs(fn_def_id);\n+    let unwind_attr = attr::find_unwind_attr(Some(tcx.sess.diagnostic()), attrs);\n+\n     // We never unwind, so it's not relevant to stop an unwind\n     if tcx.sess.panic_strategy() != PanicStrategy::Unwind { return false; }\n \n@@ -587,8 +591,7 @@ fn should_abort_on_panic<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n \n     // This is a special case: some functions have a C abi but are meant to\n     // unwind anyway. Don't stop them.\n-    let attrs = &tcx.get_attrs(fn_def_id);\n-    match attr::find_unwind_attr(Some(tcx.sess.diagnostic()), attrs) {\n+    match unwind_attr {\n         None => true,\n         Some(UnwindAttr::Allowed) => false,\n         Some(UnwindAttr::Aborts) => true,"}, {"sha": "f7a000935caf0e05c7d7e71551a2efe7b9e8099c", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 17, "deletions": 31, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/79873f79b19f15dae9d44b8e57047c6f34514ed4/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79873f79b19f15dae9d44b8e57047c6f34514ed4/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=79873f79b19f15dae9d44b8e57047c6f34514ed4", "patch": "@@ -7,7 +7,7 @@ use crate::parse::ParseSess;\n use errors::{Applicability, Handler};\n use syntax_pos::{symbol::Symbol, Span};\n \n-use super::{list_contains_name, mark_used, MetaItemKind};\n+use super::{mark_used, MetaItemKind};\n \n enum AttrError {\n     MultipleItem(Name),\n@@ -79,40 +79,26 @@ pub enum UnwindAttr {\n \n /// Determine what `#[unwind]` attribute is present in `attrs`, if any.\n pub fn find_unwind_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> Option<UnwindAttr> {\n-    let syntax_error = |attr: &Attribute| {\n-        mark_used(attr);\n-        diagnostic.map(|d| {\n-            span_err!(d, attr.span, E0633, \"malformed `#[unwind]` attribute\");\n-        });\n-        None\n-    };\n-\n     attrs.iter().fold(None, |ia, attr| {\n-        if attr.path != \"unwind\" {\n-            return ia;\n-        }\n-        let meta = match attr.meta() {\n-            Some(meta) => meta.node,\n-            None => return ia,\n-        };\n-        match meta {\n-            MetaItemKind::Word => {\n-                syntax_error(attr)\n-            }\n-            MetaItemKind::List(ref items) => {\n-                mark_used(attr);\n-                if items.len() != 1 {\n-                    syntax_error(attr)\n-                } else if list_contains_name(&items[..], \"allowed\") {\n-                    Some(UnwindAttr::Allowed)\n-                } else if list_contains_name(&items[..], \"aborts\") {\n-                    Some(UnwindAttr::Aborts)\n-                } else {\n-                    syntax_error(attr)\n+        if attr.check_name(\"unwind\") {\n+            if let Some(meta) = attr.meta() {\n+                if let MetaItemKind::List(items) = meta.node {\n+                    if items.len() == 1 {\n+                        if items[0].check_name(\"allowed\") {\n+                            return Some(UnwindAttr::Allowed);\n+                        } else if items[0].check_name(\"aborts\") {\n+                            return Some(UnwindAttr::Aborts);\n+                        }\n+                    }\n+\n+                    diagnostic.map(|d| {\n+                        span_err!(d, attr.span, E0633, \"malformed `#[unwind]` attribute\");\n+                    });\n                 }\n             }\n-            _ => ia,\n         }\n+\n+        ia\n     })\n }\n "}, {"sha": "279e2089f5d71c121824434c36e279483400abb2", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79873f79b19f15dae9d44b8e57047c6f34514ed4/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79873f79b19f15dae9d44b8e57047c6f34514ed4/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=79873f79b19f15dae9d44b8e57047c6f34514ed4", "patch": "@@ -1176,7 +1176,7 @@ pub const BUILTIN_ATTRIBUTES: &[(&str, AttributeType, AttributeTemplate, Attribu\n            \"dropck_eyepatch\",\n            \"may_dangle has unstable semantics and may be removed in the future\",\n            cfg_fn!(dropck_eyepatch))),\n-    (\"unwind\", Whitelisted, template!(List: \"allowed\"), Gated(Stability::Unstable,\n+    (\"unwind\", Whitelisted, template!(List: \"allowed|aborts\"), Gated(Stability::Unstable,\n                                   \"unwind_attributes\",\n                                   \"#[unwind] is experimental\",\n                                   cfg_fn!(unwind_attributes))),"}, {"sha": "e34c288c027c22f04b8740437a6b38cbefe3e122", "filename": "src/test/ui/malformed/malformed-unwind-1.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/79873f79b19f15dae9d44b8e57047c6f34514ed4/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79873f79b19f15dae9d44b8e57047c6f34514ed4/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-1.rs?ref=79873f79b19f15dae9d44b8e57047c6f34514ed4", "patch": "@@ -0,0 +1,11 @@\n+#![feature(unwind_attributes)]\n+\n+#[unwind]\n+//~^ ERROR attribute must be of the form\n+extern \"C\" fn f1() {}\n+\n+#[unwind = \"\"]\n+//~^ ERROR attribute must be of the form\n+extern \"C\" fn f2() {}\n+\n+fn main() {}"}, {"sha": "852136eed91bde56a9e74a5c7e14f0bab2181614", "filename": "src/test/ui/malformed/malformed-unwind-1.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/79873f79b19f15dae9d44b8e57047c6f34514ed4/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79873f79b19f15dae9d44b8e57047c6f34514ed4/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-1.stderr?ref=79873f79b19f15dae9d44b8e57047c6f34514ed4", "patch": "@@ -0,0 +1,14 @@\n+error: attribute must be of the form `#[unwind(allowed|aborts)]`\n+  --> $DIR/malformed-unwind-1.rs:3:1\n+   |\n+LL | #[unwind]\n+   | ^^^^^^^^^\n+\n+error: attribute must be of the form `#[unwind(allowed|aborts)]`\n+  --> $DIR/malformed-unwind-1.rs:7:1\n+   |\n+LL | #[unwind = \"\"]\n+   | ^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d4955b43309308020e177cbe64c8c369c110d3de", "filename": "src/test/ui/malformed/malformed-unwind-2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/79873f79b19f15dae9d44b8e57047c6f34514ed4/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79873f79b19f15dae9d44b8e57047c6f34514ed4/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-2.rs?ref=79873f79b19f15dae9d44b8e57047c6f34514ed4", "patch": "@@ -0,0 +1,11 @@\n+#![feature(unwind_attributes)]\n+\n+#[unwind(allowed, aborts)]\n+//~^ ERROR malformed `#[unwind]` attribute\n+extern \"C\" fn f1() {}\n+\n+#[unwind(unsupported)]\n+//~^ ERROR malformed `#[unwind]` attribute\n+extern \"C\" fn f2() {}\n+\n+fn main() {}"}, {"sha": "88fc4e00a2fd3dbd0d521b56141889890f056b59", "filename": "src/test/ui/malformed/malformed-unwind-2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/79873f79b19f15dae9d44b8e57047c6f34514ed4/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79873f79b19f15dae9d44b8e57047c6f34514ed4/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-2.stderr?ref=79873f79b19f15dae9d44b8e57047c6f34514ed4", "patch": "@@ -0,0 +1,15 @@\n+error[E0633]: malformed `#[unwind]` attribute\n+  --> $DIR/malformed-unwind-2.rs:3:1\n+   |\n+LL | #[unwind(allowed, aborts)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0633]: malformed `#[unwind]` attribute\n+  --> $DIR/malformed-unwind-2.rs:7:1\n+   |\n+LL | #[unwind(unsupported)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0633`."}]}