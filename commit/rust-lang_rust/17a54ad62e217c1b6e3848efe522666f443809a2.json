{"sha": "17a54ad62e217c1b6e3848efe522666f443809a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YTU0YWQ2MmUyMTdjMWI2ZTM4NDhlZmU1MjI2NjZmNDQzODA5YTI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-09-29T12:43:34Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-09-29T13:16:29Z"}, "message": "Add custom driver", "tree": {"sha": "740a78c028bc273d3b3e58929897d7b1568c5060", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/740a78c028bc273d3b3e58929897d7b1568c5060"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17a54ad62e217c1b6e3848efe522666f443809a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17a54ad62e217c1b6e3848efe522666f443809a2", "html_url": "https://github.com/rust-lang/rust/commit/17a54ad62e217c1b6e3848efe522666f443809a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17a54ad62e217c1b6e3848efe522666f443809a2/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c046ad017f022b7e0308ab3665044860cb6412d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c046ad017f022b7e0308ab3665044860cb6412d5", "html_url": "https://github.com/rust-lang/rust/commit/c046ad017f022b7e0308ab3665044860cb6412d5"}], "stats": {"total": 95, "additions": 88, "deletions": 7}, "files": [{"sha": "acd048893e9489f0871587f49fd42914eef2870b", "filename": "scripts/config.sh", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17a54ad62e217c1b6e3848efe522666f443809a2/scripts%2Fconfig.sh", "raw_url": "https://github.com/rust-lang/rust/raw/17a54ad62e217c1b6e3848efe522666f443809a2/scripts%2Fconfig.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fconfig.sh?ref=17a54ad62e217c1b6e3848efe522666f443809a2", "patch": "@@ -32,15 +32,18 @@ if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n    fi\n fi\n \n-export RUSTFLAGS=$linker' -Ztrim-diagnostic-paths=no -Cpanic=abort -Cdebuginfo=2 -Zpanic-abort-tests -Zcodegen-backend='$(pwd)'/target/'$CHANNEL'/librustc_codegen_cranelift.'$dylib_ext' --sysroot '$(pwd)'/build_sysroot/sysroot'\n-export RUSTDOCFLAGS=$RUSTFLAGS\n+export RUSTC=$(pwd)/\"target/\"$CHANNEL\"/cg_clif\"\n+export RUSTFLAGS=$linker\n+export RUSTDOCFLAGS=$linker' -Ztrim-diagnostic-paths=no -Cpanic=abort -Zpanic-abort-tests '\\\n+'-Zcodegen-backend='$(pwd)'/target/'$CHANNEL'/librustc_codegen_cranelift.'$dylib_ext' --sysroot '$(pwd)'/build_sysroot/sysroot'\n \n # FIXME remove once the atomic shim is gone\n if [[ `uname` == 'Darwin' ]]; then\n    export RUSTFLAGS=\"$RUSTFLAGS -Clink-arg=-undefined -Clink-arg=dynamic_lookup\"\n fi\n \n-export LD_LIBRARY_PATH=\"$(pwd)/target/out:$(pwd)/build_sysroot/sysroot/lib/rustlib/$TARGET_TRIPLE/lib\"\n+export LD_LIBRARY_PATH=\"$(pwd)/target/out:$(pwd)/build_sysroot/sysroot/lib/rustlib/\"$TARGET_TRIPLE\"/lib:\\\n+$(pwd)/target/\"$CHANNEL\":$(rustc --print sysroot)/lib\"\n export DYLD_LIBRARY_PATH=$LD_LIBRARY_PATH\n \n export CG_CLIF_DISPLAY_CG_TIME=1"}, {"sha": "49279f8b92188d43dbb628ffd9016dd9aa51e12f", "filename": "src/bin/cg_clif.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/17a54ad62e217c1b6e3848efe522666f443809a2/src%2Fbin%2Fcg_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a54ad62e217c1b6e3848efe522666f443809a2/src%2Fbin%2Fcg_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcg_clif.rs?ref=17a54ad62e217c1b6e3848efe522666f443809a2", "patch": "@@ -0,0 +1,77 @@\n+#![feature(rustc_private)]\n+\n+extern crate rustc_data_structures;\n+extern crate rustc_driver;\n+extern crate rustc_interface;\n+extern crate rustc_session;\n+extern crate rustc_target;\n+\n+use rustc_data_structures::profiling::print_time_passes_entry;\n+use rustc_interface::interface;\n+use rustc_session::config::ErrorOutputType;\n+use rustc_session::early_error;\n+use rustc_target::spec::PanicStrategy;\n+\n+#[derive(Default)]\n+pub struct TimePassesCallbacks {\n+    time_passes: bool,\n+}\n+\n+impl rustc_driver::Callbacks for TimePassesCallbacks {\n+    fn config(&mut self, config: &mut interface::Config) {\n+        // If a --prints=... option has been given, we don't print the \"total\"\n+        // time because it will mess up the --prints output. See #64339.\n+        self.time_passes = config.opts.prints.is_empty()\n+            && (config.opts.debugging_opts.time_passes || config.opts.debugging_opts.time);\n+\n+        // FIXME workaround for an ICE\n+        config.opts.debugging_opts.trim_diagnostic_paths = false;\n+\n+        config.opts.cg.panic = Some(PanicStrategy::Abort);\n+        config.opts.debugging_opts.panic_abort_tests = true;\n+        config.opts.maybe_sysroot = Some(\n+            std::env::current_exe()\n+                .unwrap()\n+                .parent()\n+                .unwrap()\n+                .parent()\n+                .unwrap()\n+                .parent()\n+                .unwrap()\n+                .join(\"build_sysroot\")\n+                .join(\"sysroot\"),\n+        );\n+    }\n+}\n+\n+fn main() {\n+    let start = std::time::Instant::now();\n+    rustc_driver::init_rustc_env_logger();\n+    let mut callbacks = TimePassesCallbacks::default();\n+    rustc_driver::install_ice_hook();\n+    let exit_code = rustc_driver::catch_with_exit_code(|| {\n+        let args = std::env::args_os()\n+            .enumerate()\n+            .map(|(i, arg)| {\n+                arg.into_string().unwrap_or_else(|arg| {\n+                    early_error(\n+                        ErrorOutputType::default(),\n+                        &format!(\"Argument {} is not valid Unicode: {:?}\", i, arg),\n+                    )\n+                })\n+            })\n+            .collect::<Vec<_>>();\n+        rustc_driver::run_compiler(\n+            &args,\n+            &mut callbacks,\n+            None,\n+            None,\n+            Some(Box::new(|_| {\n+                rustc_codegen_cranelift::__rustc_codegen_backend()\n+            })),\n+        )\n+    });\n+    // The extra `\\t` is necessary to align this label with the others.\n+    print_time_passes_entry(callbacks.time_passes, \"\\ttotal\", start.elapsed());\n+    std::process::exit(exit_code)\n+}"}, {"sha": "9b61a38ffe0f31476cf337da723b89b108989526", "filename": "test.sh", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17a54ad62e217c1b6e3848efe522666f443809a2/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/17a54ad62e217c1b6e3848efe522666f443809a2/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=17a54ad62e217c1b6e3848efe522666f443809a2", "patch": "@@ -2,18 +2,19 @@\n set -e\n \n # Build cg_clif\n+export RUSTFLAGS=\"-Zrun_dsymutil=no\"\n if [[ \"$1\" == \"--release\" ]]; then\n     export CHANNEL='release'\n-    cargo rustc --release -- -Zrun_dsymutil=no\n+    cargo build --release\n else\n     export CHANNEL='debug'\n-    cargo rustc -- -Zrun_dsymutil=no\n+    cargo build --bin cg_clif\n fi\n \n # Config\n source scripts/config.sh\n export CG_CLIF_INCR_CACHE_DISABLED=1\n-RUSTC=\"rustc $RUSTFLAGS -L crate=target/out --out-dir target/out\"\n+RUSTC=$RUSTC\" \"$RUSTFLAGS\" -L crate=target/out --out-dir target/out -Cdebuginfo=2\"\n \n # Cleanup\n rm -r target/out || true\n@@ -86,7 +87,7 @@ pushd simple-raytracer\n if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n     echo \"[BENCH COMPILE] ebobby/simple-raytracer\"\n     hyperfine --runs ${RUN_RUNS:-10} --warmup 1 --prepare \"cargo clean\" \\\n-    \"RUSTFLAGS='' cargo build\" \\\n+    \"RUSTC=rustc RUSTFLAGS='' cargo build\" \\\n     \"../cargo.sh build\"\n \n     echo \"[BENCH RUN] ebobby/simple-raytracer\""}]}