{"sha": "08b1e8004b06112fb8334155b2cea314bd3e8161", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YjFlODAwNGIwNjExMmZiODMzNDE1NWIyY2VhMzE0YmQzZTgxNjE=", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2021-02-25T01:13:42Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2021-02-25T01:21:12Z"}, "message": "fix review", "tree": {"sha": "d266e7a711f68b71ec9808b3e6caee5000f2d171", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d266e7a711f68b71ec9808b3e6caee5000f2d171"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08b1e8004b06112fb8334155b2cea314bd3e8161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08b1e8004b06112fb8334155b2cea314bd3e8161", "html_url": "https://github.com/rust-lang/rust/commit/08b1e8004b06112fb8334155b2cea314bd3e8161", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08b1e8004b06112fb8334155b2cea314bd3e8161/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c75c4a579bdea69fc9b93697aa2531daf82540fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c75c4a579bdea69fc9b93697aa2531daf82540fc", "html_url": "https://github.com/rust-lang/rust/commit/c75c4a579bdea69fc9b93697aa2531daf82540fc"}], "stats": {"total": 138, "additions": 66, "deletions": 72}, "files": [{"sha": "1464784ae288c494cf7394a70db8d31fddbe2338", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08b1e8004b06112fb8334155b2cea314bd3e8161/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b1e8004b06112fb8334155b2cea314bd3e8161/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=08b1e8004b06112fb8334155b2cea314bd3e8161", "patch": "@@ -2372,7 +2372,7 @@ fn compute_type_parameters(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>) -> &'ll DIAr\n     fn get_parameter_names(cx: &CodegenCx<'_, '_>, generics: &ty::Generics) -> Vec<Symbol> {\n         let mut names = generics\n             .parent\n-            .map_or_else(|| vec![], |def_id| get_parameter_names(cx, cx.tcx.generics_of(def_id)));\n+            .map_or_else(Vec::new, |def_id| get_parameter_names(cx, cx.tcx.generics_of(def_id)));\n         names.extend(generics.params.iter().map(|param| param.name));\n         names\n     }"}, {"sha": "c28b0d64651e350a15390843ee581ef99db7a305", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/08b1e8004b06112fb8334155b2cea314bd3e8161/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b1e8004b06112fb8334155b2cea314bd3e8161/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=08b1e8004b06112fb8334155b2cea314bd3e8161", "patch": "@@ -481,10 +481,9 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         }\n \n         fn get_parameter_names(cx: &CodegenCx<'_, '_>, generics: &ty::Generics) -> Vec<Symbol> {\n-            let mut names = generics.parent.map_or_else(\n-                || vec![],\n-                |def_id| get_parameter_names(cx, cx.tcx.generics_of(def_id)),\n-            );\n+            let mut names = generics.parent.map_or_else(Vec::new, |def_id| {\n+                get_parameter_names(cx, cx.tcx.generics_of(def_id))\n+            });\n             names.extend(generics.params.iter().map(|param| param.name));\n             names\n         }"}, {"sha": "b007df5730621e7e368067afcd68a5055f721f15", "filename": "compiler/rustc_codegen_llvm/src/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08b1e8004b06112fb8334155b2cea314bd3e8161/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b1e8004b06112fb8334155b2cea314bd3e8161/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmetadata.rs?ref=08b1e8004b06112fb8334155b2cea314bd3e8161", "patch": "@@ -66,7 +66,7 @@ fn search_meta_section<'a>(\n             let mut name_buf = None;\n             let name_len = llvm::LLVMRustGetSectionName(si.llsi, &mut name_buf);\n             let name = name_buf.map_or_else(\n-                || String::new(), // We got a NULL ptr, ignore `name_len`.\n+                String::new, // We got a NULL ptr, ignore `name_len`.\n                 |buf| {\n                     String::from_utf8(\n                         slice::from_raw_parts(buf.as_ptr() as *const u8, name_len as usize)"}, {"sha": "fa234ff5feb64095d10f6a3c3bcffed3c432c0ac", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08b1e8004b06112fb8334155b2cea314bd3e8161/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b1e8004b06112fb8334155b2cea314bd3e8161/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=08b1e8004b06112fb8334155b2cea314bd3e8161", "patch": "@@ -50,7 +50,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n \n     let name =\n         with_no_trimmed_paths(|| ty::tls::with(|tcx| tcx.def_path_str(cid.instance.def_id())));\n-    let prom = cid.promoted.map_or_else(|| String::new(), |p| format!(\"::promoted[{:?}]\", p));\n+    let prom = cid.promoted.map_or_else(String::new, |p| format!(\"::promoted[{:?}]\", p));\n     trace!(\"eval_body_using_ecx: pushing stack frame for global: {}{}\", name, prom);\n \n     ecx.push_stack_frame("}, {"sha": "5b4939b740726449237ae38ec81004140f86946b", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08b1e8004b06112fb8334155b2cea314bd3e8161/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b1e8004b06112fb8334155b2cea314bd3e8161/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=08b1e8004b06112fb8334155b2cea314bd3e8161", "patch": "@@ -223,7 +223,7 @@ impl<'a> Parser<'a> {\n         fn tokens_to_string(tokens: &[TokenType]) -> String {\n             let mut i = tokens.iter();\n             // This might be a sign we need a connect method on `Iterator`.\n-            let b = i.next().map_or_else(|| String::new(), |t| t.to_string());\n+            let b = i.next().map_or_else(String::new, |t| t.to_string());\n             i.enumerate().fold(b, |mut b, (i, a)| {\n                 if tokens.len() > 2 && i == tokens.len() - 2 {\n                     b.push_str(\", or \");"}, {"sha": "493f25f4992d1f261f905759ba34881e865f0001", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 54, "deletions": 57, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/08b1e8004b06112fb8334155b2cea314bd3e8161/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b1e8004b06112fb8334155b2cea314bd3e8161/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=08b1e8004b06112fb8334155b2cea314bd3e8161", "patch": "@@ -1971,68 +1971,65 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         // Therefore, we would compute `object_lifetime_defaults` to a\n         // vector like `['x, 'static]`. Note that the vector only\n         // includes type parameters.\n-        let object_lifetime_defaults = type_def_id.map_or_else(\n-            || vec![],\n-            |def_id| {\n-                let in_body = {\n-                    let mut scope = self.scope;\n-                    loop {\n-                        match *scope {\n-                            Scope::Root => break false,\n-\n-                            Scope::Body { .. } => break true,\n-\n-                            Scope::Binder { s, .. }\n-                            | Scope::Elision { s, .. }\n-                            | Scope::ObjectLifetimeDefault { s, .. } => {\n-                                scope = s;\n-                            }\n+        let object_lifetime_defaults = type_def_id.map_or_else(Vec::new, |def_id| {\n+            let in_body = {\n+                let mut scope = self.scope;\n+                loop {\n+                    match *scope {\n+                        Scope::Root => break false,\n+\n+                        Scope::Body { .. } => break true,\n+\n+                        Scope::Binder { s, .. }\n+                        | Scope::Elision { s, .. }\n+                        | Scope::ObjectLifetimeDefault { s, .. } => {\n+                            scope = s;\n                         }\n                     }\n-                };\n+                }\n+            };\n \n-                let map = &self.map;\n-                let unsubst = if let Some(def_id) = def_id.as_local() {\n-                    let id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n-                    &map.object_lifetime_defaults[&id]\n-                } else {\n-                    let tcx = self.tcx;\n-                    self.xcrate_object_lifetime_defaults.entry(def_id).or_insert_with(|| {\n-                        tcx.generics_of(def_id)\n-                            .params\n-                            .iter()\n-                            .filter_map(|param| match param.kind {\n-                                GenericParamDefKind::Type { object_lifetime_default, .. } => {\n-                                    Some(object_lifetime_default)\n-                                }\n-                                GenericParamDefKind::Lifetime | GenericParamDefKind::Const => None,\n-                            })\n-                            .collect()\n-                    })\n-                };\n-                debug!(\"visit_segment_args: unsubst={:?}\", unsubst);\n-                unsubst\n-                    .iter()\n-                    .map(|set| match *set {\n-                        Set1::Empty => {\n-                            if in_body {\n-                                None\n-                            } else {\n-                                Some(Region::Static)\n+            let map = &self.map;\n+            let unsubst = if let Some(def_id) = def_id.as_local() {\n+                let id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n+                &map.object_lifetime_defaults[&id]\n+            } else {\n+                let tcx = self.tcx;\n+                self.xcrate_object_lifetime_defaults.entry(def_id).or_insert_with(|| {\n+                    tcx.generics_of(def_id)\n+                        .params\n+                        .iter()\n+                        .filter_map(|param| match param.kind {\n+                            GenericParamDefKind::Type { object_lifetime_default, .. } => {\n+                                Some(object_lifetime_default)\n                             }\n+                            GenericParamDefKind::Lifetime | GenericParamDefKind::Const => None,\n+                        })\n+                        .collect()\n+                })\n+            };\n+            debug!(\"visit_segment_args: unsubst={:?}\", unsubst);\n+            unsubst\n+                .iter()\n+                .map(|set| match *set {\n+                    Set1::Empty => {\n+                        if in_body {\n+                            None\n+                        } else {\n+                            Some(Region::Static)\n                         }\n-                        Set1::One(r) => {\n-                            let lifetimes = generic_args.args.iter().filter_map(|arg| match arg {\n-                                GenericArg::Lifetime(lt) => Some(lt),\n-                                _ => None,\n-                            });\n-                            r.subst(lifetimes, map)\n-                        }\n-                        Set1::Many => None,\n-                    })\n-                    .collect()\n-            },\n-        );\n+                    }\n+                    Set1::One(r) => {\n+                        let lifetimes = generic_args.args.iter().filter_map(|arg| match arg {\n+                            GenericArg::Lifetime(lt) => Some(lt),\n+                            _ => None,\n+                        });\n+                        r.subst(lifetimes, map)\n+                    }\n+                    Set1::Many => None,\n+                })\n+                .collect()\n+        });\n \n         debug!(\"visit_segment_args: object_lifetime_defaults={:?}\", object_lifetime_defaults);\n "}, {"sha": "2df326628e7872962571110dab50d0b109975970", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08b1e8004b06112fb8334155b2cea314bd3e8161/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b1e8004b06112fb8334155b2cea314bd3e8161/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=08b1e8004b06112fb8334155b2cea314bd3e8161", "patch": "@@ -169,7 +169,7 @@ pub fn get_or_default_sysroot() -> PathBuf {\n \n     // Check if sysroot is found using env::args().next(), and if is not found,\n     // use env::current_exe() to imply sysroot.\n-    from_env_args_next().unwrap_or_else(|| from_current_exe())\n+    from_env_args_next().unwrap_or_else(from_current_exe)\n }\n \n // The name of the directory rustc expects libraries to be located."}, {"sha": "264cc4f248cec9fe14ecbc19e36f097051c87a61", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08b1e8004b06112fb8334155b2cea314bd3e8161/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b1e8004b06112fb8334155b2cea314bd3e8161/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=08b1e8004b06112fb8334155b2cea314bd3e8161", "patch": "@@ -349,7 +349,7 @@ fn report_negative_positive_conflict(\n         E0751,\n         \"found both positive and negative implementation of trait `{}`{}:\",\n         overlap.trait_desc,\n-        overlap.self_desc.clone().map_or_else(|| String::new(), |ty| format!(\" for type `{}`\", ty))\n+        overlap.self_desc.clone().map_or_else(String::new, |ty| format!(\" for type `{}`\", ty))\n     );\n \n     match tcx.span_of_impl(negative_impl_def_id) {\n@@ -400,7 +400,7 @@ fn report_conflicting_impls(\n             overlap\n                 .self_desc\n                 .clone()\n-                .map_or_else(|| String::new(), |ty| { format!(\" for type `{}`\", ty) }),\n+                .map_or_else(String::new, |ty| { format!(\" for type `{}`\", ty) }),\n             match used_to_be_allowed {\n                 Some(FutureCompatOverlapErrorKind::Issue33140) => \" (E0119)\",\n                 _ => \"\",\n@@ -418,9 +418,7 @@ fn report_conflicting_impls(\n                     impl_span,\n                     format!(\n                         \"conflicting implementation{}\",\n-                        overlap\n-                            .self_desc\n-                            .map_or_else(|| String::new(), |ty| format!(\" for `{}`\", ty))\n+                        overlap.self_desc.map_or_else(String::new, |ty| format!(\" for `{}`\", ty))\n                     ),\n                 );\n             }"}, {"sha": "fcb89e1234e0bb513357466769995fbfe5e94347", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08b1e8004b06112fb8334155b2cea314bd3e8161/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b1e8004b06112fb8334155b2cea314bd3e8161/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=08b1e8004b06112fb8334155b2cea314bd3e8161", "patch": "@@ -1695,7 +1695,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             } else {\n                 self.fcx\n                     .associated_item(def_id, name, Namespace::ValueNS)\n-                    .map_or_else(|| Vec::new(), |x| vec![x])\n+                    .map_or_else(Vec::new, |x| vec![x])\n             }\n         } else {\n             self.tcx.associated_items(def_id).in_definition_order().copied().collect()"}]}