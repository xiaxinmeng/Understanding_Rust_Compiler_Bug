{"sha": "ae27c4ab1f3c59eb81728425fbad4386e0a558bc", "node_id": "C_kwDOAAsO6NoAKGFlMjdjNGFiMWYzYzU5ZWI4MTcyODQyNWZiYWQ0Mzg2ZTBhNTU4YmM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-24T06:48:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-24T06:48:09Z"}, "message": "Rollup merge of #94288 - Mark-Simulacrum:ser-opt, r=nnethercote\n\nCleanup a few Decoder methods\n\nThis is just some simple follow up to #93839.\n\nr? `@nnethercote`", "tree": {"sha": "38480c7e1d357b492a5d27ac599b39298b35e72f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38480c7e1d357b492a5d27ac599b39298b35e72f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae27c4ab1f3c59eb81728425fbad4386e0a558bc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiFyopCRBK7hj4Ov3rIwAAdRgIAJ9tRvBg0GjbcPtEixxcG7yg\nlPtaU5xYLDyh5dKcLm/j5Jy3E6QG6OkSeqBbdoxNvpcUfItE2FVb8o4hORgpkycg\nyxRMuzyGrwH397cqyg6PsYyq9w7QR3sqAas2lUEfIbAcILPBbvOgq/qOLEZWNV3B\ndG7MOXaeqAx/iv/S8SEzhJzFXyxsWiVjncvenj2I59Swi4lQ9X52ZEHqJGt1l31g\n1SfFIhjhE1/E109JJG9jW7fBIrFV/Mlbn/VPHCsgCMLsV68+RI4DiuXxfbX0rKAZ\n/uiDeDN62T06b+uNXwKfueK2dJXhYN90JDL6ESDimWBD6Ybdc/wYo+sTJHA4NCw=\n=kxcy\n-----END PGP SIGNATURE-----\n", "payload": "tree 38480c7e1d357b492a5d27ac599b39298b35e72f\nparent f3433d1b5962681b2e3ef733aeed4adaf9e6a47a\nparent f1bcb0f3afb20e63f94bfff396f96027eecd0ad1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645685289 +0100\ncommitter GitHub <noreply@github.com> 1645685289 +0100\n\nRollup merge of #94288 - Mark-Simulacrum:ser-opt, r=nnethercote\n\nCleanup a few Decoder methods\n\nThis is just some simple follow up to #93839.\n\nr? `@nnethercote`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae27c4ab1f3c59eb81728425fbad4386e0a558bc", "html_url": "https://github.com/rust-lang/rust/commit/ae27c4ab1f3c59eb81728425fbad4386e0a558bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae27c4ab1f3c59eb81728425fbad4386e0a558bc/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3433d1b5962681b2e3ef733aeed4adaf9e6a47a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3433d1b5962681b2e3ef733aeed4adaf9e6a47a", "html_url": "https://github.com/rust-lang/rust/commit/f3433d1b5962681b2e3ef733aeed4adaf9e6a47a"}, {"sha": "f1bcb0f3afb20e63f94bfff396f96027eecd0ad1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1bcb0f3afb20e63f94bfff396f96027eecd0ad1", "html_url": "https://github.com/rust-lang/rust/commit/f1bcb0f3afb20e63f94bfff396f96027eecd0ad1"}], "stats": {"total": 61, "additions": 19, "deletions": 42}, "files": [{"sha": "725499e5c78ca0243e58a9e36b344f6dc6393e9d", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae27c4ab1f3c59eb81728425fbad4386e0a558bc/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae27c4ab1f3c59eb81728425fbad4386e0a558bc/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=ae27c4ab1f3c59eb81728425fbad4386e0a558bc", "patch": "@@ -2418,8 +2418,7 @@ impl<S: Encoder> rustc_serialize::Encodable<S> for AttrId {\n }\n \n impl<D: Decoder> rustc_serialize::Decodable<D> for AttrId {\n-    fn decode(d: &mut D) -> AttrId {\n-        d.read_unit();\n+    fn decode(_: &mut D) -> AttrId {\n         crate::attr::mk_attr_id()\n     }\n }"}, {"sha": "c88f3e73cff37255d14bbfffaf947d6189f76a09", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae27c4ab1f3c59eb81728425fbad4386e0a558bc/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae27c4ab1f3c59eb81728425fbad4386e0a558bc/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=ae27c4ab1f3c59eb81728425fbad4386e0a558bc", "patch": "@@ -153,9 +153,7 @@ impl<E: rustc_serialize::Encoder> Encodable<E> for Fingerprint {\n impl<D: rustc_serialize::Decoder> Decodable<D> for Fingerprint {\n     #[inline]\n     fn decode(d: &mut D) -> Self {\n-        let mut bytes = [0u8; 16];\n-        d.read_raw_bytes_into(&mut bytes);\n-        Fingerprint::from_le_bytes(bytes)\n+        Fingerprint::from_le_bytes(d.read_raw_bytes(16).try_into().unwrap())\n     }\n }\n "}, {"sha": "b715f6c3f1fc97284277bb64c245f3a63151bcae", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae27c4ab1f3c59eb81728425fbad4386e0a558bc/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae27c4ab1f3c59eb81728425fbad4386e0a558bc/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=ae27c4ab1f3c59eb81728425fbad4386e0a558bc", "patch": "@@ -316,7 +316,7 @@ impl<'a, 'tcx> DecodeContext<'a, 'tcx> {\n     }\n \n     #[inline]\n-    pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {\n+    pub fn read_raw_bytes(&mut self, len: usize) -> &[u8] {\n         self.opaque.read_raw_bytes(len)\n     }\n }"}, {"sha": "4fe2cde753290226889e54fc4591db806410d0f7", "filename": "compiler/rustc_middle/src/mir/predecessors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae27c4ab1f3c59eb81728425fbad4386e0a558bc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae27c4ab1f3c59eb81728425fbad4386e0a558bc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs?ref=ae27c4ab1f3c59eb81728425fbad4386e0a558bc", "patch": "@@ -63,8 +63,7 @@ impl<S: serialize::Encoder> serialize::Encodable<S> for PredecessorCache {\n \n impl<D: serialize::Decoder> serialize::Decodable<D> for PredecessorCache {\n     #[inline]\n-    fn decode(d: &mut D) -> Self {\n-        let () = d.read_unit();\n+    fn decode(_: &mut D) -> Self {\n         Self::new()\n     }\n }"}, {"sha": "23fb7a49d9c8e923602a56e5f66a1e504aaf8b92", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae27c4ab1f3c59eb81728425fbad4386e0a558bc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae27c4ab1f3c59eb81728425fbad4386e0a558bc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=ae27c4ab1f3c59eb81728425fbad4386e0a558bc", "patch": "@@ -465,8 +465,6 @@ macro_rules! implement_ty_decoder {\n \n             impl<$($typaram ),*> Decoder for $DecoderName<$($typaram),*> {\n                 $crate::__impl_decoder_methods! {\n-                    read_unit -> ();\n-\n                     read_u128 -> u128;\n                     read_u64 -> u64;\n                     read_u32 -> u32;\n@@ -485,12 +483,12 @@ macro_rules! implement_ty_decoder {\n                     read_f64 -> f64;\n                     read_f32 -> f32;\n                     read_char -> char;\n-                    read_str -> Cow<'_, str>;\n+                    read_str -> &str;\n                 }\n \n                 #[inline]\n-                fn read_raw_bytes_into(&mut self, bytes: &mut [u8]) {\n-                    self.opaque.read_raw_bytes_into(bytes)\n+                fn read_raw_bytes(&mut self, len: usize) -> &[u8] {\n+                    self.opaque.read_raw_bytes(len)\n                 }\n             }\n         }"}, {"sha": "5e5cbacbcff1a47c9551f9c6c76b99116f96b8c7", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ae27c4ab1f3c59eb81728425fbad4386e0a558bc/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae27c4ab1f3c59eb81728425fbad4386e0a558bc/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=ae27c4ab1f3c59eb81728425fbad4386e0a558bc", "patch": "@@ -1,6 +1,5 @@\n use crate::leb128::{self, max_leb128_len};\n-use crate::serialize::{self, Encoder as _};\n-use std::borrow::Cow;\n+use crate::serialize::{self, Decoder as _, Encoder as _};\n use std::convert::TryInto;\n use std::fs::File;\n use std::io::{self, Write};\n@@ -549,25 +548,13 @@ impl<'a> Decoder<'a> {\n     pub fn advance(&mut self, bytes: usize) {\n         self.position += bytes;\n     }\n-\n-    #[inline]\n-    pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {\n-        let start = self.position;\n-        self.position += bytes;\n-        &self.data[start..self.position]\n-    }\n }\n \n macro_rules! read_leb128 {\n     ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};\n }\n \n impl<'a> serialize::Decoder for Decoder<'a> {\n-    #[inline]\n-    fn read_unit(&mut self) -> () {\n-        ()\n-    }\n-\n     #[inline]\n     fn read_u128(&mut self) -> u128 {\n         read_leb128!(self, read_u128_leb128)\n@@ -663,22 +650,22 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n     }\n \n     #[inline]\n-    fn read_str(&mut self) -> Cow<'_, str> {\n+    fn read_str(&mut self) -> &'a str {\n         let len = self.read_usize();\n         let sentinel = self.data[self.position + len];\n         assert!(sentinel == STR_SENTINEL);\n         let s = unsafe {\n             std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])\n         };\n         self.position += len + 1;\n-        Cow::Borrowed(s)\n+        s\n     }\n \n     #[inline]\n-    fn read_raw_bytes_into(&mut self, s: &mut [u8]) {\n+    fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {\n         let start = self.position;\n-        self.position += s.len();\n-        s.copy_from_slice(&self.data[start..self.position]);\n+        self.position += bytes;\n+        &self.data[start..self.position]\n     }\n }\n \n@@ -746,10 +733,10 @@ impl<'a> serialize::Decodable<Decoder<'a>> for IntEncodedWithFixedSize {\n     fn decode(decoder: &mut Decoder<'a>) -> IntEncodedWithFixedSize {\n         let _start_pos = decoder.position();\n         let bytes = decoder.read_raw_bytes(IntEncodedWithFixedSize::ENCODED_SIZE);\n+        let value = u64::from_le_bytes(bytes.try_into().unwrap());\n         let _end_pos = decoder.position();\n         debug_assert_eq!((_end_pos - _start_pos), IntEncodedWithFixedSize::ENCODED_SIZE);\n \n-        let value = u64::from_le_bytes(bytes.try_into().unwrap());\n         IntEncodedWithFixedSize(value)\n     }\n }"}, {"sha": "42bf6ff2a9852101431f4464874d3bc5443121b7", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ae27c4ab1f3c59eb81728425fbad4386e0a558bc/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae27c4ab1f3c59eb81728425fbad4386e0a558bc/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=ae27c4ab1f3c59eb81728425fbad4386e0a558bc", "patch": "@@ -181,7 +181,6 @@ pub trait Encoder {\n // concise.\n pub trait Decoder {\n     // Primitive types:\n-    fn read_unit(&mut self) -> ();\n     fn read_usize(&mut self) -> usize;\n     fn read_u128(&mut self) -> u128;\n     fn read_u64(&mut self) -> u64;\n@@ -198,8 +197,8 @@ pub trait Decoder {\n     fn read_f64(&mut self) -> f64;\n     fn read_f32(&mut self) -> f32;\n     fn read_char(&mut self) -> char;\n-    fn read_str(&mut self) -> Cow<'_, str>;\n-    fn read_raw_bytes_into(&mut self, s: &mut [u8]);\n+    fn read_str(&mut self) -> &str;\n+    fn read_raw_bytes(&mut self, len: usize) -> &[u8];\n }\n \n /// Trait for types that can be serialized\n@@ -313,7 +312,7 @@ impl<S: Encoder> Encodable<S> for String {\n \n impl<D: Decoder> Decodable<D> for String {\n     fn decode(d: &mut D) -> String {\n-        d.read_str().into_owned()\n+        d.read_str().to_owned()\n     }\n }\n \n@@ -324,9 +323,7 @@ impl<S: Encoder> Encodable<S> for () {\n }\n \n impl<D: Decoder> Decodable<D> for () {\n-    fn decode(d: &mut D) -> () {\n-        d.read_unit()\n-    }\n+    fn decode(_: &mut D) -> () {}\n }\n \n impl<S: Encoder, T> Encodable<S> for PhantomData<T> {\n@@ -336,8 +333,7 @@ impl<S: Encoder, T> Encodable<S> for PhantomData<T> {\n }\n \n impl<D: Decoder, T> Decodable<D> for PhantomData<T> {\n-    fn decode(d: &mut D) -> PhantomData<T> {\n-        d.read_unit();\n+    fn decode(_: &mut D) -> PhantomData<T> {\n         PhantomData\n     }\n }"}]}