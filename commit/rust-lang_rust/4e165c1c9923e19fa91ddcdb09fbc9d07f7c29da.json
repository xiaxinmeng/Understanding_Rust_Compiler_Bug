{"sha": "4e165c1c9923e19fa91ddcdb09fbc9d07f7c29da", "node_id": "C_kwDOAAsO6NoAKDRlMTY1YzFjOTkyM2UxOWZhOTFkZGNkYjA5ZmJjOWQwN2Y3YzI5ZGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-09T21:40:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-09T21:40:03Z"}, "message": "Rollup merge of #108843 - compiler-errors:non_lifetime_binders-method-probe, r=jackh726\n\nInstantiate instead of erasing binder when probing param methods\n\nFixes #108836\n\nThere is a really old comment saying that a `WhereClauseCandidate` probe candidate \"should not contain any inference variables\", but I'm not really confident that that comment applies anymore. In contrast, other candidates that we assemble during method probe contain inference variables in their substitutions (e.g. `InherentImplCandidate`)...\n\nSince this change is made only to support a nightly feature, I'm happy to gate the new behavior behind this feature flag or discuss it further.\n\nr? types", "tree": {"sha": "5d05d6b57e97f842e494f36c0e358ca677f7b45a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d05d6b57e97f842e494f36c0e358ca677f7b45a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e165c1c9923e19fa91ddcdb09fbc9d07f7c29da", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkMzCzCRBK7hj4Ov3rIwAA5dwIABaD6Mp8v5IF3Ou9HwmbBFwd\n9GwJAuT3spPv9wQikRpFiqzhev5dGxdAyKSBv1YRQeGZAc+y+rBf9H/rYqo2ewaq\nsd6KCOxGfqMqmcz5OzeKdg/1gTDnETqBDjKP2Y44cJ6p/StiikOK31Ax9Y2Lto1v\nQHOrxObsLedzzkp7LlkaAm/LmPvZAoCcN94tr2zTIvuXDOunuD9qMTRaZ72ZI0qo\nOg3UxFJa9a+6b8lbgbz8sk2RDW3fEc4jVGL8Hoq/UYg6tY1Lel1Aswl4ukvmbzPm\nPfEd/+OkSZ0hqay/EDJLFvL8IKeWrsd48bL9Iheh7dhmx4o/4ZbwK3frly7RuCc=\n=f5hz\n-----END PGP SIGNATURE-----\n", "payload": "tree 5d05d6b57e97f842e494f36c0e358ca677f7b45a\nparent 39bf7777aab9ac1f6b0802cd52cd91d6e021aa91\nparent b7a5f3a41c6613033f0e6be9307c40e3174a9381\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681076403 +0200\ncommitter GitHub <noreply@github.com> 1681076403 +0200\n\nRollup merge of #108843 - compiler-errors:non_lifetime_binders-method-probe, r=jackh726\n\nInstantiate instead of erasing binder when probing param methods\n\nFixes #108836\n\nThere is a really old comment saying that a `WhereClauseCandidate` probe candidate \"should not contain any inference variables\", but I'm not really confident that that comment applies anymore. In contrast, other candidates that we assemble during method probe contain inference variables in their substitutions (e.g. `InherentImplCandidate`)...\n\nSince this change is made only to support a nightly feature, I'm happy to gate the new behavior behind this feature flag or discuss it further.\n\nr? types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e165c1c9923e19fa91ddcdb09fbc9d07f7c29da", "html_url": "https://github.com/rust-lang/rust/commit/4e165c1c9923e19fa91ddcdb09fbc9d07f7c29da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e165c1c9923e19fa91ddcdb09fbc9d07f7c29da/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39bf7777aab9ac1f6b0802cd52cd91d6e021aa91", "url": "https://api.github.com/repos/rust-lang/rust/commits/39bf7777aab9ac1f6b0802cd52cd91d6e021aa91", "html_url": "https://github.com/rust-lang/rust/commit/39bf7777aab9ac1f6b0802cd52cd91d6e021aa91"}, {"sha": "b7a5f3a41c6613033f0e6be9307c40e3174a9381", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7a5f3a41c6613033f0e6be9307c40e3174a9381", "html_url": "https://github.com/rust-lang/rust/commit/b7a5f3a41c6613033f0e6be9307c40e3174a9381"}], "stats": {"total": 54, "additions": 45, "deletions": 9}, "files": [{"sha": "4258a100d986671e3d97ea2f1d9b0719b855efa9", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4e165c1c9923e19fa91ddcdb09fbc9d07f7c29da/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e165c1c9923e19fa91ddcdb09fbc9d07f7c29da/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=4e165c1c9923e19fa91ddcdb09fbc9d07f7c29da", "patch": "@@ -793,6 +793,14 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         // a `&self` method will wind up with an argument type like `&dyn Trait`.\n         let trait_ref = principal.with_self_ty(self.tcx, self_ty);\n         self.elaborate_bounds(iter::once(trait_ref), |this, new_trait_ref, item| {\n+            if new_trait_ref.has_non_region_late_bound() {\n+                this.tcx.sess.delay_span_bug(\n+                    this.span,\n+                    \"tried to select method from HRTB with non-lifetime bound vars\",\n+                );\n+                return;\n+            }\n+\n             let new_trait_ref = this.erase_late_bound_regions(new_trait_ref);\n \n             let (xform_self_ty, xform_ret_ty) =\n@@ -843,18 +851,15 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         });\n \n         self.elaborate_bounds(bounds, |this, poly_trait_ref, item| {\n-            let trait_ref = this.erase_late_bound_regions(poly_trait_ref);\n+            let trait_ref = this.instantiate_binder_with_fresh_vars(\n+                this.span,\n+                infer::LateBoundRegionConversionTime::FnCall,\n+                poly_trait_ref,\n+            );\n \n             let (xform_self_ty, xform_ret_ty) =\n                 this.xform_self_ty(item, trait_ref.self_ty(), trait_ref.substs);\n \n-            // Because this trait derives from a where-clause, it\n-            // should not contain any inference variables or other\n-            // artifacts. This means it is safe to put into the\n-            // `WhereClauseCandidate` and (eventually) into the\n-            // `WhereClausePick`.\n-            assert!(!trait_ref.substs.needs_infer());\n-\n             this.push_candidate(\n                 Candidate {\n                     xform_self_ty,\n@@ -964,7 +969,11 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                             bound_trait_ref.def_id(),\n                         ));\n                     } else {\n-                        let new_trait_ref = self.erase_late_bound_regions(bound_trait_ref);\n+                        let new_trait_ref = self.instantiate_binder_with_fresh_vars(\n+                            self.span,\n+                            infer::LateBoundRegionConversionTime::FnCall,\n+                            bound_trait_ref,\n+                        );\n \n                         let (xform_self_ty, xform_ret_ty) =\n                             self.xform_self_ty(item, new_trait_ref.self_ty(), new_trait_ref.substs);"}, {"sha": "8df240c2082b723e4b1f274fb534a177322ab52d", "filename": "tests/ui/traits/non_lifetime_binders/method-probe.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4e165c1c9923e19fa91ddcdb09fbc9d07f7c29da/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmethod-probe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e165c1c9923e19fa91ddcdb09fbc9d07f7c29da/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmethod-probe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmethod-probe.rs?ref=4e165c1c9923e19fa91ddcdb09fbc9d07f7c29da", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+#![feature(non_lifetime_binders)]\n+//~^ WARN the feature `non_lifetime_binders` is incomplete\n+\n+trait Foo: for<T> Bar<T> {}\n+\n+trait Bar<T> {\n+    fn method() -> T;\n+}\n+\n+fn x<T: Foo>() {\n+    let _: i32 = T::method();\n+}\n+\n+fn main() {}"}, {"sha": "8f61792e6ce7fe61382d822a2a7ab1d74c1e45c9", "filename": "tests/ui/traits/non_lifetime_binders/method-probe.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4e165c1c9923e19fa91ddcdb09fbc9d07f7c29da/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmethod-probe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e165c1c9923e19fa91ddcdb09fbc9d07f7c29da/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmethod-probe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmethod-probe.stderr?ref=4e165c1c9923e19fa91ddcdb09fbc9d07f7c29da", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/method-probe.rs:3:12\n+   |\n+LL | #![feature(non_lifetime_binders)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}]}