{"sha": "2d30dd67d34fcac0cd47bc64485239e0c2616e13", "node_id": "C_kwDOAAsO6NoAKDJkMzBkZDY3ZDM0ZmNhYzBjZDQ3YmM2NDQ4NTIzOWUwYzI2MTZlMTM", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-03-20T15:19:02Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-03-21T15:45:59Z"}, "message": "Expose coercion logic in hir API", "tree": {"sha": "8024cfb163844045066275fdf8feb35025ad942b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8024cfb163844045066275fdf8feb35025ad942b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d30dd67d34fcac0cd47bc64485239e0c2616e13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d30dd67d34fcac0cd47bc64485239e0c2616e13", "html_url": "https://github.com/rust-lang/rust/commit/2d30dd67d34fcac0cd47bc64485239e0c2616e13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d30dd67d34fcac0cd47bc64485239e0c2616e13/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6133e6a002037bfae8e9ff3fbd0fa7c92c5ee68b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6133e6a002037bfae8e9ff3fbd0fa7c92c5ee68b", "html_url": "https://github.com/rust-lang/rust/commit/6133e6a002037bfae8e9ff3fbd0fa7c92c5ee68b"}], "stats": {"total": 75, "additions": 67, "deletions": 8}, "files": [{"sha": "55d2d8b7e31d01acad52295d6e744ad29f60a925", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2d30dd67d34fcac0cd47bc64485239e0c2616e13/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d30dd67d34fcac0cd47bc64485239e0c2616e13/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=2d30dd67d34fcac0cd47bc64485239e0c2616e13", "patch": "@@ -2900,7 +2900,7 @@ impl Type {\n         self.autoderef_(db).map(move |ty| self.derived(ty))\n     }\n \n-    pub fn autoderef_<'a>(&'a self, db: &'a dyn HirDatabase) -> impl Iterator<Item = Ty> + 'a {\n+    fn autoderef_<'a>(&'a self, db: &'a dyn HirDatabase) -> impl Iterator<Item = Ty> + 'a {\n         // There should be no inference vars in types passed here\n         let canonical = hir_ty::replace_errors_with_variables(&self.ty);\n         let environment = self.env.clone();\n@@ -3238,7 +3238,12 @@ impl Type {\n \n     pub fn could_unify_with(&self, db: &dyn HirDatabase, other: &Type) -> bool {\n         let tys = hir_ty::replace_errors_with_variables(&(self.ty.clone(), other.ty.clone()));\n-        could_unify(db, self.env.clone(), &tys)\n+        hir_ty::could_unify(db, self.env.clone(), &tys)\n+    }\n+\n+    pub fn could_coerce_to(&self, db: &dyn HirDatabase, to: &Type) -> bool {\n+        let tys = hir_ty::replace_errors_with_variables(&(self.ty.clone(), to.ty.clone()));\n+        hir_ty::could_coerce(db, self.env.clone(), &tys)\n     }\n }\n "}, {"sha": "d7913e1dcf380b8c1c341ec8288ab86251058bdd", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d30dd67d34fcac0cd47bc64485239e0c2616e13/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d30dd67d34fcac0cd47bc64485239e0c2616e13/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=2d30dd67d34fcac0cd47bc64485239e0c2616e13", "patch": "@@ -45,6 +45,7 @@ use crate::{\n // https://github.com/rust-lang/rust/issues/57411\n #[allow(unreachable_pub)]\n pub use unify::could_unify;\n+pub use coerce::could_coerce;\n \n pub(crate) mod unify;\n mod path;"}, {"sha": "1570bf65693233384cb41076f233514ea07becce", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2d30dd67d34fcac0cd47bc64485239e0c2616e13/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d30dd67d34fcac0cd47bc64485239e0c2616e13/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=2d30dd67d34fcac0cd47bc64485239e0c2616e13", "patch": "@@ -5,9 +5,9 @@\n //! See <https://doc.rust-lang.org/nomicon/coercions.html> and\n //! `librustc_typeck/check/coercion.rs`.\n \n-use std::iter;\n+use std::{iter, sync::Arc};\n \n-use chalk_ir::{cast::Cast, Goal, Mutability, TyVariableKind};\n+use chalk_ir::{cast::Cast, Goal, Mutability, TyVariableKind, BoundVar};\n use hir_def::{expr::ExprId, lang_item::LangItemTarget};\n use stdx::always;\n use syntax::SmolStr;\n@@ -19,7 +19,7 @@ use crate::{\n         PointerCast, TypeError, TypeMismatch,\n     },\n     static_lifetime, Canonical, DomainGoal, FnPointer, FnSig, Guidance, InEnvironment, Interner,\n-    Solution, Substitution, Ty, TyBuilder, TyExt, TyKind,\n+    Solution, Substitution, Ty, TyBuilder, TyExt, TyKind, db::HirDatabase, TraitEnvironment, GenericArgData,\n };\n \n use super::unify::InferenceTable;\n@@ -120,6 +120,45 @@ impl CoerceMany {\n     }\n }\n \n+pub fn could_coerce(\n+    db: &dyn HirDatabase,\n+    env: Arc<TraitEnvironment>,\n+    tys: &Canonical<(Ty, Ty)>,\n+) -> bool {\n+    coerce(db, env, tys).is_ok()\n+}\n+\n+pub(crate) fn coerce(\n+    db: &dyn HirDatabase,\n+    env: Arc<TraitEnvironment>,\n+    tys: &Canonical<(Ty, Ty)>,\n+) -> Result<(Vec<Adjustment>, Ty), TypeError> {\n+    let mut table = InferenceTable::new(db, env);\n+    let vars = table.fresh_subst(tys.binders.as_slice(Interner));\n+    let ty1_with_vars = vars.apply(tys.value.0.clone(), Interner);\n+    let ty2_with_vars = vars.apply(tys.value.1.clone(), Interner);\n+    let (adjustments, ty) = table.coerce(&ty1_with_vars, &ty2_with_vars)?;\n+    // default any type vars that weren't unified back to their original bound vars\n+    // (kind of hacky)\n+    let find_var = |iv| {\n+        vars.iter(Interner).position(|v| match v.interned() {\n+            chalk_ir::GenericArgData::Ty(ty) => ty.inference_var(Interner),\n+            chalk_ir::GenericArgData::Lifetime(lt) => lt.inference_var(Interner),\n+            chalk_ir::GenericArgData::Const(c) => c.inference_var(Interner),\n+        } == Some(iv))\n+    };\n+    let fallback = |iv, kind, default, binder| match kind {\n+        chalk_ir::VariableKind::Ty(_ty_kind) => find_var(iv)\n+            .map_or(default, |i| BoundVar::new(binder, i).to_ty(Interner).cast(Interner)),\n+        chalk_ir::VariableKind::Lifetime => find_var(iv)\n+            .map_or(default, |i| BoundVar::new(binder, i).to_lifetime(Interner).cast(Interner)),\n+        chalk_ir::VariableKind::Const(ty) => find_var(iv)\n+            .map_or(default, |i| BoundVar::new(binder, i).to_const(Interner, ty).cast(Interner)),\n+    };\n+    // FIXME also map the types in the adjustments\n+    Ok((adjustments, table.resolve_with_fallback(ty, &fallback)))\n+}\n+\n impl<'a> InferenceContext<'a> {\n     /// Unify two types, but may coerce the first one to the second one\n     /// using \"implicit coercion rules\" if needed."}, {"sha": "90bccb82f79bb0e938c86751174f48b2f8eaebb3", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2d30dd67d34fcac0cd47bc64485239e0c2616e13/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d30dd67d34fcac0cd47bc64485239e0c2616e13/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=2d30dd67d34fcac0cd47bc64485239e0c2616e13", "patch": "@@ -4,7 +4,7 @@ use std::{fmt, mem, sync::Arc};\n \n use chalk_ir::{\n     cast::Cast, fold::Fold, interner::HasInterner, zip::Zip, FloatTy, IntTy, NoSolution,\n-    TyVariableKind, UniverseIndex,\n+    TyVariableKind, UniverseIndex, CanonicalVarKind,\n };\n use chalk_solve::infer::ParameterEnaVariableExt;\n use ena::unify::UnifyKey;\n@@ -299,11 +299,25 @@ impl<'a> InferenceTable<'a> {\n         self.resolve_with_fallback_inner(&mut Vec::new(), t, &fallback)\n     }\n \n+    pub(crate) fn fresh_subst(\n+        &mut self,\n+        binders: &[CanonicalVarKind<Interner>],\n+    ) -> Substitution {\n+        Substitution::from_iter(\n+            Interner,\n+            binders.iter().map(|kind| {\n+                let param_infer_var = kind.map_ref(|&ui| self.var_unification_table.new_variable(ui));\n+                param_infer_var.to_generic_arg(Interner)\n+            }),\n+        )\n+    }\n+\n     pub(crate) fn instantiate_canonical<T>(&mut self, canonical: Canonical<T>) -> T::Result\n     where\n         T: HasInterner<Interner = Interner> + Fold<Interner> + std::fmt::Debug,\n     {\n-        self.var_unification_table.instantiate_canonical(Interner, canonical)\n+        let subst = self.fresh_subst(canonical.binders.as_slice(Interner));\n+        subst.apply(canonical.value, Interner)\n     }\n \n     fn resolve_with_fallback_inner<T>("}, {"sha": "945b4b0e4a6aee603dc2e31df944367eea775438", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d30dd67d34fcac0cd47bc64485239e0c2616e13/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d30dd67d34fcac0cd47bc64485239e0c2616e13/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=2d30dd67d34fcac0cd47bc64485239e0c2616e13", "patch": "@@ -51,7 +51,7 @@ pub use autoderef::autoderef;\n pub use builder::{ParamKind, TyBuilder};\n pub use chalk_ext::*;\n pub use infer::{\n-    could_unify, Adjust, Adjustment, AutoBorrow, InferenceDiagnostic, InferenceResult,\n+    could_coerce, could_unify, Adjust, Adjustment, AutoBorrow, InferenceDiagnostic, InferenceResult,\n };\n pub use interner::Interner;\n pub use lower::{"}]}