{"sha": "3de7a56267b14b3692b65dbedf122148d94dd907", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZTdhNTYyNjdiMTRiMzY5MmI2NWRiZWRmMTIyMTQ4ZDk0ZGQ5MDc=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-18T06:32:10Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-18T06:32:10Z"}, "message": "Add a test for #2164", "tree": {"sha": "a71f3a90311c3304d3dc8ac17abe248675a57ece", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a71f3a90311c3304d3dc8ac17abe248675a57ece"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3de7a56267b14b3692b65dbedf122148d94dd907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3de7a56267b14b3692b65dbedf122148d94dd907", "html_url": "https://github.com/rust-lang/rust/commit/3de7a56267b14b3692b65dbedf122148d94dd907", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3de7a56267b14b3692b65dbedf122148d94dd907/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abe6eec910ee7544edbc8a80167c029190228cac", "url": "https://api.github.com/repos/rust-lang/rust/commits/abe6eec910ee7544edbc8a80167c029190228cac", "html_url": "https://github.com/rust-lang/rust/commit/abe6eec910ee7544edbc8a80167c029190228cac"}], "stats": {"total": 136, "additions": 136, "deletions": 0}, "files": [{"sha": "6c288e1bd62aa6e34334eea21510d74b900289e8", "filename": "tests/source/issue-2164.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3de7a56267b14b3692b65dbedf122148d94dd907/tests%2Fsource%2Fissue-2164.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3de7a56267b14b3692b65dbedf122148d94dd907/tests%2Fsource%2Fissue-2164.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2164.rs?ref=3de7a56267b14b3692b65dbedf122148d94dd907", "patch": "@@ -0,0 +1,4 @@\n+// A stress test against code generated by bindgen.\n+#[repr(C)]\n+#[derive(Debug, Copy, Clone)]\n+pub struct emacs_env_25 { pub size : isize , pub private_members : * mut emacs_env_private , pub make_global_ref : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , any_reference : emacs_value ) -> emacs_value > , pub free_global_ref : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , global_reference : emacs_value ) > , pub non_local_exit_check : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env ) -> emacs_funcall_exit > , pub non_local_exit_clear : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env ) > , pub non_local_exit_get : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , non_local_exit_symbol_out : * mut emacs_value , non_local_exit_data_out : * mut emacs_value ) -> emacs_funcall_exit > , pub non_local_exit_signal : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , non_local_exit_symbol : emacs_value , non_local_exit_data : emacs_value ) > , pub non_local_exit_throw : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , tag : emacs_value , value : emacs_value ) > , pub make_function : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , min_arity : isize , max_arity : isize , function : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , nargs : isize , args : * mut emacs_value , arg1 : * mut ::libc :: c_void ) -> emacs_value > , documentation : * const ::libc :: c_char , data : * mut ::libc :: c_void ) -> emacs_value > , pub funcall : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , function : emacs_value , nargs : isize , args : * mut emacs_value ) -> emacs_value > , pub intern : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , symbol_name : * const ::libc :: c_char ) -> emacs_value > , pub type_of : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , value : emacs_value ) -> emacs_value > , pub is_not_nil : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , value : emacs_value ) -> bool > , pub eq : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , a : emacs_value , b : emacs_value ) -> bool > , pub extract_integer : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , value : emacs_value ) -> intmax_t > , pub make_integer : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , value : intmax_t ) -> emacs_value > , pub extract_float : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , value : emacs_value ) -> f64 > , pub make_float : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , value : f64 ) -> emacs_value > , pub copy_string_contents : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , value : emacs_value , buffer : * mut ::libc :: c_char , size_inout : * mut isize ) -> bool > , pub make_string : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , contents : * const ::libc :: c_char , length : isize ) -> emacs_value > , pub make_user_ptr : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , fin : :: std :: option :: Option < unsafe extern \"C\" fn ( arg1 : * mut ::libc :: c_void ) > , ptr : * mut ::libc :: c_void ) -> emacs_value > , pub get_user_ptr : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , uptr : emacs_value ) -> * mut ::libc :: c_void > , pub set_user_ptr : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , uptr : emacs_value , ptr : * mut ::libc :: c_void ) > , pub get_user_finalizer : :: std :: option :: Option < unsafe extern \"C\" fn ( arg1 : * mut ::libc :: c_void , env : * mut emacs_env , uptr : emacs_value ) -> :: std :: option :: Option < unsafe extern \"C\" fn ( arg1 : * mut ::libc :: c_void , env : * mut emacs_env , uptr : emacs_value ) > > , pub set_user_finalizer : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , uptr : emacs_value , fin : :: std :: option :: Option < unsafe extern \"C\" fn ( arg1 : * mut ::libc :: c_void ) > ) > , pub vec_get : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , vec : emacs_value , i : isize ) -> emacs_value > , pub vec_set : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , vec : emacs_value , i : isize , val : emacs_value ) > , pub vec_size : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , vec : emacs_value ) -> isize > , }"}, {"sha": "ab1d7dfd37a8246723e11702bf0ef9e75ad34525", "filename": "tests/target/issue-2164.rs", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/3de7a56267b14b3692b65dbedf122148d94dd907/tests%2Ftarget%2Fissue-2164.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3de7a56267b14b3692b65dbedf122148d94dd907/tests%2Ftarget%2Fissue-2164.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2164.rs?ref=3de7a56267b14b3692b65dbedf122148d94dd907", "patch": "@@ -0,0 +1,132 @@\n+// A stress test against code generated by bindgen.\n+#[repr(C)]\n+#[derive(Debug, Copy, Clone)]\n+pub struct emacs_env_25 {\n+    pub size: isize,\n+    pub private_members: *mut emacs_env_private,\n+    pub make_global_ref: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, any_reference: emacs_value) -> emacs_value,\n+    >,\n+    pub free_global_ref: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, global_reference: emacs_value),\n+    >,\n+    pub non_local_exit_check:\n+        ::std::option::Option<unsafe extern \"C\" fn(env: *mut emacs_env) -> emacs_funcall_exit>,\n+    pub non_local_exit_clear: ::std::option::Option<unsafe extern \"C\" fn(env: *mut emacs_env)>,\n+    pub non_local_exit_get: ::std::option::Option<\n+        unsafe extern \"C\" fn(\n+            env: *mut emacs_env,\n+            non_local_exit_symbol_out: *mut emacs_value,\n+            non_local_exit_data_out: *mut emacs_value,\n+        ) -> emacs_funcall_exit,\n+    >,\n+    pub non_local_exit_signal: ::std::option::Option<\n+        unsafe extern \"C\" fn(\n+            env: *mut emacs_env,\n+            non_local_exit_symbol: emacs_value,\n+            non_local_exit_data: emacs_value,\n+        ),\n+    >,\n+    pub non_local_exit_throw: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, tag: emacs_value, value: emacs_value),\n+    >,\n+    pub make_function: ::std::option::Option<\n+        unsafe extern \"C\" fn(\n+            env: *mut emacs_env,\n+            min_arity: isize,\n+            max_arity: isize,\n+            function: ::std::option::Option<\n+                unsafe extern \"C\" fn(\n+                    env: *mut emacs_env,\n+                    nargs: isize,\n+                    args: *mut emacs_value,\n+                    arg1: *mut ::libc::c_void,\n+                ) -> emacs_value,\n+            >,\n+            documentation: *const ::libc::c_char,\n+            data: *mut ::libc::c_void,\n+        ) -> emacs_value,\n+    >,\n+    pub funcall: ::std::option::Option<\n+        unsafe extern \"C\" fn(\n+            env: *mut emacs_env,\n+            function: emacs_value,\n+            nargs: isize,\n+            args: *mut emacs_value,\n+        ) -> emacs_value,\n+    >,\n+    pub intern: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, symbol_name: *const ::libc::c_char)\n+            -> emacs_value,\n+    >,\n+    pub type_of: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, value: emacs_value) -> emacs_value,\n+    >,\n+    pub is_not_nil: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, value: emacs_value) -> bool,\n+    >,\n+    pub eq: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, a: emacs_value, b: emacs_value) -> bool,\n+    >,\n+    pub extract_integer: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, value: emacs_value) -> intmax_t,\n+    >,\n+    pub make_integer: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, value: intmax_t) -> emacs_value,\n+    >,\n+    pub extract_float:\n+        ::std::option::Option<unsafe extern \"C\" fn(env: *mut emacs_env, value: emacs_value) -> f64>,\n+    pub make_float:\n+        ::std::option::Option<unsafe extern \"C\" fn(env: *mut emacs_env, value: f64) -> emacs_value>,\n+    pub copy_string_contents: ::std::option::Option<\n+        unsafe extern \"C\" fn(\n+            env: *mut emacs_env,\n+            value: emacs_value,\n+            buffer: *mut ::libc::c_char,\n+            size_inout: *mut isize,\n+        ) -> bool,\n+    >,\n+    pub make_string: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, contents: *const ::libc::c_char, length: isize)\n+            -> emacs_value,\n+    >,\n+    pub make_user_ptr: ::std::option::Option<\n+        unsafe extern \"C\" fn(\n+            env: *mut emacs_env,\n+            fin: ::std::option::Option<\n+                unsafe extern \"C\" fn(arg1: *mut ::libc::c_void),\n+            >,\n+            ptr: *mut ::libc::c_void,\n+        ) -> emacs_value,\n+    >,\n+    pub get_user_ptr: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, uptr: emacs_value) -> *mut ::libc::c_void,\n+    >,\n+    pub set_user_ptr: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, uptr: emacs_value, ptr: *mut ::libc::c_void),\n+    >,\n+    pub get_user_finalizer: ::std::option::Option<\n+        unsafe extern \"C\" fn(\n+            arg1: *mut ::libc::c_void, env: *mut emacs_env, uptr: emacs_value\n+        ) -> ::std::option::Option<\n+            unsafe extern \"C\" fn(arg1: *mut ::libc::c_void, env: *mut emacs_env, uptr: emacs_value),\n+        >,\n+    >,\n+    pub set_user_finalizer: ::std::option::Option<\n+        unsafe extern \"C\" fn(\n+            env: *mut emacs_env,\n+            uptr: emacs_value,\n+            fin: ::std::option::Option<\n+                unsafe extern \"C\" fn(arg1: *mut ::libc::c_void),\n+            >,\n+        ),\n+    >,\n+    pub vec_get: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, vec: emacs_value, i: isize) -> emacs_value,\n+    >,\n+    pub vec_set: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, vec: emacs_value, i: isize, val: emacs_value),\n+    >,\n+    pub vec_size:\n+        ::std::option::Option<unsafe extern \"C\" fn(env: *mut emacs_env, vec: emacs_value) -> isize>,\n+}"}]}