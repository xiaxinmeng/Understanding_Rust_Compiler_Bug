{"sha": "c8ee8c30f00214fcc3849d3124501e5e9768bb53", "node_id": "C_kwDOAAsO6NoAKGM4ZWU4YzMwZjAwMjE0ZmNjMzg0OWQzMTI0NTAxZTVlOTc2OGJiNTM", "commit": {"author": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2022-07-26T23:18:10Z"}, "committer": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2022-07-26T23:18:10Z"}, "message": "Give the user more information during creation", "tree": {"sha": "fa31e86a98803dd666285783af57448455768166", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa31e86a98803dd666285783af57448455768166"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8ee8c30f00214fcc3849d3124501e5e9768bb53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8ee8c30f00214fcc3849d3124501e5e9768bb53", "html_url": "https://github.com/rust-lang/rust/commit/c8ee8c30f00214fcc3849d3124501e5e9768bb53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8ee8c30f00214fcc3849d3124501e5e9768bb53/comments", "author": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51cd5a866728539c1d1db81c437c474ffbef7ccf", "url": "https://api.github.com/repos/rust-lang/rust/commits/51cd5a866728539c1d1db81c437c474ffbef7ccf", "html_url": "https://github.com/rust-lang/rust/commit/51cd5a866728539c1d1db81c437c474ffbef7ccf"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "4eea25b66dedf71b84400910234e9688c70a3d8a", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c8ee8c30f00214fcc3849d3124501e5e9768bb53/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ee8c30f00214fcc3849d3124501e5e9768bb53/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=c8ee8c30f00214fcc3849d3124501e5e9768bb53", "patch": "@@ -62,11 +62,14 @@ pub fn create(\n \n fn create_lint(lint: &LintData<'_>, enable_msrv: bool) -> io::Result<()> {\n     if let Some(ty) = lint.ty {\n-        generate_from_ty(lint, enable_msrv, ty)\n+        create_lint_for_ty(lint, enable_msrv, ty)\n     } else {\n         let lint_contents = get_lint_file_contents(lint, enable_msrv);\n         let lint_path = format!(\"clippy_lints/src/{}.rs\", lint.name);\n-        write_file(lint.project_root.join(&lint_path), lint_contents.as_bytes())\n+        write_file(lint.project_root.join(&lint_path), lint_contents.as_bytes())?;\n+        println!(\"Generated lint file: `{}`\", lint_path);\n+\n+        Ok(())\n     }\n }\n \n@@ -86,16 +89,22 @@ fn create_test(lint: &LintData<'_>) -> io::Result<()> {\n \n     if lint.category == \"cargo\" {\n         let relative_test_dir = format!(\"tests/ui-cargo/{}\", lint.name);\n-        let test_dir = lint.project_root.join(relative_test_dir);\n+        let test_dir = lint.project_root.join(&relative_test_dir);\n         fs::create_dir(&test_dir)?;\n \n         create_project_layout(lint.name, &test_dir, \"fail\", \"Content that triggers the lint goes here\")?;\n-        create_project_layout(lint.name, &test_dir, \"pass\", \"This file should not trigger the lint\")\n+        create_project_layout(lint.name, &test_dir, \"pass\", \"This file should not trigger the lint\")?;\n+\n+        println!(\"Generated test directories: `{}`, `{}`\", format!(\"{}/pass\", relative_test_dir), format!(\"{}/fail\", relative_test_dir));\n     } else {\n         let test_path = format!(\"tests/ui/{}.rs\", lint.name);\n         let test_contents = get_test_file_contents(lint.name, None);\n-        write_file(lint.project_root.join(test_path), test_contents)\n+        write_file(lint.project_root.join(&test_path), test_contents)?;\n+\n+        println!(\"Generated test file: `{}`\", test_path);\n     }\n+\n+    Ok(())\n }\n \n fn add_lint(lint: &LintData<'_>, enable_msrv: bool) -> io::Result<()> {\n@@ -325,12 +334,14 @@ fn get_lint_declaration(name_upper: &str, category: &str) -> String {\n     )\n }\n \n-fn generate_from_ty(lint: &LintData<'_>, enable_msrv: bool, ty: &str) -> io::Result<()> {\n-    if ty == \"cargo\" {\n-        assert_eq!(\n+fn create_lint_for_ty(lint: &LintData<'_>, enable_msrv: bool, ty: &str) -> io::Result<()> {\n+    match ty {\n+        \"cargo\" => assert_eq!(\n             lint.category, \"cargo\",\n             \"Lints of type `cargo` must have the `cargo` category\"\n-        );\n+        ),\n+        _ if lint.category == \"cargo\" => panic!(\"Lints of category `cargo` must have the `cargo` type\"),\n+        _ => {}\n     }\n \n     let ty_dir = lint.project_root.join(format!(\"clippy_lints/src/{}\", ty));\n@@ -392,7 +403,9 @@ fn generate_from_ty(lint: &LintData<'_>, enable_msrv: bool, ty: &str) -> io::Res\n         );\n     }\n \n-    write_file(lint_file_path, lint_file_contents)?;\n+    write_file(lint_file_path.as_path(), lint_file_contents)?;\n+    println!(\"Generated lint file: `clippy_lints/src/{}/{}.rs`\", ty, lint.name);\n+    println!(\"Be sure to add a call to `{}::check` in `clippy_lints/src/{}/mod.rs`!\", lint.name, ty);\n \n     Ok(())\n }"}]}