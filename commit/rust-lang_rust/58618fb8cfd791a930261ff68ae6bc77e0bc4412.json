{"sha": "58618fb8cfd791a930261ff68ae6bc77e0bc4412", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NjE4ZmI4Y2ZkNzkxYTkzMDI2MWZmNjhhZTZiYzc3ZTBiYzQ0MTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-11T04:39:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-11T04:39:46Z"}, "message": "auto merge of #5308 : wanderview/rust/std-getopts-rustdoc-fix, r=luqmana\n\nThere were three issues effecting the example in the getopts rustdoc:\r\n\r\n1. The blockquote was incorrectly formatted.  Fixed by switching to using\r\n   an explicit markdown code section with ```.\r\n2. The `fail fail_str(f)` would not compile.  Fixed by using `fail!()` instead\r\n   of `fail`.\r\n3. The line `matches.free[0]` produced a compile error about moving from\r\n   an immutable vector.  Fix by using `copy`.", "tree": {"sha": "44d1b45482b343ca282064fc0936af01157093b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44d1b45482b343ca282064fc0936af01157093b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58618fb8cfd791a930261ff68ae6bc77e0bc4412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58618fb8cfd791a930261ff68ae6bc77e0bc4412", "html_url": "https://github.com/rust-lang/rust/commit/58618fb8cfd791a930261ff68ae6bc77e0bc4412", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58618fb8cfd791a930261ff68ae6bc77e0bc4412/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d8596d400b245143df4a421654d7a94a8b4c1e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d8596d400b245143df4a421654d7a94a8b4c1e1", "html_url": "https://github.com/rust-lang/rust/commit/1d8596d400b245143df4a421654d7a94a8b4c1e1"}, {"sha": "13e58597a18d3d4a696bdd84750839655580ea55", "url": "https://api.github.com/repos/rust-lang/rust/commits/13e58597a18d3d4a696bdd84750839655580ea55", "html_url": "https://github.com/rust-lang/rust/commit/13e58597a18d3d4a696bdd84750839655580ea55"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "eed00ccacffcc0891c9e209ad903b6f4c4fae1d4", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/58618fb8cfd791a930261ff68ae6bc77e0bc4412/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58618fb8cfd791a930261ff68ae6bc77e0bc4412/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=58618fb8cfd791a930261ff68ae6bc77e0bc4412", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -29,8 +29,10 @@\n  * The following example shows simple command line parsing for an application\n  * that requires an input file to be specified, accepts an optional output\n  * file name following -o, and accepts both -h and --help as optional flags.\n- * extern mod std;\n- * use std::getopts::*;\n+ *\n+ * ```\n+ *    extern mod std;\n+ *    use std::getopts::*;\n  *\n  *    fn do_work(in: &str, out: Option<~str>) {\n  *      io::println(in);\n@@ -58,21 +60,22 @@\n  *        ];\n  *        let matches = match getopts(vec::tail(args), opts) {\n  *            result::Ok(m) => { m }\n- *            result::Err(f) => { fail fail_str(f) }\n+ *            result::Err(f) => { fail!(fail_str(f)) }\n  *        };\n  *        if opt_present(&matches, \"h\") || opt_present(&matches, \"help\") {\n  *            print_usage(program, opts);\n  *            return;\n  *        }\n  *        let output = opt_maybe_str(&matches, \"o\");\n  *        let input: &str = if !matches.free.is_empty() {\n- *            matches.free[0]\n+ *            copy matches.free[0]\n  *        } else {\n  *            print_usage(program, opts);\n  *            return;\n  *        };\n  *        do_work(input, output);\n  *    }\n+ * ```\n  */\n \n use core::cmp::Eq;"}]}