{"sha": "8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15", "node_id": "C_kwDOAAsO6NoAKDhjOGE1MmVlZWI5Y2E0NzU3NTIwMGVhY2QxYWI4NmJmNDZlOGRjMTU", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-03T17:16:02Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-03T23:09:49Z"}, "message": "Move `MatchStrCaseMismatch` into `Matches` lint pass", "tree": {"sha": "ea1b9716585b1d5d16071ac8641e8e29470cfcb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea1b9716585b1d5d16071ac8641e8e29470cfcb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15", "html_url": "https://github.com/rust-lang/rust/commit/8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d8d7341509e4868c91fa7fe24703e69c21a9869", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d8d7341509e4868c91fa7fe24703e69c21a9869", "html_url": "https://github.com/rust-lang/rust/commit/3d8d7341509e4868c91fa7fe24703e69c21a9869"}], "stats": {"total": 115, "additions": 55, "deletions": 60}, "files": [{"sha": "15e744229a1cbbbbaf48152cee58bc11ca13f4f6", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15", "patch": "@@ -140,7 +140,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(map_unit_fn::OPTION_MAP_UNIT_FN),\n     LintId::of(map_unit_fn::RESULT_MAP_UNIT_FN),\n     LintId::of(match_result_ok::MATCH_RESULT_OK),\n-    LintId::of(match_str_case_mismatch::MATCH_STR_CASE_MISMATCH),\n     LintId::of(matches::COLLAPSIBLE_MATCH),\n     LintId::of(matches::INFALLIBLE_DESTRUCTURING_MATCH),\n     LintId::of(matches::MANUAL_UNWRAP_OR),\n@@ -149,6 +148,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(matches::MATCH_OVERLAPPING_ARM),\n     LintId::of(matches::MATCH_REF_PATS),\n     LintId::of(matches::MATCH_SINGLE_BINDING),\n+    LintId::of(matches::MATCH_STR_CASE_MISMATCH),\n     LintId::of(matches::NEEDLESS_MATCH),\n     LintId::of(matches::REDUNDANT_PATTERN_MATCHING),\n     LintId::of(matches::SINGLE_MATCH),"}, {"sha": "50cdd0af923051f2453dc36a62f3506f94a6bbac", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15", "patch": "@@ -39,7 +39,7 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(loops::ITER_NEXT_LOOP),\n     LintId::of(loops::NEVER_LOOP),\n     LintId::of(loops::WHILE_IMMUTABLE_CONDITION),\n-    LintId::of(match_str_case_mismatch::MATCH_STR_CASE_MISMATCH),\n+    LintId::of(matches::MATCH_STR_CASE_MISMATCH),\n     LintId::of(mem_replace::MEM_REPLACE_WITH_UNINIT),\n     LintId::of(methods::CLONE_DOUBLE_REF),\n     LintId::of(methods::ITERATOR_STEP_BY_ZERO),"}, {"sha": "59ba295a88732242d137e2960c3eef82bde505de", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15", "patch": "@@ -259,7 +259,6 @@ store.register_lints(&[\n     map_unit_fn::OPTION_MAP_UNIT_FN,\n     map_unit_fn::RESULT_MAP_UNIT_FN,\n     match_result_ok::MATCH_RESULT_OK,\n-    match_str_case_mismatch::MATCH_STR_CASE_MISMATCH,\n     matches::COLLAPSIBLE_MATCH,\n     matches::INFALLIBLE_DESTRUCTURING_MATCH,\n     matches::MANUAL_UNWRAP_OR,\n@@ -271,6 +270,7 @@ store.register_lints(&[\n     matches::MATCH_REF_PATS,\n     matches::MATCH_SAME_ARMS,\n     matches::MATCH_SINGLE_BINDING,\n+    matches::MATCH_STR_CASE_MISMATCH,\n     matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS,\n     matches::MATCH_WILD_ERR_ARM,\n     matches::NEEDLESS_MATCH,"}, {"sha": "7335b4a35c8c6993ac7a3d9b08f76c69d1d53c38", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15", "patch": "@@ -287,7 +287,6 @@ mod map_clone;\n mod map_err_ignore;\n mod map_unit_fn;\n mod match_result_ok;\n-mod match_str_case_mismatch;\n mod matches;\n mod mem_forget;\n mod mem_replace;\n@@ -875,7 +874,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         ))\n     });\n     store.register_late_pass(move || Box::new(undocumented_unsafe_blocks::UndocumentedUnsafeBlocks));\n-    store.register_late_pass(|| Box::new(match_str_case_mismatch::MatchStrCaseMismatch));\n     store.register_late_pass(move || Box::new(format_args::FormatArgs));\n     store.register_late_pass(|| Box::new(trailing_empty_array::TrailingEmptyArray));\n     store.register_early_pass(|| Box::new(octal_escapes::OctalEscapes));"}, {"sha": "8302ce426e5707e257db4116b21740abb3e95a74", "filename": "clippy_lints/src/matches/match_str_case_mismatch.rs", "status": "renamed", "additions": 18, "deletions": 55, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15/clippy_lints%2Fsrc%2Fmatches%2Fmatch_str_case_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15/clippy_lints%2Fsrc%2Fmatches%2Fmatch_str_case_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_str_case_mismatch.rs?ref=8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15", "patch": "@@ -3,46 +3,13 @@ use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::{Arm, Expr, ExprKind, MatchSource, PatKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::lint::in_external_macro;\n+use rustc_hir::{Arm, Expr, ExprKind, PatKind};\n+use rustc_lint::LateContext;\n use rustc_middle::ty;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::Symbol;\n use rustc_span::{sym, Span};\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for `match` expressions modifying the case of a string with non-compliant arms\n-    ///\n-    /// ### Why is this bad?\n-    /// The arm is unreachable, which is likely a mistake\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// # let text = \"Foo\";\n-    /// match &*text.to_ascii_lowercase() {\n-    ///     \"foo\" => {},\n-    ///     \"Bar\" => {},\n-    ///     _ => {},\n-    /// }\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// # let text = \"Foo\";\n-    /// match &*text.to_ascii_lowercase() {\n-    ///     \"foo\" => {},\n-    ///     \"bar\" => {},\n-    ///     _ => {},\n-    /// }\n-    /// ```\n-    #[clippy::version = \"1.58.0\"]\n-    pub MATCH_STR_CASE_MISMATCH,\n-    correctness,\n-    \"creation of a case altering match expression with non-compliant arms\"\n-}\n-\n-declare_lint_pass!(MatchStrCaseMismatch => [MATCH_STR_CASE_MISMATCH]);\n+use super::MATCH_STR_CASE_MISMATCH;\n \n #[derive(Debug)]\n enum CaseMethod {\n@@ -52,25 +19,21 @@ enum CaseMethod {\n     AsciiUppercase,\n }\n \n-impl<'tcx> LateLintPass<'tcx> for MatchStrCaseMismatch {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            if !in_external_macro(cx.tcx.sess, expr.span);\n-            if let ExprKind::Match(match_expr, arms, MatchSource::Normal) = expr.kind;\n-            if let ty::Ref(_, ty, _) = cx.typeck_results().expr_ty(match_expr).kind();\n-            if let ty::Str = ty.kind();\n-            then {\n-                let mut visitor = MatchExprVisitor {\n-                    cx,\n-                    case_method: None,\n-                };\n-\n-                visitor.visit_expr(match_expr);\n-\n-                if let Some(case_method) = visitor.case_method {\n-                    if let Some((bad_case_span, bad_case_sym)) = verify_case(&case_method, arms) {\n-                        lint(cx, &case_method, bad_case_span, bad_case_sym.as_str());\n-                    }\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, scrutinee: &'tcx Expr<'_>, arms: &'tcx [Arm<'_>]) {\n+    if_chain! {\n+        if let ty::Ref(_, ty, _) = cx.typeck_results().expr_ty(scrutinee).kind();\n+        if let ty::Str = ty.kind();\n+        then {\n+            let mut visitor = MatchExprVisitor {\n+                cx,\n+                case_method: None,\n+            };\n+\n+            visitor.visit_expr(scrutinee);\n+\n+            if let Some(case_method) = visitor.case_method {\n+                if let Some((bad_case_span, bad_case_sym)) = verify_case(&case_method, arms) {\n+                    lint(cx, &case_method, bad_case_span, bad_case_sym.as_str());\n                 }\n             }\n         }", "previous_filename": "clippy_lints/src/match_str_case_mismatch.rs"}, {"sha": "a58c71ca5f808a545efcb67e7a79c27683f06d31", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15", "patch": "@@ -18,6 +18,7 @@ mod match_on_vec_items;\n mod match_ref_pats;\n mod match_same_arms;\n mod match_single_binding;\n+mod match_str_case_mismatch;\n mod match_wild_enum;\n mod match_wild_err_arm;\n mod needless_match;\n@@ -716,6 +717,37 @@ declare_clippy_lint! {\n     \"matching on vector elements can panic\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `match` expressions modifying the case of a string with non-compliant arms\n+    ///\n+    /// ### Why is this bad?\n+    /// The arm is unreachable, which is likely a mistake\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # let text = \"Foo\";\n+    /// match &*text.to_ascii_lowercase() {\n+    ///     \"foo\" => {},\n+    ///     \"Bar\" => {},\n+    ///     _ => {},\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # let text = \"Foo\";\n+    /// match &*text.to_ascii_lowercase() {\n+    ///     \"foo\" => {},\n+    ///     \"bar\" => {},\n+    ///     _ => {},\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.58.0\"]\n+    pub MATCH_STR_CASE_MISMATCH,\n+    correctness,\n+    \"creation of a case altering match expression with non-compliant arms\"\n+}\n+\n #[derive(Default)]\n pub struct Matches {\n     msrv: Option<RustcVersion>,\n@@ -753,6 +785,7 @@ impl_lint_pass!(Matches => [\n     COLLAPSIBLE_MATCH,\n     MANUAL_UNWRAP_OR,\n     MATCH_ON_VEC_ITEMS,\n+    MATCH_STR_CASE_MISMATCH,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Matches {\n@@ -790,6 +823,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n                     match_as_ref::check(cx, ex, arms, expr);\n                     needless_match::check_match(cx, ex, arms, expr);\n                     match_on_vec_items::check(cx, ex);\n+                    match_str_case_mismatch::check(cx, ex, arms);\n \n                     if !in_constant(cx, expr.hir_id) {\n                         manual_unwrap_or::check(cx, expr, ex, arms);"}]}