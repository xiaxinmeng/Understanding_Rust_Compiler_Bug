{"sha": "627e001a722d0aa1c8db0523ed26c25f775570f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyN2UwMDFhNzIyZDBhYTFjOGRiMDUyM2VkMjZjMjVmNzc1NTcwZjQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-21T01:21:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-21T01:21:55Z"}, "message": "Rollup merge of #57768 - estebank:type-args-sugg, r=zackmdavis\n\nContinue parsing after parent type args and suggest using angle brackets\n\n```\nerror[E0214]: parenthesized parameters may only be used with a trait\n--> $DIR/E0214.rs:2:15\n   |\nLL |     let v: Vec(&str) = vec![\"foo\"];\n   |               ^^^^^^\n   |               |\n   |               only traits may use parentheses\n   |               help: use angle brackets instead: `<&str>`\n```\n\nr? @zackmdavis", "tree": {"sha": "68868cfffd85d93898d439d84375012580dc7655", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68868cfffd85d93898d439d84375012580dc7655"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/627e001a722d0aa1c8db0523ed26c25f775570f4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcRR6zCRBK7hj4Ov3rIwAAdHIIAHdyyozzDAhvoRuUptbXXcbV\nUoiKTp9FpeD33qzBP44IdKgXiye3QA5uVxlE3TiPVTXcftFh/T4w6k5iWc+wIBLI\nCeCqP/xK2Eoy1TZ+T7xsN5gii8Zz8b1/LWYaTdu4EjtwQLI9pu0vVw7STvVH+5FY\n4pOUbbyzyVBRXaSoFBA//SiTEMSSCu03g7PPRlM+SxNBbQBmr1SfXjtw0p8OhKG7\nvFxT/26Z6+DCMRhL6F/xnvB7IlDfdCbZFmSfxxt2F5PAZ7zgxyiY5WAxtTal8/go\nmkFEqt59ydp6vzNwZJlenpeUhMuVS96sB+1eG+5pio9zmC9tFJHfEsRgBmn+8t4=\n=3YNS\n-----END PGP SIGNATURE-----\n", "payload": "tree 68868cfffd85d93898d439d84375012580dc7655\nparent ebc70e2e9ecdd0920c5e78f53ed694f1c050c5ed\nparent 2ab6cefccfe3c5f2c97bf8bcab080a26089257e2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1548033715 +0100\ncommitter GitHub <noreply@github.com> 1548033715 +0100\n\nRollup merge of #57768 - estebank:type-args-sugg, r=zackmdavis\n\nContinue parsing after parent type args and suggest using angle brackets\n\n```\nerror[E0214]: parenthesized parameters may only be used with a trait\n--> $DIR/E0214.rs:2:15\n   |\nLL |     let v: Vec(&str) = vec![\"foo\"];\n   |               ^^^^^^\n   |               |\n   |               only traits may use parentheses\n   |               help: use angle brackets instead: `<&str>`\n```\n\nr? @zackmdavis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/627e001a722d0aa1c8db0523ed26c25f775570f4", "html_url": "https://github.com/rust-lang/rust/commit/627e001a722d0aa1c8db0523ed26c25f775570f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/627e001a722d0aa1c8db0523ed26c25f775570f4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebc70e2e9ecdd0920c5e78f53ed694f1c050c5ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc70e2e9ecdd0920c5e78f53ed694f1c050c5ed", "html_url": "https://github.com/rust-lang/rust/commit/ebc70e2e9ecdd0920c5e78f53ed694f1c050c5ed"}, {"sha": "2ab6cefccfe3c5f2c97bf8bcab080a26089257e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ab6cefccfe3c5f2c97bf8bcab080a26089257e2", "html_url": "https://github.com/rust-lang/rust/commit/2ab6cefccfe3c5f2c97bf8bcab080a26089257e2"}], "stats": {"total": 182, "additions": 118, "deletions": 64}, "files": [{"sha": "f7af135bc76052edd657418ec8ad44d9f23370f8", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=627e001a722d0aa1c8db0523ed26c25f775570f4", "patch": "@@ -31,6 +31,7 @@\n //! in the HIR, especially for multiple identifiers.\n \n use dep_graph::DepGraph;\n+use errors::Applicability;\n use hir::{self, ParamName};\n use hir::HirVec;\n use hir::map::{DefKey, DefPathData, Definitions};\n@@ -1806,7 +1807,7 @@ impl<'a> LoweringContext<'a> {\n         explicit_owner: Option<NodeId>,\n     ) -> hir::PathSegment {\n         let (mut generic_args, infer_types) = if let Some(ref generic_args) = segment.args {\n-            let msg = \"parenthesized parameters may only be used with a trait\";\n+            let msg = \"parenthesized type parameters may only be used with a `Fn` trait\";\n             match **generic_args {\n                 GenericArgs::AngleBracketed(ref data) => {\n                     self.lower_angle_bracketed_parameter_data(data, param_mode, itctx)\n@@ -1823,10 +1824,25 @@ impl<'a> LoweringContext<'a> {\n                         (hir::GenericArgs::none(), true)\n                     }\n                     ParenthesizedGenericArgs::Err => {\n-                        struct_span_err!(self.sess, data.span, E0214, \"{}\", msg)\n-                            .span_label(data.span, \"only traits may use parentheses\")\n-                            .emit();\n-                        (hir::GenericArgs::none(), true)\n+                        let mut err = struct_span_err!(self.sess, data.span, E0214, \"{}\", msg);\n+                        err.span_label(data.span, \"only `Fn` traits may use parentheses\");\n+                        if let Ok(snippet) = self.sess.source_map().span_to_snippet(data.span) {\n+                            // Do not suggest going from `Trait()` to `Trait<>`\n+                            if data.inputs.len() > 0 {\n+                                err.span_suggestion_with_applicability(\n+                                    data.span,\n+                                    \"use angle brackets instead\",\n+                                    format!(\"<{}>\", &snippet[1..snippet.len() - 1]),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            }\n+                        };\n+                        err.emit();\n+                        (self.lower_angle_bracketed_parameter_data(\n+                            &data.as_angle_bracketed_args(),\n+                            param_mode,\n+                            itctx).0,\n+                         false)\n                     }\n                 },\n             }"}, {"sha": "405cf612543fbc4e1ad21d97070c691346959287", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=627e001a722d0aa1c8db0523ed26c25f775570f4", "patch": "@@ -192,6 +192,16 @@ pub struct ParenthesisedArgs {\n     pub output: Option<P<Ty>>,\n }\n \n+impl ParenthesisedArgs {\n+    pub fn as_angle_bracketed_args(&self) -> AngleBracketedArgs {\n+        AngleBracketedArgs {\n+            span: self.span,\n+            args: self.inputs.iter().cloned().map(|input| GenericArg::Type(input)).collect(),\n+            bindings: vec![],\n+        }\n+    }\n+}\n+\n // hack to ensure that we don't try to access the private parts of `NodeId` in this module\n mod node_id_inner {\n     use rustc_data_structures::indexed_vec::Idx;"}, {"sha": "e09b7a9dd7b7fb4038db61bacc8c884421e71b94", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=627e001a722d0aa1c8db0523ed26c25f775570f4", "patch": "@@ -2176,11 +2176,11 @@ impl<'a> Parser<'a> {\n               style != PathStyle::Mod && self.check(&token::ModSep)\n                                       && self.look_ahead(1, |t| is_args_start(t)) {\n             // Generic arguments are found - `<`, `(`, `::<` or `::(`.\n-            let lo = self.span;\n             if self.eat(&token::ModSep) && style == PathStyle::Type && enable_warning {\n                 self.diagnostic().struct_span_warn(self.prev_span, \"unnecessary path disambiguator\")\n                                  .span_label(self.prev_span, \"try removing `::`\").emit();\n             }\n+            let lo = self.span;\n \n             let args = if self.eat_lt() {\n                 // `<'a, T, A = U>`"}, {"sha": "a10f2c00578c63d41af185fa0f96868b8f3d104f", "filename": "src/test/ui/error-codes/E0214.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr?ref=627e001a722d0aa1c8db0523ed26c25f775570f4", "patch": "@@ -1,8 +1,11 @@\n-error[E0214]: parenthesized parameters may only be used with a trait\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/E0214.rs:2:15\n    |\n LL |     let v: Vec(&str) = vec![\"foo\"];\n-   |               ^^^^^^ only traits may use parentheses\n+   |               ^^^^^^\n+   |               |\n+   |               only `Fn` traits may use parentheses\n+   |               help: use angle brackets instead: `<&str>`\n \n error: aborting due to previous error\n "}, {"sha": "1c640af8d02b9311b8dae6a75025853a8fda3194", "filename": "src/test/ui/issues/issue-23589.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Fissues%2Fissue-23589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Fissues%2Fissue-23589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23589.rs?ref=627e001a722d0aa1c8db0523ed26c25f775570f4", "patch": "@@ -1,4 +1,5 @@\n fn main() {\n     let v: Vec(&str) = vec!['1', '2'];\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n+    //~| ERROR mismatched types\n }"}, {"sha": "bc2007ba39cc632965b4128485a5f194ecbac66f", "filename": "src/test/ui/issues/issue-23589.stderr", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr?ref=627e001a722d0aa1c8db0523ed26c25f775570f4", "patch": "@@ -1,9 +1,22 @@\n-error[E0214]: parenthesized parameters may only be used with a trait\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-23589.rs:2:15\n    |\n LL |     let v: Vec(&str) = vec!['1', '2'];\n-   |               ^^^^^^ only traits may use parentheses\n+   |               ^^^^^^\n+   |               |\n+   |               only `Fn` traits may use parentheses\n+   |               help: use angle brackets instead: `<&str>`\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/issue-23589.rs:2:29\n+   |\n+LL |     let v: Vec(&str) = vec!['1', '2'];\n+   |                             ^^^ expected &str, found char\n+   |\n+   = note: expected type `&str`\n+              found type `char`\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0214`.\n+Some errors occurred: E0214, E0308.\n+For more information about an error, try `rustc --explain E0214`."}, {"sha": "2234f68f246292a00449eb0ec2f11f6c5d7a389e", "filename": "src/test/ui/issues/issue-32995-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.rs?ref=627e001a722d0aa1c8db0523ed26c25f775570f4", "patch": "@@ -2,17 +2,17 @@\n \n fn main() {\n     { fn f<X: ::std::marker()::Send>() {} }\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| WARN previously accepted\n \n     { fn f() -> impl ::std::marker()::Send { } }\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| WARN previously accepted\n }\n \n #[derive(Clone)]\n struct X;\n \n impl ::std::marker()::Copy for X {}\n-//~^ ERROR parenthesized parameters may only be used with a trait\n+//~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n //~| WARN previously accepted"}, {"sha": "104b76cba2df933b107a96454adea65036331dd0", "filename": "src/test/ui/issues/issue-32995-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr?ref=627e001a722d0aa1c8db0523ed26c25f775570f4", "patch": "@@ -1,4 +1,4 @@\n-error: parenthesized parameters may only be used with a trait\n+error: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-32995-2.rs:4:28\n    |\n LL |     { fn f<X: ::std::marker()::Send>() {} }\n@@ -8,7 +8,7 @@ LL |     { fn f<X: ::std::marker()::Send>() {} }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n-error: parenthesized parameters may only be used with a trait\n+error: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-32995-2.rs:8:35\n    |\n LL |     { fn f() -> impl ::std::marker()::Send { } }\n@@ -17,7 +17,7 @@ LL |     { fn f() -> impl ::std::marker()::Send { } }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n-error: parenthesized parameters may only be used with a trait\n+error: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-32995-2.rs:16:19\n    |\n LL | impl ::std::marker()::Copy for X {}"}, {"sha": "c32fb63f1e5845a9c0ca18815f3516668ca58fe1", "filename": "src/test/ui/issues/issue-32995.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Fissues%2Fissue-32995.rs", "raw_url": "https://github.com/rust-lang/rust/raw/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Fissues%2Fissue-32995.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995.rs?ref=627e001a722d0aa1c8db0523ed26c25f775570f4", "patch": "@@ -2,32 +2,32 @@\n \n fn main() {\n     let x: usize() = 1;\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| WARN previously accepted\n \n     let b: ::std::boxed()::Box<_> = Box::new(1);\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| WARN previously accepted\n \n     let p = ::std::str::()::from_utf8(b\"foo\").unwrap();\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| WARN previously accepted\n \n     let p = ::std::str::from_utf8::()(b\"foo\").unwrap();\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| WARN previously accepted\n \n     let o : Box<::std::marker()::Send> = Box::new(1);\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| WARN previously accepted\n \n     let o : Box<Send + ::std::marker()::Sync> = Box::new(1);\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| WARN previously accepted\n }\n \n fn foo<X:Default>() {\n     let d : X() = Default::default();\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| WARN previously accepted\n }"}, {"sha": "97b4b7fa76ca81354b7e6c6b89ce02923501a68a", "filename": "src/test/ui/issues/issue-32995.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr?ref=627e001a722d0aa1c8db0523ed26c25f775570f4", "patch": "@@ -1,4 +1,4 @@\n-error: parenthesized parameters may only be used with a trait\n+error: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-32995.rs:4:17\n    |\n LL |     let x: usize() = 1;\n@@ -8,7 +8,7 @@ LL |     let x: usize() = 1;\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n-error: parenthesized parameters may only be used with a trait\n+error: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-32995.rs:8:24\n    |\n LL |     let b: ::std::boxed()::Box<_> = Box::new(1);\n@@ -17,25 +17,25 @@ LL |     let b: ::std::boxed()::Box<_> = Box::new(1);\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n-error: parenthesized parameters may only be used with a trait\n-  --> $DIR/issue-32995.rs:12:23\n+error: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:12:25\n    |\n LL |     let p = ::std::str::()::from_utf8(b\"foo\").unwrap();\n-   |                       ^^^^\n+   |                         ^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n-error: parenthesized parameters may only be used with a trait\n-  --> $DIR/issue-32995.rs:16:34\n+error: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:16:36\n    |\n LL |     let p = ::std::str::from_utf8::()(b\"foo\").unwrap();\n-   |                                  ^^^^\n+   |                                    ^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n-error: parenthesized parameters may only be used with a trait\n+error: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-32995.rs:20:30\n    |\n LL |     let o : Box<::std::marker()::Send> = Box::new(1);\n@@ -44,7 +44,7 @@ LL |     let o : Box<::std::marker()::Send> = Box::new(1);\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n-error: parenthesized parameters may only be used with a trait\n+error: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-32995.rs:24:37\n    |\n LL |     let o : Box<Send + ::std::marker()::Sync> = Box::new(1);\n@@ -53,7 +53,7 @@ LL |     let o : Box<Send + ::std::marker()::Sync> = Box::new(1);\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n-error: parenthesized parameters may only be used with a trait\n+error: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-32995.rs:30:14\n    |\n LL |     let d : X() = Default::default();"}, {"sha": "2183c74da0acbf43c92ff13a7d0be5f3a9300ea2", "filename": "src/test/ui/parser/type-parameters-in-field-exprs.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr?ref=627e001a722d0aa1c8db0523ed26c25f775570f4", "patch": "@@ -1,20 +1,20 @@\n error: field expressions may not have generic arguments\n-  --> $DIR/type-parameters-in-field-exprs.rs:13:8\n+  --> $DIR/type-parameters-in-field-exprs.rs:13:10\n    |\n LL |     f.x::<isize>;\n-   |        ^^^^^^^^^\n+   |          ^^^^^^^\n \n error: field expressions may not have generic arguments\n-  --> $DIR/type-parameters-in-field-exprs.rs:15:8\n+  --> $DIR/type-parameters-in-field-exprs.rs:15:10\n    |\n LL |     f.x::<>;\n-   |        ^^^^\n+   |          ^^\n \n error: field expressions may not have generic arguments\n-  --> $DIR/type-parameters-in-field-exprs.rs:17:8\n+  --> $DIR/type-parameters-in-field-exprs.rs:17:10\n    |\n LL |     f.x::();\n-   |        ^^^^\n+   |          ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "965ca7000be80f7d9e805b2838dbb7e7051951f6", "filename": "src/test/ui/span/macro-ty-params.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr?ref=627e001a722d0aa1c8db0523ed26c25f775570f4", "patch": "@@ -1,14 +1,14 @@\n error: generic arguments in macro path\n-  --> $DIR/macro-ty-params.rs:10:8\n+  --> $DIR/macro-ty-params.rs:10:10\n    |\n LL |     foo::<T>!(); //~ ERROR generic arguments in macro path\n-   |        ^^^^^\n+   |          ^^^\n \n error: generic arguments in macro path\n-  --> $DIR/macro-ty-params.rs:11:8\n+  --> $DIR/macro-ty-params.rs:11:10\n    |\n LL |     foo::<>!(); //~ ERROR generic arguments in macro path\n-   |        ^^^^\n+   |          ^^\n \n error: unexpected generic arguments in path\n   --> $DIR/macro-ty-params.rs:12:8"}, {"sha": "c96a6fa8b6c91b2942840cc765e3d0e3635c6132", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct-1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.rs?ref=627e001a722d0aa1c8db0523ed26c25f775570f4", "patch": "@@ -6,7 +6,8 @@ struct Bar<A> {\n \n fn bar() {\n     let x: Box<Bar()> = panic!();\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n+    //~| ERROR wrong number of type arguments: expected 1, found 0\n }\n \n fn main() { }"}, {"sha": "fa52e66fb03495495e075d746e03fbf6f9c6ea4f", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct-1.stderr", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr?ref=627e001a722d0aa1c8db0523ed26c25f775570f4", "patch": "@@ -1,9 +1,16 @@\n-error[E0214]: parenthesized parameters may only be used with a trait\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/unboxed-closure-sugar-used-on-struct-1.rs:8:19\n    |\n LL |     let x: Box<Bar()> = panic!();\n-   |                   ^^ only traits may use parentheses\n+   |                   ^^ only `Fn` traits may use parentheses\n \n-error: aborting due to previous error\n+error[E0107]: wrong number of type arguments: expected 1, found 0\n+  --> $DIR/unboxed-closure-sugar-used-on-struct-1.rs:8:16\n+   |\n+LL |     let x: Box<Bar()> = panic!();\n+   |                ^^^^^ expected 1 type argument\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0214`.\n+Some errors occurred: E0107, E0214.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "79ced1ecfb1a04734b4825a2afa6f79356cf76d5", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.rs?ref=627e001a722d0aa1c8db0523ed26c25f775570f4", "patch": "@@ -12,7 +12,7 @@ fn bar() {\n     let b = Bar::<isize, usize>::new(); // OK\n \n     let b = Bar::(isize, usize)::new(); // OK too (for the parser)\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n }\n \n fn main() {}"}, {"sha": "7d05ca55ffdb0bec1d39d2a0a88ead18b691dc2a", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct-3.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.stderr?ref=627e001a722d0aa1c8db0523ed26c25f775570f4", "patch": "@@ -1,8 +1,11 @@\n-error[E0214]: parenthesized parameters may only be used with a trait\n-  --> $DIR/unboxed-closure-sugar-used-on-struct-3.rs:14:16\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/unboxed-closure-sugar-used-on-struct-3.rs:14:18\n    |\n LL |     let b = Bar::(isize, usize)::new(); // OK too (for the parser)\n-   |                ^^^^^^^^^^^^^^^^ only traits may use parentheses\n+   |                  ^^^^^^^^^^^^^^\n+   |                  |\n+   |                  only `Fn` traits may use parentheses\n+   |                  help: use angle brackets instead: `<isize, usize>`\n \n error: aborting due to previous error\n "}, {"sha": "1af7f55674c6aa9c388533563b60ddac19084443", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.rs?ref=627e001a722d0aa1c8db0523ed26c25f775570f4", "patch": "@@ -5,8 +5,8 @@ struct Bar<A> {\n }\n \n fn foo(b: Box<Bar()>) {\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n-    //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n+    //~| ERROR wrong number of type arguments: expected 1, found 0\n }\n \n fn main() { }"}, {"sha": "b34237937ee1cb0f28dbacebac9274770aa585d4", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/627e001a722d0aa1c8db0523ed26c25f775570f4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr?ref=627e001a722d0aa1c8db0523ed26c25f775570f4", "patch": "@@ -1,16 +1,16 @@\n-error[E0214]: parenthesized parameters may only be used with a trait\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/unboxed-closure-sugar-used-on-struct.rs:7:18\n    |\n LL | fn foo(b: Box<Bar()>) {\n-   |                  ^^ only traits may use parentheses\n+   |                  ^^ only `Fn` traits may use parentheses\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0107]: wrong number of type arguments: expected 1, found 0\n   --> $DIR/unboxed-closure-sugar-used-on-struct.rs:7:15\n    |\n LL | fn foo(b: Box<Bar()>) {\n-   |               ^^^^^ not allowed in type signatures\n+   |               ^^^^^ expected 1 type argument\n \n error: aborting due to 2 previous errors\n \n-Some errors occurred: E0121, E0214.\n-For more information about an error, try `rustc --explain E0121`.\n+Some errors occurred: E0107, E0214.\n+For more information about an error, try `rustc --explain E0107`."}]}