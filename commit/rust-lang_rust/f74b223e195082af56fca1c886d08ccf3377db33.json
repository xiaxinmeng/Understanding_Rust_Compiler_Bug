{"sha": "f74b223e195082af56fca1c886d08ccf3377db33", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NGIyMjNlMTk1MDgyYWY1NmZjYTFjODg2ZDA4Y2NmMzM3N2RiMzM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-24T12:17:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-24T12:17:35Z"}, "message": "Rollup merge of #79310 - jyn514:fold-item-cleanup, r=GuillaumeGomez\n\nMake `fold_item_recur` non-nullable\n\nThis gets rid of a bunch of `unwrap()`s and makes it a little more clear\nwhat's going on.\n\nOriginally I wanted to make `fold_item` non-nullable too, which would\nhave been a lot nicer to work with, but unfortunately `stripper` does\nactually return `None` in some places. I might make a follow-up moving\nstripper to be special and not a pass so that passes can be\nnon-nullable.\n\nFound while working on https://github.com/rust-lang/rust/issues/76998.", "tree": {"sha": "3ad61e4a7d73ec7d5f2c672981f2b6e5799b23fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ad61e4a7d73ec7d5f2c672981f2b6e5799b23fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f74b223e195082af56fca1c886d08ccf3377db33", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfvPngCRBK7hj4Ov3rIwAAdHIIADmpC+mYqmboFj8/HUBwLruz\n1dfzY6uLOAMYCQFbsOmlv82kWM3yPCMPn6oBxSkv7v1TVhzRXfBm1isLPzdrK4Jn\nlCnUWW8W5I0SQ3E2cuCDDHmmYZ7OXvEZhaF97yE7CpD5NMoZ118llJN+LoW1BJdV\nwHwUIC/MxtlLpRV9ST22BbIHuOzjhau3XCM8m4/zoI9Nl2PFf2VHq425UxHpyw4/\ncmVO79OTvb1i2JniYhTmyJmXJfnaIB/jMy7QVtKBfp16FSKeOvlT/MtuRj1gyTeV\nlgRbT/SeSqwTRSYpQqgBXttd0yEZEMr0NVfbsHRCLu/aMJW3pZxeX3yyLxHepBw=\n=CiDB\n-----END PGP SIGNATURE-----\n", "payload": "tree 3ad61e4a7d73ec7d5f2c672981f2b6e5799b23fa\nparent 8fde4be7d042a348387a82832a44076cfbf334ca\nparent ab1e6342956620901723106761eacb0113e1583b\nauthor Jonas Schievink <jonasschievink@gmail.com> 1606220255 +0100\ncommitter GitHub <noreply@github.com> 1606220255 +0100\n\nRollup merge of #79310 - jyn514:fold-item-cleanup, r=GuillaumeGomez\n\nMake `fold_item_recur` non-nullable\n\nThis gets rid of a bunch of `unwrap()`s and makes it a little more clear\nwhat's going on.\n\nOriginally I wanted to make `fold_item` non-nullable too, which would\nhave been a lot nicer to work with, but unfortunately `stripper` does\nactually return `None` in some places. I might make a follow-up moving\nstripper to be special and not a pass so that passes can be\nnon-nullable.\n\nFound while working on https://github.com/rust-lang/rust/issues/76998.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f74b223e195082af56fca1c886d08ccf3377db33", "html_url": "https://github.com/rust-lang/rust/commit/f74b223e195082af56fca1c886d08ccf3377db33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f74b223e195082af56fca1c886d08ccf3377db33/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fde4be7d042a348387a82832a44076cfbf334ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fde4be7d042a348387a82832a44076cfbf334ca", "html_url": "https://github.com/rust-lang/rust/commit/8fde4be7d042a348387a82832a44076cfbf334ca"}, {"sha": "ab1e6342956620901723106761eacb0113e1583b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab1e6342956620901723106761eacb0113e1583b", "html_url": "https://github.com/rust-lang/rust/commit/ab1e6342956620901723106761eacb0113e1583b"}], "stats": {"total": 142, "additions": 67, "deletions": 75}, "files": [{"sha": "285fabdc3723040d86124f21c78f7e00d13d2ade", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=f74b223e195082af56fca1c886d08ccf3377db33", "patch": "@@ -16,7 +16,7 @@ impl StripItem {\n \n crate trait DocFolder: Sized {\n     fn fold_item(&mut self, item: Item) -> Option<Item> {\n-        self.fold_item_recur(item)\n+        Some(self.fold_item_recur(item))\n     }\n \n     /// don't override!\n@@ -71,15 +71,12 @@ crate trait DocFolder: Sized {\n     }\n \n     /// don't override!\n-    fn fold_item_recur(&mut self, item: Item) -> Option<Item> {\n-        let Item { attrs, name, source, visibility, def_id, kind, stability, deprecation } = item;\n-\n-        let kind = match kind {\n+    fn fold_item_recur(&mut self, mut item: Item) -> Item {\n+        item.kind = match item.kind {\n             StrippedItem(box i) => StrippedItem(box self.fold_inner_recur(i)),\n-            _ => self.fold_inner_recur(kind),\n+            _ => self.fold_inner_recur(item.kind),\n         };\n-\n-        Some(Item { attrs, name, source, kind, visibility, stability, deprecation, def_id })\n+        item\n     }\n \n     fn fold_mod(&mut self, m: Module) -> Module {"}, {"sha": "39b750279ac5bc22a9ada679b7086bea10e5ed2e", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 37, "deletions": 40, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=f74b223e195082af56fca1c886d08ccf3377db33", "patch": "@@ -421,55 +421,52 @@ impl DocFolder for Cache {\n \n         // Once we've recursively found all the generics, hoard off all the\n         // implementations elsewhere.\n-        let ret = self.fold_item_recur(item).and_then(|item| {\n-            if let clean::Item { kind: clean::ImplItem(_), .. } = item {\n-                // Figure out the id of this impl. This may map to a\n-                // primitive rather than always to a struct/enum.\n-                // Note: matching twice to restrict the lifetime of the `i` borrow.\n-                let mut dids = FxHashSet::default();\n-                if let clean::Item { kind: clean::ImplItem(ref i), .. } = item {\n-                    match i.for_ {\n-                        clean::ResolvedPath { did, .. }\n-                        | clean::BorrowedRef {\n-                            type_: box clean::ResolvedPath { did, .. }, ..\n-                        } => {\n-                            dids.insert(did);\n-                        }\n-                        ref t => {\n-                            let did = t\n-                                .primitive_type()\n-                                .and_then(|t| self.primitive_locations.get(&t).cloned());\n+        let item = self.fold_item_recur(item);\n+        let ret = if let clean::Item { kind: clean::ImplItem(_), .. } = item {\n+            // Figure out the id of this impl. This may map to a\n+            // primitive rather than always to a struct/enum.\n+            // Note: matching twice to restrict the lifetime of the `i` borrow.\n+            let mut dids = FxHashSet::default();\n+            if let clean::Item { kind: clean::ImplItem(ref i), .. } = item {\n+                match i.for_ {\n+                    clean::ResolvedPath { did, .. }\n+                    | clean::BorrowedRef { type_: box clean::ResolvedPath { did, .. }, .. } => {\n+                        dids.insert(did);\n+                    }\n+                    ref t => {\n+                        let did = t\n+                            .primitive_type()\n+                            .and_then(|t| self.primitive_locations.get(&t).cloned());\n \n-                            if let Some(did) = did {\n-                                dids.insert(did);\n-                            }\n+                        if let Some(did) = did {\n+                            dids.insert(did);\n                         }\n                     }\n+                }\n \n-                    if let Some(generics) = i.trait_.as_ref().and_then(|t| t.generics()) {\n-                        for bound in generics {\n-                            if let Some(did) = bound.def_id() {\n-                                dids.insert(did);\n-                            }\n+                if let Some(generics) = i.trait_.as_ref().and_then(|t| t.generics()) {\n+                    for bound in generics {\n+                        if let Some(did) = bound.def_id() {\n+                            dids.insert(did);\n                         }\n                     }\n-                } else {\n-                    unreachable!()\n-                };\n-                let impl_item = Impl { impl_item: item };\n-                if impl_item.trait_did().map_or(true, |d| self.traits.contains_key(&d)) {\n-                    for did in dids {\n-                        self.impls.entry(did).or_insert(vec![]).push(impl_item.clone());\n-                    }\n-                } else {\n-                    let trait_did = impl_item.trait_did().expect(\"no trait did\");\n-                    self.orphan_trait_impls.push((trait_did, dids, impl_item));\n                 }\n-                None\n             } else {\n-                Some(item)\n+                unreachable!()\n+            };\n+            let impl_item = Impl { impl_item: item };\n+            if impl_item.trait_did().map_or(true, |d| self.traits.contains_key(&d)) {\n+                for did in dids {\n+                    self.impls.entry(did).or_insert(vec![]).push(impl_item.clone());\n+                }\n+            } else {\n+                let trait_did = impl_item.trait_did().expect(\"no trait did\");\n+                self.orphan_trait_impls.push((trait_did, dids, impl_item));\n             }\n-        });\n+            None\n+        } else {\n+            Some(item)\n+        };\n \n         if pushed {\n             self.stack.pop().expect(\"stack already empty\");"}, {"sha": "e7b5a90d84df0c311be9973f911dfb95e154b714", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=f74b223e195082af56fca1c886d08ccf3377db33", "patch": "@@ -60,7 +60,7 @@ impl<'a> DocFolder for SourceCollector<'a> {\n                 }\n             };\n         }\n-        self.fold_item_recur(item)\n+        Some(self.fold_item_recur(item))\n     }\n }\n "}, {"sha": "3f9978c8fca84ef1df1c33b34aaf4d7b944595e4", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=f74b223e195082af56fca1c886d08ccf3377db33", "patch": "@@ -268,6 +268,6 @@ impl<'a, 'b> fold::DocFolder for CoverageCalculator<'a, 'b> {\n             }\n         }\n \n-        self.fold_item_recur(i)\n+        Some(self.fold_item_recur(i))\n     }\n }"}, {"sha": "0c76dc571beee1406cbdf25cad38f0587c358d6c", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=f74b223e195082af56fca1c886d08ccf3377db33", "patch": "@@ -105,7 +105,7 @@ impl<'a, 'tcx> DocFolder for SyntaxChecker<'a, 'tcx> {\n             }\n         }\n \n-        self.fold_item_recur(item)\n+        Some(self.fold_item_recur(item))\n     }\n }\n "}, {"sha": "e1ba75baa0fa48ac47e6e9355716a436921a7e1e", "filename": "src/librustdoc/passes/collapse_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs?ref=f74b223e195082af56fca1c886d08ccf3377db33", "patch": "@@ -23,7 +23,7 @@ struct Collapser;\n impl fold::DocFolder for Collapser {\n     fn fold_item(&mut self, mut i: Item) -> Option<Item> {\n         i.attrs.collapse_doc_comments();\n-        self.fold_item_recur(i)\n+        Some(self.fold_item_recur(i))\n     }\n }\n "}, {"sha": "b0639e43ae65e26b0d2544410718de759128a11a", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=f74b223e195082af56fca1c886d08ccf3377db33", "patch": "@@ -858,7 +858,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n             // we don't display docs on `extern crate` items anyway, so don't process them.\n             clean::ExternCrateItem(..) => {\n                 debug!(\"ignoring extern crate item {:?}\", item.def_id);\n-                return self.fold_item_recur(item);\n+                return Some(self.fold_item_recur(item));\n             }\n             clean::ImportItem(Import { kind: clean::ImportKind::Simple(ref name, ..), .. }) => {\n                 Some(name.clone())\n@@ -958,7 +958,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n             }\n         }\n \n-        if item.is_mod() {\n+        Some(if item.is_mod() {\n             if !item.attrs.inner_docs {\n                 self.mod_ids.push(item.def_id);\n             }\n@@ -968,7 +968,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n             ret\n         } else {\n             self.fold_item_recur(item)\n-        }\n+        })\n     }\n }\n "}, {"sha": "4c3defabc3294bb8f95bda70fcf8bca9635c2721", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=f74b223e195082af56fca1c886d08ccf3377db33", "patch": "@@ -133,7 +133,7 @@ impl<'a, 'tcx> DocFolder for SyntheticImplCollector<'a, 'tcx> {\n             }\n         }\n \n-        self.fold_item_recur(i)\n+        Some(self.fold_item_recur(i))\n     }\n }\n \n@@ -152,7 +152,7 @@ impl DocFolder for ItemCollector {\n     fn fold_item(&mut self, i: Item) -> Option<Item> {\n         self.items.insert(i.def_id);\n \n-        self.fold_item_recur(i)\n+        Some(self.fold_item_recur(i))\n     }\n }\n "}, {"sha": "299a73c8a0112453f6d1f87f3c62607c35125b5c", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=f74b223e195082af56fca1c886d08ccf3377db33", "patch": "@@ -41,7 +41,7 @@ impl<'a, 'tcx> DocFolder for PrivateItemDocTestLinter<'a, 'tcx> {\n \n         look_for_tests(&cx, &dox, &item);\n \n-        self.fold_item_recur(item)\n+        Some(self.fold_item_recur(item))\n     }\n }\n "}, {"sha": "a7a1ba1118d1fdca65a325bdfe1be69709719c24", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=f74b223e195082af56fca1c886d08ccf3377db33", "patch": "@@ -178,7 +178,7 @@ impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n             Some(hir_id) => hir_id,\n             None => {\n                 // If non-local, no need to check anything.\n-                return self.fold_item_recur(item);\n+                return Some(self.fold_item_recur(item));\n             }\n         };\n         let dox = item.attrs.collapsed_doc_value().unwrap_or_default();\n@@ -223,6 +223,6 @@ impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n             }\n         }\n \n-        self.fold_item_recur(item)\n+        Some(self.fold_item_recur(item))\n     }\n }"}, {"sha": "1f411b997f80250e5734e55f8151091f0d7674bc", "filename": "src/librustdoc/passes/non_autolinks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs?ref=f74b223e195082af56fca1c886d08ccf3377db33", "patch": "@@ -68,7 +68,7 @@ impl<'a, 'tcx> DocFolder for NonAutolinksLinter<'a, 'tcx> {\n             Some(hir_id) => hir_id,\n             None => {\n                 // If non-local, no need to check anything.\n-                return self.fold_item_recur(item);\n+                return Some(self.fold_item_recur(item));\n             }\n         };\n         let dox = item.attrs.collapsed_doc_value().unwrap_or_default();\n@@ -133,6 +133,6 @@ impl<'a, 'tcx> DocFolder for NonAutolinksLinter<'a, 'tcx> {\n             }\n         }\n \n-        self.fold_item_recur(item)\n+        Some(self.fold_item_recur(item))\n     }\n }"}, {"sha": "6722d7c2fc9feaa998c9e3857b9e17ba6a5b3725", "filename": "src/librustdoc/passes/propagate_doc_cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs?ref=f74b223e195082af56fca1c886d08ccf3377db33", "patch": "@@ -39,6 +39,6 @@ impl DocFolder for CfgPropagator {\n         let result = self.fold_item_recur(item);\n         self.parent_cfg = old_parent_cfg;\n \n-        result\n+        Some(result)\n     }\n }"}, {"sha": "6b59eb8cf288a8246ad06462d92e1c9e93fc41d2", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=f74b223e195082af56fca1c886d08ccf3377db33", "patch": "@@ -47,7 +47,7 @@ impl<'a> DocFolder for Stripper<'a> {\n                     // strip things like impl methods but when doing so\n                     // we must not add any items to the `retained` set.\n                     let old = mem::replace(&mut self.update_retained, false);\n-                    let ret = StripItem(self.fold_item_recur(i).unwrap()).strip();\n+                    let ret = StripItem(self.fold_item_recur(i)).strip();\n                     self.update_retained = old;\n                     return ret;\n                 }\n@@ -58,6 +58,6 @@ impl<'a> DocFolder for Stripper<'a> {\n                 self.retained.insert(i.def_id);\n             }\n         }\n-        self.fold_item_recur(i)\n+        Some(self.fold_item_recur(i))\n     }\n }"}, {"sha": "444fd593ec9c9856bef17f84fca3cfe3fdbb4f7d", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=f74b223e195082af56fca1c886d08ccf3377db33", "patch": "@@ -22,7 +22,7 @@ impl<'a> DocFolder for Stripper<'a> {\n                 let old = mem::replace(&mut self.update_retained, false);\n                 let ret = self.fold_item_recur(i);\n                 self.update_retained = old;\n-                return ret;\n+                return Some(ret);\n             }\n             // These items can all get re-exported\n             clean::OpaqueTyItem(..)\n@@ -59,7 +59,7 @@ impl<'a> DocFolder for Stripper<'a> {\n                 if i.def_id.is_local() && !i.visibility.is_public() {\n                     debug!(\"Stripper: stripping module {:?}\", i.name);\n                     let old = mem::replace(&mut self.update_retained, false);\n-                    let ret = StripItem(self.fold_item_recur(i).unwrap()).strip();\n+                    let ret = StripItem(self.fold_item_recur(i)).strip();\n                     self.update_retained = old;\n                     return ret;\n                 }\n@@ -107,12 +107,10 @@ impl<'a> DocFolder for Stripper<'a> {\n             self.fold_item_recur(i)\n         };\n \n-        if let Some(ref i) = i {\n-            if self.update_retained {\n-                self.retained.insert(i.def_id);\n-            }\n+        if self.update_retained {\n+            self.retained.insert(i.def_id);\n         }\n-        i\n+        Some(i)\n     }\n }\n \n@@ -153,7 +151,7 @@ impl<'a> DocFolder for ImplStripper<'a> {\n                 }\n             }\n         }\n-        self.fold_item_recur(i)\n+        Some(self.fold_item_recur(i))\n     }\n }\n \n@@ -164,7 +162,7 @@ impl DocFolder for ImportStripper {\n     fn fold_item(&mut self, i: Item) -> Option<Item> {\n         match i.kind {\n             clean::ExternCrateItem(..) | clean::ImportItem(..) if !i.visibility.is_public() => None,\n-            _ => self.fold_item_recur(i),\n+            _ => Some(self.fold_item_recur(i)),\n         }\n     }\n }"}, {"sha": "d0345d1e48cb5958726d3cbcecb182bd58aa5be8", "filename": "src/librustdoc/passes/unindent_comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74b223e195082af56fca1c886d08ccf3377db33/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs?ref=f74b223e195082af56fca1c886d08ccf3377db33", "patch": "@@ -23,7 +23,7 @@ struct CommentCleaner;\n impl fold::DocFolder for CommentCleaner {\n     fn fold_item(&mut self, mut i: Item) -> Option<Item> {\n         i.attrs.unindent_doc_comments();\n-        self.fold_item_recur(i)\n+        Some(self.fold_item_recur(i))\n     }\n }\n "}]}