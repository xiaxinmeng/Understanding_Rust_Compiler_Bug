{"sha": "3557084b0137f04c285197c2253e097c772cf047", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NTcwODRiMDEzN2YwNGMyODUxOTdjMjI1M2UwOTdjNzcyY2YwNDc=", "commit": {"author": {"name": "Matthias Seiffert", "email": "matthias-seiffert@hotmail.de", "date": "2019-10-02T20:48:19Z"}, "committer": {"name": "Matthias Seiffert", "email": "matthias-seiffert@hotmail.de", "date": "2019-10-02T20:48:19Z"}, "message": "Add check for assert_eq macros to unit_cmp lint", "tree": {"sha": "285186d7d3851941ef82b23dbe0e90f38f97c2bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/285186d7d3851941ef82b23dbe0e90f38f97c2bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3557084b0137f04c285197c2253e097c772cf047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3557084b0137f04c285197c2253e097c772cf047", "html_url": "https://github.com/rust-lang/rust/commit/3557084b0137f04c285197c2253e097c772cf047", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3557084b0137f04c285197c2253e097c772cf047/comments", "author": {"login": "Lythenas", "id": 32217236, "node_id": "MDQ6VXNlcjMyMjE3MjM2", "avatar_url": "https://avatars.githubusercontent.com/u/32217236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lythenas", "html_url": "https://github.com/Lythenas", "followers_url": "https://api.github.com/users/Lythenas/followers", "following_url": "https://api.github.com/users/Lythenas/following{/other_user}", "gists_url": "https://api.github.com/users/Lythenas/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lythenas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lythenas/subscriptions", "organizations_url": "https://api.github.com/users/Lythenas/orgs", "repos_url": "https://api.github.com/users/Lythenas/repos", "events_url": "https://api.github.com/users/Lythenas/events{/privacy}", "received_events_url": "https://api.github.com/users/Lythenas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Lythenas", "id": 32217236, "node_id": "MDQ6VXNlcjMyMjE3MjM2", "avatar_url": "https://avatars.githubusercontent.com/u/32217236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lythenas", "html_url": "https://github.com/Lythenas", "followers_url": "https://api.github.com/users/Lythenas/followers", "following_url": "https://api.github.com/users/Lythenas/following{/other_user}", "gists_url": "https://api.github.com/users/Lythenas/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lythenas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lythenas/subscriptions", "organizations_url": "https://api.github.com/users/Lythenas/orgs", "repos_url": "https://api.github.com/users/Lythenas/repos", "events_url": "https://api.github.com/users/Lythenas/events{/privacy}", "received_events_url": "https://api.github.com/users/Lythenas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "737f0a6bb508706b75e21194e3010aa3865e779a", "url": "https://api.github.com/repos/rust-lang/rust/commits/737f0a6bb508706b75e21194e3010aa3865e779a", "html_url": "https://github.com/rust-lang/rust/commit/737f0a6bb508706b75e21194e3010aa3865e779a"}], "stats": {"total": 72, "additions": 69, "deletions": 3}, "files": [{"sha": "b235b3eab2ae85c228882d674077d0bcf25817a0", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3557084b0137f04c285197c2253e097c772cf047/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3557084b0137f04c285197c2253e097c772cf047/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=3557084b0137f04c285197c2253e097c772cf047", "patch": "@@ -17,6 +17,8 @@ use rustc_target::spec::abi::Abi;\n use rustc_typeck::hir_ty_to_ty;\n use syntax::ast::{FloatTy, IntTy, LitIntType, LitKind, UintTy};\n use syntax::errors::DiagnosticBuilder;\n+use syntax::ext::base::MacroKind;\n+use syntax::ext::hygiene::ExpnKind;\n use syntax::source_map::Span;\n use syntax::symbol::{sym, Symbol};\n \n@@ -527,6 +529,30 @@ declare_lint_pass!(UnitCmp => [UNIT_CMP]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitCmp {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if expr.span.from_expansion() {\n+            if let Some(callee) = expr.span.source_callee() {\n+                if let ExpnKind::Macro(MacroKind::Bang, symbol) = callee.kind {\n+                    if let ExprKind::Binary(ref cmp, ref left, _) = expr.kind {\n+                        let op = cmp.node;\n+                        if op.is_comparison() && is_unit(cx.tables.expr_ty(left)) {\n+                            let result = match &*symbol.as_str() {\n+                                \"assert_eq\" | \"debug_assert_eq\" => \"succeed\",\n+                                \"assert_ne\" | \"debug_assert_ne\" => \"fail\",\n+                                _ => return,\n+                            };\n+                            span_lint(\n+                                cx,\n+                                UNIT_CMP,\n+                                expr.span,\n+                                &format!(\n+                                    \"{} of unit values detected. This will always {}\",\n+                                    symbol.as_str(),\n+                                    result\n+                                ),\n+                            );\n+                        }\n+                    }\n+                }\n+            }\n             return;\n         }\n         if let ExprKind::Binary(ref cmp, ref left, _) = expr.kind {"}, {"sha": "71c4348a2a1886c2ea1b74e909104d9ab1c015ce", "filename": "tests/ui/unit_cmp.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3557084b0137f04c285197c2253e097c772cf047/tests%2Fui%2Funit_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3557084b0137f04c285197c2253e097c772cf047/tests%2Fui%2Funit_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_cmp.rs?ref=3557084b0137f04c285197c2253e097c772cf047", "patch": "@@ -20,4 +20,10 @@ fn main() {\n     } > {\n         false;\n     } {}\n+\n+    assert_eq!((), ());\n+    debug_assert_eq!((), ());\n+\n+    assert_ne!((), ());\n+    debug_assert_ne!((), ());\n }"}, {"sha": "e2bab3eab60b1a82a56dc2792cc8a609b068299f", "filename": "tests/ui/unit_cmp.stderr", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3557084b0137f04c285197c2253e097c772cf047/tests%2Fui%2Funit_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3557084b0137f04c285197c2253e097c772cf047/tests%2Fui%2Funit_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_cmp.stderr?ref=3557084b0137f04c285197c2253e097c772cf047", "patch": "@@ -22,5 +22,37 @@ LL | |         false;\n LL | |     } {}\n    | |_____^\n \n-error: aborting due to 2 previous errors\n+error: assert_eq of unit values detected. This will always succeed\n+  --> $DIR/unit_cmp.rs:24:5\n+   |\n+LL |     assert_eq!((), ());\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: debug_assert_eq of unit values detected. This will always succeed\n+  --> $DIR/unit_cmp.rs:25:5\n+   |\n+LL |     debug_assert_eq!((), ());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: assert_ne of unit values detected. This will always fail\n+  --> $DIR/unit_cmp.rs:27:5\n+   |\n+LL |     assert_ne!((), ());\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: debug_assert_ne of unit values detected. This will always fail\n+  --> $DIR/unit_cmp.rs:28:5\n+   |\n+LL |     debug_assert_ne!((), ());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "3f63624720f7553276aea8c6f721bed2c573066e", "filename": "tests/ui/unused_unit.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3557084b0137f04c285197c2253e097c772cf047/tests%2Fui%2Funused_unit.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3557084b0137f04c285197c2253e097c772cf047/tests%2Fui%2Funused_unit.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.fixed?ref=3557084b0137f04c285197c2253e097c772cf047", "patch": "@@ -34,6 +34,7 @@ fn return_unit()  {  }\n \n #[allow(clippy::needless_return)]\n #[allow(clippy::never_loop)]\n+#[allow(clippy::unit_cmp)]\n fn main() {\n     let u = Unitter;\n     assert_eq!(u.get_unit(|| {}, return_unit), u.into());"}, {"sha": "8fc072ebd69f848ffc41dd09306febf07e459a96", "filename": "tests/ui/unused_unit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3557084b0137f04c285197c2253e097c772cf047/tests%2Fui%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3557084b0137f04c285197c2253e097c772cf047/tests%2Fui%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.rs?ref=3557084b0137f04c285197c2253e097c772cf047", "patch": "@@ -35,6 +35,7 @@ fn return_unit() -> () { () }\n \n #[allow(clippy::needless_return)]\n #[allow(clippy::never_loop)]\n+#[allow(clippy::unit_cmp)]\n fn main() {\n     let u = Unitter;\n     assert_eq!(u.get_unit(|| {}, return_unit), u.into());"}, {"sha": "c489b13bf27b2438f5f12c0150d24c62a0346b4f", "filename": "tests/ui/unused_unit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3557084b0137f04c285197c2253e097c772cf047/tests%2Fui%2Funused_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3557084b0137f04c285197c2253e097c772cf047/tests%2Fui%2Funused_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.stderr?ref=3557084b0137f04c285197c2253e097c772cf047", "patch": "@@ -37,13 +37,13 @@ LL | fn return_unit() -> () { () }\n    |                          ^^ help: remove the final `()`\n \n error: unneeded `()`\n-  --> $DIR/unused_unit.rs:43:14\n+  --> $DIR/unused_unit.rs:44:14\n    |\n LL |         break();\n    |              ^^ help: remove the `()`\n \n error: unneeded `()`\n-  --> $DIR/unused_unit.rs:45:11\n+  --> $DIR/unused_unit.rs:46:11\n    |\n LL |     return();\n    |           ^^ help: remove the `()`"}]}