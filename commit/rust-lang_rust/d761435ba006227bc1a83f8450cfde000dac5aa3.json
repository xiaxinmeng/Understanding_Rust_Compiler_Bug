{"sha": "d761435ba006227bc1a83f8450cfde000dac5aa3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NjE0MzViYTAwNjIyN2JjMWE4M2Y4NDUwY2ZkZTAwMGRhYzVhYTM=", "commit": {"author": {"name": "Michal Terepeta", "email": "michal.terepeta@gmail.com", "date": "2020-01-08T18:29:18Z"}, "committer": {"name": "Michal Terepeta", "email": "michal.terepeta@gmail.com", "date": "2020-01-08T18:42:27Z"}, "message": "Remove the Default impl for SourceRoot\n\nLet's be always explicit whether we create a library (i.e., an immutable\ndependency) or a local `SourceRoot`, since it can have a large impact on\nthe validation performance in salsa. (we found it the hard way recently,\nwhere the `Default` instance made it quite tricky to spot a bug)\n\nSigned-off-by: Michal Terepeta <michal.terepeta@gmail.com>", "tree": {"sha": "ed3369dca017123ad6eddd01b504b02a66bbd1ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed3369dca017123ad6eddd01b504b02a66bbd1ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d761435ba006227bc1a83f8450cfde000dac5aa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d761435ba006227bc1a83f8450cfde000dac5aa3", "html_url": "https://github.com/rust-lang/rust/commit/d761435ba006227bc1a83f8450cfde000dac5aa3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d761435ba006227bc1a83f8450cfde000dac5aa3/comments", "author": {"login": "michalt", "id": 119711, "node_id": "MDQ6VXNlcjExOTcxMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/119711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michalt", "html_url": "https://github.com/michalt", "followers_url": "https://api.github.com/users/michalt/followers", "following_url": "https://api.github.com/users/michalt/following{/other_user}", "gists_url": "https://api.github.com/users/michalt/gists{/gist_id}", "starred_url": "https://api.github.com/users/michalt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michalt/subscriptions", "organizations_url": "https://api.github.com/users/michalt/orgs", "repos_url": "https://api.github.com/users/michalt/repos", "events_url": "https://api.github.com/users/michalt/events{/privacy}", "received_events_url": "https://api.github.com/users/michalt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michalt", "id": 119711, "node_id": "MDQ6VXNlcjExOTcxMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/119711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michalt", "html_url": "https://github.com/michalt", "followers_url": "https://api.github.com/users/michalt/followers", "following_url": "https://api.github.com/users/michalt/following{/other_user}", "gists_url": "https://api.github.com/users/michalt/gists{/gist_id}", "starred_url": "https://api.github.com/users/michalt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michalt/subscriptions", "organizations_url": "https://api.github.com/users/michalt/orgs", "repos_url": "https://api.github.com/users/michalt/repos", "events_url": "https://api.github.com/users/michalt/events{/privacy}", "received_events_url": "https://api.github.com/users/michalt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ffaad10f24ad9d3d748a347e02f170f24833ec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ffaad10f24ad9d3d748a347e02f170f24833ec3", "html_url": "https://github.com/rust-lang/rust/commit/2ffaad10f24ad9d3d748a347e02f170f24833ec3"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "30b598e9a8107cc83d9bfb80497fba41e7f89daa", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d761435ba006227bc1a83f8450cfde000dac5aa3/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d761435ba006227bc1a83f8450cfde000dac5aa3/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=d761435ba006227bc1a83f8450cfde000dac5aa3", "patch": "@@ -49,7 +49,7 @@ fn with_single_file(db: &mut dyn SourceDatabaseExt, text: &str) -> FileId {\n     let file_id = FileId(0);\n     let rel_path: RelativePathBuf = \"/main.rs\".into();\n \n-    let mut source_root = SourceRoot::default();\n+    let mut source_root = SourceRoot::new_local();\n     source_root.insert_file(rel_path.clone(), file_id);\n \n     let mut crate_graph = CrateGraph::default();\n@@ -77,7 +77,7 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n     let mut crate_deps = Vec::new();\n     let mut default_crate_root: Option<FileId> = None;\n \n-    let mut source_root = SourceRoot::default();\n+    let mut source_root = SourceRoot::new_local();\n     let mut source_root_id = WORKSPACE;\n     let mut source_root_prefix: RelativePathBuf = \"/\".into();\n     let mut file_id = FileId(0);\n@@ -87,7 +87,7 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n     for entry in fixture.iter() {\n         let meta = match parse_meta(&entry.meta) {\n             ParsedMeta::Root { path } => {\n-                let source_root = std::mem::replace(&mut source_root, SourceRoot::default());\n+                let source_root = std::mem::replace(&mut source_root, SourceRoot::new_local());\n                 db.set_source_root(source_root_id, Arc::new(source_root));\n                 source_root_id.0 += 1;\n                 source_root_prefix = path;"}, {"sha": "07269237ad33a86669cf920952de7c882dd5306c", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d761435ba006227bc1a83f8450cfde000dac5aa3/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d761435ba006227bc1a83f8450cfde000dac5aa3/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=d761435ba006227bc1a83f8450cfde000dac5aa3", "patch": "@@ -33,7 +33,7 @@ pub struct FileId(pub u32);\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub struct SourceRootId(pub u32);\n \n-#[derive(Default, Clone, Debug, PartialEq, Eq)]\n+#[derive(Clone, Debug, PartialEq, Eq)]\n pub struct SourceRoot {\n     /// Sysroot or crates.io library.\n     ///\n@@ -44,11 +44,11 @@ pub struct SourceRoot {\n }\n \n impl SourceRoot {\n-    pub fn new() -> SourceRoot {\n-        Default::default()\n+    pub fn new_local() -> SourceRoot {\n+        SourceRoot { is_library: false, files: Default::default() }\n     }\n     pub fn new_library() -> SourceRoot {\n-        SourceRoot { is_library: true, ..SourceRoot::new() }\n+        SourceRoot { is_library: true, files: Default::default() }\n     }\n     pub fn insert_file(&mut self, path: RelativePathBuf, file_id: FileId) {\n         self.files.insert(path, file_id);"}, {"sha": "b0aa2c8e029edaaa6aa4c26afe4abf1a7ef89de0", "filename": "crates/ra_ide/src/change.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d761435ba006227bc1a83f8450cfde000dac5aa3/crates%2Fra_ide%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d761435ba006227bc1a83f8450cfde000dac5aa3/crates%2Fra_ide%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fchange.rs?ref=d761435ba006227bc1a83f8450cfde000dac5aa3", "patch": "@@ -176,7 +176,8 @@ impl RootDatabase {\n         if !change.new_roots.is_empty() {\n             let mut local_roots = Vec::clone(&self.local_roots());\n             for (root_id, is_local) in change.new_roots {\n-                let root = if is_local { SourceRoot::new() } else { SourceRoot::new_library() };\n+                let root =\n+                    if is_local { SourceRoot::new_local() } else { SourceRoot::new_library() };\n                 let durability = durability(&root);\n                 self.set_source_root_with_durability(root_id, Arc::new(root), durability);\n                 if is_local {"}]}