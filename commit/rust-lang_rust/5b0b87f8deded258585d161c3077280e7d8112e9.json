{"sha": "5b0b87f8deded258585d161c3077280e7d8112e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMGI4N2Y4ZGVkZWQyNTg1ODVkMTYxYzMwNzcyODBlN2Q4MTEyZTk=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-16T22:19:14Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-16T22:19:14Z"}, "message": "Provide assist when cursor is immediately outside impl item block", "tree": {"sha": "af2c6431ba49d31841b28652e828ffeed38d40a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af2c6431ba49d31841b28652e828ffeed38d40a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b0b87f8deded258585d161c3077280e7d8112e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0b87f8deded258585d161c3077280e7d8112e9", "html_url": "https://github.com/rust-lang/rust/commit/5b0b87f8deded258585d161c3077280e7d8112e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b0b87f8deded258585d161c3077280e7d8112e9/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f36f47dab59886f2f82252f427c4a3d3ee2c83b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f36f47dab59886f2f82252f427c4a3d3ee2c83b", "html_url": "https://github.com/rust-lang/rust/commit/2f36f47dab59886f2f82252f427c4a3d3ee2c83b"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "96dde3c4b04c1c20a0b3535afceedf856c433b3c", "filename": "crates/ra_assists/src/add_missing_impl_members.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5b0b87f8deded258585d161c3077280e7d8112e9/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0b87f8deded258585d161c3077280e7d8112e9/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs?ref=5b0b87f8deded258585d161c3077280e7d8112e9", "patch": "@@ -11,7 +11,7 @@ use itertools::Itertools;\n \n /// Given an `ast::ImplBlock`, resolves the target trait (the one being\n /// implemented) to a `ast::TraitDef`.\n-pub(crate) fn resolve_target_trait_def(\n+fn resolve_target_trait_def(\n     db: &impl HirDatabase,\n     resolver: &Resolver,\n     impl_block: &ast::ImplBlock,\n@@ -25,7 +25,7 @@ pub(crate) fn resolve_target_trait_def(\n     }\n }\n \n-pub(crate) fn build_func_body(def: &ast::FnDef) -> String {\n+fn build_func_body(def: &ast::FnDef) -> String {\n     let mut buf = String::new();\n \n     for child in def.syntax().children() {\n@@ -40,17 +40,12 @@ pub(crate) fn build_func_body(def: &ast::FnDef) -> String {\n }\n \n pub(crate) fn add_missing_impl_members(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let node = ctx.covering_node();\n-    let impl_node = node.ancestors().find_map(ast::ImplBlock::cast)?;\n+    let impl_node = ctx.node_at_offset::<ast::ImplBlock>()?;\n     let impl_item_list = impl_node.item_list()?;\n-    // Don't offer the assist when cursor is at the end, outside the block itself.\n-    let cursor_range = TextRange::from_to(node.range().end(), node.range().end());\n-    if node.range().end() == impl_node.syntax().range().end() {\n-        return None;\n-    }\n \n     let trait_def = {\n-        let position = FilePosition { file_id: ctx.frange.file_id, offset: cursor_range.end() };\n+        let file_id = ctx.frange.file_id;\n+        let position = FilePosition { file_id, offset: impl_node.syntax().range().start() };\n         let resolver = hir::source_binder::resolver_for_position(ctx.db, position);\n \n         resolve_target_trait_def(ctx.db, &resolver, impl_node)?\n@@ -94,10 +89,13 @@ pub(crate) fn add_missing_impl_members(mut ctx: AssistCtx<impl HirDatabase>) ->\n         };\n \n         let changed_range = {\n-            let last_whitespace = impl_item_list.syntax().children();\n-            let last_whitespace = last_whitespace.filter_map(ast::Whitespace::cast).last();\n+            let children = impl_item_list.syntax().children();\n+            let last_whitespace = children.filter_map(ast::Whitespace::cast).last();\n \n-            last_whitespace.map(|w| w.syntax().range()).unwrap_or(cursor_range)\n+            last_whitespace.map(|w| w.syntax().range()).unwrap_or_else(|| {\n+                let in_brackets = impl_item_list.syntax().range().end() - TextUnit::of_str(\"}\");\n+                TextRange::from_to(in_brackets, in_brackets)\n+            })\n         };\n \n         let func_bodies = format!(\"\\n{}\", missing_fns.into_iter().map(build_func_body).join(\"\\n\"));\n@@ -207,12 +205,18 @@ impl Foo for S {\n \n     #[test]\n     fn test_cursor_after_empty_impl_block() {\n-        check_assist_not_applicable(\n+        check_assist(\n             add_missing_impl_members,\n             \"\n trait Foo { fn foo(&self); }\n struct S;\n impl Foo for S {}<|>\",\n+            \"\n+trait Foo { fn foo(&self); }\n+struct S;\n+impl Foo for S {\n+    fn foo(&self) { unimplemented!() }<|>\n+}\",\n         )\n     }\n "}]}