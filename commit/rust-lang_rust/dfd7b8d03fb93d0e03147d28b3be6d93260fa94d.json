{"sha": "dfd7b8d03fb93d0e03147d28b3be6d93260fa94d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZDdiOGQwM2ZiOTNkMGUwMzE0N2QyOGIzYmU2ZDkzMjYwZmE5NGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-10T21:42:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-10T21:42:40Z"}, "message": "Auto merge of #85953 - inquisitivecrystal:weak-linkat-in-fs-hardlink, r=joshtriplett\n\nFix linker error\n\nCurrently, `fs::hard_link` determines whether platforms have `linkat` based on the OS, and uses `link` if they don't. However, this heuristic does not work well if a platform provides `linkat` on newer versions but not on older ones. On old MacOS, this currently causes a linking error.\n\nThis commit fixes `fs::hard_link` by telling it to use `weak!` on macOS. This means that, on  that operating system, we now check for `linkat` at runtime and use `link` if it is not available.\n\nFixes #80804.\n\n`@rustbot` label T-libs-impl", "tree": {"sha": "4a4310069f11ed4d0f2fdd3aadaf02fbc67a5fb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a4310069f11ed4d0f2fdd3aadaf02fbc67a5fb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d", "html_url": "https://github.com/rust-lang/rust/commit/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "432e145bd5a974c5b6f4dd9b352891bd7502b69d", "url": "https://api.github.com/repos/rust-lang/rust/commits/432e145bd5a974c5b6f4dd9b352891bd7502b69d", "html_url": "https://github.com/rust-lang/rust/commit/432e145bd5a974c5b6f4dd9b352891bd7502b69d"}, {"sha": "5999a5fbdc91ac07d4103095ed532d8cd4d3443b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5999a5fbdc91ac07d4103095ed532d8cd4d3443b", "html_url": "https://github.com/rust-lang/rust/commit/5999a5fbdc91ac07d4103095ed532d8cd4d3443b"}], "stats": {"total": 108, "additions": 91, "deletions": 17}, "files": [{"sha": "fb928ea55985f8b599914a7723882f8136ba18a1", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=dfd7b8d03fb93d0e03147d28b3be6d93260fa94d", "patch": "@@ -1736,8 +1736,11 @@ pub fn copy<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<u64> {\n ///\n /// # Platform-specific behavior\n ///\n-/// This function currently corresponds to the `linkat` function with no flags\n-/// on Unix and the `CreateHardLink` function on Windows.\n+/// This function currently corresponds the `CreateHardLink` function on Windows.\n+/// On most Unix systems, it corresponds to the `linkat` function with no flags.\n+/// On Android, VxWorks, and Redox, it instead corresponds to the `link` function.\n+/// On MacOS, it uses the `linkat` function if it is available, but on very old\n+/// systems where `linkat` is not available, `link` is selected at runtime instead.\n /// Note that, this [may change in the future][changes].\n ///\n /// [changes]: io#platform-specific-behavior"}, {"sha": "080b4b5d87f266fb77b0027465f93854012a57c9", "filename": "library/std/src/fs/tests.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs?ref=dfd7b8d03fb93d0e03147d28b3be6d93260fa94d", "patch": "@@ -19,6 +19,10 @@ use crate::os::unix::fs::symlink as symlink_junction;\n use crate::os::windows::fs::{symlink_dir, symlink_file};\n #[cfg(windows)]\n use crate::sys::fs::symlink_junction;\n+#[cfg(target_os = \"macos\")]\n+use crate::sys::weak::weak;\n+#[cfg(target_os = \"macos\")]\n+use libc::{c_char, c_int};\n \n macro_rules! check {\n     ($e:expr) => {\n@@ -79,6 +83,17 @@ pub fn got_symlink_permission(tmpdir: &TempDir) -> bool {\n     }\n }\n \n+#[cfg(target_os = \"macos\")]\n+fn able_to_not_follow_symlinks_while_hard_linking() -> bool {\n+    weak!(fn linkat(c_int, *const c_char, c_int, *const c_char, c_int) -> c_int);\n+    linkat.get().is_some()\n+}\n+\n+#[cfg(not(target_os = \"macos\"))]\n+fn able_to_not_follow_symlinks_while_hard_linking() -> bool {\n+    return true;\n+}\n+\n #[test]\n fn file_test_io_smoke_test() {\n     let message = \"it's alright. have a good time\";\n@@ -1347,6 +1362,9 @@ fn symlink_hard_link() {\n     if !got_symlink_permission(&tmpdir) {\n         return;\n     };\n+    if !able_to_not_follow_symlinks_while_hard_linking() {\n+        return;\n+    }\n \n     // Create \"file\", a file.\n     check!(fs::File::create(tmpdir.join(\"file\")));"}, {"sha": "6a46525f682c4a69860c8f1232112519e291e708", "filename": "library/std/src/sys/unix/android.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fandroid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fandroid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fandroid.rs?ref=dfd7b8d03fb93d0e03147d28b3be6d93260fa94d", "patch": "@@ -21,7 +21,7 @@\n use libc::{c_int, c_void, sighandler_t, size_t, ssize_t};\n use libc::{ftruncate, pread, pwrite};\n \n-use super::{cvt, cvt_r};\n+use super::{cvt, cvt_r, weak::weak};\n use crate::io;\n \n // The `log2` and `log2f` functions apparently appeared in android-18, or at"}, {"sha": "5c8c94971c33c0de8d4ad71d9f30910528eac37c", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 39, "deletions": 11, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=dfd7b8d03fb93d0e03147d28b3be6d93260fa94d", "patch": "@@ -12,8 +12,23 @@ use crate::sys::time::SystemTime;\n use crate::sys::{cvt, cvt_r};\n use crate::sys_common::{AsInner, FromInner};\n \n+#[cfg(any(\n+    all(target_os = \"linux\", target_env = \"gnu\"),\n+    target_os = \"macos\",\n+    target_os = \"ios\",\n+))]\n+use crate::sys::weak::syscall;\n+#[cfg(target_os = \"macos\")]\n+use crate::sys::weak::weak;\n+\n use libc::{c_int, mode_t};\n \n+#[cfg(any(\n+    target_os = \"macos\",\n+    target_os = \"ios\",\n+    all(target_os = \"linux\", target_env = \"gnu\")\n+))]\n+use libc::c_char;\n #[cfg(any(target_os = \"linux\", target_os = \"emscripten\", target_os = \"android\"))]\n use libc::dirfd;\n #[cfg(any(target_os = \"linux\", target_os = \"emscripten\"))]\n@@ -92,7 +107,7 @@ cfg_has_statx! {{\n     // Default `stat64` contains no creation time.\n     unsafe fn try_statx(\n         fd: c_int,\n-        path: *const libc::c_char,\n+        path: *const c_char,\n         flags: i32,\n         mask: u32,\n     ) -> Option<io::Result<FileAttr>> {\n@@ -107,7 +122,7 @@ cfg_has_statx! {{\n         syscall! {\n             fn statx(\n                 fd: c_int,\n-                pathname: *const libc::c_char,\n+                pathname: *const c_char,\n                 flags: c_int,\n                 mask: libc::c_uint,\n                 statxbuf: *mut libc::statx\n@@ -756,7 +771,7 @@ impl File {\n         cfg_has_statx! {\n             if let Some(ret) = unsafe { try_statx(\n                 fd,\n-                b\"\\0\" as *const _ as *const libc::c_char,\n+                b\"\\0\" as *const _ as *const c_char,\n                 libc::AT_EMPTY_PATH | libc::AT_STATX_SYNC_AS_STAT,\n                 libc::STATX_ALL,\n             ) } {\n@@ -1087,15 +1102,28 @@ pub fn link(original: &Path, link: &Path) -> io::Result<()> {\n     let link = cstr(link)?;\n     cfg_if::cfg_if! {\n         if #[cfg(any(target_os = \"vxworks\", target_os = \"redox\", target_os = \"android\"))] {\n-            // VxWorks, Redox, and old versions of Android lack `linkat`, so use\n-            // `link` instead. POSIX leaves it implementation-defined whether\n-            // `link` follows symlinks, so rely on the `symlink_hard_link` test\n-            // in library/std/src/fs/tests.rs to check the behavior.\n+            // VxWorks and Redox lack `linkat`, so use `link` instead. POSIX leaves\n+            // it implementation-defined whether `link` follows symlinks, so rely on the\n+            // `symlink_hard_link` test in library/std/src/fs/tests.rs to check the behavior.\n+            // Android has `linkat` on newer versions, but we happen to know `link`\n+            // always has the correct behavior, so it's here as well.\n             cvt(unsafe { libc::link(original.as_ptr(), link.as_ptr()) })?;\n+        } else if #[cfg(target_os = \"macos\")] {\n+            // On MacOS, older versions (<=10.9) lack support for linkat while newer\n+            // versions have it. We want to use linkat if it is available, so we use weak!\n+            // to check. `linkat` is preferable to `link` ecause it gives us a flag to\n+            // specify how symlinks should be handled. We pass 0 as the flags argument,\n+            // meaning it shouldn't follow symlinks.\n+            weak!(fn linkat(c_int, *const c_char, c_int, *const c_char, c_int) -> c_int);\n+\n+            if let Some(f) = linkat.get() {\n+                cvt(unsafe { f(libc::AT_FDCWD, original.as_ptr(), libc::AT_FDCWD, link.as_ptr(), 0) })?;\n+            } else {\n+                cvt(unsafe { libc::link(original.as_ptr(), link.as_ptr()) })?;\n+            };\n         } else {\n-            // Use `linkat` with `AT_FDCWD` instead of `link` as `linkat` gives\n-            // us a flag to specify how symlinks should be handled. Pass 0 as\n-            // the flags argument, meaning don't follow symlinks.\n+            // Where we can, use `linkat` instead of `link`; see the comment above\n+            // this one for details on why.\n             cvt(unsafe { libc::linkat(libc::AT_FDCWD, original.as_ptr(), libc::AT_FDCWD, link.as_ptr(), 0) })?;\n         }\n     }\n@@ -1278,7 +1306,7 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n         fn fclonefileat(\n             srcfd: libc::c_int,\n             dst_dirfd: libc::c_int,\n-            dst: *const libc::c_char,\n+            dst: *const c_char,\n             flags: libc::c_int\n         ) -> libc::c_int\n     }"}, {"sha": "a6b43229ba6b7dd4b0aa7e3b40fb985a3c1f4901", "filename": "library/std/src/sys/unix/kernel_copy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs?ref=dfd7b8d03fb93d0e03147d28b3be6d93260fa94d", "patch": "@@ -61,6 +61,7 @@ use crate::process::{ChildStderr, ChildStdin, ChildStdout};\n use crate::ptr;\n use crate::sync::atomic::{AtomicBool, AtomicU8, Ordering};\n use crate::sys::cvt;\n+use crate::sys::weak::syscall;\n use libc::{EBADF, EINVAL, ENOSYS, EOPNOTSUPP, EOVERFLOW, EPERM, EXDEV};\n \n #[cfg(test)]"}, {"sha": "d3c874edf2dc472c9cb9edae7e0a716cec95a3e4", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=dfd7b8d03fb93d0e03147d28b3be6d93260fa94d", "patch": "@@ -23,6 +23,9 @@ use crate::sys::memchr;\n use crate::sys_common::rwlock::{StaticRWLock, StaticRWLockReadGuard};\n use crate::vec;\n \n+#[cfg(all(target_env = \"gnu\", not(target_os = \"vxworks\")))]\n+use crate::sys::weak::weak;\n+\n use libc::{c_char, c_int, c_void};\n \n const TMPBUF_SZ: usize = 128;"}, {"sha": "c888dd0d87d8e296b76601ec6aa043ea2ef73520", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=dfd7b8d03fb93d0e03147d28b3be6d93260fa94d", "patch": "@@ -9,6 +9,14 @@ use crate::sys;\n use crate::sys::cvt;\n use crate::sys::process::process_common::*;\n \n+#[cfg(any(\n+    target_os = \"macos\",\n+    target_os = \"freebsd\",\n+    all(target_os = \"linux\", target_env = \"gnu\"),\n+    all(target_os = \"linux\", target_env = \"musl\"),\n+))]\n+use crate::sys::weak::weak;\n+\n #[cfg(target_os = \"vxworks\")]\n use libc::RTP_ID as pid_t;\n "}, {"sha": "32895001a65bae83dd119e5735dced1dd55c084e", "filename": "library/std/src/sys/unix/rand.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs?ref=dfd7b8d03fb93d0e03147d28b3be6d93260fa94d", "patch": "@@ -25,6 +25,9 @@ mod imp {\n     use crate::fs::File;\n     use crate::io::Read;\n \n+    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+    use crate::sys::weak::syscall;\n+\n     #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     fn getrandom(buf: &mut [u8]) -> libc::ssize_t {\n         // A weak symbol allows interposition, e.g. for perf measurements that want to\n@@ -108,6 +111,7 @@ mod imp {\n     use crate::fs::File;\n     use crate::io::Read;\n     use crate::sys::os::errno;\n+    use crate::sys::weak::weak;\n     use libc::{c_int, c_void, size_t};\n \n     fn getentropy_fill_bytes(v: &mut [u8]) -> bool {"}, {"sha": "879d716052497f626ce5cb41c946251300ab70fa", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=dfd7b8d03fb93d0e03147d28b3be6d93260fa94d", "patch": "@@ -7,6 +7,8 @@ use crate::ptr;\n use crate::sys::{os, stack_overflow};\n use crate::time::Duration;\n \n+#[cfg(any(target_os = \"linux\", target_os = \"solaris\", target_os = \"illumos\"))]\n+use crate::sys::weak::weak;\n #[cfg(not(any(target_os = \"l4re\", target_os = \"vxworks\")))]\n pub const DEFAULT_MIN_STACK_SIZE: usize = 2 * 1024 * 1024;\n #[cfg(target_os = \"l4re\")]"}, {"sha": "cad8be6d289ee166dc111013d85521d38b42de20", "filename": "library/std/src/sys/unix/weak.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd7b8d03fb93d0e03147d28b3be6d93260fa94d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs?ref=dfd7b8d03fb93d0e03147d28b3be6d93260fa94d", "patch": "@@ -26,8 +26,11 @@ use crate::marker;\n use crate::mem;\n use crate::sync::atomic::{self, AtomicUsize, Ordering};\n \n-macro_rules! weak {\n+// Temporary null documentation to work around #57569 until the fix is beta\n+#[cfg_attr(bootstrap, doc = \"\")]\n+pub(crate) macro weak {\n     (fn $name:ident($($t:ty),*) -> $ret:ty) => (\n+        #[allow(non_upper_case_globals)]\n         static $name: crate::sys::weak::Weak<unsafe extern \"C\" fn($($t),*) -> $ret> =\n             crate::sys::weak::Weak::new(concat!(stringify!($name), '\\0'));\n     )\n@@ -100,8 +103,10 @@ unsafe fn fetch(name: &str) -> usize {\n     libc::dlsym(libc::RTLD_DEFAULT, name.as_ptr()) as usize\n }\n \n+// Temporary null documentation to work around #57569 until the fix is beta\n+#[cfg_attr(bootstrap, doc = \"\")]\n #[cfg(not(any(target_os = \"linux\", target_os = \"android\")))]\n-macro_rules! syscall {\n+pub(crate) macro syscall {\n     (fn $name:ident($($arg_name:ident: $t:ty),*) -> $ret:ty) => (\n         unsafe fn $name($($arg_name: $t),*) -> $ret {\n             use super::os;\n@@ -118,10 +123,12 @@ macro_rules! syscall {\n     )\n }\n \n+#[cfg_attr(bootstrap, doc = \"\")]\n #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-macro_rules! syscall {\n+pub(crate) macro syscall {\n     (fn $name:ident($($arg_name:ident: $t:ty),*) -> $ret:ty) => (\n         unsafe fn $name($($arg_name:$t),*) -> $ret {\n+            use weak;\n             // This looks like a hack, but concat_idents only accepts idents\n             // (not paths).\n             use libc::*;"}]}