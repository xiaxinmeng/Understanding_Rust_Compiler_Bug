{"sha": "a5cc3a0557b2deb1b1e11d1a1fd8f60eb6203279", "node_id": "C_kwDOAAsO6NoAKGE1Y2MzYTA1NTdiMmRlYjFiMWUxMWQxYTFmZDhmNjBlYjYyMDMyNzk", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-08-15T22:06:06Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-08-15T23:54:43Z"}, "message": "Rename Machine memory hooks to suggest when they run", "tree": {"sha": "2254f8c71e83318ae991b19fdd6a88789715b895", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2254f8c71e83318ae991b19fdd6a88789715b895"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5cc3a0557b2deb1b1e11d1a1fd8f60eb6203279", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5cc3a0557b2deb1b1e11d1a1fd8f60eb6203279", "html_url": "https://github.com/rust-lang/rust/commit/a5cc3a0557b2deb1b1e11d1a1fd8f60eb6203279", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5cc3a0557b2deb1b1e11d1a1fd8f60eb6203279/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f22819bcce4abaff7d1246a56eec493418f9f4ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/f22819bcce4abaff7d1246a56eec493418f9f4ee", "html_url": "https://github.com/rust-lang/rust/commit/f22819bcce4abaff7d1246a56eec493418f9f4ee"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "dedbcf43755cb118af1d5d78a2b5d97199707fb1", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5cc3a0557b2deb1b1e11d1a1fd8f60eb6203279/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cc3a0557b2deb1b1e11d1a1fd8f60eb6203279/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=a5cc3a0557b2deb1b1e11d1a1fd8f60eb6203279", "patch": "@@ -343,7 +343,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// operations take `&self`. Use a `RefCell` in `AllocExtra` if you\n     /// need to mutate.\n     #[inline(always)]\n-    fn memory_read(\n+    fn before_memory_read(\n         _tcx: TyCtxt<'tcx>,\n         _machine: &Self,\n         _alloc_extra: &Self::AllocExtra,\n@@ -355,7 +355,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n \n     /// Hook for performing extra checks on a memory write access.\n     #[inline(always)]\n-    fn memory_written(\n+    fn before_memory_write(\n         _tcx: TyCtxt<'tcx>,\n         _machine: &mut Self,\n         _alloc_extra: &mut Self::AllocExtra,\n@@ -367,7 +367,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n \n     /// Hook for performing extra operations on a memory deallocation.\n     #[inline(always)]\n-    fn memory_deallocated(\n+    fn before_memory_deallocation(\n         _tcx: TyCtxt<'tcx>,\n         _machine: &mut Self,\n         _alloc_extra: &mut Self::AllocExtra,"}, {"sha": "98e0c8cd78ea4d3fb2ad8a33fee82c5b6ee2d7b0", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a5cc3a0557b2deb1b1e11d1a1fd8f60eb6203279/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cc3a0557b2deb1b1e11d1a1fd8f60eb6203279/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=a5cc3a0557b2deb1b1e11d1a1fd8f60eb6203279", "patch": "@@ -327,7 +327,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         // Let the machine take some extra action\n         let size = alloc.size();\n-        M::memory_deallocated(\n+        M::before_memory_deallocation(\n             *self.tcx,\n             &mut self.machine,\n             &mut alloc.extra,\n@@ -575,7 +575,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         )?;\n         if let Some((alloc_id, offset, prov, alloc)) = ptr_and_alloc {\n             let range = alloc_range(offset, size);\n-            M::memory_read(*self.tcx, &self.machine, &alloc.extra, (alloc_id, prov), range)?;\n+            M::before_memory_read(*self.tcx, &self.machine, &alloc.extra, (alloc_id, prov), range)?;\n             Ok(Some(AllocRef { alloc, range, tcx: *self.tcx, alloc_id }))\n         } else {\n             // Even in this branch we have to be sure that we actually access the allocation, in\n@@ -641,7 +641,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // We cannot call `get_raw_mut` inside `check_and_deref_ptr` as that would duplicate `&mut self`.\n             let (alloc, machine) = self.get_alloc_raw_mut(alloc_id)?;\n             let range = alloc_range(offset, size);\n-            M::memory_written(tcx, machine, &mut alloc.extra, (alloc_id, prov), range)?;\n+            M::before_memory_write(tcx, machine, &mut alloc.extra, (alloc_id, prov), range)?;\n             Ok(Some(AllocRefMut { alloc, range, tcx, alloc_id }))\n         } else {\n             Ok(None)\n@@ -1078,7 +1078,13 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         };\n         let src_alloc = self.get_alloc_raw(src_alloc_id)?;\n         let src_range = alloc_range(src_offset, size);\n-        M::memory_read(*tcx, &self.machine, &src_alloc.extra, (src_alloc_id, src_prov), src_range)?;\n+        M::before_memory_read(\n+            *tcx,\n+            &self.machine,\n+            &src_alloc.extra,\n+            (src_alloc_id, src_prov),\n+            src_range,\n+        )?;\n         // We need the `dest` ptr for the next operation, so we get it now.\n         // We already did the source checks and called the hooks so we are good to return early.\n         let Some((dest_alloc_id, dest_offset, dest_prov)) = dest_parts else {\n@@ -1103,7 +1109,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Destination alloc preparations and access hooks.\n         let (dest_alloc, extra) = self.get_alloc_raw_mut(dest_alloc_id)?;\n         let dest_range = alloc_range(dest_offset, size * num_copies);\n-        M::memory_written(\n+        M::before_memory_write(\n             *tcx,\n             extra,\n             &mut dest_alloc.extra,"}]}