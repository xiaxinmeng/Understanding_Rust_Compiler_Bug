{"sha": "41d5a77ee8fc8dc62a8264b992dfd97dae3be59d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxZDVhNzdlZThmYzhkYzYyYTgyNjRiOTkyZGZkOTdkYWUzYmU1OWQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-18T11:56:38Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-18T11:56:38Z"}, "message": "Miri: mplace_access_checked: offer option to force different alignment on place", "tree": {"sha": "413a835fabf6cd4746c178ec22672942a57c54cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/413a835fabf6cd4746c178ec22672942a57c54cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41d5a77ee8fc8dc62a8264b992dfd97dae3be59d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41d5a77ee8fc8dc62a8264b992dfd97dae3be59d", "html_url": "https://github.com/rust-lang/rust/commit/41d5a77ee8fc8dc62a8264b992dfd97dae3be59d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41d5a77ee8fc8dc62a8264b992dfd97dae3be59d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d67f576b56e8fc98a31123e5963f8d00e40611c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d67f576b56e8fc98a31123e5963f8d00e40611c", "html_url": "https://github.com/rust-lang/rust/commit/8d67f576b56e8fc98a31123e5963f8d00e40611c"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "24e6833c2b43705e4718ba0cf137289a94944cc0", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41d5a77ee8fc8dc62a8264b992dfd97dae3be59d/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41d5a77ee8fc8dc62a8264b992dfd97dae3be59d/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=41d5a77ee8fc8dc62a8264b992dfd97dae3be59d", "patch": "@@ -333,7 +333,7 @@ where\n         let val = self.read_immediate(src)?;\n         trace!(\"deref to {} on {:?}\", val.layout.ty, *val);\n         let place = self.ref_to_mplace(val)?;\n-        self.mplace_access_checked(place)\n+        self.mplace_access_checked(place, None)\n     }\n \n     /// Check if the given place is good for memory access with the given\n@@ -361,12 +361,14 @@ where\n     pub fn mplace_access_checked(\n         &self,\n         mut place: MPlaceTy<'tcx, M::PointerTag>,\n+        force_align: Option<Align>,\n     ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n         let (size, align) = self\n             .size_and_align_of_mplace(place)?\n             .unwrap_or((place.layout.size, place.layout.align.abi));\n         assert!(place.mplace.align <= align, \"dynamic alignment less strict than static one?\");\n-        place.mplace.align = align; // maximally strict checking\n+        // Check (stricter) dynamic alignment, unless forced otherwise.\n+        place.mplace.align = force_align.unwrap_or(align);\n         // When dereferencing a pointer, it must be non-NULL, aligned, and live.\n         if let Some(ptr) = self.check_mplace_access(place, Some(size))? {\n             place.mplace.ptr = ptr.into();"}]}