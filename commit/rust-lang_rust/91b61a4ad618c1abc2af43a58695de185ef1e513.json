{"sha": "91b61a4ad618c1abc2af43a58695de185ef1e513", "node_id": "C_kwDOAAsO6NoAKDkxYjYxYTRhZDYxOGMxYWJjMmFmNDNhNTg2OTVkZTE4NWVmMWU1MTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-25T07:05:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-25T07:05:50Z"}, "message": "Auto merge of #110389 - mazong1123:add-shortcut-for-grisu3, r=Mark-Simulacrum\n\nAdd shortcut for Grisu3 algorithm.\n\nWhile Grisu3 is way more faster for most numbers compare to Dragon4, the fall back to Dragon4 procedure for certain numbers could cause some performance regressions compare to use Dragon4 directly. Mitigating the regression caused by falling back is important for a largely used core library.\n\nIn Grisu3 algorithm implementation, there's a shortcut to jump out earlier when the fractional or integrals cannot meet the requirement of requested digits. This could significantly improve the performance of converting floating number to string as it falls back even without starting trying the algorithm.\n\nThe original idea is from the [.NET implementation](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Number.Grisu3.cs#L602-L615) and the code was originally added in [this PR](https://github.com/dotnet/coreclr/pull/14646#issuecomment-350942050). This shortcut has been shipped long time ago and has been proved working.\n\nFix #110129", "tree": {"sha": "fcd298dc7aa39c1dbf800607af4c67d28dbd1a5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcd298dc7aa39c1dbf800607af4c67d28dbd1a5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91b61a4ad618c1abc2af43a58695de185ef1e513", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91b61a4ad618c1abc2af43a58695de185ef1e513", "html_url": "https://github.com/rust-lang/rust/commit/91b61a4ad618c1abc2af43a58695de185ef1e513", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91b61a4ad618c1abc2af43a58695de185ef1e513/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed3ddb375bf18099a885605efba94dc1e50379d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed3ddb375bf18099a885605efba94dc1e50379d7", "html_url": "https://github.com/rust-lang/rust/commit/ed3ddb375bf18099a885605efba94dc1e50379d7"}, {"sha": "b0a85d614d5cc1918bc9eef9abbf78d5c585cbef", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0a85d614d5cc1918bc9eef9abbf78d5c585cbef", "html_url": "https://github.com/rust-lang/rust/commit/b0a85d614d5cc1918bc9eef9abbf78d5c585cbef"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "17d6b474ad26e5912b4cba64abe207661f85f698", "filename": "library/core/benches/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/91b61a4ad618c1abc2af43a58695de185ef1e513/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b61a4ad618c1abc2af43a58695de185ef1e513/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=91b61a4ad618c1abc2af43a58695de185ef1e513", "patch": "@@ -81,3 +81,30 @@ fn bench_big_exact_inf(b: &mut Bencher) {\n         format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }\n+\n+#[bench]\n+fn bench_one_exact_inf(b: &mut Bencher) {\n+    let decoded = decode_finite(1.0);\n+    let mut buf = [MaybeUninit::new(0); 1024];\n+    b.iter(|| {\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n+    });\n+}\n+\n+#[bench]\n+fn bench_trailing_zero_exact_inf(b: &mut Bencher) {\n+    let decoded = decode_finite(250.000000000000000000000000);\n+    let mut buf = [MaybeUninit::new(0); 1024];\n+    b.iter(|| {\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n+    });\n+}\n+\n+#[bench]\n+fn bench_halfway_point_exact_inf(b: &mut Bencher) {\n+    let decoded = decode_finite(1.00000000000000011102230246251565404236316680908203125);\n+    let mut buf = [MaybeUninit::new(0); 1024];\n+    b.iter(|| {\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n+    });\n+}"}, {"sha": "b9f0d114c6a14d2457a2a2c665513bc6d26ae71e", "filename": "library/core/src/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/91b61a4ad618c1abc2af43a58695de185ef1e513/library%2Fcore%2Fsrc%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b61a4ad618c1abc2af43a58695de185ef1e513/library%2Fcore%2Fsrc%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=91b61a4ad618c1abc2af43a58695de185ef1e513", "patch": "@@ -487,6 +487,22 @@ pub fn format_exact_opt<'a>(\n     let vint = (v.f >> e) as u32;\n     let vfrac = v.f & ((1 << e) - 1);\n \n+    let requested_digits = buf.len();\n+\n+    const POW10_UP_TO_9: [u32; 10] =\n+        [1, 10, 100, 1000, 10_000, 100_000, 1_000_000, 10_000_000, 100_000_000, 1_000_000_000];\n+\n+    // We deviate from the original algorithm here and do some early checks to determine if we can satisfy requested_digits.\n+    // If we determine that we can't, we exit early and avoid most of the heavy lifting that the algorithm otherwise does.\n+    //\n+    // When vfrac is zero, we can easily determine if vint can satisfy requested digits:\n+    //      If requested_digits >= 11, vint is not able to exhaust the count by itself since 10^(11 -1) > u32 max value >= vint.\n+    //      If vint < 10^(requested_digits - 1), vint cannot exhaust the count.\n+    //      Otherwise, vint might be able to exhaust the count and we need to execute the rest of the code.\n+    if (vfrac == 0) && ((requested_digits >= 11) || (vint < POW10_UP_TO_9[requested_digits - 1])) {\n+        return None;\n+    }\n+\n     // both old `v` and new `v` (scaled by `10^-k`) has an error of < 1 ulp (Theorem 5.1).\n     // as we don't know the error is positive or negative, we use two approximations\n     // spaced equally and have the maximal error of 2 ulps (same to the shortest case)."}]}