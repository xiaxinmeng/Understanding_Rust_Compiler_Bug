{"sha": "7eb8642aed3cd12a836c75aff25cbaf2dfc35017", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYjg2NDJhZWQzY2QxMmE4MzZjNzVhZmYyNWNiYWYyZGZjMzUwMTc=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-23T03:36:29Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-23T03:36:29Z"}, "message": "drop is_not_empty from TreeSet/TreeMap", "tree": {"sha": "ba17f60035267029e2549026963523399153fcaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba17f60035267029e2549026963523399153fcaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eb8642aed3cd12a836c75aff25cbaf2dfc35017", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb8642aed3cd12a836c75aff25cbaf2dfc35017", "html_url": "https://github.com/rust-lang/rust/commit/7eb8642aed3cd12a836c75aff25cbaf2dfc35017", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eb8642aed3cd12a836c75aff25cbaf2dfc35017/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14d721388b1317eb85dd79210c03e303f9ab95aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/14d721388b1317eb85dd79210c03e303f9ab95aa", "html_url": "https://github.com/rust-lang/rust/commit/14d721388b1317eb85dd79210c03e303f9ab95aa"}], "stats": {"total": 8, "additions": 1, "deletions": 7}, "files": [{"sha": "fa9f8dc805e49971990c31f9e3f263c28e50a7e9", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7eb8642aed3cd12a836c75aff25cbaf2dfc35017/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb8642aed3cd12a836c75aff25cbaf2dfc35017/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=7eb8642aed3cd12a836c75aff25cbaf2dfc35017", "patch": "@@ -120,8 +120,6 @@ impl <K: Ord, V> TreeMap<K, V> {\n     /// Create an empty TreeMap\n     static pure fn new() -> TreeMap<K, V> { TreeMap{root: None, length: 0} }\n \n-    /// Return true if the map contains some elements\n-    pure fn is_not_empty(&self) -> bool { self.root.is_some() }\n \n     /// Visit all key-value pairs in reverse order\n     pure fn each_reverse(&self, f: fn(&K, &V) -> bool) {\n@@ -176,7 +174,7 @@ impl <K: Ord, V> TreeMapIterator<K, V> {\n     /// tuple with a reference to the key and value. If there are no\n     /// more nodes, return `None`.\n     fn next(&mut self) -> Option<(&self/K, &self/V)> {\n-        while self.stack.is_not_empty() || self.node.is_some() {\n+        while !self.stack.is_empty() || self.node.is_some() {\n             match *self.node {\n               Some(ref x) => {\n                 self.stack.push(x);\n@@ -240,9 +238,6 @@ impl <T: Ord> TreeSet<T> {\n     /// Create an empty TreeSet\n     static pure fn new() -> TreeSet<T> { TreeSet{map: TreeMap::new()} }\n \n-    /// Return true if the set contains some elements\n-    pure fn is_not_empty(&self) -> bool { self.map.is_not_empty() }\n-\n     /// Visit all values in reverse order\n     pure fn each_reverse(&self, f: fn(&T) -> bool) {\n         self.map.each_key_reverse(f)\n@@ -675,7 +670,6 @@ mod test_treemap {\n \n     fn check_equal<K: Eq Ord, V: Eq>(ctrl: &[(K, V)], map: &TreeMap<K, V>) {\n         assert ctrl.is_empty() == map.is_empty();\n-        assert ctrl.is_not_empty() == map.is_not_empty();\n         for ctrl.each |x| {\n             let &(k, v) = x;\n             assert map.find(&k).unwrap() == &v"}]}