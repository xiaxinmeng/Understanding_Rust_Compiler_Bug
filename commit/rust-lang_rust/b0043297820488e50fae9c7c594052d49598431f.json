{"sha": "b0043297820488e50fae9c7c594052d49598431f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMDQzMjk3ODIwNDg4ZTUwZmFlOWM3YzU5NDA1MmQ0OTU5ODQzMWY=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-07-21T04:26:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-21T04:26:41Z"}, "message": "Simplify code around visit_fn (#3698)", "tree": {"sha": "d199584c81dadffafa9f0061dc1569788948e8bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d199584c81dadffafa9f0061dc1569788948e8bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0043297820488e50fae9c7c594052d49598431f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdM+mBCRBK7hj4Ov3rIwAAdHIIAARiVfMQxUy9tDNwYWr68Qul\nU0VnvMSWzqpfaLaOWSw3krl18OhhZmsnJdrvU+5YBPtI5AK7GJ09ZVY+4+XnsNYh\nJEFN6gPCoKVAMLLLukQplKIBdckUNkML6O5caC31K4EBELQGZ+I/AuAIkVtFUBdp\nh1874Jej8tEpjjk/vBxzzayUmESru9cUCA97eefgZ+EkPOyhwGZaRshBgw5y9+r9\nmv4HN7Vih623I/i74aOa5UobdJYucNCfO7LAaAn9ALfSlXUlcJQc+fJxfYIStfIt\nNcAFmc21xB4/MuCITFsnb/3vYub2E+lF0T7dD/TY7iEBmvI1+S5Jp2sqJZpwsSc=\n=OA9w\n-----END PGP SIGNATURE-----\n", "payload": "tree d199584c81dadffafa9f0061dc1569788948e8bf\nparent c0e616bc1d19eb9b08a5db2f265b8332569e7259\nauthor Seiichi Uchida <seuchida@gmail.com> 1563683201 +0900\ncommitter GitHub <noreply@github.com> 1563683201 +0900\n\nSimplify code around visit_fn (#3698)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0043297820488e50fae9c7c594052d49598431f", "html_url": "https://github.com/rust-lang/rust/commit/b0043297820488e50fae9c7c594052d49598431f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0043297820488e50fae9c7c594052d49598431f/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0e616bc1d19eb9b08a5db2f265b8332569e7259", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e616bc1d19eb9b08a5db2f265b8332569e7259", "html_url": "https://github.com/rust-lang/rust/commit/c0e616bc1d19eb9b08a5db2f265b8332569e7259"}], "stats": {"total": 123, "additions": 58, "deletions": 65}, "files": [{"sha": "73b752dfe78467644ecd07dfd3480368a3b9fd56", "filename": "src/items.rs", "status": "modified", "additions": 41, "deletions": 54, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/b0043297820488e50fae9c7c594052d49598431f/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0043297820488e50fae9c7c594052d49598431f/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=b0043297820488e50fae9c7c594052d49598431f", "patch": "@@ -299,47 +299,28 @@ impl<'a> FmtVisitor<'a> {\n         self.last_pos = item.span.hi();\n     }\n \n-    pub(crate) fn rewrite_fn(\n+    pub(crate) fn rewrite_fn_before_block(\n         &mut self,\n         indent: Indent,\n         ident: ast::Ident,\n         fn_sig: &FnSig<'_>,\n         span: Span,\n-        block: &ast::Block,\n-        inner_attrs: Option<&[ast::Attribute]>,\n-    ) -> Option<String> {\n+    ) -> Option<(String, FnBraceStyle)> {\n         let context = self.get_context();\n \n-        let mut newline_brace = newline_for_brace(self.config, &fn_sig.generics.where_clause);\n-\n-        let (mut result, force_newline_brace) =\n-            rewrite_fn_base(&context, indent, ident, fn_sig, span, newline_brace, true)?;\n+        let mut fn_brace_style = newline_for_brace(self.config, &fn_sig.generics.where_clause);\n+        let (result, force_newline_brace) =\n+            rewrite_fn_base(&context, indent, ident, fn_sig, span, fn_brace_style)?;\n \n         // 2 = ` {`\n         if self.config.brace_style() == BraceStyle::AlwaysNextLine\n             || force_newline_brace\n             || last_line_width(&result) + 2 > self.shape().width\n         {\n-            newline_brace = true;\n-        } else if !result.contains('\\n') {\n-            newline_brace = false;\n+            fn_brace_style = FnBraceStyle::NextLine\n         }\n \n-        if let rw @ Some(..) = self.single_line_fn(&result, block, inner_attrs) {\n-            rw\n-        } else {\n-            // Prepare for the function body by possibly adding a newline and\n-            // indent.\n-            // FIXME we'll miss anything between the end of the signature and the\n-            // start of the body, but we need more spans from the compiler to solve\n-            // this.\n-            if newline_brace {\n-                result.push_str(&indent.to_string_with_newline(self.config));\n-            } else {\n-                result.push(' ');\n-            }\n-            Some(result)\n-        }\n+        Some((result, fn_brace_style))\n     }\n \n     pub(crate) fn rewrite_required_fn(\n@@ -360,8 +341,7 @@ impl<'a> FmtVisitor<'a> {\n             ident,\n             &FnSig::from_method_sig(sig, generics),\n             span,\n-            false,\n-            false,\n+            FnBraceStyle::None,\n         )?;\n \n         // Re-attach semicolon\n@@ -370,7 +350,7 @@ impl<'a> FmtVisitor<'a> {\n         Some(result)\n     }\n \n-    fn single_line_fn(\n+    pub(crate) fn single_line_fn(\n         &self,\n         fn_str: &str,\n         block: &ast::Block,\n@@ -1980,15 +1960,21 @@ pub(crate) fn is_named_arg(arg: &ast::Arg) -> bool {\n     }\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+pub(crate) enum FnBraceStyle {\n+    SameLine,\n+    NextLine,\n+    None,\n+}\n+\n // Return type is (result, force_new_line_for_brace)\n fn rewrite_fn_base(\n     context: &RewriteContext<'_>,\n     indent: Indent,\n     ident: ast::Ident,\n     fn_sig: &FnSig<'_>,\n     span: Span,\n-    newline_brace: bool,\n-    has_body: bool,\n+    fn_brace_style: FnBraceStyle,\n ) -> Option<(String, bool)> {\n     let mut force_new_line_for_brace = false;\n \n@@ -2001,7 +1987,7 @@ fn rewrite_fn_base(\n     result.push_str(\"fn \");\n \n     // Generics.\n-    let overhead = if has_body && !newline_brace {\n+    let overhead = if let FnBraceStyle::SameLine = fn_brace_style {\n         // 4 = `() {`\n         4\n     } else {\n@@ -2044,8 +2030,7 @@ fn rewrite_fn_base(\n         &result,\n         indent,\n         ret_str_len,\n-        newline_brace,\n-        has_body,\n+        fn_brace_style,\n         multi_line_ret_str,\n     )?;\n \n@@ -2237,7 +2222,7 @@ fn rewrite_fn_base(\n     } else {\n         WhereClauseSpace::Newline\n     };\n-    let mut option = WhereClauseOption::new(!has_body, space);\n+    let mut option = WhereClauseOption::new(fn_brace_style == FnBraceStyle::None, space);\n     if is_args_multi_lined {\n         option.veto_single_line();\n     }\n@@ -2412,30 +2397,25 @@ fn compute_budgets_for_args(\n     result: &str,\n     indent: Indent,\n     ret_str_len: usize,\n-    newline_brace: bool,\n-    has_braces: bool,\n+    fn_brace_style: FnBraceStyle,\n     force_vertical_layout: bool,\n ) -> Option<((usize, usize, Indent))> {\n     debug!(\n-        \"compute_budgets_for_args {} {:?}, {}, {}\",\n+        \"compute_budgets_for_args {} {:?}, {}, {:?}\",\n         result.len(),\n         indent,\n         ret_str_len,\n-        newline_brace\n+        fn_brace_style,\n     );\n     // Try keeping everything on the same line.\n     if !result.contains('\\n') && !force_vertical_layout {\n         // 2 = `()`, 3 = `() `, space is before ret_string.\n         let overhead = if ret_str_len == 0 { 2 } else { 3 };\n         let mut used_space = indent.width() + result.len() + ret_str_len + overhead;\n-        if has_braces {\n-            if !newline_brace {\n-                // 2 = `{}`\n-                used_space += 2;\n-            }\n-        } else {\n-            // 1 = `;`\n-            used_space += 1;\n+        match fn_brace_style {\n+            FnBraceStyle::None => used_space += 1,     // 1 = `;`\n+            FnBraceStyle::SameLine => used_space += 2, // 2 = `{}`\n+            FnBraceStyle::NextLine => (),\n         }\n         let one_line_budget = context.budget(used_space);\n \n@@ -2448,7 +2428,10 @@ fn compute_budgets_for_args(\n                 }\n                 IndentStyle::Visual => {\n                     let indent = indent + result.len() + 1;\n-                    let multi_line_overhead = indent.width() + if newline_brace { 2 } else { 4 };\n+                    let multi_line_overhead = match fn_brace_style {\n+                        FnBraceStyle::SameLine => 4,\n+                        _ => 2,\n+                    } + indent.width();\n                     (indent, context.budget(multi_line_overhead))\n                 }\n             };\n@@ -2468,16 +2451,21 @@ fn compute_budgets_for_args(\n     Some((0, context.budget(used_space), new_indent))\n }\n \n-fn newline_for_brace(config: &Config, where_clause: &ast::WhereClause) -> bool {\n+fn newline_for_brace(config: &Config, where_clause: &ast::WhereClause) -> FnBraceStyle {\n     let predicate_count = where_clause.predicates.len();\n \n     if config.where_single_line() && predicate_count == 1 {\n-        return false;\n+        return FnBraceStyle::SameLine;\n     }\n     let brace_style = config.brace_style();\n \n-    brace_style == BraceStyle::AlwaysNextLine\n-        || (brace_style == BraceStyle::SameLineWhere && predicate_count > 0)\n+    let use_next_line = brace_style == BraceStyle::AlwaysNextLine\n+        || (brace_style == BraceStyle::SameLineWhere && predicate_count > 0);\n+    if use_next_line {\n+        FnBraceStyle::NextLine\n+    } else {\n+        FnBraceStyle::SameLine\n+    }\n }\n \n fn rewrite_generics(\n@@ -2919,8 +2907,7 @@ impl Rewrite for ast::ForeignItem {\n                 self.ident,\n                 &FnSig::new(fn_decl, generics, self.vis.clone()),\n                 span,\n-                false,\n-                false,\n+                FnBraceStyle::None,\n             )\n             .map(|(s, _)| format!(\"{};\", s)),\n             ast::ForeignItemKind::Static(ref ty, mutability) => {"}, {"sha": "58a94b12dfde5cfe0ca719905f00246ce69b2b3d", "filename": "src/visitor.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b0043297820488e50fae9c7c594052d49598431f/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0043297820488e50fae9c7c594052d49598431f/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=b0043297820488e50fae9c7c594052d49598431f", "patch": "@@ -11,8 +11,8 @@ use crate::coverage::transform_missing_snippet;\n use crate::items::{\n     format_impl, format_trait, format_trait_alias, is_mod_decl, is_use_item,\n     rewrite_associated_impl_type, rewrite_associated_type, rewrite_existential_impl_type,\n-    rewrite_existential_type, rewrite_extern_crate, rewrite_type_alias, FnSig, StaticParts,\n-    StructParts,\n+    rewrite_existential_type, rewrite_extern_crate, rewrite_type_alias, FnBraceStyle, FnSig,\n+    StaticParts, StructParts,\n };\n use crate::macros::{rewrite_macro, rewrite_macro_def, MacroPosition};\n use crate::rewrite::{Rewrite, RewriteContext};\n@@ -311,32 +311,38 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         let rewrite = match fk {\n             visit::FnKind::ItemFn(ident, _, _, b) | visit::FnKind::Method(ident, _, _, b) => {\n                 block = b;\n-                self.rewrite_fn(\n+                self.rewrite_fn_before_block(\n                     indent,\n                     ident,\n                     &FnSig::from_fn_kind(&fk, generics, fd, defaultness),\n                     mk_sp(s.lo(), b.span.lo()),\n-                    b,\n-                    inner_attrs,\n                 )\n             }\n             visit::FnKind::Closure(_) => unreachable!(),\n         };\n \n-        if let Some(fn_str) = rewrite {\n+        if let Some((fn_str, fn_brace_style)) = rewrite {\n             self.format_missing_with_indent(source!(self, s).lo());\n+\n+            if let Some(rw) = self.single_line_fn(&fn_str, block, inner_attrs) {\n+                self.push_str(&rw);\n+                self.last_pos = s.hi();\n+                return;\n+            }\n+\n             self.push_str(&fn_str);\n-            if let Some(c) = fn_str.chars().last() {\n-                if c == '}' {\n-                    self.last_pos = source!(self, block.span).hi();\n-                    return;\n+            match fn_brace_style {\n+                FnBraceStyle::SameLine => self.push_str(\" \"),\n+                FnBraceStyle::NextLine => {\n+                    self.push_str(&self.block_indent.to_string_with_newline(self.config))\n                 }\n+                _ => unreachable!(),\n             }\n+            self.last_pos = source!(self, block.span).lo();\n         } else {\n             self.format_missing(source!(self, block.span).lo());\n         }\n \n-        self.last_pos = source!(self, block.span).lo();\n         self.visit_block(block, inner_attrs, true)\n     }\n "}]}