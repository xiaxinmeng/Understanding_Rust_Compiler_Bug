{"sha": "8a57afe5a4bfab40072a83f7dc4ca560bf860919", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNTdhZmU1YTRiZmFiNDAwNzJhODNmN2RjNGNhNTYwYmY4NjA5MTk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-08T16:45:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-08T16:45:37Z"}, "message": "Merge #5684\n\n5684: Semantic highlighting for unsafe union field access r=jonas-schievink a=Nashenas88\n\nThis change adds support for unions in inference and lowering, then extends on that to add the unsafe semantic modifier on field access only. The `is_possibly_unsafe` function in `syntax_highlighting.rs` could be extended to support fns and static muts so that their definitions are not highlighted as unsafe, but only their usage.\r\n\r\nAlso, each commit of this PR updates the tests. By reviewing the files by commit, it's easy to see how the changes in the code affected the tests.\n\nCo-authored-by: Paul Daniel Faria <Nashenas88@users.noreply.github.com>", "tree": {"sha": "167d3717945c94c7523bbda5018239ed3a1c5fca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/167d3717945c94c7523bbda5018239ed3a1c5fca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a57afe5a4bfab40072a83f7dc4ca560bf860919", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfLtaxCRBK7hj4Ov3rIwAAdHIIAINk7u7S4AMuKnspZQG98CEZ\nLU7T5s2ZBNvcpOYSJATCePcjPZXY2jth6xVJ25WUoQvYxpWiIJpVDNaKInldGtZ+\nt3mv7Pcwks0F8qHuBp4jmoatIBB5kzWilhEEFDH9+Z46v9UUJUbk+FbLToanOMGo\ntymxSOJdwuK+J2ohE15bih2IG7E/veSzyJYs8SIgVIHVkBUGdUM6EA1YrD2mGi1J\nfy2jJ7kj5cO7M+FPHR/WgixBSSFrmun8p1zWmlP83uBOeVkE3bMdH0WYzCZSAsCY\nwskqhdIi4ORP9whKeAcfrf3BN/d/nF1O9DcnsUI4WoEx8EuMzLLYmMc/GSpZVVY=\n=9K1S\n-----END PGP SIGNATURE-----\n", "payload": "tree 167d3717945c94c7523bbda5018239ed3a1c5fca\nparent eed05a95b47c00bf6ce06e156716cd0648a88fb2\nparent be935b2b56dcbda5a5918d8c600552b0adbb3a96\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596905137 +0000\ncommitter GitHub <noreply@github.com> 1596905137 +0000\n\nMerge #5684\n\n5684: Semantic highlighting for unsafe union field access r=jonas-schievink a=Nashenas88\n\nThis change adds support for unions in inference and lowering, then extends on that to add the unsafe semantic modifier on field access only. The `is_possibly_unsafe` function in `syntax_highlighting.rs` could be extended to support fns and static muts so that their definitions are not highlighted as unsafe, but only their usage.\r\n\r\nAlso, each commit of this PR updates the tests. By reviewing the files by commit, it's easy to see how the changes in the code affected the tests.\n\nCo-authored-by: Paul Daniel Faria <Nashenas88@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a57afe5a4bfab40072a83f7dc4ca560bf860919", "html_url": "https://github.com/rust-lang/rust/commit/8a57afe5a4bfab40072a83f7dc4ca560bf860919", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a57afe5a4bfab40072a83f7dc4ca560bf860919/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eed05a95b47c00bf6ce06e156716cd0648a88fb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/eed05a95b47c00bf6ce06e156716cd0648a88fb2", "html_url": "https://github.com/rust-lang/rust/commit/eed05a95b47c00bf6ce06e156716cd0648a88fb2"}, {"sha": "be935b2b56dcbda5a5918d8c600552b0adbb3a96", "url": "https://api.github.com/repos/rust-lang/rust/commits/be935b2b56dcbda5a5918d8c600552b0adbb3a96", "html_url": "https://github.com/rust-lang/rust/commit/be935b2b56dcbda5a5918d8c600552b0adbb3a96"}], "stats": {"total": 142, "additions": 122, "deletions": 20}, "files": [{"sha": "3d12039a6d20bdd9db858dbfd3293cb8a98eadbb", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a57afe5a4bfab40072a83f7dc4ca560bf860919/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a57afe5a4bfab40072a83f7dc4ca560bf860919/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=8a57afe5a4bfab40072a83f7dc4ca560bf860919", "patch": "@@ -440,6 +440,12 @@ impl<'a> InferenceContext<'a> {\n                 let ty = self.insert_type_vars(ty.subst(&substs));\n                 forbid_unresolved_segments((ty, Some(strukt.into())), unresolved)\n             }\n+            TypeNs::AdtId(AdtId::UnionId(u)) => {\n+                let substs = Ty::substs_from_path(&ctx, path, u.into(), true);\n+                let ty = self.db.ty(u.into());\n+                let ty = self.insert_type_vars(ty.subst(&substs));\n+                forbid_unresolved_segments((ty, Some(u.into())), unresolved)\n+            }\n             TypeNs::EnumVariantId(var) => {\n                 let substs = Ty::substs_from_path(&ctx, path, var.into(), true);\n                 let ty = self.db.ty(var.parent.into());\n@@ -490,10 +496,7 @@ impl<'a> InferenceContext<'a> {\n                 // FIXME potentially resolve assoc type\n                 (Ty::Unknown, None)\n             }\n-            TypeNs::AdtId(AdtId::EnumId(_))\n-            | TypeNs::AdtId(AdtId::UnionId(_))\n-            | TypeNs::BuiltinType(_)\n-            | TypeNs::TraitId(_) => {\n+            TypeNs::AdtId(AdtId::EnumId(_)) | TypeNs::BuiltinType(_) | TypeNs::TraitId(_) => {\n                 // FIXME diagnostic\n                 (Ty::Unknown, None)\n             }"}, {"sha": "7638f167b5b6d6878c81add1abb49c990d601992", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a57afe5a4bfab40072a83f7dc4ca560bf860919/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a57afe5a4bfab40072a83f7dc4ca560bf860919/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=8a57afe5a4bfab40072a83f7dc4ca560bf860919", "patch": "@@ -518,6 +518,7 @@ impl Ty {\n         let (segment, generic_def) = match resolved {\n             ValueTyDefId::FunctionId(it) => (last, Some(it.into())),\n             ValueTyDefId::StructId(it) => (last, Some(it.into())),\n+            ValueTyDefId::UnionId(it) => (last, Some(it.into())),\n             ValueTyDefId::ConstId(it) => (last, Some(it.into())),\n             ValueTyDefId::StaticId(_) => (last, None),\n             ValueTyDefId::EnumVariantId(var) => {\n@@ -1148,11 +1149,12 @@ impl_from!(BuiltinType, AdtId(StructId, EnumId, UnionId), TypeAliasId for TyDefI\n pub enum ValueTyDefId {\n     FunctionId(FunctionId),\n     StructId(StructId),\n+    UnionId(UnionId),\n     EnumVariantId(EnumVariantId),\n     ConstId(ConstId),\n     StaticId(StaticId),\n }\n-impl_from!(FunctionId, StructId, EnumVariantId, ConstId, StaticId for ValueTyDefId);\n+impl_from!(FunctionId, StructId, UnionId, EnumVariantId, ConstId, StaticId for ValueTyDefId);\n \n /// Build the declared type of an item. This depends on the namespace; e.g. for\n /// `struct Foo(usize)`, we have two types: The type of the struct itself, and\n@@ -1179,6 +1181,7 @@ pub(crate) fn value_ty_query(db: &dyn HirDatabase, def: ValueTyDefId) -> Binders\n     match def {\n         ValueTyDefId::FunctionId(it) => type_for_fn(db, it),\n         ValueTyDefId::StructId(it) => type_for_struct_constructor(db, it),\n+        ValueTyDefId::UnionId(it) => type_for_adt(db, it.into()),\n         ValueTyDefId::EnumVariantId(it) => type_for_enum_variant_constructor(db, it),\n         ValueTyDefId::ConstId(it) => type_for_const(db, it),\n         ValueTyDefId::StaticId(it) => type_for_static(db, it),"}, {"sha": "5a7cf9455b5e739d1033830c5296266e43067d8f", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8a57afe5a4bfab40072a83f7dc4ca560bf860919/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a57afe5a4bfab40072a83f7dc4ca560bf860919/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=8a57afe5a4bfab40072a83f7dc4ca560bf860919", "patch": "@@ -334,16 +334,44 @@ fn infer_union() {\n             bar: f32,\n         }\n \n+        fn test() {\n+            let u = MyUnion { foo: 0 };\n+            unsafe { baz(u); }\n+            let u = MyUnion { bar: 0.0 };\n+            unsafe { baz(u); }\n+        }\n+\n         unsafe fn baz(u: MyUnion) {\n             let inner = u.foo;\n+            let inner = u.bar;\n         }\n         \"#,\n         expect![[r#\"\n-            61..62 'u': MyUnion\n-            73..99 '{     ...foo; }': ()\n-            83..88 'inner': u32\n-            91..92 'u': MyUnion\n-            91..96 'u.foo': u32\n+            57..172 '{     ...); } }': ()\n+            67..68 'u': MyUnion\n+            71..89 'MyUnio...o: 0 }': MyUnion\n+            86..87 '0': u32\n+            95..113 'unsafe...(u); }': ()\n+            102..113 '{ baz(u); }': ()\n+            104..107 'baz': fn baz(MyUnion)\n+            104..110 'baz(u)': ()\n+            108..109 'u': MyUnion\n+            122..123 'u': MyUnion\n+            126..146 'MyUnio... 0.0 }': MyUnion\n+            141..144 '0.0': f32\n+            152..170 'unsafe...(u); }': ()\n+            159..170 '{ baz(u); }': ()\n+            161..164 'baz': fn baz(MyUnion)\n+            161..167 'baz(u)': ()\n+            165..166 'u': MyUnion\n+            188..189 'u': MyUnion\n+            200..249 '{     ...bar; }': ()\n+            210..215 'inner': u32\n+            218..219 'u': MyUnion\n+            218..223 'u.foo': u32\n+            233..238 'inner': f32\n+            241..242 'u': MyUnion\n+            241..246 'u.bar': f32\n         \"#]],\n     );\n }"}, {"sha": "f71b804fe9ebee594f5d4d972fa86e6862ebc5df", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 56, "deletions": 10, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/8a57afe5a4bfab40072a83f7dc4ca560bf860919/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a57afe5a4bfab40072a83f7dc4ca560bf860919/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=8a57afe5a4bfab40072a83f7dc4ca560bf860919", "patch": "@@ -4,7 +4,7 @@ mod injection;\n #[cfg(test)]\n mod tests;\n \n-use hir::{Name, Semantics};\n+use hir::{Name, Semantics, VariantDef};\n use ra_ide_db::{\n     defs::{classify_name, classify_name_ref, Definition, NameClass, NameRefClass},\n     RootDatabase,\n@@ -455,6 +455,18 @@ fn macro_call_range(macro_call: &ast::MacroCall) -> Option<TextRange> {\n     Some(TextRange::new(range_start, range_end))\n }\n \n+fn is_possibly_unsafe(name_ref: &ast::NameRef) -> bool {\n+    name_ref\n+        .syntax()\n+        .parent()\n+        .and_then(|parent| {\n+            ast::FieldExpr::cast(parent.clone())\n+                .map(|_| true)\n+                .or_else(|| ast::RecordPatField::cast(parent).map(|_| true))\n+        })\n+        .unwrap_or(false)\n+}\n+\n fn highlight_element(\n     sema: &Semantics<RootDatabase>,\n     bindings_shadow_count: &mut FxHashMap<Name, u32>,\n@@ -484,10 +496,19 @@ fn highlight_element(\n \n             match name_kind {\n                 Some(NameClass::Definition(def)) => {\n-                    highlight_name(db, def) | HighlightModifier::Definition\n+                    highlight_name(db, def, false) | HighlightModifier::Definition\n+                }\n+                Some(NameClass::ConstReference(def)) => highlight_name(db, def, false),\n+                Some(NameClass::FieldShorthand { field, .. }) => {\n+                    let mut h = HighlightTag::Field.into();\n+                    if let Definition::Field(field) = field {\n+                        if let VariantDef::Union(_) = field.parent_def(db) {\n+                            h |= HighlightModifier::Unsafe;\n+                        }\n+                    }\n+\n+                    h\n                 }\n-                Some(NameClass::ConstReference(def)) => highlight_name(db, def),\n-                Some(NameClass::FieldShorthand { .. }) => HighlightTag::Field.into(),\n                 None => highlight_name_by_syntax(name) | HighlightModifier::Definition,\n             }\n         }\n@@ -498,6 +519,7 @@ fn highlight_element(\n         }\n         NAME_REF => {\n             let name_ref = element.into_node().and_then(ast::NameRef::cast).unwrap();\n+            let possibly_unsafe = is_possibly_unsafe(&name_ref);\n             match classify_name_ref(sema, &name_ref) {\n                 Some(name_kind) => match name_kind {\n                     NameRefClass::Definition(def) => {\n@@ -508,11 +530,13 @@ fn highlight_element(\n                                 binding_hash = Some(calc_binding_hash(&name, *shadow_count))\n                             }\n                         };\n-                        highlight_name(db, def)\n+                        highlight_name(db, def, possibly_unsafe)\n                     }\n                     NameRefClass::FieldShorthand { .. } => HighlightTag::Field.into(),\n                 },\n-                None if syntactic_name_ref_highlighting => highlight_name_ref_by_syntax(name_ref),\n+                None if syntactic_name_ref_highlighting => {\n+                    highlight_name_ref_by_syntax(name_ref, sema)\n+                }\n                 None => HighlightTag::UnresolvedReference.into(),\n             }\n         }\n@@ -652,10 +676,19 @@ fn is_child_of_impl(element: &SyntaxElement) -> bool {\n     }\n }\n \n-fn highlight_name(db: &RootDatabase, def: Definition) -> Highlight {\n+fn highlight_name(db: &RootDatabase, def: Definition, possibly_unsafe: bool) -> Highlight {\n     match def {\n         Definition::Macro(_) => HighlightTag::Macro,\n-        Definition::Field(_) => HighlightTag::Field,\n+        Definition::Field(field) => {\n+            let mut h = HighlightTag::Field.into();\n+            if possibly_unsafe {\n+                if let VariantDef::Union(_) = field.parent_def(db) {\n+                    h |= HighlightModifier::Unsafe;\n+                }\n+            }\n+\n+            return h;\n+        }\n         Definition::ModuleDef(def) => match def {\n             hir::ModuleDef::Module(_) => HighlightTag::Module,\n             hir::ModuleDef::Function(func) => {\n@@ -725,7 +758,7 @@ fn highlight_name_by_syntax(name: ast::Name) -> Highlight {\n     tag.into()\n }\n \n-fn highlight_name_ref_by_syntax(name: ast::NameRef) -> Highlight {\n+fn highlight_name_ref_by_syntax(name: ast::NameRef, sema: &Semantics<RootDatabase>) -> Highlight {\n     let default = HighlightTag::UnresolvedReference;\n \n     let parent = match name.syntax().parent() {\n@@ -735,7 +768,20 @@ fn highlight_name_ref_by_syntax(name: ast::NameRef) -> Highlight {\n \n     let tag = match parent.kind() {\n         METHOD_CALL_EXPR => HighlightTag::Function,\n-        FIELD_EXPR => HighlightTag::Field,\n+        FIELD_EXPR => {\n+            let h = HighlightTag::Field;\n+            let is_union = ast::FieldExpr::cast(parent)\n+                .and_then(|field_expr| {\n+                    let field = sema.resolve_field(&field_expr)?;\n+                    Some(if let VariantDef::Union(_) = field.parent_def(sema.db) {\n+                        true\n+                    } else {\n+                        false\n+                    })\n+                })\n+                .unwrap_or(false);\n+            return if is_union { h | HighlightModifier::Unsafe } else { h.into() };\n+        }\n         PATH_SEGMENT => {\n             let path = match parent.parent().and_then(ast::Path::cast) {\n                 Some(it) => it,"}, {"sha": "730efff0de1f891d04ea38e6c09918dda8222fa5", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a57afe5a4bfab40072a83f7dc4ca560bf860919/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a57afe5a4bfab40072a83f7dc4ca560bf860919/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=8a57afe5a4bfab40072a83f7dc4ca560bf860919", "patch": "@@ -275,6 +275,11 @@ fn test_unsafe_highlighting() {\n         r#\"\n unsafe fn unsafe_fn() {}\n \n+union Union {\n+    a: u32,\n+    b: f32,\n+}\n+\n struct HasUnsafeFn;\n \n impl HasUnsafeFn {\n@@ -289,8 +294,14 @@ static mut global_mut: TypeForStaticMut = TypeForStaticMut { a: 0 };\n \n fn main() {\n     let x = &5 as *const usize;\n+    let u = Union { b: 0 };\n     unsafe {\n         unsafe_fn();\n+        let b = u.b;\n+        match u {\n+            Union { b: 0 } => (),\n+            Union { a } => (),\n+        }\n         HasUnsafeFn.unsafe_method();\n         let y = *(x);\n         let z = -x;"}, {"sha": "79409fe816b2cb8fefe4e47d2f9055f5d2cbfc11", "filename": "crates/ra_ide/test_data/highlight_unsafe.html", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a57afe5a4bfab40072a83f7dc4ca560bf860919/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/8a57afe5a4bfab40072a83f7dc4ca560bf860919/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html?ref=8a57afe5a4bfab40072a83f7dc4ca560bf860919", "patch": "@@ -37,6 +37,11 @@\n </style>\n <pre><code><span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration unsafe\">unsafe_fn</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n \n+<span class=\"keyword\">union</span> <span class=\"union declaration\">Union</span> <span class=\"punctuation\">{</span>\n+    <span class=\"field declaration\">a</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">u32</span><span class=\"punctuation\">,</span>\n+    <span class=\"field declaration\">b</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">f32</span><span class=\"punctuation\">,</span>\n+<span class=\"punctuation\">}</span>\n+\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">HasUnsafeFn</span><span class=\"punctuation\">;</span>\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">HasUnsafeFn</span> <span class=\"punctuation\">{</span>\n@@ -51,8 +56,14 @@\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"numeric_literal\">5</span> <span class=\"keyword\">as</span> <span class=\"keyword\">*</span><span class=\"keyword\">const</span> <span class=\"builtin_type\">usize</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">u</span> <span class=\"operator\">=</span> <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field\">b</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n     <span class=\"keyword unsafe\">unsafe</span> <span class=\"punctuation\">{</span>\n         <span class=\"function unsafe\">unsafe_fn</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">b</span> <span class=\"operator\">=</span> <span class=\"variable\">u</span><span class=\"punctuation\">.</span><span class=\"field unsafe\">b</span><span class=\"punctuation\">;</span>\n+        <span class=\"keyword control\">match</span> <span class=\"variable\">u</span> <span class=\"punctuation\">{</span>\n+            <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field unsafe\">b</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n+            <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field unsafe\">a</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n+        <span class=\"punctuation\">}</span>\n         <span class=\"struct\">HasUnsafeFn</span><span class=\"punctuation\">.</span><span class=\"function unsafe\">unsafe_method</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n         <span class=\"keyword\">let</span> <span class=\"variable declaration\">y</span> <span class=\"operator\">=</span> <span class=\"operator unsafe\">*</span><span class=\"punctuation\">(</span><span class=\"variable\">x</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n         <span class=\"keyword\">let</span> <span class=\"variable declaration\">z</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">-</span><span class=\"variable\">x</span><span class=\"punctuation\">;</span>"}]}