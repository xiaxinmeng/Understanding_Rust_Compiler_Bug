{"sha": "55a94bdc384673fe2ae7bc2b0275a5777c830b52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YTk0YmRjMzg0NjczZmUyYWU3YmMyYjAyNzVhNTc3N2M4MzBiNTI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-05-07T00:34:27Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-05-16T09:02:11Z"}, "message": "rustc_target: Stop using \"string typing\" for code models\n\nIntroduce `enum CodeModel` instead.", "tree": {"sha": "7cf607ed4fb88b5567062df75e93fc9bdef8e922", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cf607ed4fb88b5567062df75e93fc9bdef8e922"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55a94bdc384673fe2ae7bc2b0275a5777c830b52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55a94bdc384673fe2ae7bc2b0275a5777c830b52", "html_url": "https://github.com/rust-lang/rust/commit/55a94bdc384673fe2ae7bc2b0275a5777c830b52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55a94bdc384673fe2ae7bc2b0275a5777c830b52/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84539360498cab3c70a7c9114c0b8106c8e1b06b", "url": "https://api.github.com/repos/rust-lang/rust/commits/84539360498cab3c70a7c9114c0b8106c8e1b06b", "html_url": "https://github.com/rust-lang/rust/commit/84539360498cab3c70a7c9114c0b8106c8e1b06b"}], "stats": {"total": 162, "additions": 107, "deletions": 55}, "files": [{"sha": "500311f9054c3496798071f2076a5ea953c622d6", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=55a94bdc384673fe2ae7bc2b0275a5777c830b52", "patch": "@@ -24,7 +24,7 @@ use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{self, Lto, OutputType, Passes, Sanitizer, SwitchWithOptPath};\n use rustc_session::Session;\n-use rustc_target::spec::RelocModel;\n+use rustc_target::spec::{CodeModel, RelocModel};\n \n use libc::{c_char, c_int, c_uint, c_void, size_t};\n use std::ffi::CString;\n@@ -35,13 +35,6 @@ use std::slice;\n use std::str;\n use std::sync::Arc;\n \n-pub const CODE_GEN_MODEL_ARGS: &[(&str, llvm::CodeModel)] = &[\n-    (\"small\", llvm::CodeModel::Small),\n-    (\"kernel\", llvm::CodeModel::Kernel),\n-    (\"medium\", llvm::CodeModel::Medium),\n-    (\"large\", llvm::CodeModel::Large),\n-];\n-\n pub fn llvm_err(handler: &rustc_errors::Handler, msg: &str) -> FatalError {\n     match llvm::last_error() {\n         Some(err) => handler.fatal(&format!(\"{}: {}\", msg, err)),\n@@ -114,6 +107,17 @@ fn to_llvm_relocation_model(relocation_model: RelocModel) -> llvm::RelocModel {\n     }\n }\n \n+fn to_llvm_code_model(code_model: Option<CodeModel>) -> llvm::CodeModel {\n+    match code_model {\n+        Some(CodeModel::Tiny) => llvm::CodeModel::Tiny,\n+        Some(CodeModel::Small) => llvm::CodeModel::Small,\n+        Some(CodeModel::Kernel) => llvm::CodeModel::Kernel,\n+        Some(CodeModel::Medium) => llvm::CodeModel::Medium,\n+        Some(CodeModel::Large) => llvm::CodeModel::Large,\n+        None => llvm::CodeModel::None,\n+    }\n+}\n+\n pub fn target_machine_factory(\n     sess: &Session,\n     optlvl: config::OptLevel,\n@@ -126,20 +130,7 @@ pub fn target_machine_factory(\n     let ffunction_sections = sess.target.target.options.function_sections;\n     let fdata_sections = ffunction_sections;\n \n-    let code_model_arg =\n-        sess.opts.cg.code_model.as_ref().or(sess.target.target.options.code_model.as_ref());\n-\n-    let code_model = match code_model_arg {\n-        Some(s) => match CODE_GEN_MODEL_ARGS.iter().find(|arg| arg.0 == s) {\n-            Some(x) => x.1,\n-            _ => {\n-                sess.err(&format!(\"{:?} is not a valid code model\", code_model_arg));\n-                sess.abort_if_errors();\n-                bug!();\n-            }\n-        },\n-        None => llvm::CodeModel::None,\n-    };\n+    let code_model = to_llvm_code_model(sess.code_model());\n \n     let features = attributes::llvm_target_features(sess).collect::<Vec<_>>();\n     let mut singlethread = sess.target.target.options.singlethread;"}, {"sha": "6afd4278451f772684a0a87d7593bc9c3198108c", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=55a94bdc384673fe2ae7bc2b0275a5777c830b52", "patch": "@@ -208,7 +208,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n             }\n             PrintRequest::CodeModels => {\n                 println!(\"Available code models:\");\n-                for &(name, _) in back::write::CODE_GEN_MODEL_ARGS.iter() {\n+                for name in &[\"small\", \"kernel\", \"medium\", \"large\"] {\n                     println!(\"    {}\", name);\n                 }\n                 println!();"}, {"sha": "01cdd263d7ab1d4778bd057dd1a96370005a9244", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=55a94bdc384673fe2ae7bc2b0275a5777c830b52", "patch": "@@ -458,9 +458,7 @@ pub enum RelocModel {\n #[derive(Copy, Clone)]\n #[repr(C)]\n pub enum CodeModel {\n-    // FIXME: figure out if this variant is needed at all.\n-    #[allow(dead_code)]\n-    Other,\n+    Tiny,\n     Small,\n     Kernel,\n     Medium,"}, {"sha": "5e17660f4c60e58450a2cbc14caa7905d4f7594b", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=55a94bdc384673fe2ae7bc2b0275a5777c830b52", "patch": "@@ -15,7 +15,7 @@ use rustc_session::{build_session, Session};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::symbol::sym;\n use rustc_span::SourceFileHashAlgorithm;\n-use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy};\n+use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy};\n use rustc_target::spec::{RelocModel, RelroLevel, TlsModel};\n use std::collections::{BTreeMap, BTreeSet};\n use std::iter::FromIterator;\n@@ -411,7 +411,7 @@ fn test_codegen_options_tracking_hash() {\n \n     // Make sure that changing a [TRACKED] option changes the hash.\n     // This list is in alphabetical order.\n-    tracked!(code_model, Some(String::from(\"code model\")));\n+    tracked!(code_model, Some(CodeModel::Large));\n     tracked!(debug_assertions, Some(true));\n     tracked!(debuginfo, 0xdeadbeef);\n     tracked!(embed_bitcode, false);"}, {"sha": "5f34a39db05cea8bbdd7842e3b68f2e4c166261a", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=55a94bdc384673fe2ae7bc2b0275a5777c830b52", "patch": "@@ -1324,10 +1324,6 @@ fn collect_print_requests(\n         prints.push(PrintRequest::TargetFeatures);\n         cg.target_feature = String::new();\n     }\n-    if cg.code_model.as_ref().map_or(false, |s| s == \"help\") {\n-        prints.push(PrintRequest::CodeModels);\n-        cg.code_model = None;\n-    }\n \n     prints.extend(matches.opt_strs(\"print\").into_iter().map(|s| match &*s {\n         \"crate-name\" => PrintRequest::CrateName,\n@@ -2010,7 +2006,7 @@ crate mod dep_tracking {\n     use crate::utils::NativeLibraryKind;\n     use rustc_feature::UnstableFeatures;\n     use rustc_span::edition::Edition;\n-    use rustc_target::spec::{MergeFunctions, PanicStrategy, RelocModel};\n+    use rustc_target::spec::{CodeModel, MergeFunctions, PanicStrategy, RelocModel};\n     use rustc_target::spec::{RelroLevel, TargetTriple, TlsModel};\n     use std::collections::hash_map::DefaultHasher;\n     use std::collections::BTreeMap;\n@@ -2060,6 +2056,7 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Option<Vec<String>>);\n     impl_dep_tracking_hash_via_hash!(Option<MergeFunctions>);\n     impl_dep_tracking_hash_via_hash!(Option<RelocModel>);\n+    impl_dep_tracking_hash_via_hash!(Option<CodeModel>);\n     impl_dep_tracking_hash_via_hash!(Option<TlsModel>);\n     impl_dep_tracking_hash_via_hash!(Option<PanicStrategy>);\n     impl_dep_tracking_hash_via_hash!(Option<RelroLevel>);"}, {"sha": "0421d209c34e5706876ca0c385f2c777ee52e6a8", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=55a94bdc384673fe2ae7bc2b0275a5777c830b52", "patch": "@@ -5,9 +5,8 @@ use crate::lint;\n use crate::search_paths::SearchPath;\n use crate::utils::NativeLibraryKind;\n \n-use rustc_target::spec::TargetTriple;\n-use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy};\n-use rustc_target::spec::{RelocModel, RelroLevel, TlsModel};\n+use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy};\n+use rustc_target::spec::{RelocModel, RelroLevel, TargetTriple, TlsModel};\n \n use rustc_feature::UnstableFeatures;\n use rustc_span::edition::Edition;\n@@ -269,6 +268,8 @@ macro_rules! options {\n         pub const parse_src_file_hash: &str = \"either `md5` or `sha1`\";\n         pub const parse_relocation_model: &str =\n             \"one of supported relocation models (`rustc --print relocation-models`)\";\n+        pub const parse_code_model: &str =\n+            \"one of supported code models (`rustc --print code-models`)\";\n         pub const parse_tls_model: &str =\n             \"one of supported TLS models (`rustc --print tls-models`)\";\n     }\n@@ -620,6 +621,14 @@ macro_rules! options {\n             true\n         }\n \n+        fn parse_code_model(slot: &mut Option<CodeModel>, v: Option<&str>) -> bool {\n+            match v.and_then(|s| CodeModel::from_str(s).ok()) {\n+                Some(code_model) => *slot = Some(code_model),\n+                _ => return false,\n+            }\n+            true\n+        }\n+\n         fn parse_tls_model(slot: &mut Option<TlsModel>, v: Option<&str>) -> bool {\n             match v.and_then(|s| TlsModel::from_str(s).ok()) {\n                 Some(tls_model) => *slot = Some(tls_model),\n@@ -662,7 +671,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n \n     ar: String = (String::new(), parse_string, [UNTRACKED],\n         \"this option is deprecated and does nothing\"),\n-    code_model: Option<String> = (None, parse_opt_string, [TRACKED],\n+    code_model: Option<CodeModel> = (None, parse_code_model, [TRACKED],\n         \"choose the code model to use (`rustc --print code-models` for details)\"),\n     codegen_units: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n         \"divide crate into N units to optimize in parallel\"),"}, {"sha": "c55456bf5232c82c96e2938e992a926493efab1c", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=55a94bdc384673fe2ae7bc2b0275a5777c830b52", "patch": "@@ -23,7 +23,8 @@ use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId, ErrorReported\n use rustc_span::edition::Edition;\n use rustc_span::source_map::{self, FileLoader, MultiSpan, RealFileLoader, SourceMap, Span};\n use rustc_span::{SourceFileHashAlgorithm, Symbol};\n-use rustc_target::spec::{PanicStrategy, RelocModel, RelroLevel, Target, TargetTriple, TlsModel};\n+use rustc_target::spec::{CodeModel, PanicStrategy, RelocModel, RelroLevel};\n+use rustc_target::spec::{Target, TargetTriple, TlsModel};\n \n use std::cell::{self, RefCell};\n use std::env;\n@@ -625,6 +626,10 @@ impl Session {\n         self.opts.cg.relocation_model.unwrap_or(self.target.target.options.relocation_model)\n     }\n \n+    pub fn code_model(&self) -> Option<CodeModel> {\n+        self.opts.cg.code_model.or(self.target.target.options.code_model)\n+    }\n+\n     pub fn tls_model(&self) -> TlsModel {\n         self.opts.debugging_opts.tls_model.unwrap_or(self.target.target.options.tls_model)\n     }"}, {"sha": "49b33059b63456c8e013adee491b7e17a7153d54", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 52, "deletions": 2, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=55a94bdc384673fe2ae7bc2b0275a5777c830b52", "patch": "@@ -305,6 +305,43 @@ impl ToJson for RelocModel {\n     }\n }\n \n+#[derive(Clone, Copy, PartialEq, Hash, Debug)]\n+pub enum CodeModel {\n+    Tiny,\n+    Small,\n+    Kernel,\n+    Medium,\n+    Large,\n+}\n+\n+impl FromStr for CodeModel {\n+    type Err = ();\n+\n+    fn from_str(s: &str) -> Result<CodeModel, ()> {\n+        Ok(match s {\n+            // \"tiny\" => CodeModel::Tiny, // Not exposed to users right now.\n+            \"small\" => CodeModel::Small,\n+            \"kernel\" => CodeModel::Kernel,\n+            \"medium\" => CodeModel::Medium,\n+            \"large\" => CodeModel::Large,\n+            _ => return Err(()),\n+        })\n+    }\n+}\n+\n+impl ToJson for CodeModel {\n+    fn to_json(&self) -> Json {\n+        match *self {\n+            CodeModel::Tiny => \"tiny\",\n+            CodeModel::Small => \"small\",\n+            CodeModel::Kernel => \"kernel\",\n+            CodeModel::Medium => \"medium\",\n+            CodeModel::Large => \"large\",\n+        }\n+        .to_json()\n+    }\n+}\n+\n #[derive(Clone, Copy, PartialEq, Hash, Debug)]\n pub enum TlsModel {\n     GeneralDynamic,\n@@ -699,7 +736,8 @@ pub struct TargetOptions {\n     /// -relocation-model=$relocation_model`. Defaults to `Pic`.\n     pub relocation_model: RelocModel,\n     /// Code model to use. Corresponds to `llc -code-model=$code_model`.\n-    pub code_model: Option<String>,\n+    /// Defaults to `None` which means \"inherited from the base LLVM target\".\n+    pub code_model: Option<CodeModel>,\n     /// TLS model to use. Options are \"global-dynamic\" (default), \"local-dynamic\", \"initial-exec\"\n     /// and \"local-exec\". This is similar to the -ftls-model option in GCC/Clang.\n     pub tls_model: TlsModel,\n@@ -1114,6 +1152,18 @@ impl Target {\n                     Some(Ok(()))\n                 })).unwrap_or(Ok(()))\n             } );\n+            ($key_name:ident, CodeModel) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                    match s.parse::<CodeModel>() {\n+                        Ok(code_model) => base.options.$key_name = Some(code_model),\n+                        _ => return Some(Err(format!(\"'{}' is not a valid code model. \\\n+                                                      Run `rustc --print code-models` to \\\n+                                                      see the list of supported values.\", s))),\n+                    }\n+                    Some(Ok(()))\n+                })).unwrap_or(Ok(()))\n+            } );\n             ($key_name:ident, TlsModel) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n@@ -1266,7 +1316,7 @@ impl Target {\n         key!(only_cdylib, bool);\n         key!(executables, bool);\n         key!(relocation_model, RelocModel)?;\n-        key!(code_model, optional);\n+        key!(code_model, CodeModel)?;\n         key!(tls_model, TlsModel)?;\n         key!(disable_redzone, bool);\n         key!(eliminate_frame_pointer, bool);"}, {"sha": "715449d74ce22a6f605d926525102ede09f247fa", "filename": "src/librustc_target/spec/riscv64gc_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_linux_gnu.rs?ref=55a94bdc384673fe2ae7bc2b0275a5777c830b52", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+use crate::spec::{CodeModel, LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -14,7 +14,7 @@ pub fn target() -> TargetResult {\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             abi_blacklist: super::riscv_base::abi_blacklist(),\n-            code_model: Some(\"medium\".to_string()),\n+            code_model: Some(CodeModel::Medium),\n             cpu: \"generic-rv64\".to_string(),\n             features: \"+m,+a,+f,+d,+c\".to_string(),\n             llvm_abiname: \"lp64d\".to_string(),"}, {"sha": "7376a14e951f5f81db7a984768f5ebb29993c017", "filename": "src/librustc_target/spec/riscv64gc_unknown_none_elf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs?ref=55a94bdc384673fe2ae7bc2b0275a5777c830b52", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n+use crate::spec::{CodeModel, LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n use crate::spec::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -23,7 +23,7 @@ pub fn target() -> TargetResult {\n             executables: true,\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,\n-            code_model: Some(\"medium\".to_string()),\n+            code_model: Some(CodeModel::Medium),\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),\n             eliminate_frame_pointer: false,"}, {"sha": "a3b0eb5334f40fcb9b3b62522307bbaecbc8abcf", "filename": "src/librustc_target/spec/riscv64imac_unknown_none_elf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs?ref=55a94bdc384673fe2ae7bc2b0275a5777c830b52", "patch": "@@ -1,5 +1,5 @@\n+use crate::spec::{CodeModel, Target, TargetOptions, TargetResult};\n use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n-use crate::spec::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -23,7 +23,7 @@ pub fn target() -> TargetResult {\n             executables: true,\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,\n-            code_model: Some(\"medium\".to_string()),\n+            code_model: Some(CodeModel::Medium),\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),\n             eliminate_frame_pointer: false,"}, {"sha": "65bb97d84aae9cf8085ca7bab99a27868b06ff92", "filename": "src/librustc_target/spec/x86_64_linux_kernel.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_kernel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_kernel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_kernel.rs?ref=55a94bdc384673fe2ae7bc2b0275a5777c830b52", "patch": "@@ -1,7 +1,7 @@\n // This defines the amd64 target for the Linux Kernel. See the linux-kernel-base module for\n // generic Linux kernel options.\n \n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{CodeModel, LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_kernel_base::opts();\n@@ -10,7 +10,7 @@ pub fn target() -> TargetResult {\n     base.features =\n         \"-mmx,-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-3dnow,-3dnowa,-avx,-avx2,+soft-float\"\n             .to_string();\n-    base.code_model = Some(\"kernel\".to_string());\n+    base.code_model = Some(CodeModel::Kernel);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n \n     Ok(Target {"}, {"sha": "849227a574aeb7207274b1f516c817da1b66f183", "filename": "src/librustc_target/spec/x86_64_unknown_uefi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_uefi.rs?ref=55a94bdc384673fe2ae7bc2b0275a5777c830b52", "patch": "@@ -5,7 +5,7 @@\n // The win64 ABI is used. It differs from the sysv64 ABI, so we must use a windows target with\n // LLVM. \"x86_64-unknown-windows\" is used to get the minimal subset of windows-specific features.\n \n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetResult};\n+use crate::spec::{CodeModel, LinkerFlavor, LldFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::uefi_msvc_base::opts();\n@@ -26,7 +26,7 @@ pub fn target() -> TargetResult {\n     // UEFI systems run without a host OS, hence we cannot assume any code locality. We must tell\n     // LLVM to expect code to reference any address in the address-space. The \"large\" code-model\n     // places no locality-restrictions, so it fits well here.\n-    base.code_model = Some(\"large\".to_string());\n+    base.code_model = Some(CodeModel::Large);\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-windows\".to_string(),"}, {"sha": "e7cd81ea68ef0a1f2902f8e8041140a5e2da36f6", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/55a94bdc384673fe2ae7bc2b0275a5777c830b52/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=55a94bdc384673fe2ae7bc2b0275a5777c830b52", "patch": "@@ -274,16 +274,18 @@ extern \"C\" bool LLVMRustHasFeature(LLVMTargetMachineRef TM,\n }\n \n enum class LLVMRustCodeModel {\n-  Other,\n+  Tiny,\n   Small,\n   Kernel,\n   Medium,\n   Large,\n   None,\n };\n \n-static CodeModel::Model fromRust(LLVMRustCodeModel Model) {\n+static Optional<CodeModel::Model> fromRust(LLVMRustCodeModel Model) {\n   switch (Model) {\n+  case LLVMRustCodeModel::Tiny:\n+    return CodeModel::Tiny;\n   case LLVMRustCodeModel::Small:\n     return CodeModel::Small;\n   case LLVMRustCodeModel::Kernel:\n@@ -292,6 +294,8 @@ static CodeModel::Model fromRust(LLVMRustCodeModel Model) {\n     return CodeModel::Medium;\n   case LLVMRustCodeModel::Large:\n     return CodeModel::Large;\n+  case LLVMRustCodeModel::None:\n+    return None;\n   default:\n     report_fatal_error(\"Bad CodeModel.\");\n   }\n@@ -452,6 +456,7 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n \n   auto OptLevel = fromRust(RustOptLevel);\n   auto RM = fromRust(RustReloc);\n+  auto CM = fromRust(RustCM);\n \n   std::string Error;\n   Triple Trip(Triple::normalize(TripleStr));\n@@ -490,9 +495,6 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n \n   Options.EmitStackSizeSection = EmitStackSizeSection;\n \n-  Optional<CodeModel::Model> CM;\n-  if (RustCM != LLVMRustCodeModel::None)\n-    CM = fromRust(RustCM);\n   TargetMachine *TM = TheTarget->createTargetMachine(\n       Trip.getTriple(), CPU, Feature, Options, RM, CM, OptLevel);\n   return wrap(TM);"}]}