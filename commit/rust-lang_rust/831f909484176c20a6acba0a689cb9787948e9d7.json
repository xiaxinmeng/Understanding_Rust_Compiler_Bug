{"sha": "831f909484176c20a6acba0a689cb9787948e9d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMWY5MDk0ODQxNzZjMjBhNmFjYmEwYTY4OWNiOTc4Nzk0OGU5ZDc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-07T00:30:54Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-09T16:44:51Z"}, "message": "rustc: Convert statics to constants", "tree": {"sha": "64c4dabdaa96609185e054f6cce848d7538f1ca0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64c4dabdaa96609185e054f6cce848d7538f1ca0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/831f909484176c20a6acba0a689cb9787948e9d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/831f909484176c20a6acba0a689cb9787948e9d7", "html_url": "https://github.com/rust-lang/rust/commit/831f909484176c20a6acba0a689cb9787948e9d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/831f909484176c20a6acba0a689cb9787948e9d7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8fb0cf789289fb7d350cc553d871f880e1b2b02", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8fb0cf789289fb7d350cc553d871f880e1b2b02", "html_url": "https://github.com/rust-lang/rust/commit/b8fb0cf789289fb7d350cc553d871f880e1b2b02"}], "stats": {"total": 378, "additions": 189, "deletions": 189}, "files": [{"sha": "fc5d726bf67c24c351dc5c368e3586b9436d1c21", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=831f909484176c20a6acba0a689cb9787948e9d7", "patch": "@@ -55,22 +55,22 @@ use syntax::parse::token;\n \n // This is the \"magic number\" expected at the beginning of a LLVM bytecode\n // object in an rlib.\n-pub static RLIB_BYTECODE_OBJECT_MAGIC: &'static [u8] = b\"RUST_OBJECT\";\n+pub const RLIB_BYTECODE_OBJECT_MAGIC: &'static [u8] = b\"RUST_OBJECT\";\n \n // The version number this compiler will write to bytecode objects in rlibs\n-pub static RLIB_BYTECODE_OBJECT_VERSION: u32 = 1;\n+pub const RLIB_BYTECODE_OBJECT_VERSION: u32 = 1;\n \n // The offset in bytes the bytecode object format version number can be found at\n-pub static RLIB_BYTECODE_OBJECT_VERSION_OFFSET: uint = 11;\n+pub const RLIB_BYTECODE_OBJECT_VERSION_OFFSET: uint = 11;\n \n // The offset in bytes the size of the compressed bytecode can be found at in\n // format version 1\n-pub static RLIB_BYTECODE_OBJECT_V1_DATASIZE_OFFSET: uint =\n+pub const RLIB_BYTECODE_OBJECT_V1_DATASIZE_OFFSET: uint =\n     RLIB_BYTECODE_OBJECT_VERSION_OFFSET + 4;\n \n // The offset in bytes the compressed LLVM bytecode can be found at in format\n // version 1\n-pub static RLIB_BYTECODE_OBJECT_V1_DATA_OFFSET: uint =\n+pub const RLIB_BYTECODE_OBJECT_V1_DATA_OFFSET: uint =\n     RLIB_BYTECODE_OBJECT_V1_DATASIZE_OFFSET + 8;\n \n "}, {"sha": "fdd3c5b5a2608b8782ccc57f71390171ca5b6540", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=831f909484176c20a6acba0a689cb9787948e9d7", "patch": "@@ -154,10 +154,10 @@ pub enum CrateType {\n \n macro_rules! debugging_opts(\n     ([ $opt:ident ] $cnt:expr ) => (\n-        pub static $opt: u64 = 1 << $cnt;\n+        pub const $opt: u64 = 1 << $cnt;\n     );\n     ([ $opt:ident, $($rest:ident),* ] $cnt:expr ) => (\n-        pub static $opt: u64 = 1 << $cnt;\n+        pub const $opt: u64 = 1 << $cnt;\n         debugging_opts!([ $($rest),* ] $cnt + 1)\n     )\n )\n@@ -268,7 +268,7 @@ macro_rules! cgoptions(\n     }\n \n     pub type CodegenSetter = fn(&mut CodegenOptions, v: Option<&str>) -> bool;\n-    pub static CG_OPTIONS: &'static [(&'static str, CodegenSetter,\n+    pub const CG_OPTIONS: &'static [(&'static str, CodegenSetter,\n                                       &'static str)] =\n         &[ $( (stringify!($opt), cgsetters::$opt, $desc) ),* ];\n "}, {"sha": "6d00724fb41fc1be400908b1a596ea1ba6ad24ee", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=831f909484176c20a6acba0a689cb9787948e9d7", "patch": "@@ -112,9 +112,9 @@ impl LintStore {\n     pub fn register_pass(&mut self, sess: Option<&Session>,\n                          from_plugin: bool, pass: LintPassObject) {\n         for &lint in pass.get_lints().iter() {\n-            self.lints.push((lint, from_plugin));\n+            self.lints.push((*lint, from_plugin));\n \n-            let id = LintId::of(lint);\n+            let id = LintId::of(*lint);\n             if !self.by_name.insert(lint.name_lower(), id) {\n                 let msg = format!(\"duplicate specification of lint {}\", lint.name_lower());\n                 match (sess, from_plugin) {"}, {"sha": "5afe5326171d7851b0047c06c3407906daf8fd07", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=831f909484176c20a6acba0a689cb9787948e9d7", "patch": "@@ -99,12 +99,12 @@ macro_rules! declare_lint (\n macro_rules! lint_array ( ($( $lint:expr ),*) => (\n     {\n         #[allow(non_uppercase_statics)]\n-        static array: LintArray = &[ $( $lint ),* ];\n+        static array: LintArray = &[ $( &$lint ),* ];\n         array\n     }\n ))\n \n-pub type LintArray = &'static [&'static Lint];\n+pub type LintArray = &'static [&'static &'static Lint];\n \n /// Trait for types providing lint checks.\n ///"}, {"sha": "492feee6f84b3033240d5e9dc586778eb252e33e", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 101, "deletions": 101, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=831f909484176c20a6acba0a689cb9787948e9d7", "patch": "@@ -15,83 +15,83 @@ use back::svh::Svh;\n \n // EBML enum definitions and utils shared by the encoder and decoder\n \n-pub static tag_items: uint = 0x00;\n+pub const tag_items: uint = 0x00;\n \n-pub static tag_paths_data_name: uint = 0x01;\n+pub const tag_paths_data_name: uint = 0x01;\n \n-pub static tag_def_id: uint = 0x02;\n+pub const tag_def_id: uint = 0x02;\n \n-pub static tag_items_data: uint = 0x03;\n+pub const tag_items_data: uint = 0x03;\n \n-pub static tag_items_data_item: uint = 0x04;\n+pub const tag_items_data_item: uint = 0x04;\n \n-pub static tag_items_data_item_family: uint = 0x05;\n+pub const tag_items_data_item_family: uint = 0x05;\n \n-pub static tag_items_data_item_type: uint = 0x07;\n+pub const tag_items_data_item_type: uint = 0x07;\n \n-pub static tag_items_data_item_symbol: uint = 0x08;\n+pub const tag_items_data_item_symbol: uint = 0x08;\n \n-pub static tag_items_data_item_variant: uint = 0x09;\n+pub const tag_items_data_item_variant: uint = 0x09;\n \n-pub static tag_items_data_parent_item: uint = 0x0a;\n+pub const tag_items_data_parent_item: uint = 0x0a;\n \n-pub static tag_items_data_item_is_tuple_struct_ctor: uint = 0x0b;\n+pub const tag_items_data_item_is_tuple_struct_ctor: uint = 0x0b;\n \n-pub static tag_index: uint = 0x0c;\n+pub const tag_index: uint = 0x0c;\n \n-pub static tag_index_buckets: uint = 0x0d;\n+pub const tag_index_buckets: uint = 0x0d;\n \n-pub static tag_index_buckets_bucket: uint = 0x0e;\n+pub const tag_index_buckets_bucket: uint = 0x0e;\n \n-pub static tag_index_buckets_bucket_elt: uint = 0x0f;\n+pub const tag_index_buckets_bucket_elt: uint = 0x0f;\n \n-pub static tag_index_table: uint = 0x10;\n+pub const tag_index_table: uint = 0x10;\n \n-pub static tag_meta_item_name_value: uint = 0x11;\n+pub const tag_meta_item_name_value: uint = 0x11;\n \n-pub static tag_meta_item_name: uint = 0x12;\n+pub const tag_meta_item_name: uint = 0x12;\n \n-pub static tag_meta_item_value: uint = 0x13;\n+pub const tag_meta_item_value: uint = 0x13;\n \n-pub static tag_attributes: uint = 0x14;\n+pub const tag_attributes: uint = 0x14;\n \n-pub static tag_attribute: uint = 0x15;\n+pub const tag_attribute: uint = 0x15;\n \n-pub static tag_meta_item_word: uint = 0x16;\n+pub const tag_meta_item_word: uint = 0x16;\n \n-pub static tag_meta_item_list: uint = 0x17;\n+pub const tag_meta_item_list: uint = 0x17;\n \n // The list of crates that this crate depends on\n-pub static tag_crate_deps: uint = 0x18;\n+pub const tag_crate_deps: uint = 0x18;\n \n // A single crate dependency\n-pub static tag_crate_dep: uint = 0x19;\n+pub const tag_crate_dep: uint = 0x19;\n \n-pub static tag_crate_hash: uint = 0x1a;\n-pub static tag_crate_crate_name: uint = 0x1b;\n+pub const tag_crate_hash: uint = 0x1a;\n+pub const tag_crate_crate_name: uint = 0x1b;\n \n-pub static tag_crate_dep_crate_name: uint = 0x1d;\n-pub static tag_crate_dep_hash: uint = 0x1e;\n+pub const tag_crate_dep_crate_name: uint = 0x1d;\n+pub const tag_crate_dep_hash: uint = 0x1e;\n \n-pub static tag_mod_impl: uint = 0x1f;\n+pub const tag_mod_impl: uint = 0x1f;\n \n-pub static tag_item_trait_item: uint = 0x20;\n+pub const tag_item_trait_item: uint = 0x20;\n \n-pub static tag_item_trait_ref: uint = 0x21;\n-pub static tag_item_super_trait_ref: uint = 0x22;\n+pub const tag_item_trait_ref: uint = 0x21;\n+pub const tag_item_super_trait_ref: uint = 0x22;\n \n // discriminator value for variants\n-pub static tag_disr_val: uint = 0x23;\n+pub const tag_disr_val: uint = 0x23;\n \n // used to encode ast_map::PathElem\n-pub static tag_path: uint = 0x24;\n-pub static tag_path_len: uint = 0x25;\n-pub static tag_path_elem_mod: uint = 0x26;\n-pub static tag_path_elem_name: uint = 0x27;\n-pub static tag_item_field: uint = 0x28;\n-pub static tag_item_field_origin: uint = 0x29;\n-\n-pub static tag_item_variances: uint = 0x2a;\n+pub const tag_path: uint = 0x24;\n+pub const tag_path_len: uint = 0x25;\n+pub const tag_path_elem_mod: uint = 0x26;\n+pub const tag_path_elem_name: uint = 0x27;\n+pub const tag_item_field: uint = 0x28;\n+pub const tag_item_field_origin: uint = 0x29;\n+\n+pub const tag_item_variances: uint = 0x2a;\n /*\n   trait items contain tag_item_trait_item elements,\n   impl items contain tag_item_impl_item elements, and classes\n@@ -100,15 +100,15 @@ pub static tag_item_variances: uint = 0x2a;\n   both, tag_item_trait_item and tag_item_impl_item have to be two\n   different tags.\n  */\n-pub static tag_item_impl_item: uint = 0x30;\n-pub static tag_item_trait_method_explicit_self: uint = 0x31;\n+pub const tag_item_impl_item: uint = 0x30;\n+pub const tag_item_trait_method_explicit_self: uint = 0x31;\n \n \n // Reexports are found within module tags. Each reexport contains def_ids\n // and names.\n-pub static tag_items_data_item_reexport: uint = 0x38;\n-pub static tag_items_data_item_reexport_def_id: uint = 0x39;\n-pub static tag_items_data_item_reexport_name: uint = 0x3a;\n+pub const tag_items_data_item_reexport: uint = 0x38;\n+pub const tag_items_data_item_reexport_def_id: uint = 0x39;\n+pub const tag_items_data_item_reexport_name: uint = 0x3a;\n \n // used to encode crate_ctxt side tables\n #[deriving(PartialEq)]\n@@ -153,15 +153,15 @@ impl astencode_tag {\n     }\n }\n \n-pub static tag_item_trait_item_sort: uint = 0x60;\n+pub const tag_item_trait_item_sort: uint = 0x60;\n \n-pub static tag_item_trait_parent_sort: uint = 0x61;\n+pub const tag_item_trait_parent_sort: uint = 0x61;\n \n-pub static tag_item_impl_type_basename: uint = 0x62;\n+pub const tag_item_impl_type_basename: uint = 0x62;\n \n-pub static tag_crate_triple: uint = 0x66;\n+pub const tag_crate_triple: uint = 0x66;\n \n-pub static tag_dylib_dependency_formats: uint = 0x67;\n+pub const tag_dylib_dependency_formats: uint = 0x67;\n \n // Language items are a top-level directory (for speed). Hierarchy:\n //\n@@ -170,81 +170,81 @@ pub static tag_dylib_dependency_formats: uint = 0x67;\n //   - tag_lang_items_item_id: u32\n //   - tag_lang_items_item_node_id: u32\n \n-pub static tag_lang_items: uint = 0x70;\n-pub static tag_lang_items_item: uint = 0x71;\n-pub static tag_lang_items_item_id: uint = 0x72;\n-pub static tag_lang_items_item_node_id: uint = 0x73;\n-pub static tag_lang_items_missing: uint = 0x74;\n+pub const tag_lang_items: uint = 0x70;\n+pub const tag_lang_items_item: uint = 0x71;\n+pub const tag_lang_items_item_id: uint = 0x72;\n+pub const tag_lang_items_item_node_id: uint = 0x73;\n+pub const tag_lang_items_missing: uint = 0x74;\n \n-pub static tag_item_unnamed_field: uint = 0x75;\n-pub static tag_items_data_item_visibility: uint = 0x76;\n+pub const tag_item_unnamed_field: uint = 0x75;\n+pub const tag_items_data_item_visibility: uint = 0x76;\n \n-pub static tag_item_method_tps: uint = 0x79;\n-pub static tag_item_method_fty: uint = 0x7a;\n+pub const tag_item_method_tps: uint = 0x79;\n+pub const tag_item_method_fty: uint = 0x7a;\n \n-pub static tag_mod_child: uint = 0x7b;\n-pub static tag_misc_info: uint = 0x7c;\n-pub static tag_misc_info_crate_items: uint = 0x7d;\n+pub const tag_mod_child: uint = 0x7b;\n+pub const tag_misc_info: uint = 0x7c;\n+pub const tag_misc_info_crate_items: uint = 0x7d;\n \n-pub static tag_item_method_provided_source: uint = 0x7e;\n-pub static tag_item_impl_vtables: uint = 0x7f;\n+pub const tag_item_method_provided_source: uint = 0x7e;\n+pub const tag_item_impl_vtables: uint = 0x7f;\n \n-pub static tag_impls: uint = 0x80;\n-pub static tag_impls_impl: uint = 0x81;\n+pub const tag_impls: uint = 0x80;\n+pub const tag_impls_impl: uint = 0x81;\n \n-pub static tag_items_data_item_inherent_impl: uint = 0x82;\n-pub static tag_items_data_item_extension_impl: uint = 0x83;\n+pub const tag_items_data_item_inherent_impl: uint = 0x82;\n+pub const tag_items_data_item_extension_impl: uint = 0x83;\n \n // GAP 0x84, 0x85, 0x86\n \n-pub static tag_native_libraries: uint = 0x87;\n-pub static tag_native_libraries_lib: uint = 0x88;\n-pub static tag_native_libraries_name: uint = 0x89;\n-pub static tag_native_libraries_kind: uint = 0x8a;\n+pub const tag_native_libraries: uint = 0x87;\n+pub const tag_native_libraries_lib: uint = 0x88;\n+pub const tag_native_libraries_name: uint = 0x89;\n+pub const tag_native_libraries_kind: uint = 0x8a;\n \n-pub static tag_plugin_registrar_fn: uint = 0x8b;\n-pub static tag_exported_macros: uint = 0x8c;\n-pub static tag_macro_def: uint = 0x8d;\n+pub const tag_plugin_registrar_fn: uint = 0x8b;\n+pub const tag_exported_macros: uint = 0x8c;\n+pub const tag_macro_def: uint = 0x8d;\n \n-pub static tag_method_argument_names: uint = 0x8e;\n-pub static tag_method_argument_name: uint = 0x8f;\n+pub const tag_method_argument_names: uint = 0x8e;\n+pub const tag_method_argument_name: uint = 0x8f;\n \n-pub static tag_reachable_extern_fns: uint = 0x90;\n-pub static tag_reachable_extern_fn_id: uint = 0x91;\n+pub const tag_reachable_extern_fns: uint = 0x90;\n+pub const tag_reachable_extern_fn_id: uint = 0x91;\n \n-pub static tag_items_data_item_stability: uint = 0x92;\n+pub const tag_items_data_item_stability: uint = 0x92;\n \n-pub static tag_items_data_item_repr: uint = 0x93;\n+pub const tag_items_data_item_repr: uint = 0x93;\n \n #[deriving(Clone, Show)]\n pub struct LinkMeta {\n     pub crate_name: String,\n     pub crate_hash: Svh,\n }\n \n-pub static tag_unboxed_closures: uint = 0x95;\n-pub static tag_unboxed_closure: uint = 0x96;\n-pub static tag_unboxed_closure_type: uint = 0x97;\n-pub static tag_unboxed_closure_kind: uint = 0x98;\n+pub const tag_unboxed_closures: uint = 0x95;\n+pub const tag_unboxed_closure: uint = 0x96;\n+pub const tag_unboxed_closure_type: uint = 0x97;\n+pub const tag_unboxed_closure_kind: uint = 0x98;\n \n-pub static tag_struct_fields: uint = 0x99;\n-pub static tag_struct_field: uint = 0x9a;\n-pub static tag_struct_field_id: uint = 0x9b;\n+pub const tag_struct_fields: uint = 0x99;\n+pub const tag_struct_field: uint = 0x9a;\n+pub const tag_struct_field_id: uint = 0x9b;\n \n-pub static tag_attribute_is_sugared_doc: uint = 0x9c;\n+pub const tag_attribute_is_sugared_doc: uint = 0x9c;\n \n-pub static tag_trait_def_bounds: uint = 0x9d;\n+pub const tag_trait_def_bounds: uint = 0x9d;\n \n-pub static tag_items_data_region: uint = 0x9e;\n+pub const tag_items_data_region: uint = 0x9e;\n \n-pub static tag_region_param_def: uint = 0xa0;\n-pub static tag_region_param_def_ident: uint = 0xa1;\n-pub static tag_region_param_def_def_id: uint = 0xa2;\n-pub static tag_region_param_def_space: uint = 0xa3;\n-pub static tag_region_param_def_index: uint = 0xa4;\n+pub const tag_region_param_def: uint = 0xa0;\n+pub const tag_region_param_def_ident: uint = 0xa1;\n+pub const tag_region_param_def_def_id: uint = 0xa2;\n+pub const tag_region_param_def_space: uint = 0xa3;\n+pub const tag_region_param_def_index: uint = 0xa4;\n \n-pub static tag_type_param_def: uint = 0xa5;\n+pub const tag_type_param_def: uint = 0xa5;\n \n-pub static tag_item_generics: uint = 0xa6;\n-pub static tag_method_ty_generics: uint = 0xa7;\n+pub const tag_item_generics: uint = 0xa6;\n+pub const tag_method_ty_generics: uint = 0xa7;\n "}, {"sha": "02f6a4a78dbc819f26501c10f3abff01b80cb172", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=831f909484176c20a6acba0a689cb9787948e9d7", "patch": "@@ -2035,7 +2035,7 @@ fn encode_dylib_dependency_formats(rbml_w: &mut Encoder, ecx: &EncodeContext) {\n \n // NB: Increment this as you change the metadata encoding version.\n #[allow(non_uppercase_statics)]\n-pub static metadata_encoding_version : &'static [u8] = &[b'r', b'u', b's', b't', 0, 0, 0, 1 ];\n+pub const metadata_encoding_version : &'static [u8] = &[b'r', b'u', b's', b't', 0, 0, 0, 1 ];\n \n pub fn encode_metadata(parms: EncodeParams, krate: &Crate) -> Vec<u8> {\n     let mut wr = SeekableMemWriter::new();"}, {"sha": "62c179f598c965c8396807986365105a829854f0", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=831f909484176c20a6acba0a689cb9787948e9d7", "patch": "@@ -241,23 +241,23 @@ use std::collections::hashmap::{Occupied, Vacant};\n use flate;\n use time;\n \n-pub static MACOS_DLL_PREFIX: &'static str = \"lib\";\n-pub static MACOS_DLL_SUFFIX: &'static str = \".dylib\";\n+pub const MACOS_DLL_PREFIX: &'static str = \"lib\";\n+pub const MACOS_DLL_SUFFIX: &'static str = \".dylib\";\n \n-pub static WIN32_DLL_PREFIX: &'static str = \"\";\n-pub static WIN32_DLL_SUFFIX: &'static str = \".dll\";\n+pub const WIN32_DLL_PREFIX: &'static str = \"\";\n+pub const WIN32_DLL_SUFFIX: &'static str = \".dll\";\n \n-pub static LINUX_DLL_PREFIX: &'static str = \"lib\";\n-pub static LINUX_DLL_SUFFIX: &'static str = \".so\";\n+pub const LINUX_DLL_PREFIX: &'static str = \"lib\";\n+pub const LINUX_DLL_SUFFIX: &'static str = \".so\";\n \n-pub static FREEBSD_DLL_PREFIX: &'static str = \"lib\";\n-pub static FREEBSD_DLL_SUFFIX: &'static str = \".so\";\n+pub const FREEBSD_DLL_PREFIX: &'static str = \"lib\";\n+pub const FREEBSD_DLL_SUFFIX: &'static str = \".so\";\n \n-pub static DRAGONFLY_DLL_PREFIX: &'static str = \"lib\";\n-pub static DRAGONFLY_DLL_SUFFIX: &'static str = \".so\";\n+pub const DRAGONFLY_DLL_PREFIX: &'static str = \"lib\";\n+pub const DRAGONFLY_DLL_SUFFIX: &'static str = \".so\";\n \n-pub static ANDROID_DLL_PREFIX: &'static str = \"lib\";\n-pub static ANDROID_DLL_SUFFIX: &'static str = \".so\";\n+pub const ANDROID_DLL_PREFIX: &'static str = \"lib\";\n+pub const ANDROID_DLL_SUFFIX: &'static str = \".so\";\n \n pub struct CrateMismatch {\n     path: Path,"}, {"sha": "8484ec9293496da690040f446eeb3310df75a027", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=831f909484176c20a6acba0a689cb9787948e9d7", "patch": "@@ -58,20 +58,20 @@ pub struct Edge<E> {\n #[deriving(Clone, PartialEq, Show)]\n pub struct NodeIndex(pub uint);\n #[allow(non_uppercase_statics)]\n-pub static InvalidNodeIndex: NodeIndex = NodeIndex(uint::MAX);\n+pub const InvalidNodeIndex: NodeIndex = NodeIndex(uint::MAX);\n \n #[deriving(PartialEq)]\n pub struct EdgeIndex(pub uint);\n #[allow(non_uppercase_statics)]\n-pub static InvalidEdgeIndex: EdgeIndex = EdgeIndex(uint::MAX);\n+pub const InvalidEdgeIndex: EdgeIndex = EdgeIndex(uint::MAX);\n \n // Use a private field here to guarantee no more instances are created:\n #[deriving(Show)]\n pub struct Direction { repr: uint }\n #[allow(non_uppercase_statics)]\n-pub static Outgoing: Direction = Direction { repr: 0 };\n+pub const Outgoing: Direction = Direction { repr: 0 };\n #[allow(non_uppercase_statics)]\n-pub static Incoming: Direction = Direction { repr: 1 };\n+pub const Incoming: Direction = Direction { repr: 1 };\n \n impl NodeIndex {\n     fn get(&self) -> uint { let NodeIndex(v) = *self; v }"}, {"sha": "392436d3a806994a5c08c1672ba07f9492e0084b", "filename": "src/librustc/middle/trans/cleanup.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs?ref=831f909484176c20a6acba0a689cb9787948e9d7", "patch": "@@ -49,9 +49,9 @@ pub struct CustomScopeIndex {\n     index: uint\n }\n \n-pub static EXIT_BREAK: uint = 0;\n-pub static EXIT_LOOP: uint = 1;\n-pub static EXIT_MAX: uint = 2;\n+pub const EXIT_BREAK: uint = 0;\n+pub const EXIT_LOOP: uint = 1;\n+pub const EXIT_MAX: uint = 2;\n \n pub enum CleanupScopeKind<'blk, 'tcx: 'blk> {\n     CustomScopeKind,"}, {"sha": "cea74c6573d545ba89f37b7628194fdf07c87703", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=831f909484176c20a6acba0a689cb9787948e9d7", "patch": "@@ -68,7 +68,7 @@ use std::collections::enum_set::{EnumSet, CLike};\n \n pub type Disr = u64;\n \n-pub static INITIAL_DISCRIMINANT_VALUE: Disr = 0;\n+pub const INITIAL_DISCRIMINANT_VALUE: Disr = 0;\n \n // Data types\n \n@@ -918,7 +918,7 @@ mod primitives {\n         flags: super::has_ty_err as uint,\n     };\n \n-    pub static LAST_PRIMITIVE_ID: uint = 18;\n+    pub const LAST_PRIMITIVE_ID: uint = 18;\n }\n \n // NB: If you change this, you'll probably want to change the corresponding\n@@ -2200,7 +2200,7 @@ macro_rules! def_type_content_sets(\n             use middle::ty::TypeContents;\n             $(\n                 #[allow(non_uppercase_statics)]\n-                pub static $name: TypeContents = TypeContents { bits: $bits };\n+                pub const $name: TypeContents = TypeContents { bits: $bits };\n              )+\n         }\n     }"}, {"sha": "efd0a2a0e48b2fcad2f33bf012d70be8d8052f74", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=831f909484176c20a6acba0a689cb9787948e9d7", "patch": "@@ -440,8 +440,8 @@ pub fn ast_path_to_ty_relaxed<'tcx, AC: AstConv<'tcx>,\n     }\n }\n \n-pub static NO_REGIONS: uint = 1;\n-pub static NO_TPS: uint = 2;\n+pub const NO_REGIONS: uint = 1;\n+pub const NO_TPS: uint = 2;\n \n fn check_path_args(tcx: &ty::ctxt,\n                    path: &ast::Path,"}, {"sha": "87f3fd987871cdea8336a33a84896dcd4b364941", "filename": "src/librustc/middle/typeck/infer/resolve.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs?ref=831f909484176c20a6acba0a689cb9787948e9d7", "patch": "@@ -57,21 +57,21 @@ use middle::typeck::infer::{unresolved_int_ty,unresolved_float_ty,unresolved_ty}\n use syntax::codemap::Span;\n use util::ppaux::{Repr, ty_to_string};\n \n-pub static resolve_nested_tvar: uint = 0b0000000001;\n-pub static resolve_rvar: uint        = 0b0000000010;\n-pub static resolve_ivar: uint        = 0b0000000100;\n-pub static resolve_fvar: uint        = 0b0000001000;\n-pub static resolve_all: uint         = 0b0000001111;\n-pub static force_tvar: uint          = 0b0000100000;\n-pub static force_rvar: uint          = 0b0001000000;\n-pub static force_ivar: uint          = 0b0010000000;\n-pub static force_fvar: uint          = 0b0100000000;\n-pub static force_all: uint           = 0b0111100000;\n+pub const resolve_nested_tvar: uint = 0b0000000001;\n+pub const resolve_rvar: uint        = 0b0000000010;\n+pub const resolve_ivar: uint        = 0b0000000100;\n+pub const resolve_fvar: uint        = 0b0000001000;\n+pub const resolve_all: uint         = 0b0000001111;\n+pub const force_tvar: uint          = 0b0000100000;\n+pub const force_rvar: uint          = 0b0001000000;\n+pub const force_ivar: uint          = 0b0010000000;\n+pub const force_fvar: uint          = 0b0100000000;\n+pub const force_all: uint           = 0b0111100000;\n \n-pub static not_regions: uint         = !(force_rvar | resolve_rvar);\n+pub const not_regions: uint         = !(force_rvar | resolve_rvar);\n \n-pub static try_resolve_tvar_shallow: uint = 0;\n-pub static resolve_and_force_all_but_regions: uint =\n+pub const try_resolve_tvar_shallow: uint = 0;\n+pub const resolve_and_force_all_but_regions: uint =\n     (resolve_all | force_all) & not_regions;\n \n pub struct ResolveState<'a, 'tcx: 'a> {"}, {"sha": "bf525db7661b008a41aa415a4fe066b413f714b3", "filename": "src/librustc_back/abi.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc_back%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc_back%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fabi.rs?ref=831f909484176c20a6acba0a689cb9787948e9d7", "patch": "@@ -10,20 +10,20 @@\n \n #![allow(non_uppercase_statics)]\n \n-pub static box_field_refcnt: uint = 0u;\n-pub static box_field_drop_glue: uint = 1u;\n-pub static box_field_body: uint = 4u;\n+pub const box_field_refcnt: uint = 0u;\n+pub const box_field_drop_glue: uint = 1u;\n+pub const box_field_body: uint = 4u;\n \n-pub static tydesc_field_visit_glue: uint = 3u;\n+pub const tydesc_field_visit_glue: uint = 3u;\n \n // The two halves of a closure: code and environment.\n-pub static fn_field_code: uint = 0u;\n-pub static fn_field_box: uint = 1u;\n+pub const fn_field_code: uint = 0u;\n+pub const fn_field_box: uint = 1u;\n \n // The two fields of a trait object/trait instance: vtable and box.\n // The vtable contains the type descriptor as first element.\n-pub static trt_field_box: uint = 0u;\n-pub static trt_field_vtable: uint = 1u;\n+pub const trt_field_box: uint = 0u;\n+pub const trt_field_vtable: uint = 1u;\n \n-pub static slice_elt_base: uint = 0u;\n-pub static slice_elt_len: uint = 1u;\n+pub const slice_elt_base: uint = 0u;\n+pub const slice_elt_len: uint = 1u;"}, {"sha": "aa6023326d6c17e817cfd22ee71167f6201f8736", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831f909484176c20a6acba0a689cb9787948e9d7/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=831f909484176c20a6acba0a689cb9787948e9d7", "patch": "@@ -43,8 +43,8 @@ pub mod diagnostic;\n pub type Opcode = u32;\n pub type Bool = c_uint;\n \n-pub static True: Bool = 1 as Bool;\n-pub static False: Bool = 0 as Bool;\n+pub const True: Bool = 1 as Bool;\n+pub const False: Bool = 0 as Bool;\n \n // Consts for the LLVM CallConv type, pre-cast to uint.\n \n@@ -93,32 +93,32 @@ pub enum DiagnosticSeverity {\n \n bitflags! {\n     flags Attribute : u32 {\n-        static ZExtAttribute = 1 << 0,\n-        static SExtAttribute = 1 << 1,\n-        static NoReturnAttribute = 1 << 2,\n-        static InRegAttribute = 1 << 3,\n-        static StructRetAttribute = 1 << 4,\n-        static NoUnwindAttribute = 1 << 5,\n-        static NoAliasAttribute = 1 << 6,\n-        static ByValAttribute = 1 << 7,\n-        static NestAttribute = 1 << 8,\n-        static ReadNoneAttribute = 1 << 9,\n-        static ReadOnlyAttribute = 1 << 10,\n-        static NoInlineAttribute = 1 << 11,\n-        static AlwaysInlineAttribute = 1 << 12,\n-        static OptimizeForSizeAttribute = 1 << 13,\n-        static StackProtectAttribute = 1 << 14,\n-        static StackProtectReqAttribute = 1 << 15,\n-        static AlignmentAttribute = 31 << 16,\n-        static NoCaptureAttribute = 1 << 21,\n-        static NoRedZoneAttribute = 1 << 22,\n-        static NoImplicitFloatAttribute = 1 << 23,\n-        static NakedAttribute = 1 << 24,\n-        static InlineHintAttribute = 1 << 25,\n-        static StackAttribute = 7 << 26,\n-        static ReturnsTwiceAttribute = 1 << 29,\n-        static UWTableAttribute = 1 << 30,\n-        static NonLazyBindAttribute = 1 << 31,\n+        const ZExtAttribute = 1 << 0,\n+        const SExtAttribute = 1 << 1,\n+        const NoReturnAttribute = 1 << 2,\n+        const InRegAttribute = 1 << 3,\n+        const StructRetAttribute = 1 << 4,\n+        const NoUnwindAttribute = 1 << 5,\n+        const NoAliasAttribute = 1 << 6,\n+        const ByValAttribute = 1 << 7,\n+        const NestAttribute = 1 << 8,\n+        const ReadNoneAttribute = 1 << 9,\n+        const ReadOnlyAttribute = 1 << 10,\n+        const NoInlineAttribute = 1 << 11,\n+        const AlwaysInlineAttribute = 1 << 12,\n+        const OptimizeForSizeAttribute = 1 << 13,\n+        const StackProtectAttribute = 1 << 14,\n+        const StackProtectReqAttribute = 1 << 15,\n+        const AlignmentAttribute = 31 << 16,\n+        const NoCaptureAttribute = 1 << 21,\n+        const NoRedZoneAttribute = 1 << 22,\n+        const NoImplicitFloatAttribute = 1 << 23,\n+        const NakedAttribute = 1 << 24,\n+        const InlineHintAttribute = 1 << 25,\n+        const StackAttribute = 7 << 26,\n+        const ReturnsTwiceAttribute = 1 << 29,\n+        const UWTableAttribute = 1 << 30,\n+        const NonLazyBindAttribute = 1 << 31,\n     }\n }\n "}]}