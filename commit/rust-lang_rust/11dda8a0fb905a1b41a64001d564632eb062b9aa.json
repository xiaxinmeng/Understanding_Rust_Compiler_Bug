{"sha": "11dda8a0fb905a1b41a64001d564632eb062b9aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZGRhOGEwZmI5MDVhMWI0MWE2NDAwMWQ1NjQ2MzJlYjA2MmI5YWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-24T16:29:44Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-24T16:29:44Z"}, "message": "remove useless aliases", "tree": {"sha": "2f7214d22d0ee232fbaa23b951b322b9f5299650", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f7214d22d0ee232fbaa23b951b322b9f5299650"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11dda8a0fb905a1b41a64001d564632eb062b9aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11dda8a0fb905a1b41a64001d564632eb062b9aa", "html_url": "https://github.com/rust-lang/rust/commit/11dda8a0fb905a1b41a64001d564632eb062b9aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11dda8a0fb905a1b41a64001d564632eb062b9aa/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7c0336a7516e4973a9efb86bfb97cf290441413", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c0336a7516e4973a9efb86bfb97cf290441413", "html_url": "https://github.com/rust-lang/rust/commit/a7c0336a7516e4973a9efb86bfb97cf290441413"}], "stats": {"total": 52, "additions": 14, "deletions": 38}, "files": [{"sha": "17ece93a75e10ab42f77fbd51208090e6a1d5cc2", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11dda8a0fb905a1b41a64001d564632eb062b9aa/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11dda8a0fb905a1b41a64001d564632eb062b9aa/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=11dda8a0fb905a1b41a64001d564632eb062b9aa", "patch": "@@ -13,7 +13,7 @@ use crate::{\n     HirDatabase, DefKind,\n     SourceItemId,\n     type_ref::TypeRef,\n-    ids::{StructLoc, EnumLoc},\n+    ids::ItemLoc,\n };\n \n impl Struct {\n@@ -23,8 +23,8 @@ impl Struct {\n         file_id: HirFileId,\n         ast: &ast::StructDef,\n     ) -> Struct {\n-        let loc: StructLoc = StructLoc::from_ast(db, module, file_id, ast);\n-        let id = loc.id(db);\n+        let loc = ItemLoc::from_ast(db, module, file_id, ast);\n+        let id = db.as_ref().structs.loc2id(&loc);\n         Struct { id }\n     }\n \n@@ -40,8 +40,8 @@ impl Enum {\n         file_id: HirFileId,\n         ast: &ast::EnumDef,\n     ) -> Enum {\n-        let loc: EnumLoc = EnumLoc::from_ast(db, module, file_id, ast);\n-        let id = loc.id(db);\n+        let loc = ItemLoc::from_ast(db, module, file_id, ast);\n+        let id = db.as_ref().enums.loc2id(&loc);\n         Enum { id }\n     }\n }"}, {"sha": "8a2ab5714cdb6ccf697b7b0273cd5916040a5e4b", "filename": "crates/ra_hir/src/code_model_impl/function.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11dda8a0fb905a1b41a64001d564632eb062b9aa/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11dda8a0fb905a1b41a64001d564632eb062b9aa/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs?ref=11dda8a0fb905a1b41a64001d564632eb062b9aa", "patch": "@@ -9,7 +9,7 @@ use crate::{\n     type_ref::{TypeRef, Mutability},\n     expr::Body,\n     impl_block::ImplBlock,\n-    ids::FunctionLoc,\n+    ids::ItemLoc,\n };\n \n pub use self::scope::{FnScopes, ScopesWithSyntaxMapping, ScopeEntryWithSyntax};\n@@ -21,8 +21,8 @@ impl Function {\n         file_id: HirFileId,\n         ast: &ast::FnDef,\n     ) -> Function {\n-        let loc: FunctionLoc = FunctionLoc::from_ast(db, module, file_id, ast);\n-        let id = loc.id(db);\n+        let loc = ItemLoc::from_ast(db, module, file_id, ast);\n+        let id = db.as_ref().fns.loc2id(&loc);\n         Function { id }\n     }\n "}, {"sha": "6375c76c9c992297cff4dcbf709670ec1dfe563e", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/11dda8a0fb905a1b41a64001d564632eb062b9aa/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11dda8a0fb905a1b41a64001d564632eb062b9aa/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=11dda8a0fb905a1b41a64001d564632eb062b9aa", "patch": "@@ -13,9 +13,9 @@ use crate::{\n pub struct HirInterner {\n     defs: LocationIntener<DefLoc, DefId>,\n     macros: LocationIntener<MacroCallLoc, MacroCallId>,\n-    fns: LocationIntener<FunctionLoc, FunctionId>,\n-    structs: LocationIntener<StructLoc, StructId>,\n-    enums: LocationIntener<EnumLoc, EnumId>,\n+    pub(crate) fns: LocationIntener<ItemLoc<ast::FnDef>, FunctionId>,\n+    pub(crate) structs: LocationIntener<ItemLoc<ast::StructDef>, StructId>,\n+    pub(crate) enums: LocationIntener<ItemLoc<ast::EnumDef>, EnumId>,\n }\n \n impl HirInterner {\n@@ -182,56 +182,32 @@ impl<N: AstNode> Clone for ItemLoc<N> {\n pub struct FunctionId(RawId);\n impl_arena_id!(FunctionId);\n \n-pub(crate) type FunctionLoc = ItemLoc<ast::FnDef>;\n-\n impl FunctionId {\n-    pub(crate) fn loc(self, db: &impl AsRef<HirInterner>) -> FunctionLoc {\n+    pub(crate) fn loc(self, db: &impl AsRef<HirInterner>) -> ItemLoc<ast::FnDef> {\n         db.as_ref().fns.id2loc(self)\n     }\n }\n \n-impl FunctionLoc {\n-    pub(crate) fn id(&self, db: &impl AsRef<HirInterner>) -> FunctionId {\n-        db.as_ref().fns.loc2id(&self)\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct StructId(RawId);\n impl_arena_id!(StructId);\n \n-pub(crate) type StructLoc = ItemLoc<ast::StructDef>;\n-\n impl StructId {\n-    pub(crate) fn loc(self, db: &impl AsRef<HirInterner>) -> StructLoc {\n+    pub(crate) fn loc(self, db: &impl AsRef<HirInterner>) -> ItemLoc<ast::StructDef> {\n         db.as_ref().structs.id2loc(self)\n     }\n }\n \n-impl StructLoc {\n-    pub(crate) fn id(&self, db: &impl AsRef<HirInterner>) -> StructId {\n-        db.as_ref().structs.loc2id(&self)\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct EnumId(RawId);\n impl_arena_id!(EnumId);\n \n-pub(crate) type EnumLoc = ItemLoc<ast::EnumDef>;\n-\n impl EnumId {\n-    pub(crate) fn loc(self, db: &impl AsRef<HirInterner>) -> EnumLoc {\n+    pub(crate) fn loc(self, db: &impl AsRef<HirInterner>) -> ItemLoc<ast::EnumDef> {\n         db.as_ref().enums.id2loc(self)\n     }\n }\n \n-impl EnumLoc {\n-    pub(crate) fn id(&self, db: &impl AsRef<HirInterner>) -> EnumId {\n-        db.as_ref().enums.loc2id(&self)\n-    }\n-}\n-\n /// Def's are a core concept of hir. A `Def` is an Item (function, module, etc)\n /// in a specific module.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}]}