{"sha": "083635eab2c146a35d734ab40c5a3ba5df720786", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MzYzNWVhYjJjMTQ2YTM1ZDczNGFiNDBjNWEzYmE1ZGY3MjA3ODY=", "commit": {"author": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-11-10T12:52:30Z"}, "committer": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-12-17T09:13:09Z"}, "message": "changed some stuff in probe.rs and it broke libstd", "tree": {"sha": "571d7b96bc3f2e36010088428f67e89b37044cde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/571d7b96bc3f2e36010088428f67e89b37044cde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/083635eab2c146a35d734ab40c5a3ba5df720786", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/083635eab2c146a35d734ab40c5a3ba5df720786", "html_url": "https://github.com/rust-lang/rust/commit/083635eab2c146a35d734ab40c5a3ba5df720786", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/083635eab2c146a35d734ab40c5a3ba5df720786/comments", "author": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "361b3db886c6f63c57c11e036b01bb8b09f35739", "url": "https://api.github.com/repos/rust-lang/rust/commits/361b3db886c6f63c57c11e036b01bb8b09f35739", "html_url": "https://github.com/rust-lang/rust/commit/361b3db886c6f63c57c11e036b01bb8b09f35739"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "19fb32f96dffbeda5f49cdc2588b711a7645fc62", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/083635eab2c146a35d734ab40c5a3ba5df720786/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083635eab2c146a35d734ab40c5a3ba5df720786/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=083635eab2c146a35d734ab40c5a3ba5df720786", "patch": "@@ -77,6 +77,12 @@ impl<'a, 'gcx, 'tcx> Deref for ProbeContext<'a, 'gcx, 'tcx> {\n struct CandidateStep<'tcx> {\n     self_ty: Ty<'tcx>,\n     autoderefs: usize,\n+    // true if the type results from a dereference of a raw pointer.\n+    // when assembling candidates, we include these steps, but not when\n+    // picking methods. This so that if we have `foo: *const Foo` and `Foo` has methods\n+    // `fn by_raw_ptr(self: *const Self)` and `fn by_ref(&self)`, then\n+    // `foo.by_raw_ptr()` will work and `foo.by_ref()` won't.\n+    from_unsafe_deref: bool,\n     unsize: bool,\n }\n \n@@ -257,6 +263,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             vec![CandidateStep {\n                      self_ty,\n                      autoderefs: 0,\n+                     from_unsafe_deref: false,\n                      unsize: false,\n                  }]\n         };\n@@ -289,14 +296,21 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     -> Option<Vec<CandidateStep<'tcx>>> {\n         // FIXME: we don't need to create the entire steps in one pass\n \n-        let mut autoderef = self.autoderef(span, self_ty);\n+        let mut autoderef = self.autoderef(span, self_ty).include_raw_pointers();\n+        let mut reached_raw_pointer = false;\n         let mut steps: Vec<_> = autoderef.by_ref()\n             .map(|(ty, d)| {\n-                CandidateStep {\n+                let step = CandidateStep {\n                     self_ty: ty,\n                     autoderefs: d,\n+                    from_unsafe_deref: reached_raw_pointer,\n                     unsize: false,\n+                };\n+                if let ty::TyRawPtr(_) = ty.sty {\n+                    // all the subsequent steps will be from_unsafe_deref\n+                    reached_raw_pointer = true;\n                 }\n+                step\n             })\n             .collect();\n \n@@ -322,6 +336,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 steps.push(CandidateStep {\n                     self_ty: self.tcx.mk_slice(elem_ty),\n                     autoderefs: dereferences,\n+                    // this could be from an unsafe deref if we had\n+                    // a *mut/const [T; N]\n+                    from_unsafe_deref: reached_raw_pointer,\n                     unsize: true,\n                 });\n             }\n@@ -830,7 +847,9 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             .iter()\n             .filter(|step| {\n                 debug!(\"pick_core: step={:?}\", step);\n-                !step.self_ty.references_error()\n+                // skip types that are from a type error or that would require dereferencing\n+                // a raw pointer\n+                !step.self_ty.references_error() && !step.from_unsafe_deref\n             }).flat_map(|step| {\n                 self.pick_by_value_method(step).or_else(|| {\n                 self.pick_autorefd_method(step, hir::MutImmutable).or_else(|| {"}]}