{"sha": "8334a58c2f949fd5f1e2c131ae7b614498bae746", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMzRhNThjMmY5NDlmZDVmMWUyYzEzMWFlN2I2MTQ0OThiYWU3NDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-31T19:20:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-31T19:20:30Z"}, "message": "Auto merge of #5909 - khuey:async_yields_async, r=yaahc\n\nAdd a lint for an async block/closure that yields a type that is itself awaitable.\n\nThis catches bugs of the form\n\ntokio::spawn(async move {\n    let f = some_async_thing();\n    f // Oh no I forgot to await f so that work will never complete.\n});\n\nSee the two XXXkhuey comments and the unfixed `_l` structure for things that need more thought.\n\n*Please keep the line below*\nchangelog: none", "tree": {"sha": "334ab3450a5637839ccb9da24402263250dd44b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/334ab3450a5637839ccb9da24402263250dd44b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8334a58c2f949fd5f1e2c131ae7b614498bae746", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8334a58c2f949fd5f1e2c131ae7b614498bae746", "html_url": "https://github.com/rust-lang/rust/commit/8334a58c2f949fd5f1e2c131ae7b614498bae746", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8334a58c2f949fd5f1e2c131ae7b614498bae746/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "001c1c51d2d4b6964a2f0c0c5936bfaacf49a585", "url": "https://api.github.com/repos/rust-lang/rust/commits/001c1c51d2d4b6964a2f0c0c5936bfaacf49a585", "html_url": "https://github.com/rust-lang/rust/commit/001c1c51d2d4b6964a2f0c0c5936bfaacf49a585"}, {"sha": "04912ca115ff153a97d80b604435b10dcb155dd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/04912ca115ff153a97d80b604435b10dcb155dd0", "html_url": "https://github.com/rust-lang/rust/commit/04912ca115ff153a97d80b604435b10dcb155dd0"}], "stats": {"total": 331, "additions": 331, "deletions": 0}, "files": [{"sha": "99a8b1a6293c3c01ec0cb43ce98e28b5629f6e00", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8334a58c2f949fd5f1e2c131ae7b614498bae746/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/8334a58c2f949fd5f1e2c131ae7b614498bae746/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=8334a58c2f949fd5f1e2c131ae7b614498bae746", "patch": "@@ -1512,6 +1512,7 @@ Released 2018-09-13\n [`assertions_on_constants`]: https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n [`assign_op_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern\n [`assign_ops`]: https://rust-lang.github.io/rust-clippy/master/index.html#assign_ops\n+[`async_yields_async`]: https://rust-lang.github.io/rust-clippy/master/index.html#async_yields_async\n [`await_holding_lock`]: https://rust-lang.github.io/rust-clippy/master/index.html#await_holding_lock\n [`bad_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#bad_bit_mask\n [`bind_instead_of_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#bind_instead_of_map"}, {"sha": "88d9d3b5a263d06ee312b6cc0be90f30852e5acf", "filename": "clippy_lints/src/async_yields_async.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/8334a58c2f949fd5f1e2c131ae7b614498bae746/clippy_lints%2Fsrc%2Fasync_yields_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8334a58c2f949fd5f1e2c131ae7b614498bae746/clippy_lints%2Fsrc%2Fasync_yields_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fasync_yields_async.rs?ref=8334a58c2f949fd5f1e2c131ae7b614498bae746", "patch": "@@ -0,0 +1,86 @@\n+use crate::utils::{implements_trait, snippet, span_lint_and_then};\n+use rustc_errors::Applicability;\n+use rustc_hir::{AsyncGeneratorKind, Body, BodyId, ExprKind, GeneratorKind, QPath};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for async blocks that yield values of types\n+    /// that can themselves be awaited.\n+    ///\n+    /// **Why is this bad?** An await is likely missing.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// async fn foo() {}\n+    ///\n+    /// fn bar() {\n+    ///   let x = async {\n+    ///     foo()\n+    ///   };\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// async fn foo() {}\n+    ///\n+    /// fn bar() {\n+    ///   let x = async {\n+    ///     foo().await\n+    ///   };\n+    /// }\n+    /// ```\n+    pub ASYNC_YIELDS_ASYNC,\n+    correctness,\n+    \"async blocks that return a type that can be awaited\"\n+}\n+\n+declare_lint_pass!(AsyncYieldsAsync => [ASYNC_YIELDS_ASYNC]);\n+\n+impl<'tcx> LateLintPass<'tcx> for AsyncYieldsAsync {\n+    fn check_body(&mut self, cx: &LateContext<'tcx>, body: &'tcx Body<'_>) {\n+        use AsyncGeneratorKind::{Block, Closure};\n+        // For functions, with explicitly defined types, don't warn.\n+        // XXXkhuey maybe we should?\n+        if let Some(GeneratorKind::Async(Block | Closure)) = body.generator_kind {\n+            if let Some(future_trait_def_id) = cx.tcx.lang_items().future_trait() {\n+                let body_id = BodyId {\n+                    hir_id: body.value.hir_id,\n+                };\n+                let def_id = cx.tcx.hir().body_owner_def_id(body_id);\n+                let typeck_results = cx.tcx.typeck(def_id);\n+                let expr_ty = typeck_results.expr_ty(&body.value);\n+\n+                if implements_trait(cx, expr_ty, future_trait_def_id, &[]) {\n+                    let return_expr_span = match &body.value.kind {\n+                        // XXXkhuey there has to be a better way.\n+                        ExprKind::Block(block, _) => block.expr.map(|e| e.span),\n+                        ExprKind::Path(QPath::Resolved(_, path)) => Some(path.span),\n+                        _ => None,\n+                    };\n+                    if let Some(return_expr_span) = return_expr_span {\n+                        span_lint_and_then(\n+                            cx,\n+                            ASYNC_YIELDS_ASYNC,\n+                            return_expr_span,\n+                            \"an async construct yields a type which is itself awaitable\",\n+                            |db| {\n+                                db.span_label(body.value.span, \"outer async construct\");\n+                                db.span_label(return_expr_span, \"awaitable value not awaited\");\n+                                db.span_suggestion(\n+                                    return_expr_span,\n+                                    \"consider awaiting this value\",\n+                                    format!(\"{}.await\", snippet(cx, return_expr_span, \"..\")),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            },\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "0eb1d3313660b6e6736ce9cd7f6e274b932f11da", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8334a58c2f949fd5f1e2c131ae7b614498bae746/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8334a58c2f949fd5f1e2c131ae7b614498bae746/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8334a58c2f949fd5f1e2c131ae7b614498bae746", "patch": "@@ -154,6 +154,7 @@ mod arithmetic;\n mod as_conversions;\n mod assertions_on_constants;\n mod assign_ops;\n+mod async_yields_async;\n mod atomic_ordering;\n mod attrs;\n mod await_holding_lock;\n@@ -483,6 +484,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &assertions_on_constants::ASSERTIONS_ON_CONSTANTS,\n         &assign_ops::ASSIGN_OP_PATTERN,\n         &assign_ops::MISREFACTORED_ASSIGN_OP,\n+        &async_yields_async::ASYNC_YIELDS_ASYNC,\n         &atomic_ordering::INVALID_ATOMIC_ORDERING,\n         &attrs::BLANKET_CLIPPY_RESTRICTION_LINTS,\n         &attrs::DEPRECATED_CFG_ATTR,\n@@ -1099,6 +1101,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box unwrap_in_result::UnwrapInResult);\n     store.register_late_pass(|| box self_assignment::SelfAssignment);\n     store.register_late_pass(|| box float_equality_without_abs::FloatEqualityWithoutAbs);\n+    store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1232,6 +1235,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n         LintId::of(&assign_ops::ASSIGN_OP_PATTERN),\n         LintId::of(&assign_ops::MISREFACTORED_ASSIGN_OP),\n+        LintId::of(&async_yields_async::ASYNC_YIELDS_ASYNC),\n         LintId::of(&atomic_ordering::INVALID_ATOMIC_ORDERING),\n         LintId::of(&attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n         LintId::of(&attrs::DEPRECATED_CFG_ATTR),\n@@ -1675,6 +1679,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n \n     store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), vec![\n         LintId::of(&approx_const::APPROX_CONSTANT),\n+        LintId::of(&async_yields_async::ASYNC_YIELDS_ASYNC),\n         LintId::of(&atomic_ordering::INVALID_ATOMIC_ORDERING),\n         LintId::of(&attrs::DEPRECATED_SEMVER),\n         LintId::of(&attrs::MISMATCHED_TARGET_OS),"}, {"sha": "dff19ef440f313ba9665abd73598bae00d8821ee", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8334a58c2f949fd5f1e2c131ae7b614498bae746/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8334a58c2f949fd5f1e2c131ae7b614498bae746/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=8334a58c2f949fd5f1e2c131ae7b614498bae746", "patch": "@@ -52,6 +52,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"assign_ops\",\n     },\n+    Lint {\n+        name: \"async_yields_async\",\n+        group: \"correctness\",\n+        desc: \"async blocks that return a type that can be awaited\",\n+        deprecation: None,\n+        module: \"async_yields_async\",\n+    },\n     Lint {\n         name: \"await_holding_lock\",\n         group: \"pedantic\","}, {"sha": "9b1a7ac3ba9de85493244232abca89ce4d5d5452", "filename": "tests/ui/async_yields_async.fixed", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/8334a58c2f949fd5f1e2c131ae7b614498bae746/tests%2Fui%2Fasync_yields_async.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8334a58c2f949fd5f1e2c131ae7b614498bae746/tests%2Fui%2Fasync_yields_async.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync_yields_async.fixed?ref=8334a58c2f949fd5f1e2c131ae7b614498bae746", "patch": "@@ -0,0 +1,68 @@\n+// run-rustfix\n+// edition:2018\n+\n+#![feature(async_closure)]\n+#![warn(clippy::async_yields_async)]\n+\n+use core::future::Future;\n+use core::pin::Pin;\n+use core::task::{Context, Poll};\n+\n+struct CustomFutureType;\n+\n+impl Future for CustomFutureType {\n+    type Output = u8;\n+\n+    fn poll(self: Pin<&mut Self>, _: &mut Context) -> Poll<Self::Output> {\n+        Poll::Ready(3)\n+    }\n+}\n+\n+fn custom_future_type_ctor() -> CustomFutureType {\n+    CustomFutureType\n+}\n+\n+async fn f() -> CustomFutureType {\n+    // Don't warn for functions since you have to explicitly declare their\n+    // return types.\n+    CustomFutureType\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    let _f = {\n+        3\n+    };\n+    let _g = async {\n+        3\n+    };\n+    let _h = async {\n+        async {\n+            3\n+        }.await\n+    };\n+    let _i = async {\n+        CustomFutureType.await\n+    };\n+    let _i = async || {\n+        3\n+    };\n+    let _j = async || {\n+        async {\n+            3\n+        }.await\n+    };\n+    let _k = async || {\n+        CustomFutureType.await\n+    };\n+    let _l = async || CustomFutureType.await;\n+    let _m = async || {\n+        println!(\"I'm bored\");\n+        // Some more stuff\n+\n+        // Finally something to await\n+        CustomFutureType.await\n+    };\n+    let _n = async || custom_future_type_ctor();\n+    let _o = async || f();\n+}"}, {"sha": "731c094edb42b16b7a8488293fb09affc43d92db", "filename": "tests/ui/async_yields_async.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/8334a58c2f949fd5f1e2c131ae7b614498bae746/tests%2Fui%2Fasync_yields_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8334a58c2f949fd5f1e2c131ae7b614498bae746/tests%2Fui%2Fasync_yields_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync_yields_async.rs?ref=8334a58c2f949fd5f1e2c131ae7b614498bae746", "patch": "@@ -0,0 +1,68 @@\n+// run-rustfix\n+// edition:2018\n+\n+#![feature(async_closure)]\n+#![warn(clippy::async_yields_async)]\n+\n+use core::future::Future;\n+use core::pin::Pin;\n+use core::task::{Context, Poll};\n+\n+struct CustomFutureType;\n+\n+impl Future for CustomFutureType {\n+    type Output = u8;\n+\n+    fn poll(self: Pin<&mut Self>, _: &mut Context) -> Poll<Self::Output> {\n+        Poll::Ready(3)\n+    }\n+}\n+\n+fn custom_future_type_ctor() -> CustomFutureType {\n+    CustomFutureType\n+}\n+\n+async fn f() -> CustomFutureType {\n+    // Don't warn for functions since you have to explicitly declare their\n+    // return types.\n+    CustomFutureType\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    let _f = {\n+        3\n+    };\n+    let _g = async {\n+        3\n+    };\n+    let _h = async {\n+        async {\n+            3\n+        }\n+    };\n+    let _i = async {\n+        CustomFutureType\n+    };\n+    let _i = async || {\n+        3\n+    };\n+    let _j = async || {\n+        async {\n+            3\n+        }\n+    };\n+    let _k = async || {\n+        CustomFutureType\n+    };\n+    let _l = async || CustomFutureType;\n+    let _m = async || {\n+        println!(\"I'm bored\");\n+        // Some more stuff\n+\n+        // Finally something to await\n+        CustomFutureType\n+    };\n+    let _n = async || custom_future_type_ctor();\n+    let _o = async || f();\n+}"}, {"sha": "17d0c3751064ff2b2ddf604c4dc78af7f6d04676", "filename": "tests/ui/async_yields_async.stderr", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/8334a58c2f949fd5f1e2c131ae7b614498bae746/tests%2Fui%2Fasync_yields_async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8334a58c2f949fd5f1e2c131ae7b614498bae746/tests%2Fui%2Fasync_yields_async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync_yields_async.stderr?ref=8334a58c2f949fd5f1e2c131ae7b614498bae746", "patch": "@@ -0,0 +1,96 @@\n+error: an async construct yields a type which is itself awaitable\n+  --> $DIR/async_yields_async.rs:40:9\n+   |\n+LL |        let _h = async {\n+   |   ____________________-\n+LL |  |         async {\n+   |  |_________^\n+LL | ||             3\n+LL | ||         }\n+   | ||_________^ awaitable value not awaited\n+LL |  |     };\n+   |  |_____- outer async construct\n+   |\n+   = note: `-D clippy::async-yields-async` implied by `-D warnings`\n+help: consider awaiting this value\n+   |\n+LL |         async {\n+LL |             3\n+LL |         }.await\n+   |\n+\n+error: an async construct yields a type which is itself awaitable\n+  --> $DIR/async_yields_async.rs:45:9\n+   |\n+LL |       let _i = async {\n+   |  ____________________-\n+LL | |         CustomFutureType\n+   | |         ^^^^^^^^^^^^^^^^\n+   | |         |\n+   | |         awaitable value not awaited\n+   | |         help: consider awaiting this value: `CustomFutureType.await`\n+LL | |     };\n+   | |_____- outer async construct\n+\n+error: an async construct yields a type which is itself awaitable\n+  --> $DIR/async_yields_async.rs:51:9\n+   |\n+LL |        let _j = async || {\n+   |   _______________________-\n+LL |  |         async {\n+   |  |_________^\n+LL | ||             3\n+LL | ||         }\n+   | ||_________^ awaitable value not awaited\n+LL |  |     };\n+   |  |_____- outer async construct\n+   |\n+help: consider awaiting this value\n+   |\n+LL |         async {\n+LL |             3\n+LL |         }.await\n+   |\n+\n+error: an async construct yields a type which is itself awaitable\n+  --> $DIR/async_yields_async.rs:56:9\n+   |\n+LL |       let _k = async || {\n+   |  _______________________-\n+LL | |         CustomFutureType\n+   | |         ^^^^^^^^^^^^^^^^\n+   | |         |\n+   | |         awaitable value not awaited\n+   | |         help: consider awaiting this value: `CustomFutureType.await`\n+LL | |     };\n+   | |_____- outer async construct\n+\n+error: an async construct yields a type which is itself awaitable\n+  --> $DIR/async_yields_async.rs:58:23\n+   |\n+LL |     let _l = async || CustomFutureType;\n+   |                       ^^^^^^^^^^^^^^^^\n+   |                       |\n+   |                       outer async construct\n+   |                       awaitable value not awaited\n+   |                       help: consider awaiting this value: `CustomFutureType.await`\n+\n+error: an async construct yields a type which is itself awaitable\n+  --> $DIR/async_yields_async.rs:64:9\n+   |\n+LL |       let _m = async || {\n+   |  _______________________-\n+LL | |         println!(\"I'm bored\");\n+LL | |         // Some more stuff\n+LL | |\n+LL | |         // Finally something to await\n+LL | |         CustomFutureType\n+   | |         ^^^^^^^^^^^^^^^^\n+   | |         |\n+   | |         awaitable value not awaited\n+   | |         help: consider awaiting this value: `CustomFutureType.await`\n+LL | |     };\n+   | |_____- outer async construct\n+\n+error: aborting due to 6 previous errors\n+"}]}