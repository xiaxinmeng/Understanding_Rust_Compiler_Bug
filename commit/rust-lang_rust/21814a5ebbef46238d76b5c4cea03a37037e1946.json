{"sha": "21814a5ebbef46238d76b5c4cea03a37037e1946", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxODE0YTVlYmJlZjQ2MjM4ZDc2YjVjNGNlYTAzYTM3MDM3ZTE5NDY=", "commit": {"author": {"name": "oldmanmike", "email": "oldmanmike.dev@gmail.com", "date": "2016-11-06T01:31:57Z"}, "committer": {"name": "oldmanmike", "email": "oldmanmike.dev@gmail.com", "date": "2016-11-06T01:31:57Z"}, "message": "Add unary and binary tests for incr-comp", "tree": {"sha": "55c8c25bfaf620e0788f2894f9f91664db080cc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55c8c25bfaf620e0788f2894f9f91664db080cc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21814a5ebbef46238d76b5c4cea03a37037e1946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21814a5ebbef46238d76b5c4cea03a37037e1946", "html_url": "https://github.com/rust-lang/rust/commit/21814a5ebbef46238d76b5c4cea03a37037e1946", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21814a5ebbef46238d76b5c4cea03a37037e1946/comments", "author": null, "committer": null, "parents": [{"sha": "cae6ab1c458ade22b4c228fcd4195917c96e2465", "url": "https://api.github.com/repos/rust-lang/rust/commits/cae6ab1c458ade22b4c228fcd4195917c96e2465", "html_url": "https://github.com/rust-lang/rust/commit/cae6ab1c458ade22b4c228fcd4195917c96e2465"}], "stats": {"total": 497, "additions": 497, "deletions": 0}, "files": [{"sha": "591a24dc627f5c9c0d72bda8893a678ece64926d", "filename": "src/test/incremental/hashes/unary_and_binary_exprs.rs", "status": "added", "additions": 497, "deletions": 0, "changes": 497, "blob_url": "https://github.com/rust-lang/rust/blob/21814a5ebbef46238d76b5c4cea03a37037e1946/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21814a5ebbef46238d76b5c4cea03a37037e1946/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs?ref=21814a5ebbef46238d76b5c4cea03a37037e1946", "patch": "@@ -0,0 +1,497 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for struct definitions.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph -Z force-overflow-checks=off\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+\n+// Change constant operand of negation -----------------------------------------\n+#[cfg(cfail1)]\n+pub fn const_negation() -> i32 {\n+    -10\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn const_negation() -> i32 {\n+    -1\n+}\n+\n+\n+// Change constant operand of bitwise not --------------------------------------\n+#[cfg(cfail1)]\n+pub fn const_bitwise_not() -> i32 {\n+    !100\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn const_bitwise_not() -> i32 {\n+    !99\n+}\n+\n+\n+// Change variable operand of negation -----------------------------------------\n+#[cfg(cfail1)]\n+pub fn var_negation(x: i32) -> i32 {\n+    -x\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn var_negation(y: i32) -> i32 {\n+    -y\n+}\n+\n+\n+// Change variable operand of bitwise not --------------------------------------\n+#[cfg(cfail1)]\n+pub fn var_bitwise_not(x: i32) -> i32 {\n+    !x\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn var_bitwise_not(y: i32) -> i32 {\n+    !y\n+}\n+\n+\n+// Change variable operand of deref --------------------------------------------\n+#[cfg(cfail1)]\n+pub fn var_deref(x: &i32) -> i32 {\n+    *x\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn var_deref(y: &i32) -> i32 {\n+    *y\n+}\n+\n+\n+// Change first constant operand of addition -----------------------------------\n+#[cfg(cfail1)]\n+pub fn first_const_add() -> i32 {\n+    1 + 3\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn first_const_add() -> i32 {\n+    2 + 3\n+}\n+\n+\n+// Change second constant operand of addition -----------------------------------\n+#[cfg(cfail1)]\n+pub fn second_const_add() -> i32 {\n+    1 + 2\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn second_const_add() -> i32 {\n+    1 + 3\n+}\n+\n+\n+// Change first variable operand of addition -----------------------------------\n+#[cfg(cfail1)]\n+pub fn first_var_add(a: i32) -> i32 {\n+    a + 2\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn first_var_add(b: i32) -> i32 {\n+    b + 3\n+}\n+\n+\n+// Change second variable operand of addition ----------------------------------\n+#[cfg(cfail1)]\n+pub fn second_var_add(a: i32) -> i32 {\n+    1 + a\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn second_var_add(b: i32) -> i32 {\n+    1 + b\n+}\n+\n+\n+// Change operator from + to - -------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn plus_to_minus(a: i32) -> i32 {\n+    1 + a\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn plus_to_minus(a: i32) -> i32 {\n+    1 - a\n+}\n+\n+\n+// Change operator from + to * -------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn plus_to_mult(a: i32) -> i32 {\n+    1 + a\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn plus_to_mult(a: i32) -> i32 {\n+    1 * a\n+}\n+\n+\n+// Change operator from + to / -------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn plus_to_div(a: i32) -> i32 {\n+    1 + a\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn plus_to_div(a: i32) -> i32 {\n+    1 / a\n+}\n+\n+\n+// Change operator from + to % -------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn plus_to_mod(a: i32) -> i32 {\n+    1 + a\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn plus_to_mod(a: i32) -> i32 {\n+    1 % a\n+}\n+\n+\n+// Change operator from && to || -----------------------------------------------\n+#[cfg(cfail1)]\n+pub fn and_to_or(a: bool, b: bool) -> bool {\n+    a && b\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn and_to_or(a: bool, b: bool) -> bool {\n+    a || b\n+}\n+\n+\n+\n+// Change operator from & to | -------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn bitwise_and_to_bitwise_or(a: i32) -> i32 {\n+    1 & a\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn bitwise_and_to_bitwise_or(a: i32) -> i32 {\n+    1 | a\n+}\n+\n+\n+\n+// Change operator from & to ^ -------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn bitwise_and_to_bitwise_xor(a: i32) -> i32 {\n+    1 & a\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn bitwise_and_to_bitwise_xor(a: i32) -> i32 {\n+    1 ^ a\n+}\n+\n+\n+\n+// Change operator from & to << ------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn bitwise_and_to_lshift(a: i32) -> i32 {\n+    a & 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn bitwise_and_to_lshift(a: i32) -> i32 {\n+    a << 1\n+}\n+\n+\n+\n+// Change operator from & to >> ------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn bitwise_and_to_rshift(a: i32) -> i32 {\n+    a & 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn bitwise_and_to_rshift(a: i32) -> i32 {\n+    a >> 1\n+}\n+\n+\n+\n+// Change operator from == to != -----------------------------------------------\n+#[cfg(cfail1)]\n+pub fn eq_to_uneq(a: i32) -> bool {\n+    a == 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn eq_to_uneq(a: i32) -> bool {\n+    a != 1\n+}\n+\n+\n+\n+// Change operator from == to < ------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn eq_to_lt(a: i32) -> bool {\n+    a == 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn eq_to_lt(a: i32) -> bool {\n+    a < 1\n+}\n+\n+\n+\n+// Change operator from == to > ------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn eq_to_gt(a: i32) -> bool {\n+    a == 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn eq_to_gt(a: i32) -> bool {\n+    a > 1\n+}\n+\n+\n+\n+// Change operator from == to <= -----------------------------------------------\n+#[cfg(cfail1)]\n+pub fn eq_to_le(a: i32) -> bool {\n+    a == 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn eq_to_le(a: i32) -> bool {\n+    a <= 1\n+}\n+\n+\n+\n+// Change operator from == to >= -----------------------------------------------\n+#[cfg(cfail1)]\n+pub fn eq_to_ge(a: i32) -> bool {\n+    a == 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn eq_to_ge(a: i32) -> bool {\n+    a >= 1\n+}\n+\n+\n+\n+// Change type in cast expression ----------------------------------------------\n+#[cfg(cfail1)]\n+pub fn type_cast(a: u8) -> u64 {\n+    let b = a as i32;\n+    let c = b as u64;\n+    c\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn type_cast(a: u8) -> u64 {\n+    let b = a as u32;\n+    let c = b as u64;\n+    c\n+}\n+\n+\n+\n+// Change value in cast expression ---------------------------------------------\n+#[cfg(cfail1)]\n+pub fn value_cast(a: u32) -> i32 {\n+    1 as i32\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn value_cast(a: u32) -> i32 {\n+    2 as i32\n+}\n+\n+\n+\n+// Change l-value in assignment ------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn lvalue() -> i32 {\n+    let x = 10;\n+    x\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn lvalue() -> i32 {\n+    let y = 10;\n+    y\n+}\n+\n+\n+\n+// Change r-value in assignment ------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn rvalue() -> i32 {\n+    let x = 10;\n+    x\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn rvalue() -> i32 {\n+    let x = 11;\n+    x\n+}\n+\n+\n+\n+// Change index into slice -----------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn index_to_slice() -> i32 {\n+    let xs = [1,2,3,4,5];\n+    xs[1]\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn index_to_slice() -> i32 {\n+    let xs = &[1,2,3,4,5];\n+    xs[1]\n+}"}]}