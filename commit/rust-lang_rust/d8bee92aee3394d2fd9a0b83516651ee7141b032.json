{"sha": "d8bee92aee3394d2fd9a0b83516651ee7141b032", "node_id": "C_kwDOAAsO6NoAKGQ4YmVlOTJhZWUzMzk0ZDJmZDlhMGI4MzUxNjY1MWVlNzE0MWIwMzI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-11-13T20:40:26Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-11-13T20:48:27Z"}, "message": "rename track-raw-pointers flag to tag-raw-pointers", "tree": {"sha": "383d6af682ab7f5c443bc1f141f2e6ef98c4e43e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/383d6af682ab7f5c443bc1f141f2e6ef98c4e43e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8bee92aee3394d2fd9a0b83516651ee7141b032", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8bee92aee3394d2fd9a0b83516651ee7141b032", "html_url": "https://github.com/rust-lang/rust/commit/d8bee92aee3394d2fd9a0b83516651ee7141b032", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8bee92aee3394d2fd9a0b83516651ee7141b032/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8b976eb350acec83280a0cd1ca3ac99faff67bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8b976eb350acec83280a0cd1ca3ac99faff67bc", "html_url": "https://github.com/rust-lang/rust/commit/a8b976eb350acec83280a0cd1ca3ac99faff67bc"}], "stats": {"total": 63, "additions": 34, "deletions": 29}, "files": [{"sha": "487f8aeb2baf0f5d25a211ca91261a5b4f5fbcec", "filename": "README.md", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d8bee92aee3394d2fd9a0b83516651ee7141b032/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/d8bee92aee3394d2fd9a0b83516651ee7141b032/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=d8bee92aee3394d2fd9a0b83516651ee7141b032", "patch": "@@ -276,14 +276,13 @@ environment variable:\n   is popped from a borrow stack (which is where the tag becomes invalid and any\n   future use of it will error).  This helps you in finding out why UB is\n   happening and where in your code would be a good place to look for it.\n-* `-Zmiri-track-raw-pointers` makes Stacked Borrows track a pointer tag even for\n-  raw pointers. This can make valid code fail to pass the checks, but also can\n-  help identify latent aliasing issues in code that Miri accepts by default. You\n-  can recognize false positives by `<untagged>` occurring in the message -- this\n-  indicates a pointer that was cast from an integer, so Miri was unable to track\n-  this pointer. Note that it is not currently guaranteed that code that works\n-  with `-Zmiri-track-raw-pointers` also works without\n-  `-Zmiri-track-raw-pointers`, but for the vast majority of code, this will be the case.\n+* `-Zmiri-tag-raw-pointers` makes Stacked Borrows assign proper tags even for raw pointers. This can\n+  make valid code using int-to-ptr casts fail to pass the checks, but also can help identify latent\n+  aliasing issues in code that Miri accepts by default. You can recognize false positives by\n+  `<untagged>` occurring in the message -- this indicates a pointer that was cast from an integer,\n+  so Miri was unable to track this pointer. Note that it is not currently guaranteed that code that\n+  works with `-Zmiri-tag-raw-pointers` also works without `-Zmiri-tag-raw-pointers`, but for the\n+  vast majority of code, this will be the case.\n \n [function ABI]: https://doc.rust-lang.org/reference/items/functions.html#extern-function-qualifier\n "}, {"sha": "672c7e8c9675cb82e03deab08d9b102a184be05c", "filename": "src/bin/miri.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d8bee92aee3394d2fd9a0b83516651ee7141b032/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bee92aee3394d2fd9a0b83516651ee7141b032/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=d8bee92aee3394d2fd9a0b83516651ee7141b032", "patch": "@@ -359,8 +359,14 @@ fn main() {\n                 \"-Zmiri-panic-on-unsupported\" => {\n                     miri_config.panic_on_unsupported = true;\n                 }\n+                \"-Zmiri-tag-raw-pointers\" => {\n+                    miri_config.tag_raw = true;\n+                }\n                 \"-Zmiri-track-raw-pointers\" => {\n-                    miri_config.track_raw = true;\n+                    eprintln!(\n+                        \"WARNING: -Zmiri-track-raw-pointers has been renamed to -Zmiri-tag-raw-pointers, the old name is deprecated.\"\n+                    );\n+                    miri_config.tag_raw = true;\n                 }\n                 \"--\" => {\n                     after_dashdash = true;"}, {"sha": "e3f252b50a9285937232bf3ddbf0b66bbbbc415b", "filename": "src/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8bee92aee3394d2fd9a0b83516651ee7141b032/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bee92aee3394d2fd9a0b83516651ee7141b032/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=d8bee92aee3394d2fd9a0b83516651ee7141b032", "patch": "@@ -87,7 +87,7 @@ pub struct MiriConfig {\n     /// The allocation id to report about.\n     pub tracked_alloc_id: Option<AllocId>,\n     /// Whether to track raw pointers in stacked borrows.\n-    pub track_raw: bool,\n+    pub tag_raw: bool,\n     /// Determine if data race detection should be enabled\n     pub data_race_detector: bool,\n     /// Rate of spurious failures for compare_exchange_weak atomic operations,\n@@ -116,7 +116,7 @@ impl Default for MiriConfig {\n             tracked_pointer_tag: None,\n             tracked_call_id: None,\n             tracked_alloc_id: None,\n-            track_raw: false,\n+            tag_raw: false,\n             data_race_detector: true,\n             cmpxchg_weak_failure_rate: 0.8,\n             measureme_out: None,"}, {"sha": "201854e76fa46052bfed004367fb6fc4f7dd47de", "filename": "src/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8bee92aee3394d2fd9a0b83516651ee7141b032/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bee92aee3394d2fd9a0b83516651ee7141b032/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=d8bee92aee3394d2fd9a0b83516651ee7141b032", "patch": "@@ -194,7 +194,7 @@ impl MemoryExtra {\n             Some(RefCell::new(stacked_borrows::GlobalState::new(\n                 config.tracked_pointer_tag,\n                 config.tracked_call_id,\n-                config.track_raw,\n+                config.tag_raw,\n             )))\n         } else {\n             None"}, {"sha": "57c09ea40b68b93420b125e562ebd6bf73e5d9f6", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d8bee92aee3394d2fd9a0b83516651ee7141b032/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bee92aee3394d2fd9a0b83516651ee7141b032/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=d8bee92aee3394d2fd9a0b83516651ee7141b032", "patch": "@@ -105,7 +105,7 @@ pub struct GlobalState {\n     /// The call id to trace\n     tracked_call_id: Option<CallId>,\n     /// Whether to track raw pointers.\n-    track_raw: bool,\n+    tag_raw: bool,\n }\n /// Memory extra state gives us interior mutable access to the global state.\n pub type MemoryExtra = RefCell<GlobalState>;\n@@ -156,7 +156,7 @@ impl GlobalState {\n     pub fn new(\n         tracked_pointer_tag: Option<PtrId>,\n         tracked_call_id: Option<CallId>,\n-        track_raw: bool,\n+        tag_raw: bool,\n     ) -> Self {\n         GlobalState {\n             next_ptr_id: NonZeroU64::new(1).unwrap(),\n@@ -165,7 +165,7 @@ impl GlobalState {\n             active_calls: FxHashSet::default(),\n             tracked_pointer_tag,\n             tracked_call_id,\n-            track_raw,\n+            tag_raw,\n         }\n     }\n \n@@ -532,7 +532,7 @@ impl Stacks {\n                 MiriMemoryKind::Rust | MiriMemoryKind::C | MiriMemoryKind::WinHeap,\n             ) => {\n                 let tag =\n-                    if extra.track_raw { extra.base_tag(id) } else { extra.base_tag_untagged(id) };\n+                    if extra.tag_raw { extra.base_tag(id) } else { extra.base_tag_untagged(id) };\n                 (tag, Permission::SharedReadWrite)\n             }\n         };\n@@ -719,7 +719,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let mem_extra = this.memory.extra.stacked_borrows.as_mut().unwrap().get_mut();\n             match kind {\n                 // Give up tracking for raw pointers.\n-                RefKind::Raw { .. } if !mem_extra.track_raw => SbTag::Untagged,\n+                RefKind::Raw { .. } if !mem_extra.tag_raw => SbTag::Untagged,\n                 // All other pointers are properly tracked.\n                 _ => SbTag::Tagged(mem_extra.new_ptr()),\n             }"}, {"sha": "19965639489bf69ed9b7e269f7d62a5ba852aba4", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8bee92aee3394d2fd9a0b83516651ee7141b032/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/d8bee92aee3394d2fd9a0b83516651ee7141b032/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=d8bee92aee3394d2fd9a0b83516651ee7141b032", "patch": "@@ -127,7 +127,7 @@ def test_cargo_miri_test():\n     test(\"`cargo miri test` (raw-ptr tracking)\",\n         cargo_miri(\"test\"),\n         default_ref, \"test.stderr-empty.ref\",\n-        env={'MIRIFLAGS': \"-Zmiri-track-raw-pointers\"},\n+        env={'MIRIFLAGS': \"-Zmiri-tag-raw-pointers\"},\n     )\n     test(\"`cargo miri test` (with filter)\",\n         cargo_miri(\"test\") + [\"--\", \"--format=pretty\", \"le1\"],"}, {"sha": "58fc3530d7bfe46c82e73ff972d2628aa58cfdfe", "filename": "tests/compile-fail/box-cell-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8bee92aee3394d2fd9a0b83516651ee7141b032/tests%2Fcompile-fail%2Fbox-cell-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bee92aee3394d2fd9a0b83516651ee7141b032/tests%2Fcompile-fail%2Fbox-cell-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbox-cell-alias.rs?ref=d8bee92aee3394d2fd9a0b83516651ee7141b032", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-track-raw-pointers\n+// compile-flags: -Zmiri-tag-raw-pointers\n \n // Taken from <https://github.com/rust-lang/unsafe-code-guidelines/issues/194#issuecomment-520934222>.\n "}, {"sha": "0d6d0198fbe9c3fa01f4b4f08808535766eb1100", "filename": "tests/compile-fail/stacked_borrows/raw_tracking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8bee92aee3394d2fd9a0b83516651ee7141b032/tests%2Fcompile-fail%2Fstacked_borrows%2Fraw_tracking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bee92aee3394d2fd9a0b83516651ee7141b032/tests%2Fcompile-fail%2Fstacked_borrows%2Fraw_tracking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fraw_tracking.rs?ref=d8bee92aee3394d2fd9a0b83516651ee7141b032", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-track-raw-pointers\n+// compile-flags: -Zmiri-tag-raw-pointers\n //! This demonstrates a provenance problem that requires tracking of raw pointers to be detected.\n \n fn main() {"}, {"sha": "14d5d77a2bb6992ec6f158ffa9bdc8e2ace9bca9", "filename": "tests/compile-fail/stacked_borrows/zst_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8bee92aee3394d2fd9a0b83516651ee7141b032/tests%2Fcompile-fail%2Fstacked_borrows%2Fzst_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bee92aee3394d2fd9a0b83516651ee7141b032/tests%2Fcompile-fail%2Fstacked_borrows%2Fzst_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fzst_slice.rs?ref=d8bee92aee3394d2fd9a0b83516651ee7141b032", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-track-raw-pointers\n+// compile-flags: -Zmiri-tag-raw-pointers\n // error-pattern: does not have an appropriate item in the borrow stack\n \n fn main() {"}, {"sha": "842ba0f4a8741eceef8d3e317b34194639f16dd8", "filename": "tests/run-pass/btreemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8bee92aee3394d2fd9a0b83516651ee7141b032/tests%2Frun-pass%2Fbtreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bee92aee3394d2fd9a0b83516651ee7141b032/tests%2Frun-pass%2Fbtreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbtreemap.rs?ref=d8bee92aee3394d2fd9a0b83516651ee7141b032", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-track-raw-pointers\n+// compile-flags: -Zmiri-tag-raw-pointers\n #![feature(btree_drain_filter)]\n use std::collections::{BTreeMap, BTreeSet};\n use std::mem;"}, {"sha": "16ca8a0d2eff24f2ba928f64fe4637e02bb306ae", "filename": "tests/run-pass/concurrency/tls_lib_drop_single_thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8bee92aee3394d2fd9a0b83516651ee7141b032/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop_single_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bee92aee3394d2fd9a0b83516651ee7141b032/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop_single_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop_single_thread.rs?ref=d8bee92aee3394d2fd9a0b83516651ee7141b032", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-track-raw-pointers\n+// compile-flags: -Zmiri-tag-raw-pointers\n //! Check that destructors of the thread locals are executed on all OSes.\n #![feature(thread_local_const_init)]\n "}, {"sha": "e00d9df32eec7fea6708660238be4b0dc43bdb6c", "filename": "tests/run-pass/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8bee92aee3394d2fd9a0b83516651ee7141b032/tests%2Frun-pass%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bee92aee3394d2fd9a0b83516651ee7141b032/tests%2Frun-pass%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frc.rs?ref=d8bee92aee3394d2fd9a0b83516651ee7141b032", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-track-raw-pointers\n+// compile-flags: -Zmiri-tag-raw-pointers\n #![feature(new_uninit)]\n #![feature(get_mut_unchecked)]\n "}, {"sha": "9d98c44741b4454b0c3801e8c76728bb3aa27c64", "filename": "tests/run-pass/slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8bee92aee3394d2fd9a0b83516651ee7141b032/tests%2Frun-pass%2Fslices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bee92aee3394d2fd9a0b83516651ee7141b032/tests%2Frun-pass%2Fslices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fslices.rs?ref=d8bee92aee3394d2fd9a0b83516651ee7141b032", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-track-raw-pointers\n+// compile-flags: -Zmiri-tag-raw-pointers\n #![feature(new_uninit)]\n #![feature(slice_as_chunks)]\n #![feature(slice_partition_dedup)]"}, {"sha": "8aea945f90939fdd553176c54b9c7e88bdb3e3e5", "filename": "tests/run-pass/stacked-borrows/stacked-borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8bee92aee3394d2fd9a0b83516651ee7141b032/tests%2Frun-pass%2Fstacked-borrows%2Fstacked-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bee92aee3394d2fd9a0b83516651ee7141b032/tests%2Frun-pass%2Fstacked-borrows%2Fstacked-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstacked-borrows%2Fstacked-borrows.rs?ref=d8bee92aee3394d2fd9a0b83516651ee7141b032", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-track-raw-pointers\n+// compile-flags: -Zmiri-tag-raw-pointers\n use std::ptr;\n     \n // Test various stacked-borrows-related things."}, {"sha": "6998ec6e59b9b913b68351eab66df599c8a83572", "filename": "tests/run-pass/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8bee92aee3394d2fd9a0b83516651ee7141b032/tests%2Frun-pass%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bee92aee3394d2fd9a0b83516651ee7141b032/tests%2Frun-pass%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstrings.rs?ref=d8bee92aee3394d2fd9a0b83516651ee7141b032", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-track-raw-pointers\n+// compile-flags: -Zmiri-tag-raw-pointers\n \n fn empty() -> &'static str {\n     \"\""}, {"sha": "c0cf42134527c6d3aa146831d8ec43cd37edb74b", "filename": "tests/run-pass/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8bee92aee3394d2fd9a0b83516651ee7141b032/tests%2Frun-pass%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bee92aee3394d2fd9a0b83516651ee7141b032/tests%2Frun-pass%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvec.rs?ref=d8bee92aee3394d2fd9a0b83516651ee7141b032", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-track-raw-pointers\n+// compile-flags: -Zmiri-tag-raw-pointers\n // Gather all references from a mutable iterator and make sure Miri notices if\n // using them is dangerous.\n fn test_all_refs<'a, T: 'a>(dummy: &mut T, iter: impl Iterator<Item = &'a mut T>) {"}, {"sha": "f45c21d20781df39a5c3c366d95af871144eb171", "filename": "tests/run-pass/vecdeque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8bee92aee3394d2fd9a0b83516651ee7141b032/tests%2Frun-pass%2Fvecdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bee92aee3394d2fd9a0b83516651ee7141b032/tests%2Frun-pass%2Fvecdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvecdeque.rs?ref=d8bee92aee3394d2fd9a0b83516651ee7141b032", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-track-raw-pointers\n+// compile-flags: -Zmiri-tag-raw-pointers\n use std::collections::VecDeque;\n \n fn test_all_refs<'a, T: 'a>(dummy: &mut T, iter: impl Iterator<Item = &'a mut T>) {"}]}