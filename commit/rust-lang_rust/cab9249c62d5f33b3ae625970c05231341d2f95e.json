{"sha": "cab9249c62d5f33b3ae625970c05231341d2f95e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYjkyNDljNjJkNWYzM2IzYWU2MjU5NzBjMDUyMzEzNDFkMmY5NWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-20T02:40:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-20T02:40:39Z"}, "message": "auto merge of #6625 : cmr/rust/constops, r=Aatch", "tree": {"sha": "6a0283f033157217e3b2315951562acd70ddc2e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a0283f033157217e3b2315951562acd70ddc2e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cab9249c62d5f33b3ae625970c05231341d2f95e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cab9249c62d5f33b3ae625970c05231341d2f95e", "html_url": "https://github.com/rust-lang/rust/commit/cab9249c62d5f33b3ae625970c05231341d2f95e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cab9249c62d5f33b3ae625970c05231341d2f95e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9283dfe0b4dfbad176821ed93df6d519ad58423a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9283dfe0b4dfbad176821ed93df6d519ad58423a", "html_url": "https://github.com/rust-lang/rust/commit/9283dfe0b4dfbad176821ed93df6d519ad58423a"}, {"sha": "808c5b8d4e479b5e0fd336f8290fda2f0c429257", "url": "https://api.github.com/repos/rust-lang/rust/commits/808c5b8d4e479b5e0fd336f8290fda2f0c429257", "html_url": "https://github.com/rust-lang/rust/commit/808c5b8d4e479b5e0fd336f8290fda2f0c429257"}], "stats": {"total": 191, "additions": 177, "deletions": 14}, "files": [{"sha": "9198991e5360e7e0635df886ff1e1d6ee3a27967", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cab9249c62d5f33b3ae625970c05231341d2f95e/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cab9249c62d5f33b3ae625970c05231341d2f95e/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=cab9249c62d5f33b3ae625970c05231341d2f95e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use core::hashmap::HashMap;\n-use core::libc::c_uint;\n+use core::libc::{c_uint, c_ushort};\n \n pub type Opcode = u32;\n pub type Bool = c_uint;\n@@ -221,7 +221,7 @@ pub mod llvm {\n     use super::{SectionIteratorRef, TargetDataRef, TypeKind, TypeRef, UseRef};\n     use super::{ValueRef};\n \n-    use core::libc::{c_char, c_int, c_longlong, c_uint, c_ulonglong};\n+    use core::libc::{c_char, c_int, c_longlong, c_ushort, c_uint, c_ulonglong};\n \n     #[link_args = \"-Lrustllvm -lrustllvm\"]\n     #[link_name = \"rustllvm\"]\n@@ -451,6 +451,10 @@ pub mod llvm {\n         /* all zeroes */\n         #[fast_ffi]\n         pub unsafe fn LLVMConstAllOnes(Ty: TypeRef) -> ValueRef;\n+        #[fast_ffi]\n+        pub unsafe fn LLVMConstICmp(Pred: c_ushort, V1: ValueRef, V2: ValueRef) -> ValueRef;\n+        #[fast_ffi]\n+        pub unsafe fn LLVMConstFCmp(Pred: c_ushort, V1: ValueRef, V2: ValueRef) -> ValueRef;\n         /* only for int/vector */\n         #[fast_ffi]\n         pub unsafe fn LLVMGetUndef(Ty: TypeRef) -> ValueRef;\n@@ -1914,6 +1918,16 @@ pub fn SetLinkage(Global: ValueRef, Link: Linkage) {\n     }\n }\n \n+pub fn ConstICmp(Pred: IntPredicate, V1: ValueRef, V2: ValueRef) -> ValueRef {\n+    unsafe {\n+        llvm::LLVMConstICmp(Pred as c_ushort, V1, V2)\n+    }\n+}\n+pub fn ConstFCmp(Pred: RealPredicate, V1: ValueRef, V2: ValueRef) -> ValueRef {\n+    unsafe {\n+        llvm::LLVMConstFCmp(Pred as c_ushort, V1, V2)\n+    }\n+}\n /* Memory-managed object interface to type handles. */\n \n pub struct TypeNames {"}, {"sha": "22014fa330414a56a03820925b1d96ce45160f73", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 45, "deletions": 12, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/cab9249c62d5f33b3ae625970c05231341d2f95e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cab9249c62d5f33b3ae625970c05231341d2f95e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=cab9249c62d5f33b3ae625970c05231341d2f95e", "patch": "@@ -9,8 +9,11 @@\n // except according to those terms.\n \n use back::abi;\n-use lib::llvm::{llvm, SetLinkage, PrivateLinkage,\n-                ValueRef, TypeRef, Bool, True, False};\n+use lib::llvm::{llvm, ConstFCmp, ConstICmp, SetLinkage, PrivateLinkage, ValueRef, TypeRef, Bool,\n+    True, False};\n+use lib::llvm::{IntEQ, IntNE, IntUGT, IntUGE, IntULT, IntULE, IntSGT, IntSGE, IntSLT, IntSLE,\n+    RealOEQ, RealOGT, RealOGE, RealOLT, RealOLE, RealONE};\n+\n use metadata::csearch;\n use middle::const_eval;\n use middle::trans::adt;\n@@ -280,8 +283,8 @@ fn const_expr_unadjusted(cx: @CrateContext, e: @ast::expr) -> ValueRef {\n                 else if signed { llvm::LLVMConstSRem(te1, te2) }\n                 else           { llvm::LLVMConstURem(te1, te2) }\n               }\n-              ast::and    |\n-              ast::or     => cx.sess.span_unimpl(e.span, \"binop logic\"),\n+              ast::and    => llvm::LLVMConstAnd(te1, te2),\n+              ast::or     => llvm::LLVMConstOr(te1, te2),\n               ast::bitxor => llvm::LLVMConstXor(te1, te2),\n               ast::bitand => llvm::LLVMConstAnd(te1, te2),\n               ast::bitor  => llvm::LLVMConstOr(te1, te2),\n@@ -290,14 +293,44 @@ fn const_expr_unadjusted(cx: @CrateContext, e: @ast::expr) -> ValueRef {\n                 if signed { llvm::LLVMConstAShr(te1, te2) }\n                 else      { llvm::LLVMConstLShr(te1, te2) }\n               }\n-              ast::eq     |\n-              ast::lt     |\n-              ast::le     |\n-              ast::ne     |\n-              ast::ge     |\n-              ast::gt     => cx.sess.span_unimpl(e.span, \"binop comparator\")\n-            }\n-          }\n+              ast::eq     => {\n+                  if is_float { ConstFCmp(RealOEQ, te1, te2) }\n+                  else        { ConstICmp(IntEQ, te1, te2)   }\n+              },\n+              ast::lt     => {\n+                  if is_float { ConstFCmp(RealOLT, te1, te2) }\n+                  else        {\n+                      if signed { ConstICmp(IntSLT, te1, te2) }\n+                      else      { ConstICmp(IntULT, te1, te2) }\n+                  }\n+              },\n+              ast::le     => {\n+                  if is_float { ConstFCmp(RealOLE, te1, te2) }\n+                  else        {\n+                      if signed { ConstICmp(IntSLE, te1, te2) }\n+                      else      { ConstICmp(IntULE, te1, te2) }\n+                  }\n+              },\n+              ast::ne     => {\n+                  if is_float { ConstFCmp(RealONE, te1, te2) }\n+                  else        { ConstICmp(IntNE, te1, te2) }\n+              },\n+              ast::ge     => {\n+                  if is_float { ConstFCmp(RealOGE, te1, te2) }\n+                  else        {\n+                      if signed { ConstICmp(IntSGE, te1, te2) }\n+                      else      { ConstICmp(IntUGE, te1, te2) }\n+                  }\n+              },\n+              ast::gt     => {\n+                  if is_float { ConstFCmp(RealOGT, te1, te2) }\n+                  else        {\n+                      if signed { ConstICmp(IntSGT, te1, te2) }\n+                      else      { ConstICmp(IntUGT, te1, te2) }\n+                  }\n+              },\n+            };\n+          },\n           ast::expr_unary(u, e) => {\n             let te = const_expr(cx, e);\n             let ty = ty::expr_ty(cx.tcx, e);"}, {"sha": "cd87ca3ab537ec1eafbdae570199961fec38a69d", "filename": "src/test/run-pass/const-binops.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/cab9249c62d5f33b3ae625970c05231341d2f95e/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cab9249c62d5f33b3ae625970c05231341d2f95e/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-binops.rs?ref=cab9249c62d5f33b3ae625970c05231341d2f95e", "patch": "@@ -0,0 +1,116 @@\n+static a: int = -4 + 3;\n+static a2: uint = 3 + 3;\n+static b: float = 3.0 + 2.7;\n+\n+static c: int = 3 - 4;\n+static d: uint = 3 - 3;\n+static e: float = 3.0 - 2.7;\n+\n+static e2: int = -3 * 3;\n+static f: uint = 3 * 3;\n+static g: float = 3.3 * 3.3;\n+\n+static h: int = 3 / -1;\n+static i: uint = 3 / 3;\n+static j: float = 3.3 / 3.3;\n+\n+static n: bool = true && false;\n+\n+static o: bool = true || false;\n+\n+static p: int = 3 & 1;\n+static q: uint = 1 & 3;\n+\n+static r: int = 3 | 1;\n+static s: uint = 1 | 3;\n+\n+static t: int = 3 ^ 1;\n+static u: uint = 1 ^ 3;\n+\n+static v: int = 1 << 3;\n+\n+// NOTE: better shr coverage\n+static w: int = 1024 >> 4;\n+static x: uint = 1024 >> 4;\n+\n+static y: bool = 1 == 1;\n+static z: bool = 1.0 == 1.0;\n+\n+static aa: bool = 1 <= 2;\n+static ab: bool = -1 <= 2;\n+static ac: bool = 1.0 <= 2.0;\n+\n+static ad: bool = 1 < 2;\n+static ae: bool = -1 < 2;\n+static af: bool = 1.0 < 2.0;\n+\n+static ag: bool = 1 != 2;\n+static ah: bool = -1 != 2;\n+static ai: bool = 1.0 != 2.0;\n+\n+static aj: bool = 2 >= 1;\n+static ak: bool = 2 >= -2;\n+static al: bool = 1.0 >= -2.0;\n+\n+static am: bool = 2 > 1;\n+static an: bool = 2 > -2;\n+static ao: bool = 1.0 > -2.0;\n+\n+fn main() {\n+    assert_eq!(a, -1);\n+    assert_eq!(a2, 6);\n+    assert_approx_eq!(b, 5.7);\n+\n+    assert_eq!(c, -1);\n+    assert_eq!(d, 0);\n+    assert_approx_eq!(e, 0.3);\n+\n+    assert_eq!(e2, -9);\n+    assert_eq!(f, 9);\n+    assert_approx_eq!(g, 10.89);\n+\n+    assert_eq!(h, -3);\n+    assert_eq!(i, 1);\n+    assert_approx_eq!(j, 1.0);\n+\n+    assert_eq!(n, false);\n+\n+    assert_eq!(o, true);\n+\n+    assert_eq!(p, 1);\n+    assert_eq!(q, 1);\n+\n+    assert_eq!(r, 3);\n+    assert_eq!(s, 3);\n+\n+    assert_eq!(t, 2);\n+    assert_eq!(u, 2);\n+\n+    assert_eq!(v, 8);\n+\n+    assert_eq!(w, 64);\n+    assert_eq!(x, 64);\n+\n+    assert_eq!(y, true);\n+    assert_eq!(z, true);\n+\n+    assert_eq!(aa, true);\n+    assert_eq!(ab, true);\n+    assert_eq!(ac, true);\n+\n+    assert_eq!(ad, true);\n+    assert_eq!(ae, true);\n+    assert_eq!(af, true);\n+\n+    assert_eq!(ag, true);\n+    assert_eq!(ah, true);\n+    assert_eq!(ai, true);\n+\n+    assert_eq!(aj, true);\n+    assert_eq!(ak, true);\n+    assert_eq!(al, true);\n+\n+    assert_eq!(am, true);\n+    assert_eq!(an, true);\n+    assert_eq!(ao, true);\n+}"}]}