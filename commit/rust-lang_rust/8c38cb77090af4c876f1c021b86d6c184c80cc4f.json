{"sha": "8c38cb77090af4c876f1c021b86d6c184c80cc4f", "node_id": "C_kwDOAAsO6NoAKDhjMzhjYjc3MDkwYWY0Yzg3NmYxYzAyMWI4NmQ2YzE4NGM4MGNjNGY", "commit": {"author": {"name": "Zachary S", "email": "zasample18+github@gmail.com", "date": "2022-09-02T05:47:15Z"}, "committer": {"name": "Zachary S", "email": "zasample18+github@gmail.com", "date": "2022-11-18T18:50:41Z"}, "message": "Add examples to show when `{Arc,Rc}::get_mut_unchecked` is disallowed.", "tree": {"sha": "bc736f910510b03caa99b3e1b59efc3eb9875c45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc736f910510b03caa99b3e1b59efc3eb9875c45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c38cb77090af4c876f1c021b86d6c184c80cc4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c38cb77090af4c876f1c021b86d6c184c80cc4f", "html_url": "https://github.com/rust-lang/rust/commit/8c38cb77090af4c876f1c021b86d6c184c80cc4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c38cb77090af4c876f1c021b86d6c184c80cc4f/comments", "author": {"login": "zachs18", "id": 8355914, "node_id": "MDQ6VXNlcjgzNTU5MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8355914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zachs18", "html_url": "https://github.com/zachs18", "followers_url": "https://api.github.com/users/zachs18/followers", "following_url": "https://api.github.com/users/zachs18/following{/other_user}", "gists_url": "https://api.github.com/users/zachs18/gists{/gist_id}", "starred_url": "https://api.github.com/users/zachs18/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zachs18/subscriptions", "organizations_url": "https://api.github.com/users/zachs18/orgs", "repos_url": "https://api.github.com/users/zachs18/repos", "events_url": "https://api.github.com/users/zachs18/events{/privacy}", "received_events_url": "https://api.github.com/users/zachs18/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zachs18", "id": 8355914, "node_id": "MDQ6VXNlcjgzNTU5MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8355914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zachs18", "html_url": "https://github.com/zachs18", "followers_url": "https://api.github.com/users/zachs18/followers", "following_url": "https://api.github.com/users/zachs18/following{/other_user}", "gists_url": "https://api.github.com/users/zachs18/gists{/gist_id}", "starred_url": "https://api.github.com/users/zachs18/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zachs18/subscriptions", "organizations_url": "https://api.github.com/users/zachs18/orgs", "repos_url": "https://api.github.com/users/zachs18/repos", "events_url": "https://api.github.com/users/zachs18/events{/privacy}", "received_events_url": "https://api.github.com/users/zachs18/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96650fc7143dbacdbb3711e2d60f06401e727cea", "url": "https://api.github.com/repos/rust-lang/rust/commits/96650fc7143dbacdbb3711e2d60f06401e727cea", "html_url": "https://github.com/rust-lang/rust/commit/96650fc7143dbacdbb3711e2d60f06401e727cea"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "8ac1b5b488ad9d6c107ecfe8b086782cd430ee84", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8c38cb77090af4c876f1c021b86d6c184c80cc4f/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c38cb77090af4c876f1c021b86d6c184c80cc4f/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=8c38cb77090af4c876f1c021b86d6c184c80cc4f", "patch": "@@ -1110,6 +1110,38 @@ impl<T: ?Sized> Rc<T> {\n     /// }\n     /// assert_eq!(*x, \"foo\");\n     /// ```\n+    /// Other `Rc` pointers to the same allocation must be to the same type.\n+    /// ```ignore\n+    /// #![feature(get_mut_unchecked)]\n+    ///\n+    /// use std::rc::Rc;\n+    ///\n+    /// let x: Rc<str> = Rc::from(\"Hello, world!\");\n+    /// let mut y: Rc<[u8]> = x.clone().into();\n+    /// unsafe {\n+    ///     // this is Undefined Behavior, because x's inner type is str, not [u8]\n+    ///     Rc::get_mut_unchecked(&mut y).fill(0xff); // 0xff is invalid in UTF-8\n+    /// }\n+    /// println!(\"{}\", &*x); // Invliad UTF-8 in a str\n+    /// ```\n+    /// Other `Rc` pointers to the same allocation must be to the exact same type, including lifetimes.\n+    /// ```ignore\n+    /// #![feature(get_mut_unchecked)]\n+    ///\n+    /// use std::rc::Rc;\n+    ///\n+    /// let x: Rc<&str> = Rc::new(\"Hello, world!\");\n+    /// {\n+    ///     let s = String::from(\"Oh, no!\");\n+    ///     let mut y: Rc<&str> = x.clone().into();\n+    ///     unsafe {\n+    ///         // this is Undefined Behavior, because x's inner type\n+    ///         // is &'long str, not &'short str\n+    ///         *Rc::get_mut_unchecked(&mut y) = &s;\n+    ///     }\n+    /// }\n+    /// println!(\"{}\", &*x); // Use-after-free\n+    /// ```\n     #[inline]\n     #[unstable(feature = \"get_mut_unchecked\", issue = \"63292\")]\n     pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {"}, {"sha": "e4d7bfdaeed69fa4841a89223770662c8c23b1c4", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8c38cb77090af4c876f1c021b86d6c184c80cc4f/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c38cb77090af4c876f1c021b86d6c184c80cc4f/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=8c38cb77090af4c876f1c021b86d6c184c80cc4f", "patch": "@@ -1649,6 +1649,38 @@ impl<T: ?Sized> Arc<T> {\n     /// }\n     /// assert_eq!(*x, \"foo\");\n     /// ```\n+    /// Other `Arc` pointers to the same allocation must be to the same type.\n+    /// ```ignore\n+    /// #![feature(get_mut_unchecked)]\n+    ///\n+    /// use std::sync::Arc;\n+    ///\n+    /// let x: Arc<str> = Arc::from(\"Hello, world!\");\n+    /// let mut y: Arc<[u8]> = x.clone().into();\n+    /// unsafe {\n+    ///     // this is Undefined Behavior, because x's inner type is str, not [u8]\n+    ///     Arc::get_mut_unchecked(&mut y).fill(0xff); // 0xff is invalid in UTF-8\n+    /// }\n+    /// println!(\"{}\", &*x); // Invliad UTF-8 in a str\n+    /// ```\n+    /// Other `Arc` pointers to the same allocation must be to the exact same type, including lifetimes.\n+    /// ```ignore\n+    /// #![feature(get_mut_unchecked)]\n+    ///\n+    /// use std::sync::Arc;\n+    ///\n+    /// let x: Arc<&str> = Arc::new(\"Hello, world!\");\n+    /// {\n+    ///     let s = String::from(\"Oh, no!\");\n+    ///     let mut y: Arc<&str> = x.clone().into();\n+    ///     unsafe {\n+    ///         // this is Undefined Behavior, because x's inner type\n+    ///         // is &'long str, not &'short str\n+    ///         *Arc::get_mut_unchecked(&mut y) = &s;\n+    ///     }\n+    /// }\n+    /// println!(\"{}\", &*x); // Use-after-free\n+    /// ```\n     #[inline]\n     #[unstable(feature = \"get_mut_unchecked\", issue = \"63292\")]\n     pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {"}]}