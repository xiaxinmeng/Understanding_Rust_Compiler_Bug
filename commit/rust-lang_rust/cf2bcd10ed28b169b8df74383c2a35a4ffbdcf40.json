{"sha": "cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40", "node_id": "C_kwDOAAsO6NoAKGNmMmJjZDEwZWQyOGIxNjliOGRmNzQzODNjMmEzNWE0ZmZiZGNmNDA", "commit": {"author": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-10T22:22:40Z"}, "committer": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-10T23:00:33Z"}, "message": "Add #[must_use] to from_value conversions", "tree": {"sha": "87acd2edbff6d167abc4e8e70c702da9b9e350fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87acd2edbff6d167abc4e8e70c702da9b9e350fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40", "html_url": "https://github.com/rust-lang/rust/commit/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/comments", "author": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6928fafe06e4ab29317f75194e1bf67c119dccdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6928fafe06e4ab29317f75194e1bf67c119dccdc", "html_url": "https://github.com/rust-lang/rust/commit/6928fafe06e4ab29317f75194e1bf67c119dccdc"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "ac7f23044565617ac79cd5c2881af3009cb3ee23", "filename": "library/alloc/src/str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Falloc%2Fsrc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Falloc%2Fsrc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstr.rs?ref=cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40", "patch": "@@ -595,6 +595,7 @@ impl str {\n /// assert_eq!(\"\u263a\", &*smile);\n /// ```\n #[stable(feature = \"str_box_extras\", since = \"1.20.0\")]\n+#[must_use]\n #[inline]\n pub unsafe fn from_boxed_utf8_unchecked(v: Box<[u8]>) -> Box<str> {\n     unsafe { Box::from_raw(Box::into_raw(v) as *mut str) }"}, {"sha": "0c383b8bdb6c653581e961b57fb8ade1aa0d3e62", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40", "patch": "@@ -761,6 +761,7 @@ impl String {\n     /// assert_eq!(\"\ud83d\udc96\", sparkle_heart);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_utf8_unchecked(bytes: Vec<u8>) -> String {\n         String { vec: bytes }"}, {"sha": "8086dd357306eb69553171a8a4e70970697aadff", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40", "patch": "@@ -94,6 +94,7 @@ impl Layout {\n     /// [`Layout::from_size_align`].\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[rustc_const_stable(feature = \"alloc_layout\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline]\n     pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {\n         // SAFETY: the caller must ensure that `align` is greater than zero."}, {"sha": "72921414fb3f29aa37905382b2751e41ff87eece", "filename": "library/core/src/char/convert.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs?ref=cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40", "patch": "@@ -48,6 +48,7 @@ use super::MAX;\n /// assert_eq!(None, c);\n /// ```\n #[doc(alias = \"chr\")]\n+#[must_use]\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn from_u32(i: u32) -> Option<char> {\n@@ -88,6 +89,7 @@ pub fn from_u32(i: u32) -> Option<char> {\n /// assert_eq!('\u2764', c);\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"char_from_unchecked\", since = \"1.5.0\")]\n pub unsafe fn from_u32_unchecked(i: u32) -> char {\n     // SAFETY: the caller must guarantee that `i` is a valid char value.\n@@ -319,6 +321,7 @@ impl fmt::Display for CharTryFromError {\n /// let c = char::from_digit(1, 37);\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn from_digit(num: u32, radix: u32) -> Option<char> {\n     if radix > 36 {"}, {"sha": "07ac08f45c79f28cd0528f37a9204cd650ed3e6d", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40", "patch": "@@ -136,6 +136,7 @@ impl char {\n     /// assert_eq!(None, c);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn from_u32(i: u32) -> Option<char> {\n         super::convert::from_u32(i)\n@@ -177,6 +178,7 @@ impl char {\n     /// assert_eq!('\u2764', c);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n+    #[must_use]\n     #[inline]\n     pub unsafe fn from_u32_unchecked(i: u32) -> char {\n         // SAFETY: the safety contract must be upheld by the caller.\n@@ -230,9 +232,10 @@ impl char {\n     /// use std::char;\n     ///\n     /// // this panics\n-    /// char::from_digit(1, 37);\n+    /// let _c = char::from_digit(1, 37);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn from_digit(num: u32, radix: u32) -> Option<char> {\n         super::convert::from_digit(num, radix)"}, {"sha": "fd82be33d1abda19bc1ecc48be70722bf81470cb", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40", "patch": "@@ -786,6 +786,7 @@ impl f32 {\n     /// ```\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_bits(v: u32) -> Self {\n         // SAFETY: `u32` is a plain old datatype so we can always transmute from it\n@@ -864,6 +865,7 @@ impl f32 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_be_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_be_bytes(bytes))\n@@ -879,6 +881,7 @@ impl f32 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_le_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_le_bytes(bytes))\n@@ -905,6 +908,7 @@ impl f32 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_ne_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_ne_bytes(bytes))"}, {"sha": "e7dec62c04ead4861019622b7b8028cbd6e2ab8a", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40", "patch": "@@ -800,6 +800,7 @@ impl f64 {\n     /// ```\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_bits(v: u64) -> Self {\n         // SAFETY: `u64` is a plain old datatype so we can always transmute from it\n@@ -878,6 +879,7 @@ impl f64 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_be_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_be_bytes(bytes))\n@@ -893,6 +895,7 @@ impl f64 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_le_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_le_bytes(bytes))\n@@ -919,6 +922,7 @@ impl f64 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_ne_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_ne_bytes(bytes))"}, {"sha": "7ef2d5c40034d91dc5273928628622d0adb5e99c", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40", "patch": "@@ -282,6 +282,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_be(x: Self) -> Self {\n             #[cfg(target_endian = \"big\")]\n@@ -313,6 +314,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_le(x: Self) -> Self {\n             #[cfg(target_endian = \"little\")]\n@@ -2620,6 +2622,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             Self::from_be(Self::from_ne_bytes(bytes))\n@@ -2650,6 +2653,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             Self::from_le(Self::from_ne_bytes(bytes))\n@@ -2691,6 +2695,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         // SAFETY: const sound because integers are plain old datatypes so we can always\n         // transmute to them\n         #[inline]"}, {"sha": "cf8cf79fe46e0bfe46d167b1c82f78d716ec05e9", "filename": "library/core/src/num/saturating.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs?ref=cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40", "patch": "@@ -644,6 +644,7 @@ macro_rules! saturating_int_impl {\n             /// }\n             /// ```\n             #[inline]\n+            #[must_use]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn from_be(x: Self) -> Self {\n                 Saturating(<$t>::from_be(x.0))\n@@ -671,6 +672,7 @@ macro_rules! saturating_int_impl {\n             /// }\n             /// ```\n             #[inline]\n+            #[must_use]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn from_le(x: Self) -> Self {\n                 Saturating(<$t>::from_le(x.0))"}, {"sha": "eb03be2a62ae978d64c64c471c7e3f53fc5cedc6", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40", "patch": "@@ -285,6 +285,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use]\n         #[inline(always)]\n         pub const fn from_be(x: Self) -> Self {\n             #[cfg(target_endian = \"big\")]\n@@ -317,6 +318,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use]\n         #[inline(always)]\n         pub const fn from_le(x: Self) -> Self {\n             #[cfg(target_endian = \"little\")]\n@@ -2278,6 +2280,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             Self::from_be(Self::from_ne_bytes(bytes))\n@@ -2308,6 +2311,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             Self::from_le(Self::from_ne_bytes(bytes))\n@@ -2349,6 +2353,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         // SAFETY: const sound because integers are plain old datatypes so we can always\n         // transmute to them\n         #[inline]"}, {"sha": "cca83661b7ea6490483ea23d5e6abd3395931e93", "filename": "library/core/src/num/wrapping.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs?ref=cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40", "patch": "@@ -638,6 +638,7 @@ macro_rules! wrapping_int_impl {\n             /// }\n             /// ```\n             #[inline]\n+            #[must_use]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn from_be(x: Self) -> Self {\n                 Wrapping(<$t>::from_be(x.0))\n@@ -665,6 +666,7 @@ macro_rules! wrapping_int_impl {\n             /// }\n             /// ```\n             #[inline]\n+            #[must_use]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn from_le(x: Self) -> Self {\n                 Wrapping(<$t>::from_le(x.0))"}, {"sha": "ed9f49f159611f19702787f29161a3423e5ae731", "filename": "library/core/src/str/converts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs?ref=cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40", "patch": "@@ -155,6 +155,7 @@ pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n /// assert_eq!(\"\ud83d\udc96\", sparkle_heart);\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"const_str_from_utf8_unchecked\", since = \"1.55.0\")]\n pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n@@ -181,6 +182,7 @@ pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n /// assert_eq!(\"\ud83d\udc96\", heart);\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n pub unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {\n     // SAFETY: the caller must guarantee that the bytes `v`"}, {"sha": "d3c9d21c3c756c0acaec68fa99ad823787d71aef", "filename": "library/core/src/str/lossy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Fstr%2Flossy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Fstr%2Flossy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Flossy.rs?ref=cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40", "patch": "@@ -12,10 +12,12 @@ pub struct Utf8Lossy {\n }\n \n impl Utf8Lossy {\n+    #[must_use]\n     pub fn from_str(s: &str) -> &Utf8Lossy {\n         Utf8Lossy::from_bytes(s.as_bytes())\n     }\n \n+    #[must_use]\n     pub fn from_bytes(bytes: &[u8]) -> &Utf8Lossy {\n         // SAFETY: Both use the same memory layout, and UTF-8 correctness isn't required.\n         unsafe { mem::transmute(bytes) }"}, {"sha": "e1bbdfaef801652bf07ca3f4cb203c946a490a57", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40", "patch": "@@ -158,6 +158,7 @@ pub struct Context<'a> {\n impl<'a> Context<'a> {\n     /// Create a new `Context` from a `&Waker`.\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn from_waker(waker: &'a Waker) -> Self {\n         Context { waker, _marker: PhantomData }\n@@ -251,6 +252,7 @@ impl Waker {\n     /// in [`RawWaker`]'s and [`RawWakerVTable`]'s documentation is not upheld.\n     /// Therefore this method is unsafe.\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub unsafe fn from_raw(waker: RawWaker) -> Waker {\n         Waker { waker }"}, {"sha": "d57c959820d8d10d8cfa5c86f4639f6603d14f87", "filename": "library/core/src/time.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40", "patch": "@@ -203,6 +203,7 @@ impl Duration {\n     /// assert_eq!(0, duration.subsec_nanos());\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     pub const fn from_secs(secs: u64) -> Duration {\n@@ -222,6 +223,7 @@ impl Duration {\n     /// assert_eq!(569_000_000, duration.subsec_nanos());\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     pub const fn from_millis(millis: u64) -> Duration {\n@@ -244,6 +246,7 @@ impl Duration {\n     /// assert_eq!(2000, duration.subsec_nanos());\n     /// ```\n     #[stable(feature = \"duration_from_micros\", since = \"1.27.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     pub const fn from_micros(micros: u64) -> Duration {\n@@ -266,6 +269,7 @@ impl Duration {\n     /// assert_eq!(123, duration.subsec_nanos());\n     /// ```\n     #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     pub const fn from_nanos(nanos: u64) -> Duration {\n@@ -692,6 +696,7 @@ impl Duration {\n     /// assert_eq!(dur, Duration::new(2, 700_000_000));\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn from_secs_f64(secs: f64) -> Duration {\n@@ -753,6 +758,7 @@ impl Duration {\n     /// assert_eq!(dur, Duration::new(2, 700_000_000));\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn from_secs_f32(secs: f32) -> Duration {"}, {"sha": "e290350993d73509756bba8b314a5cdb43738059", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40", "patch": "@@ -425,6 +425,7 @@ impl CString {\n     ///     let c_string = CString::from_vec_unchecked(raw);\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_vec_unchecked(mut v: Vec<u8>) -> CString {\n         v.reserve_exact(1);\n@@ -476,6 +477,7 @@ impl CString {\n     ///     let c_string = CString::from_raw(raw);\n     /// }\n     /// ```\n+    #[must_use = \"call `drop(from_raw(ptr))` if you intend to drop the `CString`\"]\n     #[stable(feature = \"cstr_memory\", since = \"1.4.0\")]\n     pub unsafe fn from_raw(ptr: *mut c_char) -> CString {\n         // SAFETY: This is called with a pointer that was obtained from a call\n@@ -701,6 +703,7 @@ impl CString {\n     ///     unsafe { CString::from_vec_unchecked(b\"abc\".to_vec()) }\n     /// );\n     /// ```\n+    #[must_use]\n     #[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n     pub unsafe fn from_vec_with_nul_unchecked(v: Vec<u8>) -> Self {\n         Self { inner: v.into_boxed_slice() }\n@@ -1162,6 +1165,7 @@ impl CStr {\n     /// }\n     /// # }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_ptr<'a>(ptr: *const c_char) -> &'a CStr {\n         // SAFETY: The caller has provided a pointer that points to a valid C\n@@ -1244,6 +1248,7 @@ impl CStr {\n     /// }\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n     #[rustc_const_unstable(feature = \"const_cstr_unchecked\", issue = \"none\")]\n     pub const unsafe fn from_bytes_with_nul_unchecked(bytes: &[u8]) -> &CStr {"}, {"sha": "57b5c28430f1ee4e34f1f4dc67249d67809415e3", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=cf2bcd10ed28b169b8df74383c2a35a4ffbdcf40", "patch": "@@ -473,6 +473,7 @@ impl Error {\n     /// # }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn from_raw_os_error(code: i32) -> Error {\n         Error { repr: Repr::Os(code) }"}]}