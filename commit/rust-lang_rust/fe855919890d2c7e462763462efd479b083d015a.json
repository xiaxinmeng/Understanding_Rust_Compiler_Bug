{"sha": "fe855919890d2c7e462763462efd479b083d015a", "node_id": "C_kwDOAAsO6NoAKGZlODU1OTE5ODkwZDJjN2U0NjI3NjM0NjJlZmQ0NzliMDgzZDAxNWE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-07T18:07:02Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-07T18:07:02Z"}, "message": "make windows compat_fn (crudely) work on Miri", "tree": {"sha": "9c42d26968d072305dace1a77630d4369f262608", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c42d26968d072305dace1a77630d4369f262608"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe855919890d2c7e462763462efd479b083d015a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe855919890d2c7e462763462efd479b083d015a", "html_url": "https://github.com/rust-lang/rust/commit/fe855919890d2c7e462763462efd479b083d015a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe855919890d2c7e462763462efd479b083d015a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26b5e0cbb95ce5b1cbf91d49fb45d122479e3363", "url": "https://api.github.com/repos/rust-lang/rust/commits/26b5e0cbb95ce5b1cbf91d49fb45d122479e3363", "html_url": "https://github.com/rust-lang/rust/commit/26b5e0cbb95ce5b1cbf91d49fb45d122479e3363"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "b6f2f894de8ec48f2a97a1ae65714869e126500b", "filename": "library/std/src/sys/windows/compat.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fe855919890d2c7e462763462efd479b083d015a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe855919890d2c7e462763462efd479b083d015a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs?ref=fe855919890d2c7e462763462efd479b083d015a", "patch": "@@ -77,6 +77,10 @@ macro_rules! compat_fn {\n             static INIT_TABLE_ENTRY: unsafe extern \"C\" fn() = init;\n \n             unsafe extern \"C\" fn init() {\n+                PTR = get_f();\n+            }\n+\n+            unsafe extern \"C\" fn get_f() -> Option<F> {\n                 // There is no locking here. This code is executed before main() is entered, and\n                 // is guaranteed to be single-threaded.\n                 //\n@@ -91,10 +95,11 @@ macro_rules! compat_fn {\n                     match $crate::sys::c::GetProcAddress(module_handle, symbol_name as *const i8).addr() {\n                         0 => {}\n                         n => {\n-                            PTR = Some(mem::transmute::<usize, F>(n));\n+                            return Some(mem::transmute::<usize, F>(n));\n                         }\n                     }\n                 }\n+                return None;\n             }\n \n             #[allow(dead_code)]\n@@ -105,10 +110,15 @@ macro_rules! compat_fn {\n             #[allow(dead_code)]\n             pub unsafe fn call($($argname: $argtype),*) -> $rettype {\n                 if let Some(ptr) = PTR {\n-                    ptr($($argname),*)\n-                } else {\n-                    $fallback_body\n+                    return ptr($($argname),*);\n+                }\n+                if cfg!(miri) {\n+                    // Miri does not run `init`, so we just call `get_f` each time.\n+                    if let Some(ptr) = get_f() {\n+                        return ptr($($argname),*);\n+                    }\n                 }\n+                $fallback_body\n             }\n         }\n "}]}