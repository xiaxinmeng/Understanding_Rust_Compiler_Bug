{"sha": "1eaa113581f39d41bc179e300d275cfaab91bd2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYWExMTM1ODFmMzlkNDFiYzE3OWUzMDBkMjc1Y2ZhYWI5MWJkMmQ=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2017-03-29T18:43:01Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2017-03-29T18:43:01Z"}, "message": "Emit proper lifetime start intrinsics for personality slots\n\nWe currently only emit a single call to the lifetime start intrinsic\nfor the personality slot alloca. This happens because we create that\ncall at the time that we create the alloca, instead of creating it each\ntime we start using it. Because LLVM usually removes the alloca before\nthe lifetime intrinsics are even considered, this didn't cause any\nproblems yet, but we should fix this anyway.", "tree": {"sha": "c3c7d7a6b3ff850426263d3bb08bc74e77418cca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3c7d7a6b3ff850426263d3bb08bc74e77418cca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1eaa113581f39d41bc179e300d275cfaab91bd2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1eaa113581f39d41bc179e300d275cfaab91bd2d", "html_url": "https://github.com/rust-lang/rust/commit/1eaa113581f39d41bc179e300d275cfaab91bd2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1eaa113581f39d41bc179e300d275cfaab91bd2d/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1cec5d4bf626f151a779323e16d62fe60117086", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1cec5d4bf626f151a779323e16d62fe60117086", "html_url": "https://github.com/rust-lang/rust/commit/e1cec5d4bf626f151a779323e16d62fe60117086"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "d69f31a45048d48721e669e0c9af3cfcd56bb18d", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eaa113581f39d41bc179e300d275cfaab91bd2d/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaa113581f39d41bc179e300d275cfaab91bd2d/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=1eaa113581f39d41bc179e300d275cfaab91bd2d", "patch": "@@ -762,7 +762,6 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             let llretty = Type::struct_(ccx, &[Type::i8p(ccx), Type::i32(ccx)], false);\n             let slot = bcx.alloca(llretty, \"personalityslot\");\n             self.llpersonalityslot = Some(slot);\n-            Lifetime::Start.call(bcx, slot);\n             slot\n         }\n     }\n@@ -794,6 +793,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n         let llretval = bcx.landing_pad(llretty, llpersonality, 1, self.llfn);\n         bcx.set_cleanup(llretval);\n         let slot = self.get_personality_slot(&bcx);\n+        Lifetime::Start.call(&bcx, slot);\n         bcx.store(llretval, slot, None);\n         bcx.br(target_bb);\n         bcx.llbb()"}, {"sha": "1d07a2f10408287ae864706dec8122d8a85ab9de", "filename": "src/test/codegen/personality_lifetimes.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1eaa113581f39d41bc179e300d275cfaab91bd2d/src%2Ftest%2Fcodegen%2Fpersonality_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eaa113581f39d41bc179e300d275cfaab91bd2d/src%2Ftest%2Fcodegen%2Fpersonality_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpersonality_lifetimes.rs?ref=1eaa113581f39d41bc179e300d275cfaab91bd2d", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -O -C no-prepopulate-passes\n+\n+#![crate_type=\"lib\"]\n+\n+struct S;\n+\n+impl Drop for S {\n+    fn drop(&mut self) {\n+    }\n+}\n+\n+fn might_unwind() {\n+}\n+\n+// CHECK-LABEL: @test\n+#[no_mangle]\n+pub fn test() {\n+    let _s = S;\n+    // Check that the personality slot alloca gets a lifetime start in each cleanup block, not just\n+    // in the first one.\n+    // CHECK-LABEL: cleanup:\n+    // CHECK: bitcast{{.*}}personalityslot\n+    // CHECK-NEXT: call void @llvm.lifetime.start\n+    // CHECK-LABEL: cleanup1:\n+    // CHECK: bitcast{{.*}}personalityslot\n+    // CHECK-NEXT: call void @llvm.lifetime.start\n+    might_unwind();\n+    might_unwind();\n+}"}]}