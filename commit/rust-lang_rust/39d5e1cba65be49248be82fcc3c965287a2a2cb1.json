{"sha": "39d5e1cba65be49248be82fcc3c965287a2a2cb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZDVlMWNiYTY1YmU0OTI0OGJlODJmY2MzYzk2NTI4N2EyYTJjYjE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-01T07:33:28Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-01T17:29:38Z"}, "message": "Rollup merge of #48446 - mark-i-m:e0245, r=mark-i-m\n\nRemove E0245; improve E0404\n\nFix #36337\n\nSomehow this is currently breaking --explain, but I don't understand how.\n\nr? @estebank", "tree": {"sha": "fba004228f46ebce7b3179c541ffda908d33814b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fba004228f46ebce7b3179c541ffda908d33814b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39d5e1cba65be49248be82fcc3c965287a2a2cb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39d5e1cba65be49248be82fcc3c965287a2a2cb1", "html_url": "https://github.com/rust-lang/rust/commit/39d5e1cba65be49248be82fcc3c965287a2a2cb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39d5e1cba65be49248be82fcc3c965287a2a2cb1/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eadea4ab1ae1c53e6e015fa12845335e55c62f94", "url": "https://api.github.com/repos/rust-lang/rust/commits/eadea4ab1ae1c53e6e015fa12845335e55c62f94", "html_url": "https://github.com/rust-lang/rust/commit/eadea4ab1ae1c53e6e015fa12845335e55c62f94"}, {"sha": "2ec79f936a564c2538c28bf7bdf2ef26a6ab6006", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ec79f936a564c2538c28bf7bdf2ef26a6ab6006", "html_url": "https://github.com/rust-lang/rust/commit/2ec79f936a564c2538c28bf7bdf2ef26a6ab6006"}], "stats": {"total": 62, "additions": 45, "deletions": 17}, "files": [{"sha": "a0fc5533f8e5445ce7923538da20163bd9126f58", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39d5e1cba65be49248be82fcc3c965287a2a2cb1/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d5e1cba65be49248be82fcc3c965287a2a2cb1/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=39d5e1cba65be49248be82fcc3c965287a2a2cb1", "patch": "@@ -542,7 +542,7 @@ fn foo<T, T>(s: T, u: T) {} // error: the name `T` is already used for a type\n                             //        parameter in this type parameter list\n ```\n \n-Please verify that none of the type parameterss are misspelled, and rename any\n+Please verify that none of the type parameters are misspelled, and rename any\n clashing parameters. Example:\n \n ```\n@@ -551,7 +551,8 @@ fn foo<T, Y>(s: T, u: Y) {} // ok!\n \"##,\n \n E0404: r##\"\n-You tried to implement something which was not a trait on an object.\n+You tried to use something which is not a trait in a trait position, such as\n+a bound or `impl`.\n \n Erroneous code example:\n \n@@ -562,6 +563,14 @@ struct Bar;\n impl Foo for Bar {} // error: `Foo` is not a trait\n ```\n \n+Another erroneous code example:\n+\n+```compile_fail,E0404\n+struct Foo;\n+\n+fn bar<T: Foo>(t: T) {} // error: `Foo` is not a trait\n+```\n+\n Please verify that you didn't misspell the trait's name or otherwise use the\n wrong identifier. Example:\n \n@@ -575,6 +584,17 @@ impl Foo for Bar { // ok!\n     // functions implementation\n }\n ```\n+\n+or\n+\n+```\n+trait Foo {\n+    // some functions\n+}\n+\n+fn bar<T: Foo>(t: T) {} // ok!\n+```\n+\n \"##,\n \n E0405: r##\""}, {"sha": "42bcc62f291c81e44b4a698cfe6d3181369da6f8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39d5e1cba65be49248be82fcc3c965287a2a2cb1/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d5e1cba65be49248be82fcc3c965287a2a2cb1/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=39d5e1cba65be49248be82fcc3c965287a2a2cb1", "patch": "@@ -2163,6 +2163,7 @@ impl<'a> Resolver<'a> {\n         result\n     }\n \n+    /// This is called to resolve a trait reference from an `impl` (i.e. `impl Trait for Foo`)\n     fn with_optional_trait_ref<T, F>(&mut self, opt_trait_ref: Option<&TraitRef>, f: F) -> T\n         where F: FnOnce(&mut Resolver, Option<DefId>) -> T\n     {\n@@ -2172,13 +2173,14 @@ impl<'a> Resolver<'a> {\n             let path: Vec<_> = trait_ref.path.segments.iter()\n                 .map(|seg| respan(seg.span, seg.identifier))\n                 .collect();\n-            let def = self.smart_resolve_path_fragment(trait_ref.ref_id,\n-                                                       None,\n-                                                       &path,\n-                                                       trait_ref.path.span,\n-                                                       trait_ref.path.segments.last().unwrap().span,\n-                                                       PathSource::Trait(AliasPossibility::No))\n-                .base_def();\n+            let def = self.smart_resolve_path_fragment(\n+                trait_ref.ref_id,\n+                None,\n+                &path,\n+                trait_ref.path.span,\n+                trait_ref.path.segments.last().unwrap().span,\n+                PathSource::Trait(AliasPossibility::No)\n+            ).base_def();\n             if def != Def::Err {\n                 new_id = Some(def.def_id());\n                 let span = trait_ref.path.span;"}, {"sha": "782638af13f736daea16db0991fbbba48046cbdf", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39d5e1cba65be49248be82fcc3c965287a2a2cb1/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d5e1cba65be49248be82fcc3c965287a2a2cb1/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=39d5e1cba65be49248be82fcc3c965287a2a2cb1", "patch": "@@ -313,7 +313,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n     /// Instantiates the path for the given trait reference, assuming that it's\n     /// bound to a valid trait type. Returns the def_id for the defining trait.\n-    /// Fails if the type is a type other than a trait type.\n+    /// The type _cannot_ be a type other than a trait type.\n     ///\n     /// If the `projections` argument is `None`, then assoc type bindings like `Foo<T=X>`\n     /// are disallowed. Otherwise, they are pushed onto the vector given.\n@@ -331,6 +331,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                                         trait_ref.path.segments.last().unwrap())\n     }\n \n+    /// Get the DefId of the given trait ref. It _must_ actually be a trait.\n     fn trait_def_id(&self, trait_ref: &hir::TraitRef) -> DefId {\n         let path = &trait_ref.path;\n         match path.def {\n@@ -339,13 +340,11 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             Def::Err => {\n                 self.tcx().sess.fatal(\"cannot continue compilation due to previous error\");\n             }\n-            _ => {\n-                span_fatal!(self.tcx().sess, path.span, E0245, \"`{}` is not a trait\",\n-                            self.tcx().hir.node_to_pretty_string(trait_ref.ref_id));\n-            }\n+            _ => unreachable!(),\n         }\n     }\n \n+    /// The given `trait_ref` must actually be trait.\n     pub(super) fn instantiate_poly_trait_ref_inner(&self,\n         trait_ref: &hir::TraitRef,\n         self_ty: Ty<'tcx>,"}, {"sha": "6c195a991c24e9f2b2b8a29a74e55f77d919f24e", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39d5e1cba65be49248be82fcc3c965287a2a2cb1/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d5e1cba65be49248be82fcc3c965287a2a2cb1/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=39d5e1cba65be49248be82fcc3c965287a2a2cb1", "patch": "@@ -4802,7 +4802,7 @@ register_diagnostics! {\n //  E0240,\n //  E0241,\n //  E0242,\n-    E0245, // not a trait\n+//  E0245, // not a trait\n //  E0246, // invalid recursive type\n //  E0247,\n //  E0248, // value used as a type, now reported earlier during resolution as E0412"}, {"sha": "1c6ff5ae8413dec99737f86fc81b0a67810eaee9", "filename": "src/test/ui/error-codes/E0404.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/39d5e1cba65be49248be82fcc3c965287a2a2cb1/src%2Ftest%2Fui%2Ferror-codes%2FE0404.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d5e1cba65be49248be82fcc3c965287a2a2cb1/src%2Ftest%2Fui%2Ferror-codes%2FE0404.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0404.rs?ref=39d5e1cba65be49248be82fcc3c965287a2a2cb1", "patch": "@@ -13,5 +13,6 @@ struct Bar;\n \n impl Foo for Bar {} //~ ERROR E0404\n \n-fn main() {\n-}\n+fn main() {}\n+\n+fn baz<T: Foo>(_: T) {} //~ ERROR E0404"}, {"sha": "ac1d2a00cf44842a8f6e36eeb9d0ae6e025ee60d", "filename": "src/test/ui/error-codes/E0404.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39d5e1cba65be49248be82fcc3c965287a2a2cb1/src%2Ftest%2Fui%2Ferror-codes%2FE0404.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39d5e1cba65be49248be82fcc3c965287a2a2cb1/src%2Ftest%2Fui%2Ferror-codes%2FE0404.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0404.stderr?ref=39d5e1cba65be49248be82fcc3c965287a2a2cb1", "patch": "@@ -4,6 +4,12 @@ error[E0404]: expected trait, found struct `Foo`\n LL | impl Foo for Bar {} //~ ERROR E0404\n    |      ^^^ not a trait\n \n+error[E0404]: expected trait, found struct `Foo`\n+  --> $DIR/E0404.rs:18:11\n+   |\n+LL | fn baz<T: Foo>(_: T) {} //~ ERROR E0404\n+   |           ^^^ not a trait\n+\n error: cannot continue compilation due to previous error\n \n If you want more information on this error, try using \"rustc --explain E0404\""}]}