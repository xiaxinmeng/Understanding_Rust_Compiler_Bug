{"sha": "dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f", "node_id": "C_kwDOAAsO6NoAKGRiYWU4MzA5YTA2NTZlMGNhY2YxZjRhNDc1MjRkMGQ2MmU1ZmZlMGY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-08T12:55:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-08T12:55:50Z"}, "message": "Rollup merge of #98657 - compiler-errors:rustc-const-eval-session-diagnostic-1, r=davidtwco\n\nMigrate some diagnostics from `rustc_const_eval` to `SessionDiagnostic`\n\nI'm still trying to get the hang of this, so it doesn't migrate _all_ of `rustc_const_eval`. Working on that later.\n\nr? `@davidtwco`", "tree": {"sha": "1d2fb378d9e2f349ea1fa387219a398ee079948c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d2fb378d9e2f349ea1fa387219a398ee079948c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiyClWCRBK7hj4Ov3rIwAAhCsIAHbEtrdKcLRVmZ6cU4V7at8t\nGXhPvo5vIN3u9rkRtvnyHezH7kXAFPwj7yFIg67I5oqgYFGgdSSfl9aJT96myPsp\nJwSv5m2ReiaktJGWpNVkj9Hsm966xw0TiyiU2q5XCiixjO9bs5r8r5VdqDd3af+6\n4tN/LY9TPIj77sz9d++C7Wlfo/5CzuW1yMftLQmA9JJ5fairi+sF+OFrfTu/6m48\n0ThEDflQyr1nwwPQxp/fBxejaA1OhrGZwBP1zQOX9/yNKVR1Gsjx8oSDSuWRkRaU\n8EfW6WzYNiAxLQUm/xCtmHQ6i8z4MdPhU6VDrRFTwJSKv9eqRKKHoOowtWDB9os=\n=qs7e\n-----END PGP SIGNATURE-----\n", "payload": "tree 1d2fb378d9e2f349ea1fa387219a398ee079948c\nparent fe87923b546b84dffd46c95ccecadafa57ab01dc\nparent 20583337800524516ab814e1cff080c0ca9f200b\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657284950 +0530\ncommitter GitHub <noreply@github.com> 1657284950 +0530\n\nRollup merge of #98657 - compiler-errors:rustc-const-eval-session-diagnostic-1, r=davidtwco\n\nMigrate some diagnostics from `rustc_const_eval` to `SessionDiagnostic`\n\nI'm still trying to get the hang of this, so it doesn't migrate _all_ of `rustc_const_eval`. Working on that later.\n\nr? `@davidtwco`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f", "html_url": "https://github.com/rust-lang/rust/commit/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe87923b546b84dffd46c95ccecadafa57ab01dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe87923b546b84dffd46c95ccecadafa57ab01dc", "html_url": "https://github.com/rust-lang/rust/commit/fe87923b546b84dffd46c95ccecadafa57ab01dc"}, {"sha": "20583337800524516ab814e1cff080c0ca9f200b", "url": "https://api.github.com/repos/rust-lang/rust/commits/20583337800524516ab814e1cff080c0ca9f200b", "html_url": "https://github.com/rust-lang/rust/commit/20583337800524516ab814e1cff080c0ca9f200b"}], "stats": {"total": 277, "additions": 188, "deletions": 89}, "files": [{"sha": "268af59aa891ca002f922b7228d2652618c14ed1", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f", "patch": "@@ -3813,6 +3813,7 @@ dependencies = [\n  \"atty\",\n  \"rustc_data_structures\",\n  \"rustc_error_messages\",\n+ \"rustc_hir\",\n  \"rustc_lint_defs\",\n  \"rustc_macros\",\n  \"rustc_serialize\","}, {"sha": "a463fe7b970f46a2a084254fd07bf786cb8b9d86", "filename": "compiler/rustc_const_eval/src/errors.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs?ref=dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f", "patch": "@@ -0,0 +1,89 @@\n+use rustc_hir::ConstContext;\n+use rustc_macros::SessionDiagnostic;\n+use rustc_span::Span;\n+\n+#[derive(SessionDiagnostic)]\n+#[error(const_eval::unstable_in_stable)]\n+pub(crate) struct UnstableInStable {\n+    pub gate: String,\n+    #[primary_span]\n+    pub span: Span,\n+    #[suggestion(\n+        const_eval::unstable_sugg,\n+        code = \"#[rustc_const_unstable(feature = \\\"...\\\", issue = \\\"...\\\")]\\n\",\n+        applicability = \"has-placeholders\"\n+    )]\n+    #[suggestion(\n+        const_eval::bypass_sugg,\n+        code = \"#[rustc_allow_const_fn_unstable({gate})]\\n\",\n+        applicability = \"has-placeholders\"\n+    )]\n+    pub attr_span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(const_eval::thread_local_access, code = \"E0625\")]\n+pub(crate) struct NonConstOpErr {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(const_eval::static_access, code = \"E0013\")]\n+#[help]\n+pub(crate) struct StaticAccessErr {\n+    #[primary_span]\n+    pub span: Span,\n+    pub kind: ConstContext,\n+    #[note(const_eval::teach_note)]\n+    #[help(const_eval::teach_help)]\n+    pub teach: Option<()>,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(const_eval::raw_ptr_to_int)]\n+#[note]\n+#[note(const_eval::note2)]\n+pub(crate) struct RawPtrToIntErr {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(const_eval::raw_ptr_comparison)]\n+#[note]\n+pub(crate) struct RawPtrComparisonErr {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(const_eval::panic_non_str)]\n+pub(crate) struct PanicNonStrErr {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(const_eval::mut_deref, code = \"E0658\")]\n+pub(crate) struct MutDerefErr {\n+    #[primary_span]\n+    pub span: Span,\n+    pub kind: ConstContext,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(const_eval::transient_mut_borrow, code = \"E0658\")]\n+pub(crate) struct TransientMutBorrowErr {\n+    #[primary_span]\n+    pub span: Span,\n+    pub kind: ConstContext,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(const_eval::transient_mut_borrow_raw, code = \"E0658\")]\n+pub(crate) struct TransientMutBorrowErrRaw {\n+    #[primary_span]\n+    pub span: Span,\n+    pub kind: ConstContext,\n+}"}, {"sha": "d65d4f7eb720ec4e3cc1981d133759739c792453", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f", "patch": "@@ -31,6 +31,7 @@ extern crate tracing;\n extern crate rustc_middle;\n \n pub mod const_eval;\n+mod errors;\n pub mod interpret;\n pub mod transform;\n pub mod util;"}, {"sha": "3dcd96df33cf50dc92b0ed114597effc2a8d626a", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f", "patch": "@@ -1,6 +1,6 @@\n //! The `Visitor` responsible for actually checking a `mir::Body` for invalid operations.\n \n-use rustc_errors::{Applicability, Diagnostic, ErrorGuaranteed};\n+use rustc_errors::{Diagnostic, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::BitSet;\n@@ -24,6 +24,7 @@ use super::qualifs::{self, CustomEq, HasMutInterior, NeedsDrop, NeedsNonConstDro\n use super::resolver::FlowSensitiveAnalysis;\n use super::{ConstCx, Qualif};\n use crate::const_eval::is_unstable_const_fn;\n+use crate::errors::UnstableInStable;\n \n type QualifResults<'mir, 'tcx, Q> =\n     rustc_mir_dataflow::ResultsCursor<'mir, 'tcx, FlowSensitiveAnalysis<'mir, 'mir, 'tcx, Q>>;\n@@ -1026,23 +1027,5 @@ fn is_int_bool_or_char(ty: Ty<'_>) -> bool {\n fn emit_unstable_in_stable_error(ccx: &ConstCx<'_, '_>, span: Span, gate: Symbol) {\n     let attr_span = ccx.tcx.def_span(ccx.def_id()).shrink_to_lo();\n \n-    ccx.tcx\n-        .sess\n-        .struct_span_err(\n-            span,\n-            &format!(\"const-stable function cannot use `#[feature({})]`\", gate.as_str()),\n-        )\n-        .span_suggestion(\n-            attr_span,\n-            \"if it is not part of the public API, make this function unstably const\",\n-            concat!(r#\"#[rustc_const_unstable(feature = \"...\", issue = \"...\")]\"#, '\\n'),\n-            Applicability::HasPlaceholders,\n-        )\n-        .span_suggestion(\n-            attr_span,\n-            \"otherwise `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks\",\n-            format!(\"#[rustc_allow_const_fn_unstable({})]\\n\", gate),\n-            Applicability::MaybeIncorrect,\n-        )\n-        .emit();\n+    ccx.tcx.sess.emit_err(UnstableInStable { gate: gate.to_string(), span, attr_span });\n }"}, {"sha": "17376e59e09cc3715d3ab9670530391b6fc83012", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 29, "deletions": 64, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f", "patch": "@@ -1,7 +1,9 @@\n //! Concrete error types for all operations which may be invalid in a certain const context.\n \n use hir::def_id::LocalDefId;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{\n+    error_code, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed,\n+};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -20,6 +22,10 @@ use rustc_span::{BytePos, Pos, Span, Symbol};\n use rustc_trait_selection::traits::SelectionContext;\n \n use super::ConstCx;\n+use crate::errors::{\n+    MutDerefErr, NonConstOpErr, PanicNonStrErr, RawPtrComparisonErr, RawPtrToIntErr,\n+    StaticAccessErr, TransientMutBorrowErr, TransientMutBorrowErrRaw,\n+};\n use crate::util::{call_kind, CallDesugaringKind, CallKind};\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n@@ -590,17 +596,17 @@ impl<'tcx> NonConstOp<'tcx> for TransientMutBorrow {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let raw = match self.0 {\n-            hir::BorrowKind::Raw => \"raw \",\n-            hir::BorrowKind::Ref => \"\",\n-        };\n-\n-        feature_err(\n-            &ccx.tcx.sess.parse_sess,\n-            sym::const_mut_refs,\n-            span,\n-            &format!(\"{}mutable references are not allowed in {}s\", raw, ccx.const_kind()),\n-        )\n+        let kind = ccx.const_kind();\n+        match self.0 {\n+            hir::BorrowKind::Raw => ccx\n+                .tcx\n+                .sess\n+                .create_feature_err(TransientMutBorrowErrRaw { span, kind }, sym::const_mut_refs),\n+            hir::BorrowKind::Ref => ccx\n+                .tcx\n+                .sess\n+                .create_feature_err(TransientMutBorrowErr { span, kind }, sym::const_mut_refs),\n+        }\n     }\n }\n \n@@ -621,12 +627,9 @@ impl<'tcx> NonConstOp<'tcx> for MutDeref {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        feature_err(\n-            &ccx.tcx.sess.parse_sess,\n-            sym::const_mut_refs,\n-            span,\n-            &format!(\"mutation through a reference is not allowed in {}s\", ccx.const_kind()),\n-        )\n+        ccx.tcx\n+            .sess\n+            .create_feature_err(MutDerefErr { span, kind: ccx.const_kind() }, sym::const_mut_refs)\n     }\n }\n \n@@ -639,10 +642,7 @@ impl<'tcx> NonConstOp<'tcx> for PanicNonStr {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        ccx.tcx.sess.struct_span_err(\n-            span,\n-            \"argument to `panic!()` in a const context must have type `&str`\",\n-        )\n+        ccx.tcx.sess.create_err(PanicNonStrErr { span })\n     }\n }\n \n@@ -657,15 +657,7 @@ impl<'tcx> NonConstOp<'tcx> for RawPtrComparison {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let mut err = ccx\n-            .tcx\n-            .sess\n-            .struct_span_err(span, \"pointers cannot be reliably compared during const eval\");\n-        err.note(\n-            \"see issue #53020 <https://github.com/rust-lang/rust/issues/53020> \\\n-            for more information\",\n-        );\n-        err\n+        ccx.tcx.sess.create_err(RawPtrComparisonErr { span })\n     }\n }\n \n@@ -701,15 +693,7 @@ impl<'tcx> NonConstOp<'tcx> for RawPtrToIntCast {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let mut err = ccx\n-            .tcx\n-            .sess\n-            .struct_span_err(span, \"pointers cannot be cast to integers during const eval\");\n-        err.note(\"at compile-time, pointers do not have an integer value\");\n-        err.note(\n-            \"avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\",\n-        );\n-        err\n+        ccx.tcx.sess.create_err(RawPtrToIntErr { span })\n     }\n }\n \n@@ -730,24 +714,11 @@ impl<'tcx> NonConstOp<'tcx> for StaticAccess {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let mut err = struct_span_err!(\n-            ccx.tcx.sess,\n+        ccx.tcx.sess.create_err(StaticAccessErr {\n             span,\n-            E0013,\n-            \"{}s cannot refer to statics\",\n-            ccx.const_kind()\n-        );\n-        err.help(\n-            \"consider extracting the value of the `static` to a `const`, and referring to that\",\n-        );\n-        if ccx.tcx.sess.teach(&err.get_code().unwrap()) {\n-            err.note(\n-                \"`static` and `const` variables can refer to other `const` variables. \\\n-                    A `const` variable, however, cannot refer to a `static` variable.\",\n-            );\n-            err.help(\"To fix this, the value can be extracted to a `const` and then used.\");\n-        }\n-        err\n+            kind: ccx.const_kind(),\n+            teach: ccx.tcx.sess.teach(&error_code!(E0013)).then_some(()),\n+        })\n     }\n }\n \n@@ -760,13 +731,7 @@ impl<'tcx> NonConstOp<'tcx> for ThreadLocalAccess {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        struct_span_err!(\n-            ccx.tcx.sess,\n-            span,\n-            E0625,\n-            \"thread-local statics cannot be \\\n-            accessed at compile-time\"\n-        )\n+        ccx.tcx.sess.create_err(NonConstOpErr { span })\n     }\n }\n "}, {"sha": "1d3e33c81851f5cb84b1132f51fdda2a535f81ad", "filename": "compiler/rustc_error_messages/locales/en-US/builtin_macros.ftl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fbuiltin_macros.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fbuiltin_macros.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fbuiltin_macros.ftl?ref=dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f", "patch": "@@ -1,5 +1,5 @@\n-builtin_macros-requires-cfg-pattern =\n+builtin-macros-requires-cfg-pattern =\n     macro requires a cfg-pattern as an argument\n     .label = cfg-pattern required\n \n-builtin_macros-expected-one-cfg-pattern = expected 1 cfg-pattern\n+builtin-macros-expected-one-cfg-pattern = expected 1 cfg-pattern"}, {"sha": "3f2ff86100160b0f2eead39e5ee5dbb1c696cee0", "filename": "compiler/rustc_error_messages/locales/en-US/const_eval.ftl", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fconst_eval.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fconst_eval.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fconst_eval.ftl?ref=dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f", "patch": "@@ -0,0 +1,31 @@\n+const-eval-unstable-in-stable =\n+    const-stable function cannot use `#[feature({$gate})]`\n+    .unstable-sugg = if it is not part of the public API, make this function unstably const\n+    .bypass-sugg = otherwise `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks\n+\n+const-eval-thread-local-access =\n+    thread-local statics cannot be accessed at compile-time\n+\n+const-eval-static-access =\n+    {$kind}s cannot refer to statics\n+    .help = consider extracting the value of the `static` to a `const`, and referring to that\n+    .teach-note = `static` and `const` variables can refer to other `const` variables. A `const` variable, however, cannot refer to a `static` variable.\n+    .teach-help = To fix this, the value can be extracted to a `const` and then used.\n+\n+const-eval-raw-ptr-to-int =\n+    pointers cannot be cast to integers during const eval\n+    .note = at compile-time, pointers do not have an integer value\n+    .note2 = avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\n+\n+const-eval-raw-ptr-comparison =\n+    pointers cannot be reliably compared during const eval\n+    .note = see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n+\n+const-eval-panic-non-str = argument to `panic!()` in a const context must have type `&str`\n+\n+const-eval-mut-deref =\n+    mutation through a reference is not allowed in {$kind}s\n+\n+const-eval-transient-mut-borrow = mutable references are not allowed in {$kind}s\n+\n+const-eval-transient-mut-borrow-raw = raw mutable references are not allowed in {$kind}s"}, {"sha": "5a482bc5b2c392e311d0a22e093fedb216cf33e3", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f", "patch": "@@ -37,6 +37,7 @@ fluent_messages! {\n     parser => \"../locales/en-US/parser.ftl\",\n     privacy => \"../locales/en-US/privacy.ftl\",\n     typeck => \"../locales/en-US/typeck.ftl\",\n+    const_eval => \"../locales/en-US/const_eval.ftl\",\n }\n \n pub use fluent_generated::{self as fluent, DEFAULT_LOCALE_RESOURCES};"}, {"sha": "7d7e92c522922fbf99ba2ac57eb238023a85c715", "filename": "compiler/rustc_errors/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2FCargo.toml?ref=dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f", "patch": "@@ -13,6 +13,7 @@ rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_hir = { path = \"../rustc_hir\" }\n rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n unicode-width = \"0.1.4\"\n atty = \"0.2\""}, {"sha": "9429ad1a897453ec2dd7d63abf8eebf3f5f45ab7", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f", "patch": "@@ -5,6 +5,7 @@ use crate::{\n };\n use rustc_data_structures::stable_map::FxHashMap;\n use rustc_error_messages::FluentValue;\n+use rustc_hir as hir;\n use rustc_lint_defs::{Applicability, LintExpectationId};\n use rustc_span::edition::LATEST_STABLE_EDITION;\n use rustc_span::symbol::{Ident, Symbol};\n@@ -160,6 +161,16 @@ impl<'source> Into<FluentValue<'source>> for DiagnosticArgValue<'source> {\n     }\n }\n \n+impl IntoDiagnosticArg for hir::ConstContext {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Borrowed(match self {\n+            hir::ConstContext::ConstFn => \"constant function\",\n+            hir::ConstContext::Static(_) => \"static\",\n+            hir::ConstContext::Const => \"constant\",\n+        }))\n+    }\n+}\n+\n /// Trait implemented by error types. This should not be implemented manually. Instead, use\n /// `#[derive(SessionSubdiagnostic)]` -- see [rustc_macros::SessionSubdiagnostic].\n #[rustc_diagnostic_item = \"AddSubdiagnostic\"]"}, {"sha": "acd77f5d2ee9136b835cb3b9bc3758b7607020ef", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f", "patch": "@@ -1595,6 +1595,9 @@ impl fmt::Display for ConstContext {\n     }\n }\n \n+// NOTE: `IntoDiagnosticArg` impl for `ConstContext` lives in `rustc_errors`\n+// due to a cyclical dependency between hir that crate.\n+\n /// A literal.\n pub type Lit = Spanned<LitKind>;\n "}, {"sha": "2758fcd1310fecff31a716a09c096b5ce3319f6b", "filename": "compiler/rustc_macros/src/diagnostics/fluent.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs?ref=dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f", "patch": "@@ -189,9 +189,13 @@ pub(crate) fn fluent_messages(input: proc_macro::TokenStream) -> proc_macro::Tok\n             if let Entry::Message(Message { id: Identifier { name }, attributes, .. }) = entry {\n                 let _ = previous_defns.entry(name.to_string()).or_insert(ident_span);\n \n-                // `typeck-foo-bar` => `foo_bar`\n+                // `typeck-foo-bar` => `foo_bar` (in `typeck.ftl`)\n+                // `const-eval-baz` => `baz` (in `const_eval.ftl`)\n                 let snake_name = Ident::new(\n-                    &name.replace(&format!(\"{}-\", res.ident), \"\").replace(\"-\", \"_\"),\n+                    // FIXME: should probably trim prefix, not replace all occurrences\n+                    &name\n+                        .replace(&format!(\"{}-\", res.ident).replace(\"_\", \"-\"), \"\")\n+                        .replace(\"-\", \"_\"),\n                     span,\n                 );\n                 constants.extend(quote! {"}, {"sha": "1eee0c3163d400d8fe8cc26ee04e2fa4419084f3", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=dbae8309a0656e0cacf1f4a47524d0d62e5ffe0f", "patch": "@@ -2,7 +2,7 @@ use crate::cgu_reuse_tracker::CguReuseTracker;\n use crate::code_stats::CodeStats;\n pub use crate::code_stats::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n use crate::config::{self, CrateType, OutputType, SwitchWithOptPath};\n-use crate::parse::ParseSess;\n+use crate::parse::{add_feature_diagnostics, ParseSess};\n use crate::search_paths::{PathKind, SearchPath};\n use crate::{filesearch, lint};\n \n@@ -458,6 +458,15 @@ impl Session {\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         self.parse_sess.create_err(err)\n     }\n+    pub fn create_feature_err<'a>(\n+        &'a self,\n+        err: impl SessionDiagnostic<'a>,\n+        feature: Symbol,\n+    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        let mut err = self.parse_sess.create_err(err);\n+        add_feature_diagnostics(&mut err, &self.parse_sess, feature);\n+        err\n+    }\n     pub fn emit_err<'a>(&'a self, err: impl SessionDiagnostic<'a>) -> ErrorGuaranteed {\n         self.parse_sess.emit_err(err)\n     }"}]}