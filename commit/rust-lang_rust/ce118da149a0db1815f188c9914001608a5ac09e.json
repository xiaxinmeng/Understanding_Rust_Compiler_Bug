{"sha": "ce118da149a0db1815f188c9914001608a5ac09e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMTE4ZGExNDlhMGRiMTgxNWYxODhjOTkxNDAwMTYwOGE1YWMwOWU=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-05T20:25:24Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-05T20:25:24Z"}, "message": "Rename feedback to show_message", "tree": {"sha": "daab54d43f39cd87f0e92bff56410b2dbb146395", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daab54d43f39cd87f0e92bff56410b2dbb146395"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce118da149a0db1815f188c9914001608a5ac09e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce118da149a0db1815f188c9914001608a5ac09e", "html_url": "https://github.com/rust-lang/rust/commit/ce118da149a0db1815f188c9914001608a5ac09e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce118da149a0db1815f188c9914001608a5ac09e/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80347b8187e8cc9f062335bc62643c009e7400d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/80347b8187e8cc9f062335bc62643c009e7400d8", "html_url": "https://github.com/rust-lang/rust/commit/80347b8187e8cc9f062335bc62643c009e7400d8"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "fb2305b26c00f9db96f8e0269b553245a45a78ce", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce118da149a0db1815f188c9914001608a5ac09e/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce118da149a0db1815f188c9914001608a5ac09e/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=ce118da149a0db1815f188c9914001608a5ac09e", "patch": "@@ -63,7 +63,7 @@ pub fn main_loop(\n             Err(e) => {\n                 log::error!(\"loading workspace failed: {}\", e);\n \n-                feedback(\n+                show_message(\n                     req::MessageType::Error,\n                     format!(\"rust-analyzer failed to load workspace: {}\", e),\n                     msg_sender,\n@@ -247,7 +247,7 @@ fn main_loop_inner(\n             && pending_libraries.is_empty()\n             && in_flight_libraries == 0\n         {\n-            feedback(req::MessageType::Info, \"workspace loaded\", msg_sender);\n+            show_message(req::MessageType::Info, \"workspace loaded\", msg_sender);\n             // Only send the notification first time\n             send_workspace_notification = false;\n         }\n@@ -505,7 +505,7 @@ fn update_file_notifications_on_threadpool(\n     });\n }\n \n-fn feedback<M: Into<String>>(typ: req::MessageType, msg: M, sender: &Sender<RawMessage>) {\n+fn show_message<M: Into<String>>(typ: req::MessageType, msg: M, sender: &Sender<RawMessage>) {\n     let not = RawNotification::new::<req::ShowMessage>(&req::ShowMessageParams {\n         typ,\n         message: msg.into(),"}, {"sha": "1c099a78f59fe4332404a48b23373de38481da02", "filename": "crates/ra_lsp_server/tests/heavy_tests/main.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce118da149a0db1815f188c9914001608a5ac09e/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce118da149a0db1815f188c9914001608a5ac09e/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs?ref=ce118da149a0db1815f188c9914001608a5ac09e", "patch": "@@ -31,7 +31,7 @@ version = \"0.0.0\"\n use std::collections::Spam;\n \"#,\n     );\n-    server.wait_for_feedback(\"workspace loaded\");\n+    server.wait_for_message(\"workspace loaded\");\n     eprintln!(\"loading took    {:?}\", project_start.elapsed());\n     let completion_start = Instant::now();\n     let res = server.send_request::<Completion>(CompletionParams {\n@@ -53,7 +53,7 @@ fn foo() {\n }\n \",\n     );\n-    server.wait_for_feedback(\"workspace loaded\");\n+    server.wait_for_message(\"workspace loaded\");\n     server.request::<Runnables>(\n         RunnablesParams { text_document: server.doc_id(\"lib.rs\"), position: None },\n         json!([\n@@ -107,7 +107,7 @@ pub fn foo() {}\n fn test_eggs() {}\n \"#,\n     );\n-    server.wait_for_feedback(\"workspace loaded\");\n+    server.wait_for_message(\"workspace loaded\");\n     server.request::<Runnables>(\n         RunnablesParams {\n             text_document: server.doc_id(\"tests/spam.rs\"),\n@@ -167,7 +167,7 @@ fn main() {\n pub use std::collections::HashMap;\n \"#,\n     );\n-    server.wait_for_feedback(\"workspace loaded\");\n+    server.wait_for_message(\"workspace loaded\");\n \n     server.request::<Formatting>(\n         DocumentFormattingParams {\n@@ -216,7 +216,7 @@ mod bar;\n fn main() {}\n \"#,\n     );\n-    server.wait_for_feedback(\"workspace loaded\");\n+    server.wait_for_message(\"workspace loaded\");\n     let empty_context = || CodeActionContext { diagnostics: Vec::new(), only: None };\n     server.request::<CodeActionRequest>(\n         CodeActionParams {"}, {"sha": "08f7ad6fdeab4ab38950107fc85b82cf42bb7a1a", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce118da149a0db1815f188c9914001608a5ac09e/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce118da149a0db1815f188c9914001608a5ac09e/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=ce118da149a0db1815f188c9914001608a5ac09e", "patch": "@@ -134,14 +134,14 @@ impl Server {\n         }\n         panic!(\"no response\");\n     }\n-    pub fn wait_for_feedback(&self, feedback: &str) {\n-        self.wait_for_feedback_n(feedback, 1)\n+    pub fn wait_for_message(&self, message: &str) {\n+        self.wait_for_message_n(message, 1)\n     }\n-    pub fn wait_for_feedback_n(&self, feedback: &str, n: usize) {\n+    pub fn wait_for_message_n(&self, message: &str, n: usize) {\n         let f = |msg: &RawMessage| match msg {\n             RawMessage::Notification(n) if n.method == ShowMessage::METHOD => {\n-                let message = n.clone().cast::<req::ShowMessage>().unwrap();\n-                message.message == feedback\n+                let msg = n.clone().cast::<req::ShowMessage>().unwrap();\n+                msg.message == message\n             }\n             _ => false,\n         };"}]}