{"sha": "cbeaa541aabfb3cfb4621bee5cc53629b472d7bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZWFhNTQxYWFiZmIzY2ZiNDYyMWJlZTVjYzUzNjI5YjQ3MmQ3YmQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-10T18:26:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-10T18:26:43Z"}, "message": "switch CargoWorkspace to arena", "tree": {"sha": "82986532c4ac645ee8b2db5009b4db410463e77e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82986532c4ac645ee8b2db5009b4db410463e77e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbeaa541aabfb3cfb4621bee5cc53629b472d7bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbeaa541aabfb3cfb4621bee5cc53629b472d7bd", "html_url": "https://github.com/rust-lang/rust/commit/cbeaa541aabfb3cfb4621bee5cc53629b472d7bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbeaa541aabfb3cfb4621bee5cc53629b472d7bd/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a7a68de165fe89457e130de90e50a90c0b0d3c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a7a68de165fe89457e130de90e50a90c0b0d3c2", "html_url": "https://github.com/rust-lang/rust/commit/1a7a68de165fe89457e130de90e50a90c0b0d3c2"}], "stats": {"total": 58, "additions": 28, "deletions": 30}, "files": [{"sha": "45f1feb7e5d6869115d6212b36bba0e0942d4d03", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbeaa541aabfb3cfb4621bee5cc53629b472d7bd/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cbeaa541aabfb3cfb4621bee5cc53629b472d7bd/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=cbeaa541aabfb3cfb4621bee5cc53629b472d7bd", "patch": "@@ -733,6 +733,7 @@ dependencies = [\n  \"languageserver-types 0.53.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_arena 0.1.0\",\n  \"ra_ide_api 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"ra_text_edit 0.1.0\","}, {"sha": "b4a7b3388c6b9235b0ea60a538e9ac031ee0b72b", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbeaa541aabfb3cfb4621bee5cc53629b472d7bd/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cbeaa541aabfb3cfb4621bee5cc53629b472d7bd/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=cbeaa541aabfb3cfb4621bee5cc53629b472d7bd", "patch": "@@ -30,6 +30,7 @@ thread_worker = { path = \"../thread_worker\" }\n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }\n ra_ide_api = { path = \"../ra_ide_api\" }\n+ra_arena = { path = \"../ra_arena\" }\n gen_lsp_server = { path = \"../gen_lsp_server\" }\n ra_vfs = { path = \"../ra_vfs\" }\n "}, {"sha": "9f429c9a1cc1a110663fff1bfa7455cdfea0229c", "filename": "crates/ra_lsp_server/src/project_model.rs", "status": "modified", "additions": 26, "deletions": 30, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/cbeaa541aabfb3cfb4621bee5cc53629b472d7bd/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbeaa541aabfb3cfb4621bee5cc53629b472d7bd/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs?ref=cbeaa541aabfb3cfb4621bee5cc53629b472d7bd", "patch": "@@ -2,6 +2,7 @@ use std::path::{Path, PathBuf};\n \n use cargo_metadata::{metadata_run, CargoOpt};\n use ra_syntax::SmolStr;\n+use ra_arena::{Arena, RawId, impl_arena_id};\n use rustc_hash::FxHashMap;\n use failure::{format_err, bail};\n use thread_worker::{WorkerHandle, Worker};\n@@ -17,14 +18,17 @@ use crate::Result;\n /// concepts.\n #[derive(Debug, Clone)]\n pub struct CargoWorkspace {\n-    packages: Vec<PackageData>,\n-    targets: Vec<TargetData>,\n+    packages: Arena<Package, PackageData>,\n+    targets: Arena<Target, TargetData>,\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub struct Package(usize);\n+pub struct Package(RawId);\n+impl_arena_id!(Package);\n+\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub struct Target(usize);\n+pub struct Target(RawId);\n+impl_arena_id!(Target);\n \n #[derive(Debug, Clone)]\n struct PackageData {\n@@ -61,38 +65,38 @@ pub enum TargetKind {\n \n impl Package {\n     pub fn name(self, ws: &CargoWorkspace) -> &str {\n-        ws.pkg(self).name.as_str()\n+        ws.packages[self].name.as_str()\n     }\n     pub fn root(self, ws: &CargoWorkspace) -> &Path {\n-        ws.pkg(self).manifest.parent().unwrap()\n+        ws.packages[self].manifest.parent().unwrap()\n     }\n     pub fn targets<'a>(self, ws: &'a CargoWorkspace) -> impl Iterator<Item = Target> + 'a {\n-        ws.pkg(self).targets.iter().cloned()\n+        ws.packages[self].targets.iter().cloned()\n     }\n     #[allow(unused)]\n     pub fn is_member(self, ws: &CargoWorkspace) -> bool {\n-        ws.pkg(self).is_member\n+        ws.packages[self].is_member\n     }\n     pub fn dependencies<'a>(\n         self,\n         ws: &'a CargoWorkspace,\n     ) -> impl Iterator<Item = &'a PackageDependency> + 'a {\n-        ws.pkg(self).dependencies.iter()\n+        ws.packages[self].dependencies.iter()\n     }\n }\n \n impl Target {\n     pub fn package(self, ws: &CargoWorkspace) -> Package {\n-        ws.tgt(self).pkg\n+        ws.targets[self].pkg\n     }\n     pub fn name(self, ws: &CargoWorkspace) -> &str {\n-        ws.tgt(self).name.as_str()\n+        ws.targets[self].name.as_str()\n     }\n     pub fn root(self, ws: &CargoWorkspace) -> &Path {\n-        ws.tgt(self).root.as_path()\n+        ws.targets[self].root.as_path()\n     }\n     pub fn kind(self, ws: &CargoWorkspace) -> TargetKind {\n-        ws.tgt(self).kind\n+        ws.targets[self].kind\n     }\n }\n \n@@ -106,33 +110,31 @@ impl CargoWorkspace {\n         )\n         .map_err(|e| format_err!(\"cargo metadata failed: {}\", e))?;\n         let mut pkg_by_id = FxHashMap::default();\n-        let mut packages = Vec::new();\n-        let mut targets = Vec::new();\n+        let mut packages = Arena::default();\n+        let mut targets = Arena::default();\n \n         let ws_members = &meta.workspace_members;\n \n         for meta_pkg in meta.packages {\n-            let pkg = Package(packages.len());\n             let is_member = ws_members.contains(&meta_pkg.id);\n-            pkg_by_id.insert(meta_pkg.id.clone(), pkg);\n-            let mut pkg_data = PackageData {\n+            let pkg = packages.alloc(PackageData {\n                 name: meta_pkg.name.into(),\n                 manifest: meta_pkg.manifest_path.clone(),\n                 targets: Vec::new(),\n                 is_member,\n                 dependencies: Vec::new(),\n-            };\n+            });\n+            let pkg_data = &mut packages[pkg];\n+            pkg_by_id.insert(meta_pkg.id.clone(), pkg);\n             for meta_tgt in meta_pkg.targets {\n-                let tgt = Target(targets.len());\n-                targets.push(TargetData {\n+                let tgt = targets.alloc(TargetData {\n                     pkg,\n                     name: meta_tgt.name.into(),\n                     root: meta_tgt.src_path.clone(),\n                     kind: TargetKind::new(meta_tgt.kind.as_slice()),\n                 });\n                 pkg_data.targets.push(tgt);\n             }\n-            packages.push(pkg_data)\n         }\n         let resolve = meta.resolve.expect(\"metadata executed with deps\");\n         for node in resolve.nodes {\n@@ -142,26 +144,20 @@ impl CargoWorkspace {\n                     name: dep_node.name.into(),\n                     pkg: pkg_by_id[&dep_node.pkg],\n                 };\n-                packages[source.0].dependencies.push(dep);\n+                packages[source].dependencies.push(dep);\n             }\n         }\n \n         Ok(CargoWorkspace { packages, targets })\n     }\n     pub fn packages<'a>(&'a self) -> impl Iterator<Item = Package> + 'a {\n-        (0..self.packages.len()).map(Package)\n+        self.packages.iter().map(|(id, _pkg)| id)\n     }\n     pub fn target_by_root(&self, root: &Path) -> Option<Target> {\n         self.packages()\n             .filter_map(|pkg| pkg.targets(self).find(|it| it.root(self) == root))\n             .next()\n     }\n-    fn pkg(&self, pkg: Package) -> &PackageData {\n-        &self.packages[pkg.0]\n-    }\n-    fn tgt(&self, tgt: Target) -> &TargetData {\n-        &self.targets[tgt.0]\n-    }\n }\n \n fn find_cargo_toml(path: &Path) -> Result<PathBuf> {"}]}