{"sha": "b180d954d600a8c9b98ee31d0298ce1b13b6291f", "node_id": "C_kwDOAAsO6NoAKGIxODBkOTU0ZDYwMGE4YzliOThlZTMxZDAyOThjZTFiMTNiNjI5MWY", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-09-25T21:37:56Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-09-25T21:37:56Z"}, "message": "Don't lint `*_interior_mutable_const` on unions due to potential ICE.", "tree": {"sha": "981ff54b75f1f71c8074c1840a0249fc0bc95f2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/981ff54b75f1f71c8074c1840a0249fc0bc95f2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b180d954d600a8c9b98ee31d0298ce1b13b6291f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b180d954d600a8c9b98ee31d0298ce1b13b6291f", "html_url": "https://github.com/rust-lang/rust/commit/b180d954d600a8c9b98ee31d0298ce1b13b6291f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b180d954d600a8c9b98ee31d0298ce1b13b6291f/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b1ad17e5c9931097240b659e9f596985ad5ba45", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b1ad17e5c9931097240b659e9f596985ad5ba45", "html_url": "https://github.com/rust-lang/rust/commit/8b1ad17e5c9931097240b659e9f596985ad5ba45"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "ea76ce2c57357c7183e70cdfb97042674c5e0e1b", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b180d954d600a8c9b98ee31d0298ce1b13b6291f/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b180d954d600a8c9b98ee31d0298ce1b13b6291f/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=b180d954d600a8c9b98ee31d0298ce1b13b6291f", "patch": "@@ -149,6 +149,9 @@ fn is_value_unfrozen_raw<'tcx>(\n             // the fact that we have to dig into every structs to search enums\n             // leads us to the point checking `UnsafeCell` directly is the only option.\n             ty::Adt(ty_def, ..) if ty_def.is_unsafe_cell() => true,\n+            // As of 2022-09-08 miri doesn't track which union field is active so there's no safe way to check the\n+            // contained value.\n+            ty::Adt(def, ..) if def.is_union() => false,\n             ty::Array(..) | ty::Adt(..) | ty::Tuple(..) => {\n                 let val = cx.tcx.destructure_mir_constant(cx.param_env, val);\n                 val.fields.iter().any(|field| inner(cx, *field))"}, {"sha": "c67b22f6f8c47b01cdd713dd15bf2e805e6fcd9a", "filename": "tests/ui/crashes/ice-9445.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b180d954d600a8c9b98ee31d0298ce1b13b6291f/tests%2Fui%2Fcrashes%2Fice-9445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b180d954d600a8c9b98ee31d0298ce1b13b6291f/tests%2Fui%2Fcrashes%2Fice-9445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-9445.rs?ref=b180d954d600a8c9b98ee31d0298ce1b13b6291f", "patch": "@@ -0,0 +1,3 @@\n+const UNINIT: core::mem::MaybeUninit<core::cell::Cell<&'static ()>> = core::mem::MaybeUninit::uninit();\n+\n+fn main() {}"}]}