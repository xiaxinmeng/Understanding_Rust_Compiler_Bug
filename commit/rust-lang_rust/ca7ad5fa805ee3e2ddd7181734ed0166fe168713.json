{"sha": "ca7ad5fa805ee3e2ddd7181734ed0166fe168713", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhN2FkNWZhODA1ZWUzZTJkZGQ3MTgxNzM0ZWQwMTY2ZmUxNjg3MTM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2014-11-20T07:07:37Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2014-11-20T07:07:37Z"}, "message": "Add DList lint (fixes #2)", "tree": {"sha": "b6a95a1fb54b0a604146a8a833ea3d25f7ddd2c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6a95a1fb54b0a604146a8a833ea3d25f7ddd2c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca7ad5fa805ee3e2ddd7181734ed0166fe168713", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca7ad5fa805ee3e2ddd7181734ed0166fe168713", "html_url": "https://github.com/rust-lang/rust/commit/ca7ad5fa805ee3e2ddd7181734ed0166fe168713", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca7ad5fa805ee3e2ddd7181734ed0166fe168713/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cf7e4368f689ac197c02cbf7e8014e122c5756e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cf7e4368f689ac197c02cbf7e8014e122c5756e", "html_url": "https://github.com/rust-lang/rust/commit/7cf7e4368f689ac197c02cbf7e8014e122c5756e"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "6166767378a4068f5f9c4d50245996add6560542", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca7ad5fa805ee3e2ddd7181734ed0166fe168713/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7ad5fa805ee3e2ddd7181734ed0166fe168713/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ca7ad5fa805ee3e2ddd7181734ed0166fe168713", "patch": "@@ -7,7 +7,8 @@ extern crate syntax;\n #[phase(plugin, link)]\n extern crate rustc;\n \n-\n+// Only for the compile time checking of paths\n+extern crate collections;\n \n use rustc::plugin::Registry;\n use rustc::lint::LintPassObject;"}, {"sha": "625baec78fe23c56ef0aaf16403b387bef6db2db", "filename": "src/types.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ca7ad5fa805ee3e2ddd7181734ed0166fe168713/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7ad5fa805ee3e2ddd7181734ed0166fe168713/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=ca7ad5fa805ee3e2ddd7181734ed0166fe168713", "patch": "@@ -11,6 +11,8 @@ pub struct TypePass;\n \n declare_lint!(CLIPPY_BOX_VEC, Warn,\n               \"Warn on usage of Box<Vec<T>>\")\n+declare_lint!(CLIPPY_DLIST, Warn,\n+              \"Warn on usage of DList\")\n \n /// Matches a type with a provided string, and returns its type parameters if successful\n pub fn match_ty_unwrap<'a>(ty: &'a Ty, segments: &[&str]) -> Option<&'a [P<Ty>]> {\n@@ -45,16 +47,38 @@ pub fn span_note_and_lint(cx: &Context, lint: &'static Lint, span: Span, msg: &s\n \n impl LintPass for TypePass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(CLIPPY_BOX_VEC)\n+        lint_array!(CLIPPY_BOX_VEC, CLIPPY_DLIST)\n     }\n \n     fn check_ty(&mut self, cx: &Context, ty: &ast::Ty) {\n+        {\n+            // In case stuff gets moved around\n+            use std::boxed::Box;\n+            use std::vec::Vec;\n+        }\n         match_ty_unwrap(ty, &[\"std\", \"boxed\", \"Box\"]).and_then(|t| t.head())\n           .map(|t| match_ty_unwrap(&**t, &[\"std\", \"vec\", \"Vec\"]))\n           .map(|_| {\n             span_note_and_lint(cx, CLIPPY_BOX_VEC, ty.span,\n                               \"You seem to be trying to use Box<Vec<T>>. Did you mean to use Vec<T>?\",\n                               \"Vec<T> is already on the heap, Box<Vec<T>> makes an extra allocation\");\n           });\n+        {\n+            // In case stuff gets moved around\n+            use collections::dlist::DList as DL1;\n+            use std::collections::dlist::DList as DL2;\n+            use std::collections::DList as DL3;\n+        }\n+        let dlists = [vec![\"std\",\"collections\",\"dlist\",\"DList\"],\n+                      vec![\"std\",\"collections\",\"DList\"],\n+                      vec![\"collections\",\"dlist\",\"DList\"]];\n+        for path in dlists.iter() {\n+            if match_ty_unwrap(ty, path.as_slice()).is_some() {\n+                span_note_and_lint(cx, CLIPPY_DLIST, ty.span,\n+                                   \"You seem to be trying to use a DList. Perhaps you meant some other data structure?\",\n+                                   \"A RingBuf might work.\");\n+                return;\n+            }\n+        }\n     }\n }\n\\ No newline at end of file"}]}