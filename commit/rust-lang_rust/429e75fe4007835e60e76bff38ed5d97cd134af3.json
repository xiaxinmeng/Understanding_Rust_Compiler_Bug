{"sha": "429e75fe4007835e60e76bff38ed5d97cd134af3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyOWU3NWZlNDAwNzgzNWU2MGU3NmJmZjM4ZWQ1ZDk3Y2QxMzRhZjM=", "commit": {"author": {"name": "CohenArthur", "email": "arthur.cohen@epita.fr", "date": "2020-08-22T13:49:16Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@epita.fr", "date": "2020-08-22T13:49:16Z"}, "message": "FunctionCx: WIP: Remove more common fields from CodegenCx", "tree": {"sha": "5a4d7f0bf551fb5128922d9186da060e415f7d8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a4d7f0bf551fb5128922d9186da060e415f7d8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/429e75fe4007835e60e76bff38ed5d97cd134af3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/429e75fe4007835e60e76bff38ed5d97cd134af3", "html_url": "https://github.com/rust-lang/rust/commit/429e75fe4007835e60e76bff38ed5d97cd134af3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/429e75fe4007835e60e76bff38ed5d97cd134af3/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a6365f95f1f41cc9225695f50a5a43f8ecf1833", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6365f95f1f41cc9225695f50a5a43f8ecf1833", "html_url": "https://github.com/rust-lang/rust/commit/1a6365f95f1f41cc9225695f50a5a43f8ecf1833"}], "stats": {"total": 81, "additions": 37, "deletions": 44}, "files": [{"sha": "65613754d0666a930e8f9ed1ea83a850b297da8c", "filename": "src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/429e75fe4007835e60e76bff38ed5d97cd134af3/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429e75fe4007835e60e76bff38ed5d97cd134af3/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=429e75fe4007835e60e76bff38ed5d97cd134af3", "patch": "@@ -226,7 +226,7 @@ pub(crate) fn import_function<'tcx>(\n impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n     /// Instance must be monomorphized\n     pub(crate) fn get_function_ref(&mut self, inst: Instance<'tcx>) -> FuncRef {\n-        let func_id = import_function(self.codegen_cx.tcx, self.codegen_cx.module, inst);\n+        let func_id = import_function(self.codegen_cx.tcx, &mut self.codegen_cx.module, inst);\n         let func_ref = self\n             .codegen_cx.module\n             .declare_func_in_func(func_id, &mut self.bcx.func);"}, {"sha": "92d910dd9984ee7fec7f266982e8da50af60ae14", "filename": "src/base.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/429e75fe4007835e60e76bff38ed5d97cd134af3/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429e75fe4007835e60e76bff38ed5d97cd134af3/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=429e75fe4007835e60e76bff38ed5d97cd134af3", "patch": "@@ -8,13 +8,13 @@ pub(crate) fn trans_fn<'tcx, B: Backend + 'static>(\n     instance: Instance<'tcx>,\n     linkage: Linkage,\n ) {\n-    let tcx = cx.codegen_cx.tcx;\n+    let tcx = cx.tcx;\n \n     let mir = tcx.instance_mir(instance.def);\n \n     // Declare function\n-    let (name, sig) = get_function_name_and_sig(tcx, cx.codegen_cx.module.isa().triple(), instance, false);\n-    let func_id = cx.codegen_cx.module.declare_function(&name, linkage, &sig).unwrap();\n+    let (name, sig) = get_function_name_and_sig(tcx, cx.module.isa().triple(), instance, false);\n+    let func_id = cx.module.declare_function(&name, linkage, &sig).unwrap();\n \n     // Make FunctionBuilder\n     let context = &mut cx.cached_context;\n@@ -30,13 +30,11 @@ pub(crate) fn trans_fn<'tcx, B: Backend + 'static>(\n     let block_map: IndexVec<BasicBlock, Block> = (0..mir.basic_blocks().len()).map(|_| bcx.create_block()).collect();\n \n     // Make FunctionCx\n-    let pointer_type = cx.codegen_cx.module.target_config().pointer_type();\n+    let pointer_type = cx.module.target_config().pointer_type();\n     let clif_comments = crate::pretty_clif::CommentWriter::new(tcx, instance);\n \n     let mut fx = FunctionCx {\n-        tcx,\n-        module: &mut cx.codegen_cx.module,\n-        global_asm: &mut cx.global_asm,\n+        codegen_cx: cx,\n         pointer_type,\n \n         instance,\n@@ -49,8 +47,6 @@ pub(crate) fn trans_fn<'tcx, B: Backend + 'static>(\n         cold_blocks: EntitySet::new(),\n \n         clif_comments,\n-        constants_cx: &mut cx.constants_cx,\n-        vtables: &mut cx.vtables,\n         source_info_set: indexmap::IndexSet::new(),\n         next_ssa_var: 0,\n \n@@ -78,7 +74,7 @@ pub(crate) fn trans_fn<'tcx, B: Backend + 'static>(\n     let cold_blocks = fx.cold_blocks;\n \n     crate::pretty_clif::write_clif_file(\n-        cx.codegen_cx.tcx,\n+        cx.tcx,\n         \"unopt\",\n         None,\n         instance,\n@@ -98,10 +94,10 @@ pub(crate) fn trans_fn<'tcx, B: Backend + 'static>(\n     // instruction, which doesn't have an encoding.\n     context.compute_cfg();\n     context.compute_domtree();\n-    context.eliminate_unreachable_code(cx.codegen_cx.module.isa()).unwrap();\n+    context.eliminate_unreachable_code(cx.module.isa()).unwrap();\n \n     // Define function\n-    let module = &mut cx.codegen_cx.module;\n+    let module = &mut cx.module;\n     tcx.sess.time(\n         \"define function\",\n         || module.define_function(\n@@ -113,16 +109,16 @@ pub(crate) fn trans_fn<'tcx, B: Backend + 'static>(\n \n     // Write optimized function to file for debugging\n     crate::pretty_clif::write_clif_file(\n-        cx.codegen_cx.tcx,\n+        cx.tcx,\n         \"opt\",\n-        Some(cx.codegen_cx.module.isa()),\n+        Some(cx.module.isa()),\n         instance,\n         &context,\n         &clif_comments,\n     );\n \n     // Define debuginfo for function\n-    let isa = cx.codegen_cx.module.isa();\n+    let isa = cx.module.isa();\n     let debug_context = &mut cx.debug_context;\n     let unwind_context = &mut cx.unwind_context;\n     tcx.sess.time(\"generate debug info\", || {"}, {"sha": "bf7fc57081841e064b743385d1c2d252edd362c5", "filename": "src/common.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/429e75fe4007835e60e76bff38ed5d97cd134af3/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429e75fe4007835e60e76bff38ed5d97cd134af3/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=429e75fe4007835e60e76bff38ed5d97cd134af3", "patch": "@@ -266,7 +266,6 @@ pub(crate) fn type_sign(ty: Ty<'_>) -> bool {\n \n pub(crate) struct FunctionCx<'clif, 'tcx, B: Backend + 'static> {\n     pub(crate) codegen_cx: &'clif mut crate::CodegenCx<'tcx, B>,\n-    pub(crate) global_asm: &'clif mut String,\n     pub(crate) pointer_type: Type, // Cached from module\n \n     pub(crate) instance: Instance<'tcx>,\n@@ -283,8 +282,6 @@ pub(crate) struct FunctionCx<'clif, 'tcx, B: Backend + 'static> {\n     pub(crate) cold_blocks: EntitySet<Block>,\n \n     pub(crate) clif_comments: crate::pretty_clif::CommentWriter,\n-    pub(crate) vtables: &'clif mut FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,\n-\n     pub(crate) source_info_set: indexmap::IndexSet<SourceInfo>,\n \n     /// This should only be accessed by `CPlace::new_var`."}, {"sha": "7f047b04c9dcd84efdea8a8eb47515e2e13c9188", "filename": "src/constant.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/429e75fe4007835e60e76bff38ed5d97cd134af3/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429e75fe4007835e60e76bff38ed5d97cd134af3/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=429e75fe4007835e60e76bff38ed5d97cd134af3", "patch": "@@ -67,7 +67,7 @@ pub(crate) fn codegen_tls_ref<'tcx>(\n     def_id: DefId,\n     layout: TyAndLayout<'tcx>,\n ) -> CValue<'tcx> {\n-    let data_id = data_id_for_static(fx.codegen_cx.tcx, fx.codegen_cx.module, def_id, false);\n+    let data_id = data_id_for_static(fx.codegen_cx.tcx, &mut fx.codegen_cx.module, def_id, false);\n     let local_data_id = fx.codegen_cx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     #[cfg(debug_assertions)]\n     fx.add_comment(local_data_id, format!(\"tls {:?}\", def_id));\n@@ -80,7 +80,7 @@ fn codegen_static_ref<'tcx>(\n     def_id: DefId,\n     layout: TyAndLayout<'tcx>,\n ) -> CPlace<'tcx> {\n-    let data_id = data_id_for_static(fx.codegen_cx.tcx, fx.codegen_cx.module, def_id, false);\n+    let data_id = data_id_for_static(fx.codegen_cx.tcx, &mut fx.codegen_cx.module, def_id, false);\n     let local_data_id = fx.codegen_cx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     #[cfg(debug_assertions)]\n     fx.add_comment(local_data_id, format!(\"{:?}\", def_id));\n@@ -167,21 +167,21 @@ pub(crate) fn trans_const_value<'tcx>(\n                     let alloc_kind = fx.codegen_cx.tcx.get_global_alloc(ptr.alloc_id);\n                     let base_addr = match alloc_kind {\n                         Some(GlobalAlloc::Memory(alloc)) => {\n-                            fx.constants_cx.todo.push(TodoItem::Alloc(ptr.alloc_id));\n-                            let data_id = data_id_for_alloc_id(fx.codegen_cx.module, ptr.alloc_id, alloc.align, alloc.mutability);\n+                            fx.codegen_cx.constants_cx.todo.push(TodoItem::Alloc(ptr.alloc_id));\n+                            let data_id = data_id_for_alloc_id(&mut fx.codegen_cx.module, ptr.alloc_id, alloc.align, alloc.mutability);\n                             let local_data_id = fx.codegen_cx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n                             #[cfg(debug_assertions)]\n                             fx.add_comment(local_data_id, format!(\"{:?}\", ptr.alloc_id));\n                             fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n                         }\n                         Some(GlobalAlloc::Function(instance)) => {\n-                            let func_id = crate::abi::import_function(fx.codegen_cx.tcx, fx.codegen_cx.module, instance);\n+                            let func_id = crate::abi::import_function(fx.codegen_cx.tcx, &mut fx.codegen_cx.module, instance);\n                             let local_func_id = fx.codegen_cx.module.declare_func_in_func(func_id, &mut fx.bcx.func);\n                             fx.bcx.ins().func_addr(fx.pointer_type, local_func_id)\n                         }\n                         Some(GlobalAlloc::Static(def_id)) => {\n                             assert!(fx.codegen_cx.tcx.is_static(def_id));\n-                            let data_id = data_id_for_static(fx.codegen_cx.tcx, fx.codegen_cx.module, def_id, false);\n+                            let data_id = data_id_for_static(fx.codegen_cx.tcx, &mut fx.codegen_cx.module, def_id, false);\n                             let local_data_id = fx.codegen_cx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n                             #[cfg(debug_assertions)]\n                             fx.add_comment(local_data_id, format!(\"{:?}\", def_id));\n@@ -216,8 +216,8 @@ fn pointer_for_allocation<'tcx>(\n     alloc: &'tcx Allocation,\n ) -> crate::pointer::Pointer {\n     let alloc_id = fx.codegen_cx.tcx.create_memory_alloc(alloc);\n-    fx.constants_cx.todo.push(TodoItem::Alloc(alloc_id));\n-    let data_id = data_id_for_alloc_id(fx.codegen_cx.module, alloc_id, alloc.align, alloc.mutability);\n+    fx.codegen_cx.constants_cx.todo.push(TodoItem::Alloc(alloc_id));\n+    let data_id = data_id_for_alloc_id(&mut fx.codegen_cx.module, alloc_id, alloc.align, alloc.mutability);\n \n     let local_data_id = fx.codegen_cx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     #[cfg(debug_assertions)]"}, {"sha": "89dccb8545fc619a0ff8a92e00c36056f746f836", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/429e75fe4007835e60e76bff38ed5d97cd134af3/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429e75fe4007835e60e76bff38ed5d97cd134af3/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=429e75fe4007835e60e76bff38ed5d97cd134af3", "patch": "@@ -95,7 +95,7 @@ fn line_program_add_file(\n \n impl<'tcx> DebugContext<'tcx> {\n     pub(super) fn emit_location(&mut self, entry_id: UnitEntryId, span: Span) {\n-        let loc = self.codegen_cx.tcx.sess.source_map().lookup_char_pos(span.lo());\n+        let loc = self.tcx.sess.source_map().lookup_char_pos(span.lo());\n \n         let file_id = line_program_add_file(\n             &mut self.dwarf.unit.line_program,\n@@ -129,7 +129,7 @@ impl<'tcx> DebugContext<'tcx> {\n         function_span: Span,\n         source_info_set: &indexmap::IndexSet<SourceInfo>,\n     ) -> CodeOffset {\n-        let tcx = self.codegen_cx.tcx;\n+        let tcx = self.tcx;\n         let line_program = &mut self.dwarf.unit.line_program;\n         let func = &context.func;\n "}, {"sha": "2c92fd0e47cc30018376216d43a4d93f90d2778a", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/429e75fe4007835e60e76bff38ed5d97cd134af3/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429e75fe4007835e60e76bff38ed5d97cd134af3/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=429e75fe4007835e60e76bff38ed5d97cd134af3", "patch": "@@ -165,7 +165,7 @@ impl<'tcx> DebugContext<'tcx> {\n         };\n \n         let name = format!(\"{}\", ty);\n-        let layout = self.codegen_cx.tcx.layout_of(ParamEnv::reveal_all().and(ty)).unwrap();\n+        let layout = self.tcx.layout_of(ParamEnv::reveal_all().and(ty)).unwrap();\n \n         let type_id = match ty.kind {\n             ty::Bool => primitive(&mut self.dwarf, gimli::DW_ATE_boolean),\n@@ -203,7 +203,7 @@ impl<'tcx> DebugContext<'tcx> {\n                 for (field_idx, field_def) in variant.fields.iter().enumerate() {\n                     let field_offset = layout.fields.offset(field_idx);\n                     let field_layout = layout.field(&layout::LayoutCx {\n-                        tcx: self.codegen_cx.tcx,\n+                        tcx: self.tcx,\n                         param_env: ParamEnv::reveal_all(),\n                     }, field_idx).unwrap();\n \n@@ -261,7 +261,7 @@ impl<'tcx> DebugContext<'tcx> {\n         local_map: FxHashMap<mir::Local, CPlace<'tcx>>,\n     ) {\n         let symbol = func_id.as_u32() as usize;\n-        let mir = self.codegen_cx.tcx.instance_mir(instance.def);\n+        let mir = self.tcx.instance_mir(instance.def);\n \n         // FIXME: add to appropriate scope instead of root\n         let scope = self.dwarf.unit.root();\n@@ -336,7 +336,7 @@ impl<'tcx> DebugContext<'tcx> {\n             let value_labels_ranges = context.build_value_labels_ranges(isa).unwrap();\n \n             for (local, _local_decl) in mir.local_decls.iter_enumerated() {\n-                let ty = self.codegen_cx.tcx.subst_and_normalize_erasing_regions(\n+                let ty = self.tcx.subst_and_normalize_erasing_regions(\n                     instance.substs,\n                     ty::ParamEnv::reveal_all(),\n                     &mir.local_decls[local].ty,"}, {"sha": "4bc3859652db23b584a6305bd3fe8a6b01f51602", "filename": "src/debuginfo/unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/429e75fe4007835e60e76bff38ed5d97cd134af3/src%2Fdebuginfo%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429e75fe4007835e60e76bff38ed5d97cd134af3/src%2Fdebuginfo%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Funwind.rs?ref=429e75fe4007835e60e76bff38ed5d97cd134af3", "patch": "@@ -54,7 +54,7 @@ impl<'tcx> UnwindContext<'tcx> {\n     }\n \n     pub(crate) fn emit<P: WriteDebugInfo>(self, product: &mut P) {\n-        let mut eh_frame = EhFrame::from(super::emit::WriterRelocate::new(super::target_endian(self.codegen_cx.tcx)));\n+        let mut eh_frame = EhFrame::from(super::emit::WriterRelocate::new(super::target_endian(self.tcx)));\n         self.frame_table.write_eh_frame(&mut eh_frame).unwrap();\n \n         if !eh_frame.0.writer.slice().is_empty() {\n@@ -74,7 +74,7 @@ impl<'tcx> UnwindContext<'tcx> {\n         self,\n         jit_module: &mut Module<cranelift_simplejit::SimpleJITBackend>,\n     ) -> Option<UnwindRegistry> {\n-        let mut eh_frame = EhFrame::from(super::emit::WriterRelocate::new(super::target_endian(self.codegen_cx.tcx)));\n+        let mut eh_frame = EhFrame::from(super::emit::WriterRelocate::new(super::target_endian(self.tcx)));\n         self.frame_table.write_eh_frame(&mut eh_frame).unwrap();\n \n         if eh_frame.0.writer.slice().is_empty() {"}, {"sha": "1d81efb880df772dd8f68cda7cd3dd719f8105a9", "filename": "src/driver/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/429e75fe4007835e60e76bff38ed5d97cd134af3/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429e75fe4007835e60e76bff38ed5d97cd134af3/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=429e75fe4007835e60e76bff38ed5d97cd134af3", "patch": "@@ -33,14 +33,14 @@ fn codegen_mono_items<'tcx>(\n     cx: &mut crate::CodegenCx<'tcx, impl Backend + 'static>,\n     mono_items: Vec<(MonoItem<'tcx>, (RLinkage, Visibility))>,\n ) {\n-    cx.codegen_cx.tcx.sess.time(\"predefine functions\", || {\n+    cx.tcx.sess.time(\"predefine functions\", || {\n         for &(mono_item, (linkage, visibility)) in &mono_items {\n             match mono_item {\n                 MonoItem::Fn(instance) => {\n                     let (name, sig) =\n-                        get_function_name_and_sig(cx.codegen_cx.tcx, cx.codegen_cx.module.isa().triple(), instance, false);\n+                        get_function_name_and_sig(cx.tcx, cx.module.isa().triple(), instance, false);\n                     let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n-                    cx.codegen_cx.module.declare_function(&name, linkage, &sig).unwrap();\n+                    cx.module.declare_function(&name, linkage, &sig).unwrap();\n                 }\n                 MonoItem::Static(_) | MonoItem::GlobalAsm(_) => {}\n             }\n@@ -58,7 +58,7 @@ fn trans_mono_item<'tcx, B: Backend + 'static>(\n     mono_item: MonoItem<'tcx>,\n     linkage: Linkage,\n ) {\n-    let tcx = cx.codegen_cx.tcx;\n+    let tcx = cx.tcx;\n     match mono_item {\n         MonoItem::Fn(inst) => {\n             let _inst_guard =\n@@ -85,7 +85,7 @@ fn trans_mono_item<'tcx, B: Backend + 'static>(\n                 }\n             });\n \n-            cx.codegen_cx.tcx.sess.time(\"codegen fn\", || crate::base::trans_fn(cx, inst, linkage));\n+            cx.tcx.sess.time(\"codegen fn\", || crate::base::trans_fn(cx, inst, linkage));\n         }\n         MonoItem::Static(def_id) => {\n             crate::constant::codegen_static(&mut cx.constants_cx, def_id);"}, {"sha": "6394937605a684e70b16c346cf93744b5263f1c1", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/429e75fe4007835e60e76bff38ed5d97cd134af3/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429e75fe4007835e60e76bff38ed5d97cd134af3/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=429e75fe4007835e60e76bff38ed5d97cd134af3", "patch": "@@ -160,8 +160,8 @@ impl<'tcx, B: Backend + 'static> CodegenCx<'tcx, B> {\n     }\n \n     fn finalize(mut self) -> (Module<B>, String, Option<DebugContext<'tcx>>, UnwindContext<'tcx>) {\n-        self.constants_cx.finalize(self.codegen_cx.tcx, &mut self.codegen_cx.module);\n-        (self.codegen_cx.module, self.global_asm, self.debug_context, self.unwind_context)\n+        self.constants_cx.finalize(self.tcx, &mut self.module);\n+        (self.module, self.global_asm, self.debug_context, self.unwind_context)\n     }\n }\n "}, {"sha": "f4d3a303bd319953c974c25ed62f082d36014dea", "filename": "src/vtable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/429e75fe4007835e60e76bff38ed5d97cd134af3/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429e75fe4007835e60e76bff38ed5d97cd134af3/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=429e75fe4007835e60e76bff38ed5d97cd134af3", "patch": "@@ -93,7 +93,7 @@ fn build_vtable<'tcx>(\n     let usize_size = fx.layout_of(fx.codegen_cx.tcx.types.usize).size.bytes() as usize;\n \n     let drop_in_place_fn =\n-        import_function(tcx, fx.codegen_cx.module, Instance::resolve_drop_in_place(tcx, layout.ty).polymorphize(fx.codegen_cx.tcx));\n+        import_function(tcx, &mut fx.codegen_cx.module, Instance::resolve_drop_in_place(tcx, layout.ty).polymorphize(fx.codegen_cx.tcx));\n \n     let mut components: Vec<_> = vec![Some(drop_in_place_fn), None, None];\n \n@@ -108,7 +108,7 @@ fn build_vtable<'tcx>(\n         opt_mth.map_or(None, |(def_id, substs)| {\n             Some(import_function(\n                 tcx,\n-                fx.codegen_cx.module,\n+                &mut fx.codegen_cx.module,\n                 Instance::resolve_for_vtable(tcx, ParamEnv::reveal_all(), def_id, substs).unwrap().polymorphize(fx.codegen_cx.tcx),\n             ))\n         })"}]}