{"sha": "b637798a5aa7878daa57c147028e98f2c5bc03c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2Mzc3OThhNWFhNzg3OGRhYTU3YzE0NzAyOGU5OGYyYzViYzAzYzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-03T03:41:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-03T03:41:29Z"}, "message": "auto merge of #9693 : sfackler/rust/newtype-removal, r=alexcrichton\n\nUnboundedPipeStream is still a newtype since process::set_stdio needs to\r\nlook into its internals.\r\n\r\nCloses #9667", "tree": {"sha": "9e94842bcfdafbe39f0dd6afd913e7cc4df22c27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e94842bcfdafbe39f0dd6afd913e7cc4df22c27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b637798a5aa7878daa57c147028e98f2c5bc03c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b637798a5aa7878daa57c147028e98f2c5bc03c5", "html_url": "https://github.com/rust-lang/rust/commit/b637798a5aa7878daa57c147028e98f2c5bc03c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b637798a5aa7878daa57c147028e98f2c5bc03c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccd9a963f75074da506c05fece1e3c965e742c51", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccd9a963f75074da506c05fece1e3c965e742c51", "html_url": "https://github.com/rust-lang/rust/commit/ccd9a963f75074da506c05fece1e3c965e742c51"}, {"sha": "019b131e12f49f1953a52865c1f19b025c73c06e", "url": "https://api.github.com/repos/rust-lang/rust/commits/019b131e12f49f1953a52865c1f19b025c73c06e", "html_url": "https://github.com/rust-lang/rust/commit/019b131e12f49f1953a52865c1f19b025c73c06e"}], "stats": {"total": 80, "additions": 49, "deletions": 31}, "files": [{"sha": "47ae89ccf9fc09ab4778fa1aa9f649e3e22f4de3", "filename": "src/libstd/rt/io/native/file.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b637798a5aa7878daa57c147028e98f2c5bc03c5/src%2Flibstd%2Frt%2Fio%2Fnative%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b637798a5aa7878daa57c147028e98f2c5bc03c5/src%2Flibstd%2Frt%2Fio%2Fnative%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnative%2Ffile.rs?ref=b637798a5aa7878daa57c147028e98f2c5bc03c5", "patch": "@@ -17,8 +17,9 @@ use libc::{c_int, FILE};\n #[allow(non_camel_case_types)]\n pub type fd_t = c_int;\n \n-// Make this a newtype so we can't do I/O on arbitrary integers\n-pub struct FileDesc(fd_t);\n+pub struct FileDesc {\n+    priv fd: fd_t\n+}\n \n impl FileDesc {\n     /// Create a `FileDesc` from an open C file descriptor.\n@@ -46,7 +47,9 @@ impl Seek for FileDesc {\n     fn seek(&mut self, _pos: i64, _style: SeekStyle) { fail2!() }\n }\n \n-pub struct CFile(*FILE);\n+pub struct CFile {\n+    priv file: *FILE\n+}\n \n impl CFile {\n     /// Create a `CFile` from an open `FILE` pointer."}, {"sha": "ff2802c75b0f3093ac78d1ddf77dbaa9a9595636", "filename": "src/libstd/rt/io/net/tcp.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b637798a5aa7878daa57c147028e98f2c5bc03c5/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b637798a5aa7878daa57c147028e98f2c5bc03c5/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs?ref=b637798a5aa7878daa57c147028e98f2c5bc03c5", "patch": "@@ -20,11 +20,13 @@ use rt::rtio::{IoFactory, IoFactoryObject,\n                RtioTcpStream, RtioTcpStreamObject};\n use rt::local::Local;\n \n-pub struct TcpStream(~RtioTcpStreamObject);\n+pub struct TcpStream {\n+    priv obj: ~RtioTcpStreamObject\n+}\n \n impl TcpStream {\n     fn new(s: ~RtioTcpStreamObject) -> TcpStream {\n-        TcpStream(s)\n+        TcpStream { obj: s }\n     }\n \n     pub fn connect(addr: SocketAddr) -> Option<TcpStream> {\n@@ -46,7 +48,7 @@ impl TcpStream {\n     }\n \n     pub fn peer_name(&mut self) -> Option<SocketAddr> {\n-        match (**self).peer_name() {\n+        match self.obj.peer_name() {\n             Ok(pn) => Some(pn),\n             Err(ioerr) => {\n                 rtdebug!(\"failed to get peer name: {:?}\", ioerr);\n@@ -57,7 +59,7 @@ impl TcpStream {\n     }\n \n     pub fn socket_name(&mut self) -> Option<SocketAddr> {\n-        match (**self).socket_name() {\n+        match self.obj.socket_name() {\n             Ok(sn) => Some(sn),\n             Err(ioerr) => {\n                 rtdebug!(\"failed to get socket name: {:?}\", ioerr);\n@@ -70,7 +72,7 @@ impl TcpStream {\n \n impl Reader for TcpStream {\n     fn read(&mut self, buf: &mut [u8]) -> Option<uint> {\n-        match (**self).read(buf) {\n+        match self.obj.read(buf) {\n             Ok(read) => Some(read),\n             Err(ioerr) => {\n                 // EOF is indicated by returning None\n@@ -87,7 +89,7 @@ impl Reader for TcpStream {\n \n impl Writer for TcpStream {\n     fn write(&mut self, buf: &[u8]) {\n-        match (**self).write(buf) {\n+        match self.obj.write(buf) {\n             Ok(_) => (),\n             Err(ioerr) => io_error::cond.raise(ioerr),\n         }\n@@ -96,7 +98,9 @@ impl Writer for TcpStream {\n     fn flush(&mut self) { /* no-op */ }\n }\n \n-pub struct TcpListener(~RtioTcpListenerObject);\n+pub struct TcpListener {\n+    priv obj: ~RtioTcpListenerObject\n+}\n \n impl TcpListener {\n     pub fn bind(addr: SocketAddr) -> Option<TcpListener> {\n@@ -105,7 +109,7 @@ impl TcpListener {\n             (*io).tcp_bind(addr)\n         };\n         match listener {\n-            Ok(l) => Some(TcpListener(l)),\n+            Ok(l) => Some(TcpListener { obj: l }),\n             Err(ioerr) => {\n                 io_error::cond.raise(ioerr);\n                 return None;\n@@ -114,7 +118,7 @@ impl TcpListener {\n     }\n \n     pub fn socket_name(&mut self) -> Option<SocketAddr> {\n-        match (**self).socket_name() {\n+        match self.obj.socket_name() {\n             Ok(sn) => Some(sn),\n             Err(ioerr) => {\n                 rtdebug!(\"failed to get socket name: {:?}\", ioerr);\n@@ -127,8 +131,8 @@ impl TcpListener {\n \n impl Listener<TcpStream, TcpAcceptor> for TcpListener {\n     fn listen(self) -> Option<TcpAcceptor> {\n-        match (**self).listen() {\n-            Ok(acceptor) => Some(TcpAcceptor(acceptor)),\n+        match self.obj.listen() {\n+            Ok(acceptor) => Some(TcpAcceptor { obj: acceptor }),\n             Err(ioerr) => {\n                 io_error::cond.raise(ioerr);\n                 None\n@@ -137,11 +141,13 @@ impl Listener<TcpStream, TcpAcceptor> for TcpListener {\n     }\n }\n \n-pub struct TcpAcceptor(~RtioTcpAcceptorObject);\n+pub struct TcpAcceptor {\n+    priv obj: ~RtioTcpAcceptorObject\n+}\n \n impl Acceptor<TcpStream> for TcpAcceptor {\n     fn accept(&mut self) -> Option<TcpStream> {\n-        match (**self).accept() {\n+        match self.obj.accept() {\n             Ok(s) => Some(TcpStream::new(s)),\n             Err(ioerr) => {\n                 io_error::cond.raise(ioerr);"}, {"sha": "2f9babf57896ae82f198b547454fbdffba8c44ce", "filename": "src/libstd/rt/io/net/udp.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b637798a5aa7878daa57c147028e98f2c5bc03c5/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b637798a5aa7878daa57c147028e98f2c5bc03c5/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs?ref=b637798a5aa7878daa57c147028e98f2c5bc03c5", "patch": "@@ -16,7 +16,9 @@ use rt::io::{io_error, read_error, EndOfFile};\n use rt::rtio::{RtioSocket, RtioUdpSocketObject, RtioUdpSocket, IoFactory, IoFactoryObject};\n use rt::local::Local;\n \n-pub struct UdpSocket(~RtioUdpSocketObject);\n+pub struct UdpSocket {\n+    priv obj: ~RtioUdpSocketObject\n+}\n \n impl UdpSocket {\n     pub fn bind(addr: SocketAddr) -> Option<UdpSocket> {\n@@ -25,7 +27,7 @@ impl UdpSocket {\n             (*factory).udp_bind(addr)\n         };\n         match socket {\n-            Ok(s) => Some(UdpSocket(s)),\n+            Ok(s) => Some(UdpSocket { obj: s }),\n             Err(ioerr) => {\n                 io_error::cond.raise(ioerr);\n                 None\n@@ -34,7 +36,7 @@ impl UdpSocket {\n     }\n \n     pub fn recvfrom(&mut self, buf: &mut [u8]) -> Option<(uint, SocketAddr)> {\n-        match (**self).recvfrom(buf) {\n+        match self.obj.recvfrom(buf) {\n             Ok((nread, src)) => Some((nread, src)),\n             Err(ioerr) => {\n                 // EOF is indicated by returning None\n@@ -47,7 +49,7 @@ impl UdpSocket {\n     }\n \n     pub fn sendto(&mut self, buf: &[u8], dst: SocketAddr) {\n-        match (**self).sendto(buf, dst) {\n+        match self.obj.sendto(buf, dst) {\n             Ok(_) => (),\n             Err(ioerr) => io_error::cond.raise(ioerr),\n         }\n@@ -58,7 +60,7 @@ impl UdpSocket {\n     }\n \n     pub fn socket_name(&mut self) -> Option<SocketAddr> {\n-        match (***self).socket_name() {\n+        match self.obj.socket_name() {\n             Ok(sn) => Some(sn),\n             Err(ioerr) => {\n                 rtdebug!(\"failed to get socket name: {:?}\", ioerr);\n@@ -70,8 +72,8 @@ impl UdpSocket {\n }\n \n pub struct UdpStream {\n-    socket: UdpSocket,\n-    connectedTo: SocketAddr\n+    priv socket: UdpSocket,\n+    priv connectedTo: SocketAddr\n }\n \n impl UdpStream {"}, {"sha": "251795ab238f52cf581468aeeeefa843bc7ccff9", "filename": "src/libstd/rt/io/pipe.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b637798a5aa7878daa57c147028e98f2c5bc03c5/src%2Flibstd%2Frt%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b637798a5aa7878daa57c147028e98f2c5bc03c5/src%2Flibstd%2Frt%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fpipe.rs?ref=b637798a5aa7878daa57c147028e98f2c5bc03c5", "patch": "@@ -20,7 +20,12 @@ use rt::local::Local;\n use rt::rtio::{RtioPipe, RtioPipeObject, IoFactoryObject, IoFactory};\n use rt::rtio::RtioUnboundPipeObject;\n \n-pub struct PipeStream(RtioPipeObject);\n+pub struct PipeStream {\n+    priv obj: RtioPipeObject\n+}\n+\n+// This should not be a newtype, but rt::uv::process::set_stdio needs to reach\n+// into the internals of this :(\n pub struct UnboundPipeStream(~RtioUnboundPipeObject);\n \n impl PipeStream {\n@@ -41,13 +46,13 @@ impl PipeStream {\n     }\n \n     pub fn bind(inner: RtioPipeObject) -> PipeStream {\n-        PipeStream(inner)\n+        PipeStream { obj: inner }\n     }\n }\n \n impl Reader for PipeStream {\n     fn read(&mut self, buf: &mut [u8]) -> Option<uint> {\n-        match (**self).read(buf) {\n+        match self.obj.read(buf) {\n             Ok(read) => Some(read),\n             Err(ioerr) => {\n                 // EOF is indicated by returning None\n@@ -64,7 +69,7 @@ impl Reader for PipeStream {\n \n impl Writer for PipeStream {\n     fn write(&mut self, buf: &[u8]) {\n-        match (**self).write(buf) {\n+        match self.obj.write(buf) {\n             Ok(_) => (),\n             Err(ioerr) => {\n                 io_error::cond.raise(ioerr);"}, {"sha": "c2cf9be3980586731aafffbbb58b34ac8c69910d", "filename": "src/libstd/rt/io/timer.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b637798a5aa7878daa57c147028e98f2c5bc03c5/src%2Flibstd%2Frt%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b637798a5aa7878daa57c147028e98f2c5bc03c5/src%2Flibstd%2Frt%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ftimer.rs?ref=b637798a5aa7878daa57c147028e98f2c5bc03c5", "patch": "@@ -15,7 +15,9 @@ use rt::rtio::{IoFactory, IoFactoryObject,\n                RtioTimer, RtioTimerObject};\n use rt::local::Local;\n \n-pub struct Timer(~RtioTimerObject);\n+pub struct Timer {\n+    priv obj: ~RtioTimerObject\n+}\n \n /// Sleep the current task for `msecs` milliseconds.\n pub fn sleep(msecs: u64) {\n@@ -34,7 +36,7 @@ impl Timer {\n             (*io).timer_init()\n         };\n         match timer {\n-            Ok(t) => Some(Timer(t)),\n+            Ok(t) => Some(Timer { obj: t }),\n             Err(ioerr) => {\n                 rtdebug!(\"Timer::init: failed to init: {:?}\", ioerr);\n                 io_error::cond.raise(ioerr);\n@@ -44,7 +46,7 @@ impl Timer {\n     }\n \n     pub fn sleep(&mut self, msecs: u64) {\n-        (**self).sleep(msecs);\n+        self.obj.sleep(msecs);\n     }\n }\n "}, {"sha": "de8e10b2bc6b7ca75a72d25aa76d13bee993004c", "filename": "src/test/run-pass/rtio-processes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b637798a5aa7878daa57c147028e98f2c5bc03c5/src%2Ftest%2Frun-pass%2Frtio-processes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b637798a5aa7878daa57c147028e98f2c5bc03c5/src%2Ftest%2Frun-pass%2Frtio-processes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frtio-processes.rs?ref=b637798a5aa7878daa57c147028e98f2c5bc03c5", "patch": "@@ -84,7 +84,7 @@ fn read_all(input: &mut Reader) -> ~str {\n     let mut buf = [0, ..1024];\n     loop {\n         match input.read(buf) {\n-            None | Some(0) => { break }\n+            None => { break }\n             Some(n) => { ret = ret + str::from_utf8(buf.slice_to(n)); }\n         }\n     }"}]}