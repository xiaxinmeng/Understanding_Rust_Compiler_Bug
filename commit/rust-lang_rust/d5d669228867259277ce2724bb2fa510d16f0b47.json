{"sha": "d5d669228867259277ce2724bb2fa510d16f0b47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZDY2OTIyODg2NzI1OTI3N2NlMjcyNGJiMmZhNTEwZDE2ZjBiNDc=", "commit": {"author": {"name": "daxpedda", "email": "daxpedda@users.noreply.github.com", "date": "2018-12-05T00:59:09Z"}, "committer": {"name": "daxpedda", "email": "daxpedda@users.noreply.github.com", "date": "2018-12-05T00:59:09Z"}, "message": "Added `FORCED_RETURN` lint.", "tree": {"sha": "76a1df75da864167a3f4644b5e8ff0733d8be68d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76a1df75da864167a3f4644b5e8ff0733d8be68d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5d669228867259277ce2724bb2fa510d16f0b47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5d669228867259277ce2724bb2fa510d16f0b47", "html_url": "https://github.com/rust-lang/rust/commit/d5d669228867259277ce2724bb2fa510d16f0b47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5d669228867259277ce2724bb2fa510d16f0b47/comments", "author": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f24cdf10f4b0f7a20c28873afcbe9544caede6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f24cdf10f4b0f7a20c28873afcbe9544caede6f", "html_url": "https://github.com/rust-lang/rust/commit/3f24cdf10f4b0f7a20c28873afcbe9544caede6f"}], "stats": {"total": 212, "additions": 211, "deletions": 1}, "files": [{"sha": "92bb45866883b80238ec43ad67db469a9fb1ad92", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5d669228867259277ce2724bb2fa510d16f0b47/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/d5d669228867259277ce2724bb2fa510d16f0b47/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=d5d669228867259277ce2724bb2fa510d16f0b47", "patch": "@@ -7,7 +7,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 289 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 290 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "ee30bd0ab1ee5c040b9aa32467648e9963457e88", "filename": "clippy_lints/src/forced_return.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/d5d669228867259277ce2724bb2fa510d16f0b47/clippy_lints%2Fsrc%2Fforced_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5d669228867259277ce2724bb2fa510d16f0b47/clippy_lints%2Fsrc%2Fforced_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fforced_return.rs?ref=d5d669228867259277ce2724bb2fa510d16f0b47", "patch": "@@ -0,0 +1,106 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use crate::rustc::hir::{intravisit::FnKind, Body, ExprKind, FnDecl};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n+use crate::syntax::{ast::NodeId, source_map::Span};\n+use crate::utils::{snippet_opt, span_lint_and_then};\n+\n+/// **What it does:** Checks for missing return statements at the end of a block.\n+///\n+/// **Why is this bad?** Actually it is idiomatic Rust code. Programmers coming\n+/// from other languages might prefer the expressiveness of `return`.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// fn foo(x: usize) {\n+///     x\n+/// }\n+/// ```\n+/// add return\n+/// ```rust\n+/// fn foo(x: usize) {\n+///     return x;\n+/// }\n+/// ```\n+declare_clippy_lint! {\n+    pub FORCED_RETURN,\n+    restriction,\n+    \"use a return statement like `return expr` instead of an expression\"\n+}\n+\n+pub struct ForcedReturnPass;\n+\n+impl ForcedReturnPass {\n+    fn show_suggestion(cx: &LateContext<'_, '_>, span: syntax_pos::Span) {\n+        span_lint_and_then(cx, FORCED_RETURN, span, \"missing return statement\", |db| {\n+            if let Some(snippet) = snippet_opt(cx, span) {\n+                db.span_suggestion_with_applicability(\n+                    span,\n+                    \"add `return` as shown\",\n+                    format!(\"return {}\", snippet),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        });\n+    }\n+\n+    fn expr_match(cx: &LateContext<'_, '_>, kind: &ExprKind) {\n+        match kind {\n+            ExprKind::Block(ref block, ..) => {\n+                if let Some(ref expr) = block.expr {\n+                    Self::expr_match(cx, &expr.node);\n+                }\n+            },\n+            ExprKind::If(.., if_expr, else_expr) => {\n+                Self::expr_match(cx, &if_expr.node);\n+\n+                if let Some(else_expr) = else_expr {\n+                    Self::expr_match(cx, &else_expr.node);\n+                }\n+            },\n+            ExprKind::Match(_, arms, ..) => {\n+                for arm in arms {\n+                    Self::expr_match(cx, &arm.body.node);\n+                }\n+            },\n+            ExprKind::Lit(lit) => Self::show_suggestion(cx, lit.span),\n+            _ => (),\n+        }\n+    }\n+}\n+\n+impl LintPass for ForcedReturnPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(FORCED_RETURN)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ForcedReturnPass {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'a, 'tcx>,\n+        _: FnKind<'tcx>,\n+        _: &'tcx FnDecl,\n+        body: &'tcx Body,\n+        _: Span,\n+        _: NodeId,\n+    ) {\n+        let def_id = cx.tcx.hir.body_owner_def_id(body.id());\n+        let mir = cx.tcx.optimized_mir(def_id);\n+\n+        if !mir.return_ty().is_unit() {\n+            Self::expr_match(cx, &body.value.node);\n+        }\n+    }\n+}"}, {"sha": "729e3a20c2c9dceca48822ebf976d6bd41241ec1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5d669228867259277ce2724bb2fa510d16f0b47/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5d669228867259277ce2724bb2fa510d16f0b47/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d5d669228867259277ce2724bb2fa510d16f0b47", "patch": "@@ -185,6 +185,7 @@ pub mod reference;\n pub mod regex;\n pub mod replace_consts;\n pub mod returns;\n+pub mod forced_return;\n pub mod serde_api;\n pub mod shadow;\n pub mod slow_vector_initialization;\n@@ -371,6 +372,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box unicode::Unicode);\n     reg.register_late_lint_pass(box strings::StringAdd);\n     reg.register_early_lint_pass(box returns::ReturnPass);\n+    reg.register_late_lint_pass(box forced_return::ForcedReturnPass);\n     reg.register_late_lint_pass(box methods::Pass);\n     reg.register_late_lint_pass(box map_clone::Pass);\n     reg.register_late_lint_pass(box shadow::Pass);\n@@ -502,6 +504,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         strings::STRING_ADD,\n         write::PRINT_STDOUT,\n         write::USE_DEBUG,\n+        forced_return::FORCED_RETURN,\n     ]);\n \n     reg.register_lint_group(\"clippy::pedantic\", Some(\"clippy_pedantic\"), vec!["}, {"sha": "5f07d99528ecc1c087ba8c46ba3954cca9e19069", "filename": "tests/ui/forced_return.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d5d669228867259277ce2724bb2fa510d16f0b47/tests%2Fui%2Fforced_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5d669228867259277ce2724bb2fa510d16f0b47/tests%2Fui%2Fforced_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fforced_return.rs?ref=d5d669228867259277ce2724bb2fa510d16f0b47", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+\n+\n+\n+#![warn(clippy::forced_return)]\n+\n+fn test_end_of_fn() -> bool {\n+    if true {\n+        // no error!\n+        return true;\n+    }\n+    true\n+}\n+\n+#[allow(clippy::needless_bool)]\n+fn test_if_block() -> bool {\n+    if true {\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\n+#[allow(clippy::match_bool)]\n+fn test_match(x: bool) -> bool {\n+    match x {\n+        true => false,\n+        false => {\n+            true\n+        }\n+    }\n+}\n+\n+fn test_closure() {\n+    let _ = || {\n+        true\n+    };\n+    let _ = || true;\n+}\n+\n+fn main() {\n+    let _ = test_end_of_fn();\n+    let _ = test_if_block();\n+    let _ = test_match(true);\n+    test_closure();\n+}"}, {"sha": "0b1dcc4ce33a7dba5b208ab4abbeae0eb690f0af", "filename": "tests/ui/forced_return.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d5d669228867259277ce2724bb2fa510d16f0b47/tests%2Fui%2Fforced_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5d669228867259277ce2724bb2fa510d16f0b47/tests%2Fui%2Fforced_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fforced_return.stderr?ref=d5d669228867259277ce2724bb2fa510d16f0b47", "patch": "@@ -0,0 +1,46 @@\n+error: missing return statement\n+  --> $DIR/forced_return.rs:21:5\n+   |\n+21 |     true\n+   |     ^^^^ help: add `return` as shown: `return true`\n+   |\n+   = note: `-D clippy::forced-return` implied by `-D warnings`\n+\n+error: missing return statement\n+  --> $DIR/forced_return.rs:27:9\n+   |\n+27 |         true\n+   |         ^^^^ help: add `return` as shown: `return true`\n+\n+error: missing return statement\n+  --> $DIR/forced_return.rs:29:9\n+   |\n+29 |         false\n+   |         ^^^^^ help: add `return` as shown: `return false`\n+\n+error: missing return statement\n+  --> $DIR/forced_return.rs:36:17\n+   |\n+36 |         true => false,\n+   |                 ^^^^^ help: add `return` as shown: `return false`\n+\n+error: missing return statement\n+  --> $DIR/forced_return.rs:38:13\n+   |\n+38 |             true\n+   |             ^^^^ help: add `return` as shown: `return true`\n+\n+error: missing return statement\n+  --> $DIR/forced_return.rs:45:9\n+   |\n+45 |         true\n+   |         ^^^^ help: add `return` as shown: `return true`\n+\n+error: missing return statement\n+  --> $DIR/forced_return.rs:47:16\n+   |\n+47 |     let _ = || true;\n+   |                ^^^^ help: add `return` as shown: `return true`\n+\n+error: aborting due to 7 previous errors\n+"}]}