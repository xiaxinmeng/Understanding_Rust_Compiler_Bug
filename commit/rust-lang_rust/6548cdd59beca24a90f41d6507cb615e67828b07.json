{"sha": "6548cdd59beca24a90f41d6507cb615e67828b07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NDhjZGQ1OWJlY2EyNGE5MGY0MWQ2NTA3Y2I2MTVlNjc4MjhiMDc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-30T05:20:36Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-30T05:20:39Z"}, "message": "rt: Make the initial segment of the main task's stack 1MB\n\nThis is a trick to fool microbenchmarks. Closes #1681", "tree": {"sha": "15e0547e2c14ee150e35d4c78d4922b85102cb5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15e0547e2c14ee150e35d4c78d4922b85102cb5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6548cdd59beca24a90f41d6507cb615e67828b07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6548cdd59beca24a90f41d6507cb615e67828b07", "html_url": "https://github.com/rust-lang/rust/commit/6548cdd59beca24a90f41d6507cb615e67828b07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6548cdd59beca24a90f41d6507cb615e67828b07/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "361f90e618c081afe2fa8b0a67370610781e413e", "url": "https://api.github.com/repos/rust-lang/rust/commits/361f90e618c081afe2fa8b0a67370610781e413e", "html_url": "https://github.com/rust-lang/rust/commit/361f90e618c081afe2fa8b0a67370610781e413e"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "87520fe44a2f5b90d67ea6121afdcb4d91f8040f", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6548cdd59beca24a90f41d6507cb615e67828b07/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6548cdd59beca24a90f41d6507cb615e67828b07/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=6548cdd59beca24a90f41d6507cb615e67828b07", "patch": "@@ -75,6 +75,8 @@ command_line_args : public kernel_owned<command_line_args>\n \n int check_claims = 0;\n \n+const size_t MAIN_STACK_SIZE = 1024*1024;\n+\n extern \"C\" CDECL int\n rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n \n@@ -85,7 +87,7 @@ rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n \n     rust_srv *srv = new rust_srv(env);\n     rust_kernel *kernel = new rust_kernel(srv, env->num_sched_threads);\n-    rust_task_id root_id = kernel->create_task(NULL, \"main\");\n+    rust_task_id root_id = kernel->create_task(NULL, \"main\", MAIN_STACK_SIZE);\n     rust_task *root_task = kernel->get_task_by_id(root_id);\n     I(kernel, root_task != NULL);\n     rust_scheduler *sched = root_task->sched;"}, {"sha": "c5322e65e41074d112d121bb5bffb6dd34ea06e3", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6548cdd59beca24a90f41d6507cb615e67828b07/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6548cdd59beca24a90f41d6507cb615e67828b07/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=6548cdd59beca24a90f41d6507cb615e67828b07", "patch": "@@ -151,15 +151,21 @@ rust_kernel::fail() {\n }\n \n rust_task_id\n-rust_kernel::create_task(rust_task *spawner, const char *name) {\n+rust_kernel::create_task(rust_task *spawner, const char *name,\n+                         size_t init_stack_sz) {\n     scoped_lock with(_kernel_lock);\n     rust_scheduler *thread = threads[isaac_rand(&rctx) % num_threads];\n-    rust_task *t = thread->create_task(spawner, name);\n+    rust_task *t = thread->create_task(spawner, name, init_stack_sz);\n     t->user.id = max_id++;\n     task_table.put(t->user.id, t);\n     return t->user.id;\n }\n \n+rust_task_id\n+rust_kernel::create_task(rust_task *spawner, const char *name) {\n+    return create_task(spawner, name, env->min_stack_size);\n+}\n+\n rust_task *\n rust_kernel::get_task_by_id(rust_task_id id) {\n     scoped_lock with(_kernel_lock);"}, {"sha": "3d64e57d9f9d9a2a2977d00024d8d0ac2e7304ed", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6548cdd59beca24a90f41d6507cb615e67828b07/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/6548cdd59beca24a90f41d6507cb615e67828b07/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=6548cdd59beca24a90f41d6507cb615e67828b07", "patch": "@@ -66,7 +66,9 @@ class rust_kernel {\n     void win32_require(LPCTSTR fn, BOOL ok);\n #endif\n \n-    rust_task_id create_task(rust_task *spawner, const char *name);\n+    rust_task_id create_task(rust_task *spawner, const char *name,\n+\t\t\t     size_t init_stack_size);\n+    rust_task_id create_task(rust_task * spawner, const char *name);\n     rust_task *get_task_by_id(rust_task_id id);\n     void release_task_id(rust_task_id tid);\n     void set_exit_status(int code);"}, {"sha": "5b8ae206a749f51aa707922244f1f716886ef283", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6548cdd59beca24a90f41d6507cb615e67828b07/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6548cdd59beca24a90f41d6507cb615e67828b07/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=6548cdd59beca24a90f41d6507cb615e67828b07", "patch": "@@ -333,10 +333,11 @@ rust_scheduler::get_cache() {\n }\n \n rust_task *\n-rust_scheduler::create_task(rust_task *spawner, const char *name) {\n+rust_scheduler::create_task(rust_task *spawner, const char *name,\n+                            size_t init_stack_sz) {\n     rust_task *task =\n         new (this->kernel, \"rust_task\")\n-        rust_task (this, &newborn_tasks, spawner, name);\n+        rust_task (this, &newborn_tasks, spawner, name, init_stack_sz);\n     DLOG(this, task, \"created task: \" PTR \", spawner: %s, name: %s\",\n                         task, spawner ? spawner->name : \"null\", name);\n     if(spawner) {"}, {"sha": "b5bd92efaaa16957b41f6abde1bbd078071139ce", "filename": "src/rt/rust_scheduler.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6548cdd59beca24a90f41d6507cb615e67828b07/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/6548cdd59beca24a90f41d6507cb615e67828b07/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=6548cdd59beca24a90f41d6507cb615e67828b07", "patch": "@@ -112,7 +112,8 @@ struct rust_scheduler : public kernel_owned<rust_scheduler>,\n \n     void kill_all_tasks();\n \n-    rust_task *create_task(rust_task *spawner, const char *name);\n+    rust_task *create_task(rust_task *spawner, const char *name,\n+                           size_t init_stack_sz);\n \n     virtual void run();\n "}, {"sha": "d6f43ca079435aeb69f6e05a1ce3cfb543b41af8", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6548cdd59beca24a90f41d6507cb615e67828b07/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6548cdd59beca24a90f41d6507cb615e67828b07/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=6548cdd59beca24a90f41d6507cb615e67828b07", "patch": "@@ -239,7 +239,8 @@ del_stk(rust_task *task, stk_seg *stk)\n \n // Tasks\n rust_task::rust_task(rust_scheduler *sched, rust_task_list *state,\n-                     rust_task *spawner, const char *name) :\n+                     rust_task *spawner, const char *name,\n+                     size_t init_stack_sz) :\n     ref_count(1),\n     stk(NULL),\n     runtime_sp(0),\n@@ -271,7 +272,7 @@ rust_task::rust_task(rust_scheduler *sched, rust_task_list *state,\n \n     user.notify_enabled = 0;\n \n-    stk = new_stk(sched, this, 0);\n+    stk = new_stk(sched, this, init_stack_sz);\n     user.rust_sp = stk->end;\n     if (supervisor) {\n         supervisor->ref();"}, {"sha": "0d7cfed4a32c7c7dd7ae77e6692431ffd190c729", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6548cdd59beca24a90f41d6507cb615e67828b07/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/6548cdd59beca24a90f41d6507cb615e67828b07/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=6548cdd59beca24a90f41d6507cb615e67828b07", "patch": "@@ -133,7 +133,8 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     rust_task(rust_scheduler *sched,\n               rust_task_list *state,\n               rust_task *spawner,\n-              const char *name);\n+              const char *name,\n+              size_t init_stack_sz);\n \n     ~rust_task();\n "}]}