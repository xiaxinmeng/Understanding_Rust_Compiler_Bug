{"sha": "3f93ffc3334b77cc9025f68dfcea92098987abf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmOTNmZmMzMzM0Yjc3Y2M5MDI1ZjY4ZGZjZWE5MjA5ODk4N2FiZjM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-11-15T13:32:31Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-11-15T13:45:43Z"}, "message": "Remove SourceMapper trait\n\nSourceMap is now in the root of all rustc-specific crates, syntax_pos,\nso there's no need for the trait object to decouple the dependencies\nbetween librustc_errors and libsyntax as was needed previously.", "tree": {"sha": "8e532f41f4ddb5f1203d29c4b17114f70694ad3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e532f41f4ddb5f1203d29c4b17114f70694ad3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f93ffc3334b77cc9025f68dfcea92098987abf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f93ffc3334b77cc9025f68dfcea92098987abf3", "html_url": "https://github.com/rust-lang/rust/commit/3f93ffc3334b77cc9025f68dfcea92098987abf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f93ffc3334b77cc9025f68dfcea92098987abf3/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "942f0a6f7a82facc30501232e28759cab54a21b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/942f0a6f7a82facc30501232e28759cab54a21b3", "html_url": "https://github.com/rust-lang/rust/commit/942f0a6f7a82facc30501232e28759cab54a21b3"}], "stats": {"total": 122, "additions": 38, "deletions": 84}, "files": [{"sha": "f35a31d59fe62bd648b5a50e54459b0a03262022", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3f93ffc3334b77cc9025f68dfcea92098987abf3/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f93ffc3334b77cc9025f68dfcea92098987abf3/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=3f93ffc3334b77cc9025f68dfcea92098987abf3", "patch": "@@ -23,7 +23,8 @@ use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_fs_util::link_or_copy;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{Handler, Level, FatalError, DiagnosticId, SourceMapperDyn};\n+use rustc_errors::{Handler, Level, FatalError, DiagnosticId};\n+use syntax_pos::source_map::SourceMap;\n use rustc_errors::emitter::{Emitter};\n use rustc_target::spec::MergeFunctions;\n use syntax::attr;\n@@ -1679,7 +1680,7 @@ impl Emitter for SharedEmitter {\n         }\n         drop(self.sender.send(SharedEmitterMessage::AbortIfErrors));\n     }\n-    fn source_map(&self) -> Option<&Lrc<SourceMapperDyn>> {\n+    fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n         None\n     }\n }"}, {"sha": "4c5d0178b2c64d049ffc17adb2b737b0b1536c93", "filename": "src/librustc_errors/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3f93ffc3334b77cc9025f68dfcea92098987abf3/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f93ffc3334b77cc9025f68dfcea92098987abf3/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs?ref=3f93ffc3334b77cc9025f68dfcea92098987abf3", "patch": "@@ -6,9 +6,10 @@\n //! [annotate_snippets]: https://docs.rs/crate/annotate-snippets/\n \n use syntax_pos::{SourceFile, MultiSpan, Loc};\n+use syntax_pos::source_map::SourceMap;\n use crate::{\n     Level, CodeSuggestion, Diagnostic, Emitter,\n-    SourceMapperDyn, SubDiagnostic, DiagnosticId\n+    SubDiagnostic, DiagnosticId\n };\n use crate::emitter::FileWithAnnotatedLines;\n use rustc_data_structures::sync::Lrc;\n@@ -20,7 +21,7 @@ use annotate_snippets::formatter::DisplayListFormatter;\n \n /// Generates diagnostics using annotate-snippet\n pub struct AnnotateSnippetEmitterWriter {\n-    source_map: Option<Lrc<SourceMapperDyn>>,\n+    source_map: Option<Lrc<SourceMap>>,\n     /// If true, hides the longer explanation text\n     short_message: bool,\n     /// If true, will normalize line numbers with `LL` to prevent noise in UI test diffs.\n@@ -49,7 +50,7 @@ impl Emitter for AnnotateSnippetEmitterWriter {\n                                    &suggestions);\n     }\n \n-    fn source_map(&self) -> Option<&Lrc<SourceMapperDyn>> {\n+    fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n         self.source_map.as_ref()\n     }\n \n@@ -61,7 +62,7 @@ impl Emitter for AnnotateSnippetEmitterWriter {\n /// Collects all the data needed to generate the data structures needed for the\n /// `annotate-snippets` library.\n struct DiagnosticConverter<'a> {\n-    source_map: Option<Lrc<SourceMapperDyn>>,\n+    source_map: Option<Lrc<SourceMap>>,\n     level: Level,\n     message: String,\n     code: Option<DiagnosticId>,\n@@ -168,7 +169,7 @@ impl<'a>  DiagnosticConverter<'a> {\n \n impl AnnotateSnippetEmitterWriter {\n     pub fn new(\n-        source_map: Option<Lrc<SourceMapperDyn>>,\n+        source_map: Option<Lrc<SourceMap>>,\n         short_message: bool,\n         external_macro_backtrace: bool,\n     ) -> Self {"}, {"sha": "ea779982ba961b4de8387eba92e7edcd1a3eadb7", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3f93ffc3334b77cc9025f68dfcea92098987abf3/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f93ffc3334b77cc9025f68dfcea92098987abf3/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=3f93ffc3334b77cc9025f68dfcea92098987abf3", "patch": "@@ -10,10 +10,11 @@\n use Destination::*;\n \n use syntax_pos::{SourceFile, Span, MultiSpan};\n+use syntax_pos::source_map::SourceMap;\n \n use crate::{\n     Level, CodeSuggestion, Diagnostic, SubDiagnostic, pluralize,\n-    SuggestionStyle, SourceMapper, SourceMapperDyn, DiagnosticId,\n+    SuggestionStyle, DiagnosticId,\n };\n use crate::Level::Error;\n use crate::snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, StyledString, Style};\n@@ -49,7 +50,7 @@ impl HumanReadableErrorType {\n     pub fn new_emitter(\n         self,\n         dst: Box<dyn Write + Send>,\n-        source_map: Option<Lrc<SourceMapperDyn>>,\n+        source_map: Option<Lrc<SourceMap>>,\n         teach: bool,\n         terminal_width: Option<usize>,\n         external_macro_backtrace: bool,\n@@ -192,7 +193,7 @@ pub trait Emitter {\n         true\n     }\n \n-    fn source_map(&self) -> Option<&Lrc<SourceMapperDyn>>;\n+    fn source_map(&self) -> Option<&Lrc<SourceMap>>;\n \n     /// Formats the substitutions of the primary_span\n     ///\n@@ -271,7 +272,7 @@ pub trait Emitter {\n     // point directly at <*macros>. Since these are often difficult to read, this\n     // will change the span to point at the use site.\n     fn fix_multispans_in_std_macros(&self,\n-                                    source_map: &Option<Lrc<SourceMapperDyn>>,\n+                                    source_map: &Option<Lrc<SourceMap>>,\n                                     span: &mut MultiSpan,\n                                     children: &mut Vec<SubDiagnostic>,\n                                     level: &Level,\n@@ -311,7 +312,7 @@ pub trait Emitter {\n     // <*macros>. Since these locations are often difficult to read, we move these Spans from\n     // <*macros> to their corresponding use site.\n     fn fix_multispan_in_std_macros(&self,\n-                                   source_map: &Option<Lrc<SourceMapperDyn>>,\n+                                   source_map: &Option<Lrc<SourceMap>>,\n                                    span: &mut MultiSpan,\n                                    always_backtrace: bool) -> bool {\n         let sm = match source_map {\n@@ -397,7 +398,7 @@ pub trait Emitter {\n }\n \n impl Emitter for EmitterWriter {\n-    fn source_map(&self) -> Option<&Lrc<SourceMapperDyn>> {\n+    fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n         self.sm.as_ref()\n     }\n \n@@ -428,7 +429,7 @@ impl Emitter for EmitterWriter {\n pub struct SilentEmitter;\n \n impl Emitter for SilentEmitter {\n-    fn source_map(&self) -> Option<&Lrc<SourceMapperDyn>> { None }\n+    fn source_map(&self) -> Option<&Lrc<SourceMap>> { None }\n     fn emit_diagnostic(&mut self, _: &Diagnostic) {}\n }\n \n@@ -476,7 +477,7 @@ impl ColorConfig {\n /// Handles the writing of `HumanReadableErrorType::Default` and `HumanReadableErrorType::Short`\n pub struct EmitterWriter {\n     dst: Destination,\n-    sm: Option<Lrc<SourceMapperDyn>>,\n+    sm: Option<Lrc<SourceMap>>,\n     short_message: bool,\n     teach: bool,\n     ui_testing: bool,\n@@ -495,7 +496,7 @@ pub struct FileWithAnnotatedLines {\n impl EmitterWriter {\n     pub fn stderr(\n         color_config: ColorConfig,\n-        source_map: Option<Lrc<SourceMapperDyn>>,\n+        source_map: Option<Lrc<SourceMap>>,\n         short_message: bool,\n         teach: bool,\n         terminal_width: Option<usize>,\n@@ -515,7 +516,7 @@ impl EmitterWriter {\n \n     pub fn new(\n         dst: Box<dyn Write + Send>,\n-        source_map: Option<Lrc<SourceMapperDyn>>,\n+        source_map: Option<Lrc<SourceMap>>,\n         short_message: bool,\n         teach: bool,\n         colored: bool,\n@@ -1685,7 +1686,7 @@ impl FileWithAnnotatedLines {\n     /// This helps us quickly iterate over the whole message (including secondary file spans)\n     pub fn collect_annotations(\n         msp: &MultiSpan,\n-        source_map: &Option<Lrc<SourceMapperDyn>>\n+        source_map: &Option<Lrc<SourceMap>>\n     ) -> Vec<FileWithAnnotatedLines> {\n         fn add_annotation_to_file(file_vec: &mut Vec<FileWithAnnotatedLines>,\n                                   file: Lrc<SourceFile>,\n@@ -2067,7 +2068,7 @@ impl<'a> Drop for WritableDst<'a> {\n }\n \n /// Whether the original and suggested code are visually similar enough to warrant extra wording.\n-pub fn is_case_difference(sm: &dyn SourceMapper, suggested: &str, sp: Span) -> bool {\n+pub fn is_case_difference(sm: &SourceMap, suggested: &str, sp: Span) -> bool {\n     // FIXME: this should probably be extended to also account for `FO0` \u2192 `FOO` and unicode.\n     let found = sm.span_to_snippet(sp).unwrap();\n     let ascii_confusables = &['c', 'f', 'i', 'k', 'o', 's', 'u', 'v', 'w', 'x', 'y', 'z'];"}, {"sha": "1a6ac328a47d4ef0d50a945908b291fa8d11a648", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3f93ffc3334b77cc9025f68dfcea92098987abf3/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f93ffc3334b77cc9025f68dfcea92098987abf3/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=3f93ffc3334b77cc9025f68dfcea92098987abf3", "patch": "@@ -18,6 +18,8 @@ use registry::Registry;\n use rustc_data_structures::sync::{self, Lrc, Lock};\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_data_structures::stable_hasher::StableHasher;\n+use syntax_pos::source_map::SourceMap;\n+use syntax_pos::{Loc, Span, MultiSpan};\n \n use std::borrow::Cow;\n use std::cell::Cell;\n@@ -36,17 +38,6 @@ pub mod registry;\n mod styled_buffer;\n mod lock;\n \n-use syntax_pos::{\n-    BytePos,\n-    FileLinesResult,\n-    FileName,\n-    Loc,\n-    MultiSpan,\n-    SourceFile,\n-    Span,\n-    SpanSnippetError,\n-};\n-\n pub type PResult<'a, T> = Result<T, DiagnosticBuilder<'a>>;\n \n // `PResult` is used a lot. Make sure it doesn't unintentionally get bigger.\n@@ -150,26 +141,12 @@ pub struct SubstitutionPart {\n     pub snippet: String,\n }\n \n-pub type SourceMapperDyn = dyn SourceMapper + sync::Send + sync::Sync;\n-\n-pub trait SourceMapper {\n-    fn lookup_char_pos(&self, pos: BytePos) -> Loc;\n-    fn span_to_lines(&self, sp: Span) -> FileLinesResult;\n-    fn span_to_string(&self, sp: Span) -> String;\n-    fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError>;\n-    fn span_to_filename(&self, sp: Span) -> FileName;\n-    fn merge_spans(&self, sp_lhs: Span, sp_rhs: Span) -> Option<Span>;\n-    fn call_span_if_macro(&self, sp: Span) -> Span;\n-    fn ensure_source_file_source_present(&self, source_file: Lrc<SourceFile>) -> bool;\n-    fn doctest_offset_line(&self, file: &FileName, line: usize) -> usize;\n-}\n-\n impl CodeSuggestion {\n     /// Returns the assembled code suggestions, whether they should be shown with an underline\n     /// and whether the substitution only differs in capitalization.\n     pub fn splice_lines(\n         &self,\n-        cm: &SourceMapperDyn,\n+        cm: &SourceMap,\n     ) -> Vec<(String, Vec<SubstitutionPart>, bool)> {\n         use syntax_pos::{CharPos, Pos};\n \n@@ -376,7 +353,7 @@ impl Handler {\n         color_config: ColorConfig,\n         can_emit_warnings: bool,\n         treat_err_as_bug: Option<usize>,\n-        cm: Option<Lrc<SourceMapperDyn>>,\n+        cm: Option<Lrc<SourceMap>>,\n     ) -> Self {\n         Self::with_tty_emitter_and_flags(\n             color_config,\n@@ -391,7 +368,7 @@ impl Handler {\n \n     pub fn with_tty_emitter_and_flags(\n         color_config: ColorConfig,\n-        cm: Option<Lrc<SourceMapperDyn>>,\n+        cm: Option<Lrc<SourceMap>>,\n         flags: HandlerFlags,\n     ) -> Self {\n         let emitter = Box::new(EmitterWriter::stderr("}, {"sha": "6096a930acfc456cf90ad1d92f5cc53bd8cc3dc6", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f93ffc3334b77cc9025f68dfcea92098987abf3/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f93ffc3334b77cc9025f68dfcea92098987abf3/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=3f93ffc3334b77cc9025f68dfcea92098987abf3", "patch": "@@ -12,7 +12,7 @@\n use crate::source_map::{SourceMap, FilePathMapping};\n \n use errors::registry::Registry;\n-use errors::{SubDiagnostic, CodeSuggestion, SourceMapper, SourceMapperDyn};\n+use errors::{SubDiagnostic, CodeSuggestion};\n use errors::{DiagnosticId, Applicability};\n use errors::emitter::{Emitter, HumanReadableErrorType};\n \n@@ -31,7 +31,7 @@ mod tests;\n pub struct JsonEmitter {\n     dst: Box<dyn Write + Send>,\n     registry: Option<Registry>,\n-    sm: Lrc<dyn SourceMapper + sync::Send + sync::Sync>,\n+    sm: Lrc<SourceMap>,\n     pretty: bool,\n     ui_testing: bool,\n     json_rendered: HumanReadableErrorType,\n@@ -116,7 +116,7 @@ impl Emitter for JsonEmitter {\n         }\n     }\n \n-    fn source_map(&self) -> Option<&Lrc<SourceMapperDyn>> {\n+    fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n         Some(&self.sm)\n     }\n "}, {"sha": "77d9807225ec82be4d50cb2cc411657d77c6f5f4", "filename": "src/libsyntax_pos/source_map.rs", "status": "modified", "additions": 8, "deletions": 34, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3f93ffc3334b77cc9025f68dfcea92098987abf3/src%2Flibsyntax_pos%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f93ffc3334b77cc9025f68dfcea92098987abf3/src%2Flibsyntax_pos%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsource_map.rs?ref=3f93ffc3334b77cc9025f68dfcea92098987abf3", "patch": "@@ -22,8 +22,6 @@ use std::fs;\n use std::io;\n use log::debug;\n \n-use errors::SourceMapper;\n-\n #[cfg(test)]\n mod tests;\n \n@@ -956,28 +954,15 @@ impl SourceMap {\n \n         None\n     }\n-}\n-\n-impl SourceMapper for SourceMap {\n-    fn lookup_char_pos(&self, pos: BytePos) -> Loc {\n-        self.lookup_char_pos(pos)\n-    }\n-    fn span_to_lines(&self, sp: Span) -> FileLinesResult {\n-        self.span_to_lines(sp)\n-    }\n-    fn span_to_string(&self, sp: Span) -> String {\n-        self.span_to_string(sp)\n-    }\n-    fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError> {\n-        self.span_to_snippet(sp)\n-    }\n-    fn span_to_filename(&self, sp: Span) -> FileName {\n-        self.span_to_filename(sp)\n-    }\n-    fn merge_spans(&self, sp_lhs: Span, sp_rhs: Span) -> Option<Span> {\n-        self.merge_spans(sp_lhs, sp_rhs)\n+    pub fn ensure_source_file_source_present(&self, source_file: Lrc<SourceFile>) -> bool {\n+        source_file.add_external_src(\n+            || match source_file.name {\n+                FileName::Real(ref name) => self.file_loader.read_file(name).ok(),\n+                _ => None,\n+            }\n+        )\n     }\n-    fn call_span_if_macro(&self, sp: Span) -> Span {\n+    pub fn call_span_if_macro(&self, sp: Span) -> Span {\n         if self.span_to_filename(sp.clone()).is_macros() {\n             let v = sp.macro_backtrace();\n             if let Some(use_site) = v.last() {\n@@ -986,17 +971,6 @@ impl SourceMapper for SourceMap {\n         }\n         sp\n     }\n-    fn ensure_source_file_source_present(&self, source_file: Lrc<SourceFile>) -> bool {\n-        source_file.add_external_src(\n-            || match source_file.name {\n-                FileName::Real(ref name) => self.file_loader.read_file(name).ok(),\n-                _ => None,\n-            }\n-        )\n-    }\n-    fn doctest_offset_line(&self, file: &FileName, line: usize) -> usize {\n-        self.doctest_offset_line(file, line)\n-    }\n }\n \n #[derive(Clone)]"}]}