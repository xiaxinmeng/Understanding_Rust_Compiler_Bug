{"sha": "e2910bf26492f2f0dce69287019138930705e417", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyOTEwYmYyNjQ5MmYyZjBkY2U2OTI4NzAxOTEzODkzMDcwNWU0MTc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-03T01:25:22Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-03T01:25:22Z"}, "message": "Revert \"rt: Fix some record alignment issues on windows\"\n\nThis reverts commit a2457f5864092161a7224c667c4a2e8b60f06d4a.", "tree": {"sha": "308892e7da5091781b64edbaf1ad03f68268a7df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/308892e7da5091781b64edbaf1ad03f68268a7df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2910bf26492f2f0dce69287019138930705e417", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2910bf26492f2f0dce69287019138930705e417", "html_url": "https://github.com/rust-lang/rust/commit/e2910bf26492f2f0dce69287019138930705e417", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2910bf26492f2f0dce69287019138930705e417/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2457f5864092161a7224c667c4a2e8b60f06d4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2457f5864092161a7224c667c4a2e8b60f06d4a", "html_url": "https://github.com/rust-lang/rust/commit/a2457f5864092161a7224c667c4a2e8b60f06d4a"}], "stats": {"total": 126, "additions": 18, "deletions": 108}, "files": [{"sha": "3aaea6f739c4604d4d47cc746959e9ed5ae58983", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2910bf26492f2f0dce69287019138930705e417/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/e2910bf26492f2f0dce69287019138930705e417/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=e2910bf26492f2f0dce69287019138930705e417", "patch": "@@ -127,15 +127,13 @@ rust_alignof<double>() {\n // On 32-bit x86 the alignment of 64-bit ints in structures is 4 bytes\n // Which is different from the preferred 8-byte alignment reported\n // by __alignof__ (at least on gcc).\n-#ifndef __WIN32__\n #ifdef __i386__\n template<>\n inline size_t\n rust_alignof<uint64_t>() {\n     return 4;\n }\n #endif\n-#endif\n \n \n // Utility classes"}, {"sha": "7841cda4522439c916fd9a148095ed747b887f76", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e2910bf26492f2f0dce69287019138930705e417/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2910bf26492f2f0dce69287019138930705e417/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=e2910bf26492f2f0dce69287019138930705e417", "patch": "@@ -1,31 +1,19 @@\n+// xfail-win32 need to investigate alignment on windows\n+\n #[abi = \"rust-intrinsic\"]\n native mod rusti {\n     fn pref_align_of<T>() -> uint;\n     fn min_align_of<T>() -> uint;\n }\n \n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n-mod m {\n-    #[cfg(target_arch = \"x86\")]\n-    fn main() {\n-        assert rusti::pref_align_of::<u64>() == 8u;\n-        assert rusti::min_align_of::<u64>() == 4u;\n-    }\n-\n-    #[cfg(target_arch = \"x86_64\")]\n-    fn main() {\n-        assert rusti::pref_align_of::<u64>() == 8u;\n-        assert rusti::min_align_of::<u64>() == 8u;\n-    }\n+#[cfg(target_arch = \"x86\")]\n+fn main() {\n+    assert rusti::pref_align_of::<u64>() == 8u;\n+    assert rusti::min_align_of::<u64>() == 4u;\n }\n \n-#[cfg(target_os = \"win32\")]\n-mod m {\n-    #[cfg(target_arch = \"x86\")]\n-    fn main() {\n-        assert rusti::pref_align_of::<u64>() == 8u;\n-        assert rusti::min_align_of::<u64>() == 8u;\n-    }\n+#[cfg(target_arch = \"x86_64\")]\n+fn main() {\n+    assert rusti::pref_align_of::<u64>() == 8u;\n+    assert rusti::min_align_of::<u64>() == 8u;\n }"}, {"sha": "28e0268b6a57d60350770e73ffcf01829e55f511", "filename": "src/test/run-pass/rec-align-32-bit.rs", "status": "renamed", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e2910bf26492f2f0dce69287019138930705e417/src%2Ftest%2Frun-pass%2Frec-align-32-bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2910bf26492f2f0dce69287019138930705e417/src%2Ftest%2Frun-pass%2Frec-align-32-bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-32-bit.rs?ref=e2910bf26492f2f0dce69287019138930705e417", "patch": "@@ -1,4 +1,5 @@\n // xfail-pretty\n+// xfail-win32\n // Issue #2303\n \n #[abi = \"rust-intrinsic\"]\n@@ -9,7 +10,7 @@ native mod rusti {\n \n // This is the type with the questionable alignment\n type inner = {\n-    c64: u32\n+    c64: u64\n };\n \n // This is the type that contains the type with the\n@@ -19,22 +20,10 @@ type outer = {\n     t: inner\n };\n \n-\n #[cfg(target_arch = \"x86\")]\n-mod m {\n-    fn align() -> uint { 4u }\n-    fn size() -> uint { 8u }\n-}\n-\n-#[cfg(target_arch = \"x86_64\")]\n-mod m {\n-    fn align() -> uint { 4u }\n-    fn size() -> uint { 8u }\n-}\n-\n fn main() {\n \n-    let x = {c8: 22u8, t: {c64: 44u32}};\n+    let x = {c8: 22u8, t: {c64: 44u64}};\n \n     // Send it through the shape code\n     let y = #fmt[\"%?\", x];\n@@ -44,11 +33,14 @@ fn main() {\n     #debug(\"y = %s\", y);\n \n     // per clang/gcc the alignment of `inner` is 4 on x86.\n-    assert rusti::min_align_of::<inner>() == m::align();\n+    assert rusti::min_align_of::<inner>() == 4u;\n \n     // per clang/gcc the size of `outer` should be 12\n     // because `inner`s alignment was 4.\n-    assert sys::size_of::<outer>() == m::size();\n+    assert sys::size_of::<outer>() == 12u;\n \n     assert y == \"(22, (44))\";\n }\n+\n+#[cfg(target_arch = \"x86_64\")]\n+fn main() { }", "previous_filename": "src/test/run-pass/rec-align-u32.rs"}, {"sha": "39646bb04e0a320c48a64f4e9cf3289f341acb50", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a2457f5864092161a7224c667c4a2e8b60f06d4a/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2457f5864092161a7224c667c4a2e8b60f06d4a/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=a2457f5864092161a7224c667c4a2e8b60f06d4a", "patch": "@@ -1,68 +0,0 @@\n-// xfail-pretty\n-// Issue #2303\n-\n-#[abi = \"rust-intrinsic\"]\n-native mod rusti {\n-    fn pref_align_of<T>() -> uint;\n-    fn min_align_of<T>() -> uint;\n-}\n-\n-// This is the type with the questionable alignment\n-type inner = {\n-    c64: u64\n-};\n-\n-// This is the type that contains the type with the\n-// questionable alignment, for testing\n-type outer = {\n-    c8: u8,\n-    t: inner\n-};\n-\n-\n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n-mod m {\n-    #[cfg(target_arch = \"x86\")]\n-    mod m {\n-        fn align() -> uint { 4u }\n-        fn size() -> uint { 12u }\n-    }\n-\n-    #[cfg(target_arch = \"x86_64\")]\n-    mod m {\n-        fn align() -> uint { 8u }\n-        fn size() -> uint { 16u }\n-    }\n-}\n-\n-#[cfg(target_os = \"win32\")]\n-mod m {\n-    #[cfg(target_arch = \"x86\")]\n-    mod m {\n-        fn align() -> uint { 8u }\n-        fn size() -> uint { 16u }\n-    }\n-}\n-\n-fn main() {\n-\n-    let x = {c8: 22u8, t: {c64: 44u64}};\n-\n-    // Send it through the shape code\n-    let y = #fmt[\"%?\", x];\n-\n-    #debug(\"align inner = %?\", rusti::min_align_of::<inner>());\n-    #debug(\"size outer = %?\", sys::size_of::<outer>());\n-    #debug(\"y = %s\", y);\n-\n-    // per clang/gcc the alignment of `inner` is 4 on x86.\n-    assert rusti::min_align_of::<inner>() == m::m::align();\n-\n-    // per clang/gcc the size of `outer` should be 12\n-    // because `inner`s alignment was 4.\n-    assert sys::size_of::<outer>() == m::m::size();\n-\n-    assert y == \"(22, (44))\";\n-}"}]}