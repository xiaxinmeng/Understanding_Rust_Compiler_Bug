{"sha": "9beed98f2ab15f6d62283d09b6b96fa5f57a78d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZWVkOThmMmFiMTVmNmQ2MjI4M2QwOWI2Yjk2ZmE1ZjU3YTc4ZDE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-13T12:02:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-13T12:02:26Z"}, "message": "Merge #8432\n\n8432: decl_check: consider outer scopes' allows r=jonas-schievink a=lf-\n\nFix #8417. Also makes it less noisy about no_mangle annotated stuff the\r\nuser can do nothing about.\r\n\r\nNote: this still is broken with bitfield! macros. A repro in an ignore\r\ntest is included here. I believe this bug is elsewhere, and I don't\r\nthink I can work around it here.\r\n\r\nI would like help filing the remaining bug, as it does actually affect\r\nusers, but I don't know how to describe the behaviour (or even if it\r\nis unintended).\n\nCo-authored-by: Jade <software@lfcode.ca>", "tree": {"sha": "b9b28d597d793ce7c12ee0c347ffe0edf0e5327b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9b28d597d793ce7c12ee0c347ffe0edf0e5327b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9beed98f2ab15f6d62283d09b6b96fa5f57a78d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgdYhSCRBK7hj4Ov3rIwAAdHIIAFsIbgz5GkihdajpRkbGdpJP\niEAVStrjVHbx4d5SJG14Kkc+FS7stQOEFif3AxWSdlVmnKQxdzbk1qmIW7iNCBXQ\nvECFkMdclz3vQXtzbnR41mDricdgV3S9MSfJsOubyWU7lpqG3TYnkAB3HAkqP6Zo\nxc1icsOeEUiOrgly2AV3JuT0ew9appROxzAAjdBT7mlYGsjLI2wHw80Hz5/6sHUn\nkZmK0o2jMax6F0zVylN7uoUKpqgFnAQyQO6DyqIln/OgrNi9c9Ky/lpp9y9RDHaw\nnjyg2GNu89A0sF6PNzmmSTudzzRs+U/EaiKUHB1cHF3Yc7527Wdv6SvWzMSatjA=\n=sdEm\n-----END PGP SIGNATURE-----\n", "payload": "tree b9b28d597d793ce7c12ee0c347ffe0edf0e5327b\nparent 03e0bf7f555ad4f3c8e127e009897b6fa83a6194\nparent 26d2653dd64f139c89449cf4bab8bac737e930a5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618315346 +0000\ncommitter GitHub <noreply@github.com> 1618315346 +0000\n\nMerge #8432\n\n8432: decl_check: consider outer scopes' allows r=jonas-schievink a=lf-\n\nFix #8417. Also makes it less noisy about no_mangle annotated stuff the\r\nuser can do nothing about.\r\n\r\nNote: this still is broken with bitfield! macros. A repro in an ignore\r\ntest is included here. I believe this bug is elsewhere, and I don't\r\nthink I can work around it here.\r\n\r\nI would like help filing the remaining bug, as it does actually affect\r\nusers, but I don't know how to describe the behaviour (or even if it\r\nis unintended).\n\nCo-authored-by: Jade <software@lfcode.ca>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9beed98f2ab15f6d62283d09b6b96fa5f57a78d1", "html_url": "https://github.com/rust-lang/rust/commit/9beed98f2ab15f6d62283d09b6b96fa5f57a78d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9beed98f2ab15f6d62283d09b6b96fa5f57a78d1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03e0bf7f555ad4f3c8e127e009897b6fa83a6194", "url": "https://api.github.com/repos/rust-lang/rust/commits/03e0bf7f555ad4f3c8e127e009897b6fa83a6194", "html_url": "https://github.com/rust-lang/rust/commit/03e0bf7f555ad4f3c8e127e009897b6fa83a6194"}, {"sha": "26d2653dd64f139c89449cf4bab8bac737e930a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/26d2653dd64f139c89449cf4bab8bac737e930a5", "html_url": "https://github.com/rust-lang/rust/commit/26d2653dd64f139c89449cf4bab8bac737e930a5"}], "stats": {"total": 166, "additions": 151, "deletions": 15}, "files": [{"sha": "ffee05500dbd86b26036a25e73ac0d760ba83d33", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9beed98f2ab15f6d62283d09b6b96fa5f57a78d1/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9beed98f2ab15f6d62283d09b6b96fa5f57a78d1/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=9beed98f2ab15f6d62283d09b6b96fa5f57a78d1", "patch": "@@ -435,6 +435,16 @@ impl_from!(\n     for AttrDefId\n );\n \n+impl From<AssocContainerId> for AttrDefId {\n+    fn from(acid: AssocContainerId) -> Self {\n+        match acid {\n+            AssocContainerId::ModuleId(mid) => AttrDefId::ModuleId(mid),\n+            AssocContainerId::ImplId(iid) => AttrDefId::ImplId(iid),\n+            AssocContainerId::TraitId(tid) => AttrDefId::TraitId(tid),\n+        }\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum VariantId {\n     EnumVariantId(EnumVariantId),"}, {"sha": "fb0fc4c91e01da953bb18babdeba2f6b82d93948", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 140, "deletions": 14, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/9beed98f2ab15f6d62283d09b6b96fa5f57a78d1/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9beed98f2ab15f6d62283d09b6b96fa5f57a78d1/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=9beed98f2ab15f6d62283d09b6b96fa5f57a78d1", "patch": "@@ -35,6 +35,8 @@ use crate::{\n };\n \n mod allow {\n+    pub(super) const BAD_STYLE: &str = \"bad_style\";\n+    pub(super) const NONSTANDARD_STYLE: &str = \"nonstandard_style\";\n     pub(super) const NON_SNAKE_CASE: &str = \"non_snake_case\";\n     pub(super) const NON_UPPER_CASE_GLOBAL: &str = \"non_upper_case_globals\";\n     pub(super) const NON_CAMEL_CASE_TYPES: &str = \"non_camel_case_types\";\n@@ -83,10 +85,39 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n     }\n \n     /// Checks whether not following the convention is allowed for this item.\n-    ///\n-    /// Currently this method doesn't check parent attributes.\n-    fn allowed(&self, id: AttrDefId, allow_name: &str) -> bool {\n-        self.db.attrs(id).by_key(\"allow\").tt_values().any(|tt| tt.to_string().contains(allow_name))\n+    fn allowed(&self, id: AttrDefId, allow_name: &str, recursing: bool) -> bool {\n+        let is_allowed = |def_id| {\n+            let attrs = self.db.attrs(def_id);\n+            // don't bug the user about directly no_mangle annotated stuff, they can't do anything about it\n+            (!recursing && attrs.by_key(\"no_mangle\").exists())\n+                || attrs.by_key(\"allow\").tt_values().any(|tt| {\n+                    let allows = tt.to_string();\n+                    allows.contains(allow_name)\n+                        || allows.contains(allow::BAD_STYLE)\n+                        || allows.contains(allow::NONSTANDARD_STYLE)\n+                })\n+        };\n+\n+        is_allowed(id)\n+            // go upwards one step or give up\n+            || match id {\n+                AttrDefId::ModuleId(m) => m.containing_module(self.db.upcast()).map(|v| v.into()),\n+                AttrDefId::FunctionId(f) => Some(f.lookup(self.db.upcast()).container.into()),\n+                AttrDefId::StaticId(sid) => Some(sid.lookup(self.db.upcast()).container.into()),\n+                AttrDefId::ConstId(cid) => Some(cid.lookup(self.db.upcast()).container.into()),\n+                AttrDefId::TraitId(tid) => Some(tid.lookup(self.db.upcast()).container.into()),\n+                AttrDefId::ImplId(iid) => Some(iid.lookup(self.db.upcast()).container.into()),\n+                // These warnings should not explore macro definitions at all\n+                AttrDefId::MacroDefId(_) => None,\n+                // Will never occur under an enum/struct/union/type alias\n+                AttrDefId::AdtId(_) => None,\n+                AttrDefId::FieldId(_) => None,\n+                AttrDefId::EnumVariantId(_) => None,\n+                AttrDefId::TypeAliasId(_) => None,\n+                AttrDefId::GenericParamId(_) => None,\n+            }\n+            .map(|mid| self.allowed(mid, allow_name, true))\n+            .unwrap_or(false)\n     }\n \n     fn validate_func(&mut self, func: FunctionId) {\n@@ -109,7 +140,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         }\n \n         // Check whether non-snake case identifiers are allowed for this function.\n-        if self.allowed(func.into(), allow::NON_SNAKE_CASE) {\n+        if self.allowed(func.into(), allow::NON_SNAKE_CASE, false) {\n             return;\n         }\n \n@@ -328,8 +359,9 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n     fn validate_struct(&mut self, struct_id: StructId) {\n         let data = self.db.struct_data(struct_id);\n \n-        let non_camel_case_allowed = self.allowed(struct_id.into(), allow::NON_CAMEL_CASE_TYPES);\n-        let non_snake_case_allowed = self.allowed(struct_id.into(), allow::NON_SNAKE_CASE);\n+        let non_camel_case_allowed =\n+            self.allowed(struct_id.into(), allow::NON_CAMEL_CASE_TYPES, false);\n+        let non_snake_case_allowed = self.allowed(struct_id.into(), allow::NON_SNAKE_CASE, false);\n \n         // Check the structure name.\n         let struct_name = data.name.to_string();\n@@ -461,7 +493,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         let data = self.db.enum_data(enum_id);\n \n         // Check whether non-camel case names are allowed for this enum.\n-        if self.allowed(enum_id.into(), allow::NON_CAMEL_CASE_TYPES) {\n+        if self.allowed(enum_id.into(), allow::NON_CAMEL_CASE_TYPES, false) {\n             return;\n         }\n \n@@ -584,7 +616,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n     fn validate_const(&mut self, const_id: ConstId) {\n         let data = self.db.const_data(const_id);\n \n-        if self.allowed(const_id.into(), allow::NON_UPPER_CASE_GLOBAL) {\n+        if self.allowed(const_id.into(), allow::NON_UPPER_CASE_GLOBAL, false) {\n             return;\n         }\n \n@@ -632,7 +664,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             return;\n         }\n \n-        if self.allowed(static_id.into(), allow::NON_UPPER_CASE_GLOBAL) {\n+        if self.allowed(static_id.into(), allow::NON_UPPER_CASE_GLOBAL, false) {\n             return;\n         }\n \n@@ -869,10 +901,31 @@ fn main() {\n             r#\"\n             #[allow(non_snake_case)]\n     fn NonSnakeCaseName(SOME_VAR: u8) -> u8{\n+        // cov_flags generated output from elsewhere in this file\n+        extern \"C\" {\n+            #[no_mangle]\n+            static lower_case: u8;\n+        }\n+\n         let OtherVar = SOME_VAR + 1;\n         OtherVar\n     }\n \n+    #[allow(nonstandard_style)]\n+    mod CheckNonstandardStyle {\n+        fn HiImABadFnName() {}\n+    }\n+\n+    #[allow(bad_style)]\n+    mod CheckBadStyle {\n+        fn HiImABadFnName() {}\n+    }\n+\n+    mod F {\n+        #![allow(non_snake_case)]\n+        fn CheckItWorksWithModAttr(BAD_NAME_HI: u8) {}\n+    }\n+\n     #[allow(non_snake_case, non_camel_case_types)]\n     pub struct some_type {\n         SOME_FIELD: u8,\n@@ -888,16 +941,89 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn allow_attributes_crate_attr() {\n+        check_diagnostics(\n+            r#\"\n+    #![allow(non_snake_case)]\n+\n+    mod F {\n+        fn CheckItWorksWithCrateAttr(BAD_NAME_HI: u8) {}\n+    }\n+\n+    \"#,\n+        );\n+    }\n+\n+    #[test]\n+    #[ignore]\n+    fn bug_trait_inside_fn() {\n+        // FIXME:\n+        // This is broken, and in fact, should not even be looked at by this\n+        // lint in the first place. There's weird stuff going on in the\n+        // collection phase.\n+        // It's currently being brought in by:\n+        // * validate_func on `a` recursing into modules\n+        // * then it finds the trait and then the function while iterating\n+        //   through modules\n+        // * then validate_func is called on Dirty\n+        // * ... which then proceeds to look at some unknown module taking no\n+        //   attrs from either the impl or the fn a, and then finally to the root\n+        //   module\n+        //\n+        // It should find the attribute on the trait, but it *doesn't even see\n+        // the trait* as far as I can tell.\n+\n+        check_diagnostics(\n+            r#\"\n+    trait T { fn a(); }\n+    struct U {}\n+    impl T for U {\n+        fn a() {\n+            // this comes out of bitflags, mostly\n+            #[allow(non_snake_case)]\n+            trait __BitFlags {\n+                const HiImAlsoBad: u8 = 2;\n+                #[inline]\n+                fn Dirty(&self) -> bool {\n+                    false\n+                }\n+            }\n+\n+        }\n+    }\n+    \"#,\n+        );\n+    }\n+\n+    #[test]\n+    #[ignore]\n+    fn bug_traits_arent_checked() {\n+        // FIXME: Traits and functions in traits aren't currently checked by\n+        // r-a, even though rustc will complain about them.\n+        check_diagnostics(\n+            r#\"\n+    trait BAD_TRAIT {\n+       // ^^^^^^^^^ Trait `BAD_TRAIT` should have CamelCase name, e.g. `BadTrait`\n+        fn BAD_FUNCTION();\n+        // ^^^^^^^^^^^^ Function `BAD_FUNCTION` should have snake_case name, e.g. `bad_function`\n+        fn BadFunction();\n+        // ^^^^^^^^^^^^ Function `BadFunction` should have snake_case name, e.g. `bad_function`\n+    }\n+    \"#,\n+        );\n+    }\n+\n     #[test]\n     fn ignores_extern_items() {\n         cov_mark::check!(extern_func_incorrect_case_ignored);\n         cov_mark::check!(extern_static_incorrect_case_ignored);\n         check_diagnostics(\n             r#\"\n-extern {\n-    fn NonSnakeCaseName(SOME_VAR: u8) -> u8;\n-    pub static SomeStatic: u8 = 10;\n-}\n+    extern {\n+        fn NonSnakeCaseName(SOME_VAR: u8) -> u8;\n+        pub static SomeStatic: u8 = 10;\n+    }\n             \"#,\n         );\n     }"}, {"sha": "b86e9177232f33058cf0177d64e022479ee17acb", "filename": "docs/user/manual.adoc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9beed98f2ab15f6d62283d09b6b96fa5f57a78d1/docs%2Fuser%2Fmanual.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/9beed98f2ab15f6d62283d09b6b96fa5f57a78d1/docs%2Fuser%2Fmanual.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fmanual.adoc?ref=9beed98f2ab15f6d62283d09b6b96fa5f57a78d1", "patch": "@@ -541,7 +541,7 @@ include::./generated_assists.adoc[]\n == Diagnostics\n \n While most errors and warnings provided by rust-analyzer come from the `cargo check` integration, there's a growing number of diagnostics implemented using rust-analyzer's own analysis.\n-These diagnostics don't respect `#[allow]` or `#[deny]` attributes yet, but can be turned off using the `rust-analyzer.diagnostics.enable`, `rust-analyzer.diagnostics.enableExperimental` or `rust-analyzer.diagnostics.disabled` settings.\n+Some of these diagnostics don't respect `\\#[allow]` or `\\#[deny]` attributes yet, but can be turned off using the `rust-analyzer.diagnostics.enable`, `rust-analyzer.diagnostics.enableExperimental` or `rust-analyzer.diagnostics.disabled` settings.\n \n include::./generated_diagnostic.adoc[]\n "}]}