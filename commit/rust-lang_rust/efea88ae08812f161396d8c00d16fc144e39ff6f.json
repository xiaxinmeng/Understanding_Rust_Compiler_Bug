{"sha": "efea88ae08812f161396d8c00d16fc144e39ff6f", "node_id": "C_kwDOAAsO6NoAKGVmZWE4OGFlMDg4MTJmMTYxMzk2ZDhjMDBkMTZmYzE0NGUzOWZmNmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-24T04:05:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-24T04:05:38Z"}, "message": "Rollup merge of #111864 - Jules-Bertholet:sized-closures, r=compiler-errors\n\nAlways require closure parameters to be `Sized`\n\nThe `rust-call` ABI isn't compatible with `#![feature(unsized_fn_params)]`, so trying to use that feature with closures leads to an ICE (#67981). This turns that ICE into a type-check error.\n\n`@rustbot` label A-closures F-unsized_fn_params", "tree": {"sha": "212b67185fc1b5d978758ed2d615a70c37a3b313", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/212b67185fc1b5d978758ed2d615a70c37a3b313"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efea88ae08812f161396d8c00d16fc144e39ff6f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkbY0SCRBK7hj4Ov3rIwAAqk4IAGUaS/6CTn5+3P4VYqluuM2P\ngXIxfwFvHCDOjQywedkO0/7cIvyWYGiFtApwtVgiamAmgZCCHllVVu5nMLmldFzV\nZjQbu5CxzY4Vmi6J8r+5BVOtXtPke/QLMEEajFlSg5caotHw6YAB9IED24MYhZjA\nMfoW4Q0Pxyv//bL+OPTVhy6etvZ4mE2V2wZyP2FhlCNWtznrRQXICQIXBproJp9k\npzxjoL8rmM6vnF6mvPLituy5XiNL/mS25Q3nTxAGtavU2TkzxaXbs1Clioy0bBYX\nUoOX/SbVJyrZZRVxZo3rLdcwd7pD3/FzRRAvg+xYVrgFOil27PmwjN74Mdf5WJs=\n=i9aT\n-----END PGP SIGNATURE-----\n", "payload": "tree 212b67185fc1b5d978758ed2d615a70c37a3b313\nparent 224b6511b136e2e36ee147083c16596677edd47d\nparent 5cd02eaece8cf537054960d0d6db67096e78865d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1684901138 +0200\ncommitter GitHub <noreply@github.com> 1684901138 +0200\n\nRollup merge of #111864 - Jules-Bertholet:sized-closures, r=compiler-errors\n\nAlways require closure parameters to be `Sized`\n\nThe `rust-call` ABI isn't compatible with `#![feature(unsized_fn_params)]`, so trying to use that feature with closures leads to an ICE (#67981). This turns that ICE into a type-check error.\n\n`@rustbot` label A-closures F-unsized_fn_params\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efea88ae08812f161396d8c00d16fc144e39ff6f", "html_url": "https://github.com/rust-lang/rust/commit/efea88ae08812f161396d8c00d16fc144e39ff6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efea88ae08812f161396d8c00d16fc144e39ff6f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "224b6511b136e2e36ee147083c16596677edd47d", "url": "https://api.github.com/repos/rust-lang/rust/commits/224b6511b136e2e36ee147083c16596677edd47d", "html_url": "https://github.com/rust-lang/rust/commit/224b6511b136e2e36ee147083c16596677edd47d"}, {"sha": "5cd02eaece8cf537054960d0d6db67096e78865d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cd02eaece8cf537054960d0d6db67096e78865d", "html_url": "https://github.com/rust-lang/rust/commit/5cd02eaece8cf537054960d0d6db67096e78865d"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "bfabd44bb579227c442d31e82942162dc4d216e8", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efea88ae08812f161396d8c00d16fc144e39ff6f/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efea88ae08812f161396d8c00d16fc144e39ff6f/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=efea88ae08812f161396d8c00d16fc144e39ff6f", "patch": "@@ -32,6 +32,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n     fn_def_id: LocalDefId,\n     body: &'tcx hir::Body<'tcx>,\n     can_be_generator: Option<hir::Movability>,\n+    params_can_be_unsized: bool,\n ) -> Option<GeneratorTypes<'tcx>> {\n     let fn_id = fcx.tcx.hir().local_def_id_to_hir_id(fn_def_id);\n \n@@ -94,7 +95,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n         // The check for a non-trivial pattern is a hack to avoid duplicate warnings\n         // for simple cases like `fn foo(x: Trait)`,\n         // where we would error once on the parameter as a whole, and once on the binding `x`.\n-        if param.pat.simple_ident().is_none() && !tcx.features().unsized_fn_params {\n+        if param.pat.simple_ident().is_none() && !params_can_be_unsized {\n             fcx.require_type_is_sized(param_ty, param.pat.span, traits::SizedArgumentType(ty_span));\n         }\n "}, {"sha": "9659a0ec13d4029324bd61e909b180622db7a2d6", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efea88ae08812f161396d8c00d16fc144e39ff6f/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efea88ae08812f161396d8c00d16fc144e39ff6f/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=efea88ae08812f161396d8c00d16fc144e39ff6f", "patch": "@@ -89,6 +89,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             expr_def_id,\n             body,\n             closure.movability,\n+            // Closure \"rust-call\" ABI doesn't support unsized params\n+            false,\n         );\n \n         let parent_substs = InternalSubsts::identity_for_item("}, {"sha": "b97b55d8f7ee824e50327ff9ce8f7e9bfebc9020", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efea88ae08812f161396d8c00d16fc144e39ff6f/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efea88ae08812f161396d8c00d16fc144e39ff6f/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=efea88ae08812f161396d8c00d16fc144e39ff6f", "patch": "@@ -212,7 +212,7 @@ fn typeck_with_fallback<'tcx>(\n         let fn_sig = tcx.liberate_late_bound_regions(def_id.to_def_id(), fn_sig);\n         let fn_sig = fcx.normalize(body.value.span, fn_sig);\n \n-        check_fn(&mut fcx, fn_sig, decl, def_id, body, None);\n+        check_fn(&mut fcx, fn_sig, decl, def_id, body, None, tcx.features().unsized_fn_params);\n     } else {\n         let expected_type = if let Some(&hir::Ty { kind: hir::TyKind::Infer, span, .. }) = body_ty {\n             Some(fcx.next_ty_var(TypeVariableOrigin {"}, {"sha": "3eb6498e9dcff64e43acba36568df6a1331d0605", "filename": "tests/ui/unsized-locals/issue-67981.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/efea88ae08812f161396d8c00d16fc144e39ff6f/tests%2Fui%2Funsized-locals%2Fissue-67981.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efea88ae08812f161396d8c00d16fc144e39ff6f/tests%2Fui%2Funsized-locals%2Fissue-67981.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized-locals%2Fissue-67981.rs?ref=efea88ae08812f161396d8c00d16fc144e39ff6f", "patch": "@@ -0,0 +1,9 @@\n+#![feature(unsized_fn_params)]\n+\n+fn main() {\n+    let f: fn([u8]) = |_| {};\n+    //~^ERROR the size for values of type `[u8]` cannot be known at compilation time\n+    let slice: Box<[u8]> = Box::new([1; 8]);\n+\n+    f(*slice);\n+}"}, {"sha": "a4b179ae2fd12b494ca770989cb6921b1718c5b8", "filename": "tests/ui/unsized-locals/issue-67981.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/efea88ae08812f161396d8c00d16fc144e39ff6f/tests%2Fui%2Funsized-locals%2Fissue-67981.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efea88ae08812f161396d8c00d16fc144e39ff6f/tests%2Fui%2Funsized-locals%2Fissue-67981.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized-locals%2Fissue-67981.stderr?ref=efea88ae08812f161396d8c00d16fc144e39ff6f", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/issue-67981.rs:4:24\n+   |\n+LL |     let f: fn([u8]) = |_| {};\n+   |                        ^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL |     let f: fn([u8]) = |&_| {};\n+   |                        +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}