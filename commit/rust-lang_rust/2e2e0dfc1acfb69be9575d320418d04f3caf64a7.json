{"sha": "2e2e0dfc1acfb69be9575d320418d04f3caf64a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMmUwZGZjMWFjZmI2OWJlOTU3NWQzMjA0MThkMDRmM2NhZjY0YTc=", "commit": {"author": {"name": "SOFe", "email": "sofe2038@gmail.com", "date": "2019-11-26T09:42:43Z"}, "committer": {"name": "SOFe", "email": "sofe2038@gmail.com", "date": "2019-11-26T09:42:43Z"}, "message": "Improved comments to clarify sasumptions in str::strip_prefix", "tree": {"sha": "0d0b3eb9fa93d4e75aa80d2e4ab66624c0beb03c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d0b3eb9fa93d4e75aa80d2e4ab66624c0beb03c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e2e0dfc1acfb69be9575d320418d04f3caf64a7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEPWQCt3/kGPInJTpuDCqIFGN9y94FAl3c85MACgkQDCqIFGN9\ny945CA/9FQLN9DJfWwW28g8ZJ3UIWX+gYqeWdw9TxLgLtw61TnDaTqGMtEKeeDIB\nMnGwA0KwktHyQAuo9pG/lhZiowsemN943kAld68wyok5gXO07Tm+JBraeCriIlAt\nlkn4WP1jeOPKOhgpvApeK8pHJoF3mTlkhZC61sTkflJF07tXsI6r55PHDGOR3BjA\noa0gDK0oKS/LCNMT0e2X86yGepE9Lj3+S4kqUzcrpHowpvVb4uBR8BG65azR7fh5\nxNNmvzPUabNT46zvUJrYKNahrZquBmKqU3l+8RCbzXsjLH2liZq/viMNNeLG4ra/\nNS7V6xSlRjbEoFAyRz6HTPcmE1HPHOlmPE0rOo3Q0RMAfbGznrmJpwyop3cxSZyd\n+Llgyyf9k0NMI9HbeynMKti42jVl5dallZPJxYt8L/BugY8ir31cJMV5pHxLtOz1\nudwZ33T0wY3QuyDBZbDvlvNhAslnZaQOCuZOO2nhTbvnYbfIwnSvgIsOWwbDQvRS\nojJn4ApGCQNfMqRfz4qnQCaowPN1LFbYAGzFc/Hkcsss/4CiqDiFeMxcGKAlCIRz\nL3oBMJ3isqQk+82bFYbMy7H3m2QIJioPP5crDaG4kW9cYj+T57pHzMY7bDysuoIq\nmE4K7XuZOKc06ZcnMyDbZpy8JkUXTHXeQbvS3/sHkUiKuSJuZm0=\n=Sfnp\n-----END PGP SIGNATURE-----", "payload": "tree 0d0b3eb9fa93d4e75aa80d2e4ab66624c0beb03c\nparent 9badc33cda41acadc395f1597947b185f5a9b2a3\nauthor SOFe <sofe2038@gmail.com> 1574761363 +0800\ncommitter SOFe <sofe2038@gmail.com> 1574761363 +0800\n\nImproved comments to clarify sasumptions in str::strip_prefix\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2e0dfc1acfb69be9575d320418d04f3caf64a7", "html_url": "https://github.com/rust-lang/rust/commit/2e2e0dfc1acfb69be9575d320418d04f3caf64a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e2e0dfc1acfb69be9575d320418d04f3caf64a7/comments", "author": {"login": "SOF3", "id": 19623715, "node_id": "MDQ6VXNlcjE5NjIzNzE1", "avatar_url": "https://avatars.githubusercontent.com/u/19623715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SOF3", "html_url": "https://github.com/SOF3", "followers_url": "https://api.github.com/users/SOF3/followers", "following_url": "https://api.github.com/users/SOF3/following{/other_user}", "gists_url": "https://api.github.com/users/SOF3/gists{/gist_id}", "starred_url": "https://api.github.com/users/SOF3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SOF3/subscriptions", "organizations_url": "https://api.github.com/users/SOF3/orgs", "repos_url": "https://api.github.com/users/SOF3/repos", "events_url": "https://api.github.com/users/SOF3/events{/privacy}", "received_events_url": "https://api.github.com/users/SOF3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SOF3", "id": 19623715, "node_id": "MDQ6VXNlcjE5NjIzNzE1", "avatar_url": "https://avatars.githubusercontent.com/u/19623715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SOF3", "html_url": "https://github.com/SOF3", "followers_url": "https://api.github.com/users/SOF3/followers", "following_url": "https://api.github.com/users/SOF3/following{/other_user}", "gists_url": "https://api.github.com/users/SOF3/gists{/gist_id}", "starred_url": "https://api.github.com/users/SOF3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SOF3/subscriptions", "organizations_url": "https://api.github.com/users/SOF3/orgs", "repos_url": "https://api.github.com/users/SOF3/repos", "events_url": "https://api.github.com/users/SOF3/events{/privacy}", "received_events_url": "https://api.github.com/users/SOF3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9badc33cda41acadc395f1597947b185f5a9b2a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9badc33cda41acadc395f1597947b185f5a9b2a3", "html_url": "https://github.com/rust-lang/rust/commit/9badc33cda41acadc395f1597947b185f5a9b2a3"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "4367cc54e70dbe9d47d043f7adf0404c6043d077", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2e2e0dfc1acfb69be9575d320418d04f3caf64a7/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2e0dfc1acfb69be9575d320418d04f3caf64a7/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=2e2e0dfc1acfb69be9575d320418d04f3caf64a7", "patch": "@@ -3797,7 +3797,7 @@ impl str {\n     /// the prefix is removed. Unlike `trim_start_matches`, this method removes the prefix exactly\n     /// once.\n     ///\n-    /// If the string does not start with `prefix`, it is removed.\n+    /// If the string does not start with `prefix`, `None` is returned.\n     ///\n     /// # Examples\n     ///\n@@ -3814,8 +3814,9 @@ impl str {\n     pub fn strip_prefix<'a, P: Pattern<'a>>(&'a self, prefix: P) -> Option<&'a str> {\n         let mut matcher = prefix.into_searcher(self);\n         if let SearchStep::Match(start, len) = matcher.next() {\n-            debug_assert_eq!(start, 0);\n+            debug_assert_eq!(start, 0, \"The first search step from Searcher must start from the front\");\n             unsafe {\n+                // Searcher is known to return valid indices.\n                 Some(self.get_unchecked(len..))\n             }\n         } else {\n@@ -3825,11 +3826,11 @@ impl str {\n \n     /// Returns a string slice with the suffix removed.\n     ///\n-    /// If the string starts with the pattern `suffix`, `Some` is returned with the substring where\n+    /// If the string ends with the pattern `suffix`, `Some` is returned with the substring where\n     /// the suffix is removed. Unlike `trim_end_matches`, this method removes the suffix exactly\n     /// once.\n     ///\n-    /// If the string does not start with `suffix`, it is removed.\n+    /// If the string does not end with `suffix`, `None` is returned.\n     ///\n     /// # Examples\n     ///\n@@ -3849,8 +3850,9 @@ impl str {\n     {\n         let mut matcher = suffix.into_searcher(self);\n         if let SearchStep::Match(start, end) = matcher.next_back() {\n-            debug_assert_eq!(end, self.len());\n+            debug_assert_eq!(end, self.len(), \"The first search step from ReverseSearcher must include the last character\");\n             unsafe {\n+                // Searcher is known to return valid indices.\n                 Some(self.get_unchecked(..start))\n             }\n         } else {"}]}