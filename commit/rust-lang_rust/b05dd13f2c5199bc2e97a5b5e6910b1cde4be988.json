{"sha": "b05dd13f2c5199bc2e97a5b5e6910b1cde4be988", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNWRkMTNmMmM1MTk5YmMyZTk3YTViNWU2OTEwYjFjZGU0YmU5ODg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-29T14:55:38Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-29T14:55:38Z"}, "message": "added brackets and fixed compiler comments", "tree": {"sha": "d9c7ce1e2b3d7273778c024cdf5456365d4c6aca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9c7ce1e2b3d7273778c024cdf5456365d4c6aca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b05dd13f2c5199bc2e97a5b5e6910b1cde4be988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b05dd13f2c5199bc2e97a5b5e6910b1cde4be988", "html_url": "https://github.com/rust-lang/rust/commit/b05dd13f2c5199bc2e97a5b5e6910b1cde4be988", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b05dd13f2c5199bc2e97a5b5e6910b1cde4be988/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "216edbae59463538045f953c21d877b5f906caf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/216edbae59463538045f953c21d877b5f906caf2", "html_url": "https://github.com/rust-lang/rust/commit/216edbae59463538045f953c21d877b5f906caf2"}], "stats": {"total": 106, "additions": 64, "deletions": 42}, "files": [{"sha": "0cfab9a53571fb56aa0d448257a015438c7b7621", "filename": "src/booleans.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b05dd13f2c5199bc2e97a5b5e6910b1cde4be988/src%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05dd13f2c5199bc2e97a5b5e6910b1cde4be988/src%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbooleans.rs?ref=b05dd13f2c5199bc2e97a5b5e6910b1cde4be988", "patch": "@@ -129,6 +129,15 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n     }\n }\n \n+macro_rules! brackets {\n+    ($val:expr => $($name:ident),*) => {\n+        match $val {\n+            $($name(_) => true,)*\n+            _ => false,\n+        }\n+    }\n+}\n+\n fn suggest(cx: &LateContext, suggestion: &Bool, terminals: &[&Expr]) -> String {\n     fn recurse(brackets: bool, cx: &LateContext, suggestion: &Bool, terminals: &[&Expr], mut s: String) -> String {\n         use quine_mc_cluskey::Bool::*;\n@@ -143,16 +152,16 @@ fn suggest(cx: &LateContext, suggestion: &Bool, terminals: &[&Expr]) -> String {\n             },\n             Not(ref inner) => {\n                 s.push('!');\n-                recurse(true, cx, inner, terminals, s)\n+                recurse(brackets!(**inner => And, Or, Term), cx, inner, terminals, s)\n             },\n             And(ref v) => {\n                 if brackets {\n                     s.push('(');\n                 }\n-                s = recurse(true, cx, &v[0], terminals, s);\n+                s = recurse(brackets!(v[0] => Or), cx, &v[0], terminals, s);\n                 for inner in &v[1..] {\n                     s.push_str(\" && \");\n-                    s = recurse(true, cx, inner, terminals, s);\n+                    s = recurse(brackets!(*inner => Or), cx, inner, terminals, s);\n                 }\n                 if brackets {\n                     s.push(')');\n@@ -163,18 +172,28 @@ fn suggest(cx: &LateContext, suggestion: &Bool, terminals: &[&Expr]) -> String {\n                 if brackets {\n                     s.push('(');\n                 }\n-                s = recurse(true, cx, &v[0], terminals, s);\n+                s = recurse(false, cx, &v[0], terminals, s);\n                 for inner in &v[1..] {\n                     s.push_str(\" || \");\n-                    s = recurse(true, cx, inner, terminals, s);\n+                    s = recurse(false, cx, inner, terminals, s);\n                 }\n                 if brackets {\n                     s.push(')');\n                 }\n                 s\n             },\n             Term(n) => {\n+                if brackets {\n+                    if let ExprBinary(..) = terminals[n as usize].node {\n+                        s.push('(');\n+                    }\n+                }\n                 s.push_str(&snippet_opt(cx, terminals[n as usize].span).expect(\"don't try to improve booleans created by macros\"));\n+                if brackets {\n+                    if let ExprBinary(..) = terminals[n as usize].node {\n+                        s.push(')');\n+                    }\n+                }\n                 s\n             }\n         }"}, {"sha": "f4760a6fd46566627106a3cb89f6735fd5bab475", "filename": "tests/compile-fail/booleans.rs", "status": "modified", "additions": 40, "deletions": 37, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/b05dd13f2c5199bc2e97a5b5e6910b1cde4be988/tests%2Fcompile-fail%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05dd13f2c5199bc2e97a5b5e6910b1cde4be988/tests%2Fcompile-fail%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbooleans.rs?ref=b05dd13f2c5199bc2e97a5b5e6910b1cde4be988", "patch": "@@ -10,30 +10,30 @@ fn main() {\n     let d: bool = unimplemented!();\n     let e: bool = unimplemented!();\n     let _ = a && b || a; //~ ERROR this boolean expression contains a logic bug\n-    //|~ HELP for further information visit\n-    //|~ HELP this expression can be optimized out\n-    //|~ HELP it would look like the following\n-    //|~ SUGGESTION let _ = a;\n+    //~| HELP for further information visit\n+    //~| HELP this expression can be optimized out\n+    //~| HELP it would look like the following\n+    //~| SUGGESTION let _ = a;\n     let _ = !(a && b);\n     let _ = !true; //~ ERROR this boolean expression can be simplified\n-    //|~ HELP for further information visit\n-    //|~ SUGGESTION let _ = false;\n+    //~| HELP for further information visit\n+    //~| SUGGESTION let _ = false;\n     let _ = !false; //~ ERROR this boolean expression can be simplified\n-    //|~ HELP for further information visit\n-    //|~ SUGGESTION let _ = true;\n+    //~| HELP for further information visit\n+    //~| SUGGESTION let _ = true;\n     let _ = !!a; //~ ERROR this boolean expression can be simplified\n-    //|~ HELP for further information visit\n-    //|~ SUGGESTION let _ = a;\n+    //~| HELP for further information visit\n+    //~| SUGGESTION let _ = a;\n \n     let _ = false && a; //~ ERROR this boolean expression contains a logic bug\n-    //|~ HELP for further information visit\n-    //|~ HELP this expression can be optimized out\n-    //|~ HELP it would look like the following\n-    //|~ SUGGESTION let _ = false;\n+    //~| HELP for further information visit\n+    //~| HELP this expression can be optimized out\n+    //~| HELP it would look like the following\n+    //~| SUGGESTION let _ = false;\n \n     let _ = false || a; //~ ERROR this boolean expression can be simplified\n-    //|~ HELP for further information visit\n-    //|~ SUGGESTION let _ = a;\n+    //~| HELP for further information visit\n+    //~| SUGGESTION let _ = a;\n \n     // don't lint on cfgs\n     let _ = cfg!(you_shall_not_not_pass) && a;\n@@ -43,8 +43,8 @@ fn main() {\n     let _ = !(a && b || c);\n \n     let _ = !(!a && b); //~ ERROR this boolean expression can be simplified\n-    //|~ HELP for further information visit\n-    //|~ SUGGESTION let _ = !b || a;\n+    //~| HELP for further information visit\n+    //~| SUGGESTION let _ = !b || a;\n }\n \n #[allow(unused, many_single_char_names)]\n@@ -55,30 +55,33 @@ fn equality_stuff() {\n     let d: i32 = unimplemented!();\n     let e: i32 = unimplemented!();\n     let _ = a == b && a != b; //~ ERROR this boolean expression contains a logic bug\n-    //|~ HELP for further information visit\n-    //|~ HELP this expression can be optimized out\n-    //|~ HELP it would look like the following\n-    //|~ SUGGESTION let _ = false;\n+    //~| HELP for further information visit\n+    //~| HELP this expression can be optimized out\n+    //~| HELP it would look like the following\n+    //~| SUGGESTION let _ = false;\n     let _ = a == b && c == 5 && a == b; //~ ERROR this boolean expression can be simplified\n-    //|~ HELP for further information visit\n-    //|~ SUGGESTION let _ = c == 5 && a == b;\n+    //~| HELP for further information visit\n+    //~| SUGGESTION let _ = a == b && c == 5;\n     let _ = a == b && c == 5 && b == a; //~ ERROR this boolean expression can be simplified\n-    //|~ HELP for further information visit\n-    //|~ SUGGESTION let _ = c == 5 && a == b;\n+    //~| HELP for further information visit\n+    //~| SUGGESTION let _ = a == b && c == 5;\n+    //~| HELP try\n+    //~| SUGGESTION let _ = !(!(c == 5) || !(a == b));\n     let _ = a < b && a >= b; //~ ERROR this boolean expression contains a logic bug\n-    //|~ HELP for further information visit\n-    //|~ HELP this expression can be optimized out\n-    //|~ HELP it would look like the following\n-    //|~ SUGGESTION let _ = false;\n+    //~| HELP for further information visit\n+    //~| HELP this expression can be optimized out\n+    //~| HELP it would look like the following\n+    //~| SUGGESTION let _ = false;\n     let _ = a > b && a <= b; //~ ERROR this boolean expression contains a logic bug\n-    //|~ HELP for further information visit\n-    //|~ HELP this expression can be optimized out\n-    //|~ HELP it would look like the following\n-    //|~ SUGGESTION let _ = false;\n+    //~| HELP for further information visit\n+    //~| HELP this expression can be optimized out\n+    //~| HELP it would look like the following\n+    //~| SUGGESTION let _ = false;\n     let _ = a > b && a == b;\n \n     let _ = a != b || !(a != b || c == d); //~ ERROR this boolean expression can be simplified\n-    //|~ HELP for further information visit\n-    //|~ SUGGESTION let _ = !c == d || a != b;\n-    //|~ SUGGESTION let _ = !(!a != b && c == d);\n+    //~| HELP for further information visit\n+    //~| SUGGESTION let _ = !(c == d) || a != b;\n+    //~| HELP try\n+    //~| SUGGESTION let _ = !(!(a != b) && c == d);\n }"}]}