{"sha": "387df55f2628f6ab48f578f9fde6f2e5b4f40b57", "node_id": "C_kwDOAAsO6NoAKDM4N2RmNTVmMjYyOGY2YWI0OGY1NzhmOWZkZTZmMmU1YjRmNDBiNTc", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-10-11T09:37:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-11T09:37:52Z"}, "message": "Rollup merge of #102277 - mgeisler:rwlock, r=m-ou-se\n\nConsistently write `RwLock`\n\nBefore the documentation sometimes referred to an \"rwlock\" and sometimes to \"`RwLock`\".", "tree": {"sha": "3a2b6086c716c90f29df4517bae1162b024a3001", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a2b6086c716c90f29df4517bae1162b024a3001"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/387df55f2628f6ab48f578f9fde6f2e5b4f40b57", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjRTlwCRBK7hj4Ov3rIwAAi0IIAFJ7Z258ohYwBu/Gi3Wc8gbZ\njXzFYVQ5AU22jmPzBiD/8VujRPZVIcrOLPZxWWMgogXkboRXyVnxgETb5AOnpaUg\nRmO7ThfVEKStbpbSys1UNpQYbUaNidqlkYuU+1WYmy0NxQGO9ibFoPsUtR5DX0ja\nrfVtNfR8ZHGhHi0/XhLE1zoEqhdwLjehKsTTrZ/16OqABJ1fdoFUHiD5BjZ+24aE\nASkwv9h/6V+XQOCP8/5W8gBsPNVSNqOwza7IIyWehoNJYbpEDzEmOiFNPUa7Ikp5\nNoqye5ZqVyBKnnGsYCj+Oe9gTgU16skm+yGeYXQ9gjd7Y6VprUjM4lGz+1rbRuQ=\n=kYks\n-----END PGP SIGNATURE-----\n", "payload": "tree 3a2b6086c716c90f29df4517bae1162b024a3001\nparent ff903bbb718852f64e3ecdef52da2452fd7e0c79\nparent f67184fdcbe9ed85566b3574945df0e107b8016f\nauthor Yuki Okushi <jtitor@2k36.org> 1665481072 +0900\ncommitter GitHub <noreply@github.com> 1665481072 +0900\n\nRollup merge of #102277 - mgeisler:rwlock, r=m-ou-se\n\nConsistently write `RwLock`\n\nBefore the documentation sometimes referred to an \"rwlock\" and sometimes to \"`RwLock`\".\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/387df55f2628f6ab48f578f9fde6f2e5b4f40b57", "html_url": "https://github.com/rust-lang/rust/commit/387df55f2628f6ab48f578f9fde6f2e5b4f40b57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/387df55f2628f6ab48f578f9fde6f2e5b4f40b57/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff903bbb718852f64e3ecdef52da2452fd7e0c79", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff903bbb718852f64e3ecdef52da2452fd7e0c79", "html_url": "https://github.com/rust-lang/rust/commit/ff903bbb718852f64e3ecdef52da2452fd7e0c79"}, {"sha": "f67184fdcbe9ed85566b3574945df0e107b8016f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f67184fdcbe9ed85566b3574945df0e107b8016f", "html_url": "https://github.com/rust-lang/rust/commit/f67184fdcbe9ed85566b3574945df0e107b8016f"}], "stats": {"total": 63, "additions": 32, "deletions": 31}, "files": [{"sha": "8b387760768c5603334616b0b5a77b0d36c5152d", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/387df55f2628f6ab48f578f9fde6f2e5b4f40b57/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/387df55f2628f6ab48f578f9fde6f2e5b4f40b57/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=387df55f2628f6ab48f578f9fde6f2e5b4f40b57", "patch": "@@ -167,7 +167,7 @@ impl<T> RwLock<T> {\n }\n \n impl<T: ?Sized> RwLock<T> {\n-    /// Locks this rwlock with shared read access, blocking the current thread\n+    /// Locks this `RwLock` with shared read access, blocking the current thread\n     /// until it can be acquired.\n     ///\n     /// The calling thread will be blocked until there are no more writers which\n@@ -181,9 +181,10 @@ impl<T: ?Sized> RwLock<T> {\n     ///\n     /// # Errors\n     ///\n-    /// This function will return an error if the RwLock is poisoned. An RwLock\n-    /// is poisoned whenever a writer panics while holding an exclusive lock.\n-    /// The failure will occur immediately after the lock has been acquired.\n+    /// This function will return an error if the `RwLock` is poisoned. An\n+    /// `RwLock` is poisoned whenever a writer panics while holding an exclusive\n+    /// lock. The failure will occur immediately after the lock has been\n+    /// acquired.\n     ///\n     /// # Panics\n     ///\n@@ -215,7 +216,7 @@ impl<T: ?Sized> RwLock<T> {\n         }\n     }\n \n-    /// Attempts to acquire this rwlock with shared read access.\n+    /// Attempts to acquire this `RwLock` with shared read access.\n     ///\n     /// If the access could not be granted at this time, then `Err` is returned.\n     /// Otherwise, an RAII guard is returned which will release the shared access\n@@ -228,13 +229,13 @@ impl<T: ?Sized> RwLock<T> {\n     ///\n     /// # Errors\n     ///\n-    /// This function will return the [`Poisoned`] error if the RwLock is poisoned.\n-    /// An RwLock is poisoned whenever a writer panics while holding an exclusive\n-    /// lock. `Poisoned` will only be returned if the lock would have otherwise been\n-    /// acquired.\n+    /// This function will return the [`Poisoned`] error if the `RwLock` is\n+    /// poisoned. An `RwLock` is poisoned whenever a writer panics while holding\n+    /// an exclusive lock. `Poisoned` will only be returned if the lock would\n+    /// have otherwise been acquired.\n     ///\n-    /// This function will return the [`WouldBlock`] error if the RwLock could not\n-    /// be acquired because it was already locked exclusively.\n+    /// This function will return the [`WouldBlock`] error if the `RwLock` could\n+    /// not be acquired because it was already locked exclusively.\n     ///\n     /// [`Poisoned`]: TryLockError::Poisoned\n     /// [`WouldBlock`]: TryLockError::WouldBlock\n@@ -263,20 +264,20 @@ impl<T: ?Sized> RwLock<T> {\n         }\n     }\n \n-    /// Locks this rwlock with exclusive write access, blocking the current\n+    /// Locks this `RwLock` with exclusive write access, blocking the current\n     /// thread until it can be acquired.\n     ///\n     /// This function will not return while other writers or other readers\n     /// currently have access to the lock.\n     ///\n-    /// Returns an RAII guard which will drop the write access of this rwlock\n+    /// Returns an RAII guard which will drop the write access of this `RwLock`\n     /// when dropped.\n     ///\n     /// # Errors\n     ///\n-    /// This function will return an error if the RwLock is poisoned. An RwLock\n-    /// is poisoned whenever a writer panics while holding an exclusive lock.\n-    /// An error will be returned when the lock is acquired.\n+    /// This function will return an error if the `RwLock` is poisoned. An\n+    /// `RwLock` is poisoned whenever a writer panics while holding an exclusive\n+    /// lock. An error will be returned when the lock is acquired.\n     ///\n     /// # Panics\n     ///\n@@ -303,7 +304,7 @@ impl<T: ?Sized> RwLock<T> {\n         }\n     }\n \n-    /// Attempts to lock this rwlock with exclusive write access.\n+    /// Attempts to lock this `RwLock` with exclusive write access.\n     ///\n     /// If the lock could not be acquired at this time, then `Err` is returned.\n     /// Otherwise, an RAII guard is returned which will release the lock when\n@@ -316,13 +317,13 @@ impl<T: ?Sized> RwLock<T> {\n     ///\n     /// # Errors\n     ///\n-    /// This function will return the [`Poisoned`] error if the RwLock is\n-    /// poisoned. An RwLock is poisoned whenever a writer panics while holding\n-    /// an exclusive lock. `Poisoned` will only be returned if the lock would have\n-    /// otherwise been acquired.\n+    /// This function will return the [`Poisoned`] error if the `RwLock` is\n+    /// poisoned. An `RwLock` is poisoned whenever a writer panics while holding\n+    /// an exclusive lock. `Poisoned` will only be returned if the lock would\n+    /// have otherwise been acquired.\n     ///\n-    /// This function will return the [`WouldBlock`] error if the RwLock could not\n-    /// be acquired because it was already locked exclusively.\n+    /// This function will return the [`WouldBlock`] error if the `RwLock` could\n+    /// not be acquired because it was already locked exclusively.\n     ///\n     /// [`Poisoned`]: TryLockError::Poisoned\n     /// [`WouldBlock`]: TryLockError::WouldBlock\n@@ -422,10 +423,10 @@ impl<T: ?Sized> RwLock<T> {\n     ///\n     /// # Errors\n     ///\n-    /// This function will return an error if the RwLock is poisoned. An RwLock\n-    /// is poisoned whenever a writer panics while holding an exclusive lock. An\n-    /// error will only be returned if the lock would have otherwise been\n-    /// acquired.\n+    /// This function will return an error if the `RwLock` is poisoned. An\n+    /// `RwLock` is poisoned whenever a writer panics while holding an exclusive\n+    /// lock. An error will only be returned if the lock would have otherwise\n+    /// been acquired.\n     ///\n     /// # Examples\n     ///\n@@ -455,10 +456,10 @@ impl<T: ?Sized> RwLock<T> {\n     ///\n     /// # Errors\n     ///\n-    /// This function will return an error if the RwLock is poisoned. An RwLock\n-    /// is poisoned whenever a writer panics while holding an exclusive lock. An\n-    /// error will only be returned if the lock would have otherwise been\n-    /// acquired.\n+    /// This function will return an error if the `RwLock` is poisoned. An\n+    /// `RwLock` is poisoned whenever a writer panics while holding an exclusive\n+    /// lock. An error will only be returned if the lock would have otherwise\n+    /// been acquired.\n     ///\n     /// # Examples\n     ///"}]}