{"sha": "c8943c62f7a139b466648249045d557259cf22fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4OTQzYzYyZjdhMTM5YjQ2NjY0ODI0OTA0NWQ1NTcyNTljZjIyZmU=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-11-10T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-11-10T00:00:00Z"}, "message": "Add flags customizing behaviour of MIR inlining\n\n* `-Zinline-mir-threshold` to change the default threshold.\n* `-Zinline-mir-hint-threshold` to change the threshold used by\n  functions with inline hint.", "tree": {"sha": "b9328864bba1cdaf07178c816bcce85f905e2431", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9328864bba1cdaf07178c816bcce85f905e2431"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8943c62f7a139b466648249045d557259cf22fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8943c62f7a139b466648249045d557259cf22fe", "html_url": "https://github.com/rust-lang/rust/commit/c8943c62f7a139b466648249045d557259cf22fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8943c62f7a139b466648249045d557259cf22fe/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf9cf7c923eb01146971429044f216a3ca905e06", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf9cf7c923eb01146971429044f216a3ca905e06", "html_url": "https://github.com/rust-lang/rust/commit/cf9cf7c923eb01146971429044f216a3ca905e06"}], "stats": {"total": 90, "additions": 86, "deletions": 4}, "files": [{"sha": "1fc2d281e793536271f6fa2b1c8a0fa53572a983", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8943c62f7a139b466648249045d557259cf22fe/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8943c62f7a139b466648249045d557259cf22fe/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=c8943c62f7a139b466648249045d557259cf22fe", "patch": "@@ -554,6 +554,8 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(function_sections, Some(false));\n     tracked!(human_readable_cgu_names, true);\n     tracked!(inline_in_all_cgus, Some(true));\n+    tracked!(inline_mir_threshold, 123);\n+    tracked!(inline_mir_hint_threshold, 123);\n     tracked!(insert_sideeffect, true);\n     tracked!(instrument_coverage, true);\n     tracked!(instrument_mcount, true);"}, {"sha": "c742821e9bf0a7cb41fc8625b46acbc8284b0946", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c8943c62f7a139b466648249045d557259cf22fe/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8943c62f7a139b466648249045d557259cf22fe/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=c8943c62f7a139b466648249045d557259cf22fe", "patch": "@@ -16,9 +16,6 @@ use crate::transform::MirPass;\n use std::iter;\n use std::ops::{Range, RangeFrom};\n \n-const DEFAULT_THRESHOLD: usize = 50;\n-const HINT_THRESHOLD: usize = 100;\n-\n const INSTR_COST: usize = 5;\n const CALL_PENALTY: usize = 25;\n const LANDINGPAD_PENALTY: usize = 50;\n@@ -248,7 +245,11 @@ impl Inliner<'tcx> {\n             }\n         }\n \n-        let mut threshold = if hinted { HINT_THRESHOLD } else { DEFAULT_THRESHOLD };\n+        let mut threshold = if hinted {\n+            self.tcx.sess.opts.debugging_opts.inline_mir_hint_threshold\n+        } else {\n+            self.tcx.sess.opts.debugging_opts.inline_mir_threshold\n+        };\n \n         // Significantly lower the threshold for inlining cold functions\n         if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::COLD) {"}, {"sha": "1cd3d11e3215367f8468c4bffa290a3a13fca96e", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8943c62f7a139b466648249045d557259cf22fe/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8943c62f7a139b466648249045d557259cf22fe/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=c8943c62f7a139b466648249045d557259cf22fe", "patch": "@@ -929,6 +929,10 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         (default: no)\"),\n     incremental_verify_ich: bool = (false, parse_bool, [UNTRACKED],\n         \"verify incr. comp. hashes of green query instances (default: no)\"),\n+    inline_mir_threshold: usize = (50, parse_uint, [TRACKED],\n+        \"a default MIR inlining threshold (default: 50)\"),\n+    inline_mir_hint_threshold: usize = (100, parse_uint, [TRACKED],\n+        \"inlining threshold for functions with inline hint (default: 100)\"),\n     inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"control whether `#[inline]` functions are in all CGUs\"),\n     input_stats: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "477f050b69e42ac8fba5142de12ac62e4308b8dd", "filename": "src/test/mir-opt/inline/inline-options.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c8943c62f7a139b466648249045d557259cf22fe/src%2Ftest%2Fmir-opt%2Finline%2Finline-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8943c62f7a139b466648249045d557259cf22fe/src%2Ftest%2Fmir-opt%2Finline%2Finline-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-options.rs?ref=c8943c62f7a139b466648249045d557259cf22fe", "patch": "@@ -0,0 +1,19 @@\n+// Checks that inlining threshold can be controlled with\n+// inline-mir-threshold and inline-hint-threshold options.\n+//\n+// compile-flags: -Zinline-mir-threshold=90\n+// compile-flags: -Zinline-mir-hint-threshold=50\n+\n+// EMIT_MIR inline_options.main.Inline.after.mir\n+fn main() {\n+    not_inlined();\n+    inlined::<u32>();\n+}\n+\n+// Cost is approximately 3 * 25 + 5 = 80.\n+#[inline]\n+pub fn not_inlined() { g(); g(); g(); }\n+pub fn inlined<T>() { g(); g(); g(); }\n+\n+#[inline(never)]\n+fn g() {}"}, {"sha": "4cbdde2ba07d7114ffd3b738b511d57b0e259292", "filename": "src/test/mir-opt/inline/inline_options.main.Inline.after.mir", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c8943c62f7a139b466648249045d557259cf22fe/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c8943c62f7a139b466648249045d557259cf22fe/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir?ref=c8943c62f7a139b466648249045d557259cf22fe", "patch": "@@ -0,0 +1,56 @@\n+// MIR for `main` after Inline\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/inline-options.rs:8:11: 8:11\n+    let _1: ();                          // in scope 0 at $DIR/inline-options.rs:9:5: 9:18\n+    let _2: ();                          // in scope 0 at $DIR/inline-options.rs:10:5: 10:21\n+    scope 1 (inlined inlined::<u32>) {   // at $DIR/inline-options.rs:10:5: 10:21\n+        let _3: ();                      // in scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+        let _4: ();                      // in scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+        let _5: ();                      // in scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/inline-options.rs:9:5: 9:18\n+        _1 = not_inlined() -> bb1;       // scope 0 at $DIR/inline-options.rs:9:5: 9:18\n+                                         // mir::Constant\n+                                         // + span: $DIR/inline-options.rs:9:5: 9:16\n+                                         // + literal: Const { ty: fn() {not_inlined}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_1);                 // scope 0 at $DIR/inline-options.rs:9:18: 9:19\n+        StorageLive(_2);                 // scope 0 at $DIR/inline-options.rs:10:5: 10:21\n+        StorageLive(_3);                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+        _3 = g() -> bb2;                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+                                         // mir::Constant\n+                                         // + span: $DIR/inline-options.rs:10:5: 10:21\n+                                         // + literal: Const { ty: fn() {g}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb2: {\n+        StorageDead(_3);                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+        StorageLive(_4);                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+        _4 = g() -> bb3;                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+                                         // mir::Constant\n+                                         // + span: $DIR/inline-options.rs:10:5: 10:21\n+                                         // + literal: Const { ty: fn() {g}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb3: {\n+        StorageDead(_4);                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+        StorageLive(_5);                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+        _5 = g() -> bb4;                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+                                         // mir::Constant\n+                                         // + span: $DIR/inline-options.rs:10:5: 10:21\n+                                         // + literal: Const { ty: fn() {g}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb4: {\n+        StorageDead(_5);                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+        _2 = const ();                   // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+        StorageDead(_2);                 // scope 0 at $DIR/inline-options.rs:10:21: 10:22\n+        _0 = const ();                   // scope 0 at $DIR/inline-options.rs:8:11: 11:2\n+        return;                          // scope 0 at $DIR/inline-options.rs:11:2: 11:2\n+    }\n+}"}]}