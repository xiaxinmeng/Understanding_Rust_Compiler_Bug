{"sha": "373b6ec935fb64767d03da9a79d4614ccbb3f084", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3M2I2ZWM5MzVmYjY0NzY3ZDAzZGE5YTc5ZDQ2MTRjY2JiM2YwODQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-04-07T19:43:46Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-04-11T17:51:45Z"}, "message": "tests: update for MIR debuginfo.", "tree": {"sha": "ea81a53af75b514e9676f3b83ec00440a2f41003", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea81a53af75b514e9676f3b83ec00440a2f41003"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/373b6ec935fb64767d03da9a79d4614ccbb3f084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/373b6ec935fb64767d03da9a79d4614ccbb3f084", "html_url": "https://github.com/rust-lang/rust/commit/373b6ec935fb64767d03da9a79d4614ccbb3f084", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/373b6ec935fb64767d03da9a79d4614ccbb3f084/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce8d4a21348c6185e7df2817a80910f86e9db205", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce8d4a21348c6185e7df2817a80910f86e9db205", "html_url": "https://github.com/rust-lang/rust/commit/ce8d4a21348c6185e7df2817a80910f86e9db205"}], "stats": {"total": 120, "additions": 48, "deletions": 72}, "files": [{"sha": "b95bd8e52d096d93af4e4c943b5bcdeab32339d8", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=373b6ec935fb64767d03da9a79d4614ccbb3f084", "patch": "@@ -868,27 +868,11 @@ fn cleanup_debug_info_options(options: &Option<String>) -> Option<String> {\n         \"-g\".to_owned(),\n         \"--debuginfo\".to_owned()\n     ];\n-    let mut new_options =\n+    let new_options =\n         split_maybe_args(options).into_iter()\n                                  .filter(|x| !options_to_remove.contains(x))\n                                  .collect::<Vec<String>>();\n \n-    let mut i = 0;\n-    while i + 1 < new_options.len() {\n-        if new_options[i] == \"-Z\" {\n-            // FIXME #31005 MIR missing debuginfo currently.\n-            if new_options[i + 1] == \"orbit\" {\n-                // Remove \"-Z\" and \"orbit\".\n-                new_options.remove(i);\n-                new_options.remove(i);\n-                continue;\n-            }\n-            // Always skip over -Z's argument.\n-            i += 1;\n-        }\n-        i += 1;\n-    }\n-\n     Some(new_options.join(\" \"))\n }\n "}, {"sha": "cfb64f80767678d250be0cca73e98468115ecd80", "filename": "src/test/compile-fail/bad-intrinsic-monomorphization.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fcompile-fail%2Fbad-intrinsic-monomorphization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fcompile-fail%2Fbad-intrinsic-monomorphization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-intrinsic-monomorphization.rs?ref=373b6ec935fb64767d03da9a79d4614ccbb3f084", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(repr_simd, platform_intrinsics, rustc_attrs, core_intrinsics)]\n+#![feature(repr_simd, platform_intrinsics, core_intrinsics)]\n #![allow(warnings)]\n \n // Bad monomorphizations could previously cause LLVM asserts even though the\n@@ -23,19 +23,16 @@ use std::intrinsics;\n #[derive(Copy, Clone)]\n struct Foo(i64);\n \n-#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n unsafe fn test_cttz(v: Foo) -> Foo {\n     intrinsics::cttz(v)\n     //~^ ERROR `cttz` intrinsic: expected basic integer type, found `Foo`\n }\n \n-#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n unsafe fn test_fadd_fast(a: Foo, b: Foo) -> Foo {\n     intrinsics::fadd_fast(a, b)\n     //~^ ERROR `fadd_fast` intrinsic: expected basic float type, found `Foo`\n }\n \n-#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n unsafe fn test_simd_add(a: Foo, b: Foo) -> Foo {\n     simd_add(a, b)\n     //~^ ERROR `simd_add` intrinsic: expected SIMD input type, found non-SIMD `Foo`"}, {"sha": "0b7b33de42193850bd41802a56d2b5d3f2c0aeb6", "filename": "src/test/compile-fail/non-interger-atomic.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fcompile-fail%2Fnon-interger-atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fcompile-fail%2Fnon-interger-atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-interger-atomic.rs?ref=373b6ec935fb64767d03da9a79d4614ccbb3f084", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core_intrinsics, rustc_attrs)]\n+#![feature(core_intrinsics)]\n #![allow(warnings)]\n \n use std::intrinsics;\n@@ -18,97 +18,81 @@ struct Foo(i64);\n type Bar = &'static Fn();\n type Quux = [u8; 100];\n \n-#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n unsafe fn test_bool_load(p: &mut bool, v: bool) {\n     intrinsics::atomic_load(p);\n     //~^ ERROR `atomic_load` intrinsic: expected basic integer type, found `bool`\n }\n \n-#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n unsafe fn test_bool_store(p: &mut bool, v: bool) {\n     intrinsics::atomic_store(p, v);\n     //~^ ERROR `atomic_store` intrinsic: expected basic integer type, found `bool`\n }\n \n-#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n unsafe fn test_bool_xchg(p: &mut bool, v: bool) {\n     intrinsics::atomic_xchg(p, v);\n     //~^ ERROR `atomic_xchg` intrinsic: expected basic integer type, found `bool`\n }\n \n-#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n unsafe fn test_bool_cxchg(p: &mut bool, v: bool) {\n     intrinsics::atomic_cxchg(p, v, v);\n     //~^ ERROR `atomic_cxchg` intrinsic: expected basic integer type, found `bool`\n }\n \n-#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n unsafe fn test_Foo_load(p: &mut Foo, v: Foo) {\n     intrinsics::atomic_load(p);\n     //~^ ERROR `atomic_load` intrinsic: expected basic integer type, found `Foo`\n }\n \n-#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n unsafe fn test_Foo_store(p: &mut Foo, v: Foo) {\n     intrinsics::atomic_store(p, v);\n     //~^ ERROR `atomic_store` intrinsic: expected basic integer type, found `Foo`\n }\n \n-#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n unsafe fn test_Foo_xchg(p: &mut Foo, v: Foo) {\n     intrinsics::atomic_xchg(p, v);\n     //~^ ERROR `atomic_xchg` intrinsic: expected basic integer type, found `Foo`\n }\n \n-#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n unsafe fn test_Foo_cxchg(p: &mut Foo, v: Foo) {\n     intrinsics::atomic_cxchg(p, v, v);\n     //~^ ERROR `atomic_cxchg` intrinsic: expected basic integer type, found `Foo`\n }\n \n-#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n unsafe fn test_Bar_load(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_load(p);\n     //~^ ERROR expected basic integer type, found `&'static std::ops::Fn() + 'static`\n }\n \n-#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n unsafe fn test_Bar_store(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_store(p, v);\n     //~^ ERROR expected basic integer type, found `&'static std::ops::Fn() + 'static`\n }\n \n-#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n unsafe fn test_Bar_xchg(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_xchg(p, v);\n     //~^ ERROR expected basic integer type, found `&'static std::ops::Fn() + 'static`\n }\n \n-#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n unsafe fn test_Bar_cxchg(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_cxchg(p, v, v);\n     //~^ ERROR expected basic integer type, found `&'static std::ops::Fn() + 'static`\n }\n \n-#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n unsafe fn test_Quux_load(p: &mut Quux, v: Quux) {\n     intrinsics::atomic_load(p);\n     //~^ ERROR `atomic_load` intrinsic: expected basic integer type, found `[u8; 100]`\n }\n \n-#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n unsafe fn test_Quux_store(p: &mut Quux, v: Quux) {\n     intrinsics::atomic_store(p, v);\n     //~^ ERROR `atomic_store` intrinsic: expected basic integer type, found `[u8; 100]`\n }\n \n-#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n unsafe fn test_Quux_xchg(p: &mut Quux, v: Quux) {\n     intrinsics::atomic_xchg(p, v);\n     //~^ ERROR `atomic_xchg` intrinsic: expected basic integer type, found `[u8; 100]`\n }\n \n-#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n unsafe fn test_Quux_cxchg(p: &mut Quux, v: Quux) {\n     intrinsics::atomic_cxchg(p, v, v);\n     //~^ ERROR `atomic_cxchg` intrinsic: expected basic integer type, found `[u8; 100]`"}, {"sha": "35c368f4cbedb5bb399156b590bbc7ad1f43dfdd", "filename": "src/test/compile-fail/simd-intrinsic-generic-arithmetic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-arithmetic.rs?ref=373b6ec935fb64767d03da9a79d4614ccbb3f084", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(repr_simd, platform_intrinsics, rustc_attrs)]\n+#![feature(repr_simd, platform_intrinsics)]\n #![allow(non_camel_case_types)]\n #[repr(simd)]\n #[derive(Copy, Clone)]\n@@ -34,7 +34,6 @@ extern \"platform-intrinsic\" {\n     fn simd_xor<T>(x: T, y: T) -> T;\n }\n \n-#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n fn main() {\n     let x = i32x4(0, 0, 0, 0);\n     let y = u32x4(0, 0, 0, 0);"}, {"sha": "4999b790b130a4e79cb9b9e4ea63b001f0ef93d8", "filename": "src/test/compile-fail/simd-intrinsic-generic-cast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-cast.rs?ref=373b6ec935fb64767d03da9a79d4614ccbb3f084", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(repr_simd, platform_intrinsics, rustc_attrs)]\n+#![feature(repr_simd, platform_intrinsics)]\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n@@ -35,7 +35,6 @@ extern \"platform-intrinsic\" {\n     fn simd_cast<T, U>(x: T) -> U;\n }\n \n-#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n fn main() {\n     let x = i32x4(0, 0, 0, 0);\n "}, {"sha": "617b03a87117b75b3ff97d26c88c1f1b9b6ca2e0", "filename": "src/test/compile-fail/simd-intrinsic-generic-comparison.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-comparison.rs?ref=373b6ec935fb64767d03da9a79d4614ccbb3f084", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(repr_simd, platform_intrinsics, rustc_attrs)]\n+#![feature(repr_simd, platform_intrinsics)]\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n@@ -29,7 +29,6 @@ extern \"platform-intrinsic\" {\n     fn simd_ge<T, U>(x: T, y: T) -> U;\n }\n \n-#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n fn main() {\n     let x = i32x4(0, 0, 0, 0);\n "}, {"sha": "78f7d42e25a1dc0f22c830a6d9c72cb56950077e", "filename": "src/test/compile-fail/simd-intrinsic-generic-elements.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-elements.rs?ref=373b6ec935fb64767d03da9a79d4614ccbb3f084", "patch": "@@ -56,7 +56,6 @@ extern \"platform-intrinsic\" {\n     fn simd_shuffle8<T, U>(x: T, y: T, idx: [u32; 8]) -> U;\n }\n \n-#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n fn main() {\n     let x = i32x4(0, 0, 0, 0);\n "}, {"sha": "8615c8a7ef6a488ad9c31c8711537ea889541dff", "filename": "src/test/debuginfo/associated-types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fdebuginfo%2Fassociated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fdebuginfo%2Fassociated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fassociated-types.rs?ref=373b6ec935fb64767d03da9a79d4614ccbb3f084", "patch": "@@ -80,7 +80,7 @@\n \n #![allow(unused_variables)]\n #![allow(dead_code)]\n-#![feature(omit_gdb_pretty_printer_section)]\n+#![feature(omit_gdb_pretty_printer_section, rustc_attrs)]\n #![omit_gdb_pretty_printer_section]\n \n trait TraitWithAssocType {\n@@ -127,6 +127,7 @@ fn assoc_tuple<T: TraitWithAssocType>(arg: (T, T::Type)) {\n     zzz(); // #break\n }\n \n+#[rustc_no_mir] // FIXME(#32790) MIR reuses scopes for match arms.\n fn assoc_enum<T: TraitWithAssocType>(arg: Enum<T>) {\n \n     match arg {"}, {"sha": "dbd336d2dc6881b4d0f5a2c8da5551cef30f9881", "filename": "src/test/debuginfo/c-style-enum.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs?ref=373b6ec935fb64767d03da9a79d4614ccbb3f084", "patch": "@@ -157,7 +157,8 @@ fn main() {\n \n     zzz(); // #break\n \n-    let a = SINGLE_VARIANT;\n+    // Borrow to avoid an eager load of the constant value in the static.\n+    let a = &SINGLE_VARIANT;\n     let a = unsafe { AUTO_ONE };\n     let a = unsafe { MANUAL_ONE };\n }"}, {"sha": "e90f7d649f599a58abf43d133e9cbbab1cf83fbc", "filename": "src/test/debuginfo/function-prologue-stepping-no-stack-check.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs?ref=373b6ec935fb64767d03da9a79d4614ccbb3f084", "patch": "@@ -247,10 +247,11 @@\n // lldb-command:continue\n \n #![allow(dead_code, unused_assignments, unused_variables)]\n-#![feature(omit_gdb_pretty_printer_section)]\n+#![feature(omit_gdb_pretty_printer_section, rustc_attrs)]\n #![omit_gdb_pretty_printer_section]\n \n #[no_stack_check]\n+#[rustc_no_mir] // FIXME(#31005) MIR debuginfo is missing argument names.\n fn immediate_args(a: isize, b: bool, c: f64) {\n     println!(\"\");\n }\n@@ -267,43 +268,51 @@ struct BigStruct {\n }\n \n #[no_stack_check]\n+#[rustc_no_mir] // FIXME(#31005) MIR debuginfo is missing argument names.\n fn non_immediate_args(a: BigStruct, b: BigStruct) {\n     println!(\"\");\n }\n \n #[no_stack_check]\n+#[rustc_no_mir] // FIXME(#31005) MIR debuginfo is missing argument names.\n fn binding(a: i64, b: u64, c: f64) {\n     let x = 0;\n     println!(\"\");\n }\n \n #[no_stack_check]\n+#[rustc_no_mir] // FIXME(#31005) MIR debuginfo is missing argument names.\n fn assignment(mut a: u64, b: u64, c: f64) {\n     a = b;\n     println!(\"\");\n }\n \n #[no_stack_check]\n+#[rustc_no_mir] // FIXME(#31005) MIR debuginfo is missing argument names.\n fn function_call(x: u64, y: u64, z: f64) {\n     println!(\"Hi!\")\n }\n \n #[no_stack_check]\n+#[rustc_no_mir] // FIXME(#31005) MIR debuginfo is missing argument names.\n fn identifier(x: u64, y: u64, z: f64) -> u64 {\n     x\n }\n \n #[no_stack_check]\n+#[rustc_no_mir] // FIXME(#31005) MIR debuginfo is missing argument names.\n fn return_expr(x: u64, y: u64, z: f64) -> u64 {\n     return x;\n }\n \n #[no_stack_check]\n+#[rustc_no_mir] // FIXME(#31005) MIR debuginfo is missing argument names.\n fn arithmetic_expr(x: u64, y: u64, z: f64) -> u64 {\n     x + y\n }\n \n #[no_stack_check]\n+#[rustc_no_mir] // FIXME(#31005) MIR debuginfo is missing argument names.\n fn if_expr(x: u64, y: u64, z: f64) -> u64 {\n     if x + y < 1000 {\n         x\n@@ -313,6 +322,7 @@ fn if_expr(x: u64, y: u64, z: f64) -> u64 {\n }\n \n #[no_stack_check]\n+#[rustc_no_mir] // FIXME(#31005) MIR debuginfo is missing argument names.\n fn while_expr(mut x: u64, y: u64, z: u64) -> u64 {\n     while x + y < 1000 {\n         x += z\n@@ -321,6 +331,7 @@ fn while_expr(mut x: u64, y: u64, z: u64) -> u64 {\n }\n \n #[no_stack_check]\n+#[rustc_no_mir] // FIXME(#31005) MIR debuginfo is missing argument names.\n fn loop_expr(mut x: u64, y: u64, z: u64) -> u64 {\n     loop {\n         x += z;"}, {"sha": "ea237e5970c55645f448813a2d72ff93ac1818d9", "filename": "src/test/debuginfo/no-debug-attribute.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fdebuginfo%2Fno-debug-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fdebuginfo%2Fno-debug-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fno-debug-attribute.rs?ref=373b6ec935fb64767d03da9a79d4614ccbb3f084", "patch": "@@ -23,10 +23,11 @@\n // gdb-command:continue\n \n #![allow(unused_variables)]\n-#![feature(no_debug)]\n+#![feature(no_debug, rustc_attrs)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n+#[rustc_no_mir] // FIXME(#31005) MIR debuginfo is inaccurate for returns.\n fn function_with_debuginfo() {\n     let abc = 10_usize;\n     return (); // #break"}, {"sha": "d2af828a8902082164e10af5a503506d6a997172", "filename": "src/test/debuginfo/var-captured-in-nested-closure.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs?ref=373b6ec935fb64767d03da9a79d4614ccbb3f084", "patch": "@@ -78,7 +78,7 @@\n // lldb-command:continue\n \n #![allow(unused_variables)]\n-#![feature(box_syntax)]\n+#![feature(box_syntax, rustc_attrs, stmt_expr_attributes)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n@@ -88,6 +88,7 @@ struct Struct {\n     c: usize\n }\n \n+#[rustc_no_mir] // FIXME(#31005) MIR debuginfo is missing captures.\n fn main() {\n     let mut variable = 1;\n     let constant = 2;\n@@ -101,10 +102,14 @@ fn main() {\n     let struct_ref = &a_struct;\n     let owned: Box<_> = box 6;\n \n-    let mut closure = || {\n+    let mut closure =\n+    #[rustc_no_mir] // FIXME(#31005) MIR debuginfo is missing captures.\n+    || {\n         let closure_local = 8;\n \n-        let mut nested_closure = || {\n+        let mut nested_closure =\n+        #[rustc_no_mir] // FIXME(#31005) MIR debuginfo is missing captures.\n+        || {\n             zzz(); // #break\n             variable = constant + a_struct.a + struct_ref.a + *owned + closure_local;\n         };"}, {"sha": "26d46040c206e116d98054045f393f6924cb2b5b", "filename": "src/test/debuginfo/var-captured-in-sendable-closure.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs?ref=373b6ec935fb64767d03da9a79d4614ccbb3f084", "patch": "@@ -40,7 +40,7 @@\n // lldb-check:[...]$2 = 5\n \n #![allow(unused_variables)]\n-#![feature(unboxed_closures, box_syntax)]\n+#![feature(unboxed_closures, box_syntax, rustc_attrs, stmt_expr_attributes)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n@@ -50,6 +50,7 @@ struct Struct {\n     c: usize\n }\n \n+#[rustc_no_mir] // FIXME(#31005) MIR debuginfo is missing captures.\n fn main() {\n     let constant = 1;\n \n@@ -61,7 +62,9 @@ fn main() {\n \n     let owned: Box<_> = box 5;\n \n-    let closure = move || {\n+    let closure =\n+    #[rustc_no_mir] // FIXME(#31005) MIR debuginfo is missing captures.\n+    move || {\n         zzz(); // #break\n         do_something(&constant, &a_struct.a, &*owned);\n     };\n@@ -73,7 +76,9 @@ fn main() {\n     // The `self` argument of the following closure should be passed by value\n     // to FnOnce::call_once(self, args), which gets translated a bit differently\n     // than the regular case. Let's make sure this is supported too.\n-    let immedate_env = move || {\n+    let immedate_env =\n+    #[rustc_no_mir] // FIXME(#31005) MIR debuginfo is missing captures.\n+    move || {\n         zzz(); // #break\n         return constant2;\n     };"}, {"sha": "a22fbebfd1ada415bdba19c8de03e387dcc9999e", "filename": "src/test/debuginfo/var-captured-in-stack-closure.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs?ref=373b6ec935fb64767d03da9a79d4614ccbb3f084", "patch": "@@ -69,7 +69,7 @@\n // lldb-command:print *owned\n // lldb-check:[...]$9 = 6\n \n-#![feature(unboxed_closures, box_syntax)]\n+#![feature(unboxed_closures, box_syntax, rustc_attrs, stmt_expr_attributes)]\n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n@@ -80,6 +80,7 @@ struct Struct {\n     c: usize\n }\n \n+#[rustc_no_mir] // FIXME(#31005) MIR debuginfo is missing captures.\n fn main() {\n     let mut variable = 1;\n     let constant = 2;\n@@ -94,7 +95,9 @@ fn main() {\n     let owned: Box<_> = box 6;\n \n     {\n-        let mut first_closure = || {\n+        let mut first_closure =\n+        #[rustc_no_mir] // FIXME(#31005) MIR debuginfo is missing captures.\n+        || {\n             zzz(); // #break\n             variable = constant + a_struct.a + struct_ref.a + *owned;\n         };\n@@ -103,7 +106,9 @@ fn main() {\n     }\n \n     {\n-        let mut second_closure = || {\n+        let mut second_closure =\n+        #[rustc_no_mir] // FIXME(#31005) MIR debuginfo is missing captures.\n+        || {\n             zzz(); // #break\n             variable = constant + a_struct.a + struct_ref.a + *owned;\n         };"}, {"sha": "48df600214ad0813863e490db07492724ab79867", "filename": "src/test/run-pass/backtrace-debuginfo-aux.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo-aux.rs?ref=373b6ec935fb64767d03da9a79d4614ccbb3f084", "patch": "@@ -11,7 +11,6 @@\n // ignore-test: not a test, used by backtrace-debuginfo.rs to test file!()\n \n #[inline(never)]\n-#[rustc_no_mir] // FIXME #31005 MIR missing debuginfo currently.\n pub fn callback<F>(f: F) where F: FnOnce((&'static str, u32)) {\n     f((file!(), line!()))\n }\n@@ -21,7 +20,6 @@ pub fn callback<F>(f: F) where F: FnOnce((&'static str, u32)) {\n // this case.\n #[cfg_attr(not(target_env = \"msvc\"), inline(always))]\n #[cfg_attr(target_env = \"msvc\", inline(never))]\n-#[rustc_no_mir] // FIXME #31005 MIR missing debuginfo currently.\n pub fn callback_inlined<F>(f: F) where F: FnOnce((&'static str, u32)) {\n     f((file!(), line!()))\n }"}, {"sha": "8b2b26948824f08d89b9252cc024a2714d5e773b", "filename": "src/test/run-pass/backtrace-debuginfo.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs?ref=373b6ec935fb64767d03da9a79d4614ccbb3f084", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n // We disable tail merging here because it can't preserve debuginfo and thus\n // potentially breaks the backtraces. Also, subtle changes can decide whether\n // tail merging suceeds, so the test might work today but fail tomorrow due to a\n@@ -74,7 +72,6 @@ fn dump_filelines(filelines: &[Pos]) {\n }\n \n #[inline(never)]\n-#[rustc_no_mir] // FIXME #31005 MIR missing debuginfo currently.\n fn inner(counter: &mut i32, main_pos: Pos, outer_pos: Pos) {\n     check!(counter; main_pos, outer_pos);\n     check!(counter; main_pos, outer_pos);\n@@ -91,7 +88,6 @@ fn inner(counter: &mut i32, main_pos: Pos, outer_pos: Pos) {\n // this case.\n #[cfg_attr(not(target_env = \"msvc\"), inline(always))]\n #[cfg_attr(target_env = \"msvc\", inline(never))]\n-#[rustc_no_mir] // FIXME #31005 MIR missing debuginfo currently.\n fn inner_inlined(counter: &mut i32, main_pos: Pos, outer_pos: Pos) {\n     check!(counter; main_pos, outer_pos);\n     check!(counter; main_pos, outer_pos);\n@@ -117,7 +113,6 @@ fn inner_inlined(counter: &mut i32, main_pos: Pos, outer_pos: Pos) {\n }\n \n #[inline(never)]\n-#[rustc_no_mir] // FIXME #31005 MIR missing debuginfo currently.\n fn outer(mut counter: i32, main_pos: Pos) {\n     inner(&mut counter, main_pos, pos!());\n     inner_inlined(&mut counter, main_pos, pos!());\n@@ -162,7 +157,6 @@ fn run_test(me: &str) {\n }\n \n #[inline(never)]\n-#[rustc_no_mir] // FIXME #31005 MIR missing debuginfo currently.\n fn main() {\n     let args: Vec<String> = env::args().collect();\n     if args.len() >= 2 {"}, {"sha": "5b364358a59dd45b565f592297941e5a5d6b8b48", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b6ec935fb64767d03da9a79d4614ccbb3f084/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=373b6ec935fb64767d03da9a79d4614ccbb3f084", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n // no-pretty-expanded FIXME #15189\n // ignore-android FIXME #17520\n // compile-flags:-g\n@@ -18,8 +16,6 @@ use std::env;\n use std::process::{Command, Stdio};\n use std::str;\n \n-// FIXME #31005 MIR missing debuginfo currently.\n-#[cfg_attr(target_env = \"msvc\", rustc_no_mir)]\n #[inline(never)]\n fn foo() {\n     let _v = vec![1, 2, 3];\n@@ -28,8 +24,6 @@ fn foo() {\n     }\n }\n \n-// FIXME #31005 MIR missing debuginfo currently.\n-#[cfg_attr(target_env = \"msvc\", rustc_no_mir)]\n #[inline(never)]\n fn double() {\n     struct Double;"}]}