{"sha": "e4710ade6d384adc922ee423373739005dbc0330", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NzEwYWRlNmQzODRhZGM5MjJlZTQyMzM3MzczOTAwNWRiYzAzMzA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-24T12:29:35Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-28T17:59:57Z"}, "message": "rustc_metadata: Pass SVH by value", "tree": {"sha": "310dd09aabb9ef258320507f94d9b9a8bbe27703", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/310dd09aabb9ef258320507f94d9b9a8bbe27703"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4710ade6d384adc922ee423373739005dbc0330", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4710ade6d384adc922ee423373739005dbc0330", "html_url": "https://github.com/rust-lang/rust/commit/e4710ade6d384adc922ee423373739005dbc0330", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4710ade6d384adc922ee423373739005dbc0330/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9be526e8ebfd318ecc5c6d5a6c40886dffb1be95", "url": "https://api.github.com/repos/rust-lang/rust/commits/9be526e8ebfd318ecc5c6d5a6c40886dffb1be95", "html_url": "https://github.com/rust-lang/rust/commit/9be526e8ebfd318ecc5c6d5a6c40886dffb1be95"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "22f997ca4e1bb003e6b9edd43edc1e0c5ad9123a", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e4710ade6d384adc922ee423373739005dbc0330/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4710ade6d384adc922ee423373739005dbc0330/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=e4710ade6d384adc922ee423373739005dbc0330", "patch": "@@ -191,14 +191,13 @@ impl<'a> CrateLoader<'a> {\n         self.cstore\n     }\n \n-    fn existing_match(&self, name: Symbol, hash: Option<&Svh>, kind: PathKind)\n-                      -> Option<CrateNum> {\n+    fn existing_match(&self, name: Symbol, hash: Option<Svh>, kind: PathKind) -> Option<CrateNum> {\n         let mut ret = None;\n         self.cstore.iter_crate_data(|cnum, data| {\n             if data.name() != name { return }\n \n             match hash {\n-                Some(hash) if *hash == data.hash() => { ret = Some(cnum); return }\n+                Some(hash) if hash == data.hash() => { ret = Some(cnum); return }\n                 Some(..) => return,\n                 None => {}\n             }\n@@ -410,10 +409,10 @@ impl<'a> CrateLoader<'a> {\n         let (root, hash, host_hash, extra_filename, path_kind) = match dep {\n             Some((root, dep)) => (\n                 Some(root),\n-                Some(&dep.hash),\n-                dep.host_hash.as_ref(),\n+                Some(dep.hash),\n+                dep.host_hash,\n                 Some(&dep.extra_filename[..]),\n-                PathKind::Dependency\n+                PathKind::Dependency,\n             ),\n             None => (None, None, None, None, PathKind::Crate),\n         };"}, {"sha": "c6fb80eca055ad98cce36d9faa0cbc2028b4c4ff", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4710ade6d384adc922ee423373739005dbc0330/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4710ade6d384adc922ee423373739005dbc0330/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=e4710ade6d384adc922ee423373739005dbc0330", "patch": "@@ -262,8 +262,8 @@ crate struct CrateLocator<'a> {\n     // Immutable per-search configuration.\n     crate_name: Symbol,\n     exact_paths: Vec<PathBuf>,\n-    pub hash: Option<&'a Svh>,\n-    pub host_hash: Option<&'a Svh>,\n+    pub hash: Option<Svh>,\n+    pub host_hash: Option<Svh>,\n     extra_filename: Option<&'a str>,\n     pub target: &'a Target,\n     pub triple: TargetTriple,\n@@ -313,8 +313,8 @@ impl<'a> CrateLocator<'a> {\n         sess: &'a Session,\n         metadata_loader: &'a dyn MetadataLoader,\n         crate_name: Symbol,\n-        hash: Option<&'a Svh>,\n-        host_hash: Option<&'a Svh>,\n+        hash: Option<Svh>,\n+        host_hash: Option<Svh>,\n         extra_filename: Option<&'a str>,\n         is_host: bool,\n         path_kind: PathKind,\n@@ -792,7 +792,7 @@ impl<'a> CrateLocator<'a> {\n         }\n \n         let hash = root.hash();\n-        if let Some(&expected_hash) = self.hash {\n+        if let Some(expected_hash) = self.hash {\n             if hash != expected_hash {\n                 info!(\"Rejecting via hash: expected {} got {}\", expected_hash, hash);\n                 self.rejected_via_hash.push(CrateMismatch {"}]}