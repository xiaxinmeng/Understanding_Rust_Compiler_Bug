{"sha": "103e5c9b37d6cdc4552b353cdf3fd2772dae760c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwM2U1YzliMzdkNmNkYzQ1NTJiMzUzY2RmM2ZkMjc3MmRhZTc2MGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-17T00:40:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-17T00:40:28Z"}, "message": "Auto merge of #34852 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 7 pull requests\n\n- Successful merges: #33362, #34768, #34837, #34838, #34847, #34848, #34849\n- Failed merges: #33951, #34850", "tree": {"sha": "6e1576298a7a79f80e2aa3d71e370b894366386c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e1576298a7a79f80e2aa3d71e370b894366386c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/103e5c9b37d6cdc4552b353cdf3fd2772dae760c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/103e5c9b37d6cdc4552b353cdf3fd2772dae760c", "html_url": "https://github.com/rust-lang/rust/commit/103e5c9b37d6cdc4552b353cdf3fd2772dae760c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/103e5c9b37d6cdc4552b353cdf3fd2772dae760c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5ad2779ea155f6a1b2b61415bc804dcbb23400c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ad2779ea155f6a1b2b61415bc804dcbb23400c", "html_url": "https://github.com/rust-lang/rust/commit/b5ad2779ea155f6a1b2b61415bc804dcbb23400c"}, {"sha": "45f8427d47f6ac4ae2f661fde47be0da3efc6a4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/45f8427d47f6ac4ae2f661fde47be0da3efc6a4b", "html_url": "https://github.com/rust-lang/rust/commit/45f8427d47f6ac4ae2f661fde47be0da3efc6a4b"}], "stats": {"total": 130, "additions": 85, "deletions": 45}, "files": [{"sha": "6fd7cf66920d48875e03c0a6581e08b7de72101b", "filename": "src/doc/book/no-stdlib.md", "status": "modified", "additions": 48, "deletions": 25, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/103e5c9b37d6cdc4552b353cdf3fd2772dae760c/src%2Fdoc%2Fbook%2Fno-stdlib.md", "raw_url": "https://github.com/rust-lang/rust/raw/103e5c9b37d6cdc4552b353cdf3fd2772dae760c/src%2Fdoc%2Fbook%2Fno-stdlib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fno-stdlib.md?ref=103e5c9b37d6cdc4552b353cdf3fd2772dae760c", "patch": "@@ -21,7 +21,7 @@ this using our `Cargo.toml` file:\n \n ```toml\n [dependencies]\n-libc = { version = \"0.2.11\", default-features = false }\n+libc = { version = \"0.2.14\", default-features = false }\n ```\n \n Note that the default features have been disabled. This is a critical step -\n@@ -36,8 +36,7 @@ or overriding the default shim for the C `main` function with your own.\n The function marked `#[start]` is passed the command line parameters\n in the same format as C:\n \n-```rust\n-# #![feature(libc)]\n+```rust,ignore\n #![feature(lang_items)]\n #![feature(start)]\n #![no_std]\n@@ -51,53 +50,77 @@ fn start(_argc: isize, _argv: *const *const u8) -> isize {\n     0\n }\n \n-// These functions and traits are used by the compiler, but not\n+// These functions are used by the compiler, but not\n // for a bare-bones hello world. These are normally\n // provided by libstd.\n-#[lang = \"eh_personality\"] extern fn eh_personality() {}\n-#[lang = \"panic_fmt\"] extern fn panic_fmt() -> ! { loop {} }\n-# #[lang = \"eh_unwind_resume\"] extern fn rust_eh_unwind_resume() {}\n-# #[no_mangle] pub extern fn rust_eh_register_frames () {}\n-# #[no_mangle] pub extern fn rust_eh_unregister_frames () {}\n-# // fn main() {} tricked you, rustdoc!\n+#[lang = \"eh_personality\"]\n+#[no_mangle]\n+pub extern fn eh_personality() {\n+}\n+\n+#[lang = \"panic_fmt\"]\n+#[no_mangle]\n+pub extern fn rust_begin_panic(_msg: core::fmt::Arguments,\n+                               _file: &'static str,\n+                               _line: u32) -> ! {\n+    loop {}\n+}\n ```\n \n To override the compiler-inserted `main` shim, one has to disable it\n with `#![no_main]` and then create the appropriate symbol with the\n correct ABI and the correct name, which requires overriding the\n compiler's name mangling too:\n \n-```rust\n-# #![feature(libc)]\n+```rust,ignore\n #![feature(lang_items)]\n #![feature(start)]\n #![no_std]\n #![no_main]\n \n+// Pull in the system libc library for what crt0.o likely requires\n extern crate libc;\n \n+// Entry point for this program\n #[no_mangle] // ensure that this symbol is called `main` in the output\n-pub extern fn main(argc: i32, argv: *const *const u8) -> i32 {\n+pub extern fn main(_argc: i32, _argv: *const *const u8) -> i32 {\n     0\n }\n \n-#[lang = \"eh_personality\"] extern fn eh_personality() {}\n-#[lang = \"panic_fmt\"] extern fn panic_fmt() -> ! { loop {} }\n-# #[lang = \"eh_unwind_resume\"] extern fn rust_eh_unwind_resume() {}\n-# #[no_mangle] pub extern fn rust_eh_register_frames () {}\n-# #[no_mangle] pub extern fn rust_eh_unregister_frames () {}\n-# // fn main() {} tricked you, rustdoc!\n+// These functions and traits are used by the compiler, but not\n+// for a bare-bones hello world. These are normally\n+// provided by libstd.\n+#[lang = \"eh_personality\"]\n+#[no_mangle]\n+pub extern fn eh_personality() {\n+}\n+\n+#[lang = \"panic_fmt\"]\n+#[no_mangle]\n+pub extern fn rust_begin_panic(_msg: core::fmt::Arguments,\n+                               _file: &'static str,\n+                               _line: u32) -> ! {\n+    loop {}\n+}\n ```\n \n-The compiler currently makes a few assumptions about symbols which are available\n-in the executable to call. Normally these functions are provided by the standard\n-library, but without it you must define your own.\n+## More about the langauge items\n+\n+The compiler currently makes a few assumptions about symbols which are\n+available in the executable to call. Normally these functions are provided by\n+the standard library, but without it you must define your own. These symbols\n+are called \"language items\", and they each have an internal name, and then a\n+signature that an implementation must conform to.\n \n The first of these two functions, `eh_personality`, is used by the failure\n mechanisms of the compiler. This is often mapped to GCC's personality function\n (see the [libstd implementation][unwind] for more information), but crates\n which do not trigger a panic can be assured that this function is never\n-called. The second function, `panic_fmt`, is also used by the failure\n-mechanisms of the compiler.\n-\n+called. Both the language item and the symbol name are `eh_personality`.\n+ \n [unwind]: https://github.com/rust-lang/rust/blob/master/src/libpanic_unwind/gcc.rs\n+\n+The second function, `panic_fmt`, is also used by the failure mechanisms of the\n+compiler. When a panic happens, this controls the message that's displayed on\n+the screen. While the language item's name is `panic_fmt`, the symbol name is\n+`rust_begin_panic`."}, {"sha": "d565532017a65982d518e2453b780743e609a266", "filename": "src/doc/nomicon/phantom-data.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/103e5c9b37d6cdc4552b353cdf3fd2772dae760c/src%2Fdoc%2Fnomicon%2Fphantom-data.md", "raw_url": "https://github.com/rust-lang/rust/raw/103e5c9b37d6cdc4552b353cdf3fd2772dae760c/src%2Fdoc%2Fnomicon%2Fphantom-data.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fphantom-data.md?ref=103e5c9b37d6cdc4552b353cdf3fd2772dae760c", "patch": "@@ -51,12 +51,12 @@ struct Vec<T> {\n ```\n \n Unlike the previous example it *appears* that everything is exactly as we\n-want. Every generic argument to Vec shows up in the at least one field.\n+want. Every generic argument to Vec shows up in at least one field.\n Good to go!\n \n Nope.\n \n-The drop checker will generously determine that Vec<T> does not own any values\n+The drop checker will generously determine that `Vec<T>` does not own any values\n of type T. This will in turn make it conclude that it doesn't need to worry\n about Vec dropping any T's in its destructor for determining drop check\n soundness. This will in turn allow people to create unsoundness using\n@@ -81,7 +81,7 @@ Raw pointers that own an allocation is such a pervasive pattern that the\n standard library made a utility for itself called `Unique<T>` which:\n \n * wraps a `*const T` for variance\n-* includes a `PhantomData<T>`,\n+* includes a `PhantomData<T>`\n * auto-derives Send/Sync as if T was contained\n * marks the pointer as NonZero for the null-pointer optimization\n "}, {"sha": "b8509321e3d19b0679ba7a29aea280336229dab2", "filename": "src/doc/reference.md", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/103e5c9b37d6cdc4552b353cdf3fd2772dae760c/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/103e5c9b37d6cdc4552b353cdf3fd2772dae760c/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=103e5c9b37d6cdc4552b353cdf3fd2772dae760c", "patch": "@@ -853,6 +853,20 @@ extern crate std; // equivalent to: extern crate std as std;\n extern crate std as ruststd; // linking to 'std' under another name\n ```\n \n+When naming Rust crates, hyphens are disallowed. However, Cargo packages may\n+make use of them. In such case, when `Cargo.toml` doesn't specify a crate name,\n+Cargo will transparently replace `-` with `_` (Refer to [RFC 940] for more\n+details).\n+\n+Here is an example:\n+\n+```{.ignore}\n+// Importing the Cargo package hello-world\n+extern crate hello_world; // hyphen replaced with an underscore\n+```\n+\n+[RFC 940]: https://github.com/rust-lang/rfcs/blob/master/text/0940-hyphens-considered-harmful.md\n+\n #### Use declarations\n \n A _use declaration_ creates one or more local name bindings synonymous with\n@@ -3744,9 +3758,9 @@ Since `'static` \"lives longer\" than `'a`, `&'static str` is a subtype of\n \n ## Type coercions\n \n-Coercions are defined in [RFC401]. A coercion is implicit and has no syntax.\n+Coercions are defined in [RFC 401]. A coercion is implicit and has no syntax.\n \n-[RFC401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\n+[RFC 401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\n \n ### Coercion sites\n \n@@ -3886,7 +3900,7 @@ Coercion is allowed between the following types:\n \n     In the future, coerce_inner will be recursively extended to tuples and\n     structs. In addition, coercions from sub-traits to super-traits will be\n-    added. See [RFC401] for more details.\n+    added. See [RFC 401] for more details.\n \n # Special traits\n "}, {"sha": "4a806a3c98602aa224b963e8a862526d3b1b48ef", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/103e5c9b37d6cdc4552b353cdf3fd2772dae760c/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/103e5c9b37d6cdc4552b353cdf3fd2772dae760c/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=103e5c9b37d6cdc4552b353cdf3fd2772dae760c", "patch": "@@ -18,7 +18,7 @@ use ptr;\n /// An implementation of SipHash 1-3.\n ///\n /// See: https://131002.net/siphash/\n-#[unstable(feature = \"sip_hash_13\", issue = \"29754\")]\n+#[unstable(feature = \"sip_hash_13\", issue = \"34767\")]\n #[derive(Debug, Clone, Default)]\n pub struct SipHasher13 {\n     hasher: Hasher<Sip13Rounds>,\n@@ -27,7 +27,7 @@ pub struct SipHasher13 {\n /// An implementation of SipHash 2-4.\n ///\n /// See: https://131002.net/siphash/\n-#[unstable(feature = \"sip_hash_13\", issue = \"29754\")]\n+#[unstable(feature = \"sip_hash_13\", issue = \"34767\")]\n #[derive(Debug, Clone, Default)]\n pub struct SipHasher24 {\n     hasher: Hasher<Sip24Rounds>,\n@@ -154,14 +154,14 @@ impl SipHasher {\n impl SipHasher13 {\n     /// Creates a new `SipHasher13` with the two initial keys set to 0.\n     #[inline]\n-    #[unstable(feature = \"sip_hash_13\", issue = \"29754\")]\n+    #[unstable(feature = \"sip_hash_13\", issue = \"34767\")]\n     pub fn new() -> SipHasher13 {\n         SipHasher13::new_with_keys(0, 0)\n     }\n \n     /// Creates a `SipHasher13` that is keyed off the provided keys.\n     #[inline]\n-    #[unstable(feature = \"sip_hash_13\", issue = \"29754\")]\n+    #[unstable(feature = \"sip_hash_13\", issue = \"34767\")]\n     pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher13 {\n         SipHasher13 {\n             hasher: Hasher::new_with_keys(key0, key1)\n@@ -172,14 +172,14 @@ impl SipHasher13 {\n impl SipHasher24 {\n     /// Creates a new `SipHasher24` with the two initial keys set to 0.\n     #[inline]\n-    #[unstable(feature = \"sip_hash_13\", issue = \"29754\")]\n+    #[unstable(feature = \"sip_hash_13\", issue = \"34767\")]\n     pub fn new() -> SipHasher24 {\n         SipHasher24::new_with_keys(0, 0)\n     }\n \n     /// Creates a `SipHasher24` that is keyed off the provided keys.\n     #[inline]\n-    #[unstable(feature = \"sip_hash_13\", issue = \"29754\")]\n+    #[unstable(feature = \"sip_hash_13\", issue = \"34767\")]\n     pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher24 {\n         SipHasher24 {\n             hasher: Hasher::new_with_keys(key0, key1)\n@@ -232,7 +232,7 @@ impl super::Hasher for SipHasher {\n     }\n }\n \n-#[unstable(feature = \"sip_hash_13\", issue = \"29754\")]\n+#[unstable(feature = \"sip_hash_13\", issue = \"34767\")]\n impl super::Hasher for SipHasher13 {\n     #[inline]\n     fn write(&mut self, msg: &[u8]) {\n@@ -245,7 +245,7 @@ impl super::Hasher for SipHasher13 {\n     }\n }\n \n-#[unstable(feature = \"sip_hash_13\", issue = \"29754\")]\n+#[unstable(feature = \"sip_hash_13\", issue = \"34767\")]\n impl super::Hasher for SipHasher24 {\n     #[inline]\n     fn write(&mut self, msg: &[u8]) {"}, {"sha": "0ad1f671f155b8182c038ce0ec8e8ae9483308b7", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/103e5c9b37d6cdc4552b353cdf3fd2772dae760c/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/103e5c9b37d6cdc4552b353cdf3fd2772dae760c/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=103e5c9b37d6cdc4552b353cdf3fd2772dae760c", "patch": "@@ -25,6 +25,8 @@\n //!\n //! # How to use the core library\n //!\n+//! Please note that all of these details are currently not considered stable.\n+//!\n // FIXME: Fill me in with more detail when the interface settles\n //! This library is built on the assumption of a few existing symbols:\n //!\n@@ -34,11 +36,12 @@\n //!   These functions are often provided by the system libc, but can also be\n //!   provided by the [rlibc crate](https://crates.io/crates/rlibc).\n //!\n-//! * `rust_begin_unwind` - This function takes three arguments, a\n-//!   `fmt::Arguments`, a `&str`, and a `u32`. These three arguments dictate\n-//!   the panic message, the file at which panic was invoked, and the line.\n-//!   It is up to consumers of this core library to define this panic\n-//!   function; it is only required to never return.\n+//! * `rust_begin_panic` - This function takes three arguments, a\n+//!   `fmt::Arguments`, a `&'static str`, and a `u32`. These three arguments\n+//!   dictate the panic message, the file at which panic was invoked, and the\n+//!   line. It is up to consumers of this core library to define this panic\n+//!   function; it is only required to never return. This requires a `lang`\n+//!   attribute named `panic_fmt`.\n \n // Since libcore defines many fundamental lang items, all tests live in a\n // separate crate, libcoretest, to avoid bizarre issues."}, {"sha": "97648cc34699a9dc6baaf133fa8a28893b2fe74a", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/103e5c9b37d6cdc4552b353cdf3fd2772dae760c/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/103e5c9b37d6cdc4552b353cdf3fd2772dae760c/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=103e5c9b37d6cdc4552b353cdf3fd2772dae760c", "patch": "@@ -2318,7 +2318,7 @@ impl usize {\n /// let num = 12.4_f32;\n /// let inf = f32::INFINITY;\n /// let zero = 0f32;\n-/// let sub: f32 = 0.000000000000000000000000000000000000011754942;\n+/// let sub: f32 = 1.1754942e-38;\n /// let nan = f32::NAN;\n ///\n /// assert_eq!(num.classify(), FpCategory::Normal);"}]}