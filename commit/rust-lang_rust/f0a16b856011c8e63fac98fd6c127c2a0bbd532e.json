{"sha": "f0a16b856011c8e63fac98fd6c127c2a0bbd532e", "node_id": "C_kwDOAAsO6NoAKGYwYTE2Yjg1NjAxMWM4ZTYzZmFjOThmZDZjMTI3YzJhMGJiZDUzMmU", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-03-01T11:11:42Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-03-01T13:57:03Z"}, "message": "Use rustfix in copy suggestion test", "tree": {"sha": "87606f98eb27459c3a259fd28b2ac478615e8627", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87606f98eb27459c3a259fd28b2ac478615e8627"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0a16b856011c8e63fac98fd6c127c2a0bbd532e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0a16b856011c8e63fac98fd6c127c2a0bbd532e", "html_url": "https://github.com/rust-lang/rust/commit/f0a16b856011c8e63fac98fd6c127c2a0bbd532e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0a16b856011c8e63fac98fd6c127c2a0bbd532e/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "879efa84516da086e7461d65fff6797c8ae1cff9", "url": "https://api.github.com/repos/rust-lang/rust/commits/879efa84516da086e7461d65fff6797c8ae1cff9", "html_url": "https://github.com/rust-lang/rust/commit/879efa84516da086e7461d65fff6797c8ae1cff9"}], "stats": {"total": 144, "additions": 119, "deletions": 25}, "files": [{"sha": "d5c8d4e6bdf2b76852167e32974a089fc06f70ec", "filename": "src/test/ui/moves/use_of_moved_value_clone_suggestions.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0a16b856011c8e63fac98fd6c127c2a0bbd532e/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_clone_suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a16b856011c8e63fac98fd6c127c2a0bbd532e/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_clone_suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_clone_suggestions.rs?ref=f0a16b856011c8e63fac98fd6c127c2a0bbd532e", "patch": "@@ -0,0 +1,6 @@\n+// `Rc` is not ever `Copy`, we should not suggest adding `T: Copy` constraint\n+fn duplicate_rc<T>(t: std::rc::Rc<T>) -> (std::rc::Rc<T>, std::rc::Rc<T>) {\n+    (t, t) //~ use of moved value: `t`\n+}\n+\n+fn main() {}"}, {"sha": "c25981e6f80634cc73dedb1d7996f1b9d65fe932", "filename": "src/test/ui/moves/use_of_moved_value_clone_suggestions.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f0a16b856011c8e63fac98fd6c127c2a0bbd532e/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_clone_suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0a16b856011c8e63fac98fd6c127c2a0bbd532e/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_clone_suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_clone_suggestions.stderr?ref=f0a16b856011c8e63fac98fd6c127c2a0bbd532e", "patch": "@@ -0,0 +1,13 @@\n+error[E0382]: use of moved value: `t`\n+  --> $DIR/use_of_moved_value_clone_suggestions.rs:3:9\n+   |\n+LL | fn duplicate_rc<T>(t: std::rc::Rc<T>) -> (std::rc::Rc<T>, std::rc::Rc<T>) {\n+   |                    - move occurs because `t` has type `Rc<T>`, which does not implement the `Copy` trait\n+LL |     (t, t)\n+   |      -  ^ value used here after move\n+   |      |\n+   |      value moved here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "d31046c77006e1c68dfb8bf9d20edb08370fa996", "filename": "src/test/ui/moves/use_of_moved_value_copy_suggestions.fixed", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/f0a16b856011c8e63fac98fd6c127c2a0bbd532e/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f0a16b856011c8e63fac98fd6c127c2a0bbd532e/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.fixed?ref=f0a16b856011c8e63fac98fd6c127c2a0bbd532e", "patch": "@@ -0,0 +1,72 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+fn duplicate_t<T: Copy>(t: T) -> (T, T) {\n+    //~^ HELP consider restricting type parameter `T`\n+    (t, t) //~ use of moved value: `t`\n+}\n+\n+fn duplicate_opt<T: Copy>(t: Option<T>) -> (Option<T>, Option<T>) {\n+    //~^ HELP consider restricting type parameter `T`\n+    (t, t) //~ use of moved value: `t`\n+}\n+\n+fn duplicate_tup1<T: Copy>(t: (T,)) -> ((T,), (T,)) {\n+    //~^ HELP consider restricting type parameter `T`\n+    (t, t) //~ use of moved value: `t`\n+}\n+\n+fn duplicate_tup2<A: Copy, B: Copy>(t: (A, B)) -> ((A, B), (A, B)) {\n+    //~^ HELP consider restricting type parameters\n+    (t, t) //~ use of moved value: `t`\n+}\n+\n+fn duplicate_custom<T: Trait + Copy>(t: S<T>) -> (S<T>, S<T>) {\n+    //~^ HELP consider restricting type parameter `T`\n+    (t, t) //~ use of moved value: `t`\n+}\n+\n+struct S<T>(T);\n+trait Trait {}\n+impl<T: Trait + Clone> Clone for S<T> {\n+    fn clone(&self) -> Self {\n+        Self(self.0.clone())\n+    }\n+}\n+impl<T: Trait + Copy> Copy for S<T> {}\n+\n+trait A {}\n+trait B {}\n+\n+// Test where bounds are added with different bound placements\n+fn duplicate_custom_1<T: Trait + Copy>(t: S<T>) -> (S<T>, S<T>) where {\n+    //~^ HELP consider restricting type parameter `T`\n+    (t, t) //~ use of moved value: `t`\n+}\n+\n+fn duplicate_custom_2<T>(t: S<T>) -> (S<T>, S<T>)\n+where\n+    T: A + Trait + Copy,\n+    //~^ HELP consider further restricting this bound\n+{\n+    (t, t) //~ use of moved value: `t`\n+}\n+\n+fn duplicate_custom_3<T>(t: S<T>) -> (S<T>, S<T>)\n+where\n+    T: A,\n+    T: B, T: Trait, T: Copy\n+    //~^ HELP consider further restricting type parameter `T`\n+{\n+    (t, t) //~ use of moved value: `t`\n+}\n+\n+fn duplicate_custom_4<T: A>(t: S<T>) -> (S<T>, S<T>)\n+where\n+    T: B + Trait + Copy,\n+    //~^ HELP consider further restricting this bound\n+{\n+    (t, t) //~ use of moved value: `t`\n+}\n+\n+fn main() {}"}, {"sha": "7cc5189fac017effed958a966bf67aa7c09d1a3e", "filename": "src/test/ui/moves/use_of_moved_value_copy_suggestions.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f0a16b856011c8e63fac98fd6c127c2a0bbd532e/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a16b856011c8e63fac98fd6c127c2a0bbd532e/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.rs?ref=f0a16b856011c8e63fac98fd6c127c2a0bbd532e", "patch": "@@ -1,20 +1,28 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n fn duplicate_t<T>(t: T) -> (T, T) {\n+    //~^ HELP consider restricting type parameter `T`\n     (t, t) //~ use of moved value: `t`\n }\n \n fn duplicate_opt<T>(t: Option<T>) -> (Option<T>, Option<T>) {\n+    //~^ HELP consider restricting type parameter `T`\n     (t, t) //~ use of moved value: `t`\n }\n \n fn duplicate_tup1<T>(t: (T,)) -> ((T,), (T,)) {\n+    //~^ HELP consider restricting type parameter `T`\n     (t, t) //~ use of moved value: `t`\n }\n \n fn duplicate_tup2<A, B>(t: (A, B)) -> ((A, B), (A, B)) {\n+    //~^ HELP consider restricting type parameters\n     (t, t) //~ use of moved value: `t`\n }\n \n fn duplicate_custom<T>(t: S<T>) -> (S<T>, S<T>) {\n+    //~^ HELP consider restricting type parameter `T`\n     (t, t) //~ use of moved value: `t`\n }\n \n@@ -32,12 +40,14 @@ trait B {}\n \n // Test where bounds are added with different bound placements\n fn duplicate_custom_1<T>(t: S<T>) -> (S<T>, S<T>) where {\n+    //~^ HELP consider restricting type parameter `T`\n     (t, t) //~ use of moved value: `t`\n }\n \n fn duplicate_custom_2<T>(t: S<T>) -> (S<T>, S<T>)\n where\n     T: A,\n+    //~^ HELP consider further restricting this bound\n {\n     (t, t) //~ use of moved value: `t`\n }\n@@ -46,20 +56,17 @@ fn duplicate_custom_3<T>(t: S<T>) -> (S<T>, S<T>)\n where\n     T: A,\n     T: B,\n+    //~^ HELP consider further restricting type parameter `T`\n {\n     (t, t) //~ use of moved value: `t`\n }\n \n fn duplicate_custom_4<T: A>(t: S<T>) -> (S<T>, S<T>)\n where\n     T: B,\n+    //~^ HELP consider further restricting this bound\n {\n     (t, t) //~ use of moved value: `t`\n }\n \n-// `Rc` is not ever `Copy`, we should not suggest adding `T: Copy` constraint\n-fn duplicate_rc<T>(t: std::rc::Rc<T>) -> (std::rc::Rc<T>, std::rc::Rc<T>) {\n-    (t, t) //~ use of moved value: `t`\n-}\n-\n fn main() {}"}, {"sha": "8e72697ca30bbafce9810285c8b6ad80c5f5f93b", "filename": "src/test/ui/moves/use_of_moved_value_copy_suggestions.stderr", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f0a16b856011c8e63fac98fd6c127c2a0bbd532e/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0a16b856011c8e63fac98fd6c127c2a0bbd532e/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.stderr?ref=f0a16b856011c8e63fac98fd6c127c2a0bbd532e", "patch": "@@ -1,8 +1,9 @@\n error[E0382]: use of moved value: `t`\n-  --> $DIR/use_of_moved_value_copy_suggestions.rs:2:9\n+  --> $DIR/use_of_moved_value_copy_suggestions.rs:6:9\n    |\n LL | fn duplicate_t<T>(t: T) -> (T, T) {\n    |                   - move occurs because `t` has type `T`, which does not implement the `Copy` trait\n+LL |\n LL |     (t, t)\n    |      -  ^ value used here after move\n    |      |\n@@ -14,10 +15,11 @@ LL | fn duplicate_t<T: Copy>(t: T) -> (T, T) {\n    |                 ++++++\n \n error[E0382]: use of moved value: `t`\n-  --> $DIR/use_of_moved_value_copy_suggestions.rs:6:9\n+  --> $DIR/use_of_moved_value_copy_suggestions.rs:11:9\n    |\n LL | fn duplicate_opt<T>(t: Option<T>) -> (Option<T>, Option<T>) {\n    |                     - move occurs because `t` has type `Option<T>`, which does not implement the `Copy` trait\n+LL |\n LL |     (t, t)\n    |      -  ^ value used here after move\n    |      |\n@@ -29,10 +31,11 @@ LL | fn duplicate_opt<T: Copy>(t: Option<T>) -> (Option<T>, Option<T>) {\n    |                   ++++++\n \n error[E0382]: use of moved value: `t`\n-  --> $DIR/use_of_moved_value_copy_suggestions.rs:10:9\n+  --> $DIR/use_of_moved_value_copy_suggestions.rs:16:9\n    |\n LL | fn duplicate_tup1<T>(t: (T,)) -> ((T,), (T,)) {\n    |                      - move occurs because `t` has type `(T,)`, which does not implement the `Copy` trait\n+LL |\n LL |     (t, t)\n    |      -  ^ value used here after move\n    |      |\n@@ -44,10 +47,11 @@ LL | fn duplicate_tup1<T: Copy>(t: (T,)) -> ((T,), (T,)) {\n    |                    ++++++\n \n error[E0382]: use of moved value: `t`\n-  --> $DIR/use_of_moved_value_copy_suggestions.rs:14:9\n+  --> $DIR/use_of_moved_value_copy_suggestions.rs:21:9\n    |\n LL | fn duplicate_tup2<A, B>(t: (A, B)) -> ((A, B), (A, B)) {\n    |                         - move occurs because `t` has type `(A, B)`, which does not implement the `Copy` trait\n+LL |\n LL |     (t, t)\n    |      -  ^ value used here after move\n    |      |\n@@ -59,10 +63,11 @@ LL | fn duplicate_tup2<A: Copy, B: Copy>(t: (A, B)) -> ((A, B), (A, B)) {\n    |                    ++++++   ++++++\n \n error[E0382]: use of moved value: `t`\n-  --> $DIR/use_of_moved_value_copy_suggestions.rs:18:9\n+  --> $DIR/use_of_moved_value_copy_suggestions.rs:26:9\n    |\n LL | fn duplicate_custom<T>(t: S<T>) -> (S<T>, S<T>) {\n    |                        - move occurs because `t` has type `S<T>`, which does not implement the `Copy` trait\n+LL |\n LL |     (t, t)\n    |      -  ^ value used here after move\n    |      |\n@@ -74,10 +79,11 @@ LL | fn duplicate_custom<T: Trait + Copy>(t: S<T>) -> (S<T>, S<T>) {\n    |                      ++++++++++++++\n \n error[E0382]: use of moved value: `t`\n-  --> $DIR/use_of_moved_value_copy_suggestions.rs:35:9\n+  --> $DIR/use_of_moved_value_copy_suggestions.rs:44:9\n    |\n LL | fn duplicate_custom_1<T>(t: S<T>) -> (S<T>, S<T>) where {\n    |                          - move occurs because `t` has type `S<T>`, which does not implement the `Copy` trait\n+LL |\n LL |     (t, t)\n    |      -  ^ value used here after move\n    |      |\n@@ -89,7 +95,7 @@ LL | fn duplicate_custom_1<T: Trait + Copy>(t: S<T>) -> (S<T>, S<T>) where {\n    |                        ++++++++++++++\n \n error[E0382]: use of moved value: `t`\n-  --> $DIR/use_of_moved_value_copy_suggestions.rs:42:9\n+  --> $DIR/use_of_moved_value_copy_suggestions.rs:52:9\n    |\n LL | fn duplicate_custom_2<T>(t: S<T>) -> (S<T>, S<T>)\n    |                          - move occurs because `t` has type `S<T>`, which does not implement the `Copy` trait\n@@ -105,7 +111,7 @@ LL |     T: A + Trait + Copy,\n    |          ++++++++++++++\n \n error[E0382]: use of moved value: `t`\n-  --> $DIR/use_of_moved_value_copy_suggestions.rs:50:9\n+  --> $DIR/use_of_moved_value_copy_suggestions.rs:61:9\n    |\n LL | fn duplicate_custom_3<T>(t: S<T>) -> (S<T>, S<T>)\n    |                          - move occurs because `t` has type `S<T>`, which does not implement the `Copy` trait\n@@ -121,7 +127,7 @@ LL |     T: B, T: Trait, T: Copy\n    |         ~~~~~~~~~~~~~~~~~~~\n \n error[E0382]: use of moved value: `t`\n-  --> $DIR/use_of_moved_value_copy_suggestions.rs:57:9\n+  --> $DIR/use_of_moved_value_copy_suggestions.rs:69:9\n    |\n LL | fn duplicate_custom_4<T: A>(t: S<T>) -> (S<T>, S<T>)\n    |                             - move occurs because `t` has type `S<T>`, which does not implement the `Copy` trait\n@@ -136,16 +142,6 @@ help: consider further restricting this bound\n LL |     T: B + Trait + Copy,\n    |          ++++++++++++++\n \n-error[E0382]: use of moved value: `t`\n-  --> $DIR/use_of_moved_value_copy_suggestions.rs:62:9\n-   |\n-LL | fn duplicate_rc<T>(t: std::rc::Rc<T>) -> (std::rc::Rc<T>, std::rc::Rc<T>) {\n-   |                    - move occurs because `t` has type `Rc<T>`, which does not implement the `Copy` trait\n-LL |     (t, t)\n-   |      -  ^ value used here after move\n-   |      |\n-   |      value moved here\n-\n-error: aborting due to 10 previous errors\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0382`."}]}