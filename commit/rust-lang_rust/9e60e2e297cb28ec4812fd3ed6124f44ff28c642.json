{"sha": "9e60e2e297cb28ec4812fd3ed6124f44ff28c642", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNjBlMmUyOTdjYjI4ZWM0ODEyZmQzZWQ2MTI0ZjQ0ZmYyOGM2NDI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-11T11:46:40Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-12T02:21:04Z"}, "message": "std: convert str::replace to a method.", "tree": {"sha": "a02ba6fc7a9ddd8214a370a649d355a1b52d0c97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a02ba6fc7a9ddd8214a370a649d355a1b52d0c97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e60e2e297cb28ec4812fd3ed6124f44ff28c642", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e60e2e297cb28ec4812fd3ed6124f44ff28c642", "html_url": "https://github.com/rust-lang/rust/commit/9e60e2e297cb28ec4812fd3ed6124f44ff28c642", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12750c88931f707e63f2ec19396710bf70a39ae8", "url": "https://api.github.com/repos/rust-lang/rust/commits/12750c88931f707e63f2ec19396710bf70a39ae8", "html_url": "https://github.com/rust-lang/rust/commit/12750c88931f707e63f2ec19396710bf70a39ae8"}], "stats": {"total": 131, "additions": 64, "deletions": 67}, "files": [{"sha": "c92084781287a6655825ff64c9fed98778ea7516", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=9e60e2e297cb28ec4812fd3ed6124f44ff28c642", "patch": "@@ -171,8 +171,8 @@ fn run_pretty_test(config: &config, props: &TestProps, testfile: &Path) {\n     if props.pp_exact.is_some() {\n         // Now we have to care about line endings\n         let cr = ~\"\\r\";\n-        actual = str::replace(actual, cr, \"\");\n-        expected = str::replace(expected, cr, \"\");\n+        actual = actual.replace(cr, \"\");\n+        expected = expected.replace(cr, \"\");\n     }\n \n     compare_source(expected, actual);\n@@ -238,7 +238,7 @@ fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n     // do not optimize debuginfo tests\n     let mut config = match config.rustcflags {\n         Some(ref flags) => config {\n-            rustcflags: Some(str::replace(*flags, \"-O\", \"\")),\n+            rustcflags: Some(flags.replace(\"-O\", \"\")),\n             .. copy *config\n         },\n         None => copy *config"}, {"sha": "099b257380bc47a47817d21c51c600ac94090df4", "filename": "src/libextra/rope.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibextra%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibextra%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frope.rs?ref=9e60e2e297cb28ec4812fd3ed6124f44ff28c642", "patch": "@@ -564,7 +564,6 @@ pub mod node {\n     use rope::node;\n \n     use core::cast;\n-    use core::str;\n     use core::uint;\n     use core::vec;\n "}, {"sha": "1ef410252ab9378edf9928b549f966bd6c029cf4", "filename": "src/libextra/terminfo/searcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibextra%2Fterminfo%2Fsearcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibextra%2Fterminfo%2Fsearcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fsearcher.rs?ref=9e60e2e297cb28ec4812fd3ed6124f44ff28c642", "patch": "@@ -12,7 +12,7 @@\n /// Does not support hashed database, only filesystem!\n \n use core::prelude::*;\n-use core::{os};\n+use core::{os, str};\n use core::os::getenv;\n use core::io::{file_reader, Reader};\n use core::iterator::IteratorUtil;"}, {"sha": "4b7ab6fdfc101185beb9948b513e04e4fc7508cc", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=9e60e2e297cb28ec4812fd3ed6124f44ff28c642", "patch": "@@ -29,7 +29,6 @@ use core::hashmap::HashMap;\n use core::int;\n use core::io;\n use core::os;\n-use core::str;\n use core::vec;\n use extra::getopts::groups::{optopt, optmulti, optflag, optflagopt};\n use extra::getopts::{opt_present};\n@@ -595,7 +594,7 @@ pub fn build_session_options(binary: @~str,\n         let flags = vec::append(getopts::opt_strs(matches, level_short),\n                                 getopts::opt_strs(matches, level_name));\n         for flags.each |lint_name| {\n-            let lint_name = str::replace(*lint_name, \"-\", \"_\");\n+            let lint_name = lint_name.replace(\"-\", \"_\");\n             match lint_dict.find(&lint_name) {\n               None => {\n                 early_error(demitter, fmt!(\"unknown %s flag: %s\","}, {"sha": "733453be35944e2811812f8f873886299130ddeb", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=9e60e2e297cb28ec4812fd3ed6124f44ff28c642", "patch": "@@ -23,7 +23,6 @@ use core::i16;\n use core::i32;\n use core::i64;\n use core::i8;\n-use core::str;\n use core::u16;\n use core::u32;\n use core::u64;\n@@ -375,7 +374,7 @@ impl Context {\n                 fmt!(\"%s [-%c %s%s]\", msg, match level {\n                         warn => 'W', deny => 'D', forbid => 'F',\n                         allow => fail!()\n-                    }, str::replace(self.lint_to_str(lint), \"_\", \"-\"),\n+                    }, self.lint_to_str(lint).replace(\"_\", \"-\"),\n                     if src == Default { \" (default)\" } else { \"\" })\n             },\n             Node(src) => {"}, {"sha": "af10845181008cd1f779879eae2704a2d615125a", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=9e60e2e297cb28ec4812fd3ed6124f44ff28c642", "patch": "@@ -885,9 +885,9 @@ pub fn add_comment(bcx: block, text: &str) {\n     unsafe {\n         let ccx = bcx.ccx();\n         if ccx.sess.asm_comments() {\n-            let sanitized = str::replace(text, \"$\", \"\");\n+            let sanitized = text.replace(\"$\", \"\");\n             let comment_text = ~\"# \" +\n-                str::replace(sanitized, \"\\n\", \"\\n\\t# \");\n+                sanitized.replace(\"\\n\", \"\\n\\t# \");\n             let asm = str::as_c_str(comment_text, |c| {\n                 str::as_c_str(\"\", |e| {\n                     count_insn(bcx, \"inlineasm\");"}, {"sha": "ff19893daad9cd9f47f6de02abe32c3e8eeea5c2", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=9e60e2e297cb28ec4812fd3ed6124f44ff28c642", "patch": "@@ -209,7 +209,7 @@ Available lint options:\n     io::println(fmt!(\"    %s  %7.7s  %s\\n\",\n                      padded(max_key, \"----\"), \"-------\", \"-------\"));\n     for lint_dict.each |k, v| {\n-        let k = str::replace(*k, \"_\", \"-\");\n+        let k = k.replace(\"_\", \"-\");\n         io::println(fmt!(\"    %s  %7.7s  %s\",\n                          padded(max_key, k),\n                          match v.default {"}, {"sha": "c116ccd6986924550df8e5c5b6c73e33563e8a6c", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=9e60e2e297cb28ec4812fd3ed6124f44ff28c642", "patch": "@@ -108,7 +108,7 @@ fn first_sentence(s: ~str) -> Option<~str> {\n     let paras = paragraphs(s);\n     if !paras.is_empty() {\n         let first_para = paras.head();\n-        Some(str::replace(first_sentence_(*first_para), \"\\n\", \" \"))\n+        Some(first_sentence_(*first_para).replace(\"\\n\", \" \"))\n     } else {\n         None\n     }"}, {"sha": "ef07bdfca167b3192e6f452a64db5edc7b7c7b4e", "filename": "src/librustdoc/escape_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibrustdoc%2Fescape_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibrustdoc%2Fescape_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fescape_pass.rs?ref=9e60e2e297cb28ec4812fd3ed6124f44ff28c642", "patch": "@@ -20,7 +20,7 @@ pub fn mk_pass() -> Pass {\n }\n \n fn escape(s: &str) -> ~str {\n-    str::replace(s, \"\\\\\", \"\\\\\\\\\")\n+    s.replace(\"\\\\\", \"\\\\\\\\\")\n }\n \n #[test]"}, {"sha": "e7def3ebb9bb737c7de195499a66d24d085451d8", "filename": "src/librustdoc/markdown_index_pass.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_index_pass.rs?ref=9e60e2e297cb28ec4812fd3ed6124f44ff28c642", "patch": "@@ -128,33 +128,33 @@ pub fn pandoc_header_id(header: &str) -> ~str {\n     return header;\n \n     fn remove_formatting(s: &str) -> ~str {\n-        str::replace(s, \"`\", \"\")\n+        s.replace(\"`\", \"\")\n     }\n     fn remove_punctuation(s: &str) -> ~str {\n-        let s = str::replace(s, \"<\", \"\");\n-        let s = str::replace(s, \">\", \"\");\n-        let s = str::replace(s, \"[\", \"\");\n-        let s = str::replace(s, \"]\", \"\");\n-        let s = str::replace(s, \"(\", \"\");\n-        let s = str::replace(s, \")\", \"\");\n-        let s = str::replace(s, \"@~\", \"\");\n-        let s = str::replace(s, \"~\", \"\");\n-        let s = str::replace(s, \"/\", \"\");\n-        let s = str::replace(s, \":\", \"\");\n-        let s = str::replace(s, \"&\", \"\");\n-        let s = str::replace(s, \"^\", \"\");\n-        let s = str::replace(s, \",\", \"\");\n-        let s = str::replace(s, \"'\", \"\");\n-        let s = str::replace(s, \"+\", \"\");\n+        let s = s.replace(\"<\", \"\");\n+        let s = s.replace(\">\", \"\");\n+        let s = s.replace(\"[\", \"\");\n+        let s = s.replace(\"]\", \"\");\n+        let s = s.replace(\"(\", \"\");\n+        let s = s.replace(\")\", \"\");\n+        let s = s.replace(\"@~\", \"\");\n+        let s = s.replace(\"~\", \"\");\n+        let s = s.replace(\"/\", \"\");\n+        let s = s.replace(\":\", \"\");\n+        let s = s.replace(\"&\", \"\");\n+        let s = s.replace(\"^\", \"\");\n+        let s = s.replace(\",\", \"\");\n+        let s = s.replace(\"'\", \"\");\n+        let s = s.replace(\"+\", \"\");\n         return s;\n     }\n     fn replace_with_hyphens(s: &str) -> ~str {\n         // Collapse sequences of whitespace to a single dash\n         // XXX: Hacky implementation here that only covers\n         // one or two spaces.\n         let s = s.trim();\n-        let s = str::replace(s, \"  \", \"-\");\n-        let s = str::replace(s, \" \", \"-\");\n+        let s = s.replace(\"  \", \"-\");\n+        let s = s.replace(\" \", \"-\");\n         return s;\n     }\n     // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use"}, {"sha": "6f480d18770770e50ee27be4c8139ecb16c25fa1", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=9e60e2e297cb28ec4812fd3ed6124f44ff28c642", "patch": "@@ -114,7 +114,7 @@ fn make_title(page: doc::Page) -> ~str {\n         }\n     };\n     let title = markdown_pass::header_text(item);\n-    let title = str::replace(title, \"`\", \"\");\n+    let title = title.replace(\"`\", \"\");\n     return title;\n }\n "}, {"sha": "0216b032a6daa25b9f45fb5aeca96e305c0ddef8", "filename": "src/librustpkg/package_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibrustpkg%2Fpackage_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibrustpkg%2Fpackage_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpackage_path.rs?ref=9e60e2e297cb28ec4812fd3ed6124f44ff28c642", "patch": "@@ -32,7 +32,7 @@ pub fn normalize(p_: RemotePath) -> LocalPath {\n     match p.filestem() {\n         None => LocalPath(p),\n         Some(st) => {\n-            let replaced = str::replace(st, \"-\", \"_\");\n+            let replaced = st.replace(\"-\", \"_\");\n             if replaced != st {\n                 LocalPath(p.with_filestem(replaced))\n             }"}, {"sha": "0891f177433249fb5ac4f614af00bc0f4529ab8c", "filename": "src/libstd/str.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e60e2e297cb28ec4812fd3ed6124f44ff28c642/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=9e60e2e297cb28ec4812fd3ed6124f44ff28c642", "patch": "@@ -581,30 +581,6 @@ pub fn each_split_within<'a>(ss: &'a str,\n     return cont;\n }\n \n-/**\n- * Replace all occurrences of one string with another\n- *\n- * # Arguments\n- *\n- * * s - The string containing substrings to replace\n- * * from - The string to replace\n- * * to - The replacement string\n- *\n- * # Return value\n- *\n- * The original string with all occurances of `from` replaced with `to`\n- */\n-pub fn replace(s: &str, from: &str, to: &str) -> ~str {\n-    let mut (result, last_end) = (~\"\", 0);\n-    for s.matches_index_iter(from).advance |(start, end)| {\n-        result.push_str(unsafe{raw::slice_bytes(s, last_end, start)});\n-        result.push_str(to);\n-        last_end = end;\n-    }\n-    result.push_str(unsafe{raw::slice_bytes(s, last_end, s.len())});\n-    result\n-}\n-\n /*\n Section: Comparing strings\n */\n@@ -1349,6 +1325,7 @@ pub trait StrSlice<'self> {\n     fn trim_chars(&self, chars_to_trim: &[char]) -> &'self str;\n     fn trim_left_chars(&self, chars_to_trim: &[char]) -> &'self str;\n     fn trim_right_chars(&self, chars_to_trim: &[char]) -> &'self str;\n+    fn replace(&self, from: &str, to: &str) -> ~str;\n     fn to_owned(&self) -> ~str;\n     fn to_managed(&self) -> @str;\n     fn is_char_boundary(&self, index: uint) -> bool;\n@@ -1694,6 +1671,29 @@ impl<'self> StrSlice<'self> for &'self str {\n         }\n     }\n \n+    /**\n+     * Replace all occurrences of one string with another\n+     *\n+     * # Arguments\n+     *\n+     * * from - The string to replace\n+     * * to - The replacement string\n+     *\n+     * # Return value\n+     *\n+     * The original string with all occurances of `from` replaced with `to`\n+     */\n+    pub fn replace(&self, from: &str, to: &str) -> ~str {\n+        let mut (result, last_end) = (~\"\", 0);\n+        for self.matches_index_iter(from).advance |(start, end)| {\n+            result.push_str(unsafe{raw::slice_bytes(*self, last_end, start)});\n+            result.push_str(to);\n+            last_end = end;\n+        }\n+        result.push_str(unsafe{raw::slice_bytes(*self, last_end, self.len())});\n+        result\n+    }\n+\n     /// Copy a slice into a new unique str\n     #[inline]\n     fn to_owned(&self) -> ~str {\n@@ -2592,13 +2592,13 @@ mod tests {\n     #[test]\n     fn test_replace() {\n         let a = \"a\";\n-        assert_eq!(replace(\"\", a, \"b\"), ~\"\");\n-        assert_eq!(replace(\"a\", a, \"b\"), ~\"b\");\n-        assert_eq!(replace(\"ab\", a, \"b\"), ~\"bb\");\n+        assert_eq!(\"\".replace(a, \"b\"), ~\"\");\n+        assert_eq!(\"a\".replace(a, \"b\"), ~\"b\");\n+        assert_eq!(\"ab\".replace(a, \"b\"), ~\"bb\");\n         let test = \"test\";\n-        assert!(replace(\" test test \", test, \"toast\") ==\n+        assert!(\" test test \".replace(test, \"toast\") ==\n             ~\" toast toast \");\n-        assert_eq!(replace(\" test test \", test, \"\"), ~\"   \");\n+        assert_eq!(\" test test \".replace(test, \"\"), ~\"   \");\n     }\n \n     #[test]\n@@ -2608,7 +2608,7 @@ mod tests {\n \n         let a = ~\"\u0e1b\u0e23\u0e30\u0e40\";\n         let A = ~\"\u062f\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064a\u062a\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\";\n-        assert_eq!(replace(data, a, repl), A);\n+        assert_eq!(data.replace(a, repl), A);\n     }\n \n     #[test]\n@@ -2618,7 +2618,7 @@ mod tests {\n \n         let b = ~\"\u0e30\u0e40\";\n         let B = ~\"\u0e1b\u0e23\u062f\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064a\u062a\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\";\n-        assert_eq!(replace(data, b,   repl), B);\n+        assert_eq!(data.replace(b,   repl), B);\n     }\n \n     #[test]\n@@ -2628,7 +2628,7 @@ mod tests {\n \n         let c = ~\"\u4e2d\u534e\";\n         let C = ~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u062f\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064a\u062a\";\n-        assert_eq!(replace(data, c, repl), C);\n+        assert_eq!(data.replace(c, repl), C);\n     }\n \n     #[test]\n@@ -2637,7 +2637,7 @@ mod tests {\n         let repl = ~\"\u062f\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064a\u062a\";\n \n         let d = ~\"\u0e44\u0e17\u534e\";\n-        assert_eq!(replace(data, d, repl), data);\n+        assert_eq!(data.replace(d, repl), data);\n     }\n \n     #[test]"}]}