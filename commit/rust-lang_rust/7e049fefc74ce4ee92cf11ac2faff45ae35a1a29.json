{"sha": "7e049fefc74ce4ee92cf11ac2faff45ae35a1a29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMDQ5ZmVmYzc0Y2U0ZWU5MmNmMTFhYzJmYWZmNDVhZTM1YTFhMjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-28T06:26:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-28T06:26:47Z"}, "message": "auto merge of #14452 : alexcrichton/rust/issue-14438, r=huonw\n\nThis commit alters rustdoc to keep a hash set of known inlined items which is a\r\nwhitelist for generating URLs to.\r\n\r\nCloses #14438", "tree": {"sha": "6fdf40801f9fae68b3876d7a12f1ff369f4e31a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fdf40801f9fae68b3876d7a12f1ff369f4e31a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e049fefc74ce4ee92cf11ac2faff45ae35a1a29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e049fefc74ce4ee92cf11ac2faff45ae35a1a29", "html_url": "https://github.com/rust-lang/rust/commit/7e049fefc74ce4ee92cf11ac2faff45ae35a1a29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e049fefc74ce4ee92cf11ac2faff45ae35a1a29/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "html_url": "https://github.com/rust-lang/rust/commit/1dea8834cccc5a7c3b4f7a5e2872010d11ced628"}, {"sha": "4ef535ebd07c39f2cf27f3ead6a803f96bccc0e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ef535ebd07c39f2cf27f3ead6a803f96bccc0e4", "html_url": "https://github.com/rust-lang/rust/commit/4ef535ebd07c39f2cf27f3ead6a803f96bccc0e4"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "2f096346c9bef6b4de5a0140d3cdc03b01b7e0bf", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e049fefc74ce4ee92cf11ac2faff45ae35a1a29/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e049fefc74ce4ee92cf11ac2faff45ae35a1a29/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=7e049fefc74ce4ee92cf11ac2faff45ae35a1a29", "patch": "@@ -85,6 +85,7 @@ fn try_inline_def(cx: &core::DocContext,\n         _ => return None,\n     };\n     let fqn = csearch::get_item_path(tcx, did);\n+    cx.inlined.borrow_mut().get_mut_ref().insert(did);\n     ret.push(clean::Item {\n         source: clean::Span::empty(),\n         name: Some(fqn.last().unwrap().to_str().to_string()),"}, {"sha": "27e39e1235c67ff44d7dc91acd2b2fcf460107c5", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e049fefc74ce4ee92cf11ac2faff45ae35a1a29/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e049fefc74ce4ee92cf11ac2faff45ae35a1a29/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=7e049fefc74ce4ee92cf11ac2faff45ae35a1a29", "patch": "@@ -41,6 +41,7 @@ pub struct DocContext {\n     pub external_paths: ExternalPaths,\n     pub external_traits: RefCell<Option<HashMap<ast::DefId, clean::Trait>>>,\n     pub external_typarams: RefCell<Option<HashMap<ast::DefId, String>>>,\n+    pub inlined: RefCell<Option<HashSet<ast::DefId>>>,\n }\n \n impl DocContext {\n@@ -58,6 +59,7 @@ pub struct CrateAnalysis {\n     pub external_paths: ExternalPaths,\n     pub external_traits: RefCell<Option<HashMap<ast::DefId, clean::Trait>>>,\n     pub external_typarams: RefCell<Option<HashMap<ast::DefId, String>>>,\n+    pub inlined: RefCell<Option<HashSet<ast::DefId>>>,\n }\n \n /// Parses, resolves, and typechecks the given crate\n@@ -111,12 +113,14 @@ fn get_ast_and_resolve(cpath: &Path, libs: HashSet<Path>, cfgs: Vec<String>)\n         external_traits: RefCell::new(Some(HashMap::new())),\n         external_typarams: RefCell::new(Some(HashMap::new())),\n         external_paths: RefCell::new(Some(HashMap::new())),\n+        inlined: RefCell::new(Some(HashSet::new())),\n     }, CrateAnalysis {\n         exported_items: exported_items,\n         public_items: public_items,\n         external_paths: RefCell::new(None),\n         external_traits: RefCell::new(None),\n         external_typarams: RefCell::new(None),\n+        inlined: RefCell::new(None),\n     })\n }\n \n@@ -138,5 +142,7 @@ pub fn run_core(libs: HashSet<Path>, cfgs: Vec<String>, path: &Path)\n     *analysis.external_traits.borrow_mut() = map;\n     let map = ctxt.external_typarams.borrow_mut().take();\n     *analysis.external_typarams.borrow_mut() = map;\n+    let map = ctxt.inlined.borrow_mut().take();\n+    *analysis.inlined.borrow_mut() = map;\n     (krate, analysis)\n }"}, {"sha": "e3221177afe66684aa3f6401b91f1637a6966d6f", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e049fefc74ce4ee92cf11ac2faff45ae35a1a29/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e049fefc74ce4ee92cf11ac2faff45ae35a1a29/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=7e049fefc74ce4ee92cf11ac2faff45ae35a1a29", "patch": "@@ -150,7 +150,7 @@ fn resolved_path(w: &mut fmt::Formatter, did: ast::DefId, p: &clean::Path,\n                  print_all: bool) -> fmt::Result {\n     path(w, p, print_all,\n         |cache, loc| {\n-            if ast_util::is_local(did) || cache.paths.contains_key(&did) {\n+            if ast_util::is_local(did) || cache.inlined.contains(&did) {\n                 Some((\"../\".repeat(loc.len())).to_string())\n             } else {\n                 match *cache.extern_locations.get(&did.krate) {"}, {"sha": "f5c7352b9c2e6080aab7bf1bfa1e74ad26db2fd0", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e049fefc74ce4ee92cf11ac2faff45ae35a1a29/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e049fefc74ce4ee92cf11ac2faff45ae35a1a29/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=7e049fefc74ce4ee92cf11ac2faff45ae35a1a29", "patch": "@@ -159,6 +159,9 @@ pub struct Cache {\n     /// Cache of where external crate documentation can be found.\n     pub extern_locations: HashMap<ast::CrateNum, ExternalLocation>,\n \n+    /// Set of definitions which have been inlined from external crates.\n+    pub inlined: HashSet<ast::DefId>,\n+\n     // Private fields only used when initially crawling a crate to build a cache\n \n     stack: Vec<String>,\n@@ -287,6 +290,9 @@ pub fn run(mut krate: clean::Crate, dst: Path) -> io::IoResult<()> {\n         typarams: analysis.as_ref().map(|a| {\n             a.external_typarams.borrow_mut().take_unwrap()\n         }).unwrap_or(HashMap::new()),\n+        inlined: analysis.as_ref().map(|a| {\n+            a.inlined.borrow_mut().take_unwrap()\n+        }).unwrap_or(HashSet::new()),\n     };\n     cache.stack.push(krate.name.clone());\n     krate = cache.fold_crate(krate);"}, {"sha": "a7abbe0360f94d09e78741a8a3daf506bdcc0f50", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e049fefc74ce4ee92cf11ac2faff45ae35a1a29/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e049fefc74ce4ee92cf11ac2faff45ae35a1a29/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=7e049fefc74ce4ee92cf11ac2faff45ae35a1a29", "patch": "@@ -78,6 +78,7 @@ pub fn run(input: &str,\n         external_paths: RefCell::new(Some(HashMap::new())),\n         external_traits: RefCell::new(None),\n         external_typarams: RefCell::new(None),\n+        inlined: RefCell::new(None),\n     };\n     super::ctxtkey.replace(Some(ctx));\n "}]}