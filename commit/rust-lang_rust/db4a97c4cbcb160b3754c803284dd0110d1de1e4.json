{"sha": "db4a97c4cbcb160b3754c803284dd0110d1de1e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNGE5N2M0Y2JjYjE2MGIzNzU0YzgwMzI4NGRkMDExMGQxZGUxZTQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-19T14:03:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-19T14:03:22Z"}, "message": "Rollup merge of #82892 - jix:clarify-read-read, r=joshtriplett\n\nClarify docs for Read::read's return value\n\nRight now the docs for `Read::read`'s return value are phrased in a way that makes it easy for the reader to assume that the return value is never larger than the passed buffer. This PR clarifies that this is a requirement for implementations of the trait, but that callers have to expect a buggy yet safe implementation failing to do so, especially if unchecked accesses to the buffer are done afterwards.\n\nI fell into this trap recently, and when I noticed, I looked at the docs again and had the feeling that I might not have been the first one to miss this.\n\nThe same issue of trusting the return value of `read` was also present in std itself for about 2.5 years and only fixed recently, see #80895.\n\nI hope that clarifying the docs might help others to avoid this issue.", "tree": {"sha": "d974b9eab71f38c10712c0a481544361e16e3e91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d974b9eab71f38c10712c0a481544361e16e3e91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db4a97c4cbcb160b3754c803284dd0110d1de1e4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgVK8qCRBK7hj4Ov3rIwAAdHIIAAqoS0gqA5cZ74yF1KwltEEc\nB1TigQz3uMzRX1oKPVUO177IJSpHRji66c48ZTV1bj4teHKGl13Eg6dbfrRMqc0U\nWuDX/d7F9Rbg7BjD/KGS47TYDW3XqezIqPiCtkldsDnkvbMKboUmJVo0Z5GDUbzb\nm7dBelwWDO5GWO6xBJ12n7qZmDAFy9U/0asGcgPY5JRPgllXSi57mZIDQI+OoGuL\nj1k/6QFPZoeXax4np2+0qhmhjZxbytUSdYjYqEQb0jEjlaMPaZwcv56ItRkVm8n0\nQQd4R3Vng+55E+DJApROgK31bh4a09XlfHyShVoIQ4qCLZ+jf7zy1MwZUNzDg1Q=\n=Pz0/\n-----END PGP SIGNATURE-----\n", "payload": "tree d974b9eab71f38c10712c0a481544361e16e3e91\nparent 61372e1af6a100aedc203d0739073b42f8977e4e\nparent 9dfda62763a4462407bf76b916b1808aed57401a\nauthor Dylan DPC <dylan.dpc@gmail.com> 1616162602 +0100\ncommitter GitHub <noreply@github.com> 1616162602 +0100\n\nRollup merge of #82892 - jix:clarify-read-read, r=joshtriplett\n\nClarify docs for Read::read's return value\n\nRight now the docs for `Read::read`'s return value are phrased in a way that makes it easy for the reader to assume that the return value is never larger than the passed buffer. This PR clarifies that this is a requirement for implementations of the trait, but that callers have to expect a buggy yet safe implementation failing to do so, especially if unchecked accesses to the buffer are done afterwards.\n\nI fell into this trap recently, and when I noticed, I looked at the docs again and had the feeling that I might not have been the first one to miss this.\n\nThe same issue of trusting the return value of `read` was also present in std itself for about 2.5 years and only fixed recently, see #80895.\n\nI hope that clarifying the docs might help others to avoid this issue.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db4a97c4cbcb160b3754c803284dd0110d1de1e4", "html_url": "https://github.com/rust-lang/rust/commit/db4a97c4cbcb160b3754c803284dd0110d1de1e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db4a97c4cbcb160b3754c803284dd0110d1de1e4/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61372e1af6a100aedc203d0739073b42f8977e4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/61372e1af6a100aedc203d0739073b42f8977e4e", "html_url": "https://github.com/rust-lang/rust/commit/61372e1af6a100aedc203d0739073b42f8977e4e"}, {"sha": "9dfda62763a4462407bf76b916b1808aed57401a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dfda62763a4462407bf76b916b1808aed57401a", "html_url": "https://github.com/rust-lang/rust/commit/9dfda62763a4462407bf76b916b1808aed57401a"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "6abb300054af8c22516eb93200324a46941f606c", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/db4a97c4cbcb160b3754c803284dd0110d1de1e4/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4a97c4cbcb160b3754c803284dd0110d1de1e4/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=db4a97c4cbcb160b3754c803284dd0110d1de1e4", "patch": "@@ -514,8 +514,8 @@ pub trait Read {\n     /// waiting for data, but if an object needs to block for a read and cannot,\n     /// it will typically signal this via an [`Err`] return value.\n     ///\n-    /// If the return value of this method is [`Ok(n)`], then it must be\n-    /// guaranteed that `0 <= n <= buf.len()`. A nonzero `n` value indicates\n+    /// If the return value of this method is [`Ok(n)`], then implementations must\n+    /// guarantee that `0 <= n <= buf.len()`. A nonzero `n` value indicates\n     /// that the buffer `buf` has been filled in with `n` bytes of data from this\n     /// source. If `n` is `0`, then it can indicate one of two scenarios:\n     ///\n@@ -529,6 +529,11 @@ pub trait Read {\n     /// This may happen for example because fewer bytes are actually available right now\n     /// (e. g. being close to end-of-file) or because read() was interrupted by a signal.\n     ///\n+    /// As this trait is safe to implement, callers cannot rely on `n <= buf.len()` for safety.\n+    /// Extra care needs to be taken when `unsafe` functions are used to access the read bytes.\n+    /// Callers have to ensure that no unchecked out-of-bounds accesses are possible even if\n+    /// `n > buf.len()`.\n+    ///\n     /// No guarantees are provided about the contents of `buf` when this\n     /// function is called, implementations cannot rely on any property of the\n     /// contents of `buf` being true. It is recommended that *implementations*"}]}