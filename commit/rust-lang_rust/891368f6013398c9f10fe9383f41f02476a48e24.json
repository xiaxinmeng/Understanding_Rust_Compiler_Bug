{"sha": "891368f6013398c9f10fe9383f41f02476a48e24", "node_id": "C_kwDOAAsO6NoAKDg5MTM2OGY2MDEzMzk4YzlmMTBmZTkzODNmNDFmMDI0NzZhNDhlMjQ", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2022-02-02T00:27:16Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2022-02-02T03:44:22Z"}, "message": "Make rustc use `RUST_BACKTRACE=full` by default\n\nCompiler panics should be rare - when they do occur, we want the report\nfiled by the user to contain as much information as possible. This is\nespecially important when the panic is due to an incremental compilation\nbug, since we may not have enough information to reproduce it.\n\nThis PR sets `RUST_BACKTRACE=full` inside `rustc` if the user has not\nexplicitly set `RUST_BACKTRACE`. This is more verbose than\n`RUST_BACKTRACE=1`, but this may make it easier to debug incremental\ncompilation issues. Users who find this too verbose can still manually\nset `RUST_BACKTRACE` before invoking the compiler.\n\nThis only affects `rustc` (and any tool using `rustc_driver::install_ice_hook`).\nIt does *not* affect any user crates or the standard library -\nbacktraces will continue to be off by default in any application\n*compiled* by rustc.", "tree": {"sha": "5cb7bfbbea9d4315c450983addecbea0ddfa44d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cb7bfbbea9d4315c450983addecbea0ddfa44d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/891368f6013398c9f10fe9383f41f02476a48e24", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmH5/hYACgkQtAh+UQ6Y\nsWSBNxAAs6ulk0gyJUbL6a/XlKDM3ipRDim3YPre9E317R3RQolttb4CodoUtvET\n8fIx3cXt4S/PUULjHHrYudhlITyAVExC1/38Vjp5JnqewNPUWqJT3TiDe8RIV+a0\n80H4eSCNmvY4Obeyy6BK7fbOT4Ba7TrXids0pxVyK2J9rMGGqhUmqyoQaDUv1yew\nW5XmDorxQyogrOof9N/Cx9GZnZrsHsu+bfJ9xllQlgYrzk+Hi6qBsTrly9q0Pl16\nXzBngr0k0npVFUhYyCIiGxAp5ycXL4QaMSotYTLdPmkMhhrAw6nIpkioDAiroNk3\ndYfNDcTte5lKB6oFh/JDcwojdx6AnjniUNnopLbmyfRasAsHdGG5FXSPqWD/Tf2+\neqYIzo7j/NdNO5+f47seI5IiqNZMqnfXkVNzKEcwGQmyWahwSNknyKkx8Y4l2+yF\nFbhdvdAzGNsX3RkDrhpay+ppURtxq2OgMQUGDNUOOLIiUB1BsfTkkVEOzyTZeCY+\nPy9JkcVHDsI+87SlJFmf8WurI45eXfZLnNzF+xk2jkRjqvj3cAV4tgfBnwGRWKwN\nQxgKlHQWpwJdGwAcs7KAjqN26Si0tuC/s+22VVAh2Z2Ra41SbvG9EV6Qs9pFxNRA\nb99l1FUXMlnFM/wsCGAlYyTjliu+8x8SJnwE5PLaoH4tILnTaXs=\n=O8Jl\n-----END PGP SIGNATURE-----", "payload": "tree 5cb7bfbbea9d4315c450983addecbea0ddfa44d7\nparent 1ea4851715893ee3f365a8ef09d47165e9a7864f\nauthor Aaron Hill <aa1ronham@gmail.com> 1643761636 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1643773462 -0500\n\nMake rustc use `RUST_BACKTRACE=full` by default\n\nCompiler panics should be rare - when they do occur, we want the report\nfiled by the user to contain as much information as possible. This is\nespecially important when the panic is due to an incremental compilation\nbug, since we may not have enough information to reproduce it.\n\nThis PR sets `RUST_BACKTRACE=full` inside `rustc` if the user has not\nexplicitly set `RUST_BACKTRACE`. This is more verbose than\n`RUST_BACKTRACE=1`, but this may make it easier to debug incremental\ncompilation issues. Users who find this too verbose can still manually\nset `RUST_BACKTRACE` before invoking the compiler.\n\nThis only affects `rustc` (and any tool using `rustc_driver::install_ice_hook`).\nIt does *not* affect any user crates or the standard library -\nbacktraces will continue to be off by default in any application\n*compiled* by rustc.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/891368f6013398c9f10fe9383f41f02476a48e24", "html_url": "https://github.com/rust-lang/rust/commit/891368f6013398c9f10fe9383f41f02476a48e24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/891368f6013398c9f10fe9383f41f02476a48e24/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ea4851715893ee3f365a8ef09d47165e9a7864f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea4851715893ee3f365a8ef09d47165e9a7864f", "html_url": "https://github.com/rust-lang/rust/commit/1ea4851715893ee3f365a8ef09d47165e9a7864f"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "85de860ceaf9713b0ad805b0d82e6c81acc146eb", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/891368f6013398c9f10fe9383f41f02476a48e24/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/891368f6013398c9f10fe9383f41f02476a48e24/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=891368f6013398c9f10fe9383f41f02476a48e24", "patch": "@@ -1240,6 +1240,15 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n ///\n /// A custom rustc driver can skip calling this to set up a custom ICE hook.\n pub fn install_ice_hook() {\n+    // If the user has not explicitly overriden \"RUST_BACKTRACE\", then produce\n+    // full backtraces. When a compiler ICE happens, we want to gather\n+    // as much information as possible to present in the issue opened\n+    // by the user. Compiler developers and other rustc users can\n+    // opt in to less-verbose backtraces by manually setting \"RUST_BACKTRACE\"\n+    // (e.g. `RUST_BACKTRACE=1`)\n+    if std::env::var(\"RUST_BACKTRACE\").is_err() {\n+        std::env::set_var(\"RUST_BACKTRACE\", \"full\");\n+    }\n     SyncLazy::force(&DEFAULT_HOOK);\n }\n "}, {"sha": "fd86a3f9dfaff9c4e8fce6547870f2387e07238b", "filename": "src/test/ui/panics/default-backtrace-ice.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/891368f6013398c9f10fe9383f41f02476a48e24/src%2Ftest%2Fui%2Fpanics%2Fdefault-backtrace-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/891368f6013398c9f10fe9383f41f02476a48e24/src%2Ftest%2Fui%2Fpanics%2Fdefault-backtrace-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fdefault-backtrace-ice.rs?ref=891368f6013398c9f10fe9383f41f02476a48e24", "patch": "@@ -0,0 +1,9 @@\n+// unset-rustc-env:RUST_BACKTRACE\n+// compile-flags:-Z treat-err-as-bug=1\n+// error-pattern:stack backtrace:\n+// failure-status:101\n+// normalize-stderr-test \"note: .*\" -> \"\"\n+// normalize-stderr-test \"thread 'rustc' .*\" -> \"\"\n+// normalize-stderr-test \"  .*\\n\" -> \"\"\n+\n+fn main() { missing_ident; }"}, {"sha": "a0025d7e221ae1f35b764f596f68b6449976be92", "filename": "src/test/ui/panics/default-backtrace-ice.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/891368f6013398c9f10fe9383f41f02476a48e24/src%2Ftest%2Fui%2Fpanics%2Fdefault-backtrace-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/891368f6013398c9f10fe9383f41f02476a48e24/src%2Ftest%2Fui%2Fpanics%2Fdefault-backtrace-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fdefault-backtrace-ice.stderr?ref=891368f6013398c9f10fe9383f41f02476a48e24", "patch": "@@ -0,0 +1,18 @@\n+error[E0425]: cannot find value `missing_ident` in this scope\n+LL | fn main() { missing_ident; }\n+\n+\n+stack backtrace:\n+\n+error: internal compiler error: unexpected panic\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+query stack during panic:\n+end of query stack"}]}