{"sha": "d5eb43f246236b18646d9090ac2c4b6b04aee5b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZWI0M2YyNDYyMzZiMTg2NDZkOTA5MGFjMmM0YjZiMDRhZWU1YjM=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-04-25T15:09:20Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-04-25T15:30:10Z"}, "message": "Checks no repetition for an empty token", "tree": {"sha": "3865dfd1c8a99d7a11fe40117cb4e23a0cd12fe4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3865dfd1c8a99d7a11fe40117cb4e23a0cd12fe4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5eb43f246236b18646d9090ac2c4b6b04aee5b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5eb43f246236b18646d9090ac2c4b6b04aee5b3", "html_url": "https://github.com/rust-lang/rust/commit/d5eb43f246236b18646d9090ac2c4b6b04aee5b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5eb43f246236b18646d9090ac2c4b6b04aee5b3/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44e6c2cb54312e14b3c7bd9d64a9fa0547c17ad7", "url": "https://api.github.com/repos/rust-lang/rust/commits/44e6c2cb54312e14b3c7bd9d64a9fa0547c17ad7", "html_url": "https://github.com/rust-lang/rust/commit/44e6c2cb54312e14b3c7bd9d64a9fa0547c17ad7"}], "stats": {"total": 87, "additions": 75, "deletions": 12}, "files": [{"sha": "1a020398e9ea4c7917daad3fff46580d201fca89", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 39, "deletions": 11, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d5eb43f246236b18646d9090ac2c4b6b04aee5b3/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5eb43f246236b18646d9090ac2c4b6b04aee5b3/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=d5eb43f246236b18646d9090ac2c4b6b04aee5b3", "patch": "@@ -19,6 +19,7 @@ use crate::{\n #[derive(Debug, PartialEq, Eq)]\n pub enum ParseError {\n     Expected(String),\n+    RepetitionEmtpyTokenTree,\n }\n \n #[derive(Debug, PartialEq, Eq)]\n@@ -194,20 +195,46 @@ impl Rule {\n     }\n }\n \n+fn to_parse_error(e: ExpandError) -> ParseError {\n+    let msg = match e {\n+        ExpandError::InvalidRepeat => \"invalid repeat\".to_string(),\n+        _ => \"invalid macro definition\".to_string(),\n+    };\n+    ParseError::Expected(msg)\n+}\n+\n fn validate(pattern: &tt::Subtree) -> Result<(), ParseError> {\n     for op in parse_pattern(pattern) {\n-        let op = match op {\n-            Ok(it) => it,\n-            Err(e) => {\n-                let msg = match e {\n-                    ExpandError::InvalidRepeat => \"invalid repeat\".to_string(),\n-                    _ => \"invalid macro definition\".to_string(),\n-                };\n-                return Err(ParseError::Expected(msg));\n-            }\n-        };\n+        let op = op.map_err(to_parse_error)?;\n+\n         match op {\n-            Op::TokenTree(tt::TokenTree::Subtree(subtree)) | Op::Repeat { subtree, .. } => {\n+            Op::TokenTree(tt::TokenTree::Subtree(subtree)) => validate(subtree)?,\n+            Op::Repeat { subtree, separator, .. } => {\n+                // Checks that no repetition which could match an empty token\n+                // https://github.com/rust-lang/rust/blob/a58b1ed44f5e06976de2bdc4d7dc81c36a96934f/src/librustc_expand/mbe/macro_rules.rs#L558\n+\n+                if separator.is_none() {\n+                    if parse_pattern(subtree).all(|child_op| {\n+                        match child_op.map_err(to_parse_error) {\n+                            Ok(Op::Var { kind, .. }) => {\n+                                // vis is optional\n+                                if kind.map_or(false, |it| it == \"vis\") {\n+                                    return true;\n+                                }\n+                            }\n+                            Ok(Op::Repeat { kind, .. }) => {\n+                                return matches!(\n+                                    kind,\n+                                    parser::RepeatKind::ZeroOrMore | parser::RepeatKind::ZeroOrOne\n+                                )\n+                            }\n+                            _ => {}\n+                        }\n+                        false\n+                    }) {\n+                        return Err(ParseError::RepetitionEmtpyTokenTree);\n+                    }\n+                }\n                 validate(subtree)?\n             }\n             _ => (),\n@@ -216,6 +243,7 @@ fn validate(pattern: &tt::Subtree) -> Result<(), ParseError> {\n     Ok(())\n }\n \n+#[derive(Debug)]\n pub struct ExpandResult<T>(pub T, pub Option<ExpandError>);\n \n impl<T> ExpandResult<T> {"}, {"sha": "6b139fb12cac43b3cbd06371a4a56716c0e5d282", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d5eb43f246236b18646d9090ac2c4b6b04aee5b3/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5eb43f246236b18646d9090ac2c4b6b04aee5b3/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=d5eb43f246236b18646d9090ac2c4b6b04aee5b3", "patch": "@@ -1657,7 +1657,7 @@ impl MacroFixture {\n     }\n }\n \n-pub(crate) fn parse_macro(ra_fixture: &str) -> MacroFixture {\n+fn parse_macro_to_tt(ra_fixture: &str) -> tt::Subtree {\n     let source_file = ast::SourceFile::parse(ra_fixture).ok().unwrap();\n     let macro_definition =\n         source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n@@ -1671,10 +1671,24 @@ pub(crate) fn parse_macro(ra_fixture: &str) -> MacroFixture {\n     .0;\n     assert_eq!(definition_tt, parsed);\n \n+    definition_tt\n+}\n+\n+pub(crate) fn parse_macro(ra_fixture: &str) -> MacroFixture {\n+    let definition_tt = parse_macro_to_tt(ra_fixture);\n     let rules = MacroRules::parse(&definition_tt).unwrap();\n     MacroFixture { rules }\n }\n \n+pub(crate) fn parse_macro_error(ra_fixture: &str) -> ParseError {\n+    let definition_tt = parse_macro_to_tt(ra_fixture);\n+\n+    match MacroRules::parse(&definition_tt) {\n+        Ok(_) => panic!(\"Expect error\"),\n+        Err(err) => err,\n+    }\n+}\n+\n pub(crate) fn parse_to_token_tree_by_syntax(ra_fixture: &str) -> tt::Subtree {\n     let source_file = ast::SourceFile::parse(ra_fixture).ok().unwrap();\n     let tt = syntax_node_to_token_tree(source_file.syntax()).unwrap().0;\n@@ -1840,6 +1854,27 @@ fn test_no_space_after_semi_colon() {\n     );\n }\n \n+// https://github.com/rust-lang/rust/blob/master/src/test/ui/issues/issue-57597.rs\n+#[test]\n+fn test_rustc_issue_57597() {\n+    fn test_error(fixture: &str) {\n+        assert_eq!(parse_macro_error(fixture), ParseError::RepetitionEmtpyTokenTree);\n+    }\n+\n+    test_error(\"macro_rules! foo { ($($($i:ident)?)+) => {}; }\");\n+    test_error(\"macro_rules! foo { ($($($i:ident)?)*) => {}; }\");\n+    test_error(\"macro_rules! foo { ($($($i:ident)?)?) => {}; }\");\n+    test_error(\"macro_rules! foo { ($($($($i:ident)?)?)?) => {}; }\");\n+    test_error(\"macro_rules! foo { ($($($($i:ident)*)?)?) => {}; }\");\n+    test_error(\"macro_rules! foo { ($($($($i:ident)?)*)?) => {}; }\");\n+    test_error(\"macro_rules! foo { ($($($($i:ident)?)?)*) => {}; }\");\n+    test_error(\"macro_rules! foo { ($($($($i:ident)*)*)?) => {}; }\");\n+    test_error(\"macro_rules! foo { ($($($($i:ident)?)*)*) => {}; }\");\n+    test_error(\"macro_rules! foo { ($($($($i:ident)?)*)+) => {}; }\");\n+    test_error(\"macro_rules! foo { ($($($($i:ident)+)?)*) => {}; }\");\n+    test_error(\"macro_rules! foo { ($($($($i:ident)+)*)?) => {}; }\");\n+}\n+\n #[test]\n fn test_expand_bad_literal() {\n     parse_macro("}]}