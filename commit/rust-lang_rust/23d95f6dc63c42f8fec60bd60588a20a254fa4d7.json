{"sha": "23d95f6dc63c42f8fec60bd60588a20a254fa4d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZDk1ZjZkYzYzYzQyZjhmZWM2MGJkNjA1ODhhMjBhMjU0ZmE0ZDc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-11-15T22:04:01Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-12-03T23:17:37Z"}, "message": "Make trait lifetime parameters early bound in static fn type.  This is related\nto #5121.\n\nFixes #10391.", "tree": {"sha": "3146f49ed62f43e8578c46d226a9c7b167cbfaf8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3146f49ed62f43e8578c46d226a9c7b167cbfaf8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23d95f6dc63c42f8fec60bd60588a20a254fa4d7", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23d95f6dc63c42f8fec60bd60588a20a254fa4d7", "html_url": "https://github.com/rust-lang/rust/commit/23d95f6dc63c42f8fec60bd60588a20a254fa4d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23d95f6dc63c42f8fec60bd60588a20a254fa4d7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69186efc199d48afca9427e448363212b0a59454", "url": "https://api.github.com/repos/rust-lang/rust/commits/69186efc199d48afca9427e448363212b0a59454", "html_url": "https://github.com/rust-lang/rust/commit/69186efc199d48afca9427e448363212b0a59454"}], "stats": {"total": 76, "additions": 64, "deletions": 12}, "files": [{"sha": "4a2ddf5f0f229dd0a20eb13f6ecbe14a770bc0ac", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d95f6dc63c42f8fec60bd60588a20a254fa4d7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d95f6dc63c42f8fec60bd60588a20a254fa4d7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=23d95f6dc63c42f8fec60bd60588a20a254fa4d7", "patch": "@@ -94,7 +94,6 @@ fn lookup_vtables(vcx: &VtableContext,\n            location_info,\n            type_param_defs.repr(vcx.tcx()),\n            substs.repr(vcx.tcx()));\n-    let _i = indenter();\n \n     // We do this backwards for reasons discussed above.\n     assert_eq!(substs.tps.len(), type_param_defs.len());"}, {"sha": "343808c2fa7afff90a4a8583b9c4bbf25354e51a", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/23d95f6dc63c42f8fec60bd60588a20a254fa4d7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d95f6dc63c42f8fec60bd60588a20a254fa4d7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=23d95f6dc63c42f8fec60bd60588a20a254fa4d7", "patch": "@@ -236,21 +236,31 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt,\n                              trait_ty_generics: &ty::Generics) {\n         // If declaration is\n         //\n-        //     trait<'a,'b,'c,A,B,C> {\n-        //        fn foo<'d,'e,'f,D,E,F>(...) -> Self;\n+        //     trait Trait<'a,'b,'c,a,b,c> {\n+        //        fn foo<'d,'e,'f,d,e,f>(...) -> Self;\n         //     }\n         //\n         // and we will create a function like\n         //\n-        //     fn foo<'a,'b,'c,'d,'e,'f,A',B',C',D',E',F',G'>(...) -> D' {}\n+        //     fn foo<'a,'b,'c,   // First the lifetime params from trait\n+        //            'd,'e,'f,   // Then lifetime params from `foo()`\n+        //            a,b,c,      // Then type params from trait\n+        //            D:Trait<'a,'b,'c,a,b,c>, // Then this sucker\n+        //            E,F,G       // Then type params from `foo()`, offset by 1\n+        //           >(...) -> D' {}\n         //\n         // Note that `Self` is replaced with an explicit type\n-        // parameter D' that is sandwiched in between the trait params\n+        // parameter D that is sandwiched in between the trait params\n         // and the method params, and thus the indices of the method\n         // type parameters are offset by 1 (that is, the method\n-        // parameters are mapped from D, E, F to E', F', and G').  The\n+        // parameters are mapped from d, e, f to E, F, and G).  The\n         // choice of this ordering is somewhat arbitrary.\n         //\n+        // Note also that the bound for `D` is `Trait<'a,'b,'c,a,b,c>`.\n+        // This implies that the lifetime parameters that were inherited\n+        // from the trait (i.e., `'a`, `'b`, and `'c`) all must be early\n+        // bound, since they appear in a trait bound.\n+        //\n         // Also, this system is rather a hack that should be replaced\n         // with a more uniform treatment of Self (which is partly\n         // underway).\n@@ -280,13 +290,17 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt,\n         });\n \n         // Convert the regions 'a, 'b, 'c defined on the trait into\n-        // bound regions on the fn.\n-        let rps_from_trait = trait_ty_generics.region_param_defs.iter().map(|d| {\n-            ty::ReLateBound(m.fty.sig.binder_id,\n-                            ty::BrNamed(d.def_id, d.ident))\n-        }).collect();\n+        // bound regions on the fn. Note that because these appear in the\n+        // bound for `Self` they must be early bound.\n+        let new_early_region_param_defs = trait_ty_generics.region_param_defs;\n+        let rps_from_trait =\n+            trait_ty_generics.region_param_defs.iter().\n+            enumerate().\n+            map(|(index,d)| ty::ReEarlyBound(d.def_id.node, index, d.ident)).\n+            collect();\n \n         // build up the substitution from\n+        //     'a,'b,'c => 'a,'b,'c\n         //     A,B,C => A',B',C'\n         //     Self => D'\n         //     D,E,F => E',F',G'\n@@ -336,7 +350,7 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt,\n                           ty_param_bounds_and_ty {\n                               generics: ty::Generics {\n                                   type_param_defs: @new_type_param_defs,\n-                                  region_param_defs: @[], // fn items\n+                                  region_param_defs: new_early_region_param_defs\n                               },\n                               ty: ty\n                           });"}, {"sha": "5438758f4b9ff9eb6eec6405dac55e0002efbf48", "filename": "src/test/run-pass/regions-early-bound-lifetime-in-assoc-fn.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/23d95f6dc63c42f8fec60bd60588a20a254fa4d7/src%2Ftest%2Frun-pass%2Fregions-early-bound-lifetime-in-assoc-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d95f6dc63c42f8fec60bd60588a20a254fa4d7/src%2Ftest%2Frun-pass%2Fregions-early-bound-lifetime-in-assoc-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-lifetime-in-assoc-fn.rs?ref=23d95f6dc63c42f8fec60bd60588a20a254fa4d7", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to compile calls to associated fns like\n+// `decode()` where the bound on the `Self` parameter references a\n+// lifetime parameter of the trait. This example indicates why trait\n+// lifetime parameters must be early bound in the type of the\n+// associated item.\n+\n+pub enum Value<'v> {\n+    A(&'v str),\n+    B,\n+}\n+\n+pub trait Decoder<'v> {\n+    fn read(&mut self) -> Value<'v>;\n+}\n+\n+pub trait Decodable<'v, D: Decoder<'v>> {\n+    fn decode(d: &mut D) -> Self;\n+}\n+\n+impl<'v, D: Decoder<'v>> Decodable<'v, D> for () {\n+    fn decode(d: &mut D) -> () {\n+        match d.read() {\n+            A(..) => (),\n+            B => Decodable::decode(d),\n+        }\n+    }\n+}\n+\n+fn main() { }"}]}