{"sha": "a62176988161bad4f4dc21f99e9c1f2a5060b0a7", "node_id": "C_kwDOAAsO6NoAKGE2MjE3Njk4ODE2MWJhZDRmNGRjMjFmOTllOWMxZjJhNTA2MGIwYTc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-09T10:21:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-09T10:21:58Z"}, "message": "Rollup merge of #107752 - riverar:rafael/gnu_dlltool_temp_prefix, r=petrochenkov\n\nSpecify dlltool prefix when generating import libs\n\nRef: https://github.com/rust-lang/rust/pull/106610#issuecomment-1418221274\n\ntl;dr: This PR adds an explicit dlltool temporary filename prefix. The prefix resolves a race condition by ensuring dlltool temporary files are siloed in an appropriate/unique Rust temporary directory.\n\n---\n\nGNU dlltool, as part of its import library generation logic, uses a bunch of temporary files on disk. In the interest of deterministic build runs, dlltool supports deterministic temporary filenames. The temporary filename prefix is automatically generated internally or can be explicitly specified via a `--temp-prefix` argument.\n\nGNU dlltool **2.38** (that ships with `x86_64-12.2.0-release-posix-seh-rt_v10-rev0` [installed during CI](https://github.com/rust-lang/rust/blob/master/src/ci/scripts/install-mingw.sh)) generates a prefix based on the target library name ([source](https://sourceware.org/git/?p=binutils-gdb.git;a=blob;f=binutils/dlltool.c;h=d95bf3f5470b999fa3b30bc887791859f48d81d1;hb=20756b0fbe065a84710aa38f2457563b57546440#l3992)). The tool writes to files such as `target_dll_h.s` and `target_dll_s00203.o` in the current working directory.\n\nThis presents a problem when multiple instances of rustc_codegen_llvm are running to generate an import library (as part of the raw_dylib feature) for the same target library (e.g. kernel32) ([source](https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_llvm/src/back/archive.rs#L185-L196)). That is, dlltool instances race and may overwrite or delete files belonging to each other.\n\nGNU dlltool **2.39**+ (not used in Rust CI) generates a prefix based on the output library path ([source](https://sourceware.org/git/?p=binutils-gdb.git;a=blob;f=binutils/dlltool.c;h=e2af20847009945b4c61a6fef08268fbb4429715;hb=b51c2fec1da205ea3e7354cbb3e253018d64873c#l3992)). The tool, when invoked as part of rustc_codegen_llvm, writes to files at paths such as `C_Users_Foo_AppData_Local_Temp_rustcOFqhXZ_target_lib_h.s`. (The output library path is normalized and non-alphanumeric characters are replaced with underscores.)", "tree": {"sha": "00020d192dac02fe18c3160f29755991a6e8b5b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00020d192dac02fe18c3160f29755991a6e8b5b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a62176988161bad4f4dc21f99e9c1f2a5060b0a7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj5MlGCRBK7hj4Ov3rIwAABZcIAEWNPGrWqAGPPrb/akJ2RXW/\nfTA/hIFkWWFBbazOdZJC+LxvOmyNg6x1OKTeBLtEkaDj6zMZgt6g29X05PzwnLlt\n2Q0hvfKIfUYbqIxgvtlEvCs2141SIpX2DTHTR+n47VBqxgYuZeL+PfZ+DWBL+iMV\nejjuL03fwKZBih6PFW7LS804INWpzuOM5e3/MhUrKiKtTR8+AiNdB85/jgFVRp2g\n2vPRNIzgXF/5Ryy5S25EOmcYp+Pb0HTxI1P4I8rFEkI3WCgMRYtGyzoJegXWM9iC\nkwol4ecaPtI7JAK29Nh82TZzd1ro7QA/O0PFCKHXGNUFJwYv7t1TqcqIvbhdcR0=\n=wEhb\n-----END PGP SIGNATURE-----\n", "payload": "tree 00020d192dac02fe18c3160f29755991a6e8b5b3\nparent 3b9543c89d1909bae143bfe9a87d3248d1526cf2\nparent c825e08571136deb5643ccd42bddf76b799ea93b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1675938118 +0100\ncommitter GitHub <noreply@github.com> 1675938118 +0100\n\nRollup merge of #107752 - riverar:rafael/gnu_dlltool_temp_prefix, r=petrochenkov\n\nSpecify dlltool prefix when generating import libs\n\nRef: https://github.com/rust-lang/rust/pull/106610#issuecomment-1418221274\n\ntl;dr: This PR adds an explicit dlltool temporary filename prefix. The prefix resolves a race condition by ensuring dlltool temporary files are siloed in an appropriate/unique Rust temporary directory.\n\n---\n\nGNU dlltool, as part of its import library generation logic, uses a bunch of temporary files on disk. In the interest of deterministic build runs, dlltool supports deterministic temporary filenames. The temporary filename prefix is automatically generated internally or can be explicitly specified via a `--temp-prefix` argument.\n\nGNU dlltool **2.38** (that ships with `x86_64-12.2.0-release-posix-seh-rt_v10-rev0` [installed during CI](https://github.com/rust-lang/rust/blob/master/src/ci/scripts/install-mingw.sh)) generates a prefix based on the target library name ([source](https://sourceware.org/git/?p=binutils-gdb.git;a=blob;f=binutils/dlltool.c;h=d95bf3f5470b999fa3b30bc887791859f48d81d1;hb=20756b0fbe065a84710aa38f2457563b57546440#l3992)). The tool writes to files such as `target_dll_h.s` and `target_dll_s00203.o` in the current working directory.\n\nThis presents a problem when multiple instances of rustc_codegen_llvm are running to generate an import library (as part of the raw_dylib feature) for the same target library (e.g. kernel32) ([source](https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_llvm/src/back/archive.rs#L185-L196)). That is, dlltool instances race and may overwrite or delete files belonging to each other.\n\nGNU dlltool **2.39**+ (not used in Rust CI) generates a prefix based on the output library path ([source](https://sourceware.org/git/?p=binutils-gdb.git;a=blob;f=binutils/dlltool.c;h=e2af20847009945b4c61a6fef08268fbb4429715;hb=b51c2fec1da205ea3e7354cbb3e253018d64873c#l3992)). The tool, when invoked as part of rustc_codegen_llvm, writes to files at paths such as `C_Users_Foo_AppData_Local_Temp_rustcOFqhXZ_target_lib_h.s`. (The output library path is normalized and non-alphanumeric characters are replaced with underscores.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a62176988161bad4f4dc21f99e9c1f2a5060b0a7", "html_url": "https://github.com/rust-lang/rust/commit/a62176988161bad4f4dc21f99e9c1f2a5060b0a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a62176988161bad4f4dc21f99e9c1f2a5060b0a7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b9543c89d1909bae143bfe9a87d3248d1526cf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b9543c89d1909bae143bfe9a87d3248d1526cf2", "html_url": "https://github.com/rust-lang/rust/commit/3b9543c89d1909bae143bfe9a87d3248d1526cf2"}, {"sha": "c825e08571136deb5643ccd42bddf76b799ea93b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c825e08571136deb5643ccd42bddf76b799ea93b", "html_url": "https://github.com/rust-lang/rust/commit/c825e08571136deb5643ccd42bddf76b799ea93b"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "dd3268d7780c6acdc18a7a537e17d5b340dbb9c3", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a62176988161bad4f4dc21f99e9c1f2a5060b0a7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62176988161bad4f4dc21f99e9c1f2a5060b0a7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=a62176988161bad4f4dc21f99e9c1f2a5060b0a7", "patch": "@@ -183,6 +183,12 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n             // able to control the *exact* spelling of each of the symbols that are being imported:\n             // hence we don't want `dlltool` adding leading underscores automatically.\n             let dlltool = find_binutils_dlltool(sess);\n+            let temp_prefix = {\n+                let mut path = PathBuf::from(&output_path);\n+                path.pop();\n+                path.push(lib_name);\n+                path\n+            };\n             let result = std::process::Command::new(dlltool)\n                 .args([\n                     \"-d\",\n@@ -192,6 +198,8 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n                     \"-l\",\n                     output_path.to_str().unwrap(),\n                     \"--no-leading-underscore\",\n+                    \"--temp-prefix\",\n+                    temp_prefix.to_str().unwrap(),\n                 ])\n                 .output();\n "}]}