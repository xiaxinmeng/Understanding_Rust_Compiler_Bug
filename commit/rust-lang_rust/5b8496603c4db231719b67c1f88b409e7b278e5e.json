{"sha": "5b8496603c4db231719b67c1f88b409e7b278e5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViODQ5NjYwM2M0ZGIyMzE3MTliNjdjMWY4OGI0MDllN2IyNzhlNWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-07T18:54:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-07T18:54:28Z"}, "message": "Auto merge of #3640 - detrumi:nested_use_self, r=flip1995\n\nRestrict `use_self` on nested items\n\nFixes #3637\nFixes #3463\n\nThese changes make it so that nested items aren't visited any more by the `use_self` lint.\n\nI think visiting nested items should be possible (so that it uses a different `item_path` for the nested item), but I'm not sure whether it's viable and what the best approach would be.\n- Can `item_path` be changed to a new `Self` path before visiting the item, and then changing it back afterwards?\n- Alternatively, could a new visitor be created, re-using `check_trait_method_impl_decl`?", "tree": {"sha": "fd045f1504310061cb29acf26984621798725ba6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd045f1504310061cb29acf26984621798725ba6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b8496603c4db231719b67c1f88b409e7b278e5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b8496603c4db231719b67c1f88b409e7b278e5e", "html_url": "https://github.com/rust-lang/rust/commit/5b8496603c4db231719b67c1f88b409e7b278e5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b8496603c4db231719b67c1f88b409e7b278e5e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "140c1650e81649c8bf94a27b7b02aa327bd7def1", "url": "https://api.github.com/repos/rust-lang/rust/commits/140c1650e81649c8bf94a27b7b02aa327bd7def1", "html_url": "https://github.com/rust-lang/rust/commit/140c1650e81649c8bf94a27b7b02aa327bd7def1"}, {"sha": "466cd076a2c6e1cf1775c486998a1a0b12b2fe15", "url": "https://api.github.com/repos/rust-lang/rust/commits/466cd076a2c6e1cf1775c486998a1a0b12b2fe15", "html_url": "https://github.com/rust-lang/rust/commit/466cd076a2c6e1cf1775c486998a1a0b12b2fe15"}], "stats": {"total": 71, "additions": 54, "deletions": 17}, "files": [{"sha": "5ec809f1b76cdcaa9ae1c0c4140233b12213b22d", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5b8496603c4db231719b67c1f88b409e7b278e5e/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8496603c4db231719b67c1f88b409e7b278e5e/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=5b8496603c4db231719b67c1f88b409e7b278e5e", "patch": "@@ -10,13 +10,12 @@\n use crate::utils::span_lint_and_sugg;\n use if_chain::if_chain;\n use rustc::hir::def::{CtorKind, Def};\n-use rustc::hir::intravisit::{walk_path, walk_ty, NestedVisitorMap, Visitor};\n+use rustc::hir::intravisit::{walk_item, walk_path, walk_ty, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty;\n use rustc::{declare_tool_lint, lint_array};\n use rustc_errors::Applicability;\n-use syntax::ast::NodeId;\n use syntax_pos::symbol::keywords::SelfUpper;\n \n /// **What it does:** Checks for unnecessary repetition of structure name when a\n@@ -29,7 +28,6 @@ use syntax_pos::symbol::keywords::SelfUpper;\n /// **Known problems:**\n /// - False positive when using associated types (#2843)\n /// - False positives in some situations when using generics (#3410)\n-/// - False positive when type from outer function can't be used (#3463)\n ///\n /// **Example:**\n /// ```rust\n@@ -242,8 +240,18 @@ impl<'a, 'tcx> Visitor<'tcx> for UseSelfVisitor<'a, 'tcx> {\n         walk_path(self, path);\n     }\n \n-    fn visit_use(&mut self, _path: &'tcx Path, _id: NodeId, _hir_id: HirId) {\n-        // Don't check use statements\n+    fn visit_item(&mut self, item: &'tcx Item) {\n+        match item.node {\n+            ItemKind::Use(..)\n+            | ItemKind::Static(..)\n+            | ItemKind::Enum(..)\n+            | ItemKind::Struct(..)\n+            | ItemKind::Union(..)\n+            | ItemKind::Impl(..) => {\n+                // Don't check statements that shadow `Self` or where `Self` can't be used\n+            },\n+            _ => walk_item(self, item),\n+        }\n     }\n \n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {"}, {"sha": "a117ce5894b8536634c9e818ab6e4862497bff44", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5b8496603c4db231719b67c1f88b409e7b278e5e/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8496603c4db231719b67c1f88b409e7b278e5e/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=5b8496603c4db231719b67c1f88b409e7b278e5e", "patch": "@@ -242,6 +242,34 @@ mod macros {\n     }\n }\n \n+mod nesting {\n+    struct Foo {}\n+    impl Foo {\n+        fn foo() {\n+            use self::Foo; // Can't use Self here\n+            struct Bar {\n+                foo: Foo, // Foo != Self\n+            }\n+\n+            impl Bar {\n+                fn bar() -> Bar {\n+                    Bar { foo: Foo {} }\n+                }\n+            }\n+        }\n+    }\n+\n+    enum Enum {\n+        A,\n+    }\n+    impl Enum {\n+        fn method() {\n+            use self::Enum::*; // Issue 3425\n+            static STATIC: Enum = Enum::A; // Can't use Self as type\n+        }\n+    }\n+}\n+\n mod issue3410 {\n \n     struct A;\n@@ -255,14 +283,3 @@ mod issue3410 {\n         fn a(_: Vec<A>) {}\n     }\n }\n-\n-mod issue3425 {\n-    enum Enum {\n-        A,\n-    }\n-    impl Enum {\n-        fn a() {\n-            use self::Enum::*;\n-        }\n-    }\n-}"}, {"sha": "72b60db7fd2de5e124e281b0a1c65aa4eaf41def", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b8496603c4db231719b67c1f88b409e7b278e5e/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b8496603c4db231719b67c1f88b409e7b278e5e/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=5b8496603c4db231719b67c1f88b409e7b278e5e", "patch": "@@ -150,5 +150,17 @@ LL |                 Foo {}\n LL |         use_self_expand!(); // Should lint in local macros\n    |         ------------------- in this macro invocation\n \n-error: aborting due to 24 previous errors\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:255:29\n+   |\n+LL |                 fn bar() -> Bar {\n+   |                             ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:256:21\n+   |\n+LL |                     Bar { foo: Foo {} }\n+   |                     ^^^ help: use the applicable keyword: `Self`\n+\n+error: aborting due to 26 previous errors\n "}]}