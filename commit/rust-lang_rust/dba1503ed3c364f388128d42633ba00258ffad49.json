{"sha": "dba1503ed3c364f388128d42633ba00258ffad49", "node_id": "C_kwDOAAsO6NoAKGRiYTE1MDNlZDNjMzY0ZjM4ODEyOGQ0MjYzM2JhMDAyNThmZmFkNDk", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-06T16:28:07Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-13T14:02:15Z"}, "message": "Ensure codegen_fn_attrs during collection.", "tree": {"sha": "139f6c98213bbba7a495da14114555775e6f8e31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/139f6c98213bbba7a495da14114555775e6f8e31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dba1503ed3c364f388128d42633ba00258ffad49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dba1503ed3c364f388128d42633ba00258ffad49", "html_url": "https://github.com/rust-lang/rust/commit/dba1503ed3c364f388128d42633ba00258ffad49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dba1503ed3c364f388128d42633ba00258ffad49/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "928d14bcd1976ffd33e743aa09c7c22a063bf87c", "url": "https://api.github.com/repos/rust-lang/rust/commits/928d14bcd1976ffd33e743aa09c7c22a063bf87c", "html_url": "https://github.com/rust-lang/rust/commit/928d14bcd1976ffd33e743aa09c7c22a063bf87c"}], "stats": {"total": 232, "additions": 103, "deletions": 129}, "files": [{"sha": "0f8d4e9654abbebb108c57fbbdb9c6055d13d895", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dba1503ed3c364f388128d42633ba00258ffad49/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dba1503ed3c364f388128d42633ba00258ffad49/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=dba1503ed3c364f388128d42633ba00258ffad49", "patch": "@@ -314,6 +314,7 @@ impl<'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n         if let hir::ExprKind::Closure { .. } = expr.kind {\n             let def_id = self.tcx.hir().local_def_id(expr.hir_id);\n             self.tcx.ensure().generics_of(def_id);\n+            self.tcx.ensure().codegen_fn_attrs(def_id);\n             // We do not call `type_of` for closures here as that\n             // depends on typecheck and would therefore hide\n             // any further errors in case one typeck fails.\n@@ -586,8 +587,12 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n                 tcx.ensure().type_of(item.owner_id);\n                 tcx.ensure().predicates_of(item.owner_id);\n                 match item.kind {\n-                    hir::ForeignItemKind::Fn(..) => tcx.ensure().fn_sig(item.owner_id),\n+                    hir::ForeignItemKind::Fn(..) => {\n+                        tcx.ensure().codegen_fn_attrs(item.owner_id);\n+                        tcx.ensure().fn_sig(item.owner_id)\n+                    }\n                     hir::ForeignItemKind::Static(..) => {\n+                        tcx.ensure().codegen_fn_attrs(item.owner_id);\n                         let mut visitor = HirPlaceholderCollector::default();\n                         visitor.visit_foreign_item(item);\n                         placeholder_type_error(\n@@ -676,6 +681,7 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n             tcx.ensure().type_of(def_id);\n             tcx.ensure().predicates_of(def_id);\n             tcx.ensure().fn_sig(def_id);\n+            tcx.ensure().codegen_fn_attrs(def_id);\n         }\n     }\n }\n@@ -687,6 +693,7 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::TraitItemId) {\n \n     match trait_item.kind {\n         hir::TraitItemKind::Fn(..) => {\n+            tcx.ensure().codegen_fn_attrs(def_id);\n             tcx.ensure().type_of(def_id);\n             tcx.ensure().fn_sig(def_id);\n         }\n@@ -736,6 +743,7 @@ fn convert_impl_item(tcx: TyCtxt<'_>, impl_item_id: hir::ImplItemId) {\n     let impl_item = tcx.hir().impl_item(impl_item_id);\n     match impl_item.kind {\n         hir::ImplItemKind::Fn(..) => {\n+            tcx.ensure().codegen_fn_attrs(def_id);\n             tcx.ensure().fn_sig(def_id);\n         }\n         hir::ImplItemKind::Type(_) => {"}, {"sha": "f3fc26e4784bdc3758b8910faccb0310e7822282", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dba1503ed3c364f388128d42633ba00258ffad49/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dba1503ed3c364f388128d42633ba00258ffad49/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=dba1503ed3c364f388128d42633ba00258ffad49", "patch": "@@ -219,18 +219,6 @@ impl CheckAttrVisitor<'_> {\n             return;\n         }\n \n-        // FIXME(@lcnr): this doesn't belong here.\n-        if matches!(\n-            target,\n-            Target::Closure\n-                | Target::Fn\n-                | Target::Method(_)\n-                | Target::ForeignFn\n-                | Target::ForeignStatic\n-        ) {\n-            self.tcx.ensure().codegen_fn_attrs(self.tcx.hir().local_def_id(hir_id));\n-        }\n-\n         self.check_repr(attrs, span, target, item, hir_id);\n         self.check_used(attrs, target);\n     }"}, {"sha": "3d33adf68316b112315acfa0d7696f2707160fd3", "filename": "src/test/ui/lang-items/lang-item-generic-requirements.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dba1503ed3c364f388128d42633ba00258ffad49/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dba1503ed3c364f388128d42633ba00258ffad49/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.rs?ref=dba1503ed3c364f388128d42633ba00258ffad49", "patch": "@@ -22,8 +22,6 @@ trait MyIndex<'a, T> {}\n #[lang = \"phantom_data\"]\n //~^ ERROR `phantom_data` language item must be applied to a struct with 1 generic argument\n struct MyPhantomData<T, U>;\n-//~^ ERROR parameter `T` is never used\n-//~| ERROR parameter `U` is never used\n \n #[lang = \"owned_box\"]\n //~^ ERROR `owned_box` language item must be applied to a struct with at least 1 generic argument"}, {"sha": "4d349a25f9c2a94d61baf1a814a5c658454ebe3b", "filename": "src/test/ui/lang-items/lang-item-generic-requirements.stderr", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/dba1503ed3c364f388128d42633ba00258ffad49/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dba1503ed3c364f388128d42633ba00258ffad49/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.stderr?ref=dba1503ed3c364f388128d42633ba00258ffad49", "patch": "@@ -33,7 +33,7 @@ LL | struct MyPhantomData<T, U>;\n    |                     ------ this struct has 2 generic arguments\n \n error[E0718]: `owned_box` language item must be applied to a struct with at least 1 generic argument\n-  --> $DIR/lang-item-generic-requirements.rs:28:1\n+  --> $DIR/lang-item-generic-requirements.rs:26:1\n    |\n LL | #[lang = \"owned_box\"]\n    | ^^^^^^^^^^^^^^^^^^^^^\n@@ -42,33 +42,14 @@ LL | struct Foo;\n    |           - this struct has 0 generic arguments\n \n error[E0718]: `start` language item must be applied to a function with 1 generic argument\n-  --> $DIR/lang-item-generic-requirements.rs:34:1\n+  --> $DIR/lang-item-generic-requirements.rs:32:1\n    |\n LL | #[lang = \"start\"]\n    | ^^^^^^^^^^^^^^^^^\n LL |\n LL | fn start(_: *const u8, _: isize, _: *const *const u8) -> isize {\n    |         - this function has 0 generic arguments\n \n-error[E0392]: parameter `T` is never used\n-  --> $DIR/lang-item-generic-requirements.rs:24:22\n-   |\n-LL | struct MyPhantomData<T, U>;\n-   |                      ^ unused parameter\n-   |\n-   = help: consider removing `T` or referring to it in a field\n-   = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n-\n-error[E0392]: parameter `U` is never used\n-  --> $DIR/lang-item-generic-requirements.rs:24:25\n-   |\n-LL | struct MyPhantomData<T, U>;\n-   |                         ^ unused parameter\n-   |\n-   = help: consider removing `U` or referring to it in a field\n-   = help: if you intended `U` to be a const parameter, use `const U: usize` instead\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 6 previous errors\n \n-Some errors have detailed explanations: E0392, E0718.\n-For more information about an error, try `rustc --explain E0392`.\n+For more information about this error, try `rustc --explain E0718`."}, {"sha": "fb40cd5387b7cc74dcb5add70314e0ed67689613", "filename": "src/test/ui/macros/issue-68060.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dba1503ed3c364f388128d42633ba00258ffad49/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dba1503ed3c364f388128d42633ba00258ffad49/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs?ref=dba1503ed3c364f388128d42633ba00258ffad49", "patch": "@@ -3,7 +3,11 @@ fn main() {\n         .map(\n             #[target_feature(enable = \"\")]\n             //~^ ERROR: attribute should be applied to a function\n+            //~| ERROR: feature named `` is not valid\n+            //~| NOTE: `` is not valid for this target\n             #[track_caller]\n+            //~^ ERROR: `#[track_caller]` on closures is currently unstable\n+            //~| NOTE: see issue #87417\n             |_| (),\n             //~^ NOTE: not a function\n         )"}, {"sha": "52e6ed92e9d238dbddd19a07f6155e5afc34b0e6", "filename": "src/test/ui/macros/issue-68060.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dba1503ed3c364f388128d42633ba00258ffad49/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dba1503ed3c364f388128d42633ba00258ffad49/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr?ref=dba1503ed3c364f388128d42633ba00258ffad49", "patch": "@@ -7,5 +7,21 @@ LL |             #[target_feature(enable = \"\")]\n LL |             |_| (),\n    |             ------ not a function definition\n \n-error: aborting due to previous error\n+error: the feature named `` is not valid for this target\n+  --> $DIR/issue-68060.rs:4:30\n+   |\n+LL |             #[target_feature(enable = \"\")]\n+   |                              ^^^^^^^^^^^ `` is not valid for this target\n+\n+error[E0658]: `#[track_caller]` on closures is currently unstable\n+  --> $DIR/issue-68060.rs:8:13\n+   |\n+LL |             #[track_caller]\n+   |             ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #87417 <https://github.com/rust-lang/rust/issues/87417> for more information\n+   = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "7c7feffe76a13456feea33a3d20d2250cddebf81", "filename": "src/test/ui/panic-handler/panic-handler-std.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dba1503ed3c364f388128d42633ba00258ffad49/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dba1503ed3c364f388128d42633ba00258ffad49/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr?ref=dba1503ed3c364f388128d42633ba00258ffad49", "patch": "@@ -8,12 +8,6 @@ LL | fn panic(info: PanicInfo) -> ! {\n    = note: first definition in `std` loaded from SYSROOT/libstd-*.rlib\n    = note: second definition in the local crate (`panic_handler_std`)\n \n-error: argument should be `&PanicInfo`\n-  --> $DIR/panic-handler-std.rs:8:16\n-   |\n-LL | fn panic(info: PanicInfo) -> ! {\n-   |                ^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0152`."}, {"sha": "9f378b4836e481bffed0cd8c575d3df3a491b08c", "filename": "src/test/ui/range/issue-54505-no-std.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dba1503ed3c364f388128d42633ba00258ffad49/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dba1503ed3c364f388128d42633ba00258ffad49/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs?ref=dba1503ed3c364f388128d42633ba00258ffad49", "patch": "@@ -1,5 +1,3 @@\n-// error-pattern: `#[panic_handler]` function required, but not found\n-\n // Regression test for #54505 - range borrowing suggestion had\n // incorrect syntax (missing parentheses).\n \n@@ -18,6 +16,10 @@ extern \"C\" fn eh_personality() {}\n #[lang = \"eh_catch_typeinfo\"]\n static EH_CATCH_TYPEINFO: u8 = 0;\n \n+#[panic_handler]\n+fn panic_handler() {}\n+//~^ ERROR return type should be `!`\n+//~| ERROR function should have one argument\n \n // take a reference to any built-in range\n fn take_range(_r: &impl RangeBounds<i8>) {}"}, {"sha": "9fb0e54a8a9bfef119f7436a480fd58205e81158", "filename": "src/test/ui/range/issue-54505-no-std.stderr", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/dba1503ed3c364f388128d42633ba00258ffad49/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dba1503ed3c364f388128d42633ba00258ffad49/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr?ref=dba1503ed3c364f388128d42633ba00258ffad49", "patch": "@@ -1,7 +1,17 @@\n-error: `#[panic_handler]` function required, but not found\n+error: return type should be `!`\n+  --> $DIR/issue-54505-no-std.rs:20:20\n+   |\n+LL | fn panic_handler() {}\n+   |                    ^\n+\n+error: function should have one argument\n+  --> $DIR/issue-54505-no-std.rs:20:1\n+   |\n+LL | fn panic_handler() {}\n+   | ^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:27:16\n+  --> $DIR/issue-54505-no-std.rs:29:16\n    |\n LL |     take_range(0..1);\n    |     ---------- ^^^^\n@@ -13,13 +23,13 @@ LL |     take_range(0..1);\n    = note: expected reference `&_`\n                  found struct `Range<{integer}>`\n note: function defined here\n-  --> $DIR/issue-54505-no-std.rs:23:4\n+  --> $DIR/issue-54505-no-std.rs:25:4\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:32:16\n+  --> $DIR/issue-54505-no-std.rs:34:16\n    |\n LL |     take_range(1..);\n    |     ---------- ^^^\n@@ -31,13 +41,13 @@ LL |     take_range(1..);\n    = note: expected reference `&_`\n                  found struct `RangeFrom<{integer}>`\n note: function defined here\n-  --> $DIR/issue-54505-no-std.rs:23:4\n+  --> $DIR/issue-54505-no-std.rs:25:4\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:37:16\n+  --> $DIR/issue-54505-no-std.rs:39:16\n    |\n LL |     take_range(..);\n    |     ---------- ^^\n@@ -49,13 +59,13 @@ LL |     take_range(..);\n    = note: expected reference `&_`\n                  found struct `RangeFull`\n note: function defined here\n-  --> $DIR/issue-54505-no-std.rs:23:4\n+  --> $DIR/issue-54505-no-std.rs:25:4\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:42:16\n+  --> $DIR/issue-54505-no-std.rs:44:16\n    |\n LL |     take_range(0..=1);\n    |     ---------- ^^^^^\n@@ -67,13 +77,13 @@ LL |     take_range(0..=1);\n    = note: expected reference `&_`\n                  found struct `RangeInclusive<{integer}>`\n note: function defined here\n-  --> $DIR/issue-54505-no-std.rs:23:4\n+  --> $DIR/issue-54505-no-std.rs:25:4\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:47:16\n+  --> $DIR/issue-54505-no-std.rs:49:16\n    |\n LL |     take_range(..5);\n    |     ---------- ^^^\n@@ -85,13 +95,13 @@ LL |     take_range(..5);\n    = note: expected reference `&_`\n                  found struct `RangeTo<{integer}>`\n note: function defined here\n-  --> $DIR/issue-54505-no-std.rs:23:4\n+  --> $DIR/issue-54505-no-std.rs:25:4\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:52:16\n+  --> $DIR/issue-54505-no-std.rs:54:16\n    |\n LL |     take_range(..=42);\n    |     ---------- ^^^^^\n@@ -103,11 +113,11 @@ LL |     take_range(..=42);\n    = note: expected reference `&_`\n                  found struct `RangeToInclusive<{integer}>`\n note: function defined here\n-  --> $DIR/issue-54505-no-std.rs:23:4\n+  --> $DIR/issue-54505-no-std.rs:25:4\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "a2adfc67f08001322711a338f9cdbb292cc94beb", "filename": "src/test/ui/target-feature/invalid-attribute.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/dba1503ed3c364f388128d42633ba00258ffad49/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dba1503ed3c364f388128d42633ba00258ffad49/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr?ref=dba1503ed3c364f388128d42633ba00258ffad49", "patch": "@@ -4,36 +4,6 @@ error: malformed `target_feature` attribute input\n LL | #[target_feature = \"+sse2\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[target_feature(enable = \"name\")]`\n \n-error: the feature named `foo` is not valid for this target\n-  --> $DIR/invalid-attribute.rs:19:18\n-   |\n-LL | #[target_feature(enable = \"foo\")]\n-   |                  ^^^^^^^^^^^^^^ `foo` is not valid for this target\n-\n-error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:22:18\n-   |\n-LL | #[target_feature(bar)]\n-   |                  ^^^ help: must be of the form: `enable = \"..\"`\n-\n-error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:24:18\n-   |\n-LL | #[target_feature(disable = \"baz\")]\n-   |                  ^^^^^^^^^^^^^^^ help: must be of the form: `enable = \"..\"`\n-\n-error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n-  --> $DIR/invalid-attribute.rs:28:1\n-   |\n-LL | #[target_feature(enable = \"sse2\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL | fn bar() {}\n-   | -------- not an `unsafe` function\n-   |\n-   = note: see issue #69098 <https://github.com/rust-lang/rust/issues/69098> for more information\n-   = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n-\n error: attribute should be applied to a function definition\n   --> $DIR/invalid-attribute.rs:34:1\n    |\n@@ -92,12 +62,6 @@ LL |\n LL | trait Baz {}\n    | ------------ not a function definition\n \n-error: cannot use `#[inline(always)]` with `#[target_feature]`\n-  --> $DIR/invalid-attribute.rs:67:1\n-   |\n-LL | #[inline(always)]\n-   | ^^^^^^^^^^^^^^^^^\n-\n error: attribute should be applied to a function definition\n   --> $DIR/invalid-attribute.rs:85:5\n    |\n@@ -119,6 +83,42 @@ LL |\n LL |     || {};\n    |     ----- not a function definition\n \n+error: the feature named `foo` is not valid for this target\n+  --> $DIR/invalid-attribute.rs:19:18\n+   |\n+LL | #[target_feature(enable = \"foo\")]\n+   |                  ^^^^^^^^^^^^^^ `foo` is not valid for this target\n+\n+error: malformed `target_feature` attribute input\n+  --> $DIR/invalid-attribute.rs:22:18\n+   |\n+LL | #[target_feature(bar)]\n+   |                  ^^^ help: must be of the form: `enable = \"..\"`\n+\n+error: malformed `target_feature` attribute input\n+  --> $DIR/invalid-attribute.rs:24:18\n+   |\n+LL | #[target_feature(disable = \"baz\")]\n+   |                  ^^^^^^^^^^^^^^^ help: must be of the form: `enable = \"..\"`\n+\n+error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n+  --> $DIR/invalid-attribute.rs:28:1\n+   |\n+LL | #[target_feature(enable = \"sse2\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | fn bar() {}\n+   | -------- not an `unsafe` function\n+   |\n+   = note: see issue #69098 <https://github.com/rust-lang/rust/issues/69098> for more information\n+   = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n+\n+error: cannot use `#[inline(always)]` with `#[target_feature]`\n+  --> $DIR/invalid-attribute.rs:67:1\n+   |\n+LL | #[inline(always)]\n+   | ^^^^^^^^^^^^^^^^^\n+\n error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n   --> $DIR/invalid-attribute.rs:77:5\n    |"}, {"sha": "216cd78e56f9a2f1980267379edc4af9088a268e", "filename": "src/test/ui/traits/issue-102989.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dba1503ed3c364f388128d42633ba00258ffad49/src%2Ftest%2Fui%2Ftraits%2Fissue-102989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dba1503ed3c364f388128d42633ba00258ffad49/src%2Ftest%2Fui%2Ftraits%2Fissue-102989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-102989.rs?ref=dba1503ed3c364f388128d42633ba00258ffad49", "patch": "@@ -7,10 +7,8 @@ trait Sized { } //~ ERROR found duplicate lang item `sized`\n fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n     //~^ ERROR `self` parameter is only allowed in associated functions\n     //~| ERROR cannot find type `Struct` in this scope\n-    //~| ERROR mismatched types\n     let x = x << 1;\n-    //~^ ERROR the size for values of type `{integer}` cannot be known at compilation time\n-    //~| ERROR cannot find value `x` in this scope\n+    //~^ ERROR cannot find value `x` in this scope\n }\n \n fn main() {}"}, {"sha": "7d0098fe885021b22962887b2e7dcdba3a34d664", "filename": "src/test/ui/traits/issue-102989.stderr", "status": "modified", "additions": 3, "deletions": 28, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/dba1503ed3c364f388128d42633ba00258ffad49/src%2Ftest%2Fui%2Ftraits%2Fissue-102989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dba1503ed3c364f388128d42633ba00258ffad49/src%2Ftest%2Fui%2Ftraits%2Fissue-102989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-102989.stderr?ref=dba1503ed3c364f388128d42633ba00258ffad49", "patch": "@@ -13,7 +13,7 @@ LL | fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                      ^^^^^^ not found in this scope\n \n error[E0425]: cannot find value `x` in this scope\n-  --> $DIR/issue-102989.rs:11:13\n+  --> $DIR/issue-102989.rs:10:13\n    |\n LL |     let x = x << 1;\n    |             ^ help: a local variable with a similar name exists: `f`\n@@ -28,32 +28,7 @@ LL | trait Sized { }\n    = note: first definition in `core` loaded from SYSROOT/libcore-*.rlib\n    = note: second definition in the local crate (`issue_102989`)\n \n-error[E0277]: the size for values of type `{integer}` cannot be known at compilation time\n-  --> $DIR/issue-102989.rs:11:15\n-   |\n-LL |     let x = x << 1;\n-   |               ^^ doesn't have a size known at compile-time\n-   |\n-   = help: the trait `std::marker::Sized` is not implemented for `{integer}`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-102989.rs:7:42\n-   |\n-LL | fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n-   |    ----------                            ^^^^ expected `&u32`, found `()`\n-   |    |\n-   |    implicitly returns `()` as its body has no tail or `return` expression\n-   |\n-note: consider returning one of these bindings\n-  --> $DIR/issue-102989.rs:7:30\n-   |\n-LL | fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n-   |                              ^\n-...\n-LL |     let x = x << 1;\n-   |         ^\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0152, E0277, E0308, E0412, E0425.\n+Some errors have detailed explanations: E0152, E0412, E0425.\n For more information about an error, try `rustc --explain E0152`."}]}