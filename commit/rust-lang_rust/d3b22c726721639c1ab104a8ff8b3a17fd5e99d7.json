{"sha": "d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "node_id": "C_kwDOAAsO6NoAKGQzYjIyYzcyNjcyMTYzOWMxYWIxMDRhOGZmOGIzYTE3ZmQ1ZTk5ZDc", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-08-31T13:01:10Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-01T14:53:46Z"}, "message": "Directly use the `instrument` macro instead of its full path", "tree": {"sha": "240f7f508355ccac53613ddb06db6b7f57fc17a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/240f7f508355ccac53613ddb06db6b7f57fc17a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "html_url": "https://github.com/rust-lang/rust/commit/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f9898a7947059433d08357cdaaba84c4705873d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f9898a7947059433d08357cdaaba84c4705873d", "html_url": "https://github.com/rust-lang/rust/commit/4f9898a7947059433d08357cdaaba84c4705873d"}], "stats": {"total": 175, "additions": 86, "deletions": 89}, "files": [{"sha": "a0547497b1926ea0bb041154a91f96636b78889b", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -31,7 +31,7 @@ pub(super) struct NodeCollector<'a, 'hir> {\n     definitions: &'a definitions::Definitions,\n }\n \n-#[tracing::instrument(level = \"debug\", skip(sess, definitions, bodies))]\n+#[instrument(level = \"debug\", skip(sess, definitions, bodies))]\n pub(super) fn index_hir<'hir>(\n     sess: &Session,\n     definitions: &definitions::Definitions,\n@@ -67,7 +67,7 @@ pub(super) fn index_hir<'hir>(\n }\n \n impl<'a, 'hir> NodeCollector<'a, 'hir> {\n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn insert(&mut self, span: Span, hir_id: HirId, node: Node<'hir>) {\n         debug_assert_eq!(self.owner, hir_id.owner);\n         debug_assert_ne!(hir_id.local_id.as_u32(), 0);\n@@ -142,7 +142,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         });\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_item(&mut self, i: &'hir Item<'hir>) {\n         debug_assert_eq!(i.def_id, self.owner);\n         self.with_parent(i.hir_id(), |this| {\n@@ -156,7 +156,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         });\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_foreign_item(&mut self, fi: &'hir ForeignItem<'hir>) {\n         debug_assert_eq!(fi.def_id, self.owner);\n         self.with_parent(fi.hir_id(), |this| {\n@@ -175,15 +175,15 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         })\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_trait_item(&mut self, ti: &'hir TraitItem<'hir>) {\n         debug_assert_eq!(ti.def_id, self.owner);\n         self.with_parent(ti.hir_id(), |this| {\n             intravisit::walk_trait_item(this, ti);\n         });\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_impl_item(&mut self, ii: &'hir ImplItem<'hir>) {\n         debug_assert_eq!(ii.def_id, self.owner);\n         self.with_parent(ii.hir_id(), |this| {"}, {"sha": "9a960356a85f4066f628ea59a101e29c4b6dc306", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -220,7 +220,7 @@ impl ResolverAstLoweringExt for ResolverAstLowering {\n     /// Panics if no map has been pushed.\n     /// Remapping is used when creating lowering `-> impl Trait` return\n     /// types to create the resulting opaque type.\n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn record_def_id_remap(&mut self, from: LocalDefId, to: LocalDefId) {\n         self.generics_def_id_map.last_mut().expect(\"no map pushed\").insert(from, to);\n     }\n@@ -771,7 +771,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     /// Converts a lifetime into a new generic parameter.\n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn lifetime_res_to_generic_param(\n         &mut self,\n         ident: Ident,\n@@ -815,7 +815,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// name resolver owing to lifetime elision; this also populates the resolver's node-id->def-id\n     /// map, so that later calls to `opt_node_id_to_def_id` that refer to these extra lifetime\n     /// parameters will be successful.\n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     #[inline]\n     fn lower_lifetime_binder(\n         &mut self,\n@@ -1385,7 +1385,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// added explicitly in the HIR). But this includes all the lifetimes, and we only want to\n     /// capture the lifetimes that are referenced in the bounds. Therefore, we add *extra* lifetime parameters\n     /// for the lifetimes that get captured (`'x`, in our example above) and reference those.\n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn lower_opaque_impl_trait(\n         &mut self,\n         span: Span,\n@@ -1621,7 +1621,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     // `make_ret_async`: if `Some`, converts `-> T` into `-> impl Future<Output = T>` in the\n     //      return type. This is used for `async fn` declarations. The `NodeId` is the ID of the\n     //      return type `impl Trait` item.\n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn lower_fn_decl(\n         &mut self,\n         decl: &FnDecl,\n@@ -1730,7 +1730,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     // `output`: unlowered output type (`T` in `-> T`)\n     // `fn_def_id`: `DefId` of the parent function (used to create child impl trait definition)\n     // `opaque_ty_node_id`: `NodeId` of the opaque `impl Trait` type that should be created\n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn lower_async_fn_ret_ty(\n         &mut self,\n         output: &FnRetTy,\n@@ -2013,7 +2013,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.new_named_lifetime(l.id, l.id, span, ident)\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn new_named_lifetime_with_res(\n         &mut self,\n         id: NodeId,\n@@ -2044,7 +2044,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::Lifetime { hir_id: self.lower_node_id(id), span: self.lower_span(span), name }\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn new_named_lifetime(\n         &mut self,\n         id: NodeId,\n@@ -2132,7 +2132,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::TraitRef { path, hir_ref_id: self.lower_node_id(p.ref_id) }\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn lower_poly_trait_ref(\n         &mut self,\n         p: &PolyTraitRef,"}, {"sha": "75fde53b6cdecd24452e0293db2118ad598f9620", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -265,7 +265,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     /// *user* has a name for. In that case, we'll be able to map\n     /// `fr` to a `Region<'tcx>`, and that region will be one of\n     /// named variants.\n-    #[tracing::instrument(level = \"trace\", skip(self))]\n+    #[instrument(level = \"trace\", skip(self))]\n     fn give_name_from_error_region(&self, fr: RegionVid) -> Option<RegionName> {\n         let error_region = self.to_error_region(fr)?;\n \n@@ -373,7 +373,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     ///  | fn foo(x: &u32) { .. }\n     ///           ------- fully elaborated type of `x` is `&'1 u32`\n     /// ```\n-    #[tracing::instrument(level = \"trace\", skip(self))]\n+    #[instrument(level = \"trace\", skip(self))]\n     fn give_name_if_anonymous_region_appears_in_arguments(\n         &self,\n         fr: RegionVid,\n@@ -662,7 +662,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     ///  | let x = Some(&22);\n     ///        - fully elaborated type of `x` is `Option<&'1 u32>`\n     /// ```\n-    #[tracing::instrument(level = \"trace\", skip(self))]\n+    #[instrument(level = \"trace\", skip(self))]\n     fn give_name_if_anonymous_region_appears_in_upvars(&self, fr: RegionVid) -> Option<RegionName> {\n         let upvar_index = self.regioncx.get_upvar_index_for_region(self.infcx.tcx, fr)?;\n         let (upvar_name, upvar_span) = self.regioncx.get_upvar_name_and_span_for_region(\n@@ -682,7 +682,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     /// must be a closure since, in a free fn, such an argument would\n     /// have to either also appear in an argument (if using elision)\n     /// or be early bound (named, not in argument).\n-    #[tracing::instrument(level = \"trace\", skip(self))]\n+    #[instrument(level = \"trace\", skip(self))]\n     fn give_name_if_anonymous_region_appears_in_output(&self, fr: RegionVid) -> Option<RegionName> {\n         let tcx = self.infcx.tcx;\n         let hir = tcx.hir();\n@@ -814,7 +814,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         }\n     }\n \n-    #[tracing::instrument(level = \"trace\", skip(self))]\n+    #[instrument(level = \"trace\", skip(self))]\n     fn give_name_if_anonymous_region_appears_in_yield_ty(\n         &self,\n         fr: RegionVid,"}, {"sha": "163ccd9460c54b58c9f1326fd3d186ae60496d9f", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -42,7 +42,6 @@ use rustc_span::{self, FileNameDisplayPreference, SourceFile};\n use rustc_symbol_mangling::typeid_for_trait_ref;\n use rustc_target::abi::{Align, Size};\n use smallvec::smallvec;\n-use tracing::debug;\n \n use libc::{c_char, c_longlong, c_uint};\n use std::borrow::Cow;\n@@ -51,7 +50,6 @@ use std::hash::{Hash, Hasher};\n use std::iter;\n use std::path::{Path, PathBuf};\n use std::ptr;\n-use tracing::instrument;\n \n impl PartialEq for llvm::Metadata {\n     fn eq(&self, other: &Self) -> bool {"}, {"sha": "334425ae55b43300c1f3f7e06463b235a5ad3a28", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -16,6 +16,8 @@\n \n #[macro_use]\n extern crate rustc_macros;\n+#[macro_use]\n+extern crate tracing;\n \n use back::write::{create_informational_target_machine, create_target_machine};\n "}, {"sha": "24dbc769529c3665a6e30da12c750226a21ffd19", "filename": "compiler/rustc_const_eval/src/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -334,7 +334,7 @@ pub enum InternKind {\n /// tracks where in the value we are and thus can show much better error messages.\n /// Any errors here would anyway be turned into `const_err` lints, whereas validation failures\n /// are hard errors.\n-#[tracing::instrument(level = \"debug\", skip(ecx))]\n+#[instrument(level = \"debug\", skip(ecx))]\n pub fn intern_const_alloc_recursive<\n     'mir,\n     'tcx: 'mir,"}, {"sha": "99d8f57505c20dcb1e85fe2176db73ec3aa04a75", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -856,7 +856,7 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n         Ok(a.rebind(self.relate(a.skip_binder(), b.skip_binder())?))\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn tys(&mut self, t: Ty<'tcx>, _t: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n         debug_assert_eq!(t, _t);\n         debug!(\"ConstInferUnifier: t={:?}\", t);\n@@ -932,7 +932,7 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n         }\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn consts(\n         &mut self,\n         c: ty::Const<'tcx>,"}, {"sha": "6dad9873d613404a124bac052236be887ecdb7f0", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -1434,7 +1434,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// the message in `secondary_span` as the primary label, and apply the message that would\n     /// otherwise be used for the primary label on the `secondary_span` `Span`. This applies on\n     /// E0271, like `src/test/ui/issues/issue-39970.stderr`.\n-    #[tracing::instrument(\n+    #[instrument(\n         level = \"debug\",\n         skip(self, diag, secondary_span, swap_secondary_and_primary, prefer_label)\n     )]"}, {"sha": "74c8bd88d275dbfb79589c41d21eab3bd91d169b", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -313,7 +313,7 @@ where\n         self.delegate.push_verify(origin, generic, region, verify_bound);\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn projection_must_outlive(\n         &mut self,\n         origin: infer::SubregionOrigin<'tcx>,"}, {"sha": "a5c21f0fb9b50eadf775aac2a6840500f388a00d", "filename": "compiler/rustc_infer/src/infer/outlives/test_type_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -34,7 +34,7 @@ use crate::infer::region_constraints::VerifyIfEq;\n /// like are used. This is a particular challenge since this function is invoked\n /// very late in inference and hence cannot make use of the normal inference\n /// machinery.\n-#[tracing::instrument(level = \"debug\", skip(tcx, param_env))]\n+#[instrument(level = \"debug\", skip(tcx, param_env))]\n pub fn extract_verify_if_eq<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -71,7 +71,7 @@ pub fn extract_verify_if_eq<'tcx>(\n }\n \n /// True if a (potentially higher-ranked) outlives\n-#[tracing::instrument(level = \"debug\", skip(tcx, param_env))]\n+#[instrument(level = \"debug\", skip(tcx, param_env))]\n pub(super) fn can_match_erased_ty<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -110,7 +110,7 @@ impl<'tcx> Match<'tcx> {\n \n     /// Binds the pattern variable `br` to `value`; returns an `Err` if the pattern\n     /// is already bound to a different value.\n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn bind(\n         &mut self,\n         br: ty::BoundRegion,"}, {"sha": "0e5cd6199ac9fb69ec7d3ecd7e23c42c3c483669", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -155,7 +155,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     ///\n     /// * From each pre-binding block to the next pre-binding block.\n     /// * From each otherwise block to the next pre-binding block.\n-    #[tracing::instrument(level = \"debug\", skip(self, arms))]\n+    #[instrument(level = \"debug\", skip(self, arms))]\n     pub(crate) fn match_expr(\n         &mut self,\n         destination: Place<'tcx>,"}, {"sha": "b84a84976c7d9371339158086d26d4c3d472a92b", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -77,7 +77,7 @@ impl<'tcx> Cx<'tcx> {\n         }\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     pub(crate) fn pattern_from_hir(&mut self, p: &hir::Pat<'_>) -> Pat<'tcx> {\n         let p = match self.tcx.hir().get(p.hir_id) {\n             Node::Pat(p) => p,"}, {"sha": "2a6889af7c2c92aab88860e449ae341e8e07917f", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -1573,7 +1573,7 @@ impl<'tcx> Liveness<'_, 'tcx> {\n         }\n     }\n \n-    #[tracing::instrument(skip(self), level = \"INFO\")]\n+    #[instrument(skip(self), level = \"INFO\")]\n     fn report_unused(\n         &self,\n         hir_ids_and_spans: Vec<(HirId, Span, Span)>,"}, {"sha": "b84a610833ddf6a8faa398d6e070d0ef93b25136", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -273,7 +273,7 @@ impl<'a> Resolver<'a> {\n     ///\n     /// Invariant: This must only be called during main resolution, not during\n     /// import resolution.\n-    #[tracing::instrument(level = \"debug\", skip(self, ribs))]\n+    #[instrument(level = \"debug\", skip(self, ribs))]\n     pub(crate) fn resolve_ident_in_lexical_scope(\n         &mut self,\n         mut ident: Ident,\n@@ -367,7 +367,7 @@ impl<'a> Resolver<'a> {\n     /// expansion and import resolution (perhaps they can be merged in the future).\n     /// The function is used for resolving initial segments of macro paths (e.g., `foo` in\n     /// `foo::bar!(); or `foo!();`) and also for import paths on 2018 edition.\n-    #[tracing::instrument(level = \"debug\", skip(self, scope_set))]\n+    #[instrument(level = \"debug\", skip(self, scope_set))]\n     pub(crate) fn early_resolve_ident_in_lexical_scope(\n         &mut self,\n         orig_ident: Ident,\n@@ -708,7 +708,7 @@ impl<'a> Resolver<'a> {\n         Err(Determinacy::determined(determinacy == Determinacy::Determined || force))\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     pub(crate) fn maybe_resolve_ident_in_module(\n         &mut self,\n         module: ModuleOrUniformRoot<'a>,\n@@ -720,7 +720,7 @@ impl<'a> Resolver<'a> {\n             .map_err(|(determinacy, _)| determinacy)\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     pub(crate) fn resolve_ident_in_module(\n         &mut self,\n         module: ModuleOrUniformRoot<'a>,\n@@ -734,7 +734,7 @@ impl<'a> Resolver<'a> {\n             .map_err(|(determinacy, _)| determinacy)\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn resolve_ident_in_module_ext(\n         &mut self,\n         module: ModuleOrUniformRoot<'a>,\n@@ -772,7 +772,7 @@ impl<'a> Resolver<'a> {\n         )\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn resolve_ident_in_module_unadjusted(\n         &mut self,\n         module: ModuleOrUniformRoot<'a>,\n@@ -796,7 +796,7 @@ impl<'a> Resolver<'a> {\n \n     /// Attempts to resolve `ident` in namespaces `ns` of `module`.\n     /// Invariant: if `finalize` is `Some`, expansion and import resolution must be complete.\n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn resolve_ident_in_module_unadjusted_ext(\n         &mut self,\n         module: ModuleOrUniformRoot<'a>,\n@@ -1059,7 +1059,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     /// Validate a local resolution (from ribs).\n-    #[tracing::instrument(level = \"debug\", skip(self, all_ribs))]\n+    #[instrument(level = \"debug\", skip(self, all_ribs))]\n     fn validate_res_from_ribs(\n         &mut self,\n         rib_index: usize,\n@@ -1294,7 +1294,7 @@ impl<'a> Resolver<'a> {\n         res\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     pub(crate) fn maybe_resolve_path(\n         &mut self,\n         path: &[Segment],\n@@ -1304,7 +1304,7 @@ impl<'a> Resolver<'a> {\n         self.resolve_path_with_ribs(path, opt_ns, parent_scope, None, None, None)\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     pub(crate) fn resolve_path(\n         &mut self,\n         path: &[Segment],"}, {"sha": "4cdfc6e7a4d74663d645dc2d9ea5417b125f933a", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -1390,7 +1390,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         })\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self, work))]\n+    #[instrument(level = \"debug\", skip(self, work))]\n     fn with_lifetime_rib<T>(\n         &mut self,\n         kind: LifetimeRibKind,\n@@ -1404,7 +1404,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         ret\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn resolve_lifetime(&mut self, lifetime: &'ast Lifetime, use_ctxt: visit::LifetimeCtxt) {\n         let ident = lifetime.ident;\n \n@@ -1508,7 +1508,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         self.record_lifetime_res(lifetime.id, LifetimeRes::Error, LifetimeElisionCandidate::Named);\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn resolve_anonymous_lifetime(&mut self, lifetime: &Lifetime, elided: bool) {\n         debug_assert_eq!(lifetime.ident.name, kw::UnderscoreLifetime);\n \n@@ -1573,7 +1573,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         self.report_missing_lifetime_specifiers(vec![missing_lifetime], None);\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn resolve_elided_lifetime(&mut self, anchor_id: NodeId, span: Span) {\n         let id = self.r.next_node_id();\n         let lt = Lifetime { id, ident: Ident::new(kw::UnderscoreLifetime, span) };\n@@ -1586,7 +1586,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         self.resolve_anonymous_lifetime(&lt, true);\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn create_fresh_lifetime(&mut self, id: NodeId, ident: Ident, binder: NodeId) -> LifetimeRes {\n         debug_assert_eq!(ident.name, kw::UnderscoreLifetime);\n         debug!(?ident.span);\n@@ -1604,7 +1604,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         res\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn resolve_elided_lifetimes_in_path(\n         &mut self,\n         path_id: NodeId,\n@@ -1804,7 +1804,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         }\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn record_lifetime_res(\n         &mut self,\n         id: NodeId,\n@@ -1827,7 +1827,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         }\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn record_lifetime_param(&mut self, id: NodeId, res: LifetimeRes) {\n         if let Some(prev_res) = self.r.lifetimes_res_map.insert(id, res) {\n             panic!(\n@@ -1838,7 +1838,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     }\n \n     /// Perform resolution of a function signature, accounting for lifetime elision.\n-    #[tracing::instrument(level = \"debug\", skip(self, inputs))]\n+    #[instrument(level = \"debug\", skip(self, inputs))]\n     fn resolve_fn_signature(\n         &mut self,\n         fn_id: NodeId,"}, {"sha": "242dad17ec9219bbb19701f3a3a14e97e65754ae", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -278,7 +278,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n /// lifetimes into a single binder.) This requires us to resolve the\n /// *trait definition* of `Sub`; basically just enough lifetime information\n /// to look at the supertraits.\n-#[tracing::instrument(level = \"debug\", skip(tcx))]\n+#[instrument(level = \"debug\", skip(tcx))]\n fn resolve_lifetimes_trait_definition(\n     tcx: TyCtxt<'_>,\n     local_def_id: LocalDefId,\n@@ -289,7 +289,7 @@ fn resolve_lifetimes_trait_definition(\n /// Computes the `ResolveLifetimes` map that contains data for an entire `Item`.\n /// You should not read the result of this query directly, but rather use\n /// `named_region_map`, `is_late_bound_map`, etc.\n-#[tracing::instrument(level = \"debug\", skip(tcx))]\n+#[instrument(level = \"debug\", skip(tcx))]\n fn resolve_lifetimes(tcx: TyCtxt<'_>, local_def_id: LocalDefId) -> ResolveLifetimes {\n     convert_named_region_map(do_resolve(tcx, local_def_id, false))\n }\n@@ -647,7 +647,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_ty(&mut self, ty: &'tcx hir::Ty<'tcx>) {\n         match ty.kind {\n             hir::TyKind::BareFn(ref c) => {\n@@ -930,7 +930,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime) {\n         match lifetime_ref.name {\n             hir::LifetimeName::Static => self.insert_lifetime(lifetime_ref, Region::Static),\n@@ -1287,7 +1287,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         self.with(scope, walk);\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn resolve_lifetime_ref(\n         &mut self,\n         region_def_id: LocalDefId,\n@@ -1409,7 +1409,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         );\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_segment_args(\n         &mut self,\n         res: Res,\n@@ -1659,7 +1659,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_fn_like_elision(\n         &mut self,\n         inputs: &'tcx [hir::Ty<'tcx>],\n@@ -1707,7 +1707,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         self.insert_lifetime(lifetime_ref, lifetime.shifted(late_depth));\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn insert_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime, def: Region) {\n         debug!(\n             node = ?self.tcx.hir().node_to_string(lifetime_ref.hir_id),"}, {"sha": "3763a98c488b766c11fc1e863a17e29f1c5c23d2", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -135,7 +135,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n     /// `SomeTrait` or a where-clause that lets us unify `$0` with\n     /// something concrete. If this fails, we'll unify `$0` with\n     /// `projection_ty` again.\n-    #[tracing::instrument(level = \"debug\", skip(self, infcx, param_env, cause))]\n+    #[instrument(level = \"debug\", skip(self, infcx, param_env, cause))]\n     fn normalize_projection_type(\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,"}, {"sha": "398635674abcfd19a69c7de02f88af6787e209f9", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -231,7 +231,7 @@ pub(super) fn poly_project_and_unify_type<'cx, 'tcx>(\n /// If successful, this may result in additional obligations.\n ///\n /// See [poly_project_and_unify_type] for an explanation of the return value.\n-#[tracing::instrument(level = \"debug\", skip(selcx))]\n+#[instrument(level = \"debug\", skip(selcx))]\n fn project_and_unify_type<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionObligation<'tcx>,\n@@ -1206,7 +1206,7 @@ impl<'tcx> Progress<'tcx> {\n ///\n /// IMPORTANT:\n /// - `obligation` must be fully normalized\n-#[tracing::instrument(level = \"info\", skip(selcx))]\n+#[instrument(level = \"info\", skip(selcx))]\n fn project<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,\n@@ -1368,7 +1368,7 @@ fn assemble_candidates_from_object_ty<'cx, 'tcx>(\n     );\n }\n \n-#[tracing::instrument(\n+#[instrument(\n     level = \"debug\",\n     skip(selcx, candidate_set, ctor, env_predicates, potentially_unnormalized_candidates)\n )]\n@@ -1419,7 +1419,7 @@ fn assemble_candidates_from_predicates<'cx, 'tcx>(\n     }\n }\n \n-#[tracing::instrument(level = \"debug\", skip(selcx, obligation, candidate_set))]\n+#[instrument(level = \"debug\", skip(selcx, obligation, candidate_set))]\n fn assemble_candidates_from_impls<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,"}, {"sha": "cfd9d711894eed95ab24c8d8857ee4c1a0837f81", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -337,7 +337,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         Ok(candidates)\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self, candidates))]\n+    #[instrument(level = \"debug\", skip(self, candidates))]\n     fn assemble_candidates_from_projected_tys(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n@@ -367,7 +367,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// supplied to find out whether it is listed among them.\n     ///\n     /// Never affects the inference environment.\n-    #[tracing::instrument(level = \"debug\", skip(self, stack, candidates))]\n+    #[instrument(level = \"debug\", skip(self, stack, candidates))]\n     fn assemble_candidates_from_caller_bounds<'o>(\n         &mut self,\n         stack: &TraitObligationStack<'o, 'tcx>,\n@@ -880,7 +880,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         };\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self, obligation, candidates))]\n+    #[instrument(level = \"debug\", skip(self, obligation, candidates))]\n     fn assemble_candidates_for_transmutability(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n@@ -898,7 +898,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         candidates.vec.push(TransmutabilityCandidate);\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self, obligation, candidates))]\n+    #[instrument(level = \"debug\", skip(self, obligation, candidates))]\n     fn assemble_candidates_for_trait_alias(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n@@ -917,7 +917,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     /// Assembles the trait which are built-in to the language itself:\n     /// `Copy`, `Clone` and `Sized`.\n-    #[tracing::instrument(level = \"debug\", skip(self, candidates))]\n+    #[instrument(level = \"debug\", skip(self, candidates))]\n     fn assemble_builtin_bound_candidates(\n         &mut self,\n         conditions: BuiltinImplConditions<'tcx>,"}, {"sha": "83838b70fb25ecb5c026359bb58339ae5680c35a", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -2153,7 +2153,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn match_impl(\n         &mut self,\n         impl_def_id: DefId,\n@@ -2335,7 +2335,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// impl or trait. The obligations are substituted and fully\n     /// normalized. This is used when confirming an impl or default\n     /// impl.\n-    #[tracing::instrument(level = \"debug\", skip(self, cause, param_env))]\n+    #[instrument(level = \"debug\", skip(self, cause, param_env))]\n     fn impl_or_trait_obligations(\n         &mut self,\n         cause: &ObligationCause<'tcx>,"}, {"sha": "72778c8b76a8ab9de2c532269a71a9caa5a4c546", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -201,7 +201,7 @@ pub trait CreateSubstsForGenericArgsCtxt<'a, 'tcx> {\n }\n \n impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     pub fn ast_region_to_region(\n         &self,\n         lifetime: &hir::Lifetime,\n@@ -317,7 +317,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// `[Vec<u8>, u8]` and `generic_args` are the arguments for the associated\n     /// type itself: `['a]`. The returned `SubstsRef` concatenates these two\n     /// lists: `[Vec<u8>, u8, 'a]`.\n-    #[tracing::instrument(level = \"debug\", skip(self, span))]\n+    #[instrument(level = \"debug\", skip(self, span))]\n     fn create_substs_for_ast_path<'a>(\n         &self,\n         span: Span,\n@@ -716,7 +716,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// where `'a` is a bound region at depth 0. Similarly, the `poly_trait_ref` would be\n     /// `Bar<'a>`. The returned poly-trait-ref will have this binder instantiated explicitly,\n     /// however.\n-    #[tracing::instrument(level = \"debug\", skip(self, span, constness, bounds, speculative))]\n+    #[instrument(level = \"debug\", skip(self, span, constness, bounds, speculative))]\n     pub(crate) fn instantiate_poly_trait_ref(\n         &self,\n         trait_ref: &hir::TraitRef<'_>,\n@@ -808,7 +808,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         ty::TraitRef::new(trait_def_id, substs)\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self, span))]\n+    #[instrument(level = \"debug\", skip(self, span))]\n     fn create_substs_for_ast_trait_ref<'a>(\n         &self,\n         span: Span,\n@@ -922,7 +922,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// **A note on binders:** there is an implied binder around\n     /// `param_ty` and `ast_bounds`. See `instantiate_poly_trait_ref`\n     /// for more details.\n-    #[tracing::instrument(level = \"debug\", skip(self, ast_bounds, bounds))]\n+    #[instrument(level = \"debug\", skip(self, ast_bounds, bounds))]\n     pub(crate) fn add_bounds<'hir, I: Iterator<Item = &'hir hir::GenericBound<'hir>>>(\n         &self,\n         param_ty: Ty<'tcx>,\n@@ -1028,10 +1028,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// **A note on binders:** given something like `T: for<'a> Iterator<Item = &'a u32>`, the\n     /// `trait_ref` here will be `for<'a> T: Iterator`. The `binding` data however is from *inside*\n     /// the binder (e.g., `&'a u32`) and hence may reference bound regions.\n-    #[tracing::instrument(\n-        level = \"debug\",\n-        skip(self, bounds, speculative, dup_bindings, path_span)\n-    )]\n+    #[instrument(level = \"debug\", skip(self, bounds, speculative, dup_bindings, path_span))]\n     fn add_predicates_for_ast_type_binding(\n         &self,\n         hir_ref_id: hir::HirId,\n@@ -2599,7 +2596,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n     /// Turns a `hir::Ty` into a `Ty`. For diagnostics' purposes we keep track of whether trait\n     /// objects are borrowed like `&dyn Trait` to avoid emitting redundant errors.\n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn ast_ty_to_ty_inner(&self, ast_ty: &hir::Ty<'_>, borrowed: bool, in_path: bool) -> Ty<'tcx> {\n         let tcx = self.tcx();\n "}, {"sha": "b6bc244d2b14447a5c3d4a96c942a87f8ca0f58a", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -1308,7 +1308,7 @@ fn compare_type_predicate_entailment<'tcx>(\n /// For default associated types the normalization is not possible (the value\n /// from the impl could be overridden). We also can't normalize generic\n /// associated types (yet) because they contain bound parameters.\n-#[tracing::instrument(level = \"debug\", skip(tcx))]\n+#[instrument(level = \"debug\", skip(tcx))]\n pub fn check_type_bounds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     trait_ty: &ty::AssocItem,"}, {"sha": "b9054898a2e579174a748a275146d570d0074449", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -130,7 +130,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ///\n     /// N.B., this code relies on `self.diverges` to be accurate. In particular, assignments to `!`\n     /// will be permitted if the diverges flag is currently \"always\".\n-    #[tracing::instrument(level = \"debug\", skip(self, expr, expected_ty_expr, allow_two_phase))]\n+    #[instrument(level = \"debug\", skip(self, expr, expected_ty_expr, allow_two_phase))]\n     pub fn demand_coerce_diag(\n         &self,\n         expr: &hir::Expr<'tcx>,"}, {"sha": "63cdf2cc1f0c9ea1ae8405d5f4d6881923e0a4e8", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -1405,7 +1405,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         })\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self, code, span, def_id, substs))]\n+    #[instrument(level = \"debug\", skip(self, code, span, def_id, substs))]\n     fn add_required_obligations_with_code(\n         &self,\n         span: Span,"}, {"sha": "86cf12d224047a664cef7b1942e4da58b09f64fd", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "patch": "@@ -972,7 +972,7 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n     }\n }\n \n-#[tracing::instrument(level = \"debug\", skip(tcx, span, sig_if_method))]\n+#[instrument(level = \"debug\", skip(tcx, span, sig_if_method))]\n fn check_associated_item(\n     tcx: TyCtxt<'_>,\n     item_id: LocalDefId,\n@@ -1225,7 +1225,7 @@ fn check_item_type(tcx: TyCtxt<'_>, item_id: LocalDefId, ty_span: Span, allow_fo\n     });\n }\n \n-#[tracing::instrument(level = \"debug\", skip(tcx, ast_self_ty, ast_trait_ref))]\n+#[instrument(level = \"debug\", skip(tcx, ast_self_ty, ast_trait_ref))]\n fn check_impl<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     item: &'tcx hir::Item<'tcx>,\n@@ -1472,7 +1472,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n     wfcx.register_obligations(obligations);\n }\n \n-#[tracing::instrument(level = \"debug\", skip(wfcx, span, hir_decl))]\n+#[instrument(level = \"debug\", skip(wfcx, span, hir_decl))]\n fn check_fn_or_method<'tcx>(\n     wfcx: &WfCheckingCtxt<'_, 'tcx>,\n     span: Span,\n@@ -1536,7 +1536,7 @@ const HELP_FOR_SELF_TYPE: &str = \"consider changing to `self`, `&self`, `&mut se\n      `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one \\\n      of the previous types except `Self`)\";\n \n-#[tracing::instrument(level = \"debug\", skip(wfcx))]\n+#[instrument(level = \"debug\", skip(wfcx))]\n fn check_method_receiver<'tcx>(\n     wfcx: &WfCheckingCtxt<'_, 'tcx>,\n     fn_sig: &hir::FnSig<'_>,"}]}