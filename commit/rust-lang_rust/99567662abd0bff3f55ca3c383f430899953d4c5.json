{"sha": "99567662abd0bff3f55ca3c383f430899953d4c5", "node_id": "C_kwDOAAsO6NoAKDk5NTY3NjYyYWJkMGJmZjNmNTVjYTNjMzgzZjQzMDg5OTk1M2Q0YzU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-17T11:39:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-17T11:39:06Z"}, "message": "Rollup merge of #107956 - KittyBorgX:master, r=ozkanonur\n\nCopy `bin/*` and `lib/*.dylib` files to `stage0-sysroot`\n\nFixes #101691", "tree": {"sha": "fed05f191a9a1fef88612f18c2575fbb23c1f83f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fed05f191a9a1fef88612f18c2575fbb23c1f83f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99567662abd0bff3f55ca3c383f430899953d4c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj72daCRBK7hj4Ov3rIwAAq64IAJWLyQm1Cxec7hevUxx11LpO\nxC2MGzxNLFu/eQRYeR6jzONtjmPqryHiu8NWT7Zx9rbFhZmJPwrGb7S6M1QGG3+j\nWUGfPRAVW7HvgYX2x2g/OP44RU09JvRSuThStiaUKVoEyESg7/uY/nVy4c8YaGEg\niJfAHrnQ0yHE8K6tTDd4Hdvd/EwBEKdAG1mW17YjbyA1jBCrzIQuZwT6VA65TVYX\nVO0iOIQ4f7nJVULZziabN2I+bEOvckp/rHzETYqfRTVplT/suqdDPBXkKP5v4QPp\nF6mVpGNB0Mxr73ZAB7kNyXR3YqqpLfz5emrbb6kyLG1KTZCCn1HLO5yMrXa86rY=\n=va8I\n-----END PGP SIGNATURE-----\n", "payload": "tree fed05f191a9a1fef88612f18c2575fbb23c1f83f\nparent e0aa5613d818085a6511265abfdd445802c4d0ba\nparent 6990ab9ad2cde9b67073ffac29ffecc2be8e722f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676633946 +0100\ncommitter GitHub <noreply@github.com> 1676633946 +0100\n\nRollup merge of #107956 - KittyBorgX:master, r=ozkanonur\n\nCopy `bin/*` and `lib/*.dylib` files to `stage0-sysroot`\n\nFixes #101691\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99567662abd0bff3f55ca3c383f430899953d4c5", "html_url": "https://github.com/rust-lang/rust/commit/99567662abd0bff3f55ca3c383f430899953d4c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99567662abd0bff3f55ca3c383f430899953d4c5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0aa5613d818085a6511265abfdd445802c4d0ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0aa5613d818085a6511265abfdd445802c4d0ba", "html_url": "https://github.com/rust-lang/rust/commit/e0aa5613d818085a6511265abfdd445802c4d0ba"}, {"sha": "6990ab9ad2cde9b67073ffac29ffecc2be8e722f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6990ab9ad2cde9b67073ffac29ffecc2be8e722f", "html_url": "https://github.com/rust-lang/rust/commit/6990ab9ad2cde9b67073ffac29ffecc2be8e722f"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "97a1102e3c576dc20e6ce21aefe30a5f61dcdfcb", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/99567662abd0bff3f55ca3c383f430899953d4c5/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99567662abd0bff3f55ca3c383f430899953d4c5/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=99567662abd0bff3f55ca3c383f430899953d4c5", "patch": "@@ -445,6 +445,72 @@ impl Step for StdLink {\n         let libdir = builder.sysroot_libdir(target_compiler, target);\n         let hostdir = builder.sysroot_libdir(target_compiler, compiler.host);\n         add_to_sysroot(builder, &libdir, &hostdir, &libstd_stamp(builder, compiler, target));\n+\n+        if compiler.stage == 0 {\n+            // special handling for stage0, to make `rustup toolchain link` and `x dist --stage 0`\n+            // work for stage0-sysroot\n+            let sysroot = builder.out.join(&compiler.host.triple).join(\"stage0-sysroot\");\n+\n+            let host_lib_dir = builder.initial_rustc.ancestors().nth(2).unwrap().join(\"lib\");\n+            let host_bin_dir = builder.out.join(&builder.initial_rustc.parent().unwrap());\n+            let host_codegen_backends =\n+                host_lib_dir.join(\"rustlib\").join(&compiler.host.triple).join(\"codegen-backends\");\n+            let sysroot_bin_dir = sysroot.join(\"bin\");\n+            let sysroot_lib_dir = sysroot.join(\"lib\");\n+            let sysroot_codegen_backends = builder.sysroot_codegen_backends(compiler);\n+\n+            // Create the `bin` directory in stage0-sysroot\n+            t!(fs::create_dir_all(&sysroot_bin_dir));\n+\n+            // copy bin files from `builder.initial_rustc/./` to `stage0-sysroot/bin`\n+            if let Ok(files) = fs::read_dir(&host_bin_dir) {\n+                for file in files {\n+                    let file = t!(file);\n+                    if file.file_name() == \"rustfmt\" {\n+                        // This is when `rustc` and `cargo` are set in `config.toml`\n+                        if !file.path().starts_with(&builder.out) {\n+                            builder.copy(\n+                                &file.path().into_boxed_path(),\n+                                &sysroot_bin_dir.join(file.file_name()),\n+                            );\n+                        } else {\n+                            builder.copy(\n+                                &builder\n+                                    .out\n+                                    .join(&compiler.host.triple)\n+                                    .join(\"rustfmt/bin/rustfmt\"),\n+                                &sysroot_bin_dir.join(file.file_name()),\n+                            );\n+                        }\n+                    } else {\n+                        builder.copy(\n+                            &file.path().into_boxed_path(),\n+                            &sysroot_bin_dir.join(file.file_name()),\n+                        );\n+                    }\n+                }\n+            }\n+\n+            // copy dylib files from `builder.initial_rustc/../lib/*` while excluding the `rustlib` directory to `stage0-sysroot/lib`\n+            if let Ok(files) = fs::read_dir(&host_lib_dir) {\n+                for file in files {\n+                    let file = t!(file);\n+                    let path = file.path();\n+                    if path.is_file()\n+                        && is_dylib(&file.file_name().into_string().unwrap())\n+                        && !path.starts_with(sysroot_lib_dir.join(\"rustlib\").into_boxed_path())\n+                    {\n+                        builder.copy(&path, &sysroot_lib_dir.join(path.file_name().unwrap()));\n+                    }\n+                }\n+            }\n+\n+            t!(fs::create_dir_all(&sysroot_codegen_backends));\n+            // copy `codegen-backends` from `host_lib_dir/rustlib/codegen_backends` to `stage0-sysroot/lib/rustlib/host-triple/codegen-backends` if it exists.\n+            if host_codegen_backends.exists() {\n+                builder.cp_r(&host_codegen_backends, &sysroot_codegen_backends);\n+            }\n+        }\n     }\n }\n "}]}