{"sha": "b4139d54fc68240aa8e4e221841298115d8fb00f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MTM5ZDU0ZmM2ODI0MGFhOGU0ZTIyMTg0MTI5ODExNWQ4ZmIwMGY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-23T11:54:53Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-23T12:48:04Z"}, "message": "Get rid of the terrible nesting in PathExpr inference", "tree": {"sha": "84ec2db68ba83ea2c511b5ba9ea74b8e3e099ee8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84ec2db68ba83ea2c511b5ba9ea74b8e3e099ee8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4139d54fc68240aa8e4e221841298115d8fb00f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4139d54fc68240aa8e4e221841298115d8fb00f", "html_url": "https://github.com/rust-lang/rust/commit/b4139d54fc68240aa8e4e221841298115d8fb00f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4139d54fc68240aa8e4e221841298115d8fb00f/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "515c3bc59bfc227cbbb82f80b53c5c125be4fc30", "url": "https://api.github.com/repos/rust-lang/rust/commits/515c3bc59bfc227cbbb82f80b53c5c125be4fc30", "html_url": "https://github.com/rust-lang/rust/commit/515c3bc59bfc227cbbb82f80b53c5c125be4fc30"}], "stats": {"total": 40, "additions": 14, "deletions": 26}, "files": [{"sha": "1d5473d17aeda28b9fee16f482229e18924525c7", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 14, "deletions": 26, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b4139d54fc68240aa8e4e221841298115d8fb00f/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4139d54fc68240aa8e4e221841298115d8fb00f/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=b4139d54fc68240aa8e4e221841298115d8fb00f", "patch": "@@ -247,6 +247,19 @@ impl InferenceContext {\n         unimplemented!()\n     }\n \n+    fn infer_path_expr(&mut self, expr: ast::PathExpr) -> Option<Ty> {\n+        let p = expr.path()?;\n+        if p.qualifier().is_none() {\n+            let name = p.segment().and_then(|s| s.name_ref())?;\n+            let scope_entry = self.scopes.resolve_local_name(name)?;\n+            let ty = self.type_for.get(&scope_entry.ptr())?;\n+            Some(ty.clone())\n+        } else {\n+            // TODO resolve path\n+            Some(Ty::Unknown)\n+        }\n+    }\n+\n     fn infer_expr(&mut self, expr: ast::Expr) -> Ty {\n         let ty = match expr {\n             ast::Expr::IfExpr(e) => {\n@@ -367,32 +380,7 @@ impl InferenceContext {\n             }\n             ast::Expr::TupleExpr(_e) => Ty::Unknown,\n             ast::Expr::ArrayExpr(_e) => Ty::Unknown,\n-            ast::Expr::PathExpr(e) => {\n-                if let Some(p) = e.path() {\n-                    if p.qualifier().is_none() {\n-                        if let Some(name) = p.segment().and_then(|s| s.name_ref()) {\n-                            let s = self.scopes.resolve_local_name(name);\n-                            if let Some(scope_entry) = s {\n-                                if let Some(ty) = self.type_for.get(&scope_entry.ptr()) {\n-                                    ty.clone()\n-                                } else {\n-                                    // TODO introduce type variable?\n-                                    Ty::Unknown\n-                                }\n-                            } else {\n-                                Ty::Unknown\n-                            }\n-                        } else {\n-                            Ty::Unknown\n-                        }\n-                    } else {\n-                        // TODO resolve path\n-                        Ty::Unknown\n-                    }\n-                } else {\n-                    Ty::Unknown\n-                }\n-            }\n+            ast::Expr::PathExpr(e) => self.infer_path_expr(e).unwrap_or(Ty::Unknown),\n             ast::Expr::ContinueExpr(_e) => Ty::Never,\n             ast::Expr::BreakExpr(_e) => Ty::Never,\n             ast::Expr::ParenExpr(e) => {"}]}