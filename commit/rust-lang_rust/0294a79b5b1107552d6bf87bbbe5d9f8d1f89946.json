{"sha": "0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyOTRhNzliNWIxMTA3NTUyZDZiZjg3YmJiZTVkOWY4ZDFmODk5NDY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-02-01T02:20:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-01T02:20:11Z"}, "message": "Merge pull request #2384 from topecongiro/init-shorthand\n\nUse field initialization shorthand if possible", "tree": {"sha": "76eaff01c12b27c75cd723e395d50cb18f39e259", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76eaff01c12b27c75cd723e395d50cb18f39e259"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJacnlbCRBK7hj4Ov3rIwAAdHIIALFGmux0hFKCwSKGd8jZ50eh\nvEvY4iJyxpy65pKZa2LpHjekYJs20vZtCHypoJWH3Q6LKYuKPfRJCvguYUfoKsSW\nv3YzQMsaYjDG79nTSMvZ8TB70vpX7JkmMKEOPHSs0p0DrnWdq5+9nfkn5tyDlqhD\nY9/5U5eDzkPsh3nlqlUYzKv+mMR5nYG45gaSEajGOo9J/sATGrm/qCwUblePKTn2\nMvpSdxOAj+7EniwEFAYblEE6vMdlZuRxOJok4bvWMvdFGM4p13vZmDn/y+bTIjZo\nvn1dRmQZm5o3UbwSqJA/kPtO2muQdFLL/me+J3vaEVeGQI+U0fpcY6PBF07uJ9Y=\n=WFM4\n-----END PGP SIGNATURE-----\n", "payload": "tree 76eaff01c12b27c75cd723e395d50cb18f39e259\nparent 918e79bb5a888ae58214aa83344942c5161574b8\nparent b7f01769f9327177fd2373b5b3e2c416633fba12\nauthor Nick Cameron <nrc@ncameron.org> 1517451611 +1300\ncommitter GitHub <noreply@github.com> 1517451611 +1300\n\nMerge pull request #2384 from topecongiro/init-shorthand\n\nUse field initialization shorthand if possible"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "html_url": "https://github.com/rust-lang/rust/commit/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "918e79bb5a888ae58214aa83344942c5161574b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/918e79bb5a888ae58214aa83344942c5161574b8", "html_url": "https://github.com/rust-lang/rust/commit/918e79bb5a888ae58214aa83344942c5161574b8"}, {"sha": "b7f01769f9327177fd2373b5b3e2c416633fba12", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f01769f9327177fd2373b5b3e2c416633fba12", "html_url": "https://github.com/rust-lang/rust/commit/b7f01769f9327177fd2373b5b3e2c416633fba12"}], "stats": {"total": 325, "additions": 218, "deletions": 107}, "files": [{"sha": "e35f0e48f816e44f0d821c772f684093164203ec", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -4,6 +4,7 @@\n \n ### Added\n \n+- Add `use_field_init_shorthand` config option.\n - Add `reorder_modules` configuration option.\n \n ## [0.3.6] 2018-01-18"}, {"sha": "369e1ddfff765b4d762555ab0986a45a6a0331e5", "filename": "Configurations.md", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -1781,6 +1781,48 @@ fn lorem<Ipsum: Dolor+Sit=Amet>() {\n }\n ```\n \n+## `use_field_init_shorthand`\n+\n+Use field initialize shorthand if possible.\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+- **Stable**: No\n+\n+#### `false` (default):\n+\n+```rust\n+struct Foo {\n+    x: u32,\n+    y: u32,\n+    z: u32,\n+}\n+\n+fn main() {\n+    let x = 1;\n+    let y = 2;\n+    let z = 3;\n+    let a = Foo { x: x, y: y, z: z };\n+}\n+```\n+\n+#### `true`:\n+\n+```rust\n+struct Foo {\n+    x: u32,\n+    y: u32,\n+    z: u32,\n+}\n+\n+fn main() {\n+    let x = 1;\n+    let y = 2;\n+    let z = 3;\n+    let a = Foo { x, y, z };\n+}\n+```\n+\n ## `use_try_shorthand`\n \n Replace uses of the try! macro by the ? shorthand"}, {"sha": "214c02f95a5ebf4eee5c83a638029c66353dfe67", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -453,7 +453,7 @@ fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n \n         return Ok(Operation::Stdin {\n             input: buffer,\n-            config_path: config_path,\n+            config_path,\n         });\n     }\n \n@@ -469,8 +469,8 @@ fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n         .collect();\n \n     Ok(Operation::Format {\n-        files: files,\n-        config_path: config_path,\n-        minimal_config_path: minimal_config_path,\n+        files,\n+        config_path,\n+        minimal_config_path,\n     })\n }"}, {"sha": "61287543da91e384ab1ee94a1c98b7d664542854", "filename": "src/closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -254,7 +254,7 @@ fn rewrite_closure_fn_decl(\n     };\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: SeparatorTactic::Never,\n         separator_place: SeparatorPlace::Back,"}, {"sha": "9c0322bcaeb194cd040cf94069e996210ae21f60", "filename": "src/comment.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -290,11 +290,11 @@ fn rewrite_comment_inner(\n     let mut fmt = StringFormat {\n         opener: \"\",\n         closer: \"\",\n-        line_start: line_start,\n+        line_start,\n         line_end: \"\",\n         shape: Shape::legacy(max_chars, fmt_indent),\n         trim_end: true,\n-        config: config,\n+        config,\n     };\n \n     let line_breaks = count_newlines(orig.trim_right());\n@@ -900,7 +900,7 @@ pub struct CommentCodeSlices<'a> {\n impl<'a> CommentCodeSlices<'a> {\n     pub fn new(slice: &'a str) -> CommentCodeSlices<'a> {\n         CommentCodeSlices {\n-            slice: slice,\n+            slice,\n             last_slice_kind: CodeCharKind::Comment,\n             last_slice_end: 0,\n         }\n@@ -1024,7 +1024,7 @@ impl<'a> CommentReducer<'a> {\n         let is_block = comment.starts_with(\"/*\");\n         let comment = remove_comment_header(comment);\n         CommentReducer {\n-            is_block: is_block,\n+            is_block,\n             at_start_line: false, // There are no supplementary '*' on the first line\n             iter: comment.chars(),\n         }"}, {"sha": "c313f8e2aef5ea21af91c1d02f278c13b76d6bd0", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -674,6 +674,7 @@ create_config! {\n     condense_wildcard_suffixes: bool, false, false, \"Replace strings of _ wildcards by a single .. \\\n                                               in tuple patterns\";\n     force_explicit_abi: bool, true, true, \"Always print the abi for extern items\";\n+    use_field_init_shorthand: bool, false, false, \"Use field initialization shorthand if possible\";\n \n     // Control options (changes the operation of rustfmt, rather than the formatting)\n     write_mode: WriteMode, WriteMode::Overwrite, false,"}, {"sha": "fb873ee26d3d6dd5f23eb2d9855d2ea506d54a24", "filename": "src/expr.rs", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -449,7 +449,7 @@ pub fn rewrite_array<T: Rewrite + Spanned + ToExpr>(\n     let ends_with_newline = tactic.ends_with_newline(context.config.indent_style());\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: if trailing_comma {\n             SeparatorTactic::Always\n@@ -470,7 +470,7 @@ pub fn rewrite_array<T: Rewrite + Spanned + ToExpr>(\n         },\n         separator_place: SeparatorPlace::Back,\n         shape: nested_shape,\n-        ends_with_newline: ends_with_newline,\n+        ends_with_newline,\n         preserve_newline: false,\n         config: context.config,\n     };\n@@ -787,35 +787,35 @@ impl<'a> ControlFlow<'a> {\n     ) -> ControlFlow<'a> {\n         ControlFlow {\n             cond: Some(cond),\n-            block: block,\n-            else_block: else_block,\n+            block,\n+            else_block,\n             label: None,\n-            pat: pat,\n+            pat,\n             keyword: \"if\",\n             matcher: match pat {\n                 Some(..) => \"let\",\n                 None => \"\",\n             },\n             connector: \" =\",\n-            allow_single_line: allow_single_line,\n-            nested_if: nested_if,\n-            span: span,\n+            allow_single_line,\n+            nested_if,\n+            span,\n         }\n     }\n \n     fn new_loop(block: &'a ast::Block, label: Option<ast::Label>, span: Span) -> ControlFlow<'a> {\n         ControlFlow {\n             cond: None,\n-            block: block,\n+            block,\n             else_block: None,\n-            label: label,\n+            label,\n             pat: None,\n             keyword: \"loop\",\n             matcher: \"\",\n             connector: \"\",\n             allow_single_line: false,\n             nested_if: false,\n-            span: span,\n+            span,\n         }\n     }\n \n@@ -828,10 +828,10 @@ impl<'a> ControlFlow<'a> {\n     ) -> ControlFlow<'a> {\n         ControlFlow {\n             cond: Some(cond),\n-            block: block,\n+            block,\n             else_block: None,\n-            label: label,\n-            pat: pat,\n+            label,\n+            pat,\n             keyword: \"while\",\n             matcher: match pat {\n                 Some(..) => \"let\",\n@@ -840,7 +840,7 @@ impl<'a> ControlFlow<'a> {\n             connector: \" =\",\n             allow_single_line: false,\n             nested_if: false,\n-            span: span,\n+            span,\n         }\n     }\n \n@@ -853,16 +853,16 @@ impl<'a> ControlFlow<'a> {\n     ) -> ControlFlow<'a> {\n         ControlFlow {\n             cond: Some(cond),\n-            block: block,\n+            block,\n             else_block: None,\n-            label: label,\n+            label,\n             pat: Some(pat),\n             keyword: \"for\",\n             matcher: \"\",\n             connector: \" in\",\n             allow_single_line: false,\n             nested_if: false,\n-            span: span,\n+            span,\n         }\n     }\n \n@@ -1488,7 +1488,7 @@ fn rewrite_match_pattern(\n         )\n     };\n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \" |\",\n         trailing_separator: SeparatorTactic::Never,\n         separator_place: context.config.binop_separator(),\n@@ -1992,7 +1992,7 @@ where\n     );\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: if force_trailing_comma {\n             SeparatorTactic::Always\n@@ -2569,9 +2569,13 @@ pub fn rewrite_field(\n     if contains_skip(&field.attrs) {\n         return Some(context.snippet(field.span()).to_owned());\n     }\n-    let name = &field.ident.node.to_string();\n+    let mut attrs_str = field.attrs.rewrite(context, shape)?;\n+    if !attrs_str.is_empty() {\n+        attrs_str.push_str(&format!(\"\\n{}\", shape.indent.to_string(context.config)));\n+    };\n+    let name = field.ident.node.to_string();\n     if field.is_shorthand {\n-        Some(name.to_string())\n+        Some(attrs_str + &name)\n     } else {\n         let mut separator = String::from(struct_lit_field_separator(context.config));\n         for _ in 0..prefix_max_width.checked_sub(name.len()).unwrap_or(0) {\n@@ -2581,12 +2585,10 @@ pub fn rewrite_field(\n         let expr_shape = shape.offset_left(overhead)?;\n         let expr = field.expr.rewrite(context, expr_shape);\n \n-        let mut attrs_str = field.attrs.rewrite(context, shape)?;\n-        if !attrs_str.is_empty() {\n-            attrs_str.push_str(&format!(\"\\n{}\", shape.indent.to_string(context.config)));\n-        };\n-\n         match expr {\n+            Some(ref e) if e.as_str() == name && context.config.use_field_init_shorthand() => {\n+                Some(attrs_str + &name)\n+            }\n             Some(e) => Some(format!(\"{}{}{}{}\", attrs_str, name, separator, e)),\n             None => {\n                 let expr_offset = shape.indent.block_indent(context.config);\n@@ -2675,11 +2677,11 @@ where\n         nested_shape.width,\n     );\n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: SeparatorTactic::Never,\n         separator_place: SeparatorPlace::Back,\n-        shape: shape,\n+        shape,\n         ends_with_newline: false,\n         preserve_newline: false,\n         config: context.config,"}, {"sha": "028c631b1b97eed86216efbf096e8b06b3d9858a", "filename": "src/file_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -34,7 +34,7 @@ impl<'a> From<&'a LineRange> for Range {\n \n impl Range {\n     pub fn new(lo: usize, hi: usize) -> Range {\n-        Range { lo: lo, hi: hi }\n+        Range { lo, hi }\n     }\n \n     fn is_empty(self) -> bool {"}, {"sha": "3818fd21950e126f959ad947d635dd06d67b35bd", "filename": "src/imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -299,7 +299,7 @@ fn rewrite_imports(\n         separator: \"\",\n         trailing_separator: SeparatorTactic::Never,\n         separator_place: SeparatorPlace::Back,\n-        shape: shape,\n+        shape,\n         ends_with_newline: true,\n         preserve_newline: false,\n         config: context.config,\n@@ -552,7 +552,7 @@ fn rewrite_nested_use_tree(\n         && tactic != DefinitiveListTactic::Horizontal;\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: if ends_with_newline {\n             context.config.trailing_comma()\n@@ -561,7 +561,7 @@ fn rewrite_nested_use_tree(\n         },\n         separator_place: SeparatorPlace::Back,\n         shape: nested_shape,\n-        ends_with_newline: ends_with_newline,\n+        ends_with_newline,\n         preserve_newline: true,\n         config: context.config,\n     };"}, {"sha": "2efd61a3d7d458851c4f05770134a368b15264b9", "filename": "src/issues.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -90,8 +90,8 @@ impl BadIssueSeeker {\n                 todo_idx: 0,\n                 fixme_idx: 0,\n             },\n-            report_todo: report_todo,\n-            report_fixme: report_fixme,\n+            report_todo,\n+            report_fixme,\n         }\n     }\n \n@@ -169,8 +169,8 @@ impl BadIssueSeeker {\n         }\n \n         Seeking::Issue {\n-            todo_idx: todo_idx,\n-            fixme_idx: fixme_idx,\n+            todo_idx,\n+            fixme_idx,\n         }\n     }\n \n@@ -213,10 +213,7 @@ impl BadIssueSeeker {\n             NumberPart::CloseParen => {}\n         }\n \n-        self.state = Seeking::Number {\n-            part: part,\n-            issue: issue,\n-        };\n+        self.state = Seeking::Number { part, issue };\n \n         IssueClassification::None\n     }"}, {"sha": "510c96681b8846d4484acd85e593555c1f8d4586", "filename": "src/items.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -138,7 +138,7 @@ impl<'a> Item<'a> {\n                 .iter()\n                 .map(|i| BodyElement::ForeignItem(i))\n                 .collect(),\n-            span: span,\n+            span,\n         }\n     }\n }\n@@ -169,8 +169,8 @@ impl<'a> FnSig<'a> {\n         vis: ast::Visibility,\n     ) -> FnSig<'a> {\n         FnSig {\n-            decl: decl,\n-            generics: generics,\n+            decl,\n+            generics,\n             abi: abi::Abi::Rust,\n             constness: ast::Constness::NotConst,\n             defaultness: ast::Defaultness::Final,\n@@ -189,7 +189,7 @@ impl<'a> FnSig<'a> {\n             defaultness: ast::Defaultness::Final,\n             abi: method_sig.abi,\n             decl: &*method_sig.decl,\n-            generics: generics,\n+            generics,\n             visibility: ast::Visibility::Inherited,\n         }\n     }\n@@ -202,12 +202,12 @@ impl<'a> FnSig<'a> {\n     ) -> FnSig<'a> {\n         match *fn_kind {\n             visit::FnKind::ItemFn(_, unsafety, constness, abi, visibility, _) => FnSig {\n-                decl: decl,\n-                generics: generics,\n-                abi: abi,\n+                decl,\n+                generics,\n+                abi,\n                 constness: constness.node,\n                 defaultness: defualtness,\n-                unsafety: unsafety,\n+                unsafety,\n                 visibility: visibility.clone(),\n             },\n             visit::FnKind::Method(_, method_sig, vis, _) => {\n@@ -510,7 +510,7 @@ impl<'a> FmtVisitor<'a> {\n             separator: \",\",\n             trailing_separator: self.config.trailing_comma(),\n             separator_place: SeparatorPlace::Back,\n-            shape: shape,\n+            shape,\n             ends_with_newline: true,\n             preserve_newline: true,\n             config: self.config,\n@@ -888,10 +888,10 @@ impl<'a> StructParts<'a> {\n             _ => unreachable!(),\n         };\n         StructParts {\n-            prefix: prefix,\n+            prefix,\n             ident: item.ident,\n             vis: &item.vis,\n-            def: def,\n+            def,\n             generics: Some(generics),\n             span: item.span,\n         }\n@@ -1502,11 +1502,11 @@ impl<'a> StaticParts<'a> {\n             _ => unreachable!(),\n         };\n         StaticParts {\n-            prefix: prefix,\n+            prefix,\n             vis: &item.vis,\n             ident: item.ident,\n-            ty: ty,\n-            mutability: mutability,\n+            ty,\n+            mutability,\n             expr_opt: Some(expr),\n             defaultness: None,\n             span: item.span,\n@@ -1522,7 +1522,7 @@ impl<'a> StaticParts<'a> {\n             prefix: \"const\",\n             vis: &ast::Visibility::Inherited,\n             ident: ti.ident,\n-            ty: ty,\n+            ty,\n             mutability: ast::Mutability::Immutable,\n             expr_opt: expr_opt.as_ref(),\n             defaultness: None,\n@@ -1539,7 +1539,7 @@ impl<'a> StaticParts<'a> {\n             prefix: \"const\",\n             vis: &ii.vis,\n             ident: ii.ident,\n-            ty: ty,\n+            ty,\n             mutability: ast::Mutability::Immutable,\n             expr_opt: Some(expr),\n             defaultness: Some(ii.defaultness),\n@@ -1811,7 +1811,7 @@ fn rewrite_fn_base(\n     let one_line_budget = context.budget(used_width + overhead);\n     let shape = Shape {\n         width: one_line_budget,\n-        indent: indent,\n+        indent,\n         offset: used_width,\n     };\n     let fd = fn_sig.decl;\n@@ -2078,8 +2078,8 @@ struct WhereClauseOption {\n impl WhereClauseOption {\n     pub fn new(suppress_comma: bool, snuggle: bool) -> WhereClauseOption {\n         WhereClauseOption {\n-            suppress_comma: suppress_comma,\n-            snuggle: snuggle,\n+            suppress_comma,\n+            snuggle,\n             compress_where: false,\n         }\n     }\n@@ -2226,7 +2226,7 @@ fn rewrite_args(\n     debug!(\"rewrite_args: budget: {}, tactic: {:?}\", budget, tactic);\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: if variadic {\n             SeparatorTactic::Never\n@@ -2397,15 +2397,15 @@ where\n         one_line_budget,\n     );\n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: if context.config.indent_style() == IndentStyle::Visual {\n             SeparatorTactic::Never\n         } else {\n             context.config.trailing_comma()\n         },\n         separator_place: SeparatorPlace::Back,\n-        shape: shape,\n+        shape,\n         ends_with_newline: tactic.ends_with_newline(context.config.indent_style()),\n         preserve_newline: true,\n         config: context.config,\n@@ -2630,7 +2630,7 @@ fn rewrite_where_clause(\n     }\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: comma_tactic,\n         separator_place: SeparatorPlace::Back,"}, {"sha": "fb2f5ca5fa63abafecb173ad3a7ff5f4187f12d9", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -449,7 +449,7 @@ fn format_lines(\n                         line: cur_line,\n                         kind: error_kind,\n                         is_comment: kind.is_comment(),\n-                        is_string: is_string,\n+                        is_string,\n                         line_buffer: line_buffer.clone(),\n                     });\n                 }"}, {"sha": "aa1e0b430ef745b851ad3ae0d42871dc128d24d7", "filename": "src/lists.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -690,15 +690,15 @@ where\n             };\n \n             ListItem {\n-                pre_comment: pre_comment,\n-                pre_comment_style: pre_comment_style,\n+                pre_comment,\n+                pre_comment_style,\n                 item: if self.inner.peek().is_none() && self.leave_last {\n                     None\n                 } else {\n                     (self.get_item_string)(&item)\n                 },\n-                post_comment: post_comment,\n-                new_lines: new_lines,\n+                post_comment,\n+                new_lines,\n             }\n         })\n     }\n@@ -724,16 +724,16 @@ where\n     F3: Fn(&T) -> Option<String>,\n {\n     ListItems {\n-        codemap: codemap,\n+        codemap,\n         inner: inner.peekable(),\n-        get_lo: get_lo,\n-        get_hi: get_hi,\n-        get_item_string: get_item_string,\n-        prev_span_end: prev_span_end,\n-        next_span_start: next_span_start,\n-        terminator: terminator,\n-        separator: separator,\n-        leave_last: leave_last,\n+        get_lo,\n+        get_hi,\n+        get_item_string,\n+        prev_span_end,\n+        next_span_start,\n+        terminator,\n+        separator,\n+        leave_last,\n     }\n }\n \n@@ -841,16 +841,16 @@ pub fn struct_lit_formatting<'a>(\n     let ends_with_newline = context.config.indent_style() != IndentStyle::Visual\n         && tactic == DefinitiveListTactic::Vertical;\n     ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: if force_no_trailing_comma {\n             SeparatorTactic::Never\n         } else {\n             context.config.trailing_comma()\n         },\n         separator_place: SeparatorPlace::Back,\n-        shape: shape,\n-        ends_with_newline: ends_with_newline,\n+        shape,\n+        ends_with_newline,\n         preserve_newline: true,\n         config: context.config,\n     }"}, {"sha": "1a2f570f89efdad8d2161db70107b51e7271d217", "filename": "src/rustfmt_diff.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustfmt_diff.rs?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -31,7 +31,7 @@ pub struct Mismatch {\n impl Mismatch {\n     fn new(line_number: u32) -> Mismatch {\n         Mismatch {\n-            line_number: line_number,\n+            line_number,\n             lines: Vec::new(),\n         }\n     }"}, {"sha": "8fe2e2b18c0b1e7b653a6ad485041fd0ffc1e98d", "filename": "src/shape.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshape.rs?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -29,8 +29,8 @@ const INDENT_BUFFER: &str =\n impl Indent {\n     pub fn new(block_indent: usize, alignment: usize) -> Indent {\n         Indent {\n-            block_indent: block_indent,\n-            alignment: alignment,\n+            block_indent,\n+            alignment,\n         }\n     }\n \n@@ -161,16 +161,16 @@ impl Shape {\n     //        |<--->|    width\n     pub fn legacy(width: usize, indent: Indent) -> Shape {\n         Shape {\n-            width: width,\n-            indent: indent,\n+            width,\n+            indent,\n             offset: indent.alignment,\n         }\n     }\n \n     pub fn indented(indent: Indent, config: &Config) -> Shape {\n         Shape {\n             width: config.max_width().checked_sub(indent.width()).unwrap_or(0),\n-            indent: indent,\n+            indent,\n             offset: indent.alignment,\n         }\n     }\n@@ -187,9 +187,9 @@ impl Shape {\n \n     pub fn offset(width: usize, indent: Indent, offset: usize) -> Shape {\n         Shape {\n-            width: width,\n-            indent: indent,\n-            offset: offset,\n+            width,\n+            indent,\n+            offset,\n         }\n     }\n "}, {"sha": "2386d90ec8af8e581f19f862b74f4d7530d638fb", "filename": "src/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -36,9 +36,9 @@ impl<'a> StringFormat<'a> {\n             closer: \"\\\"\",\n             line_start: \" \",\n             line_end: \"\\\\\",\n-            shape: shape,\n+            shape,\n             trim_end: false,\n-            config: config,\n+            config,\n         }\n     }\n }"}, {"sha": "a7472567a81bc246d2f02f18c30b9b039e945736", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -352,7 +352,7 @@ where\n     );\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: if !context.use_block_indent() || variadic {\n             SeparatorTactic::Never"}, {"sha": "2ccb5d813393dab95be3a5ea60bb5f9919423a35", "filename": "src/vertical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -247,7 +247,7 @@ fn rewrite_aligned_items_inner<T: AlignedItem>(\n     );\n \n     let fmt = ListFormatting {\n-        tactic: tactic,\n+        tactic,\n         separator: \",\",\n         trailing_separator: context.config.trailing_comma(),\n         separator_place: SeparatorPlace::Back,"}, {"sha": "75e7c0be254b27b021e6dcbc87503cee370437b8", "filename": "src/visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -591,14 +591,14 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         snippet_provider: &'a SnippetProvider,\n     ) -> FmtVisitor<'a> {\n         FmtVisitor {\n-            parse_session: parse_session,\n+            parse_session,\n             codemap: parse_session.codemap(),\n             buffer: String::with_capacity(snippet_provider.big_snippet.len() * 2),\n             last_pos: BytePos(0),\n             block_indent: Indent::empty(),\n-            config: config,\n+            config,\n             is_if_else_block: false,\n-            snippet_provider: snippet_provider,\n+            snippet_provider,\n             line_number: 0,\n             skipped_range: vec![],\n         }"}, {"sha": "16ce740f1b9d625a40a902003449471166b4816c", "filename": "tests/source/configs/use_field_init_shorthand/false.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/tests%2Fsource%2Fconfigs%2Fuse_field_init_shorthand%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/tests%2Fsource%2Fconfigs%2Fuse_field_init_shorthand%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fuse_field_init_shorthand%2Ffalse.rs?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -0,0 +1,19 @@\n+// rustfmt-use_field_init_shorthand: false\n+// Use field initialization shorthand if possible.\n+\n+fn main() {\n+    let a = Foo {\n+        x: x,\n+        y: y,\n+        z: z,\n+    };\n+\n+    let b = Bar {\n+        x: x,\n+        y: y,\n+        #[attr]\n+        z: z,\n+        #[rustfmt_skip]\n+        skipped: skipped,\n+    };\n+}"}, {"sha": "1e36c6cff354df5047f8e2c00ea6a0a60a5020a4", "filename": "tests/source/configs/use_field_init_shorthand/true.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/tests%2Fsource%2Fconfigs%2Fuse_field_init_shorthand%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/tests%2Fsource%2Fconfigs%2Fuse_field_init_shorthand%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fuse_field_init_shorthand%2Ftrue.rs?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -0,0 +1,19 @@\n+// rustfmt-use_field_init_shorthand: true\n+// Use field initialization shorthand if possible.\n+\n+fn main() {\n+    let a = Foo {\n+        x: x,\n+        y: y,\n+        z: z,\n+    };\n+\n+    let b = Bar {\n+        x: x,\n+        y: y,\n+        #[attr]\n+        z: z,\n+        #[rustfmt_skip]\n+        skipped: skipped,\n+    };\n+}"}, {"sha": "dcebe0b6f1d23ee55607d4ba7566ca396db09c00", "filename": "tests/target/configs/use_field_init_shorthand/false.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/tests%2Ftarget%2Fconfigs%2Fuse_field_init_shorthand%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/tests%2Ftarget%2Fconfigs%2Fuse_field_init_shorthand%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fuse_field_init_shorthand%2Ffalse.rs?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -0,0 +1,15 @@\n+// rustfmt-use_field_init_shorthand: false\n+// Use field initialization shorthand if possible.\n+\n+fn main() {\n+    let a = Foo { x: x, y: y, z: z };\n+\n+    let b = Bar {\n+        x: x,\n+        y: y,\n+        #[attr]\n+        z: z,\n+        #[rustfmt_skip]\n+        skipped: skipped,\n+    };\n+}"}, {"sha": "ad78093ee8e6e2dffb27416f73f1409e297a844e", "filename": "tests/target/configs/use_field_init_shorthand/true.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/tests%2Ftarget%2Fconfigs%2Fuse_field_init_shorthand%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/tests%2Ftarget%2Fconfigs%2Fuse_field_init_shorthand%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fuse_field_init_shorthand%2Ftrue.rs?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -0,0 +1,15 @@\n+// rustfmt-use_field_init_shorthand: true\n+// Use field initialization shorthand if possible.\n+\n+fn main() {\n+    let a = Foo { x, y, z };\n+\n+    let b = Bar {\n+        x,\n+        y,\n+        #[attr]\n+        z,\n+        #[rustfmt_skip]\n+        skipped: skipped,\n+    };\n+}"}, {"sha": "5895c74bcc9f1d5dcff6a118e8778ac25c0e6fa8", "filename": "tests/target/impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/tests%2Ftarget%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0294a79b5b1107552d6bf87bbbe5d9f8d1f89946/tests%2Ftarget%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimpl.rs?ref=0294a79b5b1107552d6bf87bbbe5d9f8d1f89946", "patch": "@@ -13,7 +13,7 @@ where\n     pub fn new(value: V) -> Self {\n         Test {\n             cloned_value: value.clone(),\n-            value: value,\n+            value,\n         }\n     }\n }"}]}