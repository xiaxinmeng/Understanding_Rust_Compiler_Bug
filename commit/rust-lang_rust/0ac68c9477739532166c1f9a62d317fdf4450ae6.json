{"sha": "0ac68c9477739532166c1f9a62d317fdf4450ae6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYzY4Yzk0Nzc3Mzk1MzIxNjZjMWY5YTYyZDMxN2ZkZjQ0NTBhZTY=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-10-12T15:41:17Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-10-12T15:42:25Z"}, "message": "Do not add parens around lifetimes\n\nParens should be added only around trait objects.", "tree": {"sha": "e4cbd539339c49038bf74a5ebf502e1064a7346b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4cbd539339c49038bf74a5ebf502e1064a7346b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ac68c9477739532166c1f9a62d317fdf4450ae6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac68c9477739532166c1f9a62d317fdf4450ae6", "html_url": "https://github.com/rust-lang/rust/commit/0ac68c9477739532166c1f9a62d317fdf4450ae6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ac68c9477739532166c1f9a62d317fdf4450ae6/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b33043e060460f799f60324e05c8b87b721943c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b33043e060460f799f60324e05c8b87b721943c", "html_url": "https://github.com/rust-lang/rust/commit/6b33043e060460f799f60324e05c8b87b721943c"}], "stats": {"total": 54, "additions": 44, "deletions": 10}, "files": [{"sha": "d5010314b57175c7072500200cff153e38f67be7", "filename": "src/types.rs", "status": "modified", "additions": 44, "deletions": 10, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0ac68c9477739532166c1f9a62d317fdf4450ae6/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac68c9477739532166c1f9a62d317fdf4450ae6/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=0ac68c9477739532166c1f9a62d317fdf4450ae6", "patch": "@@ -473,7 +473,7 @@ fn rewrite_bounded_lifetime(\n             \"{}{}{}\",\n             result,\n             colon,\n-            join_bounds(context, shape.sub_width(overhead)?, bounds, true)?\n+            join_bounds(context, shape.sub_width(overhead)?, bounds, true, false)?\n         );\n         Some(result)\n     }\n@@ -515,13 +515,7 @@ impl Rewrite for ast::GenericBounds {\n         } else {\n             shape\n         };\n-        join_bounds(context, bounds_shape, self, true).map(|s| {\n-            if has_paren {\n-                format!(\"({})\", s)\n-            } else {\n-                s\n-            }\n-        })\n+        join_bounds(context, bounds_shape, self, true, has_paren)\n     }\n }\n \n@@ -757,17 +751,47 @@ fn join_bounds(\n     shape: Shape,\n     items: &[ast::GenericBound],\n     need_indent: bool,\n+    has_paren: bool,\n ) -> Option<String> {\n+    debug_assert!(!items.is_empty());\n+\n     // Try to join types in a single line\n     let joiner = match context.config.type_punctuation_density() {\n         TypeDensity::Compressed => \"+\",\n         TypeDensity::Wide => \" + \",\n     };\n     let type_strs = items\n         .iter()\n-        .map(|item| item.rewrite(context, shape))\n+        .map(|item| {\n+            item.rewrite(\n+                context,\n+                if has_paren {\n+                    shape.sub_width(1)?.offset_left(1)?\n+                } else {\n+                    shape\n+                },\n+            )\n+        })\n         .collect::<Option<Vec<_>>>()?;\n-    let result = type_strs.join(joiner);\n+    let mut result = String::with_capacity(128);\n+    let mut closing_paren = has_paren;\n+    if has_paren {\n+        result.push('(');\n+    }\n+    result.push_str(&type_strs[0]);\n+    if has_paren && type_strs.len() == 1 {\n+        result.push(')');\n+    }\n+    for (i, type_str) in type_strs[1..].iter().enumerate() {\n+        if closing_paren {\n+            if let ast::GenericBound::Outlives(..) = items[i + 1] {\n+                result.push(')');\n+                closing_paren = false;\n+            }\n+        }\n+        result.push_str(joiner);\n+        result.push_str(type_str);\n+    }\n     if items.len() <= 1 || (!result.contains('\\n') && result.len() <= shape.width) {\n         return Some(result);\n     }\n@@ -790,10 +814,20 @@ fn join_bounds(\n         ast::GenericBound::Trait(..) => last_line_extendable(s),\n     };\n     let mut result = String::with_capacity(128);\n+    let mut closing_paren = has_paren;\n+    if has_paren {\n+        result.push('(');\n+    }\n     result.push_str(&type_strs[0]);\n     let mut can_be_put_on_the_same_line = is_bound_extendable(&result, &items[0]);\n     let generic_bounds_in_order = is_generic_bounds_in_order(items);\n     for (bound, bound_str) in items[1..].iter().zip(type_strs[1..].iter()) {\n+        if closing_paren {\n+            if let ast::GenericBound::Outlives(..) = bound {\n+                closing_paren = false;\n+                result.push(')');\n+            }\n+        }\n         if generic_bounds_in_order && can_be_put_on_the_same_line {\n             result.push_str(joiner);\n         } else {"}]}