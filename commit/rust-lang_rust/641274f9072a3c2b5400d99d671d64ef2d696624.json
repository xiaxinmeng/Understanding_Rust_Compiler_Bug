{"sha": "641274f9072a3c2b5400d99d671d64ef2d696624", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MTI3NGY5MDcyYTNjMmI1NDAwZDk5ZDY3MWQ2NGVmMmQ2OTY2MjQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-10T10:11:25Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-17T08:07:44Z"}, "message": "Resolve imports during expansion.", "tree": {"sha": "d0628d7f438ec9fc2b96e0c2db946406236d2fb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0628d7f438ec9fc2b96e0c2db946406236d2fb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/641274f9072a3c2b5400d99d671d64ef2d696624", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/641274f9072a3c2b5400d99d671d64ef2d696624", "html_url": "https://github.com/rust-lang/rust/commit/641274f9072a3c2b5400d99d671d64ef2d696624", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/641274f9072a3c2b5400d99d671d64ef2d696624/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "907120637ec1c28f116e612266cdb83cb5a854a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/907120637ec1c28f116e612266cdb83cb5a854a9", "html_url": "https://github.com/rust-lang/rust/commit/907120637ec1c28f116e612266cdb83cb5a854a9"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "5466c8871d49177073442e88de47d83195e82261", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/641274f9072a3c2b5400d99d671d64ef2d696624/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641274f9072a3c2b5400d99d671d64ef2d696624/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=641274f9072a3c2b5400d99d671d64ef2d696624", "patch": "@@ -755,8 +755,6 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n          || ast_validation::check_crate(sess, &krate));\n \n     time(sess.time_passes(), \"name resolution\", || -> CompileResult {\n-        resolver.resolve_imports();\n-\n         // Since import resolution will eventually happen in expansion,\n         // don't perform `after_expand` until after import resolution.\n         after_expand(&krate)?;"}, {"sha": "d2f2b078861000ba817f02609693baba2ecaced8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/641274f9072a3c2b5400d99d671d64ef2d696624/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641274f9072a3c2b5400d99d671d64ef2d696624/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=641274f9072a3c2b5400d99d671d64ef2d696624", "patch": "@@ -76,7 +76,7 @@ use std::fmt;\n use std::mem::replace;\n use std::rc::Rc;\n \n-use resolve_imports::{ImportDirective, ImportDirectiveSubclass, NameResolution};\n+use resolve_imports::{ImportDirective, ImportDirectiveSubclass, NameResolution, ImportResolver};\n use macros::{InvocationData, LegacyBinding, LegacyScope};\n \n // NB: This module needs to be declared first so diagnostics are\n@@ -1335,6 +1335,7 @@ impl<'a> Resolver<'a> {\n \n     /// Entry point to crate resolution.\n     pub fn resolve_crate(&mut self, krate: &Crate) {\n+        ImportResolver { resolver: self }.finalize_imports();\n         self.current_module = self.graph_root;\n         visit::walk_crate(self, krate);\n "}, {"sha": "82f271e10b95a175963051e3c24d238520ed4050", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/641274f9072a3c2b5400d99d671d64ef2d696624/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641274f9072a3c2b5400d99d671d64ef2d696624/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=641274f9072a3c2b5400d99d671d64ef2d696624", "patch": "@@ -10,6 +10,7 @@\n \n use {Module, ModuleKind, Resolver};\n use build_reduced_graph::BuildReducedGraphVisitor;\n+use resolve_imports::ImportResolver;\n use rustc::hir::def_id::{DefId, BUILTIN_MACROS_CRATE, CRATE_DEF_INDEX, DefIndex};\n use rustc::hir::def::{Def, Export};\n use rustc::hir::map::{self, DefCollector};\n@@ -185,6 +186,10 @@ impl<'a> base::Resolver for Resolver<'a> {\n         self.macros_at_scope.insert(id, macros);\n     }\n \n+    fn resolve_imports(&mut self) {\n+        ImportResolver { resolver: self }.resolve_imports()\n+    }\n+\n     fn find_attr_invoc(&mut self, attrs: &mut Vec<ast::Attribute>) -> Option<ast::Attribute> {\n         for i in 0..attrs.len() {\n             let name = intern(&attrs[i].name());"}, {"sha": "159b5706ec107ede1d24a32d05963ea4c4a7d506", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/641274f9072a3c2b5400d99d671d64ef2d696624/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641274f9072a3c2b5400d99d671d64ef2d696624/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=641274f9072a3c2b5400d99d671d64ef2d696624", "patch": "@@ -32,12 +32,6 @@ use syntax_pos::Span;\n use std::cell::{Cell, RefCell};\n use std::mem;\n \n-impl<'a> Resolver<'a> {\n-    pub fn resolve_imports(&mut self) {\n-        ImportResolver { resolver: self }.resolve_imports();\n-    }\n-}\n-\n /// Contains data for specific types of import directives.\n #[derive(Clone, Debug)]\n pub enum ImportDirectiveSubclass<'a> {\n@@ -399,8 +393,8 @@ impl<'a> Resolver<'a> {\n     }\n }\n \n-struct ImportResolver<'a, 'b: 'a> {\n-    resolver: &'a mut Resolver<'b>,\n+pub struct ImportResolver<'a, 'b: 'a> {\n+    pub resolver: &'a mut Resolver<'b>,\n }\n \n impl<'a, 'b: 'a> ::std::ops::Deref for ImportResolver<'a, 'b> {\n@@ -433,28 +427,21 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n \n     /// Resolves all imports for the crate. This method performs the fixed-\n     /// point iteration.\n-    fn resolve_imports(&mut self) {\n-        let mut i = 0;\n+    pub fn resolve_imports(&mut self) {\n         let mut prev_num_indeterminates = self.indeterminate_imports.len() + 1;\n-\n         while self.indeterminate_imports.len() < prev_num_indeterminates {\n             prev_num_indeterminates = self.indeterminate_imports.len();\n-            debug!(\"(resolving imports) iteration {}, {} imports left\", i, prev_num_indeterminates);\n-\n-            let mut imports = Vec::new();\n-            ::std::mem::swap(&mut imports, &mut self.indeterminate_imports);\n-\n-            for import in imports {\n+            for import in mem::replace(&mut self.indeterminate_imports, Vec::new()) {\n                 match self.resolve_import(&import) {\n                     Failed(_) => self.determined_imports.push(import),\n                     Indeterminate => self.indeterminate_imports.push(import),\n                     Success(()) => self.determined_imports.push(import),\n                 }\n             }\n-\n-            i += 1;\n         }\n+    }\n \n+    pub fn finalize_imports(&mut self) {\n         for module in self.arenas.local_modules().iter() {\n             self.finalize_resolutions_in(module);\n         }"}, {"sha": "7f66b060052ea06dd34bafbd4cc714bd1fd934ba", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/641274f9072a3c2b5400d99d671d64ef2d696624/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641274f9072a3c2b5400d99d671d64ef2d696624/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=641274f9072a3c2b5400d99d671d64ef2d696624", "patch": "@@ -524,6 +524,7 @@ pub trait Resolver {\n     fn add_ext(&mut self, ident: ast::Ident, ext: Rc<SyntaxExtension>);\n     fn add_expansions_at_stmt(&mut self, id: ast::NodeId, macros: Vec<Mark>);\n \n+    fn resolve_imports(&mut self);\n     fn find_attr_invoc(&mut self, attrs: &mut Vec<Attribute>) -> Option<Attribute>;\n     fn resolve_macro(&mut self, scope: Mark, path: &ast::Path, force: bool)\n                      -> Result<Rc<SyntaxExtension>, Determinacy>;\n@@ -547,6 +548,7 @@ impl Resolver for DummyResolver {\n     fn add_ext(&mut self, _ident: ast::Ident, _ext: Rc<SyntaxExtension>) {}\n     fn add_expansions_at_stmt(&mut self, _id: ast::NodeId, _macros: Vec<Mark>) {}\n \n+    fn resolve_imports(&mut self) {}\n     fn find_attr_invoc(&mut self, _attrs: &mut Vec<Attribute>) -> Option<Attribute> { None }\n     fn resolve_macro(&mut self, _scope: Mark, _path: &ast::Path, _force: bool)\n                      -> Result<Rc<SyntaxExtension>, Determinacy> {"}, {"sha": "8e0c3ce8448da46c983e8ddd186fe2e85c25907b", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/641274f9072a3c2b5400d99d671d64ef2d696624/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641274f9072a3c2b5400d99d671d64ef2d696624/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=641274f9072a3c2b5400d99d671d64ef2d696624", "patch": "@@ -222,6 +222,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         self.cx.current_expansion.depth = 0;\n \n         let (expansion, mut invocations) = self.collect_invocations(expansion);\n+        self.resolve_imports();\n         invocations.reverse();\n \n         let mut expansions = Vec::new();\n@@ -230,9 +231,9 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         loop {\n             let invoc = if let Some(invoc) = invocations.pop() {\n                 invoc\n-            } else if undetermined_invocations.is_empty() {\n-                break\n             } else {\n+                self.resolve_imports();\n+                if undetermined_invocations.is_empty() { break }\n                 invocations = mem::replace(&mut undetermined_invocations, Vec::new());\n                 force = !mem::replace(&mut progress, false);\n                 continue\n@@ -292,6 +293,14 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         expansion.fold_with(&mut placeholder_expander)\n     }\n \n+    fn resolve_imports(&mut self) {\n+        if self.monotonic {\n+            let err_count = self.cx.parse_sess.span_diagnostic.err_count();\n+            self.cx.resolver.resolve_imports();\n+            self.cx.resolve_err_count += self.cx.parse_sess.span_diagnostic.err_count() - err_count;\n+        }\n+    }\n+\n     fn collect_invocations(&mut self, expansion: Expansion) -> (Expansion, Vec<Invocation>) {\n         let result = {\n             let mut collector = InvocationCollector {"}]}