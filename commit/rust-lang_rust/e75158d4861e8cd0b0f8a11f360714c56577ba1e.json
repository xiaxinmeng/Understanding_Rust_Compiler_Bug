{"sha": "e75158d4861e8cd0b0f8a11f360714c56577ba1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NTE1OGQ0ODYxZThjZDBiMGY4YTExZjM2MDcxNGM1NjU3N2JhMWU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-03-23T01:50:30Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-03-23T19:55:46Z"}, "message": "Account for bad placeholder types in where clauses", "tree": {"sha": "cdba353cc885957fbb6f7239c9273bc912163fa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdba353cc885957fbb6f7239c9273bc912163fa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e75158d4861e8cd0b0f8a11f360714c56577ba1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e75158d4861e8cd0b0f8a11f360714c56577ba1e", "html_url": "https://github.com/rust-lang/rust/commit/e75158d4861e8cd0b0f8a11f360714c56577ba1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e75158d4861e8cd0b0f8a11f360714c56577ba1e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ae85f43f4eeaf177cd12f47958b7ff62786b612", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ae85f43f4eeaf177cd12f47958b7ff62786b612", "html_url": "https://github.com/rust-lang/rust/commit/5ae85f43f4eeaf177cd12f47958b7ff62786b612"}], "stats": {"total": 278, "additions": 192, "deletions": 86}, "files": [{"sha": "378a68315b2898d1213f63756814d26b3d705119", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e75158d4861e8cd0b0f8a11f360714c56577ba1e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75158d4861e8cd0b0f8a11f360714c56577ba1e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=e75158d4861e8cd0b0f8a11f360714c56577ba1e", "patch": "@@ -20,7 +20,7 @@ use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::DefId;\n-use rustc_hir::intravisit::Visitor;\n+use rustc_hir::intravisit::{walk_generics, Visitor};\n use rustc_hir::print;\n use rustc_hir::{Constness, ExprKind, GenericArg, GenericArgs};\n use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, LATE_BOUND_LIFETIME_ARGUMENTS};\n@@ -838,18 +838,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 }\n             },\n         );\n-        if !inferred_params.is_empty() {\n-            // We always collect the spans for placeholder types when evaluating `fn`s, but we\n-            // only want to emit an error complaining about them if infer types (`_`) are not\n-            // allowed. `allow_ty_infer` gates this behavior.\n-            crate::collect::placeholder_type_error(\n-                tcx,\n-                inferred_params[0],\n-                &[],\n-                inferred_params,\n-                false,\n-            );\n-        }\n \n         self.complain_about_missing_type_params(\n             missing_type_params,\n@@ -2739,7 +2727,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n             hir::TyKind::BareFn(ref bf) => {\n                 require_c_abi_if_c_variadic(tcx, &bf.decl, bf.abi, ast_ty.span);\n-                tcx.mk_fn_ptr(self.ty_of_fn(bf.unsafety, bf.abi, &bf.decl, &[], None))\n+                tcx.mk_fn_ptr(self.ty_of_fn(\n+                    bf.unsafety,\n+                    bf.abi,\n+                    &bf.decl,\n+                    &hir::Generics::empty(),\n+                    None,\n+                ))\n             }\n             hir::TyKind::TraitObject(ref bounds, ref lifetime) => {\n                 self.conv_object_ty_poly_trait_ref(ast_ty.span, bounds, lifetime)\n@@ -2922,7 +2916,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         unsafety: hir::Unsafety,\n         abi: abi::Abi,\n         decl: &hir::FnDecl<'_>,\n-        generic_params: &[hir::GenericParam<'_>],\n+        generics: &hir::Generics<'_>,\n         ident_span: Option<Span>,\n     ) -> ty::PolyFnSig<'tcx> {\n         debug!(\"ty_of_fn\");\n@@ -2934,6 +2928,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         for ty in decl.inputs {\n             visitor.visit_ty(ty);\n         }\n+        walk_generics(&mut visitor, generics);\n+\n         let input_tys = decl.inputs.iter().map(|a| self.ty_of_arg(a, None));\n         let output_ty = match decl.output {\n             hir::FnRetTy::Return(ref output) => {\n@@ -2955,7 +2951,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             crate::collect::placeholder_type_error(\n                 tcx,\n                 ident_span.map(|sp| sp.shrink_to_hi()).unwrap_or(DUMMY_SP),\n-                generic_params,\n+                &generics.params[..],\n                 visitor.0,\n                 ident_span.is_some(),\n             );\n@@ -2981,8 +2977,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 tcx.sess,\n                 decl.output.span(),\n                 E0581,\n-                \"return type references {} \\\n-                                            which is not constrained by the fn input types\",\n+                \"return type references {} which is not constrained by the fn input types\",\n                 lifetime_name\n             );\n             if let ty::BrAnon(_) = *br {\n@@ -2993,8 +2988,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // though we can easily give a hint that ought to be\n                 // relevant.\n                 err.note(\n-                    \"lifetimes appearing in an associated type \\\n-                          are not considered constrained\",\n+                    \"lifetimes appearing in an associated type are not considered constrained\",\n                 );\n             }\n             err.emit();"}, {"sha": "ce0be5083573cb1fdd37ad117ec577930a7b9484", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e75158d4861e8cd0b0f8a11f360714c56577ba1e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75158d4861e8cd0b0f8a11f360714c56577ba1e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e75158d4861e8cd0b0f8a11f360714c56577ba1e", "patch": "@@ -1003,7 +1003,14 @@ fn typeck_tables_of_with_fallback<'tcx>(\n         let fcx = if let (Some(header), Some(decl)) = (fn_header, fn_decl) {\n             let fn_sig = if crate::collect::get_infer_ret_ty(&decl.output).is_some() {\n                 let fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);\n-                AstConv::ty_of_fn(&fcx, header.unsafety, header.abi, decl, &[], None)\n+                AstConv::ty_of_fn(\n+                    &fcx,\n+                    header.unsafety,\n+                    header.abi,\n+                    decl,\n+                    &hir::Generics::empty(),\n+                    None,\n+                )\n             } else {\n                 tcx.fn_sig(def_id)\n             };"}, {"sha": "2de43a6b1ef15bf4b593cc34680752dd11cd7097", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e75158d4861e8cd0b0f8a11f360714c56577ba1e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75158d4861e8cd0b0f8a11f360714c56577ba1e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e75158d4861e8cd0b0f8a11f360714c56577ba1e", "patch": "@@ -1502,7 +1502,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n                     sig.header.unsafety,\n                     sig.header.abi,\n                     &sig.decl,\n-                    &generics.params[..],\n+                    &generics,\n                     Some(ident.span),\n                 ),\n             }\n@@ -1513,14 +1513,9 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n             ident,\n             generics,\n             ..\n-        }) => AstConv::ty_of_fn(\n-            &icx,\n-            header.unsafety,\n-            header.abi,\n-            decl,\n-            &generics.params[..],\n-            Some(ident.span),\n-        ),\n+        }) => {\n+            AstConv::ty_of_fn(&icx, header.unsafety, header.abi, decl, &generics, Some(ident.span))\n+        }\n \n         ForeignItem(&hir::ForeignItem { kind: ForeignItemKind::Fn(ref fn_decl, _, _), .. }) => {\n             let abi = tcx.hir().get_foreign_abi(hir_id);\n@@ -2142,7 +2137,14 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n     } else {\n         hir::Unsafety::Unsafe\n     };\n-    let fty = AstConv::ty_of_fn(&ItemCtxt::new(tcx, def_id), unsafety, abi, decl, &[], None);\n+    let fty = AstConv::ty_of_fn(\n+        &ItemCtxt::new(tcx, def_id),\n+        unsafety,\n+        abi,\n+        decl,\n+        &hir::Generics::empty(),\n+        None,\n+    );\n \n     // Feature gate SIMD types in FFI, since I am not sure that the\n     // ABIs are handled at all correctly. -huonw"}, {"sha": "e66b432ede20c5b00399a399f04e104d0313c7ae", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e75158d4861e8cd0b0f8a11f360714c56577ba1e/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75158d4861e8cd0b0f8a11f360714c56577ba1e/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs?ref=e75158d4861e8cd0b0f8a11f360714c56577ba1e", "patch": "@@ -49,4 +49,36 @@ trait K<A, B> {}\n fn foo<X: K<_, _>>(x: X) {}\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n+fn bar<F>(_: F) where F: Fn() -> _ {}\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+\n+fn baz<F: Fn() -> _>(_: F) {}\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+\n+struct L<F>(F) where F: Fn() -> _;\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+struct M<F> where F: Fn() -> _ {\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    a: F,\n+}\n+enum N<F> where F: Fn() -> _ {\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    Foo(F),\n+}\n+\n+union O<F> where F: Fn() -> _ {\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR unions with non-`Copy` fields are unstable\n+    foo: F,\n+}\n+\n+trait P<F> where F: Fn() -> _ {\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+}\n+\n+trait Q {\n+    fn foo<F>(_: F) where F: Fn() -> _ {}\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+}\n+\n fn main() {}"}, {"sha": "875c02bae4ae01ac71a859ce5644b9a71bb35349", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 108, "deletions": 2, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/e75158d4861e8cd0b0f8a11f360714c56577ba1e/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e75158d4861e8cd0b0f8a11f360714c56577ba1e/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=e75158d4861e8cd0b0f8a11f360714c56577ba1e", "patch": "@@ -57,6 +57,19 @@ LL | type J = ty!(u8);\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+error[E0658]: unions with non-`Copy` fields are unstable\n+  --> $DIR/bad-assoc-ty.rs:69:1\n+   |\n+LL | / union O<F> where F: Fn() -> _ {\n+LL | |\n+LL | |\n+LL | |     foo: F,\n+LL | | }\n+   | |_^\n+   |\n+   = note: see issue #55149 <https://github.com/rust-lang/rust/issues/55149> for more information\n+   = help: add `#![feature(untagged_unions)]` to the crate attributes to enable\n+\n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:1:10\n    |\n@@ -129,8 +142,101 @@ LL | fn foo<X: K<_, _>>(x: X) {}\n    |             ^  ^ not allowed in type signatures\n    |             |\n    |             not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | fn foo<X, T: K<T, T>>(x: X) {}\n+   |         ^^^    ^  ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/bad-assoc-ty.rs:52:34\n+   |\n+LL | fn bar<F>(_: F) where F: Fn() -> _ {}\n+   |                                  ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | fn bar<F, T>(_: F) where F: Fn() -> T {}\n+   |         ^^^                         ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/bad-assoc-ty.rs:55:19\n+   |\n+LL | fn baz<F: Fn() -> _>(_: F) {}\n+   |                   ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | fn baz<F, T: Fn() -> T>(_: F) {}\n+   |         ^^^          ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/bad-assoc-ty.rs:58:33\n+   |\n+LL | struct L<F>(F) where F: Fn() -> _;\n+   |                                 ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | struct L<F, T>(F) where F: Fn() -> T;\n+   |           ^^^                      ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/bad-assoc-ty.rs:60:30\n+   |\n+LL | struct M<F> where F: Fn() -> _ {\n+   |                              ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | struct M<F, T> where F: Fn() -> T {\n+   |           ^^^                   ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/bad-assoc-ty.rs:64:28\n+   |\n+LL | enum N<F> where F: Fn() -> _ {\n+   |                            ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | enum N<F, T> where F: Fn() -> T {\n+   |         ^^^                   ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/bad-assoc-ty.rs:69:29\n+   |\n+LL | union O<F> where F: Fn() -> _ {\n+   |                             ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | union O<F, T> where F: Fn() -> T {\n+   |          ^^^                   ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/bad-assoc-ty.rs:75:29\n+   |\n+LL | trait P<F> where F: Fn() -> _ {\n+   |                             ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | trait P<F, T> where F: Fn() -> T {\n+   |          ^^^                   ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/bad-assoc-ty.rs:80:38\n+   |\n+LL |     fn foo<F>(_: F) where F: Fn() -> _ {}\n+   |                                      ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn foo<F, T>(_: F) where F: Fn() -> T {}\n+   |             ^^^                         ^\n \n-error: aborting due to 20 previous errors\n+error: aborting due to 29 previous errors\n \n-Some errors have detailed explanations: E0121, E0223.\n+Some errors have detailed explanations: E0121, E0223, E0658.\n For more information about an error, try `rustc --explain E0121`."}, {"sha": "5444fc62d82118c5779d4abd37ff70562663773e", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e75158d4861e8cd0b0f8a11f360714c56577ba1e/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75158d4861e8cd0b0f8a11f360714c56577ba1e/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=e75158d4861e8cd0b0f8a11f360714c56577ba1e", "patch": "@@ -158,12 +158,9 @@ trait BadTrait<_> {}\n //~^ ERROR expected identifier, found reserved identifier `_`\n impl BadTrait<_> for BadStruct<_> {}\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n-//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n-//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n fn impl_trait() -> impl BadTrait<_> {\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n-//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n     unimplemented!()\n }\n \n@@ -178,14 +175,12 @@ struct BadStruct2<_, T>(_, T);\n \n type X = Box<_>;\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n-//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n struct Struct;\n trait Trait<T> {}\n impl Trait<usize> for Struct {}\n type Y = impl Trait<_>;\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n-//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n fn foo() -> Y {\n     Struct\n }"}, {"sha": "955765e1175cef3210d892720fec89567ea6389c", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 18, "deletions": 48, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e75158d4861e8cd0b0f8a11f360714c56577ba1e/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e75158d4861e8cd0b0f8a11f360714c56577ba1e/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=e75158d4861e8cd0b0f8a11f360714c56577ba1e", "patch": "@@ -11,33 +11,33 @@ LL | trait BadTrait<_> {}\n    |                ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:170:19\n+  --> $DIR/typeck_type_placeholder_item.rs:167:19\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                   ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:170:22\n+  --> $DIR/typeck_type_placeholder_item.rs:167:22\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                      ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:175:19\n+  --> $DIR/typeck_type_placeholder_item.rs:172:19\n    |\n LL | struct BadStruct2<_, T>(_, T);\n    |                   ^ expected identifier, found reserved identifier\n \n error: associated constant in `impl` without body\n-  --> $DIR/typeck_type_placeholder_item.rs:208:5\n+  --> $DIR/typeck_type_placeholder_item.rs:203:5\n    |\n LL |     const C: _;\n    |     ^^^^^^^^^^-\n    |               |\n    |               help: provide a definition for the constant: `= <expr>;`\n \n error[E0403]: the name `_` is already used for a generic parameter in this item's generic parameters\n-  --> $DIR/typeck_type_placeholder_item.rs:170:22\n+  --> $DIR/typeck_type_placeholder_item.rs:167:22\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                   -  ^ already used\n@@ -351,18 +351,6 @@ help: use type parameters instead\n LL | struct BadStruct<T>(T);\n    |                  ^  ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:159:32\n-   |\n-LL | impl BadTrait<_> for BadStruct<_> {}\n-   |                                ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:159:15\n-   |\n-LL | impl BadTrait<_> for BadStruct<_> {}\n-   |               ^ not allowed in type signatures\n-\n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:159:15\n    |\n@@ -377,13 +365,13 @@ LL | impl<T> BadTrait<T> for BadStruct<T> {}\n    |     ^^^          ^                ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:164:34\n+  --> $DIR/typeck_type_placeholder_item.rs:162:34\n    |\n LL | fn impl_trait() -> impl BadTrait<_> {\n    |                                  ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:170:25\n+  --> $DIR/typeck_type_placeholder_item.rs:167:25\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                         ^ not allowed in type signatures\n@@ -394,7 +382,7 @@ LL | struct BadStruct1<T, _>(T);\n    |                   ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:175:25\n+  --> $DIR/typeck_type_placeholder_item.rs:172:25\n    |\n LL | struct BadStruct2<_, T>(_, T);\n    |                         ^ not allowed in type signatures\n@@ -405,13 +393,7 @@ LL | struct BadStruct2<K, T>(K, T);\n    |                   ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:179:14\n-   |\n-LL | type X = Box<_>;\n-   |              ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:179:14\n+  --> $DIR/typeck_type_placeholder_item.rs:176:14\n    |\n LL | type X = Box<_>;\n    |              ^ not allowed in type signatures\n@@ -531,37 +513,25 @@ LL |         fn clone_from<T>(&mut self, other: T) { *self = FnTest9; }\n    |                      ^^^                   ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:164:34\n-   |\n-LL | fn impl_trait() -> impl BadTrait<_> {\n-   |                                  ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:186:21\n-   |\n-LL | type Y = impl Trait<_>;\n-   |                     ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:186:21\n+  --> $DIR/typeck_type_placeholder_item.rs:182:21\n    |\n LL | type Y = impl Trait<_>;\n    |                     ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:195:14\n+  --> $DIR/typeck_type_placeholder_item.rs:190:14\n    |\n LL |     type B = _;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:197:14\n+  --> $DIR/typeck_type_placeholder_item.rs:192:14\n    |\n LL |     const C: _;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:199:14\n+  --> $DIR/typeck_type_placeholder_item.rs:194:14\n    |\n LL |     const D: _ = 42;\n    |              ^\n@@ -606,33 +576,33 @@ LL |         fn clone(&self) -> _ { FnTest9 }\n    |                            help: replace with the correct return type: `main::FnTest9`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:204:14\n+  --> $DIR/typeck_type_placeholder_item.rs:199:14\n    |\n LL |     type A = _;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:206:14\n+  --> $DIR/typeck_type_placeholder_item.rs:201:14\n    |\n LL |     type B = _;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:208:14\n+  --> $DIR/typeck_type_placeholder_item.rs:203:14\n    |\n LL |     const C: _;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:211:14\n+  --> $DIR/typeck_type_placeholder_item.rs:206:14\n    |\n LL |     const D: _ = 42;\n    |              ^\n    |              |\n    |              not allowed in type signatures\n    |              help: replace `_` with the correct type: `i32`\n \n-error: aborting due to 71 previous errors\n+error: aborting due to 66 previous errors\n \n Some errors have detailed explanations: E0121, E0282, E0403.\n For more information about an error, try `rustc --explain E0121`."}]}