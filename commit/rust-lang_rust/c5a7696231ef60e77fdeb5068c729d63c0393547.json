{"sha": "c5a7696231ef60e77fdeb5068c729d63c0393547", "node_id": "C_kwDOAAsO6NoAKGM1YTc2OTYyMzFlZjYwZTc3ZmRlYjUwNjhjNzI5ZDYzYzAzOTM1NDc", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-02-18T04:43:48Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-10-24T20:05:39Z"}, "message": "Support tuples", "tree": {"sha": "7f4407fa76a3894ca37cd80e2c3dc8c9e9a7e906", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f4407fa76a3894ca37cd80e2c3dc8c9e9a7e906"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5a7696231ef60e77fdeb5068c729d63c0393547", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5a7696231ef60e77fdeb5068c729d63c0393547", "html_url": "https://github.com/rust-lang/rust/commit/c5a7696231ef60e77fdeb5068c729d63c0393547", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5a7696231ef60e77fdeb5068c729d63c0393547/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e01e6b4c2d5a84723738575df788823c608dce7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e01e6b4c2d5a84723738575df788823c608dce7", "html_url": "https://github.com/rust-lang/rust/commit/2e01e6b4c2d5a84723738575df788823c608dce7"}], "stats": {"total": 59, "additions": 45, "deletions": 14}, "files": [{"sha": "5e46abee42d13c937a2e0c134aa0f3bc5484f4d3", "filename": "clippy_lints/src/manual_let_else.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c5a7696231ef60e77fdeb5068c729d63c0393547/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a7696231ef60e77fdeb5068c729d63c0393547/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_let_else.rs?ref=c5a7696231ef60e77fdeb5068c729d63c0393547", "patch": "@@ -3,6 +3,7 @@ use clippy_utils::higher::IfLetOrMatch;\n use clippy_utils::visitors::{for_each_expr, Descend};\n use clippy_utils::{meets_msrv, msrvs, peel_blocks};\n use if_chain::if_chain;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::{Expr, ExprKind, MatchSource, Pat, QPath, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n@@ -201,20 +202,33 @@ fn pat_has_no_bindings(pat: &'_ Pat<'_>) -> bool {\n \n /// Checks if the passed block is a simple identity referring to bindings created by the pattern\n fn expr_is_simple_identity(pat: &'_ Pat<'_>, expr: &'_ Expr<'_>) -> bool {\n-    // TODO support patterns with multiple bindings and tuples, like:\n+    // We support patterns with multiple bindings and tuples, like:\n     //   let ... = if let (Some(foo), bar) = g() { (foo, bar) } else { ... }\n-    if_chain! {\n-        if let ExprKind::Path(QPath::Resolved(_ty, path)) = &peel_blocks(expr).kind;\n-        if let [path_seg] = path.segments;\n-        then {\n-            let mut pat_bindings = Vec::new();\n-            pat.each_binding_or_first(&mut |_ann, _hir_id, _sp, ident| {\n-                pat_bindings.push(ident);\n-            });\n-            if let [binding] = &pat_bindings[..] {\n-                return path_seg.ident == *binding;\n+    let peeled = peel_blocks(expr);\n+    let paths = match peeled.kind {\n+        ExprKind::Tup(exprs) | ExprKind::Array(exprs) => exprs,\n+        ExprKind::Path(_) => std::slice::from_ref(peeled),\n+        _ => return false,\n+    };\n+    let mut pat_bindings = FxHashSet::default();\n+    pat.each_binding_or_first(&mut |_ann, _hir_id, _sp, ident| {\n+        pat_bindings.insert(ident);\n+    });\n+    if pat_bindings.len() < paths.len() {\n+        return false;\n+    }\n+    for path in paths {\n+        if_chain! {\n+            if let ExprKind::Path(QPath::Resolved(_ty, path)) = path.kind;\n+            if let [path_seg] = path.segments;\n+            then {\n+                if !pat_bindings.remove(&path_seg.ident) {\n+                    return false;\n+                }\n+            } else {\n+                return false;\n             }\n         }\n     }\n-    false\n+    true\n }"}, {"sha": "d69e580ff8f4cc18e270884edd688fa6c64e3fc6", "filename": "tests/ui/manual_let_else.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c5a7696231ef60e77fdeb5068c729d63c0393547/tests%2Fui%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a7696231ef60e77fdeb5068c729d63c0393547/tests%2Fui%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_let_else.rs?ref=c5a7696231ef60e77fdeb5068c729d63c0393547", "patch": "@@ -88,6 +88,13 @@ fn fire() {\n         return;\n     };\n \n+    // Tuples supported for the identity block and pattern\n+    let v = if let (Some(v_some), w_some) = (g(), 0) {\n+        (w_some, v_some)\n+    } else {\n+        return;\n+    };\n+\n     // entirely inside macro lints\n     macro_rules! create_binding_if_some {\n         ($n:ident, $e:expr) => {"}, {"sha": "97e6420d705cb423b2f2f5ad2bd26f63a1d4ff7c", "filename": "tests/ui/manual_let_else.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c5a7696231ef60e77fdeb5068c729d63c0393547/tests%2Fui%2Fmanual_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5a7696231ef60e77fdeb5068c729d63c0393547/tests%2Fui%2Fmanual_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_let_else.stderr?ref=c5a7696231ef60e77fdeb5068c729d63c0393547", "patch": "@@ -101,7 +101,17 @@ LL | |     };\n    | |______^\n \n error: this could be rewritten as `let else`\n-  --> $DIR/manual_let_else.rs:94:13\n+  --> $DIR/manual_let_else.rs:92:5\n+   |\n+LL | /     let v = if let (Some(v_some), w_some) = (g(), 0) {\n+LL | |         (w_some, v_some)\n+LL | |     } else {\n+LL | |         return;\n+LL | |     };\n+   | |______^\n+\n+error: this could be rewritten as `let else`\n+  --> $DIR/manual_let_else.rs:101:13\n    |\n LL |             let $n = if let Some(v) = $e { v } else { return };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -111,5 +121,5 @@ LL |     create_binding_if_some!(w, g());\n    |\n    = note: this error originates in the macro `create_binding_if_some` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 13 previous errors\n "}]}