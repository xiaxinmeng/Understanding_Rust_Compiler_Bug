{"sha": "402433470a5f7cdb16083919c76f5d6f6f90ce3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMjQzMzQ3MGE1ZjdjZGIxNjA4MzkxOWM3NmY1ZDZmNmY5MGNlM2Q=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-30T07:58:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-30T07:58:06Z"}, "message": "Merge #5579\n\n5579: Allow negative bytes r=matklad a=matklad\n\nGotta be optimistic about those memory usage optimizations\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "f21490b1f28db69d5d8132c245cf1df7ee1e48bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f21490b1f28db69d5d8132c245cf1df7ee1e48bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/402433470a5f7cdb16083919c76f5d6f6f90ce3d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfIn2OCRBK7hj4Ov3rIwAAdHIIACzEfLxVKsQwKIeeOxSU9iA8\n8mxxZnRP177W/U8kaNJL6PI78uqkyOq6wDDi6v8BanJv6vnVd1A4V32JdLz4dijC\nZB6IwP3zhYyZCJEqEzGLrWLM1d/vxs4o2YbuojSVKY8oWzQ+MbFcJayq8rRReib0\nCZGbngdOjWB+pDckAn4Ws2LK0SahJk8TisID3t1p/8roYweEJJd4pUjlkBDnlWT/\nwQWhCJ7cUSWfLlK+47wz9iSIIJ/U+xoCfr2l3zSud2Zxzp3JiiuuHQbtvhoQmKT1\nL2NKr0nq7oM/lfY1s41Sued+I2qJhFzeGFF7iOVsqVXzaNoL/1CFMmdMfxWerGk=\n=F689\n-----END PGP SIGNATURE-----\n", "payload": "tree f21490b1f28db69d5d8132c245cf1df7ee1e48bb\nparent ad43d6bde67fd649347c3e2ac46bb8a75e71a2ab\nparent afab67e69c39027fb99878751309d4050324beef\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596095886 +0000\ncommitter GitHub <noreply@github.com> 1596095886 +0000\n\nMerge #5579\n\n5579: Allow negative bytes r=matklad a=matklad\n\nGotta be optimistic about those memory usage optimizations\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/402433470a5f7cdb16083919c76f5d6f6f90ce3d", "html_url": "https://github.com/rust-lang/rust/commit/402433470a5f7cdb16083919c76f5d6f6f90ce3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/402433470a5f7cdb16083919c76f5d6f6f90ce3d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad43d6bde67fd649347c3e2ac46bb8a75e71a2ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad43d6bde67fd649347c3e2ac46bb8a75e71a2ab", "html_url": "https://github.com/rust-lang/rust/commit/ad43d6bde67fd649347c3e2ac46bb8a75e71a2ab"}, {"sha": "afab67e69c39027fb99878751309d4050324beef", "url": "https://api.github.com/repos/rust-lang/rust/commits/afab67e69c39027fb99878751309d4050324beef", "html_url": "https://github.com/rust-lang/rust/commit/afab67e69c39027fb99878751309d4050324beef"}], "stats": {"total": 51, "additions": 25, "deletions": 26}, "files": [{"sha": "22b61e4a281d1c55b869d27d94b98795dc90a9c7", "filename": "crates/ra_prof/src/memory_usage.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/402433470a5f7cdb16083919c76f5d6f6f90ce3d/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402433470a5f7cdb16083919c76f5d6f6f90ce3d/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs?ref=402433470a5f7cdb16083919c76f5d6f6f90ce3d", "patch": "@@ -3,36 +3,43 @@ use std::fmt;\n \n use cfg_if::cfg_if;\n \n+#[derive(Copy, Clone)]\n pub struct MemoryUsage {\n     pub allocated: Bytes,\n-    pub resident: Bytes,\n+}\n+\n+impl fmt::Display for MemoryUsage {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(fmt, \"{}\", self.allocated)\n+    }\n+}\n+\n+impl std::ops::Sub for MemoryUsage {\n+    type Output = MemoryUsage;\n+    fn sub(self, rhs: MemoryUsage) -> MemoryUsage {\n+        MemoryUsage { allocated: self.allocated - rhs.allocated }\n+    }\n }\n \n impl MemoryUsage {\n     pub fn current() -> MemoryUsage {\n         cfg_if! {\n             if #[cfg(target_os = \"linux\")] {\n                 // Note: This is incredibly slow.\n-                let alloc = unsafe { libc::mallinfo() }.uordblks as u32 as usize;\n-                MemoryUsage { allocated: Bytes(alloc), resident: Bytes(0) }\n+                let alloc = unsafe { libc::mallinfo() }.uordblks as u32 as isize;\n+                MemoryUsage { allocated: Bytes(alloc) }\n             } else {\n-                MemoryUsage { allocated: Bytes(0), resident: Bytes(0) }\n+                MemoryUsage { allocated: Bytes(0) }\n             }\n         }\n     }\n }\n \n-impl fmt::Display for MemoryUsage {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"{} allocated {} resident\", self.allocated, self.resident,)\n-    }\n-}\n-\n #[derive(Default, PartialEq, Eq, PartialOrd, Ord, Hash, Clone, Copy)]\n-pub struct Bytes(usize);\n+pub struct Bytes(isize);\n \n impl Bytes {\n-    pub fn megabytes(self) -> usize {\n+    pub fn megabytes(self) -> isize {\n         self.0 / 1024 / 1024\n     }\n }\n@@ -42,10 +49,10 @@ impl fmt::Display for Bytes {\n         let bytes = self.0;\n         let mut value = bytes;\n         let mut suffix = \"b\";\n-        if value > 4096 {\n+        if value.abs() > 4096 {\n             value /= 1024;\n             suffix = \"kb\";\n-            if value > 4096 {\n+            if value.abs() > 4096 {\n                 value /= 1024;\n                 suffix = \"mb\";\n             }\n@@ -56,7 +63,7 @@ impl fmt::Display for Bytes {\n \n impl std::ops::AddAssign<usize> for Bytes {\n     fn add_assign(&mut self, x: usize) {\n-        self.0 += x;\n+        self.0 += x as isize;\n     }\n }\n "}, {"sha": "cf0d82b62c1f007d920fc5ca07e50256b7700810", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/402433470a5f7cdb16083919c76f5d6f6f90ce3d/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402433470a5f7cdb16083919c76f5d6f6f90ce3d/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=402433470a5f7cdb16083919c76f5d6f6f90ce3d", "patch": "@@ -111,11 +111,7 @@ pub fn analysis_stats(\n     eprintln!(\"Total declarations: {}\", num_decls);\n     eprintln!(\"Total functions: {}\", funcs.len());\n     let item_collection_memory = ra_prof::memory_usage();\n-    eprintln!(\n-        \"Item Collection: {:?}, {}\",\n-        analysis_time.elapsed(),\n-        item_collection_memory.allocated\n-    );\n+    eprintln!(\"Item Collection: {:?}, {}\", analysis_time.elapsed(), item_collection_memory);\n \n     if randomize {\n         shuffle(&mut rng, &mut funcs);\n@@ -140,7 +136,7 @@ pub fn analysis_stats(\n         eprintln!(\n             \"Parallel Inference: {:?}, {}\",\n             inference_time.elapsed(),\n-            ra_prof::memory_usage().allocated\n+            ra_prof::memory_usage()\n         );\n     }\n \n@@ -297,11 +293,7 @@ pub fn analysis_stats(\n \n     let inference_time = inference_time.elapsed();\n     let total_memory = ra_prof::memory_usage();\n-    eprintln!(\n-        \"Inference: {:?}, {}\",\n-        inference_time,\n-        total_memory.allocated - item_collection_memory.allocated\n-    );\n+    eprintln!(\"Inference: {:?}, {}\", inference_time, total_memory - item_collection_memory);\n \n     let analysis_time = analysis_time.elapsed();\n     eprintln!(\"Total: {:?}, {}\", analysis_time, total_memory);"}]}