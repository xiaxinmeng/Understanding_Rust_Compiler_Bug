{"sha": "197e89bbb095d61e6f7c89421789bd7cb4122852", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5N2U4OWJiYjA5NWQ2MWU2ZjdjODk0MjE3ODliZDdjYjQxMjI4NTI=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-16T06:12:11Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-16T06:12:11Z"}, "message": "Refactor alloc_ptr.", "tree": {"sha": "8cafa2ee8c30c0f62c1d857709a0502e8b6d48f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cafa2ee8c30c0f62c1d857709a0502e8b6d48f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/197e89bbb095d61e6f7c89421789bd7cb4122852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/197e89bbb095d61e6f7c89421789bd7cb4122852", "html_url": "https://github.com/rust-lang/rust/commit/197e89bbb095d61e6f7c89421789bd7cb4122852", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/197e89bbb095d61e6f7c89421789bd7cb4122852/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "754dcc401d6262309d53c16ca640b1922ffea9ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/754dcc401d6262309d53c16ca640b1922ffea9ca", "html_url": "https://github.com/rust-lang/rust/commit/754dcc401d6262309d53c16ca640b1922ffea9ca"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "4f702c68dc55370345054eaba80542c5a3e5a35c", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/197e89bbb095d61e6f7c89421789bd7cb4122852/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/197e89bbb095d61e6f7c89421789bd7cb4122852/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=197e89bbb095d61e6f7c89421789bd7cb4122852", "patch": "@@ -175,7 +175,12 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         }\n     }\n \n-    pub fn alloc_ptr(\n+    pub fn alloc_ptr(&mut self, ty: Ty<'tcx>) -> EvalResult<'tcx, Pointer> {\n+        let substs = self.substs();\n+        self.alloc_ptr_with_substs(ty, substs)\n+    }\n+\n+    pub fn alloc_ptr_with_substs(\n         &mut self,\n         ty: Ty<'tcx>,\n         substs: &'tcx Substs<'tcx>\n@@ -1018,7 +1023,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     opt_val => {\n                         let ty = self.stack[frame].mir.local_decls[local].ty;\n                         let substs = self.stack[frame].substs;\n-                        let ptr = self.alloc_ptr(ty, substs)?;\n+                        let ptr = self.alloc_ptr_with_substs(ty, substs)?;\n                         self.stack[frame].set_local(local, Value::ByRef(ptr));\n                         if let Some(val) = opt_val {\n                             self.write_value_to_ptr(val, ptr, ty)?;\n@@ -1089,8 +1094,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             // more like a small piece of memory tagged with a `PrimValKind`, which should make the\n             // conversion easy and make the problem solveable using code already in `Memory`.\n             Value::ByVal(primval) => {\n-                let substs = self.substs();\n-                let ptr = self.alloc_ptr(ty, substs)?;\n+                let ptr = self.alloc_ptr(ty)?;\n                 self.memory.write_primval(ptr, primval)?;\n                 self.value_to_primval(Value::ByRef(ptr), ty)\n             }\n@@ -1133,8 +1137,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     let dest_ptr = if let Some(Value::ByRef(ptr)) = dest_val {\n                         ptr\n                     } else {\n-                        let substs = self.substs();\n-                        let ptr = self.alloc_ptr(dest_ty, substs)?;\n+                        let ptr = self.alloc_ptr(dest_ty)?;\n                         self.stack[frame].set_local(local, Value::ByRef(ptr));\n                         ptr\n                     };\n@@ -1430,16 +1433,13 @@ pub fn eval_main<'a, 'tcx: 'a>(\n ) {\n     let mir = mir_map.map.get(&def_id).expect(\"no mir for main function\");\n     let mut ecx = EvalContext::new(tcx, mir_map, memory_size, stack_limit);\n-    let substs = subst::Substs::empty(tcx);\n-    let return_ptr = ecx.alloc_ptr(mir.return_ty, substs)\n-        .expect(\"should at least be able to allocate space for the main function's return value\");\n \n     ecx.push_stack_frame(\n         def_id,\n         mir.span,\n         CachedMir::Ref(mir),\n-        substs,\n-        Lvalue::from_ptr(return_ptr), // FIXME(solson)\n+        subst::Substs::empty(tcx),\n+        Lvalue::from_ptr(Pointer::zst_ptr()),\n         StackPopCleanup::None\n     ).expect(\"could not allocate first stack frame\");\n "}, {"sha": "c109b7cd4895d5ba2e03afd79a1df15ab2a30382", "filename": "src/interpreter/step.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/197e89bbb095d61e6f7c89421789bd7cb4122852/src%2Finterpreter%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/197e89bbb095d61e6f7c89421789bd7cb4122852/src%2Finterpreter%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstep.rs?ref=197e89bbb095d61e6f7c89421789bd7cb4122852", "patch": "@@ -129,7 +129,7 @@ impl<'a, 'b, 'tcx> ConstantExtractor<'a, 'b, 'tcx> {\n         self.try(|this| {\n             let mir = this.ecx.load_mir(def_id)?;\n             // FIXME(solson): Don't allocate a pointer unconditionally.\n-            let ptr = this.ecx.alloc_ptr(mir.return_ty, substs)?;\n+            let ptr = this.ecx.alloc_ptr_with_substs(mir.return_ty, substs)?;\n             this.ecx.statics.insert(cid.clone(), ptr);\n             let cleanup = if immutable && !mir.return_ty.type_contents(this.ecx.tcx).interior_unsafe() {\n                 StackPopCleanup::Freeze(ptr.alloc_id)\n@@ -179,7 +179,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'tcx> {\n                 let return_ty = mir.return_ty;\n                 self.try(|this| {\n                     // FIXME(solson): Don't allocate a pointer unconditionally.\n-                    let return_ptr = this.ecx.alloc_ptr(return_ty, cid.substs)?;\n+                    let return_ptr = this.ecx.alloc_ptr_with_substs(return_ty, cid.substs)?;\n                     let mir = CachedMir::Owned(Rc::new(mir));\n                     this.ecx.statics.insert(cid.clone(), return_ptr);\n                     this.ecx.push_stack_frame(this.def_id,"}, {"sha": "a212f25fedd0a3f1e4f04d386df7dd16388d3351", "filename": "src/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/197e89bbb095d61e6f7c89421789bd7cb4122852/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/197e89bbb095d61e6f7c89421789bd7cb4122852/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=197e89bbb095d61e6f7c89421789bd7cb4122852", "patch": "@@ -72,7 +72,7 @@ impl Pointer {\n         }\n     }\n \n-    fn zst_ptr() -> Self {\n+    pub fn zst_ptr() -> Self {\n         Pointer {\n             alloc_id: ZST_ALLOC_ID,\n             offset: 0,"}]}