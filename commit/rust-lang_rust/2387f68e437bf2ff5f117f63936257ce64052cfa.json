{"sha": "2387f68e437bf2ff5f117f63936257ce64052cfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzODdmNjhlNDM3YmYyZmY1ZjExN2Y2MzkzNjI1N2NlNjQwNTJjZmE=", "commit": {"author": {"name": "Ricky", "email": "Ricky@Hosfelt.io", "date": "2020-09-02T23:21:34Z"}, "committer": {"name": "Ricky", "email": "Ricky@Hosfelt.io", "date": "2020-09-02T23:21:34Z"}, "message": "Removed map_err suggestion in lint, and updated lint documentation example", "tree": {"sha": "6a33f3457eebddabf174bba09f7e52796c653a8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a33f3457eebddabf174bba09f7e52796c653a8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2387f68e437bf2ff5f117f63936257ce64052cfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2387f68e437bf2ff5f117f63936257ce64052cfa", "html_url": "https://github.com/rust-lang/rust/commit/2387f68e437bf2ff5f117f63936257ce64052cfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2387f68e437bf2ff5f117f63936257ce64052cfa/comments", "author": null, "committer": null, "parents": [{"sha": "337729137bdec31b55665653ef0cf7dc124b0eaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/337729137bdec31b55665653ef0cf7dc124b0eaa", "html_url": "https://github.com/rust-lang/rust/commit/337729137bdec31b55665653ef0cf7dc124b0eaa"}], "stats": {"total": 122, "additions": 60, "deletions": 62}, "files": [{"sha": "9211113ed0467e29943230018cfd5d572f880f5f", "filename": "clippy_lints/src/map_err_ignore.rs", "status": "modified", "additions": 57, "deletions": 60, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/2387f68e437bf2ff5f117f63936257ce64052cfa/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387f68e437bf2ff5f117f63936257ce64052cfa/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_err_ignore.rs?ref=2387f68e437bf2ff5f117f63936257ce64052cfa", "patch": "@@ -1,6 +1,6 @@\n-use crate::utils::span_lint_and_sugg;\n-use rustc_errors::Applicability;\n-use rustc_hir::{CaptureBy, Expr, ExprKind, PatKind, QPath};\n+use crate::utils::span_lint_and_help;\n+\n+use rustc_hir::{CaptureBy, Expr, ExprKind, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -12,33 +12,58 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    ///\n+    /// Before:\n     /// ```rust\n+    /// use std::convert::TryFrom;\n+    ///\n+    /// #[derive(Debug)]\n     /// enum Errors {\n-    ///    Ignore\n-    ///}\n-    ///fn main() -> Result<(), Errors> {\n+    ///     Ignored\n+    /// }\n     ///\n-    ///    let x = u32::try_from(-123_i32);\n+    /// fn divisible_by_3(inp: i32) -> Result<u32, Errors> {\n+    ///     let i = u32::try_from(inp).map_err(|_| Errors::Ignored)?;\n     ///\n-    ///    println!(\"{:?}\", x.map_err(|_| Errors::Ignore));\n+    ///     Ok(i)\n+    /// }\n+    ///  ```\n     ///\n-    ///    Ok(())\n-    ///}\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// enum Errors {\n-    ///    WithContext(TryFromIntError)\n-    ///}\n-    ///fn main() -> Result<(), Errors> {\n+    ///  After:\n+    ///  ```rust\n+    /// use std::convert::TryFrom;\n+    /// use std::num::TryFromIntError;\n+    /// use std::fmt;\n+    /// use std::error::Error;\n+    ///\n+    /// #[derive(Debug)]\n+    /// enum ParseError {\n+    ///     Indivisible {\n+    ///         source: TryFromIntError,\n+    ///         input: String,\n+    ///     }\n+    /// }\n+    ///\n+    /// impl fmt::Display for ParseError {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         match &self {\n+    ///             ParseError::Indivisible{source: _, input} => write!(f, \"Error: {}\", input)\n+    ///         }\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for ParseError {}\n     ///\n-    ///    let x = u32::try_from(-123_i32);\n+    /// impl ParseError {\n+    ///     fn new(source: TryFromIntError, input: String) -> ParseError {\n+    ///         ParseError::Indivisible{source, input}\n+    ///     }\n+    /// }\n     ///\n-    ///    println!(\"{:?}\", x.map_err(|e| Errors::WithContext(e)));\n+    /// fn divisible_by_3(inp: i32) -> Result<u32, ParseError> {\n+    ///     let i = u32::try_from(inp).map_err(|e| ParseError::new(e, e.to_string()))?;\n     ///\n-    ///    Ok(())\n-    ///}\n+    ///     Ok(i)\n+    /// }\n     /// ```\n     pub MAP_ERR_IGNORE,\n     style,\n@@ -69,44 +94,16 @@ impl<'tcx> LateLintPass<'tcx> for MapErrIgnore {\n                         if closure_body.params.len() == 1 {\n                             // make sure that parameter is the wild token (`_`)\n                             if let PatKind::Wild = closure_body.params[0].pat.kind {\n-                                // Check the value of the closure to see if we can build the enum we are throwing away\n-                                // the error for make sure this is a Path\n-                                if let ExprKind::Path(q_path) = &closure_body.value.kind {\n-                                    // this should be a resolved path, only keep the path field\n-                                    if let QPath::Resolved(_, path) = q_path {\n-                                        // finally get the idents for each path segment collect them as a string and\n-                                        // join them with the path separator (\"::\"\")\n-                                        let closure_fold: String = path\n-                                            .segments\n-                                            .iter()\n-                                            .map(|x| x.ident.as_str().to_string())\n-                                            .collect::<Vec<String>>()\n-                                            .join(\"::\");\n-                                        //Span the body of the closure (the |...| bit) and suggest the fix by taking\n-                                        // the error and encapsulating it in the enum\n-                                        span_lint_and_sugg(\n-                                            cx,\n-                                            MAP_ERR_IGNORE,\n-                                            body_span,\n-                                            \"`map_err` has thrown away the original error\",\n-                                            \"Allow the error enum to encapsulate the original error\",\n-                                            format!(\"|e| {}(e)\", closure_fold),\n-                                            Applicability::HasPlaceholders,\n-                                        );\n-                                    }\n-                                } else {\n-                                    //If we cannot build the enum in a human readable way just suggest not throwing way\n-                                    // the error\n-                                    span_lint_and_sugg(\n-                                        cx,\n-                                        MAP_ERR_IGNORE,\n-                                        body_span,\n-                                        \"`map_err` has thrown away the original error\",\n-                                        \"Allow the error enum to encapsulate the original error\",\n-                                        \"|e|\".to_string(),\n-                                        Applicability::HasPlaceholders,\n-                                    );\n-                                }\n+                                // span the area of the closure capture and warn that the\n+                                // original error will be thrown away\n+                                span_lint_and_help(\n+                                    cx,\n+                                    MAP_ERR_IGNORE,\n+                                    body_span,\n+                                    \"`map_else(|_|...` ignores the original error\",\n+                                    None,\n+                                    \"Consider wrapping the error in an enum variant\",\n+                                );\n                             }\n                         }\n                     }"}, {"sha": "7a269ab95ab27e0c1d874e0fbe17dc0cca042eda", "filename": "tests/ui/map_err.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2387f68e437bf2ff5f117f63936257ce64052cfa/tests%2Fui%2Fmap_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2387f68e437bf2ff5f117f63936257ce64052cfa/tests%2Fui%2Fmap_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_err.stderr?ref=2387f68e437bf2ff5f117f63936257ce64052cfa", "patch": "@@ -1,10 +1,11 @@\n-error: `map_err` has thrown away the original error\n+error: `map_else(|_|...` ignores the original error\n   --> $DIR/map_err.rs:21:32\n    |\n LL |     println!(\"{:?}\", x.map_err(|_| Errors::Ignored));\n-   |                                ^^^ help: Allow the error enum to encapsulate the original error: `|e| Errors::Ignored(e)`\n+   |                                ^^^\n    |\n    = note: `-D clippy::map-err-ignore` implied by `-D warnings`\n+   = help: Consider wrapping the error in an enum variant\n \n error: aborting due to previous error\n "}]}