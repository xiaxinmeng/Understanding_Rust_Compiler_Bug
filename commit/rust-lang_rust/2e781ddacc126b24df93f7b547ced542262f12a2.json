{"sha": "2e781ddacc126b24df93f7b547ced542262f12a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNzgxZGRhY2MxMjZiMjRkZjkzZjdiNTQ3Y2VkNTQyMjYyZjEyYTI=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-06-12T16:42:08Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-06-20T11:07:23Z"}, "message": "lint: normalize projections using opaque types\n\nThis commit normalizes projections which contain opaque types (opaque types\nare otherwise linted against, which is would have previously made the\ntest cases added in this commit fail).\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "b9f731edb341b5782dcd68e7983d27dfb8b037fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9f731edb341b5782dcd68e7983d27dfb8b037fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e781ddacc126b24df93f7b547ced542262f12a2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl7t7esACgkQJZLnbIc4\nH9lCDg//TQ33aVrOevKojIcEy7n3UIRZHA3YVFUJzax70oyrvkpgsfi0Xoko2smd\n1b+TFIrfGYMuMSz6nXaSHaDb0BTPJmhAvapYu4MIytAF8sihKbWimCRJDXuZtP3Y\nZN3LX7dSQwiSP9naEGyUUUZkHp8up9O9CSSfFk4MMEwBV2Am+ZB0Sur7PQx7BHVw\nQZ4oEl0Qo9HZno2wwHbi5lusQqHbDCPlEs6C0kAOVmYFeZgfhAt3sMa7A94RncdC\nCnrLI8zR8sHWNXjJHLF0P8ukI2NXwlhK9Eo9EVipKDtgAflcJ2KhAkzQ7iy206c7\n7vb13Jtc6h3Dgafaob1joA/gnm7TLITYtHkcfTBV5TAlgQyqIkszVZaa74SDYR3D\nREjDJsmA8CLQvo0h4tZZ7bvlPWiGSrxlIEztyfHbDRKCKujXu17k4KNn9vaGrpt+\nrHaNPZk2GKl5yhlMFLC97Cn+mhVnWd8WcA1rQtf+Ylcuvqc+kO8uxZ0kKM+KCnam\nEPggn3RbawlYM/kZEcnq+0TJDM7nU0Omfv9RdK+MPvkXA2HxCxkJhSLEK44C9Mg4\nz6PbLe7pQdCRFF1RugbarPG/bx0AC+7zvyisT5NwTpRxfPt4U7PBdv7/wy7s0fTC\ncwbWwtGCKNfxzja5GUjcegbLmbn0vAr6Bvb0+eO4iGUxVzeO+48=\n=6QWr\n-----END PGP SIGNATURE-----", "payload": "tree b9f731edb341b5782dcd68e7983d27dfb8b037fe\nparent 033013cab3a861224fd55f494c8be1cb0349eb49\nauthor David Wood <david@davidtw.co> 1591980128 +0100\ncommitter David Wood <david@davidtw.co> 1592651243 +0100\n\nlint: normalize projections using opaque types\n\nThis commit normalizes projections which contain opaque types (opaque types\nare otherwise linted against, which is would have previously made the\ntest cases added in this commit fail).\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e781ddacc126b24df93f7b547ced542262f12a2", "html_url": "https://github.com/rust-lang/rust/commit/2e781ddacc126b24df93f7b547ced542262f12a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e781ddacc126b24df93f7b547ced542262f12a2/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "033013cab3a861224fd55f494c8be1cb0349eb49", "url": "https://api.github.com/repos/rust-lang/rust/commits/033013cab3a861224fd55f494c8be1cb0349eb49", "html_url": "https://github.com/rust-lang/rust/commit/033013cab3a861224fd55f494c8be1cb0349eb49"}], "stats": {"total": 135, "additions": 127, "deletions": 8}, "files": [{"sha": "a19c9a3557996d68153a8ac522bdc4534b0ba111", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2e781ddacc126b24df93f7b547ced542262f12a2/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e781ddacc126b24df93f7b547ced542262f12a2/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=2e781ddacc126b24df93f7b547ced542262f12a2", "patch": "@@ -895,22 +895,33 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     }\n \n     fn check_for_opaque_ty(&mut self, sp: Span, ty: Ty<'tcx>) -> bool {\n-        struct ProhibitOpaqueTypes<'tcx> {\n+        struct ProhibitOpaqueTypes<'a, 'tcx> {\n+            cx: &'a LateContext<'a, 'tcx>,\n             ty: Option<Ty<'tcx>>,\n         };\n \n-        impl<'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueTypes<'tcx> {\n+        impl<'a, 'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueTypes<'a, 'tcx> {\n             fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool {\n-                if let ty::Opaque(..) = ty.kind {\n-                    self.ty = Some(ty);\n-                    true\n-                } else {\n-                    ty.super_visit_with(self)\n+                match ty.kind {\n+                    ty::Opaque(..) => {\n+                        self.ty = Some(ty);\n+                        true\n+                    }\n+                    // Consider opaque types within projections FFI-safe if they do not normalize\n+                    // to more opaque types.\n+                    ty::Projection(..) => {\n+                        let ty = self.cx.tcx.normalize_erasing_regions(self.cx.param_env, ty);\n+\n+                        // If `ty` is a opaque type directly then `super_visit_with` won't invoke\n+                        // this function again.\n+                        if ty.has_opaque_types() { self.visit_ty(ty) } else { false }\n+                    }\n+                    _ => ty.super_visit_with(self),\n                 }\n             }\n         }\n \n-        let mut visitor = ProhibitOpaqueTypes { ty: None };\n+        let mut visitor = ProhibitOpaqueTypes { cx: self.cx, ty: None };\n         ty.visit_with(&mut visitor);\n         if let Some(ty) = visitor.ty {\n             self.emit_ffi_unsafe_type_lint(ty, sp, \"opaque types have no C equivalent\", None);"}, {"sha": "2ce80982f5ca188b7491f621054c1c209c289393", "filename": "src/test/ui/lint/lint-ctypes-73251-1.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2e781ddacc126b24df93f7b547ced542262f12a2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e781ddacc126b24df93f7b547ced542262f12a2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.rs?ref=2e781ddacc126b24df93f7b547ced542262f12a2", "patch": "@@ -0,0 +1,24 @@\n+#![feature(type_alias_impl_trait)]\n+#![deny(improper_ctypes)]\n+\n+pub trait Baz { }\n+\n+impl Baz for u32 { }\n+\n+type Qux = impl Baz;\n+\n+pub trait Foo {\n+    type Assoc;\n+}\n+\n+impl Foo for u32 {\n+    type Assoc = Qux;\n+}\n+\n+fn assign() -> Qux { 1 }\n+\n+extern \"C\" {\n+    pub fn lint_me() -> <u32 as Foo>::Assoc; //~ ERROR: uses type `impl Baz`\n+}\n+\n+fn main() {}"}, {"sha": "0b4237bb96fb710dafc3b0241ab62cdcf4a4d372", "filename": "src/test/ui/lint/lint-ctypes-73251-1.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2e781ddacc126b24df93f7b547ced542262f12a2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e781ddacc126b24df93f7b547ced542262f12a2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.stderr?ref=2e781ddacc126b24df93f7b547ced542262f12a2", "patch": "@@ -0,0 +1,15 @@\n+error: `extern` block uses type `impl Baz`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-73251-1.rs:21:25\n+   |\n+LL |     pub fn lint_me() -> <u32 as Foo>::Assoc;\n+   |                         ^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-ctypes-73251-1.rs:2:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: opaque types have no C equivalent\n+\n+error: aborting due to previous error\n+"}, {"sha": "3427c657b42ac62081f1c4611205e4c23562d5bc", "filename": "src/test/ui/lint/lint-ctypes-73251-2.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2e781ddacc126b24df93f7b547ced542262f12a2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e781ddacc126b24df93f7b547ced542262f12a2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs?ref=2e781ddacc126b24df93f7b547ced542262f12a2", "patch": "@@ -0,0 +1,32 @@\n+#![feature(type_alias_impl_trait)]\n+#![deny(improper_ctypes)]\n+\n+pub trait TraitA {\n+    type Assoc;\n+}\n+\n+impl TraitA for u32 {\n+    type Assoc = u32;\n+}\n+\n+pub trait TraitB {\n+    type Assoc;\n+}\n+\n+impl<T> TraitB for T where T: TraitA {\n+    type Assoc = <T as TraitA>::Assoc;\n+}\n+\n+type AliasA = impl TraitA<Assoc = u32>;\n+\n+type AliasB = impl TraitB<Assoc = AliasA>;\n+\n+fn use_of_a() -> AliasA { 3 }\n+\n+fn use_of_b() -> AliasB { 3 }\n+\n+extern \"C\" {\n+    pub fn lint_me() -> <AliasB as TraitB>::Assoc; //~ ERROR: uses type `impl TraitA`\n+}\n+\n+fn main() {}"}, {"sha": "43f7629b043a9b55ce547167873311bb859222c6", "filename": "src/test/ui/lint/lint-ctypes-73251-2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2e781ddacc126b24df93f7b547ced542262f12a2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e781ddacc126b24df93f7b547ced542262f12a2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.stderr?ref=2e781ddacc126b24df93f7b547ced542262f12a2", "patch": "@@ -0,0 +1,15 @@\n+error: `extern` block uses type `impl TraitA`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-73251-2.rs:29:25\n+   |\n+LL |     pub fn lint_me() -> <AliasB as TraitB>::Assoc;\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-ctypes-73251-2.rs:2:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: opaque types have no C equivalent\n+\n+error: aborting due to previous error\n+"}, {"sha": "ebc2ca77b67a13a31510dc6f1485dbddf33334b6", "filename": "src/test/ui/lint/lint-ctypes-73251.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2e781ddacc126b24df93f7b547ced542262f12a2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e781ddacc126b24df93f7b547ced542262f12a2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.rs?ref=2e781ddacc126b24df93f7b547ced542262f12a2", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+#![deny(improper_ctypes)]\n+\n+pub trait Foo {\n+    type Assoc;\n+}\n+\n+impl Foo for () {\n+    type Assoc = u32;\n+}\n+\n+type Bar = impl Foo<Assoc = u32>;\n+\n+fn assign() -> Bar {}\n+\n+extern \"C\" {\n+    pub fn lint_me() -> <Bar as Foo>::Assoc;\n+}\n+\n+fn main() {}"}]}