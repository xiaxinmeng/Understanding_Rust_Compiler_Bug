{"sha": "cf5c7645ac7734ab9e0b4aba3f1e76abd3777167", "node_id": "C_kwDOAAsO6NoAKGNmNWM3NjQ1YWM3NzM0YWI5ZTBiNGFiYTNmMWU3NmFiZDM3NzcxNjc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-16T12:46:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-16T12:46:12Z"}, "message": "Rollup merge of #100609 - chenyukang:fix-100527, r=davidtwco\n\nExtend invalid floating point literal suffix suggestion\n\nFixes #100527", "tree": {"sha": "a7e1b18f37f3f02ecd4b8e145455df65a269d612", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7e1b18f37f3f02ecd4b8e145455df65a269d612"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf5c7645ac7734ab9e0b4aba3f1e76abd3777167", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi+5GUCRBK7hj4Ov3rIwAANs4IAG/89hIZf5CZPeQPSGImjcx8\n2sBvuenMqbUOxPWscZJK7rqkd9x56Y+xoILCvKyBFJYTabHJLF2veI0oYZV0S75j\nspOwZ19althNtHG0RucQzPT7SZYw+01ofC+TOyJEvgQyfgh5MTCNb12RRdp9JtJo\nF6NgevR77v0QUEc7LcKpf+p+62iPMBkjn56SAwMcLeavnuzdfzKAVuyqjiPaAmIk\niUDYEsOcz/s1En3UzpZpN4XD+OAEWPXZHQbe7IHRdV67e/gB6SVDM7GxQ5wBSPeu\nCxvbAjgUSd0LV7LodQLvDRhPJqTEl/7eZXYHH4jWGXMnQmGHEE6nx+doVzZDq8o=\n=fSNx\n-----END PGP SIGNATURE-----\n", "payload": "tree a7e1b18f37f3f02ecd4b8e145455df65a269d612\nparent 070de4bc4866fe8f36bf1538e01e10eab25f3c79\nparent 89a51a1a483fcf411ab0d9e6416b6d91600d69d9\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1660653972 +0530\ncommitter GitHub <noreply@github.com> 1660653972 +0530\n\nRollup merge of #100609 - chenyukang:fix-100527, r=davidtwco\n\nExtend invalid floating point literal suffix suggestion\n\nFixes #100527\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf5c7645ac7734ab9e0b4aba3f1e76abd3777167", "html_url": "https://github.com/rust-lang/rust/commit/cf5c7645ac7734ab9e0b4aba3f1e76abd3777167", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf5c7645ac7734ab9e0b4aba3f1e76abd3777167/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "070de4bc4866fe8f36bf1538e01e10eab25f3c79", "url": "https://api.github.com/repos/rust-lang/rust/commits/070de4bc4866fe8f36bf1538e01e10eab25f3c79", "html_url": "https://github.com/rust-lang/rust/commit/070de4bc4866fe8f36bf1538e01e10eab25f3c79"}, {"sha": "89a51a1a483fcf411ab0d9e6416b6d91600d69d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/89a51a1a483fcf411ab0d9e6416b6d91600d69d9", "html_url": "https://github.com/rust-lang/rust/commit/89a51a1a483fcf411ab0d9e6416b6d91600d69d9"}], "stats": {"total": 99, "additions": 83, "deletions": 16}, "files": [{"sha": "c82c819169d3a51cbc8b9f844d366f8f00283337", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cf5c7645ac7734ab9e0b4aba3f1e76abd3777167/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf5c7645ac7734ab9e0b4aba3f1e76abd3777167/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=cf5c7645ac7734ab9e0b4aba3f1e76abd3777167", "patch": "@@ -2193,7 +2193,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 E0610,\n                 \"`{expr_t}` is a primitive type and therefore doesn't have fields\",\n             );\n-            let is_valid_suffix = |field: String| {\n+            let is_valid_suffix = |field: &str| {\n                 if field == \"f32\" || field == \"f64\" {\n                     return true;\n                 }\n@@ -2218,20 +2218,39 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let suffix = chars.collect::<String>();\n                 suffix.is_empty() || suffix == \"f32\" || suffix == \"f64\"\n             };\n+            let maybe_partial_suffix = |field: &str| -> Option<&str> {\n+                let first_chars = ['f', 'l'];\n+                if field.len() >= 1\n+                    && field.to_lowercase().starts_with(first_chars)\n+                    && field[1..].chars().all(|c| c.is_ascii_digit())\n+                {\n+                    if field.to_lowercase().starts_with(['f']) { Some(\"f32\") } else { Some(\"f64\") }\n+                } else {\n+                    None\n+                }\n+            };\n             if let ty::Infer(ty::IntVar(_)) = expr_t.kind()\n                 && let ExprKind::Lit(Spanned {\n                     node: ast::LitKind::Int(_, ast::LitIntType::Unsuffixed),\n                     ..\n                 }) = base.kind\n                 && !base.span.from_expansion()\n-                && is_valid_suffix(field_name)\n             {\n-                err.span_suggestion_verbose(\n-                    field.span.shrink_to_lo(),\n-                    \"If the number is meant to be a floating point number, consider adding a `0` after the period\",\n-                    '0',\n-                    Applicability::MaybeIncorrect,\n-                );\n+                if is_valid_suffix(&field_name) {\n+                    err.span_suggestion_verbose(\n+                        field.span.shrink_to_lo(),\n+                        \"if intended to be a floating point literal, consider adding a `0` after the period\",\n+                        '0',\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                } else if let Some(correct_suffix) = maybe_partial_suffix(&field_name) {\n+                    err.span_suggestion_verbose(\n+                        field.span,\n+                        format!(\"if intended to be a floating point literal, consider adding a `0` after the period and a `{correct_suffix}` suffix\"),\n+                        format!(\"0{correct_suffix}\"),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n             }\n             err.emit();\n         }"}, {"sha": "15deb9e2f609a9c60bde136fb3ce20c7d897b65d", "filename": "src/test/ui/attempted-access-non-fatal.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf5c7645ac7734ab9e0b4aba3f1e76abd3777167/src%2Ftest%2Fui%2Fattempted-access-non-fatal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf5c7645ac7734ab9e0b4aba3f1e76abd3777167/src%2Ftest%2Fui%2Fattempted-access-non-fatal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattempted-access-non-fatal.rs?ref=cf5c7645ac7734ab9e0b4aba3f1e76abd3777167", "patch": "@@ -3,4 +3,8 @@ fn main() {\n     let x = 0;\n     let _ = x.foo; //~ `{integer}` is a primitive type and therefore doesn't have fields [E0610]\n     let _ = x.bar; //~ `{integer}` is a primitive type and therefore doesn't have fields [E0610]\n+    let _ = 0.f; //~ `{integer}` is a primitive type and therefore doesn't have fields [E0610]\n+    let _ = 2.l; //~ `{integer}` is a primitive type and therefore doesn't have fields [E0610]\n+    let _ = 12.F; //~ `{integer}` is a primitive type and therefore doesn't have fields [E0610]\n+    let _ = 34.L; //~ `{integer}` is a primitive type and therefore doesn't have fields [E0610]\n }"}, {"sha": "bff669727a1b8287d1389da5d6f6dc24f65f0206", "filename": "src/test/ui/attempted-access-non-fatal.stderr", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/cf5c7645ac7734ab9e0b4aba3f1e76abd3777167/src%2Ftest%2Fui%2Fattempted-access-non-fatal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf5c7645ac7734ab9e0b4aba3f1e76abd3777167/src%2Ftest%2Fui%2Fattempted-access-non-fatal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattempted-access-non-fatal.stderr?ref=cf5c7645ac7734ab9e0b4aba3f1e76abd3777167", "patch": "@@ -10,6 +10,50 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n LL |     let _ = x.bar;\n    |               ^^^\n \n-error: aborting due to 2 previous errors\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/attempted-access-non-fatal.rs:6:15\n+   |\n+LL |     let _ = 0.f;\n+   |               ^\n+   |\n+help: if intended to be a floating point literal, consider adding a `0` after the period and a `f32` suffix\n+   |\n+LL |     let _ = 0.0f32;\n+   |               ~~~~\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/attempted-access-non-fatal.rs:7:15\n+   |\n+LL |     let _ = 2.l;\n+   |               ^\n+   |\n+help: if intended to be a floating point literal, consider adding a `0` after the period and a `f64` suffix\n+   |\n+LL |     let _ = 2.0f64;\n+   |               ~~~~\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/attempted-access-non-fatal.rs:8:16\n+   |\n+LL |     let _ = 12.F;\n+   |                ^\n+   |\n+help: if intended to be a floating point literal, consider adding a `0` after the period and a `f32` suffix\n+   |\n+LL |     let _ = 12.0f32;\n+   |                ~~~~\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/attempted-access-non-fatal.rs:9:16\n+   |\n+LL |     let _ = 34.L;\n+   |                ^\n+   |\n+help: if intended to be a floating point literal, consider adding a `0` after the period and a `f64` suffix\n+   |\n+LL |     let _ = 34.0f64;\n+   |                ~~~~\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0610`."}, {"sha": "503015f3bec615cb33cf0ea4c9f7b05eae096668", "filename": "src/test/ui/typeck/suggest-adding-missing-zero-to-floating-point-number.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cf5c7645ac7734ab9e0b4aba3f1e76abd3777167/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf5c7645ac7734ab9e0b4aba3f1e76abd3777167/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.stderr?ref=cf5c7645ac7734ab9e0b4aba3f1e76abd3777167", "patch": "@@ -4,7 +4,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n LL |     2.e1;\n    |       ^^\n    |\n-help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+help: if intended to be a floating point literal, consider adding a `0` after the period\n    |\n LL |     2.0e1;\n    |       +\n@@ -15,7 +15,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n LL |     2.E1;\n    |       ^^\n    |\n-help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+help: if intended to be a floating point literal, consider adding a `0` after the period\n    |\n LL |     2.0E1;\n    |       +\n@@ -26,7 +26,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n LL |     2.f32;\n    |       ^^^\n    |\n-help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+help: if intended to be a floating point literal, consider adding a `0` after the period\n    |\n LL |     2.0f32;\n    |       +\n@@ -37,7 +37,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n LL |     2.f64;\n    |       ^^^\n    |\n-help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+help: if intended to be a floating point literal, consider adding a `0` after the period\n    |\n LL |     2.0f64;\n    |       +\n@@ -48,7 +48,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n LL |     2.e+12;\n    |       ^\n    |\n-help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+help: if intended to be a floating point literal, consider adding a `0` after the period\n    |\n LL |     2.0e+12;\n    |       +\n@@ -59,7 +59,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n LL |     2.e-12;\n    |       ^\n    |\n-help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+help: if intended to be a floating point literal, consider adding a `0` after the period\n    |\n LL |     2.0e-12;\n    |       +\n@@ -70,7 +70,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n LL |     2.e1f32;\n    |       ^^^^^\n    |\n-help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+help: if intended to be a floating point literal, consider adding a `0` after the period\n    |\n LL |     2.0e1f32;\n    |       +"}]}