{"sha": "1dea21f41d28640d8fa6e9d43a55b9a034383f34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZWEyMWY0MWQyODY0MGQ4ZmE2ZTlkNDNhNTViOWEwMzQzODNmMzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-22T01:26:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-22T01:26:31Z"}, "message": "auto merge of #10599 : thestinger/rust/unsafe, r=cmr\n\nThis is just meant to be for containing usage of `unsafe`, much like `heap_memory`.", "tree": {"sha": "acd9539c676397ed0d124a1912fe07b2d4af3985", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acd9539c676397ed0d124a1912fe07b2d4af3985"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dea21f41d28640d8fa6e9d43a55b9a034383f34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dea21f41d28640d8fa6e9d43a55b9a034383f34", "html_url": "https://github.com/rust-lang/rust/commit/1dea21f41d28640d8fa6e9d43a55b9a034383f34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dea21f41d28640d8fa6e9d43a55b9a034383f34/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6143400aaac2239feb979deebe9777f6edccce1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6143400aaac2239feb979deebe9777f6edccce1a", "html_url": "https://github.com/rust-lang/rust/commit/6143400aaac2239feb979deebe9777f6edccce1a"}, {"sha": "a1afe9cc0ad410af599ff580d41ce9c9e158136f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1afe9cc0ad410af599ff580d41ce9c9e158136f", "html_url": "https://github.com/rust-lang/rust/commit/a1afe9cc0ad410af599ff580d41ce9c9e158136f"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "48b9a11ef8d780f6a0528286a1004ac1524477ab", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1dea21f41d28640d8fa6e9d43a55b9a034383f34/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea21f41d28640d8fa6e9d43a55b9a034383f34/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=1dea21f41d28640d8fa6e9d43a55b9a034383f34", "patch": "@@ -75,6 +75,7 @@ pub enum lint {\n     type_limits,\n     type_overflow,\n     unused_unsafe,\n+    unsafe_block,\n \n     managed_heap_memory,\n     owned_heap_memory,\n@@ -236,6 +237,13 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         default: warn\n     }),\n \n+    (\"unsafe_block\",\n+     LintSpec {\n+        lint: unsafe_block,\n+        desc: \"usage of an `unsafe` block\",\n+        default: allow\n+    }),\n+\n     (\"unused_variable\",\n      LintSpec {\n         lint: unused_variable,\n@@ -870,8 +878,7 @@ fn check_pat_non_uppercase_statics(cx: &Context, p: &ast::Pat) {\n \n fn check_unused_unsafe(cx: &Context, e: &ast::Expr) {\n     match e.node {\n-        // Don't warn about generated blocks, that'll just pollute the\n-        // output.\n+        // Don't warn about generated blocks, that'll just pollute the output.\n         ast::ExprBlock(ref blk) => {\n             if blk.rules == ast::UnsafeBlock(ast::UserProvided) &&\n                 !cx.tcx.used_unsafe.contains(&blk.id) {\n@@ -883,6 +890,16 @@ fn check_unused_unsafe(cx: &Context, e: &ast::Expr) {\n     }\n }\n \n+fn check_unsafe_block(cx: &Context, e: &ast::Expr) {\n+    match e.node {\n+        // Don't warn about generated blocks, that'll just pollute the output.\n+        ast::ExprBlock(ref blk) if blk.rules == ast::UnsafeBlock(ast::UserProvided) => {\n+            cx.span_lint(unsafe_block, blk.span, \"usage of an `unsafe` block\");\n+        }\n+        _ => ()\n+    }\n+}\n+\n fn check_unused_mut_pat(cx: &Context, p: @ast::Pat) {\n     match p.node {\n         ast::PatIdent(ast::BindByValue(ast::MutMutable),\n@@ -1126,6 +1143,7 @@ impl<'self> Visitor<()> for Context<'self> {\n         check_while_true_expr(self, e);\n         check_stability(self, e);\n         check_unused_unsafe(self, e);\n+        check_unsafe_block(self, e);\n         check_unnecessary_allocation(self, e);\n         check_heap_expr(self, e);\n "}, {"sha": "a43bdd99c014f425ab3aa2b4599ad4b135415af3", "filename": "src/test/compile-fail/lint-unsafe-block.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1dea21f41d28640d8fa6e9d43a55b9a034383f34/src%2Ftest%2Fcompile-fail%2Flint-unsafe-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea21f41d28640d8fa6e9d43a55b9a034383f34/src%2Ftest%2Fcompile-fail%2Flint-unsafe-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unsafe-block.rs?ref=1dea21f41d28640d8fa6e9d43a55b9a034383f34", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[allow(unused_unsafe)];\n+#[deny(unsafe_block)];\n+\n+unsafe fn allowed() {}\n+\n+#[allow(unsafe_block)] fn also_allowed() { unsafe {} }\n+\n+fn main() {\n+    unsafe {} //~ ERROR: usage of an `unsafe` block\n+}"}]}