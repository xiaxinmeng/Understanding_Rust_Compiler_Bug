{"sha": "b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YTI4MjNjZDZjNmYxYTU2MDQ2OTU4N2Y5MDJmM2ExZjQ5ZDNjNzk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-11T02:33:04Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-17T16:07:17Z"}, "message": "More test fixes and fallout of stability changes", "tree": {"sha": "162e8021fd73ffc7dfe0798dc99097138343977a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/162e8021fd73ffc7dfe0798dc99097138343977a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "html_url": "https://github.com/rust-lang/rust/commit/b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa931e9c6f92557b99978f1cc562c99051190f79", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa931e9c6f92557b99978f1cc562c99051190f79", "html_url": "https://github.com/rust-lang/rust/commit/aa931e9c6f92557b99978f1cc562c99051190f79"}], "stats": {"total": 233, "additions": 111, "deletions": 122}, "files": [{"sha": "7bfeaec36d7295298299cb886740ee0251a0ad1e", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -290,7 +290,7 @@ pub fn strong_count<T: ?Sized>(this: &Arc<T>) -> usize { Arc::strong_count(this)\n              reason = \"this function is unsafe with weak pointers\")]\n pub unsafe fn get_mut<T: ?Sized>(this: &mut Arc<T>) -> Option<&mut T> {\n     // FIXME(#24880) potential race with upgraded weak pointers here\n-    if strong_count(this) == 1 && weak_count(this) == 0 {\n+    if Arc::strong_count(this) == 1 && Arc::weak_count(this) == 0 {\n         // This unsafety is ok because we're guaranteed that the pointer\n         // returned is the *only* pointer that will ever be returned to T. Our\n         // reference count is guaranteed to be 1 at this point, and we required"}, {"sha": "1a360ebc05c71865f95cafd8747744b9c5cf24fc", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -267,7 +267,7 @@ impl Box<Any> {\n         if self.is::<T>() {\n             unsafe {\n                 // Get the raw representation of the trait object\n-                let raw = into_raw(self);\n+                let raw = Box::into_raw(self);\n                 let to: TraitObject =\n                     mem::transmute::<*mut Any, TraitObject>(raw);\n "}, {"sha": "d5b6c86ef359a2f4fb7605350ddbbd544f96f9ea", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -148,26 +148,24 @@\n //! ```\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+use core::prelude::*;\n+\n #[cfg(not(test))]\n-use boxed;\n+use boxed::Box;\n #[cfg(test)]\n-use std::boxed;\n+use std::boxed::Box;\n+\n use core::cell::Cell;\n-use core::clone::Clone;\n-use core::cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering};\n-use core::default::Default;\n+use core::cmp::Ordering;\n use core::fmt;\n use core::hash::{Hasher, Hash};\n use core::intrinsics::{assume, drop_in_place};\n-use core::marker::{self, Sized, Unsize};\n+use core::marker::{self, Unsize};\n use core::mem::{self, min_align_of, size_of, min_align_of_val, size_of_val, forget};\n use core::nonzero::NonZero;\n-use core::ops::{CoerceUnsized, Deref, Drop};\n-use core::option::Option;\n-use core::option::Option::{Some, None};\n+use core::ops::{CoerceUnsized, Deref};\n use core::ptr;\n-use core::result::Result;\n-use core::result::Result::{Ok, Err};\n \n use heap::deallocate;\n \n@@ -212,7 +210,7 @@ impl<T> Rc<T> {\n                 // pointers, which ensures that the weak destructor never frees\n                 // the allocation while the strong destructor is running, even\n                 // if the weak pointer is stored inside the strong one.\n-                _ptr: NonZero::new(boxed::into_raw(box RcBox {\n+                _ptr: NonZero::new(Box::into_raw(box RcBox {\n                     strong: Cell::new(1),\n                     weak: Cell::new(1),\n                     value: value\n@@ -230,14 +228,14 @@ impl<T> Rc<T> {\n     ///\n     /// ```\n     /// # #![feature(rc_unique)]\n-    /// use std::rc::{self, Rc};\n+    /// use std::rc::Rc;\n     ///\n     /// let x = Rc::new(3);\n-    /// assert_eq!(rc::try_unwrap(x), Ok(3));\n+    /// assert_eq!(Rc::try_unwrap(x), Ok(3));\n     ///\n     /// let x = Rc::new(4);\n     /// let _y = x.clone();\n-    /// assert_eq!(rc::try_unwrap(x), Err(Rc::new(4)));\n+    /// assert_eq!(Rc::try_unwrap(x), Err(Rc::new(4)));\n     /// ```\n     #[inline]\n     #[unstable(feature = \"rc_unique\")]\n@@ -295,17 +293,16 @@ impl<T: ?Sized> Rc<T> {\n     ///\n     /// ```\n     /// # #![feature(rc_unique)]\n-    /// use std::rc;\n     /// use std::rc::Rc;\n     ///\n     /// let five = Rc::new(5);\n     ///\n-    /// rc::is_unique(&five);\n+    /// assert!(Rc::is_unique(&five));\n     /// ```\n     #[inline]\n     #[unstable(feature = \"rc_unique\")]\n     pub fn is_unique(rc: &Rc<T>) -> bool {\n-        weak_count(rc) == 0 && strong_count(rc) == 1\n+        Rc::weak_count(rc) == 0 && Rc::strong_count(rc) == 1\n     }\n \n     /// Returns a mutable reference to the contained value if the `Rc<T>` is\n@@ -317,14 +314,14 @@ impl<T: ?Sized> Rc<T> {\n     ///\n     /// ```\n     /// # #![feature(rc_unique)]\n-    /// use std::rc::{self, Rc};\n+    /// use std::rc::Rc;\n     ///\n     /// let mut x = Rc::new(3);\n-    /// *rc::get_mut(&mut x).unwrap() = 4;\n+    /// *Rc::get_mut(&mut x).unwrap() = 4;\n     /// assert_eq!(*x, 4);\n     ///\n     /// let _y = x.clone();\n-    /// assert!(rc::get_mut(&mut x).is_none());\n+    /// assert!(Rc::get_mut(&mut x).is_none());\n     /// ```\n     #[inline]\n     #[unstable(feature = \"rc_unique\")]\n@@ -432,7 +429,7 @@ impl<T: Clone> Rc<T> {\n     #[inline]\n     #[unstable(feature = \"rc_unique\")]\n     pub fn make_unique(&mut self) -> &mut T {\n-        if !is_unique(self) {\n+        if !Rc::is_unique(self) {\n             *self = Rc::new((**self).clone())\n         }\n         // This unsafety is ok because we're guaranteed that the pointer"}, {"sha": "51914900fdd9978fb1e95555ac6b459d7f5a82b9", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -86,6 +86,7 @@ use core::cmp::Ordering;\n use core::cmp;\n use core::fmt;\n use core::hash;\n+#[allow(deprecated)]\n use core::iter::RandomAccessIterator;\n use core::iter::{Chain, Enumerate, Repeat, Skip, Take, repeat, Cloned};\n use core::iter::{self, FromIterator};\n@@ -1188,6 +1189,7 @@ impl<'a> DoubleEndedIterator for Iter<'a> {\n impl<'a> ExactSizeIterator for Iter<'a> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated)]\n impl<'a> RandomAccessIterator for Iter<'a> {\n     #[inline]\n     fn indexable(&self) -> usize {"}, {"sha": "27b10213ecd7cacad8c6344072f149f715fd2dc8", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -685,10 +685,7 @@ mod stack {\n         /// tied to the original tree.\n         pub fn into_top(mut self) -> &'a mut V {\n             unsafe {\n-                mem::copy_mut_lifetime(\n-                    self.map,\n-                    self.top.from_raw_mut().val_mut()\n-                )\n+                &mut *(self.top.from_raw_mut().val_mut() as *mut V)\n             }\n         }\n     }"}, {"sha": "8d0f57de4c59585b70c79697c84c4fa4f661e692", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -34,7 +34,6 @@\n #![feature(box_patterns)]\n #![feature(box_raw)]\n #![feature(box_syntax)]\n-#![feature(copy_lifetime)]\n #![feature(core)]\n #![feature(core_intrinsics)]\n #![feature(core_prelude)]\n@@ -56,7 +55,7 @@\n #![feature(staged_api)]\n #![feature(step_by)]\n #![feature(str_char)]\n-#![feature(str_internals)]\n+#![feature(str_match_indices)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n #![feature(unique)]"}, {"sha": "d49463911e66e3c057cc9c81921be78d40d9e730", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -151,6 +151,7 @@ mod hack {\n         }\n     }\n \n+    #[allow(deprecated)]\n     pub fn permutations<T>(s: &[T]) -> Permutations<T> where T: Clone {\n         Permutations{\n             swaps: ElementSwaps::new(s.len()),\n@@ -871,6 +872,7 @@ impl<T> [T] {\n     /// assert_eq!(Some(vec![1, 3, 2]), perms.next());\n     /// assert_eq!(Some(vec![3, 1, 2]), perms.next());\n     /// ```\n+    #[allow(deprecated)]\n     #[unstable(feature = \"permutations\")]\n     #[deprecated(since = \"1.2.0\", reason = \"not clear this should be in the stdlib\")]\n     #[inline]\n@@ -896,6 +898,7 @@ impl<T> [T] {\n     /// let b: &mut [_] = &mut [1, 0, 2];\n     /// assert!(v == b);\n     /// ```\n+    #[allow(deprecated)]\n     #[unstable(feature = \"permutations\",\n                reason = \"uncertain if this merits inclusion in std\")]\n     #[deprecated(since = \"1.2.0\", reason = \"not clear this should be in the stdlib\")]\n@@ -920,6 +923,7 @@ impl<T> [T] {\n     /// let b: &mut [_] = &mut [0, 1, 2];\n     /// assert!(v == b);\n     /// ```\n+    #[allow(deprecated)]\n     #[unstable(feature = \"permutations\",\n                reason = \"uncertain if this merits inclusion in std\")]\n     #[deprecated(since = \"1.2.0\", reason = \"not clear this should be in the stdlib\")]\n@@ -1067,6 +1071,7 @@ impl<T: Clone, V: Borrow<[T]>> SliceConcatExt<T> for [V] {\n ///\n /// The last generated swap is always (0, 1), and it returns the\n /// sequence to its initial order.\n+#[allow(deprecated)]\n #[unstable(feature = \"permutations\")]\n #[derive(Clone)]\n #[deprecated(since = \"1.2.0\", reason = \"not clear this should be in the stdlib\")]\n@@ -1078,6 +1083,7 @@ pub struct ElementSwaps {\n     swaps_made : usize,\n }\n \n+#[allow(deprecated)]\n impl ElementSwaps {\n     /// Creates an `ElementSwaps` iterator for a sequence of `length` elements.\n     #[unstable(feature = \"permutations\")]\n@@ -1137,6 +1143,7 @@ struct SizeDirection {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated)]\n impl Iterator for ElementSwaps {\n     type Item = (usize, usize);\n \n@@ -1205,12 +1212,14 @@ impl Iterator for ElementSwaps {\n /// Generates even and odd permutations alternately.\n #[unstable(feature = \"permutations\")]\n #[deprecated(since = \"1.2.0\", reason = \"not clear this should be in the stdlib\")]\n+#[allow(deprecated)]\n pub struct Permutations<T> {\n     swaps: ElementSwaps,\n     v: Vec<T>,\n }\n \n #[unstable(feature = \"permutations\", reason = \"trait is unstable\")]\n+#[allow(deprecated)]\n impl<T: Clone> Iterator for Permutations<T> {\n     type Item = Vec<T>;\n "}, {"sha": "5e8a9bca342b0680c695ac803d84f1c2e007edcb", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -1520,7 +1520,6 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(str_matches)]\n     /// let v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\n     /// assert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n     ///\n@@ -1552,7 +1551,6 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(str_matches)]\n     /// let v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\n     /// assert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n     ///\n@@ -1593,7 +1591,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(str_matches)]\n+    /// # #![feature(str_match_indices)]\n     /// let v: Vec<(usize, usize)> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\n     /// assert_eq!(v, [(0, 3), (6, 9), (12, 15)]);\n     ///\n@@ -1637,7 +1635,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(str_matches)]\n+    /// # #![feature(str_match_indices)]\n     /// let v: Vec<(usize, usize)> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\n     /// assert_eq!(v, [(12, 15), (6, 9), (0, 3)]);\n     ///"}, {"sha": "54528c50f1d1e007419d8b206a685ef501744258", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -1709,12 +1709,14 @@ impl<'a, T> FromIterator<T> for Cow<'a, [T]> where T: Clone {\n     }\n }\n \n+#[allow(deprecated)]\n impl<'a, T: 'a> IntoCow<'a, [T]> for Vec<T> where T: Clone {\n     fn into_cow(self) -> Cow<'a, [T]> {\n         Cow::Owned(self)\n     }\n }\n \n+#[allow(deprecated)]\n impl<'a, T> IntoCow<'a, [T]> for &'a [T] where T: Clone {\n     fn into_cow(self) -> Cow<'a, [T]> {\n         Cow::Borrowed(self)"}, {"sha": "edcd1008747fdc271184fd046bc13a4f5544a0d9", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -1530,6 +1530,7 @@ impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated)]\n impl<'a, T> RandomAccessIterator for Iter<'a, T> {\n     #[inline]\n     fn indexable(&self) -> usize {"}, {"sha": "20a3625fe5add309152016c88fe1884042edfcc2", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -43,7 +43,7 @@\n #![feature(step_by)]\n #![feature(str_char)]\n #![feature(str_escape)]\n-#![feature(str_matches)]\n+#![feature(str_match_indices)]\n #![feature(str_utf16)]\n #![feature(subslice_offset)]\n #![feature(test)]"}, {"sha": "3026f91e853eee34f69833a1615d05da56be928a", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -1234,6 +1234,7 @@ impl<'a, I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for &'a mut I {\n              reason = \"trait has not proven itself as a widely useful \\\n                        abstraction for iterators, and more time may be needed \\\n                        for iteration on the design\")]\n+#[allow(deprecated)]\n pub trait RandomAccessIterator: Iterator {\n     /// Returns the number of indexable elements. At most `std::usize::MAX`\n     /// elements are indexable, even if the iterator represents a longer range.\n@@ -1313,6 +1314,7 @@ impl<I> DoubleEndedIterator for Rev<I> where I: DoubleEndedIterator {\n }\n \n #[unstable(feature = \"iter_idx\", reason = \"trait is experimental\")]\n+#[allow(deprecated)]\n impl<I> RandomAccessIterator for Rev<I>\n     where I: DoubleEndedIterator + RandomAccessIterator\n {\n@@ -1416,6 +1418,7 @@ impl<'a, I, T: 'a> ExactSizeIterator for Cloned<I>\n {}\n \n #[unstable(feature = \"iter_idx\", reason = \"trait is experimental\")]\n+#[allow(deprecated)]\n impl<'a, I, T: 'a> RandomAccessIterator for Cloned<I>\n     where I: RandomAccessIterator<Item=&'a T>, T: Clone\n {\n@@ -1463,6 +1466,7 @@ impl<I> Iterator for Cycle<I> where I: Clone + Iterator {\n }\n \n #[unstable(feature = \"iter_idx\", reason = \"trait is experimental\")]\n+#[allow(deprecated)]\n impl<I> RandomAccessIterator for Cycle<I> where\n     I: Clone + RandomAccessIterator,\n {\n@@ -1577,6 +1581,7 @@ impl<A, B> DoubleEndedIterator for Chain<A, B> where\n }\n \n #[unstable(feature = \"iter_idx\", reason = \"trait is experimental\")]\n+#[allow(deprecated)]\n impl<A, B> RandomAccessIterator for Chain<A, B> where\n     A: RandomAccessIterator,\n     B: RandomAccessIterator<Item = A::Item>,\n@@ -1665,6 +1670,7 @@ impl<A, B> DoubleEndedIterator for Zip<A, B> where\n }\n \n #[unstable(feature = \"iter_idx\", reason = \"trait is experimental\")]\n+#[allow(deprecated)]\n impl<A, B> RandomAccessIterator for Zip<A, B> where\n     A: RandomAccessIterator,\n     B: RandomAccessIterator\n@@ -1719,6 +1725,7 @@ impl<B, I: DoubleEndedIterator, F> DoubleEndedIterator for Map<I, F> where\n }\n \n #[unstable(feature = \"iter_idx\", reason = \"trait is experimental\")]\n+#[allow(deprecated)]\n impl<B, I: RandomAccessIterator, F> RandomAccessIterator for Map<I, F> where\n     F: FnMut(I::Item) -> B,\n {\n@@ -1893,6 +1900,7 @@ impl<I> DoubleEndedIterator for Enumerate<I> where\n }\n \n #[unstable(feature = \"iter_idx\", reason = \"trait is experimental\")]\n+#[allow(deprecated)]\n impl<I> RandomAccessIterator for Enumerate<I> where I: RandomAccessIterator {\n     #[inline]\n     fn indexable(&self) -> usize {\n@@ -2143,6 +2151,7 @@ impl<I> Iterator for Skip<I> where I: Iterator {\n }\n \n #[unstable(feature = \"iter_idx\", reason = \"trait is experimental\")]\n+#[allow(deprecated)]\n impl<I> RandomAccessIterator for Skip<I> where I: RandomAccessIterator{\n     #[inline]\n     fn indexable(&self) -> usize {\n@@ -2215,6 +2224,7 @@ impl<I> Iterator for Take<I> where I: Iterator{\n }\n \n #[unstable(feature = \"iter_idx\", reason = \"trait is experimental\")]\n+#[allow(deprecated)]\n impl<I> RandomAccessIterator for Take<I> where I: RandomAccessIterator{\n     #[inline]\n     fn indexable(&self) -> usize {\n@@ -2416,6 +2426,7 @@ impl<I> DoubleEndedIterator for Fuse<I> where I: DoubleEndedIterator {\n \n // Allow RandomAccessIterators to be fused without affecting random-access behavior\n #[unstable(feature = \"iter_idx\", reason = \"trait is experimental\")]\n+#[allow(deprecated)]\n impl<I> RandomAccessIterator for Fuse<I> where I: RandomAccessIterator {\n     #[inline]\n     fn indexable(&self) -> usize {\n@@ -2491,6 +2502,7 @@ impl<I: DoubleEndedIterator, F> DoubleEndedIterator for Inspect<I, F>\n }\n \n #[unstable(feature = \"iter_idx\", reason = \"trait is experimental\")]\n+#[allow(deprecated)]\n impl<I: RandomAccessIterator, F> RandomAccessIterator for Inspect<I, F>\n     where F: FnMut(&I::Item),\n {\n@@ -2545,6 +2557,7 @@ impl<I: RandomAccessIterator, F> RandomAccessIterator for Inspect<I, F>\n #[deprecated(since = \"1.2.0\",\n              reason = \"has gained enough traction to retain its position \\\n                        in the standard library\")]\n+#[allow(deprecated)]\n pub struct Unfold<St, F> {\n     f: F,\n     /// Internal state that will be passed to the closure on the next iteration\n@@ -2556,6 +2569,7 @@ pub struct Unfold<St, F> {\n #[deprecated(since = \"1.2.0\",\n              reason = \"has gained enough traction to retain its position \\\n                        in the standard library\")]\n+#[allow(deprecated)]\n impl<A, St, F> Unfold<St, F> where F: FnMut(&mut St) -> Option<A> {\n     /// Creates a new iterator with the specified closure as the \"iterator\n     /// function\" and an initial state to eventually pass to the closure\n@@ -2569,6 +2583,7 @@ impl<A, St, F> Unfold<St, F> where F: FnMut(&mut St) -> Option<A> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated)]\n impl<A, St, F> Iterator for Unfold<St, F> where F: FnMut(&mut St) -> Option<A> {\n     type Item = A;\n \n@@ -2977,18 +2992,19 @@ impl<A: Clone> Iterator for Repeat<A> {\n     type Item = A;\n \n     #[inline]\n-    fn next(&mut self) -> Option<A> { self.idx(0) }\n+    fn next(&mut self) -> Option<A> { Some(self.element.clone()) }\n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) { (usize::MAX, None) }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A: Clone> DoubleEndedIterator for Repeat<A> {\n     #[inline]\n-    fn next_back(&mut self) -> Option<A> { self.idx(0) }\n+    fn next_back(&mut self) -> Option<A> { Some(self.element.clone()) }\n }\n \n #[unstable(feature = \"iter_idx\", reason = \"trait is experimental\")]\n+#[allow(deprecated)]\n impl<A: Clone> RandomAccessIterator for Repeat<A> {\n     #[inline]\n     fn indexable(&self) -> usize { usize::MAX }\n@@ -3004,6 +3020,7 @@ type IterateState<T, F> = (F, Option<T>, bool);\n #[deprecated(since = \"1.2.0\",\n              reason = \"has gained enough traction to retain its position \\\n                        in the standard library\")]\n+#[allow(deprecated)]\n pub type Iterate<T, F> = Unfold<IterateState<T, F>, fn(&mut IterateState<T, F>) -> Option<T>>;\n \n /// Creates a new iterator that produces an infinite sequence of\n@@ -3012,6 +3029,7 @@ pub type Iterate<T, F> = Unfold<IterateState<T, F>, fn(&mut IterateState<T, F>)\n #[deprecated(since = \"1.2.0\",\n              reason = \"has gained enough traction to retain its position \\\n                        in the standard library\")]\n+#[allow(deprecated)]\n pub fn iterate<T, F>(seed: T, f: F) -> Iterate<T, F> where\n     T: Clone,\n     F: FnMut(T) -> T,"}, {"sha": "a8c995f37cce44cb84bcb5bf86bfeff447d159cc", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -802,6 +802,7 @@ impl<'a, T> Clone for Iter<'a, T> {\n }\n \n #[unstable(feature = \"iter_idx\", reason = \"trait is experimental\")]\n+#[allow(deprecated)]\n impl<'a, T> RandomAccessIterator for Iter<'a, T> {\n     #[inline]\n     fn indexable(&self) -> usize {\n@@ -1174,6 +1175,7 @@ impl<'a, T> DoubleEndedIterator for Windows<'a, T> {\n impl<'a, T> ExactSizeIterator for Windows<'a, T> {}\n \n #[unstable(feature = \"iter_idx\", reason = \"trait is experimental\")]\n+#[allow(deprecated)]\n impl<'a, T> RandomAccessIterator for Windows<'a, T> {\n     #[inline]\n     fn indexable(&self) -> usize {\n@@ -1261,6 +1263,7 @@ impl<'a, T> DoubleEndedIterator for Chunks<'a, T> {\n impl<'a, T> ExactSizeIterator for Chunks<'a, T> {}\n \n #[unstable(feature = \"iter_idx\", reason = \"trait is experimental\")]\n+#[allow(deprecated)]\n impl<'a, T> RandomAccessIterator for Chunks<'a, T> {\n     #[inline]\n     fn indexable(&self) -> usize {\n@@ -1520,6 +1523,7 @@ pub trait IntSliceExt<U, S> {\n macro_rules! impl_int_slice {\n     ($u:ty, $s:ty, $t:ty) => {\n         #[unstable(feature = \"int_slice\")]\n+        #[allow(deprecated)]\n         impl IntSliceExt<$u, $s> for [$t] {\n             #[inline]\n             fn as_unsigned(&self) -> &[$u] { unsafe { transmute(self) } }"}, {"sha": "7bafd9382f059e8f715507212ec11085855f18d8", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -173,12 +173,10 @@\n #![feature(box_syntax)]\n #![feature(const_fn)]\n #![feature(iter_cmp)]\n-#![feature(once_new)]\n #![feature(rt)]\n #![feature(staged_api)]\n #![feature(static_mutex)]\n \n-use std::boxed;\n use std::cell::RefCell;\n use std::fmt;\n use std::io::{self, Stderr};\n@@ -437,12 +435,12 @@ fn init() {\n \n         assert!(FILTER.is_null());\n         match filter {\n-            Some(f) => FILTER = boxed::into_raw(box f),\n+            Some(f) => FILTER = Box::into_raw(box f),\n             None => {}\n         }\n \n         assert!(DIRECTIVES.is_null());\n-        DIRECTIVES = boxed::into_raw(box directives);\n+        DIRECTIVES = Box::into_raw(box directives);\n \n         // Schedule the cleanup for the globals for when the runtime exits.\n         let _ = rt::at_exit(move || {"}, {"sha": "240aaae0e55afabe568b2647336afe04cf9f22e6", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -57,7 +57,7 @@\n #![feature(slice_position_elem)]\n #![feature(staged_api)]\n #![feature(str_char)]\n-#![feature(str_matches)]\n+#![feature(str_match_indices)]\n #![feature(vec_push_all)]\n #![feature(wrapping)]\n #![cfg_attr(test, feature(test))]"}, {"sha": "fe3ffe97981515698d074febe9d322ca959e3f3c", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -26,7 +26,6 @@\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n #![feature(box_syntax)]\n-#![feature(exit_status)]\n #![feature(libc)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n@@ -73,6 +72,7 @@ use std::env;\n use std::io::{self, Read, Write};\n use std::iter::repeat;\n use std::path::PathBuf;\n+use std::process;\n use std::str;\n use std::sync::{Arc, Mutex};\n use std::thread;\n@@ -861,5 +861,5 @@ pub fn diagnostics_registry() -> diagnostics::registry::Registry {\n \n pub fn main() {\n     let result = run(env::args().collect());\n-    std::env::set_exit_status(result as i32);\n+    process::exit(result as i32);\n }"}, {"sha": "267f0b6d95329dbfb9d80ffbc628d40988b28caf", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -25,7 +25,6 @@ use syntax::diagnostic::{Emitter, Handler, Level};\n \n use std::ffi::{CStr, CString};\n use std::fs;\n-use std::iter::Unfold;\n use std::mem;\n use std::path::Path;\n use std::process::{Command, Stdio};\n@@ -913,11 +912,10 @@ fn run_work_singlethreaded(sess: &Session,\n                            reachable: &[String],\n                            work_items: Vec<WorkItem>) {\n     let cgcx = CodegenContext::new_with_session(sess, reachable);\n-    let mut work_items = work_items;\n \n     // Since we're running single-threaded, we can pass the session to\n     // the proc, allowing `optimize_and_codegen` to perform LTO.\n-    for work in Unfold::new((), |_| work_items.pop()) {\n+    for work in work_items.into_iter().rev() {\n         execute_work_item(&cgcx, work);\n     }\n }"}, {"sha": "8ced85d336b74ccf9c83b6edda86f21d8edbead5", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -31,9 +31,7 @@\n #![feature(fs)]\n #![feature(iter_cmp)]\n #![feature(iter_arith)]\n-#![feature(iter_unfold)]\n #![feature(libc)]\n-#![feature(once_new)]\n #![feature(path_ext)]\n #![feature(path_ext)]\n #![feature(path_relative_from)]"}, {"sha": "17d912dd4cb333936e16e21a0b0a0305414466e6", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -23,7 +23,6 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(dynamic_lib)]\n-#![feature(exit_status)]\n #![feature(libc)]\n #![feature(owned_ascii_ext)]\n #![feature(path_ext)]\n@@ -61,6 +60,7 @@ use std::env;\n use std::fs::File;\n use std::io::{self, Read, Write};\n use std::path::PathBuf;\n+use std::process;\n use std::rc::Rc;\n use std::sync::mpsc::channel;\n \n@@ -134,7 +134,7 @@ pub fn main() {\n         let s = env::args().collect::<Vec<_>>();\n         main_args(&s)\n     }).unwrap().join().unwrap();\n-    env::set_exit_status(res as i32);\n+    process::exit(res as i32);\n }\n \n pub fn opts() -> Vec<getopts::OptGroup> {"}, {"sha": "e7d9751cf4bc6d85718d8f975155fa8cf5c261dd", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -32,7 +32,6 @@ Core encoding and decoding interfaces.\n #![feature(enumset)]\n #![feature(hashmap_hasher)]\n #![feature(num_bits_bytes)]\n-#![feature(num_wrapping)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n #![feature(str_char)]"}, {"sha": "17e8859d63f28c776b58d87f47dbd14b502e6649", "filename": "src/libstd/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -48,7 +48,7 @@\n // reconsider what crate these items belong in.\n \n use any::TypeId;\n-use boxed::{self, Box};\n+use boxed::Box;\n use convert::From;\n use fmt::{self, Debug, Display};\n use marker::{Send, Sync, Reflect};\n@@ -249,7 +249,7 @@ impl Error {\n         if self.is::<T>() {\n             unsafe {\n                 // Get the raw representation of the trait object\n-                let raw = boxed::into_raw(self);\n+                let raw = Box::into_raw(self);\n                 let to: TraitObject =\n                     transmute::<*mut Error, TraitObject>(raw);\n "}, {"sha": "becc697bcd9a0a0919f2821fdecba1f2b3429d75", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n use borrow::{Cow, ToOwned};\n-use boxed::{self, Box};\n+use boxed::Box;\n use clone::Clone;\n use convert::{Into, From};\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n@@ -226,7 +225,7 @@ impl CString {\n         // It is important that the bytes be sized to fit - we need\n         // the capacity to be determinable from the string length, and\n         // shrinking to fit is the only way to be sure.\n-        boxed::into_raw(self.inner) as *const libc::c_char\n+        Box::into_raw(self.inner) as *const libc::c_char\n     }\n \n     /// Returns the contents of this `CString` as a slice of bytes."}, {"sha": "1d0152e275117801482c1805699de2cace64784e", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -465,6 +465,7 @@ pub struct BufStream<S: Write> {\n                      leading to issues like #17136\")]\n #[deprecated(since = \"1.2.0\",\n              reason = \"use the crates.io `bufstream` crate instead\")]\n+#[allow(deprecated)]\n impl<S: Read + Write> BufStream<S> {\n     /// Creates a new buffered stream with explicitly listed capacities for the\n     /// reader/writer buffer.\n@@ -516,6 +517,7 @@ impl<S: Read + Write> BufStream<S> {\n #[unstable(feature = \"buf_stream\",\n            reason = \"unsure about semantics of buffering two directions, \\\n                      leading to issues like #17136\")]\n+#[allow(deprecated)]\n impl<S: Read + Write> BufRead for BufStream<S> {\n     fn fill_buf(&mut self) -> io::Result<&[u8]> { self.inner.fill_buf() }\n     fn consume(&mut self, amt: usize) { self.inner.consume(amt) }\n@@ -524,6 +526,7 @@ impl<S: Read + Write> BufRead for BufStream<S> {\n #[unstable(feature = \"buf_stream\",\n            reason = \"unsure about semantics of buffering two directions, \\\n                      leading to issues like #17136\")]\n+#[allow(deprecated)]\n impl<S: Read + Write> Read for BufStream<S> {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.inner.read(buf)\n@@ -533,6 +536,7 @@ impl<S: Read + Write> Read for BufStream<S> {\n #[unstable(feature = \"buf_stream\",\n            reason = \"unsure about semantics of buffering two directions, \\\n                      leading to issues like #17136\")]\n+#[allow(deprecated)]\n impl<S: Read + Write> Write for BufStream<S> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.inner.get_mut().write(buf)\n@@ -545,6 +549,7 @@ impl<S: Read + Write> Write for BufStream<S> {\n #[unstable(feature = \"buf_stream\",\n            reason = \"unsure about semantics of buffering two directions, \\\n                      leading to issues like #17136\")]\n+#[allow(deprecated)]\n impl<S: Write> fmt::Debug for BufStream<S> where S: fmt::Debug {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let reader = &self.inner;"}, {"sha": "c3e309d182b9587ca34775723343fd75d3d54633", "filename": "src/libstd/io/lazy.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Fio%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Fio%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Flazy.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -10,7 +10,6 @@\n \n use prelude::v1::*;\n \n-use boxed;\n use cell::Cell;\n use rt;\n use sync::{StaticMutex, Arc};\n@@ -60,7 +59,7 @@ impl<T: Send + Sync + 'static> Lazy<T> {\n         });\n         let ret = (self.init)();\n         if registered.is_ok() {\n-            self.ptr.set(boxed::into_raw(Box::new(ret.clone())));\n+            self.ptr.set(Box::into_raw(Box::new(ret.clone())));\n         }\n         return ret\n     }"}, {"sha": "251f962c5e35e07ee048b02de8782876e024ef47", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -106,7 +106,6 @@\n #![feature(alloc)]\n #![feature(allow_internal_unstable)]\n #![feature(associated_consts)]\n-#![feature(borrow_state)]\n #![feature(box_raw)]\n #![feature(box_syntax)]\n #![feature(char_internals)]"}, {"sha": "17d2940a6f10c4ab8c2818c8b4f20d37e3b1e21e", "filename": "src/libstd/rt/at_exit_imp.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Frt%2Fat_exit_imp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Frt%2Fat_exit_imp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fat_exit_imp.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -16,13 +16,12 @@\n // segfaults (the queue's memory is mysteriously gone), so\n // instead the cleanup is tied to the `std::rt` entry point.\n \n-use boxed;\n+use alloc::boxed::FnBox;\n use boxed::Box;\n-use vec::Vec;\n-use thunk::Thunk;\n use sys_common::mutex::Mutex;\n+use vec::Vec;\n \n-type Queue = Vec<Thunk<'static>>;\n+type Queue = Vec<Box<FnBox()>>;\n \n // NB these are specifically not types from `std::sync` as they currently rely\n // on poisoning and this module needs to operate at a lower level than requiring\n@@ -40,7 +39,7 @@ const ITERS: usize = 10;\n unsafe fn init() -> bool {\n     if QUEUE.is_null() {\n         let state: Box<Queue> = box Vec::new();\n-        QUEUE = boxed::into_raw(state);\n+        QUEUE = Box::into_raw(state);\n     } else if QUEUE as usize == 1 {\n         // can't re-init after a cleanup\n         return false\n@@ -71,7 +70,7 @@ pub fn cleanup() {\n     }\n }\n \n-pub fn push(f: Thunk<'static>) -> bool {\n+pub fn push(f: Box<FnBox()>) -> bool {\n     let mut ret = true;\n     unsafe {\n         LOCK.lock();"}, {"sha": "1729d20da205c686d5763195b8988432f38a65ee", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -139,7 +139,9 @@ fn lang_start(main: *const u8, argc: isize, argv: *const *const u8) -> isize {\n     if failed {\n         rt::DEFAULT_ERROR_CODE\n     } else {\n-        env::get_exit_status() as isize\n+        #[allow(deprecated)]\n+        fn exit_status() -> isize { env::get_exit_status() as isize }\n+        exit_status()\n     }\n }\n "}, {"sha": "84c6d6864a9e5d592aee14b45adf29d46daa331c", "filename": "src/libstd/rt/unwind/gcc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Frt%2Funwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Frt%2Funwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind%2Fgcc.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -11,7 +11,6 @@\n use prelude::v1::*;\n \n use any::Any;\n-use boxed;\n use libc::c_void;\n use rt::libunwind as uw;\n \n@@ -29,7 +28,7 @@ pub unsafe fn panic(data: Box<Any + Send + 'static>) -> ! {\n         },\n         cause: Some(data),\n     };\n-    let exception_param = boxed::into_raw(exception) as *mut uw::_Unwind_Exception;\n+    let exception_param = Box::into_raw(exception) as *mut uw::_Unwind_Exception;\n     let error = uw::_Unwind_RaiseException(exception_param);\n     rtabort!(\"Could not unwind stack, error = {}\", error as isize);\n "}, {"sha": "28dc124f0334fca39c5cec7e1a9e6582a7a49d25", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -32,10 +32,11 @@\n             reason = \"futures as-is have yet to be deeply reevaluated with recent \\\n                       core changes to Rust's synchronization story, and will likely \\\n                       become stable in the future but are unstable until that time\")]\n-#[deprecated(since = \"1.2.0\",\n-             reason = \"implementation does not match the quality of the \\\n-                       standard library and this will likely be prototyped \\\n-                       outside in crates.io first\")]\n+#![deprecated(since = \"1.2.0\",\n+              reason = \"implementation does not match the quality of the \\\n+                        standard library and this will likely be prototyped \\\n+                        outside in crates.io first\")]\n+#![allow(deprecated)]\n \n use core::prelude::*;\n use core::mem::replace;"}, {"sha": "ab8d4587cfd3d7ce6174120a12a04b93c293d758", "filename": "src/libstd/sync/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmod.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -30,6 +30,7 @@ pub use self::rwlock::{RwLockReadGuard, RwLockWriteGuard};\n pub use self::rwlock::{RwLock, StaticRwLock, RW_LOCK_INIT};\n pub use self::semaphore::{Semaphore, SemaphoreGuard};\n \n+#[allow(deprecated)]\n pub use self::future::Future;\n \n pub mod mpsc;"}, {"sha": "d6d173e5e7e7e2ee345465a16d9e148e1e8fe166", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -42,7 +42,6 @@ pub use self::PopResult::*;\n \n use core::prelude::*;\n \n-use alloc::boxed;\n use alloc::boxed::Box;\n use core::ptr;\n use core::cell::UnsafeCell;\n@@ -80,7 +79,7 @@ unsafe impl<T: Send> Sync for Queue<T> { }\n \n impl<T> Node<T> {\n     unsafe fn new(v: Option<T>) -> *mut Node<T> {\n-        boxed::into_raw(box Node {\n+        Box::into_raw(box Node {\n             next: AtomicPtr::new(ptr::null_mut()),\n             value: v,\n         })"}, {"sha": "3cf75de5a46ddf7e6964bb07b9da5e40b1194752", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -35,7 +35,6 @@\n \n use core::prelude::*;\n \n-use alloc::boxed;\n use alloc::boxed::Box;\n use core::ptr;\n use core::cell::UnsafeCell;\n@@ -78,7 +77,7 @@ unsafe impl<T: Send> Sync for Queue<T> { }\n \n impl<T> Node<T> {\n     fn new() -> *mut Node<T> {\n-        boxed::into_raw(box Node {\n+        Box::into_raw(box Node {\n             value: None,\n             next: AtomicPtr::new(ptr::null_mut::<Node<T>>()),\n         })"}, {"sha": "41cd11e4c6900ea88790abca9c4ba8b44d49562f", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -85,8 +85,6 @@ use sys_common::poison::{self, TryLockError, TryLockResult, LockResult};\n /// To recover from a poisoned mutex:\n ///\n /// ```\n-/// #![feature(sync_poison)]\n-///\n /// use std::sync::{Arc, Mutex};\n /// use std::thread;\n ///"}, {"sha": "8ea673d2162d13322777c8556e66405b698cf8ed", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -28,7 +28,7 @@\n use core::prelude::*;\n \n use core::char::{encode_utf8_raw, encode_utf16_raw};\n-use core::str::{char_range_at_raw, next_code_point};\n+use core::str::next_code_point;\n \n use ascii::*;\n use borrow::Cow;\n@@ -1148,30 +1148,6 @@ mod tests {\n         assert_eq!(slice.ascii_byte_at(4), b'\\xFF');\n     }\n \n-    #[test]\n-    fn wtf8_code_point_at() {\n-        let mut string = Wtf8Buf::from_str(\"a\u00e9 \");\n-        string.push(CodePoint::from_u32(0xD83D).unwrap());\n-        string.push_char('\ud83d\udca9');\n-        assert_eq!(string.code_point_at(0), CodePoint::from_char('a'));\n-        assert_eq!(string.code_point_at(1), CodePoint::from_char('\u00e9'));\n-        assert_eq!(string.code_point_at(3), CodePoint::from_char(' '));\n-        assert_eq!(string.code_point_at(4), CodePoint::from_u32(0xD83D).unwrap());\n-        assert_eq!(string.code_point_at(7), CodePoint::from_char('\ud83d\udca9'));\n-    }\n-\n-    #[test]\n-    fn wtf8_code_point_range_at() {\n-        let mut string = Wtf8Buf::from_str(\"a\u00e9 \");\n-        string.push(CodePoint::from_u32(0xD83D).unwrap());\n-        string.push_char('\ud83d\udca9');\n-        assert_eq!(string.code_point_range_at(0), (CodePoint::from_char('a'), 1));\n-        assert_eq!(string.code_point_range_at(1), (CodePoint::from_char('\u00e9'), 3));\n-        assert_eq!(string.code_point_range_at(3), (CodePoint::from_char(' '), 4));\n-        assert_eq!(string.code_point_range_at(4), (CodePoint::from_u32(0xD83D).unwrap(), 7));\n-        assert_eq!(string.code_point_range_at(7), (CodePoint::from_char('\ud83d\udca9'), 11));\n-    }\n-\n     #[test]\n     fn wtf8_code_points() {\n         fn c(value: u32) -> CodePoint { CodePoint::from_u32(value).unwrap() }"}, {"sha": "2c4b716cc6e94431c98e01abdaa7f4b40b3f7fa1", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -326,7 +326,6 @@ mod imp {\n     // Due to rust-lang/rust#18804, make sure this is not generic!\n     #[cfg(target_os = \"linux\")]\n     unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {\n-        use boxed;\n         use mem;\n         use ptr;\n         use libc;\n@@ -360,7 +359,7 @@ mod imp {\n         type List = Vec<(*mut u8, unsafe extern fn(*mut u8))>;\n         if DTORS.get().is_null() {\n             let v: Box<List> = box Vec::new();\n-            DTORS.set(boxed::into_raw(v) as *mut u8);\n+            DTORS.set(Box::into_raw(v) as *mut u8);\n         }\n         let list: &mut List = &mut *(DTORS.get() as *mut List);\n         list.push((t, dtor));"}, {"sha": "dbb7d3233bc39a95086ee4f5048461123af725d1", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -404,6 +404,7 @@ pub fn spawn<F, T>(f: F) -> JoinHandle<T> where\n #[deprecated(since = \"1.2.0\",\n              reason = \"this unsafe API is unlikely to ever be stabilized \\\n                        in this form\")]\n+#[allow(deprecated)]\n pub fn scoped<'a, T, F>(f: F) -> JoinGuard<'a, T> where\n     T: Send + 'a, F: FnOnce() -> T, F: Send + 'a\n {"}, {"sha": "f800b4863c669f1fe02e9d28f826cae01c162b3d", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -46,7 +46,6 @@\n #![feature(set_stdio)]\n #![feature(slice_extras)]\n #![feature(staged_api)]\n-#![feature(thunk)]\n \n extern crate getopts;\n extern crate serialize;\n@@ -82,7 +81,6 @@ use std::path::PathBuf;\n use std::sync::mpsc::{channel, Sender};\n use std::sync::{Arc, Mutex};\n use std::thread;\n-use std::thunk::Thunk;\n use std::time::Duration;\n \n // to be used by rustc to compile tests in libtest\n@@ -155,7 +153,7 @@ pub enum TestFn {\n     StaticTestFn(fn()),\n     StaticBenchFn(fn(&mut Bencher)),\n     StaticMetricFn(fn(&mut MetricMap)),\n-    DynTestFn(Thunk<'static>),\n+    DynTestFn(Box<FnBox() + Send>),\n     DynMetricFn(Box<FnBox(&mut MetricMap)+Send>),\n     DynBenchFn(Box<TDynBenchFn+'static>)\n }\n@@ -961,7 +959,7 @@ pub fn run_test(opts: &TestOpts,\n     fn run_test_inner(desc: TestDesc,\n                       monitor_ch: Sender<MonitorMsg>,\n                       nocapture: bool,\n-                      testfn: Thunk<'static>) {\n+                      testfn: Box<FnBox() + Send>) {\n         struct Sink(Arc<Mutex<Vec<u8>>>);\n         impl Write for Sink {\n             fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n@@ -1229,7 +1227,6 @@ mod tests {\n                TestDesc, TestDescAndFn, TestOpts, run_test,\n                MetricMap,\n                StaticTestName, DynTestName, DynTestFn, ShouldPanic};\n-    use std::thunk::Thunk;\n     use std::sync::mpsc::channel;\n \n     #[test]"}, {"sha": "acb1c5cbd90baabdc08ee46381cbd771719e57d5", "filename": "src/rustbook/main.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Frustbook%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Frustbook%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fmain.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -10,7 +10,6 @@\n \n #![deny(warnings)]\n \n-#![feature(exit_status)]\n #![feature(iter_arith)]\n #![feature(path_relative_from)]\n #![feature(rustc_private)]\n@@ -21,6 +20,8 @@ extern crate rustc_back;\n \n use std::env;\n use std::error::Error;\n+use std::process;\n+use std::sync::atomic::{AtomicIsize, ATOMIC_ISIZE_INIT, Ordering};\n use subcommand::Subcommand;\n use term::Term;\n \n@@ -37,6 +38,8 @@ mod test;\n mod css;\n mod javascript;\n \n+static EXIT_STATUS: AtomicIsize = ATOMIC_ISIZE_INIT;\n+\n #[cfg(not(test))] // thanks #12327\n fn main() {\n     let mut term = Term::new();\n@@ -70,4 +73,5 @@ fn main() {\n             }\n         }\n     }\n+    process::exit(EXIT_STATUS.load(Ordering::SeqCst) as i32);\n }"}, {"sha": "cdd25e67c8ff13274da1928c75296862c8c958af", "filename": "src/rustbook/term.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Frustbook%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Frustbook%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fterm.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -11,9 +11,9 @@\n //! An abstraction of the terminal. Eventually, provide color and\n //! verbosity support. For now, just a wrapper around stdout/stderr.\n \n-use std::env;\n use std::io;\n use std::io::prelude::*;\n+use std::sync::atomic::Ordering;\n \n pub struct Term {\n     err: Box<Write + 'static>\n@@ -29,6 +29,6 @@ impl Term {\n     pub fn err(&mut self, msg: &str) {\n         // swallow any errors\n         let _ = writeln!(&mut self.err, \"{}\", msg);\n-        env::set_exit_status(101);\n+        ::EXIT_STATUS.store(101, Ordering::SeqCst);\n     }\n }"}, {"sha": "05de69cb966ad6590962c723b26db607b0ee6f77", "filename": "src/test/run-pass/issue-11958.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Ftest%2Frun-pass%2Fissue-11958.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a2823cd6c6f1a560469587f902f3a1f49d3c79/src%2Ftest%2Frun-pass%2Fissue-11958.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11958.rs?ref=b4a2823cd6c6f1a560469587f902f3a1f49d3c79", "patch": "@@ -8,19 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n-\n #![forbid(warnings)]\n-#![feature(thunk)]\n-\n-// Pretty printing tests complain about `use std::predule::*`\n-#![allow(unused_imports)]\n \n // We shouldn't need to rebind a moved upvar as mut if it's already\n // marked as mut\n \n-use std::thunk::Thunk;\n-\n pub fn main() {\n     let mut x = 1;\n     let _thunk = Box::new(move|| { x = 2; });"}]}