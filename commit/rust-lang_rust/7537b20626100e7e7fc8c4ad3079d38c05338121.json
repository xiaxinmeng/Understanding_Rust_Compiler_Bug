{"sha": "7537b20626100e7e7fc8c4ad3079d38c05338121", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MzdiMjA2MjYxMDBlN2U3ZmM4YzRhZDMwNzlkMzhjMDUzMzgxMjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-14T18:04:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-14T18:04:22Z"}, "message": "Auto merge of #83948 - ABouttefeux:lint-nullprt-deref, r=RalfJung\n\nadd lint deref_nullptr detecting when a null ptr is dereferenced\n\nfixes #83856\nchangelog: add lint that detect code like\n```rust\nunsafe {\n      &*core::ptr::null::<i32>()\n };\nunsafe {\n     addr_of!(std::ptr::null::<i32>())\n};\nlet x: i32 = unsafe {*core::ptr::null()};\nlet x: i32 = unsafe {*core::ptr::null_mut()};\nunsafe {*(0 as *const i32)};\nunsafe {*(core::ptr::null() as *const i32)};\n```\n```\nwarning: Dereferencing a null pointer causes undefined behavior\n --> src\\main.rs:5:26\n  |\n5 |     let x: i32 = unsafe {*core::ptr::null()};\n  |                          ^^^^^^^^^^^^^^^^^^\n  |                          |\n  |                          a null pointer is dereferenced\n  |                          this code causes undefined behavior when executed\n  |\n  = note: `#[warn(deref_nullptr)]` on by default\n```\n\nLimitation:\nIt does not detect code like\n```rust\nconst ZERO: usize = 0;\nunsafe {*(ZERO as *const i32)};\n```\nor code where `0` is not directly a literal", "tree": {"sha": "6a89a9ed2076f0e1530b422024dc4651ccb6dfa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a89a9ed2076f0e1530b422024dc4651ccb6dfa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7537b20626100e7e7fc8c4ad3079d38c05338121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7537b20626100e7e7fc8c4ad3079d38c05338121", "html_url": "https://github.com/rust-lang/rust/commit/7537b20626100e7e7fc8c4ad3079d38c05338121", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7537b20626100e7e7fc8c4ad3079d38c05338121/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07ef25984549bc33adbdc402e977655d8c9093a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/07ef25984549bc33adbdc402e977655d8c9093a7", "html_url": "https://github.com/rust-lang/rust/commit/07ef25984549bc33adbdc402e977655d8c9093a7"}, {"sha": "7f0f83a26fdec4caa2a8512f9fc611d504b7aad2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f0f83a26fdec4caa2a8512f9fc611d504b7aad2", "html_url": "https://github.com/rust-lang/rust/commit/7f0f83a26fdec4caa2a8512f9fc611d504b7aad2"}], "stats": {"total": 201, "additions": 201, "deletions": 0}, "files": [{"sha": "7f9e459635a76ca2165a25a7bc8f51d200494dca", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/7537b20626100e7e7fc8c4ad3079d38c05338121/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7537b20626100e7e7fc8c4ad3079d38c05338121/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=7537b20626100e7e7fc8c4ad3079d38c05338121", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n //! Lints in the Rust compiler.\n //!\n //! This contains lints which can feasibly be implemented as their own\n@@ -2964,3 +2966,88 @@ impl<'tcx> LateLintPass<'tcx> for ClashingExternDeclarations {\n         }\n     }\n }\n+\n+declare_lint! {\n+    /// The `deref_nullptr` lint detects when an null pointer is dereferenced,\n+    /// which causes [undefined behavior].\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,no_run\n+    /// # #![allow(unused)]\n+    /// use std::ptr;\n+    /// unsafe {\n+    ///     let x = &*ptr::null::<i32>();\n+    ///     let x = ptr::addr_of!(*ptr::null::<i32>());\n+    ///     let x = *(0 as *const i32);\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Dereferencing a null pointer causes [undefined behavior] even as a place expression,\n+    /// like `&*(0 as *const i32)` or `addr_of!(*(0 as *const i32))`.\n+    ///\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+    pub DEREF_NULLPTR,\n+    Warn,\n+    \"detects when an null pointer is dereferenced\"\n+}\n+\n+declare_lint_pass!(DerefNullPtr => [DEREF_NULLPTR]);\n+\n+impl<'tcx> LateLintPass<'tcx> for DerefNullPtr {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &hir::Expr<'_>) {\n+        /// test if expression is a null ptr\n+        fn is_null_ptr(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> bool {\n+            match &expr.kind {\n+                rustc_hir::ExprKind::Cast(ref expr, ref ty) => {\n+                    if let rustc_hir::TyKind::Ptr(_) = ty.kind {\n+                        return is_zero(expr) || is_null_ptr(cx, expr);\n+                    }\n+                }\n+                // check for call to `core::ptr::null` or `core::ptr::null_mut`\n+                rustc_hir::ExprKind::Call(ref path, _) => {\n+                    if let rustc_hir::ExprKind::Path(ref qpath) = path.kind {\n+                        if let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id() {\n+                            return cx.tcx.is_diagnostic_item(sym::ptr_null, def_id)\n+                                || cx.tcx.is_diagnostic_item(sym::ptr_null_mut, def_id);\n+                        }\n+                    }\n+                }\n+                _ => {}\n+            }\n+            false\n+        }\n+\n+        /// test if experssion is the literal `0`\n+        fn is_zero(expr: &hir::Expr<'_>) -> bool {\n+            match &expr.kind {\n+                rustc_hir::ExprKind::Lit(ref lit) => {\n+                    if let LitKind::Int(a, _) = lit.node {\n+                        return a == 0;\n+                    }\n+                }\n+                _ => {}\n+            }\n+            false\n+        }\n+\n+        if let rustc_hir::ExprKind::Unary(ref un_op, ref expr_deref) = expr.kind {\n+            if let rustc_hir::UnOp::Deref = un_op {\n+                if is_null_ptr(cx, expr_deref) {\n+                    cx.struct_span_lint(DEREF_NULLPTR, expr.span, |lint| {\n+                        let mut err = lint.build(\"dereferencing a null pointer\");\n+                        err.span_label(\n+                            expr.span,\n+                            \"this code causes undefined behavior when executed\",\n+                        );\n+                        err.emit();\n+                    });\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "2f46969b021e6ad435c70d8b55ea46a9fdc1663f", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7537b20626100e7e7fc8c4ad3079d38c05338121/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7537b20626100e7e7fc8c4ad3079d38c05338121/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=7537b20626100e7e7fc8c4ad3079d38c05338121", "patch": "@@ -206,6 +206,7 @@ macro_rules! late_lint_mod_passes {\n                 UnreachablePub: UnreachablePub,\n                 ExplicitOutlivesRequirements: ExplicitOutlivesRequirements,\n                 InvalidValue: InvalidValue,\n+                DerefNullPtr: DerefNullPtr,\n             ]\n         );\n     };"}, {"sha": "42e521a20a3c3d35b28020786dad646c00133fb2", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7537b20626100e7e7fc8c4ad3079d38c05338121/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7537b20626100e7e7fc8c4ad3079d38c05338121/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=7537b20626100e7e7fc8c4ad3079d38c05338121", "patch": "@@ -900,6 +900,8 @@ symbols! {\n         profiler_runtime,\n         ptr_guaranteed_eq,\n         ptr_guaranteed_ne,\n+        ptr_null,\n+        ptr_null_mut,\n         ptr_offset_from,\n         pub_macro_rules,\n         pub_restricted,"}, {"sha": "ad8696ab9272d36b71b807388996f30da3bbc1e1", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7537b20626100e7e7fc8c4ad3079d38c05338121/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7537b20626100e7e7fc8c4ad3079d38c05338121/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=7537b20626100e7e7fc8c4ad3079d38c05338121", "patch": "@@ -211,6 +211,7 @@ pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n #[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.24.0\")]\n+#[rustc_diagnostic_item = \"ptr_null\"]\n pub const fn null<T>() -> *const T {\n     0 as *const T\n }\n@@ -229,6 +230,7 @@ pub const fn null<T>() -> *const T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n #[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.24.0\")]\n+#[rustc_diagnostic_item = \"ptr_null_mut\"]\n pub const fn null_mut<T>() -> *mut T {\n     0 as *mut T\n }"}, {"sha": "fe867ce1fbd57980ffbbb2d3132669c5e3a78a64", "filename": "src/test/ui/cleanup-shortcircuit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7537b20626100e7e7fc8c4ad3079d38c05338121/src%2Ftest%2Fui%2Fcleanup-shortcircuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7537b20626100e7e7fc8c4ad3079d38c05338121/src%2Ftest%2Fui%2Fcleanup-shortcircuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcleanup-shortcircuit.rs?ref=7537b20626100e7e7fc8c4ad3079d38c05338121", "patch": "@@ -3,6 +3,9 @@\n \n // pretty-expanded FIXME #23616\n \n+#![allow(deref_nullptr)]\n+\n+\n use std::env;\n \n pub fn main() {"}, {"sha": "d052dbd9b647cc796ad7908dca9e97dcc3b140be", "filename": "src/test/ui/lint/lint-deref-nullptr.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7537b20626100e7e7fc8c4ad3079d38c05338121/src%2Ftest%2Fui%2Flint%2Flint-deref-nullptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7537b20626100e7e7fc8c4ad3079d38c05338121/src%2Ftest%2Fui%2Flint%2Flint-deref-nullptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-deref-nullptr.rs?ref=7537b20626100e7e7fc8c4ad3079d38c05338121", "patch": "@@ -0,0 +1,38 @@\n+// test the deref_nullptr lint\n+\n+#![deny(deref_nullptr)]\n+\n+use std::ptr;\n+\n+struct Struct {\n+    field: u8,\n+}\n+\n+fn f() {\n+    unsafe {\n+        let a = 1;\n+        let ub = *(a as *const i32);\n+        let ub = *(0 as *const i32);\n+        //~^ ERROR dereferencing a null pointer\n+        let ub = *ptr::null::<i32>();\n+        //~^ ERROR dereferencing a null pointer\n+        let ub = *ptr::null_mut::<i32>();\n+        //~^ ERROR dereferencing a null pointer\n+        let ub = *(ptr::null::<i16>() as *const i32);\n+        //~^ ERROR dereferencing a null pointer\n+        let ub = *(ptr::null::<i16>() as *mut i32 as *mut usize as *const u8);\n+        //~^ ERROR dereferencing a null pointer\n+        let ub = &*ptr::null::<i32>();\n+        //~^ ERROR dereferencing a null pointer\n+        let ub = &*ptr::null_mut::<i32>();\n+        //~^ ERROR dereferencing a null pointer\n+        ptr::addr_of!(*ptr::null::<i32>());\n+        //~^ ERROR dereferencing a null pointer\n+        ptr::addr_of_mut!(*ptr::null_mut::<i32>());\n+        //~^ ERROR dereferencing a null pointer\n+        let offset = ptr::addr_of!((*ptr::null::<Struct>()).field);\n+        //~^ ERROR dereferencing a null pointer\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "c6f432e4e4207d5822f6a1893aba30dddb329be6", "filename": "src/test/ui/lint/lint-deref-nullptr.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/7537b20626100e7e7fc8c4ad3079d38c05338121/src%2Ftest%2Fui%2Flint%2Flint-deref-nullptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7537b20626100e7e7fc8c4ad3079d38c05338121/src%2Ftest%2Fui%2Flint%2Flint-deref-nullptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-deref-nullptr.stderr?ref=7537b20626100e7e7fc8c4ad3079d38c05338121", "patch": "@@ -0,0 +1,68 @@\n+error: dereferencing a null pointer\n+  --> $DIR/lint-deref-nullptr.rs:15:18\n+   |\n+LL |         let ub = *(0 as *const i32);\n+   |                  ^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-deref-nullptr.rs:3:9\n+   |\n+LL | #![deny(deref_nullptr)]\n+   |         ^^^^^^^^^^^^^\n+\n+error: dereferencing a null pointer\n+  --> $DIR/lint-deref-nullptr.rs:17:18\n+   |\n+LL |         let ub = *ptr::null::<i32>();\n+   |                  ^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n+\n+error: dereferencing a null pointer\n+  --> $DIR/lint-deref-nullptr.rs:19:18\n+   |\n+LL |         let ub = *ptr::null_mut::<i32>();\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n+\n+error: dereferencing a null pointer\n+  --> $DIR/lint-deref-nullptr.rs:21:18\n+   |\n+LL |         let ub = *(ptr::null::<i16>() as *const i32);\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n+\n+error: dereferencing a null pointer\n+  --> $DIR/lint-deref-nullptr.rs:23:18\n+   |\n+LL |         let ub = *(ptr::null::<i16>() as *mut i32 as *mut usize as *const u8);\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n+\n+error: dereferencing a null pointer\n+  --> $DIR/lint-deref-nullptr.rs:25:19\n+   |\n+LL |         let ub = &*ptr::null::<i32>();\n+   |                   ^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n+\n+error: dereferencing a null pointer\n+  --> $DIR/lint-deref-nullptr.rs:27:19\n+   |\n+LL |         let ub = &*ptr::null_mut::<i32>();\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n+\n+error: dereferencing a null pointer\n+  --> $DIR/lint-deref-nullptr.rs:29:23\n+   |\n+LL |         ptr::addr_of!(*ptr::null::<i32>());\n+   |                       ^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n+\n+error: dereferencing a null pointer\n+  --> $DIR/lint-deref-nullptr.rs:31:27\n+   |\n+LL |         ptr::addr_of_mut!(*ptr::null_mut::<i32>());\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n+\n+error: dereferencing a null pointer\n+  --> $DIR/lint-deref-nullptr.rs:33:36\n+   |\n+LL |         let offset = ptr::addr_of!((*ptr::null::<Struct>()).field);\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n+\n+error: aborting due to 10 previous errors\n+"}]}