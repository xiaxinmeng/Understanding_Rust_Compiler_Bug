{"sha": "112419c9f0b7f369df149e002429c85fc05f5e86", "node_id": "C_kwDOAAsO6NoAKDExMjQxOWM5ZjBiN2YzNjlkZjE0OWUwMDI0MjljODVmYzA1ZjVlODY", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-02T02:54:06Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-10T01:16:48Z"}, "message": "Remove dead `load_cached` code in rustc_query", "tree": {"sha": "37c8f98e9cfe44865ffe9b9036d822bdd4d7ea55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37c8f98e9cfe44865ffe9b9036d822bdd4d7ea55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/112419c9f0b7f369df149e002429c85fc05f5e86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/112419c9f0b7f369df149e002429c85fc05f5e86", "html_url": "https://github.com/rust-lang/rust/commit/112419c9f0b7f369df149e002429c85fc05f5e86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/112419c9f0b7f369df149e002429c85fc05f5e86/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8da754ef00488ffdb1259f104fd6084327b3bd45", "url": "https://api.github.com/repos/rust-lang/rust/commits/8da754ef00488ffdb1259f104fd6084327b3bd45", "html_url": "https://github.com/rust-lang/rust/commit/8da754ef00488ffdb1259f104fd6084327b3bd45"}], "stats": {"total": 35, "additions": 2, "deletions": 33}, "files": [{"sha": "50bd95834b1e55107a4910bc0c01685c6d93257c", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/112419c9f0b7f369df149e002429c85fc05f5e86/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/112419c9f0b7f369df149e002429c85fc05f5e86/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=112419c9f0b7f369df149e002429c85fc05f5e86", "patch": "@@ -91,9 +91,6 @@ struct QueryModifiers {\n     /// Cache the query to disk if the `Block` returns true.\n     cache: Option<(Option<Pat>, Block)>,\n \n-    /// Custom code to load the query from disk.\n-    load_cached: Option<(Ident, Ident, Block)>,\n-\n     /// A cycle error for this query aborting the compilation with a fatal error.\n     fatal_cycle: Option<Ident>,\n \n@@ -120,7 +117,6 @@ struct QueryModifiers {\n }\n \n fn parse_query_modifiers(input: ParseStream<'_>) -> Result<QueryModifiers> {\n-    let mut load_cached = None;\n     let mut arena_cache = None;\n     let mut cache = None;\n     let mut desc = None;\n@@ -173,16 +169,6 @@ fn parse_query_modifiers(input: ParseStream<'_>) -> Result<QueryModifiers> {\n             };\n             let block = input.parse()?;\n             try_insert!(cache = (args, block));\n-        } else if modifier == \"load_cached\" {\n-            // Parse a load_cached modifier like:\n-            // `load_cached(tcx, id) { tcx.on_disk_cache.try_load_query_result(tcx, id) }`\n-            let args;\n-            parenthesized!(args in input);\n-            let tcx = args.parse()?;\n-            args.parse::<Token![,]>()?;\n-            let id = args.parse()?;\n-            let block = input.parse()?;\n-            try_insert!(load_cached = (tcx, id, block));\n         } else if modifier == \"arena_cache\" {\n             try_insert!(arena_cache = modifier);\n         } else if modifier == \"fatal_cycle\" {\n@@ -209,7 +195,6 @@ fn parse_query_modifiers(input: ParseStream<'_>) -> Result<QueryModifiers> {\n         return Err(input.error(\"no description provided\"));\n     };\n     Ok(QueryModifiers {\n-        load_cached,\n         arena_cache,\n         cache,\n         desc,\n@@ -259,20 +244,6 @@ fn add_query_description_impl(query: &Query, impls: &mut proc_macro2::TokenStrea\n \n     // Find out if we should cache the query on disk\n     let cache = if let Some((args, expr)) = modifiers.cache.as_ref() {\n-        let try_load_from_disk = if let Some((tcx, id, block)) = modifiers.load_cached.as_ref() {\n-            // Use custom code to load the query from disk\n-            quote! {\n-                const TRY_LOAD_FROM_DISK: Option<fn(QueryCtxt<'tcx>, SerializedDepNodeIndex) -> Option<Self::Value>>\n-                    = Some(|#tcx, #id| { #block });\n-            }\n-        } else {\n-            // Use the default code to load the query from disk\n-            quote! {\n-                const TRY_LOAD_FROM_DISK: Option<fn(QueryCtxt<'tcx>, SerializedDepNodeIndex) -> Option<Self::Value>>\n-                    = Some(|tcx, id| tcx.on_disk_cache().as_ref()?.try_load_query_result(*tcx, id));\n-            }\n-        };\n-\n         let tcx = args.as_ref().map(|t| quote! { #t }).unwrap_or_else(|| quote! { _ });\n         // expr is a `Block`, meaning that `{ #expr }` gets expanded\n         // to `{ { stmts... } }`, which triggers the `unused_braces` lint.\n@@ -283,12 +254,10 @@ fn add_query_description_impl(query: &Query, impls: &mut proc_macro2::TokenStrea\n                 #expr\n             }\n \n-            #try_load_from_disk\n+            const TRY_LOAD_FROM_DISK: Option<fn(QueryCtxt<'tcx>, SerializedDepNodeIndex) -> Option<Self::Value>>\n+                = Some(|tcx, id| tcx.on_disk_cache().as_ref()?.try_load_query_result(*tcx, id));\n         }\n     } else {\n-        if modifiers.load_cached.is_some() {\n-            panic!(\"load_cached modifier on query `{}` without a cache modifier\", name);\n-        }\n         quote! {\n             #[inline]\n             fn cache_on_disk(_: TyCtxt<'tcx>, _: &Self::Key) -> bool {"}]}