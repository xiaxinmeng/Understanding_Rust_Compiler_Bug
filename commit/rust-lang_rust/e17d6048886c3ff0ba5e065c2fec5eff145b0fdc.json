{"sha": "e17d6048886c3ff0ba5e065c2fec5eff145b0fdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxN2Q2MDQ4ODg2YzNmZjBiYTVlMDY1YzJmZWM1ZWZmMTQ1YjBmZGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-16T11:07:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-16T11:07:29Z"}, "message": "Merge #6558\n\n6558: format string highlighting: handle hex + debug type specifier r=matklad a=ruabmbua\n\nShould fix https://github.com/rust-analyzer/rust-analyzer/issues/6427\r\n\n\nCo-authored-by: Roland Ruckerbauer <roland.rucky@gmail.com>", "tree": {"sha": "f6eff656f26401cc509bc2af51e175ae229c72d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6eff656f26401cc509bc2af51e175ae229c72d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e17d6048886c3ff0ba5e065c2fec5eff145b0fdc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfsl1yCRBK7hj4Ov3rIwAAdHIIAEe0jSqeWkCxzRL0kkWK0L59\n5KOHzJ9w0ztyHQionMB8LASqzZg+9A5WZJX3F30x+VtXJGKOmig+GOigO7VpgaTS\nOQ4VywJp/j2fnnA3Ic/qDmzKL3CX+J/bbW8baXBIebSmjcN+HdltIM1ht4R+IVxW\nmmrumpz32TpKJoLoqEcpsWDkmwML5wFqJ9ybPhQ3mp1I5e5d4XUG76ExEOPZoKzZ\n5DIGNnphfoWEGJsv/4dhpxZDk+t8V5OUAy8Ef5UZdQNF5NHTeSdPJzJbm+5Pl2Er\ngVqXo91iRp3ccqIMIHAgTBXOZj6/+BMQYtr4My/aoEmIPBf4WdTYfJOSAIvRD3g=\n=H3g3\n-----END PGP SIGNATURE-----\n", "payload": "tree f6eff656f26401cc509bc2af51e175ae229c72d8\nparent 382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b\nparent a15dda48c696cb14d490ee91f40949d5cd538aba\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1605524849 +0000\ncommitter GitHub <noreply@github.com> 1605524849 +0000\n\nMerge #6558\n\n6558: format string highlighting: handle hex + debug type specifier r=matklad a=ruabmbua\n\nShould fix https://github.com/rust-analyzer/rust-analyzer/issues/6427\r\n\n\nCo-authored-by: Roland Ruckerbauer <roland.rucky@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e17d6048886c3ff0ba5e065c2fec5eff145b0fdc", "html_url": "https://github.com/rust-lang/rust/commit/e17d6048886c3ff0ba5e065c2fec5eff145b0fdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e17d6048886c3ff0ba5e065c2fec5eff145b0fdc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b", "html_url": "https://github.com/rust-lang/rust/commit/382361c252f6d9e1c9e3fad3bdc4ebe32c5d4b7b"}, {"sha": "a15dda48c696cb14d490ee91f40949d5cd538aba", "url": "https://api.github.com/repos/rust-lang/rust/commits/a15dda48c696cb14d490ee91f40949d5cd538aba", "html_url": "https://github.com/rust-lang/rust/commit/a15dda48c696cb14d490ee91f40949d5cd538aba"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "d398e1ec85bef0652bd7716a01e709fe1918bcea", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6048886c3ff0ba5e065c2fec5eff145b0fdc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6048886c3ff0ba5e065c2fec5eff145b0fdc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=e17d6048886c3ff0ba5e065c2fec5eff145b0fdc", "patch": "@@ -93,4 +93,6 @@\n \n     <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"escape_sequence\">\\x41</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> A <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n     <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">\u043d\u0438\u0447\u043e\u0441\u0438</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> \u043d\u0438\u0447\u043e\u0441\u0438 <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+\n+    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"variable\">x</span><span class=\"format_specifier\">?</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> \"</span><span class=\"punctuation\">,</span> thingy<span class=\"punctuation\">,</span> n2<span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n <span class=\"punctuation\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "1dc018a167bbbea9fa8da1fb31d19304a728cf09", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6048886c3ff0ba5e065c2fec5eff145b0fdc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6048886c3ff0ba5e065c2fec5eff145b0fdc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=e17d6048886c3ff0ba5e065c2fec5eff145b0fdc", "patch": "@@ -340,6 +340,8 @@ fn main() {\n \n     println!(\"{\\x41}\", A = 92);\n     println!(\"{\u043d\u0438\u0447\u043e\u0441\u0438}\", \u043d\u0438\u0447\u043e\u0441\u0438 = 92);\n+\n+    println!(\"{:x?} {} \", thingy, n2);\n }\"#\n         .trim(),\n         expect_file![\"./test_data/highlight_strings.html\"],"}, {"sha": "ac03264205a087ebd9cfd4df92d7c8e0dcbff3dd", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6048886c3ff0ba5e065c2fec5eff145b0fdc/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6048886c3ff0ba5e065c2fec5eff145b0fdc/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=e17d6048886c3ff0ba5e065c2fec5eff145b0fdc", "patch": "@@ -331,10 +331,22 @@ pub trait HasFormatSpecifier: AstToken {\n                             }\n                             c if c == '_' || c.is_alphabetic() => {\n                                 read_identifier(&mut chars, &mut callback);\n+\n+                                if chars.peek().and_then(|next| next.1.as_ref().ok()).copied()\n+                                    == Some('?')\n+                                {\n+                                    skip_char_and_emit(\n+                                        &mut chars,\n+                                        FormatSpecifier::QuestionMark,\n+                                        &mut callback,\n+                                    );\n+                                }\n+\n                                 // can be either width (indicated by dollar sign, or type in which case\n                                 // the next sign has to be `}`)\n                                 let next =\n                                     chars.peek().and_then(|next| next.1.as_ref().ok()).copied();\n+\n                                 match next {\n                                     Some('$') => skip_char_and_emit(\n                                         &mut chars,\n@@ -417,6 +429,16 @@ pub trait HasFormatSpecifier: AstToken {\n                             }\n                             c if c == '_' || c.is_alphabetic() => {\n                                 read_identifier(&mut chars, &mut callback);\n+\n+                                if chars.peek().and_then(|next| next.1.as_ref().ok()).copied()\n+                                    == Some('?')\n+                                {\n+                                    skip_char_and_emit(\n+                                        &mut chars,\n+                                        FormatSpecifier::QuestionMark,\n+                                        &mut callback,\n+                                    );\n+                                }\n                             }\n                             _ => {}\n                         }"}]}