{"sha": "d9baa361902b172be716f96619b909f340802dea", "node_id": "C_kwDOAAsO6NoAKGQ5YmFhMzYxOTAyYjE3MmJlNzE2Zjk2NjE5YjkwOWYzNDA4MDJkZWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-02T06:11:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-02T06:11:05Z"}, "message": "Auto merge of #91291 - GuillaumeGomez:const-deref-method, r=camelid\n\nFix const deref methods display\n\nFixes https://github.com/rust-lang/rust/issues/90855 (more information in the issue).\n\nr? `@camelid`", "tree": {"sha": "031f0233c6dbd221df8c635de84ace18117bd1b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/031f0233c6dbd221df8c635de84ace18117bd1b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9baa361902b172be716f96619b909f340802dea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9baa361902b172be716f96619b909f340802dea", "html_url": "https://github.com/rust-lang/rust/commit/d9baa361902b172be716f96619b909f340802dea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9baa361902b172be716f96619b909f340802dea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2b7b7891e4623e716185f3ab62bd206fb4c5182", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b7b7891e4623e716185f3ab62bd206fb4c5182", "html_url": "https://github.com/rust-lang/rust/commit/a2b7b7891e4623e716185f3ab62bd206fb4c5182"}, {"sha": "02782bba604e3edc5d356dd3e153667cf1474949", "url": "https://api.github.com/repos/rust-lang/rust/commits/02782bba604e3edc5d356dd3e153667cf1474949", "html_url": "https://github.com/rust-lang/rust/commit/02782bba604e3edc5d356dd3e153667cf1474949"}], "stats": {"total": 157, "additions": 122, "deletions": 35}, "files": [{"sha": "02a4fc5fb65504587895369922f3f375706c3c5d", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d9baa361902b172be716f96619b909f340802dea/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9baa361902b172be716f96619b909f340802dea/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=d9baa361902b172be716f96619b909f340802dea", "patch": "@@ -376,8 +376,8 @@ impl Item {\n         self.def_id.as_def_id().and_then(|did| tcx.lookup_stability(did))\n     }\n \n-    crate fn const_stability<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Option<&'tcx ConstStability> {\n-        self.def_id.as_def_id().and_then(|did| tcx.lookup_const_stability(did))\n+    crate fn const_stability<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Option<ConstStability> {\n+        self.def_id.as_def_id().and_then(|did| tcx.lookup_const_stability(did)).map(|cs| *cs)\n     }\n \n     crate fn deprecation(&self, tcx: TyCtxt<'_>) -> Option<Deprecation> {\n@@ -602,16 +602,16 @@ impl Item {\n         })\n     }\n \n-    crate fn stable_since(&self, tcx: TyCtxt<'_>) -> Option<SymbolStr> {\n+    crate fn stable_since(&self, tcx: TyCtxt<'_>) -> Option<Symbol> {\n         match self.stability(tcx)?.level {\n-            StabilityLevel::Stable { since, .. } => Some(since.as_str()),\n+            StabilityLevel::Stable { since, .. } => Some(since),\n             StabilityLevel::Unstable { .. } => None,\n         }\n     }\n \n-    crate fn const_stable_since(&self, tcx: TyCtxt<'_>) -> Option<SymbolStr> {\n+    crate fn const_stable_since(&self, tcx: TyCtxt<'_>) -> Option<Symbol> {\n         match self.const_stability(tcx)?.level {\n-            StabilityLevel::Stable { since, .. } => Some(since.as_str()),\n+            StabilityLevel::Stable { since, .. } => Some(since),\n             StabilityLevel::Unstable { .. } => None,\n         }\n     }"}, {"sha": "fdb52703edf77a48ccc34e0e52f1df572380515a", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d9baa361902b172be716f96619b909f340802dea/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9baa361902b172be716f96619b909f340802dea/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=d9baa361902b172be716f96619b909f340802dea", "patch": "@@ -1349,10 +1349,7 @@ impl PrintWithSpace for hir::Mutability {\n     }\n }\n \n-crate fn print_constness_with_space(\n-    c: &hir::Constness,\n-    s: Option<&ConstStability>,\n-) -> &'static str {\n+crate fn print_constness_with_space(c: &hir::Constness, s: Option<ConstStability>) -> &'static str {\n     match (c, s) {\n         // const stable or when feature(staged_api) is not set\n         ("}, {"sha": "166e084012724e18999eb920770880617556c5ad", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d9baa361902b172be716f96619b909f340802dea/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9baa361902b172be716f96619b909f340802dea/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=d9baa361902b172be716f96619b909f340802dea", "patch": "@@ -804,17 +804,17 @@ fn assoc_type(\n \n fn render_stability_since_raw(\n     w: &mut Buffer,\n-    ver: Option<&str>,\n-    const_stability: Option<&ConstStability>,\n-    containing_ver: Option<&str>,\n-    containing_const_ver: Option<&str>,\n+    ver: Option<Symbol>,\n+    const_stability: Option<ConstStability>,\n+    containing_ver: Option<Symbol>,\n+    containing_const_ver: Option<Symbol>,\n ) {\n     let ver = ver.filter(|inner| !inner.is_empty());\n \n     match (ver, const_stability) {\n         // stable and const stable\n         (Some(v), Some(ConstStability { level: StabilityLevel::Stable { since }, .. }))\n-            if Some(since.as_str()).as_deref() != containing_const_ver =>\n+            if Some(since) != containing_const_ver =>\n         {\n             write!(\n                 w,\n@@ -861,6 +861,7 @@ fn render_assoc_item(\n     link: AssocItemLink<'_>,\n     parent: ItemType,\n     cx: &Context<'_>,\n+    render_mode: RenderMode,\n ) {\n     fn method(\n         w: &mut Buffer,\n@@ -871,6 +872,7 @@ fn render_assoc_item(\n         link: AssocItemLink<'_>,\n         parent: ItemType,\n         cx: &Context<'_>,\n+        render_mode: RenderMode,\n     ) {\n         let name = meth.name.as_ref().unwrap();\n         let href = match link {\n@@ -893,8 +895,14 @@ fn render_assoc_item(\n             }\n         };\n         let vis = meth.visibility.print_with_space(meth.def_id, cx).to_string();\n-        let constness =\n-            print_constness_with_space(&header.constness, meth.const_stability(cx.tcx()));\n+        // FIXME: Once https://github.com/rust-lang/rust/issues/67792 is implemented, we can remove\n+        // this condition.\n+        let constness = match render_mode {\n+            RenderMode::Normal => {\n+                print_constness_with_space(&header.constness, meth.const_stability(cx.tcx()))\n+            }\n+            RenderMode::ForDeref { .. } => \"\",\n+        };\n         let asyncness = header.asyncness.print_with_space();\n         let unsafety = header.unsafety.print_with_space();\n         let defaultness = print_default_space(meth.is_default());\n@@ -945,10 +953,10 @@ fn render_assoc_item(\n     match *item.kind {\n         clean::StrippedItem(..) => {}\n         clean::TyMethodItem(ref m) => {\n-            method(w, item, m.header, &m.generics, &m.decl, link, parent, cx)\n+            method(w, item, m.header, &m.generics, &m.decl, link, parent, cx, render_mode)\n         }\n         clean::MethodItem(ref m, _) => {\n-            method(w, item, m.header, &m.generics, &m.decl, link, parent, cx)\n+            method(w, item, m.header, &m.generics, &m.decl, link, parent, cx, render_mode)\n         }\n         clean::AssocConstItem(ref ty, ref default) => assoc_const(\n             w,\n@@ -1422,7 +1430,7 @@ fn render_impl(\n                         \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n                         id, item_type, in_trait_class,\n                     );\n-                    render_rightside(w, cx, item, containing_item);\n+                    render_rightside(w, cx, item, containing_item, render_mode);\n                     write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n                     w.write_str(\"<h4 class=\\\"code-header\\\">\");\n                     render_assoc_item(\n@@ -1431,6 +1439,7 @@ fn render_impl(\n                         link.anchor(source_id.as_ref().unwrap_or(&id)),\n                         ItemType::Impl,\n                         cx,\n+                        render_mode,\n                     );\n                     w.write_str(\"</h4>\");\n                     w.write_str(\"</div>\");\n@@ -1466,7 +1475,7 @@ fn render_impl(\n                     \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n                     id, item_type, in_trait_class\n                 );\n-                render_rightside(w, cx, item, containing_item);\n+                render_rightside(w, cx, item, containing_item, render_mode);\n                 write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n                 w.write_str(\"<h4 class=\\\"code-header\\\">\");\n                 assoc_const(\n@@ -1645,16 +1654,24 @@ fn render_rightside(\n     cx: &Context<'_>,\n     item: &clean::Item,\n     containing_item: &clean::Item,\n+    render_mode: RenderMode,\n ) {\n     let tcx = cx.tcx();\n \n+    // FIXME: Once https://github.com/rust-lang/rust/issues/67792 is implemented, we can remove\n+    // this condition.\n+    let (const_stability, const_stable_since) = match render_mode {\n+        RenderMode::Normal => (item.const_stability(tcx), containing_item.const_stable_since(tcx)),\n+        RenderMode::ForDeref { .. } => (None, None),\n+    };\n+\n     write!(w, \"<div class=\\\"rightside\\\">\");\n     render_stability_since_raw(\n         w,\n-        item.stable_since(tcx).as_deref(),\n-        item.const_stability(tcx),\n-        containing_item.stable_since(tcx).as_deref(),\n-        containing_item.const_stable_since(tcx).as_deref(),\n+        item.stable_since(tcx),\n+        const_stability,\n+        containing_item.stable_since(tcx),\n+        const_stable_since,\n     );\n \n     write_srclink(cx, item, w);\n@@ -1690,7 +1707,7 @@ pub(crate) fn render_impl_summary(\n         format!(\" data-aliases=\\\"{}\\\"\", aliases.join(\",\"))\n     };\n     write!(w, \"<div id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\", id, aliases);\n-    render_rightside(w, cx, &i.impl_item, containing_item);\n+    render_rightside(w, cx, &i.impl_item, containing_item, RenderMode::Normal);\n     write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n     write!(w, \"<h3 class=\\\"code-header in-band\\\">\");\n "}, {"sha": "e139ac8581e7235334ff875cf04c262d769df095", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 44, "deletions": 9, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d9baa361902b172be716f96619b909f340802dea/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9baa361902b172be716f96619b909f340802dea/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=d9baa361902b172be716f96619b909f340802dea", "patch": "@@ -101,7 +101,7 @@ pub(super) fn print_item(\n     let mut stability_since_raw = Buffer::new();\n     render_stability_since_raw(\n         &mut stability_since_raw,\n-        item.stable_since(cx.tcx()).as_deref(),\n+        item.stable_since(cx.tcx()),\n         item.const_stability(cx.tcx()),\n         None,\n         None,\n@@ -556,7 +556,14 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n                     );\n                 }\n                 for t in &types {\n-                    render_assoc_item(w, t, AssocItemLink::Anchor(None), ItemType::Trait, cx);\n+                    render_assoc_item(\n+                        w,\n+                        t,\n+                        AssocItemLink::Anchor(None),\n+                        ItemType::Trait,\n+                        cx,\n+                        RenderMode::Normal,\n+                    );\n                     w.write_str(\";\\n\");\n                 }\n                 // If there are too many associated constants, hide everything after them\n@@ -580,7 +587,14 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n                     w.write_str(\"\\n\");\n                 }\n                 for t in &consts {\n-                    render_assoc_item(w, t, AssocItemLink::Anchor(None), ItemType::Trait, cx);\n+                    render_assoc_item(\n+                        w,\n+                        t,\n+                        AssocItemLink::Anchor(None),\n+                        ItemType::Trait,\n+                        cx,\n+                        RenderMode::Normal,\n+                    );\n                     w.write_str(\";\\n\");\n                 }\n                 if !toggle && should_hide_fields(count_methods) {\n@@ -591,7 +605,14 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n                     w.write_str(\"\\n\");\n                 }\n                 for (pos, m) in required.iter().enumerate() {\n-                    render_assoc_item(w, m, AssocItemLink::Anchor(None), ItemType::Trait, cx);\n+                    render_assoc_item(\n+                        w,\n+                        m,\n+                        AssocItemLink::Anchor(None),\n+                        ItemType::Trait,\n+                        cx,\n+                        RenderMode::Normal,\n+                    );\n                     w.write_str(\";\\n\");\n \n                     if pos < required.len() - 1 {\n@@ -602,7 +623,14 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n                     w.write_str(\"\\n\");\n                 }\n                 for (pos, m) in provided.iter().enumerate() {\n-                    render_assoc_item(w, m, AssocItemLink::Anchor(None), ItemType::Trait, cx);\n+                    render_assoc_item(\n+                        w,\n+                        m,\n+                        AssocItemLink::Anchor(None),\n+                        ItemType::Trait,\n+                        cx,\n+                        RenderMode::Normal,\n+                    );\n                     match *m.kind {\n                         clean::MethodItem(ref inner, _)\n                             if !inner.generics.where_predicates.is_empty() =>\n@@ -655,7 +683,14 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         write_srclink(cx, m, w);\n         write!(w, \"</div>\");\n         write!(w, \"<h4 class=\\\"code-header\\\">\");\n-        render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)), ItemType::Impl, cx);\n+        render_assoc_item(\n+            w,\n+            m,\n+            AssocItemLink::Anchor(Some(&id)),\n+            ItemType::Impl,\n+            cx,\n+            RenderMode::Normal,\n+        );\n         w.write_str(\"</h4>\");\n         w.write_str(\"</div>\");\n         if toggled {\n@@ -1427,10 +1462,10 @@ fn render_stability_since(\n ) {\n     render_stability_since_raw(\n         w,\n-        item.stable_since(tcx).as_deref(),\n+        item.stable_since(tcx),\n         item.const_stability(tcx),\n-        containing_item.stable_since(tcx).as_deref(),\n-        containing_item.const_stable_since(tcx).as_deref(),\n+        containing_item.stable_since(tcx),\n+        containing_item.const_stable_since(tcx),\n     )\n }\n "}, {"sha": "ca51f3c7b5af08677677f4b4123fde0b75462de4", "filename": "src/test/rustdoc/deref-const-fn.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d9baa361902b172be716f96619b909f340802dea/src%2Ftest%2Frustdoc%2Fderef-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9baa361902b172be716f96619b909f340802dea/src%2Ftest%2Frustdoc%2Fderef-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fderef-const-fn.rs?ref=d9baa361902b172be716f96619b909f340802dea", "patch": "@@ -0,0 +1,38 @@\n+// This test ensures that the const methods from Deref aren't shown as const.\n+// For more information, see https://github.com/rust-lang/rust/issues/90855.\n+\n+#![crate_name = \"foo\"]\n+\n+#![feature(staged_api)]\n+\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+// @has 'foo/struct.Bar.html'\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub struct Bar;\n+\n+impl Bar {\n+    // @has - '//*[@id=\"method.len\"]' 'pub const fn len(&self) -> usize'\n+    // @has - '//*[@id=\"method.len\"]//span[@class=\"since\"]' '1.0.0 (const: 1.0.0)'\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub const fn len(&self) -> usize { 0 }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub struct Foo {\n+    value: Bar,\n+}\n+\n+// @has 'foo/struct.Foo.html'\n+// @has - '//*[@id=\"method.len\"]' 'pub fn len(&self) -> usize'\n+// @!has - '//*[@id=\"method.len\"]//span[@class=\"since\"]' '1.0.0'\n+// @!has - '//*[@id=\"method.len\"]//span[@class=\"since\"]' '(const: 1.0.0)'\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl std::ops::Deref for Foo {\n+    type Target = Bar;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.value\n+    }\n+}"}]}