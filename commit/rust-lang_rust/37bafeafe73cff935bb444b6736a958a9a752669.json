{"sha": "37bafeafe73cff935bb444b6736a958a9a752669", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YmFmZWFmZTczY2ZmOTM1YmI0NDRiNjczNmE5NThhOWE3NTI2Njk=", "commit": {"author": {"name": "Joshua Groves", "email": "josh@joshgroves.com", "date": "2019-09-19T05:17:36Z"}, "committer": {"name": "Joshua Groves", "email": "josh@joshgroves.com", "date": "2019-09-19T05:17:36Z"}, "message": "Fix backticks in documentation", "tree": {"sha": "4d66728f8f2c241a9a9bb0f0b2d938d6f761003e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d66728f8f2c241a9a9bb0f0b2d938d6f761003e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37bafeafe73cff935bb444b6736a958a9a752669", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37bafeafe73cff935bb444b6736a958a9a752669", "html_url": "https://github.com/rust-lang/rust/commit/37bafeafe73cff935bb444b6736a958a9a752669", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37bafeafe73cff935bb444b6736a958a9a752669/comments", "author": {"login": "grovesNL", "id": 2113872, "node_id": "MDQ6VXNlcjIxMTM4NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2113872?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grovesNL", "html_url": "https://github.com/grovesNL", "followers_url": "https://api.github.com/users/grovesNL/followers", "following_url": "https://api.github.com/users/grovesNL/following{/other_user}", "gists_url": "https://api.github.com/users/grovesNL/gists{/gist_id}", "starred_url": "https://api.github.com/users/grovesNL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grovesNL/subscriptions", "organizations_url": "https://api.github.com/users/grovesNL/orgs", "repos_url": "https://api.github.com/users/grovesNL/repos", "events_url": "https://api.github.com/users/grovesNL/events{/privacy}", "received_events_url": "https://api.github.com/users/grovesNL/received_events", "type": "User", "site_admin": false}, "committer": {"login": "grovesNL", "id": 2113872, "node_id": "MDQ6VXNlcjIxMTM4NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2113872?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grovesNL", "html_url": "https://github.com/grovesNL", "followers_url": "https://api.github.com/users/grovesNL/followers", "following_url": "https://api.github.com/users/grovesNL/following{/other_user}", "gists_url": "https://api.github.com/users/grovesNL/gists{/gist_id}", "starred_url": "https://api.github.com/users/grovesNL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grovesNL/subscriptions", "organizations_url": "https://api.github.com/users/grovesNL/orgs", "repos_url": "https://api.github.com/users/grovesNL/repos", "events_url": "https://api.github.com/users/grovesNL/events{/privacy}", "received_events_url": "https://api.github.com/users/grovesNL/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eceec57f72150dd548e05025a05a93381da41385", "url": "https://api.github.com/repos/rust-lang/rust/commits/eceec57f72150dd548e05025a05a93381da41385", "html_url": "https://github.com/rust-lang/rust/commit/eceec57f72150dd548e05025a05a93381da41385"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "87470140e3148dd19dc04e409ee4f2bdbae6d013", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37bafeafe73cff935bb444b6736a958a9a752669/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37bafeafe73cff935bb444b6736a958a9a752669/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=37bafeafe73cff935bb444b6736a958a9a752669", "patch": "@@ -1136,7 +1136,7 @@ fn resolve_local<'tcx>(\n     // Rule A. `let (ref x, ref y) = (foo().x, 44)`. The rvalue `(22, 44)`\n     // would have an extended lifetime, but not `foo()`.\n     //\n-    // Rule B. `let x = &foo().x`. The rvalue ``foo()` would have extended\n+    // Rule B. `let x = &foo().x`. The rvalue `foo()` would have extended\n     // lifetime.\n     //\n     // In some cases, multiple rules may apply (though not to the same"}, {"sha": "c20e75868895991ac0871d418955a43f5c2204e6", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37bafeafe73cff935bb444b6736a958a9a752669/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37bafeafe73cff935bb444b6736a958a9a752669/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=37bafeafe73cff935bb444b6736a958a9a752669", "patch": "@@ -643,7 +643,7 @@ impl<'a, 'tcx> SpecializedDecoder<DefIndex> for CacheDecoder<'a, 'tcx> {\n \n // Both the `CrateNum` and the `DefIndex` of a `DefId` can change in between two\n // compilation sessions. We use the `DefPathHash`, which is stable across\n-// sessions, to map the old DefId`` to the new one.\n+// sessions, to map the old `DefId` to the new one.\n impl<'a, 'tcx> SpecializedDecoder<DefId> for CacheDecoder<'a, 'tcx> {\n     #[inline]\n     fn specialized_decode(&mut self) -> Result<DefId, Self::Error> {"}, {"sha": "7d0d2392945e5e6700e91e7141c9acd1bdcffa01", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37bafeafe73cff935bb444b6736a958a9a752669/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37bafeafe73cff935bb444b6736a958a9a752669/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=37bafeafe73cff935bb444b6736a958a9a752669", "patch": "@@ -3,7 +3,7 @@\n //! of source parsed during crate parsing (typically files, in-memory strings,\n //! or various bits of macro expansion) cover a continuous range of bytes in the\n //! `SourceMap` and are represented by `SourceFile`s. Byte positions are stored in\n-//! `Span`` and used pervasively in the compiler. They are absolute positions\n+//! `Span` and used pervasively in the compiler. They are absolute positions\n //! within the `SourceMap`, which upon request can be converted to line and column\n //! information, source code snippets, etc.\n \n@@ -645,7 +645,7 @@ impl SourceMap {\n     }\n \n     /// Given a `Span`, tries to get a shorter span ending before the first occurrence of `char`\n-    /// ``c`.\n+    /// `c`.\n     pub fn span_until_char(&self, sp: Span, c: char) -> Span {\n         match self.span_to_snippet(sp) {\n             Ok(snippet) => {"}, {"sha": "6d37d1ded640077c3c57dcca83455908ab895b03", "filename": "src/test/ui/borrowck/two-phase-surprise-no-conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37bafeafe73cff935bb444b6736a958a9a752669/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37bafeafe73cff935bb444b6736a958a9a752669/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.rs?ref=37bafeafe73cff935bb444b6736a958a9a752669", "patch": "@@ -31,7 +31,7 @@ impl <'a> SpanlessHash<'a> {\n                 //\n                 // Not okay without two-phase borrows: the implicit\n                 // `&mut self` of the receiver is evaluated first, and\n-                // that conflicts with the `self.cx`` access during\n+                // that conflicts with the `self.cx` access during\n                 // argument evaluation, as demonstrated in `fn demo`\n                 // above.\n                 //"}]}