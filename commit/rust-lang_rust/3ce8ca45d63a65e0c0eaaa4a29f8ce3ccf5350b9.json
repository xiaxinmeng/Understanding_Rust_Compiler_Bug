{"sha": "3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjZThjYTQ1ZDYzYTY1ZTBjMGVhYWE0YTI5ZjhjZTNjY2Y1MzUwYjk=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-06T20:29:30Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-13T18:44:14Z"}, "message": "Bless const tests with improved diagnostics", "tree": {"sha": "4ac7348764714836fb5c03797498b6414b16e663", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ac7348764714836fb5c03797498b6414b16e663"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "html_url": "https://github.com/rust-lang/rust/commit/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67336bb399deac766faed5e13a032f017c3353b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/67336bb399deac766faed5e13a032f017c3353b3", "html_url": "https://github.com/rust-lang/rust/commit/67336bb399deac766faed5e13a032f017c3353b3"}], "stats": {"total": 685, "additions": 442, "deletions": 243}, "files": [{"sha": "6f414dab88eb259eab7edb66246c6c55655b9ef4", "filename": "src/test/compile-fail/consts/const-fn-error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-fn-error.rs?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -10,6 +10,7 @@ const fn f(x: usize) -> usize {\n         //~| ERROR E0019\n         //~| ERROR E0019\n         //~| ERROR E0080\n+        //~| ERROR E0744\n         sum += i;\n     }\n     sum"}, {"sha": "90b9a1c265ad33402774530b7d169581bf499d11", "filename": "src/test/compile-fail/issue-52443.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,12 +1,16 @@\n fn main() {\n     [(); & { loop { continue } } ]; //~ ERROR mismatched types\n+    //~^ ERROR `loop` is not allowed in a `const`\n     [(); loop { break }]; //~ ERROR mismatched types\n+    //~^ ERROR `loop` is not allowed in a `const`\n     [(); {while true {break}; 0}];\n     //~^ ERROR constant contains unimplemented expression type\n     //~| ERROR constant contains unimplemented expression type\n+    //~| ERROR `while` is not allowed in a `const`\n     //~| WARN denote infinite loops with\n     [(); { for _ in 0usize.. {}; 0}];\n     //~^ ERROR calls in constants are limited to constant functions\n+    //~| ERROR `for` is not allowed in a `const`\n     //~| ERROR references in constants may only refer to immutable values\n     //~| ERROR constant contains unimplemented expression type\n     //~| ERROR constant contains unimplemented expression type"}, {"sha": "8a405edb046550c50a31add622fafe363c658dc9", "filename": "src/test/ui/borrowck/issue-64453.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.rs?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -2,9 +2,7 @@ struct Project;\n struct Value;\n \n static settings_dir: String = format!(\"\");\n-//~^ ERROR [E0019]\n-//~| ERROR [E0015]\n-//~| ERROR [E0015]\n+//~^ ERROR `match` is not allowed in a `static`\n \n fn from_string(_: String) -> Value {\n     Value\n@@ -13,7 +11,6 @@ fn set_editor(_: Value) {}\n \n fn main() {\n     let settings_data = from_string(settings_dir);\n-    //~^ ERROR cannot move out of static item `settings_dir` [E0507]\n     let args: i32 = 0;\n \n     match args {"}, {"sha": "f437880a1655fbebf73c128fcdc5f1d5ce460726", "filename": "src/test/ui/borrowck/issue-64453.stderr", "status": "modified", "additions": 3, "deletions": 26, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,34 +1,11 @@\n-error[E0507]: cannot move out of static item `settings_dir`\n-  --> $DIR/issue-64453.rs:15:37\n-   |\n-LL |     let settings_data = from_string(settings_dir);\n-   |                                     ^^^^^^^^^^^^ move occurs because `settings_dir` has type `std::string::String`, which does not implement the `Copy` trait\n-\n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/issue-64453.rs:4:31\n-   |\n-LL | static settings_dir: String = format!(\"\");\n-   |                               ^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-64453.rs:4:31\n-   |\n-LL | static settings_dir: String = format!(\"\");\n-   |                               ^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n+error[E0744]: `match` is not allowed in a `static`\n   --> $DIR/issue-64453.rs:4:31\n    |\n LL | static settings_dir: String = format!(\"\");\n    |                               ^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0015, E0019, E0507.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0744`."}, {"sha": "1e649a556e01de0f3177be8a305a82dd92c77e24", "filename": "src/test/ui/closures/issue-52437.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.rs?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,5 +1,6 @@\n fn main() {\n     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n     //~^ ERROR: invalid label name `'static`\n+    //~| ERROR: `loop` is not allowed in a `const`\n     //~| ERROR: type annotations needed\n }"}, {"sha": "b4b40336aa92618c9432b3acdba3ec1c8434b229", "filename": "src/test/ui/closures/issue-52437.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -4,12 +4,19 @@ error: invalid label name `'static`\n LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n    |             ^^^^^^^\n \n+error[E0744]: `loop` is not allowed in a `const`\n+  --> $DIR/issue-52437.rs:2:13\n+   |\n+LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0282]: type annotations needed\n   --> $DIR/issue-52437.rs:2:30\n    |\n LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n    |                              ^ consider giving this closure parameter a type\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0282`.\n+Some errors have detailed explanations: E0282, E0744.\n+For more information about an error, try `rustc --explain E0282`."}, {"sha": "ee1d588e553e16d8ed3f3fc297fd793fdeafb8c2", "filename": "src/test/ui/consts/const-eval/infinite_loop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -7,8 +7,10 @@ fn main() {\n         while n != 0 {\n         //~^ ERROR constant contains unimplemented expression type\n         //~| ERROR constant contains unimplemented expression type\n+        //~| ERROR `while` is not allowed in a `const`\n             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n             //~^ ERROR evaluation of constant value failed\n+            //~| ERROR `if` is not allowed in a `const`\n         }\n         n\n     }];"}, {"sha": "bf5d2c8c3285562b79c9a3f91405bbc4ee1a897a", "filename": "src/test/ui/consts/const-eval/infinite_loop.stderr", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,3 +1,21 @@\n+error[E0744]: `while` is not allowed in a `const`\n+  --> $DIR/infinite_loop.rs:7:9\n+   |\n+LL | /         while n != 0 {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |\n+LL | |         }\n+   | |_________^\n+\n+error[E0744]: `if` is not allowed in a `const`\n+  --> $DIR/infinite_loop.rs:11:17\n+   |\n+LL |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0019]: constant contains unimplemented expression type\n   --> $DIR/infinite_loop.rs:7:15\n    |\n@@ -10,7 +28,8 @@ error[E0019]: constant contains unimplemented expression type\n LL | /         while n != 0 {\n LL | |\n LL | |\n-LL | |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n+LL | |\n+...  |\n LL | |\n LL | |         }\n    | |_________^\n@@ -29,12 +48,12 @@ LL | |     }];\n    | |_____^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/infinite_loop.rs:10:20\n+  --> $DIR/infinite_loop.rs:11:20\n    |\n LL |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n    |                    ^^^^^^^^^^ duplicate interpreter state observed here, const evaluation will never terminate\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0019, E0080.\n+Some errors have detailed explanations: E0019, E0080, E0744.\n For more information about an error, try `rustc --explain E0019`."}, {"sha": "b9cdf09b85f5113210ffe3c052eeee17f1826dcb", "filename": "src/test/ui/consts/const-eval/issue-52475.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -4,7 +4,8 @@ fn main() {\n         let mut x = &0;\n         let mut n = 0;\n         while n < 5 {\n-        //~^ ERROR constant contains unimplemented expression type\n+        //~^ ERROR `while` is not allowed in a `const`\n+        //~| ERROR constant contains unimplemented expression type\n         //~| ERROR constant contains unimplemented expression type\n             n = (n + 1) % 5; //~ ERROR evaluation of constant value failed\n             x = &0; // Materialize a new AllocId"}, {"sha": "25d56e3fac4948516e71e10d727bff12065781af", "filename": "src/test/ui/consts/const-eval/issue-52475.stderr", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,3 +1,15 @@\n+error[E0744]: `while` is not allowed in a `const`\n+  --> $DIR/issue-52475.rs:6:9\n+   |\n+LL | /         while n < 5 {\n+LL | |\n+LL | |\n+LL | |\n+LL | |             n = (n + 1) % 5;\n+LL | |             x = &0; // Materialize a new AllocId\n+LL | |         }\n+   | |_________^\n+\n error[E0019]: constant contains unimplemented expression type\n   --> $DIR/issue-52475.rs:6:15\n    |\n@@ -10,6 +22,7 @@ error[E0019]: constant contains unimplemented expression type\n LL | /         while n < 5 {\n LL | |\n LL | |\n+LL | |\n LL | |             n = (n + 1) % 5;\n LL | |             x = &0; // Materialize a new AllocId\n LL | |         }\n@@ -29,12 +42,12 @@ LL | |     }];\n    | |_____^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-52475.rs:9:17\n+  --> $DIR/issue-52475.rs:10:17\n    |\n LL |             n = (n + 1) % 5;\n    |                 ^^^^^^^^^^^ duplicate interpreter state observed here, const evaluation will never terminate\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0019, E0080.\n+Some errors have detailed explanations: E0019, E0080, E0744.\n For more information about an error, try `rustc --explain E0019`."}, {"sha": "0dc3652bbee989b01305e8607b767c58b9a41408", "filename": "src/test/ui/consts/const-eval/match-test-ptr-null.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -5,6 +5,7 @@ fn main() {\n     let _: [u8; 0] = [4; {\n         match &1 as *const i32 as usize {\n             //~^ ERROR casting pointers to integers in constants\n+            //~| ERROR `match` is not allowed in a `const`\n             //~| ERROR constant contains unimplemented expression type\n             //~| ERROR evaluation of constant value failed\n             0 => 42, //~ ERROR constant contains unimplemented expression type"}, {"sha": "ab4d28c045598dfbc5f2c970960e06221aec91d8", "filename": "src/test/ui/consts/const-eval/match-test-ptr-null.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,3 +1,15 @@\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/match-test-ptr-null.rs:6:9\n+   |\n+LL | /         match &1 as *const i32 as usize {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |             n => n,\n+LL | |         }\n+   | |_________^\n+\n error[E0658]: casting pointers to integers in constants is unstable\n   --> $DIR/match-test-ptr-null.rs:6:15\n    |\n@@ -14,7 +26,7 @@ LL |         match &1 as *const i32 as usize {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/match-test-ptr-null.rs:10:13\n+  --> $DIR/match-test-ptr-null.rs:11:13\n    |\n LL |             0 => 42,\n    |             ^\n@@ -25,7 +37,7 @@ error[E0080]: evaluation of constant value failed\n LL |         match &1 as *const i32 as usize {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0019, E0080, E0658.\n+Some errors have detailed explanations: E0019, E0080, E0658, E0744.\n For more information about an error, try `rustc --explain E0019`."}, {"sha": "94cce60453dcc0178e3e2bb1767f4c1563781abb", "filename": "src/test/ui/consts/const-if.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-if.rs?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,21 +1,21 @@\n-const _: i32 = if true { //~ ERROR if expression is not allowed in a const\n+const _: i32 = if true { //~ ERROR `if` is not allowed in a `const`\n     5\n } else {\n     6\n };\n \n-const _: i32 = match 1 { //~ ERROR match expression is not allowed in a const\n+const _: i32 = match 1 { //~ ERROR `match` is not allowed in a `const`\n     2 => 3,\n     4 => 5,\n     _ => 0,\n };\n \n const fn foo() -> i32 {\n-    if true { 5 } else { 6 } //~ ERROR if expression is not allowed in a const fn\n+    if true { 5 } else { 6 } //~ ERROR `if` is not allowed in a `const fn`\n }\n \n const fn bar() -> i32 {\n-    match 0 { 1 => 2, _ => 0 } //~ ERROR match expression is not allowed in a const fn\n+    match 0 { 1 => 2, _ => 0 } //~ ERROR `match` is not allowed in a `const fn`\n }\n \n fn main() {}"}, {"sha": "6fb2a0e150190da8292368b1de4c3b5700fdb0c0", "filename": "src/test/ui/consts/const-if.stderr", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-if.stderr?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,15 +1,37 @@\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-if.rs:1:20\n+error[E0744]: `if` is not allowed in a `const`\n+  --> $DIR/const-if.rs:1:16\n    |\n-LL | const _X: i32 = if true { 5 } else { 6 };\n-   |                    ^^^^\n+LL |   const _: i32 = if true {\n+   |  ________________^\n+LL | |     5\n+LL | | } else {\n+LL | |     6\n+LL | | };\n+   | |_^\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-if.rs:1:17\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/const-if.rs:7:16\n    |\n-LL | const _X: i32 = if true { 5 } else { 6 };\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |   const _: i32 = match 1 {\n+   |  ________________^\n+LL | |     2 => 3,\n+LL | |     4 => 5,\n+LL | |     _ => 0,\n+LL | | };\n+   | |_^\n \n-error: aborting due to 2 previous errors\n+error[E0744]: `if` is not allowed in a `const fn`\n+  --> $DIR/const-if.rs:14:5\n+   |\n+LL |     if true { 5 } else { 6 }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0744]: `match` is not allowed in a `const fn`\n+  --> $DIR/const-if.rs:18:5\n+   |\n+LL |     match 0 { 1 => 2, _ => 0 }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0019`.\n+For more information about this error, try `rustc --explain E0744`."}, {"sha": "383db24ad6350d7eac2fb026b95b301f1835612b", "filename": "src/test/ui/consts/const-loop.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.rs?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,17 +1,17 @@\n-const _: () = loop {}; //~ ERROR loop is not allowed in a const\n+const _: () = loop {}; //~ ERROR `loop` is not allowed in a `const`\n \n-static FOO: i32 = loop { break 4; }; //~ ERROR loop is not allowed in a static\n+static FOO: i32 = loop { break 4; }; //~ ERROR `loop` is not allowed in a `static`\n \n const fn foo() {\n-    loop {} //~ ERROR loop is not allowed in a const fn\n+    loop {} //~ ERROR `loop` is not allowed in a `const fn`\n }\n \n pub trait Foo {\n-    const BAR: i32 = loop { break 4; }; //~ ERROR loop is not allowed in a const\n+    const BAR: i32 = loop { break 4; }; //~ ERROR `loop` is not allowed in a `const`\n }\n \n impl Foo for () {\n-    const BAR: i32 = loop { break 4; }; //~ ERROR loop is not allowed in a const\n+    const BAR: i32 = loop { break 4; }; //~ ERROR `loop` is not allowed in a `const`\n }\n \n fn non_const_outside() {\n@@ -39,11 +39,11 @@ fn main() {\n const _: i32 = {\n     let mut x = 0;\n \n-    while x < 4 { //~ ERROR while loop is not allowed in a const\n+    while x < 4 { //~ ERROR `while` is not allowed in a `const`\n         x += 1;\n     }\n \n-    while x < 8 { //~ ERROR while loop is not allowed in a const\n+    while x < 8 { //~ ERROR `while` is not allowed in a `const`\n         x += 1;\n     }\n \n@@ -53,11 +53,11 @@ const _: i32 = {\n const _: i32 = {\n     let mut x = 0;\n \n-    for i in 0..4 { //~ ERROR for loop is not allowed in a const\n+    for i in 0..4 { //~ ERROR `for` is not allowed in a `const`\n         x += i;\n     }\n \n-    for i in 0..4 { //~ ERROR for loop is not allowed in a const\n+    for i in 0..4 { //~ ERROR `for` is not allowed in a `const`\n         x += i;\n     }\n \n@@ -67,16 +67,16 @@ const _: i32 = {\n const _: i32 = {\n     let mut x = 0;\n \n-    loop { //~ ERROR loop is not allowed in a const\n+    loop { //~ ERROR `loop` is not allowed in a `const`\n         x += 1;\n-        if x == 4 { //~ ERROR if expression is not allowed in a const\n+        if x == 4 { //~ ERROR `if` is not allowed in a `const`\n             break;\n         }\n     }\n \n-    loop { //~ ERROR loop is not allowed in a const\n+    loop { //~ ERROR `loop` is not allowed in a `const`\n         x += 1;\n-        if x == 8 { //~ ERROR if expression is not allowed in a const\n+        if x == 8 { //~ ERROR `if` is not allowed in a `const`\n             break;\n         }\n     }\n@@ -86,7 +86,7 @@ const _: i32 = {\n \n const _: i32 = {\n     let mut x = 0;\n-    while let None = Some(x) { } //~ ERROR while loop is not allowed in a const\n-    while let None = Some(x) { } //~ ERROR while loop is not allowed in a const\n+    while let None = Some(x) { } //~ ERROR `while let` is not allowed in a `const`\n+    while let None = Some(x) { } //~ ERROR `while let` is not allowed in a `const`\n     x\n };"}, {"sha": "bfb953547d354faea51e4d13ebbc36fc1989159d", "filename": "src/test/ui/consts/const-loop.stderr", "status": "modified", "additions": 116, "deletions": 36, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.stderr?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,60 +1,140 @@\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-loop.rs:4:11\n+error[E0744]: `loop` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:1:15\n    |\n-LL |     while x < 4 {\n-   |           ^^^^^\n+LL | const _: () = loop {};\n+   |               ^^^^^^^\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-loop.rs:4:5\n+error[E0744]: `loop` is not allowed in a `static`\n+  --> $DIR/const-loop.rs:3:19\n+   |\n+LL | static FOO: i32 = loop { break 4; };\n+   |                   ^^^^^^^^^^^^^^^^^\n+\n+error[E0744]: `loop` is not allowed in a `const fn`\n+  --> $DIR/const-loop.rs:6:5\n+   |\n+LL |     loop {}\n+   |     ^^^^^^^\n+\n+error[E0744]: `loop` is not allowed in a `const fn`\n+  --> $DIR/const-loop.rs:19:9\n+   |\n+LL |         loop {}\n+   |         ^^^^^^^\n+\n+error[E0744]: `while` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:31:9\n+   |\n+LL |         while false {}\n+   |         ^^^^^^^^^^^^^^\n+\n+error[E0744]: `while` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:42:5\n    |\n LL | /     while x < 4 {\n-LL | |\n-LL | |\n LL | |         x += 1;\n LL | |     }\n    | |_____^\n \n-error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/const-loop.rs:20:14\n+error[E0744]: `while` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:46:5\n    |\n-LL |     for i in 0..4 {\n-   |              ^^^^\n+LL | /     while x < 8 {\n+LL | |         x += 1;\n+LL | |     }\n+   | |_____^\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-loop.rs:20:14\n+error[E0744]: `for` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:56:5\n    |\n-LL |     for i in 0..4 {\n-   |              ^^^^\n+LL | /     for i in 0..4 {\n+LL | |         x += i;\n+LL | |     }\n+   | |_____^\n \n-error[E0017]: references in constants may only refer to immutable values\n-  --> $DIR/const-loop.rs:20:14\n+error[E0744]: `for` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:60:5\n    |\n-LL |     for i in 0..4 {\n-   |              ^^^^ constants require immutable values\n+LL | /     for i in 0..4 {\n+LL | |         x += i;\n+LL | |     }\n+   | |_____^\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-loop.rs:20:9\n+error[E0744]: `loop` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:70:5\n    |\n-LL |     for i in 0..4 {\n-   |         ^\n+LL | /     loop {\n+LL | |         x += 1;\n+LL | |         if x == 4 {\n+LL | |             break;\n+LL | |         }\n+LL | |     }\n+   | |_____^\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-loop.rs:41:12\n+error[E0744]: `if` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:72:9\n+   |\n+LL | /         if x == 4 {\n+LL | |             break;\n+LL | |         }\n+   | |_________^\n+\n+error[E0744]: `loop` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:77:5\n    |\n-LL |         if x == 4 {\n-   |            ^^^^^^\n+LL | /     loop {\n+LL | |         x += 1;\n+LL | |         if x == 8 {\n+LL | |             break;\n+LL | |         }\n+LL | |     }\n+   | |_____^\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-loop.rs:41:9\n+error[E0744]: `if` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:79:9\n    |\n-LL | /         if x == 4 {\n-LL | |\n-LL | |\n+LL | /         if x == 8 {\n LL | |             break;\n LL | |         }\n    | |_________^\n \n-error: aborting due to 8 previous errors\n+error[E0744]: `while let` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:89:5\n+   |\n+LL |     while let None = Some(x) { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0744]: `while let` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:90:5\n+   |\n+LL |     while let None = Some(x) { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0744]: `loop` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:10:22\n+   |\n+LL |     const BAR: i32 = loop { break 4; };\n+   |                      ^^^^^^^^^^^^^^^^^\n+\n+error[E0744]: `loop` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:14:22\n+   |\n+LL |     const BAR: i32 = loop { break 4; };\n+   |                      ^^^^^^^^^^^^^^^^^\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/const-loop.rs:31:15\n+   |\n+LL |         while false {}\n+   |               ^^^^^\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/const-loop.rs:31:9\n+   |\n+LL |         while false {}\n+   |         ^^^^^^^^^^^^^^\n+\n+error: aborting due to 19 previous errors\n \n-Some errors have detailed explanations: E0015, E0017, E0019.\n-For more information about an error, try `rustc --explain E0015`.\n+Some errors have detailed explanations: E0019, E0744.\n+For more information about an error, try `rustc --explain E0019`."}, {"sha": "0482f7f7daeab9db9b0df82c46961b40f9f638d5", "filename": "src/test/ui/consts/const-match-pattern-arm.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.rs?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,17 +1,13 @@\n #![allow(warnings)]\n \n-const x: bool = match Some(true) {\n-    //~^ ERROR: constant contains unimplemented expression type [E0019]\n+const x: bool = match Some(true) { //~ ERROR `match` is not allowed in a `const`\n     Some(value) => true,\n-    //~^ ERROR: constant contains unimplemented expression type [E0019]\n     _ => false\n };\n \n const y: bool = {\n-    match Some(true) {\n-    //~^ ERROR: constant contains unimplemented expression type [E0019]\n+    match Some(true) { //~ ERROR `match` is not allowed in a `const`\n         Some(value) => true,\n-        //~^ ERROR: constant contains unimplemented expression type [E0019]\n         _ => false\n     }\n };"}, {"sha": "57ef349a377fdc5055ea25d74d3e1b23d3ce9081", "filename": "src/test/ui/consts/const-match-pattern-arm.stderr", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.stderr?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,27 +1,22 @@\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-match-pattern-arm.rs:3:23\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/const-match-pattern-arm.rs:3:17\n    |\n-LL | const x: bool = match Some(true) {\n-   |                       ^^^^^^^^^^\n+LL |   const x: bool = match Some(true) {\n+   |  _________________^\n+LL | |     Some(value) => true,\n+LL | |     _ => false\n+LL | | };\n+   | |_^\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-match-pattern-arm.rs:5:5\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/const-match-pattern-arm.rs:9:5\n    |\n-LL |     Some(value) => true,\n-   |     ^^^^^^^^^^^\n+LL | /     match Some(true) {\n+LL | |         Some(value) => true,\n+LL | |         _ => false\n+LL | |     }\n+   | |_____^\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-match-pattern-arm.rs:11:11\n-   |\n-LL |     match Some(true) {\n-   |           ^^^^^^^^^^\n-\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-match-pattern-arm.rs:13:9\n-   |\n-LL |         Some(value) => true,\n-   |         ^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0019`.\n+For more information about this error, try `rustc --explain E0744`."}, {"sha": "754a1d7c2a3a7bba5c2513fc773f7444d751333e", "filename": "src/test/ui/consts/min_const_fn/loop_ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.rs?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,5 +1,5 @@\n const fn foo() {\n-    loop {} //~ ERROR loops are not allowed in const fn\n+    loop {} //~ ERROR `loop` is not allowed in a `const fn`\n }\n \n fn main() {}"}, {"sha": "87db65fbb7dacd286ab5c4f7fe9223461e9f50fd", "filename": "src/test/ui/consts/min_const_fn/loop_ice.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,12 +1,9 @@\n-error[E0723]: loops are not allowed in const fn\n+error[E0744]: `loop` is not allowed in a `const fn`\n   --> $DIR/loop_ice.rs:2:5\n    |\n LL |     loop {}\n    |     ^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0723`.\n+For more information about this error, try `rustc --explain E0744`."}, {"sha": "5ce21e378cd1e777c59f9b8229c6c83b8d5dab7d", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 16, "deletions": 34, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -161,25 +161,7 @@ LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: loops and conditional expressions are not stable in const fn\n-  --> $DIR/min_const_fn.rs:100:38\n-   |\n-LL | const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n-   |                                      ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: loops are not allowed in const fn\n-  --> $DIR/min_const_fn.rs:102:29\n-   |\n-LL | const fn foo30_5(b: bool) { while b { } }\n-   |                             ^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: loops and conditional expressions are not stable in const fn\n-  --> $DIR/min_const_fn.rs:105:44\n+  --> $DIR/min_const_fn.rs:101:44\n    |\n LL | const fn foo36(a: bool, b: bool) -> bool { a && b }\n    |                                            ^^^^^^\n@@ -188,7 +170,7 @@ LL | const fn foo36(a: bool, b: bool) -> bool { a && b }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: loops and conditional expressions are not stable in const fn\n-  --> $DIR/min_const_fn.rs:107:44\n+  --> $DIR/min_const_fn.rs:103:44\n    |\n LL | const fn foo37(a: bool, b: bool) -> bool { a || b }\n    |                                            ^^^^^^\n@@ -197,7 +179,7 @@ LL | const fn foo37(a: bool, b: bool) -> bool { a || b }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:109:14\n+  --> $DIR/min_const_fn.rs:105:14\n    |\n LL | const fn inc(x: &mut i32) { *x += 1 }\n    |              ^\n@@ -206,7 +188,7 @@ LL | const fn inc(x: &mut i32) { *x += 1 }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:114:6\n+  --> $DIR/min_const_fn.rs:110:6\n    |\n LL | impl<T: std::fmt::Debug> Foo<T> {\n    |      ^\n@@ -215,7 +197,7 @@ LL | impl<T: std::fmt::Debug> Foo<T> {\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:119:6\n+  --> $DIR/min_const_fn.rs:115:6\n    |\n LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n    |      ^\n@@ -224,7 +206,7 @@ LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:124:6\n+  --> $DIR/min_const_fn.rs:120:6\n    |\n LL | impl<T: Sync + Sized> Foo<T> {\n    |      ^\n@@ -233,7 +215,7 @@ LL | impl<T: Sync + Sized> Foo<T> {\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn.rs:130:24\n+  --> $DIR/min_const_fn.rs:126:24\n    |\n LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -242,7 +224,7 @@ LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:132:34\n+  --> $DIR/min_const_fn.rs:128:34\n    |\n LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    |                                  ^^^^^^^^^^^^^^^^^^^^\n@@ -251,7 +233,7 @@ LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:134:22\n+  --> $DIR/min_const_fn.rs:130:22\n    |\n LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n    |                      ^^^^^^^^^^^^^^^^^^^^\n@@ -260,7 +242,7 @@ LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn.rs:135:23\n+  --> $DIR/min_const_fn.rs:131:23\n    |\n LL | const fn no_rpit() -> impl std::fmt::Debug {}\n    |                       ^^^^^^^^^^^^^^^^^^^^\n@@ -269,7 +251,7 @@ LL | const fn no_rpit() -> impl std::fmt::Debug {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:136:23\n+  --> $DIR/min_const_fn.rs:132:23\n    |\n LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n    |                       ^^\n@@ -278,7 +260,7 @@ LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:137:32\n+  --> $DIR/min_const_fn.rs:133:32\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -287,7 +269,7 @@ LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:142:41\n+  --> $DIR/min_const_fn.rs:138:41\n    |\n LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -296,7 +278,7 @@ LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:145:21\n+  --> $DIR/min_const_fn.rs:141:21\n    |\n LL | const fn no_fn_ptrs(_x: fn()) {}\n    |                     ^^\n@@ -305,15 +287,15 @@ LL | const fn no_fn_ptrs(_x: fn()) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:147:27\n+  --> $DIR/min_const_fn.rs:143:27\n    |\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error: aborting due to 36 previous errors\n+error: aborting due to 34 previous errors\n \n Some errors have detailed explanations: E0493, E0723.\n For more information about an error, try `rustc --explain E0493`."}, {"sha": "80a92c4c96558fa5cd295bae68507a7fdfd89c0b", "filename": "src/test/ui/consts/single_variant_match_ice.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.rs?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -2,20 +2,19 @@ enum Foo {\n     Prob,\n }\n \n-const FOO: u32 = match Foo::Prob { //~ ERROR unimplemented expression type\n+const FOO: u32 = match Foo::Prob { //~ ERROR `match` is not allowed in a `const`\n     Foo::Prob => 42,\n };\n \n-const BAR: u32 = match Foo::Prob { //~ ERROR unimplemented expression type\n+const BAR: u32 = match Foo::Prob { //~ ERROR `match` is not allowed in a `const`\n     x => 42,\n };\n \n impl Foo {\n     pub const fn as_val(&self) -> u8 {\n         use self::Foo::*;\n \n-        match *self {\n-            //~^ ERROR loops and conditional expressions are not stable in const fn\n+        match *self { //~ ERROR `match` is not allowed in a `const fn`\n             Prob => 0x1,\n         }\n     }"}, {"sha": "780dd0dcddf492e89af118cf39defdb1949b4da6", "filename": "src/test/ui/consts/single_variant_match_ice.stderr", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.stderr?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,25 +1,29 @@\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/single_variant_match_ice.rs:5:24\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/single_variant_match_ice.rs:5:18\n    |\n-LL | const FOO: u32 = match Foo::Prob {\n-   |                        ^^^^^^^^^\n+LL |   const FOO: u32 = match Foo::Prob {\n+   |  __________________^\n+LL | |     Foo::Prob => 42,\n+LL | | };\n+   | |_^\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/single_variant_match_ice.rs:9:24\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/single_variant_match_ice.rs:9:18\n    |\n-LL | const BAR: u32 = match Foo::Prob {\n-   |                        ^^^^^^^^^\n+LL |   const BAR: u32 = match Foo::Prob {\n+   |  __________________^\n+LL | |     x => 42,\n+LL | | };\n+   | |_^\n \n-error[E0723]: loops and conditional expressions are not stable in const fn\n-  --> $DIR/single_variant_match_ice.rs:17:15\n+error[E0744]: `match` is not allowed in a `const fn`\n+  --> $DIR/single_variant_match_ice.rs:17:9\n    |\n-LL |         match *self {\n-   |               ^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+LL | /         match *self {\n+LL | |             Prob => 0x1,\n+LL | |         }\n+   | |_________^\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0019, E0723.\n-For more information about an error, try `rustc --explain E0019`.\n+For more information about this error, try `rustc --explain E0744`."}, {"sha": "e5b271367393d14c7b39fe509d1dd92a4bd9a8e5", "filename": "src/test/ui/issues/issue-46843.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fissues%2Fissue-46843.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fissues%2Fissue-46843.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46843.rs?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -5,9 +5,8 @@ fn non_const() -> Thing {\n }\n \n pub const Q: i32 = match non_const() {\n-    //~^ ERROR E0015\n-    //~^^ ERROR unimplemented expression type\n-    Thing::This => 1, //~ ERROR unimplemented expression type\n+    //~^ ERROR `match` is not allowed in a `const`\n+    Thing::This => 1,\n     Thing::That => 0\n };\n "}, {"sha": "9d5332978644ed813cf2916f57c02c8bd6441c5b", "filename": "src/test/ui/issues/issue-46843.stderr", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fissues%2Fissue-46843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fissues%2Fissue-46843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46843.stderr?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,22 +1,14 @@\n-error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-46843.rs:7:26\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/issue-46843.rs:7:20\n    |\n-LL | pub const Q: i32 = match non_const() {\n-   |                          ^^^^^^^^^^^\n+LL |   pub const Q: i32 = match non_const() {\n+   |  ____________________^\n+LL | |\n+LL | |     Thing::This => 1,\n+LL | |     Thing::That => 0\n+LL | | };\n+   | |_^\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/issue-46843.rs:7:26\n-   |\n-LL | pub const Q: i32 = match non_const() {\n-   |                          ^^^^^^^^^^^\n-\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/issue-46843.rs:10:5\n-   |\n-LL |     Thing::This => 1,\n-   |     ^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0015, E0019.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0744`."}, {"sha": "f3f680e7b8ecdebe9342018e9066aaadd8d13ac3", "filename": "src/test/ui/issues/issue-50577.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fissues%2Fissue-50577.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fissues%2Fissue-50577.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50577.rs?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -2,5 +2,8 @@ fn main() {\n     enum Foo {\n         Drop = assert_eq!(1, 1)\n         //~^ ERROR if may be missing an else clause\n+        //~| ERROR `match` is not allowed in a `const`\n+        //~| ERROR `match` is not allowed in a `const`\n+        //~| ERROR `if` is not allowed in a `const`\n     }\n }"}, {"sha": "055a71f468dd283ca6a5593e12f6c76ae1ec005d", "filename": "src/test/ui/issues/issue-50577.stderr", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,3 +1,27 @@\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/issue-50577.rs:3:16\n+   |\n+LL |         Drop = assert_eq!(1, 1)\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0744]: `if` is not allowed in a `const`\n+  --> $DIR/issue-50577.rs:3:16\n+   |\n+LL |         Drop = assert_eq!(1, 1)\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/issue-50577.rs:3:16\n+   |\n+LL |         Drop = assert_eq!(1, 1)\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n error[E0317]: if may be missing an else clause\n   --> $DIR/issue-50577.rs:3:16\n    |\n@@ -13,6 +37,7 @@ LL |         Drop = assert_eq!(1, 1)\n    = help: consider adding an `else` block that evaluates to the expected type\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: aborting due to previous error\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0317`.\n+Some errors have detailed explanations: E0317, E0744.\n+For more information about an error, try `rustc --explain E0317`."}, {"sha": "2d5c9358752964fe15482ba28ddd3487ac359788", "filename": "src/test/ui/issues/issue-50582.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fissues%2Fissue-50582.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fissues%2Fissue-50582.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50582.rs?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,4 +1,5 @@\n fn main() {\n     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n     //~^ ERROR cannot add\n+    //~| ERROR `for` is not allowed in a `const`\n }"}, {"sha": "13f6c4d763392a23a6ee3004dd98e0b54392cabd", "filename": "src/test/ui/issues/issue-50582.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,3 +1,9 @@\n+error[E0744]: `for` is not allowed in a `const`\n+  --> $DIR/issue-50582.rs:2:20\n+   |\n+LL |     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n+   |                    ^^^^^^^^^^^^^^^^\n+\n error[E0277]: cannot add `()` to `{integer}`\n   --> $DIR/issue-50582.rs:2:18\n    |\n@@ -6,6 +12,7 @@ LL |     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n    |\n    = help: the trait `std::ops::Add<()>` is not implemented for `{integer}`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0277, E0744.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "a2f11c98d5a3070536a3db46ad6d6cbc1765c0ad", "filename": "src/test/ui/issues/issue-50585.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fissues%2Fissue-50585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fissues%2Fissue-50585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50585.rs?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,4 +1,5 @@\n fn main() {\n     |y: Vec<[(); for x in 0..2 {}]>| {};\n     //~^ ERROR mismatched types\n+    //~| ERROR `for` is not allowed in a `const`\n }"}, {"sha": "8e57c9806e3ee43010e7a1c9601f6c3afe57cf41", "filename": "src/test/ui/issues/issue-50585.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,3 +1,9 @@\n+error[E0744]: `for` is not allowed in a `const`\n+  --> $DIR/issue-50585.rs:2:18\n+   |\n+LL |     |y: Vec<[(); for x in 0..2 {}]>| {};\n+   |                  ^^^^^^^^^^^^^^^^\n+\n error[E0308]: mismatched types\n   --> $DIR/issue-50585.rs:2:18\n    |\n@@ -7,6 +13,7 @@ LL |     |y: Vec<[(); for x in 0..2 {}]>| {};\n    = note: expected type `usize`\n               found type `()`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0308, E0744.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "e0fd7ff896cd355d725516a1b14ed074bf42f58b", "filename": "src/test/ui/issues/issue-51714.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -10,4 +10,5 @@ fn main() {\n \n     [(); return while let Some(n) = Some(0) {}];\n     //~^ ERROR return statement outside of function body\n+    //~| ERROR `while let` is not allowed in a `const`\n }"}, {"sha": "a3b20cf97f87d2f21b4077a0e597b0cddf3127f1", "filename": "src/test/ui/issues/issue-51714.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,3 +1,9 @@\n+error[E0744]: `while let` is not allowed in a `const`\n+  --> $DIR/issue-51714.rs:11:17\n+   |\n+LL |     [(); return while let Some(n) = Some(0) {}];\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0572]: return statement outside of function body\n   --> $DIR/issue-51714.rs:2:14\n    |\n@@ -22,6 +28,7 @@ error[E0572]: return statement outside of function body\n LL |     [(); return while let Some(n) = Some(0) {}];\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0572`.\n+Some errors have detailed explanations: E0572, E0744.\n+For more information about an error, try `rustc --explain E0572`."}, {"sha": "9f3b9651642a2e447cf6e9cd5999267372f51af4", "filename": "src/test/ui/return/return-match-array-const.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.rs?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,7 +1,13 @@\n fn main() {\n-    [(); return match 0 { n => n }]; //~ ERROR: return statement outside of function body\n+    [(); return match 0 { n => n }];\n+    //~^ ERROR: return statement outside of function body\n+    //~| ERROR: `match` is not allowed in a `const`\n \n-    [(); return match 0 { 0 => 0 }]; //~ ERROR: return statement outside of function body\n+    [(); return match 0 { 0 => 0 }];\n+    //~^ ERROR: return statement outside of function body\n+    //~| ERROR: `match` is not allowed in a `const`\n \n-    [(); return match () { 'a' => 0, _ => 0 }]; //~ ERROR: return statement outside of function body\n+    [(); return match () { 'a' => 0, _ => 0 }];\n+    //~^ ERROR: return statement outside of function body\n+    //~| ERROR: `match` is not allowed in a `const`\n }"}, {"sha": "496e9208b6106ff564875f331a4c6766046122d1", "filename": "src/test/ui/return/return-match-array-const.stderr", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.stderr?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,21 +1,40 @@\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/return-match-array-const.rs:2:17\n+   |\n+LL |     [(); return match 0 { n => n }];\n+   |                 ^^^^^^^^^^^^^^^^^^\n+\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/return-match-array-const.rs:6:17\n+   |\n+LL |     [(); return match 0 { 0 => 0 }];\n+   |                 ^^^^^^^^^^^^^^^^^^\n+\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/return-match-array-const.rs:10:17\n+   |\n+LL |     [(); return match () { 'a' => 0, _ => 0 }];\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0572]: return statement outside of function body\n   --> $DIR/return-match-array-const.rs:2:10\n    |\n LL |     [(); return match 0 { n => n }];\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0572]: return statement outside of function body\n-  --> $DIR/return-match-array-const.rs:4:10\n+  --> $DIR/return-match-array-const.rs:6:10\n    |\n LL |     [(); return match 0 { 0 => 0 }];\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0572]: return statement outside of function body\n-  --> $DIR/return-match-array-const.rs:6:10\n+  --> $DIR/return-match-array-const.rs:10:10\n    |\n LL |     [(); return match () { 'a' => 0, _ => 0 }];\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0572`.\n+Some errors have detailed explanations: E0572, E0744.\n+For more information about an error, try `rustc --explain E0572`."}, {"sha": "3baa19b5aed62b4fccecc64052ea1581be070b34", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -218,18 +218,21 @@ fn inside_const_generic_arguments() {\n         true && let 1 = 1 //~ ERROR `let` expressions are not supported here\n         //~^ ERROR constant contains unimplemented expression type\n         //~| ERROR constant contains unimplemented expression type\n+        //~| ERROR `match` is not allowed in a `const`\n     }>::O = 5 {}\n \n     while let A::<{\n         true && let 1 = 1 //~ ERROR `let` expressions are not supported here\n         //~^ ERROR constant contains unimplemented expression type\n         //~| ERROR constant contains unimplemented expression type\n+        //~| ERROR `match` is not allowed in a `const`\n     }>::O = 5 {}\n \n     if A::<{\n         true && let 1 = 1 //~ ERROR `let` expressions are not supported here\n         //~^ ERROR constant contains unimplemented expression type\n         //~| ERROR constant contains unimplemented expression type\n+        //~| ERROR `match` is not allowed in a `const`\n     }>::O == 5 {}\n \n     // In the cases above we have `ExprKind::Block` to help us out."}, {"sha": "92cdead7856895ba7c1592b23ce1494dd1495693", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=3ce8ca45d63a65e0c0eaaa4a29f8ce3ccf5350b9", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `,` or `>`, found `&&`\n-  --> $DIR/disallowed-positions.rs:242:14\n+  --> $DIR/disallowed-positions.rs:245:14\n    |\n LL |         true && let 1 = 1\n    |              ^^ expected one of `,` or `>`\n@@ -482,7 +482,7 @@ LL |         true && let 1 = 1\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:224:17\n+  --> $DIR/disallowed-positions.rs:225:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n@@ -491,7 +491,7 @@ LL |         true && let 1 = 1\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:230:17\n+  --> $DIR/disallowed-positions.rs:232:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n@@ -513,6 +513,24 @@ warning: the feature `let_chains` is incomplete and may cause the compiler to cr\n LL | #![feature(let_chains)] // Avoid inflating `.stderr` with overzealous gates in this test.\n    |            ^^^^^^^^^^\n \n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/disallowed-positions.rs:218:17\n+   |\n+LL |         true && let 1 = 1\n+   |                 ^^^^^^^^^\n+\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/disallowed-positions.rs:225:17\n+   |\n+LL |         true && let 1 = 1\n+   |                 ^^^^^^^^^\n+\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/disallowed-positions.rs:232:17\n+   |\n+LL |         true && let 1 = 1\n+   |                 ^^^^^^^^^\n+\n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:32:8\n    |\n@@ -966,30 +984,30 @@ LL |         true && let 1 = 1\n    |                     ^\n \n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/disallowed-positions.rs:224:25\n+  --> $DIR/disallowed-positions.rs:225:25\n    |\n LL |         true && let 1 = 1\n    |                         ^\n \n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/disallowed-positions.rs:224:21\n+  --> $DIR/disallowed-positions.rs:225:21\n    |\n LL |         true && let 1 = 1\n    |                     ^\n \n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/disallowed-positions.rs:230:25\n+  --> $DIR/disallowed-positions.rs:232:25\n    |\n LL |         true && let 1 = 1\n    |                         ^\n \n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/disallowed-positions.rs:230:21\n+  --> $DIR/disallowed-positions.rs:232:21\n    |\n LL |         true && let 1 = 1\n    |                     ^\n \n-error: aborting due to 109 previous errors\n+error: aborting due to 112 previous errors\n \n-Some errors have detailed explanations: E0019, E0277, E0308, E0600, E0614.\n+Some errors have detailed explanations: E0019, E0277, E0308, E0600, E0614, E0744.\n For more information about an error, try `rustc --explain E0019`."}]}