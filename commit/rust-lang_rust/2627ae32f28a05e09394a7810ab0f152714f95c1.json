{"sha": "2627ae32f28a05e09394a7810ab0f152714f95c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MjdhZTMyZjI4YTA1ZTA5Mzk0YTc4MTBhYjBmMTUyNzE0Zjk1YzE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-28T23:46:19Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-28T23:49:42Z"}, "message": "rustc: Fixup verbatim UNC paths as well on Windows\n\nThe compiler already has special support for fixing up verbatim paths with disks\non Windows to something that can be correctly passed down to gcc, and this\ncommit adds support for verbatim UNC paths as well.\n\nCloses #25505", "tree": {"sha": "3d250532fee3136a4621f6278d67a07e4445d402", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d250532fee3136a4621f6278d67a07e4445d402"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2627ae32f28a05e09394a7810ab0f152714f95c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2627ae32f28a05e09394a7810ab0f152714f95c1", "html_url": "https://github.com/rust-lang/rust/commit/2627ae32f28a05e09394a7810ab0f152714f95c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2627ae32f28a05e09394a7810ab0f152714f95c1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efcc1d1bcb48122ae1c522b0f4a996188791f38a", "url": "https://api.github.com/repos/rust-lang/rust/commits/efcc1d1bcb48122ae1c522b0f4a996188791f38a", "html_url": "https://github.com/rust-lang/rust/commit/efcc1d1bcb48122ae1c522b0f4a996188791f38a"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "4936e049ef2ee0e2c26da0c5e7be48430d7095ed", "filename": "src/librustc/util/fs.rs", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2627ae32f28a05e09394a7810ab0f152714f95c1/src%2Flibrustc%2Futil%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2627ae32f28a05e09394a7810ab0f152714f95c1/src%2Flibrustc%2Futil%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Ffs.rs?ref=2627ae32f28a05e09394a7810ab0f152714f95c1", "patch": "@@ -11,14 +11,22 @@\n use std::path::{self, Path, PathBuf};\n use std::ffi::OsString;\n \n-// Unfortunately, on windows, gcc cannot accept paths of the form `\\\\?\\C:\\...`\n-// (a verbatim path). This form of path is generally pretty rare, but the\n-// implementation of `fs::canonicalize` currently generates paths of this form,\n-// meaning that we're going to be passing quite a few of these down to gcc.\n+// Unfortunately, on windows, it looks like msvcrt.dll is silently translating\n+// verbatim paths under the hood to non-verbatim paths! This manifests itself as\n+// gcc looking like it cannot accept paths of the form `\\\\?\\C:\\...`, but the\n+// real bug seems to lie in msvcrt.dll.\n+//\n+// Verbatim paths are generally pretty rare, but the implementation of\n+// `fs::canonicalize` currently generates paths of this form, meaning that we're\n+// going to be passing quite a few of these down to gcc, so we need to deal with\n+// this case.\n //\n // For now we just strip the \"verbatim prefix\" of `\\\\?\\` from the path. This\n // will probably lose information in some cases, but there's not a whole lot\n-// more we can do with a buggy gcc...\n+// more we can do with a buggy msvcrt...\n+//\n+// For some more information, see this comment:\n+//   https://github.com/rust-lang/rust/issues/25505#issuecomment-102876737\n pub fn fix_windows_verbatim_for_gcc(p: &Path) -> PathBuf {\n     if !cfg!(windows) {\n         return p.to_path_buf()\n@@ -28,11 +36,20 @@ pub fn fix_windows_verbatim_for_gcc(p: &Path) -> PathBuf {\n         Some(path::Component::Prefix(p)) => p,\n         _ => return p.to_path_buf(),\n     };\n-    let disk = match prefix.kind() {\n-        path::Prefix::VerbatimDisk(disk) => disk,\n-        _ => return p.to_path_buf(),\n-    };\n-    let mut base = OsString::from(format!(\"{}:\", disk as char));\n-    base.push(components.as_path());\n-    PathBuf::from(base)\n+    match prefix.kind() {\n+        path::Prefix::VerbatimDisk(disk) => {\n+            let mut base = OsString::from(format!(\"{}:\", disk as char));\n+            base.push(components.as_path());\n+            PathBuf::from(base)\n+        }\n+        path::Prefix::VerbatimUNC(server, share) => {\n+            let mut base = OsString::from(r\"\\\\\");\n+            base.push(server);\n+            base.push(r\"\\\");\n+            base.push(share);\n+            base.push(components.as_path());\n+            PathBuf::from(base)\n+        }\n+        _ => p.to_path_buf(),\n+    }\n }"}]}