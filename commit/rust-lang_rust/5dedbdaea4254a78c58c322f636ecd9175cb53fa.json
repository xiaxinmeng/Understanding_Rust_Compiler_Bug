{"sha": "5dedbdaea4254a78c58c322f636ecd9175cb53fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZWRiZGFlYTQyNTRhNzhjNThjMzIyZjYzNmVjZDkxNzVjYjUzZmE=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-12-29T18:55:34Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-03-14T22:04:36Z"}, "message": "Check for proper use of `default` keyword in specializing impls.", "tree": {"sha": "eac755c114ff2812315e8dc49acd138a2a887274", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eac755c114ff2812315e8dc49acd138a2a887274"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dedbdaea4254a78c58c322f636ecd9175cb53fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dedbdaea4254a78c58c322f636ecd9175cb53fa", "html_url": "https://github.com/rust-lang/rust/commit/5dedbdaea4254a78c58c322f636ecd9175cb53fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dedbdaea4254a78c58c322f636ecd9175cb53fa/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1077ff2deca4c80f27596905119a84564fe9813f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1077ff2deca4c80f27596905119a84564fe9813f", "html_url": "https://github.com/rust-lang/rust/commit/1077ff2deca4c80f27596905119a84564fe9813f"}], "stats": {"total": 151, "additions": 138, "deletions": 13}, "files": [{"sha": "180a1312e250014a2a66fa947ff1d914edef3c6a", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5dedbdaea4254a78c58c322f636ecd9175cb53fa/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dedbdaea4254a78c58c322f636ecd9175cb53fa/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=5dedbdaea4254a78c58c322f636ecd9175cb53fa", "patch": "@@ -50,7 +50,8 @@ pub use self::select::SelectionContext;\n pub use self::select::SelectionCache;\n pub use self::select::{MethodMatchResult, MethodMatched, MethodAmbiguous, MethodDidNotMatch};\n pub use self::select::{MethodMatchedData}; // intentionally don't export variants\n-pub use self::specialize::{Overlap, SpecializationGraph, get_impl_item_or_default, ItemSource, specializes};\n+pub use self::specialize::{Overlap, SpecializationGraph, specializes};\n+pub use self::specialize::{ItemSource, get_impl_item_or_default, get_parent_impl_item};\n pub use self::util::elaborate_predicates;\n pub use self::util::get_vtable_index_of_object_method;\n pub use self::util::trait_ref_for_builtin_bound;"}, {"sha": "39cbd36260db5ca68fe4b297c9ba3e4b4e8ab02c", "filename": "src/librustc/middle/traits/specialize.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5dedbdaea4254a78c58c322f636ecd9175cb53fa/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dedbdaea4254a78c58c322f636ecd9175cb53fa/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize.rs?ref=5dedbdaea4254a78c58c322f636ecd9175cb53fa", "patch": "@@ -299,6 +299,26 @@ pub fn get_impl_item_or_default<'tcx, I, F>(tcx: &ty::ctxt<'tcx>,\n     None\n }\n \n+/// Convenience function for locating an item defined in a specialization parent, if any.\n+pub fn get_parent_impl_item<'tcx, I, F>(tcx: &ty::ctxt<'tcx>,\n+                                        child_impl: DefId,\n+                                        f: F)\n+                                        -> Option<(I, DefId)>\n+    where F: for<'a> FnMut(&ImplOrTraitItem<'tcx>) -> Option<I>\n+{\n+    let trait_def_id = tcx.trait_id_of_impl(child_impl).unwrap();\n+    let trait_def = tcx.lookup_trait_def(trait_def_id);\n+\n+    trait_def.parent_of_impl(child_impl)\n+             .and_then(|parent_impl| get_impl_item_or_default(tcx, parent_impl, f))\n+             .and_then(|(item, source)| {\n+                 match source {\n+                     ItemSource::Trait { .. } => None,\n+                     ItemSource::Impl { actual_impl, .. } => Some((item, actual_impl)),\n+                 }\n+             })\n+}\n+\n fn skolemizing_subst_for_impl<'a>(tcx: &ty::ctxt<'a>, impl_def_id: DefId) -> Substs<'a> {\n     let impl_generics = tcx.lookup_item_type(impl_def_id).generics;\n "}, {"sha": "081196835936cbb3a3b1462f6366d3ee62d06dde", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5dedbdaea4254a78c58c322f636ecd9175cb53fa/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dedbdaea4254a78c58c322f636ecd9175cb53fa/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=5dedbdaea4254a78c58c322f636ecd9175cb53fa", "patch": "@@ -2670,14 +2670,23 @@ impl<'tcx> TyCtxt<'tcx> {\n         Some(self.tables.borrow().upvar_capture_map.get(&upvar_id).unwrap().clone())\n     }\n \n-\n     pub fn visit_all_items_in_krate<V,F>(&self,\n                                          dep_node_fn: F,\n                                          visitor: &mut V)\n         where F: FnMut(DefId) -> DepNode, V: Visitor<'tcx>\n     {\n         dep_graph::visit_all_items_in_krate(self, dep_node_fn, visitor);\n     }\n+    /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`\n+    /// with the name of the crate containing the impl.\n+    pub fn span_of_impl(&self, impl_did: DefId) -> Result<Span, String> {\n+        if impl_did.is_local() {\n+            let node_id = self.map.as_local_node_id(impl_did).unwrap();\n+            Ok(self.map.span(node_id))\n+        } else {\n+            Err(self.sess.cstore.crate_name(impl_did.krate))\n+        }\n+    }\n }\n \n /// The category of explicit self."}, {"sha": "b6a1337dce052108f4ffe62f06bd8a09dd7e06f0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5dedbdaea4254a78c58c322f636ecd9175cb53fa/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dedbdaea4254a78c58c322f636ecd9175cb53fa/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5dedbdaea4254a78c58c322f636ecd9175cb53fa", "patch": "@@ -127,7 +127,7 @@ use syntax::util::lev_distance::find_best_match_for_name;\n \n use rustc_front::intravisit::{self, Visitor};\n use rustc_front::hir;\n-use rustc_front::hir::{Visibility, PatKind};\n+use rustc_front::hir::{Visibility, PatKind, Defaultness};\n use rustc_front::print::pprust;\n use rustc_back::slice;\n \n@@ -864,6 +864,33 @@ fn check_method_body<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     check_bare_fn(ccx, &sig.decl, body, id, span, fty, param_env);\n }\n \n+fn check_specialization_validity<'tcx, F>(tcx: &ty::ctxt<'tcx>,\n+                                          impl_id: DefId,\n+                                          impl_item: &hir::ImplItem,\n+                                          f: F)\n+    where F: FnMut(&ty::ImplOrTraitItem<'tcx>) -> Option<hir::Defaultness>\n+{\n+    let parent_item_opt = traits::get_parent_impl_item(tcx, impl_id, f);\n+    if let Some((Defaultness::Final, parent_impl)) = parent_item_opt {\n+        span_err!(tcx.sess, impl_item.span, E0520,\n+                  \"item `{}` is provided by an implementation that \\\n+                   specializes another, but the item in the parent \\\n+                   implementations is not marked `default` and so it \\\n+                   cannot be specialized.\",\n+                  impl_item.name);\n+\n+        match tcx.span_of_impl(parent_impl) {\n+            Ok(span) => {\n+                span_note!(tcx.sess, span, \"parent implementation is here:\");\n+            }\n+            Err(cname) => {\n+                tcx.sess.note(&format!(\"parent implementation is in crate `{}`\",\n+                                       cname));\n+            }\n+        }\n+    }\n+}\n+\n fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                             impl_span: Span,\n                                             impl_id: DefId,\n@@ -903,6 +930,15 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                   impl_const.name,\n                                   impl_trait_ref)\n                     }\n+\n+                    check_specialization_validity(ccx.tcx, impl_id, impl_item, |cand| {\n+                        if let &ty::ConstTraitItem(ref trait_const) = cand {\n+                            if trait_const.name == impl_item.name {\n+                                return Some(trait_const.defaultness);\n+                            }\n+                        }\n+                        None\n+                    });\n                 }\n                 hir::ImplItemKind::Method(ref sig, ref body) => {\n                     check_trait_fn_not_const(ccx, impl_item.span, sig.constness);\n@@ -926,6 +962,15 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                   impl_method.name,\n                                   impl_trait_ref)\n                     }\n+\n+                    check_specialization_validity(ccx.tcx, impl_id, impl_item, |cand| {\n+                        if let &ty::MethodTraitItem(ref meth) = cand {\n+                            if meth.name == impl_method.name {\n+                                return Some(meth.defaultness);\n+                            }\n+                        }\n+                        None\n+                    });\n                 }\n                 hir::ImplItemKind::Type(_) => {\n                     let impl_type = match ty_impl_item {\n@@ -944,6 +989,15 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                   impl_type.name,\n                                   impl_trait_ref)\n                     }\n+\n+                    check_specialization_validity(ccx.tcx, impl_id, impl_item, |cand| {\n+                        if let &ty::TypeTraitItem(ref at) = cand {\n+                            if at.name == impl_item.name {\n+                                return Some(at.defaultness);\n+                            }\n+                        }\n+                        None\n+                    });\n                 }\n             }\n         }"}, {"sha": "97cdcd4ba34e5f7a77e34dcf381bdcb5a0de745a", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5dedbdaea4254a78c58c322f636ecd9175cb53fa/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dedbdaea4254a78c58c322f636ecd9175cb53fa/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=5dedbdaea4254a78c58c322f636ecd9175cb53fa", "patch": "@@ -13,12 +13,10 @@\n //! constructor provide a method with the same name.\n \n use middle::cstore::CrateStore;\n-use middle::def_id::DefId;\n use middle::traits;\n use middle::ty::{self, TyCtxt};\n use middle::infer;\n use syntax::ast;\n-use syntax::codemap::Span;\n use rustc::dep_graph::DepNode;\n use rustc_front::hir;\n use rustc_front::intravisit;\n@@ -169,13 +167,14 @@ impl<'cx, 'tcx,'v> intravisit::Visitor<'v> for OverlapChecker<'cx, 'tcx> {\n                               overlap.on_trait_ref,\n                               self_type);\n \n-                    if overlap.with_impl.is_local() {\n-                        span_note!(self.tcx.sess, self.span_of_def_id(overlap.with_impl),\n-                                   \"conflicting implementation is here:\");\n-                    } else {\n-                        let cname = self.tcx.sess.cstore.crate_name(overlap.with_impl.krate);\n-                        self.tcx.sess.note(&format!(\"conflicting implementation in crate `{}`\",\n-                                                    cname));\n+                    match self.tcx.span_of_impl(overlap.with_impl) {\n+                        Ok(span) => {\n+                            span_note!(self.tcx.sess, span, \"conflicting implementation is here:\");\n+                        }\n+                        Err(cname) => {\n+                            self.tcx.sess.note(&format!(\"conflicting implementation in crate `{}`\",\n+                                                        cname));\n+                        }\n                     }\n                 }\n "}, {"sha": "79508c2ca9f8d4f9174e2a4632acb5f2c59b0731", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5dedbdaea4254a78c58c322f636ecd9175cb53fa/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dedbdaea4254a78c58c322f636ecd9175cb53fa/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=5dedbdaea4254a78c58c322f636ecd9175cb53fa", "patch": "@@ -3696,5 +3696,6 @@ register_diagnostics! {\n            // type `{}` was overridden\n     E0436, // functional record update requires a struct\n     E0513, // no type for local variable ..\n-    E0519  // redundant default implementations of trait\n+    E0519, // redundant default implementations of trait\n+    E0520  // cannot specialize non-default item\n }"}, {"sha": "3e23c6e06eafb7e943eb715aef95af9726cd54d4", "filename": "src/test/compile-fail/specialization-no-default.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5dedbdaea4254a78c58c322f636ecd9175cb53fa/src%2Ftest%2Fcompile-fail%2Fspecialization-no-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dedbdaea4254a78c58c322f636ecd9175cb53fa/src%2Ftest%2Fcompile-fail%2Fspecialization-no-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization-no-default.rs?ref=5dedbdaea4254a78c58c322f636ecd9175cb53fa", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    fn foo(&self);\n+    fn bar(&self);\n+}\n+\n+impl<T> Foo for T {\n+    fn foo(&self) {}\n+    fn bar(&self) {}\n+}\n+\n+impl Foo for u8 {}\n+impl Foo for u16 {\n+    fn foo(&self) {} //~ ERROR E0520\n+}\n+impl Foo for u32 {\n+    fn bar(&self) {} //~ ERROR E0520\n+}\n+\n+trait Bar {\n+    type T;\n+}\n+\n+impl<T> Bar for T {\n+    type T = u8;\n+}\n+\n+impl Bar for u8 {\n+    type T = (); //~ ERROR E0520\n+}\n+\n+fn main() {}"}]}