{"sha": "3ddd67ba5356b96806f039e1e8997af63c3a6ee1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZGQ2N2JhNTM1NmI5NjgwNmYwMzllMWU4OTk3YWY2M2MzYTZlZTE=", "commit": {"author": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2018-05-01T11:43:05Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-05T18:34:07Z"}, "message": "Move libcore/time tests from `time.rs` to `tests/time.rs`\n\nAll other tests of libcore reside in the tests/ directory,\ntoo. Apparently the tests of `time.rs` weren't run before, at\nleast not by `x.py test src/libcore`.", "tree": {"sha": "859220071d1f3901f9d4d4746e3727a8a4b562e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/859220071d1f3901f9d4d4746e3727a8a4b562e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ddd67ba5356b96806f039e1e8997af63c3a6ee1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlrt+SAACgkQ/vbIBR0O\nATyWmA//f/R6RxYAMIFjH/HEJIpUDnNBQ/VLQKWa/c6Np3p/74cKmszP/XLOx2At\n4r/jqtGJ33bwwMtEmgj9Tqnl6LBoDvS2K5IAH/fIYbwHjJnJ2eiZahr/xY6Zmrtt\n127a/g6LZEze3Wd/k6Jsy4YwnFK3Z9E2dTwraRywfVjSCVEjYDCHqEsATAj4Ilt3\n+ScmBlM4glQnh6dOE5EdyaWbQ3XydNQzvctAyM1UzdjIm4LqZqy8/PZomnWDAc3d\nrb/H3GaImrDWWVx7mCmdwn+poMgxHrXMDoDf/PMa9Wnx8gz0VCSjrZAUPhtQyF+U\n9xEyuEB1SM9W7JpmoK9d8lJrUDKKWxMU38f+5whtRRxVYFzp3XBvtoc4S8ALElcS\nAwNzQcsFfaHN736fbDojyjACBaiOzWTZxd3FXxW9Ut5KbXGIB4wv0WEFmOdRLQ3u\nA5Gyf/q3B0n9mqZxZPuMs0JP1V05npq2zbzsCXfnYqknTfUNy4ly0BPFsxEii54o\nJoyRiyhcOPoa4AEYhE1y8F6vLgzEKFuS6hPXkPOTyTHLS9b06f+WdBjLiSK3eXvx\nSgVbIJfOJCVPxDCAozXPbr/UJGYJ7JMXeKcrBZVG446yQXK+Wg3qC6mGGsoM+ImR\nF73uEURFQMTADZqD790gJD1g7FOVN6eVKapY6YvTF/4aPIvGIVA=\n=lyVv\n-----END PGP SIGNATURE-----", "payload": "tree 859220071d1f3901f9d4d4746e3727a8a4b562e3\nparent be9d6690b22c7bdf46dda7f83ca61b69f58ce78b\nauthor Lukas Kalbertodt <lukas.kalbertodt@gmail.com> 1525174985 +0200\ncommitter kennytm <kennytm@gmail.com> 1525545247 +0800\n\nMove libcore/time tests from `time.rs` to `tests/time.rs`\n\nAll other tests of libcore reside in the tests/ directory,\ntoo. Apparently the tests of `time.rs` weren't run before, at\nleast not by `x.py test src/libcore`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ddd67ba5356b96806f039e1e8997af63c3a6ee1", "html_url": "https://github.com/rust-lang/rust/commit/3ddd67ba5356b96806f039e1e8997af63c3a6ee1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ddd67ba5356b96806f039e1e8997af63c3a6ee1/comments", "author": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be9d6690b22c7bdf46dda7f83ca61b69f58ce78b", "url": "https://api.github.com/repos/rust-lang/rust/commits/be9d6690b22c7bdf46dda7f83ca61b69f58ce78b", "html_url": "https://github.com/rust-lang/rust/commit/be9d6690b22c7bdf46dda7f83ca61b69f58ce78b"}], "stats": {"total": 239, "additions": 123, "deletions": 116}, "files": [{"sha": "340879c6b851542064bdf9c66fea4e8dade90fa6", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ddd67ba5356b96806f039e1e8997af63c3a6ee1/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ddd67ba5356b96806f039e1e8997af63c3a6ee1/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=3ddd67ba5356b96806f039e1e8997af63c3a6ee1", "patch": "@@ -74,4 +74,5 @@ mod result;\n mod slice;\n mod str;\n mod str_lossy;\n+mod time;\n mod tuple;"}, {"sha": "9e6f284859c66b5346f84a0ba02e3c266fc61e86", "filename": "src/libcore/tests/time.rs", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/3ddd67ba5356b96806f039e1e8997af63c3a6ee1/src%2Flibcore%2Ftests%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ddd67ba5356b96806f039e1e8997af63c3a6ee1/src%2Flibcore%2Ftests%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ftime.rs?ref=3ddd67ba5356b96806f039e1e8997af63c3a6ee1", "patch": "@@ -0,0 +1,122 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use core::time::Duration;\n+\n+#[test]\n+fn creation() {\n+    assert!(Duration::from_secs(1) != Duration::from_secs(0));\n+    assert_eq!(Duration::from_secs(1) + Duration::from_secs(2),\n+               Duration::from_secs(3));\n+    assert_eq!(Duration::from_millis(10) + Duration::from_secs(4),\n+               Duration::new(4, 10 * 1_000_000));\n+    assert_eq!(Duration::from_millis(4000), Duration::new(4, 0));\n+}\n+\n+#[test]\n+fn secs() {\n+    assert_eq!(Duration::new(0, 0).as_secs(), 0);\n+    assert_eq!(Duration::from_secs(1).as_secs(), 1);\n+    assert_eq!(Duration::from_millis(999).as_secs(), 0);\n+    assert_eq!(Duration::from_millis(1001).as_secs(), 1);\n+}\n+\n+#[test]\n+fn nanos() {\n+    assert_eq!(Duration::new(0, 0).subsec_nanos(), 0);\n+    assert_eq!(Duration::new(0, 5).subsec_nanos(), 5);\n+    assert_eq!(Duration::new(0, 1_000_000_001).subsec_nanos(), 1);\n+    assert_eq!(Duration::from_secs(1).subsec_nanos(), 0);\n+    assert_eq!(Duration::from_millis(999).subsec_nanos(), 999 * 1_000_000);\n+    assert_eq!(Duration::from_millis(1001).subsec_nanos(), 1 * 1_000_000);\n+}\n+\n+#[test]\n+fn add() {\n+    assert_eq!(Duration::new(0, 0) + Duration::new(0, 1),\n+               Duration::new(0, 1));\n+    assert_eq!(Duration::new(0, 500_000_000) + Duration::new(0, 500_000_001),\n+               Duration::new(1, 1));\n+}\n+\n+#[test]\n+fn checked_add() {\n+    assert_eq!(Duration::new(0, 0).checked_add(Duration::new(0, 1)),\n+               Some(Duration::new(0, 1)));\n+    assert_eq!(Duration::new(0, 500_000_000).checked_add(Duration::new(0, 500_000_001)),\n+               Some(Duration::new(1, 1)));\n+    assert_eq!(Duration::new(1, 0).checked_add(Duration::new(::core::u64::MAX, 0)), None);\n+}\n+\n+#[test]\n+fn sub() {\n+    assert_eq!(Duration::new(0, 1) - Duration::new(0, 0),\n+               Duration::new(0, 1));\n+    assert_eq!(Duration::new(0, 500_000_001) - Duration::new(0, 500_000_000),\n+               Duration::new(0, 1));\n+    assert_eq!(Duration::new(1, 0) - Duration::new(0, 1),\n+               Duration::new(0, 999_999_999));\n+}\n+\n+#[test]\n+fn checked_sub() {\n+    let zero = Duration::new(0, 0);\n+    let one_nano = Duration::new(0, 1);\n+    let one_sec = Duration::new(1, 0);\n+    assert_eq!(one_nano.checked_sub(zero), Some(Duration::new(0, 1)));\n+    assert_eq!(one_sec.checked_sub(one_nano),\n+               Some(Duration::new(0, 999_999_999)));\n+    assert_eq!(zero.checked_sub(one_nano), None);\n+    assert_eq!(zero.checked_sub(one_sec), None);\n+}\n+\n+#[test] #[should_panic]\n+fn sub_bad1() {\n+    Duration::new(0, 0) - Duration::new(0, 1);\n+}\n+\n+#[test] #[should_panic]\n+fn sub_bad2() {\n+    Duration::new(0, 0) - Duration::new(1, 0);\n+}\n+\n+#[test]\n+fn mul() {\n+    assert_eq!(Duration::new(0, 1) * 2, Duration::new(0, 2));\n+    assert_eq!(Duration::new(1, 1) * 3, Duration::new(3, 3));\n+    assert_eq!(Duration::new(0, 500_000_001) * 4, Duration::new(2, 4));\n+    assert_eq!(Duration::new(0, 500_000_001) * 4000,\n+               Duration::new(2000, 4000));\n+}\n+\n+#[test]\n+fn checked_mul() {\n+    assert_eq!(Duration::new(0, 1).checked_mul(2), Some(Duration::new(0, 2)));\n+    assert_eq!(Duration::new(1, 1).checked_mul(3), Some(Duration::new(3, 3)));\n+    assert_eq!(Duration::new(0, 500_000_001).checked_mul(4), Some(Duration::new(2, 4)));\n+    assert_eq!(Duration::new(0, 500_000_001).checked_mul(4000),\n+               Some(Duration::new(2000, 4000)));\n+    assert_eq!(Duration::new(::core::u64::MAX - 1, 0).checked_mul(2), None);\n+}\n+\n+#[test]\n+fn div() {\n+    assert_eq!(Duration::new(0, 1) / 2, Duration::new(0, 0));\n+    assert_eq!(Duration::new(1, 1) / 3, Duration::new(0, 333_333_333));\n+    assert_eq!(Duration::new(99, 999_999_000) / 100,\n+               Duration::new(0, 999_999_990));\n+}\n+\n+#[test]\n+fn checked_div() {\n+    assert_eq!(Duration::new(2, 0).checked_div(2), Some(Duration::new(1, 0)));\n+    assert_eq!(Duration::new(1, 0).checked_div(2), Some(Duration::new(0, 500_000_000)));\n+    assert_eq!(Duration::new(2, 0).checked_div(0), None);\n+}"}, {"sha": "8e8b1691c657a3bc0edaa12e336332e82f55a3db", "filename": "src/libcore/time.rs", "status": "modified", "additions": 0, "deletions": 116, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/3ddd67ba5356b96806f039e1e8997af63c3a6ee1/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ddd67ba5356b96806f039e1e8997af63c3a6ee1/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=3ddd67ba5356b96806f039e1e8997af63c3a6ee1", "patch": "@@ -481,119 +481,3 @@ impl<'a> Sum<&'a Duration> for Duration {\n         iter.fold(Duration::new(0, 0), |a, b| a + *b)\n     }\n }\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::Duration;\n-\n-    #[test]\n-    fn creation() {\n-        assert!(Duration::from_secs(1) != Duration::from_secs(0));\n-        assert_eq!(Duration::from_secs(1) + Duration::from_secs(2),\n-                   Duration::from_secs(3));\n-        assert_eq!(Duration::from_millis(10) + Duration::from_secs(4),\n-                   Duration::new(4, 10 * 1_000_000));\n-        assert_eq!(Duration::from_millis(4000), Duration::new(4, 0));\n-    }\n-\n-    #[test]\n-    fn secs() {\n-        assert_eq!(Duration::new(0, 0).as_secs(), 0);\n-        assert_eq!(Duration::from_secs(1).as_secs(), 1);\n-        assert_eq!(Duration::from_millis(999).as_secs(), 0);\n-        assert_eq!(Duration::from_millis(1001).as_secs(), 1);\n-    }\n-\n-    #[test]\n-    fn nanos() {\n-        assert_eq!(Duration::new(0, 0).subsec_nanos(), 0);\n-        assert_eq!(Duration::new(0, 5).subsec_nanos(), 5);\n-        assert_eq!(Duration::new(0, 1_000_000_001).subsec_nanos(), 1);\n-        assert_eq!(Duration::from_secs(1).subsec_nanos(), 0);\n-        assert_eq!(Duration::from_millis(999).subsec_nanos(), 999 * 1_000_000);\n-        assert_eq!(Duration::from_millis(1001).subsec_nanos(), 1 * 1_000_000);\n-    }\n-\n-    #[test]\n-    fn add() {\n-        assert_eq!(Duration::new(0, 0) + Duration::new(0, 1),\n-                   Duration::new(0, 1));\n-        assert_eq!(Duration::new(0, 500_000_000) + Duration::new(0, 500_000_001),\n-                   Duration::new(1, 1));\n-    }\n-\n-    #[test]\n-    fn checked_add() {\n-        assert_eq!(Duration::new(0, 0).checked_add(Duration::new(0, 1)),\n-                   Some(Duration::new(0, 1)));\n-        assert_eq!(Duration::new(0, 500_000_000).checked_add(Duration::new(0, 500_000_001)),\n-                   Some(Duration::new(1, 1)));\n-        assert_eq!(Duration::new(1, 0).checked_add(Duration::new(::u64::MAX, 0)), None);\n-    }\n-\n-    #[test]\n-    fn sub() {\n-        assert_eq!(Duration::new(0, 1) - Duration::new(0, 0),\n-                   Duration::new(0, 1));\n-        assert_eq!(Duration::new(0, 500_000_001) - Duration::new(0, 500_000_000),\n-                   Duration::new(0, 1));\n-        assert_eq!(Duration::new(1, 0) - Duration::new(0, 1),\n-                   Duration::new(0, 999_999_999));\n-    }\n-\n-    #[test]\n-    fn checked_sub() {\n-        let zero = Duration::new(0, 0);\n-        let one_nano = Duration::new(0, 1);\n-        let one_sec = Duration::new(1, 0);\n-        assert_eq!(one_nano.checked_sub(zero), Some(Duration::new(0, 1)));\n-        assert_eq!(one_sec.checked_sub(one_nano),\n-                   Some(Duration::new(0, 999_999_999)));\n-        assert_eq!(zero.checked_sub(one_nano), None);\n-        assert_eq!(zero.checked_sub(one_sec), None);\n-    }\n-\n-    #[test] #[should_panic]\n-    fn sub_bad1() {\n-        Duration::new(0, 0) - Duration::new(0, 1);\n-    }\n-\n-    #[test] #[should_panic]\n-    fn sub_bad2() {\n-        Duration::new(0, 0) - Duration::new(1, 0);\n-    }\n-\n-    #[test]\n-    fn mul() {\n-        assert_eq!(Duration::new(0, 1) * 2, Duration::new(0, 2));\n-        assert_eq!(Duration::new(1, 1) * 3, Duration::new(3, 3));\n-        assert_eq!(Duration::new(0, 500_000_001) * 4, Duration::new(2, 4));\n-        assert_eq!(Duration::new(0, 500_000_001) * 4000,\n-                   Duration::new(2000, 4000));\n-    }\n-\n-    #[test]\n-    fn checked_mul() {\n-        assert_eq!(Duration::new(0, 1).checked_mul(2), Some(Duration::new(0, 2)));\n-        assert_eq!(Duration::new(1, 1).checked_mul(3), Some(Duration::new(3, 3)));\n-        assert_eq!(Duration::new(0, 500_000_001).checked_mul(4), Some(Duration::new(2, 4)));\n-        assert_eq!(Duration::new(0, 500_000_001).checked_mul(4000),\n-                   Some(Duration::new(2000, 4000)));\n-        assert_eq!(Duration::new(::u64::MAX - 1, 0).checked_mul(2), None);\n-    }\n-\n-    #[test]\n-    fn div() {\n-        assert_eq!(Duration::new(0, 1) / 2, Duration::new(0, 0));\n-        assert_eq!(Duration::new(1, 1) / 3, Duration::new(0, 333_333_333));\n-        assert_eq!(Duration::new(99, 999_999_000) / 100,\n-                   Duration::new(0, 999_999_990));\n-    }\n-\n-    #[test]\n-    fn checked_div() {\n-        assert_eq!(Duration::new(2, 0).checked_div(2), Some(Duration::new(1, 0)));\n-        assert_eq!(Duration::new(1, 0).checked_div(2), Some(Duration::new(0, 500_000_000)));\n-        assert_eq!(Duration::new(2, 0).checked_div(0), None);\n-    }\n-}"}]}