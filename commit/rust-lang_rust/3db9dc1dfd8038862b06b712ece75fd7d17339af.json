{"sha": "3db9dc1dfd8038862b06b712ece75fd7d17339af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYjlkYzFkZmQ4MDM4ODYyYjA2YjcxMmVjZTc1ZmQ3ZDE3MzM5YWY=", "commit": {"author": {"name": "Jordi Boggiano", "email": "j.boggiano@seld.be", "date": "2013-08-06T20:13:26Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-08-08T02:41:13Z"}, "message": "Document rand module with more emphasis on cryptographic security", "tree": {"sha": "906fdc6d88256807957a6347d40a4b81b8c5c4f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/906fdc6d88256807957a6347d40a4b81b8c5c4f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3db9dc1dfd8038862b06b712ece75fd7d17339af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3db9dc1dfd8038862b06b712ece75fd7d17339af", "html_url": "https://github.com/rust-lang/rust/commit/3db9dc1dfd8038862b06b712ece75fd7d17339af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3db9dc1dfd8038862b06b712ece75fd7d17339af/comments", "author": {"login": "Seldaek", "id": 183678, "node_id": "MDQ6VXNlcjE4MzY3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/183678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Seldaek", "html_url": "https://github.com/Seldaek", "followers_url": "https://api.github.com/users/Seldaek/followers", "following_url": "https://api.github.com/users/Seldaek/following{/other_user}", "gists_url": "https://api.github.com/users/Seldaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/Seldaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Seldaek/subscriptions", "organizations_url": "https://api.github.com/users/Seldaek/orgs", "repos_url": "https://api.github.com/users/Seldaek/repos", "events_url": "https://api.github.com/users/Seldaek/events{/privacy}", "received_events_url": "https://api.github.com/users/Seldaek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9b7bec2e7f005431c7424a59095ccda33484bb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b7bec2e7f005431c7424a59095ccda33484bb1", "html_url": "https://github.com/rust-lang/rust/commit/a9b7bec2e7f005431c7424a59095ccda33484bb1"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "4408e5e1f275830490578a487a1fac97d27ed2b4", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3db9dc1dfd8038862b06b712ece75fd7d17339af/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db9dc1dfd8038862b06b712ece75fd7d17339af/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=3db9dc1dfd8038862b06b712ece75fd7d17339af", "patch": "@@ -610,6 +610,11 @@ impl<R: Rng> RngUtil for R {\n }\n \n /// Create a random number generator with a default algorithm and seed.\n+///\n+/// It returns the cryptographically-safest `Rng` algorithm currently\n+/// available in Rust. If you require a specifically seeded `Rng` for\n+/// consistency over time you should pick one algorithm and create the\n+/// `Rng` yourself.\n pub fn rng() -> IsaacRng {\n     IsaacRng::new()\n }\n@@ -619,6 +624,8 @@ static RAND_SIZE: u32 = 1 << RAND_SIZE_LEN;\n \n /// A random number generator that uses the [ISAAC\n /// algorithm](http://en.wikipedia.org/wiki/ISAAC_%28cipher%29).\n+///\n+/// The ISAAC algorithm is suitable for cryptographic purposes.\n pub struct IsaacRng {\n     priv cnt: u32,\n     priv rsl: [u32, .. RAND_SIZE],\n@@ -794,8 +801,11 @@ impl Rng for IsaacRng {\n }\n \n /// An [Xorshift random number\n-/// generator](http://en.wikipedia.org/wiki/Xorshift). Not suitable for\n-/// cryptographic purposes.\n+/// generator](http://en.wikipedia.org/wiki/Xorshift).\n+///\n+/// The Xorshift algorithm is not suitable for cryptographic purposes\n+/// but is very fast. If you do not know for sure that it fits your\n+/// requirements, use a more secure one such as `IsaacRng`.\n pub struct XorShiftRng {\n     priv x: u32,\n     priv y: u32,"}]}