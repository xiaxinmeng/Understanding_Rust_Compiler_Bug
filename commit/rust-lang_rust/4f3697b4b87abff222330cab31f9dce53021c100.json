{"sha": "4f3697b4b87abff222330cab31f9dce53021c100", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMzY5N2I0Yjg3YWJmZjIyMjMzMGNhYjMxZjlkY2U1MzAyMWMxMDA=", "commit": {"author": {"name": "ecstatic-morse", "email": "ecstaticmorse@gmail.com", "date": "2020-09-22T03:40:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-22T03:40:41Z"}, "message": "Rollup merge of #76150 - matklad:droporder, r=withoutboats\n\nDon't recommend ManuallyDrop to customize drop order\n\nSee\nhttps://internals.rust-lang.org/t/need-for-controlling-drop-order-of-fields/12914/21\nfor the discussion.\n\nTL;DR: ManuallyDrop is unsafe and footguny, but you can just ask the compiler to do all the work for you by re-ordering declarations.\n\nSpecifically, the original example from the docs is much better written as\n\n```rust\nstruct Peach;\nstruct Banana;\nstruct Melon;\nstruct FruitBox {\n    melon: Melon,\n    // XXX: mind the relative drop order of the fields below\n    peach: Peach,\n    banana: Banana,\n}\n```", "tree": {"sha": "9f8b55101bd6d60da04c93c6dc6e4f40f2d0d9f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f8b55101bd6d60da04c93c6dc6e4f40f2d0d9f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f3697b4b87abff222330cab31f9dce53021c100", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfaXI6CRBK7hj4Ov3rIwAAdHIIABvdG9jLq/XEy71MYfdogbi9\n2+E7FOy1m/naF8fTnHUN2XEnHGHOcOUi2yoj2N4rYzzcq+ZkU6ideMJlnM5s/ZUj\nrLi69I/0JgQerluwFnCbDGWOsWiSXY4egftcBE+kZbEP+rw4Ztwg9kNGT0avnjkX\nsruxtsA3wdqrVoDfi+SnEYIBSWj/rRr90KmJFZRXRIaPM3zpIBM59nNKDEX8jI4a\nRMhXlVponnLB81RnX/JA5IomYWJQs9CJ7Qw9Cznq4bOcOvH481hsB+52BtvCI5s5\n6iDgRoDdslaOYi4ye8sQW1M4Dp+LpmufME1zbN+7HGnoKxrk+FIxJicp0Udapa4=\n=yNcE\n-----END PGP SIGNATURE-----\n", "payload": "tree 9f8b55101bd6d60da04c93c6dc6e4f40f2d0d9f0\nparent dc42aa8cd4418fe012394c6263a093b0333467b9\nparent 60b102de06f52102aa6c343de1f1ef31ff08f8df\nauthor ecstatic-morse <ecstaticmorse@gmail.com> 1600746041 -0700\ncommitter GitHub <noreply@github.com> 1600746041 -0700\n\nRollup merge of #76150 - matklad:droporder, r=withoutboats\n\nDon't recommend ManuallyDrop to customize drop order\n\nSee\nhttps://internals.rust-lang.org/t/need-for-controlling-drop-order-of-fields/12914/21\nfor the discussion.\n\nTL;DR: ManuallyDrop is unsafe and footguny, but you can just ask the compiler to do all the work for you by re-ordering declarations.\n\nSpecifically, the original example from the docs is much better written as\n\n```rust\nstruct Peach;\nstruct Banana;\nstruct Melon;\nstruct FruitBox {\n    melon: Melon,\n    // XXX: mind the relative drop order of the fields below\n    peach: Peach,\n    banana: Banana,\n}\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f3697b4b87abff222330cab31f9dce53021c100", "html_url": "https://github.com/rust-lang/rust/commit/4f3697b4b87abff222330cab31f9dce53021c100", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f3697b4b87abff222330cab31f9dce53021c100/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc42aa8cd4418fe012394c6263a093b0333467b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc42aa8cd4418fe012394c6263a093b0333467b9", "html_url": "https://github.com/rust-lang/rust/commit/dc42aa8cd4418fe012394c6263a093b0333467b9"}, {"sha": "60b102de06f52102aa6c343de1f1ef31ff08f8df", "url": "https://api.github.com/repos/rust-lang/rust/commits/60b102de06f52102aa6c343de1f1ef31ff08f8df", "html_url": "https://github.com/rust-lang/rust/commit/60b102de06f52102aa6c343de1f1ef31ff08f8df"}], "stats": {"total": 55, "additions": 19, "deletions": 36}, "files": [{"sha": "d86939454be5b0c4432dec7fe6c97a90da0c5e48", "filename": "library/core/src/mem/manually_drop.rs", "status": "modified", "additions": 19, "deletions": 36, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4f3697b4b87abff222330cab31f9dce53021c100/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3697b4b87abff222330cab31f9dce53021c100/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs?ref=4f3697b4b87abff222330cab31f9dce53021c100", "patch": "@@ -15,50 +15,33 @@ use crate::ptr;\n /// be exposed through a public safe API.\n /// Correspondingly, `ManuallyDrop::drop` is unsafe.\n ///\n-/// # Examples\n+/// # `ManuallyDrop` and drop order.\n ///\n-/// This wrapper can be used to enforce a particular drop order on fields, regardless\n-/// of how they are defined in the struct:\n+/// Rust has a well-defined [drop order] of values. To make sure that fields or\n+/// locals are dropped in a specific order, reorder the declarations such that\n+/// the implicit drop order is the correct one.\n ///\n-/// ```rust\n-/// use std::mem::ManuallyDrop;\n-/// struct Peach;\n-/// struct Banana;\n-/// struct Melon;\n-/// struct FruitBox {\n-///     // Immediately clear there\u2019s something non-trivial going on with these fields.\n-///     peach: ManuallyDrop<Peach>,\n-///     melon: Melon, // Field that\u2019s independent of the other two.\n-///     banana: ManuallyDrop<Banana>,\n-/// }\n+/// It is possible to use `ManuallyDrop` to control the drop order, but this\n+/// requires unsafe code and is hard to do correctly in the presence of\n+/// unwinding.\n ///\n-/// impl Drop for FruitBox {\n-///     fn drop(&mut self) {\n-///         unsafe {\n-///             // Explicit ordering in which field destructors are run specified in the intuitive\n-///             // location \u2013 the destructor of the structure containing the fields.\n-///             // Moreover, one can now reorder fields within the struct however much they want.\n-///             ManuallyDrop::drop(&mut self.peach);\n-///             ManuallyDrop::drop(&mut self.banana);\n-///         }\n-///         // After destructor for `FruitBox` runs (this function), the destructor for Melon gets\n-///         // invoked in the usual manner, as it is not wrapped in `ManuallyDrop`.\n-///     }\n-/// }\n-/// ```\n+/// For example, if you want to make sure that a specific field is dropped after\n+/// the others, make it the last field of a struct:\n ///\n-/// However, care should be taken when using this pattern as it can lead to *leak amplification*.\n-/// In this example, if the `Drop` implementation for `Peach` were to panic, the `banana` field\n-/// would also be leaked.\n+/// ```\n+/// struct Context;\n ///\n-/// In contrast, the automatically-generated compiler drop implementation would have ensured\n-/// that all fields are dropped even in the presence of panics. This is especially important when\n-/// working with [pinned] data, where reusing the memory without calling the destructor could lead\n-/// to Undefined Behaviour.\n+/// struct Widget {\n+///     children: Vec<Widget>,\n+///     // `context` will be dropped after `children`.\n+///     // Rust guarantees that fields are dropped in the order of declaration.\n+///     context: Context,\n+/// }\n+/// ```\n ///\n+/// [drop order]: https://doc.rust-lang.org/reference/destructors.html\n /// [`mem::zeroed`]: crate::mem::zeroed\n /// [`MaybeUninit<T>`]: crate::mem::MaybeUninit\n-/// [pinned]: crate::pin\n #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n #[lang = \"manually_drop\"]\n #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]"}]}