{"sha": "f780faa8c4942d45d56ef0523bdd9fc9f5cdd9a8", "node_id": "C_kwDOAAsO6NoAKGY3ODBmYWE4YzQ5NDJkNDVkNTZlZjA1MjNiZGQ5ZmM5ZjVjZGQ5YTg", "commit": {"author": {"name": "akida31", "email": "akida3@protonmail.com", "date": "2022-11-13T21:40:54Z"}, "committer": {"name": "akida31", "email": "akida3@protonmail.com", "date": "2022-12-13T15:30:04Z"}, "message": "reduce to single suggestion for all arguments", "tree": {"sha": "d6768127df7738d1e8f30f10306e03907d491dc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6768127df7738d1e8f30f10306e03907d491dc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f780faa8c4942d45d56ef0523bdd9fc9f5cdd9a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ20GAFrM+jef+hIIAuGvLD2ft8kFAmOYmn4ACgkQAuGvLD2f\nt8kT/A/9FLGsZa35VFu4iWBKw8iwH3MwHwmSFrycgeyZYtdzpgqn8bvFlaEAG1X9\nY9mGknYEFWElm1JDxobs3mwgM4xMQsl7/SMBxpDoDJtIa7hgzDIL6q3KpcyYT8iM\ngProIPdvUSLAucpsxyNCt21KGdj+7xDsnxTmZ/6MCUU6CTOEIZ4TsRrNXR3Iyb/X\nVqNnVnHfu04v13vaRiYPOc50Qq93Jpab3UmWGR2dXmtH6WtZC0wobLvamlfPAJ0D\nbzHbQXlMysaf2wTzyJedS02E2ym3bdFzhNO27Kzqs5O9oEvgBNseZlwAmFMkm8tn\neGeCKmqHCS3hJDapJg+iQmtb/x/haPLCP1tZ2lt7v/f6FfCjr5PAetkK9aom/Ae1\nkKRXe3oRih+zkY4b2WLZAdqtKZXBgbfcN61N/vNukszquqof3jZ85Yin0AbHubfm\nyg+5s07YejoII3xyuyAjS0waf7etcThgMyW6HbAMIJcKfy0ABYOEhpKcO0ZL6e/C\nRB2jU2FB9kPjvDCU+IUiLK2lM7/1QdfVLqNGJv86Gr1Oeq2EWtCZQnQmbQGOD88b\n0vWbVJJmOmDx/mPA3EhfTi/5geTzxRCo40/CkOfNjg/FSYj0pmNwfv3aLykgnx3z\nSDJSqkWrCrc57McZz8PxqnK1Zco9NeW3u6Y9/4IbuZhVUWMk6VM=\n=ouG4\n-----END PGP SIGNATURE-----", "payload": "tree d6768127df7738d1e8f30f10306e03907d491dc0\nparent 4d87fb5d1125b5bceb83b34eb68bc0e73fcf636a\nauthor akida31 <akida3@protonmail.com> 1668375654 +0100\ncommitter akida31 <akida3@protonmail.com> 1670945404 +0100\n\nreduce to single suggestion for all arguments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f780faa8c4942d45d56ef0523bdd9fc9f5cdd9a8", "html_url": "https://github.com/rust-lang/rust/commit/f780faa8c4942d45d56ef0523bdd9fc9f5cdd9a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f780faa8c4942d45d56ef0523bdd9fc9f5cdd9a8/comments", "author": {"login": "Akida31", "id": 47895118, "node_id": "MDQ6VXNlcjQ3ODk1MTE4", "avatar_url": "https://avatars.githubusercontent.com/u/47895118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Akida31", "html_url": "https://github.com/Akida31", "followers_url": "https://api.github.com/users/Akida31/followers", "following_url": "https://api.github.com/users/Akida31/following{/other_user}", "gists_url": "https://api.github.com/users/Akida31/gists{/gist_id}", "starred_url": "https://api.github.com/users/Akida31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Akida31/subscriptions", "organizations_url": "https://api.github.com/users/Akida31/orgs", "repos_url": "https://api.github.com/users/Akida31/repos", "events_url": "https://api.github.com/users/Akida31/events{/privacy}", "received_events_url": "https://api.github.com/users/Akida31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Akida31", "id": 47895118, "node_id": "MDQ6VXNlcjQ3ODk1MTE4", "avatar_url": "https://avatars.githubusercontent.com/u/47895118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Akida31", "html_url": "https://github.com/Akida31", "followers_url": "https://api.github.com/users/Akida31/followers", "following_url": "https://api.github.com/users/Akida31/following{/other_user}", "gists_url": "https://api.github.com/users/Akida31/gists{/gist_id}", "starred_url": "https://api.github.com/users/Akida31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Akida31/subscriptions", "organizations_url": "https://api.github.com/users/Akida31/orgs", "repos_url": "https://api.github.com/users/Akida31/repos", "events_url": "https://api.github.com/users/Akida31/events{/privacy}", "received_events_url": "https://api.github.com/users/Akida31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d87fb5d1125b5bceb83b34eb68bc0e73fcf636a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d87fb5d1125b5bceb83b34eb68bc0e73fcf636a", "html_url": "https://github.com/rust-lang/rust/commit/4d87fb5d1125b5bceb83b34eb68bc0e73fcf636a"}], "stats": {"total": 155, "additions": 66, "deletions": 89}, "files": [{"sha": "dafc424f1b4c45a27da3fb0cd95fd28c202169f7", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f780faa8c4942d45d56ef0523bdd9fc9f5cdd9a8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f780faa8c4942d45d56ef0523bdd9fc9f5cdd9a8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=f780faa8c4942d45d56ef0523bdd9fc9f5cdd9a8", "patch": "@@ -3429,26 +3429,37 @@ fn hint_missing_borrow<'tcx>(\n         (ty, refs)\n     }\n \n+    let mut to_borrow = Vec::new();\n+    let mut remove_borrow = Vec::new();\n+\n     for ((found_arg, expected_arg), arg_span) in found_args.zip(expected_args).zip(arg_spans) {\n         let (found_ty, found_refs) = get_deref_type_and_refs(*found_arg);\n         let (expected_ty, expected_refs) = get_deref_type_and_refs(*expected_arg);\n \n         if found_ty == expected_ty {\n-            let hint = if found_refs < expected_refs {\n-                \"consider borrowing the argument\"\n-            } else if found_refs == expected_refs {\n-                continue;\n-            } else {\n-                \"do not borrow the argument\"\n-            };\n-            err.span_suggestion_verbose(\n-                arg_span,\n-                hint,\n-                expected_arg.to_string(),\n-                Applicability::MaybeIncorrect,\n-            );\n+            if found_refs < expected_refs {\n+                to_borrow.push((arg_span, expected_arg.to_string()));\n+            } else if found_refs > expected_refs {\n+                remove_borrow.push((arg_span, expected_arg.to_string()));\n+            }\n         }\n     }\n+\n+    if !to_borrow.is_empty() {\n+        err.multipart_suggestion(\n+            \"consider borrowing the argument\",\n+            to_borrow,\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+\n+    if !remove_borrow.is_empty() {\n+        err.multipart_suggestion(\n+            \"do not borrow the argument\",\n+            remove_borrow,\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n }\n \n /// Collect all the returned expressions within the input expression."}, {"sha": "afb7f8fea92a1fae2aa6c205b9e55849c3720ddb", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 30, "deletions": 66, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/f780faa8c4942d45d56ef0523bdd9fc9f5cdd9a8/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f780faa8c4942d45d56ef0523bdd9fc9f5cdd9a8/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=f780faa8c4942d45d56ef0523bdd9fc9f5cdd9a8", "patch": "@@ -15,12 +15,8 @@ LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n    |                         ^^^^^^^^^^^^ required by this bound in `f1`\n help: consider borrowing the argument\n    |\n-LL |     f1(|_: &(), _: ()| {});\n-   |            ~~~\n-help: consider borrowing the argument\n-   |\n-LL |     f1(|_: (), _: &()| {});\n-   |                   ~~~\n+LL |     f1(|_: &(), _: &()| {});\n+   |            ~~~     ~~~\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:3:5\n@@ -39,12 +35,8 @@ LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `f2`\n help: consider borrowing the argument\n    |\n-LL |     f2(|_: &'a (), _: ()| {});\n-   |            ~~~~~~\n-help: consider borrowing the argument\n-   |\n-LL |     f2(|_: (), _: &()| {});\n-   |                   ~~~\n+LL |     f2(|_: &'a (), _: &()| {});\n+   |            ~~~~~~     ~~~\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n@@ -63,12 +55,8 @@ LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n    |                             ^^^^^^^^^^^^^^^ required by this bound in `f3`\n help: consider borrowing the argument\n    |\n-LL |     f3(|_: &(), _: ()| {});\n-   |            ~~~\n-help: consider borrowing the argument\n-   |\n-LL |     f3(|_: (), _: &()| {});\n-   |                   ~~~\n+LL |     f3(|_: &(), _: &()| {});\n+   |            ~~~     ~~~\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:5:5\n@@ -87,12 +75,8 @@ LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `f4`\n help: consider borrowing the argument\n    |\n-LL |     f4(|_: &(), _: ()| {});\n-   |            ~~~\n-help: consider borrowing the argument\n-   |\n-LL |     f4(|_: (), _: &'r ()| {});\n-   |                   ~~~~~~\n+LL |     f4(|_: &(), _: &'r ()| {});\n+   |            ~~~     ~~~~~~\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n@@ -111,19 +95,17 @@ LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `f5`\n help: consider borrowing the argument\n    |\n-LL |     f5(|_: &'r (), _: ()| {});\n-   |            ~~~~~~\n-help: consider borrowing the argument\n-   |\n-LL |     f5(|_: (), _: &'r ()| {});\n-   |                   ~~~~~~\n+LL |     f5(|_: &'r (), _: &'r ()| {});\n+   |            ~~~~~~     ~~~~~~\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:7:5\n    |\n LL |     g1(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature defined here\n-   |     |\n+   |     ^^ --------------\n+   |     |  |   |\n+   |     |  |   help: consider borrowing the argument: `&()`\n+   |     |  found signature defined here\n    |     expected due to this\n    |\n    = note: expected closure signature `for<'a> fn(&'a (), Box<(dyn for<'a> Fn(&'a ()) + 'static)>) -> _`\n@@ -133,17 +115,15 @@ note: required by a bound in `g1`\n    |\n LL | fn g1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `g1`\n-help: consider borrowing the argument\n-   |\n-LL |     g1(|_: &(), _: ()| {});\n-   |            ~~~\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n    |\n LL |     g2(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature defined here\n-   |     |\n+   |     ^^ --------------\n+   |     |  |   |\n+   |     |  |   help: consider borrowing the argument: `&()`\n+   |     |  found signature defined here\n    |     expected due to this\n    |\n    = note: expected closure signature `for<'a> fn(&'a (), for<'a> fn(&'a ())) -> _`\n@@ -153,17 +133,15 @@ note: required by a bound in `g2`\n    |\n LL | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n    |                         ^^^^^^^^^^^^^^^^ required by this bound in `g2`\n-help: consider borrowing the argument\n-   |\n-LL |     g2(|_: &(), _: ()| {});\n-   |            ~~~\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:9:5\n    |\n LL |     g3(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature defined here\n-   |     |\n+   |     ^^ --------------\n+   |     |  |   |\n+   |     |  |   help: consider borrowing the argument: `&'s ()`\n+   |     |  found signature defined here\n    |     expected due to this\n    |\n    = note: expected closure signature `for<'s> fn(&'s (), Box<(dyn for<'a> Fn(&'a ()) + 'static)>) -> _`\n@@ -173,17 +151,15 @@ note: required by a bound in `g3`\n    |\n LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<dyn Fn(&())>) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `g3`\n-help: consider borrowing the argument\n-   |\n-LL |     g3(|_: &'s (), _: ()| {});\n-   |            ~~~~~~\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n    |\n LL |     g4(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature defined here\n-   |     |\n+   |     ^^ --------------\n+   |     |  |   |\n+   |     |  |   help: consider borrowing the argument: `&()`\n+   |     |  found signature defined here\n    |     expected due to this\n    |\n    = note: expected closure signature `for<'a> fn(&'a (), for<'r> fn(&'r ())) -> _`\n@@ -193,10 +169,6 @@ note: required by a bound in `g4`\n    |\n LL | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `g4`\n-help: consider borrowing the argument\n-   |\n-LL |     g4(|_: &(), _: ()| {});\n-   |            ~~~\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:11:5\n@@ -215,12 +187,8 @@ LL | fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `h1`\n help: consider borrowing the argument\n    |\n-LL |     h1(|_: &(), _: (), _: (), _: ()| {});\n-   |            ~~~\n-help: consider borrowing the argument\n-   |\n-LL |     h1(|_: (), _: (), _: &(), _: ()| {});\n-   |                          ~~~\n+LL |     h1(|_: &(), _: (), _: &(), _: ()| {});\n+   |            ~~~            ~~~\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n@@ -239,12 +207,8 @@ LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(),\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `h2`\n help: consider borrowing the argument\n    |\n-LL |     h2(|_: &(), _: (), _: (), _: ()| {});\n-   |            ~~~\n-help: consider borrowing the argument\n-   |\n-LL |     h2(|_: (), _: (), _: &'t0 (), _: ()| {});\n-   |                          ~~~~~~~\n+LL |     h2(|_: &(), _: (), _: &'t0 (), _: ()| {});\n+   |            ~~~            ~~~~~~~\n \n error: aborting due to 11 previous errors\n "}, {"sha": "da26302c9d8a48219e8845a02c3820b764b95d4d", "filename": "src/test/ui/closures/multiple-fn-bounds.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f780faa8c4942d45d56ef0523bdd9fc9f5cdd9a8/src%2Ftest%2Fui%2Fclosures%2Fmultiple-fn-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f780faa8c4942d45d56ef0523bdd9fc9f5cdd9a8/src%2Ftest%2Fui%2Fclosures%2Fmultiple-fn-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fmultiple-fn-bounds.stderr?ref=f780faa8c4942d45d56ef0523bdd9fc9f5cdd9a8", "patch": "@@ -2,8 +2,10 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/multiple-fn-bounds.rs:10:5\n    |\n LL |     foo(move |x| v);\n-   |     ^^^ -------- found signature defined here\n-   |     |\n+   |     ^^^ --------\n+   |     |   |     |\n+   |     |   |     help: do not borrow the argument: `char`\n+   |     |   found signature defined here\n    |     expected due to this\n    |\n    = note: expected closure signature `fn(char) -> _`\n@@ -18,10 +20,6 @@ note: required by a bound in `foo`\n    |\n LL | fn foo<F: Fn(&char) -> bool + Fn(char) -> bool>(f: F) {\n    |                               ^^^^^^^^^^^^^^^^ required by this bound in `foo`\n-help: do not borrow the argument\n-   |\n-LL |     foo(move |char| v);\n-   |               ~~~~\n \n error: aborting due to previous error\n "}, {"sha": "bfc243b68a8575037141d392bd325575a6f272c8", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f780faa8c4942d45d56ef0523bdd9fc9f5cdd9a8/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f780faa8c4942d45d56ef0523bdd9fc9f5cdd9a8/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=f780faa8c4942d45d56ef0523bdd9fc9f5cdd9a8", "patch": "@@ -2,8 +2,10 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:3:14\n    |\n LL |     a.iter().map(|_: (u32, u32)| 45);\n-   |              ^^^ --------------- found signature defined here\n-   |              |\n+   |              ^^^ ---------------\n+   |              |   |   |\n+   |              |   |   help: consider borrowing the argument: `&(u32, u32)`\n+   |              |   found signature defined here\n    |              expected due to this\n    |\n    = note: expected closure signature `fn(&(u32, u32)) -> _`"}, {"sha": "0f035b89dd957a9085bfdc1b9040c3a152fa7cc9", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f780faa8c4942d45d56ef0523bdd9fc9f5cdd9a8/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f780faa8c4942d45d56ef0523bdd9fc9f5cdd9a8/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=f780faa8c4942d45d56ef0523bdd9fc9f5cdd9a8", "patch": "@@ -2,8 +2,10 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/issue-36053-2.rs:7:32\n    |\n LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n-   |                                ^^^^^^ --------- found signature defined here\n-   |                                |\n+   |                                ^^^^^^ ---------\n+   |                                |      |   |\n+   |                                |      |   help: consider borrowing the argument: `&&str`\n+   |                                |      found signature defined here\n    |                                expected due to this\n    |\n    = note: expected closure signature `for<'a> fn(&'a &str) -> _`"}]}