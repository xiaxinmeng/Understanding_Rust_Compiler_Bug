{"sha": "b6c988b041194136ee20407a920903d49808fb06", "node_id": "C_kwDOAAsO6NoAKGI2Yzk4OGIwNDExOTQxMzZlZTIwNDA3YTkyMDkwM2Q0OTgwOGZiMDY", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-01-13T18:01:19Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-03-16T10:19:31Z"}, "message": "Fix argument index remapping in format_args flattening.", "tree": {"sha": "bc09e417945c95b07eeffe61a6374aa4cfc7ce2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc09e417945c95b07eeffe61a6374aa4cfc7ce2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6c988b041194136ee20407a920903d49808fb06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6c988b041194136ee20407a920903d49808fb06", "html_url": "https://github.com/rust-lang/rust/commit/b6c988b041194136ee20407a920903d49808fb06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6c988b041194136ee20407a920903d49808fb06/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7678d48b8c168bbbc0c34911bb38c8cd484e0ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7678d48b8c168bbbc0c34911bb38c8cd484e0ee", "html_url": "https://github.com/rust-lang/rust/commit/b7678d48b8c168bbbc0c34911bb38c8cd484e0ee"}], "stats": {"total": 64, "additions": 36, "deletions": 28}, "files": [{"sha": "672c503f5b271dcbdbe7a868d79f674e0cc7b000", "filename": "compiler/rustc_ast_lowering/src/format.rs", "status": "modified", "additions": 36, "deletions": 28, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/b6c988b041194136ee20407a920903d49808fb06/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6c988b041194136ee20407a920903d49808fb06/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs?ref=b6c988b041194136ee20407a920903d49808fb06", "patch": "@@ -68,33 +68,21 @@ fn flatten_format_args(mut fmt: Cow<'_, FormatArgs>) -> Cow<'_, FormatArgs> {\n             args.extend(remaining_args);\n \n             // Correct the indexes that refer to the arguments after the newly inserted arguments.\n-            for piece in &mut fmt.template {\n-                if let FormatArgsPiece::Placeholder(placeholder) = piece\n-                    && let Ok(index) = &mut placeholder.argument.index\n-                    && *index >= old_arg_offset\n-                {\n+            for_all_argument_indexes(&mut fmt.template, |index| {\n+                if *index >= old_arg_offset {\n                     *index -= old_arg_offset;\n                     *index += new_arg_offset;\n                 }\n-            }\n+            });\n \n             // Now merge the placeholders:\n \n             let rest = fmt.template.split_off(i + 1);\n             fmt.template.pop(); // remove the placeholder for the nested fmt args.\n-\n-            for piece in fmt2.template.drain(..) {\n-                match piece {\n-                    FormatArgsPiece::Literal(s) => fmt.template.push(FormatArgsPiece::Literal(s)),\n-                    FormatArgsPiece::Placeholder(mut p) => {\n-                        // Correct the index to refer to the right place into the outer argument list.\n-                        if let Ok(n) = &mut p.argument.index {\n-                            *n += arg_index;\n-                        }\n-                        fmt.template.push(FormatArgsPiece::Placeholder(p));\n-                    }\n-                }\n-            }\n+            // Insert the pieces from the nested format args, but correct any\n+            // placeholders to point to the correct argument index.\n+            for_all_argument_indexes(&mut fmt2.template, |index| *index += arg_index);\n+            fmt.template.append(&mut fmt2.template);\n             fmt.template.extend(rest);\n \n             // Don't increment `i` here, so we recurse into the newly added pieces.\n@@ -150,16 +138,17 @@ fn inline_literals(mut fmt: Cow<'_, FormatArgs>) -> Cow<'_, FormatArgs> {\n         // Drop all the arguments that are marked for removal.\n         let mut remove_it = remove.iter();\n         fmt.arguments.all_args_mut().retain(|_| remove_it.next() != Some(&Some(true)));\n+        // Calculate the mapping of old to new indexes for the remaining arguments.\n+        let index_map: Vec<usize> = remove\n+            .into_iter()\n+            .scan(0, |i, remove| {\n+                let mapped = *i;\n+                *i += (remove != Some(true)) as usize;\n+                Some(mapped)\n+            })\n+            .collect();\n         // Correct the indexes that refer to arguments that have shifted position.\n-        for piece in &mut fmt.template {\n-            let FormatArgsPiece::Placeholder(placeholder) = piece else { continue };\n-            let Ok(arg_index) = &mut placeholder.argument.index else { continue };\n-            for i in 0..*arg_index {\n-                if remove[i] == Some(true) {\n-                    *arg_index -= 1;\n-                }\n-            }\n-        }\n+        for_all_argument_indexes(&mut fmt.template, |index| *index = index_map[*index]);\n     }\n \n     fmt\n@@ -572,3 +561,22 @@ fn may_contain_yield_point(e: &ast::Expr) -> bool {\n     visitor.visit_expr(e);\n     visitor.0\n }\n+\n+fn for_all_argument_indexes(template: &mut [FormatArgsPiece], mut f: impl FnMut(&mut usize)) {\n+    for piece in template {\n+        let FormatArgsPiece::Placeholder(placeholder) = piece else { continue };\n+        if let Ok(index) = &mut placeholder.argument.index {\n+            f(index);\n+        }\n+        if let Some(FormatCount::Argument(FormatArgPosition { index: Ok(index), .. })) =\n+            &mut placeholder.format_options.width\n+        {\n+            f(index);\n+        }\n+        if let Some(FormatCount::Argument(FormatArgPosition { index: Ok(index), .. })) =\n+            &mut placeholder.format_options.precision\n+        {\n+            f(index);\n+        }\n+    }\n+}"}]}