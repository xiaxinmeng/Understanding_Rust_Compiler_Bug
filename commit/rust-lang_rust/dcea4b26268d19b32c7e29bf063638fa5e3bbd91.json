{"sha": "dcea4b26268d19b32c7e29bf063638fa5e3bbd91", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZWE0YjI2MjY4ZDE5YjMyYzdlMjliZjA2MzYzOGZhNWUzYmJkOTE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-03-06T12:54:44Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-05-25T19:17:58Z"}, "message": "Fix rebase", "tree": {"sha": "e7c7ea6d66b707e8a99b78c92abcb012613282c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7c7ea6d66b707e8a99b78c92abcb012613282c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcea4b26268d19b32c7e29bf063638fa5e3bbd91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcea4b26268d19b32c7e29bf063638fa5e3bbd91", "html_url": "https://github.com/rust-lang/rust/commit/dcea4b26268d19b32c7e29bf063638fa5e3bbd91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcea4b26268d19b32c7e29bf063638fa5e3bbd91/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a1de5bf899a15cd97f2a113add070bec46cf209", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a1de5bf899a15cd97f2a113add070bec46cf209", "html_url": "https://github.com/rust-lang/rust/commit/1a1de5bf899a15cd97f2a113add070bec46cf209"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "215109f282d926a9daf1ee9e22e83316c2abc2c0", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dcea4b26268d19b32c7e29bf063638fa5e3bbd91/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcea4b26268d19b32c7e29bf063638fa5e3bbd91/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=dcea4b26268d19b32c7e29bf063638fa5e3bbd91", "patch": "@@ -67,7 +67,7 @@ use syntax::ast::{Arm, BindingMode, Block, Crate, Expr, ExprKind};\n use syntax::ast::{FnDecl, ForeignItem, ForeignItemKind, Generics};\n use syntax::ast::{Item, ItemKind, ImplItem, ImplItemKind};\n use syntax::ast::{Local, Pat, PatKind, Path};\n-use syntax::ast::{PathSegment, PathParameters, SelfKind, TraitItemKind, TraitRef, Ty, TyKind};\n+use syntax::ast::{PathSegment, PathParameters, TraitItemKind, TraitRef, Ty, TyKind};\n \n use std::collections::{HashMap, HashSet};\n use std::cell::{Cell, RefCell};\n@@ -607,7 +607,7 @@ impl<'a, 'v> Visitor<'v> for Resolver<'a> {\n             }\n             FnKind::Method(_, sig, _) => {\n                 self.visit_generics(&sig.generics);\n-                MethodRibKind(sig.explicit_self.node == SelfKind::Static)\n+                MethodRibKind(!sig.decl.has_self())\n             }\n             FnKind::Closure => ClosureRibKind(node_id),\n         };\n@@ -1676,9 +1676,7 @@ impl<'a> Resolver<'a> {\n                                     let type_parameters =\n                                         HasTypeParameters(&sig.generics,\n                                                           FnSpace,\n-                                                          MethodRibKind(\n-                                                             sig.explicit_self.node ==\n-                                                             SelfKind::Static));\n+                                                          MethodRibKind(!sig.decl.has_self()));\n                                     this.with_type_parameter_rib(type_parameters, |this| {\n                                         visit::walk_trait_item(this, trait_item)\n                                     });\n@@ -2007,9 +2005,7 @@ impl<'a> Resolver<'a> {\n                                     let type_parameters =\n                                         HasTypeParameters(&sig.generics,\n                                                           FnSpace,\n-                                                          MethodRibKind(\n-                                                            sig.explicit_self.node ==\n-                                                            SelfKind::Static));\n+                                                          MethodRibKind(!sig.decl.has_self()));\n                                     this.with_type_parameter_rib(type_parameters, |this| {\n                                         visit::walk_impl_item(this, impl_item);\n                                     });"}]}