{"sha": "3ffc84fd156d9474d7b2bd491da9eec431bc7ff2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZmM4NGZkMTU2ZDk0NzRkN2IyYmQ0OTFkYTllZWM0MzFiYzdmZjI=", "commit": {"author": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-10T02:59:12Z"}, "committer": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-10T02:59:12Z"}, "message": "Added associated const magic completion.", "tree": {"sha": "7c87215f438a17caa08ddbb4f11690a7bf98f437", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c87215f438a17caa08ddbb4f11690a7bf98f437"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ffc84fd156d9474d7b2bd491da9eec431bc7ff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ffc84fd156d9474d7b2bd491da9eec431bc7ff2", "html_url": "https://github.com/rust-lang/rust/commit/3ffc84fd156d9474d7b2bd491da9eec431bc7ff2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ffc84fd156d9474d7b2bd491da9eec431bc7ff2/comments", "author": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d85abd77b98ff5925621c18f2ffe121640d17c80", "url": "https://api.github.com/repos/rust-lang/rust/commits/d85abd77b98ff5925621c18f2ffe121640d17c80", "html_url": "https://github.com/rust-lang/rust/commit/d85abd77b98ff5925621c18f2ffe121640d17c80"}], "stats": {"total": 64, "additions": 53, "deletions": 11}, "files": [{"sha": "cb15da647b38c0361fcd9d44382e1448109b70b8", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 53, "deletions": 11, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/3ffc84fd156d9474d7b2bd491da9eec431bc7ff2/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffc84fd156d9474d7b2bd491da9eec431bc7ff2/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=3ffc84fd156d9474d7b2bd491da9eec431bc7ff2", "patch": "@@ -2,25 +2,26 @@ use crate::completion::{\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions,\n };\n \n-use hir::{self, Docs};\n+use ra_syntax::{ast::{self, edit}, AstNode, SyntaxKind, TextRange};\n+use hir::{self, Docs, HasSource};\n \n use ra_assists::utils::get_missing_impl_items;\n \n pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext) {\n-    let impl_block = ctx.impl_block.as_ref();\n-    let item_list = impl_block.and_then(|i| i.item_list());\n \n-    if item_list.is_none() || impl_block.is_none() || ctx.function_syntax.is_some() {\n+    // it is possible to have a parent `fn` and `impl` block. Ignore completion \n+    // attempts from within a `fn` block.\n+    if ctx.function_syntax.is_some() {\n         return;\n     }\n \n-    let impl_block = impl_block.unwrap();\n-\n-    for item in get_missing_impl_items(ctx.db, &ctx.analyzer, impl_block) {\n-        match item {\n-            hir::AssocItem::Function(f) => add_function_impl(acc, ctx, &f),\n-            hir::AssocItem::TypeAlias(t) => add_type_alias_impl(acc, ctx, &t),\n-            _ => {}\n+    if let Some(ref impl_block) = ctx.impl_block {\n+        for item in get_missing_impl_items(ctx.db, &ctx.analyzer, impl_block) {\n+            match item {\n+                hir::AssocItem::Function(f) => add_function_impl(acc, ctx, &f),\n+                hir::AssocItem::TypeAlias(t) => add_type_alias_impl(acc, ctx, &t),\n+                hir::AssocItem::Const(c) => add_const_impl(acc, ctx, &c),\n+            }\n         }\n     }\n }\n@@ -71,6 +72,47 @@ fn add_type_alias_impl(\n         .add_to(acc);\n }\n \n+fn add_const_impl(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    const_: &hir::Const,\n+) {\n+    let snippet = make_const_compl_syntax(&const_.source(ctx.db).value);\n+\n+    CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone())\n+        .insert_text(snippet)\n+        .kind(CompletionItemKind::Const)\n+        .set_documentation(const_.docs(ctx.db))\n+        .add_to(acc);\n+}\n+\n+fn make_const_compl_syntax(const_: &ast::ConstDef) -> String {\n+    let const_ = edit::strip_attrs_and_docs(const_);\n+    \n+    let const_start = const_.syntax().text_range().start();\n+    let const_end = const_.syntax().text_range().end();\n+\n+    let start = const_\n+        .syntax()\n+        .first_child_or_token()\n+        .map_or(\n+            const_start,\n+            |f| f.text_range().start());\n+\n+    let end = const_\n+        .syntax()\n+        .children_with_tokens()\n+        .find(|s| s.kind() == SyntaxKind::SEMI || s.kind() == SyntaxKind::EQ)\n+        .map_or(const_end, |f| f.text_range().start());\n+\n+    let len = end - start;\n+    let range = TextRange::from_to(0.into(), len);\n+\n+    let syntax = const_.syntax().text().slice(range).to_string();\n+\n+    format!(\"{} = \", syntax.trim_end())\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::completion::{do_completion, CompletionItem, CompletionKind};"}]}