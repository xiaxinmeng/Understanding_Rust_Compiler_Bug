{"sha": "a28e8628255198aa36bcde1f380763ef257beabd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyOGU4NjI4MjU1MTk4YWEzNmJjZGUxZjM4MDc2M2VmMjU3YmVhYmQ=", "commit": {"author": {"name": "Matt Hall", "email": "matthew@quickbeam.me.uk", "date": "2021-02-24T19:23:12Z"}, "committer": {"name": "Matt Hall", "email": "matthew@quickbeam.me.uk", "date": "2021-02-24T19:23:12Z"}, "message": "Address further review comments\n\n* Use known names for iter/iter_mut method (simplifies checking if the\n  method exists\n* Extract code to check assist with fixtures to function", "tree": {"sha": "45a066ee345fb262495fe82f9c8fd0dd9e357583", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45a066ee345fb262495fe82f9c8fd0dd9e357583"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a28e8628255198aa36bcde1f380763ef257beabd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a28e8628255198aa36bcde1f380763ef257beabd", "html_url": "https://github.com/rust-lang/rust/commit/a28e8628255198aa36bcde1f380763ef257beabd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a28e8628255198aa36bcde1f380763ef257beabd/comments", "author": {"login": "mattyhall", "id": 5175499, "node_id": "MDQ6VXNlcjUxNzU0OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/5175499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattyhall", "html_url": "https://github.com/mattyhall", "followers_url": "https://api.github.com/users/mattyhall/followers", "following_url": "https://api.github.com/users/mattyhall/following{/other_user}", "gists_url": "https://api.github.com/users/mattyhall/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattyhall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattyhall/subscriptions", "organizations_url": "https://api.github.com/users/mattyhall/orgs", "repos_url": "https://api.github.com/users/mattyhall/repos", "events_url": "https://api.github.com/users/mattyhall/events{/privacy}", "received_events_url": "https://api.github.com/users/mattyhall/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mattyhall", "id": 5175499, "node_id": "MDQ6VXNlcjUxNzU0OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/5175499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattyhall", "html_url": "https://github.com/mattyhall", "followers_url": "https://api.github.com/users/mattyhall/followers", "following_url": "https://api.github.com/users/mattyhall/following{/other_user}", "gists_url": "https://api.github.com/users/mattyhall/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattyhall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattyhall/subscriptions", "organizations_url": "https://api.github.com/users/mattyhall/orgs", "repos_url": "https://api.github.com/users/mattyhall/repos", "events_url": "https://api.github.com/users/mattyhall/events{/privacy}", "received_events_url": "https://api.github.com/users/mattyhall/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98a626450d43515f8fe91db9f7918c6e69804693", "url": "https://api.github.com/repos/rust-lang/rust/commits/98a626450d43515f8fe91db9f7918c6e69804693", "html_url": "https://github.com/rust-lang/rust/commit/98a626450d43515f8fe91db9f7918c6e69804693"}], "stats": {"total": 87, "additions": 36, "deletions": 51}, "files": [{"sha": "c94fb580a239645ab9a0b24ecf69bd212f21e495", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a28e8628255198aa36bcde1f380763ef257beabd/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28e8628255198aa36bcde1f380763ef257beabd/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=a28e8628255198aa36bcde1f380763ef257beabd", "patch": "@@ -189,6 +189,7 @@ pub mod known {\n         // Components of known path (function name)\n         filter_map,\n         next,\n+        iter_mut,\n         // Builtin macros\n         file,\n         column,"}, {"sha": "9fddf889cf624fb84724c6d48b11a170fe834e5b", "filename": "crates/ide_assists/src/handlers/convert_for_to_iter_for_each.rs", "status": "modified", "additions": 35, "deletions": 51, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/a28e8628255198aa36bcde1f380763ef257beabd/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_for_to_iter_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28e8628255198aa36bcde1f380763ef257beabd/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_for_to_iter_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_for_to_iter_for_each.rs?ref=a28e8628255198aa36bcde1f380763ef257beabd", "patch": "@@ -1,4 +1,5 @@\n use ast::LoopBodyOwner;\n+use hir::known;\n use ide_db::helpers::FamousDefs;\n use stdx::format_to;\n use syntax::{ast, AstNode};\n@@ -68,28 +69,30 @@ pub(crate) fn convert_for_to_iter_for_each(acc: &mut Assists, ctx: &AssistContex\n fn is_ref_and_impls_iter_method(\n     sema: &hir::Semantics<ide_db::RootDatabase>,\n     iterable: &ast::Expr,\n-) -> Option<(ast::Expr, &'static str)> {\n+) -> Option<(ast::Expr, hir::Name)> {\n     let ref_expr = match iterable {\n         ast::Expr::RefExpr(r) => r,\n         _ => return None,\n     };\n-    let wanted_method = if ref_expr.mut_token().is_some() { \"iter_mut\" } else { \"iter\" };\n+    let wanted_method = if ref_expr.mut_token().is_some() { known::iter_mut } else { known::iter };\n     let expr_behind_ref = ref_expr.expr()?;\n     let typ = sema.type_of_expr(&expr_behind_ref)?;\n     let scope = sema.scope(iterable.syntax());\n     let krate = scope.module()?.krate();\n     let traits_in_scope = scope.traits_in_scope();\n     let iter_trait = FamousDefs(sema, Some(krate)).core_iter_Iterator()?;\n-    let has_wanted_method =\n-        typ.iterate_method_candidates(sema.db, krate, &traits_in_scope, None, |_, func| {\n-            if func.name(sema.db).to_string() != wanted_method {\n-                return None;\n-            }\n+    let has_wanted_method = typ.iterate_method_candidates(\n+        sema.db,\n+        krate,\n+        &traits_in_scope,\n+        Some(&wanted_method),\n+        |_, func| {\n             if func.ret_type(sema.db).impls_trait(sema.db, iter_trait, &[]) {\n                 return Some(());\n             }\n             None\n-        });\n+        },\n+    );\n     has_wanted_method.and(Some((expr_behind_ref, wanted_method)))\n }\n \n@@ -135,6 +138,16 @@ impl Empty {\n pub struct NoIterMethod;\n \";\n \n+    fn check_assist_with_fixtures(before: &str, after: &str) {\n+        let before = &format!(\n+            \"//- /main.rs crate:main deps:core,empty_iter{}{}{}\",\n+            before,\n+            FamousDefs::FIXTURE,\n+            EMPTY_ITER_FIXTURE\n+        );\n+        check_assist(convert_for_to_iter_for_each, before, after);\n+    }\n+\n     #[test]\n     fn test_not_for() {\n         check_assist_not_applicable(\n@@ -169,24 +182,16 @@ fn main() {\n \n     #[test]\n     fn test_for_borrowed() {\n-        let before = r\"\n+        check_assist_with_fixtures(\n+            r\"\n use empty_iter::*;\n fn main() {\n     let x = Empty;\n     for $0v in &x {\n         let a = v * 2;\n     }\n }\n-\";\n-        let before = &format!(\n-            \"//- /main.rs crate:main deps:core,empty_iter{}{}{}\",\n-            before,\n-            FamousDefs::FIXTURE,\n-            EMPTY_ITER_FIXTURE\n-        );\n-        check_assist(\n-            convert_for_to_iter_for_each,\n-            before,\n+\",\n             r\"\n use empty_iter::*;\n fn main() {\n@@ -201,24 +206,16 @@ fn main() {\n \n     #[test]\n     fn test_for_borrowed_no_iter_method() {\n-        let before = r\"\n+        check_assist_with_fixtures(\n+            r\"\n use empty_iter::*;\n fn main() {\n     let x = NoIterMethod;\n     for $0v in &x {\n         let a = v * 2;\n     }\n }\n-\";\n-        let before = &format!(\n-            \"//- /main.rs crate:main deps:core,empty_iter{}{}{}\",\n-            before,\n-            FamousDefs::FIXTURE,\n-            EMPTY_ITER_FIXTURE\n-        );\n-        check_assist(\n-            convert_for_to_iter_for_each,\n-            before,\n+\",\n             r\"\n use empty_iter::*;\n fn main() {\n@@ -233,24 +230,16 @@ fn main() {\n \n     #[test]\n     fn test_for_borrowed_mut() {\n-        let before = r\"\n+        check_assist_with_fixtures(\n+            r\"\n use empty_iter::*;\n fn main() {\n     let x = Empty;\n     for $0v in &mut x {\n         let a = v * 2;\n     }\n }\n-\";\n-        let before = &format!(\n-            \"//- /main.rs crate:main deps:core,empty_iter{}{}{}\",\n-            before,\n-            FamousDefs::FIXTURE,\n-            EMPTY_ITER_FIXTURE\n-        );\n-        check_assist(\n-            convert_for_to_iter_for_each,\n-            before,\n+\",\n             r\"\n use empty_iter::*;\n fn main() {\n@@ -288,30 +277,25 @@ fn main() {\n \n     #[test]\n     fn test_already_impls_iterator() {\n-        let before = r#\"\n+        check_assist_with_fixtures(\n+            r#\"\n use empty_iter::*;\n fn main() {\n     let x = Empty;\n     for$0 a in x.iter().take(1) {\n         println!(\"{}\", a);\n     }\n }\n-\"#;\n-        let after = r#\"\n+\"#,\n+            r#\"\n use empty_iter::*;\n fn main() {\n     let x = Empty;\n     x.iter().take(1).for_each(|a| {\n         println!(\"{}\", a);\n     });\n }\n-\"#;\n-        let before = &format!(\n-            \"//- /main.rs crate:main deps:core,empty_iter{}{}{}\",\n-            before,\n-            FamousDefs::FIXTURE,\n-            EMPTY_ITER_FIXTURE\n+\"#,\n         );\n-        check_assist(convert_for_to_iter_for_each, before, after);\n     }\n }"}]}