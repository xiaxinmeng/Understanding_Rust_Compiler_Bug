{"sha": "6be2bc817bbb70ac13a1c2bb9647e01e2a156127", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZTJiYzgxN2JiYjcwYWMxM2ExYzJiYjk2NDdlMDFlMmExNTYxMjc=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2013-12-21T23:07:21Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2014-01-06T20:28:49Z"}, "message": "Add lint for unnecessary casts", "tree": {"sha": "5374b72989d88627c111eec0b68f0b487172b538", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5374b72989d88627c111eec0b68f0b487172b538"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6be2bc817bbb70ac13a1c2bb9647e01e2a156127", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6be2bc817bbb70ac13a1c2bb9647e01e2a156127", "html_url": "https://github.com/rust-lang/rust/commit/6be2bc817bbb70ac13a1c2bb9647e01e2a156127", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6be2bc817bbb70ac13a1c2bb9647e01e2a156127/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d9e66c0ebfb16686ca4f57cbc7af1343ad08251", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d9e66c0ebfb16686ca4f57cbc7af1343ad08251", "html_url": "https://github.com/rust-lang/rust/commit/1d9e66c0ebfb16686ca4f57cbc7af1343ad08251"}], "stats": {"total": 69, "additions": 68, "deletions": 1}, "files": [{"sha": "9f4d9a5c7f56f3342b727ad3dff2125134bc0e0e", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/6be2bc817bbb70ac13a1c2bb9647e01e2a156127/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be2bc817bbb70ac13a1c2bb9647e01e2a156127/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=6be2bc817bbb70ac13a1c2bb9647e01e2a156127", "patch": "@@ -41,6 +41,10 @@ use middle::typeck;\n use middle::pat_util;\n use metadata::csearch;\n use util::ppaux::{ty_to_str};\n+use std::to_str::ToStr;\n+\n+use middle::typeck::infer;\n+use middle::typeck::astconv::{ast_ty_to_ty, AstConv};\n \n use std::cmp;\n use std::hashmap::HashMap;\n@@ -91,6 +95,7 @@ pub enum lint {\n     unused_mut,\n     unnecessary_allocation,\n     dead_code,\n+    unnecessary_typecast,\n \n     missing_doc,\n     unreachable_code,\n@@ -267,6 +272,13 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         default: warn\n     }),\n \n+    (\"unnecessary_typecast\",\n+     LintSpec {\n+        lint: unnecessary_typecast,\n+        desc: \"detects unnecessary type casts, that can be removed\",\n+        default: allow,\n+    }),\n+\n     (\"unused_mut\",\n      LintSpec {\n         lint: unused_mut,\n@@ -336,7 +348,6 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         desc: \"unknown features found in crate-level #[feature] directives\",\n         default: deny,\n     }),\n-\n      (\"unknown_crate_type\",\n      LintSpec {\n          lint: unknown_crate_type,\n@@ -569,6 +580,37 @@ fn check_while_true_expr(cx: &Context, e: &ast::Expr) {\n         _ => ()\n     }\n }\n+impl<'a> AstConv for Context<'a>{\n+    fn tcx(&self) -> ty::ctxt { self.tcx }\n+\n+    fn get_item_ty(&self, id: ast::DefId) -> ty::ty_param_bounds_and_ty {\n+        ty::lookup_item_type(self.tcx, id)\n+    }\n+\n+    fn get_trait_def(&self, id: ast::DefId) -> @ty::TraitDef {\n+        ty::lookup_trait_def(self.tcx, id)\n+    }\n+\n+    fn ty_infer(&self, _span: Span) -> ty::t {\n+        let infcx: @infer::InferCtxt = infer::new_infer_ctxt(self.tcx);\n+        infcx.next_ty_var()\n+    }\n+}\n+\n+\n+fn check_unused_casts(cx: &Context, e: &ast::Expr) {\n+    return match e.node {\n+        ast::ExprCast(expr, ty) => {\n+            let infcx: @infer::InferCtxt = infer::new_infer_ctxt(cx.tcx);\n+            let t_t = ast_ty_to_ty(cx, &infcx, ty);\n+            if  ty::get(ty::expr_ty(cx.tcx, expr)).sty == ty::get(t_t).sty {\n+                cx.span_lint(unnecessary_typecast, ty.span,\n+                             \"unnecessary type cast\");\n+            }\n+        }\n+        _ => ()\n+    };\n+}\n \n fn check_type_limits(cx: &Context, e: &ast::Expr) {\n     return match e.node {\n@@ -1361,6 +1403,7 @@ impl<'a> Visitor<()> for Context<'a> {\n         check_heap_expr(self, e);\n \n         check_type_limits(self, e);\n+        check_unused_casts(self, e);\n \n         visit::walk_expr(self, e, ());\n     }"}, {"sha": "9324bf110056ab15af9856e54419cb7470905af8", "filename": "src/test/compile-fail/lint-unnecessary-casts.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6be2bc817bbb70ac13a1c2bb9647e01e2a156127/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be2bc817bbb70ac13a1c2bb9647e01e2a156127/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-casts.rs?ref=6be2bc817bbb70ac13a1c2bb9647e01e2a156127", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[forbid(unnecessary_typecast)];\n+\n+fn foo_i32(_: i32) {}\n+\n+fn foo_u64(a: u64) {\n+    let b: i32 = a as i32;\n+    foo_i32(b as i32); //~ ERROR: unnecessary type cast\n+}\n+\n+fn main() {\n+    let x: u64 = 1;\n+    let y: u64 = x as u64; //~ ERROR: unnecessary type cast\n+    foo_u64(y as u64); //~ ERROR: unnecessary type cast\n+}"}]}