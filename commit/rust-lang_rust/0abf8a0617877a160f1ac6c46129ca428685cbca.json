{"sha": "0abf8a0617877a160f1ac6c46129ca428685cbca", "node_id": "C_kwDOAAsO6NoAKDBhYmY4YTA2MTc4NzdhMTYwZjFhYzZjNDYxMjljYTQyODY4NWNiY2E", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-01-13T12:32:49Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-01-27T07:53:39Z"}, "message": "Replace format flags u32 by enums and bools.", "tree": {"sha": "ef510d5b81522146a9e2443867c26ed280cfa1a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef510d5b81522146a9e2443867c26ed280cfa1a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0abf8a0617877a160f1ac6c46129ca428685cbca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0abf8a0617877a160f1ac6c46129ca428685cbca", "html_url": "https://github.com/rust-lang/rust/commit/0abf8a0617877a160f1ac6c46129ca428685cbca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0abf8a0617877a160f1ac6c46129ca428685cbca/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db137ba7d4415ac77e2b7601ef017ff2ca41b335", "url": "https://api.github.com/repos/rust-lang/rust/commits/db137ba7d4415ac77e2b7601ef017ff2ca41b335", "html_url": "https://github.com/rust-lang/rust/commit/db137ba7d4415ac77e2b7601ef017ff2ca41b335"}], "stats": {"total": 216, "additions": 154, "deletions": 62}, "files": [{"sha": "d021bea5ecacb94c7b616a8ffeca10a0c1369c87", "filename": "compiler/rustc_ast/src/format.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0abf8a0617877a160f1ac6c46129ca428685cbca/compiler%2Frustc_ast%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0abf8a0617877a160f1ac6c46129ca428685cbca/compiler%2Frustc_ast%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fformat.rs?ref=0abf8a0617877a160f1ac6c46129ca428685cbca", "patch": "@@ -227,8 +227,30 @@ pub struct FormatOptions {\n     pub alignment: Option<FormatAlignment>,\n     /// The fill character. E.g. the `.` in `{:.>10}`.\n     pub fill: Option<char>,\n-    /// The `+`, `-`, `0`, `#`, `x?` and `X?` flags.\n-    pub flags: u32,\n+    /// The `+` or `-` flag.\n+    pub sign: Option<FormatSign>,\n+    /// The `#` flag.\n+    pub alternate: bool,\n+    /// The `0` flag. E.g. the `0` in `{:02x}`.\n+    pub zero_pad: bool,\n+    /// The `x` or `X` flag (for `Debug` only). E.g. the `x` in `{:x?}`.\n+    pub debug_hex: Option<FormatDebugHex>,\n+}\n+\n+#[derive(Copy, Clone, Encodable, Decodable, Debug, PartialEq, Eq)]\n+pub enum FormatSign {\n+    /// The `+` flag.\n+    Plus,\n+    /// The `-` flag.\n+    Minus,\n+}\n+\n+#[derive(Copy, Clone, Encodable, Decodable, Debug, PartialEq, Eq)]\n+pub enum FormatDebugHex {\n+    /// The `x` flag in `{:x?}`.\n+    Lower,\n+    /// The `X` flag in `{:X?}`.\n+    Upper,\n }\n \n #[derive(Copy, Clone, Encodable, Decodable, Debug, PartialEq, Eq)]"}, {"sha": "5d1770c734d5d30bcdf2ff58f7af213f7b59939e", "filename": "compiler/rustc_ast_lowering/src/format.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0abf8a0617877a160f1ac6c46129ca428685cbca/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0abf8a0617877a160f1ac6c46129ca428685cbca/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs?ref=0abf8a0617877a160f1ac6c46129ca428685cbca", "patch": "@@ -148,7 +148,14 @@ fn make_format_spec<'hir>(\n             None => sym::Unknown,\n         },\n     );\n-    let flags = ctx.expr_u32(sp, placeholder.format_options.flags);\n+    // This needs to match `FlagV1` in library/core/src/fmt/mod.rs.\n+    let flags: u32 = ((placeholder.format_options.sign == Some(FormatSign::Plus)) as u32)\n+        | ((placeholder.format_options.sign == Some(FormatSign::Minus)) as u32) << 1\n+        | (placeholder.format_options.alternate as u32) << 2\n+        | (placeholder.format_options.zero_pad as u32) << 3\n+        | ((placeholder.format_options.debug_hex == Some(FormatDebugHex::Lower)) as u32) << 4\n+        | ((placeholder.format_options.debug_hex == Some(FormatDebugHex::Upper)) as u32) << 5;\n+    let flags = ctx.expr_u32(sp, flags);\n     let prec = make_count(ctx, sp, &placeholder.format_options.precision, argmap);\n     let width = make_count(ctx, sp, &placeholder.format_options.width, argmap);\n     let format_placeholder_new = ctx.arena.alloc(ctx.expr_lang_item_type_relative("}, {"sha": "cacfe9eb2f10745f8add02cecd528b90ab3a5b0c", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0abf8a0617877a160f1ac6c46129ca428685cbca/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0abf8a0617877a160f1ac6c46129ca428685cbca/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=0abf8a0617877a160f1ac6c46129ca428685cbca", "patch": "@@ -6,7 +6,10 @@ use rustc_ast::token;\n use rustc_ast::util::literal::escape_byte_str_symbol;\n use rustc_ast::util::parser::{self, AssocOp, Fixity};\n use rustc_ast::{self as ast, BlockCheckMode};\n-use rustc_ast::{FormatAlignment, FormatArgPosition, FormatArgsPiece, FormatCount, FormatTrait};\n+use rustc_ast::{\n+    FormatAlignment, FormatArgPosition, FormatArgsPiece, FormatCount, FormatDebugHex, FormatSign,\n+    FormatTrait,\n+};\n use std::fmt::Write;\n \n impl<'a> State<'a> {\n@@ -675,17 +678,15 @@ pub fn reconstruct_format_args_template_string(pieces: &[FormatArgsPiece]) -> St\n                     Some(FormatAlignment::Center) => template.push_str(\"^\"),\n                     None => {}\n                 }\n-                let flags = p.format_options.flags;\n-                if flags >> (rustc_parse_format::FlagSignPlus as usize) & 1 != 0 {\n-                    template.push('+');\n-                }\n-                if flags >> (rustc_parse_format::FlagSignMinus as usize) & 1 != 0 {\n-                    template.push('-');\n+                match p.format_options.sign {\n+                    Some(FormatSign::Plus) => template.push('+'),\n+                    Some(FormatSign::Minus) => template.push('-'),\n+                    None => {}\n                 }\n-                if flags >> (rustc_parse_format::FlagAlternate as usize) & 1 != 0 {\n+                if p.format_options.alternate {\n                     template.push('#');\n                 }\n-                if flags >> (rustc_parse_format::FlagSignAwareZeroPad as usize) & 1 != 0 {\n+                if p.format_options.zero_pad {\n                     template.push('0');\n                 }\n                 if let Some(width) = &p.format_options.width {\n@@ -709,11 +710,10 @@ pub fn reconstruct_format_args_template_string(pieces: &[FormatArgsPiece]) -> St\n                         }\n                     }\n                 }\n-                if flags >> (rustc_parse_format::FlagDebugLowerHex as usize) & 1 != 0 {\n-                    template.push('x');\n-                }\n-                if flags >> (rustc_parse_format::FlagDebugUpperHex as usize) & 1 != 0 {\n-                    template.push('X');\n+                match p.format_options.debug_hex {\n+                    Some(FormatDebugHex::Lower) => template.push('x'),\n+                    Some(FormatDebugHex::Upper) => template.push('X'),\n+                    None => {}\n                 }\n                 template.push_str(match p.format_trait {\n                     FormatTrait::Display => \"\","}, {"sha": "e93a23394c03ff9b9f74ea87e72c6d1ef27ee539", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0abf8a0617877a160f1ac6c46129ca428685cbca/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0abf8a0617877a160f1ac6c46129ca428685cbca/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=0abf8a0617877a160f1ac6c46129ca428685cbca", "patch": "@@ -4,7 +4,7 @@ use rustc_ast::tokenstream::TokenStream;\n use rustc_ast::{\n     Expr, ExprKind, FormatAlignment, FormatArgPosition, FormatArgPositionKind, FormatArgs,\n     FormatArgsPiece, FormatArgument, FormatArgumentKind, FormatArguments, FormatCount,\n-    FormatOptions, FormatPlaceholder, FormatTrait,\n+    FormatDebugHex, FormatOptions, FormatPlaceholder, FormatSign, FormatTrait,\n };\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{pluralize, Applicability, MultiSpan, PResult};\n@@ -435,7 +435,16 @@ pub fn make_format_args(\n                     format_options: FormatOptions {\n                         fill: format.fill,\n                         alignment,\n-                        flags: format.flags,\n+                        sign: format.sign.map(|s| match s {\n+                            parse::Sign::Plus => FormatSign::Plus,\n+                            parse::Sign::Minus => FormatSign::Minus,\n+                        }),\n+                        alternate: format.alternate,\n+                        zero_pad: format.zero_pad,\n+                        debug_hex: format.debug_hex.map(|s| match s {\n+                            parse::DebugHex::Lower => FormatDebugHex::Lower,\n+                            parse::DebugHex::Upper => FormatDebugHex::Upper,\n+                        }),\n                         precision,\n                         width,\n                     },"}, {"sha": "a6dfcd29762474933a31022e2f09f409d3e35865", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 37, "deletions": 28, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/0abf8a0617877a160f1ac6c46129ca428685cbca/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0abf8a0617877a160f1ac6c46129ca428685cbca/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=0abf8a0617877a160f1ac6c46129ca428685cbca", "patch": "@@ -16,7 +16,6 @@\n \n pub use Alignment::*;\n pub use Count::*;\n-pub use Flag::*;\n pub use Piece::*;\n pub use Position::*;\n \n@@ -111,8 +110,14 @@ pub struct FormatSpec<'a> {\n     pub fill: Option<char>,\n     /// Optionally specified alignment.\n     pub align: Alignment,\n-    /// Packed version of various flags provided.\n-    pub flags: u32,\n+    /// The `+` or `-` flag.\n+    pub sign: Option<Sign>,\n+    /// The `#` flag.\n+    pub alternate: bool,\n+    /// The `0` flag.\n+    pub zero_pad: bool,\n+    /// The `x` or `X` flag. (Only for `Debug`.)\n+    pub debug_hex: Option<DebugHex>,\n     /// The integer precision to use.\n     pub precision: Count<'a>,\n     /// The span of the precision formatting flag (for diagnostics).\n@@ -162,24 +167,22 @@ pub enum Alignment {\n     AlignUnknown,\n }\n \n-/// Various flags which can be applied to format strings. The meaning of these\n-/// flags is defined by the formatters themselves.\n+/// Enum for the sign flags.\n #[derive(Copy, Clone, Debug, PartialEq)]\n-pub enum Flag {\n-    /// A `+` will be used to denote positive numbers.\n-    FlagSignPlus,\n-    /// A `-` will be used to denote negative numbers. This is the default.\n-    FlagSignMinus,\n-    /// An alternate form will be used for the value. In the case of numbers,\n-    /// this means that the number will be prefixed with the supplied string.\n-    FlagAlternate,\n-    /// For numbers, this means that the number will be padded with zeroes,\n-    /// and the sign (`+` or `-`) will precede them.\n-    FlagSignAwareZeroPad,\n-    /// For Debug / `?`, format integers in lower-case hexadecimal.\n-    FlagDebugLowerHex,\n-    /// For Debug / `?`, format integers in upper-case hexadecimal.\n-    FlagDebugUpperHex,\n+pub enum Sign {\n+    /// The `+` flag.\n+    Plus,\n+    /// The `-` flag.\n+    Minus,\n+}\n+\n+/// Enum for the debug hex flags.\n+#[derive(Copy, Clone, Debug, PartialEq)]\n+pub enum DebugHex {\n+    /// The `x` flag in `{:x?}`.\n+    Lower,\n+    /// The `X` flag in `{:X?}`.\n+    Upper,\n }\n \n /// A count is used for the precision and width parameters of an integer, and\n@@ -597,7 +600,10 @@ impl<'a> Parser<'a> {\n         let mut spec = FormatSpec {\n             fill: None,\n             align: AlignUnknown,\n-            flags: 0,\n+            sign: None,\n+            alternate: false,\n+            zero_pad: false,\n+            debug_hex: None,\n             precision: CountImplied,\n             precision_span: None,\n             width: CountImplied,\n@@ -626,13 +632,13 @@ impl<'a> Parser<'a> {\n         }\n         // Sign flags\n         if self.consume('+') {\n-            spec.flags |= 1 << (FlagSignPlus as u32);\n+            spec.sign = Some(Sign::Plus);\n         } else if self.consume('-') {\n-            spec.flags |= 1 << (FlagSignMinus as u32);\n+            spec.sign = Some(Sign::Minus);\n         }\n         // Alternate marker\n         if self.consume('#') {\n-            spec.flags |= 1 << (FlagAlternate as u32);\n+            spec.alternate = true;\n         }\n         // Width and precision\n         let mut havewidth = false;\n@@ -647,7 +653,7 @@ impl<'a> Parser<'a> {\n                 spec.width_span = Some(self.span(end - 1, end + 1));\n                 havewidth = true;\n             } else {\n-                spec.flags |= 1 << (FlagSignAwareZeroPad as u32);\n+                spec.zero_pad = true;\n             }\n         }\n \n@@ -678,14 +684,14 @@ impl<'a> Parser<'a> {\n         // Optional radix followed by the actual format specifier\n         if self.consume('x') {\n             if self.consume('?') {\n-                spec.flags |= 1 << (FlagDebugLowerHex as u32);\n+                spec.debug_hex = Some(DebugHex::Lower);\n                 spec.ty = \"?\";\n             } else {\n                 spec.ty = \"x\";\n             }\n         } else if self.consume('X') {\n             if self.consume('?') {\n-                spec.flags |= 1 << (FlagDebugUpperHex as u32);\n+                spec.debug_hex = Some(DebugHex::Upper);\n                 spec.ty = \"?\";\n             } else {\n                 spec.ty = \"X\";\n@@ -708,7 +714,10 @@ impl<'a> Parser<'a> {\n         let mut spec = FormatSpec {\n             fill: None,\n             align: AlignUnknown,\n-            flags: 0,\n+            sign: None,\n+            alternate: false,\n+            zero_pad: false,\n+            debug_hex: None,\n             precision: CountImplied,\n             precision_span: None,\n             width: CountImplied,"}, {"sha": "45314e2fb5500ec4ebd395719e00d7ba68044a98", "filename": "compiler/rustc_parse_format/src/tests.rs", "status": "modified", "additions": 60, "deletions": 15, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/0abf8a0617877a160f1ac6c46129ca428685cbca/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0abf8a0617877a160f1ac6c46129ca428685cbca/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs?ref=0abf8a0617877a160f1ac6c46129ca428685cbca", "patch": "@@ -10,7 +10,10 @@ fn fmtdflt() -> FormatSpec<'static> {\n     return FormatSpec {\n         fill: None,\n         align: AlignUnknown,\n-        flags: 0,\n+        sign: None,\n+        alternate: false,\n+        zero_pad: false,\n+        debug_hex: None,\n         precision: CountImplied,\n         width: CountImplied,\n         precision_span: None,\n@@ -126,7 +129,10 @@ fn format_type() {\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n-                flags: 0,\n+                sign: None,\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountImplied,\n                 width: CountImplied,\n                 precision_span: None,\n@@ -147,7 +153,10 @@ fn format_align_fill() {\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignRight,\n-                flags: 0,\n+                sign: None,\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountImplied,\n                 width: CountImplied,\n                 precision_span: None,\n@@ -165,7 +174,10 @@ fn format_align_fill() {\n             format: FormatSpec {\n                 fill: Some('0'),\n                 align: AlignLeft,\n-                flags: 0,\n+                sign: None,\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountImplied,\n                 width: CountImplied,\n                 precision_span: None,\n@@ -183,7 +195,10 @@ fn format_align_fill() {\n             format: FormatSpec {\n                 fill: Some('*'),\n                 align: AlignLeft,\n-                flags: 0,\n+                sign: None,\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountImplied,\n                 width: CountImplied,\n                 precision_span: None,\n@@ -204,7 +219,10 @@ fn format_counts() {\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n-                flags: 0,\n+                sign: None,\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountImplied,\n                 precision_span: None,\n                 width: CountIs(10),\n@@ -222,7 +240,10 @@ fn format_counts() {\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n-                flags: 0,\n+                sign: None,\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountIs(10),\n                 precision_span: Some(InnerSpan { start: 6, end: 9 }),\n                 width: CountIsParam(10),\n@@ -240,7 +261,10 @@ fn format_counts() {\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n-                flags: 0,\n+                sign: None,\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountIs(10),\n                 precision_span: Some(InnerSpan { start: 6, end: 9 }),\n                 width: CountIsParam(0),\n@@ -258,7 +282,10 @@ fn format_counts() {\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n-                flags: 0,\n+                sign: None,\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountIsStar(0),\n                 precision_span: Some(InnerSpan { start: 3, end: 5 }),\n                 width: CountImplied,\n@@ -276,7 +303,10 @@ fn format_counts() {\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n-                flags: 0,\n+                sign: None,\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountIsParam(10),\n                 width: CountImplied,\n                 precision_span: Some(InnerSpan::new(3, 7)),\n@@ -294,7 +324,10 @@ fn format_counts() {\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n-                flags: 0,\n+                sign: None,\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountIsName(\"b\", InnerSpan { start: 6, end: 7 }),\n                 precision_span: Some(InnerSpan { start: 5, end: 8 }),\n                 width: CountIsName(\"a\", InnerSpan { start: 3, end: 4 }),\n@@ -312,7 +345,10 @@ fn format_counts() {\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n-                flags: 0,\n+                sign: None,\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountIs(4),\n                 precision_span: Some(InnerSpan { start: 3, end: 5 }),\n                 width: CountImplied,\n@@ -333,7 +369,10 @@ fn format_flags() {\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n-                flags: (1 << FlagSignMinus as u32),\n+                sign: Some(Sign::Minus),\n+                alternate: false,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountImplied,\n                 width: CountImplied,\n                 precision_span: None,\n@@ -351,7 +390,10 @@ fn format_flags() {\n             format: FormatSpec {\n                 fill: None,\n                 align: AlignUnknown,\n-                flags: (1 << FlagSignPlus as u32) | (1 << FlagAlternate as u32),\n+                sign: Some(Sign::Plus),\n+                alternate: true,\n+                zero_pad: false,\n+                debug_hex: None,\n                 precision: CountImplied,\n                 width: CountImplied,\n                 precision_span: None,\n@@ -374,7 +416,10 @@ fn format_mixture() {\n                 format: FormatSpec {\n                     fill: None,\n                     align: AlignUnknown,\n-                    flags: 0,\n+                    sign: None,\n+                    alternate: false,\n+                    zero_pad: false,\n+                    debug_hex: None,\n                     precision: CountImplied,\n                     width: CountImplied,\n                     precision_span: None,"}]}