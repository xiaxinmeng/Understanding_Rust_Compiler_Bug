{"sha": "087f1c23a70f889ea157c68b9db36c524e95ba8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4N2YxYzIzYTcwZjg4OWVhMTU3YzY4YjlkYjM2YzUyNGU5NWJhOGY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-12-18T13:06:34Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-12-18T19:31:52Z"}, "message": "rustc: ensure optimized enums have a properly aligned size.", "tree": {"sha": "85b0abaf45fa2914f386f8c6c3a678ea3f9d4d15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85b0abaf45fa2914f386f8c6c3a678ea3f9d4d15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/087f1c23a70f889ea157c68b9db36c524e95ba8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/087f1c23a70f889ea157c68b9db36c524e95ba8f", "html_url": "https://github.com/rust-lang/rust/commit/087f1c23a70f889ea157c68b9db36c524e95ba8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/087f1c23a70f889ea157c68b9db36c524e95ba8f/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3a7203e2c9ed30a501da86f3fa1f9efe707ac94", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3a7203e2c9ed30a501da86f3fa1f9efe707ac94", "html_url": "https://github.com/rust-lang/rust/commit/a3a7203e2c9ed30a501da86f3fa1f9efe707ac94"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "a2692fb8f5a1ed17728866a660964cdd2cc9cc92", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/087f1c23a70f889ea157c68b9db36c524e95ba8f/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087f1c23a70f889ea157c68b9db36c524e95ba8f/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=087f1c23a70f889ea157c68b9db36c524e95ba8f", "patch": "@@ -1492,7 +1492,7 @@ impl<'a, 'tcx> LayoutDetails {\n                             }).collect::<Result<Vec<_>, _>>()?;\n \n                             let offset = st[i].fields.offset(field_index) + offset;\n-                            let LayoutDetails { size, mut align, .. } = st[i];\n+                            let LayoutDetails { mut size, mut align, .. } = st[i];\n \n                             let mut niche_align = niche.value.align(dl);\n                             let abi = if offset.bytes() == 0 && niche.value.size(dl) == size {\n@@ -1504,6 +1504,7 @@ impl<'a, 'tcx> LayoutDetails {\n                                 Abi::Aggregate { sized: true }\n                             };\n                             align = align.max(niche_align);\n+                            size = size.abi_align(align);\n \n                             return Ok(tcx.intern_layout(LayoutDetails {\n                                 variants: Variants::NicheFilling {"}, {"sha": "b8a1e6f2f54007ae2672922c47216e3e96e21fc2", "filename": "src/test/run-pass/packed-struct-optimized-enum.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/087f1c23a70f889ea157c68b9db36c524e95ba8f/src%2Ftest%2Frun-pass%2Fpacked-struct-optimized-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087f1c23a70f889ea157c68b9db36c524e95ba8f/src%2Ftest%2Frun-pass%2Fpacked-struct-optimized-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-optimized-enum.rs?ref=087f1c23a70f889ea157c68b9db36c524e95ba8f", "patch": "@@ -16,14 +16,21 @@ impl<T: Copy> Clone for Packed<T> {\n     fn clone(&self) -> Self { *self }\n }\n \n-fn main() {\n-    let one = (Some(Packed((&(), 0))), true);\n+fn sanity_check_size<T: Copy>(one: T) {\n     let two = [one, one];\n     let stride = (&two[1] as *const _ as usize) - (&two[0] as *const _ as usize);\n+    assert_eq!(stride, std::mem::size_of_val(&one));\n+}\n \n+fn main() {\n     // This can fail if rustc and LLVM disagree on the size of a type.\n     // In this case, `Option<Packed<(&(), u32)>>` was erronously not\n     // marked as packed despite needing alignment `1` and containing\n     // its `&()` discriminant, which has alignment larger than `1`.\n-    assert_eq!(stride, std::mem::size_of_val(&one));\n+    sanity_check_size((Some(Packed((&(), 0))), true));\n+\n+    // In #46769, `Option<(Packed<&()>, bool)>` was found to have\n+    // pointer alignment, without actually being aligned in size.\n+    // E.g. on 64-bit platforms, it had alignment `8` but size `9`.\n+    sanity_check_size(Some((Packed(&()), true)));\n }"}]}