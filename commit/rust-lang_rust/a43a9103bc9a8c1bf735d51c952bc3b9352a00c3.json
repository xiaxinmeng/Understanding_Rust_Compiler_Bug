{"sha": "a43a9103bc9a8c1bf735d51c952bc3b9352a00c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0M2E5MTAzYmM5YThjMWJmNzM1ZDUxYzk1MmJjM2I5MzUyYTAwYzM=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-18T19:20:13Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-24T07:53:49Z"}, "message": "Add custom cargo runners", "tree": {"sha": "ab29bcaca605deb29328789e627d1100c5a9517d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab29bcaca605deb29328789e627d1100c5a9517d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a43a9103bc9a8c1bf735d51c952bc3b9352a00c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a43a9103bc9a8c1bf735d51c952bc3b9352a00c3", "html_url": "https://github.com/rust-lang/rust/commit/a43a9103bc9a8c1bf735d51c952bc3b9352a00c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a43a9103bc9a8c1bf735d51c952bc3b9352a00c3/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c544f9a137bd675fd6e9cc4c244ff4366ededb50", "url": "https://api.github.com/repos/rust-lang/rust/commits/c544f9a137bd675fd6e9cc4c244ff4366ededb50", "html_url": "https://github.com/rust-lang/rust/commit/c544f9a137bd675fd6e9cc4c244ff4366ededb50"}], "stats": {"total": 129, "additions": 73, "deletions": 56}, "files": [{"sha": "f542a490a95d067d22b0d939ce9a0dc02a3380ab", "filename": "editors/code/package.json", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a43a9103bc9a8c1bf735d51c952bc3b9352a00c3/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/a43a9103bc9a8c1bf735d51c952bc3b9352a00c3/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=a43a9103bc9a8c1bf735d51c952bc3b9352a00c3", "patch": "@@ -336,6 +336,14 @@\n                     \"default\": null,\n                     \"description\": \"List of features to activate. Defaults to `rust-analyzer.cargo.features`.\"\n                 },\n+                \"rust-analyzer.cargoRunner\": {\n+                    \"type\": [\n+                        \"null\",\n+                        \"string\"\n+                    ],\n+                    \"default\": null,\n+                    \"description\": \"Custom cargo runner extension ID.\"\n+                },\n                 \"rust-analyzer.inlayHints.enable\": {\n                     \"type\": \"boolean\",\n                     \"default\": true,"}, {"sha": "8c9d7802fffe0fd4b2ead84880816165fb6d2870", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a43a9103bc9a8c1bf735d51c952bc3b9352a00c3/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a43a9103bc9a8c1bf735d51c952bc3b9352a00c3/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=a43a9103bc9a8c1bf735d51c952bc3b9352a00c3", "patch": "@@ -394,7 +394,7 @@ export function run(ctx: Ctx): Cmd {\n \n         item.detail = 'rerun';\n         prevRunnable = item;\n-        const task = createTask(item.runnable);\n+        const task = await createTask(item.runnable, ctx.config);\n         return await vscode.tasks.executeTask(task);\n     };\n }\n@@ -404,7 +404,7 @@ export function runSingle(ctx: Ctx): Cmd {\n         const editor = ctx.activeRustEditor;\n         if (!editor) return;\n \n-        const task = createTask(runnable);\n+        const task = await createTask(runnable, ctx.config);\n         task.group = vscode.TaskGroup.Build;\n         task.presentationOptions = {\n             reveal: vscode.TaskRevealKind.Always,"}, {"sha": "fc95a7de6b8514960dc50fd12ee61ea2e35444df", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a43a9103bc9a8c1bf735d51c952bc3b9352a00c3/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a43a9103bc9a8c1bf735d51c952bc3b9352a00c3/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=a43a9103bc9a8c1bf735d51c952bc3b9352a00c3", "patch": "@@ -110,6 +110,10 @@ export class Config {\n         };\n     }\n \n+    get cargoRunner() {\n+        return this.get<string | undefined>(\"cargoRunner\");\n+    }\n+\n     get debug() {\n         // \"/rustc/<id>\" used by suggestions only.\n         const { [\"/rustc/<id>\"]: _, ...sourceFileMap } = this.get<Record<string, string>>(\"debug.sourceFileMap\");"}, {"sha": "5b4f453c860d8e86f13a846077f1afa805ce8968", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a43a9103bc9a8c1bf735d51c952bc3b9352a00c3/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a43a9103bc9a8c1bf735d51c952bc3b9352a00c3/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=a43a9103bc9a8c1bf735d51c952bc3b9352a00c3", "patch": "@@ -115,7 +115,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('applyActionGroup', commands.applyActionGroup);\n     ctx.registerCommand('gotoLocation', commands.gotoLocation);\n \n-    ctx.pushCleanup(activateTaskProvider(workspaceFolder));\n+    ctx.pushCleanup(activateTaskProvider(workspaceFolder, ctx.config));\n \n     activateStatusDisplay(ctx);\n "}, {"sha": "7ecdeeeaf7fd7787127b5890e7bb87155cd7a96a", "filename": "editors/code/src/run.ts", "status": "modified", "additions": 17, "deletions": 40, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a43a9103bc9a8c1bf735d51c952bc3b9352a00c3/editors%2Fcode%2Fsrc%2Frun.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a43a9103bc9a8c1bf735d51c952bc3b9352a00c3/editors%2Fcode%2Fsrc%2Frun.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frun.ts?ref=a43a9103bc9a8c1bf735d51c952bc3b9352a00c3", "patch": "@@ -1,10 +1,11 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n import * as ra from './lsp_ext';\n-import * as toolchain from \"./toolchain\";\n+import * as tasks from './tasks';\n \n import { Ctx } from './ctx';\n import { makeDebugConfig } from './debug';\n+import { Config } from './config';\n \n const quickPickButtons = [{ iconPath: new vscode.ThemeIcon(\"save\"), tooltip: \"Save as a launch.json configurtation.\" }];\n \n@@ -95,52 +96,28 @@ export class RunnableQuickPick implements vscode.QuickPickItem {\n     }\n }\n \n-interface CargoTaskDefinition extends vscode.TaskDefinition {\n-    type: 'cargo';\n-    label: string;\n-    command: string;\n-    args: string[];\n-    env?: { [key: string]: string };\n-}\n-\n-export function createTask(runnable: ra.Runnable): vscode.Task {\n-    const TASK_SOURCE = 'Rust';\n+export async function createTask(runnable: ra.Runnable, config: Config): Promise<vscode.Task> {\n+    if (runnable.kind !== \"cargo\") {\n+        // rust-analyzer supports only one kind, \"cargo\"\n+        // do not use tasks.TASK_TYPE here, these are completely different meanings.\n \n-    let command;\n-    switch (runnable.kind) {\n-        case \"cargo\": command = toolchain.getPathForExecutable(\"cargo\");\n+        throw `Unexpected runnable kind: ${runnable.kind}`;\n     }\n+\n     const args = [...runnable.args.cargoArgs]; // should be a copy!\n     if (runnable.args.executableArgs.length > 0) {\n         args.push('--', ...runnable.args.executableArgs);\n     }\n-    const definition: CargoTaskDefinition = {\n-        type: 'cargo',\n-        label: runnable.label,\n-        command,\n-        args,\n+    const definition: tasks.CargoTaskDefinition = {\n+        type: tasks.TASK_TYPE,\n+        command: args[0], // run, test, etc...\n+        args: args.slice(1),\n+        cwd: runnable.args.workspaceRoot,\n         env: Object.assign({}, process.env as { [key: string]: string }, { \"RUST_BACKTRACE\": \"short\" }),\n     };\n \n-    const execOption: vscode.ShellExecutionOptions = {\n-        cwd: runnable.args.workspaceRoot || '.',\n-        env: definition.env,\n-    };\n-    const exec = new vscode.ShellExecution(\n-        definition.command,\n-        definition.args,\n-        execOption,\n-    );\n-\n-    const f = vscode.workspace.workspaceFolders![0];\n-    const t = new vscode.Task(\n-        definition,\n-        f,\n-        definition.label,\n-        TASK_SOURCE,\n-        exec,\n-        ['$rustc'],\n-    );\n-    t.presentationOptions.clear = true;\n-    return t;\n+    const cargoTask = await tasks.buildCargoTask(definition, runnable.label, args, config.cargoRunner);\n+    cargoTask.presentationOptions.clear = true;\n+\n+    return cargoTask;\n }"}, {"sha": "e2c43fdd418801ddff6d1928d47a42cff6831059", "filename": "editors/code/src/tasks.ts", "status": "modified", "additions": 41, "deletions": 13, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a43a9103bc9a8c1bf735d51c952bc3b9352a00c3/editors%2Fcode%2Fsrc%2Ftasks.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a43a9103bc9a8c1bf735d51c952bc3b9352a00c3/editors%2Fcode%2Fsrc%2Ftasks.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftasks.ts?ref=a43a9103bc9a8c1bf735d51c952bc3b9352a00c3", "patch": "@@ -1,11 +1,14 @@\n import * as vscode from 'vscode';\n import * as toolchain from \"./toolchain\";\n+import { Config } from './config';\n+import { log } from './util';\n \n // This ends up as the `type` key in tasks.json. RLS also uses `cargo` and\n // our configuration should be compatible with it so use the same key.\n-const TASK_TYPE = 'cargo';\n+export const TASK_TYPE = 'cargo';\n+export const TASK_SOURCE = 'rust';\n \n-interface CargoTaskDefinition extends vscode.TaskDefinition {\n+export interface CargoTaskDefinition extends vscode.TaskDefinition {\n     command?: string;\n     args?: string[];\n     cwd?: string;\n@@ -14,9 +17,11 @@ interface CargoTaskDefinition extends vscode.TaskDefinition {\n \n class CargoTaskProvider implements vscode.TaskProvider {\n     private readonly target: vscode.WorkspaceFolder;\n+    private readonly config: Config;\n \n-    constructor(target: vscode.WorkspaceFolder) {\n+    constructor(target: vscode.WorkspaceFolder, config: Config) {\n         this.target = target;\n+        this.config = config;\n     }\n \n     provideTasks(): vscode.Task[] {\n@@ -58,29 +63,52 @@ class CargoTaskProvider implements vscode.TaskProvider {\n             });\n     }\n \n-    resolveTask(task: vscode.Task): vscode.Task | undefined {\n+    async resolveTask(task: vscode.Task): Promise<vscode.Task | undefined> {\n         // VSCode calls this for every cargo task in the user's tasks.json,\n         // we need to inform VSCode how to execute that command by creating\n         // a ShellExecution for it.\n \n         const definition = task.definition as CargoTaskDefinition;\n \n-        if (definition.type === 'cargo' && definition.command) {\n+        if (definition.type === TASK_TYPE && definition.command) {\n             const args = [definition.command].concat(definition.args ?? []);\n \n-            return new vscode.Task(\n-                definition,\n-                task.name,\n-                'rust',\n-                new vscode.ShellExecution('cargo', args, definition),\n-            );\n+            return await buildCargoTask(definition, task.name, args, this.config.cargoRunner);\n         }\n \n         return undefined;\n     }\n }\n \n-export function activateTaskProvider(target: vscode.WorkspaceFolder): vscode.Disposable {\n-    const provider = new CargoTaskProvider(target);\n+export async function buildCargoTask(definition: CargoTaskDefinition, name: string, args: string[], customRunner?: string): Promise<vscode.Task> {\n+    if (customRunner) {\n+        const runnerCommand = `${customRunner}.createCargoTask`;\n+        try {\n+            const runnerArgs = { name, args, cwd: definition.cwd, env: definition.env, source: TASK_SOURCE };\n+            const task = await vscode.commands.executeCommand(runnerCommand, runnerArgs);\n+\n+            if (task instanceof vscode.Task) {\n+                return task;\n+            } else if (task) {\n+                log.debug(\"Invalid cargo task\", task);\n+                throw `Invalid task!`;\n+            }\n+            // fallback to default processing\n+\n+        } catch (e) {\n+            throw `Cargo runner '${customRunner}' failed! ${e}`;\n+        }\n+    }\n+\n+    return new vscode.Task(\n+        definition,\n+        name,\n+        TASK_SOURCE,\n+        new vscode.ShellExecution(toolchain.cargoPath(), args, definition),\n+    );\n+}\n+\n+export function activateTaskProvider(target: vscode.WorkspaceFolder, config: Config): vscode.Disposable {\n+    const provider = new CargoTaskProvider(target, config);\n     return vscode.tasks.registerTaskProvider(TASK_TYPE, provider);\n }"}]}