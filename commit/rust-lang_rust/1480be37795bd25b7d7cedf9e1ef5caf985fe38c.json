{"sha": "1480be37795bd25b7d7cedf9e1ef5caf985fe38c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ODBiZTM3Nzk1YmQyNWI3ZDdjZWRmOWUxZWY1Y2FmOTg1ZmUzOGM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-27T09:51:27Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-31T13:15:09Z"}, "message": "async-llvm(21): Re-use worker-ids in order to simulate persistent worker threads.", "tree": {"sha": "edc2fb0c0e352f2def594260dc3c728dc4e44f8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edc2fb0c0e352f2def594260dc3c728dc4e44f8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1480be37795bd25b7d7cedf9e1ef5caf985fe38c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1480be37795bd25b7d7cedf9e1ef5caf985fe38c", "html_url": "https://github.com/rust-lang/rust/commit/1480be37795bd25b7d7cedf9e1ef5caf985fe38c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1480be37795bd25b7d7cedf9e1ef5caf985fe38c/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab3bc584c0412e31efd7b92ef77b7cebfa555926", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab3bc584c0412e31efd7b92ef77b7cebfa555926", "html_url": "https://github.com/rust-lang/rust/commit/ab3bc584c0412e31efd7b92ef77b7cebfa555926"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "086980777e1dd79be4215c4a441cbd13d5c1b371", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1480be37795bd25b7d7cedf9e1ef5caf985fe38c/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1480be37795bd25b7d7cedf9e1ef5caf985fe38c/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=1480be37795bd25b7d7cedf9e1ef5caf985fe38c", "patch": "@@ -1063,7 +1063,10 @@ fn execute_work_item(cgcx: &CodegenContext, work_item: WorkItem)\n #[derive(Debug)]\n enum Message {\n     Token(io::Result<Acquired>),\n-    Done { result: Result<CompiledModule, ()> },\n+    Done {\n+        result: Result<CompiledModule, ()>,\n+        worker_id: usize,\n+    },\n     WorkItem(WorkItem),\n     CheckErrorMessages,\n     TranslationDone,\n@@ -1179,24 +1182,38 @@ fn start_executing_work(sess: &Session,\n     // the jobserver.\n \n     thread::spawn(move || {\n+        let mut worker_id_counter = 0;\n+        let mut free_worker_ids = Vec::new();\n+        let mut get_worker_id = |free_worker_ids: &mut Vec<usize>| {\n+            if let Some(id) = free_worker_ids.pop() {\n+                id\n+            } else {\n+                let id = worker_id_counter;\n+                worker_id_counter += 1;\n+                id\n+            }\n+        };\n+\n         let mut compiled_modules = vec![];\n         let mut compiled_metadata_module = None;\n         let mut compiled_allocator_module = None;\n \n         let mut translation_done = false;\n         let mut work_items = Vec::new();\n         let mut tokens = Vec::new();\n+\n         let mut running = 0;\n+\n         while !translation_done || work_items.len() > 0 || running > 0 {\n \n             // Spin up what work we can, only doing this while we've got available\n             // parallelism slots and work left to spawn.\n             while work_items.len() > 0 && running < tokens.len() + 1 {\n                 let item = work_items.pop().unwrap();\n-                let worker_index = work_items.len();\n+                let worker_id = get_worker_id(&mut free_worker_ids);\n \n                 let cgcx = CodegenContext {\n-                    worker: worker_index,\n+                    worker: worker_id,\n                     .. cgcx.clone()\n                 };\n \n@@ -1235,9 +1252,10 @@ fn start_executing_work(sess: &Session,\n                 //\n                 // Note that if the thread failed that means it panicked, so we\n                 // abort immediately.\n-                Message::Done { result: Ok(compiled_module) } => {\n+                Message::Done { result: Ok(compiled_module), worker_id } => {\n                     drop(tokens.pop());\n                     running -= 1;\n+                    free_worker_ids.push(worker_id);\n                     drop(trans_worker_send.send(Message::CheckErrorMessages));\n \n                     match compiled_module.kind {\n@@ -1254,7 +1272,7 @@ fn start_executing_work(sess: &Session,\n                         }\n                     }\n                 }\n-                Message::Done { result: Err(()) } => {\n+                Message::Done { result: Err(()), worker_id: _ } => {\n                     shared_emitter.fatal(\"aborting due to worker thread panic\");\n                     drop(trans_worker_send.send(Message::CheckErrorMessages));\n                     // Exit the coordinator thread\n@@ -1288,6 +1306,7 @@ fn spawn_work(cgcx: CodegenContext, work: WorkItem) {\n         struct Bomb {\n             coordinator_send: Sender<Message>,\n             result: Option<CompiledModule>,\n+            worker_id: usize,\n         }\n         impl Drop for Bomb {\n             fn drop(&mut self) {\n@@ -1296,13 +1315,17 @@ fn spawn_work(cgcx: CodegenContext, work: WorkItem) {\n                     None => Err(())\n                 };\n \n-                drop(self.coordinator_send.send(Message::Done { result }));\n+                drop(self.coordinator_send.send(Message::Done {\n+                    result,\n+                    worker_id: self.worker_id,\n+                }));\n             }\n         }\n \n         let mut bomb = Bomb {\n             coordinator_send: cgcx.coordinator_send.clone(),\n             result: None,\n+            worker_id: cgcx.worker,\n         };\n \n         // Execute the work itself, and if it finishes successfully then flag"}]}