{"sha": "1e1d574aeac3fae44dac430ecfe8086abcdf9a5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMWQ1NzRhZWFjM2ZhZTQ0ZGFjNDMwZWNmZTgwODZhYmNkZjlhNWY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-02-22T17:56:49Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-04T22:33:43Z"}, "message": "expand: Share some code between inline and out-of-line module treatment", "tree": {"sha": "cc2d10f3e200bff6fcb5e1cf6a974fc86f3ed74b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc2d10f3e200bff6fcb5e1cf6a974fc86f3ed74b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e1d574aeac3fae44dac430ecfe8086abcdf9a5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1d574aeac3fae44dac430ecfe8086abcdf9a5f", "html_url": "https://github.com/rust-lang/rust/commit/1e1d574aeac3fae44dac430ecfe8086abcdf9a5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e1d574aeac3fae44dac430ecfe8086abcdf9a5f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29a9ef28188e2ebdd3c56177672cd437dd11e25d", "url": "https://api.github.com/repos/rust-lang/rust/commits/29a9ef28188e2ebdd3c56177672cd437dd11e25d", "html_url": "https://github.com/rust-lang/rust/commit/29a9ef28188e2ebdd3c56177672cd437dd11e25d"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "8f5200804e0dcbd4ef3cb4da9a22da643628408a", "filename": "compiler/rustc_expand/src/module.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1e1d574aeac3fae44dac430ecfe8086abcdf9a5f/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1d574aeac3fae44dac430ecfe8086abcdf9a5f/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs?ref=1e1d574aeac3fae44dac430ecfe8086abcdf9a5f", "patch": "@@ -98,25 +98,26 @@ crate fn mod_dir_path(\n     module: &ModuleData,\n     mut dir_ownership: DirOwnership,\n ) -> (PathBuf, DirOwnership) {\n+    if let Some(file_path) = mod_file_path_from_attr(sess, attrs, &module.dir_path) {\n+        // For inline modules file path from `#[path]` is actually the directory path\n+        // for historical reasons, so we don't pop the last segment here.\n+        return (file_path, DirOwnership::Owned { relative: None });\n+    }\n+\n+    // We have to push on the current module name in the case of relative\n+    // paths in order to ensure that any additional module paths from inline\n+    // `mod x { ... }` come after the relative extension.\n+    //\n+    // For example, a `mod z { ... }` inside `x/y.rs` should set the current\n+    // directory path to `/x/y/z`, not `/x/z` with a relative offset of `y`.\n     let mut dir_path = module.dir_path.clone();\n-    if let Some(file_path) = sess.first_attr_value_str_by_name(attrs, sym::path) {\n-        dir_path.push(&*file_path.as_str());\n-        dir_ownership = DirOwnership::Owned { relative: None };\n-    } else {\n-        // We have to push on the current module name in the case of relative\n-        // paths in order to ensure that any additional module paths from inline\n-        // `mod x { ... }` come after the relative extension.\n-        //\n-        // For example, a `mod z { ... }` inside `x/y.rs` should set the current\n-        // directory path to `/x/y/z`, not `/x/z` with a relative offset of `y`.\n-        if let DirOwnership::Owned { relative } = &mut dir_ownership {\n-            if let Some(ident) = relative.take() {\n-                // Remove the relative offset.\n-                dir_path.push(&*ident.as_str());\n-            }\n+    if let DirOwnership::Owned { relative } = &mut dir_ownership {\n+        if let Some(ident) = relative.take() {\n+            // Remove the relative offset.\n+            dir_path.push(&*ident.as_str());\n         }\n-        dir_path.push(&*ident.as_str());\n     }\n+    dir_path.push(&*ident.as_str());\n \n     (dir_path, dir_ownership)\n }\n@@ -179,8 +180,7 @@ fn mod_file_path_from_attr(\n     dir_path: &Path,\n ) -> Option<PathBuf> {\n     // Extract path string from first `#[path = \"path_string\"]` attribute.\n-    let path_string = sess.first_attr_value_str_by_name(attrs, sym::path)?;\n-    let path_string = path_string.as_str();\n+    let path_string = sess.first_attr_value_str_by_name(attrs, sym::path)?.as_str();\n \n     // On windows, the base path might have the form\n     // `\\\\?\\foo\\bar` in which case it does not tolerate"}]}