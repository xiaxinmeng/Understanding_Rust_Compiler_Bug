{"sha": "a4e5c91cb823526765574c6d18ea6b13f1cb7dab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZTVjOTFjYjgyMzUyNjc2NTU3NGM2ZDE4ZWE2YjEzZjFjYjdkYWI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-03T18:44:54Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-05T19:53:39Z"}, "message": "libtest: Force a newline every 100 dots when testing in quiet mode.\n\nRationale:\n\nWe use --quiet mode when testing a PR in the CI. Also, we use `stamp` to\nprefix every line with a timestamp. Previously, when testing in --quiet\nmode, we will only print a dot for each test without any line breaks.\nCombined with `stamp`, this means we'd need to wait for all tests to\ncomplete before writing the output. On Travis CI, if we don't print\nanything within 30 minutes, the job will be forcefully canceled. This\nmakes it very easy to spuriously-timeout when testing non-default images\nlike arm-android using the CI. This commit tries to workaround the issue\nby printing a new line every 100 dots, forcing `stamp` to emit something\nto reset Travis's countdown.", "tree": {"sha": "6a89fc7a53fdb63376964970cddf9ea6be0a6238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a89fc7a53fdb63376964970cddf9ea6be0a6238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4e5c91cb823526765574c6d18ea6b13f1cb7dab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAln/bEMACgkQ/vbIBR0O\nATzCgQ/9H1us8FNtveKQWu1LSl3YRZ7qeK2hQ61lGiWu3Lk4ciQMwYewJLztrJ54\nufhJGCm2KW9qKRWeHcnOZOwMznCNvTfWhd/pBkhL3K5PRWdk1D8TfYvC5gtSVuMh\nFroaSn1GhvJp3g7y15riMlSOdX2SPsvTPPsRPJp3we72OPtqlOBAuoiQ8YLzfjXX\nAsJkH95wXSIWrTw9sDITpz6ZxjTeghfTfwK13SR7HJHdtcK6+H5DbzsA1gAQhwTq\nafY3YZGXP/b5i/UFUf0DNlTmkTNWvdJfgqjx/qzkJ7+yfiMLGkOoKJWaFtaRmRcN\n/hdwpCxiNp/Ou5utnmP3hP14Zgpt6rdYY6v5vlS0AFlL3XbHnnr8uevQe5qrqzyo\nO31UGFR2d6w63q4RE3QPtqr9ZWotTdML3esPD2WpD4GIs3veRjSM0/zTKBBfSjPR\nrrLDGQssGR1XO/z2dBdKmRp5sFGvyiaZ4hCRtC2rWMheS7FjbkXFbzOEBeB4w2dz\n0FaushsChOLdn29F/W+i4pCOrppN2HMXUrifXDh7z6ltcA+b7tZIQwnjrh2DvbH5\ngHPffKR5Wk3UsDpIKLvspN4r2yFO383/0WdxCcAC43dzWG920IMnzy5xXrqP/e58\nb2siPU5h5/iPCySEpI4DAkF6RScMoDdD2TrgUO32vIjGi05djD8=\n=ITqR\n-----END PGP SIGNATURE-----", "payload": "tree 6a89fc7a53fdb63376964970cddf9ea6be0a6238\nparent 666687a68cb9c42bf5eadcb2e5e447d7de5190d5\nauthor kennytm <kennytm@gmail.com> 1509734694 +0800\ncommitter kennytm <kennytm@gmail.com> 1509911619 +0800\n\nlibtest: Force a newline every 100 dots when testing in quiet mode.\n\nRationale:\n\nWe use --quiet mode when testing a PR in the CI. Also, we use `stamp` to\nprefix every line with a timestamp. Previously, when testing in --quiet\nmode, we will only print a dot for each test without any line breaks.\nCombined with `stamp`, this means we'd need to wait for all tests to\ncomplete before writing the output. On Travis CI, if we don't print\nanything within 30 minutes, the job will be forcefully canceled. This\nmakes it very easy to spuriously-timeout when testing non-default images\nlike arm-android using the CI. This commit tries to workaround the issue\nby printing a new line every 100 dots, forcing `stamp` to emit something\nto reset Travis's countdown.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4e5c91cb823526765574c6d18ea6b13f1cb7dab", "html_url": "https://github.com/rust-lang/rust/commit/a4e5c91cb823526765574c6d18ea6b13f1cb7dab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4e5c91cb823526765574c6d18ea6b13f1cb7dab/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "666687a68cb9c42bf5eadcb2e5e447d7de5190d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/666687a68cb9c42bf5eadcb2e5e447d7de5190d5", "html_url": "https://github.com/rust-lang/rust/commit/666687a68cb9c42bf5eadcb2e5e447d7de5190d5"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "76abcb83edc53665efd9706c2682a522cd823fde", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a4e5c91cb823526765574c6d18ea6b13f1cb7dab/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e5c91cb823526765574c6d18ea6b13f1cb7dab/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=a4e5c91cb823526765574c6d18ea6b13f1cb7dab", "patch": "@@ -71,6 +71,7 @@ use std::thread;\n use std::time::{Instant, Duration};\n \n const TEST_WARN_TIMEOUT_S: u64 = 60;\n+const QUIET_MODE_MAX_COLUMN: usize = 100; // insert a '\\n' after 100 tests in quiet mode\n \n // to be used by rustc to compile tests in libtest\n pub mod test {\n@@ -614,7 +615,14 @@ impl<T: Write> ConsoleTestState<T> {\n     pub fn write_short_result(&mut self, verbose: &str, quiet: &str, color: term::color::Color)\n                               -> io::Result<()> {\n         if self.quiet {\n-            self.write_pretty(quiet, color)\n+            self.write_pretty(quiet, color)?;\n+            if self.current_test_count() % QUIET_MODE_MAX_COLUMN == QUIET_MODE_MAX_COLUMN - 1 {\n+                // we insert a new line every 100 dots in order to flush the\n+                // screen when dealing with line-buffered output (e.g. piping to\n+                // `stamp` in the rust CI).\n+                self.write_plain(\"\\n\")?;\n+            }\n+            Ok(())\n         } else {\n             self.write_pretty(verbose, color)?;\n             self.write_plain(\"\\n\")\n@@ -771,9 +779,12 @@ impl<T: Write> ConsoleTestState<T> {\n         Ok(())\n     }\n \n+    fn current_test_count(&self) -> usize {\n+        self.passed + self.failed + self.ignored + self.measured + self.allowed_fail\n+    }\n+\n     pub fn write_run_finish(&mut self) -> io::Result<bool> {\n-        assert!(self.passed + self.failed + self.ignored + self.measured +\n-                    self.allowed_fail == self.total);\n+        assert!(self.current_test_count() == self.total);\n \n         if self.options.display_output {\n             self.write_outputs()?;"}]}