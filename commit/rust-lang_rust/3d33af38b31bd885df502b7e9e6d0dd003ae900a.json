{"sha": "3d33af38b31bd885df502b7e9e6d0dd003ae900a", "node_id": "C_kwDOAAsO6NoAKDNkMzNhZjM4YjMxYmQ4ODVkZjUwMmI3ZTllNmQwZGQwMDNhZTkwMGE", "commit": {"author": {"name": "Ulrich Weigand", "email": "ulrich.weigand@de.ibm.com", "date": "2022-12-06T17:12:46Z"}, "committer": {"name": "Ulrich Weigand", "email": "ulrich.weigand@de.ibm.com", "date": "2022-12-06T17:12:46Z"}, "message": "Fix failing codegen tests on s390x\n\nSeveral codegen tests are currently failing due to making\nassumptions that are not valid for the s390x architecture:\n\n- catch-unwind.rs: fails due to inlining differences.\n  Already ignored on another platform for the same reason.\n  Solution: Ignore on s390x.\n\n- remap_path_prefix/main.rs: fails due to different alignment\n  requirement for string constants.\n  Solution: Do not test for the alignment requirement.\n\n- repr-transparent-aggregates-1.rs: many ABI assumptions.\n  Already ignored on many platforms for the same reason.\n  Solution: Ignore on s390x.\n\n- repr-transparent.rs: no vector ABI by default on s390x.\n  Already ignored on another platform for a similar reason.\n  Solution: Ignore on s390x.\n\n- uninit-consts.rs: hard-coded little-endian constant.\n  Solution: Match both little- and big-endian versions.\n\nFixes part of https://github.com/rust-lang/rust/issues/105383.", "tree": {"sha": "4c0d59b1bdc9dc25e09fc477bec46c12923caf7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c0d59b1bdc9dc25e09fc477bec46c12923caf7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d33af38b31bd885df502b7e9e6d0dd003ae900a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d33af38b31bd885df502b7e9e6d0dd003ae900a", "html_url": "https://github.com/rust-lang/rust/commit/3d33af38b31bd885df502b7e9e6d0dd003ae900a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d33af38b31bd885df502b7e9e6d0dd003ae900a/comments", "author": {"login": "uweigand", "id": 4154057, "node_id": "MDQ6VXNlcjQxNTQwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4154057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uweigand", "html_url": "https://github.com/uweigand", "followers_url": "https://api.github.com/users/uweigand/followers", "following_url": "https://api.github.com/users/uweigand/following{/other_user}", "gists_url": "https://api.github.com/users/uweigand/gists{/gist_id}", "starred_url": "https://api.github.com/users/uweigand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uweigand/subscriptions", "organizations_url": "https://api.github.com/users/uweigand/orgs", "repos_url": "https://api.github.com/users/uweigand/repos", "events_url": "https://api.github.com/users/uweigand/events{/privacy}", "received_events_url": "https://api.github.com/users/uweigand/received_events", "type": "User", "site_admin": false}, "committer": {"login": "uweigand", "id": 4154057, "node_id": "MDQ6VXNlcjQxNTQwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4154057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uweigand", "html_url": "https://github.com/uweigand", "followers_url": "https://api.github.com/users/uweigand/followers", "following_url": "https://api.github.com/users/uweigand/following{/other_user}", "gists_url": "https://api.github.com/users/uweigand/gists{/gist_id}", "starred_url": "https://api.github.com/users/uweigand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uweigand/subscriptions", "organizations_url": "https://api.github.com/users/uweigand/orgs", "repos_url": "https://api.github.com/users/uweigand/repos", "events_url": "https://api.github.com/users/uweigand/events{/privacy}", "received_events_url": "https://api.github.com/users/uweigand/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6852428a8ea9728369b64b9964cad8e258403d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6852428a8ea9728369b64b9964cad8e258403d3", "html_url": "https://github.com/rust-lang/rust/commit/b6852428a8ea9728369b64b9964cad8e258403d3"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "b90ef104ce72a3fd2c2a28744066d545c42d6b34", "filename": "src/test/codegen/catch-unwind.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d33af38b31bd885df502b7e9e6d0dd003ae900a/src%2Ftest%2Fcodegen%2Fcatch-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d33af38b31bd885df502b7e9e6d0dd003ae900a/src%2Ftest%2Fcodegen%2Fcatch-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcatch-unwind.rs?ref=3d33af38b31bd885df502b7e9e6d0dd003ae900a", "patch": "@@ -8,6 +8,8 @@\n // On riscv the closure is another function, placed before fn foo so CHECK can't\n // find it\n // ignore-riscv64 FIXME\n+// On s390x the closure is also in another function\n+// ignore-s390x FIXME\n \n #![crate_type = \"lib\"]\n #![feature(c_unwind)]"}, {"sha": "78ebbccfce1950fe372e1dc74f9f9723d6f92cdf", "filename": "src/test/codegen/remap_path_prefix/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d33af38b31bd885df502b7e9e6d0dd003ae900a/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d33af38b31bd885df502b7e9e6d0dd003ae900a/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs?ref=3d33af38b31bd885df502b7e9e6d0dd003ae900a", "patch": "@@ -12,7 +12,7 @@ mod aux_mod;\n include!(\"aux_mod.rs\");\n \n // Here we check that the expansion of the file!() macro is mapped.\n-// CHECK: @alloc2 = private unnamed_addr constant <{ [34 x i8] }> <{ [34 x i8] c\"/the/src/remap_path_prefix/main.rs\" }>, align 1\n+// CHECK: @alloc2 = private unnamed_addr constant <{ [34 x i8] }> <{ [34 x i8] c\"/the/src/remap_path_prefix/main.rs\" }>\n pub static FILE_PATH: &'static str = file!();\n \n fn main() {"}, {"sha": "f733de12b3537097f21a0f4a3cea52185d7c18d0", "filename": "src/test/codegen/repr-transparent-aggregates-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d33af38b31bd885df502b7e9e6d0dd003ae900a/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d33af38b31bd885df502b7e9e6d0dd003ae900a/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs?ref=3d33af38b31bd885df502b7e9e6d0dd003ae900a", "patch": "@@ -8,6 +8,7 @@\n // ignore-powerpc\n // ignore-powerpc64\n // ignore-riscv64 see codegen/riscv-abi\n+// ignore-s390x\n // ignore-windows\n // See repr-transparent.rs\n "}, {"sha": "4f2313ce47a979be33140172948c254831e8b538", "filename": "src/test/codegen/repr-transparent.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d33af38b31bd885df502b7e9e6d0dd003ae900a/src%2Ftest%2Fcodegen%2Frepr-transparent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d33af38b31bd885df502b7e9e6d0dd003ae900a/src%2Ftest%2Fcodegen%2Frepr-transparent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent.rs?ref=3d33af38b31bd885df502b7e9e6d0dd003ae900a", "patch": "@@ -2,6 +2,7 @@\n \n // ignore-riscv64 riscv64 has an i128 type used with test_Vector\n // see codegen/riscv-abi for riscv functiona call tests\n+// ignore-s390x s390x with default march passes vector types per reference\n \n #![crate_type=\"lib\"]\n #![feature(repr_simd, transparent_unions)]"}, {"sha": "98a6761f8abbb3261bf660427bc97392f6891431", "filename": "src/test/codegen/uninit-consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d33af38b31bd885df502b7e9e6d0dd003ae900a/src%2Ftest%2Fcodegen%2Funinit-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d33af38b31bd885df502b7e9e6d0dd003ae900a/src%2Ftest%2Fcodegen%2Funinit-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funinit-consts.rs?ref=3d33af38b31bd885df502b7e9e6d0dd003ae900a", "patch": "@@ -14,7 +14,7 @@ pub struct PartiallyUninit {\n \n // CHECK: [[FULLY_UNINIT:@[0-9]+]] = private unnamed_addr constant <{ [10 x i8] }> undef\n \n-// CHECK: [[PARTIALLY_UNINIT:@[0-9]+]] = private unnamed_addr constant <{ [4 x i8], [12 x i8] }> <{ [4 x i8] c\"\\EF\\BE\\AD\\DE\", [12 x i8] undef }>, align 4\n+// CHECK: [[PARTIALLY_UNINIT:@[0-9]+]] = private unnamed_addr constant <{ [4 x i8], [12 x i8] }> <{ [4 x i8] c\"{{\\\\EF\\\\BE\\\\AD\\\\DE|\\\\DE\\\\AD\\\\BE\\\\EF}}\", [12 x i8] undef }>, align 4\n \n // This shouldn't contain undef, since it contains more chunks\n // than the default value of uninit_const_chunk_threshold."}]}