{"sha": "2f48bfa88c1c742ed058fc8af096d8cedc138434", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNDhiZmE4OGMxYzc0MmVkMDU4ZmM4YWYwOTZkOGNlZGMxMzg0MzQ=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-07-21T01:06:39Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-22T01:30:25Z"}, "message": "Improve errors for recursive type aliases", "tree": {"sha": "7ba8d580294450e1e6bc3c82a7d479ca7d0aa4a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ba8d580294450e1e6bc3c82a7d479ca7d0aa4a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f48bfa88c1c742ed058fc8af096d8cedc138434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f48bfa88c1c742ed058fc8af096d8cedc138434", "html_url": "https://github.com/rust-lang/rust/commit/2f48bfa88c1c742ed058fc8af096d8cedc138434", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f48bfa88c1c742ed058fc8af096d8cedc138434/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3e2578c31688619ddc0a10ddf8543bf4ebcba5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e2578c31688619ddc0a10ddf8543bf4ebcba5b", "html_url": "https://github.com/rust-lang/rust/commit/d3e2578c31688619ddc0a10ddf8543bf4ebcba5b"}], "stats": {"total": 61, "additions": 38, "deletions": 23}, "files": [{"sha": "8e3db669f501fd217f2d1f429dc460b95d9dbafa", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2f48bfa88c1c742ed058fc8af096d8cedc138434/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f48bfa88c1c742ed058fc8af096d8cedc138434/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=2f48bfa88c1c742ed058fc8af096d8cedc138434", "patch": "@@ -116,7 +116,18 @@ rustc_queries! {\n \n     /// Records the type of every item.\n     query type_of(key: DefId) -> Ty<'tcx> {\n-        desc { |tcx| \"computing type of `{}`\", tcx.def_path_str(key) }\n+        desc { |tcx|\n+            \"{action} `{path}`\",\n+            action = {\n+                use rustc_hir::def::DefKind;\n+                match tcx.def_kind(key) {\n+                    DefKind::TyAlias => \"expanding type alias\",\n+                    DefKind::TraitAlias => \"expanding trait alias\",\n+                    _ => \"computing type of\",\n+                }\n+            },\n+            path = tcx.def_path_str(key),\n+        }\n         cache_on_disk_if { key.is_local() }\n     }\n "}, {"sha": "b7ac42546dda3ba8d4edfcfb00d99be024f4c0a2", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f48bfa88c1c742ed058fc8af096d8cedc138434/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f48bfa88c1c742ed058fc8af096d8cedc138434/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=2f48bfa88c1c742ed058fc8af096d8cedc138434", "patch": "@@ -591,10 +591,14 @@ pub(crate) fn report_cycle<'a>(\n         err.span_note(span, &format!(\"...which requires {}...\", query.description));\n     }\n \n-    err.note(&format!(\n-        \"...which again requires {}, completing the cycle\",\n-        stack[0].query.description\n-    ));\n+    if stack.len() == 1 {\n+        err.note(&format!(\"...which immediately requires {} again\", stack[0].query.description));\n+    } else {\n+        err.note(&format!(\n+            \"...which again requires {}, completing the cycle\",\n+            stack[0].query.description\n+        ));\n+    }\n \n     if let Some((span, query)) = usage {\n         err.span_note(fix_span(span, &query), &format!(\"cycle used when {}\", query.description));"}, {"sha": "4162cdaa8dcd87995264d4e461f3009622f9f2cb", "filename": "src/test/ui/associated-type-bounds/ambiguous-associated-type2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fambiguous-associated-type2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fambiguous-associated-type2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fambiguous-associated-type2.stderr?ref=2f48bfa88c1c742ed058fc8af096d8cedc138434", "patch": "@@ -4,7 +4,7 @@ error[E0391]: cycle detected when computing the super traits of `Baz` with assoc\n LL | trait Baz: Foo + Bar<Self::Item> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: ...which again requires computing the super traits of `Baz` with associated type name `Item`, completing the cycle\n+   = note: ...which immediately requires computing the super traits of `Baz` with associated type name `Item` again\n note: cycle used when computing the super traits of `Baz`\n   --> $DIR/ambiguous-associated-type2.rs:7:1\n    |"}, {"sha": "97f3c759355d45327c18d917d05dd1ede01f43eb", "filename": "src/test/ui/coherence/coherence-inherited-assoc-ty-cycle-err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr?ref=2f48bfa88c1c742ed058fc8af096d8cedc138434", "patch": "@@ -14,7 +14,7 @@ error[E0391]: cycle detected when building specialization graph of trait `Trait`\n LL | trait Trait<T> { type Assoc; }\n    | ^^^^^^^^^^^^^^\n    |\n-   = note: ...which again requires building specialization graph of trait `Trait`, completing the cycle\n+   = note: ...which immediately requires building specialization graph of trait `Trait` again\n note: cycle used when coherence checking all impls of trait `Trait`\n   --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:9:1\n    |"}, {"sha": "fc842fada5a0d9892ef026ce080385844e3627de", "filename": "src/test/ui/cycle-trait/cycle-trait-default-type-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr?ref=2f48bfa88c1c742ed058fc8af096d8cedc138434", "patch": "@@ -4,7 +4,7 @@ error[E0391]: cycle detected when computing type of `Foo::X`\n LL | trait Foo<X = Box<dyn Foo>> {\n    |                       ^^^\n    |\n-   = note: ...which again requires computing type of `Foo::X`, completing the cycle\n+   = note: ...which immediately requires computing type of `Foo::X` again\n note: cycle used when collecting item types in top-level module\n   --> $DIR/cycle-trait-default-type-trait.rs:4:1\n    |\n@@ -17,7 +17,7 @@ error[E0391]: cycle detected when computing type of `Foo::X`\n LL | trait Foo<X = Box<dyn Foo>> {\n    |                       ^^^\n    |\n-   = note: ...which again requires computing type of `Foo::X`, completing the cycle\n+   = note: ...which immediately requires computing type of `Foo::X` again\n note: cycle used when collecting item types in top-level module\n   --> $DIR/cycle-trait-default-type-trait.rs:4:1\n    |"}, {"sha": "369645f9030fbc8c9d93fc4438e9a280fa671c12", "filename": "src/test/ui/infinite/infinite-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.stderr?ref=2f48bfa88c1c742ed058fc8af096d8cedc138434", "patch": "@@ -18,7 +18,7 @@ error[E0391]: cycle detected when computing drop-check constraints for `Take`\n LL | struct Take(Take);\n    | ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: ...which again requires computing drop-check constraints for `Take`, completing the cycle\n+   = note: ...which immediately requires computing drop-check constraints for `Take` again\n    = note: cycle used when computing dropck types for `Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing }, value: Take } }`\n \n error: aborting due to 2 previous errors"}, {"sha": "61b5e9467752642487ab59618946c91f797f01a6", "filename": "src/test/ui/infinite/infinite-tag-type-recursion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr?ref=2f48bfa88c1c742ed058fc8af096d8cedc138434", "patch": "@@ -17,7 +17,7 @@ error[E0391]: cycle detected when computing drop-check constraints for `MList`\n LL | enum MList { Cons(isize, MList), Nil }\n    | ^^^^^^^^^^\n    |\n-   = note: ...which again requires computing drop-check constraints for `MList`, completing the cycle\n+   = note: ...which immediately requires computing drop-check constraints for `MList` again\n    = note: cycle used when computing dropck types for `Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing }, value: MList } }`\n \n error: aborting due to 2 previous errors"}, {"sha": "d9039243f8d9278feb380843ce892cfe37435ba4", "filename": "src/test/ui/infinite/infinite-vec-type-recursion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Finfinite%2Finfinite-vec-type-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Finfinite%2Finfinite-vec-type-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-vec-type-recursion.stderr?ref=2f48bfa88c1c742ed058fc8af096d8cedc138434", "patch": "@@ -1,10 +1,10 @@\n-error[E0391]: cycle detected when computing type of `X`\n+error[E0391]: cycle detected when expanding type alias `X`\n   --> $DIR/infinite-vec-type-recursion.rs:1:14\n    |\n LL | type X = Vec<X>;\n    |              ^\n    |\n-   = note: ...which again requires computing type of `X`, completing the cycle\n+   = note: ...which immediately requires expanding type alias `X` again\n note: cycle used when collecting item types in top-level module\n   --> $DIR/infinite-vec-type-recursion.rs:1:1\n    |"}, {"sha": "c964dc41dceafece79bb65ab6295a9ce6bfd650d", "filename": "src/test/ui/issues/issue-20772.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Fissues%2Fissue-20772.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Fissues%2Fissue-20772.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20772.stderr?ref=2f48bfa88c1c742ed058fc8af096d8cedc138434", "patch": "@@ -6,7 +6,7 @@ LL | |\n LL | | {}\n    | |__^\n    |\n-   = note: ...which again requires computing the super traits of `T` with associated type name `Item`, completing the cycle\n+   = note: ...which immediately requires computing the super traits of `T` with associated type name `Item` again\n note: cycle used when computing the super traits of `T`\n   --> $DIR/issue-20772.rs:1:1\n    |"}, {"sha": "be2bbd448007b605ce3ea4e011a8ca592d16cf02", "filename": "src/test/ui/issues/issue-20825.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Fissues%2Fissue-20825.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Fissues%2Fissue-20825.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20825.stderr?ref=2f48bfa88c1c742ed058fc8af096d8cedc138434", "patch": "@@ -4,7 +4,7 @@ error[E0391]: cycle detected when computing the super traits of `Processor` with\n LL | pub trait Processor: Subscriber<Input = Self::Input> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: ...which again requires computing the super traits of `Processor` with associated type name `Input`, completing the cycle\n+   = note: ...which immediately requires computing the super traits of `Processor` with associated type name `Input` again\n note: cycle used when computing the super traits of `Processor`\n   --> $DIR/issue-20825.rs:5:1\n    |"}, {"sha": "6877a18460509feb04badbd366a7701de10de779", "filename": "src/test/ui/issues/issue-21177.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Fissues%2Fissue-21177.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Fissues%2Fissue-21177.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21177.stderr?ref=2f48bfa88c1c742ed058fc8af096d8cedc138434", "patch": "@@ -4,7 +4,7 @@ error[E0391]: cycle detected when computing the bounds for type parameter `T`\n LL | fn foo<T: Trait<A = T::B>>() { }\n    |                     ^^^^\n    |\n-   = note: ...which again requires computing the bounds for type parameter `T`, completing the cycle\n+   = note: ...which immediately requires computing the bounds for type parameter `T` again\n note: cycle used when computing explicit predicates of `foo`\n   --> $DIR/issue-21177.rs:6:21\n    |"}, {"sha": "8be3cfa72fb2675afb8fc3ae7596ada986fcc77f", "filename": "src/test/ui/issues/issue-34373.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Fissues%2Fissue-34373.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Fissues%2Fissue-34373.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34373.stderr?ref=2f48bfa88c1c742ed058fc8af096d8cedc138434", "patch": "@@ -4,7 +4,7 @@ error[E0391]: cycle detected when computing type of `Foo::T`\n LL | pub struct Foo<T = Box<Trait<DefaultFoo>>>;\n    |                              ^^^^^^^^^^\n    |\n-note: ...which requires computing type of `DefaultFoo`...\n+note: ...which requires expanding type alias `DefaultFoo`...\n   --> $DIR/issue-34373.rs:8:19\n    |\n LL | type DefaultFoo = Foo;"}, {"sha": "0dcf0184db107005eea351fffa5a01fb6408d08d", "filename": "src/test/ui/resolve/issue-23305.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr?ref=2f48bfa88c1c742ed058fc8af096d8cedc138434", "patch": "@@ -4,7 +4,7 @@ error[E0391]: cycle detected when computing type of `<impl at $DIR/issue-23305.r\n LL | impl dyn ToNbt<Self> {}\n    |                ^^^^\n    |\n-   = note: ...which again requires computing type of `<impl at $DIR/issue-23305.rs:5:1: 5:24>`, completing the cycle\n+   = note: ...which immediately requires computing type of `<impl at $DIR/issue-23305.rs:5:1: 5:24>` again\n note: cycle used when collecting item types in top-level module\n   --> $DIR/issue-23305.rs:1:1\n    |"}, {"sha": "7f623e47353b93844e778705354cfd6ac99bc1bf", "filename": "src/test/ui/resolve/resolve-self-in-impl.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f48bfa88c1c742ed058fc8af096d8cedc138434/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr?ref=2f48bfa88c1c742ed058fc8af096d8cedc138434", "patch": "@@ -4,7 +4,7 @@ error[E0391]: cycle detected when computing type of `<impl at $DIR/resolve-self-\n LL | impl Tr for Self {}\n    |             ^^^^\n    |\n-   = note: ...which again requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:14:1: 14:20>`, completing the cycle\n+   = note: ...which immediately requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:14:1: 14:20>` again\n note: cycle used when collecting item types in top-level module\n   --> $DIR/resolve-self-in-impl.rs:1:1\n    |\n@@ -23,7 +23,7 @@ error[E0391]: cycle detected when computing type of `<impl at $DIR/resolve-self-\n LL | impl Tr for S<Self> {}\n    |               ^^^^\n    |\n-   = note: ...which again requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:15:1: 15:23>`, completing the cycle\n+   = note: ...which immediately requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:15:1: 15:23>` again\n note: cycle used when collecting item types in top-level module\n   --> $DIR/resolve-self-in-impl.rs:1:1\n    |\n@@ -42,7 +42,7 @@ error[E0391]: cycle detected when computing type of `<impl at $DIR/resolve-self-\n LL | impl Self {}\n    |      ^^^^\n    |\n-   = note: ...which again requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:16:1: 16:13>`, completing the cycle\n+   = note: ...which immediately requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:16:1: 16:13>` again\n note: cycle used when collecting item types in top-level module\n   --> $DIR/resolve-self-in-impl.rs:1:1\n    |\n@@ -61,7 +61,7 @@ error[E0391]: cycle detected when computing type of `<impl at $DIR/resolve-self-\n LL | impl S<Self> {}\n    |        ^^^^\n    |\n-   = note: ...which again requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:17:1: 17:16>`, completing the cycle\n+   = note: ...which immediately requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:17:1: 17:16>` again\n note: cycle used when collecting item types in top-level module\n   --> $DIR/resolve-self-in-impl.rs:1:1\n    |\n@@ -80,7 +80,7 @@ error[E0391]: cycle detected when computing trait implemented by `<impl at $DIR/\n LL | impl Tr<Self::A> for S {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: ...which again requires computing trait implemented by `<impl at $DIR/resolve-self-in-impl.rs:18:1: 18:26>`, completing the cycle\n+   = note: ...which immediately requires computing trait implemented by `<impl at $DIR/resolve-self-in-impl.rs:18:1: 18:26>` again\n note: cycle used when collecting item types in top-level module\n   --> $DIR/resolve-self-in-impl.rs:1:1\n    |"}]}