{"sha": "4ea4dd23cde23a8f3c02d77140ae0eb30a0cee25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYTRkZDIzY2RlMjNhOGYzYzAyZDc3MTQwYWUwZWIzMGEwY2VlMjU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-23T09:47:55Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-23T09:47:55Z"}, "message": "Don't allocate a local array at all if there are no locals", "tree": {"sha": "26a96b009df5a70508ac1b1d7a46517ec86240a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26a96b009df5a70508ac1b1d7a46517ec86240a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ea4dd23cde23a8f3c02d77140ae0eb30a0cee25", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlq0zUsACgkQpp+NIls6\n19m5kA//VPp5yu9B0qoe3eE5QOkjs+vuM0FQkJn0cWeiH+KtyV6u1+bXxnbnlibM\nwFjmgtFY5HBRcAytgXi150wnu6tQ9LXwJOpUSp2BXOCfv1q+beRhvIm+RzxEnAbB\nlTWDgQJgN6wTnIl742Plw7H1m+mCut20Q+4SMsHRjMrVwmahMjtNyGMkqvoILN8O\nO6nZNefJjGHd0lHmwZ9hmj1RGoB7xnMAQP6tc+Falua468S8nEG0HWdX1cuojdLn\ntTsJOAZ80RMPI+K7FxMMSdMtxQE3DHBbavKesvkKr97p0MEN6PIvqKclh4x1xweH\nFj2v8Vu3os5mjiWnoJFc1ez/kUOn8g5/5u+F7Kl/2lETJ1CgVIfyF2rQUUiaop64\n3Yeaf2gPQBERrVJg92CJyATyhKF1lnYmz8aH7ImeLx2ChFwXbpQhg8JCYJUMH4x0\n0WUoQY3+q/hqZySAVLGHFLhrBtS6B3CP8hQISJmLf0B3Mz71bWvn+BmyA+hUY922\nmMSp8la5Jur/UMao5Lh/K+gmmbK4iYTexHrLBQp7PXheqArX2oUVY8ioRfLpbwWj\nlXka09rdOQ0DnJ6HzLVWK5kH72+yb/hweAZWx0HGD6UulqZkLnY2K+FADqLR8K5b\nQeuL0TuzCjiP994ZQXe4zyqrU3H+DMfTQkmcpEuGPWXvdsEU5yo=\n=Fq4U\n-----END PGP SIGNATURE-----", "payload": "tree 26a96b009df5a70508ac1b1d7a46517ec86240a9\nparent b18b776b8fd2c710eae7673320343c39ae55bc19\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1521798475 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1521798475 +0100\n\nDon't allocate a local array at all if there are no locals\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ea4dd23cde23a8f3c02d77140ae0eb30a0cee25", "html_url": "https://github.com/rust-lang/rust/commit/4ea4dd23cde23a8f3c02d77140ae0eb30a0cee25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ea4dd23cde23a8f3c02d77140ae0eb30a0cee25/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b18b776b8fd2c710eae7673320343c39ae55bc19", "url": "https://api.github.com/repos/rust-lang/rust/commits/b18b776b8fd2c710eae7673320343c39ae55bc19", "html_url": "https://github.com/rust-lang/rust/commit/b18b776b8fd2c710eae7673320343c39ae55bc19"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "db4c8f706ba7b66bbcaaaf562775db60932d41b9", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4ea4dd23cde23a8f3c02d77140ae0eb30a0cee25/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea4dd23cde23a8f3c02d77140ae0eb30a0cee25/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=4ea4dd23cde23a8f3c02d77140ae0eb30a0cee25", "patch": "@@ -383,24 +383,30 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n     ) -> EvalResult<'tcx> {\n         ::log_settings::settings().indentation += 1;\n \n-        let mut locals = IndexVec::from_elem(Some(Value::ByVal(PrimVal::Undef)), &mir.local_decls);\n-        match self.tcx.describe_def(instance.def_id()) {\n-            // statics and constants don't have `Storage*` statements, no need to look for them\n-            Some(Def::Static(..)) | Some(Def::Const(..)) | Some(Def::AssociatedConst(..)) => {},\n-            _ => {\n-                trace!(\"push_stack_frame: {:?}: num_bbs: {}\", span, mir.basic_blocks().len());\n-                for block in mir.basic_blocks() {\n-                    for stmt in block.statements.iter() {\n-                        use rustc::mir::StatementKind::{StorageDead, StorageLive};\n-                        match stmt.kind {\n-                            StorageLive(local) |\n-                            StorageDead(local) => locals[local] = None,\n-                            _ => {}\n+        let locals = if mir.local_decls.len() > 1 {\n+            let mut locals = IndexVec::from_elem(Some(Value::ByVal(PrimVal::Undef)), &mir.local_decls);\n+            match self.tcx.describe_def(instance.def_id()) {\n+                // statics and constants don't have `Storage*` statements, no need to look for them\n+                Some(Def::Static(..)) | Some(Def::Const(..)) | Some(Def::AssociatedConst(..)) => {},\n+                _ => {\n+                    trace!(\"push_stack_frame: {:?}: num_bbs: {}\", span, mir.basic_blocks().len());\n+                    for block in mir.basic_blocks() {\n+                        for stmt in block.statements.iter() {\n+                            use rustc::mir::StatementKind::{StorageDead, StorageLive};\n+                            match stmt.kind {\n+                                StorageLive(local) |\n+                                StorageDead(local) => locals[local] = None,\n+                                _ => {}\n+                            }\n                         }\n                     }\n-                }\n-            },\n-        }\n+                },\n+            }\n+            locals\n+        } else {\n+            // don't allocate at all for trivial constants\n+            IndexVec::new()\n+        };\n \n         self.stack.push(Frame {\n             mir,"}]}