{"sha": "eccb28e3d67460f77331eb5ecceab36181831946", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjY2IyOGUzZDY3NDYwZjc3MzMxZWI1ZWNjZWFiMzYxODE4MzE5NDY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-17T00:55:39Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-17T02:18:32Z"}, "message": "ty/print: pretty-print constant aggregates (arrays, tuples and ADTs).", "tree": {"sha": "0be938445b6fb8cc8f28ae44a81dd9c1f3554eb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0be938445b6fb8cc8f28ae44a81dd9c1f3554eb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eccb28e3d67460f77331eb5ecceab36181831946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eccb28e3d67460f77331eb5ecceab36181831946", "html_url": "https://github.com/rust-lang/rust/commit/eccb28e3d67460f77331eb5ecceab36181831946", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eccb28e3d67460f77331eb5ecceab36181831946/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aabed9322e78b280d54fe7a90bb088932731d967", "url": "https://api.github.com/repos/rust-lang/rust/commits/aabed9322e78b280d54fe7a90bb088932731d967", "html_url": "https://github.com/rust-lang/rust/commit/aabed9322e78b280d54fe7a90bb088932731d967"}], "stats": {"total": 97, "additions": 72, "deletions": 25}, "files": [{"sha": "1b94966c3477d5b46a3a21d0c564fe2824b68586", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eccb28e3d67460f77331eb5ecceab36181831946/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eccb28e3d67460f77331eb5ecceab36181831946/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=eccb28e3d67460f77331eb5ecceab36181831946", "patch": "@@ -574,7 +574,7 @@ rustc_queries! {\n             desc { \"extract field of const\" }\n         }\n \n-        /// Destructure a constant ADT or array into its variant indent and its\n+        /// Destructure a constant ADT or array into its variant index and its\n         /// field values.\n         query destructure_const(\n             key: ty::ParamEnvAnd<'tcx, &'tcx ty::Const<'tcx>>"}, {"sha": "85c05515bd73c444f848c1760ec6cb81da6d9b29", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 63, "deletions": 16, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/eccb28e3d67460f77331eb5ecceab36181831946/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eccb28e3d67460f77331eb5ecceab36181831946/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=eccb28e3d67460f77331eb5ecceab36181831946", "patch": "@@ -9,7 +9,7 @@ use rustc_apfloat::Float;\n use rustc_ast::ast;\n use rustc_attr::{SignedInt, UnsignedInt};\n use rustc_hir as hir;\n-use rustc_hir::def::{DefKind, Namespace};\n+use rustc_hir::def::{CtorKind, DefKind, Namespace};\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n use rustc_span::symbol::{kw, Symbol};\n@@ -1037,19 +1037,6 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             // For function type zsts just printing the path is enough\n             (Scalar::Raw { size: 0, .. }, ty::FnDef(d, s)) => p!(print_value_path(*d, s)),\n-            // Empty tuples are frequently occurring, so don't print the fallback.\n-            (Scalar::Raw { size: 0, .. }, ty::Tuple(ts)) if ts.is_empty() => p!(write(\"()\")),\n-            // Zero element arrays have a trivial representation.\n-            (\n-                Scalar::Raw { size: 0, .. },\n-                ty::Array(\n-                    _,\n-                    ty::Const {\n-                        val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::Raw { data: 0, .. })),\n-                        ..\n-                    },\n-                ),\n-            ) => p!(write(\"[]\")),\n             // Nontrivial types with scalar bit representation\n             (Scalar::Raw { data, size }, _) => {\n                 let print = |mut this: Self| {\n@@ -1118,14 +1105,14 @@ pub trait PrettyPrinter<'tcx>:\n         define_scoped_cx!(self);\n \n         if self.tcx().sess.verbose() {\n-            p!(write(\"ConstValue({:?}: {:?})\", ct, ty));\n+            p!(write(\"ConstValue({:?}: \", ct), print(ty), write(\")\"));\n             return Ok(self);\n         }\n \n         let u8_type = self.tcx().types.u8;\n \n         match (ct, &ty.kind) {\n-            (ConstValue::Scalar(scalar), _) => self.pretty_print_const_scalar(scalar, ty, print_ty),\n+            // Byte/string slices, printed as (byte) string literals.\n             (\n                 ConstValue::Slice { data, start, end },\n                 ty::Ref(_, ty::TyS { kind: ty::Slice(t), .. }, _),\n@@ -1159,6 +1146,66 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(pretty_print_byte_str(byte_str));\n                 Ok(self)\n             }\n+\n+            // Aggregates, printed as array/tuple/struct/variant construction syntax.\n+            //\n+            // NB: the `has_param_types_or_consts` check ensures that we can use\n+            // the `destructure_const` query with an empty `ty::ParamEnv` without\n+            // introducing ICEs (e.g. via `layout_of`) from missing bounds.\n+            // E.g. `transmute([0usize; 2]): (u8, *mut T)` needs to know `T: Sized`\n+            // to be able to destructure the tuple into `(0u8, *mut T)\n+            //\n+            // FIXME(eddyb) for `--emit=mir`/`-Z dump-mir`, we should provide the\n+            // correct `ty::ParamEnv` to allow printing *all* constant values.\n+            (_, ty::Array(..) | ty::Tuple(..) | ty::Adt(..)) if !ty.has_param_types_or_consts() => {\n+                let contents = self.tcx().destructure_const(\n+                    ty::ParamEnv::reveal_all()\n+                        .and(self.tcx().mk_const(ty::Const { val: ty::ConstKind::Value(ct), ty })),\n+                );\n+                let fields = contents.fields.iter().copied();\n+\n+                match ty.kind {\n+                    ty::Array(..) => {\n+                        p!(write(\"[\"), comma_sep(fields), write(\"]\"));\n+                    }\n+                    ty::Tuple(..) => {\n+                        p!(write(\"(\"), comma_sep(fields));\n+                        if contents.fields.len() == 1 {\n+                            p!(write(\",\"));\n+                        }\n+                        p!(write(\")\"));\n+                    }\n+                    ty::Adt(def, substs) => {\n+                        let variant_def = &def.variants[contents.variant];\n+                        p!(print_value_path(variant_def.def_id, substs));\n+\n+                        match variant_def.ctor_kind {\n+                            CtorKind::Const => {}\n+                            CtorKind::Fn => {\n+                                p!(write(\"(\"), comma_sep(fields), write(\")\"));\n+                            }\n+                            CtorKind::Fictive => {\n+                                p!(write(\" {{ \"));\n+                                let mut first = true;\n+                                for (field_def, field) in variant_def.fields.iter().zip(fields) {\n+                                    if !first {\n+                                        p!(write(\", \"));\n+                                    }\n+                                    p!(write(\"{}: \", field_def.ident), print(field));\n+                                    first = false;\n+                                }\n+                                p!(write(\" }}\"));\n+                            }\n+                        }\n+                    }\n+                    _ => unreachable!(),\n+                }\n+\n+                Ok(self)\n+            }\n+\n+            (ConstValue::Scalar(scalar), _) => self.pretty_print_const_scalar(scalar, ty, print_ty),\n+\n             // FIXME(oli-obk): also pretty print arrays and other aggregate constants by reading\n             // their fields instead of just dumping the memory.\n             _ => {"}, {"sha": "753c64d6c32982388dbbb00c891d898c1082fd10", "filename": "src/test/mir-opt/const_prop/discriminant/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eccb28e3d67460f77331eb5ecceab36181831946/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/eccb28e3d67460f77331eb5ecceab36181831946/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff?ref=eccb28e3d67460f77331eb5ecceab36181831946", "patch": "@@ -16,7 +16,7 @@\n           StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/discriminant.rs:6:13: 6:64\n           StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n -         _3 = std::option::Option::<bool>::Some(const true); // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n-+         _3 = const {transmute(0x01): std::option::Option<bool>}; // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n++         _3 = const std::option::Option::<bool>::Some(true); // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n                                            // ty::Const\n -                                          // + ty: bool\n +                                          // + ty: std::option::Option<bool>"}, {"sha": "1d8e945f87a6d09a211cf58928b70a32edb46d91", "filename": "src/test/mir-opt/const_prop/discriminant/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eccb28e3d67460f77331eb5ecceab36181831946/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/eccb28e3d67460f77331eb5ecceab36181831946/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff?ref=eccb28e3d67460f77331eb5ecceab36181831946", "patch": "@@ -16,7 +16,7 @@\n           StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/discriminant.rs:6:13: 6:64\n           StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n -         _3 = std::option::Option::<bool>::Some(const true); // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n-+         _3 = const {transmute(0x01): std::option::Option<bool>}; // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n++         _3 = const std::option::Option::<bool>::Some(true); // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n                                            // ty::Const\n -                                          // + ty: bool\n +                                          // + ty: std::option::Option<bool>"}, {"sha": "7f2f7cdb176682a6b69fee9a6ac6c159d20e114d", "filename": "src/test/mir-opt/inline/inline-into-box-place/32bit/rustc.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eccb28e3d67460f77331eb5ecceab36181831946/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/eccb28e3d67460f77331eb5ecceab36181831946/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff?ref=eccb28e3d67460f77331eb5ecceab36181831946", "patch": "@@ -19,7 +19,7 @@\n           _2 = Box(std::vec::Vec<u32>);    // bb0[2]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n -         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // bb0[3]: scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _4 = &mut (*_2);                 // bb0[3]: scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }: alloc::raw_vec::RawVec::<u32>; // bb0[4]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n++         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: std::ptr::Unique::<u32> { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::<u32> }, cap: 0usize, alloc: std::alloc::Global }; // bb0[4]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n                                            // ty::Const\n -                                          // + ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}\n -                                          // + val: Value(Scalar(<ZST>))"}, {"sha": "b968b33ac5274d42c7f0a90d063ab5021469f09b", "filename": "src/test/mir-opt/inline/inline-into-box-place/64bit/rustc.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eccb28e3d67460f77331eb5ecceab36181831946/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/eccb28e3d67460f77331eb5ecceab36181831946/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff?ref=eccb28e3d67460f77331eb5ecceab36181831946", "patch": "@@ -19,7 +19,7 @@\n           _2 = Box(std::vec::Vec<u32>);    // bb0[2]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n -         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // bb0[3]: scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _4 = &mut (*_2);                 // bb0[3]: scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }: alloc::raw_vec::RawVec::<u32>; // bb0[4]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n++         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: std::ptr::Unique::<u32> { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::<u32> }, cap: 0usize, alloc: std::alloc::Global }; // bb0[4]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n                                            // ty::Const\n -                                          // + ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}\n -                                          // + val: Value(Scalar(<ZST>))"}, {"sha": "855ead7ea0554cb45c30faecbbcefdf7f7a1012b", "filename": "src/test/mir-opt/simplify-locals-removes-unused-consts/rustc.main.SimplifyLocals.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eccb28e3d67460f77331eb5ecceab36181831946/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/eccb28e3d67460f77331eb5ecceab36181831946/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff?ref=eccb28e3d67460f77331eb5ecceab36181831946", "patch": "@@ -24,7 +24,7 @@\n -         StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:21: 13:23\n -         _2 = const ();                   // bb0[2]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:21: 13:23\n +         StorageLive(_1);                 // bb0[0]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n-+         _1 = const use_zst(const {transmute(()): ((), ())}) -> bb1; // bb0[1]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n++         _1 = const use_zst(const ((), ())) -> bb1; // bb0[1]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n                                            // ty::Const\n -                                          // + ty: ()\n -                                          // + val: Value(Scalar(<ZST>))\n@@ -39,7 +39,7 @@\n -                                          // mir::Constant\n -                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:13:25: 13:27\n -                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         _1 = const {transmute(()): ((), ())}; // bb0[5]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n+-         _1 = const ((), ());             // bb0[5]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n -                                          // ty::Const\n -                                          // + ty: ((), ())\n -                                          // + val: Value(Scalar(<ZST>))\n@@ -68,7 +68,7 @@\n -                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         StorageDead(_7);                 // bb0[14]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:20: 14:21\n -         StorageDead(_6);                 // bb0[15]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:20: 14:21\n--         _4 = const use_zst(const {transmute(()): ((), ())}) -> bb1; // bb0[16]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n+-         _4 = const use_zst(const ((), ())) -> bb1; // bb0[16]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n -                                          // ty::Const\n                                            // + ty: fn(((), ())) {use_zst}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -88,7 +88,7 @@\n -         StorageLive(_8);                 // bb1[1]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n -         StorageLive(_10);                // bb1[2]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n -         StorageLive(_11);                // bb1[3]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n--         _11 = const {transmute(0x28): Temp}; // bb1[4]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n+-         _11 = const Temp { x: 40u8 };    // bb1[4]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n +         StorageDead(_1);                 // bb1[0]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:22: 14:23\n +         StorageLive(_2);                 // bb1[1]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n +         _2 = const use_u8(const 42u8) -> bb2; // bb1[2]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35"}]}