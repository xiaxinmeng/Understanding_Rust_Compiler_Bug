{"sha": "801e2b7bdf5a5bda966c9e5c81977da3bed1e6d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMWUyYjdiZGY1YTViZGE5NjZjOWU1YzgxOTc3ZGEzYmVkMWU2ZDA=", "commit": {"author": {"name": "Marc-Antoine Perennou", "email": "Marc-Antoine@Perennou.com", "date": "2017-05-18T08:56:25Z"}, "committer": {"name": "Marc-Antoine Perennou", "email": "Marc-Antoine@Perennou.com", "date": "2017-05-18T16:59:06Z"}, "message": "rustbuild: refactor install\n\nIntroduce a new Installer object that hold a reference to all the\nconfigured paths for installation\n\nSigned-off-by: Marc-Antoine Perennou <Marc-Antoine@Perennou.com>", "tree": {"sha": "55c703eb6155549b79744ee75a79562d205cc2d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55c703eb6155549b79744ee75a79562d205cc2d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/801e2b7bdf5a5bda966c9e5c81977da3bed1e6d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/801e2b7bdf5a5bda966c9e5c81977da3bed1e6d0", "html_url": "https://github.com/rust-lang/rust/commit/801e2b7bdf5a5bda966c9e5c81977da3bed1e6d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/801e2b7bdf5a5bda966c9e5c81977da3bed1e6d0/comments", "author": {"login": "Keruspe", "id": 222942, "node_id": "MDQ6VXNlcjIyMjk0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/222942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Keruspe", "html_url": "https://github.com/Keruspe", "followers_url": "https://api.github.com/users/Keruspe/followers", "following_url": "https://api.github.com/users/Keruspe/following{/other_user}", "gists_url": "https://api.github.com/users/Keruspe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Keruspe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Keruspe/subscriptions", "organizations_url": "https://api.github.com/users/Keruspe/orgs", "repos_url": "https://api.github.com/users/Keruspe/repos", "events_url": "https://api.github.com/users/Keruspe/events{/privacy}", "received_events_url": "https://api.github.com/users/Keruspe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Keruspe", "id": 222942, "node_id": "MDQ6VXNlcjIyMjk0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/222942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Keruspe", "html_url": "https://github.com/Keruspe", "followers_url": "https://api.github.com/users/Keruspe/followers", "following_url": "https://api.github.com/users/Keruspe/following{/other_user}", "gists_url": "https://api.github.com/users/Keruspe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Keruspe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Keruspe/subscriptions", "organizations_url": "https://api.github.com/users/Keruspe/orgs", "repos_url": "https://api.github.com/users/Keruspe/repos", "events_url": "https://api.github.com/users/Keruspe/events{/privacy}", "received_events_url": "https://api.github.com/users/Keruspe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecfdc9ac1b5ad416661c46cea8075a8a85a09233", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecfdc9ac1b5ad416661c46cea8075a8a85a09233", "html_url": "https://github.com/rust-lang/rust/commit/ecfdc9ac1b5ad416661c46cea8075a8a85a09233"}], "stats": {"total": 179, "additions": 98, "deletions": 81}, "files": [{"sha": "dce0b1670e181612c25fb045b992e036154e3d99", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 97, "deletions": 80, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/801e2b7bdf5a5bda966c9e5c81977da3bed1e6d0/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801e2b7bdf5a5bda966c9e5c81977da3bed1e6d0/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=801e2b7bdf5a5bda966c9e5c81977da3bed1e6d0", "patch": "@@ -21,93 +21,110 @@ use std::process::Command;\n use Build;\n use dist::{sanitize_sh, tmpdir};\n \n-/// Installs everything.\n-pub fn install(build: &Build, stage: u32, host: &str) {\n-    let prefix_default = PathBuf::from(\"/usr/local\");\n-    let sysconfdir_default = PathBuf::from(\"/etc\");\n-    let docdir_default = PathBuf::from(\"share/doc/rust\");\n-    let bindir_default = PathBuf::from(\"bin\");\n-    let libdir_default = PathBuf::from(\"lib\");\n-    let mandir_default = PathBuf::from(\"share/man\");\n-    let prefix = build.config.prefix.as_ref().unwrap_or(&prefix_default);\n-    let sysconfdir = build.config.sysconfdir.as_ref().unwrap_or(&sysconfdir_default);\n-    let docdir = build.config.docdir.as_ref().unwrap_or(&docdir_default);\n-    let bindir = build.config.bindir.as_ref().unwrap_or(&bindir_default);\n-    let libdir = build.config.libdir.as_ref().unwrap_or(&libdir_default);\n-    let mandir = build.config.mandir.as_ref().unwrap_or(&mandir_default);\n-\n-    let sysconfdir = prefix.join(sysconfdir);\n-    let docdir = prefix.join(docdir);\n-    let bindir = prefix.join(bindir);\n-    let libdir = prefix.join(libdir);\n-    let mandir = prefix.join(mandir);\n-\n-    let destdir = env::var_os(\"DESTDIR\").map(PathBuf::from);\n-\n-    let prefix = add_destdir(&prefix, &destdir);\n-    let sysconfdir = add_destdir(&sysconfdir, &destdir);\n-    let docdir = add_destdir(&docdir, &destdir);\n-    let bindir = add_destdir(&bindir, &destdir);\n-    let libdir = add_destdir(&libdir, &destdir);\n-    let mandir = add_destdir(&mandir, &destdir);\n-\n-    let empty_dir = build.out.join(\"tmp/empty_dir\");\n-    t!(fs::create_dir_all(&empty_dir));\n-    if build.config.docs {\n-        install_sh(&build, \"docs\", \"rust-docs\", &build.rust_package_vers(),\n-                   stage, Some(host), &prefix, &sysconfdir, &docdir, &bindir, &libdir,\n-                   &mandir, &empty_dir);\n-    }\n+pub struct Installer<'a> {\n+    build: &'a Build,\n+    prefix: PathBuf,\n+    sysconfdir: PathBuf,\n+    docdir: PathBuf,\n+    bindir: PathBuf,\n+    libdir: PathBuf,\n+    mandir: PathBuf,\n+}\n \n-    for target in build.config.target.iter() {\n-        install_sh(&build, \"std\", \"rust-std\", &build.rust_package_vers(),\n-                   stage, Some(target), &prefix, &sysconfdir, &docdir, &bindir, &libdir,\n-                   &mandir, &empty_dir);\n-    }\n+impl<'a> Installer<'a> {\n+    pub fn new(build: &'a Build) -> Installer<'a> {\n+        let prefix_default = PathBuf::from(\"/usr/local\");\n+        let sysconfdir_default = PathBuf::from(\"/etc\");\n+        let docdir_default = PathBuf::from(\"share/doc/rust\");\n+        let bindir_default = PathBuf::from(\"bin\");\n+        let libdir_default = PathBuf::from(\"lib\");\n+        let mandir_default = PathBuf::from(\"share/man\");\n+        let prefix = build.config.prefix.as_ref().unwrap_or(&prefix_default);\n+        let sysconfdir = build.config.sysconfdir.as_ref().unwrap_or(&sysconfdir_default);\n+        let docdir = build.config.docdir.as_ref().unwrap_or(&docdir_default);\n+        let bindir = build.config.bindir.as_ref().unwrap_or(&bindir_default);\n+        let libdir = build.config.libdir.as_ref().unwrap_or(&libdir_default);\n+        let mandir = build.config.mandir.as_ref().unwrap_or(&mandir_default);\n+\n+        let sysconfdir = prefix.join(sysconfdir);\n+        let docdir = prefix.join(docdir);\n+        let bindir = prefix.join(bindir);\n+        let libdir = prefix.join(libdir);\n+        let mandir = prefix.join(mandir);\n+\n+        let destdir = env::var_os(\"DESTDIR\").map(PathBuf::from);\n \n-    if build.config.extended {\n-        install_sh(&build, \"cargo\", \"cargo\", &build.cargo_package_vers(),\n-                   stage, Some(host), &prefix, &sysconfdir, &docdir, &bindir, &libdir,\n-                   &mandir, &empty_dir);\n-        install_sh(&build, \"rls\", \"rls\", &build.rls_package_vers(),\n-                   stage, Some(host), &prefix, &sysconfdir, &docdir, &bindir, &libdir,\n-                   &mandir, &empty_dir);\n-        install_sh(&build, \"analysis\", \"rust-analysis\", &build.rust_package_vers(),\n-                   stage, Some(host), &prefix, &sysconfdir, &docdir, &bindir, &libdir,\n-                   &mandir, &empty_dir);\n-        install_sh(&build, \"src\", \"rust-src\", &build.rust_package_vers(),\n-                   stage, None, &prefix, &sysconfdir, &docdir, &bindir, &libdir,\n-                   &mandir, &empty_dir);\n+        let prefix = add_destdir(&prefix, &destdir);\n+        let sysconfdir = add_destdir(&sysconfdir, &destdir);\n+        let docdir = add_destdir(&docdir, &destdir);\n+        let bindir = add_destdir(&bindir, &destdir);\n+        let libdir = add_destdir(&libdir, &destdir);\n+        let mandir = add_destdir(&mandir, &destdir);\n+\n+        Installer {\n+            build,\n+            prefix,\n+            sysconfdir,\n+            docdir,\n+            bindir,\n+            libdir,\n+            mandir,\n+        }\n     }\n \n-    install_sh(&build, \"rustc\", \"rustc\", &build.rust_package_vers(),\n-               stage, Some(host), &prefix, &sysconfdir, &docdir, &bindir, &libdir,\n-               &mandir, &empty_dir);\n+    /// Installs everything.\n+    pub fn install(&self, stage: u32, host: &str) {\n+        let empty_dir = self.build.out.join(\"tmp/empty_dir\");\n+        t!(fs::create_dir_all(&empty_dir));\n \n-    t!(fs::remove_dir_all(&empty_dir));\n-}\n+        if self.build.config.docs {\n+            self.install_sh(\"docs\", \"rust-docs\", &self.build.rust_package_vers(),\n+                            stage, Some(host), &empty_dir);\n+        }\n \n-fn install_sh(build: &Build, package: &str, name: &str, version: &str, stage: u32, host: Option<&str>,\n-              prefix: &Path, sysconfdir: &Path, docdir: &Path, bindir: &Path, libdir: &Path,\n-              mandir: &Path, empty_dir: &Path) {\n-    println!(\"Install {} stage{} ({:?})\", package, stage, host);\n-    let package_name = if let Some(host) = host {\n-        format!(\"{}-{}-{}\", name, version, host)\n-    } else {\n-        format!(\"{}-{}\", name, version)\n-    };\n+        for target in self.build.config.target.iter() {\n+            self.install_sh(\"std\", \"rust-std\", &self.build.rust_package_vers(),\n+                            stage, Some(target), &empty_dir);\n+        }\n+\n+        if self.build.config.extended {\n+            self.install_sh(\"cargo\", \"cargo\", &self.build.cargo_package_vers(),\n+                            stage, Some(host), &empty_dir);\n+            self.install_sh(\"rls\", \"rls\", &self.build.rls_package_vers(),\n+                            stage, Some(host), &empty_dir);\n+            self.install_sh(\"analysis\", \"rust-analysis\", &self.build.rust_package_vers(),\n+                            stage, Some(host), &empty_dir);\n+            self.install_sh(\"src\", \"rust-src\", &self.build.rust_package_vers(),\n+                            stage, None, &empty_dir);\n+        }\n+\n+        self.install_sh(\"rustc\", \"rustc\", &self.build.rust_package_vers(),\n+                        stage, Some(host), &empty_dir);\n \n-    let mut cmd = Command::new(\"sh\");\n-    cmd.current_dir(empty_dir)\n-       .arg(sanitize_sh(&tmpdir(build).join(&package_name).join(\"install.sh\")))\n-       .arg(format!(\"--prefix={}\", sanitize_sh(prefix)))\n-       .arg(format!(\"--sysconfdir={}\", sanitize_sh(sysconfdir)))\n-       .arg(format!(\"--docdir={}\", sanitize_sh(docdir)))\n-       .arg(format!(\"--bindir={}\", sanitize_sh(bindir)))\n-       .arg(format!(\"--libdir={}\", sanitize_sh(libdir)))\n-       .arg(format!(\"--mandir={}\", sanitize_sh(mandir)))\n-       .arg(\"--disable-ldconfig\");\n-    build.run(&mut cmd);\n+        t!(fs::remove_dir_all(&empty_dir));\n+    }\n+\n+    fn install_sh(&self, package: &str, name: &str, version: &str,\n+                  stage: u32, host: Option<&str>,  empty_dir: &Path) {\n+        println!(\"Install {} stage{} ({:?})\", package, stage, host);\n+        let package_name = if let Some(host) = host {\n+            format!(\"{}-{}-{}\", name, version, host)\n+        } else {\n+            format!(\"{}-{}\", name, version)\n+        };\n+\n+        let mut cmd = Command::new(\"sh\");\n+        cmd.current_dir(empty_dir)\n+           .arg(sanitize_sh(&tmpdir(self.build).join(&package_name).join(\"install.sh\")))\n+           .arg(format!(\"--prefix={}\", sanitize_sh(&self.prefix)))\n+           .arg(format!(\"--sysconfdir={}\", sanitize_sh(&self.sysconfdir)))\n+           .arg(format!(\"--docdir={}\", sanitize_sh(&self.docdir)))\n+           .arg(format!(\"--bindir={}\", sanitize_sh(&self.bindir)))\n+           .arg(format!(\"--libdir={}\", sanitize_sh(&self.libdir)))\n+           .arg(format!(\"--mandir={}\", sanitize_sh(&self.mandir)))\n+           .arg(\"--disable-ldconfig\");\n+        self.build.run(&mut cmd);\n+    }\n }\n \n fn add_destdir(path: &Path, destdir: &Option<PathBuf>) -> PathBuf {"}, {"sha": "57915446e1d1aee8e94586284d7b2546abd5c8fb", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/801e2b7bdf5a5bda966c9e5c81977da3bed1e6d0/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801e2b7bdf5a5bda966c9e5c81977da3bed1e6d0/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=801e2b7bdf5a5bda966c9e5c81977da3bed1e6d0", "patch": "@@ -761,7 +761,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .run(move |s| dist::rls(build, s.stage, s.target));\n     rules.dist(\"install\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"default:dist\"))\n-         .run(move |s| install::install(build, s.stage, s.target));\n+         .run(move |s| install::Installer::new(build).install(s.stage, s.target));\n     rules.dist(\"dist-cargo\", \"cargo\")\n          .host(true)\n          .only_host_build(true)"}]}