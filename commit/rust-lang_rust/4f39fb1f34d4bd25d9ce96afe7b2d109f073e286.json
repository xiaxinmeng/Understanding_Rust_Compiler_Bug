{"sha": "4f39fb1f34d4bd25d9ce96afe7b2d109f073e286", "node_id": "C_kwDOAAsO6NoAKDRmMzlmYjFmMzRkNGJkMjVkOWNlOTZhZmU3YjJkMTA5ZjA3M2UyODY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-28T14:30:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-28T14:30:25Z"}, "message": "Auto merge of #97383 - dingxiangfei2009:restore-region-scope-tree-query, r=dingxiangfei2009\n\nTry to cache region_scope_tree as a query\n\nThis PR will attempt to restore `region_scope_tree` as a query so that caching works again. It seems that `region_scope_tree` could be re-computed for nested items after all, which could explain the performance regression introduced by #95563.\n\ncc `@Mark-Simulacrum` `@pnkfelix` I will try to trigger a perf run here.", "tree": {"sha": "73a66a95c0b507e918eebbe19541db7a6956874d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73a66a95c0b507e918eebbe19541db7a6956874d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286", "html_url": "https://github.com/rust-lang/rust/commit/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68314177e70017c08f6cdf295631bb508f9f85bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/68314177e70017c08f6cdf295631bb508f9f85bc", "html_url": "https://github.com/rust-lang/rust/commit/68314177e70017c08f6cdf295631bb508f9f85bc"}, {"sha": "cd76f2e6090c6be8022a546e8a0238efa439dbfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd76f2e6090c6be8022a546e8a0238efa439dbfa", "html_url": "https://github.com/rust-lang/rust/commit/cd76f2e6090c6be8022a546e8a0238efa439dbfa"}], "stats": {"total": 77, "additions": 35, "deletions": 42}, "files": [{"sha": "984c95b314ba8fd41ec83f1a53cc60acba0e7672", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=4f39fb1f34d4bd25d9ce96afe7b2d109f073e286", "patch": "@@ -31,6 +31,7 @@ macro_rules! arena_types {\n             [decode] unsafety_check_result: rustc_middle::mir::UnsafetyCheckResult,\n             [decode] code_region: rustc_middle::mir::coverage::CodeRegion,\n             [] const_allocs: rustc_middle::mir::interpret::Allocation,\n+            [] region_scope_tree: rustc_middle::middle::region::ScopeTree,\n             // Required for the incremental on-disk cache\n             [] mir_keys: rustc_hir::def_id::DefIdSet,\n             [] dropck_outlives:"}, {"sha": "38d8e0b5819530f00a7914fa7936f7e2c426984e", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=4f39fb1f34d4bd25d9ce96afe7b2d109f073e286", "patch": "@@ -1044,6 +1044,12 @@ rustc_queries! {\n         desc { \"reachability\" }\n     }\n \n+    /// Per-body `region::ScopeTree`. The `DefId` should be the owner `DefId` for the body;\n+    /// in the case of closures, this will be redirected to the enclosing function.\n+    query region_scope_tree(def_id: DefId) -> &'tcx crate::middle::region::ScopeTree {\n+        desc { |tcx| \"computing drop scopes for `{}`\", tcx.def_path_str(def_id) }\n+    }\n+\n     /// Generates a MIR body for the shim.\n     query mir_shims(key: ty::InstanceDef<'tcx>) -> mir::Body<'tcx> {\n         storage(ArenaCacheSelector<'tcx>)"}, {"sha": "3c08db5dc6814304ec2117d2e435ae7201311a90", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=4f39fb1f34d4bd25d9ce96afe7b2d109f073e286", "patch": "@@ -6,7 +6,6 @@ use crate::hir::place::Place as HirPlace;\n use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n use crate::lint::{struct_lint_level, LintDiagnosticBuilder, LintLevelSource};\n use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n-use crate::middle::region::ScopeTree;\n use crate::middle::resolve_lifetime::{self, LifetimeScopeForPath};\n use crate::middle::stability;\n use crate::mir::interpret::{self, Allocation, ConstAllocation, ConstValue, Scalar};\n@@ -538,12 +537,6 @@ pub struct TypeckResults<'tcx> {\n     /// issue by fake reading `t`.\n     pub closure_fake_reads: FxHashMap<DefId, Vec<(HirPlace<'tcx>, FakeReadCause, hir::HirId)>>,\n \n-    /// Tracks critical information about regions in a body.\n-    /// This includes containment relationship between regions,\n-    /// liveness relationship between variables and regions and\n-    /// information about yield points.\n-    pub region_scope_tree: ScopeTree,\n-\n     /// Tracks the rvalue scoping rules which defines finer scoping for rvalue expressions\n     /// by applying extended parameter rules.\n     /// Details may be find in `rustc_typeck::check::rvalue_scopes`.\n@@ -586,7 +579,6 @@ impl<'tcx> TypeckResults<'tcx> {\n             concrete_opaque_types: Default::default(),\n             closure_min_captures: Default::default(),\n             closure_fake_reads: Default::default(),\n-            region_scope_tree: Default::default(),\n             rvalue_scopes: Default::default(),\n             generator_interior_types: ty::Binder::dummy(Default::default()),\n             treat_byte_string_as_slice: Default::default(),"}, {"sha": "a83328c0cabc63c9e679271525f10b86402e8edb", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=4f39fb1f34d4bd25d9ce96afe7b2d109f073e286", "patch": "@@ -108,8 +108,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     let_scope_stack.push(remainder_scope);\n \n                     // Declare the bindings, which may create a source scope.\n-                    let remainder_span =\n-                        remainder_scope.span(this.tcx, &this.typeck_results.region_scope_tree);\n+                    let remainder_span = remainder_scope.span(this.tcx, this.region_scope_tree);\n \n                     let visibility_scope =\n                         Some(this.new_source_scope(remainder_span, LintLevel::Inherited, None));"}, {"sha": "15660365938a0c4034a58b43e07733831cdf56e0", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=4f39fb1f34d4bd25d9ce96afe7b2d109f073e286", "patch": "@@ -700,7 +700,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.cfg.push(block, Statement { source_info, kind: StatementKind::StorageLive(local_id) });\n         // Altough there is almost always scope for given variable in corner cases\n         // like #92893 we might get variable with no scope.\n-        if let Some(region_scope) = self.typeck_results.region_scope_tree.var_scope(var.local_id) && schedule_drop{\n+        if let Some(region_scope) = self.region_scope_tree.var_scope(var.local_id) && schedule_drop{\n             self.schedule_drop(span, region_scope, local_id, DropKind::Storage);\n         }\n         Place::from(local_id)\n@@ -713,7 +713,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         for_guard: ForGuard,\n     ) {\n         let local_id = self.var_local_id(var, for_guard);\n-        if let Some(region_scope) = self.typeck_results.region_scope_tree.var_scope(var.local_id) {\n+        if let Some(region_scope) = self.region_scope_tree.var_scope(var.local_id) {\n             self.schedule_drop(span, region_scope, local_id, DropKind::Value);\n         }\n     }"}, {"sha": "4ae74433df63dc7051cb9ad61169ac4437b13b15", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=4f39fb1f34d4bd25d9ce96afe7b2d109f073e286", "patch": "@@ -398,6 +398,7 @@ struct Builder<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     infcx: &'a InferCtxt<'a, 'tcx>,\n     typeck_results: &'tcx TypeckResults<'tcx>,\n+    region_scope_tree: &'tcx region::ScopeTree,\n     param_env: ty::ParamEnv<'tcx>,\n \n     thir: &'a Thir<'tcx>,\n@@ -880,6 +881,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             tcx,\n             infcx,\n             typeck_results: tcx.typeck_opt_const_arg(def),\n+            region_scope_tree: tcx.region_scope_tree(def.did),\n             param_env,\n             def_id: def.did.to_def_id(),\n             hir_id,"}, {"sha": "b9fd8c50e6a047fb593411dfc8b07afa23b591e9", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=4f39fb1f34d4bd25d9ce96afe7b2d109f073e286", "patch": "@@ -916,8 +916,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n \n             if scope.region_scope == region_scope {\n-                let region_scope_span =\n-                    region_scope.span(self.tcx, &self.typeck_results.region_scope_tree);\n+                let region_scope_span = region_scope.span(self.tcx, &self.region_scope_tree);\n                 // Attribute scope exit drops to scope's closing brace.\n                 let scope_end = self.tcx.sess.source_map().end_point(region_scope_span);\n "}, {"sha": "d853a5e9ee797d87d0e16a2cd97c54dcc1b1a498", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=4f39fb1f34d4bd25d9ce96afe7b2d109f073e286", "patch": "@@ -72,7 +72,7 @@ impl<'tcx> Cx<'tcx> {\n             tcx,\n             thir: Thir::new(),\n             param_env: tcx.param_env(def.did),\n-            region_scope_tree: &typeck_results.region_scope_tree,\n+            region_scope_tree: tcx.region_scope_tree(def.did),\n             typeck_results,\n             rvalue_scopes: &typeck_results.rvalue_scopes,\n             body_owner: def.did.to_def_id(),"}, {"sha": "ac2dc6522adc206223c634e37ca2d5f31f6373b3", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=4f39fb1f34d4bd25d9ce96afe7b2d109f073e286", "patch": "@@ -4,7 +4,7 @@ use crate::astconv::{\n };\n use crate::check::callee::{self, DeferredCallResolution};\n use crate::check::method::{self, MethodCallee, SelfSource};\n-use crate::check::{region, rvalue_scopes};\n+use crate::check::rvalue_scopes;\n use crate::check::{BreakableCtxt, Diverges, Expectation, FnCtxt, LocalTy};\n \n use rustc_data_structures::captures::Captures;\n@@ -622,10 +622,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     pub(in super::super) fn resolve_rvalue_scopes(&self, def_id: DefId) {\n-        let scope_tree = region::region_scope_tree(self.tcx, def_id);\n+        let scope_tree = self.tcx.region_scope_tree(def_id);\n         let rvalue_scopes = { rvalue_scopes::resolve_rvalue_scopes(self, &scope_tree, def_id) };\n         let mut typeck_results = self.inh.typeck_results.borrow_mut();\n-        typeck_results.region_scope_tree = scope_tree;\n         typeck_results.rvalue_scopes = rvalue_scopes;\n     }\n "}, {"sha": "f09c7f51f47143a6e71ee84c551d745da7fc8b4a", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=4f39fb1f34d4bd25d9ce96afe7b2d109f073e286", "patch": "@@ -184,7 +184,7 @@ pub fn resolve_interior<'a, 'tcx>(\n     let mut visitor = InteriorVisitor {\n         fcx,\n         types: FxIndexSet::default(),\n-        region_scope_tree: &typeck_results.region_scope_tree,\n+        region_scope_tree: fcx.tcx.region_scope_tree(def_id),\n         rvalue_scopes: &typeck_results.rvalue_scopes,\n         expr_count: 0,\n         kind,\n@@ -195,7 +195,7 @@ pub fn resolve_interior<'a, 'tcx>(\n     intravisit::walk_body(&mut visitor, body);\n \n     // Check that we visited the same amount of expressions as the RegionResolutionVisitor\n-    let region_expr_count = typeck_results.region_scope_tree.body_expr_count(body_id).unwrap();\n+    let region_expr_count = fcx.tcx.region_scope_tree(def_id).body_expr_count(body_id).unwrap();\n     assert_eq!(region_expr_count, visitor.expr_count);\n \n     // The types are already kept in insertion order."}, {"sha": "c2b4c478ba387456995ae14a866f75d7a1769845", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs?ref=4f39fb1f34d4bd25d9ce96afe7b2d109f073e286", "patch": "@@ -42,7 +42,7 @@ pub fn compute_drop_ranges<'a, 'tcx>(\n         let consumed_borrowed_places = find_consumed_and_borrowed(fcx, def_id, body);\n \n         let typeck_results = &fcx.typeck_results.borrow();\n-        let num_exprs = typeck_results.region_scope_tree.body_expr_count(body.id()).unwrap_or(0);\n+        let num_exprs = fcx.tcx.region_scope_tree(def_id).body_expr_count(body.id()).unwrap_or(0);\n         let (mut drop_ranges, borrowed_temporaries) = build_control_flow_graph(\n             fcx.tcx.hir(),\n             fcx.tcx,"}, {"sha": "e26f211c1c189724ec614fb03c550e1d3c797952", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=4f39fb1f34d4bd25d9ce96afe7b2d109f073e286", "patch": "@@ -139,6 +139,7 @@ use crate::require_c_abi_if_c_variadic;\n use crate::util::common::indenter;\n \n use self::coercion::DynamicCoerceMany;\n+use self::region::region_scope_tree;\n pub use self::Expectation::*;\n \n #[macro_export]\n@@ -256,6 +257,7 @@ pub fn provide(providers: &mut Providers) {\n         check_trait_item_well_formed,\n         check_impl_item_well_formed,\n         check_mod_item_types,\n+        region_scope_tree,\n         ..*providers\n     };\n }"}, {"sha": "6c89c12b4709b8685ac2d74d0c46dc2669c4ecf3", "filename": "compiler/rustc_typeck/src/check/region.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs?ref=4f39fb1f34d4bd25d9ce96afe7b2d109f073e286", "patch": "@@ -797,14 +797,19 @@ impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n \n /// Per-body `region::ScopeTree`. The `DefId` should be the owner `DefId` for the body;\n /// in the case of closures, this will be redirected to the enclosing function.\n-pub fn region_scope_tree(tcx: TyCtxt<'_>, def_id: DefId) -> ScopeTree {\n+///\n+/// Performance: This is a query rather than a simple function to enable\n+/// re-use in incremental scenarios. We may sometimes need to rerun the\n+/// type checker even when the HIR hasn't changed, and in those cases\n+/// we can avoid reconstructing the region scope tree.\n+pub fn region_scope_tree(tcx: TyCtxt<'_>, def_id: DefId) -> &ScopeTree {\n     let typeck_root_def_id = tcx.typeck_root_def_id(def_id);\n     if typeck_root_def_id != def_id {\n-        return region_scope_tree(tcx, typeck_root_def_id);\n+        return tcx.region_scope_tree(typeck_root_def_id);\n     }\n \n     let id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-    if let Some(body_id) = tcx.hir().maybe_body_owned_by(id) {\n+    let scope_tree = if let Some(body_id) = tcx.hir().maybe_body_owned_by(id) {\n         let mut visitor = RegionResolutionVisitor {\n             tcx,\n             scope_tree: ScopeTree::default(),\n@@ -821,5 +826,7 @@ pub fn region_scope_tree(tcx: TyCtxt<'_>, def_id: DefId) -> ScopeTree {\n         visitor.scope_tree\n     } else {\n         ScopeTree::default()\n-    }\n+    };\n+\n+    tcx.arena.alloc(scope_tree)\n }"}, {"sha": "a295bcf4089008503ced37633e4bbb6a64ad38f9", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=4f39fb1f34d4bd25d9ce96afe7b2d109f073e286", "patch": "@@ -71,8 +71,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         wbcx.visit_user_provided_sigs();\n         wbcx.visit_generator_interior_types();\n \n-        wbcx.typeck_results.region_scope_tree =\n-            mem::take(&mut self.typeck_results.borrow_mut().region_scope_tree);\n         wbcx.typeck_results.rvalue_scopes =\n             mem::take(&mut self.typeck_results.borrow_mut().rvalue_scopes);\n "}, {"sha": "4f85364965b699c4e827894809fb4e226e56129d", "filename": "src/tools/clippy/clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=4f39fb1f34d4bd25d9ce96afe7b2d109f073e286", "patch": "@@ -55,11 +55,7 @@ pub(super) fn check<'tcx>(\n                 // ensure that the indexed variable was declared before the loop, see #601\n                 if let Some(indexed_extent) = indexed_extent {\n                     let parent_def_id = cx.tcx.hir().get_parent_item(expr.hir_id);\n-                    let parent_body_id = cx\n-                        .tcx\n-                        .hir()\n-                        .body_owned_by(cx.tcx.hir().local_def_id_to_hir_id(parent_def_id));\n-                    let region_scope_tree = &cx.tcx.typeck_body(parent_body_id).region_scope_tree;\n+                    let region_scope_tree = cx.tcx.region_scope_tree(parent_def_id);\n                     let pat_extent = region_scope_tree.var_scope(pat.hir_id.local_id).unwrap();\n                     if region_scope_tree.is_subscope_of(indexed_extent, pat_extent) {\n                         return;\n@@ -282,14 +278,9 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n                 match res {\n                     Res::Local(hir_id) => {\n                         let parent_def_id = self.cx.tcx.hir().get_parent_item(expr.hir_id);\n-                        let parent_body_id = self.cx\n-                            .tcx\n-                            .hir()\n-                            .body_owned_by(self.cx.tcx.hir().local_def_id_to_hir_id(parent_def_id));\n                         let extent = self.cx\n                             .tcx\n-                            .typeck_body(parent_body_id)\n-                            .region_scope_tree\n+                            .region_scope_tree(parent_def_id)\n                             .var_scope(hir_id.local_id)\n                             .unwrap();\n                         if index_used_directly {"}, {"sha": "2a80e6f918de2c9979a39ee0709db510a197b7ea", "filename": "src/tools/clippy/clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f39fb1f34d4bd25d9ce96afe7b2d109f073e286/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs?ref=4f39fb1f34d4bd25d9ce96afe7b2d109f073e286", "patch": "@@ -162,10 +162,7 @@ fn is_shadow(\n     first: ItemLocalId,\n     second: ItemLocalId,\n ) -> bool {\n-    let scope_tree = &cx\n-        .tcx\n-        .typeck_body(cx.tcx.hir().body_owned_by(cx.tcx.hir().local_def_id_to_hir_id(owner)))\n-        .region_scope_tree;\n+    let scope_tree = cx.tcx.region_scope_tree(owner);\n     let first_scope = scope_tree.var_scope(first).unwrap();\n     let second_scope = scope_tree.var_scope(second).unwrap();\n     scope_tree.is_subscope_of(second_scope, first_scope)"}]}