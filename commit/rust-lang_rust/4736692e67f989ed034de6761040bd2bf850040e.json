{"sha": "4736692e67f989ed034de6761040bd2bf850040e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MzY2OTJlNjdmOTg5ZWQwMzRkZTY3NjEwNDBiZDJiZjg1MDA0MGU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-14T12:28:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-14T12:28:37Z"}, "message": "Merge pull request #772 from RalfJung/sysroot\n\nFix sysroot handling", "tree": {"sha": "59f3f8b8d2711d4a040eb6b7274b2263f000bafe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59f3f8b8d2711d4a040eb6b7274b2263f000bafe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4736692e67f989ed034de6761040bd2bf850040e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdA5L1CRBK7hj4Ov3rIwAAdHIIAK7hSoXPSTAvGqY6s531y2Et\nejme5xYFrOIyYd2CpiOt6oy/HHPpoOXRuF7RY/a3AmU6BaFSyv0bV12Y8MqzRfct\nV9Muj9FRztKlc5q1dP+d47n1WEA1mtLOVSJUvvr20F+Cx+yYS6TJe9QuUDPN/jfJ\n4ci0tYgDihxFNHnczeNKmuzSXVy6bhLYLuVPeSXA6UaUfFMIK3wz5a2evmhAuIVu\n6NwyhUIf1yTVkZQIQ3aFPC6mZTerTWbNPKEpxGZUREKu2HVoUBcw5HF0UqssjNCZ\ngZ8MmMaOlcd9e2SsHhevSOH7ZSm1z+k9u8c+kYf8r39cDfSKPXnvctQhNMBT4hI=\n=DVGT\n-----END PGP SIGNATURE-----\n", "payload": "tree 59f3f8b8d2711d4a040eb6b7274b2263f000bafe\nparent 965160d4d7976ddead182b4a65b73f59818537de\nparent 34b0922cec2eac41c7c204ca234fcd4a85b08615\nauthor Ralf Jung <post@ralfj.de> 1560515317 +0200\ncommitter GitHub <noreply@github.com> 1560515317 +0200\n\nMerge pull request #772 from RalfJung/sysroot\n\nFix sysroot handling"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4736692e67f989ed034de6761040bd2bf850040e", "html_url": "https://github.com/rust-lang/rust/commit/4736692e67f989ed034de6761040bd2bf850040e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4736692e67f989ed034de6761040bd2bf850040e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "965160d4d7976ddead182b4a65b73f59818537de", "url": "https://api.github.com/repos/rust-lang/rust/commits/965160d4d7976ddead182b4a65b73f59818537de", "html_url": "https://github.com/rust-lang/rust/commit/965160d4d7976ddead182b4a65b73f59818537de"}, {"sha": "34b0922cec2eac41c7c204ca234fcd4a85b08615", "url": "https://api.github.com/repos/rust-lang/rust/commits/34b0922cec2eac41c7c204ca234fcd4a85b08615", "html_url": "https://github.com/rust-lang/rust/commit/34b0922cec2eac41c7c204ca234fcd4a85b08615"}], "stats": {"total": 49, "additions": 29, "deletions": 20}, "files": [{"sha": "3b7af9324194533bb4226b4fba50ebc20a2a150a", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4736692e67f989ed034de6761040bd2bf850040e/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4736692e67f989ed034de6761040bd2bf850040e/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=4736692e67f989ed034de6761040bd2bf850040e", "patch": "@@ -133,11 +133,12 @@ fn test_sysroot_consistency() {\n     fn get_sysroot(mut cmd: Command) -> PathBuf {\n         let out = cmd.arg(\"--print\").arg(\"sysroot\")\n             .output().expect(\"Failed to run rustc to get sysroot info\");\n-        assert!(out.status.success(), \"Bad status code when getting sysroot info\");\n-        let sysroot = out.stdout.lines().nth(0)\n-            .expect(\"didn't get at least one line for the sysroot\").unwrap();\n-        PathBuf::from(sysroot).canonicalize()\n-            .expect(\"Failed to canonicalize sysroot\")\n+        let stdout = String::from_utf8(out.stdout).expect(\"stdout is not valid UTF-8\");\n+        let stderr = String::from_utf8(out.stderr).expect(\"stderr is not valid UTF-8\");\n+        let stdout = stdout.trim();\n+        assert!(out.status.success(), \"Bad status code when getting sysroot info.\\nstdout:\\n{}\\nstderr:\\n{}\", stdout, stderr);\n+        PathBuf::from(stdout).canonicalize()\n+            .unwrap_or_else(|_| panic!(\"Failed to canonicalize sysroot: {}\", stdout))\n     }\n \n     let rustc_sysroot = get_sysroot(Command::new(\"rustc\"));"}, {"sha": "5a425baf0f61fb62ad1aa9127412b8af554ba988", "filename": "src/bin/miri.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4736692e67f989ed034de6761040bd2bf850040e/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4736692e67f989ed034de6761040bd2bf850040e/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=4736692e67f989ed034de6761040bd2bf850040e", "patch": "@@ -102,21 +102,26 @@ fn init_late_loggers() {\n \n /// Returns the \"default sysroot\" that Miri will use if no `--sysroot` flag is set.\n /// Should be a compile-time constant.\n-fn compile_time_sysroot() -> String {\n+fn compile_time_sysroot() -> Option<String> {\n+    if option_env!(\"RUSTC_STAGE\").is_some() {\n+        // This is being built as part of rustc, and gets shipped with rustup.\n+        // We can rely on the sysroot computation in librustc.\n+        return None;\n+    }\n+    // For builds outside rustc, we need to ensure that we got a sysroot\n+    // that gets used as a default.  The sysroot computation in librustc would\n+    // end up somewhere in the build dir.\n     // Taken from PR <https://github.com/Manishearth/rust-clippy/pull/911>.\n     let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n     let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n-    match (home, toolchain) {\n+    Some(match (home, toolchain) {\n         (Some(home), Some(toolchain)) => format!(\"{}/toolchains/{}\", home, toolchain),\n         _ => {\n             option_env!(\"RUST_SYSROOT\")\n-                .expect(\n-                    \"could not find sysroot. Either set `MIRI_SYSROOT` at run-time, or at \\\n-                     build-time specify `RUST_SYSROOT` env var or use rustup or multirust\",\n-                )\n+                .expect(\"To build Miri without rustup, set the `RUST_SYSROOT` env var at build time\")\n                 .to_owned()\n         }\n-    }\n+    })\n }\n \n fn main() {\n@@ -165,14 +170,17 @@ fn main() {\n         }\n     }\n \n-    // Determine sysroot.\n-    let sysroot_flag = \"--sysroot\".to_string();\n-    if !rustc_args.contains(&sysroot_flag) {\n-        // We need to *always* set a --sysroot, as the \"default\" rustc uses is\n-        // somewhere in the directory miri was built in.\n-        // If no --sysroot is given, fall back to env vars that are read at *compile-time*.\n-        rustc_args.push(sysroot_flag);\n-        rustc_args.push(compile_time_sysroot());\n+    // Determine sysroot if needed.  Make sure we always call `compile_time_sysroot`\n+    // as that also does some sanity-checks of the environment we were built in.\n+    // FIXME: Ideally we'd turn a bad build env into a compile-time error, but\n+    // CTFE does not seem powerful enough for that yet.\n+    if let Some(sysroot) = compile_time_sysroot() {\n+        let sysroot_flag = \"--sysroot\".to_string();\n+        if !rustc_args.contains(&sysroot_flag) {\n+            // We need to overwrite the default that librustc would compute.\n+            rustc_args.push(sysroot_flag);\n+            rustc_args.push(sysroot);\n+        }\n     }\n \n     // Finally, add the default flags all the way in the beginning, but after the binary name."}]}