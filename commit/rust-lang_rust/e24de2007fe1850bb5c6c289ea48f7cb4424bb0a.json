{"sha": "e24de2007fe1850bb5c6c289ea48f7cb4424bb0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNGRlMjAwN2ZlMTg1MGJiNWM2YzI4OWVhNDhmN2NiNDQyNGJiMGE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-12T21:24:26Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-24T14:52:37Z"}, "message": "collector changes WIP", "tree": {"sha": "3a9c5ba115d843d6bf12a4b497cfc111f3363845", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a9c5ba115d843d6bf12a4b497cfc111f3363845"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e24de2007fe1850bb5c6c289ea48f7cb4424bb0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e24de2007fe1850bb5c6c289ea48f7cb4424bb0a", "html_url": "https://github.com/rust-lang/rust/commit/e24de2007fe1850bb5c6c289ea48f7cb4424bb0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e24de2007fe1850bb5c6c289ea48f7cb4424bb0a/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "696a7a5a410f419cf7f6638d9f4894802640adf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/696a7a5a410f419cf7f6638d9f4894802640adf8", "html_url": "https://github.com/rust-lang/rust/commit/696a7a5a410f419cf7f6638d9f4894802640adf8"}], "stats": {"total": 63, "additions": 34, "deletions": 29}, "files": [{"sha": "9dee4f43d304547cc32b15ac40b97e2813b1da33", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e24de2007fe1850bb5c6c289ea48f7cb4424bb0a/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24de2007fe1850bb5c6c289ea48f7cb4424bb0a/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=e24de2007fe1850bb5c6c289ea48f7cb4424bb0a", "patch": "@@ -82,8 +82,8 @@ impl ItemTree {\n \n     /// Returns an iterator over all items located at the top level of the `HirFileId` this\n     /// `ItemTree` was created from.\n-    pub fn top_level_items(&self) -> impl Iterator<Item = ModItem> + '_ {\n-        self.top_level.iter().copied()\n+    pub fn top_level_items(&self) -> &[ModItem] {\n+        &self.top_level\n     }\n }\n \n@@ -120,7 +120,7 @@ impl_index!(\n );\n \n /// A desugared `extern crate` or `use` import.\n-#[derive(Debug, Eq, PartialEq)]\n+#[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Import {\n     pub path: ModPath,\n     pub alias: Option<ImportAlias>,\n@@ -220,6 +220,12 @@ pub struct Mod {\n     pub items: Vec<ModItem>,\n }\n \n+pub enum ModKind {\n+    Inline { items: Vec<ModItem> },\n+\n+    Outline {},\n+}\n+\n #[derive(Debug, Eq, PartialEq)]\n pub struct MacroCall {\n     pub name: Option<Name>,"}, {"sha": "034f27410750e4db265c66e51529a7b0988f36e7", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e24de2007fe1850bb5c6c289ea48f7cb4424bb0a/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24de2007fe1850bb5c6c289ea48f7cb4424bb0a/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=e24de2007fe1850bb5c6c289ea48f7cb4424bb0a", "patch": "@@ -19,9 +19,10 @@ use test_utils::mark;\n use crate::{\n     attr::Attrs,\n     db::DefDatabase,\n+    item_tree::{Import, ItemTree, Mod, ModItem},\n     nameres::{\n         diagnostics::DefDiagnostic, mod_resolution::ModDir, path_resolution::ReachedFixedPoint,\n-        raw, BuiltinShadowMode, CrateDefMap, ModuleData, ModuleOrigin, ResolveMode,\n+        BuiltinShadowMode, CrateDefMap, ModuleData, ModuleOrigin, ResolveMode,\n     },\n     path::{ImportAlias, ModPath, PathKind},\n     per_ns::PerNs,\n@@ -30,6 +31,7 @@ use crate::{\n     FunctionLoc, ImplLoc, Intern, LocalModuleId, ModuleDefId, ModuleId, StaticLoc, StructLoc,\n     TraitLoc, TypeAliasLoc, UnionLoc,\n };\n+use ra_arena::Idx;\n \n pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: CrateDefMap) -> CrateDefMap {\n     let crate_graph = db.crate_graph();\n@@ -104,8 +106,8 @@ impl PartialResolvedImport {\n #[derive(Clone, Debug, Eq, PartialEq)]\n struct ImportDirective {\n     module_id: LocalModuleId,\n-    import_id: raw::Import,\n-    import: raw::ImportData,\n+    import_id: Idx<Import>,\n+    import: Import,\n     status: PartialResolvedImport,\n }\n \n@@ -140,18 +142,18 @@ struct DefCollector<'a> {\n impl DefCollector<'_> {\n     fn collect(&mut self) {\n         let file_id = self.db.crate_graph()[self.def_map.krate].root_file_id;\n-        let raw_items = self.db.raw_items(file_id.into());\n+        let item_tree = self.db.item_tree(file_id.into());\n         let module_id = self.def_map.root;\n         self.def_map.modules[module_id].origin = ModuleOrigin::CrateRoot { definition: file_id };\n         ModCollector {\n             def_collector: &mut *self,\n             macro_depth: 0,\n             module_id,\n             file_id: file_id.into(),\n-            raw_items: &raw_items,\n+            item_tree: &item_tree,\n             mod_dir: ModDir::root(),\n         }\n-        .collect(raw_items.items());\n+        .collect(item_tree.top_level_items());\n \n         // main name resolution fixed-point loop.\n         let mut i = 0;\n@@ -286,7 +288,7 @@ impl DefCollector<'_> {\n     fn import_macros_from_extern_crate(\n         &mut self,\n         current_module_id: LocalModuleId,\n-        import: &raw::ImportData,\n+        import: &Import,\n     ) {\n         log::debug!(\n             \"importing macros from extern crate: {:?} ({:?})\",\n@@ -352,11 +354,7 @@ impl DefCollector<'_> {\n         }\n     }\n \n-    fn resolve_import(\n-        &self,\n-        module_id: LocalModuleId,\n-        import: &raw::ImportData,\n-    ) -> PartialResolvedImport {\n+    fn resolve_import(&self, module_id: LocalModuleId, import: &Import) -> PartialResolvedImport {\n         log::debug!(\"resolving import: {:?} ({:?})\", import, self.def_map.edition);\n         if import.is_extern_crate {\n             let res = self.def_map.resolve_name_in_extern_prelude(\n@@ -649,17 +647,17 @@ impl DefCollector<'_> {\n         depth: usize,\n     ) {\n         let file_id: HirFileId = macro_call_id.as_file();\n-        let raw_items = self.db.raw_items(file_id);\n+        let item_tree = self.db.item_tree(file_id);\n         let mod_dir = self.mod_dirs[&module_id].clone();\n         ModCollector {\n             def_collector: &mut *self,\n             macro_depth: depth,\n             file_id,\n             module_id,\n-            raw_items: &raw_items,\n+            item_tree: &item_tree,\n             mod_dir,\n         }\n-        .collect(raw_items.items());\n+        .collect(item_tree.top_level_items());\n     }\n \n     fn finish(self) -> CrateDefMap {\n@@ -673,12 +671,12 @@ struct ModCollector<'a, 'b> {\n     macro_depth: usize,\n     module_id: LocalModuleId,\n     file_id: HirFileId,\n-    raw_items: &'a raw::RawItems,\n+    item_tree: &'a ItemTree,\n     mod_dir: ModDir,\n }\n \n impl ModCollector<'_, '_> {\n-    fn collect(&mut self, items: &[raw::RawItem]) {\n+    fn collect(&mut self, items: &[ModItem]) {\n         // Note: don't assert that inserted value is fresh: it's simply not true\n         // for macros.\n         self.def_collector.mod_dirs.insert(self.module_id, self.mod_dir.clone());\n@@ -697,7 +695,7 @@ impl ModCollector<'_, '_> {\n         for item in items {\n             if self.is_cfg_enabled(&item.attrs) {\n                 if let raw::RawItemKind::Import(import_id) = item.kind {\n-                    let import = self.raw_items[import_id].clone();\n+                    let import = self.item_tree[import_id].clone();\n                     if import.is_extern_crate && import.is_macro_use {\n                         self.def_collector.import_macros_from_extern_crate(self.module_id, &import);\n                     }\n@@ -709,27 +707,27 @@ impl ModCollector<'_, '_> {\n             if self.is_cfg_enabled(&item.attrs) {\n                 match item.kind {\n                     raw::RawItemKind::Module(m) => {\n-                        self.collect_module(&self.raw_items[m], &item.attrs)\n+                        self.collect_module(&self.item_tree[m], &item.attrs)\n                     }\n                     raw::RawItemKind::Import(import_id) => {\n                         self.def_collector.unresolved_imports.push(ImportDirective {\n                             module_id: self.module_id,\n                             import_id,\n-                            import: self.raw_items[import_id].clone(),\n+                            import: self.item_tree[import_id].clone(),\n                             status: PartialResolvedImport::Unresolved,\n                         })\n                     }\n                     raw::RawItemKind::Def(def) => {\n-                        self.define_def(&self.raw_items[def], &item.attrs)\n+                        self.define_def(&self.item_tree[def], &item.attrs)\n                     }\n-                    raw::RawItemKind::Macro(mac) => self.collect_macro(&self.raw_items[mac]),\n+                    raw::RawItemKind::Macro(mac) => self.collect_macro(&self.item_tree[mac]),\n                     raw::RawItemKind::Impl(imp) => {\n                         let module = ModuleId {\n                             krate: self.def_collector.def_map.krate,\n                             local_id: self.module_id,\n                         };\n                         let container = ContainerId::ModuleId(module);\n-                        let ast_id = self.raw_items[imp].ast_id;\n+                        let ast_id = self.item_tree[imp].ast_id;\n                         let impl_id =\n                             ImplLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n                                 .intern(self.def_collector.db);\n@@ -742,7 +740,7 @@ impl ModCollector<'_, '_> {\n         }\n     }\n \n-    fn collect_module(&mut self, module: &raw::ModuleData, attrs: &Attrs) {\n+    fn collect_module(&mut self, module: &Mod, attrs: &Attrs) {\n         let path_attr = attrs.by_key(\"path\").string_value();\n         let is_macro_use = attrs.by_key(\"macro_use\").exists();\n         match module {\n@@ -760,7 +758,7 @@ impl ModCollector<'_, '_> {\n                     macro_depth: self.macro_depth,\n                     module_id,\n                     file_id: self.file_id,\n-                    raw_items: self.raw_items,\n+                    item_tree: self.item_tree,\n                     mod_dir: self.mod_dir.descend_into_definition(name, path_attr),\n                 }\n                 .collect(&*items);\n@@ -790,7 +788,7 @@ impl ModCollector<'_, '_> {\n                             macro_depth: self.macro_depth,\n                             module_id,\n                             file_id: file_id.into(),\n-                            raw_items: &raw_items,\n+                            item_tree: &raw_items,\n                             mod_dir,\n                         }\n                         .collect(raw_items.items());"}, {"sha": "d83a5b2b56f399dc03c5705bdf1aa9e2bf383e99", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e24de2007fe1850bb5c6c289ea48f7cb4424bb0a/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24de2007fe1850bb5c6c289ea48f7cb4424bb0a/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=e24de2007fe1850bb5c6c289ea48f7cb4424bb0a", "patch": "@@ -46,6 +46,7 @@ pub struct RawItems {\n impl RawItems {\n     pub(crate) fn raw_items_query(db: &dyn DefDatabase, file_id: HirFileId) -> Arc<RawItems> {\n         let _p = profile(\"raw_items_query\");\n+        db.item_tree(file_id);\n         let mut collector = RawItemsCollector {\n             raw_items: RawItems::default(),\n             source_ast_id_map: db.ast_id_map(file_id),"}]}