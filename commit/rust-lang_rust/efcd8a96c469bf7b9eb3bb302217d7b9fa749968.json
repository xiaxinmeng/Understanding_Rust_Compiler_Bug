{"sha": "efcd8a96c469bf7b9eb3bb302217d7b9fa749968", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmY2Q4YTk2YzQ2OWJmN2I5ZWIzYmIzMDIyMTdkN2I5ZmE3NDk5Njg=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-12-26T17:16:50Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-12-26T17:16:50Z"}, "message": "DIrect invocations of `AllocRef::alloc` cannot get optimized away", "tree": {"sha": "4f1fcb309e893369618cd5e625fae2fffd4da07e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f1fcb309e893369618cd5e625fae2fffd4da07e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efcd8a96c469bf7b9eb3bb302217d7b9fa749968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efcd8a96c469bf7b9eb3bb302217d7b9fa749968", "html_url": "https://github.com/rust-lang/rust/commit/efcd8a96c469bf7b9eb3bb302217d7b9fa749968", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efcd8a96c469bf7b9eb3bb302217d7b9fa749968/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fba17e3f8d00acf67f1fe86590c4e9c0671dd2bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fba17e3f8d00acf67f1fe86590c4e9c0671dd2bc", "html_url": "https://github.com/rust-lang/rust/commit/fba17e3f8d00acf67f1fe86590c4e9c0671dd2bc"}], "stats": {"total": 21, "additions": 0, "deletions": 21}, "files": [{"sha": "c61c19cc7d1d1a3c94f080f8d7038273c132dd45", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/efcd8a96c469bf7b9eb3bb302217d7b9fa749968/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcd8a96c469bf7b9eb3bb302217d7b9fa749968/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=efcd8a96c469bf7b9eb3bb302217d7b9fa749968", "patch": "@@ -94,27 +94,6 @@ pub unsafe trait AllocRef {\n     /// The returned block may have a larger size than specified by `layout.size()`, and may or may\n     /// not have its contents initialized.\n     ///\n-    /// Note that you may not rely on this method actually getting called, even if there are calls\n-    /// to it in the source. The optimizer may detect unused allocations that it can either\n-    /// eliminate entirely or move to the stack and thus never invoke the allocator. The\n-    /// optimizer may further assume that allocation is infallible, so code that used to fail due\n-    /// to allocator failures may now suddenly work because the optimizer worked around the\n-    /// need for an allocation. More concretely, the following code example is unsound, irrespective\n-    /// of whether your custom allocator allows counting how many allocations have happened.\n-    ///\n-    /// ```rust,ignore (unsound and has placeholders)\n-    /// Global::dealloc(Global::alloc(some_layout));\n-    /// let number_of_heap_allocs = /* call private allocator API */;\n-    /// unsafe { std::intrinsics::assume(number_of_heap_allocs > 0); }\n-    /// ```\n-    ///\n-    /// Note that the optimizations mentioned above are not the only\n-    /// optimization that can be applied. You may generally not rely on heap allocations\n-    /// happening if they can be removed without changing program behavior.\n-    /// Whether allocations happen or not is not part of the program behavior, even if it\n-    /// could be detected via an allocator that tracks allocations by printing or otherwise\n-    /// having side effects.\n-    ///\n     /// # Errors\n     ///\n     /// Returning `Err` indicates that either memory is exhausted or `layout` does not meet"}]}