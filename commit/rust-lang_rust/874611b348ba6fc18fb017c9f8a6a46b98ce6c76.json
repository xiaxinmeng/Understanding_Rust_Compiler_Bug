{"sha": "874611b348ba6fc18fb017c9f8a6a46b98ce6c76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NDYxMWIzNDhiYTZmYzE4ZmIwMTdjOWY4YTZhNDZiOThjZTZjNzY=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-31T04:15:55Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-31T07:54:13Z"}, "message": "repr: print the name of structs", "tree": {"sha": "6c3c0327beb6b994068eb400ac3762c65b07b9e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c3c0327beb6b994068eb400ac3762c65b07b9e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/874611b348ba6fc18fb017c9f8a6a46b98ce6c76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/874611b348ba6fc18fb017c9f8a6a46b98ce6c76", "html_url": "https://github.com/rust-lang/rust/commit/874611b348ba6fc18fb017c9f8a6a46b98ce6c76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a225951e3c35cb634ab4ab700d043689fbabd70", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a225951e3c35cb634ab4ab700d043689fbabd70", "html_url": "https://github.com/rust-lang/rust/commit/6a225951e3c35cb634ab4ab700d043689fbabd70"}], "stats": {"total": 84, "additions": 50, "deletions": 34}, "files": [{"sha": "b6cb47efc7670a85941764055f684ae6e9bc427b", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=874611b348ba6fc18fb017c9f8a6a46b98ce6c76", "patch": "@@ -252,8 +252,8 @@ impl Reflector {\n               let tcx = bcx.ccx().tcx;\n               let fields = ty::struct_fields(tcx, did, substs);\n \n-              let extra = ~[self.c_uint(fields.len())]\n-                  + self.c_size_and_align(t);\n+              let extra = ~[self.c_slice(ty_to_str(tcx, t).to_managed()),\n+                            self.c_uint(fields.len())] + self.c_size_and_align(t);\n               do self.bracketed(\"class\", extra) |this| {\n                   for (i, field) in fields.iter().enumerate() {\n                       let extra = ~[this.c_uint(i),"}, {"sha": "7b352e7806e6209bd0124a636d4ca4a94932c7ed", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=874611b348ba6fc18fb017c9f8a6a46b98ce6c76", "patch": "@@ -331,17 +331,15 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n-    fn visit_enter_class(&mut self, n_fields: uint, sz: uint, align: uint)\n-                      -> bool {\n+    fn visit_enter_class(&mut self, name: &str, n_fields: uint, sz: uint, align: uint) -> bool {\n         self.align(align);\n-        if ! self.inner.visit_enter_class(n_fields, sz, align) {\n+        if ! self.inner.visit_enter_class(name, n_fields, sz, align) {\n             return false;\n         }\n         true\n     }\n \n-    fn visit_class_field(&mut self, i: uint, name: &str,\n-                         mtbl: uint, inner: *TyDesc) -> bool {\n+    fn visit_class_field(&mut self, i: uint, name: &str, mtbl: uint, inner: *TyDesc) -> bool {\n         unsafe { self.align((*inner).align); }\n         if ! self.inner.visit_class_field(i, name, mtbl, inner) {\n             return false;\n@@ -350,9 +348,8 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n-    fn visit_leave_class(&mut self, n_fields: uint, sz: uint, align: uint)\n-                      -> bool {\n-        if ! self.inner.visit_leave_class(n_fields, sz, align) {\n+    fn visit_leave_class(&mut self, name: &str, n_fields: uint, sz: uint, align: uint) -> bool {\n+        if ! self.inner.visit_leave_class(name, n_fields, sz, align) {\n             return false;\n         }\n         true"}, {"sha": "cc7d08847da4627f88da07d7b82dacaf57ebfa6d", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=874611b348ba6fc18fb017c9f8a6a46b98ce6c76", "patch": "@@ -346,7 +346,6 @@ impl<'self> TyVisitor for ReprVisitor<'self> {\n     // Type no longer exists, vestigial function.\n     fn visit_vec(&mut self, _mtbl: uint, _inner: *TyDesc) -> bool { fail!(); }\n \n-\n     fn visit_unboxed_vec(&mut self, mtbl: uint, inner: *TyDesc) -> bool {\n         do self.get::<raw::Vec<()>> |this, b| {\n             this.write_unboxed_vec_repr(mtbl, b, inner);\n@@ -413,11 +412,13 @@ impl<'self> TyVisitor for ReprVisitor<'self> {\n         true\n     }\n \n-    fn visit_enter_class(&mut self, _n_fields: uint,\n+    fn visit_enter_class(&mut self, name: &str, _n_fields: uint,\n                          _sz: uint, _align: uint) -> bool {\n+        self.writer.write(name.as_bytes());\n         self.writer.write(['{' as u8]);\n         true\n     }\n+\n     fn visit_class_field(&mut self, i: uint, name: &str,\n                          mtbl: uint, inner: *TyDesc) -> bool {\n         if i != 0 {\n@@ -429,7 +430,8 @@ impl<'self> TyVisitor for ReprVisitor<'self> {\n         self.visit_inner(inner);\n         true\n     }\n-    fn visit_leave_class(&mut self, _n_fields: uint,\n+\n+    fn visit_leave_class(&mut self, _name: &str, _n_fields: uint,\n                          _sz: uint, _align: uint) -> bool {\n         self.writer.write(['}' as u8]);\n         true\n@@ -440,13 +442,15 @@ impl<'self> TyVisitor for ReprVisitor<'self> {\n         self.writer.write(['(' as u8]);\n         true\n     }\n+\n     fn visit_tup_field(&mut self, i: uint, inner: *TyDesc) -> bool {\n         if i != 0 {\n             self.writer.write(\", \".as_bytes());\n         }\n         self.visit_inner(inner);\n         true\n     }\n+\n     fn visit_leave_tup(&mut self, _n_fields: uint,\n                        _sz: uint, _align: uint) -> bool {\n         if _n_fields == 1 {\n@@ -544,12 +548,15 @@ impl<'self> TyVisitor for ReprVisitor<'self> {\n \n     fn visit_enter_fn(&mut self, _purity: uint, _proto: uint,\n                       _n_inputs: uint, _retstyle: uint) -> bool { true }\n+\n     fn visit_fn_input(&mut self, _i: uint, _mode: uint, _inner: *TyDesc) -> bool {\n         true\n     }\n+\n     fn visit_fn_output(&mut self, _retstyle: uint, _inner: *TyDesc) -> bool {\n         true\n     }\n+\n     fn visit_leave_fn(&mut self, _purity: uint, _proto: uint,\n                       _n_inputs: uint, _retstyle: uint) -> bool { true }\n \n@@ -628,11 +635,11 @@ fn test_repr() {\n     exact_test(&(&[\"hi\", \"there\"]),\n                \"&[\\\"hi\\\", \\\"there\\\"]\");\n     exact_test(&(P{a:10, b:1.234}),\n-               \"{a: 10, b: 1.234}\");\n+               \"repr::P{a: 10, b: 1.234}\");\n     exact_test(&(@P{a:10, b:1.234}),\n-               \"@{a: 10, b: 1.234}\");\n+               \"@repr::P{a: 10, b: 1.234}\");\n     exact_test(&(~P{a:10, b:1.234}),\n-               \"~{a: 10, b: 1.234}\");\n+               \"~repr::P{a: 10, b: 1.234}\");\n     exact_test(&(10u8, ~\"hello\"),\n                \"(10u8, ~\\\"hello\\\")\");\n     exact_test(&(10u16, ~\"hello\"),\n@@ -643,5 +650,5 @@ fn test_repr() {\n                \"(10u64, ~\\\"hello\\\")\");\n \n     struct Foo;\n-    exact_test(&(~[Foo, Foo, Foo]), \"~[{}, {}, {}]\");\n+    exact_test(&(~[Foo, Foo]), \"~[repr::test_repr::Foo{}, repr::test_repr::Foo{}]\");\n }"}, {"sha": "8e0f6255e09744d18a6a75649cf2fcaac4398e29", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=874611b348ba6fc18fb017c9f8a6a46b98ce6c76", "patch": "@@ -220,11 +220,11 @@ pub trait TyVisitor {\n     fn visit_leave_rec(&mut self, n_fields: uint,\n                        sz: uint, align: uint) -> bool;\n \n-    fn visit_enter_class(&mut self, n_fields: uint,\n+    fn visit_enter_class(&mut self, name: &str, n_fields: uint,\n                          sz: uint, align: uint) -> bool;\n     fn visit_class_field(&mut self, i: uint, name: &str,\n                          mtbl: uint, inner: *TyDesc) -> bool;\n-    fn visit_leave_class(&mut self, n_fields: uint,\n+    fn visit_leave_class(&mut self, name: &str, n_fields: uint,\n                          sz: uint, align: uint) -> bool;\n \n     fn visit_enter_tup(&mut self, n_fields: uint,"}, {"sha": "f596520ba9509e3c8327627777190067a8fd4555", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=874611b348ba6fc18fb017c9f8a6a46b98ce6c76", "patch": "@@ -3681,10 +3681,12 @@ mod tests {\n         assert_eq!(cnt, 11);\n \n         let xs = ~[Foo, Foo, Foo];\n-        assert_eq!(fmt!(\"%?\", xs.slice(0, 2).to_owned()), ~\"~[{}, {}]\");\n+        assert_eq!(fmt!(\"%?\", xs.slice(0, 2).to_owned()),\n+                   ~\"~[vec::tests::Foo{}, vec::tests::Foo{}]\");\n \n         let xs: [Foo, ..3] = [Foo, Foo, Foo];\n-        assert_eq!(fmt!(\"%?\", xs.slice(0, 2).to_owned()), ~\"~[{}, {}]\");\n+        assert_eq!(fmt!(\"%?\", xs.slice(0, 2).to_owned()),\n+                   ~\"~[vec::tests::Foo{}, vec::tests::Foo{}]\");\n         cnt = 0;\n         for f in xs.iter() {\n             assert!(*f == Foo);"}, {"sha": "682ac822aa7dbecde476d0a0e87dfee4c20517df", "filename": "src/test/run-pass/fixed_length_vec_glue.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs?ref=874611b348ba6fc18fb017c9f8a6a46b98ce6c76", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-fast\n+\n use std::sys;\n \n struct Struc { a: u8, b: [int, ..3], c: int }\n@@ -16,5 +18,5 @@ pub fn main() {\n     let arr = [1,2,3];\n     let struc = Struc {a: 13u8, b: arr, c: 42};\n     let s = sys::log_str(&struc);\n-    assert_eq!(s, ~\"{a: 13u8, b: [1, 2, 3], c: 42}\");\n+    assert_eq!(s, ~\"Struc{a: 13u8, b: [1, 2, 3], c: 42}\");\n }"}, {"sha": "32bb30720c50c9d145e5a0f1a26fadb12d68c5d9", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=874611b348ba6fc18fb017c9f8a6a46b98ce6c76", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-fast\n+\n use std::fmt;\n \n struct A;\n@@ -27,7 +29,7 @@ pub fn main() {\n \n     // Make sure there's a poly formatter that takes anything\n     t!(format!(\"{:?}\", 1), \"1\");\n-    t!(format!(\"{:?}\", A), \"{}\");\n+    t!(format!(\"{:?}\", A), \"A{}\");\n     t!(format!(\"{:?}\", ()), \"()\");\n     t!(format!(\"{:?}\", @(~1, \"foo\")), \"@(~1, \\\"foo\\\")\");\n "}, {"sha": "9b1f6c0005601dec6a5ed53440504aafc7c235c7", "filename": "src/test/run-pass/rec-align-u32.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u32.rs?ref=874611b348ba6fc18fb017c9f8a6a46b98ce6c76", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-fast\n+\n // Issue #2303\n \n use std::sys;\n@@ -64,6 +66,6 @@ pub fn main() {\n         // because `inner`s alignment was 4.\n         assert_eq!(sys::size_of::<Outer>(), m::size());\n \n-        assert_eq!(y, ~\"{c8: 22u8, t: {c64: 44u32}}\");\n+        assert_eq!(y, ~\"Outer{c8: 22u8, t: Inner{c64: 44u32}}\");\n     }\n }"}, {"sha": "e4bd5c4eba705e77e2c340fc26dfb3b5bb7f7e5c", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=874611b348ba6fc18fb017c9f8a6a46b98ce6c76", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-fast\n+\n // Issue #2303\n \n use std::sys;\n@@ -86,6 +88,6 @@ pub fn main() {\n         // because `Inner`s alignment was 4.\n         assert_eq!(sys::size_of::<Outer>(), m::m::size());\n \n-        assert_eq!(y, ~\"{c8: 22u8, t: {c64: 44u64}}\");\n+        assert_eq!(y, ~\"Outer{c8: 22u8, t: Inner{c64: 44u64}}\");\n     }\n }"}, {"sha": "85fc5a5ecb43913b88c2b185459feedd104a06cd", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=874611b348ba6fc18fb017c9f8a6a46b98ce6c76", "patch": "@@ -318,10 +318,10 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n         true\n     }\n \n-    fn visit_enter_class(&mut self, n_fields: uint, sz: uint, align: uint)\n+    fn visit_enter_class(&mut self, name: &str, n_fields: uint, sz: uint, align: uint)\n                       -> bool {\n         self.align(align);\n-        if ! self.inner.visit_enter_class(n_fields, sz, align) {\n+        if ! self.inner.visit_enter_class(name, n_fields, sz, align) {\n             return false;\n         }\n         true\n@@ -335,9 +335,9 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n         true\n     }\n \n-    fn visit_leave_class(&mut self, n_fields: uint, sz: uint, align: uint)\n+    fn visit_leave_class(&mut self, name: &str, n_fields: uint, sz: uint, align: uint)\n                       -> bool {\n-        if ! self.inner.visit_leave_class(n_fields, sz, align) {\n+        if ! self.inner.visit_leave_class(name, n_fields, sz, align) {\n             return false;\n         }\n         true\n@@ -566,13 +566,13 @@ impl TyVisitor for my_visitor {\n     fn visit_leave_rec(&mut self, _n_fields: uint,\n                        _sz: uint, _align: uint) -> bool { true }\n \n-    fn visit_enter_class(&mut self, _n_fields: uint,\n+    fn visit_enter_class(&mut self, _name: &str, _n_fields: uint,\n                          _sz: uint, _align: uint) -> bool { true }\n     fn visit_class_field(&mut self, _i: uint, _name: &str,\n                          _mtbl: uint, inner: *TyDesc) -> bool {\n         self.visit_inner(inner)\n     }\n-    fn visit_leave_class(&mut self, _n_fields: uint,\n+    fn visit_leave_class(&mut self, _name: &str, _n_fields: uint,\n                          _sz: uint, _align: uint) -> bool { true }\n \n     fn visit_enter_tup(&mut self, _n_fields: uint,"}, {"sha": "32df437698360cdaddb69f9c2bf1fad18adf227c", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=874611b348ba6fc18fb017c9f8a6a46b98ce6c76", "patch": "@@ -99,11 +99,11 @@ impl TyVisitor for MyVisitor {\n     fn visit_leave_rec(&mut self, _n_fields: uint,\n                        _sz: uint, _align: uint) -> bool { true }\n \n-    fn visit_enter_class(&mut self, _n_fields: uint,\n+    fn visit_enter_class(&mut self, _name: &str, _n_fields: uint,\n                          _sz: uint, _align: uint) -> bool { true }\n     fn visit_class_field(&mut self, _i: uint, _name: &str,\n                          _mtbl: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_leave_class(&mut self, _n_fields: uint,\n+    fn visit_leave_class(&mut self, _name: &str, _n_fields: uint,\n                          _sz: uint, _align: uint) -> bool { true }\n \n     fn visit_enter_tup(&mut self, _n_fields: uint,"}, {"sha": "2075ed354bc46cefc8260b2958f9b32d93965456", "filename": "src/test/run-pass/tag-align-shape.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874611b348ba6fc18fb017c9f8a6a46b98ce6c76/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs?ref=874611b348ba6fc18fb017c9f8a6a46b98ce6c76", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-fast\n+\n enum a_tag {\n     a_tag(u64)\n }\n@@ -21,5 +23,5 @@ pub fn main() {\n     let x = t_rec {c8: 22u8, t: a_tag(44u64)};\n     let y = fmt!(\"%?\", x);\n     info!(\"y = %s\", y);\n-    assert_eq!(y, ~\"{c8: 22u8, t: a_tag(44u64)}\");\n+    assert_eq!(y, ~\"t_rec{c8: 22u8, t: a_tag(44u64)}\");\n }"}]}