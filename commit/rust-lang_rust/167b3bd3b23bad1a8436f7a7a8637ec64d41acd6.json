{"sha": "167b3bd3b23bad1a8436f7a7a8637ec64d41acd6", "node_id": "C_kwDOAAsO6NoAKDE2N2IzYmQzYjIzYmFkMWE4NDM2ZjdhN2E4NjM3ZWM2NGQ0MWFjZDY", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-10-10T18:03:19Z"}, "committer": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-10-14T20:35:56Z"}, "message": "Get rid of `rustc_query_description!`\n\nQueries can provide an arbitrary expression for their description and\ntheir caching behavior. Before, these expressions where stored in a\n`rustc_query_description` macro emitted by the `rustc_queries` macro,\nand then used in `rustc_query_impl` to fill out the methods for the\n`QueryDescription` trait.\n\nInstead, we now emit two new modules from `rustc_queries` containing the\nfunctions with the expressions. `rustc_query_impl` calls these functions\nnow instead of invoking the macro.\n\nSince we are now defining some of the functions in\n`rustc_middle::query`, we now need all the imports for the key types\nthere as well.", "tree": {"sha": "8239fb89e62cd625be57da581e0a1e1e188fe8dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8239fb89e62cd625be57da581e0a1e1e188fe8dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/167b3bd3b23bad1a8436f7a7a8637ec64d41acd6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgWnoWpkMvJlSFxMiZfPmQ9OBZ0B\nzicY1KArCIU18CM8IAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQN3FJQBWX1R1/cs5sP5W2zLYFQJmY6jWQL+NSVxX0BdhtyRlVCYX/pK5N3aWUpNNab\nN9Hjefw0JKjc6BXvyGsQM=\n-----END SSH SIGNATURE-----", "payload": "tree 8239fb89e62cd625be57da581e0a1e1e188fe8dd\nparent 1566273f482612fa5812ecb41d15a9c87a571465\nauthor Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1665424999 +0200\ncommitter nils <48135649+Nilstrieb@users.noreply.github.com> 1665779756 +0200\n\nGet rid of `rustc_query_description!`\n\nQueries can provide an arbitrary expression for their description and\ntheir caching behavior. Before, these expressions where stored in a\n`rustc_query_description` macro emitted by the `rustc_queries` macro,\nand then used in `rustc_query_impl` to fill out the methods for the\n`QueryDescription` trait.\n\nInstead, we now emit two new modules from `rustc_queries` containing the\nfunctions with the expressions. `rustc_query_impl` calls these functions\nnow instead of invoking the macro.\n\nSince we are now defining some of the functions in\n`rustc_middle::query`, we now need all the imports for the key types\nthere as well.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/167b3bd3b23bad1a8436f7a7a8637ec64d41acd6", "html_url": "https://github.com/rust-lang/rust/commit/167b3bd3b23bad1a8436f7a7a8637ec64d41acd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/167b3bd3b23bad1a8436f7a7a8637ec64d41acd6/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1566273f482612fa5812ecb41d15a9c87a571465", "url": "https://api.github.com/repos/rust-lang/rust/commits/1566273f482612fa5812ecb41d15a9c87a571465", "html_url": "https://github.com/rust-lang/rust/commit/1566273f482612fa5812ecb41d15a9c87a571465"}], "stats": {"total": 81, "additions": 51, "deletions": 30}, "files": [{"sha": "7cefafef9d97857b672b22d0f2cd8077679bc25c", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/167b3bd3b23bad1a8436f7a7a8637ec64d41acd6/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/167b3bd3b23bad1a8436f7a7a8637ec64d41acd6/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=167b3bd3b23bad1a8436f7a7a8637ec64d41acd6", "patch": "@@ -237,27 +237,32 @@ fn doc_comment_from_desc(list: &Punctuated<Expr, token::Comma>) -> Result<Attrib\n }\n \n /// Add the impl of QueryDescription for the query to `impls` if one is requested\n-fn add_query_description_impl(query: &Query, impls: &mut proc_macro2::TokenStream) {\n-    let name = &query.name;\n-    let key = &query.key;\n-    let modifiers = &query.modifiers;\n+fn add_query_desc_cached_impl(\n+    query: &Query,\n+    descs: &mut proc_macro2::TokenStream,\n+    cached: &mut proc_macro2::TokenStream,\n+) {\n+    let Query { name, key, modifiers, .. } = &query;\n \n     // Find out if we should cache the query on disk\n     let cache = if let Some((args, expr)) = modifiers.cache.as_ref() {\n         let tcx = args.as_ref().map(|t| quote! { #t }).unwrap_or_else(|| quote! { _ });\n         // expr is a `Block`, meaning that `{ #expr }` gets expanded\n         // to `{ { stmts... } }`, which triggers the `unused_braces` lint.\n+        // we're taking `key` by reference, but some rustc types usually prefer being passed by value\n         quote! {\n-            #[allow(unused_variables, unused_braces)]\n+            #[allow(unused_variables, unused_braces, rustc::pass_by_value)]\n             #[inline]\n-            fn cache_on_disk(#tcx: TyCtxt<'tcx>, #key: &Self::Key) -> bool {\n+            pub fn #name<'tcx>(#tcx: TyCtxt<'tcx>, #key: &crate::ty::query::query_keys::#name<'tcx>) -> bool {\n                 #expr\n             }\n         }\n     } else {\n         quote! {\n+            // we're taking `key` by reference, but some rustc types usually prefer being passed by value\n+            #[allow(rustc::pass_by_value)]\n             #[inline]\n-            fn cache_on_disk(_: TyCtxt<'tcx>, _: &Self::Key) -> bool {\n+            pub fn #name<'tcx>(_: TyCtxt<'tcx>, _: &crate::ty::query::query_keys::#name<'tcx>) -> bool {\n                 false\n             }\n         }\n@@ -268,19 +273,20 @@ fn add_query_description_impl(query: &Query, impls: &mut proc_macro2::TokenStrea\n \n     let desc = quote! {\n         #[allow(unused_variables)]\n-        fn describe(tcx: QueryCtxt<'tcx>, key: Self::Key) -> String {\n-            let (#tcx, #key) = (*tcx, key);\n+        pub fn #name<'tcx>(tcx: TyCtxt<'tcx>, key: crate::ty::query::query_keys::#name<'tcx>) -> String {\n+            let (#tcx, #key) = (tcx, key);\n             ::rustc_middle::ty::print::with_no_trimmed_paths!(\n                 format!(#desc)\n             )\n         }\n     };\n \n-    impls.extend(quote! {\n-        (#name) => {\n-            #desc\n-            #cache\n-        };\n+    descs.extend(quote! {\n+        #desc\n+    });\n+\n+    cached.extend(quote! {\n+        #cache\n     });\n }\n \n@@ -289,6 +295,7 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n \n     let mut query_stream = quote! {};\n     let mut query_description_stream = quote! {};\n+    let mut query_cached_stream = quote! {};\n \n     for query in queries.0 {\n         let Query { name, arg, modifiers, .. } = &query;\n@@ -343,7 +350,7 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n             [#attribute_stream] fn #name(#arg) #result,\n         });\n \n-        add_query_description_impl(&query, &mut query_description_stream);\n+        add_query_desc_cached_impl(&query, &mut query_description_stream, &mut query_cached_stream);\n     }\n \n     TokenStream::from(quote! {\n@@ -357,9 +364,13 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n             }\n         }\n \n-        #[macro_export]\n-        macro_rules! rustc_query_description {\n+        pub mod descs {\n+            use super::*;\n             #query_description_stream\n         }\n+        pub mod cached {\n+            use super::*;\n+            #query_cached_stream\n+        }\n     })\n }"}, {"sha": "cfdc21ac234302b76a2f5cda0a7b9bc2d272cd3d", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/167b3bd3b23bad1a8436f7a7a8637ec64d41acd6/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/167b3bd3b23bad1a8436f7a7a8637ec64d41acd6/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=167b3bd3b23bad1a8436f7a7a8637ec64d41acd6", "patch": "@@ -4,6 +4,9 @@\n //! [\"Queries: demand-driven compilation\"](https://rustc-dev-guide.rust-lang.org/query.html).\n //! This chapter includes instructions for adding new queries.\n \n+use crate::ty::{self, print::describe_as_module, TyCtxt};\n+use rustc_span::def_id::LOCAL_CRATE;\n+\n // Each of these queries corresponds to a function pointer field in the\n // `Providers` struct for requesting a value of that type, and a method\n // on `tcx: TyCtxt` (and `tcx.at(span)`) for doing that request in a way\n@@ -1214,7 +1217,7 @@ rustc_queries! {\n         desc { |tcx| \"finding all vtable entries for trait {}\", tcx.def_path_str(key.def_id()) }\n     }\n \n-    query vtable_trait_upcasting_coercion_new_vptr_slot(key: (ty::Ty<'tcx>, ty::Ty<'tcx>)) -> Option<usize> {\n+    query vtable_trait_upcasting_coercion_new_vptr_slot(key: (Ty<'tcx>, Ty<'tcx>)) -> Option<usize> {\n         desc { |tcx| \"finding the slot within vtable for trait object {} vtable ptr during trait upcasting coercion from {} vtable\",\n             key.1, key.0 }\n     }"}, {"sha": "44b9548db89c8b55b91df4a87f89a825a27443c9", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/167b3bd3b23bad1a8436f7a7a8637ec64d41acd6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/167b3bd3b23bad1a8436f7a7a8637ec64d41acd6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=167b3bd3b23bad1a8436f7a7a8637ec64d41acd6", "patch": "@@ -3,7 +3,7 @@ use crate::ty::{self, DefIdTree, Ty, TyCtxt};\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sso::SsoHashSet;\n-use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n \n // `pretty` is a separate module only for organization.\n@@ -325,3 +325,12 @@ impl<'tcx, P: Printer<'tcx>> Print<'tcx, P> for ty::Const<'tcx> {\n         cx.print_const(*self)\n     }\n }\n+\n+// This is only used by query descriptions\n+pub fn describe_as_module(def_id: LocalDefId, tcx: TyCtxt<'_>) -> String {\n+    if def_id.is_top_level_module() {\n+        \"top-level module\".to_string()\n+    } else {\n+        format!(\"module `{}`\", tcx.def_path_str(def_id.to_def_id()))\n+    }\n+}"}, {"sha": "11d4c97e71ca0c30a59292d4cac4ff8870a78277", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/167b3bd3b23bad1a8436f7a7a8637ec64d41acd6/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/167b3bd3b23bad1a8436f7a7a8637ec64d41acd6/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=167b3bd3b23bad1a8436f7a7a8637ec64d41acd6", "patch": "@@ -22,8 +22,7 @@ use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::{self, DepKindStruct};\n use rustc_middle::ty::query::{query_keys, query_storage, query_stored, query_values};\n use rustc_middle::ty::query::{ExternProviders, Providers, QueryEngine};\n-use rustc_middle::ty::{self, TyCtxt};\n-use rustc_span::def_id::{LocalDefId, LOCAL_CRATE};\n+use rustc_middle::ty::TyCtxt;\n use rustc_span::Span;\n \n #[macro_use]\n@@ -45,14 +44,6 @@ pub use on_disk_cache::OnDiskCache;\n mod profiling_support;\n pub use self::profiling_support::alloc_self_profile_query_strings;\n \n-fn describe_as_module(def_id: LocalDefId, tcx: TyCtxt<'_>) -> String {\n-    if def_id.is_top_level_module() {\n-        \"top-level module\".to_string()\n-    } else {\n-        format!(\"module `{}`\", tcx.def_path_str(def_id.to_def_id()))\n-    }\n-}\n-\n rustc_query_append! { define_queries! }\n \n impl<'tcx> Queries<'tcx> {"}, {"sha": "8f8a566d533eebed88cfe7baf55a46d7b8d4fcd3", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/167b3bd3b23bad1a8436f7a7a8637ec64d41acd6/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/167b3bd3b23bad1a8436f7a7a8637ec64d41acd6/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=167b3bd3b23bad1a8436f7a7a8637ec64d41acd6", "patch": "@@ -466,7 +466,14 @@ macro_rules! define_queries {\n         }\n \n         impl<'tcx> QueryDescription<QueryCtxt<'tcx>> for queries::$name<'tcx> {\n-            rustc_query_description! { $name }\n+            fn describe(tcx: QueryCtxt<'tcx>, key: Self::Key) -> String {\n+                ::rustc_middle::query::descs::$name(tcx.tcx, key)\n+            }\n+\n+            #[inline]\n+            fn cache_on_disk(tcx: TyCtxt<'tcx>, key: &Self::Key) -> bool {\n+                ::rustc_middle::query::cached::$name(tcx, key)\n+            }\n \n             type Cache = query_storage::$name<'tcx>;\n "}]}