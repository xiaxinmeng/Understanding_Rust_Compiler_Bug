{"sha": "e92d9202699b36c59ec644528833a7b27b14a085", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MmQ5MjAyNjk5YjM2YzU5ZWM2NDQ1Mjg4MzNhN2IyN2IxNGEwODU=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-12-15T13:47:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-15T13:47:33Z"}, "message": "Rollup merge of #56677 - aelred:must-use-on-traits, r=estebank\n\n#[must_use] on traits in stdlib\n\nBased on #55506.\n\nAdds `#[must_use]` attribute to traits in the stdlib:\n- `Iterator`\n- `Future`\n- `FnOnce`\n- `Fn`\n- `FnMut`\n\nThere may be other traits that should have the attribute, but I couldn't find/think of any.", "tree": {"sha": "4a9b39bd83822b2652034fb83745258441d17ae3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a9b39bd83822b2652034fb83745258441d17ae3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e92d9202699b36c59ec644528833a7b27b14a085", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcFQX1CRBK7hj4Ov3rIwAAdHIIAKlqyMiDfRjjMWp3SUQ0CLyp\ntO1y7DoNwGgVM2L28zMfHHBJVuHNgfb/8fyEVAaaOq4lF5RO4yJZc2BJFXnPtRRc\n4baV7FVLWPbBR5cvtqGSCYL/aeF9gB++FwTkkSWaGfcV6ZNgouPRIOl0meW3dP99\nPVgmgY3zyAbqVlCMplL4CUds8nlUzuJH3ohTBnE/FhhCbQ2KdEnPiefnjiCLsHdY\njWrjnvADKsuXdXXN39iI/utwe1hj3AjQUJP2zIQUO9CGJqSpCGfhvGC/kJEy1G8n\nTGSp04wCOIgM+wSIxXYsRAjc8nBa/Sd1cOOmIJev4W2VnrWagO56uLXJB37Jwz0=\n=kbQi\n-----END PGP SIGNATURE-----\n", "payload": "tree 4a9b39bd83822b2652034fb83745258441d17ae3\nparent 0a1b2267e45ed0a5bdbfcbe522024729c8bd1387\nparent 3246f495d0c52549ca2f3722a915360518f0c062\nauthor Pietro Albini <pietro@pietroalbini.org> 1544881653 +0100\ncommitter GitHub <noreply@github.com> 1544881653 +0100\n\nRollup merge of #56677 - aelred:must-use-on-traits, r=estebank\n\n#[must_use] on traits in stdlib\n\nBased on #55506.\n\nAdds `#[must_use]` attribute to traits in the stdlib:\n- `Iterator`\n- `Future`\n- `FnOnce`\n- `Fn`\n- `FnMut`\n\nThere may be other traits that should have the attribute, but I couldn't find/think of any.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e92d9202699b36c59ec644528833a7b27b14a085", "html_url": "https://github.com/rust-lang/rust/commit/e92d9202699b36c59ec644528833a7b27b14a085", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e92d9202699b36c59ec644528833a7b27b14a085/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "html_url": "https://github.com/rust-lang/rust/commit/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387"}, {"sha": "3246f495d0c52549ca2f3722a915360518f0c062", "url": "https://api.github.com/repos/rust-lang/rust/commits/3246f495d0c52549ca2f3722a915360518f0c062", "html_url": "https://github.com/rust-lang/rust/commit/3246f495d0c52549ca2f3722a915360518f0c062"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "5dee1d6dd3a39dcb66115401481d41e23eb7341c", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e92d9202699b36c59ec644528833a7b27b14a085/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e92d9202699b36c59ec644528833a7b27b14a085/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=e92d9202699b36c59ec644528833a7b27b14a085", "patch": "@@ -33,6 +33,7 @@ use task::{Poll, LocalWaker};\n ///\n /// When using a future, you generally won't call `poll` directly, but instead\n /// `await!` the value.\n+#[must_use]\n pub trait Future {\n     /// The result of the `Future`.\n     type Output;"}, {"sha": "c0b83a6868b383aab4b4df2a8529e234f54051ba", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e92d9202699b36c59ec644528833a7b27b14a085/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e92d9202699b36c59ec644528833a7b27b14a085/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=e92d9202699b36c59ec644528833a7b27b14a085", "patch": "@@ -98,6 +98,7 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item=()>) {}\n     message=\"`{Self}` is not an iterator\"\n )]\n #[doc(spotlight)]\n+#[must_use]\n pub trait Iterator {\n     /// The type of the elements being iterated over.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "3b356b9a1e7b4ee73206f66895da7c99ee7fc041", "filename": "src/libcore/ops/function.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e92d9202699b36c59ec644528833a7b27b14a085/src%2Flibcore%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e92d9202699b36c59ec644528833a7b27b14a085/src%2Flibcore%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ffunction.rs?ref=e92d9202699b36c59ec644528833a7b27b14a085", "patch": "@@ -72,6 +72,7 @@\n     label=\"expected an `Fn<{Args}>` closure, found `{Self}`\",\n )]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n+#[must_use]\n pub trait Fn<Args> : FnMut<Args> {\n     /// Performs the call operation.\n     #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n@@ -150,6 +151,7 @@ pub trait Fn<Args> : FnMut<Args> {\n     label=\"expected an `FnMut<{Args}>` closure, found `{Self}`\",\n )]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n+#[must_use]\n pub trait FnMut<Args> : FnOnce<Args> {\n     /// Performs the call operation.\n     #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n@@ -228,6 +230,7 @@ pub trait FnMut<Args> : FnOnce<Args> {\n     label=\"expected an `FnOnce<{Args}>` closure, found `{Self}`\",\n )]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n+#[must_use]\n pub trait FnOnce<Args> {\n     /// The returned type after the call operator is used.\n     #[stable(feature = \"fn_once_output\", since = \"1.12.0\")]"}, {"sha": "4bb5c59722ad17258f6dd751047bce3040e28c31", "filename": "src/test/compile-fail/must_use-in-stdlib-traits.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e92d9202699b36c59ec644528833a7b27b14a085/src%2Ftest%2Fcompile-fail%2Fmust_use-in-stdlib-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e92d9202699b36c59ec644528833a7b27b14a085/src%2Ftest%2Fcompile-fail%2Fmust_use-in-stdlib-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmust_use-in-stdlib-traits.rs?ref=e92d9202699b36c59ec644528833a7b27b14a085", "patch": "@@ -0,0 +1,47 @@\n+#![deny(unused_must_use)]\n+#![feature(futures_api, pin, arbitrary_self_types)]\n+\n+use std::iter::Iterator;\n+use std::future::Future;\n+\n+use std::task::{Poll, LocalWaker};\n+use std::pin::Pin;\n+use std::unimplemented;\n+\n+struct MyFuture;\n+\n+impl Future for MyFuture {\n+   type Output = u32;\n+\n+   fn poll(self: Pin<&mut Self>, lw: &LocalWaker) -> Poll<u32> {\n+      Poll::Pending\n+   }\n+}\n+\n+fn iterator() -> impl Iterator {\n+   std::iter::empty::<u32>()\n+}\n+\n+fn future() -> impl Future {\n+   MyFuture\n+}\n+\n+fn square_fn_once() -> impl FnOnce(u32) -> u32 {\n+   |x| x * x\n+}\n+\n+fn square_fn_mut() -> impl FnMut(u32) -> u32 {\n+   |x| x * x\n+}\n+\n+fn square_fn() -> impl Fn(u32) -> u32 {\n+   |x| x * x\n+}\n+\n+fn main() {\n+   iterator(); //~ ERROR unused implementer of `std::iter::Iterator` that must be used\n+   future(); //~ ERROR unused implementer of `std::future::Future` that must be used\n+   square_fn_once(); //~ ERROR unused implementer of `std::ops::FnOnce` that must be used\n+   square_fn_mut(); //~ ERROR unused implementer of `std::ops::FnMut` that must be used\n+   square_fn(); //~ ERROR unused implementer of `std::ops::Fn` that must be used\n+}"}]}