{"sha": "bf55aee7b142ad14d102de3260e314a84bf8c35c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNTVhZWU3YjE0MmFkMTRkMTAyZGUzMjYwZTMxNGE4NGJmOGMzNWM=", "commit": {"author": {"name": "bool", "email": "booleancoercion@gmail.com", "date": "2021-02-19T17:36:28Z"}, "committer": {"name": "bool", "email": "booleancoercion@gmail.com", "date": "2021-02-19T19:56:21Z"}, "message": "Updated from_str_radix_10 sugg to be slightly smarter and ran bless", "tree": {"sha": "f37199333118d1c9c4a000a5f5ab876673610e9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f37199333118d1c9c4a000a5f5ab876673610e9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf55aee7b142ad14d102de3260e314a84bf8c35c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf55aee7b142ad14d102de3260e314a84bf8c35c", "html_url": "https://github.com/rust-lang/rust/commit/bf55aee7b142ad14d102de3260e314a84bf8c35c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf55aee7b142ad14d102de3260e314a84bf8c35c/comments", "author": {"login": "booleancoercion", "id": 33005025, "node_id": "MDQ6VXNlcjMzMDA1MDI1", "avatar_url": "https://avatars.githubusercontent.com/u/33005025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/booleancoercion", "html_url": "https://github.com/booleancoercion", "followers_url": "https://api.github.com/users/booleancoercion/followers", "following_url": "https://api.github.com/users/booleancoercion/following{/other_user}", "gists_url": "https://api.github.com/users/booleancoercion/gists{/gist_id}", "starred_url": "https://api.github.com/users/booleancoercion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/booleancoercion/subscriptions", "organizations_url": "https://api.github.com/users/booleancoercion/orgs", "repos_url": "https://api.github.com/users/booleancoercion/repos", "events_url": "https://api.github.com/users/booleancoercion/events{/privacy}", "received_events_url": "https://api.github.com/users/booleancoercion/received_events", "type": "User", "site_admin": false}, "committer": {"login": "booleancoercion", "id": 33005025, "node_id": "MDQ6VXNlcjMzMDA1MDI1", "avatar_url": "https://avatars.githubusercontent.com/u/33005025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/booleancoercion", "html_url": "https://github.com/booleancoercion", "followers_url": "https://api.github.com/users/booleancoercion/followers", "following_url": "https://api.github.com/users/booleancoercion/following{/other_user}", "gists_url": "https://api.github.com/users/booleancoercion/gists{/gist_id}", "starred_url": "https://api.github.com/users/booleancoercion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/booleancoercion/subscriptions", "organizations_url": "https://api.github.com/users/booleancoercion/orgs", "repos_url": "https://api.github.com/users/booleancoercion/repos", "events_url": "https://api.github.com/users/booleancoercion/events{/privacy}", "received_events_url": "https://api.github.com/users/booleancoercion/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d36fe8556962467545f5e92bf896b6672f4e88ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/d36fe8556962467545f5e92bf896b6672f4e88ae", "html_url": "https://github.com/rust-lang/rust/commit/d36fe8556962467545f5e92bf896b6672f4e88ae"}], "stats": {"total": 39, "additions": 33, "deletions": 6}, "files": [{"sha": "d0a170acb4fe4c38441b0f123164f0e266bd6ec9", "filename": "clippy_lints/src/from_str_radix_10.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bf55aee7b142ad14d102de3260e314a84bf8c35c/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf55aee7b142ad14d102de3260e314a84bf8c35c/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs?ref=bf55aee7b142ad14d102de3260e314a84bf8c35c", "patch": "@@ -1,9 +1,12 @@\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::*;\n+use rustc_hir::{def, Expr, ExprKind, PrimTy, QPath, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::Ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::sym;\n \n+use crate::utils::is_type_diagnostic_item;\n use crate::utils::span_lint_and_sugg;\n use crate::utils::sugg::Sugg;\n \n@@ -40,8 +43,7 @@ impl LateLintPass<'tcx> for FromStrRadix10 {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, exp: &Expr<'tcx>) {\n         if_chain! {\n             if let ExprKind::Call(maybe_path, arguments) = &exp.kind;\n-            if let ExprKind::Path(qpath) = &maybe_path.kind;\n-            if let QPath::TypeRelative(ty, pathseg) = &qpath;\n+            if let ExprKind::Path(QPath::TypeRelative(ty, pathseg)) = &maybe_path.kind;\n \n             // check if the first part of the path is some integer primitive\n             if let TyKind::Path(ty_qpath) = &ty.kind;\n@@ -59,9 +61,20 @@ impl LateLintPass<'tcx> for FromStrRadix10 {\n             if let rustc_ast::ast::LitKind::Int(10, _) = lit.node;\n \n             then {\n+                let expr = if let ExprKind::AddrOf(_, _, expr) = &arguments[0].kind {\n+                    let ty = cx.typeck_results().expr_ty(expr);\n+                    if is_ty_stringish(cx, ty) {\n+                        expr\n+                    } else {\n+                        &arguments[0]\n+                    }\n+                } else {\n+                    &arguments[0]\n+                };\n+\n                 let sugg = Sugg::hir_with_applicability(\n                     cx,\n-                    &arguments[0],\n+                    expr,\n                     \"<string>\",\n                     &mut Applicability::MachineApplicable\n                 ).maybe_par();\n@@ -79,3 +92,8 @@ impl LateLintPass<'tcx> for FromStrRadix10 {\n         }\n     }\n }\n+\n+/// Checks if a Ty is `String` or `&str`\n+fn is_ty_stringish(cx: &LateContext<'_>, ty: Ty<'_>) -> bool {\n+    is_type_diagnostic_item(cx, ty, sym::string_type) || is_type_diagnostic_item(cx, ty, sym::str)\n+}"}, {"sha": "2f2ea04847a98da6a11b1e49544e505f19968138", "filename": "tests/ui/from_str_radix_10.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf55aee7b142ad14d102de3260e314a84bf8c35c/tests%2Fui%2Ffrom_str_radix_10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf55aee7b142ad14d102de3260e314a84bf8c35c/tests%2Fui%2Ffrom_str_radix_10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_str_radix_10.rs?ref=bf55aee7b142ad14d102de3260e314a84bf8c35c", "patch": "@@ -35,6 +35,9 @@ fn main() -> Result<(), Box<dyn std::error::Error>> {\n     let string = \"300\";\n     i32::from_str_radix(string, 10)?;\n \n+    let stringier = \"400\".to_string();\n+    i32::from_str_radix(&stringier, 10)?;\n+\n     // none of these should trigger the lint\n     u16::from_str_radix(\"20\", 3)?;\n     i32::from_str_radix(\"45\", 12)?;"}, {"sha": "471bf52a9a7ed92156e0dbcabf8d644ac9bf1ad9", "filename": "tests/ui/from_str_radix_10.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bf55aee7b142ad14d102de3260e314a84bf8c35c/tests%2Fui%2Ffrom_str_radix_10.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bf55aee7b142ad14d102de3260e314a84bf8c35c/tests%2Fui%2Ffrom_str_radix_10.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_str_radix_10.stderr?ref=bf55aee7b142ad14d102de3260e314a84bf8c35c", "patch": "@@ -28,7 +28,7 @@ error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n   --> $DIR/from_str_radix_10.rs:32:5\n    |\n LL |     u16::from_str_radix(&(\"10\".to_owned() + \"5\"), 10)?;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(&(\"10\".to_owned() + \"5\")).parse::<u16>()`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `((\"10\".to_owned() + \"5\")).parse::<u16>()`\n \n error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n   --> $DIR/from_str_radix_10.rs:33:5\n@@ -42,5 +42,11 @@ error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n LL |     i32::from_str_radix(string, 10)?;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `string.parse::<i32>()`\n \n-error: aborting due to 7 previous errors\n+error: this call to `from_str_radix` can be replaced with a call to `str::parse`\n+  --> $DIR/from_str_radix_10.rs:39:5\n+   |\n+LL |     i32::from_str_radix(&stringier, 10)?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `stringier.parse::<i32>()`\n+\n+error: aborting due to 8 previous errors\n "}]}