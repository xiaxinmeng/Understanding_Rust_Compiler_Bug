{"sha": "ce49ce2f7ea1841950dd89937c7b4b343c273cbb", "node_id": "C_kwDOAAsO6NoAKGNlNDljZTJmN2VhMTg0MTk1MGRkODk5MzdjN2I0YjM0M2MyNzNjYmI", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-05-17T22:40:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-17T22:40:55Z"}, "message": "Rollup merge of #96647 - Enselic:fix-hrtb-for-wherepredicate, r=CraftSpider\n\nrustdoc-json: Fix HRTBs for WherePredicate::BoundPredicate\n\nInformation about HRTBs are already present for `GenericBound:: TraitBound` and `FunctionPointer`. This PR adds HRTB info also to `WherePredicate::BoundPredicate`.\n\nUse the same field name and type as for the other ones (`generic_params: Vec<GenericParamDef>`). I have verified that this gives rustdoc JSON clients the data they need and in a format that is easy to work with (see https://github.com/Enselic/public-api/pull/92).\n\nI will be happy to add tests for this change (and bump `FORMAT_VERSION` which I just realized I forgot), but it is always nice to get one round of feedback first, so that I don't put a lot of effort into tests that then have to be discarded.\n\n`@rustbot` modify labels: +T-rustdoc +A-rustdoc-json", "tree": {"sha": "0ff1d428844a1656662e886fb7d77645c260db49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ff1d428844a1656662e886fb7d77645c260db49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce49ce2f7ea1841950dd89937c7b4b343c273cbb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJihCR3CRBK7hj4Ov3rIwAAXxgIAEvXWm67mArUwF39htzz+5l3\nmzfwLppE7wYDe0hM9ZwssXFAWeRhcWjnviV3XcLJikOSFqTj5pL0FYNqOK5pdX4v\nRPH57NR9sIhQqmyUhagO04q1UkMnX3AUsZkZ7nKC8pl3cKGpm7u+QkCIAQPr0Qcq\nd5U3vsy3sjFwHvMzlJj4w+FSLJJ1yPubc59OOduavgIAPkR0gMZz5HOrB+CZ6wig\nD4r1iX2naNnVqGLnLg82Tf2N38roRYG+Sl62B4hA7l7s/mhdMzBaUsKIAbVdDcwz\nqp8GpqbuMKdNzEhMnSv6+wYTykG081lHrWH818vgbn3t4jg8FZ8ce5NbgloJdAQ=\n=ME+0\n-----END PGP SIGNATURE-----\n", "payload": "tree 0ff1d428844a1656662e886fb7d77645c260db49\nparent 4c5f6e6277b89e47d73a192078697f7a5f3dc0ac\nparent 774b525f6f5c7a8712349e67f53cfd75056fe079\nauthor Yuki Okushi <jtitor@2k36.org> 1652827255 +0900\ncommitter GitHub <noreply@github.com> 1652827255 +0900\n\nRollup merge of #96647 - Enselic:fix-hrtb-for-wherepredicate, r=CraftSpider\n\nrustdoc-json: Fix HRTBs for WherePredicate::BoundPredicate\n\nInformation about HRTBs are already present for `GenericBound:: TraitBound` and `FunctionPointer`. This PR adds HRTB info also to `WherePredicate::BoundPredicate`.\n\nUse the same field name and type as for the other ones (`generic_params: Vec<GenericParamDef>`). I have verified that this gives rustdoc JSON clients the data they need and in a format that is easy to work with (see https://github.com/Enselic/public-api/pull/92).\n\nI will be happy to add tests for this change (and bump `FORMAT_VERSION` which I just realized I forgot), but it is always nice to get one round of feedback first, so that I don't put a lot of effort into tests that then have to be discarded.\n\n`@rustbot` modify labels: +T-rustdoc +A-rustdoc-json\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce49ce2f7ea1841950dd89937c7b4b343c273cbb", "html_url": "https://github.com/rust-lang/rust/commit/ce49ce2f7ea1841950dd89937c7b4b343c273cbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce49ce2f7ea1841950dd89937c7b4b343c273cbb/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c5f6e6277b89e47d73a192078697f7a5f3dc0ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c5f6e6277b89e47d73a192078697f7a5f3dc0ac", "html_url": "https://github.com/rust-lang/rust/commit/4c5f6e6277b89e47d73a192078697f7a5f3dc0ac"}, {"sha": "774b525f6f5c7a8712349e67f53cfd75056fe079", "url": "https://api.github.com/repos/rust-lang/rust/commits/774b525f6f5c7a8712349e67f53cfd75056fe079", "html_url": "https://github.com/rust-lang/rust/commit/774b525f6f5c7a8712349e67f53cfd75056fe079"}], "stats": {"total": 81, "additions": 73, "deletions": 8}, "files": [{"sha": "412387313dc1719343e3809eaa3714472daf6cd5", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce49ce2f7ea1841950dd89937c7b4b343c273cbb/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce49ce2f7ea1841950dd89937c7b4b343c273cbb/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=ce49ce2f7ea1841950dd89937c7b4b343c273cbb", "patch": "@@ -350,10 +350,16 @@ impl FromWithTcx<clean::WherePredicate> for WherePredicate {\n     fn from_tcx(predicate: clean::WherePredicate, tcx: TyCtxt<'_>) -> Self {\n         use clean::WherePredicate::*;\n         match predicate {\n-            BoundPredicate { ty, bounds, .. } => WherePredicate::BoundPredicate {\n+            BoundPredicate { ty, bounds, bound_params } => WherePredicate::BoundPredicate {\n                 type_: ty.into_tcx(tcx),\n                 bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n-                // FIXME: add `bound_params` to rustdoc-json-params?\n+                generic_params: bound_params\n+                    .into_iter()\n+                    .map(|x| GenericParamDef {\n+                        name: x.0.to_string(),\n+                        kind: GenericParamDefKind::Lifetime { outlives: vec![] },\n+                    })\n+                    .collect(),\n             },\n             RegionPredicate { lifetime, bounds } => WherePredicate::RegionPredicate {\n                 lifetime: lifetime.0.to_string(),"}, {"sha": "eb2c8e5bae1c43c7b81c6d5a641f11326f1386a5", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ce49ce2f7ea1841950dd89937c7b4b343c273cbb/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce49ce2f7ea1841950dd89937c7b4b343c273cbb/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=ce49ce2f7ea1841950dd89937c7b4b343c273cbb", "patch": "@@ -9,7 +9,7 @@ use std::path::PathBuf;\n use serde::{Deserialize, Serialize};\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 14;\n+pub const FORMAT_VERSION: u32 = 15;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -391,6 +391,14 @@ pub enum WherePredicate {\n         #[serde(rename = \"type\")]\n         type_: Type,\n         bounds: Vec<GenericBound>,\n+        /// Used for Higher-Rank Trait Bounds (HRTBs)\n+        /// ```plain\n+        /// where for<'a> &'a T: Iterator,\"\n+        ///       ^^^^^^^\n+        ///       |\n+        ///       this part\n+        /// ```\n+        generic_params: Vec<GenericParamDef>,\n     },\n     RegionPredicate {\n         lifetime: String,\n@@ -408,7 +416,13 @@ pub enum GenericBound {\n     TraitBound {\n         #[serde(rename = \"trait\")]\n         trait_: Type,\n-        /// Used for HRTBs\n+        /// Used for Higher-Rank Trait Bounds (HRTBs)\n+        /// ```plain\n+        /// where F: for<'a, 'b> Fn(&'a u8, &'b u8)\n+        ///          ^^^^^^^^^^^\n+        ///          |\n+        ///          this part\n+        /// ```\n         generic_params: Vec<GenericParamDef>,\n         modifier: TraitBoundModifier,\n     },\n@@ -487,6 +501,13 @@ pub enum Type {\n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct FunctionPointer {\n     pub decl: FnDecl,\n+    /// Used for Higher-Rank Trait Bounds (HRTBs)\n+    /// ```plain\n+    /// for<'c> fn(val: &'c i32) -> i32\n+    /// ^^^^^^^\n+    ///       |\n+    ///       this part\n+    /// ```\n     pub generic_params: Vec<GenericParamDef>,\n     pub header: Header,\n }"}, {"sha": "646f720e66396441d2dbe9d9f9b2355ab251251b", "filename": "src/test/rustdoc-json/fn_pointer/generics.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ce49ce2f7ea1841950dd89937c7b4b343c273cbb/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce49ce2f7ea1841950dd89937c7b4b343c273cbb/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fgenerics.rs?ref=ce49ce2f7ea1841950dd89937c7b4b343c273cbb", "patch": "@@ -0,0 +1,14 @@\n+// ignore-tidy-linelength\n+\n+#![feature(no_core)]\n+#![no_core]\n+\n+// @count generics.json \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[*]\" 1\n+// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[0][0]\" '\"val\"'\n+// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[0][1].kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[0][1].inner.lifetime\" \\\"\\'c\\\"\n+// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.output\" '{ \"kind\": \"primitive\", \"inner\": \"i32\" }'\n+// @count - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.generic_params[*]\" 1\n+// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.generic_params[0].name\" \\\"\\'c\\\"\n+// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n+pub type WithHigherRankTraitBounds = for<'c> fn(val: &'c i32) -> i32;"}, {"sha": "69150443c29dc9059a3c2c0c10c807bcf3c94844", "filename": "src/test/rustdoc-json/fns/generic_args.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ce49ce2f7ea1841950dd89937c7b4b343c273cbb/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce49ce2f7ea1841950dd89937c7b4b343c273cbb/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs?ref=ce49ce2f7ea1841950dd89937c7b4b343c273cbb", "patch": "@@ -6,6 +6,9 @@\n // @set foo = generic_args.json \"$.index[*][?(@.name=='Foo')].id\"\n pub trait Foo {}\n \n+// @set generic_foo = generic_args.json \"$.index[*][?(@.name=='GenericFoo')].id\"\n+pub trait GenericFoo<'a> {}\n+\n // @is - \"$.index[*][?(@.name=='generics')].inner.generics.where_predicates\" \"[]\"\n // @count - \"$.index[*][?(@.name=='generics')].inner.generics.params[*]\" 1\n // @is - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].name\" '\"F\"'\n@@ -29,19 +32,40 @@ pub fn generics<F: Foo>(f: F) {}\n // @is - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].inner[0].trait_bound.trait.inner.id\" $foo\n pub fn impl_trait(f: impl Foo) {}\n \n-// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.params[*]\" 1\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.params[*]\" 3\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.params[0].name\" '\"F\"'\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.params[0].kind\" '{\"type\": {\"bounds\": [], \"default\": null, \"synthetic\": false}}'\n-// @count - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[*]\" 1\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[*]\" 3\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][0]\" '\"f\"'\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][1].kind\" '\"generic\"'\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][1].inner\" '\"F\"'\n-// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[*]\" 1\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[*]\" 3\n+\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.type\" '{\"inner\": \"F\", \"kind\": \"generic\"}'\n // @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.bounds[*]\" 1\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.bounds[0].trait_bound.trait.inner.id\" $foo\n-pub fn where_clase<F>(f: F)\n+\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.type\" '{\"inner\": \"G\", \"kind\": \"generic\"}'\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[*]\" 1\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.trait.inner.id\" $generic_foo\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[*]\" 1\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[0].name\" \\\"\\'a\\\"\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.generic_params\" \"[]\"\n+\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.type.kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.type.inner.lifetime\" \\\"\\'b\\\"\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.type.inner.type\" '{\"inner\": \"H\", \"kind\": \"generic\"}'\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[*]\" 1\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[0].trait_bound.trait.inner.id\" $foo\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[0].trait_bound.generic_params\" \"[]\"\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.generic_params[*]\" 1\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.generic_params[0].name\" \\\"\\'b\\\"\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n+pub fn where_clase<F, G, H>(f: F, g: G, h: H)\n where\n     F: Foo,\n+    G: for<'a> GenericFoo<'a>,\n+    for<'b> &'b H: Foo,\n {\n }"}]}