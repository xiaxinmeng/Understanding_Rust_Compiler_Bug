{"sha": "6c0e58d10756742a55a04c221e8625dc8f7252b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMGU1OGQxMDc1Njc0MmE1NWEwNGMyMjFlODYyNWRjOGY3MjUyYjM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-06-02T20:27:12Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-06-02T20:27:12Z"}, "message": "Preserve indentation", "tree": {"sha": "6ec0526fdc716803afe1ec1b3e93059b878ad8d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ec0526fdc716803afe1ec1b3e93059b878ad8d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c0e58d10756742a55a04c221e8625dc8f7252b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c0e58d10756742a55a04c221e8625dc8f7252b3", "html_url": "https://github.com/rust-lang/rust/commit/6c0e58d10756742a55a04c221e8625dc8f7252b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c0e58d10756742a55a04c221e8625dc8f7252b3/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4c019fcaa5ecc135054d789466aaa2614132592", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4c019fcaa5ecc135054d789466aaa2614132592", "html_url": "https://github.com/rust-lang/rust/commit/e4c019fcaa5ecc135054d789466aaa2614132592"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "4bccf59847512e74ccb846c810f74dda28a25226", "filename": "crates/ide_assists/src/handlers/extract_type_alias.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6c0e58d10756742a55a04c221e8625dc8f7252b3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0e58d10756742a55a04c221e8625dc8f7252b3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs?ref=6c0e58d10756742a55a04c221e8625dc8f7252b3", "patch": "@@ -1,5 +1,5 @@\n use syntax::{\n-    ast::{self, AstNode},\n+    ast::{self, edit::IndentLevel, AstNode},\n     match_ast,\n };\n \n@@ -31,10 +31,12 @@ pub(crate) fn extract_type_alias(acc: &mut Assists, ctx: &AssistContext) -> Opti\n     let item = ctx.find_node_at_offset::<ast::Item>()?;\n     let insert = match_ast! {\n         match (item.syntax().parent()?) {\n-            ast::AssocItemList(it) => it.syntax().parent()?.text_range().start(),\n-            _ => item.syntax().text_range().start(),\n+            ast::AssocItemList(it) => it.syntax().parent()?.clone(),\n+            _ => item.syntax().clone(),\n         }\n     };\n+    let indent = IndentLevel::from_node(&insert);\n+    let insert = insert.text_range().start();\n     let target = node.syntax().text_range();\n \n     acc.add(\n@@ -46,10 +48,14 @@ pub(crate) fn extract_type_alias(acc: &mut Assists, ctx: &AssistContext) -> Opti\n             builder.replace(target, \"Type\");\n             match ctx.config.snippet_cap {\n                 Some(cap) => {\n-                    builder.insert_snippet(cap, insert, format!(\"type $0Type = {};\\n\\n\", node));\n+                    builder.insert_snippet(\n+                        cap,\n+                        insert,\n+                        format!(\"type $0Type = {};\\n\\n{}\", node, indent),\n+                    );\n                 }\n                 None => {\n-                    builder.insert(insert, format!(\"type Type = {};\\n\\n\", node));\n+                    builder.insert(insert, format!(\"type Type = {};\\n\\n{}\", node, indent));\n                 }\n             }\n         },\n@@ -191,4 +197,23 @@ trait Tr {\n             \"#,\n         );\n     }\n+\n+    #[test]\n+    fn indentation() {\n+        check_assist(\n+            extract_type_alias,\n+            r#\"\n+mod m {\n+    fn f() -> $0u8$0 {}\n+}\n+            \"#,\n+            r#\"\n+mod m {\n+    type $0Type = u8;\n+\n+    fn f() -> Type {}\n+}\n+            \"#,\n+        );\n+    }\n }"}]}