{"sha": "72f4923979979abb5d6b975353e9b3053d257e60", "node_id": "C_kwDOAAsO6NoAKDcyZjQ5MjM5Nzk5NzlhYmI1ZDZiOTc1MzUzZTliMzA1M2QyNTdlNjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-26T05:27:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-26T05:27:43Z"}, "message": "Auto merge of #102297 - fee1-dead-contrib:rollup-2np0cre, r=fee1-dead\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #102143 (Recover from struct nested in struct)\n - #102178 (bootstrap: the backtrace feature is stable, no need to allow it any more)\n - #102197 (Stabilize const `BTree{Map,Set}::new`)\n - #102267 (Don't set RUSTC in the bootstrap build script)\n - #102270 (Remove benches from `rustc_middle`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2cb1ddd4fc88f1db36de4184af68c156885cb50e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cb1ddd4fc88f1db36de4184af68c156885cb50e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72f4923979979abb5d6b975353e9b3053d257e60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72f4923979979abb5d6b975353e9b3053d257e60", "html_url": "https://github.com/rust-lang/rust/commit/72f4923979979abb5d6b975353e9b3053d257e60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72f4923979979abb5d6b975353e9b3053d257e60/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe217c28ffc6955f0927d8e8715d43d727debe5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe217c28ffc6955f0927d8e8715d43d727debe5a", "html_url": "https://github.com/rust-lang/rust/commit/fe217c28ffc6955f0927d8e8715d43d727debe5a"}, {"sha": "39c6bdc30d48adaff53447b9b87fd0f2f60c608a", "url": "https://api.github.com/repos/rust-lang/rust/commits/39c6bdc30d48adaff53447b9b87fd0f2f60c608a", "html_url": "https://github.com/rust-lang/rust/commit/39c6bdc30d48adaff53447b9b87fd0f2f60c608a"}], "stats": {"total": 168, "additions": 60, "deletions": 108}, "files": [{"sha": "556ff1cc48e4d3e29345a4429db9dc39e928815f", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f4923979979abb5d6b975353e9b3053d257e60/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f4923979979abb5d6b975353e9b3053d257e60/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=72f4923979979abb5d6b975353e9b3053d257e60", "patch": "@@ -4,7 +4,7 @@\n \n #![feature(associated_type_defaults)]\n #![feature(closure_track_caller)]\n-#![feature(const_btree_new)]\n+#![feature(const_btree_len)]\n #![cfg_attr(bootstrap, feature(let_else))]\n #![feature(once_cell)]\n #![feature(min_specialization)]"}, {"sha": "237751bcbd787a34c66a400ed6a7d0c6c8e84994", "filename": "compiler/rustc_middle/benches/lib.rs", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/fe217c28ffc6955f0927d8e8715d43d727debe5a/compiler%2Frustc_middle%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe217c28ffc6955f0927d8e8715d43d727debe5a/compiler%2Frustc_middle%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fbenches%2Flib.rs?ref=fe217c28ffc6955f0927d8e8715d43d727debe5a", "patch": "@@ -1,54 +0,0 @@\n-#![feature(test)]\n-\n-extern crate test;\n-\n-use test::Bencher;\n-\n-// Static/dynamic method dispatch\n-\n-struct Struct {\n-    field: isize,\n-}\n-\n-trait Trait {\n-    fn method(&self) -> isize;\n-}\n-\n-impl Trait for Struct {\n-    fn method(&self) -> isize {\n-        self.field\n-    }\n-}\n-\n-#[bench]\n-fn trait_vtable_method_call(b: &mut Bencher) {\n-    let s = Struct { field: 10 };\n-    let t = &s as &dyn Trait;\n-    b.iter(|| t.method());\n-}\n-\n-#[bench]\n-fn trait_static_method_call(b: &mut Bencher) {\n-    let s = Struct { field: 10 };\n-    b.iter(|| s.method());\n-}\n-\n-// Overhead of various match forms\n-\n-#[bench]\n-fn option_some(b: &mut Bencher) {\n-    let x = Some(10);\n-    b.iter(|| match x {\n-        Some(y) => y,\n-        None => 11,\n-    });\n-}\n-\n-#[bench]\n-fn vec_pattern(b: &mut Bencher) {\n-    let x = [1, 2, 3, 4, 5, 6];\n-    b.iter(|| match x {\n-        [1, 2, 3, ..] => 10,\n-        _ => 11,\n-    });\n-}"}, {"sha": "e385ac44113a601f7b7b51dae825774b0a966962", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/72f4923979979abb5d6b975353e9b3053d257e60/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f4923979979abb5d6b975353e9b3053d257e60/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=72f4923979979abb5d6b975353e9b3053d257e60", "patch": "@@ -1715,6 +1715,7 @@ impl<'a> Parser<'a> {\n     fn parse_field_ident(&mut self, adt_ty: &str, lo: Span) -> PResult<'a, Ident> {\n         let (ident, is_raw) = self.ident_or_err()?;\n         if !is_raw && ident.is_reserved() {\n+            let snapshot = self.create_snapshot_for_diagnostic();\n             let err = if self.check_fn_front_matter(false) {\n                 let inherited_vis = Visibility {\n                     span: rustc_span::DUMMY_SP,\n@@ -1735,6 +1736,22 @@ impl<'a> Parser<'a> {\n                 err.help(\"unlike in C++, Java, and C#, functions are declared in `impl` blocks\");\n                 err.help(\"see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\");\n                 err\n+            } else if self.eat_keyword(kw::Struct) {\n+                match self.parse_item_struct() {\n+                    Ok((ident, _)) => {\n+                        let mut err = self.struct_span_err(\n+                            lo.with_hi(ident.span.hi()),\n+                            &format!(\"structs are not allowed in {adt_ty} definitions\"),\n+                        );\n+                        err.help(\"consider creating a new `struct` definition instead of nesting\");\n+                        err\n+                    }\n+                    Err(err) => {\n+                        err.cancel();\n+                        self.restore_snapshot(snapshot);\n+                        self.expected_ident_found()\n+                    }\n+                }\n             } else {\n                 self.expected_ident_found()\n             };"}, {"sha": "3018d1c9125bff747dc7c330c09c1cdbbcc2e7a8", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72f4923979979abb5d6b975353e9b3053d257e60/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f4923979979abb5d6b975353e9b3053d257e60/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=72f4923979979abb5d6b975353e9b3053d257e60", "patch": "@@ -580,7 +580,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// map.insert(1, \"a\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n+    #[rustc_const_stable(feature = \"const_btree_new\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[must_use]\n     pub const fn new() -> BTreeMap<K, V> {\n         BTreeMap { root: None, length: 0, alloc: ManuallyDrop::new(Global), _marker: PhantomData }\n@@ -2392,7 +2392,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n+    #[rustc_const_unstable(feature = \"const_btree_len\", issue = \"71835\")]\n     pub const fn len(&self) -> usize {\n         self.length\n     }\n@@ -2413,7 +2413,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n+    #[rustc_const_unstable(feature = \"const_btree_len\", issue = \"71835\")]\n     pub const fn is_empty(&self) -> bool {\n         self.len() == 0\n     }"}, {"sha": "3caaf521240d2102575902780112932852b4eee9", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72f4923979979abb5d6b975353e9b3053d257e60/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f4923979979abb5d6b975353e9b3053d257e60/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=72f4923979979abb5d6b975353e9b3053d257e60", "patch": "@@ -343,7 +343,7 @@ impl<T> BTreeSet<T> {\n     /// let mut set: BTreeSet<i32> = BTreeSet::new();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n+    #[rustc_const_stable(feature = \"const_btree_new\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[must_use]\n     pub const fn new() -> BTreeSet<T> {\n         BTreeSet { map: BTreeMap::new() }\n@@ -1174,7 +1174,7 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n+    #[rustc_const_unstable(feature = \"const_btree_len\", issue = \"71835\")]\n     pub const fn len(&self) -> usize {\n         self.map.len()\n     }\n@@ -1193,7 +1193,7 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n+    #[rustc_const_unstable(feature = \"const_btree_len\", issue = \"71835\")]\n     pub const fn is_empty(&self) -> bool {\n         self.len() == 0\n     }"}, {"sha": "de58f22daae781eecfd4fd6ea659200fa237308d", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f4923979979abb5d6b975353e9b3053d257e60/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f4923979979abb5d6b975353e9b3053d257e60/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=72f4923979979abb5d6b975353e9b3053d257e60", "patch": "@@ -99,7 +99,7 @@\n #![feature(coerce_unsized)]\n #![cfg_attr(not(no_global_oom_handling), feature(const_alloc_error))]\n #![feature(const_box)]\n-#![cfg_attr(not(no_global_oom_handling), feature(const_btree_new))]\n+#![cfg_attr(not(no_global_oom_handling), feature(const_btree_len))]\n #![feature(const_cow_is_borrowed)]\n #![feature(const_convert)]\n #![feature(const_size_of_val)]"}, {"sha": "55aced5106c94ae13e5dca717d711a0cbb24a196", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f4923979979abb5d6b975353e9b3053d257e60/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f4923979979abb5d6b975353e9b3053d257e60/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=72f4923979979abb5d6b975353e9b3053d257e60", "patch": "@@ -32,7 +32,7 @@\n #![feature(slice_group_by)]\n #![feature(slice_partition_dedup)]\n #![feature(string_remove_matches)]\n-#![feature(const_btree_new)]\n+#![feature(const_btree_len)]\n #![feature(const_default_impls)]\n #![feature(const_trait_impl)]\n #![feature(const_str_from_utf8)]"}, {"sha": "cd1f418028c62c97e55bec1d05abb5797f02dc4f", "filename": "src/bootstrap/build.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/72f4923979979abb5d6b975353e9b3053d257e60/src%2Fbootstrap%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f4923979979abb5d6b975353e9b3053d257e60/src%2Fbootstrap%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild.rs?ref=72f4923979979abb5d6b975353e9b3053d257e60", "patch": "@@ -1,43 +1,7 @@\n-use env::consts::{EXE_EXTENSION, EXE_SUFFIX};\n use std::env;\n-use std::ffi::OsString;\n-use std::path::PathBuf;\n-\n-/// Given an executable called `name`, return the filename for the\n-/// executable for a particular target.\n-pub fn exe(name: &PathBuf) -> PathBuf {\n-    if EXE_EXTENSION != \"\" && name.extension() != Some(EXE_EXTENSION.as_ref()) {\n-        let mut name: OsString = name.clone().into();\n-        name.push(EXE_SUFFIX);\n-        name.into()\n-    } else {\n-        name.clone()\n-    }\n-}\n \n fn main() {\n     let host = env::var(\"HOST\").unwrap();\n     println!(\"cargo:rerun-if-changed=build.rs\");\n-    println!(\"cargo:rerun-if-env-changed=RUSTC\");\n     println!(\"cargo:rustc-env=BUILD_TRIPLE={}\", host);\n-\n-    // This may not be a canonicalized path.\n-    let mut rustc = PathBuf::from(env::var_os(\"RUSTC\").unwrap());\n-\n-    if rustc.is_relative() {\n-        println!(\"cargo:rerun-if-env-changed=PATH\");\n-        for dir in env::split_paths(&env::var_os(\"PATH\").unwrap_or_default()) {\n-            let absolute = dir.join(&exe(&rustc));\n-            if absolute.exists() {\n-                rustc = absolute;\n-                break;\n-            }\n-        }\n-    }\n-    assert!(rustc.is_absolute());\n-\n-    // FIXME: if the path is not utf-8, this is going to break. Unfortunately\n-    // Cargo doesn't have a way for us to specify non-utf-8 paths easily, so\n-    // we'll need to invent some encoding scheme if this becomes a problem.\n-    println!(\"cargo:rustc-env=RUSTC={}\", rustc.to_str().unwrap());\n }"}, {"sha": "415774d7255d7bc57521d1506f46e6b91994da1e", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72f4923979979abb5d6b975353e9b3053d257e60/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f4923979979abb5d6b975353e9b3053d257e60/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=72f4923979979abb5d6b975353e9b3053d257e60", "patch": "@@ -1557,13 +1557,12 @@ impl<'a> Builder<'a> {\n         match mode {\n             Mode::ToolBootstrap => {\n                 // Restrict the allowed features to those passed by rustbuild, so we don't depend on nightly accidentally.\n-                // HACK: because anyhow does feature detection in build.rs, we need to allow the backtrace feature too.\n-                rustflags.arg(\"-Zallow-features=binary-dep-depinfo,backtrace\");\n+                rustflags.arg(\"-Zallow-features=binary-dep-depinfo\");\n             }\n             Mode::ToolStd => {\n                 // Right now this is just compiletest and a few other tools that build on stable.\n                 // Allow them to use `feature(test)`, but nothing else.\n-                rustflags.arg(\"-Zallow-features=binary-dep-depinfo,test,backtrace,proc_macro_internals,proc_macro_diagnostic,proc_macro_span\");\n+                rustflags.arg(\"-Zallow-features=binary-dep-depinfo,test,proc_macro_internals,proc_macro_diagnostic,proc_macro_span\");\n             }\n             Mode::Std | Mode::Rustc | Mode::Codegen | Mode::ToolRustc => {}\n         }"}, {"sha": "f58cdb5945e53e18ee3cb65894da7ba7954fb99b", "filename": "src/test/ui/consts/issue-88071.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f4923979979abb5d6b975353e9b3053d257e60/src%2Ftest%2Fui%2Fconsts%2Fissue-88071.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f4923979979abb5d6b975353e9b3053d257e60/src%2Ftest%2Fui%2Fconsts%2Fissue-88071.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-88071.rs?ref=72f4923979979abb5d6b975353e9b3053d257e60", "patch": "@@ -2,8 +2,6 @@\n //\n // regression test for #88071\n \n-#![feature(const_btree_new)]\n-\n use std::collections::BTreeMap;\n \n pub struct CustomMap<K, V>(BTreeMap<K, V>);"}, {"sha": "328ec6f906b1fb6949f24fd9b5d8e5fa0ee8afba", "filename": "src/test/ui/parser/issues/issue-101540.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/72f4923979979abb5d6b975353e9b3053d257e60/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-101540.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f4923979979abb5d6b975353e9b3053d257e60/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-101540.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-101540.rs?ref=72f4923979979abb5d6b975353e9b3053d257e60", "patch": "@@ -0,0 +1,7 @@\n+struct S1 {\n+    struct S2 {\n+    //~^ ERROR structs are not allowed in struct definitions\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "53c7c9590e6cac194e0065d554fea82466ee6e14", "filename": "src/test/ui/parser/issues/issue-101540.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72f4923979979abb5d6b975353e9b3053d257e60/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-101540.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72f4923979979abb5d6b975353e9b3053d257e60/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-101540.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-101540.stderr?ref=72f4923979979abb5d6b975353e9b3053d257e60", "patch": "@@ -0,0 +1,10 @@\n+error: structs are not allowed in struct definitions\n+  --> $DIR/issue-101540.rs:2:5\n+   |\n+LL |     struct S2 {\n+   |     ^^^^^^^^^\n+   |\n+   = help: consider creating a new `struct` definition instead of nesting\n+\n+error: aborting due to previous error\n+"}, {"sha": "f7ce7191772684399ec2badf558302c68c0d4493", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/72f4923979979abb5d6b975353e9b3053d257e60/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f4923979979abb5d6b975353e9b3053d257e60/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=72f4923979979abb5d6b975353e9b3053d257e60", "patch": "@@ -367,10 +367,21 @@ fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<RustcVersion>) -> bo\n                 // Checking MSRV is manually necessary because `rustc` has no such concept. This entire\n                 // function could be removed if `rustc` provided a MSRV-aware version of `is_const_fn`.\n                 // as a part of an unimplemented MSRV check https://github.com/rust-lang/rust/issues/65262.\n+\n+                // HACK(nilstrieb): CURRENT_RUSTC_VERSION can return versions like 1.66.0-dev. `rustc-semver` doesn't accept\n+                //                  the `-dev` version number so we have to strip it off.\n+                let short_version = since\n+                    .as_str()\n+                    .split('-')\n+                    .next()\n+                    .expect(\"rustc_attr::StabilityLevel::Stable::since` is empty\");\n+\n+                let since = rustc_span::Symbol::intern(short_version);\n+\n                 crate::meets_msrv(\n                     msrv,\n                     RustcVersion::parse(since.as_str())\n-                        .expect(\"`rustc_attr::StabilityLevel::Stable::since` is ill-formatted\"),\n+                        .unwrap_or_else(|err| panic!(\"`rustc_attr::StabilityLevel::Stable::since` is ill-formatted: `{since}`, {err:?}\")),\n                 )\n             } else {\n                 // Unstable const fn with the feature enabled."}, {"sha": "b2dc2248b55626c2c0cd5461f2519a987af396a3", "filename": "src/tools/clippy/tests/ui/crashes/ice-7126.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72f4923979979abb5d6b975353e9b3053d257e60/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7126.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f4923979979abb5d6b975353e9b3053d257e60/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7126.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7126.rs?ref=72f4923979979abb5d6b975353e9b3053d257e60", "patch": "@@ -1,13 +1,13 @@\n // This test requires a feature gated const fn and will stop working in the future.\n \n-#![feature(const_btree_new)]\n+#![feature(const_btree_len)]\n \n use std::collections::BTreeMap;\n \n-struct Foo(BTreeMap<i32, i32>);\n+struct Foo(usize);\n impl Foo {\n     fn new() -> Self {\n-        Self(BTreeMap::new())\n+        Self(BTreeMap::len(&BTreeMap::<u8, u8>::new()))\n     }\n }\n "}]}