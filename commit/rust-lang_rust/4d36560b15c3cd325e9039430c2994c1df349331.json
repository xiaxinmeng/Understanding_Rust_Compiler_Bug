{"sha": "4d36560b15c3cd325e9039430c2994c1df349331", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMzY1NjBiMTVjM2NkMzI1ZTkwMzk0MzBjMjk5NGMxZGYzNDkzMzE=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2020-06-13T00:28:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-13T00:28:25Z"}, "message": "Merge pull request #4253 from calebcartwright/rustfmt-1.4.18\n\nbump rustfmt 1.x rustc-ap* crates to v644", "tree": {"sha": "97ec80d40f061fdb90359f9b53b584fa252d7452", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97ec80d40f061fdb90359f9b53b584fa252d7452"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d36560b15c3cd325e9039430c2994c1df349331", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe5B2pCRBK7hj4Ov3rIwAAdHIIAIqFF8EbRPugjIyaXV7nt0sp\ns9nfXStfnZyY559GLFwgiXJDr5FkwfePArzzQvZJj1wy1ehliUjb4T5COGDJWX1m\n26ZBq5YxBYMiIrc1kGhXTZixUht+HTDP+h7grdEJnDaU7k5vdc2jD2wSTDJS0/S5\njTp6MO/4wshmUx9DpJy+WEtz7fbR3ZqrWvrYgErTHbjKWfH/0z6/czF0YBqU2pOP\njw6p5NkERiBARNjEXNZkv7EAh9TqeKW3BcgzIaRwBN4hOJoarm6XQ9uCXnSj1+6G\nSXXp1qTyDFwXhp1QgVwQYB80RMYrfQDeZrnuwxcRmZs9M9xyHpj9HZ84iK3y9RQ=\n=cP2R\n-----END PGP SIGNATURE-----\n", "payload": "tree 97ec80d40f061fdb90359f9b53b584fa252d7452\nparent de8238c618c1541fac06931a1b7056f283664e55\nparent 796d6eafa40ae26e245be92c74709151eb343447\nauthor Seiichi Uchida <seuchida@gmail.com> 1592008105 +0900\ncommitter GitHub <noreply@github.com> 1592008105 +0900\n\nMerge pull request #4253 from calebcartwright/rustfmt-1.4.18\n\nbump rustfmt 1.x rustc-ap* crates to v644"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d36560b15c3cd325e9039430c2994c1df349331", "html_url": "https://github.com/rust-lang/rust/commit/4d36560b15c3cd325e9039430c2994c1df349331", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d36560b15c3cd325e9039430c2994c1df349331/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de8238c618c1541fac06931a1b7056f283664e55", "url": "https://api.github.com/repos/rust-lang/rust/commits/de8238c618c1541fac06931a1b7056f283664e55", "html_url": "https://github.com/rust-lang/rust/commit/de8238c618c1541fac06931a1b7056f283664e55"}, {"sha": "796d6eafa40ae26e245be92c74709151eb343447", "url": "https://api.github.com/repos/rust-lang/rust/commits/796d6eafa40ae26e245be92c74709151eb343447", "html_url": "https://github.com/rust-lang/rust/commit/796d6eafa40ae26e245be92c74709151eb343447"}], "stats": {"total": 798, "additions": 507, "deletions": 291}, "files": [{"sha": "017fd690308e6faf3e0afeab609517232270889c", "filename": "Cargo.lock", "status": "modified", "additions": 219, "deletions": 148, "changes": 367, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -16,6 +16,11 @@ dependencies = [\n  \"ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"annotate-snippets\"\n+version = \"0.8.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"ansi_term\"\n version = \"0.11.0\"\n@@ -24,6 +29,11 @@ dependencies = [\n  \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"anyhow\"\n+version = \"1.0.25\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"arrayref\"\n version = \"0.3.5\"\n@@ -531,6 +541,14 @@ dependencies = [\n  \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"once_cell\"\n+version = \"1.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"parking_lot 0.10.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"opaque-debug\"\n version = \"0.2.3\"\n@@ -592,12 +610,26 @@ dependencies = [\n \n [[package]]\n name = \"proc-macro-error\"\n-version = \"0.2.6\"\n+version = \"0.4.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n+ \"proc-macro-error-attr 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc-macro2 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syn 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"version_check 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"proc-macro-error-attr\"\n+version = \"0.4.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"proc-macro2 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn-mid 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"version_check 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -706,83 +738,80 @@ dependencies = [\n ]\n \n [[package]]\n-name = \"rustc-ap-arena\"\n-version = \"659.0.0\"\n+name = \"rustc-ap-rustc_arena\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-rustc_data_structures 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"rustc-ap-graphviz\"\n-version = \"659.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"rustc-ap-rustc_ast\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n+ \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_index 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_lexer 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_macros 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_index 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_lexer 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_serialize 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_ast_passes\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_ast 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_ast_pretty 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_attr 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_feature 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_parse 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_session 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast_pretty 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_attr 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_feature 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_parse 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_session 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_ast_pretty\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_ast 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_attr\"\n-version = \"659.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"rustc-ap-rustc_ast 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_ast_pretty 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_feature 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_macros 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_session 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+version = \"664.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rustc-ap-rustc_ast 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast_pretty 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_feature 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_serialize 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_session 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"version_check 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_data_structures\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -795,10 +824,11 @@ dependencies = [\n  \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"measureme 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"once_cell 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.10.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-graphviz 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_index 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_graphviz 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_index 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_serialize 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon-core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -810,15 +840,15 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_errors\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"annotate-snippets 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"annotate-snippets 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_serialize 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termize 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -827,60 +857,65 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_expand\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_ast 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_ast_passes 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_ast_pretty 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_attr 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_feature 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_lexer 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_parse 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_session 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast_passes 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast_pretty 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_attr 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_feature 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_lexer 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_parse 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_serialize 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_session 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_feature\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_fs_util\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"rustc-ap-rustc_graphviz\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-ap-rustc_index\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-serialize 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_serialize 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_lexer\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_macros\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -891,80 +926,79 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_parse\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_ast 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_ast_pretty 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_feature 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_lexer 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_session 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast_pretty 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_feature 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_lexer 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_session 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-normalization 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rustc-ap-rustc_serialize\"\n+version = \"664.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"indexmap 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rustc-ap-rustc_session\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"getopts 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_ast 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_feature 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_fs_util 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_index 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_feature 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_fs_util 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_serialize 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_span\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"md-5 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-arena 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_index 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_macros 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_arena 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_index 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_serialize 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"sha-1 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_target\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_index 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_macros 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"rustc-ap-serialize\"\n-version = \"659.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"indexmap 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_index 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_serialize 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1029,34 +1063,35 @@ name = \"rustfmt-nightly\"\n version = \"1.4.17\"\n dependencies = [\n  \"annotate-snippets 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"anyhow 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bytecount 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cargo_metadata 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"derive-new 0.5.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"dirs 2.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"failure 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ignore 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_ast 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_ast_pretty 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_attr 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_expand 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_parse 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_session 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast_pretty 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_attr 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_expand 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_parse 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_session 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-workspace-hack 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustfmt-config_proc_macro 0.2.0\",\n  \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"structopt 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"structopt 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thiserror 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1173,20 +1208,21 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"structopt\"\n-version = \"0.3.3\"\n+version = \"0.3.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"structopt-derive 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"structopt-derive 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"structopt-derive\"\n-version = \"0.3.3\"\n+version = \"0.4.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"proc-macro-error 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro-error 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc-macro2 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syn 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1202,6 +1238,16 @@ dependencies = [\n  \"unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"syn-mid\"\n+version = \"0.5.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"proc-macro2 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"synstructure\"\n version = \"0.12.1\"\n@@ -1247,6 +1293,24 @@ dependencies = [\n  \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"thiserror\"\n+version = \"1.0.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"thiserror-impl 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"thiserror-impl\"\n+version = \"1.0.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"proc-macro2 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"thread_local\"\n version = \"0.3.6\"\n@@ -1368,7 +1432,9 @@ dependencies = [\n [metadata]\n \"checksum aho-corasick 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"58fb5e95d83b38284460a5fda7d6470aa0b8844d283a0b614b8535e880800d2d\"\n \"checksum annotate-snippets 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c7021ce4924a3f25f802b2cccd1af585e39ea1a363a1aa2e72afe54b67a3a7a7\"\n+\"checksum annotate-snippets 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d78ea013094e5ea606b1c05fe35f1dd7ea1eb1ea259908d040b25bd5ec677ee5\"\n \"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n+\"checksum anyhow 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9267dff192e68f3399525901e709a48c1d3982c9c072fa32f2127a0cb0babf14\"\n \"checksum arrayref 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d382e583f07208808f6b1249e60848879ba3543f57c32277bf52d69c2f0f0ee\"\n \"checksum arrayvec 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cd9fd44efafa8690358b7408d253adf110036b88f55672a933f01d616ad9b1b9\"\n \"checksum atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1803c647a3ec87095e7ae7acfca019e98de5ec9a7d01343f611cf3152ed71a90\"\n@@ -1431,13 +1497,15 @@ dependencies = [\n \"checksum memoffset 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ce6075db033bbbb7ee5a0bbd3a3186bbae616f57fb001c485c7ff77955f8177f\"\n \"checksum nodrop 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72ef4a56884ca558e5ddb05a1d1e7e1bfd9a68d9ed024c21704cc98872dae1bb\"\n \"checksum num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bcef43580c035376c0705c42792c294b66974abbfd2789b511784023f71f3273\"\n+\"checksum once_cell 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b631f7e854af39a1739f401cf34a8a013dfe09eac4fa4dba91e9768bd28168d\"\n \"checksum opaque-debug 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2839e79665f131bdb5782e51f2c6c9599c133c6098982a54c794358bf432529c\"\n \"checksum packed_simd 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a85ea9fc0d4ac0deb6fe7911d38786b32fc11119afd9e9d38b84ff691ce64220\"\n \"checksum parking_lot 0.10.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3a704eb390aafdc107b0e392f56a82b668e3a71366993b5340f5833fd62505e\"\n \"checksum parking_lot 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f842b1982eb6c2fe34036a4fbfb06dd185a3f5c8edfaacdf7d1ea10b07de6252\"\n \"checksum parking_lot_core 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b876b1b9e7ac6e1a74a6da34d25c42e17e8862aa409cbbbdcfc8d86c6f3bc62b\"\n \"checksum parking_lot_core 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d58c7c768d4ba344e3e8d72518ac13e259d7c7ade24167003b8488e10b6740a3\"\n-\"checksum proc-macro-error 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aeccfe4d5d8ea175d5f0e4a2ad0637e0f4121d63bd99d356fb1f39ab2e7c6097\"\n+\"checksum proc-macro-error 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e7959c6467d962050d639361f7703b2051c43036d03493c36f01d440fdd3138a\"\n+\"checksum proc-macro-error-attr 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e4002d9f55991d5e019fb940a90e1a95eb80c24e77cb2462dd4dc869604d543a\"\n \"checksum proc-macro2 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9c9e470a8dc4aeae2dee2f335e8f533e2d4b347e1434e5671afc49b054592f27\"\n \"checksum psm 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"659ecfea2142a458893bb7673134bad50b752fea932349c213d6a23874ce3aa7\"\n \"checksum quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9274b940887ce9addde99c4eee6b5c44cc494b182b97e73dc8ffdcb3397fd3f0\"\n@@ -1451,25 +1519,25 @@ dependencies = [\n \"checksum regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dc220bd33bdce8f093101afe22a037b8eb0e5af33592e6a9caafff0d4cb81cbd\"\n \"checksum regex-syntax 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11a7e20d1cce64ef2fed88b66d347f88bd9babb82845b2b858f3edbf59a4f716\"\n \"checksum rust-argon2 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4ca4eaef519b494d1f2848fc602d18816fed808a981aedf4f1f00ceb7c9d32cf\"\n-\"checksum rustc-ap-arena 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fdaf0295fc40b10ec1091aad1a1760b4bb3b4e7c4f77d543d1a2e9d50a01e6b1\"\n-\"checksum rustc-ap-graphviz 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8028e8cdb4eb71810d0c22a5a5e1e3106c81123be63ce7f044b6d4ac100d8941\"\n-\"checksum rustc-ap-rustc_ast 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"16e9e502bb3a5568433db1cf2fb1f1e1074934636069cf744ad7c77b58e1428e\"\n-\"checksum rustc-ap-rustc_ast_passes 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"faf35ffecab28f97f7ac01cf6a13afaca6408529d15eb95f317a43b2ffb88933\"\n-\"checksum rustc-ap-rustc_ast_pretty 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3684ed43dc552f1e030e3f7a5a300a7a834bdda4e9e00ab80284be4220d8c603\"\n-\"checksum rustc-ap-rustc_attr 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31b413927daa666983b3b49227f9ac218aa29254546abdb585f20cd71c391870\"\n-\"checksum rustc-ap-rustc_data_structures 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4b1c6069e5c522657f1c6f5ab33074e097092f48e804cc896d337e319aacbd60\"\n-\"checksum rustc-ap-rustc_errors 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c374e89b3c9714869ef86076942155383804ba6778c26be2169d324563c31f9\"\n-\"checksum rustc-ap-rustc_expand 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"259d2a7aa7a12f3c99a4ce4123643ec065f1a26f8e89be1f9bedd9757ea53fdc\"\n-\"checksum rustc-ap-rustc_feature 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0296fbc29b629d5ae2ebee1bbf0407bb22de04d26d87216c20899b79579ccb3\"\n-\"checksum rustc-ap-rustc_fs_util 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"34734f6cc681399630acd836a14207c6b5b9671a290cc7cad0354b0a4d71b3c9\"\n-\"checksum rustc-ap-rustc_index 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d1e4508753d71d3523209c2ca5086db15a1413e71ebf17ad5412bb7ced5e44c2\"\n-\"checksum rustc-ap-rustc_lexer 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"42b9fcd8407e322908a721262fbc0b35b5f3c35bb173a26dd1e0070bde336e33\"\n-\"checksum rustc-ap-rustc_macros 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d104115a689367d2e0bcd99f37e0ebd6b9c8c78bab0d9cbea5bae86323601b5\"\n-\"checksum rustc-ap-rustc_parse 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"afaaab91853fc5a3916785ccae727a4433359d9787c260d42b96a2265fe5b287\"\n-\"checksum rustc-ap-rustc_session 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"86e756a57ce6ce1b868e35e64a7e10ab28d49ece80d7c661b07aff5afc6e5d2d\"\n-\"checksum rustc-ap-rustc_span 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"21031c3396ee452f4c6e994b67513a633055c57c86d00336afd9d63149518f34\"\n-\"checksum rustc-ap-rustc_target 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff21badfbead5b0050391eaad8840f2e4fcb03b6b0fc6006f447443529e9ae6e\"\n-\"checksum rustc-ap-serialize 659.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"768b5a305669d934522712bc13502962edfde5128ea63b9e7db4000410be1dc6\"\n+\"checksum rustc-ap-rustc_arena 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c6683b49209f8b132bec33dc6b6c8f9958c8c94eb3586d4cb495e092b61c1da\"\n+\"checksum rustc-ap-rustc_ast 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5b21784d92fb2d584800f528866f00fe814f73abda794f406bfd1fbb2f1ca7f7\"\n+\"checksum rustc-ap-rustc_ast_passes 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"820c46fde7ef1df0432073090d775f097b7279ca75ea34ba954081ce4b884d4c\"\n+\"checksum rustc-ap-rustc_ast_pretty 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"013db7dd198fe95962d2cefa5bd0b350cf2028af77c169b17b4baa9c3bbf77d1\"\n+\"checksum rustc-ap-rustc_attr 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"35b5a85c90eb341eec543600ffdd9e262da5ea72a73a23ae4ca2f4ab8cd1a188\"\n+\"checksum rustc-ap-rustc_data_structures 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b92e4c6cb6c43ee9031a71709dc12853b358253c2b41d12a26379994fab625e0\"\n+\"checksum rustc-ap-rustc_errors 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6b0aa79423260c1b9e2f856e144e040f606b0f5d43644408375becf9d7bcdf86\"\n+\"checksum rustc-ap-rustc_expand 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c07d76ba2a1b7d4325a2ed21d6345ccebd89ddc6666a1535a6edd489fb4cbc11\"\n+\"checksum rustc-ap-rustc_feature 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1bbd625705c1db42a0c7503736292813d7b76ada5da20578fb55c63228c80ab5\"\n+\"checksum rustc-ap-rustc_fs_util 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"34cca6e2942fa0b059c582437ead666d5bcf20fa7c242599e2bbea9b609f29ae\"\n+\"checksum rustc-ap-rustc_graphviz 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"13d6a029b81f5e02da85763f82c135507f278a4a0c776432c728520563059529\"\n+\"checksum rustc-ap-rustc_index 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bae50852d303e230b2781c994513788136dc6c2fe4ebe032959f0b990a425767\"\n+\"checksum rustc-ap-rustc_lexer 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b7186e74aa2d31bf0e2454325fefcdf0a3da77d9344134592144b9e40d45b15d\"\n+\"checksum rustc-ap-rustc_macros 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4fc1add04e9d2301164118660ee0bc3266e9a7b1973fc2303fdbe002a12e5401\"\n+\"checksum rustc-ap-rustc_parse 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9cd7fc4968bd60084f2fa4f280fa450b0cf98660a7983d6b93a7ae41b6d1d322\"\n+\"checksum rustc-ap-rustc_serialize 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"00bf4c110271d9a2b7dfd2c6eb82e56fd80606a8bad6c102e158c54e44044046\"\n+\"checksum rustc-ap-rustc_session 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"431cf962de71d4c03fb877d54f331ec36eca77350b0539017abc40a4410d6501\"\n+\"checksum rustc-ap-rustc_span 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b912039640597624f4bcb75f1e1fcfa5710267d715a7f73a6336baef341b23d1\"\n+\"checksum rustc-ap-rustc_target 664.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"51347a9dadc5ad0b5916cc12d42624b31955285ad13745dbe72f0140038b84e9\"\n \"checksum rustc-demangle 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4c691c0e608126e00913e33f0ccf3727d5fc84573623b8d65b2df340b5201783\"\n \"checksum rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7540fc8b0c49f096ee9c961cda096467dce8084bec6bdca2fc83895fd9b28cb8\"\n \"checksum rustc-rayon 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f32767f90d938f1b7199a174ef249ae1924f6e5bbdb9d112fea141e016f25b3a\"\n@@ -1491,14 +1559,17 @@ dependencies = [\n \"checksum stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dba1a27d3efae4351c8051072d619e3ade2820635c3958d826bfea39d59b54c8\"\n \"checksum stacker 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72dd941b456e1c006d6b9f27c526d5b69281288aeea8cba82c19d3843d8ccdd2\"\n \"checksum strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n-\"checksum structopt 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d4f66a4c0ddf7aee4677995697366de0749b0139057342eccbb609b12d0affc\"\n-\"checksum structopt-derive 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8fe0c13e476b4e21ff7f5c4ace3818b6d7bdc16897c31c73862471bc1663acae\"\n+\"checksum structopt 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fe43617218c0805c6eb37160119dc3c548110a67786da7218d1c6555212f073\"\n+\"checksum structopt-derive 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c6e79c80e0f4efd86ca960218d4e056249be189ff1c42824dcd9a7f51a56f0bd\"\n \"checksum syn 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"66850e97125af79138385e9b88339cbcd037e3f28ceab8c5ad98e64f0f1f80bf\"\n+\"checksum syn-mid 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7be3539f6c128a931cf19dcee741c1af532c7fd387baa739c03dd2e96479338a\"\n \"checksum synstructure 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3f085a5855930c0441ca1288cf044ea4aecf4f43a91668abdb870b4ba546a203\"\n \"checksum term 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5\"\n \"checksum termcolor 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"96d6098003bde162e4277c70665bd87c326f5a0c3f3fbfb285787fa482d54e6e\"\n \"checksum termize 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1706be6b564323ce7092f5f7e6b118a14c8ef7ed0e69c8c5329c914a9f101295\"\n \"checksum textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\n+\"checksum thiserror 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cc6b305ec0e323c7b6cfff6098a22516e0063d0bb7c3d88660a890217dca099a\"\n+\"checksum thiserror-impl 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"45ba8d810d9c48fc456b7ad54574e8bfb7c7918a57ad7a6e6a0985d7959e8597\"\n \"checksum thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c6b53e329000edc2b34dbe8545fd20e55a333362d0a321909685a19bd28c3f1b\"\n \"checksum thread_local 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d40c6d1b69745a6ec6fb1ca717914848da4b44ae29d9b3080cbee91d72a69b14\"\n \"checksum toml 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c7aabe75941d914b72bf3e5d3932ed92ce0664d49d8432305a8b547c37227724\""}, {"sha": "995e3adcb359b9d6af7399f9fb9342be9824db25", "filename": "Cargo.toml", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -47,7 +47,6 @@ env_logger = \"0.6\"\n getopts = \"0.2\"\n derive-new = \"0.5\"\n cargo_metadata = \"0.8\"\n-failure = \"0.1.3\"\n bytecount = \"0.6\"\n unicode-width = \"0.1.5\"\n unicode_categories = \"0.1.1\"\n@@ -57,6 +56,8 @@ annotate-snippets = { version = \"0.6\", features = [\"ansi_term\"] }\n structopt = \"0.3\"\n rustfmt-config_proc_macro = { version = \"0.2\", path = \"config_proc_macro\" }\n lazy_static = \"1.0.0\"\n+anyhow = \"1.0\"\n+thiserror = \"1.0\"\n \n # A noop dependency that changes in the Rust repository, it's a bit of a hack.\n # See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`\n@@ -65,36 +66,36 @@ rustc-workspace-hack = \"1.0.0\"\n \n [dependencies.rustc_ast]\n package = \"rustc-ap-rustc_ast\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n \n [dependencies.rustc_ast_pretty]\n package = \"rustc-ap-rustc_ast_pretty\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n \n [dependencies.rustc_attr]\n package = \"rustc-ap-rustc_attr\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n \n [dependencies.rustc_data_structures]\n package = \"rustc-ap-rustc_data_structures\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n \n [dependencies.rustc_errors]\n package = \"rustc-ap-rustc_errors\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n \n [dependencies.rustc_expand]\n package = \"rustc-ap-rustc_expand\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n \n [dependencies.rustc_parse]\n package = \"rustc-ap-rustc_parse\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n \n [dependencies.rustc_session]\n package = \"rustc-ap-rustc_session\"\n-version = \"659.0.0\"\n+version = \"664.0.0\"\n \n [dependencies.rustc_span]\n package = \"rustc-ap-rustc_span\"\n-version = \"659.0.0\"\n+version = \"664.0.0\""}, {"sha": "9101c015fb92f93772947fc2a7e918870e4cc60e", "filename": "src/bin/main.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -1,6 +1,7 @@\n+use anyhow::{format_err, Result};\n use env_logger;\n-use failure::{err_msg, format_err, Error as FailureError, Fail};\n use io::Error as IoError;\n+use thiserror::Error;\n \n use rustfmt_nightly as rustfmt;\n \n@@ -59,27 +60,27 @@ enum Operation {\n }\n \n /// Rustfmt operations errors.\n-#[derive(Fail, Debug)]\n+#[derive(Error, Debug)]\n pub enum OperationError {\n     /// An unknown help topic was requested.\n-    #[fail(display = \"Unknown help topic: `{}`.\", _0)]\n+    #[error(\"Unknown help topic: `{0}`.\")]\n     UnknownHelpTopic(String),\n     /// An unknown print-config option was requested.\n-    #[fail(display = \"Unknown print-config option: `{}`.\", _0)]\n+    #[error(\"Unknown print-config option: `{0}`.\")]\n     UnknownPrintConfigTopic(String),\n     /// Attempt to generate a minimal config from standard input.\n-    #[fail(display = \"The `--print-config=minimal` option doesn't work with standard input.\")]\n+    #[error(\"The `--print-config=minimal` option doesn't work with standard input.\")]\n     MinimalPathWithStdin,\n     /// An io error during reading or writing.\n-    #[fail(display = \"io error: {}\", _0)]\n+    #[error(\"{0}\")]\n     IoError(IoError),\n     /// Attempt to use --check with stdin, which isn't currently\n     /// supported.\n-    #[fail(display = \"The `--check` option is not supported with standard input.\")]\n+    #[error(\"The `--check` option is not supported with standard input.\")]\n     CheckWithStdin,\n     /// Attempt to use --emit=json with stdin, which isn't currently\n     /// supported.\n-    #[fail(display = \"Using `--emit` other than stdout is not supported with standard input.\")]\n+    #[error(\"Using `--emit` other than stdout is not supported with standard input.\")]\n     EmitWithStdin,\n }\n \n@@ -192,7 +193,7 @@ fn is_nightly() -> bool {\n }\n \n // Returned i32 is an exit code\n-fn execute(opts: &Options) -> Result<i32, FailureError> {\n+fn execute(opts: &Options) -> Result<i32> {\n     let matches = opts.parse(env::args().skip(1))?;\n     let options = GetOptsOptions::from_matches(&matches)?;\n \n@@ -214,7 +215,7 @@ fn execute(opts: &Options) -> Result<i32, FailureError> {\n             Ok(0)\n         }\n         Operation::ConfigOutputDefault { path } => {\n-            let toml = Config::default().all_options().to_toml().map_err(err_msg)?;\n+            let toml = Config::default().all_options().to_toml()?;\n             if let Some(path) = path {\n                 let mut file = File::create(path)?;\n                 file.write_all(toml.as_bytes())?;\n@@ -233,7 +234,7 @@ fn execute(opts: &Options) -> Result<i32, FailureError> {\n             let file = file.canonicalize().unwrap_or(file);\n \n             let (config, _) = load_config(Some(file.parent().unwrap()), Some(options.clone()))?;\n-            let toml = config.all_options().to_toml().map_err(err_msg)?;\n+            let toml = config.all_options().to_toml()?;\n             io::stdout().write_all(toml.as_bytes())?;\n \n             Ok(0)\n@@ -246,7 +247,7 @@ fn execute(opts: &Options) -> Result<i32, FailureError> {\n     }\n }\n \n-fn format_string(input: String, options: GetOptsOptions) -> Result<i32, FailureError> {\n+fn format_string(input: String, options: GetOptsOptions) -> Result<i32> {\n     // try to read config from local directory\n     let (mut config, _) = load_config(Some(Path::new(\".\")), Some(options.clone()))?;\n \n@@ -287,7 +288,7 @@ fn format(\n     files: Vec<PathBuf>,\n     minimal_config_path: Option<String>,\n     options: &GetOptsOptions,\n-) -> Result<i32, FailureError> {\n+) -> Result<i32> {\n     options.verify_file_lines(&files);\n     let (config, config_path) = load_config(None, Some(options.clone()))?;\n \n@@ -335,7 +336,7 @@ fn format(\n     // that were used during formatting as TOML.\n     if let Some(path) = minimal_config_path {\n         let mut file = File::create(path)?;\n-        let toml = session.config.used_options().to_toml().map_err(err_msg)?;\n+        let toml = session.config.used_options().to_toml()?;\n         file.write_all(toml.as_bytes())?;\n     }\n \n@@ -514,7 +515,7 @@ struct GetOptsOptions {\n }\n \n impl GetOptsOptions {\n-    pub fn from_matches(matches: &Matches) -> Result<GetOptsOptions, FailureError> {\n+    pub fn from_matches(matches: &Matches) -> Result<GetOptsOptions> {\n         let mut options = GetOptsOptions::default();\n         options.verbose = matches.opt_present(\"verbose\");\n         options.quiet = matches.opt_present(\"quiet\");\n@@ -535,7 +536,7 @@ impl GetOptsOptions {\n                     options.error_on_unformatted = Some(true);\n                 }\n                 if let Some(ref file_lines) = matches.opt_str(\"file-lines\") {\n-                    options.file_lines = file_lines.parse().map_err(err_msg)?;\n+                    options.file_lines = file_lines.parse()?;\n                 }\n             } else {\n                 let mut unstable_options = vec![];\n@@ -684,15 +685,15 @@ impl CliOptions for GetOptsOptions {\n     }\n }\n \n-fn edition_from_edition_str(edition_str: &str) -> Result<Edition, FailureError> {\n+fn edition_from_edition_str(edition_str: &str) -> Result<Edition> {\n     match edition_str {\n         \"2015\" => Ok(Edition::Edition2015),\n         \"2018\" => Ok(Edition::Edition2018),\n         _ => Err(format_err!(\"Invalid value for `--edition`\")),\n     }\n }\n \n-fn emit_mode_from_emit_str(emit_str: &str) -> Result<EmitMode, FailureError> {\n+fn emit_mode_from_emit_str(emit_str: &str) -> Result<EmitMode> {\n     match emit_str {\n         \"files\" => Ok(EmitMode::Files),\n         \"stdout\" => Ok(EmitMode::Stdout),"}, {"sha": "1da62d176817171b46b433b06978f6c6fc2fcd74", "filename": "src/comment.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -91,8 +91,9 @@ impl<'a> CommentStyle<'a> {\n             | CommentStyle::TripleSlash\n             | CommentStyle::Custom(..)\n             | CommentStyle::Doc => \"\",\n-            CommentStyle::DoubleBullet => \" **/\",\n-            CommentStyle::SingleBullet | CommentStyle::Exclamation => \" */\",\n+            CommentStyle::SingleBullet | CommentStyle::DoubleBullet | CommentStyle::Exclamation => {\n+                \" */\"\n+            }\n         }\n     }\n \n@@ -101,8 +102,9 @@ impl<'a> CommentStyle<'a> {\n             CommentStyle::DoubleSlash => \"// \",\n             CommentStyle::TripleSlash => \"/// \",\n             CommentStyle::Doc => \"//! \",\n-            CommentStyle::SingleBullet | CommentStyle::Exclamation => \" * \",\n-            CommentStyle::DoubleBullet => \" ** \",\n+            CommentStyle::SingleBullet | CommentStyle::DoubleBullet | CommentStyle::Exclamation => {\n+                \" * \"\n+            }\n             CommentStyle::Custom(opener) => opener,\n         }\n     }\n@@ -527,7 +529,6 @@ impl<'a> CommentRewrite<'a> {\n             .checked_sub(closer.len() + opener.len())\n             .unwrap_or(1);\n         let indent_str = shape.indent.to_string_with_newline(config).to_string();\n-        let fmt_indent = shape.indent + (opener.len() - line_start.len());\n \n         let mut cr = CommentRewrite {\n             result: String::with_capacity(orig.len() * 2),\n@@ -538,14 +539,14 @@ impl<'a> CommentRewrite<'a> {\n             comment_line_separator: format!(\"{}{}\", indent_str, line_start),\n             max_width,\n             indent_str,\n-            fmt_indent,\n+            fmt_indent: shape.indent,\n \n             fmt: StringFormat {\n                 opener: \"\",\n                 closer: \"\",\n                 line_start,\n                 line_end: \"\",\n-                shape: Shape::legacy(max_width, fmt_indent),\n+                shape: Shape::legacy(max_width, shape.indent),\n                 trim_end: true,\n                 config,\n             },"}, {"sha": "18ae2fd2c47753d409ce161a0d3695a8ae505ced", "filename": "src/config/file_lines.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fconfig%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fconfig%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Ffile_lines.rs?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -9,6 +9,7 @@ use std::{cmp, fmt, iter, str};\n use rustc_span::{self, SourceFile};\n use serde::{ser, Deserialize, Deserializer, Serialize, Serializer};\n use serde_json as json;\n+use thiserror::Error;\n \n /// A range of lines in a file, inclusive of both ends.\n pub struct LineRange {\n@@ -27,7 +28,7 @@ pub enum FileName {\n impl From<rustc_span::FileName> for FileName {\n     fn from(name: rustc_span::FileName) -> FileName {\n         match name {\n-            rustc_span::FileName::Real(p) => FileName::Real(p),\n+            rustc_span::FileName::Real(p) => FileName::Real(p.into_local_path()),\n             rustc_span::FileName::Custom(ref f) if f == \"stdin\" => FileName::Stdin,\n             _ => unreachable!(),\n         }\n@@ -287,12 +288,20 @@ fn canonicalize_path_string(file: &FileName) -> Option<FileName> {\n     }\n }\n \n+#[derive(Error, Debug)]\n+pub enum FileLinesError {\n+    #[error(\"{0}\")]\n+    Json(json::Error),\n+    #[error(\"Can't canonicalize {0}\")]\n+    CannotCanonicalize(FileName),\n+}\n+\n // This impl is needed for `Config::override_value` to work for use in tests.\n impl str::FromStr for FileLines {\n-    type Err = String;\n+    type Err = FileLinesError;\n \n-    fn from_str(s: &str) -> Result<FileLines, String> {\n-        let v: Vec<JsonSpan> = json::from_str(s).map_err(|e| e.to_string())?;\n+    fn from_str(s: &str) -> Result<FileLines, Self::Err> {\n+        let v: Vec<JsonSpan> = json::from_str(s).map_err(FileLinesError::Json)?;\n         let mut m = HashMap::new();\n         for js in v {\n             let (s, r) = JsonSpan::into_tuple(js)?;\n@@ -310,10 +319,10 @@ pub struct JsonSpan {\n }\n \n impl JsonSpan {\n-    fn into_tuple(self) -> Result<(FileName, Range), String> {\n+    fn into_tuple(self) -> Result<(FileName, Range), FileLinesError> {\n         let (lo, hi) = self.range;\n         let canonical = canonicalize_path_string(&self.file)\n-            .ok_or_else(|| format!(\"Can't canonicalize {}\", &self.file))?;\n+            .ok_or_else(|| FileLinesError::CannotCanonicalize(self.file))?;\n         Ok((canonical, Range::new(lo, hi)))\n     }\n }"}, {"sha": "cf00eed05654386324ffc73f23edeab5ad31c709", "filename": "src/config/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -6,6 +6,7 @@ use std::path::{Path, PathBuf};\n use std::{env, fs};\n \n use regex::Regex;\n+use thiserror::Error;\n \n use crate::config::config_type::ConfigType;\n #[allow(unreachable_pub)]\n@@ -157,16 +158,20 @@ create_config! {\n          files that would be formated when used with `--check` mode. \";\n }\n \n+#[derive(Error, Debug)]\n+#[error(\"Could not output config: {0}\")]\n+pub struct ToTomlError(toml::ser::Error);\n+\n impl PartialConfig {\n-    pub fn to_toml(&self) -> Result<String, String> {\n+    pub fn to_toml(&self) -> Result<String, ToTomlError> {\n         // Non-user-facing options can't be specified in TOML\n         let mut cloned = self.clone();\n         cloned.file_lines = None;\n         cloned.verbose = None;\n         cloned.width_heuristics = None;\n         cloned.print_misformatted_file_names = None;\n \n-        ::toml::to_string(&cloned).map_err(|e| format!(\"Could not output config: {}\", e))\n+        ::toml::to_string(&cloned).map_err(ToTomlError)\n     }\n }\n "}, {"sha": "ef7278a3a873aa26ae6e6ced12d69143ee5918ea", "filename": "src/expr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -322,7 +322,11 @@ pub(crate) fn format_expr(\n         }\n         // We do not format these expressions yet, but they should still\n         // satisfy our width restrictions.\n-        ast::ExprKind::LlvmInlineAsm(..) => Some(context.snippet(expr.span).to_owned()),\n+        // Style Guide RFC for InlineAsm variant pending\n+        // https://github.com/rust-dev-tools/fmt-rfcs/issues/152\n+        ast::ExprKind::LlvmInlineAsm(..) | ast::ExprKind::InlineAsm(..) => {\n+            Some(context.snippet(expr.span).to_owned())\n+        }\n         ast::ExprKind::TryBlock(ref block) => {\n             if let rw @ Some(_) =\n                 rewrite_single_line_block(context, \"try \", block, Some(&expr.attrs), None, shape)"}, {"sha": "a73d2da4d03c5488935b973e47873a592e505cfe", "filename": "src/format-diff/main.rs", "status": "modified", "additions": 8, "deletions": 27, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fformat-diff%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fformat-diff%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformat-diff%2Fmain.rs?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -6,12 +6,11 @@\n \n use env_logger;\n #[macro_use]\n-extern crate failure;\n-#[macro_use]\n extern crate log;\n use regex;\n use serde::{Deserialize, Serialize};\n use serde_json as json;\n+use thiserror::Error;\n \n use std::collections::HashSet;\n use std::io::{self, BufRead};\n@@ -27,32 +26,14 @@ use structopt::StructOpt;\n /// We only want to format rust files by default.\n const DEFAULT_PATTERN: &str = r\".*\\.rs\";\n \n-#[derive(Fail, Debug)]\n+#[derive(Error, Debug)]\n enum FormatDiffError {\n-    #[fail(display = \"{}\", _0)]\n-    IncorrectOptions(#[cause] getopts::Fail),\n-    #[fail(display = \"{}\", _0)]\n-    IncorrectFilter(#[cause] regex::Error),\n-    #[fail(display = \"{}\", _0)]\n-    IoError(#[cause] io::Error),\n-}\n-\n-impl From<getopts::Fail> for FormatDiffError {\n-    fn from(fail: getopts::Fail) -> Self {\n-        FormatDiffError::IncorrectOptions(fail)\n-    }\n-}\n-\n-impl From<regex::Error> for FormatDiffError {\n-    fn from(err: regex::Error) -> Self {\n-        FormatDiffError::IncorrectFilter(err)\n-    }\n-}\n-\n-impl From<io::Error> for FormatDiffError {\n-    fn from(fail: io::Error) -> Self {\n-        FormatDiffError::IoError(fail)\n-    }\n+    #[error(\"{0}\")]\n+    IncorrectOptions(#[from] getopts::Fail),\n+    #[error(\"{0}\")]\n+    IncorrectFilter(#[from] regex::Error),\n+    #[error(\"{0}\")]\n+    IoError(#[from] io::Error),\n }\n \n #[derive(StructOpt, Debug)]"}, {"sha": "2fc6c4e895526cbc98f2d6c42dbad226b7ab51cc", "filename": "src/format_report_formatter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fformat_report_formatter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fformat_report_formatter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformat_report_formatter.rs?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -162,6 +162,7 @@ fn error_kind_to_snippet_annotation_type(error_kind: &ErrorKind) -> AnnotationTy\n         ErrorKind::LineOverflow(..)\n         | ErrorKind::TrailingWhitespace\n         | ErrorKind::IoError(_)\n+        | ErrorKind::ModuleResolutionError(_)\n         | ErrorKind::ParseError\n         | ErrorKind::LostComment\n         | ErrorKind::LicenseCheck"}, {"sha": "28d111ba623ea89c700e853c4a6b7b2c4153e9be", "filename": "src/formatting.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -62,7 +62,7 @@ fn format_project<T: FormatHandler>(\n     let main_file = input.file_name();\n     let input_is_stdin = main_file == FileName::Stdin;\n \n-    let mut parse_session = ParseSess::new(config)?;\n+    let parse_session = ParseSess::new(config)?;\n     if config.skip_children() && parse_session.ignore_file(&main_file) {\n         return Ok(FormatReport::new());\n     }\n@@ -82,19 +82,19 @@ fn format_project<T: FormatHandler>(\n             return Ok(report);\n         }\n     };\n-    timer = timer.done_parsing();\n-\n-    // Suppress error output if we have to do any further parsing.\n-    parse_session.set_silent_emitter();\n \n     let mut context = FormatContext::new(&krate, report, parse_session, config, handler);\n     let files = modules::ModResolver::new(\n         &context.parse_session,\n         directory_ownership.unwrap_or(DirectoryOwnership::UnownedViaMod),\n         !input_is_stdin && !config.skip_children(),\n     )\n-    .visit_crate(&krate)\n-    .map_err(|e| io::Error::new(io::ErrorKind::Other, e))?;\n+    .visit_crate(&krate)?;\n+\n+    timer = timer.done_parsing();\n+\n+    // Suppress error output if we have to do any further parsing.\n+    context.parse_session.set_silent_emitter();\n \n     for (path, module) in files {\n         let should_ignore = !input_is_stdin && context.ignore_file(&path);"}, {"sha": "2ba476466ab866fd7d48d741c50eadfb5f0a2bbb", "filename": "src/lib.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -17,15 +17,16 @@ use std::panic;\n use std::path::PathBuf;\n use std::rc::Rc;\n \n-use failure::Fail;\n use ignore;\n use rustc_ast::ast;\n use rustc_span::symbol;\n+use thiserror::Error;\n \n use crate::comment::LineClasses;\n use crate::emitter::Emitter;\n use crate::formatting::{FormatErrorMap, FormattingError, ReportedErrors, SourceFile};\n use crate::issues::Issue;\n+use crate::modules::ModuleResolutionError;\n use crate::shape::Indent;\n use crate::syntux::parser::DirectoryOwnership;\n use crate::utils::indent_next_line;\n@@ -84,45 +85,47 @@ pub(crate) mod visitor;\n \n /// The various errors that can occur during formatting. Note that not all of\n /// these can currently be propagated to clients.\n-#[derive(Fail, Debug)]\n+#[derive(Error, Debug)]\n pub enum ErrorKind {\n     /// Line has exceeded character limit (found, maximum).\n-    #[fail(\n-        display = \"line formatted, but exceeded maximum width \\\n-                   (maximum: {} (see `max_width` option), found: {})\",\n-        _1, _0\n+    #[error(\n+        \"line formatted, but exceeded maximum width \\\n+         (maximum: {1} (see `max_width` option), found: {0})\"\n     )]\n     LineOverflow(usize, usize),\n     /// Line ends in whitespace.\n-    #[fail(display = \"left behind trailing whitespace\")]\n+    #[error(\"left behind trailing whitespace\")]\n     TrailingWhitespace,\n     /// TODO or FIXME item without an issue number.\n-    #[fail(display = \"found {}\", _0)]\n+    #[error(\"found {0}\")]\n     BadIssue(Issue),\n     /// License check has failed.\n-    #[fail(display = \"license check failed\")]\n+    #[error(\"license check failed\")]\n     LicenseCheck,\n     /// Used deprecated skip attribute.\n-    #[fail(display = \"`rustfmt_skip` is deprecated; use `rustfmt::skip`\")]\n+    #[error(\"`rustfmt_skip` is deprecated; use `rustfmt::skip`\")]\n     DeprecatedAttr,\n     /// Used a rustfmt:: attribute other than skip or skip::macros.\n-    #[fail(display = \"invalid attribute\")]\n+    #[error(\"invalid attribute\")]\n     BadAttr,\n     /// An io error during reading or writing.\n-    #[fail(display = \"io error: {}\", _0)]\n+    #[error(\"io error: {0}\")]\n     IoError(io::Error),\n+    /// Error during module resolution.\n+    #[error(\"{0}\")]\n+    ModuleResolutionError(#[from] ModuleResolutionError),\n     /// Parse error occurred when parsing the input.\n-    #[fail(display = \"parse error\")]\n+    #[error(\"parse error\")]\n     ParseError,\n     /// The user mandated a version and the current version of Rustfmt does not\n     /// satisfy that requirement.\n-    #[fail(display = \"version mismatch\")]\n+    #[error(\"version mismatch\")]\n     VersionMismatch,\n     /// If we had formatted the given node, then we would have lost a comment.\n-    #[fail(display = \"not formatted because a comment would be lost\")]\n+    #[error(\"not formatted because a comment would be lost\")]\n     LostComment,\n     /// Invalid glob pattern in `ignore` configuration option.\n-    #[fail(display = \"Invalid glob pattern found in ignore list: {}\", _0)]\n+    #[error(\"Invalid glob pattern found in ignore list: {0}\")]\n     InvalidGlobPattern(ignore::Error),\n }\n "}, {"sha": "77d670dca592913f089a1c02b0c2d09ee7f4e78c", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -1204,6 +1204,7 @@ pub(crate) fn convert_try_mac(\n             kind: ast::ExprKind::Try(parser.parse_expr().ok()?),\n             span: mac.span(), // incorrect span, but shouldn't matter too much\n             attrs: ast::AttrVec::new(),\n+            tokens: Some(ts),\n         })\n     } else {\n         None"}, {"sha": "cbe663cb412c3d61ae5f09f2fa5ffd5613be2d93", "filename": "src/modules.rs", "status": "modified", "additions": 63, "deletions": 32, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -5,11 +5,14 @@ use std::path::{Path, PathBuf};\n use rustc_ast::ast;\n use rustc_ast::visit::Visitor;\n use rustc_span::symbol::{self, sym, Symbol};\n+use thiserror::Error;\n \n use crate::attr::MetaVisitor;\n use crate::config::FileName;\n use crate::items::is_mod_decl;\n-use crate::syntux::parser::{Directory, DirectoryOwnership, ModulePathSuccess, Parser};\n+use crate::syntux::parser::{\n+    Directory, DirectoryOwnership, ModulePathSuccess, Parser, ParserError,\n+};\n use crate::syntux::session::ParseSess;\n use crate::utils::contains_skip;\n \n@@ -29,6 +32,24 @@ pub(crate) struct ModResolver<'ast, 'sess> {\n     recursive: bool,\n }\n \n+/// Represents errors while trying to resolve modules.\n+#[error(\"failed to resolve mod `{module}`: {kind}\")]\n+#[derive(Debug, Error)]\n+pub struct ModuleResolutionError {\n+    pub(crate) module: String,\n+    pub(crate) kind: ModuleResolutionErrorKind,\n+}\n+\n+#[derive(Debug, Error)]\n+pub(crate) enum ModuleResolutionErrorKind {\n+    /// Find a file that cannot be parsed.\n+    #[error(\"cannot parse {file}\")]\n+    ParseError { file: PathBuf },\n+    /// File cannot be found.\n+    #[error(\"{file} does not exist\")]\n+    NotFound { file: PathBuf },\n+}\n+\n #[derive(Clone)]\n enum SubModKind<'a, 'ast> {\n     /// `mod foo;`\n@@ -63,7 +84,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n     pub(crate) fn visit_crate(\n         mut self,\n         krate: &'ast ast::Crate,\n-    ) -> Result<FileModMap<'ast>, String> {\n+    ) -> Result<FileModMap<'ast>, ModuleResolutionError> {\n         let root_filename = self.parse_sess.span_to_filename(krate.span);\n         self.directory.path = match root_filename {\n             FileName::Real(ref p) => p.parent().unwrap_or(Path::new(\"\")).to_path_buf(),\n@@ -81,7 +102,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n     }\n \n     /// Visit `cfg_if` macro and look for module declarations.\n-    fn visit_cfg_if(&mut self, item: Cow<'ast, ast::Item>) -> Result<(), String> {\n+    fn visit_cfg_if(&mut self, item: Cow<'ast, ast::Item>) -> Result<(), ModuleResolutionError> {\n         let mut visitor = visitor::CfgIfVisitor::new(self.parse_sess);\n         visitor.visit_item(&item);\n         for module_item in visitor.mods() {\n@@ -93,7 +114,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n     }\n \n     /// Visit modules defined inside macro calls.\n-    fn visit_mod_outside_ast(&mut self, module: ast::Mod) -> Result<(), String> {\n+    fn visit_mod_outside_ast(&mut self, module: ast::Mod) -> Result<(), ModuleResolutionError> {\n         for item in module.items {\n             if is_cfg_if(&item) {\n                 self.visit_cfg_if(Cow::Owned(item.into_inner()))?;\n@@ -108,7 +129,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n     }\n \n     /// Visit modules from AST.\n-    fn visit_mod_from_ast(&mut self, module: &'ast ast::Mod) -> Result<(), String> {\n+    fn visit_mod_from_ast(&mut self, module: &'ast ast::Mod) -> Result<(), ModuleResolutionError> {\n         for item in &module.items {\n             if is_cfg_if(item) {\n                 self.visit_cfg_if(Cow::Borrowed(item))?;\n@@ -125,7 +146,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n         &mut self,\n         item: &'c ast::Item,\n         sub_mod: Cow<'ast, ast::Mod>,\n-    ) -> Result<(), String> {\n+    ) -> Result<(), ModuleResolutionError> {\n         let old_directory = self.directory.clone();\n         let sub_mod_kind = self.peek_sub_mod(item, &sub_mod)?;\n         if let Some(sub_mod_kind) = sub_mod_kind {\n@@ -141,7 +162,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n         &self,\n         item: &'c ast::Item,\n         sub_mod: &Cow<'ast, ast::Mod>,\n-    ) -> Result<Option<SubModKind<'c, 'ast>>, String> {\n+    ) -> Result<Option<SubModKind<'c, 'ast>>, ModuleResolutionError> {\n         if contains_skip(&item.attrs) {\n             return Ok(None);\n         }\n@@ -165,7 +186,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n         &mut self,\n         sub_mod_kind: SubModKind<'c, 'ast>,\n         _sub_mod: Cow<'ast, ast::Mod>,\n-    ) -> Result<(), String> {\n+    ) -> Result<(), ModuleResolutionError> {\n         match sub_mod_kind {\n             SubModKind::External(mod_path, _, sub_mod) => {\n                 self.file_map\n@@ -188,7 +209,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n         &mut self,\n         sub_mod: Cow<'ast, ast::Mod>,\n         sub_mod_kind: SubModKind<'c, 'ast>,\n-    ) -> Result<(), String> {\n+    ) -> Result<(), ModuleResolutionError> {\n         match sub_mod_kind {\n             SubModKind::External(mod_path, directory_ownership, sub_mod) => {\n                 let directory = Directory {\n@@ -226,7 +247,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n         &mut self,\n         sub_mod: Cow<'ast, ast::Mod>,\n         directory: Option<Directory>,\n-    ) -> Result<(), String> {\n+    ) -> Result<(), ModuleResolutionError> {\n         if let Some(directory) = directory {\n             self.directory = directory;\n         }\n@@ -242,7 +263,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n         mod_name: symbol::Ident,\n         attrs: &[ast::Attribute],\n         sub_mod: &Cow<'ast, ast::Mod>,\n-    ) -> Result<Option<SubModKind<'c, 'ast>>, String> {\n+    ) -> Result<Option<SubModKind<'c, 'ast>>, ModuleResolutionError> {\n         let relative = match self.directory.ownership {\n             DirectoryOwnership::Owned { relative } => relative,\n             DirectoryOwnership::UnownedViaBlock | DirectoryOwnership::UnownedViaMod => None,\n@@ -252,16 +273,20 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                 return Ok(None);\n             }\n             return match Parser::parse_file_as_module(self.parse_sess, &path, sub_mod.inner) {\n-                Some((_, ref attrs)) if contains_skip(attrs) => Ok(None),\n-                Some((m, _)) => Ok(Some(SubModKind::External(\n+                Ok((_, ref attrs)) if contains_skip(attrs) => Ok(None),\n+                Ok((m, _)) => Ok(Some(SubModKind::External(\n                     path,\n                     DirectoryOwnership::Owned { relative: None },\n                     Cow::Owned(m),\n                 ))),\n-                None => Err(format!(\n-                    \"Failed to find module {} in {:?} {:?}\",\n-                    mod_name, self.directory.path, relative,\n-                )),\n+                Err(ParserError::ParseError) => Err(ModuleResolutionError {\n+                    module: mod_name.to_string(),\n+                    kind: ModuleResolutionErrorKind::ParseError { file: path },\n+                }),\n+                Err(..) => Err(ModuleResolutionError {\n+                    module: mod_name.to_string(),\n+                    kind: ModuleResolutionErrorKind::NotFound { file: path },\n+                }),\n             };\n         }\n \n@@ -291,22 +316,26 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                     }\n                 }\n                 match Parser::parse_file_as_module(self.parse_sess, &path, sub_mod.inner) {\n-                    Some((_, ref attrs)) if contains_skip(attrs) => Ok(None),\n-                    Some((m, _)) if outside_mods_empty => {\n+                    Ok((_, ref attrs)) if contains_skip(attrs) => Ok(None),\n+                    Ok((m, _)) if outside_mods_empty => {\n                         Ok(Some(SubModKind::External(path, ownership, Cow::Owned(m))))\n                     }\n-                    Some((m, _)) => {\n+                    Ok((m, _)) => {\n                         mods_outside_ast.push((path.clone(), ownership, Cow::Owned(m)));\n                         if should_insert {\n                             mods_outside_ast.push((path, ownership, sub_mod.clone()));\n                         }\n                         Ok(Some(SubModKind::MultiExternal(mods_outside_ast)))\n                     }\n-                    None if outside_mods_empty => Err(format!(\n-                        \"Failed to find module {} in {:?} {:?}\",\n-                        mod_name, self.directory.path, relative,\n-                    )),\n-                    None => {\n+                    Err(ParserError::ParseError) => Err(ModuleResolutionError {\n+                        module: mod_name.to_string(),\n+                        kind: ModuleResolutionErrorKind::ParseError { file: path },\n+                    }),\n+                    Err(..) if outside_mods_empty => Err(ModuleResolutionError {\n+                        module: mod_name.to_string(),\n+                        kind: ModuleResolutionErrorKind::NotFound { file: path },\n+                    }),\n+                    Err(..) => {\n                         if should_insert {\n                             mods_outside_ast.push((path, ownership, sub_mod.clone()));\n                         }\n@@ -320,10 +349,12 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n             }\n             Err(mut e) => {\n                 e.cancel();\n-                Err(format!(\n-                    \"Failed to find module {} in {:?} {:?}\",\n-                    mod_name, self.directory.path, relative,\n-                ))\n+                Err(ModuleResolutionError {\n+                    module: mod_name.to_string(),\n+                    kind: ModuleResolutionErrorKind::NotFound {\n+                        file: self.directory.path.clone(),\n+                    },\n+                })\n             }\n         }\n     }\n@@ -379,9 +410,9 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n             }\n             let m = match Parser::parse_file_as_module(self.parse_sess, &actual_path, sub_mod.inner)\n             {\n-                Some((_, ref attrs)) if contains_skip(attrs) => continue,\n-                Some((m, _)) => m,\n-                None => continue,\n+                Ok((_, ref attrs)) if contains_skip(attrs) => continue,\n+                Ok((m, _)) => m,\n+                Err(..) => continue,\n             };\n \n             result.push(("}, {"sha": "1d22c25d922cccb5d3caacdeb1022254a98d87ab", "filename": "src/source_file.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fsource_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fsource_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsource_file.rs?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -68,7 +68,9 @@ where\n     impl From<&FileName> for rustc_span::FileName {\n         fn from(filename: &FileName) -> rustc_span::FileName {\n             match filename {\n-                FileName::Real(path) => rustc_span::FileName::Real(path.to_owned()),\n+                FileName::Real(path) => {\n+                    rustc_span::FileName::Real(rustc_span::RealFileName::Named(path.to_owned()))\n+                }\n                 FileName::Stdin => rustc_span::FileName::Custom(\"stdin\".to_owned()),\n             }\n         }"}, {"sha": "decad02d0494070be3e3f3275e220cb4da5e17cd", "filename": "src/syntux/parser.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fsyntux%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fsyntux%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntux%2Fparser.rs?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -106,7 +106,7 @@ impl<'a> Parser<'a> {\n         sess: &'a ParseSess,\n         path: &Path,\n         span: Span,\n-    ) -> Option<(ast::Mod, Vec<ast::Attribute>)> {\n+    ) -> Result<(ast::Mod, Vec<ast::Attribute>), ParserError> {\n         let result = catch_unwind(AssertUnwindSafe(|| {\n             let mut parser = new_parser_from_file(sess.inner(), &path, Some(span));\n             match parser.parse_mod(&TokenKind::Eof) {\n@@ -119,8 +119,20 @@ impl<'a> Parser<'a> {\n             }\n         }));\n         match result {\n-            Ok(Some(m)) => Some(m),\n-            _ => None,\n+            Ok(Some(m)) => {\n+                if !sess.has_errors() {\n+                    return Ok(m);\n+                }\n+\n+                if sess.can_reset_errors() {\n+                    sess.reset_errors();\n+                    return Ok(m);\n+                }\n+                Err(ParserError::ParseError)\n+            }\n+            Ok(None) => Err(ParserError::ParseError),\n+            Err(..) if path.exists() => Err(ParserError::ParseError),\n+            Err(_) => Err(ParserError::ParsePanicError),\n         }\n     }\n "}, {"sha": "5045eab29dd58a8f86c5f487df7275138098055c", "filename": "src/syntux/session.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fsyntux%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/src%2Fsyntux%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntux%2Fsession.rs?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -66,7 +66,8 @@ impl Emitter for SilentOnIgnoredFilesEmitter {\n         }\n         if let Some(primary_span) = &db.span.primary_span() {\n             let file_name = self.source_map.span_to_filename(*primary_span);\n-            if let rustc_span::FileName::Real(ref path) = file_name {\n+            if let rustc_span::FileName::Real(rustc_span::RealFileName::Named(ref path)) = file_name\n+            {\n                 if self\n                     .ignore_path_set\n                     .is_match(&FileName::Real(path.to_path_buf()))\n@@ -162,7 +163,9 @@ impl ParseSess {\n     pub(crate) fn is_file_parsed(&self, path: &Path) -> bool {\n         self.parse_sess\n             .source_map()\n-            .get_source_file(&rustc_span::FileName::Real(path.to_path_buf()))\n+            .get_source_file(&rustc_span::FileName::Real(\n+                rustc_span::RealFileName::Named(path.to_path_buf()),\n+            ))\n             .is_some()\n     }\n \n@@ -277,7 +280,7 @@ mod tests {\n         use crate::config::IgnoreList;\n         use crate::is_nightly_channel;\n         use crate::utils::mk_sp;\n-        use rustc_span::{FileName as SourceMapFileName, MultiSpan, DUMMY_SP};\n+        use rustc_span::{FileName as SourceMapFileName, MultiSpan, RealFileName, DUMMY_SP};\n         use std::path::PathBuf;\n \n         struct TestEmitter {\n@@ -337,7 +340,10 @@ mod tests {\n             let source_map = Rc::new(SourceMap::new(FilePathMapping::empty()));\n             let source =\n                 String::from(r#\"extern \"system\" fn jni_symbol!( funcName ) ( ... ) -> {} \"#);\n-            source_map.new_source_file(SourceMapFileName::Real(PathBuf::from(\"foo.rs\")), source);\n+            source_map.new_source_file(\n+                SourceMapFileName::Real(RealFileName::Named(PathBuf::from(\"foo.rs\"))),\n+                source,\n+            );\n             let mut emitter = build_emitter(\n                 Rc::clone(&num_emitted_errors),\n                 Rc::clone(&can_reset_errors),\n@@ -361,7 +367,10 @@ mod tests {\n             let ignore_list = get_ignore_list(r#\"ignore = [\"foo.rs\"]\"#);\n             let source_map = Rc::new(SourceMap::new(FilePathMapping::empty()));\n             let source = String::from(r#\"pub fn bar() { 1x; }\"#);\n-            source_map.new_source_file(SourceMapFileName::Real(PathBuf::from(\"foo.rs\")), source);\n+            source_map.new_source_file(\n+                SourceMapFileName::Real(RealFileName::Named(PathBuf::from(\"foo.rs\"))),\n+                source,\n+            );\n             let mut emitter = build_emitter(\n                 Rc::clone(&num_emitted_errors),\n                 Rc::clone(&can_reset_errors),\n@@ -384,7 +393,10 @@ mod tests {\n             let can_reset_errors = Rc::new(RefCell::new(false));\n             let source_map = Rc::new(SourceMap::new(FilePathMapping::empty()));\n             let source = String::from(r#\"pub fn bar() { 1x; }\"#);\n-            source_map.new_source_file(SourceMapFileName::Real(PathBuf::from(\"foo.rs\")), source);\n+            source_map.new_source_file(\n+                SourceMapFileName::Real(RealFileName::Named(PathBuf::from(\"foo.rs\"))),\n+                source,\n+            );\n             let mut emitter = build_emitter(\n                 Rc::clone(&num_emitted_errors),\n                 Rc::clone(&can_reset_errors),\n@@ -411,12 +423,16 @@ mod tests {\n             let foo_source = String::from(r#\"pub fn foo() { 1x; }\"#);\n             let fatal_source =\n                 String::from(r#\"extern \"system\" fn jni_symbol!( funcName ) ( ... ) -> {} \"#);\n-            source_map\n-                .new_source_file(SourceMapFileName::Real(PathBuf::from(\"bar.rs\")), bar_source);\n-            source_map\n-                .new_source_file(SourceMapFileName::Real(PathBuf::from(\"foo.rs\")), foo_source);\n             source_map.new_source_file(\n-                SourceMapFileName::Real(PathBuf::from(\"fatal.rs\")),\n+                SourceMapFileName::Real(RealFileName::Named(PathBuf::from(\"bar.rs\"))),\n+                bar_source,\n+            );\n+            source_map.new_source_file(\n+                SourceMapFileName::Real(RealFileName::Named(PathBuf::from(\"foo.rs\"))),\n+                foo_source,\n+            );\n+            source_map.new_source_file(\n+                SourceMapFileName::Real(RealFileName::Named(PathBuf::from(\"fatal.rs\"))),\n                 fatal_source,\n             );\n             let mut emitter = build_emitter("}, {"sha": "57b5f2a78cd8e09dcb82473e548255ef2633c488", "filename": "src/test/mod.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -11,10 +11,12 @@ use std::thread;\n \n use crate::config::{Color, Config, EmitMode, FileName, NewlineStyle, ReportTactic};\n use crate::formatting::{ReportedErrors, SourceFile};\n-use crate::is_nightly_channel;\n+use crate::modules::{ModuleResolutionError, ModuleResolutionErrorKind};\n use crate::rustfmt_diff::{make_diff, print_diff, DiffLine, Mismatch, ModifiedChunk, OutputWriter};\n use crate::source_file;\n-use crate::{FormatReport, FormatReportFormatterBuilder, Input, Session};\n+use crate::{\n+    is_nightly_channel, ErrorKind, FormatReport, FormatReportFormatterBuilder, Input, Session,\n+};\n \n mod configuration_snippet;\n \n@@ -40,6 +42,7 @@ const SKIP_FILE_WHITE_LIST: &[&str] = &[\n     \"cfg_mod/bar.rs\",\n     \"cfg_mod/foo.rs\",\n     \"cfg_mod/wasm32.rs\",\n+    \"skip/foo.rs\",\n ];\n \n fn init_log() {\n@@ -482,6 +485,34 @@ fn format_lines_errors_are_reported_with_tabs() {\n     assert!(session.has_formatting_errors());\n }\n \n+#[test]\n+fn parser_errors_in_submods_are_surfaced() {\n+    // See also https://github.com/rust-lang/rustfmt/issues/4126\n+    let filename = \"tests/parser/issue-4126/lib.rs\";\n+    let input_file = PathBuf::from(filename);\n+    let exp_mod_name = \"invalid\";\n+    let config = read_config(&input_file);\n+    let mut session = Session::<io::Stdout>::new(config, None);\n+    if let Err(ErrorKind::ModuleResolutionError(ModuleResolutionError { module, kind })) =\n+        session.format(Input::File(filename.into()))\n+    {\n+        assert_eq!(&module, exp_mod_name);\n+        if let ModuleResolutionErrorKind::ParseError {\n+            file: unparseable_file,\n+        } = kind\n+        {\n+            assert_eq!(\n+                unparseable_file,\n+                PathBuf::from(\"tests/parser/issue-4126/invalid.rs\"),\n+            );\n+        } else {\n+            panic!(\"Expected parser error\");\n+        }\n+    } else {\n+        panic!(\"Expected ModuleResolution operation error\");\n+    }\n+}\n+\n // For each file, run rustfmt and collect the output.\n // Returns the number of files checked and the number of failures.\n fn check_files(files: Vec<PathBuf>, opt_config: &Option<PathBuf>) -> (Vec<FormatReport>, u32, u32) {"}, {"sha": "bb0c6b7fb227232024a30d85bad28021b6d78092", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -487,6 +487,7 @@ pub(crate) fn is_block_expr(context: &RewriteContext<'_>, expr: &ast::Expr, repr\n         | ast::ExprKind::Continue(..)\n         | ast::ExprKind::Err\n         | ast::ExprKind::Field(..)\n+        | ast::ExprKind::InlineAsm(..)\n         | ast::ExprKind::LlvmInlineAsm(..)\n         | ast::ExprKind::Let(..)\n         | ast::ExprKind::Path(..)"}, {"sha": "7709c8484642d1b9703f53d388a5c277493ba27b", "filename": "tests/parser/issue-4126/invalid.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/tests%2Fparser%2Fissue-4126%2Finvalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/tests%2Fparser%2Fissue-4126%2Finvalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fparser%2Fissue-4126%2Finvalid.rs?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -0,0 +1,6 @@\n+fn foo() {\n+    if bar && if !baz {\n+        next_is_none = Some(true);\n+    }\n+    println!(\"foo\");\n+}"}, {"sha": "aac63e3557fea6498a40a441631968da1d2a825c", "filename": "tests/parser/issue-4126/lib.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/tests%2Fparser%2Fissue-4126%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/tests%2Fparser%2Fissue-4126%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fparser%2Fissue-4126%2Flib.rs?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -0,0 +1 @@\n+mod invalid;"}, {"sha": "eb1ce5ed2a5b0e411e8adf0daec58144b6272d6f", "filename": "tests/source/issue-4079.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/tests%2Fsource%2Fissue-4079.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/tests%2Fsource%2Fissue-4079.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4079.rs?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -0,0 +1,8 @@\n+// rustfmt-wrap_comments: true\n+\n+/*!\n+ * Lorem ipsum dolor sit amet, consectetur adipiscing elit. In lacinia\n+ * ullamcorper lorem, non hendrerit enim convallis ut. Curabitur id sem volutpat\n+ */\n+\n+/*! Lorem ipsum dolor sit amet, consectetur adipiscing elit. In lacinia ullamcorper lorem, non hendrerit enim convallis ut. Curabitur id sem volutpat */"}, {"sha": "f29ecec028b77e72735e5a54b0f8c76977991cd4", "filename": "tests/target/issue-4020.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/tests%2Ftarget%2Fissue-4020.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/tests%2Ftarget%2Fissue-4020.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4020.rs?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-wrap_comments: true\n+\n+/** foobar */\n+const foo1: u32 = 0;\n+\n+/**\n+ * foobar\n+ */\n+const foo2: u32 = 0;"}, {"sha": "1871c5b8a1338c222b087a89250e5b76955bc29f", "filename": "tests/target/issue-4079.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/tests%2Ftarget%2Fissue-4079.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/tests%2Ftarget%2Fissue-4079.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4079.rs?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-wrap_comments: true\n+\n+/*!\n+ * Lorem ipsum dolor sit amet, consectetur adipiscing elit. In lacinia\n+ * ullamcorper lorem, non hendrerit enim convallis ut. Curabitur id sem\n+ * volutpat\n+ */\n+\n+/*! Lorem ipsum dolor sit amet, consectetur adipiscing elit. In lacinia\n+ * ullamcorper lorem, non hendrerit enim convallis ut. Curabitur id sem\n+ * volutpat */"}, {"sha": "776658f8fe5748ddc0e94a925f6d765524ea1cb4", "filename": "tests/target/skip/foo.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/tests%2Ftarget%2Fskip%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/tests%2Ftarget%2Fskip%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip%2Ffoo.rs?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -0,0 +1,5 @@\n+#![rustfmt::skip]\n+\n+fn\n+foo()\n+{}"}, {"sha": "2d33bef92519ed54e9ebdb6425fac66de4570b19", "filename": "tests/target/skip/main.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d36560b15c3cd325e9039430c2994c1df349331/tests%2Ftarget%2Fskip%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d36560b15c3cd325e9039430c2994c1df349331/tests%2Ftarget%2Fskip%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip%2Fmain.rs?ref=4d36560b15c3cd325e9039430c2994c1df349331", "patch": "@@ -0,0 +1,5 @@\n+mod foo;\n+\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}]}