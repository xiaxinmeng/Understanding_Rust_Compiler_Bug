{"sha": "5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "node_id": "C_kwDOAAsO6NoAKDVhZTczNjM0ZGM2M2U0OGEyMzQ2N2I5NzBlMmZiY2M4MWNiMmVjNzM", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2022-09-24T15:22:04Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2022-10-08T09:00:13Z"}, "message": "Stabilize half_open_range_patterns", "tree": {"sha": "9e6dd7d15925f225e293f6e02c008579ad48954c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e6dd7d15925f225e293f6e02c008579ad48954c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "html_url": "https://github.com/rust-lang/rust/commit/5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c084c263977ba7376ce944b9dd6b8dffdc2eee48", "url": "https://api.github.com/repos/rust-lang/rust/commits/c084c263977ba7376ce944b9dd6b8dffdc2eee48", "html_url": "https://github.com/rust-lang/rust/commit/c084c263977ba7376ce944b9dd6b8dffdc2eee48"}], "stats": {"total": 656, "additions": 258, "deletions": 398}, "files": [{"sha": "ca12659695febb6f9fcd0077d2cf4c56f011b33d", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -169,6 +169,8 @@ declare_features! (\n     (accepted, global_allocator, \"1.28.0\", Some(27389), None),\n     // FIXME: explain `globs`.\n     (accepted, globs, \"1.0.0\", None, None),\n+    /// Allows using `..=X` as a pattern.\n+    (accepted, half_open_range_patterns, \"CURRENT_RUSTC_VERSION\", Some(67264), None),\n     /// Allows using the `u128` and `i128` types.\n     (accepted, i128_type, \"1.26.0\", Some(35118), None),\n     /// Allows the use of `if let` expressions."}, {"sha": "8d9a0388e21fd1e7426018586398ebd04005e21c", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -44,7 +44,7 @@\n #![feature(type_alias_impl_trait)]\n #![feature(associated_type_bounds)]\n #![feature(rustc_attrs)]\n-#![feature(half_open_range_patterns)]\n+#![cfg_attr(bootstrap, feature(half_open_range_patterns))]\n #![feature(control_flow_enum)]\n #![feature(associated_type_defaults)]\n #![feature(trusted_step)]"}, {"sha": "56efec422d68d0bd9e0f8549aaf5a31f932c7232", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -777,7 +777,6 @@ impl<'a> Parser<'a> {\n     /// expression syntax `...expr` for splatting in expressions.\n     fn parse_pat_range_to(&mut self, mut re: Spanned<RangeEnd>) -> PResult<'a, PatKind> {\n         let end = self.parse_pat_range_end()?;\n-        self.sess.gated_spans.gate(sym::half_open_range_patterns, re.span.to(self.prev_token.span));\n         if let RangeEnd::Included(ref mut syn @ RangeSyntax::DotDotDot) = &mut re.node {\n             *syn = RangeSyntax::DotDotEq;\n             self.struct_span_err(re.span, \"range-to patterns with `...` are not allowed\")"}, {"sha": "3b16dd049ce33efdc9bcd497ded7c78a2cc1f38c", "filename": "src/doc/unstable-book/src/language-features/half-open-range-patterns.md", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c084c263977ba7376ce944b9dd6b8dffdc2eee48/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fhalf-open-range-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/c084c263977ba7376ce944b9dd6b8dffdc2eee48/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fhalf-open-range-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fhalf-open-range-patterns.md?ref=c084c263977ba7376ce944b9dd6b8dffdc2eee48", "patch": "@@ -1,27 +0,0 @@\n-# `half_open_range_patterns`\n-\n-The tracking issue for this feature is: [#67264]\n-It is part of the `#![exclusive_range_pattern]` feature,\n-tracked at [#37854].\n-\n-[#67264]: https://github.com/rust-lang/rust/issues/67264\n-[#37854]: https://github.com/rust-lang/rust/issues/37854\n------\n-\n-The `half_open_range_patterns` feature allows RangeTo patterns\n-(`..10`) to be used in appropriate pattern matching contexts.\n-This requires also enabling the `exclusive_range_pattern` feature.\n-\n-It also enabled RangeFrom patterns but that has since been\n-stabilized.\n-\n-```rust\n-#![feature(half_open_range_patterns)]\n-#![feature(exclusive_range_pattern)]\n-    let x = 5;\n-    match x {\n-        ..0 => println!(\"negative!\"), // \"RangeTo\" pattern. Unstable.\n-        0 => println!(\"zero!\"),\n-        1.. => println!(\"positive!\"), // \"RangeFrom\" pattern. Stable.\n-    }\n-```"}, {"sha": "14ca07d0a53881aa59fa486784e0ae80370800dd", "filename": "src/test/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,4 +1,3 @@\n-#![feature(half_open_range_patterns)]\n #![feature(exclusive_range_pattern)]\n \n fn main() {"}, {"sha": "790a1337228d00eaab73825e8d7968032866a4b2", "filename": "src/test/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/exclusive_range_pattern_syntax_collision3.rs:6:12\n+  --> $DIR/exclusive_range_pattern_syntax_collision3.rs:5:12\n    |\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n@@ -10,7 +10,7 @@ LL |         [..9, 99..100, _] => {},\n                 found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/exclusive_range_pattern_syntax_collision3.rs:6:15\n+  --> $DIR/exclusive_range_pattern_syntax_collision3.rs:5:15\n    |\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n@@ -23,7 +23,7 @@ LL |         [..9, 99..100, _] => {},\n                 found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/exclusive_range_pattern_syntax_collision3.rs:6:19\n+  --> $DIR/exclusive_range_pattern_syntax_collision3.rs:5:19\n    |\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`"}, {"sha": "9281dda678ddd51ab73bac4675bcce4860065881", "filename": "src/test/ui/half-open-range-patterns/feature-gate-half-open-range-patterns.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c084c263977ba7376ce944b9dd6b8dffdc2eee48/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c084c263977ba7376ce944b9dd6b8dffdc2eee48/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.rs?ref=c084c263977ba7376ce944b9dd6b8dffdc2eee48", "patch": "@@ -1,18 +0,0 @@\n-#![feature(exclusive_range_pattern)]\n-\n-fn main() {}\n-\n-#[cfg(FALSE)]\n-fn foo() {\n-    if let ..=5 = 0 {}\n-    //~^ ERROR half-open range patterns are unstable\n-    if let ...5 = 0 {}\n-    //~^ ERROR half-open range patterns are unstable\n-    //~| ERROR range-to patterns with `...` are not allowed\n-    if let ..5 = 0 {}\n-    //~^ ERROR half-open range patterns are unstable\n-    if let 5..= = 0 {}\n-    //~^ ERROR inclusive range with no end\n-    if let 5... = 0 {}\n-    //~^ ERROR inclusive range with no end\n-}"}, {"sha": "a04883ae147644643eeee677d5c71606b4312667", "filename": "src/test/ui/half-open-range-patterns/feature-gate-half-open-range-patterns.stderr", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c084c263977ba7376ce944b9dd6b8dffdc2eee48/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c084c263977ba7376ce944b9dd6b8dffdc2eee48/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.stderr?ref=c084c263977ba7376ce944b9dd6b8dffdc2eee48", "patch": "@@ -1,53 +0,0 @@\n-error: range-to patterns with `...` are not allowed\n-  --> $DIR/feature-gate-half-open-range-patterns.rs:9:12\n-   |\n-LL |     if let ...5 = 0 {}\n-   |            ^^^ help: use `..=` instead\n-\n-error[E0586]: inclusive range with no end\n-  --> $DIR/feature-gate-half-open-range-patterns.rs:14:13\n-   |\n-LL |     if let 5..= = 0 {}\n-   |             ^^^ help: use `..` instead\n-   |\n-   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n-\n-error[E0586]: inclusive range with no end\n-  --> $DIR/feature-gate-half-open-range-patterns.rs:16:13\n-   |\n-LL |     if let 5... = 0 {}\n-   |             ^^^ help: use `..` instead\n-   |\n-   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n-\n-error[E0658]: half-open range patterns are unstable\n-  --> $DIR/feature-gate-half-open-range-patterns.rs:7:12\n-   |\n-LL |     if let ..=5 = 0 {}\n-   |            ^^^^\n-   |\n-   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n-   = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: half-open range patterns are unstable\n-  --> $DIR/feature-gate-half-open-range-patterns.rs:9:12\n-   |\n-LL |     if let ...5 = 0 {}\n-   |            ^^^^\n-   |\n-   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n-   = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: half-open range patterns are unstable\n-  --> $DIR/feature-gate-half-open-range-patterns.rs:12:12\n-   |\n-LL |     if let ..5 = 0 {}\n-   |            ^^^\n-   |\n-   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n-   = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n-\n-error: aborting due to 6 previous errors\n-\n-Some errors have detailed explanations: E0586, E0658.\n-For more information about an error, try `rustc --explain E0586`."}, {"sha": "17ea2b13f690f20d22fd2cc58b15ccf281cb270d", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-bad-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,4 +1,3 @@\n-#![feature(half_open_range_patterns)]\n #![feature(exclusive_range_pattern)]\n \n fn main() {"}, {"sha": "f7c59a1961933ff9c54a016c0171d418b76ab399", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-bad-types.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.stderr?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,17 +1,17 @@\n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/half-open-range-pats-bad-types.rs:5:9\n+  --> $DIR/half-open-range-pats-bad-types.rs:4:9\n    |\n LL |     let \"a\".. = \"a\";\n    |         ^^^ this is of type `&'static str` but it should be `char` or numeric\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/half-open-range-pats-bad-types.rs:6:11\n+  --> $DIR/half-open-range-pats-bad-types.rs:5:11\n    |\n LL |     let ..\"a\" = \"a\";\n    |           ^^^ this is of type `&'static str` but it should be `char` or numeric\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/half-open-range-pats-bad-types.rs:7:12\n+  --> $DIR/half-open-range-pats-bad-types.rs:6:12\n    |\n LL |     let ..=\"a\" = \"a\";\n    |            ^^^ this is of type `&'static str` but it should be `char` or numeric"}, {"sha": "a2a4c62fa0295ca61e362b58e8e81cef9f79485a", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-exhaustive-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,6 +1,5 @@\n // Test various non-exhaustive matches for `X..`, `..=X` and `..X` ranges.\n \n-#![feature(half_open_range_patterns)]\n #![feature(exclusive_range_pattern)]\n #![allow(illegal_floating_point_literal_pattern)]\n "}, {"sha": "6b20a820b7302a1408ed1efbe8e9bb39ba40ebc2", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-exhaustive-fail.stderr", "status": "modified", "additions": 68, "deletions": 68, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:16:8\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:15:8\n    |\n LL |     m!(0f32, f32::NEG_INFINITY..);\n    |        ^^^^ pattern `_` not covered\n@@ -11,7 +11,7 @@ LL |         match $s { $($t)+ => {}, _ => todo!() }\n    |                                ++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:17:8\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:16:8\n    |\n LL |     m!(0f32, ..f32::INFINITY);\n    |        ^^^^ pattern `_` not covered\n@@ -23,7 +23,7 @@ LL |         match $s { $($t)+ => {}, _ => todo!() }\n    |                                ++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `'\\u{10ffff}'` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:26:8\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:25:8\n    |\n LL |     m!('a', ..core::char::MAX);\n    |        ^^^ pattern `'\\u{10ffff}'` not covered\n@@ -35,7 +35,7 @@ LL |         match $s { $($t)+ => {}, '\\u{10ffff}' => todo!() }\n    |                                +++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `'\\u{10fffe}'..='\\u{10ffff}'` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:27:8\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:26:8\n    |\n LL |     m!('a', ..ALMOST_MAX);\n    |        ^^^ pattern `'\\u{10fffe}'..='\\u{10ffff}'` not covered\n@@ -47,7 +47,7 @@ LL |         match $s { $($t)+ => {}, '\\u{10fffe}'..='\\u{10ffff}' => todo!() }\n    |                                ++++++++++++++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `'\\0'` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:28:8\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:27:8\n    |\n LL |     m!('a', ALMOST_MIN..);\n    |        ^^^ pattern `'\\0'` not covered\n@@ -59,7 +59,7 @@ LL |         match $s { $($t)+ => {}, '\\0' => todo!() }\n    |                                +++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `'\\u{10ffff}'` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:29:8\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:28:8\n    |\n LL |     m!('a', ..=ALMOST_MAX);\n    |        ^^^ pattern `'\\u{10ffff}'` not covered\n@@ -71,7 +71,7 @@ LL |         match $s { $($t)+ => {}, '\\u{10ffff}' => todo!() }\n    |                                +++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `'b'` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:30:8\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:29:8\n    |\n LL |     m!('a', ..=VAL | VAL_2..);\n    |        ^^^ pattern `'b'` not covered\n@@ -83,7 +83,7 @@ LL |         match $s { $($t)+ => {}, 'b' => todo!() }\n    |                                ++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `'b'` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:31:8\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:30:8\n    |\n LL |     m!('a', ..VAL_1 | VAL_2..);\n    |        ^^^ pattern `'b'` not covered\n@@ -95,7 +95,7 @@ LL |         match $s { $($t)+ => {}, 'b' => todo!() }\n    |                                ++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `u8::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:41:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:40:12\n    |\n LL |         m!(0, ..u8::MAX);\n    |            ^ pattern `u8::MAX` not covered\n@@ -107,7 +107,7 @@ LL |         match $s { $($t)+ => {}, u8::MAX => todo!() }\n    |                                ++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `254_u8..=u8::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:42:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:41:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `254_u8..=u8::MAX` not covered\n@@ -119,7 +119,7 @@ LL |         match $s { $($t)+ => {}, 254_u8..=u8::MAX => todo!() }\n    |                                +++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `0_u8` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:43:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:42:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0_u8` not covered\n@@ -131,7 +131,7 @@ LL |         match $s { $($t)+ => {}, 0_u8 => todo!() }\n    |                                +++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `u8::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:44:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:43:12\n    |\n LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `u8::MAX` not covered\n@@ -143,7 +143,7 @@ LL |         match $s { $($t)+ => {}, u8::MAX => todo!() }\n    |                                ++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_u8` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:45:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:44:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_u8` not covered\n@@ -155,7 +155,7 @@ LL |         match $s { $($t)+ => {}, 43_u8 => todo!() }\n    |                                ++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_u8` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:46:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:45:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_u8` not covered\n@@ -167,7 +167,7 @@ LL |         match $s { $($t)+ => {}, 43_u8 => todo!() }\n    |                                ++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `u16::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:54:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:53:12\n    |\n LL |         m!(0, ..u16::MAX);\n    |            ^ pattern `u16::MAX` not covered\n@@ -179,7 +179,7 @@ LL |         match $s { $($t)+ => {}, u16::MAX => todo!() }\n    |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `65534_u16..=u16::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:55:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:54:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `65534_u16..=u16::MAX` not covered\n@@ -191,7 +191,7 @@ LL |         match $s { $($t)+ => {}, 65534_u16..=u16::MAX => todo!() }\n    |                                +++++++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `0_u16` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:56:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:55:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0_u16` not covered\n@@ -203,7 +203,7 @@ LL |         match $s { $($t)+ => {}, 0_u16 => todo!() }\n    |                                ++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `u16::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:57:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:56:12\n    |\n LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `u16::MAX` not covered\n@@ -215,7 +215,7 @@ LL |         match $s { $($t)+ => {}, u16::MAX => todo!() }\n    |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_u16` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:58:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:57:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_u16` not covered\n@@ -227,7 +227,7 @@ LL |         match $s { $($t)+ => {}, 43_u16 => todo!() }\n    |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_u16` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:59:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:58:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_u16` not covered\n@@ -239,7 +239,7 @@ LL |         match $s { $($t)+ => {}, 43_u16 => todo!() }\n    |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `u32::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:67:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:66:12\n    |\n LL |         m!(0, ..u32::MAX);\n    |            ^ pattern `u32::MAX` not covered\n@@ -251,7 +251,7 @@ LL |         match $s { $($t)+ => {}, u32::MAX => todo!() }\n    |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `4294967294_u32..=u32::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:68:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:67:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `4294967294_u32..=u32::MAX` not covered\n@@ -263,7 +263,7 @@ LL |         match $s { $($t)+ => {}, 4294967294_u32..=u32::MAX => todo!() }\n    |                                ++++++++++++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `0_u32` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:69:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:68:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0_u32` not covered\n@@ -275,7 +275,7 @@ LL |         match $s { $($t)+ => {}, 0_u32 => todo!() }\n    |                                ++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `u32::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:70:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:69:12\n    |\n LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `u32::MAX` not covered\n@@ -287,7 +287,7 @@ LL |         match $s { $($t)+ => {}, u32::MAX => todo!() }\n    |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_u32` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:71:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:70:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_u32` not covered\n@@ -299,7 +299,7 @@ LL |         match $s { $($t)+ => {}, 43_u32 => todo!() }\n    |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_u32` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:72:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:71:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_u32` not covered\n@@ -311,7 +311,7 @@ LL |         match $s { $($t)+ => {}, 43_u32 => todo!() }\n    |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `u64::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:80:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:79:12\n    |\n LL |         m!(0, ..u64::MAX);\n    |            ^ pattern `u64::MAX` not covered\n@@ -323,7 +323,7 @@ LL |         match $s { $($t)+ => {}, u64::MAX => todo!() }\n    |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `18446744073709551614_u64..=u64::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:81:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:80:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `18446744073709551614_u64..=u64::MAX` not covered\n@@ -335,7 +335,7 @@ LL |         match $s { $($t)+ => {}, 18446744073709551614_u64..=u64::MAX => tod\n    |                                ++++++++++++++++++++++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `0_u64` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:82:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:81:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0_u64` not covered\n@@ -347,7 +347,7 @@ LL |         match $s { $($t)+ => {}, 0_u64 => todo!() }\n    |                                ++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `u64::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:83:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:82:12\n    |\n LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `u64::MAX` not covered\n@@ -359,7 +359,7 @@ LL |         match $s { $($t)+ => {}, u64::MAX => todo!() }\n    |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_u64` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:84:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:83:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_u64` not covered\n@@ -371,7 +371,7 @@ LL |         match $s { $($t)+ => {}, 43_u64 => todo!() }\n    |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_u64` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:85:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:84:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_u64` not covered\n@@ -383,7 +383,7 @@ LL |         match $s { $($t)+ => {}, 43_u64 => todo!() }\n    |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `u128::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:93:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:92:12\n    |\n LL |         m!(0, ..u128::MAX);\n    |            ^ pattern `u128::MAX` not covered\n@@ -395,7 +395,7 @@ LL |         match $s { $($t)+ => {}, u128::MAX => todo!() }\n    |                                ++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `340282366920938463463374607431768211454_u128..=u128::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:94:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:93:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `340282366920938463463374607431768211454_u128..=u128::MAX` not covered\n@@ -407,7 +407,7 @@ LL |         match $s { $($t)+ => {}, 340282366920938463463374607431768211454_u1\n    |                                +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `0_u128` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:95:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:94:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0_u128` not covered\n@@ -419,7 +419,7 @@ LL |         match $s { $($t)+ => {}, 0_u128 => todo!() }\n    |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `u128::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:96:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:95:12\n    |\n LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `u128::MAX` not covered\n@@ -431,7 +431,7 @@ LL |         match $s { $($t)+ => {}, u128::MAX => todo!() }\n    |                                ++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_u128` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:97:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:96:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_u128` not covered\n@@ -443,7 +443,7 @@ LL |         match $s { $($t)+ => {}, 43_u128 => todo!() }\n    |                                ++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_u128` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:98:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:97:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_u128` not covered\n@@ -455,7 +455,7 @@ LL |         match $s { $($t)+ => {}, 43_u128 => todo!() }\n    |                                ++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i8::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:109:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:108:12\n    |\n LL |         m!(0, ..i8::MAX);\n    |            ^ pattern `i8::MAX` not covered\n@@ -467,7 +467,7 @@ LL |         match $s { $($t)+ => {}, i8::MAX => todo!() }\n    |                                ++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `126_i8..=i8::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:110:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:109:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `126_i8..=i8::MAX` not covered\n@@ -479,7 +479,7 @@ LL |         match $s { $($t)+ => {}, 126_i8..=i8::MAX => todo!() }\n    |                                +++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i8::MIN` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:111:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:110:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `i8::MIN` not covered\n@@ -491,7 +491,7 @@ LL |         match $s { $($t)+ => {}, i8::MIN => todo!() }\n    |                                ++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i8::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:112:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:111:12\n    |\n LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `i8::MAX` not covered\n@@ -503,7 +503,7 @@ LL |         match $s { $($t)+ => {}, i8::MAX => todo!() }\n    |                                ++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_i8` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:113:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:112:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_i8` not covered\n@@ -515,7 +515,7 @@ LL |         match $s { $($t)+ => {}, 43_i8 => todo!() }\n    |                                ++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_i8` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:114:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:113:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_i8` not covered\n@@ -527,7 +527,7 @@ LL |         match $s { $($t)+ => {}, 43_i8 => todo!() }\n    |                                ++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i16::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:122:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:121:12\n    |\n LL |         m!(0, ..i16::MAX);\n    |            ^ pattern `i16::MAX` not covered\n@@ -539,7 +539,7 @@ LL |         match $s { $($t)+ => {}, i16::MAX => todo!() }\n    |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `32766_i16..=i16::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:123:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:122:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `32766_i16..=i16::MAX` not covered\n@@ -551,7 +551,7 @@ LL |         match $s { $($t)+ => {}, 32766_i16..=i16::MAX => todo!() }\n    |                                +++++++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i16::MIN` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:124:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:123:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `i16::MIN` not covered\n@@ -563,7 +563,7 @@ LL |         match $s { $($t)+ => {}, i16::MIN => todo!() }\n    |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i16::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:125:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:124:12\n    |\n LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `i16::MAX` not covered\n@@ -575,7 +575,7 @@ LL |         match $s { $($t)+ => {}, i16::MAX => todo!() }\n    |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_i16` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:126:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:125:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_i16` not covered\n@@ -587,7 +587,7 @@ LL |         match $s { $($t)+ => {}, 43_i16 => todo!() }\n    |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_i16` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:127:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:126:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_i16` not covered\n@@ -599,7 +599,7 @@ LL |         match $s { $($t)+ => {}, 43_i16 => todo!() }\n    |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i32::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:135:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:134:12\n    |\n LL |         m!(0, ..i32::MAX);\n    |            ^ pattern `i32::MAX` not covered\n@@ -611,7 +611,7 @@ LL |         match $s { $($t)+ => {}, i32::MAX => todo!() }\n    |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `2147483646_i32..=i32::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:136:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:135:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `2147483646_i32..=i32::MAX` not covered\n@@ -623,7 +623,7 @@ LL |         match $s { $($t)+ => {}, 2147483646_i32..=i32::MAX => todo!() }\n    |                                ++++++++++++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i32::MIN` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:137:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:136:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `i32::MIN` not covered\n@@ -635,7 +635,7 @@ LL |         match $s { $($t)+ => {}, i32::MIN => todo!() }\n    |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i32::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:138:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:137:12\n    |\n LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `i32::MAX` not covered\n@@ -647,7 +647,7 @@ LL |         match $s { $($t)+ => {}, i32::MAX => todo!() }\n    |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_i32` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:139:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:138:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_i32` not covered\n@@ -659,7 +659,7 @@ LL |         match $s { $($t)+ => {}, 43_i32 => todo!() }\n    |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_i32` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:140:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:139:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_i32` not covered\n@@ -671,7 +671,7 @@ LL |         match $s { $($t)+ => {}, 43_i32 => todo!() }\n    |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i64::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:148:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:147:12\n    |\n LL |         m!(0, ..i64::MAX);\n    |            ^ pattern `i64::MAX` not covered\n@@ -683,7 +683,7 @@ LL |         match $s { $($t)+ => {}, i64::MAX => todo!() }\n    |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `9223372036854775806_i64..=i64::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:149:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:148:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `9223372036854775806_i64..=i64::MAX` not covered\n@@ -695,7 +695,7 @@ LL |         match $s { $($t)+ => {}, 9223372036854775806_i64..=i64::MAX => todo\n    |                                +++++++++++++++++++++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i64::MIN` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:150:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:149:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `i64::MIN` not covered\n@@ -707,7 +707,7 @@ LL |         match $s { $($t)+ => {}, i64::MIN => todo!() }\n    |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i64::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:151:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:150:12\n    |\n LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `i64::MAX` not covered\n@@ -719,7 +719,7 @@ LL |         match $s { $($t)+ => {}, i64::MAX => todo!() }\n    |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_i64` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:152:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:151:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_i64` not covered\n@@ -731,7 +731,7 @@ LL |         match $s { $($t)+ => {}, 43_i64 => todo!() }\n    |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_i64` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:153:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:152:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_i64` not covered\n@@ -743,7 +743,7 @@ LL |         match $s { $($t)+ => {}, 43_i64 => todo!() }\n    |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i128::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:161:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:160:12\n    |\n LL |         m!(0, ..i128::MAX);\n    |            ^ pattern `i128::MAX` not covered\n@@ -755,7 +755,7 @@ LL |         match $s { $($t)+ => {}, i128::MAX => todo!() }\n    |                                ++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `170141183460469231731687303715884105726_i128..=i128::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:162:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:161:12\n    |\n LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `170141183460469231731687303715884105726_i128..=i128::MAX` not covered\n@@ -767,7 +767,7 @@ LL |         match $s { $($t)+ => {}, 170141183460469231731687303715884105726_i1\n    |                                +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i128::MIN` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:163:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:162:12\n    |\n LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `i128::MIN` not covered\n@@ -779,7 +779,7 @@ LL |         match $s { $($t)+ => {}, i128::MIN => todo!() }\n    |                                ++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i128::MAX` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:164:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:163:12\n    |\n LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `i128::MAX` not covered\n@@ -791,7 +791,7 @@ LL |         match $s { $($t)+ => {}, i128::MAX => todo!() }\n    |                                ++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_i128` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:165:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:164:12\n    |\n LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_i128` not covered\n@@ -803,7 +803,7 @@ LL |         match $s { $($t)+ => {}, 43_i128 => todo!() }\n    |                                ++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_i128` not covered\n-  --> $DIR/half-open-range-pats-exhaustive-fail.rs:166:12\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:165:12\n    |\n LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_i128` not covered"}, {"sha": "4b7eee134e40c1508153891cf6602c12172fef92", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-exhaustive-pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-pass.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -2,7 +2,6 @@\n \n // Test various exhaustive matches for `X..`, `..=X` and `..X` ranges.\n \n-#![feature(half_open_range_patterns)]\n #![feature(exclusive_range_pattern)]\n \n fn main() {}"}, {"sha": "526a797e9d64960b7817048a330b1e3f2d58b687", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-inclusive-dotdotdot-bad-syntax.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-dotdotdot-bad-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-dotdotdot-bad-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-dotdotdot-bad-syntax.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -7,8 +7,6 @@\n // there's a potential confusion factor here, and we would prefer to keep patterns\n // and expressions in-sync. As such, we do not allow `...X` in patterns either.\n \n-#![feature(half_open_range_patterns)]\n-\n fn main() {}\n \n #[cfg(FALSE)]"}, {"sha": "ddffeaf978059de98e80dd74e1935b3ae0b4b8c7", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-inclusive-dotdotdot-bad-syntax.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-dotdotdot-bad-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-dotdotdot-bad-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-dotdotdot-bad-syntax.stderr?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,29 +1,29 @@\n error: range-to patterns with `...` are not allowed\n-  --> $DIR/half-open-range-pats-inclusive-dotdotdot-bad-syntax.rs:17:9\n+  --> $DIR/half-open-range-pats-inclusive-dotdotdot-bad-syntax.rs:15:9\n    |\n LL |         ...X => {}\n    |         ^^^ help: use `..=` instead\n \n error: range-to patterns with `...` are not allowed\n-  --> $DIR/half-open-range-pats-inclusive-dotdotdot-bad-syntax.rs:18:9\n+  --> $DIR/half-open-range-pats-inclusive-dotdotdot-bad-syntax.rs:16:9\n    |\n LL |         ...0 => {}\n    |         ^^^ help: use `..=` instead\n \n error: range-to patterns with `...` are not allowed\n-  --> $DIR/half-open-range-pats-inclusive-dotdotdot-bad-syntax.rs:19:9\n+  --> $DIR/half-open-range-pats-inclusive-dotdotdot-bad-syntax.rs:17:9\n    |\n LL |         ...'a' => {}\n    |         ^^^ help: use `..=` instead\n \n error: range-to patterns with `...` are not allowed\n-  --> $DIR/half-open-range-pats-inclusive-dotdotdot-bad-syntax.rs:20:9\n+  --> $DIR/half-open-range-pats-inclusive-dotdotdot-bad-syntax.rs:18:9\n    |\n LL |         ...0.0f32 => {}\n    |         ^^^ help: use `..=` instead\n \n error: range-to patterns with `...` are not allowed\n-  --> $DIR/half-open-range-pats-inclusive-dotdotdot-bad-syntax.rs:27:17\n+  --> $DIR/half-open-range-pats-inclusive-dotdotdot-bad-syntax.rs:25:17\n    |\n LL |             let ...$e;\n    |                 ^^^ help: use `..=` instead"}, {"sha": "6567c8cc67cb03d26463d3d1e496fd2f95b23251", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-inclusive-no-end.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,8 +1,6 @@\n // Test `X...` and `X..=` range patterns not being allowed syntactically.\n // FIXME(Centril): perhaps these should be semantic restrictions.\n \n-#![feature(half_open_range_patterns)]\n-\n fn main() {}\n \n #[cfg(FALSE)]"}, {"sha": "3ad84b0ef26f8105ed1203c08c9f9358219afe0e", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-inclusive-no-end.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.stderr?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,37 +1,37 @@\n error[E0586]: inclusive range with no end\n-  --> $DIR/half-open-range-pats-inclusive-no-end.rs:10:13\n+  --> $DIR/half-open-range-pats-inclusive-no-end.rs:8:13\n    |\n LL |     if let 0... = 1 {}\n    |             ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/half-open-range-pats-inclusive-no-end.rs:11:13\n+  --> $DIR/half-open-range-pats-inclusive-no-end.rs:9:13\n    |\n LL |     if let 0..= = 1 {}\n    |             ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/half-open-range-pats-inclusive-no-end.rs:13:13\n+  --> $DIR/half-open-range-pats-inclusive-no-end.rs:11:13\n    |\n LL |     if let X... = 1 {}\n    |             ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/half-open-range-pats-inclusive-no-end.rs:14:13\n+  --> $DIR/half-open-range-pats-inclusive-no-end.rs:12:13\n    |\n LL |     if let X..= = 1 {}\n    |             ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/half-open-range-pats-inclusive-no-end.rs:20:19\n+  --> $DIR/half-open-range-pats-inclusive-no-end.rs:18:19\n    |\n LL |             let $e...;\n    |                   ^^^ help: use `..` instead\n@@ -43,7 +43,7 @@ LL |     mac!(0);\n    = note: this error originates in the macro `mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/half-open-range-pats-inclusive-no-end.rs:21:19\n+  --> $DIR/half-open-range-pats-inclusive-no-end.rs:19:19\n    |\n LL |             let $e..=;\n    |                   ^^^ help: use `..` instead"}, {"sha": "2d63fe0785616fe3c3070e5f1829ad7af3bbcb4f", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-ref-ambiguous-interp.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-ref-ambiguous-interp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-ref-ambiguous-interp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-ref-ambiguous-interp.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,5 +1,3 @@\n-#![feature(half_open_range_patterns)]\n-\n fn main() {}\n \n #[cfg(FALSE)]"}, {"sha": "111e81799625e06fd85bf80f55fca3b317af2db9", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-ref-ambiguous-interp.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-ref-ambiguous-interp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-ref-ambiguous-interp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-ref-ambiguous-interp.stderr?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,51 +1,51 @@\n error: the range pattern here has ambiguous interpretation\n-  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:8:10\n+  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:6:10\n    |\n LL |         &0.. | _ => {}\n    |          ^^^ help: add parentheses to clarify the precedence: `(0..)`\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:10:11\n+  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:8:11\n    |\n LL |         &0..= | _ => {}\n    |           ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: the range pattern here has ambiguous interpretation\n-  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:10:10\n+  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:8:10\n    |\n LL |         &0..= | _ => {}\n    |          ^^^^ help: add parentheses to clarify the precedence: `(0..=)`\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:13:11\n+  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:11:11\n    |\n LL |         &0... | _ => {}\n    |           ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: the range pattern here has ambiguous interpretation\n-  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:18:10\n+  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:16:10\n    |\n LL |         &..0 | _ => {}\n    |          ^^^ help: add parentheses to clarify the precedence: `(..0)`\n \n error: the range pattern here has ambiguous interpretation\n-  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:20:10\n+  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:18:10\n    |\n LL |         &..=0 | _ => {}\n    |          ^^^^ help: add parentheses to clarify the precedence: `(..=0)`\n \n error: range-to patterns with `...` are not allowed\n-  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:22:10\n+  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:20:10\n    |\n LL |         &...0 | _ => {}\n    |          ^^^ help: use `..=` instead\n \n error: the range pattern here has ambiguous interpretation\n-  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:22:10\n+  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:20:10\n    |\n LL |         &...0 | _ => {}\n    |          ^^^^ help: add parentheses to clarify the precedence: `(..=0)`"}, {"sha": "6c6ba93196b649357204b574828c9cdb995fd7bf", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-semantics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-semantics.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -3,7 +3,6 @@\n // Test half-open range patterns against their expression equivalents\n // via `.contains(...)` and make sure the dynamic semantics match.\n \n-#![feature(half_open_range_patterns)]\n #![feature(exclusive_range_pattern)]\n #![allow(illegal_floating_point_literal_pattern)]\n #![allow(unreachable_patterns)]"}, {"sha": "9a73e89063f3d8503127306cbd7045a7e89d8dfd", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-syntactic-pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-syntactic-pass.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -3,7 +3,6 @@\n // Test the parsing of half-open ranges.\n \n #![feature(exclusive_range_pattern)]\n-#![feature(half_open_range_patterns)]\n \n fn main() {}\n "}, {"sha": "f55566602dba39eaffac03064f5e23ec1a5a3ef9", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-thir-lower-empty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-thir-lower-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-thir-lower-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-thir-lower-empty.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,4 +1,3 @@\n-#![feature(half_open_range_patterns)]\n #![feature(exclusive_range_pattern)]\n #![allow(illegal_floating_point_literal_pattern)]\n "}, {"sha": "56b224a8542be838821f6218b603d8c971e9a9b7", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-thir-lower-empty.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-thir-lower-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-thir-lower-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-thir-lower-empty.stderr?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,155 +1,155 @@\n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:12:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:11:11\n    |\n LL |     m!(0, ..u8::MIN);\n    |           ^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:15:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:14:11\n    |\n LL |     m!(0, ..u16::MIN);\n    |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:18:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:17:11\n    |\n LL |     m!(0, ..u32::MIN);\n    |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:21:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:20:11\n    |\n LL |     m!(0, ..u64::MIN);\n    |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:24:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:23:11\n    |\n LL |     m!(0, ..u128::MIN);\n    |           ^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:28:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:27:11\n    |\n LL |     m!(0, ..i8::MIN);\n    |           ^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:31:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:30:11\n    |\n LL |     m!(0, ..i16::MIN);\n    |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:34:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:33:11\n    |\n LL |     m!(0, ..i32::MIN);\n    |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:37:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:36:11\n    |\n LL |     m!(0, ..i64::MIN);\n    |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:40:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:39:11\n    |\n LL |     m!(0, ..i128::MIN);\n    |           ^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:44:14\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:43:14\n    |\n LL |     m!(0f32, ..f32::NEG_INFINITY);\n    |              ^^^^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:47:14\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:46:14\n    |\n LL |     m!(0f64, ..f64::NEG_INFINITY);\n    |              ^^^^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:51:13\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:50:13\n    |\n LL |     m!('a', ..'\\u{0}');\n    |             ^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:12:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:11:11\n    |\n LL |     m!(0, ..u8::MIN);\n    |           ^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:15:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:14:11\n    |\n LL |     m!(0, ..u16::MIN);\n    |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:18:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:17:11\n    |\n LL |     m!(0, ..u32::MIN);\n    |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:21:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:20:11\n    |\n LL |     m!(0, ..u64::MIN);\n    |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:24:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:23:11\n    |\n LL |     m!(0, ..u128::MIN);\n    |           ^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:28:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:27:11\n    |\n LL |     m!(0, ..i8::MIN);\n    |           ^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:31:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:30:11\n    |\n LL |     m!(0, ..i16::MIN);\n    |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:34:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:33:11\n    |\n LL |     m!(0, ..i32::MIN);\n    |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:37:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:36:11\n    |\n LL |     m!(0, ..i64::MIN);\n    |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:40:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:39:11\n    |\n LL |     m!(0, ..i128::MIN);\n    |           ^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:44:14\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:43:14\n    |\n LL |     m!(0f32, ..f32::NEG_INFINITY);\n    |              ^^^^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:47:14\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:46:14\n    |\n LL |     m!(0f64, ..f64::NEG_INFINITY);\n    |              ^^^^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-thir-lower-empty.rs:51:13\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:50:13\n    |\n LL |     m!('a', ..'\\u{0}');\n    |             ^^^^^^^^^"}, {"sha": "11c4ab9c5fc74e875d3f5394f678f14cdcdbc523", "filename": "src/test/ui/half-open-range-patterns/pat-tuple-4.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-4.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(half_open_range_patterns)]\n #![feature(exclusive_range_pattern)]\n \n fn main() {"}, {"sha": "995ef03c83ed7c3d3eb307b139d14cb2a947be96", "filename": "src/test/ui/half-open-range-patterns/pat-tuple-5.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,4 +1,3 @@\n-#![feature(half_open_range_patterns)]\n #![feature(exclusive_range_pattern)]\n \n fn main() {"}, {"sha": "c608426382d9ab0adcb217d300809d833bcf1791", "filename": "src/test/ui/half-open-range-patterns/pat-tuple-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.stderr?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/pat-tuple-5.rs:8:10\n+  --> $DIR/pat-tuple-5.rs:7:10\n    |\n LL |     match (0, 1) {\n    |           ------ this expression has type `({integer}, {integer})`"}, {"sha": "acb7feac132f47fdb82268eb24191ee0f71ac9fc", "filename": "src/test/ui/half-open-range-patterns/range_pat_interactions0.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions0.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n #![allow(incomplete_features)]\n #![feature(exclusive_range_pattern)]\n-#![feature(half_open_range_patterns)]\n #![feature(inline_const_pat)]\n \n fn main() {"}, {"sha": "446ed45f9c6f0679201966eb45fe4cdb8ddd17e6", "filename": "src/test/ui/half-open-range-patterns/range_pat_interactions3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -16,8 +16,7 @@ fn main() {\n             //~| exclusive range pattern syntax is experimental\n             y @ -5.. => range_from.push(y),\n             y @ ..-7 => assert_eq!(y, -8),\n-            //~^ half-open range patterns are unstable\n-            //~| exclusive range pattern syntax is experimental\n+            //~^ exclusive range pattern syntax is experimental\n             y => bottom.push(y),\n         }\n     }"}, {"sha": "f7fda67758fed825031aca28cf7d66ed8c186a21", "filename": "src/test/ui/half-open-range-patterns/range_pat_interactions3.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.stderr?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,12 +1,3 @@\n-error[E0658]: half-open range patterns are unstable\n-  --> $DIR/range_pat_interactions3.rs:18:17\n-   |\n-LL |             y @ ..-7 => assert_eq!(y, -8),\n-   |                 ^^^^\n-   |\n-   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n-   = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n-\n error[E0658]: inline-const in pattern position is experimental\n   --> $DIR/range_pat_interactions3.rs:14:20\n    |\n@@ -52,6 +43,6 @@ LL |             y @ ..-7 => assert_eq!(y, -8),\n    = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n    = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "c37af75b8fb2907dc436d0b60822362dab7fdc51", "filename": "src/test/ui/half-open-range-patterns/slice_pattern_syntax_problem1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem1.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -3,7 +3,6 @@ fn main() {\n     let xs = [13, 1, 5, 2, 3, 1, 21, 8];\n     let [a @ 3.., b @ ..3, c @ 4..6, ..] = xs;\n     //~^ `X..` patterns in slices are experimental\n-    //~| half-open range patterns are unstable\n     //~| exclusive range pattern syntax is experimental\n     //~| exclusive range pattern syntax is experimental\n }"}, {"sha": "3bca554b1e55357eaa3c1db28b426081b4b79c56", "filename": "src/test/ui/half-open-range-patterns/slice_pattern_syntax_problem1.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem1.stderr?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,12 +1,3 @@\n-error[E0658]: half-open range patterns are unstable\n-  --> $DIR/slice_pattern_syntax_problem1.rs:4:23\n-   |\n-LL |     let [a @ 3.., b @ ..3, c @ 4..6, ..] = xs;\n-   |                       ^^^\n-   |\n-   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n-   = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n-\n error[E0658]: `X..` patterns in slices are experimental\n   --> $DIR/slice_pattern_syntax_problem1.rs:4:10\n    |\n@@ -34,6 +25,6 @@ LL |     let [a @ 3.., b @ ..3, c @ 4..6, ..] = xs;\n    = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n    = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "73d6334c36f8ee0b0adf1e7ce4355407c031c4c2", "filename": "src/test/ui/inline-const/const-match-pat-range.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-range.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,7 +1,8 @@\n // build-pass\n \n #![allow(incomplete_features)]\n-#![feature(inline_const_pat, half_open_range_patterns, exclusive_range_pattern)]\n+#![feature(inline_const_pat, exclusive_range_pattern)]\n+\n fn main() {\n     const N: u32 = 10;\n     let x: u32 = 3;"}, {"sha": "bc0d4488162b94dc519a586ee99a60db3815a8c1", "filename": "src/test/ui/macros/stringify.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -8,7 +8,6 @@\n #![feature(const_trait_impl)]\n #![feature(decl_macro)]\n #![feature(generators)]\n-#![feature(half_open_range_patterns)]\n #![feature(more_qualified_paths)]\n #![feature(raw_ref_op)]\n #![feature(trait_alias)]"}, {"sha": "27ef3d05a29545fbd2a8f4468cb35ecdcd64aeab", "filename": "src/test/ui/match/expr_before_ident_pat.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fmatch%2Fexpr_before_ident_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fmatch%2Fexpr_before_ident_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fexpr_before_ident_pat.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,5 +1,3 @@\n-#![feature(half_open_range_patterns)]\n-\n macro_rules! funny {\n     ($a:expr, $b:ident) => {\n         match [1, 2] {"}, {"sha": "57a2d2b26cff004687e49ab18dabcbd6fef07ac1", "filename": "src/test/ui/match/expr_before_ident_pat.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fmatch%2Fexpr_before_ident_pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fmatch%2Fexpr_before_ident_pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fexpr_before_ident_pat.stderr?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,11 +1,11 @@\n error[E0425]: cannot find value `a` in this scope\n-  --> $DIR/expr_before_ident_pat.rs:12:12\n+  --> $DIR/expr_before_ident_pat.rs:10:12\n    |\n LL |     funny!(a, a);\n    |            ^ not found in this scope\n \n error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/expr_before_ident_pat.rs:12:12\n+  --> $DIR/expr_before_ident_pat.rs:10:12\n    |\n LL |     funny!(a, a);\n    |            ^"}, {"sha": "d163801fd19029d628bc763d53d3a4f928d94691", "filename": "src/test/ui/match/issue-41255.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fmatch%2Fissue-41255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fmatch%2Fissue-41255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-41255.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,7 +1,6 @@\n // Matching against float literals should result in a linter error\n \n #![feature(exclusive_range_pattern)]\n-#![feature(half_open_range_patterns)]\n #![allow(unused)]\n #![forbid(illegal_floating_point_literal_pattern)]\n "}, {"sha": "9bc49654e6d4bc618971b279d20a66c3b3947812", "filename": "src/test/ui/match/issue-41255.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fmatch%2Fissue-41255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fmatch%2Fissue-41255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-41255.stderr?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,19 +1,19 @@\n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:11:9\n+  --> $DIR/issue-41255.rs:10:9\n    |\n LL |         5.0 => {},\n    |         ^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n note: the lint level is defined here\n-  --> $DIR/issue-41255.rs:6:11\n+  --> $DIR/issue-41255.rs:5:11\n    |\n LL | #![forbid(illegal_floating_point_literal_pattern)]\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:13:9\n+  --> $DIR/issue-41255.rs:12:9\n    |\n LL |         5.0f32 => {},\n    |         ^^^^^^\n@@ -22,7 +22,7 @@ LL |         5.0f32 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:15:10\n+  --> $DIR/issue-41255.rs:14:10\n    |\n LL |         -5.0 => {},\n    |          ^^^\n@@ -31,7 +31,7 @@ LL |         -5.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:17:9\n+  --> $DIR/issue-41255.rs:16:9\n    |\n LL |         1.0 .. 33.0 => {},\n    |         ^^^\n@@ -40,7 +40,7 @@ LL |         1.0 .. 33.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:17:16\n+  --> $DIR/issue-41255.rs:16:16\n    |\n LL |         1.0 .. 33.0 => {},\n    |                ^^^^\n@@ -49,7 +49,7 @@ LL |         1.0 .. 33.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:21:9\n+  --> $DIR/issue-41255.rs:20:9\n    |\n LL |         39.0 ..= 70.0 => {},\n    |         ^^^^\n@@ -58,7 +58,7 @@ LL |         39.0 ..= 70.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:21:18\n+  --> $DIR/issue-41255.rs:20:18\n    |\n LL |         39.0 ..= 70.0 => {},\n    |                  ^^^^\n@@ -67,7 +67,7 @@ LL |         39.0 ..= 70.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:26:11\n+  --> $DIR/issue-41255.rs:25:11\n    |\n LL |         ..71.0 => {}\n    |           ^^^^\n@@ -76,7 +76,7 @@ LL |         ..71.0 => {}\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:29:12\n+  --> $DIR/issue-41255.rs:28:12\n    |\n LL |         ..=72.0 => {}\n    |            ^^^^\n@@ -85,7 +85,7 @@ LL |         ..=72.0 => {}\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:32:9\n+  --> $DIR/issue-41255.rs:31:9\n    |\n LL |         71.0.. => {}\n    |         ^^^^\n@@ -94,7 +94,7 @@ LL |         71.0.. => {}\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:40:10\n+  --> $DIR/issue-41255.rs:39:10\n    |\n LL |         (3.14, 1) => {},\n    |          ^^^^\n@@ -103,7 +103,7 @@ LL |         (3.14, 1) => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:47:18\n+  --> $DIR/issue-41255.rs:46:18\n    |\n LL |         Foo { x: 2.0 } => {},\n    |                  ^^^"}, {"sha": "469c3855c32addc120436b6aad0b05006a303d33", "filename": "src/test/ui/parser/attr-stmt-expr-attr-bad.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,5 +1,3 @@\n-#![feature(half_open_range_patterns)]\n-\n fn main() {}\n \n #[cfg(FALSE)] fn e() { let _ = box #![attr] 0; }"}, {"sha": "872c560cb510c103ecfe4a282a2bd0ddfdd3044f", "filename": "src/test/ui/parser/attr-stmt-expr-attr-bad.stderr", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,5 +1,5 @@\n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:5:36\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:3:36\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = box #![attr] 0; }\n    |                                    ^^^^^^^^\n@@ -8,19 +8,19 @@ LL | #[cfg(FALSE)] fn e() { let _ = box #![attr] 0; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: expected expression, found `]`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:7:40\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:5:40\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = [#[attr]]; }\n    |                                        ^ expected expression\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:9:35\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:7:35\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = foo#[attr](); }\n    |                                   ^ expected one of 8 possible tokens\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:11:36\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:9:36\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = foo(#![attr]); }\n    |                                    ^^^^^^^^\n@@ -29,13 +29,13 @@ LL | #[cfg(FALSE)] fn e() { let _ = foo(#![attr]); }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: expected expression, found `)`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:11:44\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:9:44\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = foo(#![attr]); }\n    |                                            ^ expected expression\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:14:38\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:12:38\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x.foo(#![attr]); }\n    |                                      ^^^^^^^^\n@@ -44,13 +44,13 @@ LL | #[cfg(FALSE)] fn e() { let _ = x.foo(#![attr]); }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: expected expression, found `)`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:14:46\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:12:46\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x.foo(#![attr]); }\n    |                                              ^ expected expression\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:17:36\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:15:36\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = 0 + #![attr] 0; }\n    |                                    ^^^^^^^^\n@@ -59,7 +59,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = 0 + #![attr] 0; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:19:33\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:17:33\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = !#![attr] 0; }\n    |                                 ^^^^^^^^\n@@ -68,7 +68,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = !#![attr] 0; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:21:33\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:19:33\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = -#![attr] 0; }\n    |                                 ^^^^^^^^\n@@ -77,13 +77,13 @@ LL | #[cfg(FALSE)] fn e() { let _ = -#![attr] 0; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:23:34\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:21:34\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x #![attr] as Y; }\n    |                                  ^ expected one of 8 possible tokens\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:25:35\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:23:35\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = || #![attr] foo; }\n    |                                   ^^^^^^^^\n@@ -92,7 +92,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = || #![attr] foo; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:27:40\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:25:40\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = move || #![attr] foo; }\n    |                                        ^^^^^^^^\n@@ -101,7 +101,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = move || #![attr] foo; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:29:35\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:27:35\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = || #![attr] {foo}; }\n    |                                   ^^^^^^^^\n@@ -110,7 +110,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = || #![attr] {foo}; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:31:40\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:29:40\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = move || #![attr] {foo}; }\n    |                                        ^^^^^^^^\n@@ -119,19 +119,19 @@ LL | #[cfg(FALSE)] fn e() { let _ = move || #![attr] {foo}; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: expected expression, found `..`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:33:40\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:31:40\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = #[attr] ..#[attr] 0; }\n    |                                        ^^ expected expression\n \n error: expected expression, found `..`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:35:40\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:33:40\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = #[attr] ..; }\n    |                                        ^^ expected expression\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:37:41\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:35:41\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = #[attr] &#![attr] 0; }\n    |                                         ^^^^^^^^\n@@ -140,7 +140,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = #[attr] &#![attr] 0; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:39:45\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:37:45\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = #[attr] &mut #![attr] 0; }\n    |                                             ^^^^^^^^\n@@ -149,7 +149,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = #[attr] &mut #![attr] 0; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: outer attributes are not allowed on `if` and `else` branches\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:41:37\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:39:37\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 #[attr] {}; }\n    |                                --   ^^^^^^^ -- the attributes are attached to this branch\n@@ -158,7 +158,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if 0 #[attr] {}; }\n    |                                the branch belongs to this `if`\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:43:38\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:41:38\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {#![attr]}; }\n    |                                      ^^^^^^^^\n@@ -167,13 +167,13 @@ LL | #[cfg(FALSE)] fn e() { let _ = if 0 {#![attr]}; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: expected one of `.`, `;`, `?`, `else`, or an operator, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:45:40\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:43:40\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} #[attr] else {}; }\n    |                                        ^ expected one of `.`, `;`, `?`, `else`, or an operator\n \n error: outer attributes are not allowed on `if` and `else` branches\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:47:45\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:45:45\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] {}; }\n    |                                        ---- ^^^^^^^ -- the attributes are attached to this branch\n@@ -182,7 +182,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] {}; }\n    |                                        the branch belongs to this `else`\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:49:46\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:47:46\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else {#![attr]}; }\n    |                                              ^^^^^^^^\n@@ -191,7 +191,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else {#![attr]}; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: outer attributes are not allowed on `if` and `else` branches\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:51:45\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:49:45\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] if 0 {}; }\n    |                                        ---- ^^^^^^^ ------- the attributes are attached to this branch\n@@ -200,7 +200,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] if 0 {}; }\n    |                                        the branch belongs to this `else`\n \n error: outer attributes are not allowed on `if` and `else` branches\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:53:50\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:51:50\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 #[attr] {}; }\n    |                                             --   ^^^^^^^ -- the attributes are attached to this branch\n@@ -209,7 +209,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 #[attr] {}; }\n    |                                             the branch belongs to this `if`\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:55:51\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:53:51\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 {#![attr]}; }\n    |                                                   ^^^^^^^^\n@@ -218,7 +218,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 {#![attr]}; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: outer attributes are not allowed on `if` and `else` branches\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:57:45\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:55:45\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 #[attr] {}; }\n    |                                --           ^^^^^^^ -- the attributes are attached to this branch\n@@ -227,7 +227,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 #[attr] {}; }\n    |                                the branch belongs to this `if`\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:59:46\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:57:46\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {#![attr]}; }\n    |                                              ^^^^^^^^\n@@ -236,13 +236,13 @@ LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {#![attr]}; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: expected one of `.`, `;`, `?`, `else`, or an operator, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:61:48\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:59:48\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} #[attr] else {}; }\n    |                                                ^ expected one of `.`, `;`, `?`, `else`, or an operator\n \n error: outer attributes are not allowed on `if` and `else` branches\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:63:53\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:61:53\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] {}; }\n    |                                                ---- ^^^^^^^ -- the attributes are attached to this branch\n@@ -251,7 +251,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] {}; }\n    |                                                the branch belongs to this `else`\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:65:54\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:63:54\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else {#![attr]}; }\n    |                                                      ^^^^^^^^\n@@ -260,7 +260,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else {#![attr]}; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: outer attributes are not allowed on `if` and `else` branches\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:67:53\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:65:53\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] if let _ = 0 {}; }\n    |                                                ---- ^^^^^^^ --------------- the attributes are attached to this branch\n@@ -269,7 +269,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] if let _ = 0 {}\n    |                                                the branch belongs to this `else`\n \n error: outer attributes are not allowed on `if` and `else` branches\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:69:66\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:67:66\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 #[attr] {}; }\n    |                                                     --           ^^^^^^^ -- the attributes are attached to this branch\n@@ -278,7 +278,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 #[attr] {}\n    |                                                     the branch belongs to this `if`\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:71:67\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:69:67\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 {#![attr]}; }\n    |                                                                   ^^^^^^^^\n@@ -287,7 +287,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 {#![attr]}\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted following an outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:74:32\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:72:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] let _ = 0; }\n    |                        ------- ^^^^^^^^ not permitted following an outer attribute\n@@ -298,7 +298,7 @@ LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] let _ = 0; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted following an outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:76:32\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:74:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] 0; }\n    |                        ------- ^^^^^^^^ not permitted following an outer attribute\n@@ -309,7 +309,7 @@ LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] 0; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted following an outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:78:32\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:76:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo!(); }\n    |                        ------- ^^^^^^^^ ------- the inner attribute doesn't annotate this item macro invocation\n@@ -325,7 +325,7 @@ LL + #[cfg(FALSE)] fn s() { #[attr] #[attr] foo!(); }\n    |\n \n error: an inner attribute is not permitted following an outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:80:32\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:78:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo![]; }\n    |                        ------- ^^^^^^^^ ------- the inner attribute doesn't annotate this item macro invocation\n@@ -341,7 +341,7 @@ LL + #[cfg(FALSE)] fn s() { #[attr] #[attr] foo![]; }\n    |\n \n error: an inner attribute is not permitted following an outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:82:32\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:80:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo!{}; }\n    |                        ------- ^^^^^^^^ ------ the inner attribute doesn't annotate this item macro invocation\n@@ -357,85 +357,85 @@ LL + #[cfg(FALSE)] fn s() { #[attr] #[attr] foo!{}; }\n    |\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:88:35\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:86:35\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] 10 => () } }\n    |                                   ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: expected one of `=>`, `if`, or `|`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:88:38\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:86:38\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] 10 => () } }\n    |                                      ^ expected one of `=>`, `if`, or `|`\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:91:35\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:89:35\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] -10 => () } }\n    |                                   ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: expected one of `=>`, `if`, or `|`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:91:38\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:89:38\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] -10 => () } }\n    |                                      ^ expected one of `=>`, `if`, or `|`\n \n error: unexpected token: `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:94:39\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:92:39\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=-#[attr] 10 => () } }\n    |                                       ^\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:96:35\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:94:35\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] FOO => () } }\n    |                                   ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: expected one of `=>`, `if`, or `|`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:96:38\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:94:38\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] FOO => () } }\n    |                                      ^ expected one of `=>`, `if`, or `|`\n \n error: unexpected token: `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:100:34\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:98:34\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x.#![attr]foo(); }\n    |                                  ^\n \n error: expected one of `.`, `;`, `?`, `else`, or an operator, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:100:34\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:98:34\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x.#![attr]foo(); }\n    |                                  ^ expected one of `.`, `;`, `?`, `else`, or an operator\n \n error: unexpected token: `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:103:34\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:101:34\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x.#[attr]foo(); }\n    |                                  ^\n \n error: expected one of `.`, `;`, `?`, `else`, or an operator, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:103:34\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:101:34\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x.#[attr]foo(); }\n    |                                  ^ expected one of `.`, `;`, `?`, `else`, or an operator\n \n error: expected statement after outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:108:37\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:106:37\n    |\n LL | #[cfg(FALSE)] fn e() { { fn foo() { #[attr]; } } }\n    |                                     ^^^^^^^\n \n error: expected statement after outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:110:37\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:108:37\n    |\n LL | #[cfg(FALSE)] fn e() { { fn foo() { #[attr] } } }\n    |                                     ^^^^^^^"}, {"sha": "b6e5091b6217e3bc654dbea908beba6e20560e14", "filename": "src/test/ui/parser/issues/issue-63115-range-pat-interpolated.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-63115-range-pat-interpolated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-63115-range-pat-interpolated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-63115-range-pat-interpolated.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n \n #![feature(exclusive_range_pattern)]\n-#![feature(half_open_range_patterns)]\n \n #![allow(ellipsis_inclusive_range_patterns)]\n "}, {"sha": "156c7ad94d36ac61f5b4896a53741bb53a1ff740", "filename": "src/test/ui/parser/recover-range-pats.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -4,7 +4,6 @@\n // 2. Or at least we have parser recovery if they don't.\n \n #![feature(exclusive_range_pattern)]\n-#![feature(half_open_range_patterns)]\n #![deny(ellipsis_inclusive_range_patterns)]\n \n fn main() {}"}, {"sha": "c54f13e01852163c0545163a4a5e8be26abc8483", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 61, "deletions": 61, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,165 +1,165 @@\n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:22:12\n+  --> $DIR/recover-range-pats.rs:21:12\n    |\n LL |     if let .0..Y = 0 {}\n    |            ^^ help: must have an integer part: `0.0`\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:24:16\n+  --> $DIR/recover-range-pats.rs:23:16\n    |\n LL |     if let X.. .0 = 0 {}\n    |                ^^ help: must have an integer part: `0.0`\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:35:12\n+  --> $DIR/recover-range-pats.rs:34:12\n    |\n LL |     if let .0..=Y = 0 {}\n    |            ^^ help: must have an integer part: `0.0`\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:37:16\n+  --> $DIR/recover-range-pats.rs:36:16\n    |\n LL |     if let X..=.0 = 0 {}\n    |                ^^ help: must have an integer part: `0.0`\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:60:12\n+  --> $DIR/recover-range-pats.rs:59:12\n    |\n LL |     if let .0...Y = 0 {}\n    |            ^^ help: must have an integer part: `0.0`\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:64:17\n+  --> $DIR/recover-range-pats.rs:63:17\n    |\n LL |     if let X... .0 = 0 {}\n    |                 ^^ help: must have an integer part: `0.0`\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:75:12\n+  --> $DIR/recover-range-pats.rs:74:12\n    |\n LL |     if let .0.. = 0 {}\n    |            ^^ help: must have an integer part: `0.0`\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:81:13\n+  --> $DIR/recover-range-pats.rs:80:13\n    |\n LL |     if let 0..= = 0 {}\n    |             ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:82:13\n+  --> $DIR/recover-range-pats.rs:81:13\n    |\n LL |     if let X..= = 0 {}\n    |             ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:83:16\n+  --> $DIR/recover-range-pats.rs:82:16\n    |\n LL |     if let true..= = 0 {}\n    |                ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:85:12\n+  --> $DIR/recover-range-pats.rs:84:12\n    |\n LL |     if let .0..= = 0 {}\n    |            ^^ help: must have an integer part: `0.0`\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:85:14\n+  --> $DIR/recover-range-pats.rs:84:14\n    |\n LL |     if let .0..= = 0 {}\n    |              ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:91:13\n+  --> $DIR/recover-range-pats.rs:90:13\n    |\n LL |     if let 0... = 0 {}\n    |             ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:92:13\n+  --> $DIR/recover-range-pats.rs:91:13\n    |\n LL |     if let X... = 0 {}\n    |             ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:93:16\n+  --> $DIR/recover-range-pats.rs:92:16\n    |\n LL |     if let true... = 0 {}\n    |                ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:95:12\n+  --> $DIR/recover-range-pats.rs:94:12\n    |\n LL |     if let .0... = 0 {}\n    |            ^^ help: must have an integer part: `0.0`\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:95:14\n+  --> $DIR/recover-range-pats.rs:94:14\n    |\n LL |     if let .0... = 0 {}\n    |              ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:105:15\n+  --> $DIR/recover-range-pats.rs:104:15\n    |\n LL |     if let .. .0 = 0 {}\n    |               ^^ help: must have an integer part: `0.0`\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:115:15\n+  --> $DIR/recover-range-pats.rs:114:15\n    |\n LL |     if let ..=.0 = 0 {}\n    |               ^^ help: must have an integer part: `0.0`\n \n error: range-to patterns with `...` are not allowed\n-  --> $DIR/recover-range-pats.rs:121:12\n+  --> $DIR/recover-range-pats.rs:120:12\n    |\n LL |     if let ...3 = 0 {}\n    |            ^^^ help: use `..=` instead\n \n error: range-to patterns with `...` are not allowed\n-  --> $DIR/recover-range-pats.rs:123:12\n+  --> $DIR/recover-range-pats.rs:122:12\n    |\n LL |     if let ...Y = 0 {}\n    |            ^^^ help: use `..=` instead\n \n error: range-to patterns with `...` are not allowed\n-  --> $DIR/recover-range-pats.rs:125:12\n+  --> $DIR/recover-range-pats.rs:124:12\n    |\n LL |     if let ...true = 0 {}\n    |            ^^^ help: use `..=` instead\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:128:15\n+  --> $DIR/recover-range-pats.rs:127:15\n    |\n LL |     if let ....3 = 0 {}\n    |               ^^ help: must have an integer part: `0.3`\n \n error: range-to patterns with `...` are not allowed\n-  --> $DIR/recover-range-pats.rs:128:12\n+  --> $DIR/recover-range-pats.rs:127:12\n    |\n LL |     if let ....3 = 0 {}\n    |            ^^^ help: use `..=` instead\n \n error: range-to patterns with `...` are not allowed\n-  --> $DIR/recover-range-pats.rs:150:17\n+  --> $DIR/recover-range-pats.rs:149:17\n    |\n LL |             let ...$e;\n    |                 ^^^ help: use `..=` instead\n@@ -170,7 +170,7 @@ LL |     mac!(0);\n    = note: this error originates in the macro `mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:154:19\n+  --> $DIR/recover-range-pats.rs:153:19\n    |\n LL |             let $e...;\n    |                   ^^^ help: use `..` instead\n@@ -182,7 +182,7 @@ LL |     mac!(0);\n    = note: this error originates in the macro `mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/recover-range-pats.rs:155:19\n+  --> $DIR/recover-range-pats.rs:154:19\n    |\n LL |             let $e..=;\n    |                   ^^^ help: use `..` instead\n@@ -194,21 +194,21 @@ LL |     mac!(0);\n    = note: this error originates in the macro `mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:42:13\n+  --> $DIR/recover-range-pats.rs:41:13\n    |\n LL |     if let 0...3 = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n note: the lint level is defined here\n-  --> $DIR/recover-range-pats.rs:8:9\n+  --> $DIR/recover-range-pats.rs:7:9\n    |\n LL | #![deny(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:45:13\n+  --> $DIR/recover-range-pats.rs:44:13\n    |\n LL |     if let 0...Y = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n@@ -217,7 +217,7 @@ LL |     if let 0...Y = 0 {}\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:48:13\n+  --> $DIR/recover-range-pats.rs:47:13\n    |\n LL |     if let X...3 = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n@@ -226,7 +226,7 @@ LL |     if let X...3 = 0 {}\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:51:13\n+  --> $DIR/recover-range-pats.rs:50:13\n    |\n LL |     if let X...Y = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n@@ -235,7 +235,7 @@ LL |     if let X...Y = 0 {}\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:54:16\n+  --> $DIR/recover-range-pats.rs:53:16\n    |\n LL |     if let true...Y = 0 {}\n    |                ^^^ help: use `..=` for an inclusive range\n@@ -244,7 +244,7 @@ LL |     if let true...Y = 0 {}\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:57:13\n+  --> $DIR/recover-range-pats.rs:56:13\n    |\n LL |     if let X...true = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n@@ -253,7 +253,7 @@ LL |     if let X...true = 0 {}\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:60:14\n+  --> $DIR/recover-range-pats.rs:59:14\n    |\n LL |     if let .0...Y = 0 {}\n    |              ^^^ help: use `..=` for an inclusive range\n@@ -262,7 +262,7 @@ LL |     if let .0...Y = 0 {}\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:64:13\n+  --> $DIR/recover-range-pats.rs:63:13\n    |\n LL |     if let X... .0 = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n@@ -271,7 +271,7 @@ LL |     if let X... .0 = 0 {}\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:138:20\n+  --> $DIR/recover-range-pats.rs:137:20\n    |\n LL |             let $e1...$e2;\n    |                    ^^^ help: use `..=` for an inclusive range\n@@ -284,23 +284,23 @@ LL |     mac2!(0, 1);\n    = note: this error originates in the macro `mac2` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:20:12\n+  --> $DIR/recover-range-pats.rs:19:12\n    |\n LL |     if let true..Y = 0 {}\n    |            ^^^^  - this is of type `u8`\n    |            |\n    |            this is of type `bool` but it should be `char` or numeric\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:21:15\n+  --> $DIR/recover-range-pats.rs:20:15\n    |\n LL |     if let X..true = 0 {}\n    |            -  ^^^^ this is of type `bool` but it should be `char` or numeric\n    |            |\n    |            this is of type `u8`\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:22:12\n+  --> $DIR/recover-range-pats.rs:21:12\n    |\n LL |     if let .0..Y = 0 {}\n    |            ^^  -   - this expression has type `{integer}`\n@@ -309,7 +309,7 @@ LL |     if let .0..Y = 0 {}\n    |            expected integer, found floating-point number\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:24:16\n+  --> $DIR/recover-range-pats.rs:23:16\n    |\n LL |     if let X.. .0 = 0 {}\n    |            -   ^^   - this expression has type `u8`\n@@ -321,23 +321,23 @@ LL |     if let X.. .0 = 0 {}\n               found type `{float}`\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:33:12\n+  --> $DIR/recover-range-pats.rs:32:12\n    |\n LL |     if let true..=Y = 0 {}\n    |            ^^^^   - this is of type `u8`\n    |            |\n    |            this is of type `bool` but it should be `char` or numeric\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:34:16\n+  --> $DIR/recover-range-pats.rs:33:16\n    |\n LL |     if let X..=true = 0 {}\n    |            -   ^^^^ this is of type `bool` but it should be `char` or numeric\n    |            |\n    |            this is of type `u8`\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:35:12\n+  --> $DIR/recover-range-pats.rs:34:12\n    |\n LL |     if let .0..=Y = 0 {}\n    |            ^^   -   - this expression has type `{integer}`\n@@ -346,7 +346,7 @@ LL |     if let .0..=Y = 0 {}\n    |            expected integer, found floating-point number\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:37:16\n+  --> $DIR/recover-range-pats.rs:36:16\n    |\n LL |     if let X..=.0 = 0 {}\n    |            -   ^^   - this expression has type `u8`\n@@ -358,23 +358,23 @@ LL |     if let X..=.0 = 0 {}\n               found type `{float}`\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:54:12\n+  --> $DIR/recover-range-pats.rs:53:12\n    |\n LL |     if let true...Y = 0 {}\n    |            ^^^^   - this is of type `u8`\n    |            |\n    |            this is of type `bool` but it should be `char` or numeric\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:57:16\n+  --> $DIR/recover-range-pats.rs:56:16\n    |\n LL |     if let X...true = 0 {}\n    |            -   ^^^^ this is of type `bool` but it should be `char` or numeric\n    |            |\n    |            this is of type `u8`\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:60:12\n+  --> $DIR/recover-range-pats.rs:59:12\n    |\n LL |     if let .0...Y = 0 {}\n    |            ^^   -   - this expression has type `{integer}`\n@@ -383,7 +383,7 @@ LL |     if let .0...Y = 0 {}\n    |            expected integer, found floating-point number\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:64:17\n+  --> $DIR/recover-range-pats.rs:63:17\n    |\n LL |     if let X... .0 = 0 {}\n    |            -    ^^   - this expression has type `u8`\n@@ -395,83 +395,83 @@ LL |     if let X... .0 = 0 {}\n               found type `{float}`\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:73:12\n+  --> $DIR/recover-range-pats.rs:72:12\n    |\n LL |     if let true.. = 0 {}\n    |            ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:75:12\n+  --> $DIR/recover-range-pats.rs:74:12\n    |\n LL |     if let .0.. = 0 {}\n    |            ^^     - this expression has type `{integer}`\n    |            |\n    |            expected integer, found floating-point number\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:83:12\n+  --> $DIR/recover-range-pats.rs:82:12\n    |\n LL |     if let true..= = 0 {}\n    |            ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:85:12\n+  --> $DIR/recover-range-pats.rs:84:12\n    |\n LL |     if let .0..= = 0 {}\n    |            ^^      - this expression has type `{integer}`\n    |            |\n    |            expected integer, found floating-point number\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:93:12\n+  --> $DIR/recover-range-pats.rs:92:12\n    |\n LL |     if let true... = 0 {}\n    |            ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:95:12\n+  --> $DIR/recover-range-pats.rs:94:12\n    |\n LL |     if let .0... = 0 {}\n    |            ^^      - this expression has type `{integer}`\n    |            |\n    |            expected integer, found floating-point number\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:103:14\n+  --> $DIR/recover-range-pats.rs:102:14\n    |\n LL |     if let ..true = 0 {}\n    |              ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:105:15\n+  --> $DIR/recover-range-pats.rs:104:15\n    |\n LL |     if let .. .0 = 0 {}\n    |               ^^   - this expression has type `{integer}`\n    |               |\n    |               expected integer, found floating-point number\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:113:15\n+  --> $DIR/recover-range-pats.rs:112:15\n    |\n LL |     if let ..=true = 0 {}\n    |               ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:115:15\n+  --> $DIR/recover-range-pats.rs:114:15\n    |\n LL |     if let ..=.0 = 0 {}\n    |               ^^   - this expression has type `{integer}`\n    |               |\n    |               expected integer, found floating-point number\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:125:15\n+  --> $DIR/recover-range-pats.rs:124:15\n    |\n LL |     if let ...true = 0 {}\n    |               ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:128:15\n+  --> $DIR/recover-range-pats.rs:127:15\n    |\n LL |     if let ....3 = 0 {}\n    |               ^^   - this expression has type `{integer}`"}, {"sha": "22b04b208f87b09648234f72a143bdcb5fdcd2eb", "filename": "src/tools/clippy/tests/ui/match_overlapping_arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_overlapping_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae73634dc63e48a23467b970e2fbcc81cb2ec73/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_overlapping_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_overlapping_arm.rs?ref=5ae73634dc63e48a23467b970e2fbcc81cb2ec73", "patch": "@@ -1,5 +1,5 @@\n #![feature(exclusive_range_pattern)]\n-#![feature(half_open_range_patterns)]\n+\n #![warn(clippy::match_overlapping_arm)]\n #![allow(clippy::redundant_pattern_matching)]\n #![allow(clippy::if_same_then_else, clippy::equatable_if_let)]"}]}