{"sha": "8e99c76089ecb69479532e22ae2879e3bb1b3d68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOTljNzYwODllY2I2OTQ3OTUzMmUyMmFlMjg3OWUzYmIxYjNkNjg=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-05-11T14:55:34Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-05-19T20:13:08Z"}, "message": "[const-prop] Support propagating into Assert's `cond` Operand", "tree": {"sha": "f644069e555d8c963c2c0870d3bbf9ccb2469ef8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f644069e555d8c963c2c0870d3bbf9ccb2469ef8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e99c76089ecb69479532e22ae2879e3bb1b3d68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e99c76089ecb69479532e22ae2879e3bb1b3d68", "html_url": "https://github.com/rust-lang/rust/commit/8e99c76089ecb69479532e22ae2879e3bb1b3d68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e99c76089ecb69479532e22ae2879e3bb1b3d68/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6afcb5628523b0baae5704ad34ac1aba8ba10de6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6afcb5628523b0baae5704ad34ac1aba8ba10de6", "html_url": "https://github.com/rust-lang/rust/commit/6afcb5628523b0baae5704ad34ac1aba8ba10de6"}], "stats": {"total": 150, "additions": 81, "deletions": 69}, "files": [{"sha": "0247ffbb9d1548af67a70e3a43a71533caad1e64", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 79, "deletions": 67, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/8e99c76089ecb69479532e22ae2879e3bb1b3d68/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e99c76089ecb69479532e22ae2879e3bb1b3d68/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=8e99c76089ecb69479532e22ae2879e3bb1b3d68", "patch": "@@ -656,75 +656,87 @@ impl<'b, 'a, 'tcx> MutVisitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n         location: Location,\n     ) {\n         self.super_terminator(terminator, location);\n-        let source_info = terminator.source_info;;\n-        if let TerminatorKind::Assert { expected, msg, cond, .. } = &terminator.kind {\n-            if let Some(value) = self.eval_operand(&cond, source_info) {\n-                trace!(\"assertion on {:?} should be {:?}\", value, expected);\n-                let expected = ScalarMaybeUndef::from(Scalar::from_bool(*expected));\n-                if expected != self.ecx.read_scalar(value).unwrap() {\n-                    // poison all places this operand references so that further code\n-                    // doesn't use the invalid value\n-                    match cond {\n-                        Operand::Move(ref place) | Operand::Copy(ref place) => {\n-                            let mut place = place;\n-                            while let Place::Projection(ref proj) = *place {\n-                                place = &proj.base;\n-                            }\n-                            if let Place::Base(PlaceBase::Local(local)) = *place {\n-                                self.places[local] = None;\n-                            }\n-                        },\n-                        Operand::Constant(_) => {}\n+        let source_info = terminator.source_info;\n+        match &mut terminator.kind {\n+            TerminatorKind::Assert { expected, msg, ref mut cond, .. } => {\n+                if let Some(value) = self.eval_operand(&cond, source_info) {\n+                    trace!(\"assertion on {:?} should be {:?}\", value, expected);\n+                    let expected = ScalarMaybeUndef::from(Scalar::from_bool(*expected));\n+                    let value_const = self.ecx.read_scalar(value).unwrap();\n+                    if expected != value_const {\n+                        // poison all places this operand references so that further code\n+                        // doesn't use the invalid value\n+                        match cond {\n+                            Operand::Move(ref place) | Operand::Copy(ref place) => {\n+                                let mut place = place;\n+                                while let Place::Projection(ref proj) = *place {\n+                                    place = &proj.base;\n+                                }\n+                                if let Place::Base(PlaceBase::Local(local)) = *place {\n+                                    self.places[local] = None;\n+                                }\n+                            },\n+                            Operand::Constant(_) => {}\n+                        }\n+                        let span = terminator.source_info.span;\n+                        let hir_id = self\n+                            .tcx\n+                            .hir()\n+                            .as_local_hir_id(self.source.def_id())\n+                            .expect(\"some part of a failing const eval must be local\");\n+                        use rustc::mir::interpret::InterpError::*;\n+                        let msg = match msg {\n+                            Overflow(_) |\n+                            OverflowNeg |\n+                            DivisionByZero |\n+                            RemainderByZero => msg.description().to_owned(),\n+                            BoundsCheck { ref len, ref index } => {\n+                                let len = self\n+                                    .eval_operand(len, source_info)\n+                                    .expect(\"len must be const\");\n+                                let len = match self.ecx.read_scalar(len) {\n+                                    Ok(ScalarMaybeUndef::Scalar(Scalar::Bits {\n+                                        bits, ..\n+                                    })) => bits,\n+                                    other => bug!(\"const len not primitive: {:?}\", other),\n+                                };\n+                                let index = self\n+                                    .eval_operand(index, source_info)\n+                                    .expect(\"index must be const\");\n+                                let index = match self.ecx.read_scalar(index) {\n+                                    Ok(ScalarMaybeUndef::Scalar(Scalar::Bits {\n+                                        bits, ..\n+                                    })) => bits,\n+                                    other => bug!(\"const index not primitive: {:?}\", other),\n+                                };\n+                                format!(\n+                                    \"index out of bounds: \\\n+                                    the len is {} but the index is {}\",\n+                                    len,\n+                                    index,\n+                                )\n+                            },\n+                            // Need proper const propagator for these\n+                            _ => return,\n+                        };\n+                        self.tcx.lint_hir(\n+                            ::rustc::lint::builtin::CONST_ERR,\n+                            hir_id,\n+                            span,\n+                            &msg,\n+                        );\n+                    } else {\n+                        if let ScalarMaybeUndef::Scalar(scalar) = value_const {\n+                            *cond = self.operand_from_scalar(\n+                                scalar,\n+                                self.tcx.types.bool,\n+                                source_info.span,\n+                            );\n+                        }\n                     }\n-                    let span = terminator.source_info.span;\n-                    let hir_id = self\n-                        .tcx\n-                        .hir()\n-                        .as_local_hir_id(self.source.def_id())\n-                        .expect(\"some part of a failing const eval must be local\");\n-                    use rustc::mir::interpret::InterpError::*;\n-                    let msg = match msg {\n-                        Overflow(_) |\n-                        OverflowNeg |\n-                        DivisionByZero |\n-                        RemainderByZero => msg.description().to_owned(),\n-                        BoundsCheck { ref len, ref index } => {\n-                            let len = self\n-                                .eval_operand(len, source_info)\n-                                .expect(\"len must be const\");\n-                            let len = match self.ecx.read_scalar(len) {\n-                                Ok(ScalarMaybeUndef::Scalar(Scalar::Bits {\n-                                    bits, ..\n-                                })) => bits,\n-                                other => bug!(\"const len not primitive: {:?}\", other),\n-                            };\n-                            let index = self\n-                                .eval_operand(index, source_info)\n-                                .expect(\"index must be const\");\n-                            let index = match self.ecx.read_scalar(index) {\n-                                Ok(ScalarMaybeUndef::Scalar(Scalar::Bits {\n-                                    bits, ..\n-                                })) => bits,\n-                                other => bug!(\"const index not primitive: {:?}\", other),\n-                            };\n-                            format!(\n-                                \"index out of bounds: \\\n-                                the len is {} but the index is {}\",\n-                                len,\n-                                index,\n-                            )\n-                        },\n-                        // Need proper const propagator for these\n-                        _ => return,\n-                    };\n-                    self.tcx.lint_hir(\n-                        ::rustc::lint::builtin::CONST_ERR,\n-                        hir_id,\n-                        span,\n-                        &msg,\n-                    );\n                 }\n-            }\n+            },\n+            _ => {}\n         }\n     }\n }"}, {"sha": "dd22eb5d604ea51b84d8586ebfc26c6e16bcb038", "filename": "src/test/mir-opt/const_prop/array_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e99c76089ecb69479532e22ae2879e3bb1b3d68/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e99c76089ecb69479532e22ae2879e3bb1b3d68/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.rs?ref=8e99c76089ecb69479532e22ae2879e3bb1b3d68", "patch": "@@ -23,7 +23,7 @@ fn main() {\n //  bb0: {\n //      ...\n //      _5 = const true;\n-//      assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1;\n+//      assert(const true, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1;\n //  }\n //  bb1: {\n //      _1 = _2[_3];"}, {"sha": "fe98cf24eec009ecc6416033e5b7a38e787a6dae", "filename": "src/test/mir-opt/const_prop/checked_add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e99c76089ecb69479532e22ae2879e3bb1b3d68/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e99c76089ecb69479532e22ae2879e3bb1b3d68/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.rs?ref=8e99c76089ecb69479532e22ae2879e3bb1b3d68", "patch": "@@ -16,6 +16,6 @@ fn main() {\n //  bb0: {\n //      ...\n //      _2 = (const 2u32, const false);\n-//      assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1;\n+//      assert(!const false, \"attempt to add with overflow\") -> bb1;\n //  }\n // END rustc.main.ConstProp.after.mir"}]}