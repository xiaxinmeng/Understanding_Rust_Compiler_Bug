{"sha": "494cb47852ef7bb2cc14f1f440d77722bf0f759b", "node_id": "C_kwDOAAsO6NoAKDQ5NGNiNDc4NTJlZjdiYjJjYzE0ZjFmNDQwZDc3NzIyYmYwZjc1OWI", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-10-02T04:42:21Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-10-27T17:16:15Z"}, "message": "build-manifest: Add a macro that makes it impossible to typo `-preview`, or have a mismatch between parsing and stringifying", "tree": {"sha": "c380f8efb79b5968f42e460275b091167ba90aca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c380f8efb79b5968f42e460275b091167ba90aca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/494cb47852ef7bb2cc14f1f440d77722bf0f759b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/494cb47852ef7bb2cc14f1f440d77722bf0f759b", "html_url": "https://github.com/rust-lang/rust/commit/494cb47852ef7bb2cc14f1f440d77722bf0f759b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/494cb47852ef7bb2cc14f1f440d77722bf0f759b/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79e86e3ea067cf531d728fb15652e4fa76f54b63", "url": "https://api.github.com/repos/rust-lang/rust/commits/79e86e3ea067cf531d728fb15652e4fa76f54b63", "html_url": "https://github.com/rust-lang/rust/commit/79e86e3ea067cf531d728fb15652e4fa76f54b63"}], "stats": {"total": 84, "additions": 37, "deletions": 47}, "files": [{"sha": "61e8825753c5d39a84a71c44f7ca6c00e259baea", "filename": "src/tools/build-manifest/src/versions.rs", "status": "modified", "additions": 37, "deletions": 47, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/494cb47852ef7bb2cc14f1f440d77722bf0f759b/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494cb47852ef7bb2cc14f1f440d77722bf0f759b/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs?ref=494cb47852ef7bb2cc14f1f440d77722bf0f759b", "patch": "@@ -8,58 +8,48 @@ use tar::Archive;\n \n const DEFAULT_TARGET: &str = \"x86_64-unknown-linux-gnu\";\n \n-#[derive(Debug, Hash, Eq, PartialEq, Clone)]\n-pub(crate) enum PkgType {\n-    Rust,\n-    RustSrc,\n-    Rustc,\n-    Cargo,\n-    Rls,\n-    RustAnalyzer,\n-    Clippy,\n-    Rustfmt,\n-    LlvmTools,\n-    Miri,\n-    JsonDocs,\n-    Other(String),\n-}\n-\n-impl PkgType {\n-    pub(crate) fn from_component(component: &str) -> Self {\n-        match component {\n-            \"rust\" => PkgType::Rust,\n-            \"rust-src\" => PkgType::RustSrc,\n-            \"rustc\" => PkgType::Rustc,\n-            \"cargo\" => PkgType::Cargo,\n-            \"rls\" | \"rls-preview\" => PkgType::Rls,\n-            \"rust-analyzer\" | \"rust-analyzer-preview\" => PkgType::RustAnalyzer,\n-            \"clippy\" | \"clippy-preview\" => PkgType::Clippy,\n-            \"rustfmt\" | \"rustfmt-preview\" => PkgType::Rustfmt,\n-            \"llvm-tools\" | \"llvm-tools-preview\" => PkgType::LlvmTools,\n-            \"miri\" | \"miri-preview\" => PkgType::Miri,\n-            \"rust-docs-json\" | \"rust-docs-json-preview\" => PkgType::JsonDocs,\n-            other => PkgType::Other(other.into()),\n+macro_rules! pkg_type {\n+    ( $($variant:ident = $component:literal $(; preview = true $(@$is_preview:tt)? )? ),+ $(,)? ) => {\n+        #[derive(Debug, Hash, Eq, PartialEq, Clone)]\n+        pub(crate) enum PkgType {\n+            $($variant,)+\n+            Other(String),\n         }\n-    }\n \n-    /// First part of the tarball name.\n-    fn tarball_component_name(&self) -> &str {\n-        match self {\n-            PkgType::Rust => \"rust\",\n-            PkgType::RustSrc => \"rust-src\",\n-            PkgType::Rustc => \"rustc\",\n-            PkgType::Cargo => \"cargo\",\n-            PkgType::Rls => \"rls\",\n-            PkgType::RustAnalyzer => \"rust-analyzer\",\n-            PkgType::Clippy => \"clippy\",\n-            PkgType::Rustfmt => \"rustfmt\",\n-            PkgType::LlvmTools => \"llvm-tools\",\n-            PkgType::Miri => \"miri\",\n-            PkgType::JsonDocs => \"rust-docs-json\",\n-            PkgType::Other(component) => component,\n+        impl PkgType {\n+            pub(crate) fn from_component(component: &str) -> Self {\n+                match component {\n+                    $( $component  $( | concat!($($is_preview)? $component, \"-preview\") )? => PkgType::$variant,)+\n+                    _ => PkgType::Other(component.into()),\n+                }\n+            }\n+\n+            /// First part of the tarball name.\n+            fn tarball_component_name(&self) -> &str {\n+                match self {\n+                    $( PkgType::$variant => $component,)+\n+                    PkgType::Other(component) => component,\n+                }\n+            }\n         }\n     }\n+}\n \n+pkg_type! {\n+    Rust = \"rust\",\n+    RustSrc = \"rust-src\",\n+    Rustc = \"rustc\",\n+    Cargo = \"cargo\",\n+    Rls = \"rls\"; preview = true,\n+    RustAnalyzer = \"rust-analyzer\"; preview = true,\n+    Clippy = \"clippy\"; preview = true,\n+    Rustfmt = \"rustfmt\"; preview = true,\n+    LlvmTools = \"llvm-tools\"; preview = true,\n+    Miri = \"miri\"; preview = true,\n+    JsonDocs = \"rust-docs-json\"; preview = true,\n+}\n+\n+impl PkgType {\n     /// Whether this package has the same version as Rust itself, or has its own `version` and\n     /// `git-commit-hash` files inside the tarball.\n     fn should_use_rust_version(&self) -> bool {"}]}