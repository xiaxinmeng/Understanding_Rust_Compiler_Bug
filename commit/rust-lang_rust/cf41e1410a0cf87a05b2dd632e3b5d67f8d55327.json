{"sha": "cf41e1410a0cf87a05b2dd632e3b5d67f8d55327", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNDFlMTQxMGEwY2Y4N2EwNWIyZGQ2MzJlM2I1ZDY3ZjhkNTUzMjc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-07T01:35:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-07T01:35:00Z"}, "message": "Merge #8390\n\n8390: Support trait impls in unnamed consts r=jonas-schievink a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/7550\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "be2ec91cdd13c8125e560bb414a37866ae573642", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be2ec91cdd13c8125e560bb414a37866ae573642"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf41e1410a0cf87a05b2dd632e3b5d67f8d55327", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgbQxECRBK7hj4Ov3rIwAAdHIIAJUnuMiXIJ7a4rc1z4wTY9HN\nfFX940FhTBMSIpD8gWYpcWALrTjgEXhNE3ZxVU60vyXJtScEIRvyIzXCz6WNQtUp\n9i4aCIznpIya9Sb+qgc/AgSDa/HW8WWmcIJNOFytl3HzZVKDR7gO4HGdNy9BA6Uo\n02My4Els0lmdgr2Hqy/njjtMC1/UekBhJdPUeOapjOsuL23JoQLg+dPTBYuabTbs\nAcYwI8+5+6iDN8A8sCZRFIKw8BK2KdJO3P/mAPgmbtHGWQqzpBpVGDJkNcb/cjks\nM78M/NwEMoRelcr+7VZAM6ZnseF5zHzhP5uy1SVpcUYXuatSMD3+Nm6Oai/jcf0=\n=Fiuh\n-----END PGP SIGNATURE-----\n", "payload": "tree be2ec91cdd13c8125e560bb414a37866ae573642\nparent 3e7ac2b830f692fd993a9b30b6be96a4206b8229\nparent 7c1c0e6feadc017f5919f789f974405635fc25e3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617759300 +0000\ncommitter GitHub <noreply@github.com> 1617759300 +0000\n\nMerge #8390\n\n8390: Support trait impls in unnamed consts r=jonas-schievink a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/7550\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf41e1410a0cf87a05b2dd632e3b5d67f8d55327", "html_url": "https://github.com/rust-lang/rust/commit/cf41e1410a0cf87a05b2dd632e3b5d67f8d55327", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf41e1410a0cf87a05b2dd632e3b5d67f8d55327/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e7ac2b830f692fd993a9b30b6be96a4206b8229", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7ac2b830f692fd993a9b30b6be96a4206b8229", "html_url": "https://github.com/rust-lang/rust/commit/3e7ac2b830f692fd993a9b30b6be96a4206b8229"}, {"sha": "7c1c0e6feadc017f5919f789f974405635fc25e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c1c0e6feadc017f5919f789f974405635fc25e3", "html_url": "https://github.com/rust-lang/rust/commit/7c1c0e6feadc017f5919f789f974405635fc25e3"}], "stats": {"total": 123, "additions": 90, "deletions": 33}, "files": [{"sha": "9014468ea04f11fe5d4a261584f8da194d90c2bb", "filename": "crates/hir_def/src/item_scope.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cf41e1410a0cf87a05b2dd632e3b5d67f8d55327/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf41e1410a0cf87a05b2dd632e3b5d67f8d55327/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs?ref=cf41e1410a0cf87a05b2dd632e3b5d67f8d55327", "patch": "@@ -11,7 +11,7 @@ use rustc_hash::{FxHashMap, FxHashSet};\n use stdx::format_to;\n \n use crate::{\n-    db::DefDatabase, per_ns::PerNs, visibility::Visibility, AdtId, BuiltinType, ImplId,\n+    db::DefDatabase, per_ns::PerNs, visibility::Visibility, AdtId, BuiltinType, ConstId, ImplId,\n     LocalModuleId, MacroDefId, ModuleDefId, ModuleId, TraitId,\n };\n \n@@ -37,6 +37,7 @@ pub struct ItemScope {\n \n     defs: Vec<ModuleDefId>,\n     impls: Vec<ImplId>,\n+    unnamed_consts: Vec<ConstId>,\n     /// Traits imported via `use Trait as _;`.\n     unnamed_trait_imports: FxHashMap<TraitId, Visibility>,\n     /// Macros visible in current module in legacy textual scope\n@@ -106,6 +107,10 @@ impl ItemScope {\n             .map(|(_, v)| v)\n     }\n \n+    pub fn unnamed_consts(&self) -> impl Iterator<Item = ConstId> + '_ {\n+        self.unnamed_consts.iter().copied()\n+    }\n+\n     /// Iterate over all module scoped macros\n     pub(crate) fn macros<'a>(&'a self) -> impl Iterator<Item = (&'a Name, MacroDefId)> + 'a {\n         self.entries().filter_map(|(name, def)| def.take_macros().map(|macro_| (name, macro_)))\n@@ -156,6 +161,10 @@ impl ItemScope {\n         self.impls.push(imp)\n     }\n \n+    pub(crate) fn define_unnamed_const(&mut self, konst: ConstId) {\n+        self.unnamed_consts.push(konst);\n+    }\n+\n     pub(crate) fn define_legacy_macro(&mut self, name: Name, mac: MacroDefId) {\n         self.legacy_macros.insert(name, mac);\n     }\n@@ -295,6 +304,7 @@ impl ItemScope {\n             unresolved,\n             defs,\n             impls,\n+            unnamed_consts,\n             unnamed_trait_imports,\n             legacy_macros,\n         } = self;\n@@ -304,6 +314,7 @@ impl ItemScope {\n         unresolved.shrink_to_fit();\n         defs.shrink_to_fit();\n         impls.shrink_to_fit();\n+        unnamed_consts.shrink_to_fit();\n         unnamed_trait_imports.shrink_to_fit();\n         legacy_macros.shrink_to_fit();\n     }"}, {"sha": "492d8c71ff83cd8970ac23aec3b8deec345ae566", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cf41e1410a0cf87a05b2dd632e3b5d67f8d55327/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf41e1410a0cf87a05b2dd632e3b5d67f8d55327/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=cf41e1410a0cf87a05b2dd632e3b5d67f8d55327", "patch": "@@ -1163,19 +1163,27 @@ impl ModCollector<'_, '_> {\n                 }\n                 ModItem::Const(id) => {\n                     let it = &self.item_tree[id];\n-\n-                    if let Some(name) = &it.name {\n-                        def = Some(DefData {\n-                            id: ConstLoc {\n-                                container: module.into(),\n-                                id: ItemTreeId::new(self.file_id, id),\n-                            }\n-                            .intern(self.def_collector.db)\n-                            .into(),\n-                            name,\n-                            visibility: &self.item_tree[it.visibility],\n-                            has_constructor: false,\n-                        });\n+                    let const_id = ConstLoc {\n+                        container: module.into(),\n+                        id: ItemTreeId::new(self.file_id, id),\n+                    }\n+                    .intern(self.def_collector.db);\n+\n+                    match &it.name {\n+                        Some(name) => {\n+                            def = Some(DefData {\n+                                id: const_id.into(),\n+                                name,\n+                                visibility: &self.item_tree[it.visibility],\n+                                has_constructor: false,\n+                            });\n+                        }\n+                        None => {\n+                            // const _: T = ...;\n+                            self.def_collector.def_map.modules[self.module_id]\n+                                .scope\n+                                .define_unnamed_const(const_id);\n+                        }\n                     }\n                 }\n                 ModItem::Static(id) => {"}, {"sha": "f29319f2065a3bbb8d17d95cbf41155d1a9fa2d6", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/cf41e1410a0cf87a05b2dd632e3b5d67f8d55327/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf41e1410a0cf87a05b2dd632e3b5d67f8d55327/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=cf41e1410a0cf87a05b2dd632e3b5d67f8d55327", "patch": "@@ -8,8 +8,8 @@ use arrayvec::ArrayVec;\n use base_db::CrateId;\n use chalk_ir::{cast::Cast, Mutability, UniverseIndex};\n use hir_def::{\n-    lang_item::LangItemTarget, AssocContainerId, AssocItemId, FunctionId, GenericDefId, HasModule,\n-    ImplId, Lookup, ModuleId, TraitId,\n+    lang_item::LangItemTarget, nameres::DefMap, AssocContainerId, AssocItemId, FunctionId,\n+    GenericDefId, HasModule, ImplId, Lookup, ModuleId, TraitId,\n };\n use hir_expand::name::Name;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -100,25 +100,38 @@ impl TraitImpls {\n         let mut impls = Self { map: FxHashMap::default() };\n \n         let crate_def_map = db.crate_def_map(krate);\n-        for (_module_id, module_data) in crate_def_map.modules() {\n-            for impl_id in module_data.scope.impls() {\n-                let target_trait = match db.impl_trait(impl_id) {\n-                    Some(tr) => tr.skip_binders().hir_trait_id(),\n-                    None => continue,\n-                };\n-                let self_ty = db.impl_self_ty(impl_id);\n-                let self_ty_fp = TyFingerprint::for_impl(self_ty.skip_binders());\n-                impls\n-                    .map\n-                    .entry(target_trait)\n-                    .or_default()\n-                    .entry(self_ty_fp)\n-                    .or_default()\n-                    .push(impl_id);\n+        collect_def_map(db, &crate_def_map, &mut impls);\n+\n+        return Arc::new(impls);\n+\n+        fn collect_def_map(db: &dyn HirDatabase, def_map: &DefMap, impls: &mut TraitImpls) {\n+            for (_module_id, module_data) in def_map.modules() {\n+                for impl_id in module_data.scope.impls() {\n+                    let target_trait = match db.impl_trait(impl_id) {\n+                        Some(tr) => tr.skip_binders().hir_trait_id(),\n+                        None => continue,\n+                    };\n+                    let self_ty = db.impl_self_ty(impl_id);\n+                    let self_ty_fp = TyFingerprint::for_impl(self_ty.skip_binders());\n+                    impls\n+                        .map\n+                        .entry(target_trait)\n+                        .or_default()\n+                        .entry(self_ty_fp)\n+                        .or_default()\n+                        .push(impl_id);\n+                }\n+\n+                // To better support custom derives, collect impls in all unnamed const items.\n+                // const _: () = { ... };\n+                for konst in module_data.scope.unnamed_consts() {\n+                    let body = db.body(konst.into());\n+                    for (_, block_def_map) in body.blocks(db.upcast()) {\n+                        collect_def_map(db, &block_def_map, impls);\n+                    }\n+                }\n             }\n         }\n-\n-        Arc::new(impls)\n     }\n \n     pub(crate) fn trait_impls_in_deps_query(db: &dyn HirDatabase, krate: CrateId) -> Arc<Self> {\n@@ -208,6 +221,9 @@ impl InherentImpls {\n             }\n         }\n \n+        // NOTE: We're not collecting inherent impls from unnamed consts here, we intentionally only\n+        // support trait impls there.\n+\n         Arc::new(Self { map })\n     }\n "}, {"sha": "4b2c82b417fe177ecaf5dc56f0469f63e4bdde51", "filename": "crates/hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cf41e1410a0cf87a05b2dd632e3b5d67f8d55327/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf41e1410a0cf87a05b2dd632e3b5d67f8d55327/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=cf41e1410a0cf87a05b2dd632e3b5d67f8d55327", "patch": "@@ -1292,3 +1292,25 @@ mod b {\n         \"#]],\n     )\n }\n+\n+#[test]\n+fn impl_in_unnamed_const() {\n+    check_types(\n+        r#\"\n+struct S;\n+\n+trait Tr {\n+    fn method(&self) -> u16;\n+}\n+\n+const _: () = {\n+    impl Tr for S {}\n+};\n+\n+fn f() {\n+    S.method();\n+  //^^^^^^^^^^ u16\n+}\n+    \"#,\n+    );\n+}"}]}