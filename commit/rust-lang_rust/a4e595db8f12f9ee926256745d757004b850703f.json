{"sha": "a4e595db8f12f9ee926256745d757004b850703f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZTU5NWRiOGYxMmY5ZWU5MjYyNTY3NDVkNzU3MDA0Yjg1MDcwM2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-23T04:31:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-23T04:31:32Z"}, "message": "Auto merge of #82430 - Dylan-DPC:rollup-nu4kfyc, r=Dylan-DPC\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #79423 (Enable smart punctuation)\n - #81154 (Improve design of `assert_len`)\n - #81235 (Improve suggestion for tuple struct pattern matching errors.)\n - #81769 (Suggest `return`ing tail expressions that match return type)\n - #81837 (Slight perf improvement on char::to_ascii_lowercase)\n - #81969 (Avoid `cfg_if` in `std::os`)\n - #81984 (Make WASI's `hard_link` behavior match other platforms.)\n - #82091 (use PlaceRef abstractions more consistently)\n - #82128 (add diagnostic items for OsString/PathBuf/Owned as well as to_vec on slice)\n - #82166 (add s390x-unknown-linux-musl target)\n - #82234 (Remove query parameters when skipping search results)\n - #82255 (Make `treat_err_as_bug` Option<NonZeroUsize>)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "096ccc49c1eeffd08fbd6b9465d201cee9391bac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/096ccc49c1eeffd08fbd6b9465d201cee9391bac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4e595db8f12f9ee926256745d757004b850703f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4e595db8f12f9ee926256745d757004b850703f", "html_url": "https://github.com/rust-lang/rust/commit/a4e595db8f12f9ee926256745d757004b850703f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4e595db8f12f9ee926256745d757004b850703f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b02a6193b370ff7c3cb46d713afd990f134e547e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b02a6193b370ff7c3cb46d713afd990f134e547e", "html_url": "https://github.com/rust-lang/rust/commit/b02a6193b370ff7c3cb46d713afd990f134e547e"}, {"sha": "0e5bca5f518fe579c4ddd0942b025b7facef6f4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e5bca5f518fe579c4ddd0942b025b7facef6f4b", "html_url": "https://github.com/rust-lang/rust/commit/0e5bca5f518fe579c4ddd0942b025b7facef6f4b"}], "stats": {"total": 948, "additions": 680, "deletions": 268}, "files": [{"sha": "289629d921545b87bd0167257e0ae8b66d14ee58", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -199,7 +199,7 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n             }\n \n             self.visit_local(&place_ref.local, context, location);\n-            self.visit_projection(place_ref.local, place_ref.projection, context, location);\n+            self.visit_projection(*place_ref, context, location);\n         }\n     }\n }"}, {"sha": "a0be7442d597a6b136782f346aa449764b8882c3", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -30,6 +30,7 @@ use rustc_span::{Loc, MultiSpan, Span};\n \n use std::borrow::Cow;\n use std::hash::{Hash, Hasher};\n+use std::num::NonZeroUsize;\n use std::panic;\n use std::path::Path;\n use std::{error, fmt};\n@@ -359,7 +360,7 @@ pub struct HandlerFlags {\n     pub can_emit_warnings: bool,\n     /// If true, error-level diagnostics are upgraded to bug-level.\n     /// (rustc: see `-Z treat-err-as-bug`)\n-    pub treat_err_as_bug: Option<usize>,\n+    pub treat_err_as_bug: Option<NonZeroUsize>,\n     /// If true, immediately emit diagnostics that would otherwise be buffered.\n     /// (rustc: see `-Z dont-buffer-diagnostics` and `-Z treat-err-as-bug`)\n     pub dont_buffer_diagnostics: bool,\n@@ -396,7 +397,7 @@ impl Handler {\n     pub fn with_tty_emitter(\n         color_config: ColorConfig,\n         can_emit_warnings: bool,\n-        treat_err_as_bug: Option<usize>,\n+        treat_err_as_bug: Option<NonZeroUsize>,\n         sm: Option<Lrc<SourceMap>>,\n     ) -> Self {\n         Self::with_tty_emitter_and_flags(\n@@ -424,7 +425,7 @@ impl Handler {\n \n     pub fn with_emitter(\n         can_emit_warnings: bool,\n-        treat_err_as_bug: Option<usize>,\n+        treat_err_as_bug: Option<NonZeroUsize>,\n         emitter: Box<dyn Emitter + sync::Send>,\n     ) -> Self {\n         Handler::with_emitter_and_flags(\n@@ -841,7 +842,7 @@ impl HandlerInner {\n     }\n \n     fn treat_err_as_bug(&self) -> bool {\n-        self.flags.treat_err_as_bug.map_or(false, |c| self.err_count() >= c)\n+        self.flags.treat_err_as_bug.map_or(false, |c| self.err_count() >= c.get())\n     }\n \n     fn print_error_count(&mut self, registry: &Registry) {\n@@ -950,7 +951,7 @@ impl HandlerInner {\n         // This is technically `self.treat_err_as_bug()` but `delay_span_bug` is called before\n         // incrementing `err_count` by one, so we need to +1 the comparing.\n         // FIXME: Would be nice to increment err_count in a more coherent way.\n-        if self.flags.treat_err_as_bug.map_or(false, |c| self.err_count() + 1 >= c) {\n+        if self.flags.treat_err_as_bug.map_or(false, |c| self.err_count() + 1 >= c.get()) {\n             // FIXME: don't abort here if report_delayed_bugs is off\n             self.span_bug(sp, msg);\n         }\n@@ -1023,7 +1024,7 @@ impl HandlerInner {\n \n     fn panic_if_treat_err_as_bug(&self) {\n         if self.treat_err_as_bug() {\n-            match (self.err_count(), self.flags.treat_err_as_bug.unwrap_or(0)) {\n+            match (self.err_count(), self.flags.treat_err_as_bug.map(|c| c.get()).unwrap_or(0)) {\n                 (1, 1) => panic!(\"aborting due to `-Z treat-err-as-bug=1`\"),\n                 (0, _) | (1, _) => {}\n                 (count, as_bug) => panic!("}, {"sha": "2fef7c2cc087d4097e1d388ace6a2db18dec53f0", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -1,5 +1,5 @@\n // ignore-tidy-filelength\n-use crate::def::{DefKind, Namespace, Res};\n+use crate::def::{CtorKind, DefKind, Namespace, Res};\n use crate::def_id::DefId;\n crate use crate::hir_id::HirId;\n use crate::{itemlikevisit, LangItem};\n@@ -1576,6 +1576,63 @@ impl Expr<'_> {\n         }\n         expr\n     }\n+\n+    pub fn can_have_side_effects(&self) -> bool {\n+        match self.peel_drop_temps().kind {\n+            ExprKind::Path(_) | ExprKind::Lit(_) => false,\n+            ExprKind::Type(base, _)\n+            | ExprKind::Unary(_, base)\n+            | ExprKind::Field(base, _)\n+            | ExprKind::Index(base, _)\n+            | ExprKind::AddrOf(.., base)\n+            | ExprKind::Cast(base, _) => {\n+                // This isn't exactly true for `Index` and all `Unnary`, but we are using this\n+                // method exclusively for diagnostics and there's a *cultural* pressure against\n+                // them being used only for its side-effects.\n+                base.can_have_side_effects()\n+            }\n+            ExprKind::Struct(_, fields, init) => fields\n+                .iter()\n+                .map(|field| field.expr)\n+                .chain(init.into_iter())\n+                .all(|e| e.can_have_side_effects()),\n+\n+            ExprKind::Array(args)\n+            | ExprKind::Tup(args)\n+            | ExprKind::Call(\n+                Expr {\n+                    kind:\n+                        ExprKind::Path(QPath::Resolved(\n+                            None,\n+                            Path { res: Res::Def(DefKind::Ctor(_, CtorKind::Fn), _), .. },\n+                        )),\n+                    ..\n+                },\n+                args,\n+            ) => args.iter().all(|arg| arg.can_have_side_effects()),\n+            ExprKind::If(..)\n+            | ExprKind::Match(..)\n+            | ExprKind::MethodCall(..)\n+            | ExprKind::Call(..)\n+            | ExprKind::Closure(..)\n+            | ExprKind::Block(..)\n+            | ExprKind::Repeat(..)\n+            | ExprKind::Break(..)\n+            | ExprKind::Continue(..)\n+            | ExprKind::Ret(..)\n+            | ExprKind::Loop(..)\n+            | ExprKind::Assign(..)\n+            | ExprKind::InlineAsm(..)\n+            | ExprKind::LlvmInlineAsm(..)\n+            | ExprKind::AssignOp(..)\n+            | ExprKind::ConstBlock(..)\n+            | ExprKind::Box(..)\n+            | ExprKind::Binary(..)\n+            | ExprKind::Yield(..)\n+            | ExprKind::DropTemps(..)\n+            | ExprKind::Err => true,\n+        }\n+    }\n }\n \n /// Checks if the specified expression is a built-in range literal."}, {"sha": "a2e961465681a812d3606d69bbbf386c5053bf72", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -20,6 +20,7 @@ use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy}\n use rustc_target::spec::{RelocModel, RelroLevel, SplitDebuginfo, TlsModel};\n use std::collections::{BTreeMap, BTreeSet};\n use std::iter::FromIterator;\n+use std::num::NonZeroUsize;\n use std::path::{Path, PathBuf};\n \n type CfgSpecs = FxHashSet<(String, Option<String>)>;\n@@ -595,7 +596,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(tune_cpu, Some(String::from(\"abc\")));\n     tracked!(tls_model, Some(TlsModel::GeneralDynamic));\n     tracked!(trap_unreachable, Some(false));\n-    tracked!(treat_err_as_bug, Some(1));\n+    tracked!(treat_err_as_bug, NonZeroUsize::new(1));\n     tracked!(unleash_the_miri_inside_of_you, true);\n     tracked!(use_ctors_section, Some(true));\n     tracked!(verify_llvm_ir, true);"}, {"sha": "9530efaedbce44e2b5a1ce2aeec6f8cc00871ddc", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -998,12 +998,11 @@ macro_rules! visit_place_fns {\n     () => {\n         fn visit_projection(\n             &mut self,\n-            local: Local,\n-            projection: &[PlaceElem<'tcx>],\n+            place_ref: PlaceRef<'tcx>,\n             context: PlaceContext,\n             location: Location,\n         ) {\n-            self.super_projection(local, projection, context, location);\n+            self.super_projection(place_ref, context, location);\n         }\n \n         fn visit_projection_elem(\n@@ -1033,20 +1032,20 @@ macro_rules! visit_place_fns {\n \n             self.visit_local(&place.local, context, location);\n \n-            self.visit_projection(place.local, &place.projection, context, location);\n+            self.visit_projection(place.as_ref(), context, location);\n         }\n \n         fn super_projection(\n             &mut self,\n-            local: Local,\n-            projection: &[PlaceElem<'tcx>],\n+            place_ref: PlaceRef<'tcx>,\n             context: PlaceContext,\n             location: Location,\n         ) {\n-            let mut cursor = projection;\n+            // FIXME: Use PlaceRef::iter_projections, once that exists.\n+            let mut cursor = place_ref.projection;\n             while let &[ref proj_base @ .., elem] = cursor {\n                 cursor = proj_base;\n-                self.visit_projection_elem(local, cursor, elem, context, location);\n+                self.visit_projection_elem(place_ref.local, cursor, elem, context, location);\n             }\n         }\n "}, {"sha": "2d20f0d9547c1b75586deb3f8e017d5de1120815", "filename": "compiler/rustc_mir/src/dataflow/impls/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fliveness.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -95,7 +95,7 @@ where\n \n         // We purposefully do not call `super_place` here to avoid calling `visit_local` for this\n         // place with one of the `Projection` variants of `PlaceContext`.\n-        self.visit_projection(local, projection, context, location);\n+        self.visit_projection(place.as_ref(), context, location);\n \n         match DefUse::for_place(context) {\n             // Treat derefs as a use of the base local. `*p = 4` is not a def of `p` but a use."}, {"sha": "a82636837122fa298fbb5e21678633cd1e59a31f", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -515,7 +515,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n         // Special-case reborrows to be more like a copy of a reference.\n         match *rvalue {\n             Rvalue::Ref(_, kind, place) => {\n-                if let Some(reborrowed_proj) = place_as_reborrow(self.tcx, self.body, place) {\n+                if let Some(reborrowed_place_ref) = place_as_reborrow(self.tcx, self.body, place) {\n                     let ctx = match kind {\n                         BorrowKind::Shared => {\n                             PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow)\n@@ -530,21 +530,21 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                             PlaceContext::MutatingUse(MutatingUseContext::Borrow)\n                         }\n                     };\n-                    self.visit_local(&place.local, ctx, location);\n-                    self.visit_projection(place.local, reborrowed_proj, ctx, location);\n+                    self.visit_local(&reborrowed_place_ref.local, ctx, location);\n+                    self.visit_projection(reborrowed_place_ref, ctx, location);\n                     return;\n                 }\n             }\n             Rvalue::AddressOf(mutbl, place) => {\n-                if let Some(reborrowed_proj) = place_as_reborrow(self.tcx, self.body, place) {\n+                if let Some(reborrowed_place_ref) = place_as_reborrow(self.tcx, self.body, place) {\n                     let ctx = match mutbl {\n                         Mutability::Not => {\n                             PlaceContext::NonMutatingUse(NonMutatingUseContext::AddressOf)\n                         }\n                         Mutability::Mut => PlaceContext::MutatingUse(MutatingUseContext::AddressOf),\n                     };\n-                    self.visit_local(&place.local, ctx, location);\n-                    self.visit_projection(place.local, reborrowed_proj, ctx, location);\n+                    self.visit_local(&reborrowed_place_ref.local, ctx, location);\n+                    self.visit_projection(reborrowed_place_ref, ctx, location);\n                     return;\n                 }\n             }\n@@ -1039,7 +1039,7 @@ fn place_as_reborrow(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     place: Place<'tcx>,\n-) -> Option<&'a [PlaceElem<'tcx>]> {\n+) -> Option<PlaceRef<'tcx>> {\n     match place.as_ref().last_projection() {\n         Some((place_base, ProjectionElem::Deref)) => {\n             // A borrow of a `static` also looks like `&(*_1)` in the MIR, but `_1` is a `const`\n@@ -1048,13 +1048,14 @@ fn place_as_reborrow(\n                 None\n             } else {\n                 // Ensure the type being derefed is a reference and not a raw pointer.\n-                //\n                 // This is sufficient to prevent an access to a `static mut` from being marked as a\n                 // reborrow, even if the check above were to disappear.\n                 let inner_ty = place_base.ty(body, tcx).ty;\n-                match inner_ty.kind() {\n-                    ty::Ref(..) => Some(place_base.projection),\n-                    _ => None,\n+\n+                if let ty::Ref(..) = inner_ty.kind() {\n+                    return Some(place_base);\n+                } else {\n+                    return None;\n                 }\n             }\n         }"}, {"sha": "ae4f15b3bbc4d10efc906c37cda28fbbfb76fc54", "filename": "compiler/rustc_mir/src/transform/simplify.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -413,8 +413,7 @@ impl UsedLocals {\n         } else {\n             // A definition. Although, it still might use other locals for indexing.\n             self.super_projection(\n-                place.local,\n-                &place.projection,\n+                place.as_ref(),\n                 PlaceContext::MutatingUse(MutatingUseContext::Projection),\n                 location,\n             );"}, {"sha": "8a097bf481dc21cf09d7d4cfe8f729adbb715a2e", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -950,7 +950,7 @@ impl<'a> Parser<'a> {\n             self.bump();\n             Ok(Ident::new(symbol, self.prev_token.span))\n         } else {\n-            self.parse_ident_common(false)\n+            self.parse_ident_common(true)\n         }\n     }\n "}, {"sha": "9e2e7359ca96e8a3e14813ea16990ff53c266668", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -1028,7 +1028,7 @@ impl<'a> Parser<'a> {\n             let boxed_span = self.token.span;\n             let is_ref = self.eat_keyword(kw::Ref);\n             let is_mut = self.eat_keyword(kw::Mut);\n-            let fieldname = self.parse_ident()?;\n+            let fieldname = self.parse_field_name()?;\n             hi = self.prev_token.span;\n \n             let bind_type = match (is_ref, is_mut) {"}, {"sha": "e4f7e140281cd845a594c74b5c0a7b2f06873b44", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -2313,6 +2313,7 @@ crate mod dep_tracking {\n     use std::collections::hash_map::DefaultHasher;\n     use std::collections::BTreeMap;\n     use std::hash::Hash;\n+    use std::num::NonZeroUsize;\n     use std::path::PathBuf;\n \n     pub trait DepTrackingHash {\n@@ -2353,6 +2354,7 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(lint::Level);\n     impl_dep_tracking_hash_via_hash!(Option<bool>);\n     impl_dep_tracking_hash_via_hash!(Option<usize>);\n+    impl_dep_tracking_hash_via_hash!(Option<NonZeroUsize>);\n     impl_dep_tracking_hash_via_hash!(Option<String>);\n     impl_dep_tracking_hash_via_hash!(Option<(String, u64)>);\n     impl_dep_tracking_hash_via_hash!(Option<Vec<String>>);"}, {"sha": "d439753d042bbc9d875a2b43faee49b673625269", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -16,6 +16,7 @@ use std::collections::BTreeMap;\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::Hasher;\n+use std::num::NonZeroUsize;\n use std::path::PathBuf;\n use std::str;\n \n@@ -591,10 +592,10 @@ macro_rules! options {\n             true\n         }\n \n-        fn parse_treat_err_as_bug(slot: &mut Option<usize>, v: Option<&str>) -> bool {\n+        fn parse_treat_err_as_bug(slot: &mut Option<NonZeroUsize>, v: Option<&str>) -> bool {\n             match v {\n-                Some(s) => { *slot = s.parse().ok().filter(|&x| x != 0); slot.unwrap_or(0) != 0 }\n-                None => { *slot = Some(1); true }\n+                Some(s) => { *slot = s.parse().ok(); slot.is_some() }\n+                None => { *slot = NonZeroUsize::new(1); true }\n             }\n         }\n \n@@ -1141,7 +1142,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"for every macro invocation, print its name and arguments (default: no)\"),\n     trap_unreachable: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"generate trap instructions for unreachable intrinsics (default: use target setting, usually yes)\"),\n-    treat_err_as_bug: Option<usize> = (None, parse_treat_err_as_bug, [TRACKED],\n+    treat_err_as_bug: Option<NonZeroUsize> = (None, parse_treat_err_as_bug, [TRACKED],\n         \"treat error number `val` that occurs as bug\"),\n     trim_diagnostic_paths: bool = (true, parse_bool, [UNTRACKED],\n         \"in diagnostics, use heuristics to shorten paths referring to items\"),"}, {"sha": "4ed0262bf2cfe465bcc5d0c3b5e81862a0516012", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -169,10 +169,14 @@ symbols! {\n         Option,\n         Ord,\n         Ordering,\n+        OsStr,\n+        OsString,\n         Output,\n         Param,\n         PartialEq,\n         PartialOrd,\n+        Path,\n+        PathBuf,\n         Pending,\n         Pin,\n         Poll,\n@@ -198,6 +202,8 @@ symbols! {\n         StructuralPartialEq,\n         Sync,\n         Target,\n+        ToOwned,\n+        ToString,\n         Try,\n         Ty,\n         TyCtxt,"}, {"sha": "6cf1112820de1db7bf03c5fb07e3021d8ee68d05", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -641,6 +641,7 @@ supported_targets! {\n     (\"powerpc64le-unknown-linux-gnu\", powerpc64le_unknown_linux_gnu),\n     (\"powerpc64le-unknown-linux-musl\", powerpc64le_unknown_linux_musl),\n     (\"s390x-unknown-linux-gnu\", s390x_unknown_linux_gnu),\n+    (\"s390x-unknown-linux-musl\", s390x_unknown_linux_musl),\n     (\"sparc-unknown-linux-gnu\", sparc_unknown_linux_gnu),\n     (\"sparc64-unknown-linux-gnu\", sparc64_unknown_linux_gnu),\n     (\"arm-unknown-linux-gnueabi\", arm_unknown_linux_gnueabi),"}, {"sha": "4f811ce98c181d4618a7436a4e23c680667b42f7", "filename": "compiler/rustc_target/src/spec/s390x_unknown_linux_musl.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_musl.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -0,0 +1,24 @@\n+use crate::abi::Endian;\n+use crate::spec::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::linux_musl_base::opts();\n+    base.endian = Endian::Big;\n+    // z10 is the oldest CPU supported by LLVM\n+    base.cpu = \"z10\".to_string();\n+    // FIXME: The data_layout string below and the ABI implementation in\n+    // cabi_s390x.rs are for now hard-coded to assume the no-vector ABI.\n+    // Pass the -vector feature string to LLVM to respect this assumption.\n+    base.features = \"-vector\".to_string();\n+    base.max_atomic_width = Some(64);\n+    base.min_global_align = Some(16);\n+    base.static_position_independent_executables = true;\n+\n+    Target {\n+        llvm_target: \"s390x-unknown-linux-musl\".to_string(),\n+        pointer_width: 64,\n+        data_layout: \"E-m:e-i1:8:16-i8:8:16-i64:64-f128:64-a:8:16-n32:64\".to_string(),\n+        arch: \"s390x\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "f2fbb95fc021cf5477605163465a4f4a72d4e0d0", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -346,7 +346,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             if call_is_multiline {\n                                 err.span_suggestion(\n                                     callee.span.shrink_to_hi(),\n-                                    \"try adding a semicolon\",\n+                                    \"consider using a semicolon here\",\n                                     \";\".to_owned(),\n                                     Applicability::MaybeIncorrect,\n                                 );"}, {"sha": "159c97d8bfaa917d3a937300a80e0babe6beda42", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -1450,15 +1450,17 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n             ) {\n                 if cond_expr.span.desugaring_kind().is_none() {\n                     err.span_label(cond_expr.span, \"expected this to be `()`\");\n-                    fcx.suggest_semicolon_at_end(cond_expr.span, &mut err);\n+                    if expr.can_have_side_effects() {\n+                        fcx.suggest_semicolon_at_end(cond_expr.span, &mut err);\n+                    }\n                 }\n             }\n             fcx.get_node_fn_decl(parent).map(|(fn_decl, _, is_main)| (fn_decl, is_main))\n         } else {\n             fcx.get_fn_decl(parent_id)\n         };\n \n-        if let (Some((fn_decl, can_suggest)), _) = (fn_decl, pointing_at_return_type) {\n+        if let Some((fn_decl, can_suggest)) = fn_decl {\n             if expression.is_none() {\n                 pointing_at_return_type |= fcx.suggest_missing_return_type(\n                     &mut err,\n@@ -1472,6 +1474,16 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 fn_output = Some(&fn_decl.output); // `impl Trait` return type\n             }\n         }\n+\n+        let parent_id = fcx.tcx.hir().get_parent_item(id);\n+        let parent_item = fcx.tcx.hir().get(parent_id);\n+\n+        if let (Some((expr, _)), Some((fn_decl, _, _))) =\n+            (expression, fcx.get_node_fn_decl(parent_item))\n+        {\n+            fcx.suggest_missing_return_expr(&mut err, expr, fn_decl, expected, found);\n+        }\n+\n         if let (Some(sp), Some(fn_output)) = (fcx.ret_coercion_span.get(), fn_output) {\n             self.add_impl_trait_explanation(&mut err, cause, fcx, expected, sp, fn_output);\n         }"}, {"sha": "155c10e891652f1b9cf75f8f5c401bdce8091e55", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -561,7 +561,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             hir::StmtKind::Expr(ref expr) => {\n                 // Check with expected type of `()`.\n                 self.check_expr_has_type_or_error(&expr, self.tcx.mk_unit(), |err| {\n-                    self.suggest_semicolon_at_end(expr.span, err);\n+                    if expr.can_have_side_effects() {\n+                        self.suggest_semicolon_at_end(expr.span, err);\n+                    }\n                 });\n             }\n             hir::StmtKind::Semi(ref expr) => {"}, {"sha": "416b75d9e2e0c0c51bbfae4c2c1753272c1dcf92", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -44,11 +44,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         blk_id: hir::HirId,\n     ) -> bool {\n         let expr = expr.peel_drop_temps();\n-        self.suggest_missing_semicolon(err, expr, expected, cause_span);\n+        if expr.can_have_side_effects() {\n+            self.suggest_missing_semicolon(err, expr, expected, cause_span);\n+        }\n         let mut pointing_at_return_type = false;\n         if let Some((fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n             pointing_at_return_type =\n                 self.suggest_missing_return_type(err, &fn_decl, expected, found, can_suggest);\n+            self.suggest_missing_return_expr(err, expr, &fn_decl, expected, found);\n         }\n         pointing_at_return_type\n     }\n@@ -392,10 +395,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 | ExprKind::Loop(..)\n                 | ExprKind::If(..)\n                 | ExprKind::Match(..)\n-                | ExprKind::Block(..) => {\n+                | ExprKind::Block(..)\n+                    if expression.can_have_side_effects() =>\n+                {\n                     err.span_suggestion(\n                         cause_span.shrink_to_hi(),\n-                        \"try adding a semicolon\",\n+                        \"consider using a semicolon here\",\n                         \";\".to_string(),\n                         Applicability::MachineApplicable,\n                     );\n@@ -464,6 +469,34 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    pub(in super::super) fn suggest_missing_return_expr(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        expr: &'tcx hir::Expr<'tcx>,\n+        fn_decl: &hir::FnDecl<'_>,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+    ) {\n+        if !expected.is_unit() {\n+            return;\n+        }\n+        let found = self.resolve_vars_with_obligations(found);\n+        if let hir::FnRetTy::Return(ty) = fn_decl.output {\n+            let ty = AstConv::ast_ty_to_ty(self, ty);\n+            let ty = self.normalize_associated_types_in(expr.span, ty);\n+            if self.can_coerce(found, ty) {\n+                err.multipart_suggestion(\n+                    \"you might have meant to return this value\",\n+                    vec![\n+                        (expr.span.shrink_to_lo(), \"return \".to_string()),\n+                        (expr.span.shrink_to_hi(), \";\".to_string()),\n+                    ],\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+        }\n+    }\n+\n     pub(in super::super) fn suggest_missing_parentheses(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,"}, {"sha": "897b1f01569f4a99f1027f543801699fc54cbf88", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 85, "deletions": 15, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -17,6 +17,7 @@ use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::Ident;\n use rustc_span::{BytePos, DUMMY_SP};\n use rustc_trait_selection::traits::{ObligationCause, Pattern};\n+use ty::VariantDef;\n \n use std::cmp;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n@@ -1264,14 +1265,64 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     u.emit();\n                 }\n             }\n-            (None, Some(mut err)) | (Some(mut err), None) => {\n+            (None, Some(mut u)) => {\n+                if let Some(mut e) = self.error_tuple_variant_as_struct_pat(pat, fields, variant) {\n+                    u.delay_as_bug();\n+                    e.emit();\n+                } else {\n+                    u.emit();\n+                }\n+            }\n+            (Some(mut err), None) => {\n                 err.emit();\n             }\n-            (None, None) => {}\n+            (None, None) => {\n+                if let Some(mut err) =\n+                    self.error_tuple_variant_index_shorthand(variant, pat, fields)\n+                {\n+                    err.emit();\n+                }\n+            }\n         }\n         no_field_errors\n     }\n \n+    fn error_tuple_variant_index_shorthand(\n+        &self,\n+        variant: &VariantDef,\n+        pat: &'_ Pat<'_>,\n+        fields: &[hir::FieldPat<'_>],\n+    ) -> Option<DiagnosticBuilder<'_>> {\n+        // if this is a tuple struct, then all field names will be numbers\n+        // so if any fields in a struct pattern use shorthand syntax, they will\n+        // be invalid identifiers (for example, Foo { 0, 1 }).\n+        if let (CtorKind::Fn, PatKind::Struct(qpath, field_patterns, ..)) =\n+            (variant.ctor_kind, &pat.kind)\n+        {\n+            let has_shorthand_field_name = field_patterns.iter().any(|field| field.is_shorthand);\n+            if has_shorthand_field_name {\n+                let path = rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| {\n+                    s.print_qpath(qpath, false)\n+                });\n+                let mut err = struct_span_err!(\n+                    self.tcx.sess,\n+                    pat.span,\n+                    E0769,\n+                    \"tuple variant `{}` written as struct variant\",\n+                    path\n+                );\n+                err.span_suggestion_verbose(\n+                    qpath.span().shrink_to_hi().to(pat.span.shrink_to_hi()),\n+                    \"use the tuple variant pattern syntax instead\",\n+                    format!(\"({})\", self.get_suggested_tuple_struct_pattern(fields, variant)),\n+                    Applicability::MaybeIncorrect,\n+                );\n+                return Some(err);\n+            }\n+        }\n+        None\n+    }\n+\n     fn error_foreign_non_exhaustive_spat(&self, pat: &Pat<'_>, descr: &str, no_fields: bool) {\n         let sess = self.tcx.sess;\n         let sm = sess.source_map();\n@@ -1411,16 +1462,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             );\n             let (sugg, appl) = if fields.len() == variant.fields.len() {\n                 (\n-                    fields\n-                        .iter()\n-                        .map(|f| match self.tcx.sess.source_map().span_to_snippet(f.pat.span) {\n-                            Ok(f) => f,\n-                            Err(_) => rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| {\n-                                s.print_pat(f.pat)\n-                            }),\n-                        })\n-                        .collect::<Vec<String>>()\n-                        .join(\", \"),\n+                    self.get_suggested_tuple_struct_pattern(fields, variant),\n                     Applicability::MachineApplicable,\n                 )\n             } else {\n@@ -1429,17 +1471,45 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     Applicability::MaybeIncorrect,\n                 )\n             };\n-            err.span_suggestion(\n-                pat.span,\n+            err.span_suggestion_verbose(\n+                qpath.span().shrink_to_hi().to(pat.span.shrink_to_hi()),\n                 \"use the tuple variant pattern syntax instead\",\n-                format!(\"{}({})\", path, sugg),\n+                format!(\"({})\", sugg),\n                 appl,\n             );\n             return Some(err);\n         }\n         None\n     }\n \n+    fn get_suggested_tuple_struct_pattern(\n+        &self,\n+        fields: &[hir::FieldPat<'_>],\n+        variant: &VariantDef,\n+    ) -> String {\n+        let variant_field_idents = variant.fields.iter().map(|f| f.ident).collect::<Vec<Ident>>();\n+        fields\n+            .iter()\n+            .map(|field| {\n+                match self.tcx.sess.source_map().span_to_snippet(field.pat.span) {\n+                    Ok(f) => {\n+                        // Field names are numbers, but numbers\n+                        // are not valid identifiers\n+                        if variant_field_idents.contains(&field.ident) {\n+                            String::from(\"_\")\n+                        } else {\n+                            f\n+                        }\n+                    }\n+                    Err(_) => rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| {\n+                        s.print_pat(field.pat)\n+                    }),\n+                }\n+            })\n+            .collect::<Vec<String>>()\n+            .join(\", \")\n+    }\n+\n     /// Returns a diagnostic reporting a struct pattern which is missing an `..` due to\n     /// inaccessible fields.\n     ///"}, {"sha": "bdb2d67347e432af641d67de844c57104da83be3", "filename": "library/alloc/src/borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/library%2Falloc%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/library%2Falloc%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fborrow.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -31,6 +31,7 @@ where\n /// implementing the `Clone` trait. But `Clone` works only for going from `&T`\n /// to `T`. The `ToOwned` trait generalizes `Clone` to construct owned data\n /// from any borrow of a given type.\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"ToOwned\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ToOwned {\n     /// The resulting type after obtaining ownership."}, {"sha": "f7cefdce27856dc587be96392f27f02ade4ed011", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -1063,7 +1063,7 @@ impl<T> VecDeque<T> {\n     where\n         R: RangeBounds<usize>,\n     {\n-        let Range { start, end } = range.assert_len(self.len());\n+        let Range { start, end } = slice::range(range, ..self.len());\n         let tail = self.wrap_add(self.tail, start);\n         let head = self.wrap_add(self.tail, end);\n         (tail, head)"}, {"sha": "c020a969f1fb956f6434cd58f57bb4e97debbecf", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -115,14 +115,14 @@\n #![feature(or_patterns)]\n #![feature(pattern)]\n #![feature(ptr_internals)]\n-#![feature(range_bounds_assert_len)]\n #![feature(rustc_attrs)]\n #![feature(receiver_trait)]\n #![cfg_attr(bootstrap, feature(min_const_generics))]\n #![feature(min_specialization)]\n #![feature(set_ptr_value)]\n #![feature(slice_ptr_get)]\n #![feature(slice_ptr_len)]\n+#![feature(slice_range)]\n #![feature(staged_api)]\n #![feature(str_internals)]\n #![feature(trusted_len)]"}, {"sha": "9924f60ff77e90985af26a7bec9cdf40141376d6", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -92,6 +92,8 @@ use crate::borrow::ToOwned;\n use crate::boxed::Box;\n use crate::vec::Vec;\n \n+#[unstable(feature = \"slice_range\", issue = \"76393\")]\n+pub use core::slice::range;\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n pub use core::slice::ArrayChunks;\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n@@ -220,6 +222,7 @@ mod hack {\n }\n \n #[lang = \"slice_alloc\"]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"slice\")]\n #[cfg(not(test))]\n impl<T> [T] {\n     /// Sorts the slice."}, {"sha": "6fb3fcbb63be2aa645c0f41218cdb0265ef7a195", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -49,6 +49,7 @@ use core::iter::{FromIterator, FusedIterator};\n use core::ops::Bound::{Excluded, Included, Unbounded};\n use core::ops::{self, Add, AddAssign, Index, IndexMut, Range, RangeBounds};\n use core::ptr;\n+use core::slice;\n use core::str::{lossy, pattern::Pattern};\n \n use crate::borrow::{Cow, ToOwned};\n@@ -1510,14 +1511,14 @@ impl String {\n         // of the vector version. The data is just plain bytes.\n         // Because the range removal happens in Drop, if the Drain iterator is leaked,\n         // the removal will not happen.\n-        let Range { start, end } = range.assert_len(self.len());\n+        let Range { start, end } = slice::range(range, ..self.len());\n         assert!(self.is_char_boundary(start));\n         assert!(self.is_char_boundary(end));\n \n         // Take out two simultaneous borrows. The &mut String won't be accessed\n         // until iteration is over, in Drop.\n         let self_ptr = self as *mut _;\n-        // SAFETY: `assert_len` and `is_char_boundary` do the appropriate bounds checks.\n+        // SAFETY: `slice::range` and `is_char_boundary` do the appropriate bounds checks.\n         let chars_iter = unsafe { self.get_unchecked(start..end) }.chars();\n \n         Drain { start, end, iter: chars_iter, string: self_ptr }\n@@ -2174,6 +2175,7 @@ impl FromStr for String {\n /// implementation for free.\n ///\n /// [`Display`]: fmt::Display\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"ToString\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ToString {\n     /// Converts the given value to a `String`."}, {"sha": "dbb7708b60057795006abef3ffc59e450ecfd876", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -1651,7 +1651,7 @@ impl<T, A: Allocator> Vec<T, A> {\n         // the hole, and the vector length is restored to the new length.\n         //\n         let len = self.len();\n-        let Range { start, end } = range.assert_len(len);\n+        let Range { start, end } = slice::range(range, ..len);\n \n         unsafe {\n             // set self.vec length's to start, to be safe in case Drain is leaked\n@@ -2037,11 +2037,11 @@ impl<T: Clone, A: Allocator> Vec<T, A> {\n     where\n         R: RangeBounds<usize>,\n     {\n-        let range = src.assert_len(self.len());\n+        let range = slice::range(src, ..self.len());\n         self.reserve(range.len());\n \n         // SAFETY:\n-        // - `assert_len` guarantees  that the given range is valid for indexing self\n+        // - `slice::range` guarantees  that the given range is valid for indexing self\n         unsafe {\n             self.spec_extend_from_within(range);\n         }"}, {"sha": "64938745a4a161d5abace6d0511915ef6180d150", "filename": "library/core/benches/ascii.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/library%2Fcore%2Fbenches%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/library%2Fcore%2Fbenches%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fascii.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -66,6 +66,8 @@ macro_rules! benches {\n use test::black_box;\n use test::Bencher;\n \n+const ASCII_CASE_MASK: u8 = 0b0010_0000;\n+\n benches! {\n     fn case00_alloc_only(_bytes: &mut [u8]) {}\n \n@@ -204,7 +206,7 @@ benches! {\n             }\n         }\n         for byte in bytes {\n-            *byte &= !((is_ascii_lowercase(*byte) as u8) << 5)\n+            *byte &= !((is_ascii_lowercase(*byte) as u8) * ASCII_CASE_MASK)\n         }\n     }\n \n@@ -216,7 +218,7 @@ benches! {\n             }\n         }\n         for byte in bytes {\n-            *byte -= (is_ascii_lowercase(*byte) as u8) << 5\n+            *byte -= (is_ascii_lowercase(*byte) as u8) * ASCII_CASE_MASK\n         }\n     }\n "}, {"sha": "de4b63030fa7c5432becf49037fb200895f86653", "filename": "library/core/benches/char/methods.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/library%2Fcore%2Fbenches%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/library%2Fcore%2Fbenches%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fchar%2Fmethods.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -35,3 +35,13 @@ fn bench_to_digit_radix_var(b: &mut Bencher) {\n             .min()\n     })\n }\n+\n+#[bench]\n+fn bench_to_ascii_uppercase(b: &mut Bencher) {\n+    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| c.to_ascii_uppercase()).min())\n+}\n+\n+#[bench]\n+fn bench_to_ascii_lowercase(b: &mut Bencher) {\n+    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| c.to_ascii_lowercase()).min())\n+}"}, {"sha": "4390342134d1d6b0ab64f01f9e5dec7f4d248d97", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -1088,7 +1088,11 @@ impl char {\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> char {\n-        if self.is_ascii() { (*self as u8).to_ascii_uppercase() as char } else { *self }\n+        if self.is_ascii_lowercase() {\n+            (*self as u8).ascii_change_case_unchecked() as char\n+        } else {\n+            *self\n+        }\n     }\n \n     /// Makes a copy of the value in its ASCII lower case equivalent.\n@@ -1116,7 +1120,11 @@ impl char {\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> char {\n-        if self.is_ascii() { (*self as u8).to_ascii_lowercase() as char } else { *self }\n+        if self.is_ascii_uppercase() {\n+            (*self as u8).ascii_change_case_unchecked() as char\n+        } else {\n+            *self\n+        }\n     }\n \n     /// Checks that two values are an ASCII case-insensitive match."}, {"sha": "c13f000a73615a3bc4c0868534e0bb300a96cd2d", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -152,6 +152,9 @@ impl isize {\n      usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n \n+/// If 6th bit set ascii is upper case.\n+const ASCII_CASE_MASK: u8 = 0b0010_0000;\n+\n #[lang = \"u8\"]\n impl u8 {\n     uint_impl! { u8, u8, 8, 255, 2, \"0x82\", \"0xa\", \"0x12\", \"0x12\", \"0x48\", \"[0x12]\",\n@@ -195,7 +198,7 @@ impl u8 {\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> u8 {\n         // Unset the fifth bit if this is a lowercase letter\n-        *self & !((self.is_ascii_lowercase() as u8) << 5)\n+        *self & !((self.is_ascii_lowercase() as u8) * ASCII_CASE_MASK)\n     }\n \n     /// Makes a copy of the value in its ASCII lower case equivalent.\n@@ -218,7 +221,13 @@ impl u8 {\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> u8 {\n         // Set the fifth bit if this is an uppercase letter\n-        *self | ((self.is_ascii_uppercase() as u8) << 5)\n+        *self | (self.is_ascii_uppercase() as u8 * ASCII_CASE_MASK)\n+    }\n+\n+    /// Assumes self is ascii\n+    #[inline]\n+    pub(crate) fn ascii_change_case_unchecked(&self) -> u8 {\n+        *self ^ ASCII_CASE_MASK\n     }\n \n     /// Checks that two values are an ASCII case-insensitive match."}, {"sha": "dbeb3912130061cb8ab951f672f06f1e133ad6ff", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -1,9 +1,5 @@\n use crate::fmt;\n use crate::hash::Hash;\n-use crate::slice::index::{\n-    slice_end_index_len_fail, slice_end_index_overflow_fail, slice_index_order_fail,\n-    slice_start_index_overflow_fail,\n-};\n \n /// An unbounded range (`..`).\n ///\n@@ -764,92 +760,6 @@ pub trait RangeBounds<T: ?Sized> {\n     #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n     fn end_bound(&self) -> Bound<&T>;\n \n-    /// Performs bounds-checking of this range.\n-    ///\n-    /// The returned [`Range`] is safe to pass to [`slice::get_unchecked`] and\n-    /// [`slice::get_unchecked_mut`] for slices of the given length.\n-    ///\n-    /// [`slice::get_unchecked`]: ../../std/primitive.slice.html#method.get_unchecked\n-    /// [`slice::get_unchecked_mut`]: ../../std/primitive.slice.html#method.get_unchecked_mut\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics if the range would be out of bounds.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(range_bounds_assert_len)]\n-    ///\n-    /// use std::ops::RangeBounds;\n-    ///\n-    /// let v = [10, 40, 30];\n-    /// assert_eq!(1..2, (1..2).assert_len(v.len()));\n-    /// assert_eq!(0..2, (..2).assert_len(v.len()));\n-    /// assert_eq!(1..3, (1..).assert_len(v.len()));\n-    /// ```\n-    ///\n-    /// Panics when [`Index::index`] would panic:\n-    ///\n-    /// ```should_panic\n-    /// #![feature(range_bounds_assert_len)]\n-    ///\n-    /// use std::ops::RangeBounds;\n-    ///\n-    /// (2..1).assert_len(3);\n-    /// ```\n-    ///\n-    /// ```should_panic\n-    /// #![feature(range_bounds_assert_len)]\n-    ///\n-    /// use std::ops::RangeBounds;\n-    ///\n-    /// (1..4).assert_len(3);\n-    /// ```\n-    ///\n-    /// ```should_panic\n-    /// #![feature(range_bounds_assert_len)]\n-    ///\n-    /// use std::ops::RangeBounds;\n-    ///\n-    /// (1..=usize::MAX).assert_len(3);\n-    /// ```\n-    ///\n-    /// [`Index::index`]: crate::ops::Index::index\n-    #[track_caller]\n-    #[unstable(feature = \"range_bounds_assert_len\", issue = \"76393\")]\n-    fn assert_len(self, len: usize) -> Range<usize>\n-    where\n-        Self: RangeBounds<usize>,\n-    {\n-        let start: Bound<&usize> = self.start_bound();\n-        let start = match start {\n-            Bound::Included(&start) => start,\n-            Bound::Excluded(start) => {\n-                start.checked_add(1).unwrap_or_else(|| slice_start_index_overflow_fail())\n-            }\n-            Bound::Unbounded => 0,\n-        };\n-\n-        let end: Bound<&usize> = self.end_bound();\n-        let end = match end {\n-            Bound::Included(end) => {\n-                end.checked_add(1).unwrap_or_else(|| slice_end_index_overflow_fail())\n-            }\n-            Bound::Excluded(&end) => end,\n-            Bound::Unbounded => len,\n-        };\n-\n-        if start > end {\n-            slice_index_order_fail(start, end);\n-        }\n-        if end > len {\n-            slice_end_index_len_fail(end, len);\n-        }\n-\n-        Range { start, end }\n-    }\n-\n     /// Returns `true` if `item` is contained in the range.\n     ///\n     /// # Examples"}, {"sha": "d20986bb724fc6e57f59c882f27a21d937293400", "filename": "library/core/src/slice/index.rs", "status": "modified", "additions": 101, "deletions": 4, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Findex.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -37,28 +37,28 @@ fn slice_start_index_len_fail(index: usize, len: usize) -> ! {\n #[inline(never)]\n #[cold]\n #[track_caller]\n-pub(crate) fn slice_end_index_len_fail(index: usize, len: usize) -> ! {\n+fn slice_end_index_len_fail(index: usize, len: usize) -> ! {\n     panic!(\"range end index {} out of range for slice of length {}\", index, len);\n }\n \n #[inline(never)]\n #[cold]\n #[track_caller]\n-pub(crate) fn slice_index_order_fail(index: usize, end: usize) -> ! {\n+fn slice_index_order_fail(index: usize, end: usize) -> ! {\n     panic!(\"slice index starts at {} but ends at {}\", index, end);\n }\n \n #[inline(never)]\n #[cold]\n #[track_caller]\n-pub(crate) fn slice_start_index_overflow_fail() -> ! {\n+fn slice_start_index_overflow_fail() -> ! {\n     panic!(\"attempted to index slice from after maximum usize\");\n }\n \n #[inline(never)]\n #[cold]\n #[track_caller]\n-pub(crate) fn slice_end_index_overflow_fail() -> ! {\n+fn slice_end_index_overflow_fail() -> ! {\n     panic!(\"attempted to index slice up to maximum usize\");\n }\n \n@@ -449,3 +449,100 @@ unsafe impl<T> SliceIndex<[T]> for ops::RangeToInclusive<usize> {\n         (0..=self.end).index_mut(slice)\n     }\n }\n+\n+/// Performs bounds-checking of a range.\n+///\n+/// This method is similar to [`Index::index`] for slices, but it returns a\n+/// [`Range`] equivalent to `range`. You can use this method to turn any range\n+/// into `start` and `end` values.\n+///\n+/// `bounds` is the range of the slice to use for bounds-checking. It should\n+/// be a [`RangeTo`] range that ends at the length of the slice.\n+///\n+/// The returned [`Range`] is safe to pass to [`slice::get_unchecked`] and\n+/// [`slice::get_unchecked_mut`] for slices with the given range.\n+///\n+/// [`Range`]: ops::Range\n+/// [`RangeTo`]: ops::RangeTo\n+/// [`slice::get_unchecked`]: ../../std/primitive.slice.html#method.get_unchecked\n+/// [`slice::get_unchecked_mut`]: ../../std/primitive.slice.html#method.get_unchecked_mut\n+///\n+/// # Panics\n+///\n+/// Panics if `range` would be out of bounds.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(slice_range)]\n+///\n+/// use std::slice;\n+///\n+/// let v = [10, 40, 30];\n+/// assert_eq!(1..2, slice::range(1..2, ..v.len()));\n+/// assert_eq!(0..2, slice::range(..2, ..v.len()));\n+/// assert_eq!(1..3, slice::range(1.., ..v.len()));\n+/// ```\n+///\n+/// Panics when [`Index::index`] would panic:\n+///\n+/// ```should_panic\n+/// #![feature(slice_range)]\n+///\n+/// use std::slice;\n+///\n+/// slice::range(2..1, ..3);\n+/// ```\n+///\n+/// ```should_panic\n+/// #![feature(slice_range)]\n+///\n+/// use std::slice;\n+///\n+/// slice::range(1..4, ..3);\n+/// ```\n+///\n+/// ```should_panic\n+/// #![feature(slice_range)]\n+///\n+/// use std::slice;\n+///\n+/// slice::range(1..=usize::MAX, ..3);\n+/// ```\n+///\n+/// [`Index::index`]: ops::Index::index\n+#[track_caller]\n+#[unstable(feature = \"slice_range\", issue = \"76393\")]\n+pub fn range<R>(range: R, bounds: ops::RangeTo<usize>) -> ops::Range<usize>\n+where\n+    R: ops::RangeBounds<usize>,\n+{\n+    let len = bounds.end;\n+\n+    let start: ops::Bound<&usize> = range.start_bound();\n+    let start = match start {\n+        ops::Bound::Included(&start) => start,\n+        ops::Bound::Excluded(start) => {\n+            start.checked_add(1).unwrap_or_else(|| slice_start_index_overflow_fail())\n+        }\n+        ops::Bound::Unbounded => 0,\n+    };\n+\n+    let end: ops::Bound<&usize> = range.end_bound();\n+    let end = match end {\n+        ops::Bound::Included(end) => {\n+            end.checked_add(1).unwrap_or_else(|| slice_end_index_overflow_fail())\n+        }\n+        ops::Bound::Excluded(&end) => end,\n+        ops::Bound::Unbounded => len,\n+    };\n+\n+    if start > end {\n+        slice_index_order_fail(start, end);\n+    }\n+    if end > len {\n+        slice_end_index_len_fail(end, len);\n+    }\n+\n+    ops::Range { start, end }\n+}"}, {"sha": "80c2631c24566214b8e26645350f4615404f83cb", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -18,6 +18,7 @@ use crate::option::Option::{None, Some};\n use crate::ptr;\n use crate::result::Result;\n use crate::result::Result::{Err, Ok};\n+use crate::slice;\n \n #[unstable(\n     feature = \"slice_internals\",\n@@ -29,7 +30,7 @@ pub mod memchr;\n \n mod ascii;\n mod cmp;\n-pub(crate) mod index;\n+mod index;\n mod iter;\n mod raw;\n mod rotate;\n@@ -76,6 +77,9 @@ pub use sort::heapsort;\n #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n pub use index::SliceIndex;\n \n+#[unstable(feature = \"slice_range\", issue = \"76393\")]\n+pub use index::range;\n+\n #[lang = \"slice\"]\n #[cfg(not(test))]\n impl<T> [T] {\n@@ -3075,7 +3079,7 @@ impl<T> [T] {\n     where\n         T: Copy,\n     {\n-        let Range { start: src_start, end: src_end } = src.assert_len(self.len());\n+        let Range { start: src_start, end: src_end } = slice::range(src, ..self.len());\n         let count = src_end - src_start;\n         assert!(dest <= self.len() - count, \"dest is out of bounds\");\n         // SAFETY: the conditions for `ptr::copy` have all been checked above,"}, {"sha": "272eccda89471a58d1f3ddc98c5771b5b3ec5c43", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -71,6 +71,7 @@ use crate::sys_common::{AsInner, FromInner, IntoInner};\n /// [`CStr`]: crate::ffi::CStr\n /// [conversions]: super#conversions\n #[derive(Clone)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"OsString\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OsString {\n     inner: Buf,\n@@ -93,6 +94,7 @@ impl crate::sealed::Sealed for OsString {}\n ///\n /// [`&str`]: str\n /// [conversions]: super#conversions\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"OsStr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n // FIXME:\n // `OsStr::from_inner` current implementation relies"}, {"sha": "f61e402e37027ae18f5e579afdd0e1b4f0ac47ae", "filename": "library/std/src/os/mod.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmod.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -3,40 +3,40 @@\n #![stable(feature = \"os\", since = \"1.0.0\")]\n #![allow(missing_docs, nonstandard_style, missing_debug_implementations)]\n \n-cfg_if::cfg_if! {\n-    if #[cfg(doc)] {\n+// When documenting libstd we want to show unix/windows/linux modules as these are the \"main\n+// modules\" that are used across platforms, so all modules are enabled when `cfg(doc)` is set.\n+// This should help show platform-specific functionality in a hopefully cross-platform way in the\n+// documentation.\n+// Note that we deliberately avoid `cfg_if!` here to work around a rust-analyzer bug that would make\n+// `std::os` submodules unusable: https://github.com/rust-analyzer/rust-analyzer/issues/6038\n \n-        // When documenting libstd we want to show unix/windows/linux modules as\n-        // these are the \"main modules\" that are used across platforms. This\n-        // should help show platform-specific functionality in a hopefully\n-        // cross-platform way in the documentation\n+#[cfg(doc)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use crate::sys::unix_ext as unix;\n \n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        pub use crate::sys::unix_ext as unix;\n+#[cfg(doc)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use crate::sys::windows_ext as windows;\n \n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        pub use crate::sys::windows_ext as windows;\n+#[cfg(doc)]\n+#[doc(cfg(target_os = \"linux\"))]\n+pub mod linux;\n \n-        #[doc(cfg(target_os = \"linux\"))]\n-        pub mod linux;\n-    } else {\n+// If we're not documenting libstd then we just expose the main modules as we otherwise would.\n \n-        // If we're not documenting libstd then we just expose the main modules\n-        // as we otherwise would.\n+#[cfg(not(doc))]\n+#[cfg(any(target_os = \"redox\", unix, target_os = \"vxworks\", target_os = \"hermit\"))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use crate::sys::ext as unix;\n \n-        #[cfg(any(target_os = \"redox\", unix, target_os = \"vxworks\", target_os = \"hermit\"))]\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        pub use crate::sys::ext as unix;\n+#[cfg(not(doc))]\n+#[cfg(windows)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use crate::sys::ext as windows;\n \n-        #[cfg(windows)]\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        pub use crate::sys::ext as windows;\n-\n-        #[cfg(any(target_os = \"linux\", target_os = \"l4re\"))]\n-        pub mod linux;\n-\n-    }\n-}\n+#[cfg(not(doc))]\n+#[cfg(any(target_os = \"linux\", target_os = \"l4re\"))]\n+pub mod linux;\n \n #[cfg(target_os = \"android\")]\n pub mod android;"}, {"sha": "de3b57df44e1e2e10bc5d6b2dd4f4d44ae4d7dd4", "filename": "library/std/src/path.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -1066,6 +1066,7 @@ impl FusedIterator for Ancestors<'_> {}\n ///\n /// Which method works best depends on what kind of situation you're in.\n #[derive(Clone)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"PathBuf\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n // FIXME:\n // `PathBuf::as_mut_vec` current implementation relies\n@@ -1719,6 +1720,7 @@ impl AsRef<OsStr> for PathBuf {\n /// let extension = path.extension();\n /// assert_eq!(extension, Some(OsStr::new(\"txt\")));\n /// ```\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"Path\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n // FIXME:\n // `Path::new` current implementation relies"}, {"sha": "83debdfc86043d76449906fdd1a33083a467d1b9", "filename": "library/std/src/sys/wasi/fs.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -557,12 +557,8 @@ pub fn symlink(original: &Path, link: &Path) -> io::Result<()> {\n pub fn link(original: &Path, link: &Path) -> io::Result<()> {\n     let (original, original_file) = open_parent(original)?;\n     let (link, link_file) = open_parent(link)?;\n-    original.link(\n-        wasi::LOOKUPFLAGS_SYMLINK_FOLLOW,\n-        osstr2str(original_file.as_ref())?,\n-        &link,\n-        osstr2str(link_file.as_ref())?,\n-    )\n+    // Pass 0 as the flags argument, meaning don't follow symlinks.\n+    original.link(0, osstr2str(original_file.as_ref())?, &link, osstr2str(link_file.as_ref())?)\n }\n \n pub fn stat(p: &Path) -> io::Result<FileAttr> {"}, {"sha": "ff44028390c2713cc8b0f7b4a982eb8bfc6f39b1", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -208,6 +208,7 @@ target | std | host | notes\n `riscv64gc-unknown-linux-musl` |   |   | RISC-V Linux (kernel 4.20, musl 1.2.0)\n `riscv32gc-unknown-linux-gnu` |   |   | RISC-V Linux (kernel 5.4, glibc 2.33)\n `riscv32gc-unknown-linux-musl` |   |   | RISC-V Linux (kernel 5.4, musl + RISCV32 support patches)\n+`s390x-unknown-linux-musl` |  |  | S390x Linux (kernel 2.6.32, MUSL)\n `sparc-unknown-linux-gnu` | \u2713 |  | 32-bit SPARC Linux\n `sparc64-unknown-netbsd` | \u2713 | \u2713 | NetBSD/sparc64\n `sparc64-unknown-openbsd` | ? |  |"}, {"sha": "688be7aedea38a17ebfd5b456c9081f1adc2caa0", "filename": "src/doc/rustdoc/src/how-to-write-documentation.md", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -101,7 +101,7 @@ what an item is, how it is used, and for what purpose it exists.\n Let's see an example coming from the [standard library] by taking a look at the\n [`std::env::args()`][env::args] function:\n \n-``````text\n+``````markdown\n Returns the arguments which this program was started with (normally passed\n via the command line).\n \n@@ -135,7 +135,7 @@ for argument in env::args() {\n \n Everything before the first empty line will be reused to describe the component\n in searches and module overviews.  For example, the function `std::env::args()`\n-above will be shown on the [`std::env`] module documentation.  It is good\n+above will be shown on the [`std::env`] module documentation. It is good\n practice to keep the summary to one line: concise writing is a goal of good\n documentation.\n \n@@ -153,9 +153,10 @@ and finally provides a code example.\n \n ## Markdown\n \n-`rustdoc` uses the [CommonMark markdown specification]. You might be\n-interested into taking a look at their website to see what's possible to do.\n- - [commonmark quick reference]\n+`rustdoc` uses the [CommonMark Markdown specification]. You might be\n+interested in taking a look at their website to see what's possible:\n+\n+ - [CommonMark quick reference]\n  - [current spec]\n \n In addition to the standard CommonMark syntax, `rustdoc` supports several\n@@ -240,6 +241,21 @@ This will render as\n \n See the specification for the [task list extension] for more details.\n \n+### Smart punctuation\n+\n+Some ASCII punctuation sequences will be automatically turned into fancy Unicode\n+characters:\n+\n+| ASCII sequence | Unicode |\n+|----------------|---------|\n+| `--`           | \u2013       |\n+| `---`          | \u2014       |\n+| `...`          | \u2026       |\n+| `\"`            | \u201c or \u201d, depending on context |\n+| `'`            | \u2018 or \u2019, depending on context |\n+\n+So, no need to manually enter those Unicode characters!\n+\n [`backtrace`]: https://docs.rs/backtrace/0.3.50/backtrace/\n [commonmark markdown specification]: https://commonmark.org/\n [commonmark quick reference]: https://commonmark.org/help/"}, {"sha": "0e95d5ded92969c2d7356f90f5b4feafdfd2e5b0", "filename": "src/doc/unstable-book/src/library-features/range-bounds-assert-len.md", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b02a6193b370ff7c3cb46d713afd990f134e547e/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Frange-bounds-assert-len.md", "raw_url": "https://github.com/rust-lang/rust/raw/b02a6193b370ff7c3cb46d713afd990f134e547e/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Frange-bounds-assert-len.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Frange-bounds-assert-len.md?ref=b02a6193b370ff7c3cb46d713afd990f134e547e", "patch": "@@ -1,10 +0,0 @@\n-# `range_bounds_assert_len`\n-\n-The tracking issue for this feature is: [#76393]\n-\n-------------------------\n-\n-This adds [`RangeBounds::assert_len`].\n-\n-[#76393]: https://github.com/rust-lang/rust/issues/76393\n-[`RangeBounds::assert_len`]: https://doc.rust-lang.org/nightly/std/ops/trait.RangeBounds.html#method.assert_len"}, {"sha": "cb11f22d0d8593afe0c7c022066bb4f536b3a733", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -52,11 +52,12 @@ pub(crate) fn opts() -> Options {\n         | Options::ENABLE_FOOTNOTES\n         | Options::ENABLE_STRIKETHROUGH\n         | Options::ENABLE_TASKLISTS\n+        | Options::ENABLE_SMART_PUNCTUATION\n }\n \n /// A subset of [`opts()`] used for rendering summaries.\n pub(crate) fn summary_opts() -> Options {\n-    Options::ENABLE_STRIKETHROUGH\n+    Options::ENABLE_STRIKETHROUGH | Options::ENABLE_SMART_PUNCTUATION\n }\n \n /// When `to_string` is called, this struct will emit the HTML corresponding to"}, {"sha": "6b2cfe685752da452a8452f7f3ddadf1259954e5", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -201,8 +201,8 @@ fn test_short_markdown_summary() {\n     t(\"Hard-break  \\nsummary\", \"Hard-break summary\");\n     t(\"hello [Rust] :)\\n\\n[Rust]: https://www.rust-lang.org\", \"hello Rust :)\");\n     t(\"hello [Rust](https://www.rust-lang.org \\\"Rust\\\") :)\", \"hello Rust :)\");\n-    t(\"code `let x = i32;` ...\", \"code <code>let x = i32;</code> ...\");\n-    t(\"type `Type<'static>` ...\", \"type <code>Type<'static></code> ...\");\n+    t(\"code `let x = i32;` ...\", \"code <code>let x = i32;</code> \u2026\");\n+    t(\"type `Type<'static>` ...\", \"type <code>Type<'static></code> \u2026\");\n     t(\"# top header\", \"top header\");\n     t(\"## header\", \"header\");\n     t(\"first paragraph\\n\\nsecond paragraph\", \"first paragraph\");\n@@ -227,8 +227,8 @@ fn test_plain_text_summary() {\n     t(\"Hard-break  \\nsummary\", \"Hard-break summary\");\n     t(\"hello [Rust] :)\\n\\n[Rust]: https://www.rust-lang.org\", \"hello Rust :)\");\n     t(\"hello [Rust](https://www.rust-lang.org \\\"Rust\\\") :)\", \"hello Rust :)\");\n-    t(\"code `let x = i32;` ...\", \"code `let x = i32;` ...\");\n-    t(\"type `Type<'static>` ...\", \"type `Type<'static>` ...\");\n+    t(\"code `let x = i32;` ...\", \"code `let x = i32;` \u2026\");\n+    t(\"type `Type<'static>` ...\", \"type `Type<'static>` \u2026\");\n     t(\"# top header\", \"top header\");\n     t(\"# top header\\n\\nfollowed by some text\", \"top header\");\n     t(\"## header\", \"header\");\n@@ -251,6 +251,6 @@ fn test_markdown_html_escape() {\n     }\n \n     t(\"`Struct<'a, T>`\", \"<p><code>Struct&lt;'a, T&gt;</code></p>\\n\");\n-    t(\"Struct<'a, T>\", \"<p>Struct&lt;'a, T&gt;</p>\\n\");\n+    t(\"Struct<'a, T>\", \"<p>Struct&lt;\u2019a, T&gt;</p>\\n\");\n     t(\"Struct<br>\", \"<p>Struct&lt;br&gt;</p>\\n\");\n }"}, {"sha": "6da3b54289b2a50e06420aefe355fe5b68baf788", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -101,7 +101,7 @@ function focusSearchBar() {\n     getSearchInput().focus();\n }\n \n-// Removes the focus from the search bar\n+// Removes the focus from the search bar.\n function defocusSearchBar() {\n     getSearchInput().blur();\n }\n@@ -220,6 +220,11 @@ function defocusSearchBar() {\n         addClass(search, \"hidden\");\n         removeClass(main, \"hidden\");\n         document.title = titleBeforeSearch;\n+        // We also remove the query parameter from the URL.\n+        if (browserSupportsHistoryApi()) {\n+            history.replaceState(\"\", window.currentCrate + \" - Rust\",\n+                getNakedUrl() + window.location.hash);\n+        }\n     }\n \n     // used for special search precedence"}, {"sha": "8f0c4e5e6418485cbb4709ace79c66a9f8f38d4d", "filename": "src/test/rustdoc/inline_cross/add-docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Frustdoc%2Finline_cross%2Fadd-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Frustdoc%2Finline_cross%2Fadd-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fadd-docs.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -4,6 +4,6 @@ extern crate inner;\n \n \n // @has add_docs/struct.MyStruct.html\n-// @has add_docs/struct.MyStruct.html \"Doc comment from 'pub use', Doc comment from definition\"\n+// @has add_docs/struct.MyStruct.html \"Doc comment from \u2018pub use\u2019, Doc comment from definition\"\n /// Doc comment from 'pub use',\n pub use inner::MyStruct;"}, {"sha": "a1ca2699554e5116c1bdc047dac87015dd31e62c", "filename": "src/test/rustdoc/smart-punct.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Frustdoc%2Fsmart-punct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Frustdoc%2Fsmart-punct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsmart-punct.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -0,0 +1,30 @@\n+// ignore-tidy-linelength\n+\n+#![crate_name = \"foo\"]\n+\n+//! This is the \"start\" of the 'document'! How'd you know that \"it's\" the start?\n+//!\n+//! # Header with \"smart punct'\"\n+//!\n+//! [link with \"smart punct'\" -- yessiree!][]\n+//!\n+//! [link with \"smart punct'\" -- yessiree!]: https://www.rust-lang.org\n+//!\n+//! # Code should not be smart-punct'd\n+//!\n+//! `this inline code -- it shouldn't have \"smart punct\"`\n+//!\n+//! ```\n+//! let x = \"don't smart-punct me -- please!\";\n+//! ```\n+//!\n+//! ```text\n+//! I say \"don't smart-punct me -- please!\"\n+//! ```\n+\n+// @has \"foo/index.html\" \"//p\" \"This is the \u201cstart\u201d of the \u2018document\u2019! How\u2019d you know that \u201cit\u2019s\u201d the start?\"\n+// @has \"foo/index.html\" \"//h1\" \"Header with \u201csmart punct\u2019\u201d\"\n+// @has \"foo/index.html\" '//a[@href=\"https://www.rust-lang.org\"]' \"link with \u201csmart punct\u2019\u201d \u2013 yessiree!\"\n+// @has \"foo/index.html\" '//code' \"this inline code -- it shouldn't have \\\"smart punct\\\"\"\n+// @has \"foo/index.html\" '//pre' \"let x = \\\"don't smart-punct me -- please!\\\";\"\n+// @has \"foo/index.html\" '//pre' \"I say \\\"don't smart-punct me -- please!\\\"\""}, {"sha": "352a88ac10cd500589548e0ead0537d08fe12a7b", "filename": "src/test/ui/async-await/suggest-missing-await.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -21,7 +21,7 @@ async fn dummy() {}\n async fn suggest_await_in_async_fn_return() {\n     dummy()\n     //~^ ERROR mismatched types [E0308]\n-    //~| HELP try adding a semicolon\n+    //~| HELP consider using a semicolon here\n     //~| HELP consider `await`ing on the `Future`\n     //~| SUGGESTION .await\n }"}, {"sha": "26e81a52c2141388cc98bcb05e15345f6a15bfeb", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -29,7 +29,7 @@ help: consider `await`ing on the `Future`\n    |\n LL |     dummy().await\n    |            ^^^^^^\n-help: try adding a semicolon\n+help: consider using a semicolon here\n    |\n LL |     dummy();\n    |            ^"}, {"sha": "7f96aa289d0abc565b87aa2ef6ae47f0abdf4c7e", "filename": "src/test/ui/block-result/block-must-not-have-result-while.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -14,9 +14,7 @@ LL | |         true\n    | |         ^^^^ expected `()`, found `bool`\n LL | |\n LL | |     }\n-   | |     -- help: consider using a semicolon here\n-   | |_____|\n-   |       expected this to be `()`\n+   | |_____- expected this to be `()`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "4fcd0ee2c48e28e0e89eab3ee9db0d9859f950bf", "filename": "src/test/ui/block-result/unexpected-return-on-unit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     foo()\n    |     ^^^^^ expected `()`, found `usize`\n    |\n-help: try adding a semicolon\n+help: consider using a semicolon here\n    |\n LL |     foo();\n    |          ^"}, {"sha": "7df86d7326bc6e073174039742b091800a8f0078", "filename": "src/test/ui/issues/issue-17800.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fissues%2Fissue-17800.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fissues%2Fissue-17800.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17800.stderr?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -2,7 +2,12 @@ error[E0769]: tuple variant `MyOption::MySome` written as struct variant\n   --> $DIR/issue-17800.rs:8:9\n    |\n LL |         MyOption::MySome { x: 42 } => (),\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the tuple variant pattern syntax instead: `MyOption::MySome(42)`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use the tuple variant pattern syntax instead\n+   |\n+LL |         MyOption::MySome(42) => (),\n+   |                         ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1db759a2181d596537863384e8c9de6e9c713649", "filename": "src/test/ui/macros/empty-trailing-stmt.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fmacros%2Fempty-trailing-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fmacros%2Fempty-trailing-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fempty-trailing-stmt.stderr?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -3,6 +3,11 @@ error[E0308]: mismatched types\n    |\n LL |     { true }\n    |       ^^^^ expected `()`, found `bool`\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     { return true; }\n+   |       ^^^^^^     ^\n \n error[E0308]: mismatched types\n   --> $DIR/empty-trailing-stmt.rs:5:13"}, {"sha": "a95b5bb94d24a7c020d01529a40227ff5f054a14", "filename": "src/test/ui/missing/missing-fields-in-struct-pattern.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fmissing%2Fmissing-fields-in-struct-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fmissing%2Fmissing-fields-in-struct-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-fields-in-struct-pattern.stderr?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -2,7 +2,12 @@ error[E0769]: tuple variant `S` written as struct variant\n   --> $DIR/missing-fields-in-struct-pattern.rs:4:12\n    |\n LL |     if let S { a, b, c, d } = S(1, 2, 3, 4) {\n-   |            ^^^^^^^^^^^^^^^^ help: use the tuple variant pattern syntax instead: `S(a, b, c, d)`\n+   |            ^^^^^^^^^^^^^^^^\n+   |\n+help: use the tuple variant pattern syntax instead\n+   |\n+LL |     if let S(a, b, c, d) = S(1, 2, 3, 4) {\n+   |             ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2a70127485785783128b9bd5c905fc9d6fa4b004", "filename": "src/test/ui/parser/expr-as-stmt-2.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -2,19 +2,29 @@ error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt-2.rs:3:26\n    |\n LL |     if let Some(x) = a { true } else { false }\n-   |     ---------------------^^^^------------------ help: consider using a semicolon here\n+   |     ---------------------^^^^-----------------\n    |     |                    |\n    |     |                    expected `()`, found `bool`\n    |     expected this to be `()`\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     if let Some(x) = a { return true; } else { false }\n+   |                          ^^^^^^     ^\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt-2.rs:3:40\n    |\n LL |     if let Some(x) = a { true } else { false }\n-   |     -----------------------------------^^^^^--- help: consider using a semicolon here\n+   |     -----------------------------------^^^^^--\n    |     |                                  |\n    |     |                                  expected `()`, found `bool`\n    |     expected this to be `()`\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     if let Some(x) = a { true } else { return false; }\n+   |                                        ^^^^^^      ^\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt-2.rs:6:5"}, {"sha": "09a6d7cbeb17673514c4f02a500806d3cb107849", "filename": "src/test/ui/parser/expr-as-stmt.stderr", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -40,24 +40,44 @@ error[E0308]: mismatched types\n    |\n LL |     {2} + {2}\n    |      ^ expected `()`, found integer\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     {return 2;} + {2}\n+   |      ^^^^^^  ^\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt.rs:12:6\n    |\n LL |     {2} + 2\n    |      ^ expected `()`, found integer\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     {return 2;} + 2\n+   |      ^^^^^^  ^\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt.rs:18:7\n    |\n LL |     { 42 } + foo;\n    |       ^^ expected `()`, found integer\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     { return 42; } + foo;\n+   |       ^^^^^^   ^\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt.rs:24:7\n    |\n LL |     { 3 } * 3\n    |       ^ expected `()`, found integer\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     { return 3; } * 3\n+   |       ^^^^^^  ^\n \n error[E0614]: type `{integer}` cannot be dereferenced\n   --> $DIR/expr-as-stmt.rs:24:11"}, {"sha": "9b9d2bc4972b4c414d581974728b943cd8de489f", "filename": "src/test/ui/parser/recover-from-bad-variant.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -22,7 +22,12 @@ error[E0769]: tuple variant `Enum::Bar` written as struct variant\n   --> $DIR/recover-from-bad-variant.rs:12:9\n    |\n LL |         Enum::Bar { a, b } => {}\n-   |         ^^^^^^^^^^^^^^^^^^ help: use the tuple variant pattern syntax instead: `Enum::Bar(a, b)`\n+   |         ^^^^^^^^^^^^^^^^^^\n+   |\n+help: use the tuple variant pattern syntax instead\n+   |\n+LL |         Enum::Bar(a, b) => {}\n+   |                  ^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3ea5ca565c5e530e9cd4525cc6dffafd6863dfab", "filename": "src/test/ui/parser/struct-literal-variant-in-if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-variant-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-variant-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-variant-in-if.stderr?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -57,7 +57,7 @@ error[E0308]: mismatched types\n   --> $DIR/struct-literal-variant-in-if.rs:10:20\n    |\n LL |     if x == E::V { field } {}\n-   |     ---------------^^^^^--- help: consider using a semicolon here\n+   |     ---------------^^^^^--\n    |     |              |\n    |     |              expected `()`, found `bool`\n    |     expected this to be `()`"}, {"sha": "345520d4852ae4604519da5438385d82a533e1c2", "filename": "src/test/ui/proc-macro/issue-37788.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fproc-macro%2Fissue-37788.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fproc-macro%2Fissue-37788.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-37788.stderr?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -5,7 +5,7 @@ LL | fn main() {\n    |           - expected `()` because of default return type\n LL |     // Test that constructing the `visible_parent_map` (in `cstore_impl.rs`) does not ICE.\n LL |     std::cell::Cell::new(0)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^- help: try adding a semicolon: `;`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^- help: consider using a semicolon here: `;`\n    |     |\n    |     expected `()`, found struct `Cell`\n    |"}, {"sha": "6ef921bef3d7a9cbfb640aec4d8d7c4ce26df81d", "filename": "src/test/ui/return/return-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -6,7 +6,7 @@ LL |     foo(4 as usize)\n    |\n    = note: expected unit type `()`\n                  found struct `S<usize>`\n-help: try adding a semicolon\n+help: consider using a semicolon here\n    |\n LL |     foo(4 as usize);\n    |                    ^"}, {"sha": "83266abfa06e67dd7ea6a028f78779a05e4a1bf5", "filename": "src/test/ui/return/tail-expr-as-potential-return.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    let _ = foo(true);\n+}\n+\n+fn foo(x: bool) -> Result<f64, i32> {\n+    if x {\n+        Err(42) //~ ERROR mismatched types\n+    }\n+    Ok(42.0)\n+}"}, {"sha": "f8527961374ddb79958150dada7af654eb701e4c", "filename": "src/test/ui/return/tail-expr-as-potential-return.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -0,0 +1,19 @@\n+error[E0308]: mismatched types\n+  --> $DIR/tail-expr-as-potential-return.rs:7:9\n+   |\n+LL | /     if x {\n+LL | |         Err(42)\n+   | |         ^^^^^^^ expected `()`, found enum `Result`\n+LL | |     }\n+   | |_____- expected this to be `()`\n+   |\n+   = note: expected unit type `()`\n+                   found enum `Result<_, {integer}>`\n+help: you might have meant to return this value\n+   |\n+LL |         return Err(42);\n+   |         ^^^^^^        ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "7a2b75a1c1f0ac007b44b66b557aa397104ddecd", "filename": "src/test/ui/specialization/specialization-default-projection.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -29,7 +29,7 @@ LL | fn monomorphic() -> () {\n    |                     -- expected `()` because of return type\n ...\n LL |     generic::<()>()\n-   |     ^^^^^^^^^^^^^^^- help: try adding a semicolon: `;`\n+   |     ^^^^^^^^^^^^^^^- help: consider using a semicolon here: `;`\n    |     |\n    |     expected `()`, found associated type\n    |"}, {"sha": "7bd54af1dbee53469b0d6d7c93a7dee7cbc61e3a", "filename": "src/test/ui/structs/struct-tuple-field-names.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fstructs%2Fstruct-tuple-field-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fstructs%2Fstruct-tuple-field-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-tuple-field-names.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -0,0 +1,15 @@\n+struct S(i32, f32);\n+enum E {\n+    S(i32, f32),\n+}\n+fn main() {\n+    let x = E::S(1, 2.2);\n+    match x {\n+        E::S { 0, 1 } => {}\n+        //~^ ERROR tuple variant `E::S` written as struct variant [E0769]\n+    }\n+    let y = S(1, 2.2);\n+    match y {\n+        S { } => {} //~ ERROR: tuple variant `S` written as struct variant [E0769]\n+    }\n+}"}, {"sha": "29e721465215d432bb8538a5db4ee2c162f0b4e3", "filename": "src/test/ui/structs/struct-tuple-field-names.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fstructs%2Fstruct-tuple-field-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fstructs%2Fstruct-tuple-field-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-tuple-field-names.stderr?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -0,0 +1,25 @@\n+error[E0769]: tuple variant `E::S` written as struct variant\n+  --> $DIR/struct-tuple-field-names.rs:8:9\n+   |\n+LL |         E::S { 0, 1 } => {}\n+   |         ^^^^^^^^^^^^^\n+   |\n+help: use the tuple variant pattern syntax instead\n+   |\n+LL |         E::S(_, _) => {}\n+   |             ^^^^^^\n+\n+error[E0769]: tuple variant `S` written as struct variant\n+  --> $DIR/struct-tuple-field-names.rs:13:9\n+   |\n+LL |         S { } => {}\n+   |         ^^^^^\n+   |\n+help: use the tuple variant pattern syntax instead\n+   |\n+LL |         S(_, _) => {}\n+   |          ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0769`."}, {"sha": "438075083d37071416a5a23ad42545b759052ca3", "filename": "src/test/ui/suggestions/issue-51055-missing-semicolon-between-call-and-tuple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51055-missing-semicolon-between-call-and-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51055-missing-semicolon-between-call-and-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51055-missing-semicolon-between-call-and-tuple.stderr?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -5,7 +5,7 @@ LL |   fn vindictive() -> bool { true }\n    |   ----------------------- `vindictive` defined here returns `bool`\n ...\n LL |       vindictive()\n-   |       -^^^^^^^^^^^- help: try adding a semicolon: `;`\n+   |       -^^^^^^^^^^^- help: consider using a semicolon here: `;`\n    |  _____|\n    | |\n LL | |     (1, 2)"}, {"sha": "03cbed1376ea3ed21c8513d2d7a35d5ef419c539", "filename": "src/test/ui/suggestions/match-needing-semi.fixed", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b02a6193b370ff7c3cb46d713afd990f134e547e/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b02a6193b370ff7c3cb46d713afd990f134e547e/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.fixed?ref=b02a6193b370ff7c3cb46d713afd990f134e547e", "patch": "@@ -1,18 +0,0 @@\n-// check-only\n-// run-rustfix\n-\n-fn main() {\n-    match 3 {\n-        4 => 1,\n-        3 => {\n-            2 //~ ERROR mismatched types\n-        }\n-        _ => 2\n-    };\n-    match 3 { //~ ERROR mismatched types\n-        4 => 1,\n-        3 => 2,\n-        _ => 2\n-    };\n-    let _ = ();\n-}"}, {"sha": "833555d0e406e95e8b36f1a832223ba1ad43057d", "filename": "src/test/ui/suggestions/match-needing-semi.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.rs?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -1,11 +1,10 @@\n // check-only\n-// run-rustfix\n \n fn main() {\n     match 3 {\n         4 => 1,\n         3 => {\n-            2 //~ ERROR mismatched types\n+            foo() //~ ERROR mismatched types\n         }\n         _ => 2\n     }\n@@ -16,3 +15,7 @@ fn main() {\n     }\n     let _ = ();\n }\n+\n+fn foo() -> i32 {\n+    42\n+}"}, {"sha": "3739c9940f0cc268c13938e49aaecd05c6752367", "filename": "src/test/ui/suggestions/match-needing-semi.stderr", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.stderr?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -1,20 +1,27 @@\n error[E0308]: mismatched types\n-  --> $DIR/match-needing-semi.rs:8:13\n+  --> $DIR/match-needing-semi.rs:7:13\n    |\n LL | /     match 3 {\n LL | |         4 => 1,\n LL | |         3 => {\n-LL | |             2\n-   | |             ^ expected `()`, found integer\n+LL | |             foo()\n+   | |             ^^^^^ expected `()`, found `i32`\n LL | |         }\n LL | |         _ => 2\n LL | |     }\n-   | |     -- help: consider using a semicolon here\n-   | |_____|\n-   |       expected this to be `()`\n+   | |_____- expected this to be `()`\n+   |\n+help: consider using a semicolon here\n+   |\n+LL |             foo();\n+   |                  ^\n+help: consider using a semicolon here\n+   |\n+LL |     };\n+   |      ^\n \n error[E0308]: mismatched types\n-  --> $DIR/match-needing-semi.rs:12:5\n+  --> $DIR/match-needing-semi.rs:11:5\n    |\n LL | /     match 3 {\n LL | |         4 => 1,"}, {"sha": "c3d41ae68cd6ad07d687e571eef48f3990d57f08", "filename": "src/test/ui/type/type-check/issue-41314.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-41314.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e595db8f12f9ee926256745d757004b850703f/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-41314.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-41314.stderr?ref=a4e595db8f12f9ee926256745d757004b850703f", "patch": "@@ -2,7 +2,12 @@ error[E0769]: tuple variant `X::Y` written as struct variant\n   --> $DIR/issue-41314.rs:7:9\n    |\n LL |         X::Y { number } => {}\n-   |         ^^^^^^^^^^^^^^^ help: use the tuple variant pattern syntax instead: `X::Y(number)`\n+   |         ^^^^^^^^^^^^^^^\n+   |\n+help: use the tuple variant pattern syntax instead\n+   |\n+LL |         X::Y(number) => {}\n+   |             ^^^^^^^^\n \n error: aborting due to previous error\n "}]}