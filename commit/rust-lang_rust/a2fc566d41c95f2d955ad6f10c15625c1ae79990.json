{"sha": "a2fc566d41c95f2d955ad6f10c15625c1ae79990", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZmM1NjZkNDFjOTVmMmQ5NTVhZDZmMTBjMTU2MjVjMWFlNzk5OTA=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-01-03T01:33:40Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-01-03T02:00:40Z"}, "message": "Fold all spans in the AST.", "tree": {"sha": "ef9fdd859fe1a3c143efe481f9674b793766cd5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef9fdd859fe1a3c143efe481f9674b793766cd5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2fc566d41c95f2d955ad6f10c15625c1ae79990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2fc566d41c95f2d955ad6f10c15625c1ae79990", "html_url": "https://github.com/rust-lang/rust/commit/a2fc566d41c95f2d955ad6f10c15625c1ae79990", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2fc566d41c95f2d955ad6f10c15625c1ae79990/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3a2efa14b5da1fb11eb25496232bb164238d3c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3a2efa14b5da1fb11eb25496232bb164238d3c2", "html_url": "https://github.com/rust-lang/rust/commit/d3a2efa14b5da1fb11eb25496232bb164238d3c2"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "7bce00ebcab9529ab2a5589251e50980e2a39109", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a2fc566d41c95f2d955ad6f10c15625c1ae79990/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2fc566d41c95f2d955ad6f10c15625c1ae79990/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=a2fc566d41c95f2d955ad6f10c15625c1ae79990", "patch": "@@ -542,19 +542,19 @@ pub fn noop_fold_arg<T: Folder>(Arg {id, pat, ty}: Arg, fld: &mut T) -> Arg {\n pub fn noop_fold_tt<T: Folder>(tt: &TokenTree, fld: &mut T) -> TokenTree {\n     match *tt {\n         TokenTree::Token(span, ref tok) =>\n-            TokenTree::Token(span, fld.fold_token(tok.clone())),\n+            TokenTree::Token(fld.new_span(span), fld.fold_token(tok.clone())),\n         TokenTree::Delimited(span, ref delimed) => {\n-            TokenTree::Delimited(span, Rc::new(\n+            TokenTree::Delimited(fld.new_span(span), Rc::new(\n                             Delimited {\n                                 delim: delimed.delim,\n-                                open_span: delimed.open_span,\n+                                open_span: fld.new_span(delimed.open_span),\n                                 tts: fld.fold_tts(&delimed.tts),\n-                                close_span: delimed.close_span,\n+                                close_span: fld.new_span(delimed.close_span),\n                             }\n                         ))\n         },\n         TokenTree::Sequence(span, ref seq) =>\n-            TokenTree::Sequence(span,\n+            TokenTree::Sequence(fld.new_span(span),\n                        Rc::new(SequenceRepetition {\n                            tts: fld.fold_tts(&seq.tts),\n                            separator: seq.separator.clone().map(|tok| fld.fold_token(tok)),\n@@ -647,7 +647,7 @@ pub fn noop_fold_fn_decl<T: Folder>(decl: P<FnDecl>, fld: &mut T) -> P<FnDecl> {\n         inputs: inputs.move_map(|x| fld.fold_arg(x)),\n         output: match output {\n             FunctionRetTy::Ty(ty) => FunctionRetTy::Ty(fld.fold_ty(ty)),\n-            FunctionRetTy::Default(span) => FunctionRetTy::Default(span),\n+            FunctionRetTy::Default(span) => FunctionRetTy::Default(fld.new_span(span)),\n         },\n         variadic: variadic\n     })\n@@ -674,7 +674,7 @@ pub fn noop_fold_ty_param<T: Folder>(tp: TyParam, fld: &mut T) -> TyParam {\n         ident: fld.fold_ident(ident),\n         bounds: fld.fold_bounds(bounds),\n         default: default.map(|x| fld.fold_ty(x)),\n-        span: span\n+        span: fld.new_span(span),\n     }\n }\n "}]}