{"sha": "da3860a2936ff6d324fcf32aae51c907f96a0353", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMzg2MGEyOTM2ZmY2ZDMyNGZjZjMyYWFlNTFjOTA3Zjk2YTAzNTM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-05-05T08:34:38Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-05-05T08:34:38Z"}, "message": "Address things complained about by clippy", "tree": {"sha": "d795be5f3620b77f2458bd18433831f23d21876f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d795be5f3620b77f2458bd18433831f23d21876f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da3860a2936ff6d324fcf32aae51c907f96a0353", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da3860a2936ff6d324fcf32aae51c907f96a0353", "html_url": "https://github.com/rust-lang/rust/commit/da3860a2936ff6d324fcf32aae51c907f96a0353", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da3860a2936ff6d324fcf32aae51c907f96a0353/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07229d6305bbfc132b144d0974042eff9fb015ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/07229d6305bbfc132b144d0974042eff9fb015ee", "html_url": "https://github.com/rust-lang/rust/commit/07229d6305bbfc132b144d0974042eff9fb015ee"}], "stats": {"total": 40, "additions": 18, "deletions": 22}, "files": [{"sha": "3f0a6f778b4254d06a41c088d5e58279c9c937e8", "filename": "src/bin/miri.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/da3860a2936ff6d324fcf32aae51c907f96a0353/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3860a2936ff6d324fcf32aae51c907f96a0353/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=da3860a2936ff6d324fcf32aae51c907f96a0353", "patch": "@@ -93,15 +93,13 @@ fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>) {\n             fn visit_impl_item(&mut self, _impl_item: &'hir hir::ImplItem) {}\n         }\n         state.hir_crate.unwrap().visit_all_item_likes(&mut Visitor(limits, tcx, state));\n-    } else {\n-        if let Some((entry_node_id, _)) = *state.session.entry_fn.borrow() {\n-            let entry_def_id = tcx.hir.local_def_id(entry_node_id);\n-            miri::eval_main(tcx, entry_def_id, limits);\n+    } else if let Some((entry_node_id, _)) = *state.session.entry_fn.borrow() {\n+        let entry_def_id = tcx.hir.local_def_id(entry_node_id);\n+        miri::eval_main(tcx, entry_def_id, limits);\n \n-            state.session.abort_if_errors();\n-        } else {\n-            println!(\"no main function found, assuming auxiliary build\");\n-        }\n+        state.session.abort_if_errors();\n+    } else {\n+        println!(\"no main function found, assuming auxiliary build\");\n     }\n }\n "}, {"sha": "b9aa499015a8f4008a1b61c65e25ffa29871f20a", "filename": "src/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da3860a2936ff6d324fcf32aae51c907f96a0353/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3860a2936ff6d324fcf32aae51c907f96a0353/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=da3860a2936ff6d324fcf32aae51c907f96a0353", "patch": "@@ -1023,7 +1023,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     }\n \n     pub(super) fn operand_ty(&self, operand: &mir::Operand<'tcx>) -> Ty<'tcx> {\n-        self.monomorphize(operand.ty(&self.mir(), self.tcx), self.substs())\n+        self.monomorphize(operand.ty(self.mir(), self.tcx), self.substs())\n     }\n \n     fn copy(&mut self, src: Pointer, dest: Pointer, ty: Ty<'tcx>) -> EvalResult<'tcx> {"}, {"sha": "9660b8f4eec8605e74364ab49fe6dd285a5b3072", "filename": "src/lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da3860a2936ff6d324fcf32aae51c907f96a0353/src%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3860a2936ff6d324fcf32aae51c907f96a0353/src%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flvalue.rs?ref=da3860a2936ff6d324fcf32aae51c907f96a0353", "patch": "@@ -399,6 +399,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     }\n \n     pub(super) fn lvalue_ty(&self, lvalue: &mir::Lvalue<'tcx>) -> Ty<'tcx> {\n-        self.monomorphize(lvalue.ty(&self.mir(), self.tcx).to_ty(self.tcx), self.substs())\n+        self.monomorphize(lvalue.ty(self.mir(), self.tcx).to_ty(self.tcx), self.substs())\n     }\n }"}, {"sha": "93dfe408e31a989f88145a01ef2bcb2cbbe267f6", "filename": "src/terminator/drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da3860a2936ff6d324fcf32aae51c907f96a0353/src%2Fterminator%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3860a2936ff6d324fcf32aae51c907f96a0353/src%2Fterminator%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fdrop.rs?ref=da3860a2936ff6d324fcf32aae51c907f96a0353", "patch": "@@ -53,13 +53,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     _ => bug!(\"expected thin ptr, got {:?}\", arg),\n                 };\n                 arg = Value::ByValPair(PrimVal::Ptr(ptr), PrimVal::Bytes(n as u128));\n-                &self.seq_drop_glue\n+                self.seq_drop_glue\n             },\n             ty::TySlice(elem) => {\n                 instance.substs = self.tcx.mk_substs([\n                     Kind::from(elem),\n                 ].iter().cloned());\n-                &self.seq_drop_glue\n+                self.seq_drop_glue\n             },\n             _ => self.load_mir(instance.def)?,\n         };"}, {"sha": "78b2a2f3ce252d09ca0dc78c17143e6b041c14ae", "filename": "tests/compiletest.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/da3860a2936ff6d324fcf32aae51c907f96a0353/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3860a2936ff6d324fcf32aae51c907f96a0353/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=da3860a2936ff6d324fcf32aae51c907f96a0353", "patch": "@@ -5,7 +5,7 @@ use std::io::Write;\n \n fn compile_fail(sysroot: &Path) {\n     let flags = format!(\"--sysroot {} -Dwarnings\", sysroot.to_str().expect(\"non utf8 path\"));\n-    for_all_targets(&sysroot, |target| {\n+    for_all_targets(sysroot, |target| {\n         let mut config = compiletest::default_config();\n         config.host_rustcflags = Some(flags.clone());\n         config.mode = \"compile-fail\".parse().expect(\"Invalid mode\");\n@@ -79,8 +79,8 @@ fn compile_test() {\n         .expect(\"rustc not found for -vV\")\n         .stdout;\n     let host = std::str::from_utf8(&host).expect(\"sysroot is not utf8\");\n-    let host = host.split(\"\\nhost: \").skip(1).next().expect(\"no host: part in rustc -vV\");\n-    let host = host.split(\"\\n\").next().expect(\"no \\n after host\");\n+    let host = host.split(\"\\nhost: \").nth(1).expect(\"no host: part in rustc -vV\");\n+    let host = host.split('\\n').next().expect(\"no \\n after host\");\n \n     if let Ok(path) = std::env::var(\"MIRI_RUSTC_TEST\") {\n         let mut mir_not_found = Vec::new();\n@@ -148,10 +148,8 @@ fn compile_test() {\n                                 abi.push(text[abi_s.len()..end].to_string());\n                             } else if text.starts_with(limit_s) {\n                                 limits.push(text[limit_s.len()..end].to_string());\n-                            } else {\n-                                if text.find(\"aborting\").is_none() {\n-                                    failed.push(text[..end].to_string());\n-                                }\n+                            } else if text.find(\"aborting\").is_none() {\n+                                failed.push(text[..end].to_string());\n                             }\n                         }\n                         writeln!(stderr.lock(), \"FAILED with exit code {:?}\", output.status.code()).unwrap();\n@@ -196,10 +194,10 @@ fn compile_test() {\n         panic!(\"ran miri on rustc test suite. Test failing for convenience\");\n     } else {\n         run_pass();\n-        for_all_targets(&sysroot, |target| {\n+        for_all_targets(sysroot, |target| {\n             miri_pass(\"tests/run-pass\", &target, host);\n         });\n-        compile_fail(&sysroot);\n+        compile_fail(sysroot);\n     }\n }\n \n@@ -218,7 +216,7 @@ fn vec_to_hist<T: PartialEq + Ord>(mut v: Vec<T>) -> Vec<(usize, T)> {\n     let mut current = v.next();\n     'outer: while let Some(current_val) = current {\n         let mut n = 1;\n-        while let Some(next) = v.next() {\n+        for next in &mut v {\n             if next == current_val {\n                 n += 1;\n             } else {"}]}