{"sha": "2ae05a6163d8b15f3d8a18a2ab713d1fbd83c505", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhZTA1YTYxNjNkOGIxNWYzZDhhMThhMmFiNzEzZDFmYmQ4M2M1MDU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-18T10:18:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-20T09:15:23Z"}, "message": "vfs crate scaffold", "tree": {"sha": "5d0692d2438ecf5ede416ebbdeab4c9db7c8d5e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d0692d2438ecf5ede416ebbdeab4c9db7c8d5e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ae05a6163d8b15f3d8a18a2ab713d1fbd83c505", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ae05a6163d8b15f3d8a18a2ab713d1fbd83c505", "html_url": "https://github.com/rust-lang/rust/commit/2ae05a6163d8b15f3d8a18a2ab713d1fbd83c505", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ae05a6163d8b15f3d8a18a2ab713d1fbd83c505/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7509901fa0985f8fc4893a83e0275a063f072dda", "url": "https://api.github.com/repos/rust-lang/rust/commits/7509901fa0985f8fc4893a83e0275a063f072dda", "html_url": "https://github.com/rust-lang/rust/commit/7509901fa0985f8fc4893a83e0275a063f072dda"}], "stats": {"total": 157, "additions": 89, "deletions": 68}, "files": [{"sha": "c15955f4cd59f6a37f324257d8898e4c2ca10842", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae05a6163d8b15f3d8a18a2ab713d1fbd83c505/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2ae05a6163d8b15f3d8a18a2ab713d1fbd83c505/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2ae05a6163d8b15f3d8a18a2ab713d1fbd83c505", "patch": "@@ -749,8 +749,10 @@ name = \"ra_vfs\"\n version = \"0.1.0\"\n dependencies = [\n  \"crossbeam-channel 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread_worker 0.1.0\",\n  \"walkdir 2.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n "}, {"sha": "9d3f83b4c77998461ecd432de77d8ce64841a28a", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae05a6163d8b15f3d8a18a2ab713d1fbd83c505/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae05a6163d8b15f3d8a18a2ab713d1fbd83c505/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=2ae05a6163d8b15f3d8a18a2ab713d1fbd83c505", "patch": "@@ -88,8 +88,8 @@ pub fn main_loop(\n     drop(pool);\n     log::info!(\"...threadpool has finished\");\n \n-    let fs_res = fs_watcher.stop();\n-    let ws_res = ws_watcher.stop();\n+    let fs_res = fs_watcher.shutdown();\n+    let ws_res = ws_watcher.shutdown();\n \n     main_res?;\n     fs_res.map_err(|_| format_err!(\"fs watcher died\"))?;"}, {"sha": "9ce619a777dbc53cc39a2665bba0c1cf21cc68fa", "filename": "crates/ra_vfs/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ae05a6163d8b15f3d8a18a2ab713d1fbd83c505/crates%2Fra_vfs%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2ae05a6163d8b15f3d8a18a2ab713d1fbd83c505/crates%2Fra_vfs%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2FCargo.toml?ref=2ae05a6163d8b15f3d8a18a2ab713d1fbd83c505", "patch": "@@ -9,3 +9,6 @@ walkdir = \"2.2.7\"\n relative-path = \"0.4.0\"\n rustc-hash = \"1.0\"\n crossbeam-channel = \"0.2.4\"\n+log = \"0.4.6\"\n+\n+thread_worker = { path = \"../thread_worker\" }"}, {"sha": "ce3271d48b0dadd05998241961bca33dfca67eed", "filename": "crates/ra_vfs/src/io.rs", "status": "modified", "additions": 57, "deletions": 60, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/2ae05a6163d8b15f3d8a18a2ab713d1fbd83c505/crates%2Fra_vfs%2Fsrc%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae05a6163d8b15f3d8a18a2ab713d1fbd83c505/crates%2Fra_vfs%2Fsrc%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Fio.rs?ref=2ae05a6163d8b15f3d8a18a2ab713d1fbd83c505", "patch": "@@ -6,67 +6,64 @@ use std::{\n \n use walkdir::WalkDir;\n use crossbeam_channel::{Sender, Receiver};\n+use thread_worker::{WorkerHandle, Worker};\n \n-pub(crate) fn start_io() -> (JoinHandle<(), Sender<()>, Receiver()>) {}\n+#[derive(Debug)]\n+pub struct FileEvent {\n+    pub path: PathBuf,\n+    pub kind: FileEventKind,\n+}\n \n-// use crate::thread_watcher::{ThreadWatcher, Worker};\n+#[derive(Debug)]\n+pub enum FileEventKind {\n+    Add(String),\n+}\n \n-// #[derive(Debug)]\n-// pub struct FileEvent {\n-//     pub path: PathBuf,\n-//     pub kind: FileEventKind,\n-// }\n+pub fn start() -> (Worker<PathBuf, (PathBuf, Vec<FileEvent>)>, WorkerHandle) {\n+    thread_worker::spawn::<PathBuf, (PathBuf, Vec<FileEvent>), _>(\n+        \"vfs\",\n+        128,\n+        |input_receiver, output_sender| {\n+            input_receiver\n+                .map(|path| {\n+                    log::debug!(\"loading {} ...\", path.as_path().display());\n+                    let events = load_root(path.as_path());\n+                    log::debug!(\"... loaded {}\", path.as_path().display());\n+                    (path, events)\n+                })\n+                .for_each(|it| output_sender.send(it))\n+        },\n+    )\n+}\n \n-// #[derive(Debug)]\n-// pub enum FileEventKind {\n-//     Add(String),\n-// }\n-\n-// pub fn roots_loader() -> (Worker<PathBuf, (PathBuf, Vec<FileEvent>)>, ThreadWatcher) {\n-//     Worker::<PathBuf, (PathBuf, Vec<FileEvent>)>::spawn(\n-//         \"roots loader\",\n-//         128,\n-//         |input_receiver, output_sender| {\n-//             input_receiver\n-//                 .map(|path| {\n-//                     log::debug!(\"loading {} ...\", path.as_path().display());\n-//                     let events = load_root(path.as_path());\n-//                     log::debug!(\"... loaded {}\", path.as_path().display());\n-//                     (path, events)\n-//                 })\n-//                 .for_each(|it| output_sender.send(it))\n-//         },\n-//     )\n-// }\n-\n-// fn load_root(path: &Path) -> Vec<FileEvent> {\n-//     let mut res = Vec::new();\n-//     for entry in WalkDir::new(path) {\n-//         let entry = match entry {\n-//             Ok(entry) => entry,\n-//             Err(e) => {\n-//                 log::warn!(\"watcher error: {}\", e);\n-//                 continue;\n-//             }\n-//         };\n-//         if !entry.file_type().is_file() {\n-//             continue;\n-//         }\n-//         let path = entry.path();\n-//         if path.extension().and_then(|os| os.to_str()) != Some(\"rs\") {\n-//             continue;\n-//         }\n-//         let text = match fs::read_to_string(path) {\n-//             Ok(text) => text,\n-//             Err(e) => {\n-//                 log::warn!(\"watcher error: {}\", e);\n-//                 continue;\n-//             }\n-//         };\n-//         res.push(FileEvent {\n-//             path: path.to_owned(),\n-//             kind: FileEventKind::Add(text),\n-//         })\n-//     }\n-//     res\n-// }\n+fn load_root(path: &Path) -> Vec<FileEvent> {\n+    let mut res = Vec::new();\n+    for entry in WalkDir::new(path) {\n+        let entry = match entry {\n+            Ok(entry) => entry,\n+            Err(e) => {\n+                log::warn!(\"watcher error: {}\", e);\n+                continue;\n+            }\n+        };\n+        if !entry.file_type().is_file() {\n+            continue;\n+        }\n+        let path = entry.path();\n+        if path.extension().and_then(|os| os.to_str()) != Some(\"rs\") {\n+            continue;\n+        }\n+        let text = match fs::read_to_string(path) {\n+            Ok(text) => text,\n+            Err(e) => {\n+                log::warn!(\"watcher error: {}\", e);\n+                continue;\n+            }\n+        };\n+        res.push(FileEvent {\n+            path: path.to_owned(),\n+            kind: FileEventKind::Add(text),\n+        })\n+    }\n+    res\n+}"}, {"sha": "b80c12058d6d620374a608a633b080fbc07e1a13", "filename": "crates/ra_vfs/src/lib.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2ae05a6163d8b15f3d8a18a2ab713d1fbd83c505/crates%2Fra_vfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae05a6163d8b15f3d8a18a2ab713d1fbd83c505/crates%2Fra_vfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Flib.rs?ref=2ae05a6163d8b15f3d8a18a2ab713d1fbd83c505", "patch": "@@ -15,14 +15,20 @@ mod arena;\n mod io;\n \n use std::{\n+    thread,\n     cmp::Reverse,\n     path::{Path, PathBuf},\n     ffi::OsStr,\n     sync::Arc,\n };\n \n use relative_path::RelativePathBuf;\n-use crate::arena::{ArenaId, Arena};\n+use thread_worker::{WorkerHandle, Worker};\n+\n+use crate::{\n+    arena::{ArenaId, Arena},\n+    io::FileEvent,\n+};\n \n /// `RootFilter` is a predicate that checks if a file can belong to a root\n struct RootFilter {\n@@ -76,16 +82,24 @@ struct VfsFileData {\n     text: Arc<String>,\n }\n \n-#[derive(Default)]\n struct Vfs {\n     roots: Arena<VfsRoot, RootFilter>,\n     files: Arena<VfsFile, VfsFileData>,\n     // pending_changes: Vec<PendingChange>,\n+    worker: Worker<PathBuf, (PathBuf, Vec<FileEvent>)>,\n+    worker_handle: WorkerHandle,\n }\n \n impl Vfs {\n     pub fn new(mut roots: Vec<PathBuf>) -> Vfs {\n-        let mut res = Vfs::default();\n+        let (worker, worker_handle) = io::start();\n+\n+        let mut res = Vfs {\n+            roots: Arena::default(),\n+            files: Arena::default(),\n+            worker,\n+            worker_handle,\n+        };\n \n         roots.sort_by_key(|it| Reverse(it.as_os_str().len()));\n \n@@ -104,6 +118,11 @@ impl Vfs {\n     pub fn commit_changes(&mut self) -> Vec<VfsChange> {\n         unimplemented!()\n     }\n+\n+    pub fn shutdown(self) -> thread::Result<()> {\n+        let _ = self.worker.shutdown();\n+        self.worker_handle.shutdown()\n+    }\n }\n \n #[derive(Debug, Clone)]"}, {"sha": "24d7fcce1d908f23ed6ef1ad7b2c07a2b705c1a0", "filename": "crates/thread_worker/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ae05a6163d8b15f3d8a18a2ab713d1fbd83c505/crates%2Fthread_worker%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae05a6163d8b15f3d8a18a2ab713d1fbd83c505/crates%2Fthread_worker%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fthread_worker%2Fsrc%2Flib.rs?ref=2ae05a6163d8b15f3d8a18a2ab713d1fbd83c505", "patch": "@@ -30,7 +30,7 @@ where\n impl<I, O> Worker<I, O> {\n     /// Stops the worker. Returns the message receiver to fetch results which\n     /// have become ready before the worker is stopped.\n-    pub fn stop(self) -> Receiver<O> {\n+    pub fn shutdown(self) -> Receiver<O> {\n         self.out\n     }\n \n@@ -45,11 +45,11 @@ impl WorkerHandle {\n         WorkerHandle {\n             name,\n             thread,\n-            bomb: DropBomb::new(format!(\"WorkerHandle {} was not stopped\", name)),\n+            bomb: DropBomb::new(format!(\"WorkerHandle {} was not shutdown\", name)),\n         }\n     }\n \n-    pub fn stop(mut self) -> thread::Result<()> {\n+    pub fn shutdown(mut self) -> thread::Result<()> {\n         log::info!(\"waiting for {} to finish ...\", self.name);\n         let name = self.name;\n         self.bomb.defuse();"}]}