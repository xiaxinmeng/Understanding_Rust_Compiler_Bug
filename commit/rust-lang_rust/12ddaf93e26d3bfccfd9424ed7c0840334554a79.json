{"sha": "12ddaf93e26d3bfccfd9424ed7c0840334554a79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZGRhZjkzZTI2ZDNiZmNjZmQ5NDI0ZWQ3YzA4NDAzMzQ1NTRhNzk=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-01-02T04:04:39Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-01-02T04:04:39Z"}, "message": "Remove trim_newlines()\n\nWe call `trim_newlines()` after the `trim()`ed buffer, which is unnecessary.", "tree": {"sha": "3cb7f53c4ba6f86d249e0d747c96bf80b1a6c667", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cb7f53c4ba6f86d249e0d747c96bf80b1a6c667"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12ddaf93e26d3bfccfd9424ed7c0840334554a79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12ddaf93e26d3bfccfd9424ed7c0840334554a79", "html_url": "https://github.com/rust-lang/rust/commit/12ddaf93e26d3bfccfd9424ed7c0840334554a79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12ddaf93e26d3bfccfd9424ed7c0840334554a79/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c9686f3494a82a115d0c5cd10842c5633ee026d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c9686f3494a82a115d0c5cd10842c5633ee026d", "html_url": "https://github.com/rust-lang/rust/commit/7c9686f3494a82a115d0c5cd10842c5633ee026d"}], "stats": {"total": 17, "additions": 3, "deletions": 14}, "files": [{"sha": "2de3a025e4debd16eeb36ecea7a8aec99e28d38f", "filename": "src/items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12ddaf93e26d3bfccfd9424ed7c0840334554a79/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ddaf93e26d3bfccfd9424ed7c0840334554a79/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=12ddaf93e26d3bfccfd9424ed7c0840334554a79", "patch": "@@ -34,7 +34,7 @@ use utils::{colon_spaces, contains_skip, first_line_width, format_abi, format_co\n             format_defaultness, format_mutability, format_unsafety, format_visibility,\n             is_attributes_extendable, last_line_contains_single_line_comment,\n             last_line_used_width, last_line_width, mk_sp, semicolon_for_expr, starts_with_newline,\n-            stmt_expr, trim_newlines, trimmed_last_line_width};\n+            stmt_expr, trimmed_last_line_width};\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n \n@@ -674,7 +674,7 @@ pub fn format_impl(\n \n             result.push('\\n');\n             result.push_str(&inner_indent_str);\n-            result.push_str(trim_newlines(visitor.buffer.to_string().trim()));\n+            result.push_str(visitor.buffer.to_string().trim());\n             result.push('\\n');\n             result.push_str(&outer_indent_str);\n         }\n@@ -1073,7 +1073,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n \n             result.push('\\n');\n             result.push_str(&inner_indent_str);\n-            result.push_str(trim_newlines(visitor.buffer.to_string().trim()));\n+            result.push_str(visitor.buffer.to_string().trim());\n             result.push('\\n');\n             result.push_str(&outer_indent_str);\n         } else if result.contains('\\n') {"}, {"sha": "73103e88a64f3ea794ea640b269788ae3fada09b", "filename": "src/utils.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12ddaf93e26d3bfccfd9424ed7c0840334554a79/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ddaf93e26d3bfccfd9424ed7c0840334554a79/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=12ddaf93e26d3bfccfd9424ed7c0840334554a79", "patch": "@@ -254,17 +254,6 @@ pub fn count_newlines(input: &str) -> usize {\n     input.chars().filter(|&c| c == '\\n').count()\n }\n \n-#[inline]\n-pub fn trim_newlines(input: &str) -> &str {\n-    match input.find(|c| c != '\\n' && c != '\\r') {\n-        Some(start) => {\n-            let end = input.rfind(|c| c != '\\n' && c != '\\r').unwrap_or(0) + 1;\n-            &input[start..end]\n-        }\n-        None => \"\",\n-    }\n-}\n-\n // Macro for deriving implementations of Serialize/Deserialize for enums\n #[macro_export]\n macro_rules! impl_enum_serialize_and_deserialize {"}]}