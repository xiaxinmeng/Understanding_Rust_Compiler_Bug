{"sha": "fcc23238fd40c568cf3f7e1a2947ebb93277091e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYzIzMjM4ZmQ0MGM1NjhjZjNmN2UxYTI5NDdlYmI5MzI3NzA5MWU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-06T16:40:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-06T22:27:46Z"}, "message": "Be stricter with binders in method probing.", "tree": {"sha": "66c708a0cdeaef6b30896378b27bcdf9426ec537", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66c708a0cdeaef6b30896378b27bcdf9426ec537"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcc23238fd40c568cf3f7e1a2947ebb93277091e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcc23238fd40c568cf3f7e1a2947ebb93277091e", "html_url": "https://github.com/rust-lang/rust/commit/fcc23238fd40c568cf3f7e1a2947ebb93277091e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcc23238fd40c568cf3f7e1a2947ebb93277091e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6539cb417f4a7c2d9d1afce44c196578d2b67f38", "url": "https://api.github.com/repos/rust-lang/rust/commits/6539cb417f4a7c2d9d1afce44c196578d2b67f38", "html_url": "https://github.com/rust-lang/rust/commit/6539cb417f4a7c2d9d1afce44c196578d2b67f38"}], "stats": {"total": 72, "additions": 47, "deletions": 25}, "files": [{"sha": "4ccb399c17cf442c11329417776cd18fe2e8d970", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fcc23238fd40c568cf3f7e1a2947ebb93277091e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc23238fd40c568cf3f7e1a2947ebb93277091e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=fcc23238fd40c568cf3f7e1a2947ebb93277091e", "patch": "@@ -1077,6 +1077,12 @@ pub struct FnSig<'tcx> {\n \n pub type PolyFnSig<'tcx> = Binder<FnSig<'tcx>>;\n \n+impl<'tcx> PolyFnSig<'tcx> {\n+    pub fn input(&self, index: uint) -> ty::Binder<Ty<'tcx>> {\n+        ty::Binder(self.0.inputs[index])\n+    }\n+}\n+\n #[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n pub struct ParamTy {\n     pub space: subst::ParamSpace,\n@@ -1464,10 +1470,12 @@ impl<'tcx> PolyTraitRef<'tcx> {\n     }\n \n     pub fn substs(&self) -> &'tcx Substs<'tcx> {\n+        // TODO every use of this fn is probably a bug, it should yield Binder<>\n         self.0.substs\n     }\n \n     pub fn input_types(&self) -> &[Ty<'tcx>] {\n+        // TODO every use of this fn is probably a bug, it should yield Binder<>\n         self.0.input_types()\n     }\n \n@@ -6950,6 +6958,13 @@ impl<'tcx> RegionEscape for Ty<'tcx> {\n     }\n }\n \n+impl<'tcx> RegionEscape for Substs<'tcx> {\n+    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n+        self.types.has_regions_escaping_depth(depth) ||\n+            self.regions.has_regions_escaping_depth(depth)\n+    }\n+}\n+\n impl<'tcx,T:RegionEscape> RegionEscape for VecPerParamSpace<T> {\n     fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n         self.iter_enumerated().any(|(space, _, t)| {"}, {"sha": "6f2bbb7df2bf1c32d147da5b06a00c301c035295", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/fcc23238fd40c568cf3f7e1a2947ebb93277091e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc23238fd40c568cf3f7e1a2947ebb93277091e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=fcc23238fd40c568cf3f7e1a2947ebb93277091e", "patch": "@@ -18,7 +18,7 @@ use middle::fast_reject;\n use middle::subst;\n use middle::subst::Subst;\n use middle::traits;\n-use middle::ty::{self, Ty, ToPolyTraitRef};\n+use middle::ty::{self, RegionEscape, Ty, ToPolyTraitRef};\n use middle::ty_fold::TypeFoldable;\n use middle::infer;\n use middle::infer::InferCtxt;\n@@ -309,18 +309,20 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n         // argument type like `&Trait`.\n         let trait_ref = data.principal_trait_ref_with_self_ty(self.tcx(), self_ty);\n         self.elaborate_bounds(&[trait_ref.clone()], false, |this, new_trait_ref, m, method_num| {\n+            let new_trait_ref = this.erase_late_bound_regions(&new_trait_ref);\n+\n             let vtable_index =\n                 traits::get_vtable_index_of_object_method(tcx,\n                                                           trait_ref.clone(),\n-                                                          new_trait_ref.def_id(),\n+                                                          new_trait_ref.def_id,\n                                                           method_num);\n \n-            let xform_self_ty = this.xform_self_ty(&m, new_trait_ref.substs());\n+            let xform_self_ty = this.xform_self_ty(&m, new_trait_ref.substs);\n \n             this.inherent_candidates.push(Candidate {\n                 xform_self_ty: xform_self_ty,\n                 method_ty: m,\n-                kind: ObjectCandidate(new_trait_ref.def_id(), method_num, vtable_index)\n+                kind: ObjectCandidate(new_trait_ref.def_id, method_num, vtable_index)\n             });\n         });\n     }\n@@ -353,34 +355,37 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n             })\n             .collect();\n \n-        self.elaborate_bounds(bounds.as_slice(), true, |this, trait_ref, m, method_num| {\n+        self.elaborate_bounds(bounds.as_slice(), true, |this, poly_trait_ref, m, method_num| {\n+            let trait_ref =\n+                this.erase_late_bound_regions(&poly_trait_ref);\n+\n             let xform_self_ty =\n-                this.xform_self_ty(&m, trait_ref.substs());\n+                this.xform_self_ty(&m, trait_ref.substs);\n \n             debug!(\"found match: trait_ref={} substs={} m={}\",\n                    trait_ref.repr(this.tcx()),\n-                   trait_ref.substs().repr(this.tcx()),\n+                   trait_ref.substs.repr(this.tcx()),\n                    m.repr(this.tcx()));\n             assert_eq!(m.generics.types.get_slice(subst::TypeSpace).len(),\n-                       trait_ref.substs().types.get_slice(subst::TypeSpace).len());\n+                       trait_ref.substs.types.get_slice(subst::TypeSpace).len());\n             assert_eq!(m.generics.regions.get_slice(subst::TypeSpace).len(),\n-                       trait_ref.substs().regions().get_slice(subst::TypeSpace).len());\n+                       trait_ref.substs.regions().get_slice(subst::TypeSpace).len());\n             assert_eq!(m.generics.types.get_slice(subst::SelfSpace).len(),\n-                       trait_ref.substs().types.get_slice(subst::SelfSpace).len());\n+                       trait_ref.substs.types.get_slice(subst::SelfSpace).len());\n             assert_eq!(m.generics.regions.get_slice(subst::SelfSpace).len(),\n-                       trait_ref.substs().regions().get_slice(subst::SelfSpace).len());\n+                       trait_ref.substs.regions().get_slice(subst::SelfSpace).len());\n \n             // Because this trait derives from a where-clause, it\n             // should not contain any inference variables or other\n             // artifacts. This means it is safe to put into the\n             // `WhereClauseCandidate` and (eventually) into the\n             // `WhereClausePick`.\n-            assert!(trait_ref.substs().types.iter().all(|&t| !ty::type_needs_infer(t)));\n+            assert!(trait_ref.substs.types.iter().all(|&t| !ty::type_needs_infer(t)));\n \n             this.inherent_candidates.push(Candidate {\n                 xform_self_ty: xform_self_ty,\n                 method_ty: m,\n-                kind: WhereClauseCandidate(trait_ref, method_num)\n+                kind: WhereClauseCandidate(poly_trait_ref, method_num)\n             });\n         });\n     }\n@@ -614,11 +619,12 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n         // Check whether there are any where-clauses pertaining to this trait.\n         let caller_predicates =\n             self.fcx.inh.param_env.caller_bounds.predicates.as_slice().to_vec();\n-        for bound in traits::elaborate_predicates(self.tcx(), caller_predicates)\n-                     .filter_map(|p| p.to_opt_poly_trait_ref())\n-                     .filter(|b| b.def_id() == trait_def_id)\n+        for poly_bound in traits::elaborate_predicates(self.tcx(), caller_predicates)\n+                          .filter_map(|p| p.to_opt_poly_trait_ref())\n+                          .filter(|b| b.def_id() == trait_def_id)\n         {\n-            let xform_self_ty = self.xform_self_ty(&method_ty, bound.substs());\n+            let bound = self.erase_late_bound_regions(&poly_bound);\n+            let xform_self_ty = self.xform_self_ty(&method_ty, bound.substs);\n \n             debug!(\"assemble_where_clause_candidates: bound={} xform_self_ty={}\",\n                    bound.repr(self.tcx()),\n@@ -627,7 +633,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n             self.extension_candidates.push(Candidate {\n                 xform_self_ty: xform_self_ty,\n                 method_ty: method_ty.clone(),\n-                kind: WhereClauseCandidate(bound, method_index)\n+                kind: WhereClauseCandidate(poly_bound, method_index)\n             });\n         }\n     }\n@@ -920,6 +926,8 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n                method.fty.sig.0.inputs[0].repr(self.tcx()),\n                substs.repr(self.tcx()));\n \n+        assert!(!substs.has_escaping_regions());\n+\n         // It is possible for type parameters or early-bound lifetimes\n         // to appear in the signature of `self`. The substitutions we\n         // are given do not include type/lifetime parameters for the\n@@ -949,14 +957,13 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n             substs = &placeholder;\n         }\n \n-        // Replace early-bound regions and types.\n-        let xform_self_ty = method.fty.sig.0.inputs[0].subst(self.tcx(), substs);\n+        // Erase any late-bound regions from the method and substitute\n+        // in the values from the substitution.\n+        let xform_self_ty = method.fty.sig.input(0);\n+        let xform_self_ty = self.erase_late_bound_regions(&xform_self_ty);\n+        let xform_self_ty = xform_self_ty.subst(self.tcx(), substs);\n \n-        // Replace late-bound regions bound in the impl or\n-        // where-clause (2 levels of binding) and method (1 level of binding).\n-        self.erase_late_bound_regions(\n-            &self.erase_late_bound_regions(\n-                &ty::Binder(ty::Binder(xform_self_ty))))\n+        xform_self_ty\n     }\n \n     fn impl_substs(&self,"}]}