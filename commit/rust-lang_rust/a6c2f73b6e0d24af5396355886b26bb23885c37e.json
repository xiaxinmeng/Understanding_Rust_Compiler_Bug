{"sha": "a6c2f73b6e0d24af5396355886b26bb23885c37e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YzJmNzNiNmUwZDI0YWY1Mzk2MzU1ODg2YjI2YmIyMzg4NWMzN2U=", "commit": {"author": {"name": "YI", "email": "uuuuuu@protonmail.com", "date": "2020-05-03T04:36:12Z"}, "committer": {"name": "YI", "email": "uuuuuu@protonmail.com", "date": "2020-05-10T08:44:46Z"}, "message": "add linking option strip\n\nmove strip option to \"Z\"\n\nadd more strip options, remove strip-debuginfo-if-disabled\n\nmerge strip and debuginfo", "tree": {"sha": "bec0a3f836c353d9d21b431ff3f78791f9e40400", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bec0a3f836c353d9d21b431ff3f78791f9e40400"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6c2f73b6e0d24af5396355886b26bb23885c37e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6c2f73b6e0d24af5396355886b26bb23885c37e", "html_url": "https://github.com/rust-lang/rust/commit/a6c2f73b6e0d24af5396355886b26bb23885c37e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6c2f73b6e0d24af5396355886b26bb23885c37e/comments", "author": {"login": "contrun", "id": 32609395, "node_id": "MDQ6VXNlcjMyNjA5Mzk1", "avatar_url": "https://avatars.githubusercontent.com/u/32609395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/contrun", "html_url": "https://github.com/contrun", "followers_url": "https://api.github.com/users/contrun/followers", "following_url": "https://api.github.com/users/contrun/following{/other_user}", "gists_url": "https://api.github.com/users/contrun/gists{/gist_id}", "starred_url": "https://api.github.com/users/contrun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/contrun/subscriptions", "organizations_url": "https://api.github.com/users/contrun/orgs", "repos_url": "https://api.github.com/users/contrun/repos", "events_url": "https://api.github.com/users/contrun/events{/privacy}", "received_events_url": "https://api.github.com/users/contrun/received_events", "type": "User", "site_admin": false}, "committer": {"login": "contrun", "id": 32609395, "node_id": "MDQ6VXNlcjMyNjA5Mzk1", "avatar_url": "https://avatars.githubusercontent.com/u/32609395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/contrun", "html_url": "https://github.com/contrun", "followers_url": "https://api.github.com/users/contrun/followers", "following_url": "https://api.github.com/users/contrun/following{/other_user}", "gists_url": "https://api.github.com/users/contrun/gists{/gist_id}", "starred_url": "https://api.github.com/users/contrun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/contrun/subscriptions", "organizations_url": "https://api.github.com/users/contrun/orgs", "repos_url": "https://api.github.com/users/contrun/repos", "events_url": "https://api.github.com/users/contrun/events{/privacy}", "received_events_url": "https://api.github.com/users/contrun/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1e05528696ca523055b0f7ce94b8033dcbaa39e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1e05528696ca523055b0f7ce94b8033dcbaa39e", "html_url": "https://github.com/rust-lang/rust/commit/c1e05528696ca523055b0f7ce94b8033dcbaa39e"}], "stats": {"total": 119, "additions": 81, "deletions": 38}, "files": [{"sha": "d8b38cf33707c27aa461e166eee88948806c7fca", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6c2f73b6e0d24af5396355886b26bb23885c37e/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c2f73b6e0d24af5396355886b26bb23885c37e/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=a6c2f73b6e0d24af5396355886b26bb23885c37e", "patch": "@@ -1500,8 +1500,8 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     cmd.optimize();\n \n     // OBJECT-FILES-NO, AUDIT-ORDER\n-    // Pass debuginfo flags down to the linker.\n-    cmd.debuginfo();\n+    // Pass debuginfo and strip flags down to the linker.\n+    cmd.debuginfo(sess.opts.debugging_opts.strip);\n \n     // OBJECT-FILES-NO, AUDIT-ORDER\n     // We want to prevent the compiler from accidentally leaking in any system libraries,"}, {"sha": "535c4ff092f5f3f79a6b0e371f7d8856aac99756", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 51, "deletions": 32, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/a6c2f73b6e0d24af5396355886b26bb23885c37e/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c2f73b6e0d24af5396355886b26bb23885c37e/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=a6c2f73b6e0d24af5396355886b26bb23885c37e", "patch": "@@ -14,7 +14,7 @@ use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_middle::ty::TyCtxt;\n use rustc_serialize::{json, Encoder};\n-use rustc_session::config::{self, CrateType, DebugInfo, LinkerPluginLto, Lto, OptLevel};\n+use rustc_session::config::{self, CrateType, DebugInfo, LinkerPluginLto, Lto, OptLevel, Strip};\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::{LinkerFlavor, LldFlavor};\n@@ -122,7 +122,7 @@ pub trait Linker {\n     fn optimize(&mut self);\n     fn pgo_gen(&mut self);\n     fn control_flow_guard(&mut self);\n-    fn debuginfo(&mut self);\n+    fn debuginfo(&mut self, strip: Strip);\n     fn no_default_libraries(&mut self);\n     fn build_dylib(&mut self, out_filename: &Path);\n     fn build_static_executable(&mut self);\n@@ -392,15 +392,16 @@ impl<'a> Linker for GccLinker<'a> {\n         self.sess.warn(\"Windows Control Flow Guard is not supported by this linker.\");\n     }\n \n-    fn debuginfo(&mut self) {\n-        if let DebugInfo::None = self.sess.opts.debuginfo {\n-            // If we are building without debuginfo enabled and we were called with\n-            // `-Zstrip-debuginfo-if-disabled=yes`, tell the linker to strip any debuginfo\n-            // found when linking to get rid of symbols from libstd.\n-            if self.sess.opts.debugging_opts.strip_debuginfo_if_disabled {\n-                self.linker_arg(\"-S\");\n+    fn debuginfo(&mut self, strip: Strip) {\n+        match strip {\n+            Strip::None => {}\n+            Strip::Debuginfo => {\n+                self.linker_arg(\"--strip-debug\");\n             }\n-        };\n+            Strip::Symbols => {\n+                self.linker_arg(\"--strip-all\");\n+            }\n+        }\n     }\n \n     fn no_default_libraries(&mut self) {\n@@ -686,29 +687,37 @@ impl<'a> Linker for MsvcLinker<'a> {\n         self.cmd.arg(\"/guard:cf\");\n     }\n \n-    fn debuginfo(&mut self) {\n-        // This will cause the Microsoft linker to generate a PDB file\n-        // from the CodeView line tables in the object files.\n-        self.cmd.arg(\"/DEBUG\");\n-\n-        // This will cause the Microsoft linker to embed .natvis info into the PDB file\n-        let natvis_dir_path = self.sess.sysroot.join(\"lib\\\\rustlib\\\\etc\");\n-        if let Ok(natvis_dir) = fs::read_dir(&natvis_dir_path) {\n-            for entry in natvis_dir {\n-                match entry {\n-                    Ok(entry) => {\n-                        let path = entry.path();\n-                        if path.extension() == Some(\"natvis\".as_ref()) {\n-                            let mut arg = OsString::from(\"/NATVIS:\");\n-                            arg.push(path);\n-                            self.cmd.arg(arg);\n+    fn debuginfo(&mut self, strip: Strip) {\n+        match strip {\n+            Strip::None => {\n+                // This will cause the Microsoft linker to generate a PDB file\n+                // from the CodeView line tables in the object files.\n+                self.cmd.arg(\"/DEBUG\");\n+\n+                // This will cause the Microsoft linker to embed .natvis info into the PDB file\n+                let natvis_dir_path = self.sess.sysroot.join(\"lib\\\\rustlib\\\\etc\");\n+                if let Ok(natvis_dir) = fs::read_dir(&natvis_dir_path) {\n+                    for entry in natvis_dir {\n+                        match entry {\n+                            Ok(entry) => {\n+                                let path = entry.path();\n+                                if path.extension() == Some(\"natvis\".as_ref()) {\n+                                    let mut arg = OsString::from(\"/NATVIS:\");\n+                                    arg.push(path);\n+                                    self.cmd.arg(arg);\n+                                }\n+                            }\n+                            Err(err) => {\n+                                self.sess\n+                                    .warn(&format!(\"error enumerating natvis directory: {}\", err));\n+                            }\n                         }\n                     }\n-                    Err(err) => {\n-                        self.sess.warn(&format!(\"error enumerating natvis directory: {}\", err));\n-                    }\n                 }\n             }\n+            Strip::Debuginfo | Strip::Symbols => {\n+                self.cmd.arg(\"/DEBUG:NONE\");\n+            }\n         }\n     }\n \n@@ -889,7 +898,7 @@ impl<'a> Linker for EmLinker<'a> {\n         self.sess.warn(\"Windows Control Flow Guard is not supported by this linker.\");\n     }\n \n-    fn debuginfo(&mut self) {\n+    fn debuginfo(&mut self, _strip: Strip) {\n         // Preserve names or generate source maps depending on debug info\n         self.cmd.arg(match self.sess.opts.debuginfo {\n             DebugInfo::None => \"-g0\",\n@@ -1081,7 +1090,17 @@ impl<'a> Linker for WasmLd<'a> {\n \n     fn pgo_gen(&mut self) {}\n \n-    fn debuginfo(&mut self) {}\n+    fn debuginfo(&mut self, strip: Strip) {\n+        match strip {\n+            Strip::None => {}\n+            Strip::Debuginfo => {\n+                self.cmd.arg(\"--strip-debug\");\n+            }\n+            Strip::Symbols => {\n+                self.cmd.arg(\"--strip-all\");\n+            }\n+        }\n+    }\n \n     fn control_flow_guard(&mut self) {\n         self.sess.warn(\"Windows Control Flow Guard is not supported by this linker.\");\n@@ -1184,7 +1203,7 @@ impl<'a> Linker for PtxLinker<'a> {\n         self.cmd.arg(\"-L\").arg(path);\n     }\n \n-    fn debuginfo(&mut self) {\n+    fn debuginfo(&mut self, _strip: Strip) {\n         self.cmd.arg(\"--debug\");\n     }\n "}, {"sha": "dff78c3e053a45e07a875c16b12a3d580868fff0", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6c2f73b6e0d24af5396355886b26bb23885c37e/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c2f73b6e0d24af5396355886b26bb23885c37e/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=a6c2f73b6e0d24af5396355886b26bb23885c37e", "patch": "@@ -3,6 +3,7 @@ use crate::interface::parse_cfgspecs;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{emitter::HumanReadableErrorType, registry, ColorConfig};\n use rustc_middle::middle::cstore;\n+use rustc_session::config::Strip;\n use rustc_session::config::{build_configuration, build_session_options, to_crate_config};\n use rustc_session::config::{rustc_optgroups, ErrorOutputType, ExternLocation, Options, Passes};\n use rustc_session::config::{CFGuard, ExternEntry, LinkerPluginLto, LtoCli, SwitchWithOptPath};\n@@ -499,6 +500,7 @@ fn test_debugging_options_tracking_hash() {\n     untracked!(self_profile, SwitchWithOptPath::Enabled(None));\n     untracked!(self_profile_events, Some(vec![String::new()]));\n     untracked!(span_free_formats, true);\n+    untracked!(strip, Strip::None);\n     untracked!(terminal_width, Some(80));\n     untracked!(threads, 99);\n     untracked!(time, true);\n@@ -562,7 +564,6 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(share_generics, Some(true));\n     tracked!(show_span, Some(String::from(\"abc\")));\n     tracked!(src_hash_algorithm, Some(SourceFileHashAlgorithm::Sha1));\n-    tracked!(strip_debuginfo_if_disabled, true);\n     tracked!(symbol_mangling_version, SymbolManglingVersion::V0);\n     tracked!(teach, true);\n     tracked!(thinlto, Some(true));"}, {"sha": "402ed054be460c7b357626beebcbc96e532605f6", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a6c2f73b6e0d24af5396355886b26bb23885c37e/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c2f73b6e0d24af5396355886b26bb23885c37e/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=a6c2f73b6e0d24af5396355886b26bb23885c37e", "patch": "@@ -69,6 +69,19 @@ impl FromStr for Sanitizer {\n     }\n }\n \n+/// The different settings that the `-Z strip` flag can have.\n+#[derive(Clone, Copy, PartialEq, Hash, Debug)]\n+pub enum Strip {\n+    /// Do not strip at all.\n+    None,\n+\n+    /// Strip debuginfo.\n+    Debuginfo,\n+\n+    /// Strip all symbols.\n+    Symbols,\n+}\n+\n /// The different settings that the `-Z control_flow_guard` flag can have.\n #[derive(Clone, Copy, PartialEq, Hash, Debug)]\n pub enum CFGuard {"}, {"sha": "2c5ae1a259d414e8899b569888fee34c4d9eff35", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a6c2f73b6e0d24af5396355886b26bb23885c37e/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c2f73b6e0d24af5396355886b26bb23885c37e/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=a6c2f73b6e0d24af5396355886b26bb23885c37e", "patch": "@@ -253,6 +253,7 @@ macro_rules! options {\n         pub const parse_sanitizer_list: &str = \"comma separated list of sanitizers\";\n         pub const parse_sanitizer_memory_track_origins: &str = \"0, 1, or 2\";\n         pub const parse_cfguard: &str = \"either `disabled`, `nochecks`, or `checks`\";\n+        pub const parse_strip: &str = \"either `none`, `debuginfo`, or `symbols`\";\n         pub const parse_linker_flavor: &str = ::rustc_target::spec::LinkerFlavor::one_of();\n         pub const parse_optimization_fuel: &str = \"crate=integer\";\n         pub const parse_unpretty: &str = \"`string` or `string=string`\";\n@@ -491,6 +492,16 @@ macro_rules! options {\n             }\n         }\n \n+        fn parse_strip(slot: &mut Strip, v: Option<&str>) -> bool {\n+            match v {\n+                Some(\"none\") => *slot = Strip::None,\n+                Some(\"debuginfo\") => *slot = Strip::Debuginfo,\n+                Some(\"symbols\") => *slot = Strip::Symbols,\n+                _ => return false,\n+            }\n+            true\n+        }\n+\n         fn parse_cfguard(slot: &mut CFGuard, v: Option<&str>) -> bool {\n             match v {\n                 Some(\"disabled\") => *slot = CFGuard::Disabled,\n@@ -960,9 +971,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"exclude spans when debug-printing compiler state (default: no)\"),\n     src_hash_algorithm: Option<SourceFileHashAlgorithm> = (None, parse_src_file_hash, [TRACKED],\n         \"hash algorithm of source files in debug info (`md5`, or `sha1`)\"),\n-    strip_debuginfo_if_disabled: bool = (false, parse_bool, [TRACKED],\n-        \"tell the linker to strip debuginfo when building without debuginfo enabled \\\n-        (default: no)\"),\n+    strip: Strip = (Strip::None, parse_strip, [UNTRACKED],\n+        \"tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)\"),\n     symbol_mangling_version: SymbolManglingVersion = (SymbolManglingVersion::Legacy,\n         parse_symbol_mangling_version, [TRACKED],\n         \"which mangling version to use for symbol names\"),"}]}