{"sha": "4ecd7e6c0d25ed9a83bf94e49c63d0b6919c22f0", "node_id": "C_kwDOAAsO6NoAKDRlY2Q3ZTZjMGQyNWVkOWE4M2JmOTRlNDljNjNkMGI2OTE5YzIyZjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-02T15:05:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-02T15:05:28Z"}, "message": "Auto merge of #14720 - Veykril:boxed-slices, r=Veykril\n\ninternal: Use boxed slices instead ovecs in decl macros\n\nsaves another 10 mb on self (since we didn't shrink the vecs)", "tree": {"sha": "879d282e143f38bb8ce7b5520211761f9c0f0843", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/879d282e143f38bb8ce7b5520211761f9c0f0843"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ecd7e6c0d25ed9a83bf94e49c63d0b6919c22f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ecd7e6c0d25ed9a83bf94e49c63d0b6919c22f0", "html_url": "https://github.com/rust-lang/rust/commit/4ecd7e6c0d25ed9a83bf94e49c63d0b6919c22f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ecd7e6c0d25ed9a83bf94e49c63d0b6919c22f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a48e0e14e15abf47feae17e54d149eb443729375", "url": "https://api.github.com/repos/rust-lang/rust/commits/a48e0e14e15abf47feae17e54d149eb443729375", "html_url": "https://github.com/rust-lang/rust/commit/a48e0e14e15abf47feae17e54d149eb443729375"}, {"sha": "90499d4390402ae174f6a2e029b46ade92545496", "url": "https://api.github.com/repos/rust-lang/rust/commits/90499d4390402ae174f6a2e029b46ade92545496", "html_url": "https://github.com/rust-lang/rust/commit/90499d4390402ae174f6a2e029b46ade92545496"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "d640eea19a2e7078e185ebb6da693e03ee10a8de", "filename": "crates/mbe/src/benchmark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ecd7e6c0d25ed9a83bf94e49c63d0b6919c22f0/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecd7e6c0d25ed9a83bf94e49c63d0b6919c22f0/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fbenchmark.rs?ref=4ecd7e6c0d25ed9a83bf94e49c63d0b6919c22f0", "patch": "@@ -79,7 +79,7 @@ fn invocation_fixtures(rules: &FxHashMap<String, DeclarativeMacro>) -> Vec<(Stri\n     let mut res = Vec::new();\n \n     for (name, it) in rules {\n-        for rule in &it.rules {\n+        for rule in it.rules.iter() {\n             // Generate twice\n             for _ in 0..2 {\n                 // The input are generated by filling the `Op` randomly."}, {"sha": "80352aa4adc1e6a1c0b28164ea18e8b6ac21d80c", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ecd7e6c0d25ed9a83bf94e49c63d0b6919c22f0/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecd7e6c0d25ed9a83bf94e49c63d0b6919c22f0/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=4ecd7e6c0d25ed9a83bf94e49c63d0b6919c22f0", "patch": "@@ -104,7 +104,7 @@ impl fmt::Display for ExpandError {\n /// and `$()*` have special meaning (see `Var` and `Repeat` data structures)\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct DeclarativeMacro {\n-    rules: Vec<Rule>,\n+    rules: Box<[Rule]>,\n     /// Highest id of the token we have in TokenMap\n     shift: Shift,\n     // This is used for correctly determining the behavior of the pat fragment\n@@ -217,7 +217,7 @@ impl DeclarativeMacro {\n             validate(lhs)?;\n         }\n \n-        Ok(DeclarativeMacro { rules, shift: Shift::new(tt), is_2021 })\n+        Ok(DeclarativeMacro { rules: rules.into_boxed_slice(), shift: Shift::new(tt), is_2021 })\n     }\n \n     /// The new, unstable `macro m {}` flavor.\n@@ -250,7 +250,7 @@ impl DeclarativeMacro {\n             validate(lhs)?;\n         }\n \n-        Ok(DeclarativeMacro { rules, shift: Shift::new(tt), is_2021 })\n+        Ok(DeclarativeMacro { rules: rules.into_boxed_slice(), shift: Shift::new(tt), is_2021 })\n     }\n \n     pub fn expand(&self, tt: &tt::Subtree) -> ExpandResult<tt::Subtree> {"}, {"sha": "0fbf832b06df2a59e32e0e3cde4362c2316d53b6", "filename": "crates/mbe/src/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ecd7e6c0d25ed9a83bf94e49c63d0b6919c22f0/crates%2Fmbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecd7e6c0d25ed9a83bf94e49c63d0b6919c22f0/crates%2Fmbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fparser.rs?ref=4ecd7e6c0d25ed9a83bf94e49c63d0b6919c22f0", "patch": "@@ -20,7 +20,7 @@ use crate::{tt, tt_iter::TtIter, ParseError};\n /// Stuff to the right is a [`MetaTemplate`] template which is used to produce\n /// output.\n #[derive(Clone, Debug, PartialEq, Eq)]\n-pub(crate) struct MetaTemplate(pub(crate) Vec<Op>);\n+pub(crate) struct MetaTemplate(pub(crate) Box<[Op]>);\n \n impl MetaTemplate {\n     pub(crate) fn parse_pattern(pattern: &tt::Subtree) -> Result<MetaTemplate, ParseError> {\n@@ -44,7 +44,7 @@ impl MetaTemplate {\n             res.push(op);\n         }\n \n-        Ok(MetaTemplate(res))\n+        Ok(MetaTemplate(res.into_boxed_slice()))\n     }\n }\n "}]}