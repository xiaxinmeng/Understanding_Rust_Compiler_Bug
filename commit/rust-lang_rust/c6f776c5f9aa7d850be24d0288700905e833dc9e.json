{"sha": "c6f776c5f9aa7d850be24d0288700905e833dc9e", "node_id": "C_kwDOAAsO6NoAKGM2Zjc3NmM1ZjlhYTdkODUwYmUyNGQwMjg4NzAwOTA1ZTgzM2RjOWU", "commit": {"author": {"name": "Raymond Luo", "email": "ray.luo@nyu.edu", "date": "2022-06-21T01:10:45Z"}, "committer": {"name": "Raymond Luo", "email": "ray.luo@nyu.edu", "date": "2022-06-21T01:10:45Z"}, "message": "determine doc link type from start instead of text or code", "tree": {"sha": "410a6fb3b220aeb46674816811f2aaa21ccfc8ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/410a6fb3b220aeb46674816811f2aaa21ccfc8ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6f776c5f9aa7d850be24d0288700905e833dc9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6f776c5f9aa7d850be24d0288700905e833dc9e", "html_url": "https://github.com/rust-lang/rust/commit/c6f776c5f9aa7d850be24d0288700905e833dc9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6f776c5f9aa7d850be24d0288700905e833dc9e/comments", "author": {"login": "erhuve", "id": 59463268, "node_id": "MDQ6VXNlcjU5NDYzMjY4", "avatar_url": "https://avatars.githubusercontent.com/u/59463268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erhuve", "html_url": "https://github.com/erhuve", "followers_url": "https://api.github.com/users/erhuve/followers", "following_url": "https://api.github.com/users/erhuve/following{/other_user}", "gists_url": "https://api.github.com/users/erhuve/gists{/gist_id}", "starred_url": "https://api.github.com/users/erhuve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erhuve/subscriptions", "organizations_url": "https://api.github.com/users/erhuve/orgs", "repos_url": "https://api.github.com/users/erhuve/repos", "events_url": "https://api.github.com/users/erhuve/events{/privacy}", "received_events_url": "https://api.github.com/users/erhuve/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erhuve", "id": 59463268, "node_id": "MDQ6VXNlcjU5NDYzMjY4", "avatar_url": "https://avatars.githubusercontent.com/u/59463268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erhuve", "html_url": "https://github.com/erhuve", "followers_url": "https://api.github.com/users/erhuve/followers", "following_url": "https://api.github.com/users/erhuve/following{/other_user}", "gists_url": "https://api.github.com/users/erhuve/gists{/gist_id}", "starred_url": "https://api.github.com/users/erhuve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erhuve/subscriptions", "organizations_url": "https://api.github.com/users/erhuve/orgs", "repos_url": "https://api.github.com/users/erhuve/repos", "events_url": "https://api.github.com/users/erhuve/events{/privacy}", "received_events_url": "https://api.github.com/users/erhuve/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb9b36075272013984ac5d27128e87a714b90c9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb9b36075272013984ac5d27128e87a714b90c9a", "html_url": "https://github.com/rust-lang/rust/commit/eb9b36075272013984ac5d27128e87a714b90c9a"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "a78358f20fd9e3e3aac75be0ca38944da280471c", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c6f776c5f9aa7d850be24d0288700905e833dc9e/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f776c5f9aa7d850be24d0288700905e833dc9e/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=c6f776c5f9aa7d850be24d0288700905e833dc9e", "patch": "@@ -362,14 +362,15 @@ fn map_links<'e>(\n     // holds the origin link target on start event and the rewritten one on end event\n     let mut end_link_target: Option<CowStr> = None;\n     // normally link's type is determined by the type of link tag in the end event,\n-    // however in same cases we want to change the link type, for example,\n+    // however in some cases we want to change the link type, for example,\n     // `Shortcut` type doesn't make sense for url links\n     let mut end_link_type: Option<LinkType> = None;\n \n     events.map(move |evt| match evt {\n-        Event::Start(Tag::Link(_, ref target, _)) => {\n+        Event::Start(Tag::Link(link_type, ref target, _)) => {\n             in_link = true;\n             end_link_target = Some(target.clone());\n+            end_link_type = Some(link_type);\n             evt\n         }\n         Event::End(Tag::Link(link_type, target, _)) => {\n@@ -381,17 +382,13 @@ fn map_links<'e>(\n             ))\n         }\n         Event::Text(s) if in_link => {\n-            let (link_type, link_target_s, link_name) =\n-                callback(&end_link_target.take().unwrap(), &s);\n+            let (_, link_target_s, link_name) = callback(&end_link_target.take().unwrap(), &s);\n             end_link_target = Some(CowStr::Boxed(link_target_s.into()));\n-            end_link_type = link_type;\n             Event::Text(CowStr::Boxed(link_name.into()))\n         }\n         Event::Code(s) if in_link => {\n-            let (link_type, link_target_s, link_name) =\n-                callback(&end_link_target.take().unwrap(), &s);\n+            let (_, link_target_s, link_name) = callback(&end_link_target.take().unwrap(), &s);\n             end_link_target = Some(CowStr::Boxed(link_target_s.into()));\n-            end_link_type = link_type;\n             Event::Code(CowStr::Boxed(link_name.into()))\n         }\n         _ => evt,"}]}