{"sha": "936c6950e78d073f54c9ba66795f7f6f3abb351b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNmM2OTUwZTc4ZDA3M2Y1NGM5YmE2Njc5NWY3ZjZmM2FiYjM1MWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-26T18:25:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-26T18:32:39Z"}, "message": "Remove last traces of adt from Ty", "tree": {"sha": "1fef7d393443373acb459f98adf6a3ba6100261f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fef7d393443373acb459f98adf6a3ba6100261f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/936c6950e78d073f54c9ba66795f7f6f3abb351b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/936c6950e78d073f54c9ba66795f7f6f3abb351b", "html_url": "https://github.com/rust-lang/rust/commit/936c6950e78d073f54c9ba66795f7f6f3abb351b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/936c6950e78d073f54c9ba66795f7f6f3abb351b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "882fe0a47ee6f60928395326d1f194eec521ce2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/882fe0a47ee6f60928395326d1f194eec521ce2e", "html_url": "https://github.com/rust-lang/rust/commit/882fe0a47ee6f60928395326d1f194eec521ce2e"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "a842dfed6d63ae3217c56ecfbe54dcee66c38280", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936c6950e78d073f54c9ba66795f7f6f3abb351b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c6950e78d073f54c9ba66795f7f6f3abb351b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=936c6950e78d073f54c9ba66795f7f6f3abb351b", "patch": "@@ -1104,7 +1104,7 @@ impl Type {\n \n     pub fn as_adt(&self) -> Option<Adt> {\n         let (adt, _subst) = self.ty.value.as_adt()?;\n-        Some(adt)\n+        Some(adt.into())\n     }\n \n     fn derived(&self, ty: Ty) -> Type {"}, {"sha": "5c82c23d6c738af24cd92c6ee216746e9ef59751", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/936c6950e78d073f54c9ba66795f7f6f3abb351b/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c6950e78d073f54c9ba66795f7f6f3abb351b/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=936c6950e78d073f54c9ba66795f7f6f3abb351b", "patch": "@@ -12,7 +12,7 @@ use crate::{\n     db::HirDatabase,\n     diagnostics::{MissingFields, MissingOkInTailExpr},\n     ty::{ApplicationTy, InferenceResult, Ty, TypeCtor},\n-    Adt, Function, Name, Path,\n+    Function, Name, Path, Struct,\n };\n \n pub use hir_def::{\n@@ -69,7 +69,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         }\n \n         let struct_def = match self.infer[id].as_adt() {\n-            Some((Adt::Struct(s), _)) => s,\n+            Some((AdtId::StructId(s), _)) => Struct::from(s),\n             _ => return,\n         };\n "}, {"sha": "791b6064ac48f12ee510056d5ee0c6d7932936fb", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/936c6950e78d073f54c9ba66795f7f6f3abb351b/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936c6950e78d073f54c9ba66795f7f6f3abb351b/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=936c6950e78d073f54c9ba66795f7f6f3abb351b", "patch": "@@ -22,13 +22,14 @@ use hir_def::{\n     expr::ExprId, generics::GenericParams, type_ref::Mutability, AdtId, ContainerId, DefWithBodyId,\n     GenericDefId, HasModule, Lookup, TraitId, TypeAliasId,\n };\n+use hir_expand::name::Name;\n use ra_db::{impl_intern_key, salsa};\n \n use crate::{\n     db::HirDatabase,\n     ty::primitive::{FloatTy, IntTy, Uncertain},\n     util::make_mut_slice,\n-    Adt, Crate, Name,\n+    Crate,\n };\n use display::{HirDisplay, HirFormatter};\n \n@@ -598,10 +599,10 @@ impl Ty {\n         }\n     }\n \n-    pub fn as_adt(&self) -> Option<(Adt, &Substs)> {\n+    pub fn as_adt(&self) -> Option<(AdtId, &Substs)> {\n         match self {\n             Ty::Apply(ApplicationTy { ctor: TypeCtor::Adt(adt_def), parameters }) => {\n-                Some(((*adt_def).into(), parameters))\n+                Some((*adt_def, parameters))\n             }\n             _ => None,\n         }"}]}