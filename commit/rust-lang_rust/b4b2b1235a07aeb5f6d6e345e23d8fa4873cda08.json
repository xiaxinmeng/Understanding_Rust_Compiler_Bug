{"sha": "b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08", "node_id": "C_kwDOAAsO6NoAKGI0YjJiMTIzNWEwN2FlYjVmNmQ2ZTM0NWUyM2Q4ZmE0ODczY2RhMDg", "commit": {"author": {"name": "unexge", "email": "unexge@gmail.com", "date": "2023-02-18T19:18:52Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2023-03-08T08:51:50Z"}, "message": "Revert \"Dogfood `missing_assert_message` on Clippy\"\n\nThis reverts commit ec653570ad50d11ecc3b5649dd28e29ed96199d3.", "tree": {"sha": "1fa1635d2f775eb40b997099c0b3e0543a33c082", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fa1635d2f775eb40b997099c0b3e0543a33c082"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08", "html_url": "https://github.com/rust-lang/rust/commit/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fac73b9874ea79fbac5f0fa9429c726c196d9a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fac73b9874ea79fbac5f0fa9429c726c196d9a6", "html_url": "https://github.com/rust-lang/rust/commit/6fac73b9874ea79fbac5f0fa9429c726c196d9a6"}], "stats": {"total": 52, "additions": 18, "deletions": 34}, "files": [{"sha": "384aca7feadd6d6939f383855bdae1da6778663e", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08", "patch": "@@ -467,7 +467,7 @@ pub fn strip_doc_comment_decoration(doc: &str, comment_kind: CommentKind, span:\n     let mut contains_initial_stars = false;\n     for line in doc.lines() {\n         let offset = line.as_ptr() as usize - doc.as_ptr() as usize;\n-        debug_assert_eq!(offset as u32 as usize, offset, \"`offset` shouldn't overflow `u32`\");\n+        debug_assert_eq!(offset as u32 as usize, offset);\n         contains_initial_stars |= line.trim_start().starts_with('*');\n         // +1 adds the newline, +3 skips the opening delimiter\n         sizes.push((line.len() + 1, span.with_lo(span.lo() + BytePos(3 + offset as u32))));"}, {"sha": "7ff7068f0b05e56aec583ec5dd066ab280109193", "filename": "clippy_lints/src/duplicate_mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/clippy_lints%2Fsrc%2Fduplicate_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/clippy_lints%2Fsrc%2Fduplicate_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduplicate_mod.rs?ref=b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08", "patch": "@@ -90,11 +90,7 @@ impl EarlyLintPass for DuplicateMod {\n             }\n \n             // At this point the lint would be emitted\n-            assert_eq!(\n-                spans.len(),\n-                lint_levels.len(),\n-                \"`spans` and `lint_levels` should have equal lengths\"\n-            );\n+            assert_eq!(spans.len(), lint_levels.len());\n             let spans: Vec<_> = spans\n                 .iter()\n                 .zip(lint_levels)"}, {"sha": "4c69dacf381ad66b9ce96ca0baacd6fc3ba5fc63", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08", "patch": "@@ -242,7 +242,7 @@ fn to_camel_case(item_name: &str) -> String {\n impl LateLintPass<'_> for EnumVariantNames {\n     fn check_item_post(&mut self, _cx: &LateContext<'_>, _item: &Item<'_>) {\n         let last = self.modules.pop();\n-        assert!(last.is_some(), \"`modules` should not be empty\");\n+        assert!(last.is_some());\n     }\n \n     #[expect(clippy::similar_names)]"}, {"sha": "9f6917c146f633d6fb58279644ee7e626fe624f0", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08", "patch": "@@ -408,10 +408,7 @@ fn do_check(lint: &mut NonExpressiveNames, cx: &EarlyContext<'_>, attrs: &[Attri\n /// Precondition: `a_name.chars().count() < b_name.chars().count()`.\n #[must_use]\n fn levenstein_not_1(a_name: &str, b_name: &str) -> bool {\n-    debug_assert!(\n-        a_name.chars().count() < b_name.chars().count(),\n-        \"Precondition: `a_name.chars().count() < b_name.chars().count()` does not meet\"\n-    );\n+    debug_assert!(a_name.chars().count() < b_name.chars().count());\n     let mut a_chars = a_name.chars();\n     let mut b_chars = b_name.chars();\n     while let (Some(a), Some(b)) = (a_chars.next(), b_chars.next()) {"}, {"sha": "7987a233bdc184b960f9c53fbd4b9d2c0d0c7619", "filename": "clippy_utils/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/clippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/clippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fattrs.rs?ref=b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08", "patch": "@@ -31,7 +31,7 @@ pub struct LimitStack {\n \n impl Drop for LimitStack {\n     fn drop(&mut self) {\n-        assert_eq!(self.stack.len(), 1, \"stack should only have one element\");\n+        assert_eq!(self.stack.len(), 1);\n     }\n }\n \n@@ -49,9 +49,7 @@ impl LimitStack {\n     }\n     pub fn pop_attrs(&mut self, sess: &Session, attrs: &[ast::Attribute], name: &'static str) {\n         let stack = &mut self.stack;\n-        parse_attrs(sess, attrs, name, |val| {\n-            assert_eq!(stack.pop(), Some(val), \"incorrect last element\");\n-        });\n+        parse_attrs(sess, attrs, name, |val| assert_eq!(stack.pop(), Some(val)));\n     }\n }\n "}, {"sha": "213e5b33503e6ef974abfb63958c82b2be0a9681", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08", "patch": "@@ -1011,13 +1011,10 @@ pub fn capture_local_usage(cx: &LateContext<'_>, e: &Expr<'_>) -> CaptureKind {\n         capture\n     }\n \n-    debug_assert!(\n-        matches!(\n-            e.kind,\n-            ExprKind::Path(QPath::Resolved(None, Path { res: Res::Local(_), .. }))\n-        ),\n-        \"`e.kind` should be a resolved local path\"\n-    );\n+    debug_assert!(matches!(\n+        e.kind,\n+        ExprKind::Path(QPath::Resolved(None, Path { res: Res::Local(_), .. }))\n+    ));\n \n     let mut child_id = e.hir_id;\n     let mut capture = CaptureKind::Value;"}, {"sha": "c225398ad2a8fdfed1a54fec623970ef62f0e8ec", "filename": "clippy_utils/src/numeric_literal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fnumeric_literal.rs?ref=b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08", "patch": "@@ -179,7 +179,7 @@ impl<'a> NumericLiteral<'a> {\n     }\n \n     pub fn group_digits(output: &mut String, input: &str, group_size: usize, partial_group_first: bool, pad: bool) {\n-        debug_assert!(group_size > 0, \"group size should be greater than zero\");\n+        debug_assert!(group_size > 0);\n \n         let mut digits = input.chars().filter(|&c| c != '_');\n \n@@ -219,7 +219,7 @@ impl<'a> NumericLiteral<'a> {\n }\n \n fn split_suffix<'a>(src: &'a str, lit_kind: &LitKind) -> (&'a str, Option<&'a str>) {\n-    debug_assert!(lit_kind.is_numeric(), \"`lit_kind` should be numeric\");\n+    debug_assert!(lit_kind.is_numeric());\n     lit_suffix_length(lit_kind)\n         .and_then(|suffix_length| src.len().checked_sub(suffix_length))\n         .map_or((src, None), |split_pos| {\n@@ -229,7 +229,7 @@ fn split_suffix<'a>(src: &'a str, lit_kind: &LitKind) -> (&'a str, Option<&'a st\n }\n \n fn lit_suffix_length(lit_kind: &LitKind) -> Option<usize> {\n-    debug_assert!(lit_kind.is_numeric(), \"`lit_kind` should be numeric\");\n+    debug_assert!(lit_kind.is_numeric());\n     let suffix = match lit_kind {\n         LitKind::Int(_, int_lit_kind) => match int_lit_kind {\n             LitIntType::Signed(int_ty) => Some(int_ty.name_str()),"}, {"sha": "7cbb77ea2a8b145cfa30729d0efc61887a537ffa", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08", "patch": "@@ -225,7 +225,8 @@ pub fn implements_trait_with_env<'tcx>(\n     trait_id: DefId,\n     ty_params: impl IntoIterator<Item = Option<GenericArg<'tcx>>>,\n ) -> bool {\n-    assert!(!ty.needs_infer(), \"Clippy shouldn't have infer types\");\n+    // Clippy shouldn't have infer types\n+    assert!(!ty.needs_infer());\n \n     let ty = tcx.erase_regions(ty);\n     if ty.has_escaping_bound_vars() {"}, {"sha": "23c85298027597f33bcef3cec8ff5a591f64982c", "filename": "lintcheck/src/main.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/lintcheck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/lintcheck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fmain.rs?ref=b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08", "patch": "@@ -383,7 +383,7 @@ impl Crate {\n                 .status()\n                 .expect(\"failed to run cargo\");\n \n-            assert_eq!(status.code(), Some(0), \"`cargo check` exited with non-zero code\");\n+            assert_eq!(status.code(), Some(0));\n \n             return Vec::new();\n         }\n@@ -741,7 +741,6 @@ fn print_stats(old_stats: HashMap<String, usize>, new_stats: HashMap<&String, us\n     let mut new_stats_deduped = new_stats;\n \n     // remove duplicates from both hashmaps\n-    #[allow(clippy::missing_assert_message)]\n     for (k, v) in &same_in_both_hashmaps {\n         assert!(old_stats_deduped.remove(k) == Some(*v));\n         assert!(new_stats_deduped.remove(k) == Some(*v));"}, {"sha": "c10ee969c014620b996dafa32d94367d10db825a", "filename": "tests/compile-test.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08", "patch": "@@ -410,10 +410,7 @@ fn check_rustfix_coverage() {\n     };\n \n     if let Ok(missing_coverage_contents) = std::fs::read_to_string(missing_coverage_path) {\n-        assert!(\n-            RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS.iter().is_sorted_by_key(Path::new),\n-            \"`RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS` should be sorted\"\n-        );\n+        assert!(RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS.iter().is_sorted_by_key(Path::new));\n \n         for rs_file in missing_coverage_contents.lines() {\n             let rs_path = Path::new(rs_file);"}, {"sha": "a771d8b87c81a4bcec3b0ed4cd14829bcad2f191", "filename": "tests/integration.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/tests%2Fintegration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/tests%2Fintegration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fintegration.rs?ref=b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08", "patch": "@@ -21,7 +21,6 @@ const CARGO_CLIPPY: &str = \"cargo-clippy\";\n const CARGO_CLIPPY: &str = \"cargo-clippy.exe\";\n \n #[cfg_attr(feature = \"integration\", test)]\n-#[allow(clippy::missing_assert_message)]\n fn integration_test() {\n     let repo_name = env::var(\"INTEGRATION\").expect(\"`INTEGRATION` var not set\");\n     let repo_url = format!(\"https://github.com/{repo_name}\");"}, {"sha": "ea8c54e08b33806ca6bad8e4420618530d671632", "filename": "tests/test_utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/tests%2Ftest_utils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08/tests%2Ftest_utils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftest_utils%2Fmod.rs?ref=b4b2b1235a07aeb5f6d6e345e23d8fa4873cda08", "patch": "@@ -5,7 +5,7 @@ use std::sync::LazyLock;\n \n pub static CARGO_CLIPPY_PATH: LazyLock<PathBuf> = LazyLock::new(|| {\n     let mut path = std::env::current_exe().unwrap();\n-    assert!(path.pop(), \"current running executable path shouldn't be empty\"); // deps\n+    assert!(path.pop()); // deps\n     path.set_file_name(\"cargo-clippy\");\n     path\n });"}]}