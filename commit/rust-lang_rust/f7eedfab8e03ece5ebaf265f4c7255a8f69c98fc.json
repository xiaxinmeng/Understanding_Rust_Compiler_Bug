{"sha": "f7eedfab8e03ece5ebaf265f4c7255a8f69c98fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZWVkZmFiOGUwM2VjZTVlYmFmMjY1ZjRjNzI1NWE4ZjY5Yzk4ZmM=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-04T12:50:29Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-04T12:50:29Z"}, "message": "Simplify value field access", "tree": {"sha": "1df327668723a3b43a0b2610964eae1eeb5befaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1df327668723a3b43a0b2610964eae1eeb5befaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7eedfab8e03ece5ebaf265f4c7255a8f69c98fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7eedfab8e03ece5ebaf265f4c7255a8f69c98fc", "html_url": "https://github.com/rust-lang/rust/commit/f7eedfab8e03ece5ebaf265f4c7255a8f69c98fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7eedfab8e03ece5ebaf265f4c7255a8f69c98fc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47f37d67f14ef50829c4ff95a3a27a680fd4e1ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/47f37d67f14ef50829c4ff95a3a27a680fd4e1ba", "html_url": "https://github.com/rust-lang/rust/commit/47f37d67f14ef50829c4ff95a3a27a680fd4e1ba"}], "stats": {"total": 69, "additions": 30, "deletions": 39}, "files": [{"sha": "51b33fa54b249e517d44f2674b704d66ddb42ab8", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f7eedfab8e03ece5ebaf265f4c7255a8f69c98fc/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7eedfab8e03ece5ebaf265f4c7255a8f69c98fc/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=f7eedfab8e03ece5ebaf265f4c7255a8f69c98fc", "patch": "@@ -120,29 +120,42 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         variant: Option<usize>,\n         field: mir::Field,\n         base_ty: Ty<'tcx>,\n-    ) -> EvalResult<'tcx, Option<(Value, Ty<'tcx>)>> {\n+    ) -> EvalResult<'tcx, ValTy<'tcx>> {\n         let mut base_layout = self.layout_of(base_ty)?;\n         if let Some(variant_index) = variant {\n             base_layout = base_layout.for_variant(self, variant_index);\n         }\n         let field_index = field.index();\n         let field = base_layout.field(self, field_index)?;\n         if field.size.bytes() == 0 {\n-            return Ok(Some((Value::Scalar(Scalar::undef()), field.ty)))\n+            return Ok(ValTy {\n+                value: Value::Scalar(Scalar::undef()),\n+                ty: field.ty,\n+            });\n         }\n         let offset = base_layout.fields.offset(field_index);\n-        match base {\n+        let value = match base {\n             // the field covers the entire type\n             Value::ScalarPair(..) |\n-            Value::Scalar(_) if offset.bytes() == 0 && field.size == base_layout.size => Ok(Some((base, field.ty))),\n-            // split fat pointers, 2 element tuples, ...\n+            Value::Scalar(_) if offset.bytes() == 0 && field.size == base_layout.size => base,\n+            // extract fields from types with `ScalarPair` ABI\n             Value::ScalarPair(a, b) => {\n                 let val = if offset.bytes() == 0 { a } else { b };\n-                Ok(Some((Value::Scalar(val), field.ty)))\n+                Value::Scalar(val)\n             },\n-            // FIXME(oli-obk): figure out whether we should be calling `try_read_value` here\n-            _ => Ok(None),\n-        }\n+            Value::ByRef(base_ptr, align) => {\n+                let offset = base_layout.fields.offset(field_index);\n+                let ptr = base_ptr.ptr_offset(offset, self)?;\n+                let align = align.min(base_layout.align).min(field.align);\n+                assert!(!field.is_unsized());\n+                Value::ByRef(ptr, align)\n+            },\n+            Value::Scalar(val) => bug!(\"field access on non aggregate {:?}, {:?}\", val, base_ty),\n+        };\n+        Ok(ValTy {\n+            value,\n+            ty: field.ty,\n+        })\n     }\n \n     fn try_read_place_projection(\n@@ -156,7 +169,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         };\n         let base_ty = self.place_ty(&proj.base);\n         match proj.elem {\n-            Field(field, _) => Ok(self.read_field(base, None, field, base_ty)?.map(|(f, _)| f)),\n+            Field(field, _) => Ok(Some(self.read_field(base, None, field, base_ty)?.value)),\n             // The NullablePointer cases should work fine, need to take care for normal enums\n             Downcast(..) |\n             Subslice { .. } |"}, {"sha": "2994b1b387f3fa37c2e47a3621246da76bfbaef9", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 4, "deletions": 26, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f7eedfab8e03ece5ebaf265f4c7255a8f69c98fc/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7eedfab8e03ece5ebaf265f4c7255a8f69c98fc/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=f7eedfab8e03ece5ebaf265f4c7255a8f69c98fc", "patch": "@@ -4,7 +4,7 @@ use rustc::ty::layout::LayoutOf;\n use syntax::codemap::Span;\n use rustc_target::spec::abi::Abi;\n \n-use rustc::mir::interpret::{EvalResult, Value};\n+use rustc::mir::interpret::EvalResult;\n use super::{EvalContext, Place, Machine, ValTy};\n \n use rustc_data_structures::indexed_vec::Idx;\n@@ -345,31 +345,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                             }\n                             if self.frame().mir.args_iter().count() == layout.fields.count() + 1 {\n                                 for (i, arg_local) in arg_locals.enumerate() {\n-                                    let field = layout.field(&self, i)?;\n-                                    if field.is_zst() {\n-                                        continue;\n-                                    }\n-                                    let offset = layout.fields.offset(i);\n-                                    let value = match args[1].value {\n-                                        Value::ByRef(ptr, align) => Value::ByRef(\n-                                            ptr.ptr_offset(offset, &self)?,\n-                                            align.min(field.align),\n-                                        ),\n-                                        other if field.size == layout.size => {\n-                                            // this is the case where the field covers the entire type\n-                                            assert_eq!(offset.bytes(), 0);\n-                                            other\n-                                        },\n-                                        Value::ScalarPair(a, _) if offset.bytes() == 0 => Value::Scalar(a),\n-                                        Value::ScalarPair(_, b) => Value::Scalar(b),\n-                                        Value::Scalar(_) => bug!(\"Scalar does not cover entire type\"),\n-                                    };\n-                                    let dest =\n-                                        self.eval_place(&mir::Place::Local(arg_local))?;\n-                                    let valty = ValTy {\n-                                        value,\n-                                        ty: field.ty,\n-                                    };\n+                                    let field = mir::Field::new(i);\n+                                    let valty = self.read_field(args[1].value, None, field, args[1].ty)?;\n+                                    let dest = self.eval_place(&mir::Place::Local(arg_local))?;\n                                     self.write_value(valty, dest)?;\n                                 }\n                             } else {"}, {"sha": "40a6610c4173caab16c2f96816f9e4e68748640a", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7eedfab8e03ece5ebaf265f4c7255a8f69c98fc/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7eedfab8e03ece5ebaf265f4c7255a8f69c98fc/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=f7eedfab8e03ece5ebaf265f4c7255a8f69c98fc", "patch": "@@ -214,10 +214,10 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                 ProjectionElem::Field(field, _) => {\n                     trace!(\"field proj on {:?}\", proj.base);\n                     let (base, ty, span) = self.eval_place(&proj.base)?;\n-                    let (value, field_ty) = self.use_ecx(span, |this| {\n+                    let valty = self.use_ecx(span, |this| {\n                         this.ecx.read_field(base, None, field, ty)\n-                    })??;\n-                    Some((value, field_ty, span))\n+                    })?;\n+                    Some((valty.value, valty.ty, span))\n                 },\n                 _ => None,\n             },"}]}