{"sha": "2dbcf0841a81fbada9a2b3af253b62b30a8318cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYmNmMDg0MWE4MWZiYWRhOWEyYjNhZjI1M2I2MmIzMGE4MzE4Y2M=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-10T19:50:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-10T19:50:45Z"}, "message": "Rollup merge of #66045 - mzabaluev:unwrap-infallible, r=dtolnay\n\nAdd method Result::into_ok\n\nImplementation of https://github.com/rust-lang/rfcs/pull/2799\n\nTracking issue #61695", "tree": {"sha": "d505e70506be89f42026b296a4adece3135ae1d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d505e70506be89f42026b296a4adece3135ae1d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dbcf0841a81fbada9a2b3af253b62b30a8318cc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeGNWVCRBK7hj4Ov3rIwAAdHIIAIuD7Iw84p/n6TILPSeqLBCW\nOC3DbarVNWbB/kKmmfsutyPjfRJOH2w69G+V18gnUI1/Z7HJmbqPv+Q6pR6+Uxan\nnfaVriQXVsMYOQLR6D3DctIBewfnSsOU9Ov/K1qWMKD9caLam1FYN+718836stZB\nbL4kA3Kvw4Ys+/Hfh2OFFS5RekDjO6lBQLlLckar/pan7NYajrpgHejE2FXGaXKz\nGK5JxuIYj/wjpyzENtv1LT9OzDfrhdAZ8xritVrM/73Y+QtxQKOptlJ1XIi2vo1A\nAHz4Ua0LQENGx6bkTQ3b3CuM5SPbV2RPqjF8JOeaGkHSgom4E15teP8afFy07Os=\n=5DqO\n-----END PGP SIGNATURE-----\n", "payload": "tree d505e70506be89f42026b296a4adece3135ae1d6\nparent f795e8a216b44982706d41e5cbfa245d13b83fc1\nparent 6f0672c08b7609c7ed77245a3feea3040221b804\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1578685845 +0900\ncommitter GitHub <noreply@github.com> 1578685845 +0900\n\nRollup merge of #66045 - mzabaluev:unwrap-infallible, r=dtolnay\n\nAdd method Result::into_ok\n\nImplementation of https://github.com/rust-lang/rfcs/pull/2799\n\nTracking issue #61695\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dbcf0841a81fbada9a2b3af253b62b30a8318cc", "html_url": "https://github.com/rust-lang/rust/commit/2dbcf0841a81fbada9a2b3af253b62b30a8318cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dbcf0841a81fbada9a2b3af253b62b30a8318cc/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f795e8a216b44982706d41e5cbfa245d13b83fc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f795e8a216b44982706d41e5cbfa245d13b83fc1", "html_url": "https://github.com/rust-lang/rust/commit/f795e8a216b44982706d41e5cbfa245d13b83fc1"}, {"sha": "6f0672c08b7609c7ed77245a3feea3040221b804", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f0672c08b7609c7ed77245a3feea3040221b804", "html_url": "https://github.com/rust-lang/rust/commit/6f0672c08b7609c7ed77245a3feea3040221b804"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "aa57c7788c60ca1817a8539f74dc5230f209f755", "filename": "src/libcore/result.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2dbcf0841a81fbada9a2b3af253b62b30a8318cc/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbcf0841a81fbada9a2b3af253b62b30a8318cc/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=2dbcf0841a81fbada9a2b3af253b62b30a8318cc", "patch": "@@ -1092,6 +1092,44 @@ impl<T: Default, E> Result<T, E> {\n     }\n }\n \n+#[unstable(feature = \"unwrap_infallible\", reason = \"newly added\", issue = \"61695\")]\n+impl<T, E: Into<!>> Result<T, E> {\n+    /// Unwraps a result that can never be an [`Err`], yielding the content of the [`Ok`].\n+    ///\n+    /// Unlike [`unwrap`], this method is known to never panic on the\n+    /// result types it is implemented for. Therefore, it can be used\n+    /// instead of `unwrap` as a maintainability safeguard that will fail\n+    /// to compile if the error type of the `Result` is later changed\n+    /// to an error that can actually occur.\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n+    /// [`unwrap`]: enum.Result.html#method.unwrap\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// # #![feature(never_type)]\n+    /// # #![feature(unwrap_infallible)]\n+    ///\n+    /// fn only_good_news() -> Result<String, !> {\n+    ///     Ok(\"this is fine\".into())\n+    /// }\n+    ///\n+    /// let s: String = only_good_news().into_ok();\n+    /// println!(\"{}\", s);\n+    /// ```\n+    #[inline]\n+    pub fn into_ok(self) -> T {\n+        match self {\n+            Ok(x) => x,\n+            Err(e) => e.into(),\n+        }\n+    }\n+}\n+\n #[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n impl<T: Deref, E> Result<T, E> {\n     /// Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&T::Target, &E>`."}, {"sha": "09b54857f7dec711b9e6dbed1d25d71b6f14b85d", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbcf0841a81fbada9a2b3af253b62b30a8318cc/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbcf0841a81fbada9a2b3af253b62b30a8318cc/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=2dbcf0841a81fbada9a2b3af253b62b30a8318cc", "patch": "@@ -40,6 +40,8 @@\n #![feature(slice_from_raw_parts)]\n #![feature(const_slice_from_raw_parts)]\n #![feature(const_raw_ptr_deref)]\n+#![feature(never_type)]\n+#![feature(unwrap_infallible)]\n \n extern crate test;\n "}, {"sha": "254d4539eaccf213448ab35a62fdae1f0963e450", "filename": "src/libcore/tests/result.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2dbcf0841a81fbada9a2b3af253b62b30a8318cc/src%2Flibcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbcf0841a81fbada9a2b3af253b62b30a8318cc/src%2Flibcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fresult.rs?ref=2dbcf0841a81fbada9a2b3af253b62b30a8318cc", "patch": "@@ -183,6 +183,28 @@ pub fn test_unwrap_or_default() {\n     assert_eq!(op2().unwrap_or_default(), 0);\n }\n \n+#[test]\n+pub fn test_into_ok() {\n+    fn infallible_op() -> Result<isize, !> {\n+        Ok(666)\n+    }\n+\n+    assert_eq!(infallible_op().into_ok(), 666);\n+\n+    enum MyNeverToken {}\n+    impl From<MyNeverToken> for ! {\n+        fn from(never: MyNeverToken) -> ! {\n+            match never {}\n+        }\n+    }\n+\n+    fn infallible_op2() -> Result<isize, MyNeverToken> {\n+        Ok(667)\n+    }\n+\n+    assert_eq!(infallible_op2().into_ok(), 667);\n+}\n+\n #[test]\n fn test_try() {\n     fn try_result_some() -> Option<u8> {"}]}