{"sha": "08dc0e21af8c3b7aeeac8cb428df02d83f514083", "node_id": "C_kwDOAAsO6NoAKDA4ZGMwZTIxYWY4YzNiN2FlZWFjOGNiNDI4ZGYwMmQ4M2Y1MTQwODM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-15T17:35:27Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-15T17:35:27Z"}, "message": "feat: Render hover actions for closure captures and sig", "tree": {"sha": "bea55b38818ab5173ac459f6a8f9935953f48ff0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bea55b38818ab5173ac459f6a8f9935953f48ff0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08dc0e21af8c3b7aeeac8cb428df02d83f514083", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08dc0e21af8c3b7aeeac8cb428df02d83f514083", "html_url": "https://github.com/rust-lang/rust/commit/08dc0e21af8c3b7aeeac8cb428df02d83f514083", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08dc0e21af8c3b7aeeac8cb428df02d83f514083/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f8cd66fb4c98026d2bdbdf17270e3472e1ca42a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f8cd66fb4c98026d2bdbdf17270e3472e1ca42a", "html_url": "https://github.com/rust-lang/rust/commit/2f8cd66fb4c98026d2bdbdf17270e3472e1ca42a"}], "stats": {"total": 147, "additions": 131, "deletions": 16}, "files": [{"sha": "907c94ea6b19352cf0772e7e13707a40dc2b3c0b", "filename": "crates/hir-ty/src/infer/closure.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08dc0e21af8c3b7aeeac8cb428df02d83f514083/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08dc0e21af8c3b7aeeac8cb428df02d83f514083/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs?ref=08dc0e21af8c3b7aeeac8cb428df02d83f514083", "patch": "@@ -166,6 +166,10 @@ impl CapturedItem {\n         self.place.local\n     }\n \n+    pub fn ty(&self, subst: &Substitution) -> Ty {\n+        self.ty.clone().substitute(Interner, utils::ClosureSubst(subst).parent_subst())\n+    }\n+\n     pub fn kind(&self) -> CaptureKind {\n         self.kind\n     }"}, {"sha": "3e5087474281b4fbfa848faec6b0c55be856e68b", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/08dc0e21af8c3b7aeeac8cb428df02d83f514083/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08dc0e21af8c3b7aeeac8cb428df02d83f514083/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=08dc0e21af8c3b7aeeac8cb428df02d83f514083", "patch": "@@ -3221,6 +3221,20 @@ impl Closure {\n             .collect()\n     }\n \n+    pub fn capture_types(&self, db: &dyn HirDatabase) -> Vec<Type> {\n+        let owner = db.lookup_intern_closure((self.id).into()).0;\n+        let infer = &db.infer(owner);\n+        let (captures, _) = infer.closure_info(&self.id);\n+        captures\n+            .iter()\n+            .cloned()\n+            .map(|capture| Type {\n+                env: db.trait_environment_for_body(owner),\n+                ty: capture.ty(&self.subst),\n+            })\n+            .collect()\n+    }\n+\n     pub fn fn_trait(&self, db: &dyn HirDatabase) -> FnTrait {\n         let owner = db.lookup_intern_closure((self.id).into()).0;\n         let infer = &db.infer(owner);"}, {"sha": "3b639104efe7cef27b25034d8795249ee4e0e0ba", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/08dc0e21af8c3b7aeeac8cb428df02d83f514083/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08dc0e21af8c3b7aeeac8cb428df02d83f514083/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=08dc0e21af8c3b7aeeac8cb428df02d83f514083", "patch": "@@ -54,9 +54,10 @@ pub(crate) fn highlight_related(\n \n     let token = pick_best_token(syntax.token_at_offset(offset), |kind| match kind {\n         T![?] => 4, // prefer `?` when the cursor is sandwiched like in `await$0?`\n-        T![->] | T![|] => 3,\n-        kind if kind.is_keyword() => 2,\n-        IDENT | INT_NUMBER => 1,\n+        T![->] => 4,\n+        kind if kind.is_keyword() => 3,\n+        IDENT | INT_NUMBER => 2,\n+        T![|] => 1,\n         _ => 0,\n     })?;\n     // most if not all of these should be re-implemented with information seeded from hir"}, {"sha": "4ab60c76ec1da48a29e5517b3d55504e4c1249cd", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/08dc0e21af8c3b7aeeac8cb428df02d83f514083/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08dc0e21af8c3b7aeeac8cb428df02d83f514083/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=08dc0e21af8c3b7aeeac8cb428df02d83f514083", "patch": "@@ -35,32 +35,39 @@ pub(super) fn type_info_of(\n     _config: &HoverConfig,\n     expr_or_pat: &Either<ast::Expr, ast::Pat>,\n ) -> Option<HoverResult> {\n-    let TypeInfo { original, adjusted } = match expr_or_pat {\n+    let ty_info = match expr_or_pat {\n         Either::Left(expr) => sema.type_of_expr(expr)?,\n         Either::Right(pat) => sema.type_of_pat(pat)?,\n     };\n-    type_info(sema, _config, original, adjusted)\n+    type_info(sema, _config, ty_info)\n }\n \n pub(super) fn closure_expr(\n     sema: &Semantics<'_, RootDatabase>,\n     config: &HoverConfig,\n     c: ast::ClosureExpr,\n ) -> Option<HoverResult> {\n-    let ty = &sema.type_of_expr(&c.into())?.original;\n+    let ty = sema.type_of_expr(&c.into())?;\n+    closure_ty(sema, config, &ty.original)\n+}\n+\n+fn closure_ty(\n+    sema: &Semantics<'_, RootDatabase>,\n+    config: &HoverConfig,\n+    ty: &hir::Type,\n+) -> Option<HoverResult> {\n+    let c = ty.as_closure()?;\n     let layout = if config.memory_layout {\n         ty.layout(sema.db)\n             .map(|x| format!(\" // size = {}, align = {}\", x.size.bytes(), x.align.abi.bytes()))\n             .unwrap_or_default()\n     } else {\n         String::default()\n     };\n-    let c = ty.as_closure()?;\n-    let mut captures = c\n-        .captured_items(sema.db)\n+    let mut captures_rendered = c.captured_items(sema.db)\n         .into_iter()\n         .map(|it| {\n-            let borrow_kind=   match it.kind() {\n+            let borrow_kind = match it.kind() {\n                 CaptureKind::SharedRef => \"immutable borrow\",\n                 CaptureKind::UniqueSharedRef => \"unique immutable borrow ([read more](https://doc.rust-lang.org/stable/reference/types/closure.html#unique-immutable-borrows-in-captures))\",\n                 CaptureKind::MutableRef => \"mutable borrow\",\n@@ -69,16 +76,28 @@ pub(super) fn closure_expr(\n             format!(\"* `{}` by {}\", it.display_place(sema.db), borrow_kind)\n         })\n         .join(\"\\n\");\n-    if captures.trim().is_empty() {\n-        captures = \"This closure captures nothing\".to_string();\n+    if captures_rendered.trim().is_empty() {\n+        captures_rendered = \"This closure captures nothing\".to_string();\n     }\n+    let mut targets: Vec<hir::ModuleDef> = Vec::new();\n+    let mut push_new_def = |item: hir::ModuleDef| {\n+        if !targets.contains(&item) {\n+            targets.push(item);\n+        }\n+    };\n+    walk_and_push_ty(sema.db, ty, &mut push_new_def);\n+    c.capture_types(sema.db).into_iter().for_each(|ty| {\n+        walk_and_push_ty(sema.db, &ty, &mut push_new_def);\n+    });\n+\n     let mut res = HoverResult::default();\n+    res.actions.push(HoverAction::goto_type_from_targets(sema.db, targets));\n     res.markup = format!(\n         \"```rust\\n{}{}\\n{}\\n```\\n\\n## Captures\\n{}\",\n         c.display_with_id(sema.db),\n         layout,\n         c.display_with_impl(sema.db),\n-        captures,\n+        captures_rendered,\n     )\n     .into();\n     Some(res)\n@@ -522,10 +541,12 @@ pub(super) fn definition(\n \n fn type_info(\n     sema: &Semantics<'_, RootDatabase>,\n-    _config: &HoverConfig,\n-    original: hir::Type,\n-    adjusted: Option<hir::Type>,\n+    config: &HoverConfig,\n+    TypeInfo { original, adjusted }: TypeInfo,\n ) -> Option<HoverResult> {\n+    if let Some(res) = closure_ty(sema, config, &original) {\n+        return Some(res);\n+    }\n     let mut res = HoverResult::default();\n     let mut targets: Vec<hir::ModuleDef> = Vec::new();\n     let mut push_new_def = |item: hir::ModuleDef| {"}, {"sha": "12beff3b900b6622ea03b09ac9de41a00e2b10a3", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/08dc0e21af8c3b7aeeac8cb428df02d83f514083/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08dc0e21af8c3b7aeeac8cb428df02d83f514083/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=08dc0e21af8c3b7aeeac8cb428df02d83f514083", "patch": "@@ -114,6 +114,15 @@ fn check_hover_range(ra_fixture: &str, expect: Expect) {\n     expect.assert_eq(hover.info.markup.as_str())\n }\n \n+fn check_hover_range_actions(ra_fixture: &str, expect: Expect) {\n+    let (analysis, range) = fixture::range(ra_fixture);\n+    let hover = analysis\n+        .hover(&HoverConfig { links_in_hover: true, ..HOVER_BASE_CONFIG }, range)\n+        .unwrap()\n+        .unwrap();\n+    expect.assert_debug_eq(&hover.info.actions);\n+}\n+\n fn check_hover_range_no_results(ra_fixture: &str) {\n     let (analysis, range) = fixture::range(ra_fixture);\n     let hover = analysis.hover(&HOVER_BASE_CONFIG, range).unwrap();\n@@ -294,6 +303,72 @@ fn main() {\n     );\n }\n \n+#[test]\n+fn hover_ranged_closure() {\n+    check_hover_range(\n+        r#\"\n+struct S;\n+struct S2;\n+fn main() {\n+    let x = &S;\n+    let y = $0|| {x; S2}$0;\n+}\n+\"#,\n+        expect![[r#\"\n+            ```rust\n+            {closure#0} // size = 8, align = 8\n+            impl FnOnce() -> S2\n+            ```\n+\n+            ## Captures\n+            * `x` by move\"#]],\n+    );\n+    check_hover_range_actions(\n+        r#\"\n+struct S;\n+struct S2;\n+fn main() {\n+    let x = &S;\n+    let y = $0|| {x; S2}$0;\n+}\n+\"#,\n+        expect![[r#\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"test::S2\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                full_range: 10..20,\n+                                focus_range: 17..19,\n+                                name: \"S2\",\n+                                kind: Struct,\n+                                description: \"struct S2\",\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"test::S\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                full_range: 0..9,\n+                                focus_range: 7..8,\n+                                name: \"S\",\n+                                kind: Struct,\n+                                description: \"struct S\",\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn hover_shows_long_type_of_an_expression() {\n     check("}]}