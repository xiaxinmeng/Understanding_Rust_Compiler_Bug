{"sha": "1f67949f0e9cd6c80a3e325164ef17663127f07b", "node_id": "C_kwDOAAsO6NoAKDFmNjc5NDlmMGU5Y2Q2YzgwYTNlMzI1MTY0ZWYxNzY2MzEyN2YwN2I", "commit": {"author": {"name": "\u8bb8\u6770\u53cb Jieyou Xu (Joe)", "email": "jieyouxu@outlook.com", "date": "2023-03-19T19:11:28Z"}, "committer": {"name": "\u8bb8\u6770\u53cb Jieyou Xu (Joe)", "email": "jieyouxu@outlook.com", "date": "2023-03-19T19:22:31Z"}, "message": "Lint ambiguous glob re-exports", "tree": {"sha": "6582972e52483fd8b41e52430c3e421a486ce981", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6582972e52483fd8b41e52430c3e421a486ce981"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f67949f0e9cd6c80a3e325164ef17663127f07b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEze4qXcfh0ileWqZTxf1dMgFP20cFAmQXYPkACgkQxf1dMgFP\n20cR5A/9HiElFPr1so6uz/xKDICcE0Ix6c/8YMsnmGkjkK7G13kO/ZB4bj5699Ap\nbIUS7jGZ4j2hC1jEzwSZbIKO2bEPjBe8r3fmG65Iyzbr0ilPanuQXX5qa24Lzr7H\nwe0II3Rb7Y+aUwmUky3kbKtih1YeBzgJ9j2gytC+SpEgp3M7L6hI4smqtVcY55rj\n2pilSa/SPWU66PfFcERcP39t8Ql/D0KxTjTfAMnuvQJ4Pnn1zmhwODef84tkm3Bq\na63YtnZYRoKEZ5hPJWKRntTdH5xXlY1EiFRXHiWW2FF7Xr3MXw9IU2V5pmjnIeg8\nwl4QybKqsx/KuNLSmuoLYqDwwAhPn8Vqf24IofOgnV0KJWfLzeXFBbpZiG92z0zT\nk67rYHg0LfBK7rNCxTrCCOBi+uuwy4ZmOGskvpWGl4lXHktuxMwaPRTrgPNAwwc8\ncPOetBIisfyartnvEm7nn6MbvBCtNDgkvL6/UxmYGn3IkSd/TeWth/uA1/ZuV1/D\nMVrEgZTMTsnSRWA8lSCkQqcyvZwqkkdlEZDc5yHWtfhUILrwTJkkLqRHZ7jJCPn7\n3Cl4MSJdijCDClpjKA0CuV5d+jP5p4aokLKEn0jdtaVQx7ostm0cKs/HRhAmCkhe\n6spy3WXvEd8xbBt+QHSu2oCJh2H6Q6cfo1AstZ7UMqAvhaDUsNw=\n=7eTS\n-----END PGP SIGNATURE-----", "payload": "tree 6582972e52483fd8b41e52430c3e421a486ce981\nparent ab9bb3ea368b2412531a3e8c07ba73d1dd690134\nauthor \u8bb8\u6770\u53cb Jieyou Xu (Joe) <jieyouxu@outlook.com> 1679253088 +0800\ncommitter \u8bb8\u6770\u53cb Jieyou Xu (Joe) <jieyouxu@outlook.com> 1679253751 +0800\n\nLint ambiguous glob re-exports\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f67949f0e9cd6c80a3e325164ef17663127f07b", "html_url": "https://github.com/rust-lang/rust/commit/1f67949f0e9cd6c80a3e325164ef17663127f07b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f67949f0e9cd6c80a3e325164ef17663127f07b/comments", "author": {"login": "jieyouxu", "id": 39484203, "node_id": "MDQ6VXNlcjM5NDg0MjAz", "avatar_url": "https://avatars.githubusercontent.com/u/39484203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jieyouxu", "html_url": "https://github.com/jieyouxu", "followers_url": "https://api.github.com/users/jieyouxu/followers", "following_url": "https://api.github.com/users/jieyouxu/following{/other_user}", "gists_url": "https://api.github.com/users/jieyouxu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jieyouxu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jieyouxu/subscriptions", "organizations_url": "https://api.github.com/users/jieyouxu/orgs", "repos_url": "https://api.github.com/users/jieyouxu/repos", "events_url": "https://api.github.com/users/jieyouxu/events{/privacy}", "received_events_url": "https://api.github.com/users/jieyouxu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jieyouxu", "id": 39484203, "node_id": "MDQ6VXNlcjM5NDg0MjAz", "avatar_url": "https://avatars.githubusercontent.com/u/39484203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jieyouxu", "html_url": "https://github.com/jieyouxu", "followers_url": "https://api.github.com/users/jieyouxu/followers", "following_url": "https://api.github.com/users/jieyouxu/following{/other_user}", "gists_url": "https://api.github.com/users/jieyouxu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jieyouxu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jieyouxu/subscriptions", "organizations_url": "https://api.github.com/users/jieyouxu/orgs", "repos_url": "https://api.github.com/users/jieyouxu/repos", "events_url": "https://api.github.com/users/jieyouxu/events{/privacy}", "received_events_url": "https://api.github.com/users/jieyouxu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab9bb3ea368b2412531a3e8c07ba73d1dd690134", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab9bb3ea368b2412531a3e8c07ba73d1dd690134", "html_url": "https://github.com/rust-lang/rust/commit/ab9bb3ea368b2412531a3e8c07ba73d1dd690134"}], "stats": {"total": 256, "additions": 229, "deletions": 27}, "files": [{"sha": "626c09fea07ac46a6ad04969a2780d865eb1267b", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f67949f0e9cd6c80a3e325164ef17663127f07b/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f67949f0e9cd6c80a3e325164ef17663127f07b/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=1f67949f0e9cd6c80a3e325164ef17663127f07b", "patch": "@@ -910,6 +910,10 @@ pub trait LintContext: Sized {\n                         Applicability::MachineApplicable,\n                     );\n                 }\n+                BuiltinLintDiagnostics::AmbiguousGlobReexports { name, namespace, first_reexport_span, duplicate_reexport_span } => {\n+                    db.span_label(first_reexport_span, format!(\"the name `{}` in the {} namespace is first re-exported here\", name, namespace));\n+                    db.span_label(duplicate_reexport_span, format!(\"but the name `{}` in the {} namespace is also re-exported here\", name, namespace));\n+                }\n             }\n             // Rewrap `db`, and pass control to the user.\n             decorate(db)"}, {"sha": "242d147b5ee115f0f47f8071f922310167675eb3", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1f67949f0e9cd6c80a3e325164ef17663127f07b/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f67949f0e9cd6c80a3e325164ef17663127f07b/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=1f67949f0e9cd6c80a3e325164ef17663127f07b", "patch": "@@ -3230,6 +3230,45 @@ declare_lint! {\n     };\n }\n \n+declare_lint! {\n+    /// The `ambiguous_glob_reexports` lint detects cases where names re-exported via globs\n+    /// collide. Downstream users trying to use the same name re-exported from multiple globs\n+    /// will receive a warning pointing out redefinition of the same name.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// #![deny(ambiguous_glob_reexports)]\n+    /// pub mod foo {\n+    ///     pub type X = u8;\n+    /// }\n+    ///\n+    /// pub mod bar {\n+    ///     pub type Y = u8;\n+    ///     pub type X = u8;\n+    /// }\n+    ///\n+    /// pub use foo::*;\n+    /// pub use bar::*;\n+    ///\n+    ///\n+    /// pub fn main() {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// This was previously accepted but it could silently break a crate's downstream users code.\n+    /// For example, if `foo::*` and `bar::*` were re-exported before `bar::X` was added to the\n+    /// re-exports, down stream users could use `this_crate::X` without problems. However, adding\n+    /// `bar::X` would cause compilation errors in downstream crates because `X` is defined\n+    /// multiple times in the same namespace of `this_crate`.\n+    pub AMBIGUOUS_GLOB_REEXPORTS,\n+    Warn,\n+    \"ambiguous glob re-exports\",\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -3337,6 +3376,7 @@ declare_lint_pass! {\n         NAMED_ARGUMENTS_USED_POSITIONALLY,\n         IMPLIED_BOUNDS_ENTAILMENT,\n         BYTE_SLICE_IN_PACKED_STRUCT_WITH_DERIVE,\n+        AMBIGUOUS_GLOB_REEXPORTS,\n     ]\n }\n "}, {"sha": "69a8b691ab21625147ff4048fc54d31c4c05deb6", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f67949f0e9cd6c80a3e325164ef17663127f07b/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f67949f0e9cd6c80a3e325164ef17663127f07b/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=1f67949f0e9cd6c80a3e325164ef17663127f07b", "patch": "@@ -529,6 +529,16 @@ pub enum BuiltinLintDiagnostics {\n         vis_span: Span,\n         ident_span: Span,\n     },\n+    AmbiguousGlobReexports {\n+        /// The name for which collision(s) have occurred.\n+        name: String,\n+        /// The name space for whihc the collision(s) occurred in.\n+        namespace: String,\n+        /// Span where the name is first re-exported.\n+        first_reexport_span: Span,\n+        /// Span where the same name is also re-exported.\n+        duplicate_reexport_span: Span,\n+    },\n }\n \n /// Lints that are buffered up early on in the `Session` before the"}, {"sha": "a1ae9b8a52181c9ba52788fcb181a220ebfa8c30", "filename": "compiler/rustc_resolve/src/effective_visibilities.rs", "status": "modified", "additions": 50, "deletions": 18, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/1f67949f0e9cd6c80a3e325164ef17663127f07b/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f67949f0e9cd6c80a3e325164ef17663127f07b/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs?ref=1f67949f0e9cd6c80a3e325164ef17663127f07b", "patch": "@@ -4,6 +4,7 @@ use rustc_ast::visit;\n use rustc_ast::visit::Visitor;\n use rustc_ast::Crate;\n use rustc_ast::EnumDef;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::intern::Interned;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::def_id::CRATE_DEF_ID;\n@@ -70,11 +71,11 @@ impl Resolver<'_, '_> {\n impl<'r, 'a, 'tcx> EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n     /// Fills the `Resolver::effective_visibilities` table with public & exported items\n     /// For now, this doesn't resolve macros (FIXME) and cannot resolve Impl, as we\n-    /// need access to a TyCtxt for that.\n+    /// need access to a TyCtxt for that. Returns the set of ambiguous re-exports.\n     pub(crate) fn compute_effective_visibilities<'c>(\n         r: &'r mut Resolver<'a, 'tcx>,\n         krate: &'c Crate,\n-    ) {\n+    ) -> FxHashSet<Interned<'a, NameBinding<'a>>> {\n         let mut visitor = EffectiveVisibilitiesVisitor {\n             r,\n             def_effective_visibilities: Default::default(),\n@@ -93,18 +94,26 @@ impl<'r, 'a, 'tcx> EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n         }\n         visitor.r.effective_visibilities = visitor.def_effective_visibilities;\n \n+        let mut exported_ambiguities = FxHashSet::default();\n+\n         // Update visibilities for import def ids. These are not used during the\n         // `EffectiveVisibilitiesVisitor` pass, because we have more detailed binding-based\n         // information, but are used by later passes. Effective visibility of an import def id\n         // is the maximum value among visibilities of bindings corresponding to that def id.\n         for (binding, eff_vis) in visitor.import_effective_visibilities.iter() {\n             let NameBindingKind::Import { import, .. } = binding.kind else { unreachable!() };\n-            if let Some(node_id) = import.id() {\n-                r.effective_visibilities.update_eff_vis(r.local_def_id(node_id), eff_vis, r.tcx)\n+            if !binding.is_ambiguity() {\n+                if let Some(node_id) = import.id() {\n+                    r.effective_visibilities.update_eff_vis(r.local_def_id(node_id), eff_vis, r.tcx)\n+                }\n+            } else if binding.ambiguity.is_some() && eff_vis.is_public_at_level(Level::Reexported) {\n+                exported_ambiguities.insert(*binding);\n             }\n         }\n \n         info!(\"resolve::effective_visibilities: {:#?}\", r.effective_visibilities);\n+\n+        exported_ambiguities\n     }\n \n     /// Update effective visibilities of bindings in the given module,\n@@ -115,21 +124,44 @@ impl<'r, 'a, 'tcx> EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n         let resolutions = self.r.resolutions(module);\n \n         for (_, name_resolution) in resolutions.borrow().iter() {\n-            if let Some(mut binding) = name_resolution.borrow().binding() && !binding.is_ambiguity() {\n-                // Set the given effective visibility level to `Level::Direct` and\n-                // sets the rest of the `use` chain to `Level::Reexported` until\n-                // we hit the actual exported item.\n-                let mut parent_id = ParentId::Def(module_id);\n-                while let NameBindingKind::Import { binding: nested_binding, .. } = binding.kind {\n-                    let binding_id = ImportId::new_unchecked(binding);\n-                    self.update_import(binding_id, parent_id);\n-\n-                    parent_id = ParentId::Import(binding_id);\n-                    binding = nested_binding;\n-                }\n+            if let Some(mut binding) = name_resolution.borrow().binding() {\n+                if !binding.is_ambiguity() {\n+                    // Set the given effective visibility level to `Level::Direct` and\n+                    // sets the rest of the `use` chain to `Level::Reexported` until\n+                    // we hit the actual exported item.\n+                    let mut parent_id = ParentId::Def(module_id);\n+                    while let NameBindingKind::Import { binding: nested_binding, .. } = binding.kind\n+                    {\n+                        let binding_id = ImportId::new_unchecked(binding);\n+                        self.update_import(binding_id, parent_id);\n+\n+                        parent_id = ParentId::Import(binding_id);\n+                        binding = nested_binding;\n+                    }\n+\n+                    if let Some(def_id) = binding.res().opt_def_id().and_then(|id| id.as_local()) {\n+                        self.update_def(def_id, binding.vis.expect_local(), parent_id);\n+                    }\n+                } else {\n+                    // Put the root ambiguity binding and all reexports leading to it into the\n+                    // table. They are used by the `ambiguous_glob_reexports` lint. For all\n+                    // bindings added to the table here `is_ambiguity` returns true.\n+                    let mut parent_id = ParentId::Def(module_id);\n+                    while let NameBindingKind::Import { binding: nested_binding, .. } = binding.kind\n+                    {\n+                        let binding_id = ImportId::new_unchecked(binding);\n+                        self.update_import(binding_id, parent_id);\n \n-                if let Some(def_id) = binding.res().opt_def_id().and_then(|id| id.as_local()) {\n-                    self.update_def(def_id, binding.vis.expect_local(), parent_id);\n+                        if binding.ambiguity.is_some() {\n+                            // Stop at the root ambiguity, further bindings in the chain should not\n+                            // be reexported because the root ambiguity blocks any access to them.\n+                            // (Those further bindings are most likely not ambiguities themselves.)\n+                            break;\n+                        }\n+\n+                        parent_id = ParentId::Import(binding_id);\n+                        binding = nested_binding;\n+                    }\n                 }\n             }\n         }"}, {"sha": "b36fca9bb96235ddd4e48a77406c35f7fa022e8a", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1f67949f0e9cd6c80a3e325164ef17663127f07b/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f67949f0e9cd6c80a3e325164ef17663127f07b/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=1f67949f0e9cd6c80a3e325164ef17663127f07b", "patch": "@@ -19,7 +19,9 @@ use rustc_hir::def::{self, DefKind, PartialRes};\n use rustc_middle::metadata::ModChild;\n use rustc_middle::span_bug;\n use rustc_middle::ty;\n-use rustc_session::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS};\n+use rustc_session::lint::builtin::{\n+    AMBIGUOUS_GLOB_REEXPORTS, PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS,\n+};\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::hygiene::LocalExpnId;\n@@ -506,6 +508,34 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n     }\n \n+    pub(crate) fn check_reexport_ambiguities(\n+        &mut self,\n+        exported_ambiguities: FxHashSet<Interned<'a, NameBinding<'a>>>,\n+    ) {\n+        for module in self.arenas.local_modules().iter() {\n+            module.for_each_child(self, |this, ident, ns, binding| {\n+                if let NameBindingKind::Import { import, .. } = binding.kind\n+                && let Some((amb_binding, _)) = binding.ambiguity\n+                && binding.res() != Res::Err\n+                && exported_ambiguities.contains(&Interned::new_unchecked(binding))\n+                {\n+                    this.lint_buffer.buffer_lint_with_diagnostic(\n+                        AMBIGUOUS_GLOB_REEXPORTS,\n+                        import.root_id,\n+                        import.root_span,\n+                        \"ambiguous glob re-exports\",\n+                        BuiltinLintDiagnostics::AmbiguousGlobReexports {\n+                            name: ident.to_string(),\n+                            namespace: ns.descr().to_string(),\n+                            first_reexport_span: import.root_span,\n+                            duplicate_reexport_span: amb_binding.span,\n+                        },\n+                    );\n+                }\n+            });\n+        }\n+    }\n+\n     fn throw_unresolved_import_error(&self, errors: Vec<(&Import<'_>, UnresolvedImportError)>) {\n         if errors.is_empty() {\n             return;"}, {"sha": "de603d87e6d2d75aec3335f80103217454508186", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f67949f0e9cd6c80a3e325164ef17663127f07b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f67949f0e9cd6c80a3e325164ef17663127f07b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=1f67949f0e9cd6c80a3e325164ef17663127f07b", "patch": "@@ -1474,9 +1474,12 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     pub fn resolve_crate(&mut self, krate: &Crate) {\n         self.tcx.sess.time(\"resolve_crate\", || {\n             self.tcx.sess.time(\"finalize_imports\", || self.finalize_imports());\n-            self.tcx.sess.time(\"compute_effective_visibilities\", || {\n+            let exported_ambiguities = self.tcx.sess.time(\"compute_effective_visibilities\", || {\n                 EffectiveVisibilitiesVisitor::compute_effective_visibilities(self, krate)\n             });\n+            self.tcx.sess.time(\"check_reexport_ambiguities\", || {\n+                self.check_reexport_ambiguities(exported_ambiguities)\n+            });\n             self.tcx.sess.time(\"finalize_macro_resolutions\", || self.finalize_macro_resolutions());\n             self.tcx.sess.time(\"late_resolve_crate\", || self.late_resolve_crate(krate));\n             self.tcx.sess.time(\"resolve_main\", || self.resolve_main());"}, {"sha": "8a146378b439581b0c1b7b3894eebac534f0fbfc", "filename": "tests/ui/imports/auxiliary/glob-conflict.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f67949f0e9cd6c80a3e325164ef17663127f07b/tests%2Fui%2Fimports%2Fauxiliary%2Fglob-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f67949f0e9cd6c80a3e325164ef17663127f07b/tests%2Fui%2Fimports%2Fauxiliary%2Fglob-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fauxiliary%2Fglob-conflict.rs?ref=1f67949f0e9cd6c80a3e325164ef17663127f07b", "patch": "@@ -1,3 +1,5 @@\n+#![allow(ambiguous_glob_reexports)]\n+\n mod m1 {\n     pub fn f() {}\n }"}, {"sha": "ce700ae0de9b12e42c8308a72280acc04f1c5018", "filename": "tests/ui/imports/local-modularized-tricky-fail-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f67949f0e9cd6c80a3e325164ef17663127f07b/tests%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f67949f0e9cd6c80a3e325164ef17663127f07b/tests%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.rs?ref=1f67949f0e9cd6c80a3e325164ef17663127f07b", "patch": "@@ -1,4 +1,5 @@\n #![feature(decl_macro)]\n+#![allow(ambiguous_glob_reexports)]\n \n macro_rules! define_exported { () => {\n     #[macro_export]"}, {"sha": "52a01e8bcdfe36549db5118ecdc9d3351e882959", "filename": "tests/ui/imports/local-modularized-tricky-fail-1.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f67949f0e9cd6c80a3e325164ef17663127f07b/tests%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f67949f0e9cd6c80a3e325164ef17663127f07b/tests%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr?ref=1f67949f0e9cd6c80a3e325164ef17663127f07b", "patch": "@@ -1,12 +1,12 @@\n error[E0659]: `exported` is ambiguous\n-  --> $DIR/local-modularized-tricky-fail-1.rs:28:1\n+  --> $DIR/local-modularized-tricky-fail-1.rs:29:1\n    |\n LL | exported!();\n    | ^^^^^^^^ ambiguous name\n    |\n    = note: ambiguous because of a conflict between a name from a glob import and a macro-expanded name in the same module during import or macro resolution\n note: `exported` could refer to the macro defined here\n-  --> $DIR/local-modularized-tricky-fail-1.rs:5:5\n+  --> $DIR/local-modularized-tricky-fail-1.rs:6:5\n    |\n LL | /     macro_rules! exported {\n LL | |         () => ()\n@@ -16,23 +16,23 @@ LL | |     }\n LL |       define_exported!();\n    |       ------------------ in this macro invocation\n note: `exported` could also refer to the macro imported here\n-  --> $DIR/local-modularized-tricky-fail-1.rs:22:5\n+  --> $DIR/local-modularized-tricky-fail-1.rs:23:5\n    |\n LL | use inner1::*;\n    |     ^^^^^^^^^\n    = help: consider adding an explicit import of `exported` to disambiguate\n    = note: this error originates in the macro `define_exported` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `panic` is ambiguous\n-  --> $DIR/local-modularized-tricky-fail-1.rs:35:5\n+  --> $DIR/local-modularized-tricky-fail-1.rs:36:5\n    |\n LL |     panic!();\n    |     ^^^^^ ambiguous name\n    |\n    = note: ambiguous because of a conflict between a macro-expanded name and a less macro-expanded name from outer scope during import or macro resolution\n    = note: `panic` could refer to a macro from prelude\n note: `panic` could also refer to the macro defined here\n-  --> $DIR/local-modularized-tricky-fail-1.rs:11:5\n+  --> $DIR/local-modularized-tricky-fail-1.rs:12:5\n    |\n LL | /     macro_rules! panic {\n LL | |         () => ()\n@@ -45,15 +45,15 @@ LL |       define_panic!();\n    = note: this error originates in the macro `define_panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `include` is ambiguous\n-  --> $DIR/local-modularized-tricky-fail-1.rs:46:1\n+  --> $DIR/local-modularized-tricky-fail-1.rs:47:1\n    |\n LL | include!();\n    | ^^^^^^^ ambiguous name\n    |\n    = note: ambiguous because of a conflict between a macro-expanded name and a less macro-expanded name from outer scope during import or macro resolution\n    = note: `include` could refer to a macro from prelude\n note: `include` could also refer to the macro defined here\n-  --> $DIR/local-modularized-tricky-fail-1.rs:17:5\n+  --> $DIR/local-modularized-tricky-fail-1.rs:18:5\n    |\n LL | /     macro_rules! include {\n LL | |         () => ()"}, {"sha": "431213e25e462e4ec449ab3a08198cde500c217d", "filename": "tests/ui/resolve/issue-107563-ambiguous-glob-reexports.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1f67949f0e9cd6c80a3e325164ef17663127f07b/tests%2Fui%2Fresolve%2Fissue-107563-ambiguous-glob-reexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f67949f0e9cd6c80a3e325164ef17663127f07b/tests%2Fui%2Fresolve%2Fissue-107563-ambiguous-glob-reexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-107563-ambiguous-glob-reexports.rs?ref=1f67949f0e9cd6c80a3e325164ef17663127f07b", "patch": "@@ -0,0 +1,33 @@\n+#![deny(ambiguous_glob_reexports)]\n+\n+pub mod foo {\n+    pub type X = u8;\n+}\n+\n+pub mod bar {\n+    pub type X = u8;\n+    pub type Y = u8;\n+}\n+\n+pub use foo::*;\n+//~^ ERROR ambiguous glob re-exports\n+pub use bar::*;\n+\n+mod ambiguous {\n+    mod m1 { pub type A = u8; }\n+    mod m2 { pub type A = u8; }\n+    pub use self::m1::*;\n+    //~^ ERROR ambiguous glob re-exports\n+    pub use self::m2::*;\n+}\n+\n+pub mod single {\n+    pub use ambiguous::A;\n+    //~^ ERROR `A` is ambiguous\n+}\n+\n+pub mod glob {\n+    pub use ambiguous::*;\n+}\n+\n+pub fn main() {}"}, {"sha": "07e61dd8643d45b44f2574713c1dcb1f3a6e4ebe", "filename": "tests/ui/resolve/issue-107563-ambiguous-glob-reexports.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1f67949f0e9cd6c80a3e325164ef17663127f07b/tests%2Fui%2Fresolve%2Fissue-107563-ambiguous-glob-reexports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f67949f0e9cd6c80a3e325164ef17663127f07b/tests%2Fui%2Fresolve%2Fissue-107563-ambiguous-glob-reexports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-107563-ambiguous-glob-reexports.stderr?ref=1f67949f0e9cd6c80a3e325164ef17663127f07b", "patch": "@@ -0,0 +1,47 @@\n+error[E0659]: `A` is ambiguous\n+  --> $DIR/issue-107563-ambiguous-glob-reexports.rs:25:24\n+   |\n+LL |     pub use ambiguous::A;\n+   |                        ^ ambiguous name\n+   |\n+   = note: ambiguous because of multiple glob imports of a name in the same module\n+note: `A` could refer to the type alias imported here\n+  --> $DIR/issue-107563-ambiguous-glob-reexports.rs:19:13\n+   |\n+LL |     pub use self::m1::*;\n+   |             ^^^^^^^^^^^\n+   = help: consider adding an explicit import of `A` to disambiguate\n+note: `A` could also refer to the type alias imported here\n+  --> $DIR/issue-107563-ambiguous-glob-reexports.rs:21:13\n+   |\n+LL |     pub use self::m2::*;\n+   |             ^^^^^^^^^^^\n+   = help: consider adding an explicit import of `A` to disambiguate\n+\n+error: ambiguous glob re-exports\n+  --> $DIR/issue-107563-ambiguous-glob-reexports.rs:12:9\n+   |\n+LL | pub use foo::*;\n+   |         ^^^^^^ the name `X` in the type namespace is first re-exported here\n+LL |\n+LL | pub use bar::*;\n+   |         ------ but the name `X` in the type namespace is also re-exported here\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-107563-ambiguous-glob-reexports.rs:1:9\n+   |\n+LL | #![deny(ambiguous_glob_reexports)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: ambiguous glob re-exports\n+  --> $DIR/issue-107563-ambiguous-glob-reexports.rs:19:13\n+   |\n+LL |     pub use self::m1::*;\n+   |             ^^^^^^^^^^^ the name `A` in the type namespace is first re-exported here\n+LL |\n+LL |     pub use self::m2::*;\n+   |             ----------- but the name `A` in the type namespace is also re-exported here\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0659`."}]}