{"sha": "39d7a2317091f2d88dc4723e46fd84424d21d7db", "node_id": "C_kwDOAAsO6NoAKDM5ZDdhMjMxNzA5MWYyZDg4ZGM0NzIzZTQ2ZmQ4NDQyNGQyMWQ3ZGI", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2022-06-24T15:30:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-24T15:30:26Z"}, "message": "Merge pull request #185 from rust-lang/feature/dummy-fast-math\n\nAdd dummy fast math implementation", "tree": {"sha": "c01d05c6576c9e364dff215a28f481a903104069", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c01d05c6576c9e364dff215a28f481a903104069"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39d7a2317091f2d88dc4723e46fd84424d21d7db", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJitdiSCRBK7hj4Ov3rIwAAjWkIADN5XFLadMob4jczgwfwRyRP\n/NJaTGdmxjUJwdzAqXQR6MiFPAQ+bgmum/ypdAA4XdftR009p2QBMxRYwExT4VYm\nS5PxRXRXbrmRRJjDRTvbp636FAsXjxqICoqvwfB32hzCxNUuhwrEmurMeGYhfs3+\nfxEDQDhVdHEBmS9fyKWWWe3fWyX7oiDxp4IluYmObjgnau2RCQqlz2bvBG3dpwvE\ngj7rPHMYNpwLobeOCnUodGPmdsLRO5j1wnu4tCw1AcJ89P1td4+lj1gOO4os+5AR\nj16AoLSB+9uL7PAKFWfEzUlfk1S7awHNiI3USflIY7+izHxNnO4QACK+GPUVHH8=\n=lEgr\n-----END PGP SIGNATURE-----\n", "payload": "tree c01d05c6576c9e364dff215a28f481a903104069\nparent 45e3a4aa57612a7e84f427ee19dcca86b834c87f\nparent 4dc0bbf40ec60d895a1167257b2ea18d04a616ed\nauthor antoyo <antoyo@users.noreply.github.com> 1656084626 -0400\ncommitter GitHub <noreply@github.com> 1656084626 -0400\n\nMerge pull request #185 from rust-lang/feature/dummy-fast-math\n\nAdd dummy fast math implementation"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39d7a2317091f2d88dc4723e46fd84424d21d7db", "html_url": "https://github.com/rust-lang/rust/commit/39d7a2317091f2d88dc4723e46fd84424d21d7db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39d7a2317091f2d88dc4723e46fd84424d21d7db/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45e3a4aa57612a7e84f427ee19dcca86b834c87f", "url": "https://api.github.com/repos/rust-lang/rust/commits/45e3a4aa57612a7e84f427ee19dcca86b834c87f", "html_url": "https://github.com/rust-lang/rust/commit/45e3a4aa57612a7e84f427ee19dcca86b834c87f"}, {"sha": "4dc0bbf40ec60d895a1167257b2ea18d04a616ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dc0bbf40ec60d895a1167257b2ea18d04a616ed", "html_url": "https://github.com/rust-lang/rust/commit/4dc0bbf40ec60d895a1167257b2ea18d04a616ed"}], "stats": {"total": 51, "additions": 41, "deletions": 10}, "files": [{"sha": "9f6ffb9a610f3b8929c32afa77f7a3f41586a06f", "filename": "src/builder.rs", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/39d7a2317091f2d88dc4723e46fd84424d21d7db/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d7a2317091f2d88dc4723e46fd84424d21d7db/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=39d7a2317091f2d88dc4723e46fd84424d21d7db", "patch": "@@ -530,6 +530,31 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     fn frem(&mut self, a: RValue<'gcc>, b: RValue<'gcc>) -> RValue<'gcc> {\n+        // TODO(antoyo): add check in libgccjit since using the binary operator % causes the following error:\n+        // during RTL pass: expand\n+        // libgccjit.so: error: in expmed_mode_index, at expmed.h:240\n+        // 0x7f0101d58dc6 expmed_mode_index\n+        //     ../../../gcc/gcc/expmed.h:240\n+        // 0x7f0101d58e35 expmed_op_cost_ptr\n+        //     ../../../gcc/gcc/expmed.h:262\n+        // 0x7f0101d594a1 sdiv_cost_ptr\n+        //     ../../../gcc/gcc/expmed.h:531\n+        // 0x7f0101d594f3 sdiv_cost\n+        //     ../../../gcc/gcc/expmed.h:549\n+        // 0x7f0101d6af7e expand_divmod(int, tree_code, machine_mode, rtx_def*, rtx_def*, rtx_def*, int, optab_methods)\n+        //     ../../../gcc/gcc/expmed.cc:4356\n+        // 0x7f0101d94f9e expand_expr_divmod\n+        //     ../../../gcc/gcc/expr.cc:8929\n+        // 0x7f0101d97a26 expand_expr_real_2(separate_ops*, rtx_def*, machine_mode, expand_modifier)\n+        //     ../../../gcc/gcc/expr.cc:9566\n+        // 0x7f0101bef6ef expand_gimple_stmt_1\n+        //     ../../../gcc/gcc/cfgexpand.cc:3967\n+        // 0x7f0101bef910 expand_gimple_stmt\n+        //     ../../../gcc/gcc/cfgexpand.cc:4028\n+        // 0x7f0101bf6ee7 expand_gimple_basic_block\n+        //     ../../../gcc/gcc/cfgexpand.cc:6069\n+        // 0x7f0101bf9194 execute\n+        //     ../../../gcc/gcc/cfgexpand.cc:6795\n         if a.get_type().is_compatible_with(self.cx.float_type) {\n             let fmodf = self.context.get_builtin_function(\"fmodf\");\n             // FIXME(antoyo): this seems to produce the wrong result.\n@@ -604,24 +629,29 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         a * b\n     }\n \n-    fn fadd_fast(&mut self, _lhs: RValue<'gcc>, _rhs: RValue<'gcc>) -> RValue<'gcc> {\n-        unimplemented!();\n+    fn fadd_fast(&mut self, lhs: RValue<'gcc>, rhs: RValue<'gcc>) -> RValue<'gcc> {\n+        // NOTE: it seems like we cannot enable fast-mode for a single operation in GCC.\n+        lhs + rhs\n     }\n \n-    fn fsub_fast(&mut self, _lhs: RValue<'gcc>, _rhs: RValue<'gcc>) -> RValue<'gcc> {\n-        unimplemented!();\n+    fn fsub_fast(&mut self, lhs: RValue<'gcc>, rhs: RValue<'gcc>) -> RValue<'gcc> {\n+        // NOTE: it seems like we cannot enable fast-mode for a single operation in GCC.\n+        lhs - rhs\n     }\n \n-    fn fmul_fast(&mut self, _lhs: RValue<'gcc>, _rhs: RValue<'gcc>) -> RValue<'gcc> {\n-        unimplemented!();\n+    fn fmul_fast(&mut self, lhs: RValue<'gcc>, rhs: RValue<'gcc>) -> RValue<'gcc> {\n+        // NOTE: it seems like we cannot enable fast-mode for a single operation in GCC.\n+        lhs * rhs\n     }\n \n-    fn fdiv_fast(&mut self, _lhs: RValue<'gcc>, _rhs: RValue<'gcc>) -> RValue<'gcc> {\n-        unimplemented!();\n+    fn fdiv_fast(&mut self, lhs: RValue<'gcc>, rhs: RValue<'gcc>) -> RValue<'gcc> {\n+        // NOTE: it seems like we cannot enable fast-mode for a single operation in GCC.\n+        lhs / rhs\n     }\n \n-    fn frem_fast(&mut self, _lhs: RValue<'gcc>, _rhs: RValue<'gcc>) -> RValue<'gcc> {\n-        unimplemented!();\n+    fn frem_fast(&mut self, lhs: RValue<'gcc>, rhs: RValue<'gcc>) -> RValue<'gcc> {\n+        // NOTE: it seems like we cannot enable fast-mode for a single operation in GCC.\n+        self.frem(lhs, rhs)\n     }\n \n     fn checked_binop(&mut self, oop: OverflowOp, typ: Ty<'_>, lhs: Self::Value, rhs: Self::Value) -> (Self::Value, Self::Value) {"}, {"sha": "f2721c9c92c69d3c953e63dc09d478f24ff82212", "filename": "test.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39d7a2317091f2d88dc4723e46fd84424d21d7db/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/39d7a2317091f2d88dc4723e46fd84424d21d7db/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=39d7a2317091f2d88dc4723e46fd84424d21d7db", "patch": "@@ -265,6 +265,7 @@ EOF\n     for test in $(rg --files-with-matches \"catch_unwind|should_panic|thread|lto\" src/test/ui); do\n       rm $test\n     done\n+    git checkout src/test/ui/lto/auxiliary/dylib.rs\n     git checkout src/test/ui/type-alias-impl-trait/auxiliary/cross_crate_ice.rs\n     git checkout src/test/ui/type-alias-impl-trait/auxiliary/cross_crate_ice2.rs\n "}]}