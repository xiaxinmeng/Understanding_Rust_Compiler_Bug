{"sha": "72d650f47a7c23d31e16f54d71f7356fbcd651f5", "node_id": "C_kwDOAAsO6NoAKDcyZDY1MGY0N2E3YzIzZDMxZTE2ZjU0ZDcxZjczNTZmYmNkNjUxZjU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-06T20:26:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-06T20:26:10Z"}, "message": "Rollup merge of #106453 - coastalwhite:master, r=GuillaumeGomez\n\nImprove include macro documentation\n\nAs outlined in #106118, the `include!` macro is a SEO problem when it comes to the Rust documentation. Beginners may see it as a replacement to `include` syntax in other languages. I feel like this documentation should quite explicitly link to the modules' documentation.\n\nThe primary goal of this PR is to address that issue by adding a warning to the documentation. While I was here, I also added some other parts. This included a `Uses` section and some (intra doc) links to other relevant topics.\n\nI hope this can help beginners to Rust more quickly understand some multi-file project intricacies.\n\n# References\n- Syntax for the warning: https://github.com/tokio-rs/tracing/blob/58accc6da3f04af3f6144fbe6d68af7225c70c02/tracing/src/lib.rs#L55", "tree": {"sha": "4dbc0094b285e79e8eec493d435a5a3e75ebafd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dbc0094b285e79e8eec493d435a5a3e75ebafd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72d650f47a7c23d31e16f54d71f7356fbcd651f5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjuIPiCRBK7hj4Ov3rIwAAbL0IAA0VmOULkG8cRhbtxV6IRLLw\n3VwB4q5RPuSznws6M5mGnmFJCzqbf+x39tf7VWclp+wYKH86elsru9ka1SMhKCBl\npP8iSnF8GhK8kFdbKzWDmk0XBGprGacFF4E3XwxmU1AayD1FguEXhkBC+IxYleD+\n12iB8ykPd859ui8mpQVdFraVj0OxHVH5qy4u7Z0YkSED1eHTFqOKW1oQ48p2zUxl\ntvXZUSF0+e748uTp82LgrNeZ+XBtpL/7nevgBVxOG1kBEnCllLwdwjfcXQd9F3B0\nigWNXhZTtVcbSlb1Z2ZYX0qA8ZnloT1R22ZiuenRtRdyWMCtp8p5atY3x36fA1Y=\n=uvyW\n-----END PGP SIGNATURE-----\n", "payload": "tree 4dbc0094b285e79e8eec493d435a5a3e75ebafd6\nparent 498216e9db724cb26f269b0419d4e9e2897cee79\nparent ae667be0f6017002587a28be257238655d34fa54\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673036770 +0100\ncommitter GitHub <noreply@github.com> 1673036770 +0100\n\nRollup merge of #106453 - coastalwhite:master, r=GuillaumeGomez\n\nImprove include macro documentation\n\nAs outlined in #106118, the `include!` macro is a SEO problem when it comes to the Rust documentation. Beginners may see it as a replacement to `include` syntax in other languages. I feel like this documentation should quite explicitly link to the modules' documentation.\n\nThe primary goal of this PR is to address that issue by adding a warning to the documentation. While I was here, I also added some other parts. This included a `Uses` section and some (intra doc) links to other relevant topics.\n\nI hope this can help beginners to Rust more quickly understand some multi-file project intricacies.\n\n# References\n- Syntax for the warning: https://github.com/tokio-rs/tracing/blob/58accc6da3f04af3f6144fbe6d68af7225c70c02/tracing/src/lib.rs#L55\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72d650f47a7c23d31e16f54d71f7356fbcd651f5", "html_url": "https://github.com/rust-lang/rust/commit/72d650f47a7c23d31e16f54d71f7356fbcd651f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72d650f47a7c23d31e16f54d71f7356fbcd651f5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "498216e9db724cb26f269b0419d4e9e2897cee79", "url": "https://api.github.com/repos/rust-lang/rust/commits/498216e9db724cb26f269b0419d4e9e2897cee79", "html_url": "https://github.com/rust-lang/rust/commit/498216e9db724cb26f269b0419d4e9e2897cee79"}, {"sha": "ae667be0f6017002587a28be257238655d34fa54", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae667be0f6017002587a28be257238655d34fa54", "html_url": "https://github.com/rust-lang/rust/commit/ae667be0f6017002587a28be257238655d34fa54"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "3b026bc0e0f381bd23b847f3c9ecd0fcf0ca315b", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/72d650f47a7c23d31e16f54d71f7356fbcd651f5/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d650f47a7c23d31e16f54d71f7356fbcd651f5/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=72d650f47a7c23d31e16f54d71f7356fbcd651f5", "patch": "@@ -1315,22 +1315,41 @@ pub(crate) mod builtin {\n \n     /// Parses a file as an expression or an item according to the context.\n     ///\n-    /// The file is located relative to the current file (similarly to how\n-    /// modules are found). The provided path is interpreted in a platform-specific\n-    /// way at compile time. So, for instance, an invocation with a Windows path\n-    /// containing backslashes `\\` would not compile correctly on Unix.\n+    /// **Warning**: For multi-file Rust projects, the `include!` macro is probably not what you\n+    /// are looking for. Usually, multi-file Rust projects use\n+    /// [modules](https://doc.rust-lang.org/reference/items/modules.html). Multi-file projects and\n+    /// modules are explained in the Rust-by-Example book\n+    /// [here](https://doc.rust-lang.org/rust-by-example/mod/split.html) and the module system is\n+    /// explained in the Rust Book\n+    /// [here](https://doc.rust-lang.org/book/ch07-02-defining-modules-to-control-scope-and-privacy.html).\n+    ///\n+    /// The included file is placed in the surrounding code\n+    /// [unhygienically](https://doc.rust-lang.org/reference/macros-by-example.html#hygiene). If\n+    /// the included file is parsed as an expression and variables or functions share names across\n+    /// both files, it could result in variables or functions being different from what the\n+    /// included file expected.\n+    ///\n+    /// The included file is located relative to the current file (similarly to how modules are\n+    /// found). The provided path is interpreted in a platform-specific way at compile time. So,\n+    /// for instance, an invocation with a Windows path containing backslashes `\\` would not\n+    /// compile correctly on Unix.\n     ///\n-    /// Using this macro is often a bad idea, because if the file is\n-    /// parsed as an expression, it is going to be placed in the\n-    /// surrounding code unhygienically. This could result in variables\n-    /// or functions being different from what the file expected if\n-    /// there are variables or functions that have the same name in\n-    /// the current file.\n+    /// # Uses\n+    ///\n+    /// The `include!` macro is primarily used for two purposes. It is used to include\n+    /// documentation that is written in a separate file and it is used to include [build artifacts\n+    /// usually as a result from the `build.rs`\n+    /// script](https://doc.rust-lang.org/cargo/reference/build-scripts.html#outputs-of-the-build-script).\n+    ///\n+    /// When using the `include` macro to include stretches of documentation, remember that the\n+    /// included file still needs to be a valid rust syntax. It is also possible to\n+    /// use the [`include_str`] macro as `#![doc = include_str!(\"...\")]` (at the module level) or\n+    /// `#[doc = include_str!(\"...\")]` (at the item level) to include documentation from a plain\n+    /// text or markdown file.\n     ///\n     /// # Examples\n     ///\n-    /// Assume there are two files in the same directory with the following\n-    /// contents:\n+    /// Assume there are two files in the same directory with the following contents:\n     ///\n     /// File 'monkeys.in':\n     ///"}]}