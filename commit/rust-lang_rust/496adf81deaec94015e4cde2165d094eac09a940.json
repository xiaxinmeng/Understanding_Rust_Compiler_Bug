{"sha": "496adf81deaec94015e4cde2165d094eac09a940", "node_id": "C_kwDOAAsO6NoAKDQ5NmFkZjgxZGVhZWM5NDAxNWU0Y2RlMjE2NWQwOTRlYWMwOWE5NDA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-02-06T14:24:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-06T14:24:13Z"}, "message": "Rollup merge of #107553 - edward-shen:edward-shen/suggest-null-ptr, r=WaffleLapkin\n\nSuggest std::ptr::null if literal 0 is given to a raw pointer function argument\n\nImplementation feels a little sus (we're parsing the span for a `0`) but it seems to fall in line the string-expected-found-char condition right above this check, so I think it's fine.\n\nFeedback appreciated on help text? I think it's consistent but it does sound a little awkward maybe?\n\nFixes #107517", "tree": {"sha": "acf9e065d74fa7d155cb3ba658fb08e4d844df82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acf9e065d74fa7d155cb3ba658fb08e4d844df82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/496adf81deaec94015e4cde2165d094eac09a940", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj4Q2NCRBK7hj4Ov3rIwAA8HgIAKChx1s6st/5F4inAZBtuSRS\nwDEgx0ipRe1EyGxH7vA+hfUxe2VBMsakwkFQJQdIZxHmR8r5HwCSaqa8Xp+I61Sp\nYJ19nIFtaSyVqBShjFaGCdIX2IMZAFjobf6JjsZhGdUshWdivxCo8wR+COV/nrPJ\nH4OzT7byYCuDAnRL38Xfn5B2aWeqhJJIbJw94bSa8t8n9V/KT60FW3FAQcNyRZD5\nTcme3VuXLQ1zBYCWJ2pj89xbei12qDdPfnqhsYi09nNoG03eqAZXXVXixcULIkt3\nMHVhgKBv1n8jdKasGLOloxxGKuHjN2bUm5qpnKrUFtarotTd/F10XoVShZXUK/k=\n=O6nS\n-----END PGP SIGNATURE-----\n", "payload": "tree acf9e065d74fa7d155cb3ba658fb08e4d844df82\nparent e7813fee92c56621d08e8dbe83948d9f4a30a9ec\nparent 32967296b444b639c965cbf126720c24decc9c65\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1675693453 +0530\ncommitter GitHub <noreply@github.com> 1675693453 +0530\n\nRollup merge of #107553 - edward-shen:edward-shen/suggest-null-ptr, r=WaffleLapkin\n\nSuggest std::ptr::null if literal 0 is given to a raw pointer function argument\n\nImplementation feels a little sus (we're parsing the span for a `0`) but it seems to fall in line the string-expected-found-char condition right above this check, so I think it's fine.\n\nFeedback appreciated on help text? I think it's consistent but it does sound a little awkward maybe?\n\nFixes #107517\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/496adf81deaec94015e4cde2165d094eac09a940", "html_url": "https://github.com/rust-lang/rust/commit/496adf81deaec94015e4cde2165d094eac09a940", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/496adf81deaec94015e4cde2165d094eac09a940/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7813fee92c56621d08e8dbe83948d9f4a30a9ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7813fee92c56621d08e8dbe83948d9f4a30a9ec", "html_url": "https://github.com/rust-lang/rust/commit/e7813fee92c56621d08e8dbe83948d9f4a30a9ec"}, {"sha": "32967296b444b639c965cbf126720c24decc9c65", "url": "https://api.github.com/repos/rust-lang/rust/commits/32967296b444b639c965cbf126720c24decc9c65", "html_url": "https://github.com/rust-lang/rust/commit/32967296b444b639c965cbf126720c24decc9c65"}], "stats": {"total": 190, "additions": 190, "deletions": 0}, "files": [{"sha": "c4905a934cb4eb7beba493edd756951ea5983a8c", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/496adf81deaec94015e4cde2165d094eac09a940/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/496adf81deaec94015e4cde2165d094eac09a940/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=496adf81deaec94015e4cde2165d094eac09a940", "patch": "@@ -60,6 +60,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             || self.suggest_clone_for_ref(err, expr, expr_ty, expected)\n             || self.suggest_into(err, expr, expr_ty, expected)\n             || self.suggest_floating_point_literal(err, expr, expected)\n+            || self.suggest_null_ptr_for_literal_zero_given_to_ptr_arg(err, expr, expected)\n             || self.note_result_coercion(err, expr, expected, expr_ty);\n         if !suggested {\n             self.point_at_expr_source_of_inferred_type(err, expr, expr_ty, expected, expr.span);"}, {"sha": "b03f0e94e10017d0f1873dbae5beb2f3c3827a80", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/496adf81deaec94015e4cde2165d094eac09a940/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/496adf81deaec94015e4cde2165d094eac09a940/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=496adf81deaec94015e4cde2165d094eac09a940", "patch": "@@ -13,6 +13,7 @@ use rustc_hir::{\n use rustc_hir_analysis::astconv::AstConv;\n use rustc_infer::traits::{self, StatementAsExpression};\n use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{\n     self, suggest_constraining_type_params, Binder, DefIdTree, IsSuggestable, ToPredicate, Ty,\n     TypeVisitable,\n@@ -1244,6 +1245,49 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// Suggest providing `std::ptr::null()` or `std::ptr::null_mut()` if they\n+    /// pass in a literal 0 to an raw pointer.\n+    #[instrument(skip(self, err))]\n+    pub(crate) fn suggest_null_ptr_for_literal_zero_given_to_ptr_arg(\n+        &self,\n+        err: &mut Diagnostic,\n+        expr: &hir::Expr<'_>,\n+        expected_ty: Ty<'tcx>,\n+    ) -> bool {\n+        // Expected type needs to be a raw pointer.\n+        let ty::RawPtr(ty::TypeAndMut { mutbl, .. }) = expected_ty.kind() else {\n+            return false;\n+        };\n+\n+        // Provided expression needs to be a literal `0`.\n+        let ExprKind::Lit(Spanned {\n+            node: rustc_ast::LitKind::Int(0, _),\n+            span,\n+        }) = expr.kind else {\n+            return false;\n+        };\n+\n+        // We need to find a null pointer symbol to suggest\n+        let null_sym = match mutbl {\n+            hir::Mutability::Not => sym::ptr_null,\n+            hir::Mutability::Mut => sym::ptr_null_mut,\n+        };\n+        let Some(null_did) = self.tcx.get_diagnostic_item(null_sym) else {\n+            return false;\n+        };\n+        let null_path_str = with_no_trimmed_paths!(self.tcx.def_path_str(null_did));\n+\n+        // We have satisfied all requirements to provide a suggestion. Emit it.\n+        err.span_suggestion(\n+            span,\n+            format!(\"if you meant to create a null pointer, use `{null_path_str}()`\"),\n+            null_path_str + \"()\",\n+            Applicability::MachineApplicable,\n+        );\n+\n+        true\n+    }\n+\n     pub(crate) fn suggest_associated_const(\n         &self,\n         err: &mut Diagnostic,"}, {"sha": "40f900c7d30cfb55c1c9a9163483467d979d0411", "filename": "tests/ui/suggest-null-ptr.fixed", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/496adf81deaec94015e4cde2165d094eac09a940/tests%2Fui%2Fsuggest-null-ptr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/496adf81deaec94015e4cde2165d094eac09a940/tests%2Fui%2Fsuggest-null-ptr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggest-null-ptr.fixed?ref=496adf81deaec94015e4cde2165d094eac09a940", "patch": "@@ -0,0 +1,31 @@\n+// run-rustfix\n+\n+// Suggest providing a std::ptr::null{,_mut}() to a function that takes in a raw\n+// pointer if a literal 0 was provided by the user.\n+\n+extern \"C\" {\n+    fn foo(ptr: *const u8);\n+\n+    fn foo_mut(ptr: *mut u8);\n+\n+    fn usize(ptr: *const usize);\n+\n+    fn usize_mut(ptr: *mut usize);\n+}\n+\n+fn main() {\n+    unsafe {\n+        foo(std::ptr::null());\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null()`\n+        foo_mut(std::ptr::null_mut());\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null_mut()`\n+        usize(std::ptr::null());\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null()`\n+        usize_mut(std::ptr::null_mut());\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null_mut()`\n+    }\n+}"}, {"sha": "19b595bf769ecbd8d775dd2988bf2486fce447ab", "filename": "tests/ui/suggest-null-ptr.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/496adf81deaec94015e4cde2165d094eac09a940/tests%2Fui%2Fsuggest-null-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/496adf81deaec94015e4cde2165d094eac09a940/tests%2Fui%2Fsuggest-null-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggest-null-ptr.rs?ref=496adf81deaec94015e4cde2165d094eac09a940", "patch": "@@ -0,0 +1,31 @@\n+// run-rustfix\n+\n+// Suggest providing a std::ptr::null{,_mut}() to a function that takes in a raw\n+// pointer if a literal 0 was provided by the user.\n+\n+extern \"C\" {\n+    fn foo(ptr: *const u8);\n+\n+    fn foo_mut(ptr: *mut u8);\n+\n+    fn usize(ptr: *const usize);\n+\n+    fn usize_mut(ptr: *mut usize);\n+}\n+\n+fn main() {\n+    unsafe {\n+        foo(0);\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null()`\n+        foo_mut(0);\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null_mut()`\n+        usize(0);\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null()`\n+        usize_mut(0);\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null_mut()`\n+    }\n+}"}, {"sha": "66a79d0749ee8f80a788f2562355fcd60ab62bbb", "filename": "tests/ui/suggest-null-ptr.stderr", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/496adf81deaec94015e4cde2165d094eac09a940/tests%2Fui%2Fsuggest-null-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/496adf81deaec94015e4cde2165d094eac09a940/tests%2Fui%2Fsuggest-null-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggest-null-ptr.stderr?ref=496adf81deaec94015e4cde2165d094eac09a940", "patch": "@@ -0,0 +1,83 @@\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-null-ptr.rs:18:13\n+   |\n+LL |         foo(0);\n+   |         --- ^ expected `*const u8`, found `usize`\n+   |         |\n+   |         arguments to this function are incorrect\n+   |\n+   = note: expected raw pointer `*const u8`\n+                     found type `usize`\n+note: function defined here\n+  --> $DIR/suggest-null-ptr.rs:7:8\n+   |\n+LL |     fn foo(ptr: *const u8);\n+   |        ^^^\n+help: if you meant to create a null pointer, use `std::ptr::null()`\n+   |\n+LL |         foo(std::ptr::null());\n+   |             ~~~~~~~~~~~~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-null-ptr.rs:21:17\n+   |\n+LL |         foo_mut(0);\n+   |         ------- ^ expected `*mut u8`, found `usize`\n+   |         |\n+   |         arguments to this function are incorrect\n+   |\n+   = note: expected raw pointer `*mut u8`\n+                     found type `usize`\n+note: function defined here\n+  --> $DIR/suggest-null-ptr.rs:9:8\n+   |\n+LL |     fn foo_mut(ptr: *mut u8);\n+   |        ^^^^^^^\n+help: if you meant to create a null pointer, use `std::ptr::null_mut()`\n+   |\n+LL |         foo_mut(std::ptr::null_mut());\n+   |                 ~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-null-ptr.rs:24:15\n+   |\n+LL |         usize(0);\n+   |         ----- ^ expected `*const usize`, found `usize`\n+   |         |\n+   |         arguments to this function are incorrect\n+   |\n+   = note: expected raw pointer `*const usize`\n+                     found type `usize`\n+note: function defined here\n+  --> $DIR/suggest-null-ptr.rs:11:8\n+   |\n+LL |     fn usize(ptr: *const usize);\n+   |        ^^^^^\n+help: if you meant to create a null pointer, use `std::ptr::null()`\n+   |\n+LL |         usize(std::ptr::null());\n+   |               ~~~~~~~~~~~~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-null-ptr.rs:27:19\n+   |\n+LL |         usize_mut(0);\n+   |         --------- ^ expected `*mut usize`, found `usize`\n+   |         |\n+   |         arguments to this function are incorrect\n+   |\n+   = note: expected raw pointer `*mut usize`\n+                     found type `usize`\n+note: function defined here\n+  --> $DIR/suggest-null-ptr.rs:13:8\n+   |\n+LL |     fn usize_mut(ptr: *mut usize);\n+   |        ^^^^^^^^^\n+help: if you meant to create a null pointer, use `std::ptr::null_mut()`\n+   |\n+LL |         usize_mut(std::ptr::null_mut());\n+   |                   ~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}