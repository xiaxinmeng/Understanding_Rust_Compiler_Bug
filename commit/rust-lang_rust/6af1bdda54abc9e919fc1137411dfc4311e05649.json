{"sha": "6af1bdda54abc9e919fc1137411dfc4311e05649", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZjFiZGRhNTRhYmM5ZTkxOWZjMTEzNzQxMWRmYzQzMTFlMDU2NDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-15T21:01:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-15T21:01:30Z"}, "message": "Auto merge of #73595 - SNCPlay42:lifetime-after-mut, r=Mark-Simulacrum\n\nimprove diagnostics for lifetime after `&mut`\n\nIf, when parsing a borrow pointee type, we see a lifetime after `mut`, suggest placing the lifetime before `mut` and eat the lifetime to avoid a large number of unhelpful diagnostics.\n\nThere are some subtleties to avoid false positives in cases like `&mut 'a + Trait`, where `&mut ('a + Trait)` is a better suggestion.\n\nfixes #73568", "tree": {"sha": "75d6568271b55b0f08e7eed5a44acbf85b18e6ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75d6568271b55b0f08e7eed5a44acbf85b18e6ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6af1bdda54abc9e919fc1137411dfc4311e05649", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6af1bdda54abc9e919fc1137411dfc4311e05649", "html_url": "https://github.com/rust-lang/rust/commit/6af1bdda54abc9e919fc1137411dfc4311e05649", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6af1bdda54abc9e919fc1137411dfc4311e05649/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07ece44a42b6cd33e59d58b5325f637f398464d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/07ece44a42b6cd33e59d58b5325f637f398464d2", "html_url": "https://github.com/rust-lang/rust/commit/07ece44a42b6cd33e59d58b5325f637f398464d2"}, {"sha": "4de9a53d98533868dfa209bfb3604bba92d5e7b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4de9a53d98533868dfa209bfb3604bba92d5e7b1", "html_url": "https://github.com/rust-lang/rust/commit/4de9a53d98533868dfa209bfb3604bba92d5e7b1"}], "stats": {"total": 102, "additions": 101, "deletions": 1}, "files": [{"sha": "fc4c62ccbd90e7b4865827d2bc3997b2360ce012", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6af1bdda54abc9e919fc1137411dfc4311e05649/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af1bdda54abc9e919fc1137411dfc4311e05649/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=6af1bdda54abc9e919fc1137411dfc4311e05649", "patch": "@@ -276,8 +276,34 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_borrowed_pointee(&mut self) -> PResult<'a, TyKind> {\n-        let opt_lifetime = if self.check_lifetime() { Some(self.expect_lifetime()) } else { None };\n+        let and_span = self.prev_token.span;\n+        let mut opt_lifetime =\n+            if self.check_lifetime() { Some(self.expect_lifetime()) } else { None };\n         let mutbl = self.parse_mutability();\n+        if self.token.is_lifetime() && mutbl == Mutability::Mut && opt_lifetime.is_none() {\n+            // A lifetime is invalid here: it would be part of a bare trait bound, which requires\n+            // it to be followed by a plus, but we disallow plus in the pointee type.\n+            // So we can handle this case as an error here, and suggest `'a mut`.\n+            // If there *is* a plus next though, handling the error later provides better suggestions\n+            // (like adding parentheses)\n+            if !self.look_ahead(1, |t| t.is_like_plus()) {\n+                let lifetime_span = self.token.span;\n+                let span = and_span.to(lifetime_span);\n+\n+                let mut err = self.struct_span_err(span, \"lifetime must precede `mut`\");\n+                if let Ok(lifetime_src) = self.span_to_snippet(lifetime_span) {\n+                    err.span_suggestion(\n+                        span,\n+                        \"place the lifetime before `mut`\",\n+                        format!(\"&{} mut\", lifetime_src),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+                err.emit();\n+\n+                opt_lifetime = Some(self.expect_lifetime());\n+            }\n+        }\n         let ty = self.parse_ty_no_plus()?;\n         Ok(TyKind::Rptr(opt_lifetime, MutTy { ty, mutbl }))\n     }"}, {"sha": "0b10a5f6f4e41c91950abe38ccdfe71922ed8fb4", "filename": "src/test/ui/parser/issue-73568-lifetime-after-mut.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6af1bdda54abc9e919fc1137411dfc4311e05649/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af1bdda54abc9e919fc1137411dfc4311e05649/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.rs?ref=6af1bdda54abc9e919fc1137411dfc4311e05649", "patch": "@@ -0,0 +1,21 @@\n+#![crate_type=\"lib\"]\n+fn x<'a>(x: &mut 'a i32){} //~ ERROR lifetime must precede `mut`\n+\n+macro_rules! mac {\n+    ($lt:lifetime) => {\n+        fn w<$lt>(w: &mut $lt i32) {}\n+        //~^ ERROR lifetime must precede `mut`\n+    }\n+}\n+\n+mac!('a);\n+\n+// avoid false positives\n+fn y<'a>(y: &mut 'a + Send) {\n+    //~^ ERROR expected a path on the left-hand side of `+`, not `&mut 'a`\n+    //~| WARNING trait objects without an explicit `dyn` are deprecated\n+    //~| ERROR at least one trait is required for an object type\n+    let z = y as &mut 'a + Send;\n+    //~^ ERROR expected value, found trait `Send`\n+    //~| WARNING trait objects without an explicit `dyn` are deprecated\n+}"}, {"sha": "abb64f7e490df5569d79344b67d1948f802e0dca", "filename": "src/test/ui/parser/issue-73568-lifetime-after-mut.stderr", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/6af1bdda54abc9e919fc1137411dfc4311e05649/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6af1bdda54abc9e919fc1137411dfc4311e05649/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr?ref=6af1bdda54abc9e919fc1137411dfc4311e05649", "patch": "@@ -0,0 +1,53 @@\n+error: lifetime must precede `mut`\n+  --> $DIR/issue-73568-lifetime-after-mut.rs:2:13\n+   |\n+LL | fn x<'a>(x: &mut 'a i32){}\n+   |             ^^^^^^^ help: place the lifetime before `mut`: `&'a mut`\n+\n+error[E0178]: expected a path on the left-hand side of `+`, not `&mut 'a`\n+  --> $DIR/issue-73568-lifetime-after-mut.rs:14:13\n+   |\n+LL | fn y<'a>(y: &mut 'a + Send) {\n+   |             ^^^^^^^^^^^^^^ help: try adding parentheses: `&mut ('a + Send)`\n+\n+error: lifetime must precede `mut`\n+  --> $DIR/issue-73568-lifetime-after-mut.rs:6:22\n+   |\n+LL |         fn w<$lt>(w: &mut $lt i32) {}\n+   |                      ^^^^^^^^ help: place the lifetime before `mut`: `&$lt mut`\n+...\n+LL | mac!('a);\n+   | --------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0423]: expected value, found trait `Send`\n+  --> $DIR/issue-73568-lifetime-after-mut.rs:18:28\n+   |\n+LL |     let z = y as &mut 'a + Send;\n+   |                            ^^^^ not a value\n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/issue-73568-lifetime-after-mut.rs:14:18\n+   |\n+LL | fn y<'a>(y: &mut 'a + Send) {\n+   |                  ^^ help: use `dyn`: `dyn 'a`\n+   |\n+   = note: `#[warn(bare_trait_objects)]` on by default\n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/issue-73568-lifetime-after-mut.rs:18:23\n+   |\n+LL |     let z = y as &mut 'a + Send;\n+   |                       ^^ help: use `dyn`: `dyn 'a`\n+\n+error[E0224]: at least one trait is required for an object type\n+  --> $DIR/issue-73568-lifetime-after-mut.rs:14:18\n+   |\n+LL | fn y<'a>(y: &mut 'a + Send) {\n+   |                  ^^\n+\n+error: aborting due to 5 previous errors; 2 warnings emitted\n+\n+Some errors have detailed explanations: E0178, E0224, E0423.\n+For more information about an error, try `rustc --explain E0178`."}]}