{"sha": "1ee94a1336071fb0319b23a6c73b3d83ccd66bdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZTk0YTEzMzYwNzFmYjAzMTliMjNhNmM3M2IzZDgzY2NkNjZiZGY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-28T20:46:46Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-01T18:05:31Z"}, "message": "std: Flush when buffered writers are dropped\n\nIt's still not entirely clear what should happen if there was an error when\nflushing, but I'm deferring that decision to #12628. I believe that it's crucial\nfor the usefulness of buffered writers to be able to flush on drop. It's just\ntoo easy to forget to flush them in small one-off use cases.\n\ncc #12628", "tree": {"sha": "293425ff632ba752c5bca730584c7995224e31f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/293425ff632ba752c5bca730584c7995224e31f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ee94a1336071fb0319b23a6c73b3d83ccd66bdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee94a1336071fb0319b23a6c73b3d83ccd66bdf", "html_url": "https://github.com/rust-lang/rust/commit/1ee94a1336071fb0319b23a6c73b3d83ccd66bdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ee94a1336071fb0319b23a6c73b3d83ccd66bdf/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d117cf3ca9dc091dd605b33617c32c6019b0e2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d117cf3ca9dc091dd605b33617c32c6019b0e2b", "html_url": "https://github.com/rust-lang/rust/commit/3d117cf3ca9dc091dd605b33617c32c6019b0e2b"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "5a69815fa2947a7065a5220ec7d9b85c31a6ee0b", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1ee94a1336071fb0319b23a6c73b3d83ccd66bdf/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee94a1336071fb0319b23a6c73b3d83ccd66bdf/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=1ee94a1336071fb0319b23a6c73b3d83ccd66bdf", "patch": "@@ -14,7 +14,8 @@ use cmp;\n use container::Container;\n use io::{Reader, Writer, Stream, Buffer, DEFAULT_BUF_SIZE, IoResult};\n use iter::ExactSize;\n-use option::{Some, None};\n+use ops::Drop;\n+use option::{Some, None, Option};\n use result::{Ok, Err};\n use vec::{OwnedVector, ImmutableVector, MutableVector};\n use vec;\n@@ -115,7 +116,7 @@ impl<R: Reader> Reader for BufferedReader<R> {\n \n /// Wraps a Writer and buffers output to it\n ///\n-/// Note that `BufferedWriter` will NOT flush its buffer when dropped.\n+/// This writer will be flushed when it is dropped.\n ///\n /// # Example\n ///\n@@ -130,7 +131,7 @@ impl<R: Reader> Reader for BufferedReader<R> {\n /// writer.flush();\n /// ```\n pub struct BufferedWriter<W> {\n-    priv inner: W,\n+    priv inner: Option<W>,\n     priv buf: ~[u8],\n     priv pos: uint\n }\n@@ -142,7 +143,7 @@ impl<W: Writer> BufferedWriter<W> {\n         let mut buf = vec::with_capacity(cap);\n         unsafe { buf.set_len(cap); }\n         BufferedWriter {\n-            inner: inner,\n+            inner: Some(inner),\n             buf: buf,\n             pos: 0\n         }\n@@ -155,7 +156,7 @@ impl<W: Writer> BufferedWriter<W> {\n \n     fn flush_buf(&mut self) -> IoResult<()> {\n         if self.pos != 0 {\n-            let ret = self.inner.write(self.buf.slice_to(self.pos));\n+            let ret = self.inner.get_mut_ref().write(self.buf.slice_to(self.pos));\n             self.pos = 0;\n             ret\n         } else {\n@@ -167,15 +168,15 @@ impl<W: Writer> BufferedWriter<W> {\n     ///\n     /// This type does not expose the ability to get a mutable reference to the\n     /// underlying reader because that could possibly corrupt the buffer.\n-    pub fn get_ref<'a>(&'a self) -> &'a W { &self.inner }\n+    pub fn get_ref<'a>(&'a self) -> &'a W { self.inner.get_ref() }\n \n     /// Unwraps this buffer, returning the underlying writer.\n     ///\n     /// The buffer is flushed before returning the writer.\n     pub fn unwrap(mut self) -> W {\n-        // FIXME: is failing the right thing to do if flushing fails?\n+        // FIXME(#12628): is failing the right thing to do if flushing fails?\n         self.flush_buf().unwrap();\n-        self.inner\n+        self.inner.take_unwrap()\n     }\n }\n \n@@ -186,7 +187,7 @@ impl<W: Writer> Writer for BufferedWriter<W> {\n         }\n \n         if buf.len() > self.buf.len() {\n-            self.inner.write(buf)\n+            self.inner.get_mut_ref().write(buf)\n         } else {\n             let dst = self.buf.mut_slice_from(self.pos);\n             vec::bytes::copy_memory(dst, buf);\n@@ -196,14 +197,24 @@ impl<W: Writer> Writer for BufferedWriter<W> {\n     }\n \n     fn flush(&mut self) -> IoResult<()> {\n-        self.flush_buf().and_then(|()| self.inner.flush())\n+        self.flush_buf().and_then(|()| self.inner.get_mut_ref().flush())\n+    }\n+}\n+\n+#[unsafe_destructor]\n+impl<W: Writer> Drop for BufferedWriter<W> {\n+    fn drop(&mut self) {\n+        if self.inner.is_some() {\n+            // FIXME(#12628): should this error be ignored?\n+            let _ = self.flush_buf();\n+        }\n     }\n }\n \n /// Wraps a Writer and buffers output to it, flushing whenever a newline (`0x0a`,\n /// `'\\n'`) is detected.\n ///\n-/// Note that this structure does NOT flush the output when dropped.\n+/// This writer will be flushed when it is dropped.\n pub struct LineBufferedWriter<W> {\n     priv inner: BufferedWriter<W>,\n }\n@@ -256,13 +267,13 @@ impl<W> InternalBufferedWriter<W> {\n \n impl<W: Reader> Reader for InternalBufferedWriter<W> {\n     fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> {\n-        self.get_mut_ref().inner.read(buf)\n+        self.get_mut_ref().inner.get_mut_ref().read(buf)\n     }\n }\n \n-/// Wraps a Stream and buffers input and output to and from it\n+/// Wraps a Stream and buffers input and output to and from it.\n ///\n-/// Note that `BufferedStream` will NOT flush its output buffer when dropped.\n+/// The output half will be flushed when this stream is dropped.\n ///\n /// # Example\n ///"}]}