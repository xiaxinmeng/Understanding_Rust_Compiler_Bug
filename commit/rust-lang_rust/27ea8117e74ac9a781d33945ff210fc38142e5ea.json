{"sha": "27ea8117e74ac9a781d33945ff210fc38142e5ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZWE4MTE3ZTc0YWM5YTc4MWQzMzk0NWZmMjEwZmMzODE0MmU1ZWE=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-09-27T21:30:04Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-09-27T21:30:04Z"}, "message": "Enable NLL compare mode for more tests\n\nThese tests were disabled due to NLL bugs that have since been fixed.", "tree": {"sha": "487f879338e551151dc3cde3314aa83b09df1b90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/487f879338e551151dc3cde3314aa83b09df1b90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27ea8117e74ac9a781d33945ff210fc38142e5ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27ea8117e74ac9a781d33945ff210fc38142e5ea", "html_url": "https://github.com/rust-lang/rust/commit/27ea8117e74ac9a781d33945ff210fc38142e5ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27ea8117e74ac9a781d33945ff210fc38142e5ea/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9865b1c37f8cb8a257591e6ea0b32a5df1f3d41", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9865b1c37f8cb8a257591e6ea0b32a5df1f3d41", "html_url": "https://github.com/rust-lang/rust/commit/c9865b1c37f8cb8a257591e6ea0b32a5df1f3d41"}], "stats": {"total": 600, "additions": 458, "deletions": 142}, "files": [{"sha": "0f0eed4a051dd7dfb710508976c8f6db6a5f5b53", "filename": "src/test/ui/borrowck/borrowck-lend-flow-if.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.nll.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -0,0 +1,14 @@\n+error[E0502]: cannot borrow `*v` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-lend-flow-if.rs:39:16\n+   |\n+LL |         _w = &v;\n+   |              -- immutable borrow occurs here\n+LL |     }\n+LL |     borrow_mut(&mut *v); //~ ERROR cannot borrow\n+   |                ^^^^^^^ mutable borrow occurs here\n+LL |     _w.use_ref();\n+   |     -- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "8e6ac3459794a97874cf884275af71d7279a87cd", "filename": "src/test/ui/borrowck/borrowck-lend-flow-if.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.rs?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Note: the borrowck analysis is currently flow-insensitive.\n // Therefore, some of these errors are marked as spurious and could be\n // corrected by a simple change to the analysis.  The others are\n@@ -32,25 +30,32 @@ fn pre_freeze_cond() {\n     // In this instance, the freeze is conditional and starts before\n     // the mut borrow.\n \n+    let u = box 0;\n     let mut v: Box<_> = box 3;\n-    let _w;\n+    let mut _w = &u;\n     if cond() {\n         _w = &v;\n     }\n     borrow_mut(&mut *v); //~ ERROR cannot borrow\n+    _w.use_ref();\n }\n \n fn pre_freeze_else() {\n     // In this instance, the freeze and mut borrow are on separate sides\n     // of the if.\n \n+    let u = box 0;\n     let mut v: Box<_> = box 3;\n-    let _w;\n+    let mut _w = &u;\n     if cond() {\n         _w = &v;\n     } else {\n         borrow_mut(&mut *v);\n     }\n+    _w.use_ref();\n }\n \n fn main() {}\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "091f74416c91b4dfbbfe832f1eefd66a84409ba1", "filename": "src/test/ui/borrowck/borrowck-lend-flow-if.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -1,11 +1,12 @@\n error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immutable\n-  --> $DIR/borrowck-lend-flow-if.rs:40:21\n+  --> $DIR/borrowck-lend-flow-if.rs:39:21\n    |\n LL |         _w = &v;\n    |               - immutable borrow occurs here\n LL |     }\n LL |     borrow_mut(&mut *v); //~ ERROR cannot borrow\n    |                     ^^ mutable borrow occurs here\n+LL |     _w.use_ref();\n LL | }\n    | - immutable borrow ends here\n "}, {"sha": "7ebc2ce47cd9039441c1410525c2b99ab82525b8", "filename": "src/test/ui/borrowck/borrowck-lend-flow.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.nll.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -0,0 +1,13 @@\n+error[E0502]: cannot borrow `*v` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-lend-flow.rs:34:16\n+   |\n+LL |     let _w = &v;\n+   |              -- immutable borrow occurs here\n+LL |     borrow_mut(&mut *v); //~ ERROR cannot borrow\n+   |                ^^^^^^^ mutable borrow occurs here\n+LL |     _w.use_ref();\n+   |     -- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "b50a97cf3c3abf47f7ea29dc5a5b7228b65ce748", "filename": "src/test/ui/borrowck/borrowck-lend-flow.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.rs?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Note: the borrowck analysis is currently flow-insensitive.\n // Therefore, some of these errors are marked as spurious and could be\n // corrected by a simple change to the analysis.  The others are\n@@ -34,6 +32,7 @@ fn pre_freeze() {\n     let mut v: Box<_> = box 3;\n     let _w = &v;\n     borrow_mut(&mut *v); //~ ERROR cannot borrow\n+    _w.use_ref();\n }\n \n fn post_freeze() {\n@@ -45,3 +44,6 @@ fn post_freeze() {\n }\n \n fn main() {}\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "0d67f97fe01650b4b09dfd517b2f0ff02ea2041c", "filename": "src/test/ui/borrowck/borrowck-lend-flow.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -1,10 +1,11 @@\n error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immutable\n-  --> $DIR/borrowck-lend-flow.rs:36:21\n+  --> $DIR/borrowck-lend-flow.rs:34:21\n    |\n LL |     let _w = &v;\n    |               - immutable borrow occurs here\n LL |     borrow_mut(&mut *v); //~ ERROR cannot borrow\n    |                     ^^ mutable borrow occurs here\n+LL |     _w.use_ref();\n LL | }\n    | - immutable borrow ends here\n "}, {"sha": "7f282c7322015cdd4d34714062a074070662e78e", "filename": "src/test/ui/closure_promotion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fclosure_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fclosure_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_promotion.rs?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -12,8 +12,7 @@\n \n #![allow(const_err)]\n \n-// nll successfully compiles this. It is a bug.\n-// See https://github.com/rust-lang/rust/issues/52384\n+// nll successfully compiles this.\n fn main() {\n     let x: &'static _ = &|| { let z = 3; z }; //~ ERROR does not live long enough\n }"}, {"sha": "058c822930361347fd3c312224b50ffdb342362c", "filename": "src/test/ui/closure_promotion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fclosure_promotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fclosure_promotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_promotion.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/closure_promotion.rs:18:26\n+  --> $DIR/closure_promotion.rs:17:26\n    |\n LL |     let x: &'static _ = &|| { let z = 3; z }; //~ ERROR does not live long enough\n    |                          ^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough"}, {"sha": "654b2b91583a84337a58a29008c8d974915fd3a9", "filename": "src/test/ui/regions/regions-bounded-by-trait-requiring-static.nll.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.nll.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -0,0 +1,50 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:32:5\n+   |\n+LL | fn param_not_ok<'a>(x: &'a isize) {\n+   |                 -- lifetime `'a` defined here\n+LL |     assert_send::<&'a isize>(); //~ ERROR does not fulfill the required lifetime\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:36:5\n+   |\n+LL | fn param_not_ok1<'a>(_: &'a isize) {\n+   |                  -- lifetime `'a` defined here\n+LL |     assert_send::<&'a str>(); //~ ERROR does not fulfill the required lifetime\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:40:5\n+   |\n+LL | fn param_not_ok2<'a>(_: &'a isize) {\n+   |                  -- lifetime `'a` defined here\n+LL |     assert_send::<&'a [isize]>(); //~ ERROR does not fulfill the required lifetime\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:54:5\n+   |\n+LL | fn box_with_region_not_ok<'a>() {\n+   |                           -- lifetime `'a` defined here\n+LL |     assert_send::<Box<&'a isize>>(); //~ ERROR does not fulfill the required lifetime\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:65:5\n+   |\n+LL | fn unsafe_ok2<'a>(_: &'a isize) {\n+   |               -- lifetime `'a` defined here\n+LL |     assert_send::<*const &'a isize>(); //~ ERROR does not fulfill the required lifetime\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:69:5\n+   |\n+LL | fn unsafe_ok3<'a>(_: &'a isize) {\n+   |               -- lifetime `'a` defined here\n+LL |     assert_send::<*mut &'a isize>(); //~ ERROR does not fulfill the required lifetime\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "19c50d57e1b39565386fe8d2f3410830aacd25ca", "filename": "src/test/ui/regions/regions-bounded-by-trait-requiring-static.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.rs?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test which of the builtin types are considered sendable. The tests\n // in this file all test region bound and lifetime violations that are\n // detected during type check."}, {"sha": "82fa271ca4ea619e604f4c96c437bd11de69bd3b", "filename": "src/test/ui/regions/regions-bounded-by-trait-requiring-static.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -1,45 +1,45 @@\n error[E0477]: the type `&'a isize` does not fulfill the required lifetime\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:34:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:32:5\n    |\n LL |     assert_send::<&'a isize>(); //~ ERROR does not fulfill the required lifetime\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: type must satisfy the static lifetime\n \n error[E0477]: the type `&'a str` does not fulfill the required lifetime\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:38:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:36:5\n    |\n LL |     assert_send::<&'a str>(); //~ ERROR does not fulfill the required lifetime\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: type must satisfy the static lifetime\n \n error[E0477]: the type `&'a [isize]` does not fulfill the required lifetime\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:42:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:40:5\n    |\n LL |     assert_send::<&'a [isize]>(); //~ ERROR does not fulfill the required lifetime\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: type must satisfy the static lifetime\n \n error[E0477]: the type `std::boxed::Box<&'a isize>` does not fulfill the required lifetime\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:56:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:54:5\n    |\n LL |     assert_send::<Box<&'a isize>>(); //~ ERROR does not fulfill the required lifetime\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: type must satisfy the static lifetime\n \n error[E0477]: the type `*const &'a isize` does not fulfill the required lifetime\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:67:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:65:5\n    |\n LL |     assert_send::<*const &'a isize>(); //~ ERROR does not fulfill the required lifetime\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: type must satisfy the static lifetime\n \n error[E0477]: the type `*mut &'a isize` does not fulfill the required lifetime\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:71:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:69:5\n    |\n LL |     assert_send::<*mut &'a isize>(); //~ ERROR does not fulfill the required lifetime\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "91e0f7f73ee3d2fef5f5ca847b67c184f68baedb", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters.nll.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.nll.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -0,0 +1,19 @@\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/regions-bounded-method-type-parameters.rs:22:5\n+   |\n+LL | fn caller<'a>(x: &isize) {\n+   |                  ------ help: add explicit lifetime `'a` to the type of `x`: `&'a isize`\n+LL |     Foo.some_method::<&'a isize>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'a` required\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-bounded-method-type-parameters.rs:22:5\n+   |\n+LL | fn caller<'a>(x: &isize) {\n+   |           -- lifetime `'a` defined here\n+LL |     Foo.some_method::<&'a isize>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "da4e8231a239f11563931bdf16e2be7c96889feb", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.rs?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Check that explicit region bounds are allowed on the various\n // nominal types (but not on other types) and that they are type\n // checked."}, {"sha": "8649ca9281f16d466bafe75e376b45dd7610ed63", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -1,5 +1,5 @@\n error[E0477]: the type `&'a isize` does not fulfill the required lifetime\n-  --> $DIR/regions-bounded-method-type-parameters.rs:24:9\n+  --> $DIR/regions-bounded-method-type-parameters.rs:22:9\n    |\n LL |     Foo.some_method::<&'a isize>();\n    |         ^^^^^^^^^^^"}, {"sha": "2f3c7166867464f790a68fbe1519022bce047894", "filename": "src/test/ui/regions/regions-infer-contravariance-due-to-decl.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.nll.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -0,0 +1,13 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-infer-contravariance-due-to-decl.rs:35:9\n+   |\n+LL | fn use_<'short,'long>(c: Contravariant<'short>,\n+   |         ------ ----- lifetime `'long` defined here\n+   |         |\n+   |         lifetime `'short` defined here\n+...\n+LL |     let _: Contravariant<'long> = c; //~ ERROR E0623\n+   |         ^ type annotation requires that `'short` must outlive `'long`\n+\n+error: aborting due to previous error\n+"}, {"sha": "6e1c765724b0b8b2eaba427b45f3c69e06f5f70b", "filename": "src/test/ui/regions/regions-infer-contravariance-due-to-decl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.rs?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test that a type which is contravariant with respect to its region\n // parameter yields an error when used in a covariant way.\n //"}, {"sha": "10cc253397f7d7c4558e0ae8592701ade9bbb796", "filename": "src/test/ui/regions/regions-infer-contravariance-due-to-decl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-infer-contravariance-due-to-decl.rs:37:35\n+  --> $DIR/regions-infer-contravariance-due-to-decl.rs:35:35\n    |\n LL | fn use_<'short,'long>(c: Contravariant<'short>,\n    |                          --------------------- these two types are declared with different lifetimes..."}, {"sha": "835438e9e5d2633978bb4f57d0ae4f9669020413", "filename": "src/test/ui/regions/regions-infer-covariance-due-to-decl.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.nll.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -0,0 +1,13 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-infer-covariance-due-to-decl.rs:32:9\n+   |\n+LL | fn use_<'short,'long>(c: Covariant<'long>,\n+   |         ------ ----- lifetime `'long` defined here\n+   |         |\n+   |         lifetime `'short` defined here\n+...\n+LL |     let _: Covariant<'short> = c; //~ ERROR E0623\n+   |         ^ type annotation requires that `'short` must outlive `'long`\n+\n+error: aborting due to previous error\n+"}, {"sha": "1ab8ba4439b5d0568dbe2f5ca5288d0d1fd20e55", "filename": "src/test/ui/regions/regions-infer-covariance-due-to-decl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.rs?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test that a type which is covariant with respect to its region\n // parameter yields an error when used in a contravariant way.\n //"}, {"sha": "fd853629f37e42accbdc062add1014d4f45cdae2", "filename": "src/test/ui/regions/regions-infer-covariance-due-to-decl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-infer-covariance-due-to-decl.rs:34:32\n+  --> $DIR/regions-infer-covariance-due-to-decl.rs:32:32\n    |\n LL | fn use_<'short,'long>(c: Covariant<'long>,\n    |                          ----------------"}, {"sha": "e4b7a0f82db39e416b5508fad42853f5358e4805", "filename": "src/test/ui/regions/regions-outlives-projection-container.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.rs?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -14,8 +14,6 @@\n // type of a bound that appears in the where clause on a struct must\n // outlive the location in which the type appears. Issue #22246.\n \n-// ignore-compare-mode-nll\n-\n #![allow(dead_code)]\n #![feature(rustc_attrs)]\n "}, {"sha": "2a698f9bff5a4314ecfe28aab3dca246ea2dd509", "filename": "src/test/ui/regions/regions-outlives-projection-container.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -1,67 +1,67 @@\n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:52:12\n+  --> $DIR/regions-outlives-projection-container.rs:50:12\n    |\n LL |     let _: &'a WithAssoc<TheType<'b>> = loop { }; //~ ERROR reference has a longer lifetime\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 46:15\n-  --> $DIR/regions-outlives-projection-container.rs:46:15\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 44:15\n+  --> $DIR/regions-outlives-projection-container.rs:44:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 46:18\n-  --> $DIR/regions-outlives-projection-container.rs:46:18\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 44:18\n+  --> $DIR/regions-outlives-projection-container.rs:44:18\n    |\n LL | fn with_assoc<'a,'b>() {\n    |                  ^^\n \n error[E0491]: in type `&'a WithoutAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:69:12\n+  --> $DIR/regions-outlives-projection-container.rs:67:12\n    |\n LL |     let _: &'a WithoutAssoc<TheType<'b>> = loop { }; //~ ERROR reference has a longer lifetime\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 65:18\n-  --> $DIR/regions-outlives-projection-container.rs:65:18\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 63:18\n+  --> $DIR/regions-outlives-projection-container.rs:63:18\n    |\n LL | fn without_assoc<'a,'b>() {\n    |                  ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 65:21\n-  --> $DIR/regions-outlives-projection-container.rs:65:21\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 63:21\n+  --> $DIR/regions-outlives-projection-container.rs:63:21\n    |\n LL | fn without_assoc<'a,'b>() {\n    |                     ^^\n \n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:77:12\n+  --> $DIR/regions-outlives-projection-container.rs:75:12\n    |\n LL |     call::<&'a WithAssoc<TheType<'b>>>();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 72:20\n-  --> $DIR/regions-outlives-projection-container.rs:72:20\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 70:20\n+  --> $DIR/regions-outlives-projection-container.rs:70:20\n    |\n LL | fn call_with_assoc<'a,'b>() {\n    |                    ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 72:23\n-  --> $DIR/regions-outlives-projection-container.rs:72:23\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 70:23\n+  --> $DIR/regions-outlives-projection-container.rs:70:23\n    |\n LL | fn call_with_assoc<'a,'b>() {\n    |                       ^^\n \n error[E0491]: in type `&'a WithoutAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:84:12\n+  --> $DIR/regions-outlives-projection-container.rs:82:12\n    |\n LL |     call::<&'a WithoutAssoc<TheType<'b>>>(); //~ ERROR reference has a longer lifetime\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 81:23\n-  --> $DIR/regions-outlives-projection-container.rs:81:23\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 79:23\n+  --> $DIR/regions-outlives-projection-container.rs:79:23\n    |\n LL | fn call_without_assoc<'a,'b>() {\n    |                       ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 81:26\n-  --> $DIR/regions-outlives-projection-container.rs:81:26\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 79:26\n+  --> $DIR/regions-outlives-projection-container.rs:79:26\n    |\n LL | fn call_without_assoc<'a,'b>() {\n    |                          ^^"}, {"sha": "706d00a842403ac5d1fd4ab475e477e60888da3c", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant-in-second-position.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.nll.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -0,0 +1,13 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-variance-contravariant-use-covariant-in-second-position.rs:35:9\n+   |\n+LL | fn use_<'short,'long>(c: S<'long, 'short>,\n+   |         ------ ----- lifetime `'long` defined here\n+   |         |\n+   |         lifetime `'short` defined here\n+...\n+LL |     let _: S<'long, 'long> = c; //~ ERROR E0623\n+   |         ^ type annotation requires that `'short` must outlive `'long`\n+\n+error: aborting due to previous error\n+"}, {"sha": "1dfebd54ec3b3522ff461485babb426402678a43", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant-in-second-position.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.rs?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test that a type which is covariant with respect to its region\n // parameter yields an error when used in a contravariant way.\n //"}, {"sha": "45105e8714c9cc73b796719795653a913fb3e6d0", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant-in-second-position.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-variance-contravariant-use-covariant-in-second-position.rs:37:30\n+  --> $DIR/regions-variance-contravariant-use-covariant-in-second-position.rs:35:30\n    |\n LL | fn use_<'short,'long>(c: S<'long, 'short>,\n    |                          ----------------"}, {"sha": "144aa67f9057ad2a1df522c48376154bace70019", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.nll.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -0,0 +1,13 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-variance-contravariant-use-covariant.rs:33:9\n+   |\n+LL | fn use_<'short,'long>(c: Contravariant<'short>,\n+   |         ------ ----- lifetime `'long` defined here\n+   |         |\n+   |         lifetime `'short` defined here\n+...\n+LL |     let _: Contravariant<'long> = c; //~ ERROR E0623\n+   |         ^ type annotation requires that `'short` must outlive `'long`\n+\n+error: aborting due to previous error\n+"}, {"sha": "caf6a86fc0b26e7bbe9bbd51cf1d34ee9b299cfc", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.rs?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test that a type which is covariant with respect to its region\n // parameter yields an error when used in a contravariant way.\n //"}, {"sha": "c883691c348939ecb45d159ef5110a2cfb4dfa3e", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-variance-contravariant-use-covariant.rs:35:35\n+  --> $DIR/regions-variance-contravariant-use-covariant.rs:33:35\n    |\n LL | fn use_<'short,'long>(c: Contravariant<'short>,\n    |                          --------------------- these two types are declared with different lifetimes..."}, {"sha": "c9789f8555e8a209f6319c6083dd7a1ad4aebfd2", "filename": "src/test/ui/regions/regions-variance-covariant-use-contravariant.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.nll.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -0,0 +1,13 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-variance-covariant-use-contravariant.rs:33:9\n+   |\n+LL | fn use_<'short,'long>(c: Covariant<'long>,\n+   |         ------ ----- lifetime `'long` defined here\n+   |         |\n+   |         lifetime `'short` defined here\n+...\n+LL |     let _: Covariant<'short> = c; //~ ERROR E0623\n+   |         ^ type annotation requires that `'short` must outlive `'long`\n+\n+error: aborting due to previous error\n+"}, {"sha": "60dc3d94a2edb2b3ac66162642a49d64c171e734", "filename": "src/test/ui/regions/regions-variance-covariant-use-contravariant.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.rs?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test that a type which is covariant with respect to its region\n // parameter yields an error when used in a contravariant way.\n //"}, {"sha": "a448d26f81bfe5350bb95481b83b84d35283b3be", "filename": "src/test/ui/regions/regions-variance-covariant-use-contravariant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-variance-covariant-use-contravariant.rs:35:32\n+  --> $DIR/regions-variance-covariant-use-contravariant.rs:33:32\n    |\n LL | fn use_<'short,'long>(c: Covariant<'long>,\n    |                          ----------------"}, {"sha": "488b70b5f0f801aa1d723d970976bb4ad62e0dc4", "filename": "src/test/ui/regions/regions-variance-invariant-use-contravariant.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -0,0 +1,13 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-variance-invariant-use-contravariant.rs:30:9\n+   |\n+LL | fn use_<'short,'long>(c: Invariant<'long>,\n+   |         ------ ----- lifetime `'long` defined here\n+   |         |\n+   |         lifetime `'short` defined here\n+...\n+LL |     let _: Invariant<'short> = c; //~ ERROR E0623\n+   |         ^ type annotation requires that `'short` must outlive `'long`\n+\n+error: aborting due to previous error\n+"}, {"sha": "96478fa590979288f66621ef6d5da23e83597a18", "filename": "src/test/ui/regions/regions-variance-invariant-use-contravariant.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.rs?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test that an invariant region parameter used in a contravariant way\n // yields an error.\n //"}, {"sha": "1b0cd8e646a1e86f3b3ec802ca6d2eeb5400f4ee", "filename": "src/test/ui/regions/regions-variance-invariant-use-contravariant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-variance-invariant-use-contravariant.rs:32:32\n+  --> $DIR/regions-variance-invariant-use-contravariant.rs:30:32\n    |\n LL | fn use_<'short,'long>(c: Invariant<'long>,\n    |                          ----------------"}, {"sha": "fa7cfc33dc0a909a346021186fd319b277fb56d2", "filename": "src/test/ui/regions/regions-variance-invariant-use-covariant.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -0,0 +1,11 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-variance-invariant-use-covariant.rs:27:9\n+   |\n+LL | fn use_<'b>(c: Invariant<'b>) {\n+   |         -- lifetime `'b` defined here\n+...\n+LL |     let _: Invariant<'static> = c; //~ ERROR mismatched types\n+   |         ^ type annotation requires that `'b` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "bd944a8b52cfb4617fab993e60ee4df33eeac05c", "filename": "src/test/ui/regions/regions-variance-invariant-use-covariant.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.rs?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test that a type which is invariant with respect to its region\n // parameter used in a covariant way yields an error.\n //"}, {"sha": "34111120a08074ffe95578dfa9ae5405c2935fe9", "filename": "src/test/ui/regions/regions-variance-invariant-use-covariant.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/regions-variance-invariant-use-covariant.rs:29:33\n+  --> $DIR/regions-variance-invariant-use-covariant.rs:27:33\n    |\n LL |     let _: Invariant<'static> = c; //~ ERROR mismatched types\n    |                                 ^ lifetime mismatch\n    |\n    = note: expected type `Invariant<'static>`\n               found type `Invariant<'b>`\n-note: the lifetime 'b as defined on the function body at 23:9...\n-  --> $DIR/regions-variance-invariant-use-covariant.rs:23:9\n+note: the lifetime 'b as defined on the function body at 21:9...\n+  --> $DIR/regions-variance-invariant-use-covariant.rs:21:9\n    |\n LL | fn use_<'b>(c: Invariant<'b>) {\n    |         ^^"}, {"sha": "0172fcdc8f156715e721657a6ff498d801b3a317", "filename": "src/test/ui/variance/variance-cell-is-invariant.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -0,0 +1,13 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/variance-cell-is-invariant.rs:24:9\n+   |\n+LL | fn use_<'short,'long>(c: Foo<'short>,\n+   |         ------ ----- lifetime `'long` defined here\n+   |         |\n+   |         lifetime `'short` defined here\n+...\n+LL |     let _: Foo<'long> = c; //~ ERROR E0623\n+   |         ^ type annotation requires that `'short` must outlive `'long`\n+\n+error: aborting due to previous error\n+"}, {"sha": "1ddbcf4ab84c75065bdfd1df2cac8d4b9a40236a", "filename": "src/test/ui/variance/variance-cell-is-invariant.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.rs?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test that Cell is considered invariant with respect to its\n // type.\n "}, {"sha": "86f5c1176d9095e6166a068a565d1c23b9e9fbbe", "filename": "src/test/ui/variance/variance-cell-is-invariant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/variance-cell-is-invariant.rs:26:25\n+  --> $DIR/variance-cell-is-invariant.rs:24:25\n    |\n LL | fn use_<'short,'long>(c: Foo<'short>,\n    |                          ----------- these two types are declared with different lifetimes..."}, {"sha": "69981699da8f1c45da150c1d570d6dd6cf3165a9", "filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -0,0 +1,24 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:23:5\n+   |\n+LL | fn get_min_from_max<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<G,&'min i32>() //~ ERROR mismatched types\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:31:5\n+   |\n+LL | fn get_max_from_min<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<G,&'max i32>() //~ ERROR mismatched types\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "9b6e3c9de3bbd26482d1d2c82d9d1acccc0308f9", "filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.rs?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n #![allow(dead_code)]\n \n // Test that even when `T` is only used in contravariant position, it"}, {"sha": "2895a9511eabbeb22aa19dda8884407962c9bcc4", "filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:25:5\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:23:5\n    |\n LL |     impls_get::<G,&'min i32>() //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n-note: the lifetime 'min as defined on the function body at 22:21...\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:22:21\n+note: the lifetime 'min as defined on the function body at 20:21...\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:20:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 22:27\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:22:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 20:27\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:20:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:33:5\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:31:5\n    |\n LL |     impls_get::<G,&'max i32>() //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n-note: the lifetime 'min as defined on the function body at 28:21...\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:28:21\n+note: the lifetime 'min as defined on the function body at 26:21...\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:26:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 28:27\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:28:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 26:27\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:26:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^"}, {"sha": "a8566814c64569dda6b80d962abf5658e392abff", "filename": "src/test/ui/variance/variance-contravariant-self-trait-match.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -0,0 +1,24 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/variance-contravariant-self-trait-match.rs:23:5\n+   |\n+LL | fn get_min_from_max<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<&'min G>(); //~ ERROR mismatched types\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/variance-contravariant-self-trait-match.rs:32:5\n+   |\n+LL | fn get_max_from_min<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<&'max G>(); //~ ERROR mismatched types\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "6d9d1e61fed61165e7fd2578870367e052c9aa9b", "filename": "src/test/ui/variance/variance-contravariant-self-trait-match.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.rs?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n #![allow(dead_code)]\n \n // Test that even when `Self` is only used in contravariant position, it"}, {"sha": "bc3f274a861d9184f252815272cc1e267618e711", "filename": "src/test/ui/variance/variance-contravariant-self-trait-match.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-self-trait-match.rs:25:5\n+  --> $DIR/variance-contravariant-self-trait-match.rs:23:5\n    |\n LL |     impls_get::<&'min G>(); //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get`\n               found type `Get`\n-note: the lifetime 'min as defined on the function body at 22:21...\n-  --> $DIR/variance-contravariant-self-trait-match.rs:22:21\n+note: the lifetime 'min as defined on the function body at 20:21...\n+  --> $DIR/variance-contravariant-self-trait-match.rs:20:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 22:27\n-  --> $DIR/variance-contravariant-self-trait-match.rs:22:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 20:27\n+  --> $DIR/variance-contravariant-self-trait-match.rs:20:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-self-trait-match.rs:34:5\n+  --> $DIR/variance-contravariant-self-trait-match.rs:32:5\n    |\n LL |     impls_get::<&'max G>(); //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get`\n               found type `Get`\n-note: the lifetime 'min as defined on the function body at 28:21...\n-  --> $DIR/variance-contravariant-self-trait-match.rs:28:21\n+note: the lifetime 'min as defined on the function body at 26:21...\n+  --> $DIR/variance-contravariant-self-trait-match.rs:26:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 28:27\n-  --> $DIR/variance-contravariant-self-trait-match.rs:28:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 26:27\n+  --> $DIR/variance-contravariant-self-trait-match.rs:26:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^"}, {"sha": "bb3f5f5711cbfe7a8a9efe36ec7da2c2a7401558", "filename": "src/test/ui/variance/variance-covariant-arg-trait-match.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -0,0 +1,24 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/variance-covariant-arg-trait-match.rs:24:5\n+   |\n+LL | fn get_min_from_max<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<G,&'min i32>() //~ ERROR mismatched types\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/variance-covariant-arg-trait-match.rs:30:5\n+   |\n+LL | fn get_max_from_min<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<G,&'max i32>() //~ ERROR mismatched types\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "c42a845b3b504202b085664417e086e974dcccbf", "filename": "src/test/ui/variance/variance-covariant-arg-trait-match.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.rs?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n #![allow(dead_code)]\n \n // Test that even when `T` is only used in covariant position, it"}, {"sha": "7692a6646f27c85247b4299aa51e98016fb487f6", "filename": "src/test/ui/variance/variance-covariant-arg-trait-match.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-arg-trait-match.rs:26:5\n+  --> $DIR/variance-covariant-arg-trait-match.rs:24:5\n    |\n LL |     impls_get::<G,&'min i32>() //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n-note: the lifetime 'min as defined on the function body at 22:21...\n-  --> $DIR/variance-covariant-arg-trait-match.rs:22:21\n+note: the lifetime 'min as defined on the function body at 20:21...\n+  --> $DIR/variance-covariant-arg-trait-match.rs:20:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 22:27\n-  --> $DIR/variance-covariant-arg-trait-match.rs:22:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 20:27\n+  --> $DIR/variance-covariant-arg-trait-match.rs:20:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-arg-trait-match.rs:32:5\n+  --> $DIR/variance-covariant-arg-trait-match.rs:30:5\n    |\n LL |     impls_get::<G,&'max i32>() //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n-note: the lifetime 'min as defined on the function body at 29:21...\n-  --> $DIR/variance-covariant-arg-trait-match.rs:29:21\n+note: the lifetime 'min as defined on the function body at 27:21...\n+  --> $DIR/variance-covariant-arg-trait-match.rs:27:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 29:27\n-  --> $DIR/variance-covariant-arg-trait-match.rs:29:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 27:27\n+  --> $DIR/variance-covariant-arg-trait-match.rs:27:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^"}, {"sha": "3bbf9c0d3f5dfc61eb4a990f43825f02e006bed0", "filename": "src/test/ui/variance/variance-covariant-self-trait-match.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -0,0 +1,24 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/variance-covariant-self-trait-match.rs:24:5\n+   |\n+LL | fn get_min_from_max<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<&'min G>(); //~ ERROR mismatched types\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/variance-covariant-self-trait-match.rs:30:5\n+   |\n+LL | fn get_max_from_min<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<&'max G>(); //~ ERROR mismatched types\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "25148dfc0208a672776bf3156ee56dc3700c7712", "filename": "src/test/ui/variance/variance-covariant-self-trait-match.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.rs?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n #![allow(dead_code)]\n \n // Test that even when `Self` is only used in covariant position, it"}, {"sha": "aa82b69bbbc6b7d14759e37a7e49f9611f3a987c", "filename": "src/test/ui/variance/variance-covariant-self-trait-match.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-self-trait-match.rs:26:5\n+  --> $DIR/variance-covariant-self-trait-match.rs:24:5\n    |\n LL |     impls_get::<&'min G>(); //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get`\n               found type `Get`\n-note: the lifetime 'min as defined on the function body at 22:21...\n-  --> $DIR/variance-covariant-self-trait-match.rs:22:21\n+note: the lifetime 'min as defined on the function body at 20:21...\n+  --> $DIR/variance-covariant-self-trait-match.rs:20:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 22:27\n-  --> $DIR/variance-covariant-self-trait-match.rs:22:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 20:27\n+  --> $DIR/variance-covariant-self-trait-match.rs:20:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-self-trait-match.rs:32:5\n+  --> $DIR/variance-covariant-self-trait-match.rs:30:5\n    |\n LL |     impls_get::<&'max G>(); //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get`\n               found type `Get`\n-note: the lifetime 'min as defined on the function body at 29:21...\n-  --> $DIR/variance-covariant-self-trait-match.rs:29:21\n+note: the lifetime 'min as defined on the function body at 27:21...\n+  --> $DIR/variance-covariant-self-trait-match.rs:27:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 29:27\n-  --> $DIR/variance-covariant-self-trait-match.rs:29:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 27:27\n+  --> $DIR/variance-covariant-self-trait-match.rs:27:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^"}, {"sha": "be9f5a632dd6d55c435026507187a254092590db", "filename": "src/test/ui/variance/variance-invariant-arg-trait-match.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -0,0 +1,24 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/variance-invariant-arg-trait-match.rs:20:5\n+   |\n+LL | fn get_min_from_max<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<G,&'min i32>() //~ ERROR mismatched types\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/variance-invariant-arg-trait-match.rs:26:5\n+   |\n+LL | fn get_max_from_min<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<G,&'max i32>() //~ ERROR mismatched types\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "45fed0b083dc1d47cfd83ef49688e00d8568a680", "filename": "src/test/ui/variance/variance-invariant-arg-trait-match.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.rs?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n #![allow(dead_code)]\n \n trait Get<T> {"}, {"sha": "fc0d5e486de75a3cda091d64a5ddb8646c112a42", "filename": "src/test/ui/variance/variance-invariant-arg-trait-match.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-arg-trait-match.rs:22:5\n+  --> $DIR/variance-invariant-arg-trait-match.rs:20:5\n    |\n LL |     impls_get::<G,&'min i32>() //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n-note: the lifetime 'min as defined on the function body at 19:21...\n-  --> $DIR/variance-invariant-arg-trait-match.rs:19:21\n+note: the lifetime 'min as defined on the function body at 17:21...\n+  --> $DIR/variance-invariant-arg-trait-match.rs:17:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 19:27\n-  --> $DIR/variance-invariant-arg-trait-match.rs:19:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 17:27\n+  --> $DIR/variance-invariant-arg-trait-match.rs:17:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-arg-trait-match.rs:28:5\n+  --> $DIR/variance-invariant-arg-trait-match.rs:26:5\n    |\n LL |     impls_get::<G,&'max i32>() //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n-note: the lifetime 'min as defined on the function body at 25:21...\n-  --> $DIR/variance-invariant-arg-trait-match.rs:25:21\n+note: the lifetime 'min as defined on the function body at 23:21...\n+  --> $DIR/variance-invariant-arg-trait-match.rs:23:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 25:27\n-  --> $DIR/variance-invariant-arg-trait-match.rs:25:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 23:27\n+  --> $DIR/variance-invariant-arg-trait-match.rs:23:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^"}, {"sha": "f5827856a1bdbaced3150e67b03030b9c30b342d", "filename": "src/test/ui/variance/variance-invariant-self-trait-match.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -0,0 +1,24 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/variance-invariant-self-trait-match.rs:20:5\n+   |\n+LL | fn get_min_from_max<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<&'min G>(); //~ ERROR mismatched types\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/variance-invariant-self-trait-match.rs:26:5\n+   |\n+LL | fn get_max_from_min<'min, 'max, G>()\n+   |                     ----  ---- lifetime `'max` defined here\n+   |                     |\n+   |                     lifetime `'min` defined here\n+...\n+LL |     impls_get::<&'max G>(); //~ ERROR mismatched types\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "fe61dee23bc2a03d04f63613132160f78766edc3", "filename": "src/test/ui/variance/variance-invariant-self-trait-match.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.rs?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n #![allow(dead_code)]\n \n trait Get {"}, {"sha": "b34f027e8959dec5bcc869a0b8f031f030e8e058", "filename": "src/test/ui/variance/variance-invariant-self-trait-match.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27ea8117e74ac9a781d33945ff210fc38142e5ea/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.stderr?ref=27ea8117e74ac9a781d33945ff210fc38142e5ea", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-self-trait-match.rs:22:5\n+  --> $DIR/variance-invariant-self-trait-match.rs:20:5\n    |\n LL |     impls_get::<&'min G>(); //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get`\n               found type `Get`\n-note: the lifetime 'min as defined on the function body at 19:21...\n-  --> $DIR/variance-invariant-self-trait-match.rs:19:21\n+note: the lifetime 'min as defined on the function body at 17:21...\n+  --> $DIR/variance-invariant-self-trait-match.rs:17:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 19:27\n-  --> $DIR/variance-invariant-self-trait-match.rs:19:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 17:27\n+  --> $DIR/variance-invariant-self-trait-match.rs:17:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-self-trait-match.rs:28:5\n+  --> $DIR/variance-invariant-self-trait-match.rs:26:5\n    |\n LL |     impls_get::<&'max G>(); //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get`\n               found type `Get`\n-note: the lifetime 'min as defined on the function body at 25:21...\n-  --> $DIR/variance-invariant-self-trait-match.rs:25:21\n+note: the lifetime 'min as defined on the function body at 23:21...\n+  --> $DIR/variance-invariant-self-trait-match.rs:23:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 25:27\n-  --> $DIR/variance-invariant-self-trait-match.rs:25:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 23:27\n+  --> $DIR/variance-invariant-self-trait-match.rs:23:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^"}]}