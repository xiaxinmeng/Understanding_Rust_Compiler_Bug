{"sha": "12d0970f7e4c4d7f91cccb12525fceea3c4c0669", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZDA5NzBmN2U0YzRkN2Y5MWNjY2IxMjUyNWZjZWVhM2M0YzA2Njk=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-02T20:19:59Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-02T20:19:59Z"}, "message": "vscode extension: migrate from any to unknown where possible", "tree": {"sha": "60776beb4fa5564c17d528c088e484e14ffd06dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60776beb4fa5564c17d528c088e484e14ffd06dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12d0970f7e4c4d7f91cccb12525fceea3c4c0669", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12d0970f7e4c4d7f91cccb12525fceea3c4c0669", "html_url": "https://github.com/rust-lang/rust/commit/12d0970f7e4c4d7f91cccb12525fceea3c4c0669", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12d0970f7e4c4d7f91cccb12525fceea3c4c0669/comments", "author": null, "committer": null, "parents": [{"sha": "4bf5f595604c2c3fa0ca981a843d04a8732dabf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bf5f595604c2c3fa0ca981a843d04a8732dabf9", "html_url": "https://github.com/rust-lang/rust/commit/4bf5f595604c2c3fa0ca981a843d04a8732dabf9"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "1778c4e9f4174c679a591984efdc4004971b716b", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12d0970f7e4c4d7f91cccb12525fceea3c4c0669/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/12d0970f7e4c4d7f91cccb12525fceea3c4c0669/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=12d0970f7e4c4d7f91cccb12525fceea3c4c0669", "patch": "@@ -68,7 +68,7 @@ PATH=${process.env.PATH}\n     // This also requires considering our settings strategy, which is work which needs doing\n     // @ts-ignore The tracer is private to vscode-languageclient, but we need access to it to not log publishDecorations requests\n     res._tracer = {\n-        log: (messageOrDataObject: string | any, data?: string) => {\n+        log: (messageOrDataObject: string | unknown, data?: string) => {\n             if (typeof messageOrDataObject === 'string') {\n                 if (\n                     messageOrDataObject.includes("}, {"sha": "7e10c7f79ec32e58404e22ac02db8dd2e8495979", "filename": "editors/code/src/color_theme.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12d0970f7e4c4d7f91cccb12525fceea3c4c0669/editors%2Fcode%2Fsrc%2Fcolor_theme.ts", "raw_url": "https://github.com/rust-lang/rust/raw/12d0970f7e4c4d7f91cccb12525fceea3c4c0669/editors%2Fcode%2Fsrc%2Fcolor_theme.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcolor_theme.ts?ref=12d0970f7e4c4d7f91cccb12525fceea3c4c0669", "patch": "@@ -61,7 +61,7 @@ export class ColorTheme {\n }\n \n function loadThemeNamed(themeName: string): ColorTheme {\n-    function isTheme(extension: vscode.Extension<any>): boolean {\n+    function isTheme(extension: vscode.Extension<unknown>): boolean {\n         return (\n             extension.extensionKind === vscode.ExtensionKind.UI &&\n             extension.packageJSON.contributes &&"}, {"sha": "562df50cd87e8c77d6b986e0c79dd4cafb2c532d", "filename": "editors/code/src/commands/syntax_tree.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12d0970f7e4c4d7f91cccb12525fceea3c4c0669/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/12d0970f7e4c4d7f91cccb12525fceea3c4c0669/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts?ref=12d0970f7e4c4d7f91cccb12525fceea3c4c0669", "patch": "@@ -55,7 +55,7 @@ export function syntaxTree(ctx: Ctx): Cmd {\n \n // We need to order this after LS updates, but there's no API for that.\n // Hence, good old setTimeout.\n-function afterLs(f: () => any) {\n+function afterLs(f: () => unknown) {\n     setTimeout(f, 10);\n }\n "}, {"sha": "aae2c5f903344aea603720a58d26c60bccda1457", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12d0970f7e4c4d7f91cccb12525fceea3c4c0669/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/12d0970f7e4c4d7f91cccb12525fceea3c4c0669/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=12d0970f7e4c4d7f91cccb12525fceea3c4c0669", "patch": "@@ -52,12 +52,12 @@ export class Ctx {\n     overrideCommand(name: string, factory: (ctx: Ctx) => Cmd) {\n         const defaultCmd = `default:${name}`;\n         const override = factory(this);\n-        const original = (...args: any[]) =>\n+        const original = (...args: unknown[]) =>\n             vscode.commands.executeCommand(defaultCmd, ...args);\n         try {\n             const d = vscode.commands.registerCommand(\n                 name,\n-                async (...args: any[]) => {\n+                async (...args: unknown[]) => {\n                     if (!(await override(...args))) {\n                         return await original(...args);\n                     }\n@@ -73,11 +73,11 @@ export class Ctx {\n         }\n     }\n \n-    get subscriptions(): { dispose(): any }[] {\n+    get subscriptions(): { dispose(): unknown }[] {\n         return this.extCtx.subscriptions;\n     }\n \n-    pushCleanup(d: { dispose(): any }) {\n+    pushCleanup(d: { dispose(): unknown }) {\n         this.extCtx.subscriptions.push(d);\n     }\n \n@@ -86,12 +86,12 @@ export class Ctx {\n     }\n }\n \n-export type Cmd = (...args: any[]) => any;\n+export type Cmd = (...args: unknown[]) => unknown;\n \n export async function sendRequestWithRetry<R>(\n     client: lc.LanguageClient,\n     method: string,\n-    param: any,\n+    param: unknown,\n     token?: vscode.CancellationToken,\n ): Promise<R> {\n     for (const delay of [2, 4, 6, 8, 10, null]) {"}]}