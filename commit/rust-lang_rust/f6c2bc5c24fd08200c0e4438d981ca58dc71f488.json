{"sha": "f6c2bc5c24fd08200c0e4438d981ca58dc71f488", "node_id": "C_kwDOAAsO6NoAKGY2YzJiYzVjMjRmZDA4MjAwYzBlNDQzOGQ5ODFjYTU4ZGM3MWY0ODg", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-05-29T06:40:15Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-06-01T14:45:19Z"}, "message": "fix diagnostic message", "tree": {"sha": "18f715c15b28696d34e4afb3c4939bf851b65242", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18f715c15b28696d34e4afb3c4939bf851b65242"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6c2bc5c24fd08200c0e4438d981ca58dc71f488", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6c2bc5c24fd08200c0e4438d981ca58dc71f488", "html_url": "https://github.com/rust-lang/rust/commit/f6c2bc5c24fd08200c0e4438d981ca58dc71f488", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6c2bc5c24fd08200c0e4438d981ca58dc71f488/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f964b46451f3a323f312a7035e25180060044335", "url": "https://api.github.com/repos/rust-lang/rust/commits/f964b46451f3a323f312a7035e25180060044335", "html_url": "https://github.com/rust-lang/rust/commit/f964b46451f3a323f312a7035e25180060044335"}], "stats": {"total": 40, "additions": 15, "deletions": 25}, "files": [{"sha": "eed3091d481e3cf3d601571f69635034d489669a", "filename": "compiler/rustc_const_eval/src/errors.rs", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f6c2bc5c24fd08200c0e4438d981ca58dc71f488/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c2bc5c24fd08200c0e4438d981ca58dc71f488/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs?ref=f6c2bc5c24fd08200c0e4438d981ca58dc71f488", "patch": "@@ -1,5 +1,3 @@\n-use std::fmt;\n-\n use rustc_errors::{\n     DiagnosticArgValue, DiagnosticBuilder, DiagnosticMessage, EmissionGuarantee, Handler,\n     IntoDiagnostic,\n@@ -427,24 +425,6 @@ pub struct UndefinedBehavior {\n     pub raw_bytes: RawBytesNote,\n }\n \n-pub struct DebugExt<T>(T);\n-\n-impl<T: ReportErrorExt> fmt::Debug for DebugExt<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let s = ty::tls::with(|tcx| {\n-            let mut builder = tcx.sess.struct_allow(\"\");\n-            let handler = &tcx.sess.parse_sess.span_diagnostic;\n-            let message = self.0.diagnostic_message();\n-            self.0.add_args(handler, &mut builder);\n-            let s = handler.eagerly_translate_to_string(message, builder.args());\n-            builder.cancel();\n-            s\n-        });\n-\n-        f.write_str(&s)\n-    }\n-}\n-\n pub trait ReportErrorExt {\n     /// Returns the diagnostic message for this error.\n     fn diagnostic_message(&self) -> DiagnosticMessage;\n@@ -454,11 +434,19 @@ pub trait ReportErrorExt {\n         builder: &mut DiagnosticBuilder<'_, G>,\n     );\n \n-    fn debug(self) -> DebugExt<Self>\n+    fn debug(self) -> String\n     where\n         Self: Sized,\n     {\n-        DebugExt(self)\n+        ty::tls::with(move |tcx| {\n+            let mut builder = tcx.sess.struct_allow(DiagnosticMessage::Str(String::new().into()));\n+            let handler = &tcx.sess.parse_sess.span_diagnostic;\n+            let message = self.diagnostic_message();\n+            self.add_args(handler, &mut builder);\n+            let s = handler.eagerly_translate_to_string(message, builder.args());\n+            builder.cancel();\n+            s\n+        })\n     }\n }\n \n@@ -481,7 +469,7 @@ impl<'a> ReportErrorExt for UndefinedBehaviorInfo<'a> {\n         use crate::fluent_generated::*;\n         use UndefinedBehaviorInfo::*;\n         match self {\n-            Ub(msg) => (&**msg).into(),\n+            Ub(msg) => msg.clone().into(),\n             Unreachable => const_eval_unreachable,\n             BoundsCheckFailed { .. } => const_eval_bounds_check_failed,\n             DivisionByZero => const_eval_division_by_zero,"}, {"sha": "26d1201266f664d2b27b91aeadd70773e38f3604", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6c2bc5c24fd08200c0e4438d981ca58dc71f488/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c2bc5c24fd08200c0e4438d981ca58dc71f488/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=f6c2bc5c24fd08200c0e4438d981ca58dc71f488", "patch": "@@ -4,6 +4,7 @@\n use either::Right;\n \n use rustc_const_eval::const_eval::CheckAlignment;\n+use rustc_const_eval::ReportErrorExt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::DefKind;\n use rustc_index::bit_set::BitSet;\n@@ -378,7 +379,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 op\n             }\n             Err(e) => {\n-                trace!(\"get_const failed: {:?}\", e.debug());\n+                trace!(\"get_const failed: {:?}\", e.into_kind().debug());\n                 return None;\n             }\n         };"}, {"sha": "759650fe4db3a9d095e15d1030ef09855816c642", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6c2bc5c24fd08200c0e4438d981ca58dc71f488/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c2bc5c24fd08200c0e4438d981ca58dc71f488/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=f6c2bc5c24fd08200c0e4438d981ca58dc71f488", "patch": "@@ -9,6 +9,7 @@ use rustc_const_eval::interpret::Immediate;\n use rustc_const_eval::interpret::{\n     self, InterpCx, InterpResult, LocalValue, MemoryKind, OpTy, Scalar, StackPopCleanup,\n };\n+use rustc_const_eval::ReportErrorExt;\n use rustc_hir::def::DefKind;\n use rustc_hir::HirId;\n use rustc_index::bit_set::BitSet;\n@@ -232,7 +233,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 op\n             }\n             Err(e) => {\n-                trace!(\"get_const failed: {:?}\", e.debug());\n+                trace!(\"get_const failed: {:?}\", e.into_kind().debug());\n                 return None;\n             }\n         };"}]}