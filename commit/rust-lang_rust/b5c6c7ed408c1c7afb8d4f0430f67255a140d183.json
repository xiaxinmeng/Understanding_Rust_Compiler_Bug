{"sha": "b5c6c7ed408c1c7afb8d4f0430f67255a140d183", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YzZjN2VkNDA4YzFjN2FmYjhkNGYwNDMwZjY3MjU1YTE0MGQxODM=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-05-30T02:09:29Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-05-30T02:09:29Z"}, "message": "Loosen timeout restrictions", "tree": {"sha": "fea76362e44445ebc55d3e3184ab1a7e3d40ce45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fea76362e44445ebc55d3e3184ab1a7e3d40ce45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5c6c7ed408c1c7afb8d4f0430f67255a140d183", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5c6c7ed408c1c7afb8d4f0430f67255a140d183", "html_url": "https://github.com/rust-lang/rust/commit/b5c6c7ed408c1c7afb8d4f0430f67255a140d183", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5c6c7ed408c1c7afb8d4f0430f67255a140d183/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "494901a8b46c699b530e7209114bde44b1de4451", "url": "https://api.github.com/repos/rust-lang/rust/commits/494901a8b46c699b530e7209114bde44b1de4451", "html_url": "https://github.com/rust-lang/rust/commit/494901a8b46c699b530e7209114bde44b1de4451"}], "stats": {"total": 32, "additions": 12, "deletions": 20}, "files": [{"sha": "cffccab7e09d00b57dda169e8c009d54b5c13e81", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b5c6c7ed408c1c7afb8d4f0430f67255a140d183/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c6c7ed408c1c7afb8d4f0430f67255a140d183/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=b5c6c7ed408c1c7afb8d4f0430f67255a140d183", "patch": "@@ -933,17 +933,15 @@ mod tests {\n         let listener = t!(TcpListener::bind(&addr));\n \n         let mut stream = t!(TcpStream::connect(&(\"localhost\", addr.port())));\n-        t!(stream.set_read_timeout(Some(Duration::from_millis(10))));\n+        t!(stream.set_read_timeout(Some(Duration::from_millis(1000))));\n \n         let mut buf = [0; 10];\n         let wait = Duration::span(|| {\n             let kind = stream.read(&mut buf).err().expect(\"expected error\").kind();\n             assert!(kind == ErrorKind::WouldBlock || kind == ErrorKind::TimedOut);\n         });\n-        assert!(wait > Duration::from_millis(5));\n-        // windows will sometimes extend this by ~500ms, so we'll just take the\n-        // fact that we did time out as a win :(\n-        assert!(cfg!(windows) || wait < Duration::from_millis(15));\n+        assert!(wait > Duration::from_millis(400));\n+        assert!(wait < Duration::from_millis(1600));\n     }\n \n     #[test]\n@@ -952,7 +950,7 @@ mod tests {\n         let listener = t!(TcpListener::bind(&addr));\n \n         let mut stream = t!(TcpStream::connect(&(\"localhost\", addr.port())));\n-        t!(stream.set_read_timeout(Some(Duration::from_millis(10))));\n+        t!(stream.set_read_timeout(Some(Duration::from_millis(1000))));\n \n         let mut other_end = t!(listener.accept()).0;\n         t!(other_end.write_all(b\"hello world\"));\n@@ -965,9 +963,7 @@ mod tests {\n             let kind = stream.read(&mut buf).err().expect(\"expected error\").kind();\n             assert!(kind == ErrorKind::WouldBlock || kind == ErrorKind::TimedOut);\n         });\n-        assert!(wait > Duration::from_millis(5));\n-        // windows will sometimes extend this by ~500ms, so we'll just take the\n-        // fact that we did time out as a win :(\n-        assert!(cfg!(windows) || wait < Duration::from_millis(15));\n+        assert!(wait > Duration::from_millis(400));\n+        assert!(wait < Duration::from_millis(1600));\n     }\n }"}, {"sha": "ebabba7def1be04dff4056faf22bbc10ca92e9e0", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b5c6c7ed408c1c7afb8d4f0430f67255a140d183/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c6c7ed408c1c7afb8d4f0430f67255a140d183/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=b5c6c7ed408c1c7afb8d4f0430f67255a140d183", "patch": "@@ -389,25 +389,23 @@ mod tests {\n         let addr = next_test_ip4();\n \n         let mut stream = t!(UdpSocket::bind(&addr));\n-        t!(stream.set_read_timeout(Some(Duration::from_millis(10))));\n+        t!(stream.set_read_timeout(Some(Duration::from_millis(1000))));\n \n         let mut buf = [0; 10];\n         let wait = Duration::span(|| {\n             let kind = stream.recv_from(&mut buf).err().expect(\"expected error\").kind();\n             assert!(kind == ErrorKind::WouldBlock || kind == ErrorKind::TimedOut);\n         });\n-        assert!(wait > Duration::from_millis(5));\n-        // windows will sometimes extend this by ~500ms, so we'll just take the\n-        // fact that we did time out as a win :(\n-        assert!(cfg!(windows) || wait < Duration::from_millis(15));\n+        assert!(wait > Duration::from_millis(400));\n+        assert!(wait < Duration::from_millis(1600));\n     }\n \n     #[test]\n     fn test_read_with_timeout() {\n         let addr = next_test_ip4();\n \n         let mut stream = t!(UdpSocket::bind(&addr));\n-        t!(stream.set_read_timeout(Some(Duration::from_millis(10))));\n+        t!(stream.set_read_timeout(Some(Duration::from_millis(1000))));\n \n         t!(stream.send_to(b\"hello world\", &addr));\n \n@@ -419,9 +417,7 @@ mod tests {\n             let kind = stream.recv_from(&mut buf).err().expect(\"expected error\").kind();\n             assert!(kind == ErrorKind::WouldBlock || kind == ErrorKind::TimedOut);\n         });\n-        assert!(wait > Duration::from_millis(5));\n-        // windows will sometimes extend this by ~500ms, so we'll just take the\n-        // fact that we did time out as a win :(\n-        assert!(cfg!(windows) || wait < Duration::from_millis(15));\n+        assert!(wait > Duration::from_millis(400));\n+        assert!(wait < Duration::from_millis(1600));\n     }\n }"}]}