{"sha": "c45221907adde640208a9e52636f4845d4654994", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NTIyMTkwN2FkZGU2NDAyMDhhOWU1MjYzNmY0ODQ1ZDQ2NTQ5OTQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-18T20:00:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-18T20:04:26Z"}, "message": "Deduplicate highlight tags and symbol kinds\n\nCuriously, LSP uses different enums for those, and unsurprising and\nannoyingly, there are things which exist in one but not in the other.\n\nLet's not repeat the mistake and unify the two things", "tree": {"sha": "7f64801f5d8fb520196b8a69f74078d408579a62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f64801f5d8fb520196b8a69f74078d408579a62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c45221907adde640208a9e52636f4845d4654994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c45221907adde640208a9e52636f4845d4654994", "html_url": "https://github.com/rust-lang/rust/commit/c45221907adde640208a9e52636f4845d4654994", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c45221907adde640208a9e52636f4845d4654994/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25185c1418022868e2f7ec1599e32a34d63e8314", "url": "https://api.github.com/repos/rust-lang/rust/commits/25185c1418022868e2f7ec1599e32a34d63e8314", "html_url": "https://github.com/rust-lang/rust/commit/25185c1418022868e2f7ec1599e32a34d63e8314"}], "stats": {"total": 252, "additions": 128, "deletions": 124}, "files": [{"sha": "7d0514105bc9095866fc993841f966fb19b82df9", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c45221907adde640208a9e52636f4845d4654994/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45221907adde640208a9e52636f4845d4654994/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=c45221907adde640208a9e52636f4845d4654994", "patch": "@@ -18,13 +18,14 @@ use crate::FileSymbol;\n \n use super::short_label::ShortLabel;\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub enum SymbolKind {\n     Module,\n     Impl,\n     Field,\n     TypeParam,\n     LifetimeParam,\n+    ValueParam,\n     SelfParam,\n     Local,\n     Function,\n@@ -406,10 +407,11 @@ impl ToNav for hir::Local {\n             Some(it) => it.to_string().into(),\n             None => \"\".into(),\n         };\n+        let kind = if self.is_param(db) { SymbolKind::ValueParam } else { SymbolKind::Local };\n         NavigationTarget {\n             file_id: full_range.file_id,\n             name,\n-            kind: Some(SymbolKind::Local),\n+            kind: Some(kind),\n             full_range: full_range.range,\n             focus_range: None,\n             container_name: None,"}, {"sha": "18ea1930525b76f78f62007bdfb186f7f53b3677", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45221907adde640208a9e52636f4845d4654994/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45221907adde640208a9e52636f4845d4654994/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=c45221907adde640208a9e52636f4845d4654994", "patch": "@@ -546,7 +546,7 @@ fn bar() {\n fn foo(i : u32) -> u32 { i<|> }\n \"#,\n             expect![[r#\"\n-                i Local FileId(0) 7..8 Other\n+                i ValueParam FileId(0) 7..8 Other\n \n                 FileId(0) 25..26 Other Read\n             \"#]],\n@@ -560,7 +560,7 @@ fn foo(i : u32) -> u32 { i<|> }\n fn foo(i<|> : u32) -> u32 { i }\n \"#,\n             expect![[r#\"\n-                i Local FileId(0) 7..8 Other\n+                i ValueParam FileId(0) 7..8 Other\n \n                 FileId(0) 25..26 Other Read\n             \"#]],"}, {"sha": "7f98aa316fe8fe19f49417c986423a4ab38793ad", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 54, "deletions": 47, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/c45221907adde640208a9e52636f4845d4654994/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45221907adde640208a9e52636f4845d4654994/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=c45221907adde640208a9e52636f4845d4654994", "patch": "@@ -23,7 +23,7 @@ use crate::{\n     syntax_highlighting::{\n         format::FormatStringHighlighter, macro_rules::MacroRulesHighlighter, tags::Highlight,\n     },\n-    FileId, HighlightModifier, HighlightTag,\n+    FileId, HighlightModifier, HighlightTag, SymbolKind,\n };\n \n pub(crate) use html::highlight_as_html;\n@@ -103,7 +103,7 @@ pub(crate) fn highlight(\n                 if let Some(range) = macro_call_range(&mc) {\n                     stack.add(HighlightedRange {\n                         range,\n-                        highlight: HighlightTag::Macro.into(),\n+                        highlight: HighlightTag::Symbol(SymbolKind::Macro).into(),\n                         binding_hash: None,\n                     });\n                 }\n@@ -470,13 +470,13 @@ fn highlight_element(\n             };\n \n             match name_kind {\n-                Some(NameClass::ExternCrate(_)) => HighlightTag::Module.into(),\n+                Some(NameClass::ExternCrate(_)) => HighlightTag::Symbol(SymbolKind::Module).into(),\n                 Some(NameClass::Definition(def)) => {\n                     highlight_def(db, def) | HighlightModifier::Definition\n                 }\n                 Some(NameClass::ConstReference(def)) => highlight_def(db, def),\n                 Some(NameClass::PatFieldShorthand { field_ref, .. }) => {\n-                    let mut h = HighlightTag::Field.into();\n+                    let mut h = HighlightTag::Symbol(SymbolKind::Field).into();\n                     if let Definition::Field(field) = field_ref {\n                         if let VariantDef::Union(_) = field.parent_def(db) {\n                             h |= HighlightModifier::Unsafe;\n@@ -493,14 +493,16 @@ fn highlight_element(\n         NAME_REF if element.ancestors().any(|it| it.kind() == ATTR) => {\n             // even though we track whether we are in an attribute or not we still need this special case\n             // as otherwise we would emit unresolved references for name refs inside attributes\n-            Highlight::from(HighlightTag::Function)\n+            Highlight::from(HighlightTag::Symbol(SymbolKind::Function))\n         }\n         NAME_REF => {\n             let name_ref = element.into_node().and_then(ast::NameRef::cast).unwrap();\n             highlight_func_by_name_ref(sema, &name_ref).unwrap_or_else(|| {\n                 match NameRefClass::classify(sema, &name_ref) {\n                     Some(name_kind) => match name_kind {\n-                        NameRefClass::ExternCrate(_) => HighlightTag::Module.into(),\n+                        NameRefClass::ExternCrate(_) => {\n+                            HighlightTag::Symbol(SymbolKind::Module).into()\n+                        }\n                         NameRefClass::Definition(def) => {\n                             if let Definition::Local(local) = &def {\n                                 if let Some(name) = local.name(db) {\n@@ -530,7 +532,9 @@ fn highlight_element(\n \n                             h\n                         }\n-                        NameRefClass::FieldShorthand { .. } => HighlightTag::Field.into(),\n+                        NameRefClass::FieldShorthand { .. } => {\n+                            HighlightTag::Symbol(SymbolKind::Field).into()\n+                        }\n                     },\n                     None if syntactic_name_ref_highlighting => {\n                         highlight_name_ref_by_syntax(name_ref, sema)\n@@ -556,7 +560,7 @@ fn highlight_element(\n         CHAR => HighlightTag::CharLiteral.into(),\n         QUESTION => Highlight::new(HighlightTag::Operator) | HighlightModifier::ControlFlow,\n         LIFETIME => {\n-            let h = Highlight::new(HighlightTag::Lifetime);\n+            let h = Highlight::new(HighlightTag::Symbol(SymbolKind::LifetimeParam));\n             match element.parent().map(|it| it.kind()) {\n                 Some(LIFETIME_PARAM) | Some(LABEL) => h | HighlightModifier::Definition,\n                 _ => h,\n@@ -580,7 +584,7 @@ fn highlight_element(\n                 HighlightTag::Operator.into()\n             }\n             T![!] if element.parent().and_then(ast::MacroCall::cast).is_some() => {\n-                HighlightTag::Macro.into()\n+                HighlightTag::Symbol(SymbolKind::Macro).into()\n             }\n             T![!] if element.parent().and_then(ast::NeverType::cast).is_some() => {\n                 HighlightTag::BuiltinType.into()\n@@ -659,7 +663,7 @@ fn highlight_element(\n                         .and_then(SyntaxNode::parent)\n                         .and_then(ast::Path::cast)\n                         .and_then(|p| sema.resolve_path(&p));\n-                    let mut h = HighlightTag::SelfKeyword.into();\n+                    let mut h = HighlightTag::Symbol(SymbolKind::SelfParam).into();\n                     if self_param_is_mut\n                         || matches!(self_path,\n                             Some(hir::PathResolution::Local(local))\n@@ -756,10 +760,10 @@ fn highlight_method_call(\n \n fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n     match def {\n-        Definition::Macro(_) => HighlightTag::Macro,\n-        Definition::Field(_) => HighlightTag::Field,\n+        Definition::Macro(_) => HighlightTag::Symbol(SymbolKind::Macro),\n+        Definition::Field(_) => HighlightTag::Symbol(SymbolKind::Field),\n         Definition::ModuleDef(def) => match def {\n-            hir::ModuleDef::Module(_) => HighlightTag::Module,\n+            hir::ModuleDef::Module(_) => HighlightTag::Symbol(SymbolKind::Module),\n             hir::ModuleDef::Function(func) => {\n                 let mut h = if func.as_assoc_item(db).is_some() {\n                     if func.self_param(db).is_none() {\n@@ -768,35 +772,38 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n                         HighlightTag::Method.into()\n                     }\n                 } else {\n-                    HighlightTag::Function.into()\n+                    HighlightTag::Symbol(SymbolKind::Function).into()\n                 };\n                 if func.is_unsafe(db) {\n                     h |= HighlightModifier::Unsafe;\n                 }\n                 return h;\n             }\n-            hir::ModuleDef::Adt(hir::Adt::Struct(_)) => HighlightTag::Struct,\n-            hir::ModuleDef::Adt(hir::Adt::Enum(_)) => HighlightTag::Enum,\n-            hir::ModuleDef::Adt(hir::Adt::Union(_)) => HighlightTag::Union,\n-            hir::ModuleDef::EnumVariant(_) => HighlightTag::EnumVariant,\n-            hir::ModuleDef::Const(_) => HighlightTag::Constant,\n-            hir::ModuleDef::Trait(_) => HighlightTag::Trait,\n-            hir::ModuleDef::TypeAlias(_) => HighlightTag::TypeAlias,\n+            hir::ModuleDef::Adt(hir::Adt::Struct(_)) => HighlightTag::Symbol(SymbolKind::Struct),\n+            hir::ModuleDef::Adt(hir::Adt::Enum(_)) => HighlightTag::Symbol(SymbolKind::Enum),\n+            hir::ModuleDef::Adt(hir::Adt::Union(_)) => HighlightTag::Symbol(SymbolKind::Union),\n+            hir::ModuleDef::EnumVariant(_) => HighlightTag::Symbol(SymbolKind::Variant),\n+            hir::ModuleDef::Const(_) => HighlightTag::Symbol(SymbolKind::Const),\n+            hir::ModuleDef::Trait(_) => HighlightTag::Symbol(SymbolKind::Trait),\n+            hir::ModuleDef::TypeAlias(_) => HighlightTag::Symbol(SymbolKind::TypeAlias),\n             hir::ModuleDef::BuiltinType(_) => HighlightTag::BuiltinType,\n             hir::ModuleDef::Static(s) => {\n-                let mut h = Highlight::new(HighlightTag::Static);\n+                let mut h = Highlight::new(HighlightTag::Symbol(SymbolKind::Static));\n                 if s.is_mut(db) {\n                     h |= HighlightModifier::Mutable;\n                     h |= HighlightModifier::Unsafe;\n                 }\n                 return h;\n             }\n         },\n-        Definition::SelfType(_) => HighlightTag::SelfType,\n-        Definition::TypeParam(_) => HighlightTag::TypeParam,\n+        Definition::SelfType(_) => HighlightTag::Symbol(SymbolKind::Impl),\n+        Definition::TypeParam(_) => HighlightTag::Symbol(SymbolKind::TypeParam),\n         Definition::Local(local) => {\n-            let tag =\n-                if local.is_param(db) { HighlightTag::ValueParam } else { HighlightTag::Local };\n+            let tag = if local.is_param(db) {\n+                HighlightTag::Symbol(SymbolKind::ValueParam)\n+            } else {\n+                HighlightTag::Symbol(SymbolKind::Local)\n+            };\n             let mut h = Highlight::new(tag);\n             if local.is_mut(db) || local.ty(db).is_mutable_reference() {\n                 h |= HighlightModifier::Mutable;\n@@ -806,7 +813,7 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n             }\n             return h;\n         }\n-        Definition::LifetimeParam(_) => HighlightTag::Lifetime,\n+        Definition::LifetimeParam(_) => HighlightTag::Symbol(SymbolKind::LifetimeParam),\n     }\n     .into()\n }\n@@ -820,19 +827,19 @@ fn highlight_name_by_syntax(name: ast::Name) -> Highlight {\n     };\n \n     let tag = match parent.kind() {\n-        STRUCT => HighlightTag::Struct,\n-        ENUM => HighlightTag::Enum,\n-        UNION => HighlightTag::Union,\n-        TRAIT => HighlightTag::Trait,\n-        TYPE_ALIAS => HighlightTag::TypeAlias,\n-        TYPE_PARAM => HighlightTag::TypeParam,\n-        RECORD_FIELD => HighlightTag::Field,\n-        MODULE => HighlightTag::Module,\n-        FN => HighlightTag::Function,\n-        CONST => HighlightTag::Constant,\n-        STATIC => HighlightTag::Static,\n-        VARIANT => HighlightTag::EnumVariant,\n-        IDENT_PAT => HighlightTag::Local,\n+        STRUCT => HighlightTag::Symbol(SymbolKind::Struct),\n+        ENUM => HighlightTag::Symbol(SymbolKind::Enum),\n+        VARIANT => HighlightTag::Symbol(SymbolKind::Variant),\n+        UNION => HighlightTag::Symbol(SymbolKind::Union),\n+        TRAIT => HighlightTag::Symbol(SymbolKind::Trait),\n+        TYPE_ALIAS => HighlightTag::Symbol(SymbolKind::TypeAlias),\n+        TYPE_PARAM => HighlightTag::Symbol(SymbolKind::TypeParam),\n+        RECORD_FIELD => HighlightTag::Symbol(SymbolKind::Field),\n+        MODULE => HighlightTag::Symbol(SymbolKind::Module),\n+        FN => HighlightTag::Symbol(SymbolKind::Function),\n+        CONST => HighlightTag::Symbol(SymbolKind::Const),\n+        STATIC => HighlightTag::Symbol(SymbolKind::Static),\n+        IDENT_PAT => HighlightTag::Symbol(SymbolKind::Local),\n         _ => default,\n     };\n \n@@ -851,10 +858,10 @@ fn highlight_name_ref_by_syntax(name: ast::NameRef, sema: &Semantics<RootDatabas\n         METHOD_CALL_EXPR => {\n             return ast::MethodCallExpr::cast(parent)\n                 .and_then(|method_call| highlight_method_call(sema, &method_call))\n-                .unwrap_or_else(|| HighlightTag::Function.into());\n+                .unwrap_or_else(|| HighlightTag::Symbol(SymbolKind::Function).into());\n         }\n         FIELD_EXPR => {\n-            let h = HighlightTag::Field;\n+            let h = HighlightTag::Symbol(SymbolKind::Field);\n             let is_union = ast::FieldExpr::cast(parent)\n                 .and_then(|field_expr| {\n                     let field = sema.resolve_field(&field_expr)?;\n@@ -881,9 +888,9 @@ fn highlight_name_ref_by_syntax(name: ast::NameRef, sema: &Semantics<RootDatabas\n                 _ => {\n                     // within path, decide whether it is module or adt by checking for uppercase name\n                     return if name.text().chars().next().unwrap_or_default().is_uppercase() {\n-                        HighlightTag::Struct\n+                        HighlightTag::Symbol(SymbolKind::Struct)\n                     } else {\n-                        HighlightTag::Module\n+                        HighlightTag::Symbol(SymbolKind::Module)\n                     }\n                     .into();\n                 }\n@@ -894,11 +901,11 @@ fn highlight_name_ref_by_syntax(name: ast::NameRef, sema: &Semantics<RootDatabas\n             };\n \n             match parent.kind() {\n-                CALL_EXPR => HighlightTag::Function.into(),\n+                CALL_EXPR => HighlightTag::Symbol(SymbolKind::Function).into(),\n                 _ => if name.text().chars().next().unwrap_or_default().is_uppercase() {\n-                    HighlightTag::Struct.into()\n+                    HighlightTag::Symbol(SymbolKind::Struct)\n                 } else {\n-                    HighlightTag::Constant\n+                    HighlightTag::Symbol(SymbolKind::Const)\n                 }\n                 .into(),\n             }"}, {"sha": "26416022b88a046802ff5528200bf2787ba64fc2", "filename": "crates/ide/src/syntax_highlighting/format.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c45221907adde640208a9e52636f4845d4654994/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45221907adde640208a9e52636f4845d4654994/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs?ref=c45221907adde640208a9e52636f4845d4654994", "patch": "@@ -4,7 +4,9 @@ use syntax::{\n     AstNode, AstToken, SyntaxElement, SyntaxKind, SyntaxNode, TextRange,\n };\n \n-use crate::{syntax_highlighting::HighlightedRangeStack, HighlightTag, HighlightedRange};\n+use crate::{\n+    syntax_highlighting::HighlightedRangeStack, HighlightTag, HighlightedRange, SymbolKind,\n+};\n \n #[derive(Default)]\n pub(super) struct FormatStringHighlighter {\n@@ -71,6 +73,6 @@ fn highlight_format_specifier(kind: FormatSpecifier) -> Option<HighlightTag> {\n         | FormatSpecifier::Asterisk\n         | FormatSpecifier::QuestionMark => HighlightTag::FormatSpecifier,\n         FormatSpecifier::Integer | FormatSpecifier::Zero => HighlightTag::NumericLiteral,\n-        FormatSpecifier::Identifier => HighlightTag::Local,\n+        FormatSpecifier::Identifier => HighlightTag::Symbol(SymbolKind::Local),\n     })\n }"}, {"sha": "e0117a6b2a5d702f0b8e66544e927da8897835b5", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 33, "deletions": 43, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/c45221907adde640208a9e52636f4845d4654994/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45221907adde640208a9e52636f4845d4654994/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=c45221907adde640208a9e52636f4845d4654994", "patch": "@@ -3,6 +3,8 @@\n \n use std::{fmt, ops};\n \n+use crate::SymbolKind;\n+\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub struct Highlight {\n     pub tag: HighlightTag,\n@@ -14,40 +16,26 @@ pub struct HighlightModifiers(u32);\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub enum HighlightTag {\n-    Attribute,\n+    Symbol(SymbolKind),\n+\n     BoolLiteral,\n     BuiltinType,\n     ByteLiteral,\n     CharLiteral,\n+    NumericLiteral,\n+    StringLiteral,\n+    Attribute,\n     Comment,\n-    Constant,\n-    Enum,\n-    EnumVariant,\n     EscapeSequence,\n-    Field,\n-    Function,\n-    Generic,\n+    FormatSpecifier,\n     Keyword,\n-    Lifetime,\n-    Macro,\n-    Method,\n-    Module,\n-    NumericLiteral,\n     Punctuation,\n-    SelfKeyword,\n-    SelfType,\n-    Static,\n-    StringLiteral,\n-    Struct,\n-    Trait,\n-    TypeAlias,\n-    TypeParam,\n-    Union,\n-    ValueParam,\n-    Local,\n-    UnresolvedReference,\n-    FormatSpecifier,\n     Operator,\n+    UnresolvedReference,\n+\n+    // FIXME: this two are random and don't fit with the others\n+    Method,\n+    Generic,\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n@@ -73,39 +61,41 @@ pub enum HighlightModifier {\n impl HighlightTag {\n     fn as_str(self) -> &'static str {\n         match self {\n+            HighlightTag::Symbol(symbol) => match symbol {\n+                SymbolKind::Const => \"constant\",\n+                SymbolKind::Static => \"static\",\n+                SymbolKind::Enum => \"enum\",\n+                SymbolKind::Variant => \"enum_variant\",\n+                SymbolKind::Struct => \"struct\",\n+                SymbolKind::Union => \"union\",\n+                SymbolKind::Field => \"field\",\n+                SymbolKind::Module => \"module\",\n+                SymbolKind::Trait => \"trait\",\n+                SymbolKind::Function => \"function\",\n+                SymbolKind::TypeAlias => \"type_alias\",\n+                SymbolKind::TypeParam => \"type_param\",\n+                SymbolKind::LifetimeParam => \"lifetime\",\n+                SymbolKind::Macro => \"macro\",\n+                SymbolKind::Local => \"variable\",\n+                SymbolKind::ValueParam => \"value_param\",\n+                SymbolKind::SelfParam => \"self_keyword\",\n+                SymbolKind::Impl => \"self_type\",\n+            },\n             HighlightTag::Attribute => \"attribute\",\n             HighlightTag::BoolLiteral => \"bool_literal\",\n             HighlightTag::BuiltinType => \"builtin_type\",\n             HighlightTag::ByteLiteral => \"byte_literal\",\n             HighlightTag::CharLiteral => \"char_literal\",\n             HighlightTag::Comment => \"comment\",\n-            HighlightTag::Constant => \"constant\",\n-            HighlightTag::Enum => \"enum\",\n-            HighlightTag::EnumVariant => \"enum_variant\",\n             HighlightTag::EscapeSequence => \"escape_sequence\",\n-            HighlightTag::Field => \"field\",\n             HighlightTag::FormatSpecifier => \"format_specifier\",\n-            HighlightTag::Function => \"function\",\n             HighlightTag::Generic => \"generic\",\n             HighlightTag::Keyword => \"keyword\",\n-            HighlightTag::Lifetime => \"lifetime\",\n             HighlightTag::Punctuation => \"punctuation\",\n-            HighlightTag::Macro => \"macro\",\n             HighlightTag::Method => \"method\",\n-            HighlightTag::Module => \"module\",\n             HighlightTag::NumericLiteral => \"numeric_literal\",\n             HighlightTag::Operator => \"operator\",\n-            HighlightTag::SelfKeyword => \"self_keyword\",\n-            HighlightTag::SelfType => \"self_type\",\n-            HighlightTag::Static => \"static\",\n             HighlightTag::StringLiteral => \"string_literal\",\n-            HighlightTag::Struct => \"struct\",\n-            HighlightTag::Trait => \"trait\",\n-            HighlightTag::TypeAlias => \"type_alias\",\n-            HighlightTag::TypeParam => \"type_param\",\n-            HighlightTag::Union => \"union\",\n-            HighlightTag::ValueParam => \"value_param\",\n-            HighlightTag::Local => \"variable\",\n             HighlightTag::UnresolvedReference => \"unresolved_reference\",\n         }\n     }"}, {"sha": "229df47dc6bf77c808e6050e848b08f6e3c13115", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c45221907adde640208a9e52636f4845d4654994/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45221907adde640208a9e52636f4845d4654994/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=c45221907adde640208a9e52636f4845d4654994", "patch": "@@ -43,9 +43,10 @@ pub(crate) fn symbol_kind(symbol_kind: SymbolKind) -> lsp_types::SymbolKind {\n         SymbolKind::Static => lsp_types::SymbolKind::Constant,\n         SymbolKind::Const => lsp_types::SymbolKind::Constant,\n         SymbolKind::Impl => lsp_types::SymbolKind::Object,\n-        SymbolKind::Local | SymbolKind::SelfParam | SymbolKind::LifetimeParam => {\n-            lsp_types::SymbolKind::Variable\n-        }\n+        SymbolKind::Local\n+        | SymbolKind::SelfParam\n+        | SymbolKind::LifetimeParam\n+        | SymbolKind::ValueParam => lsp_types::SymbolKind::Variable,\n         SymbolKind::Union => lsp_types::SymbolKind::Struct,\n     }\n }\n@@ -371,34 +372,36 @@ fn semantic_token_type_and_modifiers(\n ) -> (lsp_types::SemanticTokenType, semantic_tokens::ModifierSet) {\n     let mut mods = semantic_tokens::ModifierSet::default();\n     let type_ = match highlight.tag {\n-        HighlightTag::Struct => lsp_types::SemanticTokenType::STRUCT,\n-        HighlightTag::Enum => lsp_types::SemanticTokenType::ENUM,\n-        HighlightTag::Union => semantic_tokens::UNION,\n-        HighlightTag::TypeAlias => semantic_tokens::TYPE_ALIAS,\n-        HighlightTag::Trait => lsp_types::SemanticTokenType::INTERFACE,\n+        HighlightTag::Symbol(symbol) => match symbol {\n+            SymbolKind::Module => lsp_types::SemanticTokenType::NAMESPACE,\n+            SymbolKind::Impl => lsp_types::SemanticTokenType::TYPE,\n+            SymbolKind::Field => lsp_types::SemanticTokenType::PROPERTY,\n+            SymbolKind::TypeParam => lsp_types::SemanticTokenType::TYPE_PARAMETER,\n+            SymbolKind::LifetimeParam => semantic_tokens::LIFETIME,\n+            SymbolKind::ValueParam => lsp_types::SemanticTokenType::PARAMETER,\n+            SymbolKind::SelfParam => semantic_tokens::SELF_KEYWORD,\n+            SymbolKind::Local => lsp_types::SemanticTokenType::VARIABLE,\n+            SymbolKind::Function => lsp_types::SemanticTokenType::FUNCTION,\n+            SymbolKind::Const => {\n+                mods |= semantic_tokens::CONSTANT;\n+                mods |= lsp_types::SemanticTokenModifier::STATIC;\n+                lsp_types::SemanticTokenType::VARIABLE\n+            }\n+            SymbolKind::Static => {\n+                mods |= lsp_types::SemanticTokenModifier::STATIC;\n+                lsp_types::SemanticTokenType::VARIABLE\n+            }\n+            SymbolKind::Struct => lsp_types::SemanticTokenType::STRUCT,\n+            SymbolKind::Enum => lsp_types::SemanticTokenType::ENUM,\n+            SymbolKind::Variant => lsp_types::SemanticTokenType::ENUM_MEMBER,\n+            SymbolKind::Union => semantic_tokens::UNION,\n+            SymbolKind::TypeAlias => semantic_tokens::TYPE_ALIAS,\n+            SymbolKind::Trait => lsp_types::SemanticTokenType::INTERFACE,\n+            SymbolKind::Macro => lsp_types::SemanticTokenType::MACRO,\n+        },\n         HighlightTag::BuiltinType => semantic_tokens::BUILTIN_TYPE,\n-        HighlightTag::SelfKeyword => semantic_tokens::SELF_KEYWORD,\n-        HighlightTag::SelfType => lsp_types::SemanticTokenType::TYPE,\n-        HighlightTag::Field => lsp_types::SemanticTokenType::PROPERTY,\n-        HighlightTag::Function => lsp_types::SemanticTokenType::FUNCTION,\n         HighlightTag::Generic => semantic_tokens::GENERIC,\n-        HighlightTag::Module => lsp_types::SemanticTokenType::NAMESPACE,\n         HighlightTag::Method => lsp_types::SemanticTokenType::METHOD,\n-        HighlightTag::Constant => {\n-            mods |= semantic_tokens::CONSTANT;\n-            mods |= lsp_types::SemanticTokenModifier::STATIC;\n-            lsp_types::SemanticTokenType::VARIABLE\n-        }\n-        HighlightTag::Static => {\n-            mods |= lsp_types::SemanticTokenModifier::STATIC;\n-            lsp_types::SemanticTokenType::VARIABLE\n-        }\n-        HighlightTag::EnumVariant => lsp_types::SemanticTokenType::ENUM_MEMBER,\n-        HighlightTag::Macro => lsp_types::SemanticTokenType::MACRO,\n-        HighlightTag::ValueParam => lsp_types::SemanticTokenType::PARAMETER,\n-        HighlightTag::Local => lsp_types::SemanticTokenType::VARIABLE,\n-        HighlightTag::TypeParam => lsp_types::SemanticTokenType::TYPE_PARAMETER,\n-        HighlightTag::Lifetime => semantic_tokens::LIFETIME,\n         HighlightTag::ByteLiteral | HighlightTag::NumericLiteral => {\n             lsp_types::SemanticTokenType::NUMBER\n         }"}]}