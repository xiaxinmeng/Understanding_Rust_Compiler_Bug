{"sha": "f01846b8eec9c8084153cb3cd6aff6e15608a01f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMTg0NmI4ZWVjOWM4MDg0MTUzY2IzY2Q2YWZmNmUxNTYwOGEwMWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-01T10:31:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-01T11:14:38Z"}, "message": "Generalize Flycheckconfig", "tree": {"sha": "d05fc384ead1fa3c56af11d425d104087eb2e049", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d05fc384ead1fa3c56af11d425d104087eb2e049"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f01846b8eec9c8084153cb3cd6aff6e15608a01f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f01846b8eec9c8084153cb3cd6aff6e15608a01f", "html_url": "https://github.com/rust-lang/rust/commit/f01846b8eec9c8084153cb3cd6aff6e15608a01f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f01846b8eec9c8084153cb3cd6aff6e15608a01f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aad0e63d744e5220fae38f61e1adf7654fb618bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/aad0e63d744e5220fae38f61e1adf7654fb618bd", "html_url": "https://github.com/rust-lang/rust/commit/aad0e63d744e5220fae38f61e1adf7654fb618bd"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "f099bdfe8b5687f19de6d2d96c4f5e487f8e2820", "filename": "crates/ra_flycheck/src/lib.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f01846b8eec9c8084153cb3cd6aff6e15608a01f/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f01846b8eec9c8084153cb3cd6aff6e15608a01f/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_flycheck%2Fsrc%2Flib.rs?ref=f01846b8eec9c8084153cb3cd6aff6e15608a01f", "patch": "@@ -23,10 +23,9 @@ use crate::conv::{map_rust_diagnostic_to_lsp, MappedRustDiagnostic};\n pub use crate::conv::url_from_path_with_drive_lowercasing;\n \n #[derive(Clone, Debug)]\n-pub struct FlycheckConfig {\n-    pub command: String,\n-    pub all_targets: bool,\n-    pub extra_args: Vec<String>,\n+pub enum FlycheckConfig {\n+    CargoCommand { command: String, all_targets: bool, extra_args: Vec<String> },\n+    CustomCommand { command: String, args: Vec<String> },\n }\n \n /// Flycheck wraps the shared state and communication machinery used for\n@@ -215,18 +214,25 @@ impl FlycheckThread {\n         self.message_recv = never();\n         self.check_process = None;\n \n-        let cmd = {\n-            let mut cmd = Command::new(cargo_binary());\n-            cmd.arg(&self.config.command);\n-            cmd.args(&[\"--workspace\", \"--message-format=json\", \"--manifest-path\"]);\n-            cmd.arg(self.workspace_root.join(\"Cargo.toml\"));\n-            if self.config.all_targets {\n-                cmd.arg(\"--all-targets\");\n+        let mut cmd = match &self.config {\n+            FlycheckConfig::CargoCommand { command, all_targets, extra_args } => {\n+                let mut cmd = Command::new(cargo_binary());\n+                cmd.arg(command);\n+                cmd.args(&[\"--workspace\", \"--message-format=json\", \"--manifest-path\"]);\n+                cmd.arg(self.workspace_root.join(\"Cargo.toml\"));\n+                if *all_targets {\n+                    cmd.arg(\"--all-targets\");\n+                }\n+                cmd.args(extra_args);\n+                cmd\n+            }\n+            FlycheckConfig::CustomCommand { command, args } => {\n+                let mut cmd = Command::new(command);\n+                cmd.args(args);\n+                cmd\n             }\n-            cmd.args(self.config.extra_args.iter());\n-            cmd.current_dir(&self.workspace_root);\n-            cmd\n         };\n+        cmd.current_dir(&self.workspace_root);\n \n         let (message_send, message_recv) = unbounded();\n         self.message_recv = message_recv;"}, {"sha": "a89ea86ead4f11aeb0f273470a40facf466e2226", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f01846b8eec9c8084153cb3cd6aff6e15608a01f/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f01846b8eec9c8084153cb3cd6aff6e15608a01f/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=f01846b8eec9c8084153cb3cd6aff6e15608a01f", "patch": "@@ -102,7 +102,7 @@ fn get_config(\n             max_length: config.inlay_hints_max_length,\n         },\n         check: if config.cargo_watch_enable {\n-            Some(FlycheckConfig {\n+            Some(FlycheckConfig::CargoCommand {\n                 command: config.cargo_watch_command.clone(),\n                 all_targets: config.cargo_watch_all_targets,\n                 extra_args: config.cargo_watch_args.clone(),"}]}