{"sha": "68a783a89f4c7e74d4c7e09bfac67283e054d4fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4YTc4M2E4OWY0YzdlNzRkNGM3ZTA5YmZhYzY3MjgzZTA1NGQ0ZmM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-08T01:33:57Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-08T01:35:53Z"}, "message": "Remove String impls and fix for make tidy", "tree": {"sha": "8abe19476d93300b0bbf22fdf77581129df54881", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8abe19476d93300b0bbf22fdf77581129df54881"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68a783a89f4c7e74d4c7e09bfac67283e054d4fc", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68a783a89f4c7e74d4c7e09bfac67283e054d4fc", "html_url": "https://github.com/rust-lang/rust/commit/68a783a89f4c7e74d4c7e09bfac67283e054d4fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68a783a89f4c7e74d4c7e09bfac67283e054d4fc/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63a9bd5e0adc03652e10506055564077aa00eeaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/63a9bd5e0adc03652e10506055564077aa00eeaa", "html_url": "https://github.com/rust-lang/rust/commit/63a9bd5e0adc03652e10506055564077aa00eeaa"}], "stats": {"total": 56, "additions": 1, "deletions": 55}, "files": [{"sha": "ab956587d8248045d0d680322c530dbd5e1a3869", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/68a783a89f4c7e74d4c7e09bfac67283e054d4fc/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a783a89f4c7e74d4c7e09bfac67283e054d4fc/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=68a783a89f4c7e74d4c7e09bfac67283e054d4fc", "patch": "@@ -860,13 +860,6 @@ impl fmt::Show for FullRange {\n     }\n }\n \n-#[unstable = \"API still in development\"]\n-impl fmt::String for FullRange {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(\"..\", fmt)\n-    }\n-}\n-\n /// A (half-open) range which is bounded at both ends.\n #[derive(Copy, PartialEq, Eq)]\n #[lang=\"range\"]\n@@ -925,20 +918,6 @@ impl<Idx: fmt::Show> fmt::Show for Range<Idx> {\n         write!(fmt, \"{:?}..{:?}\", self.start, self.end)\n     }\n }\n-#[cfg(stage0)]\n-#[unstable = \"API still in development\"]\n-impl<Idx: fmt::String + fmt::Show> fmt::String for Range<Idx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"{}..{}\", self.start, self.end)\n-    }\n-}\n-#[cfg(not(stage0))]\n-#[unstable = \"API still in development\"]\n-impl<Idx: fmt::String> fmt::String for Range<Idx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"{}..{}\", self.start, self.end)\n-    }\n-}\n \n /// A range which is only bounded below.\n #[derive(Copy, PartialEq, Eq)]\n@@ -969,21 +948,6 @@ impl<Idx: fmt::Show> fmt::Show for RangeFrom<Idx> {\n     }\n }\n \n-#[cfg(stage0)]\n-#[unstable = \"API still in development\"]\n-impl<Idx: fmt::String + fmt::Show> fmt::String for RangeFrom<Idx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"{}..\", self.start)\n-    }\n-}\n-#[cfg(not(stage0))]\n-#[unstable = \"API still in development\"]\n-impl<Idx: fmt::String> fmt::String for RangeFrom<Idx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"{}..\", self.start)\n-    }\n-}\n-\n /// A range which is only bounded above.\n #[derive(Copy, PartialEq, Eq)]\n #[lang=\"range_to\"]\n@@ -1000,21 +964,6 @@ impl<Idx: fmt::Show> fmt::Show for RangeTo<Idx> {\n     }\n }\n \n-#[cfg(stage0)]\n-#[unstable = \"API still in development\"]\n-impl<Idx: fmt::String + fmt::Show> fmt::String for RangeTo<Idx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"..{}\", self.end)\n-    }\n-}\n-#[cfg(not(stage0))]\n-#[unstable = \"API still in development\"]\n-impl<Idx: fmt::String> fmt::String for RangeTo<Idx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"..{}\", self.end)\n-    }\n-}\n-\n \n /// The `Deref` trait is used to specify the functionality of dereferencing\n /// operations like `*v`."}, {"sha": "ab4e39bd767d488d9ea35934bf8d0a10fd536df5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68a783a89f4c7e74d4c7e09bfac67283e054d4fc/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a783a89f4c7e74d4c7e09bfac67283e054d4fc/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=68a783a89f4c7e74d4c7e09bfac67283e054d4fc", "patch": "@@ -2894,7 +2894,6 @@ impl<'a> Parser<'a> {\n                 let cur_prec = operator_prec(cur_op);\n                 if cur_prec > min_prec {\n                     self.bump();\n-                    // TODO\n                     let expr = self.parse_prefix_expr();\n                     let rhs = self.parse_more_binops(expr, cur_prec);\n                     let lhs_span = lhs.span;\n@@ -2956,13 +2955,11 @@ impl<'a> Parser<'a> {\n               let assign_op = self.mk_assign_op(aop, lhs, rhs);\n               self.mk_expr(span.lo, rhs_span.hi, assign_op)\n           }\n-          // TODO\n           // A range expression, either `expr..expr` or `expr..`.\n           token::DotDot if !self.restrictions.contains(RESTRICTION_NO_DOTS) => {\n             self.bump();\n \n             let opt_end = if self.token.can_begin_expr() {\n-                // TODO only use of RES...DOT\n                 let end = self.parse_expr_res(RESTRICTION_NO_DOTS);\n                 Some(end)\n             } else {"}, {"sha": "f678eed8775cd34c28e910a101fb9d20de3044f4", "filename": "src/test/run-pass/ranges-precedence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68a783a89f4c7e74d4c7e09bfac67283e054d4fc/src%2Ftest%2Frun-pass%2Franges-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a783a89f4c7e74d4c7e09bfac67283e054d4fc/src%2Ftest%2Frun-pass%2Franges-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Franges-precedence.rs?ref=68a783a89f4c7e74d4c7e09bfac67283e054d4fc", "patch": "@@ -29,7 +29,7 @@ fn main() {\n \n     let x = 1+3..4;\n     assert!(x == (4..4));\n-    \n+\n     let a = Foo { foo: 3 };\n     let x = a.foo..a.bar();\n     assert!(x == (3..5));"}]}