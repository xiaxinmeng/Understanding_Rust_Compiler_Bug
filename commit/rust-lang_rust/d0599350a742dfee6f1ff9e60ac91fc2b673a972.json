{"sha": "d0599350a742dfee6f1ff9e60ac91fc2b673a972", "node_id": "C_kwDOAAsO6NoAKGQwNTk5MzUwYTc0MmRmZWU2ZjFmZjllNjBhYzkxZmMyYjY3M2E5NzI", "commit": {"author": {"name": "Afonso Bordado", "email": "afonsobordado@az8.co", "date": "2022-07-30T11:50:05Z"}, "committer": {"name": "Afonso Bordado", "email": "afonsobordado@az8.co", "date": "2022-07-30T11:50:05Z"}, "message": "Misc cleanups to the test runner", "tree": {"sha": "7c6443cfeffe3b37aafb0dea724ae5092db7c8ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c6443cfeffe3b37aafb0dea724ae5092db7c8ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0599350a742dfee6f1ff9e60ac91fc2b673a972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0599350a742dfee6f1ff9e60ac91fc2b673a972", "html_url": "https://github.com/rust-lang/rust/commit/d0599350a742dfee6f1ff9e60ac91fc2b673a972", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0599350a742dfee6f1ff9e60ac91fc2b673a972/comments", "author": {"login": "afonso360", "id": 1357143, "node_id": "MDQ6VXNlcjEzNTcxNDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1357143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/afonso360", "html_url": "https://github.com/afonso360", "followers_url": "https://api.github.com/users/afonso360/followers", "following_url": "https://api.github.com/users/afonso360/following{/other_user}", "gists_url": "https://api.github.com/users/afonso360/gists{/gist_id}", "starred_url": "https://api.github.com/users/afonso360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/afonso360/subscriptions", "organizations_url": "https://api.github.com/users/afonso360/orgs", "repos_url": "https://api.github.com/users/afonso360/repos", "events_url": "https://api.github.com/users/afonso360/events{/privacy}", "received_events_url": "https://api.github.com/users/afonso360/received_events", "type": "User", "site_admin": false}, "committer": {"login": "afonso360", "id": 1357143, "node_id": "MDQ6VXNlcjEzNTcxNDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1357143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/afonso360", "html_url": "https://github.com/afonso360", "followers_url": "https://api.github.com/users/afonso360/followers", "following_url": "https://api.github.com/users/afonso360/following{/other_user}", "gists_url": "https://api.github.com/users/afonso360/gists{/gist_id}", "starred_url": "https://api.github.com/users/afonso360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/afonso360/subscriptions", "organizations_url": "https://api.github.com/users/afonso360/orgs", "repos_url": "https://api.github.com/users/afonso360/repos", "events_url": "https://api.github.com/users/afonso360/events{/privacy}", "received_events_url": "https://api.github.com/users/afonso360/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c115933fb7be123b6dacc6e95cb87ae44e6d5296", "url": "https://api.github.com/repos/rust-lang/rust/commits/c115933fb7be123b6dacc6e95cb87ae44e6d5296", "html_url": "https://github.com/rust-lang/rust/commit/c115933fb7be123b6dacc6e95cb87ae44e6d5296"}], "stats": {"total": 109, "additions": 50, "deletions": 59}, "files": [{"sha": "ddc099b538823c7548d44d0c6d559e7142e47be2", "filename": "build_system/build_backend.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0599350a742dfee6f1ff9e60ac91fc2b673a972/build_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0599350a742dfee6f1ff9e60ac91fc2b673a972/build_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_backend.rs?ref=d0599350a742dfee6f1ff9e60ac91fc2b673a972", "patch": "@@ -1,11 +1,12 @@\n use std::env;\n+use std::path::{Path, PathBuf};\n use std::process::Command;\n \n pub(crate) fn build_backend(\n     channel: &str,\n     host_triple: &str,\n     use_unstable_features: bool,\n-)  {\n+) -> PathBuf {\n     let mut cmd = Command::new(\"cargo\");\n     cmd.arg(\"build\").arg(\"--target\").arg(host_triple);\n \n@@ -37,4 +38,6 @@ pub(crate) fn build_backend(\n \n     eprintln!(\"[BUILD] rustc_codegen_cranelift\");\n     super::utils::spawn_and_wait(cmd);\n+\n+    Path::new(\"target\").join(&host_triple).join(&channel)\n }"}, {"sha": "af75cef04e09e2b9fb72e7dad0b9104b8b88af62", "filename": "build_system/mod.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d0599350a742dfee6f1ff9e60ac91fc2b673a972/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0599350a742dfee6f1ff9e60ac91fc2b673a972/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=d0599350a742dfee6f1ff9e60ac91fc2b673a972", "patch": "@@ -1,5 +1,5 @@\n use std::env;\n-use std::path::{PathBuf, Path};\n+use std::path::PathBuf;\n use std::process;\n \n mod build_backend;\n@@ -122,27 +122,28 @@ pub fn main() {\n         process::exit(1);\n     }\n \n-    let cg_clif_build_dir = Path::new(\"target\").join(&host_triple).join(&channel);\n+    let cg_clif_build_dir = build_backend::build_backend(channel, &host_triple, use_unstable_features);\n \n-    if command == Command::Test {\n-        // TODO: Should we also build_backend here?\n-        tests::run_tests(\n-            channel,\n-            sysroot_kind,\n-            &target_dir,\n-            &cg_clif_build_dir,\n-            &host_triple,\n-            &target_triple,\n-        ).expect(\"Failed to run tests\");\n-    } else {\n-        build_backend::build_backend(channel, &host_triple, use_unstable_features);\n-        build_sysroot::build_sysroot(\n-            channel,\n-            sysroot_kind,\n-            &target_dir,\n-            &cg_clif_build_dir,\n-            &host_triple,\n-            &target_triple,\n-        );\n+    match command {\n+        Command::Test => {\n+            tests::run_tests(\n+                channel,\n+                sysroot_kind,\n+                &target_dir,\n+                &cg_clif_build_dir,\n+                &host_triple,\n+                &target_triple,\n+            );\n+        },\n+        Command::Build => {\n+            build_sysroot::build_sysroot(\n+                channel,\n+                sysroot_kind,\n+                &target_dir,\n+                &cg_clif_build_dir,\n+                &host_triple,\n+                &target_triple,\n+            );\n+        }\n     }\n }"}, {"sha": "f2166b20fcb227a44cff8de8690e986c5cf1281e", "filename": "build_system/tests.rs", "status": "modified", "additions": 23, "deletions": 36, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d0599350a742dfee6f1ff9e60ac91fc2b673a972/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0599350a742dfee6f1ff9e60ac91fc2b673a972/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=d0599350a742dfee6f1ff9e60ac91fc2b673a972", "patch": "@@ -8,8 +8,6 @@ use std::fs;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n \n-type Result<T> = std::result::Result<T, Box<dyn std::error::Error>>;\n-\n struct TestCase {\n     config: &'static str,\n     func: &'static dyn Fn(&TestRunner),\n@@ -183,18 +181,16 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n             runner.run_cargo([\"clean\"]);\n \n             // newer aho_corasick versions throw a deprecation warning\n-            let mut lint_rust_flags = runner.rust_flags.clone();\n-            lint_rust_flags.push(\"--cap-lints\".to_string());\n-            lint_rust_flags.push(\"warn\".to_string());\n+            let lint_rust_flags = format!(\"{} --cap-lints warn\", runner.rust_flags);\n \n             let mut build_cmd = runner.cargo_command([\"build\", \"--example\", \"shootout-regex-dna\", \"--target\", &runner.target_triple]);\n-            build_cmd.env(\"RUSTFLAGS\", lint_rust_flags.join(\" \"));\n+            build_cmd.env(\"RUSTFLAGS\", lint_rust_flags.clone());\n \n             spawn_and_wait(build_cmd);\n \n             if runner.host_triple == runner.target_triple {\n                 let mut run_cmd = runner.cargo_command([\"run\", \"--example\", \"shootout-regex-dna\", \"--target\", &runner.target_triple]);\n-                run_cmd.env(\"RUSTFLAGS\", lint_rust_flags.join(\" \"));\n+                run_cmd.env(\"RUSTFLAGS\", lint_rust_flags);\n \n \n                 let input = fs::read_to_string(PathBuf::from(\"examples/regexdna-input.txt\")).unwrap();\n@@ -205,7 +201,6 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n                 // Make sure `[codegen mono items] start` doesn't poison the diff\n                 let output = output.lines()\n                     .filter(|line| !line.contains(\"codegen mono items\"))\n-                    .filter(|line| !line.contains(\"Spawned thread\"))\n                     .chain(Some(\"\")) // This just adds the trailing newline\n                     .collect::<Vec<&str>>()\n                     .join(\"\\r\\n\");\n@@ -267,7 +262,7 @@ pub(crate) fn run_tests(\n     cg_clif_build_dir: &Path,\n     host_triple: &str,\n     target_triple: &str,\n-) -> Result<()> {\n+) {\n     let runner = TestRunner::new(host_triple.to_string(), target_triple.to_string());\n \n     if config::get_bool(\"testsuite.no_sysroot\") {\n@@ -280,7 +275,7 @@ pub(crate) fn run_tests(\n             &target_triple,\n         );\n \n-        let _ = remove_out_dir();\n+        let _ = fs::remove_dir_all(Path::new(\"target\").join(\"out\"));\n         runner.run_testsuite(NO_SYSROOT_SUITE);\n     } else {\n         eprintln!(\"[SKIP] no_sysroot tests\");\n@@ -311,22 +306,16 @@ pub(crate) fn run_tests(\n     } else {\n         eprintln!(\"[SKIP] extended_sysroot tests\");\n     }\n-\n-    Ok(())\n }\n \n \n-fn remove_out_dir() -> Result<()> {\n-    let out_dir = Path::new(\"target\").join(\"out\");\n-    Ok(fs::remove_dir_all(out_dir)?)\n-}\n \n struct TestRunner {\n     root_dir: PathBuf,\n     out_dir: PathBuf,\n     jit_supported: bool,\n-    rust_flags: Vec<String>,\n-    run_wrapper: Vec<String>,\n+    rust_flags: String,\n+    run_wrapper: String,\n     host_triple: String,\n     target_triple: String,\n }\n@@ -342,22 +331,19 @@ impl TestRunner {\n         let is_native = host_triple == target_triple;\n         let jit_supported = target_triple.contains(\"x86_64\") && is_native;\n \n-        let env_rust_flags = env::var(\"RUSTFLAGS\").ok();\n-        let env_run_wrapper = env::var(\"RUN_WRAPPER\").ok();\n-\n-        let mut rust_flags: Vec<&str> = env_rust_flags.iter().map(|s| s.as_str()).collect();\n-        let mut run_wrapper: Vec<&str> = env_run_wrapper.iter().map(|s| s.as_str()).collect();\n+        let mut rust_flags = env::var(\"RUSTFLAGS\").ok().unwrap_or(\"\".to_string());\n+        let mut run_wrapper = String::new();\n \n         if !is_native {\n             match target_triple.as_str() {\n                 \"aarch64-unknown-linux-gnu\" => {\n                     // We are cross-compiling for aarch64. Use the correct linker and run tests in qemu.\n-                    rust_flags.insert(0, \"-Clinker=aarch64-linux-gnu-gcc\");\n-                    run_wrapper.extend([\"qemu-aarch64\", \"-L\", \"/usr/aarch64-linux-gnu\"]);\n+                    rust_flags = format!(\"-Clinker=aarch64-linux-gnu-gcc {}\", rust_flags);\n+                    run_wrapper = \"qemu-aarch64 -L /usr/aarch64-linux-gnu\".to_string();\n                 },\n                 \"x86_64-pc-windows-gnu\" => {\n                     // We are cross-compiling for Windows. Run tests in wine.\n-                    run_wrapper.push(\"wine\".into());\n+                    run_wrapper = \"wine\".to_string();\n                 }\n                 _ => {\n                     println!(\"Unknown non-native platform\");\n@@ -367,26 +353,25 @@ impl TestRunner {\n \n         // FIXME fix `#[linkage = \"extern_weak\"]` without this\n         if host_triple.contains(\"darwin\") {\n-            rust_flags.push(\"-Clink-arg=-undefined\");\n-            rust_flags.push(\"-Clink-arg=dynamic_lookup\");\n+            rust_flags = format!(\"{} -Clink-arg=-undefined -Clink-arg=dynamic_lookup\", rust_flags);\n         }\n \n         Self {\n             root_dir,\n             out_dir,\n             jit_supported,\n-            rust_flags: rust_flags.iter().map(|s| s.to_string()).collect(),\n-            run_wrapper: run_wrapper.iter().map(|s| s.to_string()).collect(),\n+            rust_flags,\n+            run_wrapper,\n             host_triple,\n             target_triple,\n         }\n     }\n \n     pub fn run_testsuite(&self, tests: &[TestCase]) {\n         for &TestCase { config, func } in tests {\n-            let is_jit_test = config.contains(\"jit\");\n             let (tag, testname) = config.split_once('.').unwrap();\n             let tag = tag.to_uppercase();\n+            let is_jit_test = tag == \"JIT\";\n \n             if !config::get_bool(config) || (is_jit_test && !self.jit_supported) {\n                 eprintln!(\"[{tag}] {testname} (skipped)\");\n@@ -428,14 +413,16 @@ impl TestRunner {\n         }\n \n         let mut cmd = Command::new(rustc_clif);\n-        cmd.args(self.rust_flags.iter());\n+        if !self.rust_flags.is_empty() {\n+            cmd.arg(&self.rust_flags);\n+        }\n         cmd.arg(\"-L\");\n         cmd.arg(format!(\"crate={}\", self.out_dir.display()));\n         cmd.arg(\"--out-dir\");\n         cmd.arg(format!(\"{}\", self.out_dir.display()));\n         cmd.arg(\"-Cdebuginfo=2\");\n         cmd.args(args);\n-        cmd.env(\"RUSTFLAGS\", self.rust_flags.join(\" \"));\n+        cmd.env(\"RUSTFLAGS\", &self.rust_flags);\n         cmd\n     }\n \n@@ -454,8 +441,8 @@ impl TestRunner {\n         let mut full_cmd = vec![];\n \n         // Prepend the RUN_WRAPPER's\n-        for rw in self.run_wrapper.iter() {\n-            full_cmd.push(rw.to_string());\n+        if !self.run_wrapper.is_empty() {\n+            full_cmd.push(self.run_wrapper.clone());\n         }\n \n         full_cmd.push({\n@@ -491,7 +478,7 @@ impl TestRunner {\n \n         let mut cmd = Command::new(cargo_clif);\n         cmd.args(args);\n-        cmd.env(\"RUSTFLAGS\", self.rust_flags.join(\" \"));\n+        cmd.env(\"RUSTFLAGS\", &self.rust_flags);\n         cmd\n     }\n "}]}