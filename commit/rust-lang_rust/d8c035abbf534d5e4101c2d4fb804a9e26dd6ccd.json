{"sha": "d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4YzAzNWFiYmY1MzRkNWU0MTAxYzJkNGZiODA0YTllMjZkZDZjY2Q=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-10-07T22:56:26Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-10-07T23:51:36Z"}, "message": "Bump to 1.48 bootstrap compiler", "tree": {"sha": "d0900f3218638fae4523b8588c87837c9f31af17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0900f3218638fae4523b8588c87837c9f31af17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd", "html_url": "https://github.com/rust-lang/rust/commit/d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4437b4b1509c3c15b41a05489c4bddd2fe30e33f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4437b4b1509c3c15b41a05489c4bddd2fe30e33f", "html_url": "https://github.com/rust-lang/rust/commit/4437b4b1509c3c15b41a05489c4bddd2fe30e33f"}], "stats": {"total": 27, "additions": 10, "deletions": 17}, "files": [{"sha": "b2798ea66250f4b49b310aebd1a3672107fa6dce", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd", "patch": "@@ -1072,7 +1072,7 @@ extern \"rust-intrinsic\" {\n     // NOTE: While this makes the intrinsic const stable, we have some custom code in const fn\n     // checks that prevent its use within `const fn`.\n     #[rustc_const_stable(feature = \"const_transmute\", since = \"1.46.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"transmute\")]\n+    #[rustc_diagnostic_item = \"transmute\"]\n     pub fn transmute<T, U>(e: T) -> U;\n \n     /// Returns `true` if the actual type given as `T` requires drop"}, {"sha": "960a26fd283291ba5c2b8d422877a15c731b167f", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd", "patch": "@@ -84,8 +84,8 @@\n #![feature(const_fn_union)]\n #![feature(const_assume)]\n #![cfg_attr(not(bootstrap), feature(const_impl_trait))]\n-#![cfg_attr(not(bootstrap), feature(const_fn_floating_point_arithmetic))]\n-#![cfg_attr(not(bootstrap), feature(const_fn_fn_ptr_basics))]\n+#![feature(const_fn_floating_point_arithmetic)]\n+#![feature(const_fn_fn_ptr_basics)]\n #![feature(const_generics)]\n #![feature(const_option)]\n #![feature(const_precise_live_drops)]\n@@ -133,7 +133,6 @@\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n #![feature(variant_count)]\n-#![cfg_attr(bootstrap, feature(doc_alias))]\n #![feature(tbm_target_feature)]\n #![feature(sse4a_target_feature)]\n #![feature(arm_target_feature)]"}, {"sha": "13d0dda19c7575d6009a3f92710ae2646008724e", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd", "patch": "@@ -79,7 +79,6 @@ pub use index::check_range;\n #[lang = \"slice\"]\n #[cfg(not(test))]\n impl<T> [T] {\n-    #[cfg(not(bootstrap))] // Unused in bootstrap\n     /// The maximum, inclusive, length such that the slice is no larger than `isize::MAX` bytes.\n     /// This constant is used in `len` below.\n     const MAX_LEN_BOUND: usize = {\n@@ -108,15 +107,12 @@ impl<T> [T] {\n         // Only `std` can make this guarantee.\n         let raw_len = unsafe { crate::ptr::Repr { rust: self }.raw.len };\n \n-        #[cfg(not(bootstrap))] // FIXME: executing assume in const eval not supported in bootstrap\n         // SAFETY: this assume asserts that `raw_len * size_of::<T>() <= isize::MAX`. All\n         // references must point to one allocation with size at most isize::MAX. Note that we the\n         // multiplication could appear to overflow until we have assumed the bound. This overflow\n         // would make additional values appear 'valid' and then `n > 1` the range of permissible\n         // length would no longer be the full or even a single range.\n-        unsafe {\n-            crate::intrinsics::assume(raw_len <= Self::MAX_LEN_BOUND)\n-        };\n+        unsafe { crate::intrinsics::assume(raw_len <= Self::MAX_LEN_BOUND) };\n \n         raw_len\n     }"}, {"sha": "8cca9dc904293330fb34d9a55c6c25528492f3a9", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd", "patch": "@@ -130,8 +130,7 @@ impl RawWakerVTable {\n     #[rustc_promotable]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     #[rustc_const_stable(feature = \"futures_api\", since = \"1.36.0\")]\n-    #[cfg_attr(not(bootstrap), allow_internal_unstable(const_fn_fn_ptr_basics))]\n-    #[cfg_attr(bootstrap, rustc_allow_const_fn_ptr)]\n+    #[allow_internal_unstable(const_fn_fn_ptr_basics)]\n     pub const fn new(\n         clone: unsafe fn(*const ()) -> RawWaker,\n         wake: unsafe fn(*const ()),"}, {"sha": "139b3591206e73df0d2d5a8b7a714e95fb12d0e5", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd", "patch": "@@ -21,7 +21,7 @@\n #![feature(nll)]\n #![feature(staged_api)]\n #![feature(const_fn)]\n-#![cfg_attr(not(bootstrap), feature(const_fn_fn_ptr_basics))]\n+#![feature(const_fn_fn_ptr_basics)]\n #![feature(allow_internal_unstable)]\n #![feature(decl_macro)]\n #![feature(extern_types)]"}, {"sha": "d4cc2cd239bb761c85c3ba42fa05eda35fb8eff8", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd", "patch": "@@ -237,10 +237,10 @@\n #![feature(clamp)]\n #![feature(concat_idents)]\n #![feature(const_cstr_unchecked)]\n-#![cfg_attr(not(bootstrap), feature(const_fn_floating_point_arithmetic))]\n+#![feature(const_fn_floating_point_arithmetic)]\n #![feature(const_fn_transmute)]\n #![feature(const_fn)]\n-#![cfg_attr(not(bootstrap), feature(const_fn_fn_ptr_basics))]\n+#![feature(const_fn_fn_ptr_basics)]\n #![feature(const_ip)]\n #![feature(const_ipv6)]\n #![feature(const_raw_ptr_deref)]\n@@ -249,7 +249,6 @@\n #![feature(core_intrinsics)]\n #![feature(custom_test_frameworks)]\n #![feature(decl_macro)]\n-#![cfg_attr(bootstrap, feature(doc_alias))]\n #![feature(doc_cfg)]\n #![feature(doc_keyword)]\n #![feature(doc_masked)]"}, {"sha": "98b4dfa9c749b3f44dcf588dd32cb33670a5d013", "filename": "src/stage0.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=d8c035abbf534d5e4101c2d4fb804a9e26dd6ccd", "patch": "@@ -12,15 +12,15 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.(x+1).0` for Cargo where they were released on `date`.\n \n-date: 2020-08-26\n+date: 2020-10-07\n rustc: beta\n cargo: beta\n \n # We use a nightly rustfmt to format the source because it solves some\n # bootstrapping issues with use of new syntax in this repo. If you're looking at\n # the beta/stable branch, this key should be omitted, as we don't want to depend\n # on rustfmt from nightly there.\n-rustfmt: nightly-2020-07-12\n+rustfmt: nightly-2020-10-07\n \n # When making a stable release the process currently looks like:\n #"}]}