{"sha": "d18065d9978fd8c961d3cb58a6b22b9c33ba6dc8", "node_id": "C_kwDOAAsO6NoAKGQxODA2NWQ5OTc4ZmQ4Yzk2MWQzY2I1OGE2YjIyYjljMzNiYTZkYzg", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-11-26T15:14:16Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-11-27T17:33:55Z"}, "message": "Only check for errors in predicate when skipping impl assembly\n\nPrior to PR #91205, checking for errors in the overall obligation\nwould check checking the `ParamEnv`, due to an incorrect\n`super_visit_with` impl. With this bug fixed, we will now\nbail out of impl candidate assembly if the `ParamEnv` contains\nany error types.\n\nIn practice, this appears to be overly conservative - when an error\noccurs early in compilation, we end up giving up early for some\npredicates that we could have successfully evaluated without overflow.\nBy only checking for errors in the predicate itself, we avoid causing\nadditional spurious 'type annotations needed' errors after a 'real'\nerror has already occurred.\n\nWith this PR, the diagnostic changes caused by PR #91205 are reverted.", "tree": {"sha": "e499d4746825acde53712854a33cf364f9a0672d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e499d4746825acde53712854a33cf364f9a0672d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d18065d9978fd8c961d3cb58a6b22b9c33ba6dc8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmGibAUACgkQtAh+UQ6Y\nsWQznRAAiIH2VmJUIwKRtajl899rvnQ2l5dDd7FSi6rggIR9vP+LTqa1LlAzWyYI\nQh51W4YX4teIFYo+KUMF8ztngd75MT4btZ/+UyAc9gBUt5XX8ukMaeyBMFKyqSUB\njRnZ4EPm2sci2LD5yXcBK1iPsajIONElaj87uxvvss3U15EkDsauGzc0+h56fXZy\nixvUCzGOiDeHe19bBeS5fBuS/7KAsy/rt4A3TMAXTdjFYPLDpF5ML3kYtBJYpknq\nw61ywa+uX1NPFzFvj0VEJ0bZnupg5XK2okQJUIxl+YhA3VrBi8D8QMJ0keoa+DBd\n5ZqHHFy91gMjb/7P06v9+vs2P/EjJnEPiDPc1r8mV4BcsgRtlkZBR+PT0p/kpifc\nSnzbvc2cvM39AC1ZLV/6yTwX/Ootti1rYFLblswnNWuFRU8rs1HF41XPukA2zW2O\nAeHDDGiHlJNEqz1bDaSy7+eXNWYmBuMOW66ncjTZYcnofHqIZIhevqJHXZFkhxwi\nFWV/jFuzWITKrRKaOFkTT+Ad5Cy1AHYXDfb9Muu5h4Dtirf8LOi8OSmEAg6Kyhq2\n8h6SqpMnqQUO9ZMNWncpqWa7rKl95QKkNe7oo9raV7AMqDfDjXLIctU35sLh95gz\nUomCWwiP6hce9wwxFm+uVNnzhuHltYrANDLGANmw0G7mcJQ3siU=\n=egbp\n-----END PGP SIGNATURE-----", "payload": "tree e499d4746825acde53712854a33cf364f9a0672d\nparent 5fd3a5c7c175f228afaf5fc6ff00c177b83d8055\nauthor Aaron Hill <aa1ronham@gmail.com> 1637939656 -0600\ncommitter Aaron Hill <aa1ronham@gmail.com> 1638034435 -0600\n\nOnly check for errors in predicate when skipping impl assembly\n\nPrior to PR #91205, checking for errors in the overall obligation\nwould check checking the `ParamEnv`, due to an incorrect\n`super_visit_with` impl. With this bug fixed, we will now\nbail out of impl candidate assembly if the `ParamEnv` contains\nany error types.\n\nIn practice, this appears to be overly conservative - when an error\noccurs early in compilation, we end up giving up early for some\npredicates that we could have successfully evaluated without overflow.\nBy only checking for errors in the predicate itself, we avoid causing\nadditional spurious 'type annotations needed' errors after a 'real'\nerror has already occurred.\n\nWith this PR, the diagnostic changes caused by PR #91205 are reverted.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d18065d9978fd8c961d3cb58a6b22b9c33ba6dc8", "html_url": "https://github.com/rust-lang/rust/commit/d18065d9978fd8c961d3cb58a6b22b9c33ba6dc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d18065d9978fd8c961d3cb58a6b22b9c33ba6dc8/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fd3a5c7c175f228afaf5fc6ff00c177b83d8055", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd3a5c7c175f228afaf5fc6ff00c177b83d8055", "html_url": "https://github.com/rust-lang/rust/commit/5fd3a5c7c175f228afaf5fc6ff00c177b83d8055"}], "stats": {"total": 60, "additions": 28, "deletions": 32}, "files": [{"sha": "6e3e3b9b14480d383fdad71dd9a6829647b5b61f", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d18065d9978fd8c961d3cb58a6b22b9c33ba6dc8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18065d9978fd8c961d3cb58a6b22b9c33ba6dc8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=d18065d9978fd8c961d3cb58a6b22b9c33ba6dc8", "patch": "@@ -536,7 +536,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // This helps us avoid overflow: see issue #72839\n         // Since compilation is already guaranteed to fail, this is just\n         // to try to show the 'nicest' possible errors to the user.\n-        if obligation.references_error() {\n+        // We don't check for errors in the `ParamEnv` - in practice,\n+        // it seems to cause us to be overly aggressive in deciding\n+        // to give up searching for candidates, leading to spurious errors.\n+        if obligation.predicate.references_error() {\n             return;\n         }\n "}, {"sha": "02dce4f7a97e829d1f886d0a8025a41a77d81e64", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-72787.min.stderr", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d18065d9978fd8c961d3cb58a6b22b9c33ba6dc8/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d18065d9978fd8c961d3cb58a6b22b9c33ba6dc8/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr?ref=d18065d9978fd8c961d3cb58a6b22b9c33ba6dc8", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-72787.rs:12:17\n+  --> $DIR/issue-72787.rs:11:17\n    |\n LL |     Condition<{ LHS <= RHS }>: True\n    |                 ^^^ cannot perform const operation using `LHS`\n@@ -8,7 +8,7 @@ LL |     Condition<{ LHS <= RHS }>: True\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-72787.rs:12:24\n+  --> $DIR/issue-72787.rs:11:24\n    |\n LL |     Condition<{ LHS <= RHS }>: True\n    |                        ^^^ cannot perform const operation using `RHS`\n@@ -17,7 +17,7 @@ LL |     Condition<{ LHS <= RHS }>: True\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-72787.rs:26:25\n+  --> $DIR/issue-72787.rs:25:25\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                         ^ cannot perform const operation using `I`\n@@ -26,7 +26,7 @@ LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-72787.rs:26:36\n+  --> $DIR/issue-72787.rs:25:36\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                                    ^ cannot perform const operation using `J`\n@@ -35,29 +35,21 @@ LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0283]: type annotations needed\n-  --> $DIR/issue-72787.rs:10:38\n-   |\n-LL | impl<const LHS: u32, const RHS: u32> True for IsLessOrEqual<LHS, RHS> where\n-   |                                      ^^^^ cannot infer type for struct `IsLessOrEqual<LHS, RHS>`\n-   |\n-   = note: cannot satisfy `IsLessOrEqual<LHS, RHS>: True`\n-\n-error[E0283]: type annotations needed\n-  --> $DIR/issue-72787.rs:22:26\n+  --> $DIR/issue-72787.rs:21:26\n    |\n LL |     IsLessOrEqual<I, 8>: True,\n    |                          ^^^^ cannot infer type for struct `IsLessOrEqual<I, 8_u32>`\n    |\n    = note: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n \n error[E0283]: type annotations needed\n-  --> $DIR/issue-72787.rs:22:26\n+  --> $DIR/issue-72787.rs:21:26\n    |\n LL |     IsLessOrEqual<I, 8>: True,\n    |                          ^^^^ cannot infer type for struct `IsLessOrEqual<I, 8_u32>`\n    |\n    = note: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0283`."}, {"sha": "77ad57f0640fa03260dec80aa3e95bc2f706493c", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-72787.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d18065d9978fd8c961d3cb58a6b22b9c33ba6dc8/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18065d9978fd8c961d3cb58a6b22b9c33ba6dc8/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.rs?ref=d18065d9978fd8c961d3cb58a6b22b9c33ba6dc8", "patch": "@@ -8,7 +8,6 @@ pub struct Condition<const CONDITION: bool>;\n pub trait True {}\n \n impl<const LHS: u32, const RHS: u32> True for IsLessOrEqual<LHS, RHS> where\n-//[min]~^ ERROR type annotations needed\n     Condition<{ LHS <= RHS }>: True\n //[min]~^ Error generic parameters may not be used in const operations\n //[min]~| Error generic parameters may not be used in const operations"}, {"sha": "966d76d148af3f69d901198d4955d3b4654d769a", "filename": "src/test/ui/issues/issue-77919.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d18065d9978fd8c961d3cb58a6b22b9c33ba6dc8/src%2Ftest%2Fui%2Fissues%2Fissue-77919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18065d9978fd8c961d3cb58a6b22b9c33ba6dc8/src%2Ftest%2Fui%2Fissues%2Fissue-77919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77919.rs?ref=d18065d9978fd8c961d3cb58a6b22b9c33ba6dc8", "patch": "@@ -10,4 +10,4 @@ struct Multiply<N, M> {\n }\n impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n //~^ ERROR cannot find type `VAL` in this scope\n-//~| ERROR type annotations needed\n+//~| ERROR not all trait items implemented, missing: `VAL`"}, {"sha": "97bd5ab36b65d176d2e4ab0fb8580f0d2342dde0", "filename": "src/test/ui/issues/issue-77919.stderr", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d18065d9978fd8c961d3cb58a6b22b9c33ba6dc8/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d18065d9978fd8c961d3cb58a6b22b9c33ba6dc8/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr?ref=d18065d9978fd8c961d3cb58a6b22b9c33ba6dc8", "patch": "@@ -17,15 +17,16 @@ LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n    |          |\n    |          help: you might be missing a type parameter: `, VAL`\n \n-error[E0283]: type annotations needed\n-  --> $DIR/issue-77919.rs:11:12\n+error[E0046]: not all trait items implemented, missing: `VAL`\n+  --> $DIR/issue-77919.rs:11:1\n    |\n+LL |     const VAL: T;\n+   |     ------------- `VAL` from trait\n+...\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n-   |            ^^^^^^^^^^^^^^ cannot infer type for struct `Multiply<N, M>`\n-   |\n-   = note: cannot satisfy `Multiply<N, M>: TypeVal<usize>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `VAL` in implementation\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0283, E0412.\n-For more information about an error, try `rustc --explain E0283`.\n+Some errors have detailed explanations: E0046, E0412.\n+For more information about an error, try `rustc --explain E0046`."}, {"sha": "c8239897f3abb5b7032d8f574aeae103599b1e71", "filename": "src/tools/clippy/tests/ui/crashes/ice-6252.stderr", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d18065d9978fd8c961d3cb58a6b22b9c33ba6dc8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d18065d9978fd8c961d3cb58a6b22b9c33ba6dc8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr?ref=d18065d9978fd8c961d3cb58a6b22b9c33ba6dc8", "patch": "@@ -21,15 +21,16 @@ LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n    |          |\n    |          help: you might be missing a type parameter: `, VAL`\n \n-error[E0283]: type annotations needed\n-  --> $DIR/ice-6252.rs:10:12\n+error[E0046]: not all trait items implemented, missing: `VAL`\n+  --> $DIR/ice-6252.rs:10:1\n    |\n+LL |     const VAL: T;\n+   |     ------------- `VAL` from trait\n+...\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n-   |            ^^^^^^^^^^^^^^ cannot infer type for struct `Multiply<N, M>`\n-   |\n-   = note: cannot satisfy `Multiply<N, M>: TypeVal<usize>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `VAL` in implementation\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0283, E0412.\n-For more information about an error, try `rustc --explain E0283`.\n+Some errors have detailed explanations: E0046, E0412.\n+For more information about an error, try `rustc --explain E0046`."}]}