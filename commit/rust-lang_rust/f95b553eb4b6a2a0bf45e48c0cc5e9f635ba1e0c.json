{"sha": "f95b553eb4b6a2a0bf45e48c0cc5e9f635ba1e0c", "node_id": "C_kwDOAAsO6NoAKGY5NWI1NTNlYjRiNmEyYTBiZjQ1ZTQ4YzBjYzVlOWY2MzViYTFlMGM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-07T14:24:35Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-07T16:33:03Z"}, "message": "Replace a command line flag with an env var to allow tools to initialize the tracing loggers at their own discretion", "tree": {"sha": "742e4e289d4e01bf3aefc24077a13aa922b9af27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/742e4e289d4e01bf3aefc24077a13aa922b9af27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f95b553eb4b6a2a0bf45e48c0cc5e9f635ba1e0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f95b553eb4b6a2a0bf45e48c0cc5e9f635ba1e0c", "html_url": "https://github.com/rust-lang/rust/commit/f95b553eb4b6a2a0bf45e48c0cc5e9f635ba1e0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f95b553eb4b6a2a0bf45e48c0cc5e9f635ba1e0c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dffea43fc1102bdfe16d88ed412c23d4f0f08d9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dffea43fc1102bdfe16d88ed412c23d4f0f08d9d", "html_url": "https://github.com/rust-lang/rust/commit/dffea43fc1102bdfe16d88ed412c23d4f0f08d9d"}], "stats": {"total": 45, "additions": 8, "deletions": 37}, "files": [{"sha": "86807098723aa567d0f31cf39fd5081528792309", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f95b553eb4b6a2a0bf45e48c0cc5e9f635ba1e0c/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f95b553eb4b6a2a0bf45e48c0cc5e9f635ba1e0c/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=f95b553eb4b6a2a0bf45e48c0cc5e9f635ba1e0c", "patch": "@@ -229,10 +229,6 @@ fn run_compiler(\n         registry: diagnostics_registry(),\n     };\n \n-    if !tracing::dispatcher::has_been_set() {\n-        init_rustc_env_logger_with_backtrace_option(&config.opts.unstable_opts.log_backtrace);\n-    }\n-\n     match make_input(config.opts.error_format, &matches.free) {\n         Err(reported) => return Err(reported),\n         Ok(Some(input)) => {\n@@ -1253,16 +1249,7 @@ pub fn install_ice_hook() {\n /// This allows tools to enable rust logging without having to magically match rustc's\n /// tracing crate version.\n pub fn init_rustc_env_logger() {\n-    init_rustc_env_logger_with_backtrace_option(&None);\n-}\n-\n-/// This allows tools to enable rust logging without having to magically match rustc's\n-/// tracing crate version. In contrast to `init_rustc_env_logger` it allows you to\n-/// choose a target module you wish to show backtraces along with its logging.\n-pub fn init_rustc_env_logger_with_backtrace_option(backtrace_target: &Option<String>) {\n-    if let Err(error) = rustc_log::init_rustc_env_logger_with_backtrace_option(backtrace_target) {\n-        early_error(ErrorOutputType::default(), &error.to_string());\n-    }\n+    init_env_logger(\"RUSTC_LOG\");\n }\n \n /// This allows tools to enable rust logging without having to magically match rustc's\n@@ -1326,6 +1313,7 @@ mod signal_handler {\n pub fn main() -> ! {\n     let start_time = Instant::now();\n     let start_rss = get_resident_set_size();\n+    init_rustc_env_logger();\n     signal_handler::install();\n     let mut callbacks = TimePassesCallbacks::default();\n     install_ice_hook();"}, {"sha": "5165ee424e31ba8ad5d9906fa8300ebad0214aa0", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f95b553eb4b6a2a0bf45e48c0cc5e9f635ba1e0c/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f95b553eb4b6a2a0bf45e48c0cc5e9f635ba1e0c/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=f95b553eb4b6a2a0bf45e48c0cc5e9f635ba1e0c", "patch": "@@ -758,7 +758,6 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(link_only, true);\n     tracked!(llvm_plugins, vec![String::from(\"plugin_name\")]);\n     tracked!(location_detail, LocationDetail { file: true, line: false, column: false });\n-    tracked!(log_backtrace, Some(\"filter\".to_string()));\n     tracked!(maximal_hir_to_mir_coverage, true);\n     tracked!(merge_functions, Some(MergeFunctions::Disabled));\n     tracked!(mir_emit_retag, true);"}, {"sha": "019fdc30dcec5606fb4d8e0f9a9f045480c19dce", "filename": "compiler/rustc_log/src/lib.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f95b553eb4b6a2a0bf45e48c0cc5e9f635ba1e0c/compiler%2Frustc_log%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f95b553eb4b6a2a0bf45e48c0cc5e9f635ba1e0c/compiler%2Frustc_log%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_log%2Fsrc%2Flib.rs?ref=f95b553eb4b6a2a0bf45e48c0cc5e9f635ba1e0c", "patch": "@@ -54,25 +54,12 @@ use tracing_subscriber::fmt::{\n use tracing_subscriber::layer::SubscriberExt;\n \n pub fn init_rustc_env_logger() -> Result<(), Error> {\n-    init_rustc_env_logger_with_backtrace_option(&None)\n-}\n-\n-pub fn init_rustc_env_logger_with_backtrace_option(\n-    backtrace_target: &Option<String>,\n-) -> Result<(), Error> {\n-    init_env_logger_with_backtrace_option(\"RUSTC_LOG\", backtrace_target)\n+    init_env_logger(\"RUSTC_LOG\")\n }\n \n /// In contrast to `init_rustc_env_logger` this allows you to choose an env var\n /// other than `RUSTC_LOG`.\n pub fn init_env_logger(env: &str) -> Result<(), Error> {\n-    init_env_logger_with_backtrace_option(env, &None)\n-}\n-\n-pub fn init_env_logger_with_backtrace_option(\n-    env: &str,\n-    backtrace_target: &Option<String>,\n-) -> Result<(), Error> {\n     let filter = match env::var(env) {\n         Ok(env) => EnvFilter::new(env),\n         _ => EnvFilter::default().add_directive(Directive::from(LevelFilter::WARN)),\n@@ -106,16 +93,16 @@ pub fn init_env_logger_with_backtrace_option(\n     let layer = layer.with_thread_ids(true).with_thread_names(true);\n \n     let subscriber = tracing_subscriber::Registry::default().with(filter).with(layer);\n-    match backtrace_target {\n-        Some(str) => {\n+    match env::var(format!(\"{env}_BACKTRACE\")) {\n+        Ok(str) => {\n             let fmt_layer = tracing_subscriber::fmt::layer()\n                 .with_writer(io::stderr)\n                 .without_time()\n                 .event_format(BacktraceFormatter { backtrace_target: str.to_string() });\n             let subscriber = subscriber.with(fmt_layer);\n             tracing::subscriber::set_global_default(subscriber).unwrap();\n         }\n-        None => {\n+        Err(_) => {\n             tracing::subscriber::set_global_default(subscriber).unwrap();\n         }\n     };"}, {"sha": "61cb81aec3de07d583251348574cbc3cfeac54ec", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f95b553eb4b6a2a0bf45e48c0cc5e9f635ba1e0c/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f95b553eb4b6a2a0bf45e48c0cc5e9f635ba1e0c/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=f95b553eb4b6a2a0bf45e48c0cc5e9f635ba1e0c", "patch": "@@ -1413,8 +1413,6 @@ options! {\n         \"what location details should be tracked when using caller_location, either \\\n         `none`, or a comma separated list of location details, for which \\\n         valid options are `file`, `line`, and `column` (default: `file,line,column`)\"),\n-    log_backtrace: Option<String> = (None, parse_opt_string, [TRACKED],\n-        \"add a backtrace along with logging\"),\n     ls: bool = (false, parse_bool, [UNTRACKED],\n         \"list the symbols defined by a library crate (default: no)\"),\n     macro_backtrace: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "706db892cb30d528759fcf9de517b68a2627e429", "filename": "tests/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f95b553eb4b6a2a0bf45e48c0cc5e9f635ba1e0c/tests%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f95b553eb4b6a2a0bf45e48c0cc5e9f635ba1e0c/tests%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fz-help.stdout?ref=f95b553eb4b6a2a0bf45e48c0cc5e9f635ba1e0c", "patch": "@@ -77,7 +77,6 @@\n     -Z                            llvm-plugins=val -- a list LLVM plugins to enable (space separated)\n     -Z                         llvm-time-trace=val -- generate JSON tracing data file from LLVM data (default: no)\n     -Z                         location-detail=val -- what location details should be tracked when using caller_location, either `none`, or a comma separated list of location details, for which valid options are `file`, `line`, and `column` (default: `file,line,column`)\n-    -Z                           log-backtrace=val -- add a backtrace along with logging\n     -Z                                      ls=val -- list the symbols defined by a library crate (default: no)\n     -Z                         macro-backtrace=val -- show macro backtraces (default: no)\n     -Z             maximal-hir-to-mir-coverage=val -- save as much information as possible about the correspondence between MIR and HIR as source scopes (default: no)"}, {"sha": "e42edf1d4af51ad13062ae292a9ed19a510401b1", "filename": "tests/ui/attributes/log-backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f95b553eb4b6a2a0bf45e48c0cc5e9f635ba1e0c/tests%2Fui%2Fattributes%2Flog-backtrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f95b553eb4b6a2a0bf45e48c0cc5e9f635ba1e0c/tests%2Fui%2Fattributes%2Flog-backtrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattributes%2Flog-backtrace.rs?ref=f95b553eb4b6a2a0bf45e48c0cc5e9f635ba1e0c", "patch": "@@ -1,9 +1,9 @@\n // run-pass\n //\n-// This test makes sure that log-backtrace option doesn't give a compilation error.\n+// This test makes sure that log-backtrace option at least parses correctly\n //\n // dont-check-compiler-stdout\n // dont-check-compiler-stderr\n // rustc-env:RUSTC_LOG=info\n-// compile-flags: -Zlog-backtrace=rustc_metadata::creader\n+// rustc-env:RUSTC_LOG_BACKTRACE=rustc_metadata::creader\n fn main() {}"}]}