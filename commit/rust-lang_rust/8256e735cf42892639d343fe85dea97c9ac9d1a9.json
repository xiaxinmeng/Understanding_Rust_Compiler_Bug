{"sha": "8256e735cf42892639d343fe85dea97c9ac9d1a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNTZlNzM1Y2Y0Mjg5MjYzOWQzNDNmZTg1ZGVhOTdjOWFjOWQxYTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-23T01:22:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-23T01:22:45Z"}, "message": "Rollup merge of #66574 - GuillaumeGomez:update-tidy-err-code-check, r=Mark-Simulacrum\n\nUpdate tidy check for error codes testing\n\nNow that all the error codes have been grouped into one file, we moved the long error explanations into markdown files, which means that we need to read those markdown file to also count their code blocks as well.\n\nSo 2 \"big\" things happened here:\n* No more need to keep the current error code when reading the `error_codes.rs` file since it's been put into the equivalent markdown file.\n* Need to instead read the markdown file (but it's simpler since I can just look for code blocks directly).", "tree": {"sha": "c970b624e531e9cc3676e3a9c85b21860492cb4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c970b624e531e9cc3676e3a9c85b21860492cb4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8256e735cf42892639d343fe85dea97c9ac9d1a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2InmCRBK7hj4Ov3rIwAAdHIIAFA6Ofn2xreH+unpH+B/vJKD\nn2auQamSvJgcVTwOoE+nquvaoXtB0m0ZHOxvPpDv07i+aWCAy8LslQ6QTK8jUV7b\ndwsaBpg2ZPL7H3tZi6qKrqVNBIKkzyG60kVtJUp8p2K/ayRzW2b5OP52vpTPm3kA\nKCtIIhGiMtwJLitHhN6Vle1zgnttNsPRiQ/tGacHJ6Cg4XxKr7yEi1S82VF6Z/K+\nWMmIghYQToMKzkA1Ypg6YbR1M3ltAQkTejXTI0gViqY0XdnMJFe5r6b5qoOFZlcp\nqh2GqMZeNyxCWzv8uHWlsgpR72tLp3E1sSZEFmJE8BlI2X41QDcnApQj1rFkKGQ=\n=qe8I\n-----END PGP SIGNATURE-----\n", "payload": "tree c970b624e531e9cc3676e3a9c85b21860492cb4a\nparent 0ae4a19cf3f0f8a9b1e5ea9e9307d6968eabf71e\nparent df9fed17ed93018165c7e8b626a3a312438396f2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1574472165 +0100\ncommitter GitHub <noreply@github.com> 1574472165 +0100\n\nRollup merge of #66574 - GuillaumeGomez:update-tidy-err-code-check, r=Mark-Simulacrum\n\nUpdate tidy check for error codes testing\n\nNow that all the error codes have been grouped into one file, we moved the long error explanations into markdown files, which means that we need to read those markdown file to also count their code blocks as well.\n\nSo 2 \"big\" things happened here:\n* No more need to keep the current error code when reading the `error_codes.rs` file since it's been put into the equivalent markdown file.\n* Need to instead read the markdown file (but it's simpler since I can just look for code blocks directly).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8256e735cf42892639d343fe85dea97c9ac9d1a9", "html_url": "https://github.com/rust-lang/rust/commit/8256e735cf42892639d343fe85dea97c9ac9d1a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8256e735cf42892639d343fe85dea97c9ac9d1a9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ae4a19cf3f0f8a9b1e5ea9e9307d6968eabf71e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ae4a19cf3f0f8a9b1e5ea9e9307d6968eabf71e", "html_url": "https://github.com/rust-lang/rust/commit/0ae4a19cf3f0f8a9b1e5ea9e9307d6968eabf71e"}, {"sha": "df9fed17ed93018165c7e8b626a3a312438396f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/df9fed17ed93018165c7e8b626a3a312438396f2", "html_url": "https://github.com/rust-lang/rust/commit/df9fed17ed93018165c7e8b626a3a312438396f2"}], "stats": {"total": 68, "additions": 49, "deletions": 19}, "files": [{"sha": "5364005840aa1419d9e3ded0fce4eae518a93ffc", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 49, "deletions": 19, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/8256e735cf42892639d343fe85dea97c9ac9d1a9/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8256e735cf42892639d343fe85dea97c9ac9d1a9/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=8256e735cf42892639d343fe85dea97c9ac9d1a9", "patch": "@@ -3,6 +3,8 @@\n \n use std::collections::HashMap;\n use std::ffi::OsStr;\n+use std::fs::read_to_string;\n+use std::io::Read;\n use std::path::Path;\n \n // A few of those error codes can't be tested but all the others can and *should* be tested!\n@@ -50,41 +52,69 @@ const WHITELIST: &[&str] = &[\n     \"E0729\",\n ];\n \n-fn extract_error_codes(f: &str, error_codes: &mut HashMap<String, bool>) {\n+fn check_error_code_explanation(\n+    f: &str,\n+    error_codes: &mut HashMap<String, bool>,\n+    err_code: String,\n+) {\n+    for line in f.lines() {\n+        let s = line.trim();\n+        if s.starts_with(\"```\") && s.contains(\"compile_fail\") && s.contains('E') {\n+            error_codes.insert(err_code, true);\n+            return;\n+        } else if s.starts_with(\"#### Note: this error code is no longer emitted by the compiler\") {\n+            error_codes.get_mut(&err_code).map(|x| *x = true);\n+            return;\n+        }\n+    }\n+}\n+\n+macro_rules! some_or_continue {\n+    ($e:expr) => (\n+        match $e {\n+            Some(e) => e,\n+            None => continue,\n+        }\n+    );\n+}\n+\n+fn extract_error_codes(f: &str, error_codes: &mut HashMap<String, bool>, path: &Path) {\n     let mut reached_no_explanation = false;\n-    let mut last_error_code = None;\n \n     for line in f.lines() {\n         let s = line.trim();\n-        if s.starts_with('E') && s.ends_with(\": r##\\\"\") {\n+        if !reached_no_explanation && s.starts_with('E') && s.contains(\"include_str!(\\\"\") {\n             if let Some(err_code) = s.splitn(2, ':').next() {\n                 let err_code = err_code.to_owned();\n-                last_error_code = Some(err_code.clone());\n                 if !error_codes.contains_key(&err_code) {\n-                    error_codes.insert(err_code, false);\n+                    error_codes.insert(err_code.clone(), false);\n                 }\n-            }\n-        } else if s.starts_with(\"```\") && s.contains(\"compile_fail\") && s.contains('E') {\n-            if let Some(err_code) = s.splitn(2, 'E').skip(1).next() {\n-                if let Some(err_code) = err_code.splitn(2, ',').next() {\n-                    let nb = error_codes.entry(format!(\"E{}\", err_code)).or_insert(false);\n-                    *nb = true;\n+                // Now we extract the tests from the markdown file!\n+                let md = some_or_continue!(s.splitn(2, \"include_str!(\\\"\").skip(1).next());\n+                let md_file_name = some_or_continue!(md.splitn(2, \"\\\")\").next());\n+                let path = some_or_continue!(path.parent()).join(md_file_name);\n+                match read_to_string(&path) {\n+                    Ok(content) => {\n+                        check_error_code_explanation(\n+                            &content,\n+                            error_codes,\n+                            err_code,\n+                        );\n+                    }\n+                    Err(e) => {\n+                        eprintln!(\"Couldn't read `{}`: {}\", path.display(), e);\n+                    }\n                 }\n             }\n-        } else if s == \";\" {\n-            reached_no_explanation = true;\n         } else if reached_no_explanation && s.starts_with('E') {\n             if let Some(err_code) = s.splitn(2, ',').next() {\n                 let err_code = err_code.to_owned();\n                 if !error_codes.contains_key(&err_code) { // this check should *never* fail!\n                     error_codes.insert(err_code, false);\n                 }\n             }\n-        } else if s.starts_with(\"#### Note: this error code is no longer emitted by the compiler\") {\n-            if let Some(last) = last_error_code {\n-                error_codes.get_mut(&last).map(|x| *x = true);\n-            }\n-            last_error_code = None;\n+        } else if s == \";\" {\n+            reached_no_explanation = true;\n         }\n     }\n }\n@@ -111,7 +141,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 &mut |entry, contents| {\n         let file_name = entry.file_name();\n         if file_name == \"error_codes.rs\" {\n-            extract_error_codes(contents, &mut error_codes);\n+            extract_error_codes(contents, &mut error_codes, entry.path());\n         } else if entry.path().extension() == Some(OsStr::new(\"stderr\")) {\n             extract_error_codes_from_tests(contents, &mut error_codes);\n         }"}]}