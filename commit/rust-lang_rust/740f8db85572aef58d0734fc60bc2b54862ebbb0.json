{"sha": "740f8db85572aef58d0734fc60bc2b54862ebbb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MGY4ZGI4NTU3MmFlZjU4ZDA3MzRmYzYwYmMyYjU0ODYyZWJiYjA=", "commit": {"author": {"name": "Mikail Bagishov", "email": "bagishov.mikail@yandex.ru", "date": "2019-06-19T20:15:19Z"}, "committer": {"name": "Mikail Bagishov", "email": "bagishov.mikail@yandex.ru", "date": "2019-08-09T14:41:40Z"}, "message": "Add FIXME-s that some types should be transparent", "tree": {"sha": "ae5e737146380e5806379187e97441b53231f8a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae5e737146380e5806379187e97441b53231f8a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/740f8db85572aef58d0734fc60bc2b54862ebbb0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE2VP2zUMUCEfzAYinY89LH52SGkAFAl1NhiQACgkQY89LH52S\nGkAePAv/S9h1u5RxjuCkHz8KYHB/oktxYUiDXwAR1lu5qPL1Mz7k2vB08l3iBtcC\nYToDqiHJFdBuyqoul25v3q9L/p7W/pSOGMi2ofcn7HhPDPTwKQ0TSEGfLCaeaeCS\n3qVu/eTJZXy2NRJD9ziLuMflSWUaCnmTD5FNWKOnZI6UAjP7cY8Evf8dtQ90S8tt\nUkZ/ouAApPhIC+70VbBHSJXfWyj7zjQ2y7vxyicVdkb/E4En2jgpEnfIE8oWS4x2\n3mP32WuLFKCz1TbVhovoK0vRnFg9wxWbMqU8bxGYh4f91dhHF6iLIm1miJhf7jDo\nfXtdbVxX26NwRErnfW2ZNZPSJxeZpMx8NenvHiI7AR0EuDKd3Xn0GP+Cu0YVux9r\nXFhSJkGLWHob6n471OWZuG52t4FFalP3ksw9Vo//DxMXyUutE7aQiXL2YNXLg1O6\nDdXPTavPP5+knyvnStmD8gSXOb8K7mjqenl1IKcv+IiVH6Vb08yLqvPa0eP0zowD\nLFHI/dwY\n=Qo33\n-----END PGP SIGNATURE-----", "payload": "tree ae5e737146380e5806379187e97441b53231f8a2\nparent 5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e\nauthor Mikail Bagishov <bagishov.mikail@yandex.ru> 1560975319 +0300\ncommitter Mikail Bagishov <bagishov.mikail@yandex.ru> 1565361700 +0300\n\nAdd FIXME-s that some types should be transparent\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/740f8db85572aef58d0734fc60bc2b54862ebbb0", "html_url": "https://github.com/rust-lang/rust/commit/740f8db85572aef58d0734fc60bc2b54862ebbb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/740f8db85572aef58d0734fc60bc2b54862ebbb0/comments", "author": {"login": "MikailBag", "id": 11889433, "node_id": "MDQ6VXNlcjExODg5NDMz", "avatar_url": "https://avatars.githubusercontent.com/u/11889433?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MikailBag", "html_url": "https://github.com/MikailBag", "followers_url": "https://api.github.com/users/MikailBag/followers", "following_url": "https://api.github.com/users/MikailBag/following{/other_user}", "gists_url": "https://api.github.com/users/MikailBag/gists{/gist_id}", "starred_url": "https://api.github.com/users/MikailBag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MikailBag/subscriptions", "organizations_url": "https://api.github.com/users/MikailBag/orgs", "repos_url": "https://api.github.com/users/MikailBag/repos", "events_url": "https://api.github.com/users/MikailBag/events{/privacy}", "received_events_url": "https://api.github.com/users/MikailBag/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MikailBag", "id": 11889433, "node_id": "MDQ6VXNlcjExODg5NDMz", "avatar_url": "https://avatars.githubusercontent.com/u/11889433?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MikailBag", "html_url": "https://github.com/MikailBag", "followers_url": "https://api.github.com/users/MikailBag/followers", "following_url": "https://api.github.com/users/MikailBag/following{/other_user}", "gists_url": "https://api.github.com/users/MikailBag/gists{/gist_id}", "starred_url": "https://api.github.com/users/MikailBag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MikailBag/subscriptions", "organizations_url": "https://api.github.com/users/MikailBag/orgs", "repos_url": "https://api.github.com/users/MikailBag/repos", "events_url": "https://api.github.com/users/MikailBag/events{/privacy}", "received_events_url": "https://api.github.com/users/MikailBag/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e", "html_url": "https://github.com/rust-lang/rust/commit/5e0c6a69e075d9c7d19e28264bb8941f72ecaf4e"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "f7ad62f4e9a8af341cf3d57c1b1ec715493c245d", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/740f8db85572aef58d0734fc60bc2b54862ebbb0/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740f8db85572aef58d0734fc60bc2b54862ebbb0/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=740f8db85572aef58d0734fc60bc2b54862ebbb0", "patch": "@@ -195,6 +195,12 @@ pub struct CString {\n /// [`from_ptr`]: #method.from_ptr\n #[derive(Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+// FIXME:\n+// `fn from` in `impl From<&CStr> for Box<CStr>` current implementation relies\n+// on `CStr` being layout-compatible with `[u8]`.\n+// When attribute privacy is implemented, `CStr` should be annotated as `#[repr(transparent)]`.\n+// Anyway, `CStr` representation and layout are considered implementation detail, are\n+// not documented and must not be relied upon.\n pub struct CStr {\n     // FIXME: this should not be represented with a DST slice but rather with\n     //        just a raw `c_char` along with some form of marker to make"}, {"sha": "b57f80c2e002b9b587530f46978c3d7208a76601", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/740f8db85572aef58d0734fc60bc2b54862ebbb0/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740f8db85572aef58d0734fc60bc2b54862ebbb0/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=740f8db85572aef58d0734fc60bc2b54862ebbb0", "patch": "@@ -97,6 +97,12 @@ pub struct OsString {\n /// [`String`]: ../string/struct.String.html\n /// [conversions]: index.html#conversions\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+// FIXME:\n+// `OsStr::from_inner` current implementation relies\n+// on `OsStr` being layout-compatible with `Slice`.\n+// When attribute privacy is implemented, `OsStr` should be annotated as `#[repr(transparent)]`.\n+// Anyway, `OsStr` representation and layout are considered implementation detail, are\n+// not documented and must not be relied upon.\n pub struct OsStr {\n     inner: Slice\n }"}, {"sha": "9f7a081403da3e4a78dec928ed0a74730dc24349", "filename": "src/libstd/path.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/740f8db85572aef58d0734fc60bc2b54862ebbb0/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740f8db85572aef58d0734fc60bc2b54862ebbb0/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=740f8db85572aef58d0734fc60bc2b54862ebbb0", "patch": "@@ -1123,6 +1123,12 @@ impl FusedIterator for Ancestors<'_> {}\n /// Which method works best depends on what kind of situation you're in.\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+// FIXME:\n+// `PathBuf::as_mut_vec` current implementation relies\n+// on `PathBuf` being layout-compatible with `Vec<u8>`.\n+// When attribute privacy is implemented, `PathBuf` should be annotated as `#[repr(transparent)]`.\n+// Anyway, `PathBuf` representation and layout are considered implementation detail, are\n+// not documented and must not be relied upon.\n pub struct PathBuf {\n     inner: OsString,\n }\n@@ -1745,6 +1751,12 @@ impl AsRef<OsStr> for PathBuf {\n /// assert_eq!(extension, Some(OsStr::new(\"txt\")));\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+// FIXME:\n+// `Path::new` current implementation relies\n+// on `Path` being layout-compatible with `OsStr`.\n+// When attribute privacy is implemented, `Path` should be annotated as `#[repr(transparent)]`.\n+// Anyway, `Path` representation and layout are considered implementation detail, are\n+// not documented and must not be relied upon.\n pub struct Path {\n     inner: OsStr,\n }"}, {"sha": "d734f412bf88650115881856f86ea744c1aa1d04", "filename": "src/libstd/sys_common/os_str_bytes.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/740f8db85572aef58d0734fc60bc2b54862ebbb0/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740f8db85572aef58d0734fc60bc2b54862ebbb0/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs?ref=740f8db85572aef58d0734fc60bc2b54862ebbb0", "patch": "@@ -18,6 +18,12 @@ pub(crate) struct Buf {\n     pub inner: Vec<u8>\n }\n \n+// FIXME:\n+// `Buf::as_slice` current implementation relies\n+// on `Slice` being layout-compatible with `[u8]`.\n+// When attribute privacy is implemented, `Slice` should be annotated as `#[repr(transparent)]`.\n+// Anyway, `Slice` representation and layout are considered implementation detail, are\n+// not documented and must not be relied upon.\n pub(crate) struct Slice {\n     pub inner: [u8]\n }"}]}