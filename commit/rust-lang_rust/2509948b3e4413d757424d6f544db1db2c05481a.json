{"sha": "2509948b3e4413d757424d6f544db1db2c05481a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MDk5NDhiM2U0NDEzZDc1NzQyNGQ2ZjU0NGRiMWRiMmMwNTQ4MWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-05T12:49:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-05T12:49:44Z"}, "message": "Auto merge of #29610 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #29416, #29537, #29538, #29539, #29567, #29568, #29571, #29579\n- Failed merges:", "tree": {"sha": "80dd1e8e15083479f5113294df43afea5311a787", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80dd1e8e15083479f5113294df43afea5311a787"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2509948b3e4413d757424d6f544db1db2c05481a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2509948b3e4413d757424d6f544db1db2c05481a", "html_url": "https://github.com/rust-lang/rust/commit/2509948b3e4413d757424d6f544db1db2c05481a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2509948b3e4413d757424d6f544db1db2c05481a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "792a9f12cff83186a5426bc6e713fbc11261a4b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/792a9f12cff83186a5426bc6e713fbc11261a4b1", "html_url": "https://github.com/rust-lang/rust/commit/792a9f12cff83186a5426bc6e713fbc11261a4b1"}, {"sha": "05cbfa478c8cbc79a6baac714da4f3d5d77c6919", "url": "https://api.github.com/repos/rust-lang/rust/commits/05cbfa478c8cbc79a6baac714da4f3d5d77c6919", "html_url": "https://github.com/rust-lang/rust/commit/05cbfa478c8cbc79a6baac714da4f3d5d77c6919"}], "stats": {"total": 1431, "additions": 853, "deletions": 578}, "files": [{"sha": "54fe87dc658165c258f9d2df1d9b7cb55b0daeb8", "filename": "RELEASES.md", "status": "modified", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/2509948b3e4413d757424d6f544db1db2c05481a/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/2509948b3e4413d757424d6f544db1db2c05481a/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=2509948b3e4413d757424d6f544db1db2c05481a", "patch": "@@ -1,3 +1,182 @@\n+Version 1.4.0 (2015-10-29)\n+============================\n+\n+* ~1200 changes, numerous bugfixes\n+\n+Highlights\n+----------\n+\n+* Windows builds targeting the 64-bit MSVC ABI and linker (instead of\n+  GNU) are now supported and recommended for use.\n+\n+Breaking Changes\n+----------------\n+\n+* [Several changes have been made to fix type soundness and improve\n+  the behavior of associated types][sound]. See [RFC 1214]. Although\n+  we have mostly introduced these changes as warnings this release, to\n+  become errors next release, there are still some scenarios that will\n+  see immediate breakage.\n+* [The `str::lines` and `BufRead::lines` iterators treat `\\r\\n` as\n+  line breaks in addition to `\\n`][crlf].\n+* [Loans of `'static` lifetime extend to the end of a function][stat].\n+* [`str::parse` no longer introduces avoidable rounding error when\n+  parsing floating point numbers. Together with earlier changes to\n+  float formatting/output, \"round trips\" like f.to_string().parse()\n+  now preserve the value of f exactly. Additionally, leading plus\n+  signs are now accepted][fp3].\n+\n+\n+Language\n+--------\n+\n+* `use` statements that import multiple items [can now rename\n+  them][i], as in `use foo::{bar as kitten, baz as puppy}`.\n+* [Binops work correctly on fat pointers][binfat].\n+* `pub extern crate`, which does not behave as expected, [issues a\n+  warning][pec] until a better solution is found.\n+\n+Libraries\n+---------\n+\n+* [Many APIs were stabilized][stab]: `<Box<str>>::into_string`,\n+  [`Arc::downgrade`], [`Arc::get_mut`], [`Arc::make_mut`],\n+  [`Arc::try_unwrap`], [`Box::from_raw`], [`Box::into_raw`], [`CStr::to_str`],\n+  [`CStr::to_string_lossy`], [`CString::from_raw`], [`CString::into_raw`],\n+  [`IntoRawFd::into_raw_fd`], [`IntoRawFd`],\n+  `IntoRawHandle::into_raw_handle`, `IntoRawHandle`,\n+  `IntoRawSocket::into_raw_socket`, `IntoRawSocket`, [`Rc::downgrade`],\n+  [`Rc::get_mut`], [`Rc::make_mut`], [`Rc::try_unwrap`], [`Result::expect`],\n+  [`String::into_boxed_str`], [`TcpStream::read_timeout`],\n+  [`TcpStream::set_read_timeout`], [`TcpStream::set_write_timeout`],\n+  [`TcpStream::write_timeout`], [`UdpSocket::read_timeout`],\n+  [`UdpSocket::set_read_timeout`], [`UdpSocket::set_write_timeout`],\n+  [`UdpSocket::write_timeout`], `Vec::append`, `Vec::split_off`,\n+  [`VecDeque::append`], [`VecDeque::retain`], [`VecDeque::split_off`],\n+  [`rc::Weak::upgrade`], [`rc::Weak`], [`slice::Iter::as_slice`],\n+  [`slice::IterMut::into_slice`], [`str::CharIndices::as_str`],\n+  [`str::Chars::as_str`], [`str::split_at_mut`], [`str::split_at`],\n+  [`sync::Weak::upgrade`], [`sync::Weak`], [`thread::park_timeout`],\n+  [`thread::sleep`].\n+* [Some APIs were deprecated][dep]: `BTreeMap::with_b`,\n+  `BTreeSet::with_b`, `Option::as_mut_slice`, `Option::as_slice`,\n+  `Result::as_mut_slice`, `Result::as_slice`, `f32::from_str_radix`,\n+  `f64::from_str_radix`.\n+* [Reverse-searching strings is faster with the 'two-way'\n+  algorithm][s].\n+* [`std::io::copy` allows `?Sized` arguments][cc].\n+* The `Windows`, `Chunks`, and `ChunksMut` iterators over slices all\n+  [override `count`, `nth` and `last` with an O(1)\n+  implementation][it].\n+* [`Default` is implemented for arrays up to `[T; 32]`][d].\n+* [`IntoRawFd` has been added to the Unix-specific prelude,\n+  `IntoRawSocket` and `IntoRawHandle` to the Windows-specific\n+  prelude][pr].\n+* [`Extend<String>` and `FromIterator<String` are both implemented for\n+  `String`][es].\n+* [`IntoIterator` is implemented for references to `Option` and\n+  `Result`][into2].\n+* [`HashMap` and `HashSet` implement `Extend<&T>` where `T:\n+  Copy`][ext] as part of [RFC 839]. This will cause type inferance\n+  breakage in rare situations.\n+* [`BinaryHeap` implements `Debug`][bh2].\n+* [`Borrow` and `BorrowMut` are implemented for fixed-size\n+  arrays][bm].\n+* [`extern fn`s with the \"Rust\" and \"C\" ABIs implement common\n+  traits including `Eq`, `Ord`, `Debug`, `Hash`][fp].\n+* [String comparison is faster][faststr].\n+* `&mut T` where `T: std::fmt::Write` [also implements\n+  `std::fmt::Write`][mutw].\n+* [A stable regression in `VecDeque::push_back` and other\n+  capicity-altering methods that caused panics for zero-sized types\n+  was fixed][vd].\n+* [Function pointers implement traits for up to 12 parameters][fp2].\n+\n+Miscellaneous\n+-------------\n+\n+* The compiler [no longer uses the 'morestack' feature to prevent\n+  stack overflow][mm]. Instead it uses guard pages and stack\n+  probes (though stack probes are not yet implemented on any platform\n+  but Windows).\n+* [The compiler matches traits faster when projections are involved][p].\n+* The 'improper_ctypes' lint [no longer warns about use of `isize` and\n+  `usize`][ffi].\n+* [Cargo now displays useful information about what its doing during\n+  `cargo update`][cu].\n+\n+[`Arc::downgrade`]: http://doc.rust-lang.org/nightly/alloc/arc/struct.Arc.html#method.downgrade\n+[`Arc::make_mut`]: http://doc.rust-lang.org/nightly/alloc/arc/struct.Arc.html#method.make_mut\n+[`Arc::get_mut`]: http://doc.rust-lang.org/nightly/alloc/arc/struct.Arc.html#method.get_mut\n+[`Arc::try_unwrap`]: http://doc.rust-lang.org/nightly/alloc/arc/struct.Arc.html#method.try_unwrap\n+[`Box::from_raw`]: http://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html#method.from_raw\n+[`Box::into_raw`]: http://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html#method.into_raw\n+[`CStr::to_str`]: http://doc.rust-lang.org/nightly/std/ffi/struct.CStr.html#method.to_str\n+[`CStr::to_string_lossy`]: http://doc.rust-lang.org/nightly/std/ffi/struct.CStr.html#method.to_string_lossy\n+[`CString::from_raw`]: http://doc.rust-lang.org/nightly/std/ffi/struct.CString.html#method.from_raw\n+[`CString::into_raw`]: http://doc.rust-lang.org/nightly/std/ffi/struct.CString.html#method.into_raw\n+[`IntoRawFd::into_raw_fd`]: http://doc.rust-lang.org/nightly/std/os/unix/io/trait.IntoRawFd.html#tymethod.into_raw_fd\n+[`IntoRawFd`]: http://doc.rust-lang.org/nightly/std/os/unix/io/trait.IntoRawFd.html\n+[`Rc::downgrade`]: http://doc.rust-lang.org/nightly/alloc/rc/struct.Rc.html#method.downgrade\n+[`Rc::get_mut`]: http://doc.rust-lang.org/nightly/alloc/rc/struct.Rc.html#method.get_mut\n+[`Rc::make_mut`]: http://doc.rust-lang.org/nightly/alloc/rc/struct.Rc.html#method.make_mut\n+[`Rc::try_unwrap`]: http://doc.rust-lang.org/nightly/alloc/rc/struct.Rc.html#method.try_unwrap\n+[`Result::expect`]: http://doc.rust-lang.org/nightly/core/result/enum.Result.html#method.expect\n+[`String::into_boxed_str`]: http://doc.rust-lang.org/nightly/collections/string/struct.String.html#method.into_boxed_str\n+[`TcpStream::read_timeout`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.read_timeout\n+[`TcpStream::set_read_timeout`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_read_timeout\n+[`TcpStream::write_timeout`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.write_timeout\n+[`TcpStream::set_write_timeout`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_write_timeout\n+[`UdpSocket::read_timeout`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.read_timeout\n+[`UdpSocket::set_read_timeout`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_read_timeout\n+[`UdpSocket::write_timeout`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.write_timeout\n+[`UdpSocket::set_write_timeout`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_write_timeout\n+[`VecDeque::append`]: http://doc.rust-lang.org/nightly/std/collections/struct.VecDeque.html#method.append\n+[`VecDeque::retain`]: http://doc.rust-lang.org/nightly/std/collections/struct.VecDeque.html#method.retain\n+[`VecDeque::split_off`]: http://doc.rust-lang.org/nightly/std/collections/struct.VecDeque.html#method.split_off\n+[`rc::Weak::upgrade`]: http://doc.rust-lang.org/nightly/std/rc/struct.Weak.html#method.upgrade\n+[`rc::Weak`]: http://doc.rust-lang.org/nightly/std/rc/struct.Weak.html\n+[`slice::Iter::as_slice`]: http://doc.rust-lang.org/nightly/std/slice/struct.Iter.html#method.as_slice\n+[`slice::IterMut::into_slice`]: http://doc.rust-lang.org/nightly/std/slice/struct.IterMut.html#method.into_slice\n+[`str::CharIndices::as_str`]: http://doc.rust-lang.org/nightly/std/str/struct.CharIndices.html#method.as_str\n+[`str::Chars::as_str`]: http://doc.rust-lang.org/nightly/std/str/struct.Chars.html#method.as_str\n+[`str::split_at_mut`]: http://doc.rust-lang.org/nightly/std/primitive.str.html#method.split_at_mut\n+[`str::split_at`]: http://doc.rust-lang.org/nightly/std/primitive.str.html#method.split_at\n+[`sync::Weak::upgrade`]: http://doc.rust-lang.org/nightly/std/sync/struct.Weak.html#method.upgrade\n+[`sync::Weak`]: http://doc.rust-lang.org/nightly/std/sync/struct.Weak.html\n+[`thread::park_timeout`]: http://doc.rust-lang.org/nightly/std/thread/fn.park_timeout.html\n+[`thread::sleep`]: http://doc.rust-lang.org/nightly/std/thread/fn.sleep.html\n+[bh2]: https://github.com/rust-lang/rust/pull/28156\n+[binfat]: https://github.com/rust-lang/rust/pull/28270\n+[bm]: https://github.com/rust-lang/rust/pull/28197\n+[cc]: https://github.com/rust-lang/rust/pull/27531\n+[crlf]: https://github.com/rust-lang/rust/pull/28034\n+[cu]: https://github.com/rust-lang/cargo/pull/1931\n+[d]: https://github.com/rust-lang/rust/pull/27825\n+[dep]: https://github.com/rust-lang/rust/pull/28339\n+[es]: https://github.com/rust-lang/rust/pull/27956\n+[ext]: https://github.com/rust-lang/rust/pull/28094\n+[faststr]: https://github.com/rust-lang/rust/pull/28338\n+[ffi]: https://github.com/rust-lang/rust/pull/28779\n+[fp]: https://github.com/rust-lang/rust/pull/28268\n+[fp2]: https://github.com/rust-lang/rust/pull/28560\n+[fp3]: https://github.com/rust-lang/rust/pull/27307\n+[i]: https://github.com/rust-lang/rust/pull/27451\n+[into2]: https://github.com/rust-lang/rust/pull/28039\n+[it]: https://github.com/rust-lang/rust/pull/27652\n+[mm]: https://github.com/rust-lang/rust/pull/27338\n+[mutw]: https://github.com/rust-lang/rust/pull/28368\n+[sound]: https://github.com/rust-lang/rust/pull/27641\n+[p]: https://github.com/rust-lang/rust/pull/27866\n+[pec]: https://github.com/rust-lang/rust/pull/28486\n+[pr]: https://github.com/rust-lang/rust/pull/27896\n+[RFC 839]: https://github.com/rust-lang/rfcs/blob/master/text/0839-embrace-extend-extinguish.md\n+[RFC 1214]: https://github.com/rust-lang/rfcs/blob/master/text/1214-projections-lifetimes-and-wf.md\n+[s]: https://github.com/rust-lang/rust/pull/27474\n+[stab]: https://github.com/rust-lang/rust/pull/28339\n+[stat]: https://github.com/rust-lang/rust/pull/28321\n+[vd]: https://github.com/rust-lang/rust/pull/28494\n+\n Version 1.3.0 (2015-09-17)\n ==============================\n "}, {"sha": "704bcf1587b8a54b766f846e266921a927e289b6", "filename": "src/doc/trpl/SUMMARY.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2509948b3e4413d757424d6f544db1db2c05481a/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/2509948b3e4413d757424d6f544db1db2c05481a/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2FSUMMARY.md?ref=2509948b3e4413d757424d6f544db1db2c05481a", "patch": "@@ -1,9 +1,6 @@\n # Summary\n \n * [Getting Started](getting-started.md)\n-    * [Installing Rust](installing-rust.md)\n-    * [Hello, world!](hello-world.md)\n-    * [Hello, Cargo!](hello-cargo.md)\n * [Learn Rust](learn-rust.md)\n     * [Guessing Game](guessing-game.md)\n     * [Dining Philosophers](dining-philosophers.md)"}, {"sha": "c693cceeac4824455e05a26aa6940be8ffdc7e10", "filename": "src/doc/trpl/error-handling.md", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2509948b3e4413d757424d6f544db1db2c05481a/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/2509948b3e4413d757424d6f544db1db2c05481a/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ferror-handling.md?ref=2509948b3e4413d757424d6f544db1db2c05481a", "patch": "@@ -1605,14 +1605,11 @@ arguments.\n \n ## Writing the logic\n \n-We're all different in how we write code, but error handling is\n-usually the last thing we want to think about. This isn't very good\n-practice for good design, but it can be useful for rapidly\n-prototyping. In our case, because Rust forces us to be explicit about\n-error handling, it will also make it obvious what parts of our program\n-can cause errors. Why? Because Rust will make us call `unwrap`! This\n-can give us a nice bird's eye view of how we need to approach error\n-handling.\n+We all write code differently, but error handling is usually the last thing we\n+want to think about. This isn't great for the overall design of a program, but\n+it can be useful for rapid prototyping. Because Rust forces us to be explicit\n+about error handling (by making us call `unwrap`), it is easy to see which\n+parts of our program can cause errors.\n \n In this case study, the logic is really simple. All we need to do is parse the\n CSV data given to us and print out a field in matching rows. Let's do it. (Make"}, {"sha": "5b1040dd05ee19dbc0b9c267cfaa91e8b28a04b6", "filename": "src/doc/trpl/getting-started.md", "status": "modified", "additions": 605, "deletions": 0, "changes": 605, "blob_url": "https://github.com/rust-lang/rust/blob/2509948b3e4413d757424d6f544db1db2c05481a/src%2Fdoc%2Ftrpl%2Fgetting-started.md", "raw_url": "https://github.com/rust-lang/rust/raw/2509948b3e4413d757424d6f544db1db2c05481a/src%2Fdoc%2Ftrpl%2Fgetting-started.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fgetting-started.md?ref=2509948b3e4413d757424d6f544db1db2c05481a", "patch": "@@ -3,3 +3,608 @@\n This first section of the book will get us going with Rust and its tooling.\n First, we\u2019ll install Rust. Then, the classic \u2018Hello World\u2019 program. Finally,\n we\u2019ll talk about Cargo, Rust\u2019s build system and package manager.\n+\n+# Installing Rust\n+\n+The first step to using Rust is to install it. Generally speaking, you\u2019ll need\n+an Internet connection to run the commands in this chapter, as we\u2019ll be\n+downloading Rust from the internet.\n+\n+We\u2019ll be showing off a number of commands using a terminal, and those lines all\n+start with `$`. We don't need to type in the `$`s, they are there to indicate\n+the start of each command. We\u2019ll see many tutorials and examples around the web\n+that follow this convention: `$` for commands run as our regular user, and `#`\n+for commands we should be running as an administrator.\n+\n+## Platform support\n+\n+The Rust compiler runs on, and compiles to, a great number of platforms, though\n+not all platforms are equally supported. Rust's support levels are organized\n+into three tiers, each with a different set of guarantees.\n+\n+Platforms are identified by their \"target triple\" which is the string to inform\n+the compiler what kind of output should be produced. The columns below indicate\n+whether the corresponding component works on the specified platform.\n+\n+### Tier 1\n+\n+Tier 1 platforms can be thought of as \"guaranteed to build and work\".\n+Specifically they will each satisfy the following requirements:\n+\n+* Automated testing is set up to run tests for the platform.\n+* Landing changes to the `rust-lang/rust` repository's master branch is gated on\n+  tests passing.\n+* Official release artifacts are provided for the platform.\n+* Documentation for how to use and how to build the platform is available.\n+\n+|  Target                       | std |rustc|cargo| notes                      |\n+|-------------------------------|-----|-----|-----|----------------------------|\n+| `x86_64-pc-windows-msvc`      |  \u2713  |  \u2713  |  \u2713  | 64-bit MSVC (Windows 7+)   |\n+| `i686-pc-windows-gnu`         |  \u2713  |  \u2713  |  \u2713  | 32-bit MinGW (Windows 7+)  |\n+| `x86_64-pc-windows-gnu`       |  \u2713  |  \u2713  |  \u2713  | 64-bit MinGW (Windows 7+)  |\n+| `i686-apple-darwin`           |  \u2713  |  \u2713  |  \u2713  | 32-bit OSX (10.7+, Lion+)  |\n+| `x86_64-apple-darwin`         |  \u2713  |  \u2713  |  \u2713  | 64-bit OSX (10.7+, Lion+)  |\n+| `i686-unknown-linux-gnu`      |  \u2713  |  \u2713  |  \u2713  | 32-bit Linux (2.6.18+)     |\n+| `x86_64-unknown-linux-gnu`    |  \u2713  |  \u2713  |  \u2713  | 64-bit Linux (2.6.18+)     |\n+\n+### Tier 2\n+\n+Tier 2 platforms can be thought of as \"guaranteed to build\". Automated tests\n+are not run so it's not guaranteed to produce a working build, but platforms\n+often work to quite a good degree and patches are always welcome! Specifically,\n+these platforms are required to have each of the following:\n+\n+* Automated building is set up, but may not be running tests.\n+* Landing changes to the `rust-lang/rust` repository's master branch is gated on\n+  platforms **building**. Note that this means for some platforms only the\n+  standard library is compiled, but for others the full bootstrap is run.\n+* Official release artifacts are provided for the platform.\n+\n+|  Target                       | std |rustc|cargo| notes                      |\n+|-------------------------------|-----|-----|-----|----------------------------|\n+| `i686-pc-windows-msvc`        |  \u2713  |  \u2713  |  \u2713  | 32-bit MSVC (Windows 7+)   |\n+\n+### Tier 3\n+\n+Tier 3 platforms are those which Rust has support for, but landing changes is\n+not gated on the platform either building or passing tests. Working builds for\n+these platforms may be spotty as their reliability is often defined in terms of\n+community contributions. Additionally, release artifacts and installers are not\n+provided, but there may be community infrastructure producing these in\n+unofficial locations.\n+\n+|  Target                       | std |rustc|cargo| notes                      |\n+|-------------------------------|-----|-----|-----|----------------------------|\n+| `x86_64-unknown-linux-musl`   |  \u2713  |     |     | 64-bit Linux with MUSL     |\n+| `arm-linux-androideabi`       |  \u2713  |     |     | ARM Android                |\n+| `i686-linux-android`          |  \u2713  |     |     | 32-bit x86 Android         |\n+| `aarch64-linux-android`       |  \u2713  |     |     | ARM64 Android              |\n+| `arm-unknown-linux-gnueabi`   |  \u2713  |  \u2713  |     | ARM Linux (2.6.18+)        |\n+| `arm-unknown-linux-gnueabihf` |  \u2713  |  \u2713  |     | ARM Linux (2.6.18+)        |\n+| `aarch64-unknown-linux-gnu`   |  \u2713  |     |     | ARM64 Linux (2.6.18+)      |\n+| `mips-unknown-linux-gnu`      |  \u2713  |     |     | MIPS Linux (2.6.18+)       |\n+| `mipsel-unknown-linux-gnu`    |  \u2713  |     |     | MIPS (LE) Linux (2.6.18+)  |\n+| `powerpc-unknown-linux-gnu`   |  \u2713  |     |     | PowerPC Linux (2.6.18+)    |\n+| `i386-apple-ios`              |  \u2713  |     |     | 32-bit x86 iOS             |\n+| `x86_64-apple-ios`            |  \u2713  |     |     | 64-bit x86 iOS             |\n+| `armv7-apple-ios`             |  \u2713  |     |     | ARM iOS                    |\n+| `armv7s-apple-ios`            |  \u2713  |     |     | ARM iOS                    |\n+| `aarch64-apple-ios`           |  \u2713  |     |     | ARM64 iOS                  |\n+| `i686-unknown-freebsd`        |  \u2713  |  \u2713  |     | 32-bit FreeBSD             |\n+| `x86_64-unknown-freebsd`      |  \u2713  |  \u2713  |     | 64-bit FreeBSD             |\n+| `x86_64-unknown-openbsd`      |  \u2713  |  \u2713  |     | 64-bit OpenBSD             |\n+| `x86_64-unknown-netbsd`       |  \u2713  |  \u2713  |     | 64-bit NetBSD              |\n+| `x86_64-unknown-bitrig`       |  \u2713  |  \u2713  |     | 64-bit Bitrig              |\n+| `x86_64-unknown-dragonfly`    |  \u2713  |  \u2713  |     | 64-bit DragonFlyBSD        |\n+| `x86_64-rumprun-netbsd`       |  \u2713  |     |     | 64-bit NetBSD Rump Kernel  |\n+| `i686-pc-windows-msvc` (XP)   |  \u2713  |     |     | Windows XP support         |\n+| `x86_64-pc-windows-msvc` (XP) |  \u2713  |     |     | Windows XP support         |\n+\n+Note that this table can be expanded over time, this isn't the exhaustive set of\n+tier 3 platforms that will ever be!\n+\n+## Installing on Linux or Mac\n+\n+If we're on Linux or a Mac, all we need to do is open a terminal and type this:\n+\n+```bash\n+$ curl -sSf https://static.rust-lang.org/rustup.sh | sh\n+```\n+\n+This will download a script, and stat the installation. If it all goes well,\n+you\u2019ll see this appear:\n+\n+```text\n+Welcome to Rust.\n+\n+This script will download the Rust compiler and its package manager, Cargo, and\n+install them to /usr/local. You may install elsewhere by running this script\n+with the --prefix=<path> option.\n+\n+The installer will run under \u2018sudo\u2019 and may ask you for your password. If you do\n+not want the script to run \u2018sudo\u2019 then pass it the --disable-sudo flag.\n+\n+You may uninstall later by running /usr/local/lib/rustlib/uninstall.sh,\n+or by running this script again with the --uninstall flag.\n+\n+Continue? (y/N) \n+```\n+\n+From here, press `y` for \u2018yes\u2019, and then follow the rest of the prompts.\n+\n+## Installing on Windows\n+\n+If you're on Windows, please download the appropriate [installer][install-page].\n+\n+[install-page]: https://www.rust-lang.org/install.html\n+\n+## Uninstalling\n+\n+Uninstalling Rust is as easy as installing it. On Linux or Mac, just run\n+the uninstall script:\n+\n+```bash\n+$ sudo /usr/local/lib/rustlib/uninstall.sh\n+```\n+\n+If we used the Windows installer, we can re-run the `.msi` and it will give us\n+an uninstall option.\n+\n+## Troubleshooting\n+\n+If we've got Rust installed, we can open up a shell, and type this:\n+\n+```bash\n+$ rustc --version\n+```\n+\n+You should see the version number, commit hash, and commit date.\n+\n+If you do, Rust has been installed successfully! Congrats!\n+\n+If you don't and you're on Windows, check that Rust is in your %PATH% system\n+variable. If it isn't, run the installer again, select \"Change\" on the \"Change,\n+repair, or remove installation\" page and ensure \"Add to PATH\" is installed on\n+the local hard drive.\n+\n+If not, there are a number of places where we can get help. The easiest is\n+[the #rust IRC channel on irc.mozilla.org][irc], which we can access through\n+[Mibbit][mibbit]. Click that link, and we'll be chatting with other Rustaceans\n+(a silly nickname we call ourselves) who can help us out. Other great resources\n+include [the user\u2019s forum][users], and [Stack Overflow][stackoverflow].\n+\n+[irc]: irc://irc.mozilla.org/#rust\n+[mibbit]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust\n+[users]: https://users.rust-lang.org/\n+[stackoverflow]: http://stackoverflow.com/questions/tagged/rust\n+\n+This installer also installs a copy of the documentation locally, so we can\n+read it offline. On UNIX systems, `/usr/local/share/doc/rust` is the location.\n+On Windows, it's in a `share/doc` directory, inside the directory to which Rust\n+was installed.\n+\n+# Hello, world!\n+\n+Now that you have Rust installed, we'll help you write your first Rust program.\n+It's traditional when learning a new language to write a little program to\n+print the text \u201cHello, world!\u201d to the screen, and in this section, we'll follow\n+that tradition. \n+\n+The nice thing about starting with such a simple program is that you can\n+quickly verify that your compiler is installed, and that it's working properly.\n+Printing information to the screen is also just a pretty common thing to do, so\n+practicing it early on is good.\n+\n+> Note: This book assumes basic familiarity with the command line. Rust itself\n+> makes no specific demands about your editing, tooling, or where your code\n+> lives, so if you prefer an IDE to the command line, that's an option. You may\n+> want to check out [SolidOak], which was built specifically with Rust in mind.\n+> There are a number of extensions in development by the community, and the\n+> Rust team ships plugins for [various editors]. Configuring your editor or\n+> IDE is out of the scope of this tutorial, so check the documentation for your\n+> specific setup. \n+\n+[SolidOak]: https://github.com/oakes/SolidOak\n+[various editors]: https://github.com/rust-lang/rust/blob/master/src/etc/CONFIGS.md\n+\n+## Creating a Project File\n+\n+First, make a file to put your Rust code in. Rust doesn't care where your code\n+lives, but for this book, I suggest making a *projects* directory in your home\n+directory, and keeping all your projects there. Open a terminal and enter the\n+following commands to make a directory for this particular project:\n+\n+```bash\n+$ mkdir ~/projects\n+$ cd ~/projects\n+$ mkdir hello_world\n+$ cd hello_world\n+```\n+\n+> Note: If you\u2019re on Windows and not using PowerShell, the `~` may not work.\n+> Consult the documentation for your shell for more details.\n+\n+## Writing and Running a Rust Program\n+\n+Next, make a new source file and call it *main.rs*. Rust files always end\n+in a *.rs* extension. If you\u2019re using more than one word in your filename, use\n+an underscore to separate them; for example, you'd use *hello_world.rs* rather\n+than *helloworld.rs*.\n+\n+Now open the *main.rs* file you just created, and type the following code:\n+\n+```rust\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+```\n+\n+Save the file, and go back to your terminal window. On Linux or OSX, enter the\n+following commands:\n+\n+```bash\n+$ rustc main.rs\n+$ ./main \n+Hello, world!\n+```\n+\n+In Windows, just replace `main` with `main.exe`. Regardless of your operating\n+system, you should see the string `Hello, world!` print to the terminal. If you\n+did, then congratulations! You've officially written a Rust program. That makes\n+you a Rust programmer! Welcome. \n+\n+## Anatomy of a Rust Program\n+\n+Now, let\u2019s go over what just happened in your \"Hello, world!\" program in\n+detail. Here's the first piece of the puzzle:\n+\n+```rust\n+fn main() {\n+\n+}\n+```\n+\n+These lines define a *function* in Rust. The `main` function is special: it's\n+the beginning of every Rust program. The first line says, \u201cI\u2019m declaring a\n+function named `main` that takes no arguments and returns nothing.\u201d If there\n+were arguments, they would go inside the parentheses (`(` and `)`), and because\n+we aren\u2019t returning anything from this function, we can omit the return type\n+entirely.\n+\n+Also note that the function body is wrapped in curly braces (`{` and `}`). Rust\n+requires these around all function bodies. It's considered good style to put\n+the opening curly brace on the same line as the function declaration, with one\n+space in between.\n+\n+Inside the `main()` function:\n+\n+```rust\n+    println!(\"Hello, world!\");\n+```\n+\n+This line does all of the work in this little program: it prints text to the\n+screen. There are a number of details that are important here. The first is\n+that it\u2019s indented with four spaces, not tabs.\n+ \n+The second important part is the `println!()` line. This is calling a Rust\n+*[macro]*, which is how metaprogramming is done in Rust. If it were calling a\n+function instead, it would look like this: `println()` (without the !). We'll\n+discuss Rust macros in more detail later, but for now you just need to\n+know that when you see a `!` that means that you\u2019re calling a macro instead of\n+a normal function. \n+\n+\n+[macro]: macros.html\n+\n+Next is `\"Hello, world!\"` which is a *string*. Strings are a surprisingly\n+complicated topic in a systems programming language, and this is a *[statically\n+allocated]* string. We pass this string as an argument to `println!`, which\n+prints the string to the screen. Easy enough!\n+\n+[statically allocated]: the-stack-and-the-heap.html\n+\n+The line ends with a semicolon (`;`). Rust is an *[expression oriented]*\n+language, which means that most things are expressions, rather than statements.\n+The `;` indicates that this expression is over, and the next one is ready to\n+begin. Most lines of Rust code end with a `;`.\n+\n+[expression-oriented language]: glossary.html#expression-oriented-language\n+\n+## Compiling and Running Are Separate Steps\n+\n+In \"Writing and Running a Rust Program\", we showed you how to run a newly\n+created program. We'll break that process down and examine each step now. \n+\n+Before running a Rust program, you have to compile it. You can use the Rust\n+compiler by entering the `rustc` command and passing it the name of your source\n+file, like this:\n+\n+```bash\n+$ rustc main.rs\n+```\n+\n+If you come from a C or C++ background, you'll notice that this is similar to\n+`gcc` or `clang`. After compiling successfully, Rust should output a binary\n+executable, which you can see on Linux or OSX by entering the `ls` command in\n+your shell as follows:\n+\n+```bash\n+$ ls\n+main  main.rs\n+```\n+\n+On Windows, you'd enter:\n+\n+```bash\n+$ dir\n+main.exe  main.rs\n+```\n+\n+This shows we have two files: the source code, with an `.rs` extension, and the\n+executable (`main.exe` on Windows, `main` everywhere else). All that's left to\n+do from here is run the `main` or `main.exe` file, like this:\n+\n+```bash\n+$ ./main  # or main.exe on Windows\n+```\n+\n+If *main.rs* were your \"Hello, world!\" program, this would print `Hello,\n+world!` to your terminal.\n+\n+If you come from a dynamic language like Ruby, Python, or JavaScript, you may\n+not be used to compiling and running a program being separate steps. Rust is an\n+*ahead-of-time compiled* language, which means that you can compile a program,\n+give it to someone else, and they can run it even without Rust installed. If\n+you give someone a `.rb` or `.py` or `.js` file, on the other hand, they need\n+to have a Ruby, Python, or JavaScript implementation installed (respectively),\n+but you only need one command to both compile and run your program. Everything\n+is a tradeoff in language design.\n+\n+Just compiling with `rustc` is fine for simple programs, but as your project\n+grows, you'll want to be able to manage all of the options your project has,\n+and make it easy to share your code with other people and projects. Next, I'll\n+introduce you to a tool called Cargo, which will help you write real-world Rust\n+programs.\n+\n+# Hello, Cargo!\n+\n+Cargo is Rust\u2019s build system and package manager, and Rustaceans use Cargo to\n+manage their Rust projects. Cargo manages three things: building your code,\n+downloading the libraries your code depends on, and building those libraries.\n+We call libraries your code needs \u2018dependencies\u2019 since your code depends on\n+them.\n+\n+The simplest Rust programs don\u2019t have any dependencies, so right now, you'd\n+only use the first part of its functionality. As you write more complex Rust\n+programs, you\u2019ll want to add dependencies, and if you start off using Cargo,\n+that will be a lot easier to do.\n+\n+As the vast, vast majority of Rust projects use Cargo, we will assume that\n+you\u2019re using it for the rest of the book. Cargo comes installed with Rust\n+itself, if you used the official installers. If you installed Rust through some\n+other means, you can check if you have Cargo installed by typing:\n+\n+```bash\n+$ cargo --version\n+```\n+\n+Into a terminal. If you see a version number, great! If you see an error like\n+\u2018`command not found`\u2019, then you should look at the documentation for the system\n+in which you installed Rust, to determine if Cargo is separate.\n+\n+## Converting to Cargo\n+\n+Let\u2019s convert the Hello World program to Cargo. To Cargo-fy a project, you need\n+to do three things: \n+\n+1. Put your source file in the right directory.\n+2. Get rid of the old executable (`main.exe` on Windows, `main` everywhere else)\n+   and make a new one.\n+3. Make a Cargo configuration file.\n+\n+Let's get started!\n+\n+### Creating a new Executable and Source Directory\n+\n+First, go back to your terminal, move to your *hello_world* directory, and\n+enter the following commands:\n+\n+```bash\n+$ mkdir src\n+$ mv main.rs src/main.rs\n+$ rm main  # or 'del main.exe' on Windows\n+```\n+\n+Cargo expects your source files to live inside a *src* directory, so do that\n+first. This leaves the top-level project directory (in this case,\n+*hello_world*) for READMEs, license information, and anything else not related\n+to your code. In this way, using Cargo helps you keep your projects nice and\n+tidy. There's a place for everything, and everything is in its place. \n+\n+Now, copy *main.rs* to the *src* directory, and delete the compiled file you\n+created with `rustc`. As usual, replace `main` with `main.exe` if you're on\n+Windows.\n+\n+This example retains `main.rs` as the source filename because it's creating an\n+executable. If you wanted to make a library instead, you'd name the file\n+`lib.rs`. This convention is used by Cargo to successfully compile your\n+projects, but it can be overridden if you wish. \n+\n+### Creating a Configuration File\n+\n+Next, create a new file inside your *hello_world* directory, and call it\n+`Cargo.toml`.\n+\n+Make sure to capitalize the `C` in `Cargo.toml`, or Cargo won't know what to do\n+with the configuration file. \n+\n+This file is in the *[TOML]* (Tom's Obvious, Minimal Language) format. TOML is\n+similar to INI, but has some extra goodies, and is used as Cargo\u2019s\n+configuration format.\n+\n+[TOML]: https://github.com/toml-lang/toml\n+\n+Inside this file, type the following information:\n+\n+```toml\n+[package]\n+\n+name = \"hello_world\"\n+version = \"0.0.1\"\n+authors = [ \"Your name <you@example.com>\" ]\n+```\n+\n+The first line, `[package]`, indicates that the following statements are\n+configuring a package. As we add more information to this file, we\u2019ll add other\n+sections, but for now, we just have the package configuration.\n+\n+The other three lines set the three bits of configuration that Cargo needs to\n+know to compile your program: its name, what version it is, and who wrote it.\n+\n+Once you've added this information to the *Cargo.toml* file, save it to finish\n+creating the configuration file.\n+\n+## Building and Running a Cargo Project \n+\n+With your *Cargo.toml* file in place in your project's root directory, you\n+should be ready to build and run your Hello World program! To do so, enter the\n+following commands:\n+\n+```bash\n+$ cargo build\n+   Compiling hello_world v0.0.1 (file:///home/yourname/projects/hello_world)\n+$ ./target/debug/hello_world\n+Hello, world!\n+```\n+\n+Bam! If all goes well, `Hello, world!` should print to the terminal once more. \n+\n+You just built a project with `cargo build` and ran it with\n+`./target/debug/hello_world`, but you can actually do both in one step with\n+`cargo run` as follows:\n+\n+```bash\n+$ cargo run\n+     Running `target/debug/hello_world`\n+Hello, world!\n+```\n+\n+Notice that this example didn\u2019t re-build the project. Cargo figured out that\n+the file hasn\u2019t changed, and so it just ran the binary. If you'd modified your\n+source code, Cargo would have rebuilt the project before running it, and you\n+would have seen something like this:\n+\n+```bash\n+$ cargo run\n+   Compiling hello_world v0.0.1 (file:///home/yourname/projects/hello_world)\n+     Running `target/debug/hello_world`\n+Hello, world!\n+```\n+\n+Cargo checks to see if any of your project\u2019s files have been modified, and only\n+rebuilds your project if they\u2019ve changed since the last time you built it.\n+\n+With simple projects, Cargo doesn't bring a whole lot over just using `rustc`,\n+but it will become useful in future. With complex projects composed of multiple\n+crates, it\u2019s much easier to let Cargo coordinate the build. With Cargo, you can\n+just run `cargo build`, and it should work the right way.\n+\n+## Building for Release\n+\n+When your project is finally ready for release, you can use `cargo build\n+--release` to compile your project with optimizations. These optimizations make\n+your Rust code run faster, but turning them on makes your program take longer\n+to compile. This is why there are two different profiles, one for development,\n+and one for building the final program you\u2019ll give to a user.\n+\n+Running this command also causes Cargo to create a new file called\n+*Cargo.lock*, which looks like this:\n+\n+```toml\n+[root]\n+name = \"hello_world\"\n+version = \"0.0.1\"\n+```\n+\n+Cargo uses the *Cargo.lock* file to keep track of dependencies in your\n+application. This is the Hello World project's *Cargo.lock* file. This project\n+doesn't have dependencies, so the file is a bit sparse. Realistically, you\n+won't ever need to touch this file yourself; just let Cargo handle it.\n+\n+That\u2019s it! If you've been following along, you should have successfully built\n+`hello_world` with Cargo. \n+\n+Even though the project is simple, it now uses much of the real tooling you\u2019ll\n+use for the rest of your Rust career. In fact, you can expect to start\n+virtually all Rust projects with some variation on the following commands:\n+\n+```bash\n+$ git clone someurl.com/foo\n+$ cd foo\n+$ cargo build\n+```\n+\n+## Making A New Cargo Project the Easy Way\n+\n+You don\u2019t have to go through that previous process every time you want to start\n+a new project! Cargo can quickly make a bare-bones project directory that you\n+can start developing in right away.\n+\n+To start a new project with Cargo, enter `cargo new` at the command line:\n+\n+```bash\n+$ cargo new hello_world --bin\n+```\n+\n+This command passes `--bin` because the goal is to get straight to making an\n+executable application, as opposed to a library. Executables are often called\n+*binaries* (as in `/usr/bin`, if you\u2019re on a Unix system).\n+\n+Cargo has generated two files and one directory for us: a `Cargo.toml` and a\n+*src* directory with a *main.rs* file inside. These should look familliar,\n+they\u2019re exactly what we created by hand, above.\n+\n+This output is all you need to get started. First, open `Cargo.toml`. It should\n+look something like this:\n+\n+```toml\n+[package]\n+\n+name = \"hello_world\"\n+version = \"0.1.0\"\n+authors = [\"Your Name <you@example.com>\"]\n+```\n+\n+Cargo has populated *Cargo.toml* with reasonable defaults based on the arguments\n+you gave it and your `git` global configuration. You may notice that Cargo has\n+also initialized the `hello_world` directory as a `git` repository.\n+\n+Here\u2019s what should be in `src/main.rs`:\n+\n+```rust\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+```\n+\n+Cargo has generated a \"Hello World!\" for you, and you\u2019re ready to start coding! \n+\n+> Note: If you want to look at Cargo in more detail, check out the official [Cargo\n+guide], which covers all of its features.\n+\n+[Cargo guide]: http://doc.crates.io/guide.html\n+\n+# Closing Thoughts\n+\n+This chapter covered the basics that will serve you well through the rest of\n+this book, and the rest of your time with Rust. Now that you\u2019ve got the tools\n+down, we'll cover more about the Rust language itself. \n+\n+You have two options: Dive into a project with \u2018[Learn Rust][learnrust]\u2019, or\n+start from the bottom and work your way up with \u2018[Syntax and\n+Semantics][syntax]\u2019. More experienced systems programmers will probably prefer\n+\u2018Learn Rust\u2019, while those from dynamic backgrounds may enjoy either. Different\n+people learn differently! Choose whatever\u2019s right for you.\n+\n+[learnrust]: learn-rust.html\n+[syntax]: syntax-and-semantics.html"}, {"sha": "97bc4575f81f76ed56f325ca5646ccbf80b56a3b", "filename": "src/doc/trpl/hello-cargo.md", "status": "removed", "additions": 0, "deletions": 210, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/792a9f12cff83186a5426bc6e713fbc11261a4b1/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "raw_url": "https://github.com/rust-lang/rust/raw/792a9f12cff83186a5426bc6e713fbc11261a4b1/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fhello-cargo.md?ref=792a9f12cff83186a5426bc6e713fbc11261a4b1", "patch": "@@ -1,210 +0,0 @@\n-% Hello, Cargo!\n-\n-[Cargo][cratesio] is a tool that Rustaceans use to help manage their Rust\n-projects. Cargo is currently in a pre-1.0 state, and so it is still a work in\n-progress. However, it is already good enough to use for many Rust projects, and\n-so it is assumed that Rust projects will use Cargo from the beginning.\n-\n-[cratesio]: http://doc.crates.io\n-\n-Cargo manages three things: building our code, downloading the dependencies our\n-code needs, and building those dependencies. At first, our program doesn\u2019t have\n-any dependencies, so we\u2019ll only be using the first part of its functionality.\n-Eventually, we\u2019ll add more. Since we started off by using Cargo, it'll be easy\n-to add later.\n-\n-If you installed Rust via the official installers you will also have Cargo. If\n-you installed Rust some other way, you may want to\n-[check the Cargo README][cargoreadme] for specific instructions about installing\n-it.\n-\n-[cargoreadme]: https://github.com/rust-lang/cargo#installing-cargo-from-nightlies\n-\n-## Converting to Cargo\n-\n-Let\u2019s convert Hello World to Cargo.\n-\n-To Cargo-ify our project, we need to do three things: Make a `Cargo.toml`\n-configuration file, put our source file in the right place, and get rid of the\n-old executable (`main.exe` on Windows, `main` everywhere else). Let's do that part first:\n-\n-```bash\n-$ mkdir src\n-$ mv main.rs src/main.rs\n-$ rm main  # or 'del main.exe' on Windows\n-```\n-\n-> Note: since we're creating an executable, we retain `main.rs` as the source\n-> filename. If we want to make a library instead, we should use `lib.rs`. This\n-> convention is used by Cargo to successfully compile our projects, but it can\n-> be overridden if we wish. Custom file locations for the entry point can be\n-> specified with a [`[lib]` or `[[bin]]`][crates-custom] key in the TOML file.\n-\n-[crates-custom]: http://doc.crates.io/manifest.html#configuring-a-target\n-\n-Cargo expects our source files to live inside a `src` directory. That leaves the\n-top level for other things, like READMEs, license information, and anything not\n-related to our code. Cargo helps us keep our projects nice and tidy. A place for\n-everything, and everything in its place.\n-\n-Next, our configuration file:\n-\n-```bash\n-$ editor Cargo.toml # or 'notepad Cargo.toml' on Windows\n-```\n-\n-Make sure to get this name right: we need the capital `C`!\n-\n-Put this inside:\n-\n-```toml\n-[package]\n-\n-name = \"hello_world\"\n-version = \"0.0.1\"\n-authors = [ \"Your name <you@example.com>\" ]\n-```\n-\n-This file is in the [TOML][toml] format. TOML is similar to INI, but has some\n-extra goodies. According to the TOML docs,\n-\n-> TOML aims to be a minimal configuration file format that's easy to read due\n-> to obvious semantics. TOML is designed to map unambiguously to a hash table.\n-> TOML should be easy to parse into data structures in a wide variety of\n-> languages.\n-\n-[toml]: https://github.com/toml-lang/toml\n-\n-Once we have this file in place in our project's root directory, we should be\n-ready to build! To do so, run:\n-\n-```bash\n-$ cargo build\n-   Compiling hello_world v0.0.1 (file:///home/yourname/projects/hello_world)\n-$ ./target/debug/hello_world\n-Hello, world!\n-```\n-\n-Bam! We built our project with `cargo build`, and ran it with\n-`./target/debug/hello_world`. We can do both in one step with `cargo run`:\n-\n-```bash\n-$ cargo run\n-     Running `target/debug/hello_world`\n-Hello, world!\n-```\n-\n-Notice that we didn\u2019t re-build the project this time. Cargo figured out that\n-we hadn\u2019t changed the source file, and so it just ran the binary. If we had\n-made a modification, we would have seen it do both:\n-\n-```bash\n-$ cargo run\n-   Compiling hello_world v0.0.1 (file:///home/yourname/projects/hello_world)\n-     Running `target/debug/hello_world`\n-Hello, world!\n-```\n-\n-This hasn\u2019t bought us a whole lot over our simple use of `rustc`, but think\n-about the future: when our project gets more complex, we need to do more\n-things to get all of the parts to properly compile. With Cargo, as our project\n-grows, we can just run `cargo build`, and it\u2019ll work the right way.\n-\n-When our project is finally ready for release, we can use `cargo build\n---release` to compile our project with optimizations.\n-\n-You'll also notice that Cargo has created a new file: `Cargo.lock`.\n-\n-```toml\n-[root]\n-name = \"hello_world\"\n-version = \"0.0.1\"\n-```\n-\n-The `Cargo.lock` file is used by Cargo to keep track of dependencies in our\n-application. Right now, we don\u2019t have any, so it\u2019s a bit sparse. We won't ever\n-need to touch this file ourselves, just let Cargo handle it.\n-\n-That\u2019s it! We\u2019ve successfully built `hello_world` with Cargo. Even though our\n-program is simple, it\u2019s using much of the real tooling that we\u2019ll use for the\n-rest of our Rust career. We can expect to do this to get started with virtually\n-all Rust projects:\n-\n-```bash\n-$ git clone someurl.com/foo\n-$ cd foo\n-$ cargo build\n-```\n-\n-## A New Project\n-\n-We don\u2019t have to go through this whole process every time we want to start a new\n-project! Cargo has the ability to make a bare-bones project directory in which\n-we can start developing right away.\n-\n-To start a new project with Cargo, we use `cargo new`:\n-\n-```bash\n-$ cargo new hello_world --bin\n-```\n-\n-We\u2019re passing `--bin` because our goal is to get straight to making an\n-executable application, as opposed to a library. Executables are often called\n-\u2018binaries.\u2019 (as in `/usr/bin`, if we\u2019re on a Unix system)\n-\n-Let's check out what Cargo has generated for us:\n-\n-```bash\n-$ cd hello_world\n-$ tree .\n-.\n-\u251c\u2500\u2500 Cargo.toml\n-\u2514\u2500\u2500 src\n-    \u2514\u2500\u2500 main.rs\n-\n-1 directory, 2 files\n-```\n-\n-If we don't have the `tree` command, we can probably get it from our\n-distribution\u2019s package manager. It\u2019s not necessary, but it\u2019s certainly useful.\n-\n-This is all we need to get started. First, let\u2019s check out `Cargo.toml`:\n-\n-```toml\n-[package]\n-\n-name = \"hello_world\"\n-version = \"0.1.0\"\n-authors = [\"Your Name <you@example.com>\"]\n-```\n-\n-Cargo has populated this file with reasonable defaults based off the arguments\n-we gave it and our `git` global configuration. You may notice that Cargo has\n-also initialized the `hello_world` directory as a `git` repository.\n-\n-Here\u2019s what\u2019s in `src/main.rs`:\n-\n-```rust\n-fn main() {\n-    println!(\"Hello, world!\");\n-}\n-```\n-\n-Cargo has generated a \"Hello World!\" for us, and we\u2019re ready to start coding!\n-Cargo has its own [guide][guide] which covers Cargo\u2019s features in much more\n-depth.\n-\n-[guide]: http://doc.crates.io/guide.html\n-\n-Now that we\u2019ve got the tools down, let\u2019s actually learn more about the Rust\n-language itself. These are the basics that will serve us well through the rest\n-of our time with Rust.\n-\n-You have two options: Dive into a project with \u2018[Learn Rust][learnrust]\u2019, or\n-start from the bottom and work your way up with\n-\u2018[Syntax and Semantics][syntax]\u2019. More experienced systems programmers will\n-probably prefer \u2018Learn Rust\u2019, while those from dynamic backgrounds may enjoy\n-either. Different people learn differently! Choose whatever\u2019s right for you.\n-\n-[learnrust]: learn-rust.html\n-[syntax]: syntax-and-semantics.html"}, {"sha": "2f9166751d96564e9cb7583547291b6a606da870", "filename": "src/doc/trpl/hello-world.md", "status": "removed", "additions": 0, "deletions": 171, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/792a9f12cff83186a5426bc6e713fbc11261a4b1/src%2Fdoc%2Ftrpl%2Fhello-world.md", "raw_url": "https://github.com/rust-lang/rust/raw/792a9f12cff83186a5426bc6e713fbc11261a4b1/src%2Fdoc%2Ftrpl%2Fhello-world.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fhello-world.md?ref=792a9f12cff83186a5426bc6e713fbc11261a4b1", "patch": "@@ -1,171 +0,0 @@\n-% Hello, world!\n-\n-Now that we have Rust installed, let\u2019s write our first Rust program. It\u2019s\n-traditional to make our first program in any new language one that prints the\n-text \u201cHello, world!\u201d to the screen. The nice thing about starting with such a\n-simple program is that we can verify that our compiler isn\u2019t just installed, but\n-also working properly. And printing information to the screen is a pretty common\n-thing to do.\n-\n-The first thing that we need to do is make a file to put our code in. I like to\n-make a `projects` directory in my home directory, and keep all my projects\n-there. Rust doesn't care where our code lives.\n-\n-This actually leads to one other concern we should address: this guide will\n-assume that we have basic familiarity with the command line. Rust itself makes\n-no specific demands on our editing tooling, or where our code lives. If we\n-prefer an IDE to the command line, we may want to check out\n-[SolidOak][solidoak], or wherever plugins are for our favorite IDE. There are a\n-number of extensions of varying quality in development by the community. The\n-Rust team also ships [plugins for various editors][plugins]. Configuring our\n-editor or IDE is out of the scope of this tutorial, so check the documentation\n-for our setup, specifically.\n-\n-[solidoak]: https://github.com/oakes/SolidOak\n-[plugins]: https://github.com/rust-lang/rust/blob/master/src/etc/CONFIGS.md\n-\n-With that said, let\u2019s make a directory in our projects directory.\n-\n-```bash\n-$ mkdir ~/projects\n-$ cd ~/projects\n-$ mkdir hello_world\n-$ cd hello_world\n-```\n-\n-If we\u2019re on Windows and not using PowerShell, the `~` may not work. Consult the\n-documentation for our shell for more details.\n-\n-Let\u2019s make a new source file next. We\u2019ll call our file `main.rs`. Rust files\n-always end in a `.rs` extension, and if we\u2019re using more than one word in a\n-Rust filename, we use an underscore: for example, `linked_list.rs`, not\n-`linkedlist.rs` or `LinkedList.rs`.\n-\n-Now that we\u2019ve got our file open, type this in:\n-\n-```rust\n-fn main() {\n-    println!(\"Hello, world!\");\n-}\n-```\n-\n-Save the file, and then type this into our terminal window:\n-\n-```bash\n-$ rustc main.rs\n-$ ./main # or main.exe on Windows\n-Hello, world!\n-```\n-\n-Success! Let\u2019s go over what just happened in detail.\n-\n-```rust\n-fn main() {\n-\n-}\n-```\n-\n-These lines define a *function* in Rust. The `main` function is special:\n-it's the beginning of every Rust program. The first line says \"I\u2019m declaring a\n-function named `main` which takes no arguments and returns nothing.\" If there\n-were arguments, they would go inside the parentheses (`(` and `)`), and because\n-we aren\u2019t returning anything from this function, we can omit the return type\n-entirely. We\u2019ll get to it later.\n-\n-You\u2019ll also note that the function is wrapped in curly braces (`{` and `}`).\n-Rust requires these around all function bodies. It is also considered good style\n-to put the opening curly brace on the same line as the function declaration,\n-with one space in between.\n-\n-Next up is this line:\n-\n-```rust\n-    println!(\"Hello, world!\");\n-```\n-\n-This line does all of the work in our little program. There are a number of\n-details that are important here. The first is that it\u2019s indented with four\n-spaces, not tabs. Please configure your editor of choice to insert four spaces\n-with the tab key. We provide some\n-[sample configurations for various editors][configs].\n-\n-[configs]: https://github.com/rust-lang/rust/tree/master/src/etc/CONFIGS.md\n-\n-The second point is the `println!()` part. This is calling a Rust\n-[macro][macro], which is how metaprogramming is done in Rust. If it were a\n-function instead, it would look like this: `println()`. For our purposes, we\n-don\u2019t need to worry about this difference. Just know that sometimes, we\u2019ll see a\n-`!`, and that means that we\u2019re calling a macro instead of a normal function.\n-Rust implements `println!` as a macro rather than a function for good reasons,\n-but that's an advanced topic. One last thing to mention: Rust\u2019s macros are\n-significantly different from C macros, if you\u2019ve used those. Don\u2019t be scared of\n-using macros. We\u2019ll get to the details eventually, you\u2019ll just have to take it\n-on trust for now.\n-\n-[macro]: macros.html\n-\n-Next, `\"Hello, world!\"` is a \u2018string\u2019. Strings are a surprisingly complicated\n-topic in a systems programming language, and this is a \u2018statically allocated\u2019\n-string. If you want to read further about allocation, check out [the stack and\n-the heap][allocation], but you don\u2019t need to right now if you don\u2019t want to. We\n-pass this string as an argument to `println!`, which prints the string to the\n-screen. Easy enough!\n-\n-[allocation]: the-stack-and-the-heap.html\n-\n-Finally, the line ends with a semicolon (`;`). Rust is an [\u2018expression oriented\u2019\n-language][expression-oriented language], which means that most things are\n-expressions, rather than statements. The `;` is used to indicate that this\n-expression is over, and the next one is ready to begin. Most lines of Rust code\n-end with a `;`.\n-\n-[expression-oriented language]: glossary.html#expression-oriented-language\n-\n-Finally, actually compiling and running our program. We can compile with our\n-compiler, `rustc`, by passing it the name of our source file:\n-\n-```bash\n-$ rustc main.rs\n-```\n-\n-This is similar to `gcc` or `clang`, if you come from a C or C++ background.\n-Rust will output a binary executable. We can see it with `ls`:\n-\n-```bash\n-$ ls\n-main  main.rs\n-```\n-\n-Or on Windows:\n-\n-```bash\n-$ dir\n-main.exe  main.rs\n-```\n-\n-There are now two files: our source code, with the `.rs` extension, and the\n-executable (`main.exe` on Windows, `main` everywhere else).\n-\n-```bash\n-$ ./main  # or main.exe on Windows\n-```\n-\n-This prints out our `Hello, world!` text to our terminal.\n-\n-If you come from a dynamic language like Ruby, Python, or JavaScript, you may\n-not be used to these two steps being separate. Rust is an \u2018ahead-of-time\n-compiled language\u2019, which means that we can compile a program, give it to\n-someone else, and they don't need to have Rust installed. If we give someone a\n-`.rb` or `.py` or `.js` file, they need to have a Ruby/Python/JavaScript\n-implementation installed, but we just need one command to both compile and run\n-our program. Everything is a tradeoff in language design, and Rust has made its\n-choice.\n-\n-Congratulations! You have officially written a Rust program. That makes you a\n-Rust programmer! Welcome. \ud83c\udf8a\ud83c\udf89\ud83d\udc4d\n-\n-Next, I'd like to introduce you to another tool, Cargo, which is used to write\n-real-world Rust programs. Just using `rustc` is nice for simple things, but as\n-our project grows, we'll want something to help us manage all of the options\n-that it has, and to make it easy to share our code with other people and\n-projects."}, {"sha": "49ee5317c78838e2fb79043dd76c8c57eadaf598", "filename": "src/doc/trpl/installing-rust.md", "status": "removed", "additions": 0, "deletions": 184, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/792a9f12cff83186a5426bc6e713fbc11261a4b1/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/792a9f12cff83186a5426bc6e713fbc11261a4b1/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Finstalling-rust.md?ref=792a9f12cff83186a5426bc6e713fbc11261a4b1", "patch": "@@ -1,184 +0,0 @@\n-% Installing Rust\n-\n-The first step to using Rust is to install it! There are a number of ways to\n-install Rust, but the easiest is to use the `rustup` script. If we're on Linux\n-or a Mac, all we need to do is this:\n-\n-> Note: we don't need to type in the `$`s, they are there to indicate the start of\n-> each command. We\u2019ll see many tutorials and examples around the web that\n-> follow this convention: `$` for commands run as our regular user, and `#` for\n-> commands we should be running as an administrator.\n-\n-```bash\n-$ curl -sf -L https://static.rust-lang.org/rustup.sh | sh\n-```\n-\n-If we're concerned about the [potential insecurity][insecurity] of using `curl |\n-sh`, please keep reading and see our disclaimer below. And feel free to use a\n-two-step version of the installation and examine our installation script:\n-\n-```bash\n-$ curl -f -L https://static.rust-lang.org/rustup.sh -O\n-$ sh rustup.sh\n-```\n-\n-[insecurity]: http://curlpipesh.tumblr.com\n-\n-If you're on Windows, please download the appropriate [installer][install-page].\n-\n-> Note: By default, the Windows installer won't add Rust to the %PATH% system\n-> variable. If this is the only version of Rust we are installing and we want to\n-> be able to run it from the command line, click on \"Advanced\" on the install\n-> dialog and on the \"Product Features\" page ensure \"Add to PATH\" is installed on\n-> the local hard drive.\n-\n-\n-[install-page]: https://www.rust-lang.org/install.html\n-\n-## Uninstalling\n-\n-If you decide you don't want Rust anymore, we'll be a bit sad, but that's okay.\n-Not every programming language is great for everyone. We can run the\n-uninstall script:\n-\n-```bash\n-$ sudo /usr/local/lib/rustlib/uninstall.sh\n-```\n-\n-If we used the Windows installer, we can re-run the `.msi` and it will give\n-us an uninstall option.\n-\n-## That disclaimer we promised\n-\n-Some people, and somewhat rightfully so, get very upset when we tell them to\n-`curl | sh`. Their concern is that `curl | sh` implicitly requires you to trust\n-that the good people who maintain Rust aren't going to hack your computer and\n-do bad things \u2014 and even having accepted that, there is still the possibility\n-that the Rust website has been hacked and the `rustup` script compromised.\n-\n-Being wary of such possibilities is a good instinct! If you're uncomfortable\n-using `curl | sh` for reasons like these, please check out the documentation on\n-[building Rust from Source][from-source], or\n-[the official binary downloads][install-page].\n-\n-[from-source]: https://github.com/rust-lang/rust#building-from-source\n-\n-## Platform support\n-\n-The Rust compiler runs on, and compiles to, a great number of platforms, though\n-not all platforms are equally supported. Rust's support levels are organized\n-into three tiers, each with a different set of guarantees.\n-\n-Platforms are identified by their \"target triple\" which is the string to inform\n-the compiler what kind of output should be produced. The columns below indicate\n-whether the corresponding component works on the specified platform.\n-\n-### Tier 1\n-\n-Tier 1 platforms can be thought of as \"guaranteed to build and work\".\n-Specifically they will each satisfy the following requirements:\n-\n-* Automated testing is set up to run tests for the platform.\n-* Landing changes to the `rust-lang/rust` repository's master branch is gated on\n-  tests passing.\n-* Official release artifacts are provided for the platform.\n-* Documentation for how to use and how to build the platform is available.\n-\n-|  Target                       | std |rustc|cargo| notes                      |\n-|-------------------------------|-----|-----|-----|----------------------------|\n-| `x86_64-pc-windows-msvc`      |  \u2713  |  \u2713  |  \u2713  | 64-bit MSVC (Windows 7+)   |\n-| `i686-pc-windows-gnu`         |  \u2713  |  \u2713  |  \u2713  | 32-bit MinGW (Windows 7+)  |\n-| `x86_64-pc-windows-gnu`       |  \u2713  |  \u2713  |  \u2713  | 64-bit MinGW (Windows 7+)  |\n-| `i686-apple-darwin`           |  \u2713  |  \u2713  |  \u2713  | 32-bit OSX (10.7+, Lion+)  |\n-| `x86_64-apple-darwin`         |  \u2713  |  \u2713  |  \u2713  | 64-bit OSX (10.7+, Lion+)  |\n-| `i686-unknown-linux-gnu`      |  \u2713  |  \u2713  |  \u2713  | 32-bit Linux (2.6.18+)     |\n-| `x86_64-unknown-linux-gnu`    |  \u2713  |  \u2713  |  \u2713  | 64-bit Linux (2.6.18+)     |\n-\n-### Tier 2\n-\n-Tier 2 platforms can be thought of as \"guaranteed to build\". Automated tests are\n-not run so it's not guaranteed to produce a working build, but platforms often\n-work to quite a good degree and patches are always welcome! Specifically, these\n-platforms are required to have each of the following:\n-\n-* Automated building is set up, but may not be running tests.\n-* Landing changes to the `rust-lang/rust` repository's master branch is gated on\n-  platforms **building**. Note that this means for some platforms only the\n-  standard library is compiled, but for others the full bootstrap is run.\n-* Official release artifacts are provided for the platform.\n-\n-|  Target                       | std |rustc|cargo| notes                      |\n-|-------------------------------|-----|-----|-----|----------------------------|\n-| `i686-pc-windows-msvc`        |  \u2713  |  \u2713  |  \u2713  | 32-bit MSVC (Windows 7+)   |\n-\n-### Tier 3\n-\n-Tier 3 platforms are those which Rust has support for, but landing changes is\n-not gated on the platform either building or passing tests. Working builds for\n-these platforms may be spotty as their reliability is often defined in terms of\n-community contributions. Additionally, release artifacts and installers are not\n-provided, but there may be community infrastructure producing these in\n-unofficial locations.\n-\n-|  Target                       | std |rustc|cargo| notes                      |\n-|-------------------------------|-----|-----|-----|----------------------------|\n-| `x86_64-unknown-linux-musl`   |  \u2713  |     |     | 64-bit Linux with MUSL     |\n-| `arm-linux-androideabi`       |  \u2713  |     |     | ARM Android                |\n-| `i686-linux-android`          |  \u2713  |     |     | 32-bit x86 Android         |\n-| `aarch64-linux-android`       |  \u2713  |     |     | ARM64 Android              |\n-| `arm-unknown-linux-gnueabi`   |  \u2713  |  \u2713  |     | ARM Linux (2.6.18+)        |\n-| `arm-unknown-linux-gnueabihf` |  \u2713  |  \u2713  |     | ARM Linux (2.6.18+)        |\n-| `aarch64-unknown-linux-gnu`   |  \u2713  |     |     | ARM64 Linux (2.6.18+)      |\n-| `mips-unknown-linux-gnu`      |  \u2713  |     |     | MIPS Linux (2.6.18+)       |\n-| `mipsel-unknown-linux-gnu`    |  \u2713  |     |     | MIPS (LE) Linux (2.6.18+)  |\n-| `powerpc-unknown-linux-gnu`   |  \u2713  |     |     | PowerPC Linux (2.6.18+)    |\n-| `i386-apple-ios`              |  \u2713  |     |     | 32-bit x86 iOS             |\n-| `x86_64-apple-ios`            |  \u2713  |     |     | 64-bit x86 iOS             |\n-| `armv7-apple-ios`             |  \u2713  |     |     | ARM iOS                    |\n-| `armv7s-apple-ios`            |  \u2713  |     |     | ARM iOS                    |\n-| `aarch64-apple-ios`           |  \u2713  |     |     | ARM64 iOS                  |\n-| `i686-unknown-freebsd`        |  \u2713  |  \u2713  |     | 32-bit FreeBSD             |\n-| `x86_64-unknown-freebsd`      |  \u2713  |  \u2713  |     | 64-bit FreeBSD             |\n-| `x86_64-unknown-openbsd`      |  \u2713  |  \u2713  |     | 64-bit OpenBSD             |\n-| `x86_64-unknown-netbsd`       |  \u2713  |  \u2713  |     | 64-bit NetBSD              |\n-| `x86_64-unknown-bitrig`       |  \u2713  |  \u2713  |     | 64-bit Bitrig              |\n-| `x86_64-unknown-dragonfly`    |  \u2713  |  \u2713  |     | 64-bit DragonFlyBSD        |\n-| `x86_64-rumprun-netbsd`       |  \u2713  |     |     | 64-bit NetBSD Rump Kernel  |\n-| `i686-pc-windows-msvc` (XP)   |  \u2713  |     |     | Windows XP support         |\n-| `x86_64-pc-windows-msvc` (XP) |  \u2713  |     |     | Windows XP support         |\n-\n-Note that this table can be expanded over time, this isn't the exhaustive set of\n-tier 3 platforms that will ever be!\n-\n-## After installation\n-\n-If we've got Rust installed, we can open up a shell, and type this:\n-\n-```bash\n-$ rustc --version\n-```\n-\n-You should see the version number, commit hash, and commit date.\n-\n-If you do, Rust has been installed successfully! Congrats!\n-\n-If you don't and you're on Windows, check that Rust is in your %PATH% system\n-variable. If it isn't, run the installer again, select \"Change\" on the \"Change,\n-repair, or remove installation\" page and ensure \"Add to PATH\" is installed on\n-the local hard drive.\n-\n-This installer also installs a copy of the documentation locally, so we can read\n-it offline. On UNIX systems, `/usr/local/share/doc/rust` is the location. On\n-Windows, it's in a `share/doc` directory, inside the directory to which Rust was\n-installed.\n-\n-If not, there are a number of places where we can get help. The easiest is\n-[the #rust IRC channel on irc.mozilla.org][irc], which we can access through\n-[Mibbit][mibbit]. Click that link, and we'll be chatting with other Rustaceans\n-(a silly nickname we call ourselves) who can help us out. Other great resources\n-include [the user\u2019s forum][users], and [Stack Overflow][stackoverflow].\n-\n-[irc]: irc://irc.mozilla.org/#rust\n-[mibbit]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust\n-[users]: https://users.rust-lang.org/\n-[stackoverflow]: http://stackoverflow.com/questions/tagged/rust"}, {"sha": "41c134b29f3d18109ba3089cd941ce6072c979d9", "filename": "src/doc/trpl/method-syntax.md", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2509948b3e4413d757424d6f544db1db2c05481a/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/2509948b3e4413d757424d6f544db1db2c05481a/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md?ref=2509948b3e4413d757424d6f544db1db2c05481a", "patch": "@@ -43,8 +43,6 @@ fn main() {\n \n This will print `12.566371`.\n \n-\n-\n We\u2019ve made a `struct` that represents a circle. We then write an `impl` block,\n and inside it, define a method, `area`.\n \n@@ -83,6 +81,35 @@ impl Circle {\n }\n ```\n \n+You can use as many `impl` blocks as you\u2019d like. The previous example could\n+have also been written like this:\n+\n+```rust\n+struct Circle {\n+    x: f64,\n+    y: f64,\n+    radius: f64,\n+}\n+\n+impl Circle {\n+    fn reference(&self) {\n+       println!(\"taking self by reference!\");\n+    }\n+}\n+\n+impl Circle {\n+    fn mutable_reference(&mut self) {\n+       println!(\"taking self by mutable reference!\");\n+    }\n+}\n+\n+impl Circle {\n+    fn takes_ownership(self) {\n+       println!(\"taking ownership of self!\");\n+    }\n+}\n+```\n+\n # Chaining method calls\n \n So, now we know how to call a method, such as `foo.bar()`. But what about our"}, {"sha": "869e7a0b38393d6cfce153269a87dfb9c8396124", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2509948b3e4413d757424d6f544db1db2c05481a/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2509948b3e4413d757424d6f544db1db2c05481a/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=2509948b3e4413d757424d6f544db1db2c05481a", "patch": "@@ -732,6 +732,8 @@ impl<T> [T] {\n     ///\n     /// This is equivalent to `self.sort_by(|a, b| a.cmp(b))`.\n     ///\n+    /// This is a stable sort.\n+    ///\n     /// # Examples\n     ///\n     /// ```rust"}, {"sha": "9b260b57099bb74adc6d26051de463139358b9e6", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2509948b3e4413d757424d6f544db1db2c05481a/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2509948b3e4413d757424d6f544db1db2c05481a/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=2509948b3e4413d757424d6f544db1db2c05481a", "patch": "@@ -1565,6 +1565,8 @@ pub trait Iterator {\n     /// as soon as it finds a `false`, given that no matter what else happens,\n     /// the result will also be `false`.\n     ///\n+    /// An empty iterator returns `true`.\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1613,6 +1615,8 @@ pub trait Iterator {\n     /// as soon as it finds a `true`, given that no matter what else happens,\n     /// the result will also be `true`.\n     ///\n+    /// An empty iterator returns `false`.\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2071,6 +2075,8 @@ pub trait Iterator {\n     ///\n     /// Takes each element, adds them together, and returns the result.\n     ///\n+    /// An empty iterator returns the zero value of the type.\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2094,6 +2100,8 @@ pub trait Iterator {\n \n     /// Iterates over the entire iterator, multiplying all the elements\n     ///\n+    /// An empty iterator returns the one value of the type.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "965226f6355c23e7bdd0e432bb1ca685d669ea1f", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2509948b3e4413d757424d6f544db1db2c05481a/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2509948b3e4413d757424d6f544db1db2c05481a/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=2509948b3e4413d757424d6f544db1db2c05481a", "patch": "@@ -601,6 +601,9 @@ impl<K, V, S> HashMap<K, V, S>\n \n     /// Returns the number of elements the map can hold without reallocating.\n     ///\n+    /// This number is a lower bound; the `HashMap<K, V>` might be able to hold\n+    /// more, but is guaranteed to be able to hold at least this many.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "f525274a1dfca6dcb34cbe2b6bf792780be8f80e", "filename": "src/test/run-pass/issue-24954.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2509948b3e4413d757424d6f544db1db2c05481a/src%2Ftest%2Frun-pass%2Fissue-24954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2509948b3e4413d757424d6f544db1db2c05481a/src%2Ftest%2Frun-pass%2Fissue-24954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-24954.rs?ref=2509948b3e4413d757424d6f544db1db2c05481a", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! foo {\n+    ($y:expr) => ({\n+        $y = 2;\n+    })\n+}\n+\n+#[allow(unused_variables)]\n+#[allow(unused_assignments)]\n+fn main() {\n+    let mut x = 1;\n+    foo!(x);\n+}"}]}