{"sha": "9451d9f05b035dea9795bb35a72e4bb8841066ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NTFkOWYwNWIwMzVkZWE5Nzk1YmIzNWE3MmU0YmI4ODQxMDY2YWM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-03T16:10:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-03T16:10:55Z"}, "message": "Merge #3424\n\n3424: Highlight assist tests r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "605a9e4e9b3f9bde6f3b8229f7a01c4fb7735748", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/605a9e4e9b3f9bde6f3b8229f7a01c4fb7735748"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9451d9f05b035dea9795bb35a72e4bb8841066ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeXoGPCRBK7hj4Ov3rIwAAdHIIAEbcl+MJas4McWTphgF5syrm\n0n4nXSRMZCbcqw9jkW0ATPwagBk9NjQtdumCYbiHFQtEszBfmlyNwlk52eKwMXDm\nc6MsfWppeeWeZD7lzmcf1SV9HOgKiFVJFYP1ytq0hP4Rq6qy7gMPbJKdQ0Hce2bt\nbNqlo50M3HHGcpNv0vw6HVOXqQXA+cBs2q7pH8vUIfeaIIvVgcX5SnrBoaouPupb\nm+aQ0u9qM5SMAj4TOWB9vOgSuQJutafBG6OwrGeHCpLkZlWDFZOqoxMC2TlPlkIZ\n8m0O09WQrbNnFahLF4KbvJ9bVNPX+BRd9vcZhYoNuoqehI/5zh2kDmac0P32rI8=\n=aBvp\n-----END PGP SIGNATURE-----\n", "payload": "tree 605a9e4e9b3f9bde6f3b8229f7a01c4fb7735748\nparent 077f8ac02cc732e2e14592fd48891c2a1eabbc25\nparent cf0ececb7aa93d5538a7688d825201327335132e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1583251855 +0000\ncommitter GitHub <noreply@github.com> 1583251855 +0000\n\nMerge #3424\n\n3424: Highlight assist tests r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9451d9f05b035dea9795bb35a72e4bb8841066ac", "html_url": "https://github.com/rust-lang/rust/commit/9451d9f05b035dea9795bb35a72e4bb8841066ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9451d9f05b035dea9795bb35a72e4bb8841066ac/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "077f8ac02cc732e2e14592fd48891c2a1eabbc25", "url": "https://api.github.com/repos/rust-lang/rust/commits/077f8ac02cc732e2e14592fd48891c2a1eabbc25", "html_url": "https://github.com/rust-lang/rust/commit/077f8ac02cc732e2e14592fd48891c2a1eabbc25"}, {"sha": "cf0ececb7aa93d5538a7688d825201327335132e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf0ececb7aa93d5538a7688d825201327335132e", "html_url": "https://github.com/rust-lang/rust/commit/cf0ececb7aa93d5538a7688d825201327335132e"}], "stats": {"total": 142, "additions": 85, "deletions": 57}, "files": [{"sha": "eb5112343ca92687a65b9804c1cd2aeaa6b1a6d2", "filename": "crates/ra_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 72, "deletions": 50, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/9451d9f05b035dea9795bb35a72e4bb8841066ac/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9451d9f05b035dea9795bb35a72e4bb8841066ac/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=9451d9f05b035dea9795bb35a72e4bb8841066ac", "patch": "@@ -2,9 +2,9 @@ use ra_syntax::{\n     ast::{self, AstNode, AstToken},\n     TextRange,\n };\n+use test_utils::tested_by;\n \n-use crate::assist_ctx::ActionBuilder;\n-use crate::{Assist, AssistCtx, AssistId};\n+use crate::{assist_ctx::ActionBuilder, Assist, AssistCtx, AssistId};\n \n // Assist: inline_local_variable\n //\n@@ -29,6 +29,11 @@ pub(crate) fn inline_local_variable(ctx: AssistCtx) -> Option<Assist> {\n         _ => return None,\n     };\n     if bind_pat.is_mutable() {\n+        tested_by!(test_not_inline_mut_variable);\n+        return None;\n+    }\n+    if !bind_pat.syntax().text_range().contains_inclusive(ctx.frange.range.start()) {\n+        tested_by!(not_applicable_outside_of_bind_pat);\n         return None;\n     }\n     let initializer_expr = let_stmt.initializer()?;\n@@ -111,6 +116,8 @@ pub(crate) fn inline_local_variable(ctx: AssistCtx) -> Option<Assist> {\n \n #[cfg(test)]\n mod tests {\n+    use test_utils::covers;\n+\n     use crate::helpers::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n@@ -119,7 +126,7 @@ mod tests {\n     fn test_inline_let_bind_literal_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn bar(a: usize) {}\n fn foo() {\n     let a<|> = 1;\n@@ -133,7 +140,7 @@ fn foo() {\n     let b = a * 10;\n     bar(a);\n }\",\n-            \"\n+            r\"\n fn bar(a: usize) {}\n fn foo() {\n     <|>1 + 1;\n@@ -153,7 +160,7 @@ fn foo() {\n     fn test_inline_let_bind_bin_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn bar(a: usize) {}\n fn foo() {\n     let a<|> = 1 + 1;\n@@ -167,7 +174,7 @@ fn foo() {\n     let b = a * 10;\n     bar(a);\n }\",\n-            \"\n+            r\"\n fn bar(a: usize) {}\n fn foo() {\n     <|>(1 + 1) + 1;\n@@ -187,7 +194,7 @@ fn foo() {\n     fn test_inline_let_bind_function_call_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn bar(a: usize) {}\n fn foo() {\n     let a<|> = bar(1);\n@@ -201,7 +208,7 @@ fn foo() {\n     let b = a * 10;\n     bar(a);\n }\",\n-            \"\n+            r\"\n fn bar(a: usize) {}\n fn foo() {\n     <|>bar(1) + 1;\n@@ -221,7 +228,7 @@ fn foo() {\n     fn test_inline_let_bind_cast_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn bar(a: usize): usize { a }\n fn foo() {\n     let a<|> = bar(1) as u64;\n@@ -235,7 +242,7 @@ fn foo() {\n     let b = a * 10;\n     bar(a);\n }\",\n-            \"\n+            r\"\n fn bar(a: usize): usize { a }\n fn foo() {\n     <|>(bar(1) as u64) + 1;\n@@ -255,7 +262,7 @@ fn foo() {\n     fn test_inline_let_bind_block_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = { 10 + 1 };\n     a + 1;\n@@ -268,7 +275,7 @@ fn foo() {\n     let b = a * 10;\n     bar(a);\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>{ 10 + 1 } + 1;\n     if { 10 + 1 } > 10 {\n@@ -287,7 +294,7 @@ fn foo() {\n     fn test_inline_let_bind_paren_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = ( 10 + 1 );\n     a + 1;\n@@ -300,7 +307,7 @@ fn foo() {\n     let b = a * 10;\n     bar(a);\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>( 10 + 1 ) + 1;\n     if ( 10 + 1 ) > 10 {\n@@ -317,9 +324,10 @@ fn foo() {\n \n     #[test]\n     fn test_not_inline_mut_variable() {\n+        covers!(test_not_inline_mut_variable);\n         check_assist_not_applicable(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let mut a<|> = 1 + 1;\n     a + 1;\n@@ -331,13 +339,13 @@ fn foo() {\n     fn test_call_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = bar(10 + 1);\n     let b = a * 10;\n     let c = a as usize;\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>let b = bar(10 + 1) * 10;\n     let c = bar(10 + 1) as usize;\n@@ -349,14 +357,14 @@ fn foo() {\n     fn test_index_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let x = vec![1, 2, 3];\n     let a<|> = x[0];\n     let b = a * 10;\n     let c = a as usize;\n }\",\n-            \"\n+            r\"\n fn foo() {\n     let x = vec![1, 2, 3];\n     <|>let b = x[0] * 10;\n@@ -369,14 +377,14 @@ fn foo() {\n     fn test_method_call_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let bar = vec![1];\n     let a<|> = bar.len();\n     let b = a * 10;\n     let c = a as usize;\n }\",\n-            \"\n+            r\"\n fn foo() {\n     let bar = vec![1];\n     <|>let b = bar.len() * 10;\n@@ -389,7 +397,7 @@ fn foo() {\n     fn test_field_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n struct Bar {\n     foo: usize\n }\n@@ -400,7 +408,7 @@ fn foo() {\n     let b = a * 10;\n     let c = a as usize;\n }\",\n-            \"\n+            r\"\n struct Bar {\n     foo: usize\n }\n@@ -417,15 +425,15 @@ fn foo() {\n     fn test_try_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() -> Option<usize> {\n     let bar = Some(1);\n     let a<|> = bar?;\n     let b = a * 10;\n     let c = a as usize;\n     None\n }\",\n-            \"\n+            r\"\n fn foo() -> Option<usize> {\n     let bar = Some(1);\n     <|>let b = bar? * 10;\n@@ -439,13 +447,13 @@ fn foo() -> Option<usize> {\n     fn test_ref_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let bar = 10;\n     let a<|> = &bar;\n     let b = a * 10;\n }\",\n-            \"\n+            r\"\n fn foo() {\n     let bar = 10;\n     <|>let b = &bar * 10;\n@@ -457,12 +465,12 @@ fn foo() {\n     fn test_tuple_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = (10, 20);\n     let b = a[0];\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>let b = (10, 20)[0];\n }\",\n@@ -473,12 +481,12 @@ fn foo() {\n     fn test_array_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = [1, 2, 3];\n     let b = a.len();\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>let b = [1, 2, 3].len();\n }\",\n@@ -489,13 +497,13 @@ fn foo() {\n     fn test_paren() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = (10 + 20);\n     let b = a * 10;\n     let c = a as usize;\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>let b = (10 + 20) * 10;\n     let c = (10 + 20) as usize;\n@@ -507,14 +515,14 @@ fn foo() {\n     fn test_path_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let d = 10;\n     let a<|> = d;\n     let b = a * 10;\n     let c = a as usize;\n }\",\n-            \"\n+            r\"\n fn foo() {\n     let d = 10;\n     <|>let b = d * 10;\n@@ -527,13 +535,13 @@ fn foo() {\n     fn test_block_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = { 10 };\n     let b = a * 10;\n     let c = a as usize;\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>let b = { 10 } * 10;\n     let c = { 10 } as usize;\n@@ -545,15 +553,15 @@ fn foo() {\n     fn test_used_in_different_expr1() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = 10 + 20;\n     let b = a * 10;\n     let c = (a, 20);\n     let d = [a, 10];\n     let e = (a);\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>let b = (10 + 20) * 10;\n     let c = (10 + 20, 20);\n@@ -567,12 +575,12 @@ fn foo() {\n     fn test_used_in_for_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = vec![10, 20];\n     for i in a {}\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>for i in vec![10, 20] {}\n }\",\n@@ -583,12 +591,12 @@ fn foo() {\n     fn test_used_in_while_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = 1 > 0;\n     while a {}\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>while 1 > 0 {}\n }\",\n@@ -599,14 +607,14 @@ fn foo() {\n     fn test_used_in_break_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = 1 + 1;\n     loop {\n         break a;\n     }\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>loop {\n         break 1 + 1;\n@@ -619,12 +627,12 @@ fn foo() {\n     fn test_used_in_return_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = 1 > 0;\n     return a;\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>return 1 > 0;\n }\",\n@@ -635,12 +643,12 @@ fn foo() {\n     fn test_used_in_match_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = 1 > 0;\n     match a {}\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>match 1 > 0 {}\n }\",\n@@ -651,11 +659,25 @@ fn foo() {\n     fn test_not_applicable_if_variable_unused() {\n         check_assist_not_applicable(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let <|>a = 0;\n }\n             \",\n         )\n     }\n+\n+    #[test]\n+    fn not_applicable_outside_of_bind_pat() {\n+        covers!(not_applicable_outside_of_bind_pat);\n+        check_assist_not_applicable(\n+            inline_local_variable,\n+            r\"\n+fn main() {\n+    let x = <|>1 + 2;\n+    x * 4;\n+}\n+\",\n+        )\n+    }\n }"}, {"sha": "50a15f9786095e894b2a717c3780d74250f97c8c", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9451d9f05b035dea9795bb35a72e4bb8841066ac/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9451d9f05b035dea9795bb35a72e4bb8841066ac/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=9451d9f05b035dea9795bb35a72e4bb8841066ac", "patch": "@@ -178,19 +178,23 @@ mod helpers {\n         (db, file_id)\n     }\n \n-    pub(crate) fn check_assist(assist: AssistHandler, before: &str, after: &str) {\n-        check(assist, before, ExpectedResult::After(after));\n+    pub(crate) fn check_assist(\n+        assist: AssistHandler,\n+        ra_fixture_before: &str,\n+        ra_fixture_after: &str,\n+    ) {\n+        check(assist, ra_fixture_before, ExpectedResult::After(ra_fixture_after));\n     }\n \n     // FIXME: instead of having a separate function here, maybe use\n     // `extract_ranges` and mark the target as `<target> </target>` in the\n     // fixuture?\n-    pub(crate) fn check_assist_target(assist: AssistHandler, before: &str, target: &str) {\n-        check(assist, before, ExpectedResult::Target(target));\n+    pub(crate) fn check_assist_target(assist: AssistHandler, ra_fixture: &str, target: &str) {\n+        check(assist, ra_fixture, ExpectedResult::Target(target));\n     }\n \n-    pub(crate) fn check_assist_not_applicable(assist: AssistHandler, before: &str) {\n-        check(assist, before, ExpectedResult::NotApplicable);\n+    pub(crate) fn check_assist_not_applicable(assist: AssistHandler, ra_fixture: &str) {\n+        check(assist, ra_fixture, ExpectedResult::NotApplicable);\n     }\n \n     enum ExpectedResult<'a> {"}, {"sha": "cef3df4e5af22d21f980fd5a5d7d91960596ac42", "filename": "crates/ra_assists/src/marks.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9451d9f05b035dea9795bb35a72e4bb8841066ac/crates%2Fra_assists%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9451d9f05b035dea9795bb35a72e4bb8841066ac/crates%2Fra_assists%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fmarks.rs?ref=9451d9f05b035dea9795bb35a72e4bb8841066ac", "patch": "@@ -4,4 +4,6 @@ test_utils::marks!(\n     introduce_var_in_comment_is_not_applicable\n     test_introduce_var_expr_stmt\n     test_introduce_var_last_expr\n+    not_applicable_outside_of_bind_pat\n+    test_not_inline_mut_variable\n );"}, {"sha": "7e41db5301f0f05eb439bb443293cfe7f3e11a91", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9451d9f05b035dea9795bb35a72e4bb8841066ac/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9451d9f05b035dea9795bb35a72e4bb8841066ac/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=9451d9f05b035dea9795bb35a72e4bb8841066ac", "patch": "@@ -320,7 +320,7 @@ fn highlight_injection(\n     let call_info = call_info_for_token(&sema, expanded)?;\n     let idx = call_info.active_parameter?;\n     let name = call_info.signature.parameter_names.get(idx)?;\n-    if name != \"ra_fixture\" {\n+    if !name.starts_with(\"ra_fixture\") {\n         return None;\n     }\n     let value = literal.value()?;"}]}