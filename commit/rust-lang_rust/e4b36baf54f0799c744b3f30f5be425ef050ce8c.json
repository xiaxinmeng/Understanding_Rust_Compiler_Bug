{"sha": "e4b36baf54f0799c744b3f30f5be425ef050ce8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0YjM2YmFmNTRmMDc5OWM3NDRiM2YzMGY1YmU0MjVlZjA1MGNlOGM=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-03-20T01:46:27Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-03-22T23:45:27Z"}, "message": "Remove an unnecessary block scope.", "tree": {"sha": "c8d34f6e51a62acee928fce989f9f649512db964", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8d34f6e51a62acee928fce989f9f649512db964"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4b36baf54f0799c744b3f30f5be425ef050ce8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b36baf54f0799c744b3f30f5be425ef050ce8c", "html_url": "https://github.com/rust-lang/rust/commit/e4b36baf54f0799c744b3f30f5be425ef050ce8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4b36baf54f0799c744b3f30f5be425ef050ce8c/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47c8f3f56babf7830c481cb679f81466c351db7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/47c8f3f56babf7830c481cb679f81466c351db7b", "html_url": "https://github.com/rust-lang/rust/commit/47c8f3f56babf7830c481cb679f81466c351db7b"}], "stats": {"total": 168, "additions": 79, "deletions": 89}, "files": [{"sha": "2826de1e490d234e0d556c8f98af7fa20e411447", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 79, "deletions": 89, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/e4b36baf54f0799c744b3f30f5be425ef050ce8c/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b36baf54f0799c744b3f30f5be425ef050ce8c/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=e4b36baf54f0799c744b3f30f5be425ef050ce8c", "patch": "@@ -686,100 +686,90 @@ pub(crate) unsafe fn codegen(\n             embed_bitcode(cgcx, llcx, llmod, None);\n         }\n \n-        {\n-            if config.emit_ir {\n-                let _timer = cgcx\n-                    .prof\n-                    .generic_activity_with_arg(\"LLVM_module_codegen_emit_ir\", &module.name[..]);\n-                let out = cgcx.output_filenames.temp_path(OutputType::LlvmAssembly, module_name);\n-                let out_c = path_to_c_string(&out);\n-\n-                extern \"C\" fn demangle_callback(\n-                    input_ptr: *const c_char,\n-                    input_len: size_t,\n-                    output_ptr: *mut c_char,\n-                    output_len: size_t,\n-                ) -> size_t {\n-                    let input = unsafe {\n-                        slice::from_raw_parts(input_ptr as *const u8, input_len as usize)\n-                    };\n-\n-                    let input = match str::from_utf8(input) {\n-                        Ok(s) => s,\n-                        Err(_) => return 0,\n-                    };\n-\n-                    let output = unsafe {\n-                        slice::from_raw_parts_mut(output_ptr as *mut u8, output_len as usize)\n-                    };\n-                    let mut cursor = io::Cursor::new(output);\n-\n-                    let demangled = match rustc_demangle::try_demangle(input) {\n-                        Ok(d) => d,\n-                        Err(_) => return 0,\n-                    };\n-\n-                    if write!(cursor, \"{:#}\", demangled).is_err() {\n-                        // Possible only if provided buffer is not big enough\n-                        return 0;\n-                    }\n-\n-                    cursor.position() as size_t\n+        if config.emit_ir {\n+            let _timer = cgcx\n+                .prof\n+                .generic_activity_with_arg(\"LLVM_module_codegen_emit_ir\", &module.name[..]);\n+            let out = cgcx.output_filenames.temp_path(OutputType::LlvmAssembly, module_name);\n+            let out_c = path_to_c_string(&out);\n+\n+            extern \"C\" fn demangle_callback(\n+                input_ptr: *const c_char,\n+                input_len: size_t,\n+                output_ptr: *mut c_char,\n+                output_len: size_t,\n+            ) -> size_t {\n+                let input =\n+                    unsafe { slice::from_raw_parts(input_ptr as *const u8, input_len as usize) };\n+\n+                let input = match str::from_utf8(input) {\n+                    Ok(s) => s,\n+                    Err(_) => return 0,\n+                };\n+\n+                let output = unsafe {\n+                    slice::from_raw_parts_mut(output_ptr as *mut u8, output_len as usize)\n+                };\n+                let mut cursor = io::Cursor::new(output);\n+\n+                let demangled = match rustc_demangle::try_demangle(input) {\n+                    Ok(d) => d,\n+                    Err(_) => return 0,\n+                };\n+\n+                if write!(cursor, \"{:#}\", demangled).is_err() {\n+                    // Possible only if provided buffer is not big enough\n+                    return 0;\n                 }\n \n-                let result = llvm::LLVMRustPrintModule(llmod, out_c.as_ptr(), demangle_callback);\n-                result.into_result().map_err(|()| {\n-                    let msg = format!(\"failed to write LLVM IR to {}\", out.display());\n-                    llvm_err(diag_handler, &msg)\n-                })?;\n+                cursor.position() as size_t\n             }\n \n-            if config.emit_asm || (config.emit_obj && config.no_integrated_as) {\n-                let _timer = cgcx\n-                    .prof\n-                    .generic_activity_with_arg(\"LLVM_module_codegen_emit_asm\", &module.name[..]);\n-                let path = cgcx.output_filenames.temp_path(OutputType::Assembly, module_name);\n-\n-                // We can't use the same module for asm and binary output, because that triggers\n-                // various errors like invalid IR or broken binaries, so we might have to clone the\n-                // module to produce the asm output\n-                let llmod = if config.emit_obj { llvm::LLVMCloneModule(llmod) } else { llmod };\n-                with_codegen(tm, llmod, config.no_builtins, |cpm| {\n-                    write_output_file(\n-                        diag_handler,\n-                        tm,\n-                        cpm,\n-                        llmod,\n-                        &path,\n-                        llvm::FileType::AssemblyFile,\n-                    )\n-                })?;\n-            }\n+            let result = llvm::LLVMRustPrintModule(llmod, out_c.as_ptr(), demangle_callback);\n+            result.into_result().map_err(|()| {\n+                let msg = format!(\"failed to write LLVM IR to {}\", out.display());\n+                llvm_err(diag_handler, &msg)\n+            })?;\n+        }\n \n-            if config.emit_obj && !config.obj_is_bitcode && !config.no_integrated_as {\n-                let _timer = cgcx\n-                    .prof\n-                    .generic_activity_with_arg(\"LLVM_module_codegen_emit_obj\", &module.name[..]);\n-                with_codegen(tm, llmod, config.no_builtins, |cpm| {\n-                    write_output_file(\n-                        diag_handler,\n-                        tm,\n-                        cpm,\n-                        llmod,\n-                        &obj_out,\n-                        llvm::FileType::ObjectFile,\n-                    )\n-                })?;\n-            } else if config.emit_obj && config.no_integrated_as {\n-                let _timer = cgcx\n-                    .prof\n-                    .generic_activity_with_arg(\"LLVM_module_codegen_asm_to_obj\", &module.name[..]);\n-                let assembly = cgcx.output_filenames.temp_path(OutputType::Assembly, module_name);\n-                run_assembler(cgcx, diag_handler, &assembly, &obj_out);\n-\n-                if !config.emit_asm && !cgcx.save_temps {\n-                    drop(fs::remove_file(&assembly));\n-                }\n+        if config.emit_asm || (config.emit_obj && config.no_integrated_as) {\n+            let _timer = cgcx\n+                .prof\n+                .generic_activity_with_arg(\"LLVM_module_codegen_emit_asm\", &module.name[..]);\n+            let path = cgcx.output_filenames.temp_path(OutputType::Assembly, module_name);\n+\n+            // We can't use the same module for asm and binary output, because that triggers\n+            // various errors like invalid IR or broken binaries, so we might have to clone the\n+            // module to produce the asm output\n+            let llmod = if config.emit_obj { llvm::LLVMCloneModule(llmod) } else { llmod };\n+            with_codegen(tm, llmod, config.no_builtins, |cpm| {\n+                write_output_file(diag_handler, tm, cpm, llmod, &path, llvm::FileType::AssemblyFile)\n+            })?;\n+        }\n+\n+        if config.emit_obj && !config.obj_is_bitcode && !config.no_integrated_as {\n+            let _timer = cgcx\n+                .prof\n+                .generic_activity_with_arg(\"LLVM_module_codegen_emit_obj\", &module.name[..]);\n+            with_codegen(tm, llmod, config.no_builtins, |cpm| {\n+                write_output_file(\n+                    diag_handler,\n+                    tm,\n+                    cpm,\n+                    llmod,\n+                    &obj_out,\n+                    llvm::FileType::ObjectFile,\n+                )\n+            })?;\n+        } else if config.emit_obj && config.no_integrated_as {\n+            let _timer = cgcx\n+                .prof\n+                .generic_activity_with_arg(\"LLVM_module_codegen_asm_to_obj\", &module.name[..]);\n+            let assembly = cgcx.output_filenames.temp_path(OutputType::Assembly, module_name);\n+            run_assembler(cgcx, diag_handler, &assembly, &obj_out);\n+\n+            if !config.emit_asm && !cgcx.save_temps {\n+                drop(fs::remove_file(&assembly));\n             }\n         }\n "}]}