{"sha": "003a2119e7ffe70ee341ebc2bde3866783db8d9d", "node_id": "C_kwDOAAsO6NoAKDAwM2EyMTE5ZTdmZmU3MGVlMzQxZWJjMmJkZTM4NjY3ODNkYjhkOWQ", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2023-02-28T03:01:12Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2023-02-28T03:06:36Z"}, "message": "Improve diagnostic of `no_mangle_with_rust_abi`", "tree": {"sha": "c8b4206ced6661ba71ee5732deea8f5b396c2d1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8b4206ced6661ba71ee5732deea8f5b396c2d1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/003a2119e7ffe70ee341ebc2bde3866783db8d9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/003a2119e7ffe70ee341ebc2bde3866783db8d9d", "html_url": "https://github.com/rust-lang/rust/commit/003a2119e7ffe70ee341ebc2bde3866783db8d9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/003a2119e7ffe70ee341ebc2bde3866783db8d9d/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b65632b6ef737979d42f83664271d6baa8c0270", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b65632b6ef737979d42f83664271d6baa8c0270", "html_url": "https://github.com/rust-lang/rust/commit/8b65632b6ef737979d42f83664271d6baa8c0270"}], "stats": {"total": 152, "additions": 71, "deletions": 81}, "files": [{"sha": "8fd9ae351a0d708695b0e46fc160569805dd888d", "filename": "clippy_lints/src/no_mangle_with_rust_abi.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/003a2119e7ffe70ee341ebc2bde3866783db8d9d/clippy_lints%2Fsrc%2Fno_mangle_with_rust_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003a2119e7ffe70ee341ebc2bde3866783db8d9d/clippy_lints%2Fsrc%2Fno_mangle_with_rust_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_mangle_with_rust_abi.rs?ref=003a2119e7ffe70ee341ebc2bde3866783db8d9d", "patch": "@@ -1,9 +1,10 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{BytePos, Pos};\n use rustc_target::spec::abi::Abi;\n \n declare_clippy_lint! {\n@@ -38,25 +39,28 @@ impl<'tcx> LateLintPass<'tcx> for NoMangleWithRustAbi {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         if let ItemKind::Fn(fn_sig, _, _) = &item.kind {\n             let attrs = cx.tcx.hir().attrs(item.hir_id());\n-            let mut applicability = Applicability::MachineApplicable;\n-            let snippet = snippet_with_applicability(cx, fn_sig.span, \"..\", &mut applicability);\n+            let mut app = Applicability::MaybeIncorrect;\n+            let snippet = snippet_with_applicability(cx, fn_sig.span, \"..\", &mut app);\n             for attr in attrs {\n                 if let Some(ident) = attr.ident()\n                     && ident.name == rustc_span::sym::no_mangle\n                     && fn_sig.header.abi == Abi::Rust\n-                    && !snippet.contains(\"extern\") {\n+                    && let Some((fn_attrs, _)) = snippet.split_once(\"fn\")\n+                    && !fn_attrs.contains(\"extern\")\n+                {\n+                    let sugg_span = fn_sig.span\n+                        .with_lo(fn_sig.span.lo() + BytePos::from_usize(fn_attrs.len()))\n+                        .shrink_to_lo();\n \n-                    let suggestion = snippet.split_once(\"fn\")\n-                        .map_or(String::new(), |(first, second)| format!(r#\"{first}extern \"C\" fn{second}\"#));\n-\n-                    span_lint_and_sugg(\n+                    span_lint_and_then(\n                         cx,\n                         NO_MANGLE_WITH_RUST_ABI,\n                         fn_sig.span,\n-                        \"attribute #[no_mangle] set on a Rust ABI function\",\n-                        \"try\",\n-                        suggestion,\n-                        applicability\n+                        \"`#[no_mangle]` set on a function with the default (`Rust`) ABI\",\n+                        |diag| {\n+                            diag.span_suggestion(sugg_span, \"set an ABI\", \"extern \\\"C\\\" \", app)\n+                                .span_suggestion(sugg_span, \"or explicitly set the default\", \"extern \\\"Rust\\\" \", app);\n+                        },\n                     );\n                 }\n             }"}, {"sha": "d18dec22a8bbe1a1449689599165e7484a48c6fa", "filename": "tests/ui/no_mangle_with_rust_abi.fixed", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8b65632b6ef737979d42f83664271d6baa8c0270/tests%2Fui%2Fno_mangle_with_rust_abi.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8b65632b6ef737979d42f83664271d6baa8c0270/tests%2Fui%2Fno_mangle_with_rust_abi.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_mangle_with_rust_abi.fixed?ref=8b65632b6ef737979d42f83664271d6baa8c0270", "patch": "@@ -1,48 +0,0 @@\n-// run-rustfix\n-\n-#![allow(unused)]\n-#![warn(clippy::no_mangle_with_rust_abi)]\n-\n-#[no_mangle]\n-extern \"C\" fn rust_abi_fn_one(arg_one: u32, arg_two: usize) {}\n-\n-#[no_mangle]\n-pub extern \"C\" fn rust_abi_fn_two(arg_one: u32, arg_two: usize) {}\n-\n-/// # Safety\n-/// This function shouldn't be called unless the horsemen are ready\n-#[no_mangle]\n-pub unsafe extern \"C\" fn rust_abi_fn_three(arg_one: u32, arg_two: usize) {}\n-\n-/// # Safety\n-/// This function shouldn't be called unless the horsemen are ready\n-#[no_mangle]\n-unsafe extern \"C\" fn rust_abi_fn_four(arg_one: u32, arg_two: usize) {}\n-\n-#[no_mangle]\n-extern \"C\" fn rust_abi_multiline_function_really_long_name_to_overflow_args_to_multiple_lines(\n-    arg_one: u32,\n-    arg_two: usize,\n-) -> u32 {\n-    0\n-}\n-\n-// Must not run on functions that explicitly opt in to Rust ABI with `extern \"Rust\"`\n-#[no_mangle]\n-#[rustfmt::skip]\n-extern \"Rust\" fn rust_abi_fn_explicit_opt_in(arg_one: u32, arg_two: usize) {}\n-\n-fn rust_abi_fn_again(arg_one: u32, arg_two: usize) {}\n-\n-#[no_mangle]\n-extern \"C\" fn c_abi_fn(arg_one: u32, arg_two: usize) {}\n-\n-extern \"C\" fn c_abi_fn_again(arg_one: u32, arg_two: usize) {}\n-\n-extern \"C\" {\n-    fn c_abi_in_block(arg_one: u32, arg_two: usize);\n-}\n-\n-fn main() {\n-    // test code goes here\n-}"}, {"sha": "b32e721110e0b924da38d15a446420d48e8fa17d", "filename": "tests/ui/no_mangle_with_rust_abi.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003a2119e7ffe70ee341ebc2bde3866783db8d9d/tests%2Fui%2Fno_mangle_with_rust_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003a2119e7ffe70ee341ebc2bde3866783db8d9d/tests%2Fui%2Fno_mangle_with_rust_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_mangle_with_rust_abi.rs?ref=003a2119e7ffe70ee341ebc2bde3866783db8d9d", "patch": "@@ -1,5 +1,3 @@\n-// run-rustfix\n-\n #![allow(unused)]\n #![warn(clippy::no_mangle_with_rust_abi)]\n "}, {"sha": "da5d31d8f2d4c377b781d9670914fd91ad28b5ec", "filename": "tests/ui/no_mangle_with_rust_abi.stderr", "status": "modified", "additions": 55, "deletions": 19, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/003a2119e7ffe70ee341ebc2bde3866783db8d9d/tests%2Fui%2Fno_mangle_with_rust_abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003a2119e7ffe70ee341ebc2bde3866783db8d9d/tests%2Fui%2Fno_mangle_with_rust_abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_mangle_with_rust_abi.stderr?ref=003a2119e7ffe70ee341ebc2bde3866783db8d9d", "patch": "@@ -1,45 +1,81 @@\n-error: attribute #[no_mangle] set on a Rust ABI function\n-  --> $DIR/no_mangle_with_rust_abi.rs:7:1\n+error: `#[no_mangle]` set on a function with the default (`Rust`) ABI\n+  --> $DIR/no_mangle_with_rust_abi.rs:5:1\n    |\n LL | fn rust_abi_fn_one(arg_one: u32, arg_two: usize) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `extern \"C\" fn rust_abi_fn_one(arg_one: u32, arg_two: usize)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::no-mangle-with-rust-abi` implied by `-D warnings`\n+help: set an ABI\n+   |\n+LL | extern \"C\" fn rust_abi_fn_one(arg_one: u32, arg_two: usize) {}\n+   | ++++++++++\n+help: or explicitly set the default\n+   |\n+LL | extern \"Rust\" fn rust_abi_fn_one(arg_one: u32, arg_two: usize) {}\n+   | +++++++++++++\n \n-error: attribute #[no_mangle] set on a Rust ABI function\n-  --> $DIR/no_mangle_with_rust_abi.rs:10:1\n+error: `#[no_mangle]` set on a function with the default (`Rust`) ABI\n+  --> $DIR/no_mangle_with_rust_abi.rs:8:1\n    |\n LL | pub fn rust_abi_fn_two(arg_one: u32, arg_two: usize) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `pub extern \"C\" fn rust_abi_fn_two(arg_one: u32, arg_two: usize)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: set an ABI\n+   |\n+LL | pub extern \"C\" fn rust_abi_fn_two(arg_one: u32, arg_two: usize) {}\n+   |     ++++++++++\n+help: or explicitly set the default\n+   |\n+LL | pub extern \"Rust\" fn rust_abi_fn_two(arg_one: u32, arg_two: usize) {}\n+   |     +++++++++++++\n \n-error: attribute #[no_mangle] set on a Rust ABI function\n-  --> $DIR/no_mangle_with_rust_abi.rs:15:1\n+error: `#[no_mangle]` set on a function with the default (`Rust`) ABI\n+  --> $DIR/no_mangle_with_rust_abi.rs:13:1\n    |\n LL | pub unsafe fn rust_abi_fn_three(arg_one: u32, arg_two: usize) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `pub unsafe extern \"C\" fn rust_abi_fn_three(arg_one: u32, arg_two: usize)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: set an ABI\n+   |\n+LL | pub unsafe extern \"C\" fn rust_abi_fn_three(arg_one: u32, arg_two: usize) {}\n+   |            ++++++++++\n+help: or explicitly set the default\n+   |\n+LL | pub unsafe extern \"Rust\" fn rust_abi_fn_three(arg_one: u32, arg_two: usize) {}\n+   |            +++++++++++++\n \n-error: attribute #[no_mangle] set on a Rust ABI function\n-  --> $DIR/no_mangle_with_rust_abi.rs:20:1\n+error: `#[no_mangle]` set on a function with the default (`Rust`) ABI\n+  --> $DIR/no_mangle_with_rust_abi.rs:18:1\n    |\n LL | unsafe fn rust_abi_fn_four(arg_one: u32, arg_two: usize) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `unsafe extern \"C\" fn rust_abi_fn_four(arg_one: u32, arg_two: usize)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: set an ABI\n+   |\n+LL | unsafe extern \"C\" fn rust_abi_fn_four(arg_one: u32, arg_two: usize) {}\n+   |        ++++++++++\n+help: or explicitly set the default\n+   |\n+LL | unsafe extern \"Rust\" fn rust_abi_fn_four(arg_one: u32, arg_two: usize) {}\n+   |        +++++++++++++\n \n-error: attribute #[no_mangle] set on a Rust ABI function\n-  --> $DIR/no_mangle_with_rust_abi.rs:23:1\n+error: `#[no_mangle]` set on a function with the default (`Rust`) ABI\n+  --> $DIR/no_mangle_with_rust_abi.rs:21:1\n    |\n LL | / fn rust_abi_multiline_function_really_long_name_to_overflow_args_to_multiple_lines(\n LL | |     arg_one: u32,\n LL | |     arg_two: usize,\n LL | | ) -> u32 {\n    | |________^\n    |\n-help: try\n+help: set an ABI\n    |\n-LL + extern \"C\" fn rust_abi_multiline_function_really_long_name_to_overflow_args_to_multiple_lines(\n-LL +     arg_one: u32,\n-LL +     arg_two: usize,\n-LL ~ ) -> u32 {\n+LL | extern \"C\" fn rust_abi_multiline_function_really_long_name_to_overflow_args_to_multiple_lines(\n+   | ++++++++++\n+help: or explicitly set the default\n    |\n+LL | extern \"Rust\" fn rust_abi_multiline_function_really_long_name_to_overflow_args_to_multiple_lines(\n+   | +++++++++++++\n \n error: aborting due to 5 previous errors\n "}]}