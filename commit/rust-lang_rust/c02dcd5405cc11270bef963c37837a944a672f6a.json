{"sha": "c02dcd5405cc11270bef963c37837a944a672f6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMmRjZDU0MDVjYzExMjcwYmVmOTYzYzM3ODM3YTk0NGE2NzJmNmE=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-08-12T11:15:15Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-08-12T20:18:45Z"}, "message": "Update type UI tests to use private items", "tree": {"sha": "a2976cce333f6e856bd6a65c8d8a6917715488c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2976cce333f6e856bd6a65c8d8a6917715488c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c02dcd5405cc11270bef963c37837a944a672f6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c02dcd5405cc11270bef963c37837a944a672f6a", "html_url": "https://github.com/rust-lang/rust/commit/c02dcd5405cc11270bef963c37837a944a672f6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c02dcd5405cc11270bef963c37837a944a672f6a/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "206741bf57361efcd04243b9e2e6275701c15c76", "url": "https://api.github.com/repos/rust-lang/rust/commits/206741bf57361efcd04243b9e2e6275701c15c76", "html_url": "https://github.com/rust-lang/rust/commit/206741bf57361efcd04243b9e2e6275701c15c76"}], "stats": {"total": 139, "additions": 79, "deletions": 60}, "files": [{"sha": "1d6366972dacfb529ce1e2295934d95adab58878", "filename": "tests/ui/box_vec.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c02dcd5405cc11270bef963c37837a944a672f6a/tests%2Fui%2Fbox_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02dcd5405cc11270bef963c37837a944a672f6a/tests%2Fui%2Fbox_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.rs?ref=c02dcd5405cc11270bef963c37837a944a672f6a", "patch": "@@ -1,6 +1,10 @@\n #![warn(clippy::all)]\n-#![allow(clippy::boxed_local, clippy::needless_pass_by_value)]\n-#![allow(clippy::blacklisted_name)]\n+#![allow(\n+    clippy::boxed_local,\n+    clippy::needless_pass_by_value,\n+    clippy::blacklisted_name,\n+    unused\n+)]\n \n macro_rules! boxit {\n     ($init:expr, $x:ty) => {\n@@ -11,22 +15,22 @@ macro_rules! boxit {\n fn test_macro() {\n     boxit!(Vec::new(), Vec<u8>);\n }\n-pub fn test(foo: Box<Vec<bool>>) {\n-    println!(\"{:?}\", foo.get(0))\n-}\n+fn test(foo: Box<Vec<bool>>) {}\n \n-pub fn test2(foo: Box<dyn Fn(Vec<u32>)>) {\n+fn test2(foo: Box<dyn Fn(Vec<u32>)>) {\n     // pass if #31 is fixed\n     foo(vec![1, 2, 3])\n }\n \n-pub fn test_local_not_linted() {\n+fn test_local_not_linted() {\n     let _: Box<Vec<bool>>;\n }\n \n-fn main() {\n-    test(Box::new(Vec::new()));\n-    test2(Box::new(|v| println!(\"{:?}\", v)));\n-    test_macro();\n-    test_local_not_linted();\n+// All of these test should be allowed because they are part of the\n+// public api and `avoid_breaking_exported_api` is `false` by default.\n+pub fn pub_test(foo: Box<Vec<bool>>) {}\n+pub fn pub_test_ret() -> Box<Vec<bool>> {\n+    Box::new(Vec::new())\n }\n+\n+fn main() {}"}, {"sha": "58c1f13fb877b1ba77deda63048b0ed41bf36314", "filename": "tests/ui/box_vec.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c02dcd5405cc11270bef963c37837a944a672f6a/tests%2Fui%2Fbox_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c02dcd5405cc11270bef963c37837a944a672f6a/tests%2Fui%2Fbox_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.stderr?ref=c02dcd5405cc11270bef963c37837a944a672f6a", "patch": "@@ -1,8 +1,8 @@\n error: you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\n-  --> $DIR/box_vec.rs:14:18\n+  --> $DIR/box_vec.rs:18:14\n    |\n-LL | pub fn test(foo: Box<Vec<bool>>) {\n-   |                  ^^^^^^^^^^^^^^\n+LL | fn test(foo: Box<Vec<bool>>) {}\n+   |              ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::box-vec` implied by `-D warnings`\n    = help: `Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation"}, {"sha": "690ea810a6214072f1a1614304624f22cb30befc", "filename": "tests/ui/linkedlist.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c02dcd5405cc11270bef963c37837a944a672f6a/tests%2Fui%2Flinkedlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02dcd5405cc11270bef963c37837a944a672f6a/tests%2Fui%2Flinkedlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flinkedlist.rs?ref=c02dcd5405cc11270bef963c37837a944a672f6a", "patch": "@@ -1,6 +1,6 @@\n #![feature(associated_type_defaults)]\n #![warn(clippy::linkedlist)]\n-#![allow(dead_code, clippy::needless_pass_by_value)]\n+#![allow(unused, dead_code, clippy::needless_pass_by_value)]\n \n extern crate alloc;\n use alloc::collections::linked_list::LinkedList;\n@@ -20,24 +20,29 @@ impl Foo for LinkedList<u8> {\n     const BAR: Option<LinkedList<u8>> = None;\n }\n \n-struct Bar;\n+pub struct Bar {\n+    priv_linked_list_field: LinkedList<u8>,\n+    pub pub_linked_list_field: LinkedList<u8>,\n+}\n impl Bar {\n     fn foo(_: LinkedList<u8>) {}\n }\n \n-pub fn test(my_favourite_linked_list: LinkedList<u8>) {\n-    println!(\"{:?}\", my_favourite_linked_list)\n-}\n-\n-pub fn test_ret() -> Option<LinkedList<u8>> {\n-    unimplemented!();\n+// All of these test should be trigger the lint because they are not\n+// part of the public api\n+fn test(my_favorite_linked_list: LinkedList<u8>) {}\n+fn test_ret() -> Option<LinkedList<u8>> {\n+    None\n }\n-\n-pub fn test_local_not_linted() {\n+fn test_local_not_linted() {\n     let _: LinkedList<u8>;\n }\n \n-fn main() {\n-    test(LinkedList::new());\n-    test_local_not_linted();\n+// All of these test should be allowed because they are part of the\n+// public api and `avoid_breaking_exported_api` is `false` by default.\n+pub fn pub_test(the_most_awesome_linked_list: LinkedList<u8>) {}\n+pub fn pub_test_ret() -> Option<LinkedList<u8>> {\n+    None\n }\n+\n+fn main() {}"}, {"sha": "51327df13211879da10fb77801a1c6a2e44be1c2", "filename": "tests/ui/linkedlist.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c02dcd5405cc11270bef963c37837a944a672f6a/tests%2Fui%2Flinkedlist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c02dcd5405cc11270bef963c37837a944a672f6a/tests%2Fui%2Flinkedlist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flinkedlist.stderr?ref=c02dcd5405cc11270bef963c37837a944a672f6a", "patch": "@@ -40,28 +40,36 @@ LL |     const BAR: Option<LinkedList<u8>>;\n    = help: a `VecDeque` might work\n \n error: you seem to be using a `LinkedList`! Perhaps you meant some other data structure?\n-  --> $DIR/linkedlist.rs:25:15\n+  --> $DIR/linkedlist.rs:24:29\n+   |\n+LL |     priv_linked_list_field: LinkedList<u8>,\n+   |                             ^^^^^^^^^^^^^^\n+   |\n+   = help: a `VecDeque` might work\n+\n+error: you seem to be using a `LinkedList`! Perhaps you meant some other data structure?\n+  --> $DIR/linkedlist.rs:28:15\n    |\n LL |     fn foo(_: LinkedList<u8>) {}\n    |               ^^^^^^^^^^^^^^\n    |\n    = help: a `VecDeque` might work\n \n error: you seem to be using a `LinkedList`! Perhaps you meant some other data structure?\n-  --> $DIR/linkedlist.rs:28:39\n+  --> $DIR/linkedlist.rs:33:34\n    |\n-LL | pub fn test(my_favourite_linked_list: LinkedList<u8>) {\n-   |                                       ^^^^^^^^^^^^^^\n+LL | fn test(my_favorite_linked_list: LinkedList<u8>) {}\n+   |                                  ^^^^^^^^^^^^^^\n    |\n    = help: a `VecDeque` might work\n \n error: you seem to be using a `LinkedList`! Perhaps you meant some other data structure?\n-  --> $DIR/linkedlist.rs:32:29\n+  --> $DIR/linkedlist.rs:34:25\n    |\n-LL | pub fn test_ret() -> Option<LinkedList<u8>> {\n-   |                             ^^^^^^^^^^^^^^\n+LL | fn test_ret() -> Option<LinkedList<u8>> {\n+   |                         ^^^^^^^^^^^^^^\n    |\n    = help: a `VecDeque` might work\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "18e8a2e01e0227cc02478346c42822a45e4b1314", "filename": "tests/ui/rc_mutex.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c02dcd5405cc11270bef963c37837a944a672f6a/tests%2Fui%2Frc_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02dcd5405cc11270bef963c37837a944a672f6a/tests%2Fui%2Frc_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_mutex.rs?ref=c02dcd5405cc11270bef963c37837a944a672f6a", "patch": "@@ -1,13 +1,17 @@\n #![warn(clippy::rc_mutex)]\n-#![allow(clippy::blacklisted_name)]\n+#![allow(unused, clippy::blacklisted_name)]\n \n use std::rc::Rc;\n use std::sync::Mutex;\n \n-pub struct MyStruct {\n+pub struct MyStructWithPrivItem {\n     foo: Rc<Mutex<i32>>,\n }\n \n+pub struct MyStructWithPubItem {\n+    pub foo: Rc<Mutex<i32>>,\n+}\n+\n pub struct SubT<T> {\n     foo: T,\n }\n@@ -17,18 +21,16 @@ pub enum MyEnum {\n     Two,\n }\n \n-pub fn test1<T>(foo: Rc<Mutex<T>>) {}\n-\n-pub fn test2(foo: Rc<Mutex<MyEnum>>) {}\n+// All of these test should be trigger the lint because they are not\n+// part of the public api\n+fn test1<T>(foo: Rc<Mutex<T>>) {}\n+fn test2(foo: Rc<Mutex<MyEnum>>) {}\n+fn test3(foo: Rc<Mutex<SubT<usize>>>) {}\n \n-pub fn test3(foo: Rc<Mutex<SubT<usize>>>) {}\n+// All of these test should be allowed because they are part of the\n+// public api and `avoid_breaking_exported_api` is `false` by default.\n+pub fn pub_test1<T>(foo: Rc<Mutex<T>>) {}\n+pub fn pub_test2(foo: Rc<Mutex<MyEnum>>) {}\n+pub fn pub_test3(foo: Rc<Mutex<SubT<usize>>>) {}\n \n-fn main() {\n-    test1(Rc::new(Mutex::new(1)));\n-    test2(Rc::new(Mutex::new(MyEnum::One)));\n-    test3(Rc::new(Mutex::new(SubT { foo: 1 })));\n-\n-    let _my_struct = MyStruct {\n-        foo: Rc::new(Mutex::new(1)),\n-    };\n-}\n+fn main() {}"}, {"sha": "fe84361d781622b746522ed52e138bac237b2f46", "filename": "tests/ui/rc_mutex.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c02dcd5405cc11270bef963c37837a944a672f6a/tests%2Fui%2Frc_mutex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c02dcd5405cc11270bef963c37837a944a672f6a/tests%2Fui%2Frc_mutex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_mutex.stderr?ref=c02dcd5405cc11270bef963c37837a944a672f6a", "patch": "@@ -8,26 +8,26 @@ LL |     foo: Rc<Mutex<i32>>,\n    = help: consider using `Rc<RefCell<_>>` or `Arc<Mutex<_>>` instead\n \n error: usage of `Rc<Mutex<_>>`\n-  --> $DIR/rc_mutex.rs:20:22\n+  --> $DIR/rc_mutex.rs:26:18\n    |\n-LL | pub fn test1<T>(foo: Rc<Mutex<T>>) {}\n-   |                      ^^^^^^^^^^^^\n+LL | fn test1<T>(foo: Rc<Mutex<T>>) {}\n+   |                  ^^^^^^^^^^^^\n    |\n    = help: consider using `Rc<RefCell<_>>` or `Arc<Mutex<_>>` instead\n \n error: usage of `Rc<Mutex<_>>`\n-  --> $DIR/rc_mutex.rs:22:19\n+  --> $DIR/rc_mutex.rs:27:15\n    |\n-LL | pub fn test2(foo: Rc<Mutex<MyEnum>>) {}\n-   |                   ^^^^^^^^^^^^^^^^^\n+LL | fn test2(foo: Rc<Mutex<MyEnum>>) {}\n+   |               ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using `Rc<RefCell<_>>` or `Arc<Mutex<_>>` instead\n \n error: usage of `Rc<Mutex<_>>`\n-  --> $DIR/rc_mutex.rs:24:19\n+  --> $DIR/rc_mutex.rs:28:15\n    |\n-LL | pub fn test3(foo: Rc<Mutex<SubT<usize>>>) {}\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn test3(foo: Rc<Mutex<SubT<usize>>>) {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using `Rc<RefCell<_>>` or `Arc<Mutex<_>>` instead\n "}]}