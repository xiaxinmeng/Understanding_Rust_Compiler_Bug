{"sha": "91f4fbe5961ad444076c28bfbb37a381d76543cd", "node_id": "C_kwDOAAsO6NoAKDkxZjRmYmU1OTYxYWQ0NDQwNzZjMjhiZmJiMzdhMzgxZDc2NTQzY2Q", "commit": {"author": {"name": "Luna Razzaghipour", "email": "lunarazzaghipour@gmail.com", "date": "2023-05-20T16:02:21Z"}, "committer": {"name": "Luna Razzaghipour", "email": "lunarazzaghipour@gmail.com", "date": "2023-05-20T16:02:21Z"}, "message": "Improve comments", "tree": {"sha": "c4304426884a7d5a99e6eec3f264386519e65c2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4304426884a7d5a99e6eec3f264386519e65c2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91f4fbe5961ad444076c28bfbb37a381d76543cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAAGgAAAATZWNkc2Etc2hhMi1uaXN0cDI1NgAAAAhuaXN0cDI1NgAAAE\nEEtPEPU+w9oQ90uLBc4R0g0O7C/w+fcT4a+R4nvkvJXioSPGOafBHNQJufyTj3tLLeNtO4\n1H9ztJfn/DlLu2mXigAAAANnaXQAAAAAAAAABnNoYTUxMgAAAGQAAAATZWNkc2Etc2hhMi\n1uaXN0cDI1NgAAAEkAAAAgRxwuE/gc9XhWTbRhHbFZBGzMu6G6c+NCJnTm0MvH0kIAAAAh\nANjXw0snYUVjQGI6AIF2SFuefdQRAmsg8KqTmycIVtFX\n-----END SSH SIGNATURE-----", "payload": "tree c4304426884a7d5a99e6eec3f264386519e65c2b\nparent ca6461c1431dbe043a80fc98f69912b955692d16\nauthor Luna Razzaghipour <lunarazzaghipour@gmail.com> 1684598541 +1000\ncommitter Luna Razzaghipour <lunarazzaghipour@gmail.com> 1684598541 +1000\n\nImprove comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91f4fbe5961ad444076c28bfbb37a381d76543cd", "html_url": "https://github.com/rust-lang/rust/commit/91f4fbe5961ad444076c28bfbb37a381d76543cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91f4fbe5961ad444076c28bfbb37a381d76543cd/comments", "author": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca6461c1431dbe043a80fc98f69912b955692d16", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca6461c1431dbe043a80fc98f69912b955692d16", "html_url": "https://github.com/rust-lang/rust/commit/ca6461c1431dbe043a80fc98f69912b955692d16"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "46d797bbb747ce28b47ebc7fb4f11acb5b95d16f", "filename": "crates/stdx/src/thread.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/91f4fbe5961ad444076c28bfbb37a381d76543cd/crates%2Fstdx%2Fsrc%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f4fbe5961ad444076c28bfbb37a381d76543cd/crates%2Fstdx%2Fsrc%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Fthread.rs?ref=91f4fbe5961ad444076c28bfbb37a381d76543cd", "patch": "@@ -62,8 +62,7 @@ impl Builder {\n \n pub struct JoinHandle<T = ()> {\n     // `inner` is an `Option` so that we can\n-    // take ownership of the contained `JoinHandle`\n-    // in the `Drop` impl below.\n+    // take ownership of the contained `JoinHandle`.\n     inner: Option<jod_thread::JoinHandle<T>>,\n     allow_leak: bool,\n }\n@@ -93,8 +92,8 @@ impl<T> fmt::Debug for JoinHandle<T> {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n+// Please maintain order from least to most priority for the derived `Ord` impl.\n pub enum QoSClass {\n-    // Maintain order in priority from least to most.\n     Background,\n     Utility,\n     UserInitiated,\n@@ -132,9 +131,8 @@ pub fn set_current_thread_qos_class(class: QoSClass) {\n             // due to a previous call to a function such as `pthread_setschedparam`\n             // which is incompatible with QoS.\n             //\n-            // Let\u2019s just panic here because rust-analyzer as a system\n-            // should have the property that QoS is used consistently\n-            // instead of old manual scheduling management APIs.\n+            // Panic instead of returning an error\n+            // to maintain the invariant that we only use QoS APIs.\n             panic!(\"tried to set QoS of thread which has opted out of QoS (os error {errno})\")\n         }\n \n@@ -187,8 +185,14 @@ pub fn get_current_thread_qos_class() -> Option<QoSClass> {\n         libc::qos_class_t::QOS_CLASS_DEFAULT => None, // QoS has never been set\n         libc::qos_class_t::QOS_CLASS_UTILITY => Some(QoSClass::Utility),\n         libc::qos_class_t::QOS_CLASS_BACKGROUND => Some(QoSClass::Background),\n+\n         libc::qos_class_t::QOS_CLASS_UNSPECIFIED => {\n-            // We panic here because rust-analyzer should never use\n+            // Using manual scheduling APIs causes threads to \u201copt out\u201d of QoS.\n+            // At this point they become incompatible with QoS,\n+            // and as such have the \u201cunspecified\u201d QoS class.\n+            //\n+            // Panic instead of returning an error\n+            // to maintain the invariant that we only use QoS APIs.\n             panic!(\"tried to get QoS of thread which has opted out of QoS\")\n         }\n     }"}]}