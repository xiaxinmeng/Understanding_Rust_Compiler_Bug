{"sha": "5c558e2c11f33e1e25932607458396be883d36b5", "node_id": "C_kwDOAAsO6NoAKDVjNTU4ZTJjMTFmMzNlMWUyNTkzMjYwNzQ1ODM5NmJlODgzZDM2YjU", "commit": {"author": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2022-01-23T18:35:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-23T18:35:18Z"}, "message": "Merge pull request #5186 from calebcartwright/subtree-sync-2022-01-23\n\nsync subtree", "tree": {"sha": "cdc9b6937e7d2efbbb0c82537acb3f3d58cbd5d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdc9b6937e7d2efbbb0c82537acb3f3d58cbd5d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c558e2c11f33e1e25932607458396be883d36b5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh7Z/mCRBK7hj4Ov3rIwAAmu8IAGkl6e3mWMPZzG7VWegXlPmB\nGhM3hU0GlR3B2H39sr3QIXy/WN1NGdeooBN3iFF+Ogqivs4y/xxiUSGkgun69Ua4\nIvvp8PPcJ6/SP0tdcbOJ9O9aRdRx5ezI2nMTLqrI2i0RIb/w1KWrIchY4B0hzsy7\nVj0+/z6llEFOO59ycPOfjdhhkM3+ZKobe3aMVQn+gVnusAfn5ZlrSp3zMaakSaYz\nnGOcO6uqLn+3qWvpNF4jsKAl6W668GchiIT2AsRNEYv22TpO1FZ5veKnLyneQ1h7\nGOdP9O09gmnQ8y5W/4qkX69GH5VPMt2fFPyKzspfKpK5ASvTKmliUsLv+1QwVZw=\n=GkwK\n-----END PGP SIGNATURE-----\n", "payload": "tree cdc9b6937e7d2efbbb0c82537acb3f3d58cbd5d2\nparent 5056f4cfb311a084420f1828cd58af94d143f5e0\nparent 9e1973f1d9b94914c3e5539f3ed992c19389b4a7\nauthor Caleb Cartwright <calebcartwright@users.noreply.github.com> 1642962918 -0600\ncommitter GitHub <noreply@github.com> 1642962918 -0600\n\nMerge pull request #5186 from calebcartwright/subtree-sync-2022-01-23\n\nsync subtree"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c558e2c11f33e1e25932607458396be883d36b5", "html_url": "https://github.com/rust-lang/rust/commit/5c558e2c11f33e1e25932607458396be883d36b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c558e2c11f33e1e25932607458396be883d36b5/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5056f4cfb311a084420f1828cd58af94d143f5e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5056f4cfb311a084420f1828cd58af94d143f5e0", "html_url": "https://github.com/rust-lang/rust/commit/5056f4cfb311a084420f1828cd58af94d143f5e0"}, {"sha": "9e1973f1d9b94914c3e5539f3ed992c19389b4a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e1973f1d9b94914c3e5539f3ed992c19389b4a7", "html_url": "https://github.com/rust-lang/rust/commit/9e1973f1d9b94914c3e5539f3ed992c19389b4a7"}], "stats": {"total": 58, "additions": 41, "deletions": 17}, "files": [{"sha": "4476f2a449b1f815d56c56fb0ef1ba1c68d5d04c", "filename": "Configurations.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c558e2c11f33e1e25932607458396be883d36b5/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c558e2c11f33e1e25932607458396be883d36b5/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=5c558e2c11f33e1e25932607458396be883d36b5", "patch": "@@ -929,9 +929,9 @@ fn add_one(x: i32) -> i32 {\n ## `format_generated_files`\n \n Format generated files. A file is considered generated\n-if any of the first five lines contains `@generated` marker.\n+if any of the first five lines contain a `@generated` comment marker.\n \n-- **Default value**: `false`\n+- **Default value**: `true`\n - **Possible values**: `true`, `false`\n - **Stable**: No (tracking issue: [#5080](https://github.com/rust-lang/rustfmt/issues/5080))\n "}, {"sha": "d8bf02aec85e23c9a11c62440c741eafd8566c75", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c558e2c11f33e1e25932607458396be883d36b5/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/5c558e2c11f33e1e25932607458396be883d36b5/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=5c558e2c11f33e1e25932607458396be883d36b5", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-12-29\"\n+channel = \"nightly-2022-01-23\"\n components = [\"rustc-dev\"]"}, {"sha": "cd90e0904b6cd540d82c95548e614a6dc02847b5", "filename": "src/config/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c558e2c11f33e1e25932607458396be883d36b5/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c558e2c11f33e1e25932607458396be883d36b5/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=5c558e2c11f33e1e25932607458396be883d36b5", "patch": "@@ -138,7 +138,7 @@ create_config! {\n     inline_attribute_width: usize, 0, false,\n         \"Write an item and its attribute on the same line \\\n         if their combined width is below a threshold\";\n-    format_generated_files: bool, false, false, \"Format generated files\";\n+    format_generated_files: bool, true, false, \"Format generated files\";\n \n     // Options that can change the source code beyond whitespace/blocks (somewhat linty things)\n     merge_derives: bool, true, true, \"Merge multiple `#[derive(...)]` into a single one\";\n@@ -606,7 +606,7 @@ blank_lines_lower_bound = 0\n edition = \"2015\"\n version = \"One\"\n inline_attribute_width = 0\n-format_generated_files = false\n+format_generated_files = true\n merge_derives = true\n use_try_shorthand = false\n use_field_init_shorthand = false"}, {"sha": "e1865c8afc2f0c753c73297989f94e8ced5efd1f", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c558e2c11f33e1e25932607458396be883d36b5/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c558e2c11f33e1e25932607458396be883d36b5/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=5c558e2c11f33e1e25932607458396be883d36b5", "patch": "@@ -334,9 +334,7 @@ pub(crate) fn format_expr(\n         // satisfy our width restrictions.\n         // Style Guide RFC for InlineAsm variant pending\n         // https://github.com/rust-dev-tools/fmt-rfcs/issues/152\n-        ast::ExprKind::LlvmInlineAsm(..) | ast::ExprKind::InlineAsm(..) => {\n-            Some(context.snippet(expr.span).to_owned())\n-        }\n+        ast::ExprKind::InlineAsm(..) => Some(context.snippet(expr.span).to_owned()),\n         ast::ExprKind::TryBlock(ref block) => {\n             if let rw @ Some(_) =\n                 rewrite_single_line_block(context, \"try \", block, Some(&expr.attrs), None, shape)"}, {"sha": "ca93955a549dd4069f0f68ba6e1a5d41ebb28648", "filename": "src/formatting.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c558e2c11f33e1e25932607458396be883d36b5/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c558e2c11f33e1e25932607458396be883d36b5/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=5c558e2c11f33e1e25932607458396be883d36b5", "patch": "@@ -80,7 +80,9 @@ fn should_skip_module<T: FormatHandler>(\n         return true;\n     }\n \n-    if !config.format_generated_files() {\n+    // FIXME(calebcartwright) - we need to determine how we'll handle the\n+    // `format_generated_files` option with stdin based input.\n+    if !input_is_stdin && !config.format_generated_files() {\n         let source_file = context.parse_session.span_to_file_contents(module.span);\n         let src = source_file.src.as_ref().expect(\"SourceFile without src\");\n "}, {"sha": "fae8080c02e413c09f12a7adf91076022448a5c9", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c558e2c11f33e1e25932607458396be883d36b5/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c558e2c11f33e1e25932607458396be883d36b5/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=5c558e2c11f33e1e25932607458396be883d36b5", "patch": "@@ -3,6 +3,7 @@\n #![warn(unreachable_pub)]\n #![recursion_limit = \"256\"]\n #![allow(clippy::match_like_matches_macro)]\n+#![allow(unreachable_pub)]\n \n #[macro_use]\n extern crate derive_new;"}, {"sha": "ab966d4a36075168684fea3103a6271694c33ca7", "filename": "src/test/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5c558e2c11f33e1e25932607458396be883d36b5/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c558e2c11f33e1e25932607458396be883d36b5/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=5c558e2c11f33e1e25932607458396be883d36b5", "patch": "@@ -557,6 +557,27 @@ fn stdin_disable_all_formatting_test() {\n     assert_eq!(input, String::from_utf8(output.stdout).unwrap());\n }\n \n+#[test]\n+fn stdin_generated_files_issue_5172() {\n+    init_log();\n+    let input = Input::Text(\"//@generated\\nfn   main() {}\".to_owned());\n+    let mut config = Config::default();\n+    config.set().emit_mode(EmitMode::Stdout);\n+    config.set().format_generated_files(false);\n+    config.set().newline_style(NewlineStyle::Unix);\n+    let mut buf: Vec<u8> = vec![];\n+    {\n+        let mut session = Session::new(config, Some(&mut buf));\n+        session.format(input).unwrap();\n+        assert!(session.has_no_errors());\n+    }\n+    // N.B. this should be changed once `format_generated_files` is supported with stdin\n+    assert_eq!(\n+        String::from_utf8(buf).unwrap(),\n+        \"<stdin>:\\n\\n//@generated\\nfn main() {}\\n\",\n+    );\n+}\n+\n #[test]\n fn format_lines_errors_are_reported() {\n     init_log();"}, {"sha": "5de30129266a385cdca831ee0b0c582d8980343c", "filename": "src/types.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5c558e2c11f33e1e25932607458396be883d36b5/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c558e2c11f33e1e25932607458396be883d36b5/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=5c558e2c11f33e1e25932607458396be883d36b5", "patch": "@@ -1,7 +1,7 @@\n use std::iter::ExactSizeIterator;\n use std::ops::Deref;\n \n-use rustc_ast::ast::{self, FnRetTy, Mutability};\n+use rustc_ast::ast::{self, FnRetTy, Mutability, Term};\n use rustc_ast::ptr;\n use rustc_span::{symbol::kw, BytePos, Pos, Span};\n \n@@ -141,7 +141,7 @@ pub(crate) enum SegmentParam<'a> {\n     Const(&'a ast::AnonConst),\n     LifeTime(&'a ast::Lifetime),\n     Type(&'a ast::Ty),\n-    Binding(&'a ast::AssocTyConstraint),\n+    Binding(&'a ast::AssocConstraint),\n }\n \n impl<'a> SegmentParam<'a> {\n@@ -176,9 +176,9 @@ impl<'a> Rewrite for SegmentParam<'a> {\n     }\n }\n \n-impl Rewrite for ast::AssocTyConstraint {\n+impl Rewrite for ast::AssocConstraint {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n-        use ast::AssocTyConstraintKind::{Bound, Equality};\n+        use ast::AssocConstraintKind::{Bound, Equality};\n \n         let mut result = String::with_capacity(128);\n         result.push_str(rewrite_ident(context, self.ident));\n@@ -206,11 +206,14 @@ impl Rewrite for ast::AssocTyConstraint {\n     }\n }\n \n-impl Rewrite for ast::AssocTyConstraintKind {\n+impl Rewrite for ast::AssocConstraintKind {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         match self {\n-            ast::AssocTyConstraintKind::Equality { ty } => ty.rewrite(context, shape),\n-            ast::AssocTyConstraintKind::Bound { bounds } => bounds.rewrite(context, shape),\n+            ast::AssocConstraintKind::Equality { term } => match term {\n+                Term::Ty(ty) => ty.rewrite(context, shape),\n+                Term::Const(c) => c.rewrite(context, shape),\n+            },\n+            ast::AssocConstraintKind::Bound { bounds } => bounds.rewrite(context, shape),\n         }\n     }\n }"}, {"sha": "2428d8cb0fd89ee6b934629ccc5cfed909f4487b", "filename": "src/utils.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c558e2c11f33e1e25932607458396be883d36b5/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c558e2c11f33e1e25932607458396be883d36b5/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=5c558e2c11f33e1e25932607458396be883d36b5", "patch": "@@ -507,7 +507,6 @@ pub(crate) fn is_block_expr(context: &RewriteContext<'_>, expr: &ast::Expr, repr\n         | ast::ExprKind::Err\n         | ast::ExprKind::Field(..)\n         | ast::ExprKind::InlineAsm(..)\n-        | ast::ExprKind::LlvmInlineAsm(..)\n         | ast::ExprKind::Let(..)\n         | ast::ExprKind::Path(..)\n         | ast::ExprKind::Range(..)"}]}