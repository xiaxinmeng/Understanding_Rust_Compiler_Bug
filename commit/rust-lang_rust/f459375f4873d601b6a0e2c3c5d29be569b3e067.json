{"sha": "f459375f4873d601b6a0e2c3c5d29be569b3e067", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NTkzNzVmNDg3M2Q2MDFiNmEwZTJjM2M1ZDI5YmU1NjliM2UwNjc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-07T15:21:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-07T16:11:27Z"}, "message": "Better fixture highlight", "tree": {"sha": "97bceccdbcfa1a5f5b932c16786e7339b4ff39da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97bceccdbcfa1a5f5b932c16786e7339b4ff39da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f459375f4873d601b6a0e2c3c5d29be569b3e067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f459375f4873d601b6a0e2c3c5d29be569b3e067", "html_url": "https://github.com/rust-lang/rust/commit/f459375f4873d601b6a0e2c3c5d29be569b3e067", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f459375f4873d601b6a0e2c3c5d29be569b3e067/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "html_url": "https://github.com/rust-lang/rust/commit/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff"}], "stats": {"total": 158, "additions": 140, "deletions": 18}, "files": [{"sha": "18cf64a34e0c238ddc45302713d58ef22d3c1a8a", "filename": "crates/assists/src/handlers/flip_comma.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f459375f4873d601b6a0e2c3c5d29be569b3e067/crates%2Fassists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f459375f4873d601b6a0e2c3c5d29be569b3e067/crates%2Fassists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fflip_comma.rs?ref=f459375f4873d601b6a0e2c3c5d29be569b3e067", "patch": "@@ -49,14 +49,14 @@ mod tests {\n     fn flip_comma_works_for_function_parameters() {\n         check_assist(\n             flip_comma,\n-            \"fn foo(x: i32,$0 y: Result<(), ()>) {}\",\n-            \"fn foo(y: Result<(), ()>, x: i32) {}\",\n+            r#\"fn foo(x: i32,$0 y: Result<(), ()>) {}\"#,\n+            r#\"fn foo(y: Result<(), ()>, x: i32) {}\"#,\n         )\n     }\n \n     #[test]\n     fn flip_comma_target() {\n-        check_assist_target(flip_comma, \"fn foo(x: i32,$0 y: Result<(), ()>) {}\", \",\")\n+        check_assist_target(flip_comma, r#\"fn foo(x: i32,$0 y: Result<(), ()>) {}\"#, \",\")\n     }\n \n     #[test]"}, {"sha": "98acd61b126278a29a64570ee329565e106d6372", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f459375f4873d601b6a0e2c3c5d29be569b3e067/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f459375f4873d601b6a0e2c3c5d29be569b3e067/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=f459375f4873d601b6a0e2c3c5d29be569b3e067", "patch": "@@ -61,7 +61,9 @@ use std::{str::FromStr, sync::Arc};\n \n use cfg::CfgOptions;\n use rustc_hash::FxHashMap;\n-use test_utils::{extract_range_or_offset, Fixture, RangeOrOffset, CURSOR_MARKER};\n+use test_utils::{\n+    extract_range_or_offset, Fixture, RangeOrOffset, CURSOR_MARKER, ESCAPED_CURSOR_MARKER,\n+};\n use vfs::{file_set::FileSet, VfsPath};\n \n use crate::{\n@@ -142,10 +144,14 @@ impl ChangeFixture {\n \n         for entry in fixture {\n             let text = if entry.text.contains(CURSOR_MARKER) {\n-                let (range_or_offset, text) = extract_range_or_offset(&entry.text);\n-                assert!(file_position.is_none());\n-                file_position = Some((file_id, range_or_offset));\n-                text.to_string()\n+                if entry.text.contains(ESCAPED_CURSOR_MARKER) {\n+                    entry.text.replace(ESCAPED_CURSOR_MARKER, CURSOR_MARKER)\n+                } else {\n+                    let (range_or_offset, text) = extract_range_or_offset(&entry.text);\n+                    assert!(file_position.is_none());\n+                    file_position = Some((file_id, range_or_offset));\n+                    text.to_string()\n+                }\n             } else {\n                 entry.text.clone()\n             };"}, {"sha": "05380f2a1000b0969b8b387fbda9dd79be03b4c5", "filename": "crates/ide/src/join_lines.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f459375f4873d601b6a0e2c3c5d29be569b3e067/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f459375f4873d601b6a0e2c3c5d29be569b3e067/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fjoin_lines.rs?ref=f459375f4873d601b6a0e2c3c5d29be569b3e067", "patch": "@@ -198,8 +198,8 @@ mod tests {\n \n     use super::*;\n \n-    fn check_join_lines(before: &str, after: &str) {\n-        let (before_cursor_pos, before) = extract_offset(before);\n+    fn check_join_lines(ra_fixture_before: &str, ra_fixture_after: &str) {\n+        let (before_cursor_pos, before) = extract_offset(ra_fixture_before);\n         let file = SourceFile::parse(&before).ok().unwrap();\n \n         let range = TextRange::empty(before_cursor_pos);\n@@ -214,7 +214,7 @@ mod tests {\n             .apply_to_offset(before_cursor_pos)\n             .expect(\"cursor position is affected by the edit\");\n         let actual = add_cursor(&actual, actual_cursor_pos);\n-        assert_eq_text!(after, &actual);\n+        assert_eq_text!(ra_fixture_after, &actual);\n     }\n \n     #[test]\n@@ -604,16 +604,16 @@ fn foo() {\n         );\n     }\n \n-    fn check_join_lines_sel(before: &str, after: &str) {\n-        let (sel, before) = extract_range(before);\n+    fn check_join_lines_sel(ra_fixture_before: &str, ra_fixture_after: &str) {\n+        let (sel, before) = extract_range(ra_fixture_before);\n         let parse = SourceFile::parse(&before);\n         let result = join_lines(&parse.tree(), sel);\n         let actual = {\n             let mut actual = before.to_string();\n             result.apply(&mut actual);\n             actual\n         };\n-        assert_eq_text!(after, &actual);\n+        assert_eq_text!(ra_fixture_after, &actual);\n     }\n \n     #[test]"}, {"sha": "d6be9708df76c6ae2d63860aaf132379edbc70a8", "filename": "crates/ide/src/syntax_highlighting/injection.rs", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f459375f4873d601b6a0e2c3c5d29be569b3e067/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f459375f4873d601b6a0e2c3c5d29be569b3e067/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs?ref=f459375f4873d601b6a0e2c3c5d29be569b3e067", "patch": "@@ -22,7 +22,8 @@ pub(super) fn highlight_injection(\n         return None;\n     }\n     let value = literal.value()?;\n-    let (analysis, tmp_file_id) = Analysis::from_single_file(value.into_owned());\n+    let marker_info = MarkerInfo::new(&*value);\n+    let (analysis, tmp_file_id) = Analysis::from_single_file(marker_info.cleaned_text.clone());\n \n     if let Some(range) = literal.open_quote_text_range() {\n         acc.add(HighlightedRange {\n@@ -33,9 +34,10 @@ pub(super) fn highlight_injection(\n     }\n \n     for mut h in analysis.highlight(tmp_file_id).unwrap() {\n-        if let Some(r) = literal.map_range_up(h.range) {\n-            h.range = r;\n-            acc.add(h)\n+        let range = marker_info.map_range_up(h.range);\n+        if let Some(range) = literal.map_range_up(range) {\n+            h.range = range;\n+            acc.add(h);\n         }\n     }\n \n@@ -50,6 +52,52 @@ pub(super) fn highlight_injection(\n     Some(())\n }\n \n+/// Data to remove `$0` from string and map ranges\n+#[derive(Default, Debug)]\n+struct MarkerInfo {\n+    cleaned_text: String,\n+    markers: Vec<TextRange>,\n+}\n+\n+impl MarkerInfo {\n+    fn new(mut text: &str) -> Self {\n+        let marker = \"$0\";\n+\n+        let mut res = MarkerInfo::default();\n+        let mut offset: TextSize = 0.into();\n+        while !text.is_empty() {\n+            let idx = text.find(marker).unwrap_or(text.len());\n+            let (chunk, next) = text.split_at(idx);\n+            text = next;\n+            res.cleaned_text.push_str(chunk);\n+            offset += TextSize::of(chunk);\n+\n+            if let Some(next) = text.strip_prefix(marker) {\n+                text = next;\n+\n+                let marker_len = TextSize::of(marker);\n+                res.markers.push(TextRange::at(offset, marker_len));\n+                offset += marker_len;\n+            }\n+        }\n+        res\n+    }\n+    fn map_range_up(&self, range: TextRange) -> TextRange {\n+        TextRange::new(\n+            self.map_offset_up(range.start(), true),\n+            self.map_offset_up(range.end(), false),\n+        )\n+    }\n+    fn map_offset_up(&self, mut offset: TextSize, start: bool) -> TextSize {\n+        for r in &self.markers {\n+            if r.start() < offset || (start && r.start() == offset) {\n+                offset += r.len()\n+            }\n+        }\n+        offset\n+    }\n+}\n+\n /// Mapping from extracted documentation code to original code\n type RangesMap = BTreeMap<TextSize, TextSize>;\n "}, {"sha": "a54d303b464d1baa16193ee20b324dc1b197ad0b", "filename": "crates/ide/src/syntax_highlighting/test_data/injection.html", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f459375f4873d601b6a0e2c3c5d29be569b3e067/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html", "raw_url": "https://github.com/rust-lang/rust/raw/f459375f4873d601b6a0e2c3c5d29be569b3e067/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html?ref=f459375f4873d601b6a0e2c3c5d29be569b3e067", "patch": "@@ -0,0 +1,48 @@\n+\n+<style>\n+body                { margin: 0; }\n+pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n+\n+.lifetime           { color: #DFAF8F; font-style: italic; }\n+.label              { color: #DFAF8F; font-style: italic; }\n+.comment            { color: #7F9F7F; }\n+.documentation      { color: #629755; }\n+.injected           { opacity: 0.65 ; }\n+.struct, .enum      { color: #7CB8BB; }\n+.enum_variant       { color: #BDE0F3; }\n+.string_literal     { color: #CC9393; }\n+.field              { color: #94BFF3; }\n+.function           { color: #93E0E3; }\n+.function.unsafe    { color: #BC8383; }\n+.operator.unsafe    { color: #BC8383; }\n+.parameter          { color: #94BFF3; }\n+.text               { color: #DCDCCC; }\n+.type               { color: #7CB8BB; }\n+.builtin_type       { color: #8CD0D3; }\n+.type_param         { color: #DFAF8F; }\n+.attribute          { color: #94BFF3; }\n+.numeric_literal    { color: #BFEBBF; }\n+.bool_literal       { color: #BFE6EB; }\n+.macro              { color: #94BFF3; }\n+.module             { color: #AFD8AF; }\n+.value_param        { color: #DCDCCC; }\n+.variable           { color: #DCDCCC; }\n+.format_specifier   { color: #CC696B; }\n+.mutable            { text-decoration: underline; }\n+.escape_sequence    { color: #94BFF3; }\n+.keyword            { color: #F0DFAF; font-weight: bold; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.control            { font-style: italic; }\n+\n+.unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n+</style>\n+<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">f</span><span class=\"punctuation\">(</span><span class=\"value_param declaration\">ra_fixture</span><span class=\"punctuation\">:</span> <span class=\"operator\">&</span><span class=\"builtin_type\">str</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n+    <span class=\"function\">f</span><span class=\"punctuation\">(</span><span class=\"string_literal\">r\"</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n+    <span class=\"function\">foo</span><span class=\"punctuation\">(</span>$0<span class=\"punctuation\">{</span>\n+        <span class=\"numeric_literal\">92</span>\n+    <span class=\"punctuation\">}</span>$0<span class=\"punctuation\">)</span>\n+<span class=\"punctuation\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+<span class=\"punctuation\">}</span>\n+    </code></pre>\n\\ No newline at end of file"}, {"sha": "9e1a3974cb6213240df57ad68d89394f6c8c3886", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f459375f4873d601b6a0e2c3c5d29be569b3e067/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f459375f4873d601b6a0e2c3c5d29be569b3e067/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=f459375f4873d601b6a0e2c3c5d29be569b3e067", "patch": "@@ -555,6 +555,25 @@ impl t for foo {\n     )\n }\n \n+#[test]\n+fn test_injection() {\n+    check_highlighting(\n+        r##\"\n+fn f(ra_fixture: &str) {}\n+fn main() {\n+    f(r\"\n+fn foo() {\n+    foo(\\$0{\n+        92\n+    }\\$0)\n+}\");\n+}\n+    \"##,\n+        expect_file![\"./test_data/injection.html\"],\n+        false,\n+    );\n+}\n+\n /// Highlights the code given by the `ra_fixture` argument, renders the\n /// result as HTML, and compares it with the HTML file given as `snapshot`.\n /// Note that the `snapshot` file is overwritten by the rendered HTML."}, {"sha": "84c1d7ebbdf40cc69aa4885cdc50e4fb4ad85310", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f459375f4873d601b6a0e2c3c5d29be569b3e067/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f459375f4873d601b6a0e2c3c5d29be569b3e067/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=f459375f4873d601b6a0e2c3c5d29be569b3e067", "patch": "@@ -26,6 +26,7 @@ pub use rustc_hash::FxHashMap;\n pub use crate::fixture::Fixture;\n \n pub const CURSOR_MARKER: &str = \"$0\";\n+pub const ESCAPED_CURSOR_MARKER: &str = \"\\\\$0\";\n \n /// Asserts that two strings are equal, otherwise displays a rich diff between them.\n ///"}]}