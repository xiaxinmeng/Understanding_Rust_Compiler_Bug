{"sha": "8497fd490691c9db35d09f3a0c10cf65b023b784", "node_id": "C_kwDOAAsO6NoAKDg0OTdmZDQ5MDY5MWM5ZGIzNWQwOWYzYTBjMTBjZjY1YjAyM2I3ODQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-23T13:10:23Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-22T14:11:16Z"}, "message": "pass clippy::integer_arithmetic in our shims", "tree": {"sha": "ab72d18eb910b716cf5fc4cf8bf1234982f664c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab72d18eb910b716cf5fc4cf8bf1234982f664c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8497fd490691c9db35d09f3a0c10cf65b023b784", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8497fd490691c9db35d09f3a0c10cf65b023b784", "html_url": "https://github.com/rust-lang/rust/commit/8497fd490691c9db35d09f3a0c10cf65b023b784", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8497fd490691c9db35d09f3a0c10cf65b023b784/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab88e64b152d3704c35db96dbbc6efaaed67773f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab88e64b152d3704c35db96dbbc6efaaed67773f", "html_url": "https://github.com/rust-lang/rust/commit/ab88e64b152d3704c35db96dbbc6efaaed67773f"}], "stats": {"total": 60, "additions": 42, "deletions": 18}, "files": [{"sha": "aff63c3c19dfa52bba6a6d6edddcb5e93c3aee09", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8497fd490691c9db35d09f3a0c10cf65b023b784/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8497fd490691c9db35d09f3a0c10cf65b023b784/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=8497fd490691c9db35d09f3a0c10cf65b023b784", "patch": "@@ -27,6 +27,7 @@\n     clippy::too_many_arguments,\n     clippy::type_complexity,\n     clippy::single_element_loop,\n+    clippy::needless_return,\n     // We are not implementing queries here so it's fine\n     rustc::potential_query_instability\n )]"}, {"sha": "bce4961339cd5e05f16823a48b957365fc98eba8", "filename": "src/shims/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8497fd490691c9db35d09f3a0c10cf65b023b784/src%2Fshims%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8497fd490691c9db35d09f3a0c10cf65b023b784/src%2Fshims%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fbacktrace.rs?ref=8497fd490691c9db35d09f3a0c10cf65b023b784", "patch": "@@ -175,7 +175,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // file would have more than 2^32 lines or columns, but whatever, just default to 0.\n         let lineno: u32 = u32::try_from(lo.line).unwrap_or(0);\n         // `lo.col` is 0-based - add 1 to make it 1-based for the caller.\n-        let colno: u32 = u32::try_from(lo.col.0 + 1).unwrap_or(0);\n+        let colno: u32 = u32::try_from(lo.col.0.saturating_add(1)).unwrap_or(0);\n \n         let dest = this.force_allocation(dest)?;\n         if let ty::Adt(adt, _) = dest.layout.ty.kind() {"}, {"sha": "b9bd713d4d3169b079e733ce10fee60e62d7f348", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8497fd490691c9db35d09f3a0c10cf65b023b784/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8497fd490691c9db35d09f3a0c10cf65b023b784/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=8497fd490691c9db35d09f3a0c10cf65b023b784", "patch": "@@ -164,6 +164,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     .expect(\"interpreting a non-executable crate\");\n                 for cnum in iter::once(LOCAL_CRATE).chain(\n                     dependency_format.1.iter().enumerate().filter_map(|(num, &linkage)| {\n+                        // We add 1 to the number because that's what rustc also does everywhere it\n+                        // calls `CrateNum::new`...\n+                        #[allow(clippy::integer_arithmetic)]\n                         (linkage != Linkage::NotLinked).then_some(CrateNum::new(num + 1))\n                     }),\n                 ) {\n@@ -542,7 +545,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     .rev()\n                     .position(|&c| c == val)\n                 {\n-                    let new_ptr = ptr.offset(Size::from_bytes(num - idx as u64 - 1), this)?;\n+                    let idx = u64::try_from(idx).unwrap();\n+                    #[allow(clippy::integer_arithmetic)] // idx < num, so this never wraps\n+                    let new_ptr = ptr.offset(Size::from_bytes(num - idx - 1), this)?;\n                     this.write_pointer(new_ptr, dest)?;\n                 } else {\n                     this.write_null(dest)?;\n@@ -708,7 +713,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let a = this.read_scalar(a)?.to_u64()?;\n                 let b = this.read_scalar(b)?.to_u64()?;\n \n+                #[allow(clippy::integer_arithmetic)] // adding two u64 and a u8 cannot wrap in a u128\n                 let wide_sum = u128::from(c_in) + u128::from(a) + u128::from(b);\n+                #[allow(clippy::integer_arithmetic)] // it's a u128, we can shift by 64\n                 let (c_out, sum) = ((wide_sum >> 64).truncate::<u8>(), wide_sum.truncate::<u64>());\n \n                 let c_out_field = this.place_field(dest, 0)?;"}, {"sha": "1b7ec5913506e179ad4c78e6a1ccbad3a9f84479", "filename": "src/shims/intrinsics/simd.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8497fd490691c9db35d09f3a0c10cf65b023b784/src%2Fshims%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8497fd490691c9db35d09f3a0c10cf65b023b784/src%2Fshims%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics%2Fsimd.rs?ref=8497fd490691c9db35d09f3a0c10cf65b023b784", "patch": "@@ -393,6 +393,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 assert_eq!(bitmask_len, mask.layout.size.bits());\n                 assert_eq!(dest_len, yes_len);\n                 assert_eq!(dest_len, no_len);\n+                let dest_len = u32::try_from(dest_len).unwrap();\n+                let bitmask_len = u32::try_from(bitmask_len).unwrap();\n \n                 let mask: u64 = this\n                     .read_scalar(mask)?\n@@ -401,18 +403,20 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     .try_into()\n                     .unwrap();\n                 for i in 0..dest_len {\n-                    let mask =\n-                        mask & (1 << simd_bitmask_index(i, dest_len, this.data_layout().endian));\n-                    let yes = this.read_immediate(&this.mplace_index(&yes, i)?.into())?;\n-                    let no = this.read_immediate(&this.mplace_index(&no, i)?.into())?;\n-                    let dest = this.mplace_index(&dest, i)?;\n+                    let mask = mask\n+                        & 1u64\n+                            .checked_shl(simd_bitmask_index(i, dest_len, this.data_layout().endian))\n+                            .unwrap();\n+                    let yes = this.read_immediate(&this.mplace_index(&yes, i.into())?.into())?;\n+                    let no = this.read_immediate(&this.mplace_index(&no, i.into())?.into())?;\n+                    let dest = this.mplace_index(&dest, i.into())?;\n \n                     let val = if mask != 0 { yes } else { no };\n                     this.write_immediate(*val, &dest.into())?;\n                 }\n                 for i in dest_len..bitmask_len {\n                     // If the mask is \"padded\", ensure that padding is all-zero.\n-                    let mask = mask & (1 << i);\n+                    let mask = mask & 1u64.checked_shl(i).unwrap();\n                     if mask != 0 {\n                         throw_ub_format!(\n                             \"a SIMD bitmask less than 8 bits long must be filled with 0s for the remaining bits\"\n@@ -485,9 +489,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     let val = if src_index < left_len {\n                         this.read_immediate(&this.mplace_index(&left, src_index)?.into())?\n                     } else if src_index < left_len.checked_add(right_len).unwrap() {\n-                        this.read_immediate(\n-                            &this.mplace_index(&right, src_index - left_len)?.into(),\n-                        )?\n+                        let right_idx = src_index.checked_sub(left_len).unwrap();\n+                        this.read_immediate(&this.mplace_index(&right, right_idx)?.into())?\n                     } else {\n                         span_bug!(\n                             this.cur_span(),\n@@ -551,12 +554,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 assert!(dest.layout.ty.is_integral());\n                 assert!(bitmask_len <= 64);\n                 assert_eq!(bitmask_len, dest.layout.size.bits());\n+                let op_len = u32::try_from(op_len).unwrap();\n \n                 let mut res = 0u64;\n                 for i in 0..op_len {\n-                    let op = this.read_immediate(&this.mplace_index(&op, i)?.into())?;\n+                    let op = this.read_immediate(&this.mplace_index(&op, i.into())?.into())?;\n                     if simd_element_to_bool(op)? {\n-                        res |= 1 << simd_bitmask_index(i, op_len, this.data_layout().endian);\n+                        res |= 1u64\n+                            .checked_shl(simd_bitmask_index(i, op_len, this.data_layout().endian))\n+                            .unwrap();\n                     }\n                 }\n                 this.write_int(res, dest)?;\n@@ -583,10 +589,11 @@ fn simd_element_to_bool(elem: ImmTy<'_, Provenance>) -> InterpResult<'_, bool> {\n     })\n }\n \n-fn simd_bitmask_index(idx: u64, vec_len: u64, endianess: Endian) -> u64 {\n+fn simd_bitmask_index(idx: u32, vec_len: u32, endianess: Endian) -> u32 {\n     assert!(idx < vec_len);\n     match endianess {\n         Endian::Little => idx,\n+        #[allow(clippy::integer_arithmetic)] // idx < vec_len\n         Endian::Big => vec_len - 1 - idx, // reverse order of bits\n     }\n }"}, {"sha": "618295592450f944e68f0880bcc251654c28d4e8", "filename": "src/shims/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8497fd490691c9db35d09f3a0c10cf65b023b784/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8497fd490691c9db35d09f3a0c10cf65b023b784/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=8497fd490691c9db35d09f3a0c10cf65b023b784", "patch": "@@ -1,3 +1,5 @@\n+#![warn(clippy::integer_arithmetic)]\n+\n mod backtrace;\n pub mod foreign_items;\n pub mod intrinsics;"}, {"sha": "d3c545ea58cc964ac4767cf41463a7490e76d533", "filename": "src/shims/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8497fd490691c9db35d09f3a0c10cf65b023b784/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8497fd490691c9db35d09f3a0c10cf65b023b784/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=8497fd490691c9db35d09f3a0c10cf65b023b784", "patch": "@@ -84,7 +84,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(0)\n     }\n \n-    #[allow(non_snake_case)]\n+    #[allow(non_snake_case, clippy::integer_arithmetic)]\n     fn GetSystemTimeAsFileTime(\n         &mut self,\n         LPFILETIME_op: &OpTy<'tcx, Provenance>,"}, {"sha": "ede4b12c2d21c45a93fa7405397243a54deb6b60", "filename": "src/shims/tls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8497fd490691c9db35d09f3a0c10cf65b023b784/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8497fd490691c9db35d09f3a0c10cf65b023b784/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=8497fd490691c9db35d09f3a0c10cf65b023b784", "patch": "@@ -63,6 +63,7 @@ impl<'tcx> Default for TlsData<'tcx> {\n impl<'tcx> TlsData<'tcx> {\n     /// Generate a new TLS key with the given destructor.\n     /// `max_size` determines the integer size the key has to fit in.\n+    #[allow(clippy::integer_arithmetic)]\n     pub fn create_tls_key(\n         &mut self,\n         dtor: Option<ty::Instance<'tcx>>,"}, {"sha": "d3f4f5ef5451f29af241cf1ad9978eb699bf81a4", "filename": "src/shims/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8497fd490691c9db35d09f3a0c10cf65b023b784/src%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8497fd490691c9db35d09f3a0c10cf65b023b784/src%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffs.rs?ref=8497fd490691c9db35d09f3a0c10cf65b023b784", "patch": "@@ -443,6 +443,7 @@ pub struct DirHandler {\n }\n \n impl DirHandler {\n+    #[allow(clippy::integer_arithmetic)]\n     fn insert_new(&mut self, read_dir: ReadDir) -> u64 {\n         let id = self.next_id;\n         self.next_id += 1;"}, {"sha": "f9c97a23721c5186df9cb7958159241f4d3d58d5", "filename": "src/shims/unix/linux/sync.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8497fd490691c9db35d09f3a0c10cf65b023b784/src%2Fshims%2Funix%2Flinux%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8497fd490691c9db35d09f3a0c10cf65b023b784/src%2Fshims%2Funix%2Flinux%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Flinux%2Fsync.rs?ref=8497fd490691c9db35d09f3a0c10cf65b023b784", "patch": "@@ -242,6 +242,7 @@ pub fn futex<'tcx>(\n             // before doing the syscall.\n             this.atomic_fence(AtomicFenceOrd::SeqCst)?;\n             let mut n = 0;\n+            #[allow(clippy::integer_arithmetic)]\n             for _ in 0..val {\n                 if let Some(thread) = this.futex_wake(addr_usize, bitset) {\n                     this.unblock_thread(thread);"}, {"sha": "92e0a9a34e12262a9fb83508c885d7113a4a2950", "filename": "src/shims/windows/handle.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8497fd490691c9db35d09f3a0c10cf65b023b784/src%2Fshims%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8497fd490691c9db35d09f3a0c10cf65b023b784/src%2Fshims%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fhandle.rs?ref=8497fd490691c9db35d09f3a0c10cf65b023b784", "patch": "@@ -62,6 +62,7 @@ impl Handle {\n         let floor_log2 = variant_count.ilog2();\n \n         // we need to add one for non powers of two to compensate for the difference\n+        #[allow(clippy::integer_arithmetic)] // cannot overflow\n         if variant_count.is_power_of_two() { floor_log2 } else { floor_log2 + 1 }\n     }\n \n@@ -73,7 +74,7 @@ impl Handle {\n     /// None of this layout is guaranteed to applications by Windows or Miri.\n     fn to_packed(self) -> u32 {\n         let disc_size = Self::packed_disc_size();\n-        let data_size = u32::BITS - disc_size;\n+        let data_size = u32::BITS.checked_sub(disc_size).unwrap();\n \n         let discriminant = self.discriminant();\n         let data = self.data();\n@@ -86,7 +87,8 @@ impl Handle {\n \n         // packs the data into the lower `data_size` bits\n         // and packs the discriminant right above the data\n-        discriminant << data_size | data\n+        #[allow(clippy::integer_arithmetic)] // cannot overflow\n+        return discriminant << data_size | data;\n     }\n \n     fn new(discriminant: u32, data: u32) -> Option<Self> {\n@@ -101,12 +103,14 @@ impl Handle {\n     /// see docs for `to_packed`\n     fn from_packed(handle: u32) -> Option<Self> {\n         let disc_size = Self::packed_disc_size();\n-        let data_size = u32::BITS - disc_size;\n+        let data_size = u32::BITS.checked_sub(disc_size).unwrap();\n \n         // the lower `data_size` bits of this mask are 1\n+        #[allow(clippy::integer_arithmetic)] // cannot overflow\n         let data_mask = 2u32.pow(data_size) - 1;\n \n         // the discriminant is stored right above the lower `data_size` bits\n+        #[allow(clippy::integer_arithmetic)] // cannot overflow\n         let discriminant = handle >> data_size;\n \n         // the data is stored in the lower `data_size` bits"}]}