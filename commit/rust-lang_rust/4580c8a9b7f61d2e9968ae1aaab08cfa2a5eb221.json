{"sha": "4580c8a9b7f61d2e9968ae1aaab08cfa2a5eb221", "node_id": "C_kwDOAAsO6NoAKDQ1ODBjOGE5YjdmNjFkMmU5OTY4YWUxYWFhYjA4Y2ZhMmE1ZWIyMjE", "commit": {"author": {"name": "Max Baumann", "email": "max@bmn.dev", "date": "2022-03-20T22:54:04Z"}, "committer": {"name": "Max Baumann", "email": "max@bmn.dev", "date": "2022-03-20T22:54:04Z"}, "message": "refactor: use is_lang_ctor()", "tree": {"sha": "e0aa008703c1b96af73ed71fd1a734a73d8ad358", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0aa008703c1b96af73ed71fd1a734a73d8ad358"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4580c8a9b7f61d2e9968ae1aaab08cfa2a5eb221", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEhJzmO046LuvaNO3WIPoWCbA7HW0FAmI3sIwACgkQIPoWCbA7\nHW08WhAAgHlhv3SuJJ/FByKBt5Ds3Qw0VvDIwTu5gYY/m+Qw5kZJGUdeuVLyI8d3\nXSx0jlwBPtZK2dW1V8NQ9Ks75yW1kzTnXqprCg8uGowl8+MdOgrm2XEZCI4/Agtt\nZ+KGwADNws/fmXWS8vm1+Tf9NHwcZpXPrNh98ZwEPX7xtYuc6QMCZzWymnqVvTie\niF40N82+8Hvmkn+a+xyT5MM0gvkGnQVD3lww3yK7dVF04bRde70vtXlnAyOMrsDp\nQdtTGCTzdXkoGBj2tG9k6nl72usCBfw8aMNHx4zwN3dAv6P6NdszrBpxg+/Ij7Ls\nHEFNJg13jdAvi5W5J5sVQ8t9KMCCOt3PcN0MioQNyeUMUl9bmTh/ggdPpjNu3Rlj\ntYsk7Z+I9ZRhdu4Kbt5ar7VU3qVn6oHs0WJV+20ARzH/lqjSxmGhUDoMLOKwDp4i\nwzKsOieby/pDWYvxtXvffL+gImSC2Mx/PEvQFVtjd04OghyC4yYC9ILgKQ9QUwFN\nv4ASA4BuueGkO+7KLjiNguPfRpkBvydplh6wiD89cCc3iV794Aq/B0CRRukXJKlI\n8ICc8HG/x0TchMij6ciXeP7NXZ/59x4+x6Xz+pyKXpWBHWxTPJ3mcLGtrgM3QKy/\n4Xw+hFxzzxyfKKapElxv0vq2snEjuB2tvpHS33hP57fGYDnqQ8Y=\n=11cg\n-----END PGP SIGNATURE-----", "payload": "tree e0aa008703c1b96af73ed71fd1a734a73d8ad358\nparent 0f83753934b84efb6b3263270f625f0f44c208f2\nauthor Max Baumann <max@bmn.dev> 1647816844 +0100\ncommitter Max Baumann <max@bmn.dev> 1647816844 +0100\n\nrefactor: use is_lang_ctor()\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4580c8a9b7f61d2e9968ae1aaab08cfa2a5eb221", "html_url": "https://github.com/rust-lang/rust/commit/4580c8a9b7f61d2e9968ae1aaab08cfa2a5eb221", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4580c8a9b7f61d2e9968ae1aaab08cfa2a5eb221/comments", "author": {"login": "FoseFx", "id": 22842759, "node_id": "MDQ6VXNlcjIyODQyNzU5", "avatar_url": "https://avatars.githubusercontent.com/u/22842759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FoseFx", "html_url": "https://github.com/FoseFx", "followers_url": "https://api.github.com/users/FoseFx/followers", "following_url": "https://api.github.com/users/FoseFx/following{/other_user}", "gists_url": "https://api.github.com/users/FoseFx/gists{/gist_id}", "starred_url": "https://api.github.com/users/FoseFx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FoseFx/subscriptions", "organizations_url": "https://api.github.com/users/FoseFx/orgs", "repos_url": "https://api.github.com/users/FoseFx/repos", "events_url": "https://api.github.com/users/FoseFx/events{/privacy}", "received_events_url": "https://api.github.com/users/FoseFx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FoseFx", "id": 22842759, "node_id": "MDQ6VXNlcjIyODQyNzU5", "avatar_url": "https://avatars.githubusercontent.com/u/22842759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FoseFx", "html_url": "https://github.com/FoseFx", "followers_url": "https://api.github.com/users/FoseFx/followers", "following_url": "https://api.github.com/users/FoseFx/following{/other_user}", "gists_url": "https://api.github.com/users/FoseFx/gists{/gist_id}", "starred_url": "https://api.github.com/users/FoseFx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FoseFx/subscriptions", "organizations_url": "https://api.github.com/users/FoseFx/orgs", "repos_url": "https://api.github.com/users/FoseFx/repos", "events_url": "https://api.github.com/users/FoseFx/events{/privacy}", "received_events_url": "https://api.github.com/users/FoseFx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f83753934b84efb6b3263270f625f0f44c208f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f83753934b84efb6b3263270f625f0f44c208f2", "html_url": "https://github.com/rust-lang/rust/commit/0f83753934b84efb6b3263270f625f0f44c208f2"}], "stats": {"total": 31, "additions": 12, "deletions": 19}, "files": [{"sha": "28b1bfe8fb5af354e32a89da9a915e942d25d487", "filename": "clippy_lints/src/methods/or_then_unwrap.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4580c8a9b7f61d2e9968ae1aaab08cfa2a5eb221/clippy_lints%2Fsrc%2Fmethods%2For_then_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4580c8a9b7f61d2e9968ae1aaab08cfa2a5eb221/clippy_lints%2Fsrc%2Fmethods%2For_then_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_then_unwrap.rs?ref=4580c8a9b7f61d2e9968ae1aaab08cfa2a5eb221", "patch": "@@ -1,9 +1,8 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::is_type_diagnostic_item;\n-use if_chain::if_chain;\n+use clippy_utils::{diagnostics::span_lint_and_sugg, is_lang_ctor};\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, QPath};\n+use rustc_hir::{lang_items::LangItem, Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_span::{sym, Span};\n \n@@ -22,14 +21,14 @@ pub(super) fn check<'tcx>(\n \n     if is_type_diagnostic_item(cx, ty, sym::Option) {\n         title = \"found `.or(Some(\u2026)).unwrap()`\";\n-        if let Some(content) = get_content_if_is(or_arg, \"Some\") {\n+        if let Some(content) = get_content_if_ctor_matches(cx, or_arg, LangItem::OptionSome) {\n             or_arg_content = content;\n         } else {\n             return;\n         }\n     } else if is_type_diagnostic_item(cx, ty, sym::Result) {\n         title = \"found `.or(Ok(\u2026)).unwrap()`\";\n-        if let Some(content) = get_content_if_is(or_arg, \"Ok\") {\n+        if let Some(content) = get_content_if_ctor_matches(cx, or_arg, LangItem::ResultOk) {\n             or_arg_content = content;\n         } else {\n             return;\n@@ -64,19 +63,13 @@ pub(super) fn check<'tcx>(\n     );\n }\n \n-/// is expr a Call to name? if so, return what it's wrapping\n-/// name might be \"Some\", \"Ok\", \"Err\", etc.\n-fn get_content_if_is<'a>(expr: &Expr<'a>, name: &str) -> Option<Span> {\n-    if_chain! {\n-        if let ExprKind::Call(some_expr, [arg]) = expr.kind;\n-        if let ExprKind::Path(QPath::Resolved(_, path)) = &some_expr.kind;\n-        if let Some(path_segment) = path.segments.first();\n-        if path_segment.ident.name.as_str() == name;\n-        then {\n-            Some(arg.span)\n-        }\n-        else {\n-            None\n-        }\n+fn get_content_if_ctor_matches(cx: &LateContext<'_>, expr: &Expr<'_>, item: LangItem) -> Option<Span> {\n+    if let ExprKind::Call(some_expr, [arg]) = expr.kind\n+        && let ExprKind::Path(qpath) = &some_expr.kind\n+        && is_lang_ctor(cx, qpath, item)\n+    {\n+        Some(arg.span)\n+    } else {\n+        None\n     }\n }"}]}