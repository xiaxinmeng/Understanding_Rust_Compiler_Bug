{"sha": "3d85cc24e7c9a62359ca837570d5e08105d22036", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkODVjYzI0ZTdjOWE2MjM1OWNhODM3NTcwZDVlMDgxMDVkMjIwMzY=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-04T23:36:06Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-04T23:36:06Z"}, "message": "new regex syntax lint, fixes #597", "tree": {"sha": "389423efe97ef0555364b2daa1ee9e1fae64aacf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/389423efe97ef0555364b2daa1ee9e1fae64aacf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d85cc24e7c9a62359ca837570d5e08105d22036", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d85cc24e7c9a62359ca837570d5e08105d22036", "html_url": "https://github.com/rust-lang/rust/commit/3d85cc24e7c9a62359ca837570d5e08105d22036", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d85cc24e7c9a62359ca837570d5e08105d22036/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b90288ecedb7b9d17a5470339a73cf53dc561079", "url": "https://api.github.com/repos/rust-lang/rust/commits/b90288ecedb7b9d17a5470339a73cf53dc561079", "html_url": "https://github.com/rust-lang/rust/commit/b90288ecedb7b9d17a5470339a73cf53dc561079"}], "stats": {"total": 85, "additions": 81, "deletions": 4}, "files": [{"sha": "c0d600e418c9d790c6abdbdbfaded77e25470cd3", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d85cc24e7c9a62359ca837570d5e08105d22036/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3d85cc24e7c9a62359ca837570d5e08105d22036/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=3d85cc24e7c9a62359ca837570d5e08105d22036", "patch": "@@ -19,6 +19,7 @@ plugin = true\n [dependencies]\n unicode-normalization = \"0.1\"\n semver = \"0.2.1\"\n+regex-syntax = \"0.2.2\"\n \n [dev-dependencies]\n compiletest_rs = \"0.0.11\""}, {"sha": "05cc5031fcede132a9b766a4b0511e96689b5fc7", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d85cc24e7c9a62359ca837570d5e08105d22036/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/3d85cc24e7c9a62359ca837570d5e08105d22036/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=3d85cc24e7c9a62359ca837570d5e08105d22036", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 109 lints included in this crate:\n+There are 111 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -46,6 +46,7 @@ name\n [identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                                     | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n [ineffective_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#ineffective_bit_mask)                   | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n [inline_always](https://github.com/Manishearth/rust-clippy/wiki#inline_always)                                 | warn    | `#[inline(always)]` is a bad idea in most cases\n+[invalid_regex](https://github.com/Manishearth/rust-clippy/wiki#invalid_regex)                                 | deny    | finds invalid regular expressions in `Regex::new(_)` invocations\n [items_after_statements](https://github.com/Manishearth/rust-clippy/wiki#items_after_statements)               | warn    | finds blocks where an item comes after a statement\n [iter_next_loop](https://github.com/Manishearth/rust-clippy/wiki#iter_next_loop)                               | warn    | for-looping over `_.next()` which is probably not intended\n [len_without_is_empty](https://github.com/Manishearth/rust-clippy/wiki#len_without_is_empty)                   | warn    | traits and impls that have `.len()` but not `.is_empty()`\n@@ -85,6 +86,7 @@ name\n [range_zip_with_len](https://github.com/Manishearth/rust-clippy/wiki#range_zip_with_len)                       | warn    | zipping iterator with a range when enumerate() would do\n [redundant_closure](https://github.com/Manishearth/rust-clippy/wiki#redundant_closure)                         | warn    | using redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n [redundant_pattern](https://github.com/Manishearth/rust-clippy/wiki#redundant_pattern)                         | warn    | using `name @ _` in a pattern\n+[regex_macro](https://github.com/Manishearth/rust-clippy/wiki#regex_macro)                                     | allow   | finds use of `regex!(_)`, suggests `Regex::new(_)` instead\n [result_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#result_unwrap_used)                       | allow   | using `Result.unwrap()`, which might be better handled\n [reverse_range_loop](https://github.com/Manishearth/rust-clippy/wiki#reverse_range_loop)                       | warn    | Iterating over an empty range, such as `10..0` or `5..5`\n [search_is_some](https://github.com/Manishearth/rust-clippy/wiki#search_is_some)                               | warn    | using an iterator search followed by `is_some()`, which is more succinctly expressed as a call to `any()`"}, {"sha": "87d23c96d369d7ce15a7dbc886ff935c002af72b", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d85cc24e7c9a62359ca837570d5e08105d22036/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d85cc24e7c9a62359ca837570d5e08105d22036/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=3d85cc24e7c9a62359ca837570d5e08105d22036", "patch": "@@ -28,6 +28,9 @@ extern crate unicode_normalization;\n // for semver check in attrs.rs\n extern crate semver;\n \n+// for regex checking\n+extern crate regex_syntax;\n+\n extern crate rustc_plugin;\n \n use rustc_plugin::Registry;\n@@ -82,6 +85,7 @@ pub mod derive;\n pub mod print;\n pub mod vec;\n pub mod drop_ref;\n+pub mod regex;\n \n mod reexport {\n     pub use syntax::ast::{Name, NodeId};\n@@ -150,7 +154,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box vec::UselessVec);\n     reg.register_late_lint_pass(box drop_ref::DropRefPass);\n     reg.register_late_lint_pass(box types::AbsurdUnsignedComparisons);\n-\n+    reg.register_late_lint_pass(box regex::RegexPass);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         matches::SINGLE_MATCH_ELSE,\n@@ -163,7 +167,6 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         shadow::SHADOW_REUSE,\n         shadow::SHADOW_SAME,\n         shadow::SHADOW_UNRELATED,\n-        strings::STRING_ADD,\n         strings::STRING_ADD_ASSIGN,\n         types::CAST_POSSIBLE_TRUNCATION,\n         types::CAST_POSSIBLE_WRAP,\n@@ -250,6 +253,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         ptr_arg::PTR_ARG,\n         ranges::RANGE_STEP_BY_ZERO,\n         ranges::RANGE_ZIP_WITH_LEN,\n+        regex::INVALID_REGEX,\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,\n         strings::STRING_LIT_AS_BYTES,"}, {"sha": "e3363ad1df0e20125dc7c7f47b43d965514065b7", "filename": "src/regex.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3d85cc24e7c9a62359ca837570d5e08105d22036/src%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d85cc24e7c9a62359ca837570d5e08105d22036/src%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fregex.rs?ref=3d85cc24e7c9a62359ca837570d5e08105d22036", "patch": "@@ -0,0 +1,53 @@\n+use regex_syntax;\n+use std::error::Error;\n+use syntax::codemap::{Span, BytePos, Pos};\n+use rustc_front::hir::*;\n+use rustc::middle::const_eval::{eval_const_expr_partial, ConstVal};\n+use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n+use rustc::lint::*;\n+\n+use utils::{match_path, REGEX_NEW_PATH, span_lint};\n+\n+/// **What it does:** This lint checks `Regex::new(_)` invocations for correct regex syntax. It is `deny` by default.\n+///\n+/// **Why is this bad?** This will lead to a runtime panic.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:** `Regex::new(\"|\")`\n+declare_lint! {\n+    pub INVALID_REGEX,\n+    Deny,\n+    \"finds invalid regular expressions in `Regex::new(_)` invocations\"\n+}\n+\n+#[derive(Copy,Clone)]\n+pub struct RegexPass;\n+\n+impl LintPass for RegexPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(INVALID_REGEX)\n+    }\n+}\n+\n+impl LateLintPass for RegexPass {\n+    fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        if_let_chain!{[\n+            let ExprCall(ref fun, ref args) = expr.node,\n+            let ExprPath(_, ref path) = fun.node,\n+            match_path(path, &REGEX_NEW_PATH) && args.len() == 1,\n+            let Ok(ConstVal::Str(r)) = eval_const_expr_partial(cx.tcx, \n+                                                               &*args[0],\n+                                                               ExprTypeChecked,\n+                                                               None),\n+            let Err(e) = regex_syntax::Expr::parse(&r)\n+        ], {\n+            let lo = args[0].span.lo + BytePos::from_usize(e.position());\n+            let span = Span{ lo: lo, hi: lo, expn_id: args[0].span.expn_id };\n+            span_lint(cx,\n+                      INVALID_REGEX,\n+                      span,\n+                      &format!(\"Regex syntax error: {}\", e.description()));\n+        }}\n+    }\n+}"}, {"sha": "8f542431d64514106bc71deacd692ae6b67d2125", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d85cc24e7c9a62359ca837570d5e08105d22036/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d85cc24e7c9a62359ca837570d5e08105d22036/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=3d85cc24e7c9a62359ca837570d5e08105d22036", "patch": "@@ -36,6 +36,7 @@ pub const LL_PATH: [&'static str; 3] = [\"collections\", \"linked_list\", \"LinkedLis\n pub const MUTEX_PATH: [&'static str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n pub const OPEN_OPTIONS_PATH: [&'static str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n pub const OPTION_PATH: [&'static str; 3] = [\"core\", \"option\", \"Option\"];\n+pub const REGEX_NEW_PATH: [&'static str; 3] = [\"regex\", \"Regex\", \"new\"];\n pub const RESULT_PATH: [&'static str; 3] = [\"core\", \"result\", \"Result\"];\n pub const STRING_PATH: [&'static str; 3] = [\"collections\", \"string\", \"String\"];\n pub const VEC_FROM_ELEM_PATH: [&'static str; 3] = [\"std\", \"vec\", \"from_elem\"];"}, {"sha": "e2be26a999ea5792a98ae60ec42ded568852d862", "filename": "tests/compile-fail/regex.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3d85cc24e7c9a62359ca837570d5e08105d22036/tests%2Fcompile-fail%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d85cc24e7c9a62359ca837570d5e08105d22036/tests%2Fcompile-fail%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fregex.rs?ref=3d85cc24e7c9a62359ca837570d5e08105d22036", "patch": "@@ -0,0 +1,16 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![allow(unused)]\n+#![deny(invalid_regex)]\n+\n+extern crate regex;\n+\n+use regex::Regex;\n+\n+fn main() {\n+    let pipe_in_wrong_position = Regex::new(\"|\");\n+    //~^ERROR: Regex syntax error: empty alternate\n+    let wrong_char_range = Regex::new(\"[z-a]\"); \n+    //~^ERROR: Regex syntax error: invalid character class range\n+}"}, {"sha": "92d2671eaa749eb5954761e82fc5f6b8c1f7f02a", "filename": "tests/compile-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d85cc24e7c9a62359ca837570d5e08105d22036/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d85cc24e7c9a62359ca837570d5e08105d22036/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=3d85cc24e7c9a62359ca837570d5e08105d22036", "patch": "@@ -7,7 +7,7 @@ fn run_mode(mode: &'static str) {\n     let mut config = compiletest::default_config();\n \n     let cfg_mode = mode.parse().ok().expect(\"Invalid mode\");\n-    config.target_rustcflags = Some(\"-L target/debug/\".to_owned());\n+    config.target_rustcflags = Some(\"-L target/debug/ -L target/debug/deps\".to_owned());\n     if let Ok(name) = var::<&str>(\"TESTNAME\") {\n         let s : String = name.to_owned();\n         config.filter = Some(s)"}]}