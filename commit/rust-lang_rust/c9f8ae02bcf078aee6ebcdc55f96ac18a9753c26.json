{"sha": "c9f8ae02bcf078aee6ebcdc55f96ac18a9753c26", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZjhhZTAyYmNmMDc4YWVlNmViY2RjNTVmOTZhYzE4YTk3NTNjMjY=", "commit": {"author": {"name": "Gareth Daniel Smith", "email": "garethdanielsmith@gmail.com", "date": "2012-05-20T13:06:54Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-22T00:38:05Z"}, "message": "add a seeded random number generator so that sequences of random numbers can be easily reproduced (for https://github.com/mozilla/rust/issues/2379)", "tree": {"sha": "7e91e2eafd38d3893c583251b108d79240bea888", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e91e2eafd38d3893c583251b108d79240bea888"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9f8ae02bcf078aee6ebcdc55f96ac18a9753c26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9f8ae02bcf078aee6ebcdc55f96ac18a9753c26", "html_url": "https://github.com/rust-lang/rust/commit/c9f8ae02bcf078aee6ebcdc55f96ac18a9753c26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9f8ae02bcf078aee6ebcdc55f96ac18a9753c26/comments", "author": {"login": "Dretch", "id": 1428731, "node_id": "MDQ6VXNlcjE0Mjg3MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1428731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dretch", "html_url": "https://github.com/Dretch", "followers_url": "https://api.github.com/users/Dretch/followers", "following_url": "https://api.github.com/users/Dretch/following{/other_user}", "gists_url": "https://api.github.com/users/Dretch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dretch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dretch/subscriptions", "organizations_url": "https://api.github.com/users/Dretch/orgs", "repos_url": "https://api.github.com/users/Dretch/repos", "events_url": "https://api.github.com/users/Dretch/events{/privacy}", "received_events_url": "https://api.github.com/users/Dretch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64130f158950d5b4746b7dce47cf4ce20dd934dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/64130f158950d5b4746b7dce47cf4ce20dd934dd", "html_url": "https://github.com/rust-lang/rust/commit/64130f158950d5b4746b7dce47cf4ce20dd934dd"}], "stats": {"total": 166, "additions": 116, "deletions": 50}, "files": [{"sha": "a6ce71fbf9dbc5b34aa230390c52396376b680bd", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8ae02bcf078aee6ebcdc55f96ac18a9753c26/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8ae02bcf078aee6ebcdc55f96ac18a9753c26/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=c9f8ae02bcf078aee6ebcdc55f96ac18a9753c26", "patch": "@@ -1,12 +1,14 @@\n #[doc = \"Random number generation\"];\n \n-export rng, weighted, extensions;\n+export rng, seed, seeded_rng, weighted, extensions;\n \n enum rctx {}\n \n #[abi = \"cdecl\"]\n native mod rustrt {\n+    fn rand_seed() -> [u8];\n     fn rand_new() -> *rctx;\n+    fn rand_new_seeded(seed: [u8]) -> *rctx;\n     fn rand_next(c: *rctx) -> u32;\n     fn rand_free(c: *rctx);\n }\n@@ -227,20 +229,50 @@ impl extensions for rng {\n \n }\n \n-#[doc = \"Create a random number generator\"]\n-fn rng() -> rng {\n-    resource rand_res(c: *rctx) { rustrt::rand_free(c); }\n+resource rand_res(c: *rctx) { rustrt::rand_free(c); }\n \n-    impl of rng for @rand_res {\n-        fn next() -> u32 { ret rustrt::rand_next(**self); }\n-    }\n+impl of rng for @rand_res {\n+    fn next() -> u32 { ret rustrt::rand_next(**self); }\n+}\n \n+#[doc = \"Create a new random seed for seeded_rng\"]\n+fn seed() -> [u8] {\n+    rustrt::rand_seed()\n+}\n+\n+#[doc = \"Create a random number generator with a system specified seed\"]\n+fn rng() -> rng {\n     @rand_res(rustrt::rand_new()) as rng\n }\n \n+#[doc = \"Create a random number generator using the specified seed. A \\\n+         generator constructed with a given seed will generate the same \\\n+         sequence of values as all other generators constructed with the \\\n+         same seed. The seed may be any length.\"]\n+fn seeded_rng(seed: [u8]) -> rng {\n+    @rand_res(rustrt::rand_new_seeded(seed)) as rng\n+}\n+\n #[cfg(test)]\n mod tests {\n \n+    #[test]\n+    fn rng_seeded() {\n+        let seed = rand::seed();\n+        let ra = rand::seeded_rng(seed);\n+        let rb = rand::seeded_rng(seed);\n+        assert ra.gen_str(100u) == rb.gen_str(100u);\n+    }\n+\n+    #[test]\n+    fn rng_seeded_custom_seed() {\n+        // much shorter than generated seeds which are 1024 bytes\n+        let seed = [2u8, 32u8, 4u8, 32u8, 51u8];\n+        let ra = rand::seeded_rng(seed);\n+        let rb = rand::seeded_rng(seed);\n+        assert ra.gen_str(100u) == rb.gen_str(100u);\n+    }\n+\n     #[test]\n     fn gen_int_from() {\n         let r = rand::rng();"}, {"sha": "b8b8bc30163ba81ddd835e9cc923fd62dd997ff8", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8ae02bcf078aee6ebcdc55f96ac18a9753c26/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8ae02bcf078aee6ebcdc55f96ac18a9753c26/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=c9f8ae02bcf078aee6ebcdc55f96ac18a9753c26", "patch": "@@ -178,16 +178,41 @@ rust_str_push(rust_vec** sp, uint8_t byte) {\n     (*sp)->fill = fill + 1;\n }\n \n+extern \"C\" CDECL rust_vec*\n+rand_seed() {\n+    size_t size = sizeof(ub4) * RANDSIZ;\n+    rust_task *task = rust_get_current_task();\n+    rust_vec *v = (rust_vec *) task->kernel->malloc(vec_size<uint8_t>(size),\n+                                            \"rand_seed\");\n+    v->fill = v->alloc = size;\n+    isaac_seed((uint8_t*) &v->data);\n+    return v;\n+}\n+\n extern \"C\" CDECL void *\n rand_new() {\n     rust_task *task = rust_get_current_task();\n     rust_sched_loop *thread = task->sched_loop;\n-    randctx *rctx = (randctx *) task->malloc(sizeof(randctx), \"randctx\");\n+    randctx *rctx = (randctx *) task->malloc(sizeof(randctx), \"rand_new\");\n+    if (!rctx) {\n+        task->fail();\n+        return NULL;\n+    }\n+    isaac_init(thread->kernel, rctx, NULL);\n+    return rctx;\n+}\n+\n+extern \"C\" CDECL void *\n+rand_new_seeded(rust_vec* seed) {\n+    rust_task *task = rust_get_current_task();\n+    rust_sched_loop *thread = task->sched_loop;\n+    randctx *rctx = (randctx *) task->malloc(sizeof(randctx),\n+                                             \"rand_new_seeded\");\n     if (!rctx) {\n         task->fail();\n         return NULL;\n     }\n-    isaac_init(thread->kernel, rctx);\n+    isaac_init(thread->kernel, rctx, seed);\n     return rctx;\n }\n "}, {"sha": "697f460d3a64bf235ef535964b4d1bb05e6bb9dc", "filename": "src/rt/rust_sched_loop.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8ae02bcf078aee6ebcdc55f96ac18a9753c26/src%2Frt%2Frust_sched_loop.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8ae02bcf078aee6ebcdc55f96ac18a9753c26/src%2Frt%2Frust_sched_loop.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.cpp?ref=c9f8ae02bcf078aee6ebcdc55f96ac18a9753c26", "patch": "@@ -29,7 +29,7 @@ rust_sched_loop::rust_sched_loop(rust_scheduler *sched,int id) :\n     name(\"main\")\n {\n     LOGPTR(this, \"new dom\", (uintptr_t)this);\n-    isaac_init(kernel, &rctx);\n+    isaac_init(kernel, &rctx, NULL);\n \n     if (!tls_initialized)\n         init_tls();"}, {"sha": "35bd724255737c20c2506b528dff87636cf0a63f", "filename": "src/rt/rust_util.h", "status": "modified", "additions": 47, "deletions": 40, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8ae02bcf078aee6ebcdc55f96ac18a9753c26/src%2Frt%2Frust_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8ae02bcf078aee6ebcdc55f96ac18a9753c26/src%2Frt%2Frust_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.h?ref=c9f8ae02bcf078aee6ebcdc55f96ac18a9753c26", "patch": "@@ -32,46 +32,6 @@ align_to(T size, size_t alignment) {\n     return x;\n }\n \n-// Initialization helper for ISAAC RNG\n-\n-inline void\n-isaac_init(rust_kernel *kernel, randctx *rctx)\n-{\n-        memset(rctx, 0, sizeof(randctx));\n-\n-        char *rust_seed = kernel->env->rust_seed;\n-        if (rust_seed != NULL) {\n-            ub4 seed = (ub4) atoi(rust_seed);\n-            for (size_t i = 0; i < RANDSIZ; i ++) {\n-                memcpy(&rctx->randrsl[i], &seed, sizeof(ub4));\n-                seed = (seed + 0x7ed55d16) + (seed << 12);\n-            }\n-        } else {\n-#ifdef __WIN32__\n-            HCRYPTPROV hProv;\n-            kernel->win32_require\n-                (_T(\"CryptAcquireContext\"),\n-                 CryptAcquireContext(&hProv, NULL, NULL, PROV_RSA_FULL,\n-                                     CRYPT_VERIFYCONTEXT|CRYPT_SILENT));\n-            kernel->win32_require\n-                (_T(\"CryptGenRandom\"),\n-                 CryptGenRandom(hProv, sizeof(rctx->randrsl),\n-                                (BYTE*)(&rctx->randrsl)));\n-            kernel->win32_require\n-                (_T(\"CryptReleaseContext\"),\n-                 CryptReleaseContext(hProv, 0));\n-#else\n-            int fd = open(\"/dev/urandom\", O_RDONLY);\n-            assert(fd > 0);\n-            assert(read(fd, (void*) &rctx->randrsl, sizeof(rctx->randrsl))\n-                   == sizeof(rctx->randrsl));\n-            assert(close(fd) == 0);\n-#endif\n-        }\n-\n-        randinit(rctx, 1);\n-}\n-\n // Interior vectors (rust-user-code level).\n \n struct\n@@ -136,6 +96,53 @@ make_str_vec(rust_kernel* kernel, size_t nstrs, char **strs) {\n     return v;\n }\n \n+// Initialization helpers for ISAAC RNG\n+\n+inline void isaac_seed(uint8_t* dest)\n+{\n+    size_t size = sizeof(ub4) * RANDSIZ;\n+#ifdef __WIN32__\n+    HCRYPTPROV hProv;\n+    kernel->win32_require\n+        (_T(\"CryptAcquireContext\"),\n+         CryptAcquireContext(&hProv, NULL, NULL, PROV_RSA_FULL,\n+                             CRYPT_VERIFYCONTEXT|CRYPT_SILENT));\n+    kernel->win32_require\n+        (_T(\"CryptGenRandom\"), CryptGenRandom(hProv, size, (BYTE*) dest));\n+    kernel->win32_require\n+        (_T(\"CryptReleaseContext\"), CryptReleaseContext(hProv, 0));\n+#else\n+    int fd = open(\"/dev/urandom\", O_RDONLY);\n+    assert(fd > 0);\n+    assert(read(fd, dest, size) == (int) size);\n+    assert(close(fd) == 0);\n+#endif\n+}\n+\n+inline void\n+isaac_init(rust_kernel *kernel, randctx *rctx, rust_vec* user_seed)\n+{\n+    memset(rctx, 0, sizeof(randctx));\n+\n+    char *env_seed = kernel->env->rust_seed;\n+    if (user_seed != NULL) {\n+        // ignore bytes after the required length\n+        size_t seed_len = user_seed->fill < sizeof(rctx->randrsl)\n+            ? user_seed->fill : sizeof(rctx->randrsl);\n+        memcpy(&rctx->randrsl, user_seed->data, seed_len);\n+    } else if (env_seed != NULL) {\n+        ub4 seed = (ub4) atoi(env_seed);\n+        for (size_t i = 0; i < RANDSIZ; i ++) {\n+            memcpy(&rctx->randrsl[i], &seed, sizeof(ub4));\n+            seed = (seed + 0x7ed55d16) + (seed << 12);\n+        }\n+    } else {\n+        isaac_seed((uint8_t*) &rctx->randrsl);\n+    }\n+\n+    randinit(rctx, 1);\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "a93089b8f8bc4abc7816018704fa40177087bbf2", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8ae02bcf078aee6ebcdc55f96ac18a9753c26/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8ae02bcf078aee6ebcdc55f96ac18a9753c26/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=c9f8ae02bcf078aee6ebcdc55f96ac18a9753c26", "patch": "@@ -26,7 +26,9 @@ rust_port_id_send\n rust_port_select\n rand_free\n rand_new\n+rand_new_seeded\n rand_next\n+rand_seed\n refcount\n rust_get_sched_id\n rust_new_sched"}]}