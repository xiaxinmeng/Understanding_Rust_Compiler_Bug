{"sha": "976336dab036f8eb7a54700068a32210e0dbc916", "node_id": "C_kwDOAAsO6NoAKDk3NjMzNmRhYjAzNmY4ZWI3YTU0NzAwMDY4YTMyMjEwZTBkYmM5MTY", "commit": {"author": {"name": "Noa", "email": "coolreader18@gmail.com", "date": "2022-06-06T19:45:25Z"}, "committer": {"name": "Noa", "email": "coolreader18@gmail.com", "date": "2022-06-06T19:47:49Z"}, "message": "Add proper tracing spans to rustc_trait_selection::traits::error_reporting", "tree": {"sha": "8e907a8b3898b665030c00030c4e45fecdb435c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e907a8b3898b665030c00030c4e45fecdb435c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/976336dab036f8eb7a54700068a32210e0dbc916", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEtojRJkPnkSUwmWPDf599sXaMWc8FAmKeWeUACgkQf599sXaM\nWc8V0RAAn1eLPdpv1qoo/s0vvF6TftXG1TKl3HAZHCLggqNuBQPa7CAj+GhuqkB4\nn9fkQ32IHlXPlDs1pvc1Pyvg0Yzx1ljQ5Hc+oyzcM9KuWHjDm/lc2Yk2RhsD0wQC\npV5CL5+rC2McLlL5MF+zfLXSZmXy1Osoyt51wMu0rU6NVGwmf+dqvaA1cv2pGzeI\nGycUwyiugADHH8ikXDqQkd6Nm0edx6mDBFbhaITBN+IP1U8pThjY5t0OzUkLAJ1U\nTlx93iJICLIuG7JqkJ52i1a+s5dZONuwdFy6WMt86m/7dsCcZq1LCT++G+8mr7ra\n5tUzf7EmlwVoT4BJ48/Onw3ww+kqf1zXcwU3Grekn/xXLKqyNiZ54XVq/DlPgrlg\nkqbnLLjOsE6HgWh2is8yjtkN0fmCFjjWP16UVXQcpY3+xFN290KJryV6GDxlFeW8\nZxg3e4MNUCzrLEU89DjLGiXUBPXVVA72fsLfR/OWHMbkF8mZfWUfmk8zA8KmXHlR\nhsGOvHEruiT7w0iV0iCemw+9qw/k+/Zz9p+U6UknoEKqugzmq8QREibz6NN/1lLr\n896vdwz8KXpyHHFuvVq06T2ctMJqKaiEN14I79ds7f2Y7UjfcJ9Mkp1tYkJ1xa4A\nfEfbBxlWM4g980CXzrcjWlbAvSHkV/HjHsgtXqeZSlMGIfDzeQ4=\n=31xV\n-----END PGP SIGNATURE-----", "payload": "tree 8e907a8b3898b665030c00030c4e45fecdb435c8\nparent 9d20fd109809f20c049d6895a5be27a1fbd39daa\nauthor Noa <coolreader18@gmail.com> 1654544725 -0500\ncommitter Noa <coolreader18@gmail.com> 1654544869 -0500\n\nAdd proper tracing spans to rustc_trait_selection::traits::error_reporting\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/976336dab036f8eb7a54700068a32210e0dbc916", "html_url": "https://github.com/rust-lang/rust/commit/976336dab036f8eb7a54700068a32210e0dbc916", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/976336dab036f8eb7a54700068a32210e0dbc916/comments", "author": {"login": "coolreader18", "id": 33094578, "node_id": "MDQ6VXNlcjMzMDk0NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/33094578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coolreader18", "html_url": "https://github.com/coolreader18", "followers_url": "https://api.github.com/users/coolreader18/followers", "following_url": "https://api.github.com/users/coolreader18/following{/other_user}", "gists_url": "https://api.github.com/users/coolreader18/gists{/gist_id}", "starred_url": "https://api.github.com/users/coolreader18/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coolreader18/subscriptions", "organizations_url": "https://api.github.com/users/coolreader18/orgs", "repos_url": "https://api.github.com/users/coolreader18/repos", "events_url": "https://api.github.com/users/coolreader18/events{/privacy}", "received_events_url": "https://api.github.com/users/coolreader18/received_events", "type": "User", "site_admin": false}, "committer": {"login": "coolreader18", "id": 33094578, "node_id": "MDQ6VXNlcjMzMDk0NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/33094578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coolreader18", "html_url": "https://github.com/coolreader18", "followers_url": "https://api.github.com/users/coolreader18/followers", "following_url": "https://api.github.com/users/coolreader18/following{/other_user}", "gists_url": "https://api.github.com/users/coolreader18/gists{/gist_id}", "starred_url": "https://api.github.com/users/coolreader18/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coolreader18/subscriptions", "organizations_url": "https://api.github.com/users/coolreader18/orgs", "repos_url": "https://api.github.com/users/coolreader18/repos", "events_url": "https://api.github.com/users/coolreader18/events{/privacy}", "received_events_url": "https://api.github.com/users/coolreader18/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d20fd109809f20c049d6895a5be27a1fbd39daa", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d20fd109809f20c049d6895a5be27a1fbd39daa", "html_url": "https://github.com/rust-lang/rust/commit/9d20fd109809f20c049d6895a5be27a1fbd39daa"}], "stats": {"total": 94, "additions": 36, "deletions": 58}, "files": [{"sha": "a81014aac7b02f160b23c4d476cd1deb0a419c34", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/976336dab036f8eb7a54700068a32210e0dbc916/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976336dab036f8eb7a54700068a32210e0dbc916/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=976336dab036f8eb7a54700068a32210e0dbc916", "patch": "@@ -259,7 +259,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let cycle = self.resolve_vars_if_possible(cycle.to_owned());\n         assert!(!cycle.is_empty());\n \n-        debug!(\"report_overflow_error_cycle: cycle={:?}\", cycle);\n+        debug!(?cycle, \"report_overflow_error_cycle\");\n \n         // The 'deepest' obligation is most likely to have a useful\n         // cause 'backtrace'\n@@ -1513,6 +1513,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip_all)]\n     fn report_projection_error(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n@@ -1551,15 +1552,9 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                     &mut obligations,\n                 );\n \n-                debug!(\n-                    \"report_projection_error obligation.cause={:?} obligation.param_env={:?}\",\n-                    obligation.cause, obligation.param_env\n-                );\n+                debug!(?obligation.cause, ?obligation.param_env);\n \n-                debug!(\n-                    \"report_projection_error normalized_ty={:?} data.ty={:?}\",\n-                    normalized_ty, data.term,\n-                );\n+                debug!(?normalized_ty, data.ty = ?data.term);\n \n                 let is_normalized_ty_expected = !matches!(\n                     obligation.cause.code().peel_derives(),\n@@ -2346,6 +2341,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip_all)]\n     fn suggest_unsized_bound_if_applicable(\n         &self,\n         err: &mut Diagnostic,\n@@ -2360,10 +2356,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         )  else {\n             return;\n         };\n-        debug!(\n-            \"suggest_unsized_bound_if_applicable: pred={:?} item_def_id={:?} span={:?}\",\n-            pred, item_def_id, span\n-        );\n+        debug!(?pred, ?item_def_id, ?span);\n \n         let (Some(node), true) = (\n             self.tcx.hir().get_if_local(item_def_id),\n@@ -2374,6 +2367,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         self.maybe_suggest_unsized_generics(err, span, node);\n     }\n \n+    #[instrument(level = \"debug\", skip_all)]\n     fn maybe_suggest_unsized_generics<'hir>(\n         &self,\n         err: &mut Diagnostic,\n@@ -2384,8 +2378,8 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n             return;\n         };\n         let sized_trait = self.tcx.lang_items().sized_trait();\n-        debug!(\"maybe_suggest_unsized_generics: generics.params={:?}\", generics.params);\n-        debug!(\"maybe_suggest_unsized_generics: generics.predicates={:?}\", generics.predicates);\n+        debug!(?generics.params);\n+        debug!(?generics.predicates);\n         let Some(param) = generics.params.iter().find(|param| param.span == span) else {\n             return;\n         };\n@@ -2399,7 +2393,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         if explicitly_sized {\n             return;\n         }\n-        debug!(\"maybe_suggest_unsized_generics: param={:?}\", param);\n+        debug!(?param);\n         match node {\n             hir::Node::Item(\n                 item @ hir::Item {\n@@ -2517,7 +2511,7 @@ impl<'v> Visitor<'v> for FindTypeParam {\n                 if path.segments.len() == 1 && path.segments[0].ident.name == self.param =>\n             {\n                 if !self.nested {\n-                    debug!(\"FindTypeParam::visit_ty: ty={:?}\", ty);\n+                    debug!(?ty, \"FindTypeParam::visit_ty\");\n                     self.invalid_spans.push(ty.span);\n                 }\n             }"}, {"sha": "678f39498723cb17f56d5e1b87e5b13536e1050f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 25, "deletions": 41, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/976336dab036f8eb7a54700068a32210e0dbc916/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976336dab036f8eb7a54700068a32210e0dbc916/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=976336dab036f8eb7a54700068a32210e0dbc916", "patch": "@@ -1623,16 +1623,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     /// ```\n     ///\n     /// Returns `true` if an async-await specific note was added to the diagnostic.\n+    #[instrument(level = \"debug\", skip_all, fields(?obligation.predicate, ?obligation.cause.span))]\n     fn maybe_note_obligation_cause_for_async_await(\n         &self,\n         err: &mut Diagnostic,\n         obligation: &PredicateObligation<'tcx>,\n     ) -> bool {\n-        debug!(\n-            \"maybe_note_obligation_cause_for_async_await: obligation.predicate={:?} \\\n-                obligation.cause.span={:?}\",\n-            obligation.predicate, obligation.cause.span\n-        );\n         let hir = self.tcx.hir();\n \n         // Attempt to detect an async-await error by looking at the obligation causes, looking\n@@ -1672,18 +1668,17 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let mut seen_upvar_tys_infer_tuple = false;\n \n         while let Some(code) = next_code {\n-            debug!(\"maybe_note_obligation_cause_for_async_await: code={:?}\", code);\n+            debug!(?code);\n             match code {\n                 ObligationCauseCode::FunctionArgumentObligation { parent_code, .. } => {\n                     next_code = Some(parent_code);\n                 }\n                 ObligationCauseCode::ImplDerivedObligation(cause) => {\n                     let ty = cause.derived.parent_trait_pred.skip_binder().self_ty();\n                     debug!(\n-                        \"maybe_note_obligation_cause_for_async_await: ImplDerived \\\n-                         parent_trait_ref={:?} self_ty.kind={:?}\",\n-                        cause.derived.parent_trait_pred,\n-                        ty.kind()\n+                        parent_trait_ref = ?cause.derived.parent_trait_pred,\n+                        self_ty.kind = ?ty.kind(),\n+                        \"ImplDerived\",\n                     );\n \n                     match *ty.kind() {\n@@ -1712,10 +1707,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 | ObligationCauseCode::BuiltinDerivedObligation(derived_obligation) => {\n                     let ty = derived_obligation.parent_trait_pred.skip_binder().self_ty();\n                     debug!(\n-                        \"maybe_note_obligation_cause_for_async_await: \\\n-                         parent_trait_ref={:?} self_ty.kind={:?}\",\n-                        derived_obligation.parent_trait_pred,\n-                        ty.kind()\n+                        parent_trait_ref = ?derived_obligation.parent_trait_pred,\n+                        self_ty.kind = ?ty.kind(),\n                     );\n \n                     match *ty.kind() {\n@@ -1745,7 +1738,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n \n         // Only continue if a generator was found.\n-        debug!(?generator, ?trait_ref, ?target_ty, \"maybe_note_obligation_cause_for_async_await\");\n+        debug!(?generator, ?trait_ref, ?target_ty);\n         let (Some(generator_did), Some(trait_ref), Some(target_ty)) = (generator, trait_ref, target_ty) else {\n             return false;\n         };\n@@ -1755,12 +1748,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let in_progress_typeck_results = self.in_progress_typeck_results.map(|t| t.borrow());\n         let generator_did_root = self.tcx.typeck_root_def_id(generator_did);\n         debug!(\n-            \"maybe_note_obligation_cause_for_async_await: generator_did={:?} \\\n-             generator_did_root={:?} in_progress_typeck_results.hir_owner={:?} span={:?}\",\n-            generator_did,\n-            generator_did_root,\n-            in_progress_typeck_results.as_ref().map(|t| t.hir_owner),\n-            span\n+            ?generator_did,\n+            ?generator_did_root,\n+            in_progress_typeck_results.hir_owner = ?in_progress_typeck_results.as_ref().map(|t| t.hir_owner),\n+            ?span,\n         );\n \n         let generator_body = generator_did\n@@ -1783,7 +1774,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         if let Some(body) = generator_body {\n             visitor.visit_body(body);\n         }\n-        debug!(\"maybe_note_obligation_cause_for_async_await: awaits = {:?}\", visitor.awaits);\n+        debug!(awaits = ?visitor.awaits);\n \n         // Look for a type inside the generator interior that matches the target type to get\n         // a span.\n@@ -1804,11 +1795,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             let ty_erased = self.tcx.erase_late_bound_regions(ty);\n             let ty_erased = self.tcx.erase_regions(ty_erased);\n             let eq = ty_erased == target_ty_erased;\n-            debug!(\n-                \"maybe_note_obligation_cause_for_async_await: ty_erased={:?} \\\n-                    target_ty_erased={:?} eq={:?}\",\n-                ty_erased, target_ty_erased, eq\n-            );\n+            debug!(?ty_erased, ?target_ty_erased, ?eq);\n             eq\n         };\n \n@@ -1883,6 +1870,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n     /// Unconditionally adds the diagnostic note described in\n     /// `maybe_note_obligation_cause_for_async_await`'s documentation comment.\n+    #[instrument(level = \"debug\", skip_all)]\n     fn note_obligation_cause_for_async_await(\n         &self,\n         err: &mut Diagnostic,\n@@ -2032,8 +2020,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     } else {\n                         // Look at the last interior type to get a span for the `.await`.\n                         debug!(\n-                            \"note_obligation_cause_for_async_await generator_interior_types: {:#?}\",\n-                            typeck_results.as_ref().map(|t| &t.generator_interior_types)\n+                            generator_interior_types = ?format_args!(\n+                                \"{:#?}\", typeck_results.as_ref().map(|t| &t.generator_interior_types)\n+                            ),\n                         );\n                         explain_yield(interior_span, yield_span, scope_span);\n                     }\n@@ -2068,7 +2057,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             // bar(Foo(std::ptr::null())).await;\n                             //     ^^^^^^^^^^^^^^^^^^^^^ raw-ptr `*T` created inside this struct ctor.\n                             // ```\n-                            debug!(\"parent_def_kind: {:?}\", self.tcx.def_kind(parent_did));\n+                            debug!(parent_def_kind = ?self.tcx.def_kind(parent_did));\n                             let is_raw_borrow_inside_fn_like_call =\n                                 match self.tcx.def_kind(parent_did) {\n                                     DefKind::Fn | DefKind::Ctor(..) => target_ty.is_unsafe_ptr(),\n@@ -2126,7 +2115,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         // Add a note for the item obligation that remains - normally a note pointing to the\n         // bound that introduced the obligation (e.g. `T: Send`).\n-        debug!(\"note_obligation_cause_for_async_await: next_code={:?}\", next_code);\n+        debug!(?next_code);\n         self.note_obligation_cause_code(\n             err,\n             &obligation.predicate,\n@@ -2683,20 +2672,16 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         ));\n     }\n \n+    #[instrument(\n+        level = \"debug\", skip(self, err), fields(trait_pred.self_ty = ?trait_pred.self_ty())\n+    )]\n     fn suggest_await_before_try(\n         &self,\n         err: &mut Diagnostic,\n         obligation: &PredicateObligation<'tcx>,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n         span: Span,\n     ) {\n-        debug!(\n-            \"suggest_await_before_try: obligation={:?}, span={:?}, trait_pred={:?}, trait_pred_self_ty={:?}\",\n-            obligation,\n-            span,\n-            trait_pred,\n-            trait_pred.self_ty()\n-        );\n         let body_hir_id = obligation.cause.body_id;\n         let item_id = self.tcx.hir().get_parent_node(body_hir_id);\n \n@@ -2734,14 +2719,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 );\n \n                 debug!(\n-                    \"suggest_await_before_try: normalized_projection_type {:?}\",\n-                    self.resolve_vars_if_possible(projection_ty)\n+                    normalized_projection_type = ?self.resolve_vars_if_possible(projection_ty)\n                 );\n                 let try_obligation = self.mk_trait_obligation_with_new_self_ty(\n                     obligation.param_env,\n                     trait_pred.map_bound(|trait_pred| (trait_pred, projection_ty.skip_binder())),\n                 );\n-                debug!(\"suggest_await_before_try: try_trait_obligation {:?}\", try_obligation);\n+                debug!(try_trait_obligation = ?try_obligation);\n                 if self.predicate_may_hold(&try_obligation)\n                     && let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span)\n                     && snippet.ends_with('?')"}]}