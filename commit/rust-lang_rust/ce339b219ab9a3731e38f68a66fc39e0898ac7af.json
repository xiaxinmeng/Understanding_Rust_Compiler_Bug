{"sha": "ce339b219ab9a3731e38f68a66fc39e0898ac7af", "node_id": "C_kwDOAAsO6NoAKGNlMzM5YjIxOWFiOWEzNzMxZTM4ZjY4YTY2ZmMzOWUwODk4YWM3YWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-06T03:16:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-06T03:16:29Z"}, "message": "Auto merge of #101241 - camsteffen:refactor-binding-annotations, r=cjgillot\n\n`BindingAnnotation` refactor\n\n* `ast::BindingMode` is deleted and replaced with `hir::BindingAnnotation` (which is moved to `ast`)\n* `BindingAnnotation` is changed from an enum to a tuple struct e.g. `BindingAnnotation(ByRef::No, Mutability::Mut)`\n* Associated constants added for convenience `BindingAnnotation::{NONE, REF, MUT, REF_MUT}`\n\nOne goal is to make it more clear that `BindingAnnotation` merely represents syntax `ref mut` and not the actual binding mode. This was especially confusing since we had `ast::BindingMode`->`hir::BindingAnnotation`->`thir::BindingMode`.\n\nI wish there were more symmetry between `ByRef` and `Mutability` (variant) naming (maybe `Mutable::Yes`?), and I also don't love how long the name `BindingAnnotation` is, but this seems like the best compromise. Ideas welcome.", "tree": {"sha": "cfb9df88a91a7c4236ba86fa920db699407c0c8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfb9df88a91a7c4236ba86fa920db699407c0c8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce339b219ab9a3731e38f68a66fc39e0898ac7af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce339b219ab9a3731e38f68a66fc39e0898ac7af", "html_url": "https://github.com/rust-lang/rust/commit/ce339b219ab9a3731e38f68a66fc39e0898ac7af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce339b219ab9a3731e38f68a66fc39e0898ac7af/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ccf843471131e48ce1bc78a93ca2829590ff741", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ccf843471131e48ce1bc78a93ca2829590ff741", "html_url": "https://github.com/rust-lang/rust/commit/2ccf843471131e48ce1bc78a93ca2829590ff741"}, {"sha": "e5f30f4dfa3b9311273b2546897b23ddafd17133", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f30f4dfa3b9311273b2546897b23ddafd17133", "html_url": "https://github.com/rust-lang/rust/commit/e5f30f4dfa3b9311273b2546897b23ddafd17133"}], "stats": {"total": 198, "additions": 95, "deletions": 103}, "files": [{"sha": "ae509aab1525f68d2598e5d903ec3f085789166f", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -503,7 +503,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n     }\n \n     fn check_pat(&mut self, cx: &LateContext<'tcx>, pat: &'tcx Pat<'_>) {\n-        if let PatKind::Binding(BindingAnnotation::Ref, id, name, _) = pat.kind {\n+        if let PatKind::Binding(BindingAnnotation::REF, id, name, _) = pat.kind {\n             if let Some(opt_prev_pat) = self.ref_locals.get_mut(&id) {\n                 // This binding id has been seen before. Add this pattern to the list of changes.\n                 if let Some(prev_pat) = opt_prev_pat {"}, {"sha": "b9ed4af02190b07c4eb7c5a409ab890be52e907b", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -128,7 +128,7 @@ fn look_in_block<'tcx, 'hir>(cx: &LateContext<'tcx>, kind: &'tcx ExprKind<'hir>)\n         if let Some(Node::Pat(res_pat)) = cx.tcx.hir().find(expr_res);\n \n         // Find id of the local we found in the block\n-        if let PatKind::Binding(BindingAnnotation::Unannotated, local_hir_id, _ident, None) = local.pat.kind;\n+        if let PatKind::Binding(BindingAnnotation::NONE, local_hir_id, _ident, None) = local.pat.kind;\n \n         // If those two are the same hir id\n         if res_pat.hir_id == local_hir_id;"}, {"sha": "0dd7f5bf000d20d69192bf6dfb5251380366251d", "filename": "clippy_lints/src/index_refutable_slice.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findex_refutable_slice.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -95,12 +95,14 @@ fn find_slice_values(cx: &LateContext<'_>, pat: &hir::Pat<'_>) -> FxIndexMap<hir\n     let mut removed_pat: FxHashSet<hir::HirId> = FxHashSet::default();\n     let mut slices: FxIndexMap<hir::HirId, SliceLintInformation> = FxIndexMap::default();\n     pat.walk_always(|pat| {\n-        if let hir::PatKind::Binding(binding, value_hir_id, ident, sub_pat) = pat.kind {\n-            // We'll just ignore mut and ref mut for simplicity sake right now\n-            if let hir::BindingAnnotation::Mutable | hir::BindingAnnotation::RefMut = binding {\n-                return;\n-            }\n-\n+        // We'll just ignore mut and ref mut for simplicity sake right now\n+        if let hir::PatKind::Binding(\n+            hir::BindingAnnotation(by_ref, hir::Mutability::Not),\n+            value_hir_id,\n+            ident,\n+            sub_pat,\n+        ) = pat.kind\n+        {\n             // This block catches bindings with sub patterns. It would be hard to build a correct suggestion\n             // for them and it's likely that the user knows what they are doing in such a case.\n             if removed_pat.contains(&value_hir_id) {\n@@ -116,7 +118,7 @@ fn find_slice_values(cx: &LateContext<'_>, pat: &hir::Pat<'_>) -> FxIndexMap<hir\n             if let ty::Slice(inner_ty) | ty::Array(inner_ty, _) = bound_ty.peel_refs().kind() {\n                 // The values need to use the `ref` keyword if they can't be copied.\n                 // This will need to be adjusted if the lint want to support mutable access in the future\n-                let src_is_ref = bound_ty.is_ref() && binding != hir::BindingAnnotation::Ref;\n+                let src_is_ref = bound_ty.is_ref() && by_ref != hir::ByRef::Yes;\n                 let needs_ref = !(src_is_ref || is_copy(cx, *inner_ty));\n \n                 let slice_info = slices"}, {"sha": "10fc0f4018efdd31c990809aa7a0fca44925fa40", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -4,7 +4,7 @@ use clippy_utils::{path_to_local_id, visitors::is_local_used};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::BindingAnnotation;\n+use rustc_hir::{BindingAnnotation, Mutability};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -98,7 +98,7 @@ impl<'tcx> LateLintPass<'tcx> for LetIfSeq {\n                     };\n \n                     let mutability = match mode {\n-                        BindingAnnotation::RefMut | BindingAnnotation::Mutable => \"<mut> \",\n+                        BindingAnnotation(_, Mutability::Mut) => \"<mut> \",\n                         _ => \"\",\n                     };\n "}, {"sha": "09b2376d5c04a6d68ad26d1d3abaaa8002f7d4db", "filename": "clippy_lints/src/loops/manual_find.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Floops%2Fmanual_find.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Floops%2Fmanual_find.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_find.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -106,7 +106,7 @@ fn get_binding(pat: &Pat<'_>) -> Option<HirId> {\n             hir_id = None;\n             return;\n         }\n-        if let BindingAnnotation::Unannotated = annotation {\n+        if let BindingAnnotation::NONE = annotation {\n             hir_id = Some(id);\n         }\n     });"}, {"sha": "fce2d54639cbf22af7ae546a0153ec48793b7978", "filename": "clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -44,7 +44,7 @@ fn check_for_mutability(cx: &LateContext<'_>, bound: &Expr<'_>) -> Option<HirId>\n     if_chain! {\n         if let Some(hir_id) = path_to_local(bound);\n         if let Node::Pat(pat) = cx.tcx.hir().get(hir_id);\n-        if let PatKind::Binding(BindingAnnotation::Mutable, ..) = pat.kind;\n+        if let PatKind::Binding(BindingAnnotation::MUT, ..) = pat.kind;\n         then {\n             return Some(hir_id);\n         }"}, {"sha": "aeefe6e33fbe9a9405175f3dd1ba6a3af7ea3f53", "filename": "clippy_lints/src/loops/same_item_push.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -7,7 +7,7 @@ use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, HirId, Node, Pat, PatKind, Stmt, StmtKind};\n+use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, HirId, Mutability, Node, Pat, PatKind, Stmt, StmtKind};\n use rustc_lint::LateContext;\n use rustc_span::symbol::sym;\n use std::iter::Iterator;\n@@ -65,7 +65,7 @@ pub(super) fn check<'tcx>(\n                             if_chain! {\n                                 if let Node::Pat(pat) = node;\n                                 if let PatKind::Binding(bind_ann, ..) = pat.kind;\n-                                if !matches!(bind_ann, BindingAnnotation::RefMut | BindingAnnotation::Mutable);\n+                                if !matches!(bind_ann, BindingAnnotation(_, Mutability::Mut));\n                                 let parent_node = cx.tcx.hir().get_parent_node(hir_id);\n                                 if let Some(Node::Local(parent_let_expr)) = cx.tcx.hir().find(parent_node);\n                                 if let Some(init) = parent_let_expr.init;"}, {"sha": "b0198e856d5b6ad3b4e107fc792821cb6eb76ef4", "filename": "clippy_lints/src/matches/manual_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fmatches%2Fmanual_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fmatches%2Fmanual_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmanual_map.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -165,7 +165,7 @@ fn check<'tcx>(\n                 }\n \n                 // `ref` and `ref mut` annotations were handled earlier.\n-                let annotation = if matches!(annotation, BindingAnnotation::Mutable) {\n+                let annotation = if matches!(annotation, BindingAnnotation::MUT) {\n                     \"mut \"\n                 } else {\n                     \"\""}, {"sha": "91d17f481e2df1cd7e369e1eb3dee2e9659dea0f", "filename": "clippy_lints/src/matches/match_as_ref.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fmatches%2Fmatch_as_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fmatches%2Fmatch_as_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_as_ref.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -2,26 +2,25 @@ use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::{is_lang_ctor, peel_blocks};\n use rustc_errors::Applicability;\n-use rustc_hir::{Arm, BindingAnnotation, Expr, ExprKind, LangItem, PatKind, QPath};\n+use rustc_hir::{Arm, BindingAnnotation, ByRef, Expr, ExprKind, LangItem, Mutability, PatKind, QPath};\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n \n use super::MATCH_AS_REF;\n \n pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr: &Expr<'_>) {\n     if arms.len() == 2 && arms[0].guard.is_none() && arms[1].guard.is_none() {\n-        let arm_ref: Option<BindingAnnotation> = if is_none_arm(cx, &arms[0]) {\n+        let arm_ref_mut = if is_none_arm(cx, &arms[0]) {\n             is_ref_some_arm(cx, &arms[1])\n         } else if is_none_arm(cx, &arms[1]) {\n             is_ref_some_arm(cx, &arms[0])\n         } else {\n             None\n         };\n-        if let Some(rb) = arm_ref {\n-            let suggestion = if rb == BindingAnnotation::Ref {\n-                \"as_ref\"\n-            } else {\n-                \"as_mut\"\n+        if let Some(rb) = arm_ref_mut {\n+            let suggestion = match rb {\n+                Mutability::Not => \"as_ref\",\n+                Mutability::Mut => \"as_mut\",\n             };\n \n             let output_ty = cx.typeck_results().expr_ty(expr);\n@@ -66,19 +65,18 @@ fn is_none_arm(cx: &LateContext<'_>, arm: &Arm<'_>) -> bool {\n }\n \n // Checks if arm has the form `Some(ref v) => Some(v)` (checks for `ref` and `ref mut`)\n-fn is_ref_some_arm(cx: &LateContext<'_>, arm: &Arm<'_>) -> Option<BindingAnnotation> {\n+fn is_ref_some_arm(cx: &LateContext<'_>, arm: &Arm<'_>) -> Option<Mutability> {\n     if_chain! {\n         if let PatKind::TupleStruct(ref qpath, [first_pat, ..], _) = arm.pat.kind;\n         if is_lang_ctor(cx, qpath, LangItem::OptionSome);\n-        if let PatKind::Binding(rb, .., ident, _) = first_pat.kind;\n-        if rb == BindingAnnotation::Ref || rb == BindingAnnotation::RefMut;\n+        if let PatKind::Binding(BindingAnnotation(ByRef::Yes, mutabl), .., ident, _) = first_pat.kind;\n         if let ExprKind::Call(e, [arg]) = peel_blocks(arm.body).kind;\n         if let ExprKind::Path(ref some_path) = e.kind;\n         if is_lang_ctor(cx, some_path, LangItem::OptionSome);\n         if let ExprKind::Path(QPath::Resolved(_, path2)) = arg.kind;\n         if path2.segments.len() == 1 && ident.name == path2.segments[0].ident.name;\n         then {\n-            return Some(rb)\n+            return Some(mutabl)\n         }\n     }\n     None"}, {"sha": "634eef82e532ae50304b9f1dd76316ee0acc6748", "filename": "clippy_lints/src/matches/needless_match.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -8,7 +8,7 @@ use clippy_utils::{\n };\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::OptionNone;\n-use rustc_hir::{Arm, BindingAnnotation, Expr, ExprKind, FnRetTy, Guard, Node, Pat, PatKind, Path, QPath};\n+use rustc_hir::{Arm, BindingAnnotation, ByRef, Expr, ExprKind, FnRetTy, Guard, Node, Pat, PatKind, Path, QPath};\n use rustc_lint::LateContext;\n use rustc_span::sym;\n use rustc_typeck::hir_ty_to_ty;\n@@ -189,8 +189,7 @@ fn pat_same_as_expr(pat: &Pat<'_>, expr: &Expr<'_>) -> bool {\n                 },\n             )),\n         ) => {\n-            return !matches!(annot, BindingAnnotation::Ref | BindingAnnotation::RefMut)\n-                && pat_ident.name == first_seg.ident.name;\n+            return !matches!(annot, BindingAnnotation(ByRef::Yes, _)) && pat_ident.name == first_seg.ident.name;\n         },\n         // Example: `Custom::TypeA => Custom::TypeB`, or `None => None`\n         (PatKind::Path(QPath::Resolved(_, p_path)), ExprKind::Path(QPath::Resolved(_, e_path))) => {"}, {"sha": "95478af45b4bf3fa687149fa8f76d5e5587306b4", "filename": "clippy_lints/src/matches/single_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -175,7 +175,7 @@ fn collect_pat_paths<'a>(acc: &mut Vec<Ty<'a>>, cx: &LateContext<'a>, pat: &Pat<\n             let p_ty = cx.typeck_results().pat_ty(p);\n             collect_pat_paths(acc, cx, p, p_ty);\n         }),\n-        PatKind::TupleStruct(..) | PatKind::Binding(BindingAnnotation::Unannotated, .., None) | PatKind::Path(_) => {\n+        PatKind::TupleStruct(..) | PatKind::Binding(BindingAnnotation::NONE, .., None) | PatKind::Path(_) => {\n             acc.push(ty);\n         },\n         _ => {},"}, {"sha": "f5bead387d7bd170b17aec80361b8bb04ffc8560", "filename": "clippy_lints/src/methods/clone_on_copy.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -4,7 +4,7 @@ use clippy_utils::source::snippet_with_context;\n use clippy_utils::sugg;\n use clippy_utils::ty::is_copy;\n use rustc_errors::Applicability;\n-use rustc_hir::{BindingAnnotation, Expr, ExprKind, MatchSource, Node, PatKind, QPath};\n+use rustc_hir::{BindingAnnotation, ByRef, Expr, ExprKind, MatchSource, Node, PatKind, QPath};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, adjustment::Adjust};\n use rustc_span::symbol::{sym, Symbol};\n@@ -101,12 +101,7 @@ pub(super) fn check(\n                 _ => false,\n             },\n             // local binding capturing a reference\n-            Some(Node::Local(l))\n-                if matches!(\n-                    l.pat.kind,\n-                    PatKind::Binding(BindingAnnotation::Ref | BindingAnnotation::RefMut, ..)\n-                ) =>\n-            {\n+            Some(Node::Local(l)) if matches!(l.pat.kind, PatKind::Binding(BindingAnnotation(ByRef::Yes, _), ..)) => {\n                 return;\n             },\n             _ => false,"}, {"sha": "beb772100affcb1e5f1351c413c0a656b0baeae7", "filename": "clippy_lints/src/methods/iter_skip_next.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -24,7 +24,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n                     if let Some(id) = path_to_local(recv);\n                     if let Node::Pat(pat) = cx.tcx.hir().get(id);\n                     if let PatKind::Binding(ann, _, _, _)  = pat.kind;\n-                    if ann != BindingAnnotation::Mutable;\n+                    if ann != BindingAnnotation::MUT;\n                     then {\n                         application = Applicability::Unspecified;\n                         diag.span_help("}, {"sha": "e8442091fd3067fd3717c397856770c6055d17de", "filename": "clippy_lints/src/methods/map_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -33,13 +33,13 @@ pub(super) fn check<'tcx>(\n             let closure_expr = peel_blocks(&closure_body.value);\n             match closure_body.params[0].pat.kind {\n                 hir::PatKind::Ref(inner, hir::Mutability::Not) => if let hir::PatKind::Binding(\n-                    hir::BindingAnnotation::Unannotated, .., name, None\n+                    hir::BindingAnnotation::NONE, .., name, None\n                 ) = inner.kind {\n                     if ident_eq(name, closure_expr) {\n                         lint_explicit_closure(cx, e.span, recv.span, true, msrv);\n                     }\n                 },\n-                hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, .., name, None) => {\n+                hir::PatKind::Binding(hir::BindingAnnotation::NONE, .., name, None) => {\n                     match closure_expr.kind {\n                         hir::ExprKind::Unary(hir::UnOp::Deref, inner) => {\n                             if ident_eq(name, inner) {"}, {"sha": "9ca4d65550d3e1d594726005ecf99fd3c84d9a26", "filename": "clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -130,7 +130,7 @@ fn check_manual_split_once_indirect(\n     let ctxt = expr.span.ctxt();\n     let mut parents = cx.tcx.hir().parent_iter(expr.hir_id);\n     if let (_, Node::Local(local)) = parents.next()?\n-        && let PatKind::Binding(BindingAnnotation::Mutable, iter_binding_id, iter_ident, None) = local.pat.kind\n+        && let PatKind::Binding(BindingAnnotation::MUT, iter_binding_id, iter_ident, None) = local.pat.kind\n         && let (iter_stmt_id, Node::Stmt(_)) = parents.next()?\n         && let (_, Node::Block(enclosing_block)) = parents.next()?\n \n@@ -212,11 +212,10 @@ fn indirect_usage<'tcx>(\n     ctxt: SyntaxContext,\n ) -> Option<IndirectUsage<'tcx>> {\n     if let StmtKind::Local(Local {\n-        pat:\n-            Pat {\n-                kind: PatKind::Binding(BindingAnnotation::Unannotated, _, ident, None),\n-                ..\n-            },\n+        pat: Pat {\n+            kind: PatKind::Binding(BindingAnnotation::NONE, _, ident, None),\n+            ..\n+        },\n         init: Some(init_expr),\n         hir_id: local_hir_id,\n         .."}, {"sha": "ea245edd77040688400d3810e3e10b668fcac282", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -5,8 +5,8 @@ use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n-    self as hir, def, BinOpKind, BindingAnnotation, Body, Expr, ExprKind, FnDecl, HirId, Mutability, PatKind, Stmt,\n-    StmtKind, TyKind,\n+    self as hir, def, BinOpKind, BindingAnnotation, Body, ByRef, Expr, ExprKind, FnDecl, HirId, Mutability, PatKind,\n+    Stmt, StmtKind, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n@@ -146,7 +146,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n             return;\n         }\n         for arg in iter_input_pats(decl, body) {\n-            if let PatKind::Binding(BindingAnnotation::Ref | BindingAnnotation::RefMut, ..) = arg.pat.kind {\n+            if let PatKind::Binding(BindingAnnotation(ByRef::Yes, _), ..) = arg.pat.kind {\n                 span_lint(\n                     cx,\n                     TOPLEVEL_REF_ARG,\n@@ -162,9 +162,8 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n         if_chain! {\n             if !in_external_macro(cx.tcx.sess, stmt.span);\n             if let StmtKind::Local(local) = stmt.kind;\n-            if let PatKind::Binding(an, .., name, None) = local.pat.kind;\n+            if let PatKind::Binding(BindingAnnotation(ByRef::Yes, mutabl), .., name, None) = local.pat.kind;\n             if let Some(init) = local.init;\n-            if an == BindingAnnotation::Ref || an == BindingAnnotation::RefMut;\n             then {\n                 // use the macro callsite when the init span (but not the whole local span)\n                 // comes from an expansion like `vec![1, 2, 3]` in `let ref _ = vec![1, 2, 3];`\n@@ -173,7 +172,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n                 } else {\n                     Sugg::hir(cx, init, \"..\")\n                 };\n-                let (mutopt, initref) = if an == BindingAnnotation::RefMut {\n+                let (mutopt, initref) = if mutabl == Mutability::Mut {\n                     (\"mut \", sugg_init.mut_addr())\n                 } else {\n                     (\"\", sugg_init.addr())"}, {"sha": "d7bb0616acb0ba4aba14a2af50eb13263eeb70a1", "filename": "clippy_lints/src/misc_early/redundant_pattern.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fmisc_early%2Fredundant_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fmisc_early%2Fredundant_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fredundant_pattern.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -1,18 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use rustc_ast::ast::{BindingMode, Mutability, Pat, PatKind};\n+use rustc_ast::ast::{Pat, PatKind};\n use rustc_errors::Applicability;\n use rustc_lint::EarlyContext;\n \n use super::REDUNDANT_PATTERN;\n \n pub(super) fn check(cx: &EarlyContext<'_>, pat: &Pat) {\n-    if let PatKind::Ident(left, ident, Some(ref right)) = pat.kind {\n-        let left_binding = match left {\n-            BindingMode::ByRef(Mutability::Mut) => \"ref mut \",\n-            BindingMode::ByRef(Mutability::Not) => \"ref \",\n-            BindingMode::ByValue(..) => \"\",\n-        };\n-\n+    if let PatKind::Ident(ann, ident, Some(ref right)) = pat.kind {\n         if let PatKind::Wild = right.kind {\n             span_lint_and_sugg(\n                 cx,\n@@ -23,7 +17,7 @@ pub(super) fn check(cx: &EarlyContext<'_>, pat: &Pat) {\n                     ident.name, ident.name,\n                 ),\n                 \"try\",\n-                format!(\"{}{}\", left_binding, ident.name),\n+                format!(\"{}{}\", ann.prefix_str(), ident.name),\n                 Applicability::MachineApplicable,\n             );\n         }"}, {"sha": "f2ffac85bf4023cc25368595e239b84c7383f7e9", "filename": "clippy_lints/src/needless_arbitrary_self_type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use if_chain::if_chain;\n-use rustc_ast::ast::{BindingMode, Lifetime, Mutability, Param, PatKind, Path, TyKind};\n+use rustc_ast::ast::{BindingAnnotation, ByRef, Lifetime, Mutability, Param, PatKind, Path, TyKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -120,14 +120,14 @@ impl EarlyLintPass for NeedlessArbitrarySelfType {\n \n         match &p.ty.kind {\n             TyKind::Path(None, path) => {\n-                if let PatKind::Ident(BindingMode::ByValue(mutbl), _, _) = p.pat.kind {\n+                if let PatKind::Ident(BindingAnnotation(ByRef::No, mutbl), _, _) = p.pat.kind {\n                     check_param_inner(cx, path, p.span.to(p.ty.span), &Mode::Value, mutbl);\n                 }\n             },\n             TyKind::Rptr(lifetime, mut_ty) => {\n                 if_chain! {\n                 if let TyKind::Path(None, path) = &mut_ty.ty.kind;\n-                if let PatKind::Ident(BindingMode::ByValue(Mutability::Not), _, _) = p.pat.kind;\n+                if let PatKind::Ident(BindingAnnotation::NONE, _, _) = p.pat.kind;\n                     then {\n                         check_param_inner(cx, path, p.span.to(p.ty.span), &Mode::Ref(*lifetime), mut_ty.mutbl);\n                     }"}, {"sha": "b8855e5adbff4c11c6b17a7176c0857372e4dfda", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -59,7 +59,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBorrowedRef {\n             if let PatKind::Ref(sub_pat, Mutability::Not) = pat.kind;\n \n             // Check sub_pat got a `ref` keyword (excluding `ref mut`).\n-            if let PatKind::Binding(BindingAnnotation::Ref, .., spanned_name, _) = sub_pat.kind;\n+            if let PatKind::Binding(BindingAnnotation::REF, .., spanned_name, _) = sub_pat.kind;\n             let parent_id = cx.tcx.hir().get_parent_node(pat.hir_id);\n             if let Some(parent_node) = cx.tcx.hir().find(parent_id);\n             then {"}, {"sha": "de99f1d7078e97eb40fd1030376f9c179c26bf75", "filename": "clippy_lints/src/needless_late_init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_late_init.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -373,7 +373,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessLateInit {\n             if let Local {\n                 init: None,\n                 pat: &Pat {\n-                    kind: PatKind::Binding(BindingAnnotation::Unannotated, binding_id, _, None),\n+                    kind: PatKind::Binding(BindingAnnotation::NONE, binding_id, _, None),\n                     ..\n                 },\n                 source: LocalSource::Normal,"}, {"sha": "6d17c7a7346f3994fc99e74cd8d6d002dc3f16bf", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -8,7 +8,9 @@ use rustc_ast::ast::Attribute;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{BindingAnnotation, Body, FnDecl, GenericArg, HirId, Impl, ItemKind, Node, PatKind, QPath, TyKind};\n+use rustc_hir::{\n+    BindingAnnotation, Body, FnDecl, GenericArg, HirId, Impl, ItemKind, Mutability, Node, PatKind, QPath, TyKind,\n+};\n use rustc_hir::{HirIdMap, HirIdSet};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -188,13 +190,9 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                 if !implements_borrow_trait;\n                 if !all_borrowable_trait;\n \n-                if let PatKind::Binding(mode, canonical_id, ..) = arg.pat.kind;\n+                if let PatKind::Binding(BindingAnnotation(_, Mutability::Not), canonical_id, ..) = arg.pat.kind;\n                 if !moved_vars.contains(&canonical_id);\n                 then {\n-                    if mode == BindingAnnotation::Mutable || mode == BindingAnnotation::RefMut {\n-                        continue;\n-                    }\n-\n                     // Dereference suggestion\n                     let sugg = |diag: &mut Diagnostic| {\n                         if let ty::Adt(def, ..) = ty.kind() {"}, {"sha": "0315678bf97a96c1ef6fcd58e59df3c7b4b5342d", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -130,15 +130,15 @@ fn try_get_option_occurence<'tcx>(\n             .filter_map(|(id, &c)| none_captures.get(id).map(|&c2| (c, c2)))\n             .all(|(x, y)| x.is_imm_ref() && y.is_imm_ref());\n         then {\n-            let capture_mut = if bind_annotation == BindingAnnotation::Mutable { \"mut \" } else { \"\" };\n+            let capture_mut = if bind_annotation == BindingAnnotation::MUT { \"mut \" } else { \"\" };\n             let some_body = peel_blocks(if_then);\n             let none_body = peel_blocks(if_else);\n             let method_sugg = if eager_or_lazy::switch_to_eager_eval(cx, none_body) { \"map_or\" } else { \"map_or_else\" };\n             let capture_name = id.name.to_ident_string();\n             let (as_ref, as_mut) = match &expr.kind {\n                 ExprKind::AddrOf(_, Mutability::Not, _) => (true, false),\n                 ExprKind::AddrOf(_, Mutability::Mut, _) => (false, true),\n-                _ => (bind_annotation == BindingAnnotation::Ref, bind_annotation == BindingAnnotation::RefMut),\n+                _ => (bind_annotation == BindingAnnotation::REF, bind_annotation == BindingAnnotation::REF_MUT),\n             };\n \n             // Check if captures the closure will need conflict with borrows made in the scrutinee."}, {"sha": "0960b050c240e37553be6b96824f26b2d09983fd", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -221,7 +221,7 @@ impl<'tcx> PassByRefOrValue {\n                     // if function has a body and parameter is annotated with mut, ignore\n                     if let Some(param) = fn_body.and_then(|body| body.params.get(index)) {\n                         match param.pat.kind {\n-                            PatKind::Binding(BindingAnnotation::Unannotated, _, _, _) => {},\n+                            PatKind::Binding(BindingAnnotation::NONE, _, _, _) => {},\n                             _ => continue,\n                         }\n                     }"}, {"sha": "0028e0bc6c517e79e13f3b57452972f013da44c0", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -571,7 +571,7 @@ fn check_ptr_arg_usage<'tcx>(cx: &LateContext<'tcx>, body: &'tcx Body<'_>, args:\n                 Some((Node::Stmt(_), _)) => (),\n                 Some((Node::Local(l), _)) => {\n                     // Only trace simple bindings. e.g `let x = y;`\n-                    if let PatKind::Binding(BindingAnnotation::Unannotated, id, _, None) = l.pat.kind {\n+                    if let PatKind::Binding(BindingAnnotation::NONE, id, _, None) = l.pat.kind {\n                         self.bindings.insert(id, args_idx);\n                     } else {\n                         set_skip_flag();\n@@ -647,7 +647,7 @@ fn check_ptr_arg_usage<'tcx>(cx: &LateContext<'tcx>, body: &'tcx Body<'_>, args:\n             .filter_map(|(i, arg)| {\n                 let param = &body.params[arg.idx];\n                 match param.pat.kind {\n-                    PatKind::Binding(BindingAnnotation::Unannotated, id, _, None)\n+                    PatKind::Binding(BindingAnnotation::NONE, id, _, None)\n                         if !is_lint_allowed(cx, PTR_ARG, param.hir_id) =>\n                     {\n                         Some((id, i))"}, {"sha": "f4f1fd336df7cc81c4a60786da7e95ccb5ed85bb", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -9,7 +9,7 @@ use clippy_utils::{\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::{OptionNone, OptionSome, ResultErr, ResultOk};\n-use rustc_hir::{BindingAnnotation, Expr, ExprKind, Node, PatKind, PathSegment, QPath};\n+use rustc_hir::{BindingAnnotation, ByRef, Expr, ExprKind, Node, PatKind, PathSegment, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::Ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -123,7 +123,7 @@ fn check_if_let_some_or_err_and_early_return<'tcx>(cx: &LateContext<'tcx>, expr:\n         if let Some(higher::IfLet { let_pat, let_expr, if_then, if_else }) = higher::IfLet::hir(cx, expr);\n         if !is_else_clause(cx.tcx, expr);\n         if let PatKind::TupleStruct(ref path1, [field], None) = let_pat.kind;\n-        if let PatKind::Binding(annot, bind_id, ident, None) = field.kind;\n+        if let PatKind::Binding(BindingAnnotation(by_ref, _), bind_id, ident, None) = field.kind;\n         let caller_ty = cx.typeck_results().expr_ty(let_expr);\n         let if_block = IfBlockType::IfLet(path1, caller_ty, ident.name, let_expr, if_then, if_else);\n         if (is_early_return(sym::Option, cx, &if_block) && path_to_local_id(peel_blocks(if_then), bind_id))\n@@ -132,12 +132,11 @@ fn check_if_let_some_or_err_and_early_return<'tcx>(cx: &LateContext<'tcx>, expr:\n         then {\n             let mut applicability = Applicability::MachineApplicable;\n             let receiver_str = snippet_with_applicability(cx, let_expr.span, \"..\", &mut applicability);\n-            let by_ref = matches!(annot, BindingAnnotation::Ref | BindingAnnotation::RefMut);\n             let requires_semi = matches!(get_parent_node(cx.tcx, expr.hir_id), Some(Node::Stmt(_)));\n             let sugg = format!(\n                 \"{}{}?{}\",\n                 receiver_str,\n-                if by_ref { \".as_ref()\" } else { \"\" },\n+                if by_ref == ByRef::Yes { \".as_ref()\" } else { \"\" },\n                 if requires_semi { \";\" } else { \"\" }\n             );\n             span_lint_and_sugg("}, {"sha": "c07aa00a12789af66d57b26093c4839347c80d80", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -99,7 +99,7 @@ impl<'tcx> LateLintPass<'tcx> for SlowVectorInit {\n         // Matches statements which initializes vectors. For example: `let mut vec = Vec::with_capacity(10)`\n         if_chain! {\n             if let StmtKind::Local(local) = stmt.kind;\n-            if let PatKind::Binding(BindingAnnotation::Mutable, local_id, _, None) = local.pat.kind;\n+            if let PatKind::Binding(BindingAnnotation::MUT, local_id, _, None) = local.pat.kind;\n             if let Some(init) = local.init;\n             if let Some(len_arg) = Self::is_vec_with_capacity(cx, init);\n "}, {"sha": "fb73c386640b49babd971298c21445d4286f9225", "filename": "clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -137,12 +137,12 @@ fn insert_necessary_parens(pat: &mut P<Pat>) {\n     struct Visitor;\n     impl MutVisitor for Visitor {\n         fn visit_pat(&mut self, pat: &mut P<Pat>) {\n-            use ast::{BindingMode::*, Mutability::*};\n+            use ast::BindingAnnotation;\n             noop_visit_pat(pat, self);\n             let target = match &mut pat.kind {\n                 // `i @ a | b`, `box a | b`, and `& mut? a | b`.\n                 Ident(.., Some(p)) | Box(p) | Ref(p, _) if matches!(&p.kind, Or(ps) if ps.len() > 1) => p,\n-                Ref(p, Not) if matches!(p.kind, Ident(ByValue(Mut), ..)) => p, // `&(mut x)`\n+                Ref(p, Mutability::Not) if matches!(p.kind, Ident(BindingAnnotation::MUT, ..)) => p, // `&(mut x)`\n                 _ => return,\n             };\n             target.kind = Paren(P(take_pat(target)));"}, {"sha": "1489c96d9e9b03bcb61a8bb8cd84fb7a0977be97", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -6,7 +6,9 @@ use rustc_ast::ast::{LitFloatType, LitKind};\n use rustc_ast::LitIntType;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n-use rustc_hir::{ArrayLen, Closure, ExprKind, FnRetTy, HirId, Lit, PatKind, QPath, StmtKind, TyKind};\n+use rustc_hir::{\n+    ArrayLen, BindingAnnotation, Closure, ExprKind, FnRetTy, HirId, Lit, PatKind, QPath, StmtKind, TyKind,\n+};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::{Ident, Symbol};\n@@ -610,10 +612,16 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n \n         match pat.value.kind {\n             PatKind::Wild => kind!(\"Wild\"),\n-            PatKind::Binding(anno, .., name, sub) => {\n+            PatKind::Binding(ann, _, name, sub) => {\n                 bind!(self, name);\n                 opt_bind!(self, sub);\n-                kind!(\"Binding(BindingAnnotation::{anno:?}, _, {name}, {sub})\");\n+                let ann = match ann {\n+                    BindingAnnotation::NONE => \"NONE\",\n+                    BindingAnnotation::REF => \"REF\",\n+                    BindingAnnotation::MUT => \"MUT\",\n+                    BindingAnnotation::REF_MUT => \"REF_MUT\",\n+                };\n+                kind!(\"Binding(BindingAnnotation::{ann}, _, {name}, {sub})\");\n                 self.ident(name);\n                 sub.if_some(|p| self.pat(p));\n             },"}, {"sha": "8425837fd73366277219447d83e196b11c71ffa3", "filename": "clippy_lints/src/vec_init_then_push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec_init_then_push.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -157,7 +157,7 @@ impl<'tcx> LateLintPass<'tcx> for VecInitThenPush {\n \n     fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>) {\n         if let Some(init_expr) = local.init\n-            && let PatKind::Binding(BindingAnnotation::Mutable, id, name, None) = local.pat.kind\n+            && let PatKind::Binding(BindingAnnotation::MUT, id, name, None) = local.pat.kind\n             && !in_external_macro(cx.sess(), local.span)\n             && let Some(init) = get_vec_init_kind(cx, init_expr)\n             && !matches!(init, VecInitKind::WithExprCapacity(_))"}, {"sha": "57448f716d4941e023d2a7112c7e6f919ebcac34", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -6,9 +6,9 @@ use rustc_data_structures::fx::FxHasher;\n use rustc_hir::def::Res;\n use rustc_hir::HirIdMap;\n use rustc_hir::{\n-    ArrayLen, BinOpKind, Block, BodyId, Closure, Expr, ExprField, ExprKind, FnRetTy, GenericArg, GenericArgs, Guard,\n-    HirId, InlineAsmOperand, Let, Lifetime, LifetimeName, ParamName, Pat, PatField, PatKind, Path, PathSegment, QPath,\n-    Stmt, StmtKind, Ty, TyKind, TypeBinding,\n+    ArrayLen, BinOpKind, BindingAnnotation, Block, BodyId, Closure, Expr, ExprField, ExprKind, FnRetTy, GenericArg,\n+    GenericArgs, Guard, HirId, InlineAsmOperand, Let, Lifetime, LifetimeName, ParamName, Pat, PatField, PatKind, Path,\n+    PathSegment, QPath, Stmt, StmtKind, Ty, TyKind, TypeBinding,\n };\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::LateContext;\n@@ -822,8 +822,9 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n     pub fn hash_pat(&mut self, pat: &Pat<'_>) {\n         std::mem::discriminant(&pat.kind).hash(&mut self.s);\n         match pat.kind {\n-            PatKind::Binding(ann, _, _, pat) => {\n-                std::mem::discriminant(&ann).hash(&mut self.s);\n+            PatKind::Binding(BindingAnnotation(by_ref, mutability), _, _, pat) => {\n+                std::mem::discriminant(&by_ref).hash(&mut self.s);\n+                std::mem::discriminant(&mutability).hash(&mut self.s);\n                 if let Some(pat) = pat {\n                     self.hash_pat(pat);\n                 }"}, {"sha": "b27439cbec278bec5bafb3fd46e47b7d0deb0422", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -192,7 +192,7 @@ pub fn find_binding_init<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<\n     let hir = cx.tcx.hir();\n     if_chain! {\n         if let Some(Node::Pat(pat)) = hir.find(hir_id);\n-        if matches!(pat.kind, PatKind::Binding(BindingAnnotation::Unannotated, ..));\n+        if matches!(pat.kind, PatKind::Binding(BindingAnnotation::NONE, ..));\n         let parent = hir.get_parent_node(hir_id);\n         if let Some(Node::Local(local)) = hir.find(parent);\n         then {"}, {"sha": "597318a556b850fc5b356214849b6c23ca734b13", "filename": "tests/ui/author.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/tests%2Fui%2Fauthor.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/tests%2Fui%2Fauthor.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor.stdout?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -6,7 +6,7 @@ if_chain! {\n     if match_qpath(qpath, &[\"char\"]);\n     if let ExprKind::Lit(ref lit) = expr.kind;\n     if let LitKind::Int(69, LitIntType::Unsuffixed) = lit.node;\n-    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = local.pat.kind;\n+    if let PatKind::Binding(BindingAnnotation::NONE, _, name, None) = local.pat.kind;\n     if name.as_str() == \"x\";\n     then {\n         // report your lint here"}, {"sha": "a529981e2e68372c0cd034cdbc187cc0c2da900a", "filename": "tests/ui/author/blocks.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/tests%2Fui%2Fauthor%2Fblocks.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/tests%2Fui%2Fauthor%2Fblocks.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fblocks.stdout?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -5,13 +5,13 @@ if_chain! {\n     if let Some(init) = local.init;\n     if let ExprKind::Lit(ref lit) = init.kind;\n     if let LitKind::Int(42, LitIntType::Signed(IntTy::I32)) = lit.node;\n-    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = local.pat.kind;\n+    if let PatKind::Binding(BindingAnnotation::NONE, _, name, None) = local.pat.kind;\n     if name.as_str() == \"x\";\n     if let StmtKind::Local(local1) = block.stmts[1].kind;\n     if let Some(init1) = local1.init;\n     if let ExprKind::Lit(ref lit1) = init1.kind;\n     if let LitKind::Float(_, LitFloatType::Suffixed(FloatTy::F32)) = lit1.node;\n-    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name1, None) = local1.pat.kind;\n+    if let PatKind::Binding(BindingAnnotation::NONE, _, name1, None) = local1.pat.kind;\n     if name1.as_str() == \"_t\";\n     if let StmtKind::Semi(e) = block.stmts[2].kind;\n     if let ExprKind::Unary(UnOp::Neg, inner) = e.kind;\n@@ -31,7 +31,7 @@ if_chain! {\n     if let ExprKind::Path(ref qpath) = func.kind;\n     if match_qpath(qpath, &[\"String\", \"new\"]);\n     if args.is_empty();\n-    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = local.pat.kind;\n+    if let PatKind::Binding(BindingAnnotation::NONE, _, name, None) = local.pat.kind;\n     if name.as_str() == \"expr\";\n     if let Some(trailing_expr) = block.expr;\n     if let ExprKind::Call(func1, args1) = trailing_expr.kind;"}, {"sha": "ceb53fcd496369c11e90ea971cc02091e8c33780", "filename": "tests/ui/author/loop.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/tests%2Fui%2Fauthor%2Floop.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/tests%2Fui%2Fauthor%2Floop.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Floop.stdout?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -1,6 +1,6 @@\n if_chain! {\n     if let Some(higher::ForLoop { pat: pat, arg: arg, body: body, .. }) = higher::ForLoop::hir(expr);\n-    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = pat.kind;\n+    if let PatKind::Binding(BindingAnnotation::NONE, _, name, None) = pat.kind;\n     if name.as_str() == \"y\";\n     if let ExprKind::Struct(qpath, fields, None) = arg.kind;\n     if matches!(qpath, QPath::LangItem(LangItem::Range, _));\n@@ -17,7 +17,7 @@ if_chain! {\n     if let Some(init) = local.init;\n     if let ExprKind::Path(ref qpath1) = init.kind;\n     if match_qpath(qpath1, &[\"y\"]);\n-    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name1, None) = local.pat.kind;\n+    if let PatKind::Binding(BindingAnnotation::NONE, _, name1, None) = local.pat.kind;\n     if name1.as_str() == \"z\";\n     if block.expr.is_none();\n     then {"}, {"sha": "2cf69a035b4c7364ff6ee3991c78f50101f067bf", "filename": "tests/ui/author/matches.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce339b219ab9a3731e38f68a66fc39e0898ac7af/tests%2Fui%2Fauthor%2Fmatches.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ce339b219ab9a3731e38f68a66fc39e0898ac7af/tests%2Fui%2Fauthor%2Fmatches.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fmatches.stdout?ref=ce339b219ab9a3731e38f68a66fc39e0898ac7af", "patch": "@@ -21,7 +21,7 @@ if_chain! {\n     if let Some(init1) = local1.init;\n     if let ExprKind::Lit(ref lit4) = init1.kind;\n     if let LitKind::Int(3, LitIntType::Unsuffixed) = lit4.node;\n-    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = local1.pat.kind;\n+    if let PatKind::Binding(BindingAnnotation::NONE, _, name, None) = local1.pat.kind;\n     if name.as_str() == \"x\";\n     if let Some(trailing_expr) = block.expr;\n     if let ExprKind::Path(ref qpath) = trailing_expr.kind;\n@@ -30,7 +30,7 @@ if_chain! {\n     if arms[2].guard.is_none();\n     if let ExprKind::Lit(ref lit5) = arms[2].body.kind;\n     if let LitKind::Int(1, LitIntType::Unsuffixed) = lit5.node;\n-    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name1, None) = local.pat.kind;\n+    if let PatKind::Binding(BindingAnnotation::NONE, _, name1, None) = local.pat.kind;\n     if name1.as_str() == \"a\";\n     then {\n         // report your lint here"}]}