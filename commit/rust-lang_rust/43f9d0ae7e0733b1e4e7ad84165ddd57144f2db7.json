{"sha": "43f9d0ae7e0733b1e4e7ad84165ddd57144f2db7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZjlkMGFlN2UwNzMzYjFlNGU3YWQ4NDE2NWRkZDU3MTQ0ZjJkYjc=", "commit": {"author": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-04-14T16:56:13Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-04-14T16:56:13Z"}, "message": "Cancel emitting FCW lint if it is an edition fixing lint", "tree": {"sha": "8ff73642b2524d376962858a52d850cc77411446", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ff73642b2524d376962858a52d850cc77411446"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43f9d0ae7e0733b1e4e7ad84165ddd57144f2db7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43f9d0ae7e0733b1e4e7ad84165ddd57144f2db7", "html_url": "https://github.com/rust-lang/rust/commit/43f9d0ae7e0733b1e4e7ad84165ddd57144f2db7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43f9d0ae7e0733b1e4e7ad84165ddd57144f2db7/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa4457fa5fd1151a7f7a674373c2f4c0df9a3df4", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa4457fa5fd1151a7f7a674373c2f4c0df9a3df4", "html_url": "https://github.com/rust-lang/rust/commit/aa4457fa5fd1151a7f7a674373c2f4c0df9a3df4"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "7adaf54fa2374418e1a8fff081919a6546af3a8d", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/43f9d0ae7e0733b1e4e7ad84165ddd57144f2db7/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43f9d0ae7e0733b1e4e7ad84165ddd57144f2db7/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=43f9d0ae7e0733b1e4e7ad84165ddd57144f2db7", "patch": "@@ -272,11 +272,13 @@ pub fn struct_lint_level<'s, 'd>(\n             // emit shouldn't be automatically fixed by rustfix.\n             err.allow_suggestions(false);\n \n-            // If this is a future incompatible lint it'll become a hard error, so\n-            // we have to emit *something*. Also, if this lint occurs in the\n-            // expansion of a macro from an external crate, allow individual lints\n-            // to opt-out from being reported.\n-            if future_incompatible.is_none() && !lint.report_in_external_macro {\n+            // If this is a future incompatible that is not an edition fixing lint\n+            // it'll become a hard error, so we have to emit *something*. Also,\n+            // if this lint occurs in the expansion of a macro from an external crate,\n+            // allow individual lints to opt-out from being reported.\n+            let not_future_incompatible =\n+                future_incompatible.map(|f| f.edition.is_some()).unwrap_or(true);\n+            if not_future_incompatible && !lint.report_in_external_macro {\n                 err.cancel();\n                 // Don't continue further, since we don't want to have\n                 // `diag_span_note_once` called for a diagnostic that isn't emitted."}]}