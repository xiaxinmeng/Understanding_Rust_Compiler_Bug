{"sha": "ddabd509a862da4bd0e8cfb86baf598f45c2383b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYWJkNTA5YTg2MmRhNGJkMGU4Y2ZiODZiYWY1OThmNDVjMjM4M2I=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-10-12T20:38:58Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-01T18:08:56Z"}, "message": "compare-method lint", "tree": {"sha": "8a33fa9449d842a78c69ce2292f75970ee7f4d52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a33fa9449d842a78c69ce2292f75970ee7f4d52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddabd509a862da4bd0e8cfb86baf598f45c2383b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddabd509a862da4bd0e8cfb86baf598f45c2383b", "html_url": "https://github.com/rust-lang/rust/commit/ddabd509a862da4bd0e8cfb86baf598f45c2383b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddabd509a862da4bd0e8cfb86baf598f45c2383b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6526512751bfe29a0bf9535bc41db2076ff57ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6526512751bfe29a0bf9535bc41db2076ff57ba", "html_url": "https://github.com/rust-lang/rust/commit/f6526512751bfe29a0bf9535bc41db2076ff57ba"}], "stats": {"total": 219, "additions": 152, "deletions": 67}, "files": [{"sha": "5ebb58dbb36d4965d41dab15aad537731bb860bb", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b", "patch": "@@ -646,13 +646,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         };\n \n         if let SubregionOrigin::CompareImplMethodObligation {\n-            span, item_name, impl_item_def_id, trait_item_def_id\n+            span, item_name, impl_item_def_id, trait_item_def_id, lint_id\n         } = origin {\n             self.report_extra_impl_obligation(span,\n                                               item_name,\n                                               impl_item_def_id,\n                                               trait_item_def_id,\n-                                              &format!(\"`{}: {}`\", bound_kind, sub))\n+                                              &format!(\"`{}: {}`\", bound_kind, sub),\n+                                              lint_id)\n                 .emit();\n             return;\n         }\n@@ -977,12 +978,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             infer::CompareImplMethodObligation { span,\n                                                  item_name,\n                                                  impl_item_def_id,\n-                                                 trait_item_def_id } => {\n+                                                 trait_item_def_id,\n+                                                 lint_id } => {\n                 self.report_extra_impl_obligation(span,\n                                                   item_name,\n                                                   impl_item_def_id,\n                                                   trait_item_def_id,\n-                                                  &format!(\"`{}: {}`\", sup, sub))\n+                                                  &format!(\"`{}: {}`\", sup, sub),\n+                                                  lint_id)\n             }\n         }\n     }"}, {"sha": "56dc52d61038c105af857d6cc31dad31d480ef59", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b", "patch": "@@ -368,6 +368,10 @@ pub enum SubregionOrigin<'tcx> {\n         item_name: ast::Name,\n         impl_item_def_id: DefId,\n         trait_item_def_id: DefId,\n+\n+        // this is `Some(_)` if this error arises from the bug fix for\n+        // #18937. This is a temporary measure.\n+        lint_id: Option<ast::NodeId>,\n     },\n }\n \n@@ -1816,12 +1820,14 @@ impl<'tcx> SubregionOrigin<'tcx> {\n \n             traits::ObligationCauseCode::CompareImplMethodObligation { item_name,\n                                                                        impl_item_def_id,\n-                                                                       trait_item_def_id } =>\n+                                                                       trait_item_def_id,\n+                                                                       lint_id } =>\n                 SubregionOrigin::CompareImplMethodObligation {\n                     span: cause.span,\n                     item_name: item_name,\n                     impl_item_def_id: impl_item_def_id,\n                     trait_item_def_id: trait_item_def_id,\n+                    lint_id: lint_id,\n                 },\n \n             _ => default(),"}, {"sha": "82a46f76401d52a2a559bc6edd0fce550069009a", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b", "patch": "@@ -198,6 +198,12 @@ declare_lint! {\n     \"patterns in functions without body were erroneously allowed\"\n }\n \n+declare_lint! {\n+    pub EXTRA_REQUIREMENT_IN_IMPL,\n+    Warn,\n+    \"detects extra requirements in impls that were erroneously allowed\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -235,7 +241,8 @@ impl LintPass for HardwiredLints {\n             HR_LIFETIME_IN_ASSOC_TYPE,\n             LIFETIME_UNDERSCORE,\n             SAFE_EXTERN_STATICS,\n-            PATTERNS_IN_FNS_WITHOUT_BODY\n+            PATTERNS_IN_FNS_WITHOUT_BODY,\n+            EXTRA_REQUIREMENT_IN_IMPL\n         )\n     }\n }"}, {"sha": "be755aec660b543bcdcccd3c321f79e48005e07e", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b", "patch": "@@ -42,7 +42,7 @@ use std::fmt;\n use syntax::attr;\n use syntax::parse::token::InternedString;\n use syntax::ast;\n-use syntax_pos::Span;\n+use syntax_pos::{MultiSpan, Span};\n use errors::{self, Diagnostic, DiagnosticBuilder};\n use hir;\n use hir::intravisit as hir_visit;\n@@ -107,9 +107,12 @@ impl fmt::Debug for EarlyLint {\n }\n \n impl EarlyLint {\n-    pub fn new(id: LintId, span: Span, msg: String) -> Self {\n-        let mut diagnostic = Diagnostic::new(errors::Level::Warning, &msg);\n-        diagnostic.set_span(span);\n+    pub fn new<M: EarlyLintMessage>(id: LintId, span: Span, msg: M) -> Self {\n+        let diagnostic = msg.into_diagnostic(span);\n+        EarlyLint { id: id, span: span, diagnostic: diagnostic }\n+    }\n+\n+    pub fn with_diagnostic(id: LintId, span: Span, diagnostic: Diagnostic) -> Self {\n         EarlyLint { id: id, span: span, diagnostic: diagnostic }\n     }\n \n@@ -120,7 +123,23 @@ impl EarlyLint {\n     }\n }\n \n+pub trait EarlyLintMessage {\n+    fn into_diagnostic(self, span: Span) -> Diagnostic;\n+}\n \n+impl EarlyLintMessage for String {\n+    fn into_diagnostic(self, span: Span) -> Diagnostic {\n+        let mut diagnostic = Diagnostic::new(errors::Level::Warning, &self);\n+        diagnostic.set_span(span);\n+        diagnostic\n+    }\n+}\n+\n+impl EarlyLintMessage for Diagnostic {\n+    fn into_diagnostic(self, _span: Span) -> Diagnostic {\n+        self\n+    }\n+}\n \n /// Extra information for a future incompatibility lint. See the call\n /// to `register_future_incompatible` in `librustc_lint/lib.rs` for\n@@ -439,13 +458,15 @@ pub fn raw_emit_lint(sess: &Session,\n     raw_struct_lint(sess, lints, lint, lvlsrc, span, msg).emit();\n }\n \n-pub fn raw_struct_lint<'a>(sess: &'a Session,\n-                           lints: &LintStore,\n-                           lint: &'static Lint,\n-                           lvlsrc: LevelSource,\n-                           span: Option<Span>,\n-                           msg: &str)\n-                           -> DiagnosticBuilder<'a> {\n+pub fn raw_struct_lint<'a, S>(sess: &'a Session,\n+                              lints: &LintStore,\n+                              lint: &'static Lint,\n+                              lvlsrc: LevelSource,\n+                              span: Option<S>,\n+                              msg: &str)\n+                              -> DiagnosticBuilder<'a>\n+    where S: Into<MultiSpan>\n+{\n     let (mut level, source) = lvlsrc;\n     if level == Allow {\n         return sess.diagnostic().struct_dummy();"}, {"sha": "abbab299ca0c44c9cc2bf6940425882180166125", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b", "patch": "@@ -41,7 +41,7 @@ use hir;\n \n pub use lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n                         raw_emit_lint, check_crate, check_ast_crate, gather_attrs,\n-                        raw_struct_lint, FutureIncompatibleInfo, EarlyLint};\n+                        raw_struct_lint, FutureIncompatibleInfo, EarlyLint, EarlyLintMessage};\n \n /// Specification of a single lint.\n #[derive(Copy, Clone, Debug)]"}, {"sha": "3af0b7f27dd74598a56ea5ff2042830616147228", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b", "patch": "@@ -258,11 +258,11 @@ impl Session {\n     pub fn unimpl(&self, msg: &str) -> ! {\n         self.diagnostic().unimpl(msg)\n     }\n-    pub fn add_lint(&self,\n-                    lint: &'static lint::Lint,\n-                    id: ast::NodeId,\n-                    sp: Span,\n-                    msg: String) {\n+    pub fn add_lint<M: lint::EarlyLintMessage>(&self,\n+                                               lint: &'static lint::Lint,\n+                                               id: ast::NodeId,\n+                                               sp: Span,\n+                                               msg: M) {\n         let lint_id = lint::LintId::of(lint);\n         let mut lints = self.lints.borrow_mut();\n         let early_lint = lint::EarlyLint::new(lint_id, sp, msg);"}, {"sha": "069cbc615f6041858444aef204f7b9727cd246ff", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b", "patch": "@@ -27,6 +27,7 @@ use super::{\n use fmt_macros::{Parser, Piece, Position};\n use hir::def_id::DefId;\n use infer::{self, InferCtxt, TypeOrigin};\n+use rustc::lint::builtin::EXTRA_REQUIREMENT_IN_IMPL;\n use ty::{self, AdtKind, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};\n use ty::error::ExpectedFound;\n use ty::fast_reject;\n@@ -423,9 +424,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                         item_name: ast::Name,\n                                         _impl_item_def_id: DefId,\n                                         trait_item_def_id: DefId,\n-                                        requirement: &fmt::Display)\n+                                        requirement: &fmt::Display,\n+                                        lint_id: Option<ast::NodeId>) // (*)\n                                         -> DiagnosticBuilder<'tcx>\n     {\n+        // (*) This parameter is temporary and used only for phasing\n+        // in the bug fix to #18937. If it is `Some`, it has a kind of\n+        // weird effect -- the diagnostic is reported as a lint, and\n+        // the builder which is returned is marked as canceled.\n+\n         let mut err =\n             struct_span_err!(self.tcx.sess,\n                              error_span,\n@@ -441,6 +448,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             error_span,\n             &format!(\"impl has extra requirement {}\", requirement));\n \n+        if let Some(node_id) = lint_id {\n+            let diagnostic = (*err).clone();\n+            self.tcx.sess.add_lint(EXTRA_REQUIREMENT_IN_IMPL, node_id, error_span, diagnostic);\n+            err.cancel();\n+        }\n+\n         err\n     }\n \n@@ -452,14 +465,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         let mut err = match *error {\n             SelectionError::Unimplemented => {\n                 if let ObligationCauseCode::CompareImplMethodObligation {\n-                    item_name, impl_item_def_id, trait_item_def_id\n+                    item_name, impl_item_def_id, trait_item_def_id, lint_id\n                 } = obligation.cause.code {\n                     self.report_extra_impl_obligation(\n                         span,\n                         item_name,\n                         impl_item_def_id,\n                         trait_item_def_id,\n-                        &format!(\"`{}`\", obligation.predicate))\n+                        &format!(\"`{}`\", obligation.predicate),\n+                        lint_id)\n                         .emit();\n                     return;\n                 } else {"}, {"sha": "f1ac96a70b4f0660b5be3765d663dfef9afee546", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b", "patch": "@@ -138,10 +138,12 @@ pub enum ObligationCauseCode<'tcx> {\n \n     ImplDerivedObligation(DerivedObligationCause<'tcx>),\n \n+    // error derived when matching traits/impls; see ObligationCause for more details\n     CompareImplMethodObligation {\n         item_name: ast::Name,\n         impl_item_def_id: DefId,\n-        trait_item_def_id: DefId\n+        trait_item_def_id: DefId,\n+        lint_id: Option<ast::NodeId>,\n     },\n }\n "}, {"sha": "1e48911ed7032a88488e1dae914c8ec79c0cf2fd", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b", "patch": "@@ -197,11 +197,13 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             }\n             super::CompareImplMethodObligation { item_name,\n                                                  impl_item_def_id,\n-                                                 trait_item_def_id } => {\n+                                                 trait_item_def_id,\n+                                                 lint_id } => {\n                 Some(super::CompareImplMethodObligation {\n                     item_name: item_name,\n                     impl_item_def_id: impl_item_def_id,\n                     trait_item_def_id: trait_item_def_id,\n+                    lint_id: lint_id,\n                 })\n             }\n         }"}, {"sha": "c378d5f8d5b3c978447a6fddbdaae638b8a6edea", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b", "patch": "@@ -6,7 +6,7 @@ use std::fmt;\n use syntax_pos::{MultiSpan, Span};\n \n #[must_use]\n-#[derive(Clone)]\n+#[derive(Clone, Debug)]\n pub struct Diagnostic {\n     pub level: Level,\n     pub message: String,\n@@ -16,7 +16,7 @@ pub struct Diagnostic {\n }\n \n /// For example a note attached to an error.\n-#[derive(Clone)]\n+#[derive(Clone, Debug)]\n pub struct SubDiagnostic {\n     pub level: Level,\n     pub message: String,\n@@ -190,9 +190,3 @@ impl Diagnostic {\n         self.children.push(sub);\n     }\n }\n-\n-impl fmt::Debug for Diagnostic {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.message.fmt(f)\n-    }\n-}"}, {"sha": "dd416cabb3c4d38649a7e47cf3e6630dd5f64a15", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b", "patch": "@@ -70,6 +70,21 @@ impl<'a> DiagnosticBuilder<'a> {\n             return;\n         }\n \n+        match self.level {\n+            Level::Bug |\n+            Level::Fatal |\n+            Level::PhaseFatal |\n+            Level::Error => {\n+                self.handler.bump_err_count();\n+            }\n+\n+            Level::Warning |\n+            Level::Note |\n+            Level::Help |\n+            Level::Cancelled => {\n+            }\n+        }\n+\n         self.handler.emitter.borrow_mut().emit(&self);\n         self.cancel();\n         self.handler.panic_if_treat_err_as_bug();\n@@ -140,6 +155,13 @@ impl<'a> DiagnosticBuilder<'a> {\n             diagnostic: Diagnostic::new_with_code(level, code, message)\n         }\n     }\n+\n+    pub fn into_diagnostic(mut self) -> Diagnostic {\n+        // annoyingly, the Drop impl means we can't actually move\n+        let result = self.diagnostic.clone();\n+        self.cancel();\n+        result\n+    }\n }\n \n impl<'a> Debug for DiagnosticBuilder<'a> {"}, {"sha": "d9ab0dd075bea879986331b753be102f85ce09e2", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b", "patch": "@@ -57,7 +57,7 @@ mod lock;\n use syntax_pos::{BytePos, Loc, FileLinesResult, FileName, MultiSpan, Span, NO_EXPANSION};\n use syntax_pos::MacroBacktrace;\n \n-#[derive(Clone)]\n+#[derive(Clone, Debug)]\n pub enum RenderSpan {\n     /// A FullSpan renders with both with an initial line for the\n     /// message, prefixed by file:linenum, followed by a summary of\n@@ -71,7 +71,7 @@ pub enum RenderSpan {\n     Suggestion(CodeSuggestion),\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, Debug)]\n pub struct CodeSuggestion {\n     pub msp: MultiSpan,\n     pub substitutes: Vec<String>,\n@@ -293,7 +293,6 @@ impl Handler {\n                                                    sp: S,\n                                                    msg: &str)\n                                                    -> DiagnosticBuilder<'a> {\n-        self.bump_err_count();\n         let mut result = DiagnosticBuilder::new(self, Level::Error, msg);\n         result.set_span(sp);\n         result\n@@ -303,21 +302,18 @@ impl Handler {\n                                                              msg: &str,\n                                                              code: &str)\n                                                              -> DiagnosticBuilder<'a> {\n-        self.bump_err_count();\n         let mut result = DiagnosticBuilder::new(self, Level::Error, msg);\n         result.set_span(sp);\n         result.code(code.to_owned());\n         result\n     }\n     pub fn struct_err<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n-        self.bump_err_count();\n         DiagnosticBuilder::new(self, Level::Error, msg)\n     }\n     pub fn struct_span_fatal<'a, S: Into<MultiSpan>>(&'a self,\n                                                      sp: S,\n                                                      msg: &str)\n                                                      -> DiagnosticBuilder<'a> {\n-        self.bump_err_count();\n         let mut result = DiagnosticBuilder::new(self, Level::Fatal, msg);\n         result.set_span(sp);\n         result\n@@ -327,24 +323,16 @@ impl Handler {\n                                                                msg: &str,\n                                                                code: &str)\n                                                                -> DiagnosticBuilder<'a> {\n-        self.bump_err_count();\n         let mut result = DiagnosticBuilder::new(self, Level::Fatal, msg);\n         result.set_span(sp);\n         result.code(code.to_owned());\n         result\n     }\n     pub fn struct_fatal<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n-        self.bump_err_count();\n         DiagnosticBuilder::new(self, Level::Fatal, msg)\n     }\n \n     pub fn cancel(&self, err: &mut DiagnosticBuilder) {\n-        if err.level == Level::Error || err.level == Level::Fatal {\n-            self.err_count.set(self.err_count\n-                .get()\n-                .checked_sub(1)\n-                .expect(\"cancelled an error but err_count is 0\"));\n-        }\n         err.cancel();\n     }\n \n@@ -356,7 +344,6 @@ impl Handler {\n \n     pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> FatalError {\n         self.emit(&sp.into(), msg, Fatal);\n-        self.bump_err_count();\n         self.panic_if_treat_err_as_bug();\n         return FatalError;\n     }\n@@ -366,13 +353,11 @@ impl Handler {\n                                                     code: &str)\n                                                     -> FatalError {\n         self.emit_with_code(&sp.into(), msg, code, Fatal);\n-        self.bump_err_count();\n         self.panic_if_treat_err_as_bug();\n         return FatalError;\n     }\n     pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.emit(&sp.into(), msg, Error);\n-        self.bump_err_count();\n         self.panic_if_treat_err_as_bug();\n     }\n     pub fn mut_span_err<'a, S: Into<MultiSpan>>(&'a self,\n@@ -381,12 +366,10 @@ impl Handler {\n                                                 -> DiagnosticBuilder<'a> {\n         let mut result = DiagnosticBuilder::new(self, Level::Error, msg);\n         result.set_span(sp);\n-        self.bump_err_count();\n         result\n     }\n     pub fn span_err_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: &str) {\n         self.emit_with_code(&sp.into(), msg, code, Error);\n-        self.bump_err_count();\n         self.panic_if_treat_err_as_bug();\n     }\n     pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n@@ -405,7 +388,6 @@ impl Handler {\n     }\n     pub fn span_bug_no_panic<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.emit(&sp.into(), msg, Bug);\n-        self.bump_err_count();\n     }\n     pub fn span_note_without_error<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.emit(&sp.into(), msg, Note);\n@@ -419,7 +401,6 @@ impl Handler {\n         }\n         let mut db = DiagnosticBuilder::new(self, Fatal, msg);\n         db.emit();\n-        self.bump_err_count();\n         FatalError\n     }\n     pub fn err(&self, msg: &str) {\n@@ -428,7 +409,6 @@ impl Handler {\n         }\n         let mut db = DiagnosticBuilder::new(self, Error, msg);\n         db.emit();\n-        self.bump_err_count();\n     }\n     pub fn warn(&self, msg: &str) {\n         let mut db = DiagnosticBuilder::new(self, Warning, msg);"}, {"sha": "0d1bc4fdfa8e7707a6f7c8c312444ae545757a70", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b", "patch": "@@ -229,6 +229,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(PATTERNS_IN_FNS_WITHOUT_BODY),\n             reference: \"issue #35203 <https://github.com/rust-lang/rust/issues/35203>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(EXTRA_REQUIREMENT_IN_IMPL),\n+            reference: \"issue #18937 <https://github.com/rust-lang/rust/issues/18937>\",\n+        },\n         ]);\n \n     // Register renamed and removed lints"}, {"sha": "d9af317eab0eda5b3e4ed4f8a4632e9f4fa77fdb", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b", "patch": "@@ -367,6 +367,7 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                     item_name: impl_m.name,\n                     impl_item_def_id: impl_m.def_id,\n                     trait_item_def_id: trait_m.def_id,\n+                    lint_id: Some(impl_m_body_id),\n                 },\n             };\n "}, {"sha": "1285be1d312054ea5ad380245fc675e13431ea2f", "filename": "src/test/compile-fail/issue-18937.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Ftest%2Fcompile-fail%2Fissue-18937.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Ftest%2Fcompile-fail%2Fissue-18937.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18937.rs?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b", "patch": "@@ -10,6 +10,8 @@\n \n // Regression test for #18937.\n \n+#![deny(extra_requirement_in_impl)]\n+\n use std::fmt;\n \n #[derive(Debug)]"}, {"sha": "54cfe4be9c10143dbb9bedb3bf533487cf86c859", "filename": "src/test/ui/compare-method/proj-outlives-region.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.rs?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![allow(dead_code)]\n+#![deny(extra_requirement_in_impl)]\n \n // Test that we elaborate `Type: 'region` constraints and infer various important things.\n "}, {"sha": "f5907c0ae59926db1472895ef07f2192d45aeffb", "filename": "src/test/ui/compare-method/proj-outlives-region.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b", "patch": "@@ -1,11 +1,19 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/proj-outlives-region.rs:21:5\n+  --> $DIR/proj-outlives-region.rs:22:5\n    |\n-16 |     fn foo() where T: 'a;\n+17 |     fn foo() where T: 'a;\n    |     --------------------- definition of `foo` from trait\n ...\n-21 |     fn foo() where U: 'a { } //~ ERROR E0276\n+22 |     fn foo() where U: 'a { } //~ ERROR E0276\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `U: 'a`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #18937 <https://github.com/rust-lang/rust/issues/18937>\n+note: lint level defined here\n+  --> $DIR/proj-outlives-region.rs:12:9\n+   |\n+12 | #![deny(extra_requirement_in_impl)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/compare-method/proj-outlives-region.stdout", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stdout?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b"}, {"sha": "8f79b30bd5f31d8e2fe34bb936cb7457de40fe69", "filename": "src/test/ui/compare-method/region-unrelated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.rs?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![allow(dead_code)]\n+#![deny(extra_requirement_in_impl)]\n \n // Test that we elaborate `Type: 'region` constraints and infer various important things.\n "}, {"sha": "b8084c4a2f36e64d6a3a4fa39f7388731ebbec45", "filename": "src/test/ui/compare-method/region-unrelated.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b", "patch": "@@ -1,11 +1,19 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/region-unrelated.rs:21:5\n+  --> $DIR/region-unrelated.rs:22:5\n    |\n-16 |     fn foo() where T: 'a;\n+17 |     fn foo() where T: 'a;\n    |     --------------------- definition of `foo` from trait\n ...\n-21 |     fn foo() where V: 'a { }\n+22 |     fn foo() where V: 'a { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `V: 'a`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #18937 <https://github.com/rust-lang/rust/issues/18937>\n+note: lint level defined here\n+  --> $DIR/region-unrelated.rs:12:9\n+   |\n+12 | #![deny(extra_requirement_in_impl)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/compare-method/region-unrelated.stdout", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stdout?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b"}, {"sha": "ef6a642143c5004bd9473610fd18ca82c0b7a300", "filename": "src/test/ui/compare-method/region.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Ftest%2Fui%2Fcompare-method%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Ftest%2Fui%2Fcompare-method%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion.rs?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![allow(dead_code)]\n+#![deny(extra_requirement_in_impl)]\n \n // Test that we elaborate `Type: 'region` constraints and infer various important things.\n "}, {"sha": "787433137b9980efef103710d1c68f3773ebe6b8", "filename": "src/test/ui/compare-method/region.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Ftest%2Fui%2Fcompare-method%2Fregion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Ftest%2Fui%2Fcompare-method%2Fregion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion.stderr?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b", "patch": "@@ -1,11 +1,19 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/region.rs:21:5\n+  --> $DIR/region.rs:22:5\n    |\n-16 |     fn foo();\n+17 |     fn foo();\n    |     --------- definition of `foo` from trait\n ...\n-21 |     fn foo() where 'a: 'b { }\n+22 |     fn foo() where 'a: 'b { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'a: 'b`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #18937 <https://github.com/rust-lang/rust/issues/18937>\n+note: lint level defined here\n+  --> $DIR/region.rs:12:9\n+   |\n+12 | #![deny(extra_requirement_in_impl)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/compare-method/region.stdout", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Ftest%2Fui%2Fcompare-method%2Fregion.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ddabd509a862da4bd0e8cfb86baf598f45c2383b/src%2Ftest%2Fui%2Fcompare-method%2Fregion.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion.stdout?ref=ddabd509a862da4bd0e8cfb86baf598f45c2383b"}]}