{"sha": "84a6cb3bfc98ec9692eb82a8e2016d69d95b3209", "node_id": "C_kwDOAAsO6NoAKDg0YTZjYjNiZmM5OGVjOTY5MmViODJhOGUyMDE2ZDY5ZDk1YjMyMDk", "commit": {"author": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-06T07:59:56Z"}, "committer": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-06T07:59:56Z"}, "message": "Inline", "tree": {"sha": "cca05f17df184006037e9ae35b4b8e884eaad646", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cca05f17df184006037e9ae35b4b8e884eaad646"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84a6cb3bfc98ec9692eb82a8e2016d69d95b3209", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84a6cb3bfc98ec9692eb82a8e2016d69d95b3209", "html_url": "https://github.com/rust-lang/rust/commit/84a6cb3bfc98ec9692eb82a8e2016d69d95b3209", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84a6cb3bfc98ec9692eb82a8e2016d69d95b3209/comments", "author": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02e8bb0c6e3854485e72f896f889673a4f3ad762", "url": "https://api.github.com/repos/rust-lang/rust/commits/02e8bb0c6e3854485e72f896f889673a4f3ad762", "html_url": "https://github.com/rust-lang/rust/commit/02e8bb0c6e3854485e72f896f889673a4f3ad762"}], "stats": {"total": 51, "additions": 21, "deletions": 30}, "files": [{"sha": "eecc1edb13579186678a550b5d326e53287022cd", "filename": "lib/line-index/src/lib.rs", "status": "modified", "additions": 21, "deletions": 30, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/84a6cb3bfc98ec9692eb82a8e2016d69d95b3209/lib%2Fline-index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a6cb3bfc98ec9692eb82a8e2016d69d95b3209/lib%2Fline-index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fline-index%2Fsrc%2Flib.rs?ref=84a6cb3bfc98ec9692eb82a8e2016d69d95b3209", "patch": "@@ -157,33 +157,9 @@ impl LineIndex {\n \n     /// Transforms the `LineCol` with the given `WideEncoding` into a `WideLineCol`.\n     pub fn to_wide(&self, enc: WideEncoding, line_col: LineCol) -> Option<WideLineCol> {\n-        let col = self.utf8_to_wide_col(enc, line_col.line, line_col.col.into());\n-        Some(WideLineCol { line: line_col.line, col: col as u32 })\n-    }\n-\n-    /// Transforms the `WideLineCol` with the given `WideEncoding` into a `LineCol`.\n-    pub fn to_utf8(&self, enc: WideEncoding, line_col: WideLineCol) -> Option<LineCol> {\n-        let col = self.wide_to_utf8_col(enc, line_col.line, line_col.col);\n-        Some(LineCol { line: line_col.line, col: col.into() })\n-    }\n-\n-    /// Returns an iterator over the ranges for the lines.\n-    pub fn lines(&self, range: TextRange) -> impl Iterator<Item = TextRange> + '_ {\n-        let lo = self.newlines.partition_point(|&it| it < range.start());\n-        let hi = self.newlines.partition_point(|&it| it <= range.end());\n-        let all = std::iter::once(range.start())\n-            .chain(self.newlines[lo..hi].iter().copied())\n-            .chain(std::iter::once(range.end()));\n-\n-        all.clone()\n-            .zip(all.skip(1))\n-            .map(|(lo, hi)| TextRange::new(lo, hi))\n-            .filter(|it| !it.is_empty())\n-    }\n-\n-    fn utf8_to_wide_col(&self, enc: WideEncoding, line: u32, col: TextSize) -> usize {\n+        let col: TextSize = line_col.col.into();\n         let mut res: usize = col.into();\n-        if let Some(wide_chars) = self.line_wide_chars.get(&line) {\n+        if let Some(wide_chars) = self.line_wide_chars.get(&line_col.line) {\n             for c in wide_chars.iter() {\n                 if c.end <= col {\n                     res -= usize::from(c.len()) - c.wide_len(enc);\n@@ -194,11 +170,13 @@ impl LineIndex {\n                 }\n             }\n         }\n-        res\n+        Some(WideLineCol { line: line_col.line, col: res as u32 })\n     }\n \n-    fn wide_to_utf8_col(&self, enc: WideEncoding, line: u32, mut col: u32) -> TextSize {\n-        if let Some(wide_chars) = self.line_wide_chars.get(&line) {\n+    /// Transforms the `WideLineCol` with the given `WideEncoding` into a `LineCol`.\n+    pub fn to_utf8(&self, enc: WideEncoding, line_col: WideLineCol) -> Option<LineCol> {\n+        let mut col = line_col.col;\n+        if let Some(wide_chars) = self.line_wide_chars.get(&line_col.line) {\n             for c in wide_chars.iter() {\n                 if col > u32::from(c.start) {\n                     col += u32::from(c.len()) - c.wide_len(enc) as u32;\n@@ -209,7 +187,20 @@ impl LineIndex {\n                 }\n             }\n         }\n+        Some(LineCol { line: line_col.line, col: col.into() })\n+    }\n+\n+    /// Returns an iterator over the ranges for the lines.\n+    pub fn lines(&self, range: TextRange) -> impl Iterator<Item = TextRange> + '_ {\n+        let lo = self.newlines.partition_point(|&it| it < range.start());\n+        let hi = self.newlines.partition_point(|&it| it <= range.end());\n+        let all = std::iter::once(range.start())\n+            .chain(self.newlines[lo..hi].iter().copied())\n+            .chain(std::iter::once(range.end()));\n \n-        col.into()\n+        all.clone()\n+            .zip(all.skip(1))\n+            .map(|(lo, hi)| TextRange::new(lo, hi))\n+            .filter(|it| !it.is_empty())\n     }\n }"}]}