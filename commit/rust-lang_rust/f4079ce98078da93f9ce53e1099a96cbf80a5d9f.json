{"sha": "f4079ce98078da93f9ce53e1099a96cbf80a5d9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MDc5Y2U5ODA3OGRhOTNmOWNlNTNlMTA5OWE5NmNiZjgwYTVkOWY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-22T16:29:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-22T16:29:09Z"}, "message": "Rollup merge of #74528 - euclio:intra-link-errors, r=jyn514\n\nrefactor and reword intra-doc link errors\n\nThis commit refactors intra-doc link error reporting to deduplicate code\nand decouple error construction from the type of error. This greatly\nimproves flexibility at each error construction site, while reducing the\ncomplexity of the diagnostic creation.\n\nThis commit also rewords the diagnostics for clarity and style:\n\n- Diagnostics should not end in periods.\n- It's unnecessary to say \"ignoring it\". Since this is a warning by\n  default, it's already clear that the link is ignored.", "tree": {"sha": "83536c6533e9de9fa35bac00e7c4a8e28f3fc18b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83536c6533e9de9fa35bac00e7c4a8e28f3fc18b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4079ce98078da93f9ce53e1099a96cbf80a5d9f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfGGlVCRBK7hj4Ov3rIwAAdHIIAHNnborq6QZ4UM9z/zjnHF2B\ni0mWwU0HFxRDJzQRA+BiCJdqki4hUU3oUBdZkW30e3wxgJR12IgyQGunVfkMNCO5\nbnvgZHWqasScAWa8txgB2864SqH+MC/1gs33Uh/HSyW5cSDqTaM4GWVDeyOEGfnd\ndBBeeuxn+o8Bzr/CvTdwtxPp60lxUYCysxhMVez0oLYRKn5aMB1ZCOE2+FzEMrk/\nMQCIZn7z4tY1YHSUTevyjyyvaFwpXkkgt+MZl+p/oIAFOeYpKPscqrvwuNK56I8O\nz1klX1CmkNn2N5eDkrkVAIuJC71KPscqi+t4a8Stx43OBwf8Metd/RKxPzkFuvg=\n=2bMV\n-----END PGP SIGNATURE-----\n", "payload": "tree 83536c6533e9de9fa35bac00e7c4a8e28f3fc18b\nparent e811e294928e2fb6e7883c6d40bef2e62765e216\nparent 7f3e2c0d374ba7982ef09499c7de6bb53866abf4\nauthor Manish Goregaokar <manishsmail@gmail.com> 1595435349 -0700\ncommitter GitHub <noreply@github.com> 1595435349 -0700\n\nRollup merge of #74528 - euclio:intra-link-errors, r=jyn514\n\nrefactor and reword intra-doc link errors\n\nThis commit refactors intra-doc link error reporting to deduplicate code\nand decouple error construction from the type of error. This greatly\nimproves flexibility at each error construction site, while reducing the\ncomplexity of the diagnostic creation.\n\nThis commit also rewords the diagnostics for clarity and style:\n\n- Diagnostics should not end in periods.\n- It's unnecessary to say \"ignoring it\". Since this is a warning by\n  default, it's already clear that the link is ignored.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4079ce98078da93f9ce53e1099a96cbf80a5d9f", "html_url": "https://github.com/rust-lang/rust/commit/f4079ce98078da93f9ce53e1099a96cbf80a5d9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e811e294928e2fb6e7883c6d40bef2e62765e216", "url": "https://api.github.com/repos/rust-lang/rust/commits/e811e294928e2fb6e7883c6d40bef2e62765e216", "html_url": "https://github.com/rust-lang/rust/commit/e811e294928e2fb6e7883c6d40bef2e62765e216"}, {"sha": "7f3e2c0d374ba7982ef09499c7de6bb53866abf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3e2c0d374ba7982ef09499c7de6bb53866abf4", "html_url": "https://github.com/rust-lang/rust/commit/7f3e2c0d374ba7982ef09499c7de6bb53866abf4"}], "stats": {"total": 588, "additions": 290, "deletions": 298}, "files": [{"sha": "6f221da1168c63c5022837209d842423f625a0c9", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 173, "deletions": 181, "changes": 354, "blob_url": "https://github.com/rust-lang/rust/blob/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=f4079ce98078da93f9ce53e1099a96cbf80a5d9f", "patch": "@@ -1,5 +1,5 @@\n use rustc_ast::ast;\n-use rustc_errors::Applicability;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_expand::base::SyntaxExtensionKind;\n use rustc_feature::UnstableFeatures;\n use rustc_hir as hir;\n@@ -45,7 +45,17 @@ pub fn collect_intra_doc_links(krate: Crate, cx: &DocContext<'_>) -> Crate {\n \n enum ErrorKind {\n     ResolutionFailure,\n-    AnchorFailure(&'static str),\n+    AnchorFailure(AnchorFailure),\n+}\n+\n+enum AnchorFailure {\n+    MultipleAnchors,\n+    Primitive,\n+    Variant,\n+    AssocConstant,\n+    AssocType,\n+    Field,\n+    Method,\n }\n \n struct LinkCollector<'a, 'tcx> {\n@@ -197,9 +207,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                     // Not a trait item; just return what we found.\n                     Res::PrimTy(..) => {\n                         if extra_fragment.is_some() {\n-                            return Err(ErrorKind::AnchorFailure(\n-                                \"primitive types cannot be followed by anchors\",\n-                            ));\n+                            return Err(ErrorKind::AnchorFailure(AnchorFailure::Primitive));\n                         }\n                         return Ok((res, Some(path_str.to_owned())));\n                     }\n@@ -209,9 +217,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         if disambiguator == Some(\"type\") {\n                             if let Some(prim) = is_primitive(path_str, ns) {\n                                 if extra_fragment.is_some() {\n-                                    return Err(ErrorKind::AnchorFailure(\n-                                        \"primitive types cannot be followed by anchors\",\n-                                    ));\n+                                    return Err(ErrorKind::AnchorFailure(AnchorFailure::Primitive));\n                                 }\n                                 return Ok((prim, Some(path_str.to_owned())));\n                             }\n@@ -228,9 +234,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 }\n             } else if let Some(prim) = is_primitive(path_str, ns) {\n                 if extra_fragment.is_some() {\n-                    return Err(ErrorKind::AnchorFailure(\n-                        \"primitive types cannot be followed by anchors\",\n-                    ));\n+                    return Err(ErrorKind::AnchorFailure(AnchorFailure::Primitive));\n                 }\n                 return Ok((prim, Some(path_str.to_owned())));\n             } else {\n@@ -338,9 +342,9 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         };\n                         if extra_fragment.is_some() {\n                             Err(ErrorKind::AnchorFailure(if item.kind == ty::AssocKind::Fn {\n-                                \"methods cannot be followed by anchors\"\n+                                AnchorFailure::Method\n                             } else {\n-                                \"associated constants cannot be followed by anchors\"\n+                                AnchorFailure::AssocConstant\n                             }))\n                         } else {\n                             Ok((ty_res, Some(format!(\"{}.{}\", out, item_name))))\n@@ -358,9 +362,9 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                                 } {\n                                     if extra_fragment.is_some() {\n                                         Err(ErrorKind::AnchorFailure(if def.is_enum() {\n-                                            \"enum variants cannot be followed by anchors\"\n+                                            AnchorFailure::Variant\n                                         } else {\n-                                            \"struct fields cannot be followed by anchors\"\n+                                            AnchorFailure::Field\n                                         }))\n                                     } else {\n                                         Ok((\n@@ -404,11 +408,11 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n \n                         if extra_fragment.is_some() {\n                             Err(ErrorKind::AnchorFailure(if item.kind == ty::AssocKind::Const {\n-                                \"associated constants cannot be followed by anchors\"\n+                                AnchorFailure::AssocConstant\n                             } else if item.kind == ty::AssocKind::Type {\n-                                \"associated types cannot be followed by anchors\"\n+                                AnchorFailure::AssocType\n                             } else {\n-                                \"methods cannot be followed by anchors\"\n+                                AnchorFailure::Method\n                             }))\n                         } else {\n                             Ok((ty_res, Some(format!(\"{}.{}\", kind, item_name))))\n@@ -559,16 +563,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n             let link = ori_link.replace(\"`\", \"\");\n             let parts = link.split('#').collect::<Vec<_>>();\n             let (link, extra_fragment) = if parts.len() > 2 {\n-                build_diagnostic(\n-                    cx,\n-                    &item,\n-                    &link,\n-                    &dox,\n-                    link_range,\n-                    \"has an issue with the link anchor.\",\n-                    \"only one `#` is allowed in a link\",\n-                    None,\n-                );\n+                anchor_failure(cx, &item, &link, &dox, link_range, AnchorFailure::MultipleAnchors);\n                 continue;\n             } else if parts.len() == 2 {\n                 if parts[0].trim().is_empty() {\n@@ -803,21 +798,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                         && (item.visibility == Visibility::Public)\n                         && !self.cx.render_options.document_private\n                     {\n-                        let item_name = item.name.as_deref().unwrap_or(\"<unknown>\");\n-                        let err_msg = format!(\n-                            \"public documentation for `{}` links to a private item\",\n-                            item_name\n-                        );\n-                        build_diagnostic(\n-                            cx,\n-                            &item,\n-                            path_str,\n-                            &dox,\n-                            link_range,\n-                            &err_msg,\n-                            \"this item is private\",\n-                            None,\n-                        );\n+                        privacy_error(cx, &item, &path_str, &dox, link_range);\n                         continue;\n                     }\n                 }\n@@ -851,24 +832,33 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n     }\n }\n \n-fn build_diagnostic(\n+/// Reports a diagnostic for an intra-doc link.\n+///\n+/// If no link range is provided, or the source span of the link cannot be determined, the span of\n+/// the entire documentation block is used for the lint. If a range is provided but the span\n+/// calculation fails, a note is added to the diagnostic pointing to the link in the markdown.\n+///\n+/// The `decorate` callback is invoked in all cases to allow further customization of the\n+/// diagnostic before emission. If the span of the link was able to be determined, the second\n+/// parameter of the callback will contain it, and the primary span of the diagnostic will be set\n+/// to it.\n+fn report_diagnostic(\n     cx: &DocContext<'_>,\n+    msg: &str,\n     item: &Item,\n-    path_str: &str,\n     dox: &str,\n     link_range: Option<Range<usize>>,\n-    err_msg: &str,\n-    short_err_msg: &str,\n-    help_msg: Option<&str>,\n+    decorate: impl FnOnce(&mut DiagnosticBuilder<'_>, Option<rustc_span::Span>),\n ) {\n     let hir_id = match cx.as_local_hir_id(item.def_id) {\n         Some(hir_id) => hir_id,\n         None => {\n             // If non-local, no need to check anything.\n-            info!(\"ignoring warning from parent crate: {}\", err_msg);\n+            info!(\"ignoring warning from parent crate: {}\", msg);\n             return;\n         }\n     };\n+\n     let attrs = &item.attrs;\n     let sp = span_of_attrs(attrs).unwrap_or(item.source.span());\n \n@@ -877,12 +867,15 @@ fn build_diagnostic(\n         hir_id,\n         sp,\n         |lint| {\n-            let mut diag = lint.build(&format!(\"`[{}]` {}\", path_str, err_msg));\n+            let mut diag = lint.build(msg);\n+\n+            let span = link_range\n+                .as_ref()\n+                .and_then(|range| super::source_span_for_markdown_range(cx, dox, range, attrs));\n+\n             if let Some(link_range) = link_range {\n-                if let Some(sp) = super::source_span_for_markdown_range(cx, dox, &link_range, attrs)\n-                {\n+                if let Some(sp) = span {\n                     diag.set_span(sp);\n-                    diag.span_label(sp, short_err_msg);\n                 } else {\n                     // blah blah blah\\nblah\\nblah [blah] blah blah\\nblah blah\n                     //                       ^     ~~~~\n@@ -902,36 +895,35 @@ fn build_diagnostic(\n                         found = link_range.len(),\n                     ));\n                 }\n-            };\n-            if let Some(help_msg) = help_msg {\n-                diag.help(help_msg);\n             }\n+\n+            decorate(&mut diag, span);\n+\n             diag.emit();\n         },\n     );\n }\n \n-/// Reports a resolution failure diagnostic.\n-///\n-/// If we cannot find the exact source span of the resolution failure, we use the span of the\n-/// documentation attributes themselves. This is a little heavy-handed, so we display the markdown\n-/// line containing the failure as a note as well.\n fn resolution_failure(\n     cx: &DocContext<'_>,\n     item: &Item,\n     path_str: &str,\n     dox: &str,\n     link_range: Option<Range<usize>>,\n ) {\n-    build_diagnostic(\n+    report_diagnostic(\n         cx,\n+        &format!(\"unresolved link to `{}`\", path_str),\n         item,\n-        path_str,\n         dox,\n         link_range,\n-        \"cannot be resolved, ignoring it.\",\n-        \"cannot be resolved, ignoring\",\n-        Some(\"to escape `[` and `]` characters, just add '\\\\' before them like `\\\\[` or `\\\\]`\"),\n+        |diag, sp| {\n+            if let Some(sp) = sp {\n+                diag.span_label(sp, \"unresolved link\");\n+            }\n+\n+            diag.help(r#\"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\"#);\n+        },\n     );\n }\n \n@@ -941,18 +933,39 @@ fn anchor_failure(\n     path_str: &str,\n     dox: &str,\n     link_range: Option<Range<usize>>,\n-    msg: &str,\n+    failure: AnchorFailure,\n ) {\n-    build_diagnostic(\n-        cx,\n-        item,\n-        path_str,\n-        dox,\n-        link_range,\n-        \"has an issue with the link anchor.\",\n-        msg,\n-        None,\n-    );\n+    let msg = match failure {\n+        AnchorFailure::MultipleAnchors => format!(\"`{}` contains multiple anchors\", path_str),\n+        AnchorFailure::Primitive\n+        | AnchorFailure::Variant\n+        | AnchorFailure::AssocConstant\n+        | AnchorFailure::AssocType\n+        | AnchorFailure::Field\n+        | AnchorFailure::Method => {\n+            let kind = match failure {\n+                AnchorFailure::Primitive => \"primitive type\",\n+                AnchorFailure::Variant => \"enum variant\",\n+                AnchorFailure::AssocConstant => \"associated constant\",\n+                AnchorFailure::AssocType => \"associated type\",\n+                AnchorFailure::Field => \"struct field\",\n+                AnchorFailure::Method => \"method\",\n+                AnchorFailure::MultipleAnchors => unreachable!(\"should be handled already\"),\n+            };\n+\n+            format!(\n+                \"`{}` contains an anchor, but links to {kind}s are already anchored\",\n+                path_str,\n+                kind = kind\n+            )\n+        }\n+    };\n+\n+    report_diagnostic(cx, &msg, item, dox, link_range, |diag, sp| {\n+        if let Some(sp) = sp {\n+            diag.span_label(sp, \"contains invalid anchor\");\n+        }\n+    });\n }\n \n fn ambiguity_error(\n@@ -963,121 +976,100 @@ fn ambiguity_error(\n     link_range: Option<Range<usize>>,\n     candidates: PerNS<Option<Res>>,\n ) {\n-    let hir_id = match cx.as_local_hir_id(item.def_id) {\n-        Some(hir_id) => hir_id,\n-        None => {\n-            // If non-local, no need to check anything.\n-            return;\n+    let mut msg = format!(\"`{}` is \", path_str);\n+\n+    let candidates = [TypeNS, ValueNS, MacroNS]\n+        .iter()\n+        .filter_map(|&ns| candidates[ns].map(|res| (res, ns)))\n+        .collect::<Vec<_>>();\n+    match candidates.as_slice() {\n+        [(first_def, _), (second_def, _)] => {\n+            msg += &format!(\n+                \"both {} {} and {} {}\",\n+                first_def.article(),\n+                first_def.descr(),\n+                second_def.article(),\n+                second_def.descr(),\n+            );\n         }\n-    };\n-    let attrs = &item.attrs;\n-    let sp = span_of_attrs(attrs).unwrap_or(item.source.span());\n-\n-    cx.tcx.struct_span_lint_hir(\n-        lint::builtin::INTRA_DOC_LINK_RESOLUTION_FAILURE,\n-        hir_id,\n-        sp,\n-        |lint| {\n-            let mut msg = format!(\"`{}` is \", path_str);\n-\n-            let candidates = [TypeNS, ValueNS, MacroNS]\n-                .iter()\n-                .filter_map(|&ns| candidates[ns].map(|res| (res, ns)))\n-                .collect::<Vec<_>>();\n-            match candidates.as_slice() {\n-                [(first_def, _), (second_def, _)] => {\n-                    msg += &format!(\n-                        \"both {} {} and {} {}\",\n-                        first_def.article(),\n-                        first_def.descr(),\n-                        second_def.article(),\n-                        second_def.descr(),\n-                    );\n-                }\n-                _ => {\n-                    let mut candidates = candidates.iter().peekable();\n-                    while let Some((res, _)) = candidates.next() {\n-                        if candidates.peek().is_some() {\n-                            msg += &format!(\"{} {}, \", res.article(), res.descr());\n-                        } else {\n-                            msg += &format!(\"and {} {}\", res.article(), res.descr());\n-                        }\n-                    }\n+        _ => {\n+            let mut candidates = candidates.iter().peekable();\n+            while let Some((res, _)) = candidates.next() {\n+                if candidates.peek().is_some() {\n+                    msg += &format!(\"{} {}, \", res.article(), res.descr());\n+                } else {\n+                    msg += &format!(\"and {} {}\", res.article(), res.descr());\n                 }\n             }\n+        }\n+    }\n \n-            let mut diag = lint.build(&msg);\n+    report_diagnostic(cx, &msg, item, dox, link_range.clone(), |diag, sp| {\n+        if let Some(sp) = sp {\n+            diag.span_label(sp, \"ambiguous link\");\n \n-            if let Some(link_range) = link_range {\n-                if let Some(sp) = super::source_span_for_markdown_range(cx, dox, &link_range, attrs)\n-                {\n-                    diag.set_span(sp);\n-                    diag.span_label(sp, \"ambiguous link\");\n+            let link_range = link_range.expect(\"must have a link range if we have a span\");\n \n-                    for (res, ns) in candidates {\n-                        let (action, mut suggestion) = match res {\n-                            Res::Def(DefKind::AssocFn | DefKind::Fn, _) => {\n-                                (\"add parentheses\", format!(\"{}()\", path_str))\n-                            }\n-                            Res::Def(DefKind::Macro(MacroKind::Bang), _) => {\n-                                (\"add an exclamation mark\", format!(\"{}!\", path_str))\n-                            }\n-                            _ => {\n-                                let type_ = match (res, ns) {\n-                                    (Res::Def(DefKind::Const, _), _) => \"const\",\n-                                    (Res::Def(DefKind::Static, _), _) => \"static\",\n-                                    (Res::Def(DefKind::Struct, _), _) => \"struct\",\n-                                    (Res::Def(DefKind::Enum, _), _) => \"enum\",\n-                                    (Res::Def(DefKind::Union, _), _) => \"union\",\n-                                    (Res::Def(DefKind::Trait, _), _) => \"trait\",\n-                                    (Res::Def(DefKind::Mod, _), _) => \"module\",\n-                                    (_, TypeNS) => \"type\",\n-                                    (_, ValueNS) => \"value\",\n-                                    (Res::Def(DefKind::Macro(MacroKind::Derive), _), MacroNS) => {\n-                                        \"derive\"\n-                                    }\n-                                    (_, MacroNS) => \"macro\",\n-                                };\n-\n-                                // FIXME: if this is an implied shortcut link, it's bad style to suggest `@`\n-                                (\"prefix with the item type\", format!(\"{}@{}\", type_, path_str))\n-                            }\n+            for (res, ns) in candidates {\n+                let (action, mut suggestion) = match res {\n+                    Res::Def(DefKind::AssocFn | DefKind::Fn, _) => {\n+                        (\"add parentheses\", format!(\"{}()\", path_str))\n+                    }\n+                    Res::Def(DefKind::Macro(MacroKind::Bang), _) => {\n+                        (\"add an exclamation mark\", format!(\"{}!\", path_str))\n+                    }\n+                    _ => {\n+                        let type_ = match (res, ns) {\n+                            (Res::Def(DefKind::Const, _), _) => \"const\",\n+                            (Res::Def(DefKind::Static, _), _) => \"static\",\n+                            (Res::Def(DefKind::Struct, _), _) => \"struct\",\n+                            (Res::Def(DefKind::Enum, _), _) => \"enum\",\n+                            (Res::Def(DefKind::Union, _), _) => \"union\",\n+                            (Res::Def(DefKind::Trait, _), _) => \"trait\",\n+                            (Res::Def(DefKind::Mod, _), _) => \"module\",\n+                            (_, TypeNS) => \"type\",\n+                            (_, ValueNS) => \"value\",\n+                            (Res::Def(DefKind::Macro(MacroKind::Derive), _), MacroNS) => \"derive\",\n+                            (_, MacroNS) => \"macro\",\n                         };\n \n-                        if dox.bytes().nth(link_range.start) == Some(b'`') {\n-                            suggestion = format!(\"`{}`\", suggestion);\n-                        }\n-\n-                        diag.span_suggestion(\n-                            sp,\n-                            &format!(\"to link to the {}, {}\", res.descr(), action),\n-                            suggestion,\n-                            Applicability::MaybeIncorrect,\n-                        );\n+                        // FIXME: if this is an implied shortcut link, it's bad style to suggest `@`\n+                        (\"prefix with the item type\", format!(\"{}@{}\", type_, path_str))\n                     }\n-                } else {\n-                    // blah blah blah\\nblah\\nblah [blah] blah blah\\nblah blah\n-                    //                       ^     ~~~~\n-                    //                       |     link_range\n-                    //                       last_new_line_offset\n-                    let last_new_line_offset =\n-                        dox[..link_range.start].rfind('\\n').map_or(0, |n| n + 1);\n-                    let line = dox[last_new_line_offset..].lines().next().unwrap_or(\"\");\n+                };\n \n-                    // Print the line containing the `link_range` and manually mark it with '^'s.\n-                    diag.note(&format!(\n-                        \"the link appears in this line:\\n\\n{line}\\n\\\n-                         {indicator: <before$}{indicator:^<found$}\",\n-                        line = line,\n-                        indicator = \"\",\n-                        before = link_range.start - last_new_line_offset,\n-                        found = link_range.len(),\n-                    ));\n+                if dox.bytes().nth(link_range.start) == Some(b'`') {\n+                    suggestion = format!(\"`{}`\", suggestion);\n                 }\n+\n+                // FIXME: Create a version of this suggestion for when we don't have the span.\n+                diag.span_suggestion(\n+                    sp,\n+                    &format!(\"to link to the {}, {}\", res.descr(), action),\n+                    suggestion,\n+                    Applicability::MaybeIncorrect,\n+                );\n             }\n-            diag.emit();\n-        },\n-    );\n+        }\n+    });\n+}\n+\n+fn privacy_error(\n+    cx: &DocContext<'_>,\n+    item: &Item,\n+    path_str: &str,\n+    dox: &str,\n+    link_range: Option<Range<usize>>,\n+) {\n+    let item_name = item.name.as_deref().unwrap_or(\"<unknown>\");\n+    let msg =\n+        format!(\"public documentation for `{}` links to private item `{}`\", item_name, path_str);\n+\n+    report_diagnostic(cx, &msg, item, dox, link_range, |diag, sp| {\n+        if let Some(sp) = sp {\n+            diag.span_label(sp, \"this item is private\");\n+        }\n+    });\n }\n \n /// Given an enum variant's res, return the res of its enum and the associated fragment.\n@@ -1089,7 +1081,7 @@ fn handle_variant(\n     use rustc_middle::ty::DefIdTree;\n \n     if extra_fragment.is_some() {\n-        return Err(ErrorKind::AnchorFailure(\"variants cannot be followed by anchors\"));\n+        return Err(ErrorKind::AnchorFailure(AnchorFailure::Variant));\n     }\n     let parent = if let Some(parent) = cx.tcx.parent(res.def_id()) {\n         parent"}, {"sha": "894518faa31686f810052fad43a2f3790da9c8e0", "filename": "src/test/rustdoc-ui/deny-intra-link-resolution-failure.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr?ref=f4079ce98078da93f9ce53e1099a96cbf80a5d9f", "patch": "@@ -1,15 +1,15 @@\n-error: `[v2]` cannot be resolved, ignoring it.\n+error: unresolved link to `v2`\n   --> $DIR/deny-intra-link-resolution-failure.rs:3:6\n    |\n LL | /// [v2]\n-   |      ^^ cannot be resolved, ignoring\n+   |      ^^ unresolved link\n    |\n note: the lint level is defined here\n   --> $DIR/deny-intra-link-resolution-failure.rs:1:9\n    |\n LL | #![deny(intra_doc_link_resolution_failure)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: aborting due to previous error\n "}, {"sha": "d2b2b90a4e50d69a7222f0e377c840ad8c302762", "filename": "src/test/rustdoc-ui/intra-doc-alias-ice.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr?ref=f4079ce98078da93f9ce53e1099a96cbf80a5d9f", "patch": "@@ -1,15 +1,15 @@\n-error: `[TypeAlias::hoge]` cannot be resolved, ignoring it.\n+error: unresolved link to `TypeAlias::hoge`\n   --> $DIR/intra-doc-alias-ice.rs:5:30\n    |\n LL | /// [broken cross-reference](TypeAlias::hoge)\n-   |                              ^^^^^^^^^^^^^^^ cannot be resolved, ignoring\n+   |                              ^^^^^^^^^^^^^^^ unresolved link\n    |\n note: the lint level is defined here\n   --> $DIR/intra-doc-alias-ice.rs:1:9\n    |\n LL | #![deny(intra_doc_link_resolution_failure)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: aborting due to previous error\n "}, {"sha": "95388003f84704a79b8f01637e386c0430987eb4", "filename": "src/test/rustdoc-ui/intra-link-span-ice-55723.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.rs?ref=f4079ce98078da93f9ce53e1099a96cbf80a5d9f", "patch": "@@ -7,7 +7,7 @@\n /// ## For example:\n ///\n /// \uff08arr[i]\uff09\n-//~^ ERROR `[i]` cannot be resolved, ignoring it.\n+//~^ ERROR `i`\n pub fn test_ice() {\n     unimplemented!();\n }"}, {"sha": "156e214a79ff05258fb811d0bbb3d7f1d6bc2555", "filename": "src/test/rustdoc-ui/intra-link-span-ice-55723.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.stderr?ref=f4079ce98078da93f9ce53e1099a96cbf80a5d9f", "patch": "@@ -1,15 +1,15 @@\n-error: `[i]` cannot be resolved, ignoring it.\n+error: unresolved link to `i`\n   --> $DIR/intra-link-span-ice-55723.rs:9:10\n    |\n LL | /// \uff08arr[i]\uff09\n-   |           ^ cannot be resolved, ignoring\n+   |           ^ unresolved link\n    |\n note: the lint level is defined here\n   --> $DIR/intra-link-span-ice-55723.rs:1:9\n    |\n LL | #![deny(intra_doc_link_resolution_failure)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: aborting due to previous error\n "}, {"sha": "7e61bd725359a4c57422264bce630bc1244096d7", "filename": "src/test/rustdoc-ui/intra-links-anchors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fintra-links-anchors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fintra-links-anchors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-anchors.rs?ref=f4079ce98078da93f9ce53e1099a96cbf80a5d9f", "patch": "@@ -23,23 +23,23 @@ pub enum Enum {\n /// Like [Foo#hola].\n ///\n /// Or maybe [Foo::f#hola].\n-//~^ ERROR `[Foo::f#hola]` has an issue with the link anchor.\n+//~^ ERROR `Foo::f#hola` contains an anchor\n pub fn foo() {}\n \n /// Empty.\n ///\n /// Another anchor error: [hello#people#!].\n-//~^ ERROR `[hello#people#!]` has an issue with the link anchor.\n+//~^ ERROR `hello#people#!` contains multiple anchors\n pub fn bar() {}\n \n /// Empty?\n ///\n /// Damn enum's variants: [Enum::A#whatever].\n-//~^ ERROR `[Enum::A#whatever]` has an issue with the link anchor.\n+//~^ ERROR `Enum::A#whatever` contains an anchor\n pub fn enum_link() {}\n \n /// Primitives?\n ///\n /// [u32#hello]\n-//~^ ERROR `[u32#hello]` has an issue with the link anchor.\n+//~^ ERROR `u32#hello` contains an anchor\n pub fn x() {}"}, {"sha": "ef33d8f3e06fefbee4a4c1c0c3987ac6de8345e5", "filename": "src/test/rustdoc-ui/intra-links-anchors.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fintra-links-anchors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fintra-links-anchors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-anchors.stderr?ref=f4079ce98078da93f9ce53e1099a96cbf80a5d9f", "patch": "@@ -1,32 +1,32 @@\n-error: `[Foo::f#hola]` has an issue with the link anchor.\n+error: `Foo::f#hola` contains an anchor, but links to struct fields are already anchored\n   --> $DIR/intra-links-anchors.rs:25:15\n    |\n LL | /// Or maybe [Foo::f#hola].\n-   |               ^^^^^^^^^^^ struct fields cannot be followed by anchors\n+   |               ^^^^^^^^^^^ contains invalid anchor\n    |\n note: the lint level is defined here\n   --> $DIR/intra-links-anchors.rs:1:9\n    |\n LL | #![deny(intra_doc_link_resolution_failure)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `[hello#people#!]` has an issue with the link anchor.\n+error: `hello#people#!` contains multiple anchors\n   --> $DIR/intra-links-anchors.rs:31:28\n    |\n LL | /// Another anchor error: [hello#people#!].\n-   |                            ^^^^^^^^^^^^^^ only one `#` is allowed in a link\n+   |                            ^^^^^^^^^^^^^^ contains invalid anchor\n \n-error: `[Enum::A#whatever]` has an issue with the link anchor.\n+error: `Enum::A#whatever` contains an anchor, but links to enum variants are already anchored\n   --> $DIR/intra-links-anchors.rs:37:28\n    |\n LL | /// Damn enum's variants: [Enum::A#whatever].\n-   |                            ^^^^^^^^^^^^^^^^ variants cannot be followed by anchors\n+   |                            ^^^^^^^^^^^^^^^^ contains invalid anchor\n \n-error: `[u32#hello]` has an issue with the link anchor.\n+error: `u32#hello` contains an anchor, but links to primitive types are already anchored\n   --> $DIR/intra-links-anchors.rs:43:6\n    |\n LL | /// [u32#hello]\n-   |      ^^^^^^^^^ primitive types cannot be followed by anchors\n+   |      ^^^^^^^^^ contains invalid anchor\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a124435b08a99940fdd6f20f54ae61ad0157c538", "filename": "src/test/rustdoc-ui/intra-links-private.public.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.public.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.public.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.public.stderr?ref=f4079ce98078da93f9ce53e1099a96cbf80a5d9f", "patch": "@@ -1,4 +1,4 @@\n-warning: `[DontDocMe]` public documentation for `DocMe` links to a private item\n+warning: public documentation for `DocMe` links to private item `DontDocMe`\n   --> $DIR/intra-links-private.rs:6:11\n    |\n LL | /// docs [DontDocMe]"}, {"sha": "1b97f6e61bd2369df84cf09f229cafaebb9692db", "filename": "src/test/rustdoc-ui/intra-links-private.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.rs?ref=f4079ce98078da93f9ce53e1099a96cbf80a5d9f", "patch": "@@ -4,7 +4,7 @@\n #![cfg_attr(private, deny(intra_doc_link_resolution_failure))]\n \n /// docs [DontDocMe]\n-//[public]~^ WARNING `[DontDocMe]` public documentation for `DocMe` links to a private item\n+//[public]~^ WARNING public documentation for `DocMe` links to private item `DontDocMe`\n // FIXME: for [private] we should also make sure the link was actually generated\n pub struct DocMe;\n struct DontDocMe;"}, {"sha": "a19c33b53be09673b8f24197a2ab001812800f13", "filename": "src/test/rustdoc-ui/intra-links-warning-crlf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.rs?ref=f4079ce98078da93f9ce53e1099a96cbf80a5d9f", "patch": "@@ -6,21 +6,21 @@\n \n /// [error]\n pub struct A;\n-//~^^ WARNING `[error]` cannot be resolved\n+//~^^ WARNING `error`\n \n ///\n /// docs [error1]\n-//~^ WARNING `[error1]` cannot be resolved\n+//~^ WARNING `error1`\n \n /// docs [error2]\n ///\n pub struct B;\n-//~^^^ WARNING `[error2]` cannot be resolved\n+//~^^^ WARNING `error2`\n \n /**\n  * This is a multi-line comment.\n  *\n  * It also has an [error].\n  */\n pub struct C;\n-//~^^^ WARNING `[error]` cannot be resolved\n+//~^^^ WARNING `error`"}, {"sha": "bc31264c170eaf3bed48c3bd07eda0fdd4d891f5", "filename": "src/test/rustdoc-ui/intra-links-warning-crlf.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.stderr?ref=f4079ce98078da93f9ce53e1099a96cbf80a5d9f", "patch": "@@ -1,35 +1,35 @@\n-warning: `[error]` cannot be resolved, ignoring it.\n+warning: unresolved link to `error`\n   --> $DIR/intra-links-warning-crlf.rs:7:6\n    |\n LL | /// [error]\n-   |      ^^^^^ cannot be resolved, ignoring\n+   |      ^^^^^ unresolved link\n    |\n    = note: `#[warn(intra_doc_link_resolution_failure)]` on by default\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[error1]` cannot be resolved, ignoring it.\n+warning: unresolved link to `error1`\n   --> $DIR/intra-links-warning-crlf.rs:12:11\n    |\n LL | /// docs [error1]\n-   |           ^^^^^^ cannot be resolved, ignoring\n+   |           ^^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[error2]` cannot be resolved, ignoring it.\n+warning: unresolved link to `error2`\n   --> $DIR/intra-links-warning-crlf.rs:15:11\n    |\n LL | /// docs [error2]\n-   |           ^^^^^^ cannot be resolved, ignoring\n+   |           ^^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[error]` cannot be resolved, ignoring it.\n+warning: unresolved link to `error`\n   --> $DIR/intra-links-warning-crlf.rs:23:20\n    |\n LL |  * It also has an [error].\n-   |                    ^^^^^ cannot be resolved, ignoring\n+   |                    ^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: 4 warnings emitted\n "}, {"sha": "eab1f03480460b2d05d9c722a44aaa41085805bc", "filename": "src/test/rustdoc-ui/intra-links-warning.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs?ref=f4079ce98078da93f9ce53e1099a96cbf80a5d9f", "patch": "@@ -1,37 +1,37 @@\n // check-pass\n \n        //! Test with [Foo::baz], [Bar::foo], ...\n-//~^ WARNING `[Foo::baz]` cannot be resolved\n-//~| WARNING `[Bar::foo]` cannot be resolved\n+//~^ WARNING `Foo::baz`\n+//~| WARNING `Bar::foo`\n      //! , [Uniooon::X] and [Qux::Z].\n-//~^ WARNING `[Uniooon::X]` cannot be resolved\n-//~| WARNING `[Qux::Z]` cannot be resolved\n+//~^ WARNING `Uniooon::X`\n+//~| WARNING `Qux::Z`\n        //!\n       //! , [Uniooon::X] and [Qux::Z].\n-//~^ WARNING `[Uniooon::X]` cannot be resolved\n-//~| WARNING `[Qux::Z]` cannot be resolved\n+//~^ WARNING `Uniooon::X`\n+//~| WARNING `Qux::Z`\n \n        /// [Qux:Y]\n-//~^ WARNING `[Qux:Y]` cannot be resolved\n+//~^ WARNING `Qux:Y`\n pub struct Foo {\n     pub bar: usize,\n }\n \n /// Foo\n-/// bar [BarA] bar //~ WARNING `[BarA]` cannot be resolved\n+/// bar [BarA] bar //~ WARNING `BarA`\n /// baz\n pub fn a() {}\n \n /**\n  * Foo\n- * bar [BarB] bar //~ WARNING `[BarB]` cannot be resolved\n+ * bar [BarB] bar //~ WARNING `BarB`\n  * baz\n  */\n pub fn b() {}\n \n /** Foo\n \n-bar [BarC] bar //~ WARNING `[BarC]` cannot be resolved\n+bar [BarC] bar //~ WARNING `BarC`\n baz\n \n     let bar_c_1 = 0;\n@@ -42,43 +42,43 @@ baz\n */\n pub fn c() {}\n \n-#[doc = \"Foo\\nbar [BarD] bar\\nbaz\"] //~ WARNING `[BarD]` cannot be resolved\n+#[doc = \"Foo\\nbar [BarD] bar\\nbaz\"] //~ WARNING `BarD`\n pub fn d() {}\n \n macro_rules! f {\n     ($f:expr) => {\n-        #[doc = $f] //~ WARNING `[BarF]` cannot be resolved\n+        #[doc = $f] //~ WARNING `BarF`\n         pub fn f() {}\n     }\n }\n f!(\"Foo\\nbar [BarF] bar\\nbaz\");\n \n /** # for example,\n  *\n- * time to introduce a link [error]*/ //~ WARNING `[error]` cannot be resolved\n+ * time to introduce a link [error]*/ //~ WARNING `error`\n pub struct A;\n \n /**\n  * # for example,\n  *\n- * time to introduce a link [error] //~ WARNING `[error]` cannot be resolved\n+ * time to introduce a link [error] //~ WARNING `error`\n  */\n pub struct B;\n \n-#[doc = \"single line [error]\"] //~ WARNING `[error]` cannot be resolved\n+#[doc = \"single line [error]\"] //~ WARNING `error`\n pub struct C;\n \n-#[doc = \"single line with \\\"escaping\\\" [error]\"] //~ WARNING `[error]` cannot be resolved\n+#[doc = \"single line with \\\"escaping\\\" [error]\"] //~ WARNING `error`\n pub struct D;\n \n-/// Item docs. //~ WARNING `[error]` cannot be resolved\n+/// Item docs. //~ WARNING `error`\n #[doc=\"Hello there!\"]\n /// [error]\n pub struct E;\n \n ///\n-/// docs [error1] //~ WARNING `[error1]` cannot be resolved\n+/// docs [error1] //~ WARNING `error1`\n \n-/// docs [error2] //~ WARNING `[error2]` cannot be resolved\n+/// docs [error2] //~ WARNING `error2`\n ///\n pub struct F;"}, {"sha": "81931399c240a87f29cfa8a5b7aaf658be4c95f9", "filename": "src/test/rustdoc-ui/intra-links-warning.stderr", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr?ref=f4079ce98078da93f9ce53e1099a96cbf80a5d9f", "patch": "@@ -1,77 +1,77 @@\n-warning: `[Foo::baz]` cannot be resolved, ignoring it.\n+warning: unresolved link to `Foo::baz`\n   --> $DIR/intra-links-warning.rs:3:23\n    |\n LL |        //! Test with [Foo::baz], [Bar::foo], ...\n-   |                       ^^^^^^^^ cannot be resolved, ignoring\n+   |                       ^^^^^^^^ unresolved link\n    |\n    = note: `#[warn(intra_doc_link_resolution_failure)]` on by default\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[Bar::foo]` cannot be resolved, ignoring it.\n+warning: unresolved link to `Bar::foo`\n   --> $DIR/intra-links-warning.rs:3:35\n    |\n LL |        //! Test with [Foo::baz], [Bar::foo], ...\n-   |                                   ^^^^^^^^ cannot be resolved, ignoring\n+   |                                   ^^^^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[Uniooon::X]` cannot be resolved, ignoring it.\n+warning: unresolved link to `Uniooon::X`\n   --> $DIR/intra-links-warning.rs:6:13\n    |\n LL |      //! , [Uniooon::X] and [Qux::Z].\n-   |             ^^^^^^^^^^ cannot be resolved, ignoring\n+   |             ^^^^^^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[Qux::Z]` cannot be resolved, ignoring it.\n+warning: unresolved link to `Qux::Z`\n   --> $DIR/intra-links-warning.rs:6:30\n    |\n LL |      //! , [Uniooon::X] and [Qux::Z].\n-   |                              ^^^^^^ cannot be resolved, ignoring\n+   |                              ^^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[Uniooon::X]` cannot be resolved, ignoring it.\n+warning: unresolved link to `Uniooon::X`\n   --> $DIR/intra-links-warning.rs:10:14\n    |\n LL |       //! , [Uniooon::X] and [Qux::Z].\n-   |              ^^^^^^^^^^ cannot be resolved, ignoring\n+   |              ^^^^^^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[Qux::Z]` cannot be resolved, ignoring it.\n+warning: unresolved link to `Qux::Z`\n   --> $DIR/intra-links-warning.rs:10:31\n    |\n LL |       //! , [Uniooon::X] and [Qux::Z].\n-   |                               ^^^^^^ cannot be resolved, ignoring\n+   |                               ^^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[Qux:Y]` cannot be resolved, ignoring it.\n+warning: unresolved link to `Qux:Y`\n   --> $DIR/intra-links-warning.rs:14:13\n    |\n LL |        /// [Qux:Y]\n-   |             ^^^^^ cannot be resolved, ignoring\n+   |             ^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[error]` cannot be resolved, ignoring it.\n+warning: unresolved link to `error`\n   --> $DIR/intra-links-warning.rs:58:30\n    |\n LL |  * time to introduce a link [error]*/\n-   |                              ^^^^^ cannot be resolved, ignoring\n+   |                              ^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[error]` cannot be resolved, ignoring it.\n+warning: unresolved link to `error`\n   --> $DIR/intra-links-warning.rs:64:30\n    |\n LL |  * time to introduce a link [error]\n-   |                              ^^^^^ cannot be resolved, ignoring\n+   |                              ^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[error]` cannot be resolved, ignoring it.\n+warning: unresolved link to `error`\n   --> $DIR/intra-links-warning.rs:68:1\n    |\n LL | #[doc = \"single line [error]\"]\n@@ -81,9 +81,9 @@ LL | #[doc = \"single line [error]\"]\n            \n            single line [error]\n                         ^^^^^\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[error]` cannot be resolved, ignoring it.\n+warning: unresolved link to `error`\n   --> $DIR/intra-links-warning.rs:71:1\n    |\n LL | #[doc = \"single line with \\\"escaping\\\" [error]\"]\n@@ -93,9 +93,9 @@ LL | #[doc = \"single line with \\\"escaping\\\" [error]\"]\n            \n            single line with \"escaping\" [error]\n                                         ^^^^^\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[error]` cannot be resolved, ignoring it.\n+warning: unresolved link to `error`\n   --> $DIR/intra-links-warning.rs:74:1\n    |\n LL | / /// Item docs.\n@@ -107,49 +107,49 @@ LL | | /// [error]\n            \n            [error]\n             ^^^^^\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[error1]` cannot be resolved, ignoring it.\n+warning: unresolved link to `error1`\n   --> $DIR/intra-links-warning.rs:80:11\n    |\n LL | /// docs [error1]\n-   |           ^^^^^^ cannot be resolved, ignoring\n+   |           ^^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[error2]` cannot be resolved, ignoring it.\n+warning: unresolved link to `error2`\n   --> $DIR/intra-links-warning.rs:82:11\n    |\n LL | /// docs [error2]\n-   |           ^^^^^^ cannot be resolved, ignoring\n+   |           ^^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[BarA]` cannot be resolved, ignoring it.\n+warning: unresolved link to `BarA`\n   --> $DIR/intra-links-warning.rs:21:10\n    |\n LL | /// bar [BarA] bar\n-   |          ^^^^ cannot be resolved, ignoring\n+   |          ^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[BarB]` cannot be resolved, ignoring it.\n+warning: unresolved link to `BarB`\n   --> $DIR/intra-links-warning.rs:27:9\n    |\n LL |  * bar [BarB] bar\n-   |         ^^^^ cannot be resolved, ignoring\n+   |         ^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[BarC]` cannot be resolved, ignoring it.\n+warning: unresolved link to `BarC`\n   --> $DIR/intra-links-warning.rs:34:6\n    |\n LL | bar [BarC] bar\n-   |      ^^^^ cannot be resolved, ignoring\n+   |      ^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[BarD]` cannot be resolved, ignoring it.\n+warning: unresolved link to `BarD`\n   --> $DIR/intra-links-warning.rs:45:1\n    |\n LL | #[doc = \"Foo\\nbar [BarD] bar\\nbaz\"]\n@@ -159,9 +159,9 @@ LL | #[doc = \"Foo\\nbar [BarD] bar\\nbaz\"]\n            \n            bar [BarD] bar\n                 ^^^^\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[BarF]` cannot be resolved, ignoring it.\n+warning: unresolved link to `BarF`\n   --> $DIR/intra-links-warning.rs:50:9\n    |\n LL |         #[doc = $f]\n@@ -174,7 +174,7 @@ LL | f!(\"Foo\\nbar [BarF] bar\\nbaz\");\n            \n            bar [BarF] bar\n                 ^^^^\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: 19 warnings emitted"}, {"sha": "3c41f7e63e637386cad7cb9c0107572fff2d1054", "filename": "src/test/rustdoc-ui/issue-74134.public.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr?ref=f4079ce98078da93f9ce53e1099a96cbf80a5d9f", "patch": "@@ -1,4 +1,4 @@\n-warning: `[PrivateType]` public documentation for `public_item` links to a private item\n+warning: public documentation for `public_item` links to private item `PrivateType`\n   --> $DIR/issue-74134.rs:19:10\n    |\n LL |     /// [`PrivateType`]"}, {"sha": "fe484b43fb6fce0726ed17097de87f6a4a3f9d83", "filename": "src/test/rustdoc-ui/issue-74134.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fissue-74134.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Fissue-74134.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-74134.rs?ref=f4079ce98078da93f9ce53e1099a96cbf80a5d9f", "patch": "@@ -17,7 +17,7 @@ pub struct PublicType;\n pub struct Public {\n     /// [`PublicType`]\n     /// [`PrivateType`]\n-    //[public]~^ WARNING public documentation for `public_item` links to a private\n+    //[public]~^ WARNING public documentation for `public_item` links to private item `PrivateType`\n     pub public_item: u32,\n \n     /// [`PublicType`]"}, {"sha": "e58c8b12f68cb8550ef9bd0c43bbe40f54554175", "filename": "src/test/rustdoc-ui/lint-group.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Flint-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Flint-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.rs?ref=f4079ce98078da93f9ce53e1099a96cbf80a5d9f", "patch": "@@ -11,7 +11,7 @@\n /// ```\n /// println!(\"sup\");\n /// ```\n-pub fn link_error() {} //~^^^^^ ERROR cannot be resolved, ignoring it\n+pub fn link_error() {} //~^^^^^ ERROR unresolved link to `error`\n \n /// wait, this doesn't have a doctest?\n pub fn no_doctest() {} //~^ ERROR missing code example in this documentation"}, {"sha": "14d72e9aad3ba8cfaa9a21db2ab5dd41fccc9569", "filename": "src/test/rustdoc-ui/lint-group.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4079ce98078da93f9ce53e1099a96cbf80a5d9f/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr?ref=f4079ce98078da93f9ce53e1099a96cbf80a5d9f", "patch": "@@ -15,19 +15,19 @@ LL | #![deny(rustdoc)]\n    |         ^^^^^^^\n    = note: `#[deny(private_doc_tests)]` implied by `#[deny(rustdoc)]`\n \n-error: `[error]` cannot be resolved, ignoring it.\n+error: unresolved link to `error`\n   --> $DIR/lint-group.rs:9:29\n    |\n LL | /// what up, let's make an [error]\n-   |                             ^^^^^ cannot be resolved, ignoring\n+   |                             ^^^^^ unresolved link\n    |\n note: the lint level is defined here\n   --> $DIR/lint-group.rs:7:9\n    |\n LL | #![deny(rustdoc)]\n    |         ^^^^^^^\n    = note: `#[deny(intra_doc_link_resolution_failure)]` implied by `#[deny(rustdoc)]`\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: missing code example in this documentation\n   --> $DIR/lint-group.rs:16:1"}]}