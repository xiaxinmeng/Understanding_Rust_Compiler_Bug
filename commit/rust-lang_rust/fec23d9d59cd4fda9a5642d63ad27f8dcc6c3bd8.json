{"sha": "fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYzIzZDlkNTljZDRmZGE5YTU2NDJkNjNhZDI3ZjhkY2M2YzNiZDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-21T13:06:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-21T13:06:45Z"}, "message": "Auto merge of #27168 - brson:stdprim, r=steveklabnik\n\nThis makes the primitive descriptions on the front page read properly\r\nas descriptions of types and not of the associated modules.\r\n\r\nHaving the primitive and module docs derived from the same source\r\ncauses problems, primarily that they can't contain hyperlinks\r\ncross-referencing each other.\r\n    \r\nThis crates dedicated private modules in `std` to document the\r\nprimitive types, then for all primitives that have a corresponding\r\nmodule, puts hyperlinks in moth the primitive docs and the module docs\r\ncross-linking each other.\r\n    \r\nThis should help clear up confusion when readers find themselves on\r\nthe wrong page.\r\n\r\nThis also removes all the duplicate `#[doc(primitive)]` tags in various places (especially core), so the core docs will no longer attempt to document the primitives for now. Seems like an acceptable tradeoff to get some cleanup for std.", "tree": {"sha": "b3e9f9b838dd968c1408b7fb0ae9a9620670c0f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3e9f9b838dd968c1408b7fb0ae9a9620670c0f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "html_url": "https://github.com/rust-lang/rust/commit/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2afe47d1688726fd1e836deedaa0ad8c2ec891c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2afe47d1688726fd1e836deedaa0ad8c2ec891c7", "html_url": "https://github.com/rust-lang/rust/commit/2afe47d1688726fd1e836deedaa0ad8c2ec891c7"}, {"sha": "778c89c1bb86dbd370e8b51911e2916180f42aec", "url": "https://api.github.com/repos/rust-lang/rust/commits/778c89c1bb86dbd370e8b51911e2916180f42aec", "html_url": "https://github.com/rust-lang/rust/commit/778c89c1bb86dbd370e8b51911e2916180f42aec"}], "stats": {"total": 822, "additions": 478, "deletions": 344}, "files": [{"sha": "4378d0804df963569c7c2c6dc7f83adf6473f40f", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Utilities for slice manipulation\n+//! A dynamically-sized view into a contiguous sequence, `[T]`.\n //!\n-//! The `slice` module contains useful code to help work with slice values.\n //! Slices are a view into a block of memory represented as a pointer and a\n //! length.\n //!\n@@ -78,7 +77,8 @@\n //!   iterators.\n //! * Further methods that return iterators are `.split()`, `.splitn()`,\n //!   `.chunks()`, `.windows()` and more.\n-#![doc(primitive = \"slice\")]\n+//!\n+//! *[See also the slice primitive type](../primitive.slice.html).*\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n // Many of the usings in this module are only used in the test configuration."}, {"sha": "25a3441fd5bb68308bc12723d207f93dfb9de57f", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 3, "deletions": 35, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -8,43 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Unicode string manipulation (the `str` type).\n+//! Unicode string slices\n //!\n-//! Rust's `str` type is one of the core primitive types of the language. `&str`\n-//! is the borrowed string type. This type of string can only be created from\n-//! other strings, unless it is a `&'static str` (see below). It is not possible\n-//! to move out of borrowed strings because they are owned elsewhere.\n-//!\n-//! # Examples\n-//!\n-//! Here's some code that uses a `&str`:\n-//!\n-//! ```\n-//! let s = \"Hello, world.\";\n-//! ```\n-//!\n-//! This `&str` is a `&'static str`, which is the type of string literals.\n-//! They're `'static` because literals are available for the entire lifetime of\n-//! the program.\n-//!\n-//! You can get a non-`'static` `&str` by taking a slice of a `String`:\n-//!\n-//! ```\n-//! let some_string = \"Hello, world.\".to_string();\n-//! let s = &some_string;\n-//! ```\n-//!\n-//! # Representation\n-//!\n-//! Rust's string type, `str`, is a sequence of Unicode scalar values encoded as\n-//! a stream of UTF-8 bytes. All [strings](../../reference.html#literals) are\n-//! guaranteed to be validly encoded UTF-8 sequences. Additionally, strings are\n-//! not null-terminated and can thus contain null bytes.\n-//!\n-//! The actual representation of `str`s have direct mappings to slices: `&str`\n-//! is the same as `&[u8]`.\n+//! *[See also the `str` primitive type](../primitive.str.html).*\n+\n \n-#![doc(primitive = \"str\")]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n // Many of the usings in this module are only used in the test configuration."}, {"sha": "cfe22b89178743c8e6f43cb83b942b7a90cd2dd8", "filename": "src/libcore/array.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -11,8 +11,9 @@\n //! Implementations of things like `Eq` for fixed-length arrays\n //! up to a certain length. Eventually we should able to generalize\n //! to all lengths.\n+//!\n+//! *[See also the array primitive type](../primitive.array.html).*\n \n-#![doc(primitive = \"array\")]\n #![unstable(feature = \"fixed_size_array\",\n             reason = \"traits and impls are better expressed through generic \\\n                       integer constants\")]"}, {"sha": "88aa805668cfa9cd1fa43ed6b009c14b50b5f733", "filename": "src/libcore/char.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -13,7 +13,6 @@\n //! For more details, see ::rustc_unicode::char (a.k.a. std::char)\n \n #![allow(non_snake_case)]\n-#![doc(primitive = \"char\")]\n #![stable(feature = \"core_char\", since = \"1.2.0\")]\n \n use iter::Iterator;"}, {"sha": "ef2a33c37dd307360aa50be534d9842c9bb985b6", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -154,10 +154,6 @@ pub mod str;\n pub mod hash;\n pub mod fmt;\n \n-#[doc(primitive = \"bool\")]\n-mod bool {\n-}\n-\n // note: does not need to be public\n mod tuple;\n "}, {"sha": "6b4424093b407603fdbdf44ff8f955b5e3524533", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -10,7 +10,6 @@\n \n //! Operations and constants for 32-bits floats (`f32` type)\n \n-#![doc(primitive = \"f32\")]\n // FIXME: MIN_VALUE and MAX_VALUE literals are parsed as -inf and inf #14353\n #![allow(overflowing_literals)]\n "}, {"sha": "fa7aa2ab5ce8ca48811ed3378d7979170aa13edc", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -10,7 +10,6 @@\n \n //! Operations and constants for 64-bits floats (`f64` type)\n \n-#![doc(primitive = \"f64\")]\n // FIXME: MIN_VALUE and MAX_VALUE literals are parsed as -inf and inf #14353\n #![allow(overflowing_literals)]\n "}, {"sha": "dacb4ebcdfa3ae7be74a19f0f9b38b0bd22f0174", "filename": "src/libcore/num/i16.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi16.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -11,6 +11,5 @@\n //! Operations and constants for signed 16-bits integers (`i16` type)\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"i16\")]\n \n int_module! { i16, 16 }"}, {"sha": "250d66de70b345fcd8e99e36ece5adf7456e1c03", "filename": "src/libcore/num/i32.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi32.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -11,6 +11,5 @@\n //! Operations and constants for signed 32-bits integers (`i32` type)\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"i32\")]\n \n int_module! { i32, 32 }"}, {"sha": "5ed21d7246cd0385202dddbfdb49c22c2a26bf6d", "filename": "src/libcore/num/i64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi64.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -11,6 +11,5 @@\n //! Operations and constants for signed 64-bits integers (`i64` type)\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"i64\")]\n \n int_module! { i64, 64 }"}, {"sha": "0394c12d5c45790cf382b32a12be3d59741d629e", "filename": "src/libcore/num/i8.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi8.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -11,6 +11,5 @@\n //! Operations and constants for signed 8-bits integers (`i8` type)\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"i8\")]\n \n int_module! { i8, 8 }"}, {"sha": "066cb10cce265bc45262ffe7994f0afc9b9f52a6", "filename": "src/libcore/num/isize.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fisize.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -11,7 +11,6 @@\n //! Operations and constants for pointer-sized signed integers (`isize` type)\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"isize\")]\n \n #[cfg(target_pointer_width = \"32\")]\n int_module! { isize, 32 }"}, {"sha": "ecf799448483c6987b6c9d690342a5a7b730e762", "filename": "src/libcore/num/u16.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu16.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -11,6 +11,5 @@\n //! Operations and constants for unsigned 16-bits integers (`u16` type)\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"u16\")]\n \n uint_module! { u16, i16, 16 }"}, {"sha": "b0682b55ac05da0fd8799e6094b57b3fee9ce71a", "filename": "src/libcore/num/u32.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu32.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -11,6 +11,5 @@\n //! Operations and constants for unsigned 32-bits integers (`u32` type)\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"u32\")]\n \n uint_module! { u32, i32, 32 }"}, {"sha": "dbc6a64a905d26576a9f16ce99ec6bbe11fb4ab8", "filename": "src/libcore/num/u64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu64.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -11,6 +11,5 @@\n //! Operations and constants for unsigned 64-bits integer (`u64` type)\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"u64\")]\n \n uint_module! { u64, i64, 64 }"}, {"sha": "bf9347ca62c920884bce48c121904e8698c91395", "filename": "src/libcore/num/u8.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu8.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -11,6 +11,5 @@\n //! Operations and constants for unsigned 8-bits integers (`u8` type)\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"u8\")]\n \n uint_module! { u8, i8, 8 }"}, {"sha": "67e3c954ab695bb7bbf5089aa939416dc668bb48", "filename": "src/libcore/num/usize.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Fusize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fnum%2Fusize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fusize.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -11,6 +11,5 @@\n //! Operations and constants for pointer-sized unsigned integers (`usize` type)\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"usize\")]\n \n uint_module! { usize, isize, ::isize::BITS }"}, {"sha": "13d95e9ab1a71fec7ae7b25403424fe10fadf185", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 75, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -10,84 +10,11 @@\n \n // FIXME: talk about offset, copy_memory, copy_nonoverlapping_memory\n \n-//! Operations on raw pointers, `*const T`, and `*mut T`.\n+//! Raw, unsafe pointers, `*const T`, and `*mut T`\n //!\n-//! Working with raw pointers in Rust is uncommon,\n-//! typically limited to a few patterns.\n-//!\n-//! Use the `null` function to create null pointers, and the `is_null` method\n-//! of the `*const T` type  to check for null. The `*const T` type also defines\n-//! the `offset` method, for pointer math.\n-//!\n-//! # Common ways to create raw pointers\n-//!\n-//! ## 1. Coerce a reference (`&T`) or mutable reference (`&mut T`).\n-//!\n-//! ```\n-//! let my_num: i32 = 10;\n-//! let my_num_ptr: *const i32 = &my_num;\n-//! let mut my_speed: i32 = 88;\n-//! let my_speed_ptr: *mut i32 = &mut my_speed;\n-//! ```\n-//!\n-//! To get a pointer to a boxed value, dereference the box:\n-//!\n-//! ```\n-//! let my_num: Box<i32> = Box::new(10);\n-//! let my_num_ptr: *const i32 = &*my_num;\n-//! let mut my_speed: Box<i32> = Box::new(88);\n-//! let my_speed_ptr: *mut i32 = &mut *my_speed;\n-//! ```\n-//!\n-//! This does not take ownership of the original allocation\n-//! and requires no resource management later,\n-//! but you must not use the pointer after its lifetime.\n-//!\n-//! ## 2. Consume a box (`Box<T>`).\n-//!\n-//! The `into_raw` function consumes a box and returns\n-//! the raw pointer. It doesn't destroy `T` or deallocate any memory.\n-//!\n-//! ```\n-//! # #![feature(box_raw)]\n-//! let my_speed: Box<i32> = Box::new(88);\n-//! let my_speed: *mut i32 = Box::into_raw(my_speed);\n-//!\n-//! // By taking ownership of the original `Box<T>` though\n-//! // we are obligated to put it together later to be destroyed.\n-//! unsafe {\n-//!     drop(Box::from_raw(my_speed));\n-//! }\n-//! ```\n-//!\n-//! Note that here the call to `drop` is for clarity - it indicates\n-//! that we are done with the given value and it should be destroyed.\n-//!\n-//! ## 3. Get it from C.\n-//!\n-//! ```\n-//! # #![feature(libc)]\n-//! extern crate libc;\n-//!\n-//! use std::mem;\n-//!\n-//! fn main() {\n-//!     unsafe {\n-//!         let my_num: *mut i32 = libc::malloc(mem::size_of::<i32>() as libc::size_t) as *mut i32;\n-//!         if my_num.is_null() {\n-//!             panic!(\"failed to allocate memory\");\n-//!         }\n-//!         libc::free(my_num as *mut libc::c_void);\n-//!     }\n-//! }\n-//! ```\n-//!\n-//! Usually you wouldn't literally use `malloc` and `free` from Rust,\n-//! but C APIs hand out a lot of pointers generally, so are a common source\n-//! of raw pointers in Rust.\n+//! *[See also the pointer primitive types](../primitive.pointer.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"pointer\")]\n \n use mem;\n use clone::Clone;"}, {"sha": "9339f232e91979035cc6fc2dc60c2fa7bae0484b", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -13,7 +13,6 @@\n //! For more details `std::slice`.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"slice\")]\n \n // How this module is organized.\n //"}, {"sha": "5269cce17448229ddc2dd82bc6f1ad29383724ee", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -12,7 +12,6 @@\n //!\n //! For more details, see std::str\n \n-#![doc(primitive = \"str\")]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use self::pattern::Pattern;"}, {"sha": "6c5ff2223236525276fce217b3121388e7a27c5d", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations on tuples\n+//! A finite heterogeneous sequence, `(T, U, ..)`\n //!\n //! To access a single element of a tuple one can use the `.0`\n //! field access syntax.\n@@ -28,7 +28,6 @@\n //! * `Default`\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"tuple\")]\n \n use clone::Clone;\n use cmp::*;"}, {"sha": "42c19ee6a204db060dff40536ff61d4091b364f5", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -8,25 +8,26 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Character manipulation (`char` type, Unicode Scalar Value)\n+//! A Unicode scalar value\n //!\n //! This module provides the `CharExt` trait, as well as its\n //! implementation for the primitive `char` type, in order to allow\n //! basic character manipulation.\n //!\n-//! A `char` actually represents a\n-//! *[Unicode Scalar\n-//! Value](http://www.unicode.org/glossary/#unicode_scalar_value)*, as it can\n+//! A `char` represents a\n+//! *[Unicode scalar\n+//! value](http://www.unicode.org/glossary/#unicode_scalar_value)*, as it can\n //! contain any Unicode code point except high-surrogate and low-surrogate code\n //! points.\n //!\n //! As such, only values in the ranges \\[0x0,0xD7FF\\] and \\[0xE000,0x10FFFF\\]\n //! (inclusive) are allowed. A `char` can always be safely cast to a `u32`;\n //! however the converse is not always true due to the above range limits\n //! and, as such, should be performed via the `from_u32` function.\n+//!\n+//! *[See also the `char` primitive type](../primitive.char.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"char\")]\n \n use core::char::CharExt as C;\n use core::option::Option::{self, Some, None};"}, {"sha": "0dfcc72e3791025cef9ae217059cbf03d97918f2", "filename": "src/libstd/array.rs", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/2afe47d1688726fd1e836deedaa0ad8c2ec891c7/src%2Flibstd%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2afe47d1688726fd1e836deedaa0ad8c2ec891c7/src%2Flibstd%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farray.rs?ref=2afe47d1688726fd1e836deedaa0ad8c2ec891c7", "patch": "@@ -1,55 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! A fixed-size array is denoted `[T; N]` for the element type `T` and\n-//! the compile time constant size `N`. The size must be zero or positive.\n-//!\n-//! Arrays values are created either with an explicit expression that lists\n-//! each element: `[x, y, z]` or a repeat expression: `[x; N]`. The repeat\n-//! expression requires that the element type is `Copy`.\n-//!\n-//! The type `[T; N]` is `Copy` if `T: Copy`.\n-//!\n-//! Arrays of sizes from 0 to 32 (inclusive) implement the following traits\n-//! if the element type allows it:\n-//!\n-//! - `Clone`\n-//! - `Debug`\n-//! - `IntoIterator` (implemented for `&[T; N]` and `&mut [T; N]`)\n-//! - `PartialEq`, `PartialOrd`, `Ord`, `Eq`\n-//! - `Hash`\n-//! - `AsRef`, `AsMut`\n-//!\n-//! Arrays dereference to [slices (`[T]`)][slice], so their methods can be called\n-//! on arrays.\n-//!\n-//! [slice]: primitive.slice.html\n-//!\n-//! Rust does not currently support generics over the size of an array type.\n-//!\n-//! # Examples\n-//!\n-//! ```\n-//! let mut array: [i32; 3] = [0; 3];\n-//!\n-//! array[1] = 1;\n-//! array[2] = 2;\n-//!\n-//! assert_eq!([1, 2], &array[1..]);\n-//!\n-//! // This loop prints: 0 1 2\n-//! for x in &array {\n-//!     print!(\"{} \", x);\n-//! }\n-//!\n-//! ```\n-//!\n-\n-#![doc(primitive = \"array\")]"}, {"sha": "df703b3e43e32768e40a2ba60fc961b96b8aa4c5", "filename": "src/libstd/bool.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2afe47d1688726fd1e836deedaa0ad8c2ec891c7/src%2Flibstd%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2afe47d1688726fd1e836deedaa0ad8c2ec891c7/src%2Flibstd%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbool.rs?ref=2afe47d1688726fd1e836deedaa0ad8c2ec891c7", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The boolean type\n-\n-#![doc(primitive = \"bool\")]\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "82bc1314ad547dc14038760e2ec26c4b536e18d7", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -415,12 +415,10 @@ pub mod __rand {\n     pub use rand::{thread_rng, ThreadRng, Rng};\n }\n \n-// Modules that exist purely to document + host impl docs for primitive types\n-\n-mod array;\n-mod bool;\n-mod unit;\n-mod tuple;\n+// Include a number of private modules that exist solely to provide\n+// the rustdoc documentation for primitive types. Using `include!`\n+// because rustdoc only looks for these modules at the crate level.\n+include!(\"primitive_docs.rs\");\n \n // A curious inner-module that's not exported that contains the binding\n // 'std' so that macro-expanded references to std::error and such"}, {"sha": "b8a70d756effff82672a76f15d9107c1df095614", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -8,11 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for 32-bits floats (`f32` type)\n+//! The 32-bit floating point type.\n+//!\n+//! *[See also the `f32` primitive type](../primitive.f32.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]\n-#![doc(primitive = \"f32\")]\n+#![allow(unsigned_negation)]\n \n use prelude::v1::*;\n "}, {"sha": "4f2f59659ac80627749da17c3b988a5c2b888e91", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -8,11 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for 64-bits floats (`f64` type)\n+//! The 64-bit floating point type.\n+//!\n+//! *[See also the `f64` primitive type](../primitive.f64.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]\n-#![doc(primitive = \"f64\")]\n \n use prelude::v1::*;\n "}, {"sha": "eb53e0821f2a6f44fdaed228d074e35720262369", "filename": "src/libstd/num/i16.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi16.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for signed 16-bits integers (`i16` type)\n+//! The 16-bit signed integer type.\n+//!\n+//! *[See also the `i16` primitive type](../primitive.i16.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"i16\")]\n \n pub use core::i16::{BITS, BYTES, MIN, MAX};\n "}, {"sha": "3c9eedf38c7cd5030236fef6b18e97c3d9e835ab", "filename": "src/libstd/num/i32.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi32.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for signed 32-bits integers (`i32` type)\n+//! The 32-bit signed integer type.\n+//!\n+//! *[See also the `i32` primitive type](../primitive.i32.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"i32\")]\n \n pub use core::i32::{BITS, BYTES, MIN, MAX};\n "}, {"sha": "2df7478a820bf94df5299d1f08572ff00bc0fc4c", "filename": "src/libstd/num/i64.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi64.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for signed 64-bits integers (`i64` type)\n+//! The 64-bit signed integer type.\n+//!\n+//! *[See also the `i64` primitive type](../primitive.i64.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"i64\")]\n \n pub use core::i64::{BITS, BYTES, MIN, MAX};\n "}, {"sha": "4e4bee8a791e45dce28d0dc9a12953dda4532baa", "filename": "src/libstd/num/i8.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi8.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for signed 8-bits integers (`i8` type)\n+//! The 8-bit signed integer type.\n+//!\n+//! *[See also the `i8` primitive type](../primitive.i8.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"i8\")]\n \n pub use core::i8::{BITS, BYTES, MIN, MAX};\n "}, {"sha": "d46b6b80d0d25d91812ebaabf2fda216541decd8", "filename": "src/libstd/num/isize.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fisize.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for pointer-sized signed integers (`isize` type)\n+//! The pointer-sized signed integer type.\n+//!\n+//! *[See also the `isize` primitive type](../primitive.isize.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"isize\")]\n \n pub use core::isize::{BITS, BYTES, MIN, MAX};\n "}, {"sha": "893618aeffafd2d32419c7930823049415a1406b", "filename": "src/libstd/num/u16.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu16.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for unsigned 16-bits integers (`u16` type)\n+//! The 16-bit unsigned integer type.\n+//!\n+//! *[See also the `u16` primitive type](../primitive.u16.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"u16\")]\n \n pub use core::u16::{BITS, BYTES, MIN, MAX};\n "}, {"sha": "2da25519696579ca0c72251c232ee3f494e2a7a9", "filename": "src/libstd/num/u32.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu32.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for unsigned 32-bits integers (`u32` type)\n+//! The 32-bit unsigned integer type.\n+//!\n+//! *[See also the `u32` primitive type](../primitive.u32.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"u32\")]\n \n pub use core::u32::{BITS, BYTES, MIN, MAX};\n "}, {"sha": "26a8b5373940306b5d3f4815ce8ebddbaff2a379", "filename": "src/libstd/num/u64.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu64.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for unsigned 64-bits integer (`u64` type)\n+//! The 64-bit unsigned integer type.\n+//!\n+//! *[See also the `u64` primitive type](../primitive.u64.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"u64\")]\n \n pub use core::u64::{BITS, BYTES, MIN, MAX};\n "}, {"sha": "385754b93a04b69668dfa18970c05e7070695e24", "filename": "src/libstd/num/u8.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu8.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for unsigned 8-bits integers (`u8` type)\n+//! The 8-bit unsigned integer type.\n+//!\n+//! *[See also the `u8` primitive type](../primitive.u8.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"u8\")]\n \n pub use core::u8::{BITS, BYTES, MIN, MAX};\n "}, {"sha": "6960ba3b8296bb2defcad4167cb755c5a4da2550", "filename": "src/libstd/num/usize.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Fusize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fnum%2Fusize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fusize.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for pointer-sized unsigned integers (`usize` type)\n+//! The pointer-sized unsigned integer type.\n+//!\n+//! *[See also the `usize` primitive type](../primitive.usize.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![doc(primitive = \"usize\")]\n \n pub use core::usize::{BITS, BYTES, MIN, MAX};\n "}, {"sha": "066b2b576da490feafea655784d7a8f624635548", "filename": "src/libstd/primitive_docs.rs", "status": "added", "additions": 420, "deletions": 0, "changes": 420, "blob_url": "https://github.com/rust-lang/rust/blob/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=fec23d9d59cd4fda9a5642d63ad27f8dcc6c3bd8", "patch": "@@ -0,0 +1,420 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[doc(primitive = \"bool\")]\n+//\n+/// The boolean type.\n+///\n+mod prim_bool { }\n+\n+#[doc(primitive = \"char\")]\n+//\n+/// A Unicode scalar value.\n+///\n+/// A `char` represents a\n+/// *[Unicode scalar\n+/// value](http://www.unicode.org/glossary/#unicode_scalar_value)*, as it can\n+/// contain any Unicode code point except high-surrogate and low-surrogate code\n+/// points.\n+///\n+/// As such, only values in the ranges \\[0x0,0xD7FF\\] and \\[0xE000,0x10FFFF\\]\n+/// (inclusive) are allowed. A `char` can always be safely cast to a `u32`;\n+/// however the converse is not always true due to the above range limits\n+/// and, as such, should be performed via the `from_u32` function.\n+///\n+/// *[See also the `std::char` module](char/index.html).*\n+///\n+mod prim_char { }\n+\n+#[doc(primitive = \"unit\")]\n+//\n+/// The `()` type, sometimes called \"unit\" or \"nil\".\n+///\n+/// The `()` type has exactly one value `()`, and is used when there\n+/// is no other meaningful value that could be returned. `()` is most\n+/// commonly seen implicitly: functions without a `-> ...` implicitly\n+/// have return type `()`, that is, these are equivalent:\n+///\n+/// ```rust\n+/// fn long() -> () {}\n+///\n+/// fn short() {}\n+/// ```\n+///\n+/// The semicolon `;` can be used to discard the result of an\n+/// expression at the end of a block, making the expression (and thus\n+/// the block) evaluate to `()`. For example,\n+///\n+/// ```rust\n+/// fn returns_i64() -> i64 {\n+///     1i64\n+/// }\n+/// fn returns_unit() {\n+///     1i64;\n+/// }\n+///\n+/// let is_i64 = {\n+///     returns_i64()\n+/// };\n+/// let is_unit = {\n+///     returns_i64();\n+/// };\n+/// ```\n+///\n+mod prim_unit { }\n+\n+#[doc(primitive = \"pointer\")]\n+//\n+/// Raw, unsafe pointers, `*const T`, and `*mut T`.\n+///\n+/// Working with raw pointers in Rust is uncommon,\n+/// typically limited to a few patterns.\n+///\n+/// Use the `null` function to create null pointers, and the `is_null` method\n+/// of the `*const T` type  to check for null. The `*const T` type also defines\n+/// the `offset` method, for pointer math.\n+///\n+/// # Common ways to create raw pointers\n+///\n+/// ## 1. Coerce a reference (`&T`) or mutable reference (`&mut T`).\n+///\n+/// ```\n+/// let my_num: i32 = 10;\n+/// let my_num_ptr: *const i32 = &my_num;\n+/// let mut my_speed: i32 = 88;\n+/// let my_speed_ptr: *mut i32 = &mut my_speed;\n+/// ```\n+///\n+/// To get a pointer to a boxed value, dereference the box:\n+///\n+/// ```\n+/// let my_num: Box<i32> = Box::new(10);\n+/// let my_num_ptr: *const i32 = &*my_num;\n+/// let mut my_speed: Box<i32> = Box::new(88);\n+/// let my_speed_ptr: *mut i32 = &mut *my_speed;\n+/// ```\n+///\n+/// This does not take ownership of the original allocation\n+/// and requires no resource management later,\n+/// but you must not use the pointer after its lifetime.\n+///\n+/// ## 2. Consume a box (`Box<T>`).\n+///\n+/// The `into_raw` function consumes a box and returns\n+/// the raw pointer. It doesn't destroy `T` or deallocate any memory.\n+///\n+/// ```\n+/// # #![feature(box_raw)]\n+/// let my_speed: Box<i32> = Box::new(88);\n+/// let my_speed: *mut i32 = Box::into_raw(my_speed);\n+///\n+/// // By taking ownership of the original `Box<T>` though\n+/// // we are obligated to put it together later to be destroyed.\n+/// unsafe {\n+///     drop(Box::from_raw(my_speed));\n+/// }\n+/// ```\n+///\n+/// Note that here the call to `drop` is for clarity - it indicates\n+/// that we are done with the given value and it should be destroyed.\n+///\n+/// ## 3. Get it from C.\n+///\n+/// ```\n+/// # #![feature(libc)]\n+/// extern crate libc;\n+///\n+/// use std::mem;\n+///\n+/// fn main() {\n+///     unsafe {\n+///         let my_num: *mut i32 = libc::malloc(mem::size_of::<i32>() as libc::size_t) as *mut i32;\n+///         if my_num.is_null() {\n+///             panic!(\"failed to allocate memory\");\n+///         }\n+///         libc::free(my_num as *mut libc::c_void);\n+///     }\n+/// }\n+/// ```\n+///\n+/// Usually you wouldn't literally use `malloc` and `free` from Rust,\n+/// but C APIs hand out a lot of pointers generally, so are a common source\n+/// of raw pointers in Rust.\n+///\n+/// *[See also the `std::ptr` module](ptr/index.html).*\n+///\n+mod prim_pointer { }\n+\n+#[doc(primitive = \"array\")]\n+//\n+/// A fixed-size array, denoted `[T; N]`, for the element type, `T`, and\n+/// the non-negative compile time constant size, `N`.\n+///\n+/// Arrays values are created either with an explicit expression that lists\n+/// each element: `[x, y, z]` or a repeat expression: `[x; N]`. The repeat\n+/// expression requires that the element type is `Copy`.\n+///\n+/// The type `[T; N]` is `Copy` if `T: Copy`.\n+///\n+/// Arrays of sizes from 0 to 32 (inclusive) implement the following traits\n+/// if the element type allows it:\n+///\n+/// - `Clone`\n+/// - `Debug`\n+/// - `IntoIterator` (implemented for `&[T; N]` and `&mut [T; N]`)\n+/// - `PartialEq`, `PartialOrd`, `Ord`, `Eq`\n+/// - `Hash`\n+/// - `AsRef`, `AsMut`\n+///\n+/// Arrays dereference to [slices (`[T]`)][slice], so their methods can be called\n+/// on arrays.\n+///\n+/// [slice]: primitive.slice.html\n+///\n+/// Rust does not currently support generics over the size of an array type.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// let mut array: [i32; 3] = [0; 3];\n+///\n+/// array[1] = 1;\n+/// array[2] = 2;\n+///\n+/// assert_eq!([1, 2], &array[1..]);\n+///\n+/// // This loop prints: 0 1 2\n+/// for x in &array {\n+///     print!(\"{} \", x);\n+/// }\n+///\n+/// ```\n+///\n+mod prim_array { }\n+\n+#[doc(primitive = \"slice\")]\n+//\n+/// A dynamically-sized view into a contiguous sequence, `[T]`.\n+///\n+/// Slices are a view into a block of memory represented as a pointer and a\n+/// length.\n+///\n+/// ```\n+/// // slicing a Vec\n+/// let vec = vec![1, 2, 3];\n+/// let int_slice = &vec[..];\n+/// // coercing an array to a slice\n+/// let str_slice: &[&str] = &[\"one\", \"two\", \"three\"];\n+/// ```\n+///\n+/// Slices are either mutable or shared. The shared slice type is `&[T]`,\n+/// while the mutable slice type is `&mut [T]`, where `T` represents the element\n+/// type. For example, you can mutate the block of memory that a mutable slice\n+/// points to:\n+///\n+/// ```\n+/// let x = &mut [1, 2, 3];\n+/// x[1] = 7;\n+/// assert_eq!(x, &[1, 7, 3]);\n+/// ```\n+///\n+/// *[See also the `std::slice` module](slice/index.html).*\n+///\n+mod prim_slice { }\n+\n+#[doc(primitive = \"str\")]\n+//\n+/// Unicode string slices.\n+///\n+/// Rust's `str` type is one of the core primitive types of the language. `&str`\n+/// is the borrowed string type. This type of string can only be created from\n+/// other strings, unless it is a `&'static str` (see below). It is not possible\n+/// to move out of borrowed strings because they are owned elsewhere.\n+///\n+/// # Examples\n+///\n+/// Here's some code that uses a `&str`:\n+///\n+/// ```\n+/// let s = \"Hello, world.\";\n+/// ```\n+///\n+/// This `&str` is a `&'static str`, which is the type of string literals.\n+/// They're `'static` because literals are available for the entire lifetime of\n+/// the program.\n+///\n+/// You can get a non-`'static` `&str` by taking a slice of a `String`:\n+///\n+/// ```\n+/// let some_string = \"Hello, world.\".to_string();\n+/// let s = &some_string;\n+/// ```\n+///\n+/// # Representation\n+///\n+/// Rust's string type, `str`, is a sequence of Unicode scalar values encoded as\n+/// a stream of UTF-8 bytes. All [strings](../../reference.html#literals) are\n+/// guaranteed to be validly encoded UTF-8 sequences. Additionally, strings are\n+/// not null-terminated and can thus contain null bytes.\n+///\n+/// The actual representation of `str`s have direct mappings to slices: `&str`\n+/// is the same as `&[u8]`.\n+///\n+/// *[See also the `std::str` module](str/index.html).*\n+///\n+mod prim_str { }\n+\n+#[doc(primitive = \"tuple\")]\n+//\n+/// A finite heterogeneous sequence, `(T, U, ..)`.\n+///\n+/// To access the _N_-th element of a tuple one can use `N` itself\n+/// as a field of the tuple.\n+///\n+/// Indexing starts from zero, so `0` returns first value, `1`\n+/// returns second value, and so on. In general, a tuple with _S_\n+/// elements provides aforementioned fields from `0` to `S-1`.\n+///\n+/// If every type inside a tuple implements one of the following\n+/// traits, then a tuple itself also implements it.\n+///\n+/// * `Clone`\n+/// * `PartialEq`\n+/// * `Eq`\n+/// * `PartialOrd`\n+/// * `Ord`\n+/// * `Debug`\n+/// * `Default`\n+/// * `Hash`\n+///\n+/// # Examples\n+///\n+/// Accessing elements of a tuple at specified indices:\n+///\n+/// ```\n+/// let x = (\"colorless\",  \"green\", \"ideas\", \"sleep\", \"furiously\");\n+/// assert_eq!(x.3, \"sleep\");\n+///\n+/// let v = (3, 3);\n+/// let u = (1, -5);\n+/// assert_eq!(v.0 * u.0 + v.1 * u.1, -12);\n+/// ```\n+///\n+/// Using traits implemented for tuples:\n+///\n+/// ```\n+/// let a = (1, 2);\n+/// let b = (3, 4);\n+/// assert!(a != b);\n+///\n+/// let c = b.clone();\n+/// assert!(b == c);\n+///\n+/// let d : (u32, f32) = Default::default();\n+/// assert_eq!(d, (0, 0.0f32));\n+/// ```\n+///\n+mod prim_tuple { }\n+\n+#[doc(primitive = \"f32\")]\n+/// The 32-bit floating point type.\n+///\n+/// *[See also the `std::f32` module](f32/index.html).*\n+///\n+mod prim_f32 { }\n+\n+#[doc(primitive = \"f64\")]\n+//\n+/// The 64-bit floating point type.\n+///\n+/// *[See also the `std::f64` module](f64/index.html).*\n+///\n+mod prim_f64 { }\n+\n+#[doc(primitive = \"i8\")]\n+//\n+/// The 8-bit signed integer type.\n+///\n+/// *[See also the `std::i8` module](i8/index.html).*\n+///\n+mod prim_i8 { }\n+\n+#[doc(primitive = \"i16\")]\n+//\n+/// The 16-bit signed integer type.\n+///\n+/// *[See also the `std::i16` module](i16/index.html).*\n+///\n+mod prim_i16 { }\n+\n+#[doc(primitive = \"i32\")]\n+//\n+/// The 32-bit signed integer type.\n+///\n+/// *[See also the `std::i32` module](i32/index.html).*\n+///\n+mod prim_i32 { }\n+\n+#[doc(primitive = \"i64\")]\n+//\n+/// The 64-bit signed integer type.\n+///\n+/// *[See also the `std::i64` module](i64/index.html).*\n+///\n+mod prim_i64 { }\n+\n+#[doc(primitive = \"u8\")]\n+//\n+/// The 8-bit unsigned integer type.\n+///\n+/// *[See also the `std::u8` module](u8/index.html).*\n+///\n+mod prim_u8 { }\n+\n+#[doc(primitive = \"u16\")]\n+//\n+/// The 16-bit unsigned integer type.\n+///\n+/// *[See also the `std::u16` module](u16/index.html).*\n+///\n+mod prim_u16 { }\n+\n+#[doc(primitive = \"u32\")]\n+//\n+/// The 32-bit unsigned integer type.\n+///\n+/// *[See also the `std::u32` module](u32/index.html).*\n+///\n+mod prim_u32 { }\n+\n+#[doc(primitive = \"u64\")]\n+//\n+/// The 64-bit unsigned integer type.\n+///\n+/// *[See also the `std::u64` module](u64/index.html).*\n+///\n+mod prim_u64 { }\n+\n+#[doc(primitive = \"isize\")]\n+//\n+/// The pointer-sized signed integer type.\n+///\n+/// *[See also the `std::isize` module](isize/index.html).*\n+///\n+mod prim_isize { }\n+\n+#[doc(primitive = \"usize\")]\n+//\n+/// The pointer-sized signed integer type.\n+///\n+/// *[See also the `std::usize` module](usize/index.html).*\n+///\n+mod prim_usize { }\n+"}, {"sha": "08aa979cf631f85c03215b6408eb4436b7591648", "filename": "src/libstd/tuple.rs", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/2afe47d1688726fd1e836deedaa0ad8c2ec891c7/src%2Flibstd%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2afe47d1688726fd1e836deedaa0ad8c2ec891c7/src%2Flibstd%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftuple.rs?ref=2afe47d1688726fd1e836deedaa0ad8c2ec891c7", "patch": "@@ -1,60 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Operations on tuples\n-//!\n-//! To access the _N_-th element of a tuple one can use `N` itself\n-//! as a field of the tuple.\n-//!\n-//! Indexing starts from zero, so `0` returns first value, `1`\n-//! returns second value, and so on. In general, a tuple with _S_\n-//! elements provides aforementioned fields from `0` to `S-1`.\n-//!\n-//! If every type inside a tuple implements one of the following\n-//! traits, then a tuple itself also implements it.\n-//!\n-//! * `Clone`\n-//! * `PartialEq`\n-//! * `Eq`\n-//! * `PartialOrd`\n-//! * `Ord`\n-//! * `Debug`\n-//! * `Default`\n-//! * `Hash`\n-//!\n-//! # Examples\n-//!\n-//! Accessing elements of a tuple at specified indices:\n-//!\n-//! ```\n-//! let x = (\"colorless\",  \"green\", \"ideas\", \"sleep\", \"furiously\");\n-//! assert_eq!(x.3, \"sleep\");\n-//!\n-//! let v = (3, 3);\n-//! let u = (1, -5);\n-//! assert_eq!(v.0 * u.0 + v.1 * u.1, -12);\n-//! ```\n-//!\n-//! Using traits implemented for tuples:\n-//!\n-//! ```\n-//! let a = (1, 2);\n-//! let b = (3, 4);\n-//! assert!(a != b);\n-//!\n-//! let c = b.clone();\n-//! assert!(b == c);\n-//!\n-//! let d : (u32, f32) = Default::default();\n-//! assert_eq!(d, (0, 0.0f32));\n-//! ```\n-\n-#![doc(primitive = \"tuple\")]\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "2c3ddcd9d4947188f937401a07ff3a01801fc8e0", "filename": "src/libstd/unit.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2afe47d1688726fd1e836deedaa0ad8c2ec891c7/src%2Flibstd%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2afe47d1688726fd1e836deedaa0ad8c2ec891c7/src%2Flibstd%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funit.rs?ref=2afe47d1688726fd1e836deedaa0ad8c2ec891c7", "patch": "@@ -1,45 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![doc(primitive = \"unit\")]\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-//! The `()` type, sometimes called \"unit\" or \"nil\".\n-//!\n-//! The `()` type has exactly one value `()`, and is used when there\n-//! is no other meaningful value that could be returned. `()` is most\n-//! commonly seen implicitly: functions without a `-> ...` implicitly\n-//! have return type `()`, that is, these are equivalent:\n-//!\n-//! ```rust\n-//! fn long() -> () {}\n-//!\n-//! fn short() {}\n-//! ```\n-//!\n-//! The semicolon `;` can be used to discard the result of an\n-//! expression at the end of a block, making the expression (and thus\n-//! the block) evaluate to `()`. For example,\n-//!\n-//! ```rust\n-//! fn returns_i64() -> i64 {\n-//!     1i64\n-//! }\n-//! fn returns_unit() {\n-//!     1i64;\n-//! }\n-//!\n-//! let is_i64 = {\n-//!     returns_i64()\n-//! };\n-//! let is_unit = {\n-//!     returns_i64();\n-//! };\n-//! ```"}]}