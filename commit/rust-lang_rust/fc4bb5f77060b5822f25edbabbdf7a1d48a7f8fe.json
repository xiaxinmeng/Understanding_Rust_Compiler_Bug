{"sha": "fc4bb5f77060b5822f25edbabbdf7a1d48a7f8fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNGJiNWY3NzA2MGI1ODIyZjI1ZWRiYWJiZGY3YTFkNDhhN2Y4ZmU=", "commit": {"author": {"name": "Luke Jones", "email": "luke.nukem.jones@gmail.com", "date": "2015-12-21T03:20:20Z"}, "committer": {"name": "Luke Jones", "email": "luke.nukem.jones@gmail.com", "date": "2015-12-21T03:20:20Z"}, "message": "Correct line wrap", "tree": {"sha": "afc2b6f3f4549efc73c24a70d4f320f42bfe1d20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afc2b6f3f4549efc73c24a70d4f320f42bfe1d20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc4bb5f77060b5822f25edbabbdf7a1d48a7f8fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc4bb5f77060b5822f25edbabbdf7a1d48a7f8fe", "html_url": "https://github.com/rust-lang/rust/commit/fc4bb5f77060b5822f25edbabbdf7a1d48a7f8fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc4bb5f77060b5822f25edbabbdf7a1d48a7f8fe/comments", "author": null, "committer": null, "parents": [{"sha": "981ac6d332ff19812532a4f64b6dc3f49114f75a", "url": "https://api.github.com/repos/rust-lang/rust/commits/981ac6d332ff19812532a4f64b6dc3f49114f75a", "html_url": "https://github.com/rust-lang/rust/commit/981ac6d332ff19812532a4f64b6dc3f49114f75a"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "acffaf4544b10182466cc619365a42d62015969e", "filename": "src/doc/book/match.md", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fc4bb5f77060b5822f25edbabbdf7a1d48a7f8fe/src%2Fdoc%2Fbook%2Fmatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/fc4bb5f77060b5822f25edbabbdf7a1d48a7f8fe/src%2Fdoc%2Fbook%2Fmatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fmatch.md?ref=fc4bb5f77060b5822f25edbabbdf7a1d48a7f8fe", "patch": "@@ -28,13 +28,19 @@ patterns][patterns] that covers all the patterns that are possible here.\n \n [patterns]: patterns.html\n \n-One of the many advantages of `match` is it enforces \u2018exhaustiveness checking\u2019. For example if we remove the last arm with the underscore `_`, the compiler will give us an error:\n+One of the many advantages of `match` is it enforces \u2018exhaustiveness checking\u2019. \n+For example if we remove the last arm with the underscore `_`, the compiler will \n+give us an error:\n \n ```text\n error: non-exhaustive patterns: `_` not covered\n ```\n \n-Rust is telling us that we forgot a value. The compiler infers from `x` that it can have any positive 32bit value; for example 1 to 2,147,483,647. The `_` acts as a 'catch-all', and will catch all possible values that *aren't* specified in an arm of `match`. As you can see with the previous example, we provide `match` arms for integers 1-5, if `x` is 6 or any other value, then it is caught by `_`.\n+Rust is telling us that we forgot a value. The compiler infers from `x` that it\n+can have any positive 32bit value; for example 1 to 2,147,483,647. The `_` acts \n+as a 'catch-all', and will catch all possible values that *aren't* specified in \n+an arm of `match`. As you can see with the previous example, we provide `match` \n+arms for integers 1-5, if `x` is 6 or any other value, then it is caught by `_`.\n \n `match` is also an expression, which means we can use it on the right-hand\n side of a `let` binding or directly where an expression is used:\n@@ -52,7 +58,8 @@ let number = match x {\n };\n ```\n \n-Sometimes it\u2019s a nice way of converting something from one type to another; in this example the integers are converted to `String`.\n+Sometimes it\u2019s a nice way of converting something from one type to another; in \n+this example the integers are converted to `String`.\n \n # Matching on enums\n \n@@ -83,7 +90,8 @@ fn process_message(msg: Message) {\n \n Again, the Rust compiler checks exhaustiveness, so it demands that you\n have a match arm for every variant of the enum. If you leave one off, it\n-will give you a compile-time error unless you use `_` or provide all possible arms.\n+will give you a compile-time error unless you use `_` or provide all possible \n+arms.\n \n Unlike the previous uses of `match`, you can\u2019t use the normal `if`\n statement to do this. You can use the [`if let`][if-let] statement,"}]}