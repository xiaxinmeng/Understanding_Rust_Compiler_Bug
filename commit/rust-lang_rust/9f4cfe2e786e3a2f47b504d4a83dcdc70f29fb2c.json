{"sha": "9f4cfe2e786e3a2f47b504d4a83dcdc70f29fb2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNGNmZTJlNzg2ZTNhMmY0N2I1MDRkNGE4M2RjZGM3MGYyOWZiMmM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T21:10:49Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:29Z"}, "message": "librustc: De-`@mut` `RegionVarBindings::constraints`", "tree": {"sha": "7696732f910f3fabf50b7f3539541dd21195e5e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7696732f910f3fabf50b7f3539541dd21195e5e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f4cfe2e786e3a2f47b504d4a83dcdc70f29fb2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f4cfe2e786e3a2f47b504d4a83dcdc70f29fb2c", "html_url": "https://github.com/rust-lang/rust/commit/9f4cfe2e786e3a2f47b504d4a83dcdc70f29fb2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f4cfe2e786e3a2f47b504d4a83dcdc70f29fb2c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3840d505168652cd4115b24613077ee9d571ff44", "url": "https://api.github.com/repos/rust-lang/rust/commits/3840d505168652cd4115b24613077ee9d571ff44", "html_url": "https://github.com/rust-lang/rust/commit/3840d505168652cd4115b24613077ee9d571ff44"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "3ee275b6260011e5ecccef23da25807d380145cf", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9f4cfe2e786e3a2f47b504d4a83dcdc70f29fb2c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4cfe2e786e3a2f47b504d4a83dcdc70f29fb2c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=9f4cfe2e786e3a2f47b504d4a83dcdc70f29fb2c", "patch": "@@ -24,6 +24,7 @@ use middle::graph::{Direction, NodeIndex};\n use util::common::indenter;\n use util::ppaux::{Repr};\n \n+use std::cell::RefCell;\n use std::hashmap::{HashMap, HashSet};\n use std::uint;\n use std::vec;\n@@ -88,7 +89,7 @@ type CombineMap = HashMap<TwoRegions, RegionVid>;\n pub struct RegionVarBindings {\n     tcx: ty::ctxt,\n     var_origins: ~[RegionVariableOrigin],\n-    constraints: HashMap<Constraint, SubregionOrigin>,\n+    constraints: RefCell<HashMap<Constraint, SubregionOrigin>>,\n     lubs: CombineMap,\n     glbs: CombineMap,\n     skolemization_count: uint,\n@@ -114,7 +115,7 @@ pub fn RegionVarBindings(tcx: ty::ctxt) -> RegionVarBindings {\n         tcx: tcx,\n         var_origins: ~[],\n         values: None,\n-        constraints: HashMap::new(),\n+        constraints: RefCell::new(HashMap::new()),\n         lubs: HashMap::new(),\n         glbs: HashMap::new(),\n         skolemization_count: 0,\n@@ -157,7 +158,8 @@ impl RegionVarBindings {\n                 self.var_origins.pop();\n               }\n               AddConstraint(ref constraint) => {\n-                self.constraints.remove(constraint);\n+                let mut constraints = self.constraints.borrow_mut();\n+                constraints.get().remove(constraint);\n               }\n               AddCombination(Glb, ref regions) => {\n                 self.glbs.remove(regions);\n@@ -228,7 +230,8 @@ impl RegionVarBindings {\n \n         debug!(\"RegionVarBindings: add_constraint({:?})\", constraint);\n \n-        if self.constraints.insert(constraint, origin) {\n+        let mut constraints = self.constraints.borrow_mut();\n+        if constraints.get().insert(constraint, origin) {\n             if self.in_snapshot() {\n                 self.undo_log.push(AddConstraint(constraint));\n             }\n@@ -925,7 +928,8 @@ impl RegionVarBindings {\n         &self,\n         errors: &mut OptVec<RegionResolutionError>)\n     {\n-        for (constraint, _) in self.constraints.iter() {\n+        let constraints = self.constraints.borrow();\n+        for (constraint, _) in constraints.get().iter() {\n             let (sub, sup) = match *constraint {\n                 ConstrainVarSubVar(..) |\n                 ConstrainRegSubVar(..) |\n@@ -943,7 +947,7 @@ impl RegionVarBindings {\n \n             debug!(\"ConcreteFailure: !(sub <= sup): sub={:?}, sup={:?}\",\n                    sub, sup);\n-            let origin = self.constraints.get_copy(constraint);\n+            let origin = constraints.get().get_copy(constraint);\n             errors.push(ConcreteFailure(origin, sub, sup));\n         }\n     }\n@@ -1031,7 +1035,9 @@ impl RegionVarBindings {\n \n     fn construct_graph(&self) -> RegionGraph {\n         let num_vars = self.num_vars();\n-        let num_edges = self.constraints.len();\n+\n+        let constraints = self.constraints.borrow();\n+        let num_edges = constraints.get().len();\n \n         let mut graph = graph::Graph::with_capacity(num_vars + 1,\n                                                     num_edges);\n@@ -1041,7 +1047,7 @@ impl RegionVarBindings {\n         }\n         let dummy_idx = graph.add_node(());\n \n-        for (constraint, _) in self.constraints.iter() {\n+        for (constraint, _) in constraints.get().iter() {\n             match *constraint {\n                 ConstrainVarSubVar(a_id, b_id) => {\n                     graph.add_edge(NodeIndex(a_id.to_uint()),\n@@ -1230,9 +1236,10 @@ impl RegionVarBindings {\n \n                     ConstrainRegSubVar(region, _) |\n                     ConstrainVarSubReg(_, region) => {\n+                        let constraints = this.constraints.borrow();\n                         state.result.push(RegionAndOrigin {\n                             region: region,\n-                            origin: this.constraints.get_copy(&edge.data)\n+                            origin: constraints.get().get_copy(&edge.data)\n                         });\n                     }\n \n@@ -1252,7 +1259,8 @@ impl RegionVarBindings {\n             changed = false;\n             iteration += 1;\n             debug!(\"---- {} Iteration \\\\#{}\", tag, iteration);\n-            for (constraint, _) in self.constraints.iter() {\n+            let constraints = self.constraints.borrow();\n+            for (constraint, _) in constraints.get().iter() {\n                 let edge_changed = body(constraint);\n                 if edge_changed {\n                     debug!(\"Updated due to constraint {}\","}]}