{"sha": "989a3034db113d014d9247be62ea3af811888412", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4OWEzMDM0ZGIxMTNkMDE0ZDkyNDdiZTYyZWEzYWY4MTE4ODg0MTI=", "commit": {"author": {"name": "Ms2ger", "email": "Ms2ger@gmail.com", "date": "2016-05-30T13:17:16Z"}, "committer": {"name": "Ms2ger", "email": "Ms2ger@gmail.com", "date": "2016-05-30T13:17:16Z"}, "message": "Move driver::Resolutions::def_map out of its RefCell.", "tree": {"sha": "ee39032a284b868481b175c4cdf1b20f44273360", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee39032a284b868481b175c4cdf1b20f44273360"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/989a3034db113d014d9247be62ea3af811888412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/989a3034db113d014d9247be62ea3af811888412", "html_url": "https://github.com/rust-lang/rust/commit/989a3034db113d014d9247be62ea3af811888412", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/989a3034db113d014d9247be62ea3af811888412/comments", "author": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5da602bda3f30a8943dd4d10383bae6d8a77575c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5da602bda3f30a8943dd4d10383bae6d8a77575c", "html_url": "https://github.com/rust-lang/rust/commit/5da602bda3f30a8943dd4d10383bae6d8a77575c"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "d6d944fde5f5ef56669d6665209ffa928b42c4c8", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/989a3034db113d014d9247be62ea3af811888412/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989a3034db113d014d9247be62ea3af811888412/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=989a3034db113d014d9247be62ea3af811888412", "patch": "@@ -63,7 +63,7 @@ use syntax_ext;\n \n #[derive(Clone)]\n pub struct Resolutions {\n-    pub def_map: RefCell<DefMap>,\n+    pub def_map: DefMap,\n     pub freevars: FreevarMap,\n     pub trait_map: TraitMap,\n     pub maybe_unused_trait_imports: NodeSet,\n@@ -818,7 +818,7 @@ pub fn lower_and_resolve<'a>(sess: &Session,\n             name: &id,\n             glob_map: if resolver.make_glob_map { Some(resolver.glob_map) } else { None },\n         }, Resolutions {\n-            def_map: RefCell::new(resolver.def_map),\n+            def_map: resolver.def_map,\n             freevars: resolver.freevars,\n             trait_map: resolver.trait_map,\n             maybe_unused_trait_imports: resolver.maybe_unused_trait_imports,\n@@ -866,7 +866,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n                                 \"lifetime resolution\",\n                                 || middle::resolve_lifetime::krate(sess,\n                                                                    &hir_map,\n-                                                                   &resolutions.def_map.borrow()))?;\n+                                                                   &resolutions.def_map))?;\n \n     time(time_passes,\n          \"looking for entry point\",\n@@ -886,14 +886,14 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n     time(time_passes,\n               \"static item recursion checking\",\n-              || static_recursion::check_crate(sess, &resolutions.def_map.borrow(), &hir_map))?;\n+              || static_recursion::check_crate(sess, &resolutions.def_map, &hir_map))?;\n \n     let index = stability::Index::new(&hir_map);\n \n     let trait_map = resolutions.trait_map;\n     TyCtxt::create_and_enter(sess,\n                              arenas,\n-                             resolutions.def_map,\n+                             RefCell::new(resolutions.def_map),\n                              named_region_map,\n                              hir_map,\n                              resolutions.freevars,"}, {"sha": "b1df80403c0637ab32c75ec6216cd2239d632113", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/989a3034db113d014d9247be62ea3af811888412/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989a3034db113d014d9247be62ea3af811888412/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=989a3034db113d014d9247be62ea3af811888412", "patch": "@@ -29,6 +29,7 @@ use rustc_metadata::cstore::CStore;\n use rustc_metadata::creader::read_local_crates;\n use rustc::hir::map as hir_map;\n use rustc::session::{self, config};\n+use std::cell::RefCell;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::abi::Abi;\n@@ -134,12 +135,12 @@ fn test_env<F>(source_string: &str,\n \n     // run just enough stuff to build a tcx:\n     let lang_items = lang_items::collect_language_items(&sess, &ast_map);\n-    let named_region_map = resolve_lifetime::krate(&sess, &ast_map, &resolutions.def_map.borrow());\n+    let named_region_map = resolve_lifetime::krate(&sess, &ast_map, &resolutions.def_map);\n     let region_map = region::resolve_crate(&sess, &ast_map);\n     let index = stability::Index::new(&ast_map);\n     TyCtxt::create_and_enter(&sess,\n                              &arenas,\n-                             resolutions.def_map,\n+                             RefCell::new(resolutions.def_map),\n                              named_region_map.unwrap(),\n                              ast_map,\n                              resolutions.freevars,"}]}