{"sha": "d36cb2209f1b22b8b587ad128fb094156092aad8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNmNiMjIwOWYxYjIyYjhiNTg3YWQxMjhmYjA5NDE1NjA5MmFhZDg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-26T03:37:22Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-26T08:12:04Z"}, "message": "Rollup merge of #32476 - diwic:63-null-thread-name, r=alexcrichton\n\nFix unsound behaviour with null characters in thread names (issue #32475)\n\nPreviously, the thread name (&str) was converted to a CString in the\nnew thread, but outside unwind::try, causing a panic to continue into FFI.\n\nThis patch changes that behaviour, so that the panic instead happens\nin the parent thread (where panic infrastructure is properly set up),\nnot the new thread.\n\nThis could potentially be a breaking change for architectures who don't\nsupport thread names.", "tree": {"sha": "ebf943517d37e1ff58ced6ba3e0c6dde224e3a97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebf943517d37e1ff58ced6ba3e0c6dde224e3a97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d36cb2209f1b22b8b587ad128fb094156092aad8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d36cb2209f1b22b8b587ad128fb094156092aad8", "html_url": "https://github.com/rust-lang/rust/commit/d36cb2209f1b22b8b587ad128fb094156092aad8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d36cb2209f1b22b8b587ad128fb094156092aad8/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3e58247a3fbcd861c172a7311923116b1125ffd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3e58247a3fbcd861c172a7311923116b1125ffd", "html_url": "https://github.com/rust-lang/rust/commit/e3e58247a3fbcd861c172a7311923116b1125ffd"}, {"sha": "78495d5082f51a2737619824548c9f2407b12a2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/78495d5082f51a2737619824548c9f2407b12a2b", "html_url": "https://github.com/rust-lang/rust/commit/78495d5082f51a2737619824548c9f2407b12a2b"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "6d966a0f6944c681cbd387ab2a346a5754ef8ad8", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d36cb2209f1b22b8b587ad128fb094156092aad8/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36cb2209f1b22b8b587ad128fb094156092aad8/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=d36cb2209f1b22b8b587ad128fb094156092aad8", "patch": "@@ -13,7 +13,7 @@ use prelude::v1::*;\n use alloc::boxed::FnBox;\n use cmp;\n #[cfg(not(any(target_env = \"newlib\", target_os = \"solaris\")))]\n-use ffi::CString;\n+use ffi::CStr;\n use io;\n use libc;\n use mem;\n@@ -84,48 +84,43 @@ impl Thread {\n     #[cfg(any(target_os = \"linux\",\n               target_os = \"android\",\n               target_os = \"emscripten\"))]\n-    pub fn set_name(name: &str) {\n+    pub fn set_name(name: &CStr) {\n         const PR_SET_NAME: libc::c_int = 15;\n-        let cname = CString::new(name).unwrap_or_else(|_| {\n-            panic!(\"thread name may not contain interior null bytes\")\n-        });\n         // pthread wrapper only appeared in glibc 2.12, so we use syscall\n         // directly.\n         unsafe {\n-            libc::prctl(PR_SET_NAME, cname.as_ptr() as libc::c_ulong, 0, 0, 0);\n+            libc::prctl(PR_SET_NAME, name.as_ptr() as libc::c_ulong, 0, 0, 0);\n         }\n     }\n \n     #[cfg(any(target_os = \"freebsd\",\n               target_os = \"dragonfly\",\n               target_os = \"bitrig\",\n               target_os = \"openbsd\"))]\n-    pub fn set_name(name: &str) {\n-        let cname = CString::new(name).unwrap();\n+    pub fn set_name(name: &CStr) {\n         unsafe {\n-            libc::pthread_set_name_np(libc::pthread_self(), cname.as_ptr());\n+            libc::pthread_set_name_np(libc::pthread_self(), name.as_ptr());\n         }\n     }\n \n     #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n-    pub fn set_name(name: &str) {\n-        let cname = CString::new(name).unwrap();\n+    pub fn set_name(name: &CStr) {\n         unsafe {\n-            libc::pthread_setname_np(cname.as_ptr());\n+            libc::pthread_setname_np(name.as_ptr());\n         }\n     }\n \n     #[cfg(target_os = \"netbsd\")]\n-    pub fn set_name(name: &str) {\n+    pub fn set_name(name: &CStr) {\n+        use ffi::CString;\n         let cname = CString::new(&b\"%s\"[..]).unwrap();\n-        let carg = CString::new(name).unwrap();\n         unsafe {\n             libc::pthread_setname_np(libc::pthread_self(), cname.as_ptr(),\n-                                     carg.as_ptr() as *mut libc::c_void);\n+                                     name.as_ptr() as *mut libc::c_void);\n         }\n     }\n     #[cfg(any(target_env = \"newlib\", target_os = \"solaris\"))]\n-    pub fn set_name(_name: &str) {\n+    pub fn set_name(_name: &CStr) {\n         // Newlib and Illumos has no way to set a thread name.\n     }\n "}, {"sha": "6908775e86fc1ba25e8dad4cf314e72954bdabac", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36cb2209f1b22b8b587ad128fb094156092aad8/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36cb2209f1b22b8b587ad128fb094156092aad8/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=d36cb2209f1b22b8b587ad128fb094156092aad8", "patch": "@@ -54,7 +54,7 @@ impl Thread {\n         }\n     }\n \n-    pub fn set_name(_name: &str) {\n+    pub fn set_name(_name: &CStr) {\n         // Windows threads are nameless\n         // The names in MSVC debugger are obtained using a \"magic\" exception,\n         // which requires a use of MS C++ extensions."}, {"sha": "b3549dc12645aec854e0c0ec3d4d1b90ede910e9", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d36cb2209f1b22b8b587ad128fb094156092aad8/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36cb2209f1b22b8b587ad128fb094156092aad8/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=d36cb2209f1b22b8b587ad128fb094156092aad8", "patch": "@@ -166,6 +166,8 @@ use any::Any;\n use cell::UnsafeCell;\n use fmt;\n use io;\n+use str;\n+use ffi::{CStr, CString};\n use sync::{Mutex, Condvar, Arc};\n use sys::thread as imp;\n use sys_common::thread_info;\n@@ -267,7 +269,7 @@ impl Builder {\n         let their_packet = my_packet.clone();\n \n         let main = move || {\n-            if let Some(name) = their_thread.name() {\n+            if let Some(name) = their_thread.cname() {\n                 imp::Thread::set_name(name);\n             }\n             unsafe {\n@@ -450,7 +452,7 @@ pub fn park_timeout(dur: Duration) {\n \n /// The internal representation of a `Thread` handle\n struct Inner {\n-    name: Option<String>,\n+    name: Option<CString>,      // Guaranteed to be UTF-8\n     lock: Mutex<bool>,          // true when there is a buffered unpark\n     cvar: Condvar,\n }\n@@ -465,9 +467,12 @@ pub struct Thread {\n impl Thread {\n     // Used only internally to construct a thread object without spawning\n     fn new(name: Option<String>) -> Thread {\n+        let cname = name.map(|n| CString::new(n).unwrap_or_else(|_| {\n+            panic!(\"thread name may not contain interior null bytes\")\n+        }));\n         Thread {\n             inner: Arc::new(Inner {\n-                name: name,\n+                name: cname,\n                 lock: Mutex::new(false),\n                 cvar: Condvar::new(),\n             })\n@@ -489,6 +494,10 @@ impl Thread {\n     /// Gets the thread's name.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn name(&self) -> Option<&str> {\n+        self.cname().map(|s| unsafe { str::from_utf8_unchecked(s.to_bytes()) } )\n+    }\n+\n+    fn cname(&self) -> Option<&CStr> {\n         self.inner.name.as_ref().map(|s| &**s)\n     }\n }\n@@ -622,6 +631,12 @@ mod tests {\n         }).unwrap().join().unwrap();\n     }\n \n+    #[test]\n+    #[should_panic]\n+    fn test_invalid_named_thread() {\n+        let _ = Builder::new().name(\"ada l\\0velace\".to_string()).spawn(|| {});\n+    }\n+\n     #[test]\n     fn test_run_basic() {\n         let (tx, rx) = channel();"}]}