{"sha": "cd50fb39b5ec3a2b7d77684be861dae064ead3f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNTBmYjM5YjVlYzNhMmI3ZDc3Njg0YmU4NjFkYWUwNjRlYWQzZjc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-11-01T02:34:08Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-11-01T11:09:06Z"}, "message": "std::rand: Implement the Gamma distribution.", "tree": {"sha": "30ad11ecebef785675bc2674dd06ce022d841ab9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30ad11ecebef785675bc2674dd06ce022d841ab9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd50fb39b5ec3a2b7d77684be861dae064ead3f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd50fb39b5ec3a2b7d77684be861dae064ead3f7", "html_url": "https://github.com/rust-lang/rust/commit/cd50fb39b5ec3a2b7d77684be861dae064ead3f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd50fb39b5ec3a2b7d77684be861dae064ead3f7/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "701b4d137e409b6cda599171713683569bdeb6d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/701b4d137e409b6cda599171713683569bdeb6d9", "html_url": "https://github.com/rust-lang/rust/commit/701b4d137e409b6cda599171713683569bdeb6d9"}], "stats": {"total": 219, "additions": 219, "deletions": 0}, "files": [{"sha": "46025961ec9c56e601e922505eec07ef6ff8eacc", "filename": "src/libstd/rand/distributions/gamma.rs", "status": "added", "additions": 217, "deletions": 0, "changes": 217, "blob_url": "https://github.com/rust-lang/rust/blob/cd50fb39b5ec3a2b7d77684be861dae064ead3f7/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd50fb39b5ec3a2b7d77684be861dae064ead3f7/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs?ref=cd50fb39b5ec3a2b7d77684be861dae064ead3f7", "patch": "@@ -0,0 +1,217 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! The Gamma distribution.\n+\n+use rand::Rng;\n+use super::{IndependentSample, Sample, StandardNormal, Exp};\n+use num;\n+\n+/// The Gamma distribution `Gamma(shape, scale)` distribution.\n+///\n+/// The density function of this distribution is\n+///\n+/// ```\n+/// f(x) =  x^(k - 1) * exp(-x / \u03b8) / (\u0393(k) * \u03b8^k)\n+/// ```\n+///\n+/// where `\u0393` is the Gamma function, `k` is the shape and `\u03b8` is the\n+/// scale and both `k` and `\u03b8` are strictly positive.\n+///\n+/// The algorithm used is that described by Marsaglia & Tsang 2000[1],\n+/// falling back to directly sampling from an Exponential for `shape\n+/// == 1`, and using the boosting technique described in [1] for\n+/// `shape < 1`.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::rand;\n+/// use std::rand::distributions::{IndependentSample, Gamma};\n+///\n+/// fn main() {\n+///     let gamma = Gamma::new(2.0, 5.0);\n+///     let v = gamma.ind_sample(rand::task_rng());\n+///     println!(\"{} is from a Gamma(2, 5) distribution\", v);\n+/// }\n+/// ```\n+///\n+/// [1]: George Marsaglia and Wai Wan Tsang. 2000. \"A Simple Method\n+/// for Generating Gamma Variables\" *ACM Trans. Math. Softw.* 26, 3\n+/// (September 2000),\n+/// 363-372. DOI:[10.1145/358407.358414](http://doi.acm.org/10.1145/358407.358414)\n+pub enum Gamma {\n+    priv Large(GammaLargeShape),\n+    priv One(Exp),\n+    priv Small(GammaSmallShape)\n+}\n+\n+// These two helpers could be made public, but saving the\n+// match-on-Gamma-enum branch from using them directly (e.g. if one\n+// knows that the shape is always > 1) doesn't appear to be much\n+// faster.\n+\n+/// Gamma distribution where the shape parameter is less than 1.\n+///\n+/// Note, samples from this require a compulsory floating-point `pow`\n+/// call, which makes it significantly slower than sampling from a\n+/// gamma distribution where the shape parameter is greater than or\n+/// equal to 1.\n+///\n+/// See `Gamma` for sampling from a Gamma distribution with general\n+/// shape parameters.\n+struct GammaSmallShape {\n+    inv_shape: f64,\n+    large_shape: GammaLargeShape\n+}\n+\n+/// Gamma distribution where the shape parameter is larger than 1.\n+///\n+/// See `Gamma` for sampling from a Gamma distribution with general\n+/// shape parameters.\n+struct GammaLargeShape {\n+    shape: f64,\n+    scale: f64,\n+    c: f64,\n+    d: f64\n+}\n+\n+impl Gamma {\n+    /// Construct an object representing the `Gamma(shape, scale)`\n+    /// distribution.\n+    ///\n+    /// Fails if `shape <= 0` or `scale <= 0`.\n+    pub fn new(shape: f64, scale: f64) -> Gamma {\n+        assert!(shape > 0.0, \"Gamma::new called with shape <= 0\");\n+        assert!(scale > 0.0, \"Gamma::new called with scale <= 0\");\n+\n+        match shape {\n+            1.0        => One(Exp::new(1.0 / scale)),\n+            0.0 .. 1.0 => Small(GammaSmallShape::new_raw(shape, scale)),\n+            _          => Large(GammaLargeShape::new_raw(shape, scale))\n+        }\n+    }\n+}\n+\n+impl GammaSmallShape {\n+    fn new_raw(shape: f64, scale: f64) -> GammaSmallShape {\n+        GammaSmallShape {\n+            inv_shape: 1. / shape,\n+            large_shape: GammaLargeShape::new_raw(shape + 1.0, scale)\n+        }\n+    }\n+}\n+\n+impl GammaLargeShape {\n+    fn new_raw(shape: f64, scale: f64) -> GammaLargeShape {\n+        let d = shape - 1. / 3.;\n+        GammaLargeShape {\n+            shape: shape,\n+            scale: scale,\n+            c: 1. / num::sqrt(9. * d),\n+            d: d\n+        }\n+    }\n+}\n+\n+impl Sample<f64> for Gamma {\n+    fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 { self.ind_sample(rng) }\n+}\n+impl Sample<f64> for GammaSmallShape {\n+    fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 { self.ind_sample(rng) }\n+}\n+impl Sample<f64> for GammaLargeShape {\n+    fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 { self.ind_sample(rng) }\n+}\n+\n+impl IndependentSample<f64> for Gamma {\n+    fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 {\n+        match *self {\n+            Small(ref g) => g.ind_sample(rng),\n+            One(ref g) => g.ind_sample(rng),\n+            Large(ref g) => g.ind_sample(rng),\n+        }\n+    }\n+}\n+impl IndependentSample<f64> for GammaSmallShape {\n+    fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 {\n+        // Need (0, 1) here.\n+        let mut u = rng.gen::<f64>();\n+        while u == 0. {\n+            u = rng.gen();\n+        }\n+\n+        self.large_shape.ind_sample(rng) * num::pow(u, self.inv_shape)\n+    }\n+}\n+impl IndependentSample<f64> for GammaLargeShape {\n+    fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 {\n+        loop {\n+            let x = *rng.gen::<StandardNormal>();\n+            let v_cbrt = 1.0 + self.c * x;\n+            if v_cbrt <= 0.0 { // a^3 <= 0 iff a <= 0\n+                continue\n+            }\n+\n+            let v = v_cbrt * v_cbrt * v_cbrt;\n+            // Need (0, 1) here, not [0, 1). This would be faster if\n+            // we were generating an f64 in (0, 1) directly.\n+            let mut u = rng.gen::<f64>();\n+            while u == 0.0 {\n+                u = rng.gen();\n+            }\n+\n+            let x_sqr = x * x;\n+            if u < 1.0 - 0.0331 * x_sqr * x_sqr ||\n+                num::ln(u) < 0.5 * x_sqr + self.d * (1.0 - v + num::ln(v)) {\n+                return self.d * v * self.scale\n+            }\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod bench {\n+    use super::*;\n+    use mem::size_of;\n+    use rand::distributions::IndependentSample;\n+    use rand::StdRng;\n+    use extra::test::BenchHarness;\n+    use iter::range;\n+    use option::{Some, None};\n+\n+    static N: u64 = 100;\n+\n+    #[bench]\n+    fn bench_gamma_large_shape(bh: &mut BenchHarness) {\n+        let gamma = Gamma::new(10., 1.0);\n+        let mut rng = StdRng::new();\n+\n+        do bh.iter {\n+            for _ in range(0, N) {\n+                gamma.ind_sample(&mut rng);\n+            }\n+        }\n+        bh.bytes = size_of::<f64>() as u64 * N;\n+    }\n+\n+    #[bench]\n+    fn bench_gamma_small_shape(bh: &mut BenchHarness) {\n+        let gamma = Gamma::new(0.1, 1.0);\n+        let mut rng = StdRng::new();\n+\n+        do bh.iter {\n+            for _ in range(0, N) {\n+                gamma.ind_sample(&mut rng);\n+            }\n+        }\n+        bh.bytes = size_of::<f64>() as u64 * N;\n+    }\n+}"}, {"sha": "d5bc4fc929acc235fe04607593ac3962b54f81ba", "filename": "src/libstd/rand/distributions/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd50fb39b5ec3a2b7d77684be861dae064ead3f7/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd50fb39b5ec3a2b7d77684be861dae064ead3f7/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs?ref=cd50fb39b5ec3a2b7d77684be861dae064ead3f7", "patch": "@@ -27,8 +27,10 @@ use rand::{Rng,Rand};\n use clone::Clone;\n \n pub use self::range::Range;\n+pub use self::gamma::Gamma;\n \n pub mod range;\n+pub mod gamma;\n \n /// Types that can be used to create a random instance of `Support`.\n pub trait Sample<Support> {"}]}