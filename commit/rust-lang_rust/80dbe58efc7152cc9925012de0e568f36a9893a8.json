{"sha": "80dbe58efc7152cc9925012de0e568f36a9893a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZGJlNThlZmM3MTUyY2M5OTI1MDEyZGUwZTU2OGYzNmE5ODkzYTg=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-28T14:23:16Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:23:07Z"}, "message": "Use ParamBounds in WhereRegionPredicate", "tree": {"sha": "e89f04a4b5be6b90df921ecc4506ab1e604438ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e89f04a4b5be6b90df921ecc4506ab1e604438ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80dbe58efc7152cc9925012de0e568f36a9893a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80dbe58efc7152cc9925012de0e568f36a9893a8", "html_url": "https://github.com/rust-lang/rust/commit/80dbe58efc7152cc9925012de0e568f36a9893a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80dbe58efc7152cc9925012de0e568f36a9893a8/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aed530a457dd937fa633dfe52cf07811196d3173", "url": "https://api.github.com/repos/rust-lang/rust/commits/aed530a457dd937fa633dfe52cf07811196d3173", "html_url": "https://github.com/rust-lang/rust/commit/aed530a457dd937fa633dfe52cf07811196d3173"}], "stats": {"total": 201, "additions": 92, "deletions": 109}, "files": [{"sha": "a550f60fb4b79ee16a8c46f6f15eb2536f36d9dd", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=80dbe58efc7152cc9925012de0e568f36a9893a8", "patch": "@@ -314,8 +314,8 @@ pub trait Visitor<'v> : Sized {\n     fn visit_trait_ref(&mut self, t: &'v TraitRef) {\n         walk_trait_ref(self, t)\n     }\n-    fn visit_ty_param_bound(&mut self, bounds: &'v ParamBound) {\n-        walk_ty_param_bound(self, bounds)\n+    fn visit_param_bound(&mut self, bounds: &'v ParamBound) {\n+        walk_param_bound(self, bounds)\n     }\n     fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef, m: TraitBoundModifier) {\n         walk_poly_trait_ref(self, t, m)\n@@ -537,13 +537,13 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n         ItemTrait(.., ref generics, ref bounds, ref trait_item_refs) => {\n             visitor.visit_id(item.id);\n             visitor.visit_generics(generics);\n-            walk_list!(visitor, visit_ty_param_bound, bounds);\n+            walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_trait_item_ref, trait_item_refs);\n         }\n         ItemTraitAlias(ref generics, ref bounds) => {\n             visitor.visit_id(item.id);\n             visitor.visit_generics(generics);\n-            walk_list!(visitor, visit_ty_param_bound, bounds);\n+            walk_list!(visitor, visit_param_bound, bounds);\n         }\n     }\n     walk_list!(visitor, visit_attribute, &item.attrs);\n@@ -731,7 +731,7 @@ pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v\n     walk_list!(visitor, visit_attribute, &foreign_item.attrs);\n }\n \n-pub fn walk_ty_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v ParamBound) {\n+pub fn walk_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v ParamBound) {\n     match *bound {\n         TraitTyParamBound(ref typ, modifier) => {\n             visitor.visit_poly_trait_ref(typ, modifier);\n@@ -763,7 +763,7 @@ pub fn walk_generic_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v Generi\n             walk_list!(visitor, visit_attribute, attrs.iter());\n         }\n     }\n-    walk_list!(visitor, visit_ty_param_bound, &param.bounds);\n+    walk_list!(visitor, visit_param_bound, &param.bounds);\n }\n \n pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics) {\n@@ -782,14 +782,14 @@ pub fn walk_where_predicate<'v, V: Visitor<'v>>(\n                                                             ref bound_generic_params,\n                                                             ..}) => {\n             visitor.visit_ty(bounded_ty);\n-            walk_list!(visitor, visit_ty_param_bound, bounds);\n+            walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_generic_param, bound_generic_params);\n         }\n         &WherePredicate::RegionPredicate(WhereRegionPredicate{ref lifetime,\n                                                               ref bounds,\n                                                               ..}) => {\n             visitor.visit_lifetime(lifetime);\n-            walk_list!(visitor, visit_lifetime, bounds);\n+            walk_list!(visitor, visit_param_bound, bounds);\n         }\n         &WherePredicate::EqPredicate(WhereEqPredicate{id,\n                                                       ref lhs_ty,\n@@ -866,7 +866,7 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n         }\n         TraitItemKind::Type(ref bounds, ref default) => {\n             visitor.visit_id(trait_item.id);\n-            walk_list!(visitor, visit_ty_param_bound, bounds);\n+            walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_ty, default);\n         }\n     }"}, {"sha": "fed4f150075b5be6e397a9ab17a69b275d1e0ad5", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=80dbe58efc7152cc9925012de0e568f36a9893a8", "patch": "@@ -1447,7 +1447,7 @@ impl<'a> LoweringContext<'a> {\n         };\n \n         for bound in bounds {\n-            hir::intravisit::walk_ty_param_bound(&mut lifetime_collector, &bound);\n+            hir::intravisit::walk_param_bound(&mut lifetime_collector, &bound);\n         }\n \n         (\n@@ -2125,10 +2125,7 @@ impl<'a> LoweringContext<'a> {\n             }) => hir::WherePredicate::RegionPredicate(hir::WhereRegionPredicate {\n                 span,\n                 lifetime: self.lower_lifetime(lifetime),\n-                bounds: bounds\n-                    .iter()\n-                    .map(|bound| self.lower_lifetime(bound))\n-                    .collect(),\n+                bounds: self.lower_param_bounds(bounds, ImplTraitContext::Disallowed),\n             }),\n             WherePredicate::EqPredicate(WhereEqPredicate {\n                 id,"}, {"sha": "8249b306a0c3bad175957e10cfbf8dabddea6ce1", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=80dbe58efc7152cc9925012de0e568f36a9893a8", "patch": "@@ -596,7 +596,7 @@ pub struct WhereBoundPredicate {\n pub struct WhereRegionPredicate {\n     pub span: Span,\n     pub lifetime: Lifetime,\n-    pub bounds: HirVec<Lifetime>,\n+    pub bounds: ParamBounds,\n }\n \n /// An equality predicate (unsupported), e.g. `T=int`"}, {"sha": "10cecdb2d47aac1c13c8250b0185ac5d515d78bf", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=80dbe58efc7152cc9925012de0e568f36a9893a8", "patch": "@@ -2180,7 +2180,12 @@ impl<'a> State<'a> {\n                     self.s.word(\":\")?;\n \n                     for (i, bound) in bounds.iter().enumerate() {\n-                        self.print_lifetime(bound)?;\n+                        match bound {\n+                            hir::ParamBound::Outlives(lt) => {\n+                                self.print_lifetime(lt)?;\n+                            }\n+                            _ => bug!(),\n+                        }\n \n                         if i != 0 {\n                             self.s.word(\":\")?;"}, {"sha": "fc160b35ae4949ddf2492516c07e60b44cd8b481", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=80dbe58efc7152cc9925012de0e568f36a9893a8", "patch": "@@ -726,7 +726,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         this.with(scope, |_old_scope, this| {\n                             this.visit_generics(generics);\n                             for bound in bounds {\n-                                this.visit_ty_param_bound(bound);\n+                                this.visit_param_bound(bound);\n                             }\n                         });\n                     });\n@@ -741,7 +741,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     self.with(scope, |_old_scope, this| {\n                         this.visit_generics(generics);\n                         for bound in bounds {\n-                            this.visit_ty_param_bound(bound);\n+                            this.visit_param_bound(bound);\n                         }\n                     });\n                 }\n@@ -786,7 +786,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 self.with(scope, |_old_scope, this| {\n                     this.visit_generics(generics);\n                     for bound in bounds {\n-                        this.visit_ty_param_bound(bound);\n+                        this.visit_param_bound(bound);\n                     }\n                     if let Some(ty) = ty {\n                         this.visit_ty(ty);\n@@ -882,7 +882,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             match param.kind {\n                 GenericParamKind::Lifetime { .. } => {}\n                 GenericParamKind::Type { ref default, .. } => {\n-                    walk_list!(self, visit_ty_param_bound, &param.bounds);\n+                    walk_list!(self, visit_param_bound, &param.bounds);\n                     if let Some(ref ty) = default {\n                         self.visit_ty(&ty);\n                     }\n@@ -917,13 +917,13 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         let result = self.with(scope, |old_scope, this| {\n                             this.check_lifetime_params(old_scope, &bound_generic_params);\n                             this.visit_ty(&bounded_ty);\n-                            walk_list!(this, visit_ty_param_bound, bounds);\n+                            walk_list!(this, visit_param_bound, bounds);\n                         });\n                         self.trait_ref_hack = false;\n                         result\n                     } else {\n                         self.visit_ty(&bounded_ty);\n-                        walk_list!(self, visit_ty_param_bound, bounds);\n+                        walk_list!(self, visit_param_bound, bounds);\n                     }\n                 }\n                 &hir::WherePredicate::RegionPredicate(hir::WhereRegionPredicate {\n@@ -932,9 +932,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     ..\n                 }) => {\n                     self.visit_lifetime(lifetime);\n-                    for bound in bounds {\n-                        self.visit_lifetime(bound);\n-                    }\n+                    walk_list!(self, visit_param_bound, bounds);\n                 }\n                 &hir::WherePredicate::EqPredicate(hir::WhereEqPredicate {\n                     ref lhs_ty,"}, {"sha": "879adebf7ea953659c5aea4b3188fab7b5fece58", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=80dbe58efc7152cc9925012de0e568f36a9893a8", "patch": "@@ -203,9 +203,9 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_impl_item(self, ii)\n     }\n \n-    fn visit_ty_param_bound(&mut self, bounds: &'v hir::ParamBound) {\n+    fn visit_param_bound(&mut self, bounds: &'v hir::ParamBound) {\n         self.record(\"ParamBound\", Id::None, bounds);\n-        hir_visit::walk_ty_param_bound(self, bounds)\n+        hir_visit::walk_param_bound(self, bounds)\n     }\n \n     fn visit_struct_field(&mut self, s: &'v hir::StructField) {\n@@ -322,9 +322,9 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n         ast_visit::walk_impl_item(self, ii)\n     }\n \n-    fn visit_ty_param_bound(&mut self, bounds: &'v ast::ParamBound) {\n+    fn visit_param_bound(&mut self, bounds: &'v ast::ParamBound) {\n         self.record(\"ParamBound\", Id::None, bounds);\n-        ast_visit::walk_ty_param_bound(self, bounds)\n+        ast_visit::walk_param_bound(self, bounds)\n     }\n \n     fn visit_struct_field(&mut self, s: &'v ast::StructField) {"}, {"sha": "731c6e2ef82950cf70670599c5efda13e1593ad0", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=80dbe58efc7152cc9925012de0e568f36a9893a8", "patch": "@@ -815,7 +815,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n                 GenericParamKind::Lifetime { .. } => self.visit_generic_param(param),\n                 GenericParamKind::Type { ref default, .. } => {\n                     for bound in &param.bounds {\n-                        self.visit_ty_param_bound(bound);\n+                        self.visit_param_bound(bound);\n                     }\n \n                     if let Some(ref ty) = default {\n@@ -2076,7 +2076,7 @@ impl<'a> Resolver<'a> {\n                     let local_def_id = this.definitions.local_def_id(item.id);\n                     this.with_self_rib(Def::SelfTy(Some(local_def_id), None), |this| {\n                         this.visit_generics(generics);\n-                        walk_list!(this, visit_ty_param_bound, bounds);\n+                        walk_list!(this, visit_param_bound, bounds);\n \n                         for trait_item in trait_items {\n                             this.check_proc_macro_attrs(&trait_item.attrs);\n@@ -2119,7 +2119,7 @@ impl<'a> Resolver<'a> {\n                     let local_def_id = this.definitions.local_def_id(item.id);\n                     this.with_self_rib(Def::SelfTy(Some(local_def_id), None), |this| {\n                         this.visit_generics(generics);\n-                        walk_list!(this, visit_ty_param_bound, bounds);\n+                        walk_list!(this, visit_param_bound, bounds);\n                     });\n                 });\n             }"}, {"sha": "c2b52e0de752289b85243ea7f83eb8914e840830", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=80dbe58efc7152cc9925012de0e568f36a9893a8", "patch": "@@ -1512,7 +1512,12 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             &hir::WherePredicate::RegionPredicate(ref region_pred) => {\n                 let r1 = AstConv::ast_region_to_region(&icx, &region_pred.lifetime, None);\n                 for bound in &region_pred.bounds {\n-                    let r2 = AstConv::ast_region_to_region(&icx, bound, None);\n+                    let r2 = match bound {\n+                        hir::ParamBound::Outlives(lt) => {\n+                            AstConv::ast_region_to_region(&icx, lt, None)\n+                        }\n+                        _ => bug!(),\n+                    };\n                     let pred = ty::Binder::bind(ty::OutlivesPredicate(r1, r2));\n                     predicates.push(ty::Predicate::RegionOutlives(pred))\n                 }"}, {"sha": "9671007a06b9f7272da50cda1b8cc9596e9805bc", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=80dbe58efc7152cc9925012de0e568f36a9893a8", "patch": "@@ -486,11 +486,8 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n             .iter()\n             .flat_map(|(name, lifetime)| {\n                 let empty = Vec::new();\n-                let bounds: FxHashSet<Lifetime> = finished\n-                    .get(name)\n-                    .unwrap_or(&empty)\n-                    .iter()\n-                    .map(|region| self.get_lifetime(region, names_map))\n+                let bounds: FxHashSet<ParamBound> = finished.get(name).unwrap_or(&empty).iter()\n+                    .map(|region| ParamBound::Outlives(self.get_lifetime(region, names_map)))\n                     .collect();\n \n                 if bounds.is_empty() {\n@@ -538,7 +535,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n         &self,\n         ty_to_bounds: FxHashMap<Type, FxHashSet<ParamBound>>,\n         ty_to_fn: FxHashMap<Type, (Option<PolyTrait>, Option<Type>)>,\n-        lifetime_to_bounds: FxHashMap<Lifetime, FxHashSet<Lifetime>>,\n+        lifetime_to_bounds: FxHashMap<Lifetime, FxHashSet<ParamBound>>,\n     ) -> Vec<WherePredicate> {\n         ty_to_bounds\n             .into_iter()\n@@ -615,7 +612,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                     .filter(|&(_, ref bounds)| !bounds.is_empty())\n                     .map(|(lifetime, bounds)| {\n                         let mut bounds_vec = bounds.into_iter().collect();\n-                        self.sort_where_lifetimes(&mut bounds_vec);\n+                        self.sort_where_bounds(&mut bounds_vec);\n                         WherePredicate::RegionPredicate {\n                             lifetime,\n                             bounds: bounds_vec,\n@@ -918,14 +915,6 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n         self.unstable_debug_sort(&mut bounds);\n     }\n \n-    #[inline]\n-    fn sort_where_lifetimes(&self, mut bounds: &mut Vec<Lifetime>) {\n-        // We should never have identical bounds - and if we do,\n-        // they're visually identical as well. Therefore, using\n-        // an unstable sort is fine.\n-        self.unstable_debug_sort(&mut bounds);\n-    }\n-\n     // This might look horrendously hacky, but it's actually not that bad.\n     //\n     // For performance reasons, we use several different FxHashMaps"}, {"sha": "c85178961c16a16bf9d2109a56fe8b15203e6e41", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=80dbe58efc7152cc9925012de0e568f36a9893a8", "patch": "@@ -375,7 +375,7 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n     let trait_ = associated_trait.clean(cx).map(|bound| {\n         match bound {\n             clean::TraitBound(polyt, _) => polyt.trait_,\n-            clean::RegionBound(..) => unreachable!(),\n+            clean::Outlives(..) => unreachable!(),\n         }\n     });\n     if trait_.def_id() == tcx.lang_items().deref_trait() {"}, {"sha": "2f48267579a61cf2556da8690159dc5f35521a5e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=80dbe58efc7152cc9925012de0e568f36a9893a8", "patch": "@@ -1459,8 +1459,8 @@ impl Clean<Attributes> for [ast::Attribute] {\n \n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n pub enum ParamBound {\n-    RegionBound(Lifetime),\n-    TraitBound(PolyTrait, hir::TraitBoundModifier)\n+    TraitBound(PolyTrait, hir::TraitBoundModifier),\n+    Outlives(Lifetime),\n }\n \n impl ParamBound {\n@@ -1510,7 +1510,7 @@ impl ParamBound {\n impl Clean<ParamBound> for hir::ParamBound {\n     fn clean(&self, cx: &DocContext) -> ParamBound {\n         match *self {\n-            hir::Outlives(lt) => RegionBound(lt.clean(cx)),\n+            hir::Outlives(lt) => Outlives(lt.clean(cx)),\n             hir::TraitTyParamBound(ref t, modifier) => TraitBound(t.clean(cx), modifier),\n         }\n     }\n@@ -1624,7 +1624,7 @@ impl<'tcx> Clean<Option<Vec<ParamBound>>> for Substs<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Option<Vec<ParamBound>> {\n         let mut v = Vec::new();\n         v.extend(self.regions().filter_map(|r| r.clean(cx))\n-                     .map(RegionBound));\n+                     .map(Outlives));\n         v.extend(self.types().map(|t| TraitBound(PolyTrait {\n             trait_: t.clean(cx),\n             generic_params: Vec::new(),\n@@ -1721,7 +1721,7 @@ impl Clean<Option<Lifetime>> for ty::RegionKind {\n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n pub enum WherePredicate {\n     BoundPredicate { ty: Type, bounds: Vec<ParamBound> },\n-    RegionPredicate { lifetime: Lifetime, bounds: Vec<Lifetime>},\n+    RegionPredicate { lifetime: Lifetime, bounds: Vec<ParamBound> },\n     EqPredicate { lhs: Type, rhs: Type },\n }\n \n@@ -1791,7 +1791,7 @@ impl<'tcx> Clean<WherePredicate> for ty::OutlivesPredicate<ty::Region<'tcx>, ty:\n         let ty::OutlivesPredicate(ref a, ref b) = *self;\n         WherePredicate::RegionPredicate {\n             lifetime: a.clean(cx).unwrap(),\n-            bounds: vec![b.clean(cx).unwrap()]\n+            bounds: vec![ParamBound::Outlives(b.clean(cx).unwrap())]\n         }\n     }\n }\n@@ -1802,7 +1802,7 @@ impl<'tcx> Clean<WherePredicate> for ty::OutlivesPredicate<Ty<'tcx>, ty::Region<\n \n         WherePredicate::BoundPredicate {\n             ty: ty.clean(cx),\n-            bounds: vec![ParamBound::RegionBound(lt.clean(cx).unwrap())]\n+            bounds: vec![ParamBound::Outlives(lt.clean(cx).unwrap())]\n         }\n     }\n }\n@@ -1820,9 +1820,7 @@ impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Type {\n         let trait_ = match self.trait_ref(cx.tcx).clean(cx) {\n             ParamBound::TraitBound(t, _) => t.trait_,\n-            ParamBound::RegionBound(_) => {\n-                panic!(\"cleaning a trait got a region\")\n-            }\n+            ParamBound::Outlives(_) => panic!(\"cleaning a trait got a lifetime\"),\n         };\n         Type::QPath {\n             name: cx.tcx.associated_item(self.item_def_id).name.clean(cx),\n@@ -2979,18 +2977,13 @@ impl Clean<Type> for hir::Ty {\n             TyTraitObject(ref bounds, ref lifetime) => {\n                 match bounds[0].clean(cx).trait_ {\n                     ResolvedPath { path, typarams: None, did, is_generic } => {\n-                        let mut bounds: Vec<_> = bounds[1..].iter().map(|bound| {\n+                        let mut bounds: Vec<self::ParamBound> = bounds[1..].iter().map(|bound| {\n                             TraitBound(bound.clean(cx), hir::TraitBoundModifier::None)\n                         }).collect();\n                         if !lifetime.is_elided() {\n-                            bounds.push(RegionBound(lifetime.clean(cx)));\n-                        }\n-                        ResolvedPath {\n-                            path,\n-                            typarams: Some(bounds),\n-                            did,\n-                            is_generic,\n+                            bounds.push(self::Outlives(lifetime.clean(cx)));\n                         }\n+                        ResolvedPath { path, typarams: Some(bounds), did, is_generic, }\n                     }\n                     _ => Infer // shouldn't happen\n                 }\n@@ -3087,7 +3080,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     inline::record_extern_fqn(cx, did, TypeKind::Trait);\n \n                     let mut typarams = vec![];\n-                    reg.clean(cx).map(|b| typarams.push(RegionBound(b)));\n+                    reg.clean(cx).map(|b| typarams.push(Outlives(b)));\n                     for did in obj.auto_traits() {\n                         let empty = cx.tcx.intern_substs(&[]);\n                         let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n@@ -3144,7 +3137,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                         tr\n                     } else if let ty::Predicate::TypeOutlives(pred) = *predicate {\n                         // these should turn up at the end\n-                        pred.skip_binder().1.clean(cx).map(|r| regions.push(RegionBound(r)));\n+                        pred.skip_binder().1.clean(cx).map(|r| regions.push(Outlives(r)));\n                         return None;\n                     } else {\n                         return None;\n@@ -4455,8 +4448,8 @@ struct RegionDeps<'tcx> {\n \n #[derive(Eq, PartialEq, Hash, Debug)]\n enum SimpleBound {\n-    RegionBound(Lifetime),\n-    TraitBound(Vec<PathSegment>, Vec<SimpleBound>, Vec<GenericParamDef>, hir::TraitBoundModifier)\n+    TraitBound(Vec<PathSegment>, Vec<SimpleBound>, Vec<GenericParamDef>, hir::TraitBoundModifier),\n+    Outlives(Lifetime),\n }\n \n enum AutoTraitResult {\n@@ -4477,7 +4470,7 @@ impl AutoTraitResult {\n impl From<ParamBound> for SimpleBound {\n     fn from(bound: ParamBound) -> Self {\n         match bound.clone() {\n-            ParamBound::RegionBound(l) => SimpleBound::RegionBound(l),\n+            ParamBound::Outlives(l) => SimpleBound::Outlives(l),\n             ParamBound::TraitBound(t, mod_) => match t.trait_ {\n                 Type::ResolvedPath { path, typarams, .. } => {\n                     SimpleBound::TraitBound(path.segments,"}, {"sha": "c7477645d6a2ec0804d2a827620e62e361d51bc1", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=80dbe58efc7152cc9925012de0e568f36a9893a8", "patch": "@@ -84,7 +84,7 @@ pub fn where_clauses(cx: &DocContext, clauses: Vec<WP>) -> Vec<WP> {\n         !bounds.iter_mut().any(|b| {\n             let trait_ref = match *b {\n                 clean::TraitBound(ref mut tr, _) => tr,\n-                clean::RegionBound(..) => return false,\n+                clean::Outlives(..) => return false,\n             };\n             let (did, path) = match trait_ref.trait_ {\n                 clean::ResolvedPath { did, ref mut path, ..} => (did, path),"}, {"sha": "bd9194a8669f2f9b0ef1864bbeb7d077c7aa4552", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=80dbe58efc7152cc9925012de0e568f36a9893a8", "patch": "@@ -270,7 +270,7 @@ impl fmt::Display for clean::PolyTrait {\n impl fmt::Display for clean::ParamBound {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            clean::RegionBound(ref lt) => {\n+            clean::Outlives(ref lt) => {\n                 write!(f, \"{}\", *lt)\n             }\n             clean::TraitBound(ref ty, modifier) => {"}, {"sha": "67679468fe42c0617271e7ccabe45d5c95999078", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=80dbe58efc7152cc9925012de0e568f36a9893a8", "patch": "@@ -393,7 +393,7 @@ pub struct WhereBoundPredicate {\n pub struct WhereRegionPredicate {\n     pub span: Span,\n     pub lifetime: Lifetime,\n-    pub bounds: Vec<Lifetime>,\n+    pub bounds: ParamBounds,\n }\n \n /// An equality predicate (unsupported)."}, {"sha": "66e485120659c48b57598c46a2ddd5a922b0b2fc", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=80dbe58efc7152cc9925012de0e568f36a9893a8", "patch": "@@ -1610,7 +1610,7 @@ impl<'a> Parser<'a> {\n                     s.print_mutability(mut_ty.mutbl)?;\n                     s.popen()?;\n                     s.print_type(&mut_ty.ty)?;\n-                    s.print_bounds(\" +\", &bounds)?;\n+                    s.print_type_bounds(\" +\", &bounds)?;\n                     s.pclose()\n                 });\n                 err.span_suggestion_with_applicability(\n@@ -4790,10 +4790,10 @@ impl<'a> Parser<'a> {\n \n     // Parse bounds of a lifetime parameter `BOUND + BOUND + BOUND`, possibly with trailing `+`.\n     // BOUND = LT_BOUND (e.g. `'a`)\n-    fn parse_lt_param_bounds(&mut self) -> Vec<Lifetime> {\n+    fn parse_lt_param_bounds(&mut self) -> ParamBounds {\n         let mut lifetimes = Vec::new();\n         while self.check_lifetime() {\n-            lifetimes.push(self.expect_lifetime());\n+            lifetimes.push(ast::ParamBound::Outlives(self.expect_lifetime()));\n \n             if !self.eat_plus() {\n                 break\n@@ -4868,9 +4868,7 @@ impl<'a> Parser<'a> {\n                 let lifetime = self.expect_lifetime();\n                 // Parse lifetime parameter.\n                 let bounds = if self.eat(&token::Colon) {\n-                    self.parse_lt_param_bounds().iter()\n-                        .map(|bound| ast::ParamBound::Outlives(*bound))\n-                        .collect()\n+                    self.parse_lt_param_bounds()\n                 } else {\n                     Vec::new()\n                 };"}, {"sha": "c672b01fb2725f4498c791c1797ed8e19dc805e2", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=80dbe58efc7152cc9925012de0e568f36a9893a8", "patch": "@@ -293,7 +293,7 @@ pub fn ty_to_string(ty: &ast::Ty) -> String {\n }\n \n pub fn bounds_to_string(bounds: &[ast::ParamBound]) -> String {\n-    to_string(|s| s.print_bounds(\"\", bounds))\n+    to_string(|s| s.print_type_bounds(\"\", bounds))\n }\n \n pub fn pat_to_string(pat: &ast::Pat) -> String {\n@@ -1078,10 +1078,10 @@ impl<'a> State<'a> {\n             }\n             ast::TyKind::TraitObject(ref bounds, syntax) => {\n                 let prefix = if syntax == ast::TraitObjectSyntax::Dyn { \"dyn\" } else { \"\" };\n-                self.print_bounds(prefix, &bounds[..])?;\n+                self.print_type_bounds(prefix, &bounds[..])?;\n             }\n             ast::TyKind::ImplTrait(ref bounds) => {\n-                self.print_bounds(\"impl\", &bounds[..])?;\n+                self.print_type_bounds(\"impl\", &bounds[..])?;\n             }\n             ast::TyKind::Array(ref ty, ref length) => {\n                 self.s.word(\"[\")?;\n@@ -1184,7 +1184,7 @@ impl<'a> State<'a> {\n         self.word_space(\"type\")?;\n         self.print_ident(ident)?;\n         if let Some(bounds) = bounds {\n-            self.print_bounds(\":\", bounds)?;\n+            self.print_type_bounds(\":\", bounds)?;\n         }\n         if let Some(ty) = ty {\n             self.s.space()?;\n@@ -1373,7 +1373,7 @@ impl<'a> State<'a> {\n                         real_bounds.push(b.clone());\n                     }\n                 }\n-                self.print_bounds(\":\", &real_bounds[..])?;\n+                self.print_type_bounds(\":\", &real_bounds[..])?;\n                 self.print_where_clause(&generics.where_clause)?;\n                 self.s.word(\" \")?;\n                 self.bopen()?;\n@@ -1400,7 +1400,7 @@ impl<'a> State<'a> {\n                     }\n                 }\n                 self.nbsp()?;\n-                self.print_bounds(\"=\", &real_bounds[..])?;\n+                self.print_type_bounds(\"=\", &real_bounds[..])?;\n                 self.print_where_clause(&generics.where_clause)?;\n                 self.s.word(\";\")?;\n             }\n@@ -2809,7 +2809,7 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn print_bounds(&mut self,\n+    pub fn print_type_bounds(&mut self,\n                         prefix: &str,\n                         bounds: &[ast::ParamBound])\n                         -> io::Result<()> {\n@@ -2851,7 +2851,7 @@ impl<'a> State<'a> {\n \n     pub fn print_lifetime_bounds(&mut self,\n                                  lifetime: &ast::Lifetime,\n-                                 bounds: &[ast::Lifetime])\n+                                 bounds: &ast::ParamBounds)\n                                  -> io::Result<()>\n     {\n         self.print_lifetime(lifetime)?;\n@@ -2861,7 +2861,10 @@ impl<'a> State<'a> {\n                 if i != 0 {\n                     self.s.word(\" + \")?;\n                 }\n-                self.print_lifetime(bound)?;\n+                match bound {\n+                    ast::ParamBound::Outlives(lt) => self.print_lifetime(lt)?,\n+                    _ => panic!(),\n+                }\n             }\n         }\n         Ok(())\n@@ -2881,17 +2884,12 @@ impl<'a> State<'a> {\n             match param.kind {\n                 ast::GenericParamKind::Lifetime { ref lifetime } => {\n                     s.print_outer_attributes_inline(&param.attrs)?;\n-                    s.print_lifetime_bounds(lifetime, &param.bounds.iter().map(|bound| {\n-                        match bound {\n-                            ast::ParamBound::Outlives(lt) => *lt,\n-                            _ => panic!(),\n-                        }\n-                    }).collect::<Vec<_>>().as_slice())\n+                    s.print_lifetime_bounds(lifetime, &param.bounds)\n                 },\n                 ast::GenericParamKind::Type { ref default } => {\n                     s.print_outer_attributes_inline(&param.attrs)?;\n                     s.print_ident(param.ident)?;\n-                    s.print_bounds(\":\", &param.bounds)?;\n+                    s.print_type_bounds(\":\", &param.bounds)?;\n                     match default {\n                         Some(ref default) => {\n                             s.s.space()?;\n@@ -2931,7 +2929,7 @@ impl<'a> State<'a> {\n                 }) => {\n                     self.print_formal_generic_params(bound_generic_params)?;\n                     self.print_type(bounded_ty)?;\n-                    self.print_bounds(\":\", bounds)?;\n+                    self.print_type_bounds(\":\", bounds)?;\n                 }\n                 ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate{ref lifetime,\n                                                                                ref bounds,"}, {"sha": "2d92f4b9531ad93e0351ba2ae266b9c403bb755f", "filename": "src/libsyntax/util/node_count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibsyntax%2Futil%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibsyntax%2Futil%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fnode_count.rs?ref=80dbe58efc7152cc9925012de0e568f36a9893a8", "patch": "@@ -95,9 +95,9 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_trait_ref(self, t)\n     }\n-    fn visit_ty_param_bound(&mut self, bounds: &ParamBound) {\n+    fn visit_param_bound(&mut self, bounds: &ParamBound) {\n         self.count += 1;\n-        walk_ty_param_bound(self, bounds)\n+        walk_param_bound(self, bounds)\n     }\n     fn visit_poly_trait_ref(&mut self, t: &PolyTraitRef, m: &TraitBoundModifier) {\n         self.count += 1;"}, {"sha": "1d535ab6bf0c1b19ff4e7ad1302017a274a0c39e", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80dbe58efc7152cc9925012de0e568f36a9893a8/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=80dbe58efc7152cc9925012de0e568f36a9893a8", "patch": "@@ -86,8 +86,8 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_trait_item(&mut self, ti: &'ast TraitItem) { walk_trait_item(self, ti) }\n     fn visit_impl_item(&mut self, ii: &'ast ImplItem) { walk_impl_item(self, ii) }\n     fn visit_trait_ref(&mut self, t: &'ast TraitRef) { walk_trait_ref(self, t) }\n-    fn visit_ty_param_bound(&mut self, bounds: &'ast ParamBound) {\n-        walk_ty_param_bound(self, bounds)\n+    fn visit_param_bound(&mut self, bounds: &'ast ParamBound) {\n+        walk_param_bound(self, bounds)\n     }\n     fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef, m: &'ast TraitBoundModifier) {\n         walk_poly_trait_ref(self, t, m)\n@@ -276,12 +276,12 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n         }\n         ItemKind::Trait(.., ref generics, ref bounds, ref methods) => {\n             visitor.visit_generics(generics);\n-            walk_list!(visitor, visit_ty_param_bound, bounds);\n+            walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_trait_item, methods);\n         }\n         ItemKind::TraitAlias(ref generics, ref bounds) => {\n             visitor.visit_generics(generics);\n-            walk_list!(visitor, visit_ty_param_bound, bounds);\n+            walk_list!(visitor, visit_param_bound, bounds);\n         }\n         ItemKind::Mac(ref mac) => visitor.visit_mac(mac),\n         ItemKind::MacroDef(ref ts) => visitor.visit_mac_def(ts, item.id),\n@@ -341,7 +341,7 @@ pub fn walk_ty<'a, V: Visitor<'a>>(visitor: &mut V, typ: &'a Ty) {\n         }\n         TyKind::TraitObject(ref bounds, ..) |\n         TyKind::ImplTrait(ref bounds) => {\n-            walk_list!(visitor, visit_ty_param_bound, bounds);\n+            walk_list!(visitor, visit_param_bound, bounds);\n         }\n         TyKind::Typeof(ref expression) => {\n             visitor.visit_anon_const(expression)\n@@ -479,7 +479,7 @@ pub fn walk_global_asm<'a, V: Visitor<'a>>(_: &mut V, _: &'a GlobalAsm) {\n     // Empty!\n }\n \n-pub fn walk_ty_param_bound<'a, V: Visitor<'a>>(visitor: &mut V, bound: &'a ParamBound) {\n+pub fn walk_param_bound<'a, V: Visitor<'a>>(visitor: &mut V, bound: &'a ParamBound) {\n     match *bound {\n         TraitTyParamBound(ref typ, ref modifier) => {\n             visitor.visit_poly_trait_ref(typ, modifier);\n@@ -517,14 +517,14 @@ pub fn walk_where_predicate<'a, V: Visitor<'a>>(visitor: &mut V, predicate: &'a\n                                                            ref bound_generic_params,\n                                                            ..}) => {\n             visitor.visit_ty(bounded_ty);\n-            walk_list!(visitor, visit_ty_param_bound, bounds);\n+            walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_generic_param, bound_generic_params);\n         }\n         WherePredicate::RegionPredicate(WhereRegionPredicate{ref lifetime,\n                                                              ref bounds,\n                                                              ..}) => {\n             visitor.visit_lifetime(lifetime);\n-            walk_list!(visitor, visit_lifetime, bounds);\n+            walk_list!(visitor, visit_param_bound, bounds);\n         }\n         WherePredicate::EqPredicate(WhereEqPredicate{ref lhs_ty,\n                                                      ref rhs_ty,\n@@ -585,7 +585,7 @@ pub fn walk_trait_item<'a, V: Visitor<'a>>(visitor: &mut V, trait_item: &'a Trai\n                              &sig.decl, trait_item.span, trait_item.id);\n         }\n         TraitItemKind::Type(ref bounds, ref default) => {\n-            walk_list!(visitor, visit_ty_param_bound, bounds);\n+            walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_ty, default);\n         }\n         TraitItemKind::Macro(ref mac) => {"}]}