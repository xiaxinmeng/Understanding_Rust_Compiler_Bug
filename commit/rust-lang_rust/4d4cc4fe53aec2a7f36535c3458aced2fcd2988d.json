{"sha": "4d4cc4fe53aec2a7f36535c3458aced2fcd2988d", "node_id": "C_kwDOAAsO6NoAKDRkNGNjNGZlNTNhZWMyYTdmMzY1MzVjMzQ1OGFjZWQyZmNkMjk4OGQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-18T15:17:58Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-21T12:51:33Z"}, "message": "Generalize a helper to be useful for types other than projections", "tree": {"sha": "13dd8e2875d3e5071b84d8cdd79e777238235a00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13dd8e2875d3e5071b84d8cdd79e777238235a00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d4cc4fe53aec2a7f36535c3458aced2fcd2988d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d4cc4fe53aec2a7f36535c3458aced2fcd2988d", "html_url": "https://github.com/rust-lang/rust/commit/4d4cc4fe53aec2a7f36535c3458aced2fcd2988d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d4cc4fe53aec2a7f36535c3458aced2fcd2988d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96b819a456672e50444dcccbfed2435f6b212225", "url": "https://api.github.com/repos/rust-lang/rust/commits/96b819a456672e50444dcccbfed2435f6b212225", "html_url": "https://github.com/rust-lang/rust/commit/96b819a456672e50444dcccbfed2435f6b212225"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "ec26a10c5362c31f9d368bd6bbb22baade240383", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d4cc4fe53aec2a7f36535c3458aced2fcd2988d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4cc4fe53aec2a7f36535c3458aced2fcd2988d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=4d4cc4fe53aec2a7f36535c3458aced2fcd2988d", "patch": "@@ -347,11 +347,12 @@ where\n \n         debug!(?trait_bounds);\n \n+        let generic = GenericKind::Projection(projection_ty);\n+\n         // Compute the bounds we can derive from the environment. This\n         // is an \"approximate\" match -- in some cases, these bounds\n         // may not apply.\n-        let mut approx_env_bounds =\n-            self.verify_bound.projection_approx_declared_bounds_from_env(projection_ty);\n+        let mut approx_env_bounds = self.verify_bound.approx_declared_bounds_from_env(generic);\n         debug!(?approx_env_bounds);\n \n         // Remove outlives bounds that we get from the environment but\n@@ -436,7 +437,6 @@ where\n         // projection outlive; in some cases, this may add insufficient\n         // edges into the inference graph, leading to inference failures\n         // even though a satisfactory solution exists.\n-        let generic = GenericKind::Projection(projection_ty);\n         let verify_bound = self.verify_bound.generic_bound(generic);\n         debug!(\"projection_must_outlive: pushing {:?}\", verify_bound);\n         self.delegate.push_verify(origin, generic, region, verify_bound);"}, {"sha": "5f1671b4807c9a14c6aac0b903b1e26361b575ac", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d4cc4fe53aec2a7f36535c3458aced2fcd2988d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4cc4fe53aec2a7f36535c3458aced2fcd2988d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=4d4cc4fe53aec2a7f36535c3458aced2fcd2988d", "patch": "@@ -105,11 +105,11 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n     /// the clause from the environment only applies if `'0 = 'a`,\n     /// which we don't know yet. But we would still include `'b` in\n     /// this list.\n-    pub fn projection_approx_declared_bounds_from_env(\n+    pub fn approx_declared_bounds_from_env(\n         &self,\n-        projection_ty: ty::ProjectionTy<'tcx>,\n+        generic: GenericKind<'tcx>,\n     ) -> Vec<ty::Binder<'tcx, ty::OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>>> {\n-        let projection_ty = GenericKind::Projection(projection_ty).to_ty(self.tcx);\n+        let projection_ty = generic.to_ty(self.tcx);\n         let erased_projection_ty = self.tcx.erase_regions(projection_ty);\n         self.declared_generic_bounds_from_env_for_erased_ty(erased_projection_ty)\n     }\n@@ -125,7 +125,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n \n         // Search the env for where clauses like `P: 'a`.\n         let env_bounds = self\n-            .projection_approx_declared_bounds_from_env(projection_ty)\n+            .approx_declared_bounds_from_env(GenericKind::Projection(projection_ty))\n             .into_iter()\n             .map(|binder| {\n                 if let Some(ty::OutlivesPredicate(ty, r)) = binder.no_bound_vars() && ty == projection_ty_as_ty {"}]}