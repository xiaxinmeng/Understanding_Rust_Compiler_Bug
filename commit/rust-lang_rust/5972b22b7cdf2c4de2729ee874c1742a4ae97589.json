{"sha": "5972b22b7cdf2c4de2729ee874c1742a4ae97589", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NzJiMjJiN2NkZjJjNGRlMjcyOWVlODc0YzE3NDJhNGFlOTc1ODk=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-03-30T13:26:34Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-04-01T22:35:54Z"}, "message": "Implement `values_mut` on `HashMap`.\n\nhttps://github.com/rust-lang/rust/issues/32551", "tree": {"sha": "cb18249945141ed87d4014b691e835b774f3da9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb18249945141ed87d4014b691e835b774f3da9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5972b22b7cdf2c4de2729ee874c1742a4ae97589", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5972b22b7cdf2c4de2729ee874c1742a4ae97589", "html_url": "https://github.com/rust-lang/rust/commit/5972b22b7cdf2c4de2729ee874c1742a4ae97589", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5972b22b7cdf2c4de2729ee874c1742a4ae97589/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53498eca50e25d8a11f9dc5859770715fa906fa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/53498eca50e25d8a11f9dc5859770715fa906fa7", "html_url": "https://github.com/rust-lang/rust/commit/53498eca50e25d8a11f9dc5859770715fa906fa7"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "4c29023660a6851e6e7cf9b74a3a608efa343095", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/5972b22b7cdf2c4de2729ee874c1742a4ae97589/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5972b22b7cdf2c4de2729ee874c1742a4ae97589/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=5972b22b7cdf2c4de2729ee874c1742a4ae97589", "patch": "@@ -861,6 +861,34 @@ impl<K, V, S> HashMap<K, V, S>\n         Values { inner: self.iter() }\n     }\n \n+    /// An iterator visiting all values mutably in arbitrary order.\n+    /// Iterator element type is `&'a mut V`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(map_values_mut)]\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map = HashMap::new();\n+    ///\n+    /// map.insert(\"a\", 1);\n+    /// map.insert(\"b\", 2);\n+    /// map.insert(\"c\", 3);\n+    ///\n+    /// for val in map.values_mut() {\n+    ///     *val = *val + 10;\n+    /// }\n+    ///\n+    /// for val in map.values() {\n+    ///     print!(\"{}\", val);\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"map_values_mut\", reason = \"recently added\", issue = \"32551\")]\n+    pub fn values_mut<'a>(&'a mut self) -> ValuesMut<'a, K, V> {\n+        ValuesMut { inner: self.iter_mut() }\n+    }\n+\n     /// An iterator visiting all key-value pairs in arbitrary order.\n     /// Iterator element type is `(&'a K, &'a V)`.\n     ///\n@@ -1262,6 +1290,12 @@ pub struct Drain<'a, K: 'a, V: 'a> {\n     inner: table::Drain<'a, K, V>\n }\n \n+/// Mutable HashMap values iterator.\n+#[unstable(feature = \"map_values_mut\", reason = \"recently added\", issue = \"32551\")]\n+pub struct ValuesMut<'a, K: 'a, V: 'a> {\n+    inner: IterMut<'a, K, V>\n+}\n+\n enum InternalEntry<K, V, M> {\n     Occupied {\n         elem: FullBucket<K, V, M>,\n@@ -1460,6 +1494,18 @@ impl<'a, K, V> ExactSizeIterator for Values<'a, K, V> {\n     #[inline] fn len(&self) -> usize { self.inner.len() }\n }\n \n+#[unstable(feature = \"map_values_mut\", reason = \"recently added\", issue = \"32551\")]\n+impl<'a, K, V> Iterator for ValuesMut<'a, K, V> {\n+    type Item = &'a mut V;\n+\n+    #[inline] fn next(&mut self) -> Option<(&'a mut V)> { self.inner.next().map(|(_, v)| v) }\n+    #[inline] fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n+}\n+#[unstable(feature = \"map_values_mut\", reason = \"recently added\", issue = \"32551\")]\n+impl<'a, K, V> ExactSizeIterator for ValuesMut<'a, K, V> {\n+    #[inline] fn len(&self) -> usize { self.inner.len() }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Iterator for Drain<'a, K, V> {\n     type Item = (K, V);\n@@ -1907,6 +1953,7 @@ mod test_map {\n         assert_eq!(m.drain().next(), None);\n         assert_eq!(m.keys().next(), None);\n         assert_eq!(m.values().next(), None);\n+        assert_eq!(m.values_mut().next(), None);\n         assert_eq!(m.iter().next(), None);\n         assert_eq!(m.iter_mut().next(), None);\n         assert_eq!(m.len(), 0);\n@@ -2083,6 +2130,20 @@ mod test_map {\n         assert!(values.contains(&'c'));\n     }\n \n+    #[test]\n+    fn test_values_mut() {\n+        let vec = vec![(1, 1), (2, 2), (3, 3)];\n+        let mut map: HashMap<_, _> = vec.into_iter().collect();\n+        for value in map.values_mut() {\n+            *value = (*value) * 2\n+        }\n+        let values: Vec<_> = map.values().cloned().collect();\n+        assert_eq!(values.len(), 3);\n+        assert!(values.contains(&2));\n+        assert!(values.contains(&4));\n+        assert!(values.contains(&6));\n+    }\n+\n     #[test]\n     fn test_find() {\n         let mut m = HashMap::new();"}, {"sha": "8dcac51417224795178f43ed77147bf182fdb4c8", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5972b22b7cdf2c4de2729ee874c1742a4ae97589/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5972b22b7cdf2c4de2729ee874c1742a4ae97589/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=5972b22b7cdf2c4de2729ee874c1742a4ae97589", "patch": "@@ -241,6 +241,7 @@\n #![feature(link_args)]\n #![feature(linkage)]\n #![feature(macro_reexport)]\n+#![cfg_attr(test, feature(map_values_mut))]\n #![feature(num_bits_bytes)]\n #![feature(old_wrapping)]\n #![feature(on_unimplemented)]"}]}