{"sha": "9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZWZjZDMwNTFhYzdmNGVhM2M5MjRiZDc1NDJjNzBjNTlhYzVkZmQ=", "commit": {"author": {"name": "ben", "email": "benlewisj@gmail.com", "date": "2019-10-18T23:04:16Z"}, "committer": {"name": "ben", "email": "benlewisj@gmail.com", "date": "2019-10-19T20:17:40Z"}, "message": "Rename resolve_type_vars_with_obligations to\nresolve_vars_with_obligations, as it now also resolves const variables.", "tree": {"sha": "9f765f61fc15340b261d536f424e9b618917f48f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f765f61fc15340b261d536f424e9b618917f48f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd", "html_url": "https://github.com/rust-lang/rust/commit/9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd/comments", "author": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "925e3042f659c4a79bb742503cdbbd4ee4a731a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/925e3042f659c4a79bb742503cdbbd4ee4a731a2", "html_url": "https://github.com/rust-lang/rust/commit/925e3042f659c4a79bb742503cdbbd4ee4a731a2"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "bfccb032458f5288bef592a4cb1fc2fc02f06ef9", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd", "patch": "@@ -811,7 +811,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         target: Ty<'tcx>,\n         allow_two_phase: AllowTwoPhase,\n     ) -> RelateResult<'tcx, Ty<'tcx>> {\n-        let source = self.resolve_type_vars_with_obligations(expr_ty);\n+        let source = self.resolve_vars_with_obligations(expr_ty);\n         debug!(\"coercion::try({:?}: {:?} -> {:?})\", expr, source, target);\n \n         let cause = self.cause(expr.span, ObligationCauseCode::ExprAssignable);\n@@ -829,7 +829,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Same as `try_coerce()`, but without side-effects.\n     pub fn can_coerce(&self, expr_ty: Ty<'tcx>, target: Ty<'tcx>) -> bool {\n-        let source = self.resolve_type_vars_with_obligations(expr_ty);\n+        let source = self.resolve_vars_with_obligations(expr_ty);\n         debug!(\"coercion::can({:?} -> {:?})\", source, target);\n \n         let cause = self.cause(syntax_pos::DUMMY_SP, ObligationCauseCode::ExprAssignable);\n@@ -853,8 +853,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 -> RelateResult<'tcx, Ty<'tcx>>\n         where E: AsCoercionSite\n     {\n-        let prev_ty = self.resolve_type_vars_with_obligations(prev_ty);\n-        let new_ty = self.resolve_type_vars_with_obligations(new_ty);\n+        let prev_ty = self.resolve_vars_with_obligations(prev_ty);\n+        let new_ty = self.resolve_vars_with_obligations(new_ty);\n         debug!(\"coercion::try_find_coercion_lub({:?}, {:?})\", prev_ty, new_ty);\n \n         // Special-case that coercion alone cannot handle:\n@@ -1333,7 +1333,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n             err.span_label(return_sp, \"expected because this return type...\");\n             err.span_label( *sp, format!(\n                 \"...is found to be `{}` here\",\n-                fcx.resolve_type_vars_with_obligations(expected),\n+                fcx.resolve_vars_with_obligations(expected),\n             ));\n         }\n         err"}, {"sha": "3509d6566ec93860315bea31234230f9a6df90f3", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd", "patch": "@@ -108,7 +108,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                               expected: Ty<'tcx>,\n                               allow_two_phase: AllowTwoPhase)\n                               -> (Ty<'tcx>, Option<DiagnosticBuilder<'tcx>>) {\n-        let expected = self.resolve_type_vars_with_obligations(expected);\n+        let expected = self.resolve_vars_with_obligations(expected);\n \n         let e = match self.try_coerce(expr, checked_ty, expected, allow_two_phase) {\n             Ok(ty) => return (ty, None),\n@@ -117,7 +117,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let expr = expr.peel_drop_temps();\n         let cause = self.misc(expr.span);\n-        let expr_ty = self.resolve_type_vars_with_obligations(checked_ty);\n+        let expr_ty = self.resolve_vars_with_obligations(checked_ty);\n         let mut err = self.report_mismatched_types(&cause, expected, expr_ty, e);\n \n         if self.is_assign_to_bool(expr, expected) {"}, {"sha": "f5f85bbcb100c4bb7028de09dfc20380326dbc4b", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd", "patch": "@@ -1010,7 +1010,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &'tcx hir::Expr,\n     ) -> Ty<'tcx> {\n         let flds = expected.only_has_type(self).and_then(|ty| {\n-            let ty = self.resolve_type_vars_with_obligations(ty);\n+            let ty = self.resolve_vars_with_obligations(ty);\n             match ty.kind {\n                 ty::Tuple(ref flds) => Some(&flds[..]),\n                 _ => None"}, {"sha": "d90ed2a790bb642fdecbcaaf1ac97e149e3bdfbb", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd", "patch": "@@ -919,7 +919,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // This occurs for UFCS desugaring of `T::method`, where there is no\n         // receiver expression for the method call, and thus no autoderef.\n         if let SelfSource::QPath(_) = source {\n-            return is_local(self.resolve_type_vars_with_obligations(rcvr_ty));\n+            return is_local(self.resolve_vars_with_obligations(rcvr_ty));\n         }\n \n         self.autoderef(span, rcvr_ty).any(|(ty, _)| is_local(ty))"}, {"sha": "73f35dde4f6ebc0d46718300a633553c71c2e774", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd", "patch": "@@ -2440,23 +2440,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.cause(span, ObligationCauseCode::MiscObligation)\n     }\n \n-    /// Resolves type variables in `ty` if possible. Unlike the infcx\n+    /// Resolves type and const variables in `ty` if possible. Unlike the infcx\n     /// version (resolve_vars_if_possible), this version will\n     /// also select obligations if it seems useful, in an effort\n     /// to get more type information.\n-    fn resolve_type_vars_with_obligations(&self, mut ty: Ty<'tcx>) -> Ty<'tcx> {\n-        debug!(\"resolve_type_vars_with_obligations(ty={:?})\", ty);\n+    fn resolve_vars_with_obligations(&self, mut ty: Ty<'tcx>) -> Ty<'tcx> {\n+        debug!(\"resolve_vars_with_obligations(ty={:?})\", ty);\n \n         // No Infer()? Nothing needs doing.\n         if !ty.has_infer_types() && !ty.has_infer_consts() {\n-            debug!(\"resolve_type_vars_with_obligations: ty={:?}\", ty);\n+            debug!(\"resolve_vars_with_obligations: ty={:?}\", ty);\n             return ty;\n         }\n \n         // If `ty` is a type variable, see whether we already know what it is.\n         ty = self.resolve_vars_if_possible(&ty);\n         if !ty.has_infer_types() && !ty.has_infer_consts()  {\n-            debug!(\"resolve_type_vars_with_obligations: ty={:?}\", ty);\n+            debug!(\"resolve_vars_with_obligations: ty={:?}\", ty);\n             return ty;\n         }\n \n@@ -2467,7 +2467,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.select_obligations_where_possible(false, |_| {});\n         ty = self.resolve_vars_if_possible(&ty);\n \n-        debug!(\"resolve_type_vars_with_obligations: ty={:?}\", ty);\n+        debug!(\"resolve_vars_with_obligations: ty={:?}\", ty);\n         ty\n     }\n \n@@ -3668,7 +3668,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                            formal_ret: Ty<'tcx>,\n                                            formal_args: &[Ty<'tcx>])\n                                            -> Vec<Ty<'tcx>> {\n-        let formal_ret = self.resolve_type_vars_with_obligations(formal_ret);\n+        let formal_ret = self.resolve_vars_with_obligations(formal_ret);\n         let ret_ty = match expected_ret.only_has_type(self) {\n             Some(ret) => ret,\n             None => return Vec::new()\n@@ -4517,7 +4517,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 err.span_suggestion(\n                     span,\n                     \"try adding a return type\",\n-                    format!(\"-> {} \", self.resolve_type_vars_with_obligations(found)),\n+                    format!(\"-> {} \", self.resolve_vars_with_obligations(found)),\n                     Applicability::MachineApplicable);\n                 true\n             }\n@@ -4993,7 +4993,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     // If no resolution is possible, then an error is reported.\n     // Numeric inference variables may be left unresolved.\n     pub fn structurally_resolved_type(&self, sp: Span, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        let ty = self.resolve_type_vars_with_obligations(ty);\n+        let ty = self.resolve_vars_with_obligations(ty);\n         if !ty.is_ty_var() {\n             ty\n         } else {"}, {"sha": "819c347d3ae95988008297ca12de1f10cd5e694e", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd", "patch": "@@ -179,7 +179,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.check_expr_with_needs(lhs_expr, Needs::MutPlace)\n             }\n         };\n-        let lhs_ty = self.resolve_type_vars_with_obligations(lhs_ty);\n+        let lhs_ty = self.resolve_vars_with_obligations(lhs_ty);\n \n         // N.B., as we have not yet type-checked the RHS, we don't have the\n         // type at hand. Make a variable to represent it. The whole reason\n@@ -196,7 +196,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // see `NB` above\n         let rhs_ty = self.check_expr_coercable_to_type(rhs_expr, rhs_ty_var);\n-        let rhs_ty = self.resolve_type_vars_with_obligations(rhs_ty);\n+        let rhs_ty = self.resolve_vars_with_obligations(rhs_ty);\n \n         let return_ty = match result {\n             Ok(method) => {"}, {"sha": "97c30f208f5ecb8fa8f2d40cdee2b977590563de", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=9cefcd3051ac7f4ea3c924bd7542c70c59ac5dfd", "patch": "@@ -251,7 +251,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         mut def_bm: BindingMode,\n     ) -> (Ty<'tcx>, BindingMode) {\n-        let mut expected = self.resolve_type_vars_with_obligations(&expected);\n+        let mut expected = self.resolve_vars_with_obligations(&expected);\n \n         // Peel off as many `&` or `&mut` from the scrutinee type as possible. For example,\n         // for `match &&&mut Some(5)` the loop runs three times, aborting when it reaches"}]}