{"sha": "0f46e4f1f23368f4615a9847671e3a91b2ebaf18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNDZlNGYxZjIzMzY4ZjQ2MTVhOTg0NzY3MWUzYTkxYjJlYmFmMTg=", "commit": {"author": {"name": "Ryan Prichard", "email": "ryan.prichard@gmail.com", "date": "2015-04-03T08:27:04Z"}, "committer": {"name": "Ryan Prichard", "email": "ryan.prichard@gmail.com", "date": "2015-04-11T23:00:58Z"}, "message": "Propagate macro backtraces more often, improve formatting diagnostics\n\n * In noop_fold_expr, call new_span in these cases:\n    - ExprMethodCall's identifier\n    - ExprField's identifier\n    - ExprTupField's integer\n\n   Calling new_span for ExprMethodCall's identifier is necessary to print\n   an acceptable diagnostic for write!(&2, \"\"). We see this error:\n\n       <std macros>:2:20: 2:66 error: type `&mut _` does not implement any method in scope named `write_fmt`\n       <std macros>:2 ( & mut * $ dst ) . write_fmt ( format_args ! ( $ ( $ arg ) * ) ) )\n                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n   With this change, we also see a macro expansion backtrace leading to\n   the write!(&2, \"\") call site.\n\n * After fully expanding a macro, we replace the expansion expression's\n   span with the original span. Call fld.new_span to add a backtrace to\n   this span. (Note that I'm call new_span after bt.pop(), so the macro\n   just expanded isn't on the backtrace.)\n\n   The motivating example for this change is println!(\"{}\"). The format\n   string literal is concat!($fmt, \"arg\") and is inside the libstd macro.\n   We need to see the backtrace to find the println! call site.\n\n * Add a backtrace to the format_args! format expression span.\n\nAddresses #23459", "tree": {"sha": "23795acb7872118fdbcce722b0448004d06be9cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23795acb7872118fdbcce722b0448004d06be9cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f46e4f1f23368f4615a9847671e3a91b2ebaf18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f46e4f1f23368f4615a9847671e3a91b2ebaf18", "html_url": "https://github.com/rust-lang/rust/commit/0f46e4f1f23368f4615a9847671e3a91b2ebaf18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f46e4f1f23368f4615a9847671e3a91b2ebaf18/comments", "author": {"login": "rprichard", "id": 1572855, "node_id": "MDQ6VXNlcjE1NzI4NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1572855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rprichard", "html_url": "https://github.com/rprichard", "followers_url": "https://api.github.com/users/rprichard/followers", "following_url": "https://api.github.com/users/rprichard/following{/other_user}", "gists_url": "https://api.github.com/users/rprichard/gists{/gist_id}", "starred_url": "https://api.github.com/users/rprichard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rprichard/subscriptions", "organizations_url": "https://api.github.com/users/rprichard/orgs", "repos_url": "https://api.github.com/users/rprichard/repos", "events_url": "https://api.github.com/users/rprichard/events{/privacy}", "received_events_url": "https://api.github.com/users/rprichard/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rprichard", "id": 1572855, "node_id": "MDQ6VXNlcjE1NzI4NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1572855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rprichard", "html_url": "https://github.com/rprichard", "followers_url": "https://api.github.com/users/rprichard/followers", "following_url": "https://api.github.com/users/rprichard/following{/other_user}", "gists_url": "https://api.github.com/users/rprichard/gists{/gist_id}", "starred_url": "https://api.github.com/users/rprichard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rprichard/subscriptions", "organizations_url": "https://api.github.com/users/rprichard/orgs", "repos_url": "https://api.github.com/users/rprichard/repos", "events_url": "https://api.github.com/users/rprichard/events{/privacy}", "received_events_url": "https://api.github.com/users/rprichard/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6790b0e51967b1487728d155e0800a1ed03a30d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6790b0e51967b1487728d155e0800a1ed03a30d3", "html_url": "https://github.com/rust-lang/rust/commit/6790b0e51967b1487728d155e0800a1ed03a30d3"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "b65798b8a4980f479456022b195e10543fcd4b84", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f46e4f1f23368f4615a9847671e3a91b2ebaf18/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f46e4f1f23368f4615a9847671e3a91b2ebaf18/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0f46e4f1f23368f4615a9847671e3a91b2ebaf18", "patch": "@@ -55,7 +55,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             fully_expanded.map(|e| ast::Expr {\n                 id: ast::DUMMY_NODE_ID,\n                 node: e.node,\n-                span: span,\n+                span: fld.new_span(span),\n             })\n         }\n "}, {"sha": "513bbf6c77b3576f140919df0b46f60b8299060c", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f46e4f1f23368f4615a9847671e3a91b2ebaf18/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f46e4f1f23368f4615a9847671e3a91b2ebaf18/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=0f46e4f1f23368f4615a9847671e3a91b2ebaf18", "patch": "@@ -17,6 +17,7 @@ use ext::base::*;\n use ext::base;\n use ext::build::AstBuilder;\n use fmt_macros as parse;\n+use fold::Folder;\n use parse::token::special_idents;\n use parse::token;\n use ptr::P;\n@@ -649,6 +650,10 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n                                     names: HashMap<String, P<ast::Expr>>)\n                                     -> P<ast::Expr> {\n     let arg_types: Vec<_> = (0..args.len()).map(|_| None).collect();\n+    // Expand the format literal so that efmt.span will have a backtrace. This\n+    // is essential for locating a bug when the format literal is generated in\n+    // a macro. (e.g. println!(\"{}\"), which uses concat!($fmt, \"\\n\")).\n+    let efmt = ecx.expander().fold_expr(efmt);\n     let mut cx = Context {\n         ecx: ecx,\n         args: args,\n@@ -663,9 +668,8 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n         pieces: Vec::new(),\n         str_pieces: Vec::new(),\n         all_pieces_simple: true,\n-        fmtsp: sp,\n+        fmtsp: efmt.span,\n     };\n-    cx.fmtsp = efmt.span;\n     let fmt = match expr_to_string(cx.ecx,\n                                    efmt,\n                                    \"format argument must be a string literal.\") {"}, {"sha": "d7033ce7e48a490af6dc69555dd4564a5e2c1643", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f46e4f1f23368f4615a9847671e3a91b2ebaf18/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f46e4f1f23368f4615a9847671e3a91b2ebaf18/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=0f46e4f1f23368f4615a9847671e3a91b2ebaf18", "patch": "@@ -1176,7 +1176,7 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n             }\n             ExprMethodCall(i, tps, args) => {\n                 ExprMethodCall(\n-                    respan(i.span, folder.fold_ident(i.node)),\n+                    respan(folder.new_span(i.span), folder.fold_ident(i.node)),\n                     tps.move_map(|x| folder.fold_ty(x)),\n                     args.move_map(|x| folder.fold_expr(x)))\n             }\n@@ -1246,11 +1246,13 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n             }\n             ExprField(el, ident) => {\n                 ExprField(folder.fold_expr(el),\n-                          respan(ident.span, folder.fold_ident(ident.node)))\n+                          respan(folder.new_span(ident.span),\n+                                 folder.fold_ident(ident.node)))\n             }\n             ExprTupField(el, ident) => {\n                 ExprTupField(folder.fold_expr(el),\n-                             respan(ident.span, folder.fold_usize(ident.node)))\n+                             respan(folder.new_span(ident.span),\n+                                    folder.fold_usize(ident.node)))\n             }\n             ExprIndex(el, er) => {\n                 ExprIndex(folder.fold_expr(el), folder.fold_expr(er))"}]}