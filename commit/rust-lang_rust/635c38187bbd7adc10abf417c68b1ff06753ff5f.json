{"sha": "635c38187bbd7adc10abf417c68b1ff06753ff5f", "node_id": "C_kwDOAAsO6NoAKDYzNWMzODE4N2JiZDdhZGMxMGFiZjQxN2M2OGIxZmYwNjc1M2ZmNWY", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-07-15T01:41:12Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-07-15T18:04:45Z"}, "message": "Avoid incorrect suggestion\n\nWe check that there's a single level of block nesting to ensure always\ncorrect suggestions. If we don't, then we only provide a free-form\nmessage to avoid misleading users in cases like\n`src/test/ui/nll/borrowed-temporary-error.rs`.\n\nWe could expand the analysis to suggest hoising all of the relevant\nparts of the users' code to make the code compile, but that could be\ntoo much.", "tree": {"sha": "b771d8cac34741ac5c2afeeb5744151aee80af15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b771d8cac34741ac5c2afeeb5744151aee80af15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/635c38187bbd7adc10abf417c68b1ff06753ff5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/635c38187bbd7adc10abf417c68b1ff06753ff5f", "html_url": "https://github.com/rust-lang/rust/commit/635c38187bbd7adc10abf417c68b1ff06753ff5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/635c38187bbd7adc10abf417c68b1ff06753ff5f/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20b5aaf11103d65752adafe549be1acecfa9acdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/20b5aaf11103d65752adafe549be1acecfa9acdd", "html_url": "https://github.com/rust-lang/rust/commit/20b5aaf11103d65752adafe549be1acecfa9acdd"}], "stats": {"total": 63, "additions": 42, "deletions": 21}, "files": [{"sha": "c4eed784b88ac39a6884b892116128805ff092f0", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/635c38187bbd7adc10abf417c68b1ff06753ff5f/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/635c38187bbd7adc10abf417c68b1ff06753ff5f/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=635c38187bbd7adc10abf417c68b1ff06753ff5f", "patch": "@@ -1503,15 +1503,49 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 let sm = self.infcx.tcx.sess.source_map();\n                 let mut suggested = false;\n                 let msg = \"consider using a `let` binding to create a longer lived value\";\n-                if let Some(scope) =\n-                    self.body.source_scopes.get(self.body.source_info(location).scope)\n+\n+                use rustc_hir::intravisit::Visitor;\n+\n+                /// We check that there's a single level of block nesting to ensure always correct\n+                /// suggestions. If we don't, then we only provide a free-form message to avoid\n+                /// misleading users in cases like `src/test/ui/nll/borrowed-temporary-error.rs`.\n+                /// We could expand the analysis to suggest hoising all of the relevant parts of\n+                /// the users' code to make the code compile, but that could be too much.\n+                struct NestedStatementVisitor {\n+                    span: Span,\n+                    current: usize,\n+                    found: usize,\n+                }\n+\n+                impl<'tcx> Visitor<'tcx> for NestedStatementVisitor {\n+                    fn visit_block(&mut self, block: &hir::Block<'tcx>) {\n+                        self.current += 1;\n+                        rustc_hir::intravisit::walk_block(self, block);\n+                        self.current -= 1;\n+                    }\n+                    fn visit_expr(&mut self, expr: &hir::Expr<'tcx>) {\n+                        if self.span == expr.span {\n+                            self.found = self.current;\n+                        }\n+                        rustc_hir::intravisit::walk_expr(self, expr);\n+                    }\n+                }\n+                let source_info = self.body.source_info(location);\n+                if let Some(scope) = self.body.source_scopes.get(source_info.scope)\n                     && let ClearCrossCrate::Set(scope_data) = &scope.local_data\n                     && let Some(node) = self.infcx.tcx.hir().find(scope_data.lint_root)\n                     && let Some(id) = node.body_id()\n                     && let hir::ExprKind::Block(block, _) = self.infcx.tcx.hir().body(id).value.kind\n                 {\n                     for stmt in block.stmts {\n-                        if stmt.span.contains(proper_span)\n+                        let mut visitor = NestedStatementVisitor {\n+                            span: proper_span,\n+                            current: 0,\n+                            found: 0,\n+                        };\n+                        visitor.visit_stmt(stmt);\n+                        if visitor.found == 0\n+                            && stmt.span.contains(proper_span)\n                             && let Some(p) = sm.span_to_margin(stmt.span)\n                             && let Ok(s) = sm.span_to_snippet(proper_span)\n                         {"}, {"sha": "2c6bd92641f608c7e7947ef2d410de46deb4f6ce", "filename": "src/test/ui/nll/borrowed-temporary-error.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/635c38187bbd7adc10abf417c68b1ff06753ff5f/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/635c38187bbd7adc10abf417c68b1ff06753ff5f/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr?ref=635c38187bbd7adc10abf417c68b1ff06753ff5f", "patch": "@@ -9,13 +9,7 @@ LL |     });\n LL |     println!(\"{:?}\", x);\n    |                      - borrow later used here\n    |\n-help: consider using a `let` binding to create a longer lived value\n-   |\n-LL ~     let binding = (v,);\n-LL ~     let x = gimme({\n-LL |         let v = 22;\n-LL ~         &binding\n-   |\n+   = note: consider using a `let` binding to create a longer lived value\n \n error: aborting due to previous error\n "}, {"sha": "6240f103c99b062a9b60bce70c161ef94efe65a8", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/635c38187bbd7adc10abf417c68b1ff06753ff5f/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/635c38187bbd7adc10abf417c68b1ff06753ff5f/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs?ref=635c38187bbd7adc10abf417c68b1ff06753ff5f", "patch": "@@ -22,14 +22,15 @@ fn f() {\n     //~| NOTE temporary value is freed at the end of this statement\n     //~| HELP consider using a `let` binding to create a longer lived value\n \n-    { //~ HELP consider using a `let` binding to create a longer lived value\n+    {\n \n         let mut v4 = Vec::new(); // (sub) statement 0\n \n         v4.push(&id('y'));\n         //~^ ERROR temporary value dropped while borrowed\n         //~| NOTE creates a temporary which is freed while still in use\n         //~| NOTE temporary value is freed at the end of this statement\n+        //~| NOTE consider using a `let` binding to create a longer lived value\n         v4.use_ref();\n         //~^ NOTE borrow later used here\n     }                       // (statement 7)"}, {"sha": "a236dab3ae562ef96a19c2c7423c0a9169835dbb", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/635c38187bbd7adc10abf417c68b1ff06753ff5f/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/635c38187bbd7adc10abf417c68b1ff06753ff5f/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr?ref=635c38187bbd7adc10abf417c68b1ff06753ff5f", "patch": "@@ -38,18 +38,10 @@ LL |         v4.push(&id('y'));\n LL |         v4.use_ref();\n    |         ------------ borrow later used here\n    |\n-help: consider using a `let` binding to create a longer lived value\n-   |\n-LL ~     let binding = id('y');\n-LL ~     {\n-LL | \n-LL |         let mut v4 = Vec::new(); // (sub) statement 0\n-LL | \n-LL ~         v4.push(&binding);\n-   |\n+   = note: consider using a `let` binding to create a longer lived value\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/borrowck-let-suggestion-suffixes.rs:39:14\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:40:14\n    |\n LL |     v5.push(&id('z'));\n    |              ^^^^^^^ - temporary value is freed at the end of this statement"}]}