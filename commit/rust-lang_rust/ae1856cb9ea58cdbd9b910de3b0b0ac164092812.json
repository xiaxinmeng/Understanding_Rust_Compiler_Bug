{"sha": "ae1856cb9ea58cdbd9b910de3b0b0ac164092812", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMTg1NmNiOWVhNThjZGJkOWI5MTBkZTNiMGIwYWMxNjQwOTI4MTI=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-07-21T03:54:01Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-07-28T13:47:55Z"}, "message": "Update rename State in docs", "tree": {"sha": "ac68dccd2e6c5e3701d3861d8a45b92ed042e894", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac68dccd2e6c5e3701d3861d8a45b92ed042e894"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae1856cb9ea58cdbd9b910de3b0b0ac164092812", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae1856cb9ea58cdbd9b910de3b0b0ac164092812", "html_url": "https://github.com/rust-lang/rust/commit/ae1856cb9ea58cdbd9b910de3b0b0ac164092812", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae1856cb9ea58cdbd9b910de3b0b0ac164092812/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93b9b1a2b1efa6ae0ab907ab3d1199400d8a077f", "url": "https://api.github.com/repos/rust-lang/rust/commits/93b9b1a2b1efa6ae0ab907ab3d1199400d8a077f", "html_url": "https://github.com/rust-lang/rust/commit/93b9b1a2b1efa6ae0ab907ab3d1199400d8a077f"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "3b7b77e2c3ed81a4339cb8669103523c0885c154", "filename": "src/doc/unstable-book/src/language-features/generators.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ae1856cb9ea58cdbd9b910de3b0b0ac164092812/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md", "raw_url": "https://github.com/rust-lang/rust/raw/ae1856cb9ea58cdbd9b910de3b0b0ac164092812/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md?ref=ae1856cb9ea58cdbd9b910de3b0b0ac164092812", "patch": "@@ -28,7 +28,7 @@ A syntactical example of a generator is:\n ```rust\n #![feature(generators, generator_trait)]\n \n-use std::ops::{Generator, State};\n+use std::ops::{Generator, GeneratorState};\n \n fn main() {\n     let mut generator = || {\n@@ -37,11 +37,11 @@ fn main() {\n     };\n \n     match generator.resume() {\n-        State::Yielded(1) => {}\n+        GeneratorState::Yielded(1) => {}\n         _ => panic!(\"unexpected value from resume\"),\n     }\n     match generator.resume() {\n-        State::Complete(\"foo\") => {}\n+        GeneratorState::Complete(\"foo\") => {}\n         _ => panic!(\"unexpected value from resume\"),\n     }\n }\n@@ -87,12 +87,12 @@ The `Generator` trait in `std::ops` currently looks like:\n \n ```\n # #![feature(generator_trait)]\n-# use std::ops::State;\n+# use std::ops::GeneratorState;\n \n pub trait Generator {\n     type Yield;\n     type Return;\n-    fn resume(&mut self) -> State<Self::Yield, Self::Return>;\n+    fn resume(&mut self) -> GeneratorState<Self::Yield, Self::Return>;\n }\n ```\n \n@@ -102,10 +102,10 @@ generator. This is typically the last expression in a generator's definition or\n any value passed to `return` in a generator. The `resume` function is the entry\n point for executing the `Generator` itself.\n \n-The return value of `resume`, `State`, looks like:\n+The return value of `resume`, `GeneratorState`, looks like:\n \n ```\n-pub enum State<Y, R> {\n+pub enum GeneratorState<Y, R> {\n     Yielded(Y),\n     Complete(R),\n }\n@@ -185,7 +185,7 @@ This generator literal will compile down to something similar to:\n ```rust\n #![feature(generators, generator_trait)]\n \n-use std::ops::{Generator, State};\n+use std::ops::{Generator, GeneratorState};\n \n fn main() {\n     let ret = \"foo\";\n@@ -200,17 +200,17 @@ fn main() {\n             type Yield = i32;\n             type Return = &'static str;\n \n-            fn resume(&mut self) -> State<i32, &'static str> {\n+            fn resume(&mut self) -> GeneratorState<i32, &'static str> {\n                 use std::mem;\n                 match mem::replace(self, __Generator::Done) {\n                     __Generator::Start(s) => {\n                         *self = __Generator::Yield1(s);\n-                        State::Yielded(1)\n+                        GeneratorState::Yielded(1)\n                     }\n \n                     __Generator::Yield1(s) => {\n                         *self = __Generator::Done;\n-                        State::Complete(s)\n+                        GeneratorState::Complete(s)\n                     }\n \n                     __Generator::Done => {"}]}