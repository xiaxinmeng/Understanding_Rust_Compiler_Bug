{"sha": "6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmODI5ODQwZjdlNTg5Nzc0NWJjN2I1ZmY5NTFiMDA2YTJjNGUwZTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-14T22:02:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-14T22:02:59Z"}, "message": "Auto merge of #67224 - nikomatsakis:revert-stabilization-of-never-type, r=centril\n\nRevert stabilization of never type\n\nFixes https://github.com/rust-lang/rust/issues/66757\n\nI decided to keep the separate `never-type-fallback` feature gate, but tried to otherwise revert https://github.com/rust-lang/rust/pull/65355. Seemed pretty clean.\n\n( cc @Centril, author of #65355, you may want to check this over briefly )", "tree": {"sha": "0c73bcad1ba6245af90566e58a69def359b598cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c73bcad1ba6245af90566e58a69def359b598cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "html_url": "https://github.com/rust-lang/rust/commit/6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8ea4ace9213ae045123fdfeb59d1ac887656d31", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8ea4ace9213ae045123fdfeb59d1ac887656d31", "html_url": "https://github.com/rust-lang/rust/commit/c8ea4ace9213ae045123fdfeb59d1ac887656d31"}, {"sha": "775076ff4dc9ce4986a1286669cfa268b01ac592", "url": "https://api.github.com/repos/rust-lang/rust/commits/775076ff4dc9ce4986a1286669cfa268b01ac592", "html_url": "https://github.com/rust-lang/rust/commit/775076ff4dc9ce4986a1286669cfa268b01ac592"}], "stats": {"total": 610, "additions": 451, "deletions": 159}, "files": [{"sha": "d8dfe1b005c03584cd7adc4bfb72b005e7e84744", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1 +1 @@\n-Subproject commit 9e843aeb4df083522c7277179bbaa25d0507731c\n+Subproject commit d8dfe1b005c03584cd7adc4bfb72b005e7e84744"}, {"sha": "18f808638deac783c6291e8b35c089a18b6c86c7", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -195,7 +195,7 @@ mod impls {\n         bool char\n     }\n \n-    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl Clone for ! {\n         #[inline]\n         fn clone(&self) -> Self {"}, {"sha": "4aa52a7a390e3373f01de95e90fe8fd691199a12", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1141,24 +1141,24 @@ mod impls {\n \n     ord_impl! { char usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl PartialEq for ! {\n         fn eq(&self, _: &!) -> bool {\n             *self\n         }\n     }\n \n-    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl Eq for ! {}\n \n-    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl PartialOrd for ! {\n         fn partial_cmp(&self, _: &!) -> Option<Ordering> {\n             *self\n         }\n     }\n \n-    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl Ord for ! {\n         fn cmp(&self, _: &!) -> Ordering {\n             *self"}, {"sha": "e5599f1dd373b0f8b8c039d9c0e04de7f8b1ac88", "filename": "src/libcore/convert/mod.rs", "status": "modified", "additions": 88, "deletions": 7, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibcore%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibcore%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert%2Fmod.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -40,6 +40,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use crate::fmt;\n+\n mod num;\n \n #[unstable(feature = \"convert_float_to_int\", issue = \"67057\")]\n@@ -430,7 +432,9 @@ pub trait TryInto<T>: Sized {\n /// - `TryFrom<T> for U` implies [`TryInto`]`<U> for T`\n /// - [`try_from`] is reflexive, which means that `TryFrom<T> for T`\n /// is implemented and cannot fail -- the associated `Error` type for\n-/// calling `T::try_from()` on a value of type `T` is [`!`].\n+/// calling `T::try_from()` on a value of type `T` is [`Infallible`].\n+/// When the [`!`] type is stabilized [`Infallible`] and [`!`] will be\n+/// equivalent.\n ///\n /// `TryFrom<T>` can be implemented as follows:\n ///\n@@ -479,6 +483,7 @@ pub trait TryInto<T>: Sized {\n /// [`TryInto`]: trait.TryInto.html\n /// [`i32::MAX`]: ../../std/i32/constant.MAX.html\n /// [`!`]: ../../std/primitive.never.html\n+/// [`Infallible`]: enum.Infallible.html\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub trait TryFrom<T>: Sized {\n     /// The type returned in the event of a conversion error.\n@@ -634,9 +639,9 @@ impl AsRef<str> for str {\n // THE NO-ERROR ERROR TYPE\n ////////////////////////////////////////////////////////////////////////////////\n \n-/// A type alias for [the `!` \u201cnever\u201d type][never].\n+/// The error type for errors that can never happen.\n ///\n-/// `Infallible` represents types of errors that can never happen since `!` has no valid values.\n+/// Since this enum has no variant, a value of this type can never actually exist.\n /// This can be useful for generic APIs that use [`Result`] and parameterize the error type,\n /// to indicate that the result is always [`Ok`].\n ///\n@@ -653,15 +658,91 @@ impl AsRef<str> for str {\n /// }\n /// ```\n ///\n-/// # Eventual deprecation\n+/// # Future compatibility\n+///\n+/// This enum has the same role as [the `!` \u201cnever\u201d type][never],\n+/// which is unstable in this version of Rust.\n+/// When `!` is stabilized, we plan to make `Infallible` a type alias to it:\n+///\n+/// ```ignore (illustrates future std change)\n+/// pub type Infallible = !;\n+/// ```\n+///\n+/// \u2026 and eventually deprecate `Infallible`.\n+///\n+///\n+/// However there is one case where `!` syntax can be used\n+/// before `!` is stabilized as a full-fleged type: in the position of a function\u2019s return type.\n+/// Specifically, it is possible implementations for two different function pointer types:\n+///\n+/// ```\n+/// trait MyTrait {}\n+/// impl MyTrait for fn() -> ! {}\n+/// impl MyTrait for fn() -> std::convert::Infallible {}\n+/// ```\n ///\n-/// Previously, `Infallible` was defined as `enum Infallible {}`.\n-/// Now that it is merely a type alias to `!`, we will eventually deprecate `Infallible`.\n+/// With `Infallible` being an enum, this code is valid.\n+/// However when `Infallible` becomes an alias for the never type,\n+/// the two `impl`s will start to overlap\n+/// and therefore will be disallowed by the language\u2019s trait coherence rules.\n ///\n /// [`Ok`]: ../result/enum.Result.html#variant.Ok\n /// [`Result`]: ../result/enum.Result.html\n /// [`TryFrom`]: trait.TryFrom.html\n /// [`Into`]: trait.Into.html\n /// [never]: ../../std/primitive.never.html\n #[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n-pub type Infallible = !;\n+#[derive(Copy)]\n+pub enum Infallible {}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl Clone for Infallible {\n+    fn clone(&self) -> Infallible {\n+        match *self {}\n+    }\n+}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl fmt::Debug for Infallible {\n+    fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match *self {}\n+    }\n+}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl fmt::Display for Infallible {\n+    fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match *self {}\n+    }\n+}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl PartialEq for Infallible {\n+    fn eq(&self, _: &Infallible) -> bool {\n+        match *self {}\n+    }\n+}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl Eq for Infallible {}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl PartialOrd for Infallible {\n+    fn partial_cmp(&self, _other: &Self) -> Option<crate::cmp::Ordering> {\n+        match *self {}\n+    }\n+}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl Ord for Infallible {\n+    fn cmp(&self, _other: &Self) -> crate::cmp::Ordering {\n+        match *self {}\n+    }\n+}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl From<!> for Infallible {\n+    fn from(x: !) -> Self {\n+        x\n+    }\n+}"}, {"sha": "223f91d909b3424c2420ca91eb4dcb3a56c48f76", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1940,14 +1940,14 @@ macro_rules! fmt_refs {\n \n fmt_refs! { Debug, Display, Octal, Binary, LowerHex, UpperHex, LowerExp, UpperExp }\n \n-#[stable(feature = \"never_type\", since = \"1.41.0\")]\n+#[unstable(feature = \"never_type\", issue = \"35121\")]\n impl Debug for ! {\n     fn fmt(&self, _: &mut Formatter<'_>) -> Result {\n         *self\n     }\n }\n \n-#[stable(feature = \"never_type\", since = \"1.41.0\")]\n+#[unstable(feature = \"never_type\", issue = \"35121\")]\n impl Display for ! {\n     fn fmt(&self, _: &mut Formatter<'_>) -> Result {\n         *self"}, {"sha": "7fe4f7e41a8d9b45ecd76d2f2d574c0f88e63bda", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -87,7 +87,7 @@\n #![feature(iter_once_with)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n-#![cfg_attr(bootstrap, feature(never_type))]\n+#![feature(never_type)]\n #![feature(nll)]\n #![feature(exhaustive_patterns)]\n #![feature(no_core)]"}, {"sha": "2db55508ad546087e58239d9f3ca55b4ad179b9c", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -776,7 +776,7 @@ mod copy_impls {\n         bool char\n     }\n \n-    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl Copy for ! {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "88c14dfe7d1f82494e2f88f84abec3ba6da11419", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -4,6 +4,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use crate::convert::Infallible;\n use crate::fmt;\n use crate::intrinsics;\n use crate::mem;\n@@ -5032,8 +5033,18 @@ impl fmt::Display for TryFromIntError {\n }\n \n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n+impl From<Infallible> for TryFromIntError {\n+    fn from(x: Infallible) -> TryFromIntError {\n+        match x {}\n+    }\n+}\n+\n+#[unstable(feature = \"never_type\", issue = \"35121\")]\n impl From<!> for TryFromIntError {\n     fn from(never: !) -> TryFromIntError {\n+        // Match rather than coerce to make sure that code like\n+        // `From<Infallible> for TryFromIntError` above will keep working\n+        // when `Infallible` becomes an alias to `!`.\n         match never {}\n     }\n }"}, {"sha": "641e6a4f6148914ed19d2906a5b46d107c9d5618", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -37,7 +37,7 @@\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n #![cfg_attr(windows, feature(libc))]\n-#![cfg_attr(bootstrap, feature(never_type))]\n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(overlapping_marker_traits)]\n #![feature(extern_types)]"}, {"sha": "fb2099e71a31a136597f853f93f18dba1d50bdd0", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -8,7 +8,7 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n-#![cfg_attr(bootstrap, feature(never_type))]\n+#![feature(never_type)]\n #![feature(nll)]\n #![feature(in_band_lifetimes)]\n "}, {"sha": "9bd321e5f82d62401f509fc05826204f2ac0811a", "filename": "src/librustc_error_codes/error_codes/E0725.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0725.md", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0725.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0725.md?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -4,8 +4,8 @@ command line flags.\n Erroneous code example:\n \n ```ignore (can't specify compiler flags from doctests)\n-#![feature(specialization)] // error: the feature `specialization` is not in\n-                            // the list of allowed features\n+#![feature(never_type)] // error: the feature `never_type` is not in\n+                        // the list of allowed features\n ```\n \n Delete the offending feature attribute, or add it to the list of allowed"}, {"sha": "3f294dc02ed6f6cbcac0fddd729dac8f61c5f49d", "filename": "src/librustc_feature/accepted.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibrustc_feature%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibrustc_feature%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Faccepted.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -253,8 +253,6 @@ declare_features! (\n     (accepted, const_constructor, \"1.40.0\", Some(61456), None),\n     /// Allows the use of `#[cfg(doctest)]`, set when rustdoc is collecting doctests.\n     (accepted, cfg_doctest, \"1.40.0\", Some(62210), None),\n-    /// Allows the `!` type. Does not imply 'exhaustive_patterns' any more.\n-    (accepted, never_type, \"1.41.0\", Some(35121), None),\n     /// Allows relaxing the coherence rules such that\n     /// `impl<T> ForeignTrait<LocalType> for ForeignType<T>` is permitted.\n     (accepted, re_rebalance_coherence, \"1.41.0\", Some(55437), None),"}, {"sha": "1e3413b32f03e9af4e4c9f30f1b2a0d4ab0ecf19", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -303,6 +303,9 @@ declare_features! (\n     /// Allows `X..Y` patterns.\n     (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n \n+    /// Allows the `!` type. Does not imply 'exhaustive_patterns' (below) any more.\n+    (active, never_type, \"1.13.0\", Some(35121), None),\n+\n     /// Allows exhaustive pattern matching on types that contain uninhabited types.\n     (active, exhaustive_patterns, \"1.13.0\", Some(51085), None),\n "}, {"sha": "f6b3c5b8e5e821bb754d261119e3ce1f5f30754c", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -18,7 +18,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(drain_filter)]\n #![feature(exhaustive_patterns)]\n #![feature(iter_order_by)]\n-#![cfg_attr(bootstrap, feature(never_type))]\n+#![feature(never_type)]\n #![feature(specialization)]\n #![feature(try_trait)]\n #![feature(unicode_internals)]"}, {"sha": "c6c9703e92c92350a79c09b03f01e427a56fa952", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -67,7 +67,7 @@ This API is completely unstable and subject to change.\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(slice_patterns)]\n-#![cfg_attr(bootstrap, feature(never_type))]\n+#![feature(never_type)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "11d50cb7ce628bffcaabed5d0a8e9d9b60e7b043", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -14,7 +14,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(const_fn)]\n #![feature(drain_filter)]\n-#![cfg_attr(bootstrap, feature(never_type))]\n+#![feature(never_type)]\n #![feature(unicode_internals)]\n \n #![recursion_limit=\"256\"]"}, {"sha": "e45d56c320cd800bf30605b4e4ac08cfec884ff3", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -11,7 +11,7 @@ Core encoding and decoding interfaces.\n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n #![feature(specialization)]\n-#![cfg_attr(bootstrap, feature(never_type))]\n+#![feature(never_type)]\n #![feature(nll)]\n #![feature(associated_type_bounds)]\n #![cfg_attr(test, feature(test))]"}, {"sha": "d4c4cb9c3b997f40773c76af7ec5f971fe200fdf", "filename": "src/libstd/error.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -465,7 +465,7 @@ impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n     }\n }\n \n-#[stable(feature = \"never_type\", since = \"1.41.0\")]\n+#[unstable(feature = \"never_type\", issue = \"35121\")]\n impl Error for ! {\n     fn description(&self) -> &str { *self }\n }\n@@ -551,6 +551,13 @@ impl Error for string::FromUtf16Error {\n     }\n }\n \n+#[stable(feature = \"str_parse_error2\", since = \"1.8.0\")]\n+impl Error for string::ParseError {\n+    fn description(&self) -> &str {\n+        match *self {}\n+    }\n+}\n+\n #[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n impl Error for char::DecodeUtf16Error {\n     fn description(&self) -> &str {"}, {"sha": "de33a2cb2146117c42d77677928deee7d248bab4", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -281,7 +281,7 @@\n #![feature(maybe_uninit_ref)]\n #![feature(maybe_uninit_slice)]\n #![feature(needs_panic_runtime)]\n-#![cfg_attr(bootstrap, feature(never_type))]\n+#![feature(never_type)]\n #![feature(nll)]\n #![cfg_attr(bootstrap, feature(on_unimplemented))]\n #![feature(optin_builtin_traits)]"}, {"sha": "a72951c03461083a4bae1960c0b6cef616c198c9", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -71,6 +71,7 @@ mod prim_bool { }\n /// write:\n ///\n /// ```\n+/// #![feature(never_type)]\n /// # fn foo() -> u32 {\n /// let x: ! = {\n ///     return 123\n@@ -200,6 +201,7 @@ mod prim_bool { }\n /// for example:\n ///\n /// ```\n+/// #![feature(never_type)]\n /// # use std::fmt;\n /// # trait Debug {\n /// # fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result;\n@@ -237,7 +239,7 @@ mod prim_bool { }\n /// [`Default`]: default/trait.Default.html\n /// [`default()`]: default/trait.Default.html#tymethod.default\n ///\n-#[stable(feature = \"never_type\", since = \"1.41.0\")]\n+#[unstable(feature = \"never_type\", issue = \"35121\")]\n mod prim_never { }\n \n #[doc(primitive = \"char\")]"}, {"sha": "99d89183e5b0d19c8262e36b840d1f3c123cc343", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -464,11 +464,25 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::TyKind::BareFn(ref bare_fn_ty) => {\n                 self.check_extern(bare_fn_ty.ext);\n             }\n+            ast::TyKind::Never => {\n+                gate_feature_post!(&self, never_type, ty.span,\n+                                   \"The `!` type is experimental\");\n+            }\n             _ => {}\n         }\n         visit::walk_ty(self, ty)\n     }\n \n+    fn visit_fn_ret_ty(&mut self, ret_ty: &'a ast::FunctionRetTy) {\n+        if let ast::FunctionRetTy::Ty(ref output_ty) = *ret_ty {\n+            if let ast::TyKind::Never = output_ty.kind {\n+                // Do nothing.\n+            } else {\n+                self.visit_ty(output_ty)\n+            }\n+        }\n+    }\n+\n     fn visit_expr(&mut self, e: &'a ast::Expr) {\n         match e.kind {\n             ast::ExprKind::Box(_) => {\n@@ -499,6 +513,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         visit::walk_expr(self, e)\n     }\n \n+    fn visit_arm(&mut self, arm: &'a ast::Arm) {\n+        visit::walk_arm(self, arm)\n+    }\n+\n     fn visit_pat(&mut self, pattern: &'a ast::Pat) {\n         match &pattern.kind {\n             PatKind::Slice(pats) => {"}, {"sha": "0f17976ef49653f872c87009ca6518c3d41dccf9", "filename": "src/test/codegen/enum-debug-niche-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -12,6 +12,8 @@\n // CHECK: {{.*}}DIDerivedType{{.*}}tag: DW_TAG_member,{{.*}}name: \"Placeholder\",{{.*}}extraData: i64 4294967295{{[,)].*}}\n // CHECK: {{.*}}DIDerivedType{{.*}}tag: DW_TAG_member,{{.*}}name: \"Error\",{{.*}}extraData: i64 0{{[,)].*}}\n \n+#![feature(never_type)]\n+\n #[derive(Copy, Clone)]\n pub struct Entity {\n     private: std::num::NonZeroU32,"}, {"sha": "04394dcdf1334aac63acb276673a928700c05b3b", "filename": "src/test/mir-opt/retain-never-const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fmir-opt%2Fretain-never-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fmir-opt%2Fretain-never-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretain-never-const.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -5,6 +5,7 @@\n // compile-flags: --emit mir,link\n \n #![feature(const_panic)]\n+#![feature(never_type)]\n \n struct PrintName<T>(T);\n "}, {"sha": "904a9c43c1bccc7487b2053c017ae88369f731e1", "filename": "src/test/mir-opt/uninhabited-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fmir-opt%2Funinhabited-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fmir-opt%2Funinhabited-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited-enum.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,3 +1,5 @@\n+#![feature(never_type)]\n+\n pub enum Void {}\n \n #[no_mangle]"}, {"sha": "4271ffb7b1b4dcb94e9781052af844f70c4c9467", "filename": "src/test/ui/binding/empty-types-in-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fbinding%2Fempty-types-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fbinding%2Fempty-types-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fempty-types-in-patterns.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(never_type_fallback)]\n+#![feature(never_type, never_type_fallback)]\n #![feature(exhaustive_patterns)]\n #![feature(slice_patterns)]\n #![allow(unreachable_patterns)]"}, {"sha": "4f30ea1467023a0e0f38d8de88228b4ff6486ab7", "filename": "src/test/ui/borrowck/assign-never-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fborrowck%2Fassign-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fborrowck%2Fassign-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fassign-never-type.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -2,6 +2,8 @@\n \n // check-pass\n \n+#![feature(never_type)]\n+\n pub fn main() {\n     loop {\n         match None {"}, {"sha": "6064e6ab00235f368f4003c2217c293a04c1c481", "filename": "src/test/ui/break-while-condition.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fbreak-while-condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fbreak-while-condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-while-condition.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,3 +1,5 @@\n+#![feature(never_type)]\n+\n fn main() {\n     // The `if false` expressions are simply to\n     // make sure we don't avoid checking everything"}, {"sha": "6960c4fd8673537f30dd5ffe960a25034a5ea4a4", "filename": "src/test/ui/break-while-condition.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-while-condition.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/break-while-condition.rs:7:20\n+  --> $DIR/break-while-condition.rs:9:20\n    |\n LL |           let _: ! = {\n    |  ____________________^\n@@ -11,7 +11,7 @@ LL | |         };\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/break-while-condition.rs:14:13\n+  --> $DIR/break-while-condition.rs:16:13\n    |\n LL | /             while false {\n LL | |                 break\n@@ -22,7 +22,7 @@ LL | |             }\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/break-while-condition.rs:22:13\n+  --> $DIR/break-while-condition.rs:24:13\n    |\n LL | /             while false {\n LL | |                 return"}, {"sha": "0824ce8cd585b68061e13cdddf16e64a302ff048", "filename": "src/test/ui/coercion/coerce-issue-49593-box-never.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(never_type_fallback)]\n+#![feature(never_type, never_type_fallback)]\n #![allow(unreachable_code)]\n \n use std::error::Error;"}, {"sha": "8ef1948084654d9dfa435b43a99d80c91a280e2e", "filename": "src/test/ui/coercion/coerce-to-bang-cast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,3 +1,5 @@\n+#![feature(never_type)]\n+\n fn foo(x: usize, y: !, z: usize) { }\n \n fn cast_a() {"}, {"sha": "ff30ebc09c63acf5b43aee6dadee8f8c63160660", "filename": "src/test/ui/coercion/coerce-to-bang-cast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,13 +1,13 @@\n error[E0605]: non-primitive cast: `i32` as `!`\n-  --> $DIR/coerce-to-bang-cast.rs:4:13\n+  --> $DIR/coerce-to-bang-cast.rs:6:13\n    |\n LL |     let y = {return; 22} as !;\n    |             ^^^^^^^^^^^^^^^^^\n    |\n    = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n \n error[E0605]: non-primitive cast: `i32` as `!`\n-  --> $DIR/coerce-to-bang-cast.rs:9:13\n+  --> $DIR/coerce-to-bang-cast.rs:11:13\n    |\n LL |     let y = 22 as !;\n    |             ^^^^^^^"}, {"sha": "1e06934d09f9ee779000dc59966d4c040108860d", "filename": "src/test/ui/coercion/coerce-to-bang.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,3 +1,5 @@\n+#![feature(never_type)]\n+\n fn foo(x: usize, y: !, z: usize) { }\n \n fn call_foo_a() {"}, {"sha": "390aa7c692d1860829d15cf95521858fb82b7b77", "filename": "src/test/ui/coercion/coerce-to-bang.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:4:17\n+  --> $DIR/coerce-to-bang.rs:6:17\n    |\n LL |     foo(return, 22, 44);\n    |                 ^^ expected `!`, found integer\n@@ -8,7 +8,7 @@ LL |     foo(return, 22, 44);\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:16:13\n+  --> $DIR/coerce-to-bang.rs:18:13\n    |\n LL |     foo(22, 44, return);\n    |             ^^ expected `!`, found integer\n@@ -17,7 +17,7 @@ LL |     foo(22, 44, return);\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:24:12\n+  --> $DIR/coerce-to-bang.rs:26:12\n    |\n LL |     foo(a, b, c); // ... and hence a reference to `a` is expected to diverge.\n    |            ^ expected `!`, found integer\n@@ -26,7 +26,7 @@ LL |     foo(a, b, c); // ... and hence a reference to `a` is expected to diverg\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:34:12\n+  --> $DIR/coerce-to-bang.rs:36:12\n    |\n LL |     foo(a, b, c);\n    |            ^ expected `!`, found integer\n@@ -35,7 +35,7 @@ LL |     foo(a, b, c);\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:43:12\n+  --> $DIR/coerce-to-bang.rs:45:12\n    |\n LL |     foo(a, b, c);\n    |            ^ expected `!`, found integer\n@@ -44,7 +44,7 @@ LL |     foo(a, b, c);\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:48:21\n+  --> $DIR/coerce-to-bang.rs:50:21\n    |\n LL |     let x: [!; 2] = [return, 22];\n    |            ------   ^^^^^^^^^^^^ expected `!`, found integer\n@@ -55,7 +55,7 @@ LL |     let x: [!; 2] = [return, 22];\n               found array `[{integer}; 2]`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:53:22\n+  --> $DIR/coerce-to-bang.rs:55:22\n    |\n LL |     let x: [!; 2] = [22, return];\n    |                      ^^ expected `!`, found integer\n@@ -64,7 +64,7 @@ LL |     let x: [!; 2] = [22, return];\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:58:37\n+  --> $DIR/coerce-to-bang.rs:60:37\n    |\n LL |     let x: (usize, !, usize) = (22, 44, 66);\n    |                                     ^^ expected `!`, found integer\n@@ -73,7 +73,7 @@ LL |     let x: (usize, !, usize) = (22, 44, 66);\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:63:41\n+  --> $DIR/coerce-to-bang.rs:65:41\n    |\n LL |     let x: (usize, !, usize) = (return, 44, 66);\n    |                                         ^^ expected `!`, found integer\n@@ -82,7 +82,7 @@ LL |     let x: (usize, !, usize) = (return, 44, 66);\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:74:37\n+  --> $DIR/coerce-to-bang.rs:76:37\n    |\n LL |     let x: (usize, !, usize) = (22, 44, return);\n    |                                     ^^ expected `!`, found integer"}, {"sha": "f6ab0bd7dbed69d899e36525f6782ca0fbb7063f", "filename": "src/test/ui/consts/const-eval/index-out-of-bounds-never-type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,6 @@\n // Regression test for #66975\n #![warn(const_err)]\n+#![feature(never_type)]\n \n struct PrintName<T>(T);\n "}, {"sha": "24830f7344c3bd698267c6c9de1556bb4a394b86", "filename": "src/test/ui/consts/const-eval/index-out-of-bounds-never-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,5 @@\n warning: any use of this value will cause an error\n-  --> $DIR/index-out-of-bounds-never-type.rs:7:61\n+  --> $DIR/index-out-of-bounds-never-type.rs:8:61\n    |\n LL |     const VOID: ! = { let x = 0 * std::mem::size_of::<T>(); [][x] };\n    |     --------------------------------------------------------^^^^^---\n@@ -13,7 +13,7 @@ LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n error: erroneous constant encountered\n-  --> $DIR/index-out-of-bounds-never-type.rs:12:13\n+  --> $DIR/index-out-of-bounds-never-type.rs:13:13\n    |\n LL |     let _ = PrintName::<T>::VOID;\n    |             ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a7cbdb40ef1086ccb48e66282d813ceefa6ad850", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,6 +1,7 @@\n // Regression test for #66975\n #![warn(const_err)]\n #![feature(const_panic)]\n+#![feature(never_type)]\n \n struct PrintName;\n "}, {"sha": "e15952c20e493db37d32977eeff8a9cd4f158227", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,10 +1,10 @@\n warning: any use of this value will cause an error\n-  --> $DIR/panic-assoc-never-type.rs:8:21\n+  --> $DIR/panic-assoc-never-type.rs:9:21\n    |\n LL |     const VOID: ! = panic!();\n    |     ----------------^^^^^^^^-\n    |                     |\n-   |                     the evaluated program panicked at 'explicit panic', $DIR/panic-assoc-never-type.rs:8:21\n+   |                     the evaluated program panicked at 'explicit panic', $DIR/panic-assoc-never-type.rs:9:21\n    |\n note: lint level defined here\n   --> $DIR/panic-assoc-never-type.rs:2:9\n@@ -14,7 +14,7 @@ LL | #![warn(const_err)]\n    = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error[E0080]: erroneous constant used\n-  --> $DIR/panic-assoc-never-type.rs:13:13\n+  --> $DIR/panic-assoc-never-type.rs:14:13\n    |\n LL |     let _ = PrintName::VOID;\n    |             ^^^^^^^^^^^^^^^ referenced constant has errors"}, {"sha": "b1a7d8ae676a834c23ef2f64a8c0b8e5c602a78b", "filename": "src/test/ui/consts/const-eval/panic-never-type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,6 +1,7 @@\n // Regression test for #66975\n #![warn(const_err)]\n #![feature(const_panic)]\n+#![feature(never_type)]\n \n const VOID: ! = panic!();\n //~^ WARN any use of this value will cause an error"}, {"sha": "9e91fdf451415240e99b7b93361b72a593b80776", "filename": "src/test/ui/consts/const-eval/panic-never-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,10 +1,10 @@\n warning: any use of this value will cause an error\n-  --> $DIR/panic-never-type.rs:5:17\n+  --> $DIR/panic-never-type.rs:6:17\n    |\n LL | const VOID: ! = panic!();\n    | ----------------^^^^^^^^-\n    |                 |\n-   |                 the evaluated program panicked at 'explicit panic', $DIR/panic-never-type.rs:5:17\n+   |                 the evaluated program panicked at 'explicit panic', $DIR/panic-never-type.rs:6:17\n    |\n note: lint level defined here\n   --> $DIR/panic-never-type.rs:2:9\n@@ -14,7 +14,7 @@ LL | #![warn(const_err)]\n    = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error[E0080]: erroneous constant used\n-  --> $DIR/panic-never-type.rs:9:13\n+  --> $DIR/panic-never-type.rs:10:13\n    |\n LL |     let _ = VOID;\n    |             ^^^^ referenced constant has errors"}, {"sha": "9610b7b22f161a843833a1f6bf708e5fe1e6a30a", "filename": "src/test/ui/consts/validate_never_arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_raw_ptr_deref)]\n+#![feature(const_raw_ptr_deref, never_type)]\n \n const FOO: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) }; //~ ERROR undefined behavior\n "}, {"sha": "f0ecea42f39c8d388dd8c21b9f061314c87c6228", "filename": "src/test/ui/empty/empty-never-array.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,3 +1,5 @@\n+#![feature(never_type)]\n+\n enum Helper<T, U> {\n     T(T, [!; 0]),\n     #[allow(dead_code)]"}, {"sha": "d865b59f0b9459a5c9ce3f164df3b8f5fcd9d671", "filename": "src/test/ui/empty/empty-never-array.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,5 @@\n error[E0005]: refutable pattern in local binding: `T(_, _)` not covered\n-  --> $DIR/empty-never-array.rs:8:9\n+  --> $DIR/empty-never-array.rs:10:9\n    |\n LL | / enum Helper<T, U> {\n LL | |     T(T, [!; 0]),\n@@ -20,7 +20,7 @@ LL |     if let Helper::U(u) = Helper::T(t, []) { /* */ }\n    |\n \n error[E0381]: use of possibly-uninitialized variable: `u`\n-  --> $DIR/empty-never-array.rs:10:5\n+  --> $DIR/empty-never-array.rs:12:5\n    |\n LL |     u\n    |     ^ use of possibly-uninitialized `u`"}, {"sha": "f0cc9ea70550e6a7cf8483d35a0869a48ff4282b", "filename": "src/test/ui/feature-gates/feature-gate-exhaustive-patterns.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,3 +1,5 @@\n+#![feature(never_type)]\n+\n fn foo() -> Result<u32, !> {\n     Ok(123)\n }"}, {"sha": "08c36cece4cf9b42ebed048ddf39aaacc3e1c856", "filename": "src/test/ui/feature-gates/feature-gate-exhaustive-patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,5 @@\n error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n-  --> $DIR/feature-gate-exhaustive-patterns.rs:6:9\n+  --> $DIR/feature-gate-exhaustive-patterns.rs:8:9\n    |\n LL |     let Ok(_x) = foo();\n    |         ^^^^^^ pattern `Err(_)` not covered"}, {"sha": "be8c27dbb1b02d63c8720d45aa356986a3545bab", "filename": "src/test/ui/feature-gates/feature-gate-never_type.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -0,0 +1,17 @@\n+// Test that ! errors when used in illegal positions with feature(never_type) disabled\n+\n+trait Foo {\n+    type Wub;\n+}\n+\n+type Ma = (u32, !, i32); //~ ERROR type is experimental\n+type Meeshka = Vec<!>; //~ ERROR type is experimental\n+type Mow = &'static fn(!) -> !; //~ ERROR type is experimental\n+type Skwoz = &'static mut !; //~ ERROR type is experimental\n+\n+impl Foo for Meeshka {\n+    type Wub = !; //~ ERROR type is experimental\n+}\n+\n+fn main() {\n+}"}, {"sha": "d86ab99b82bd5bd79cc654b35c4ad105b82018f5", "filename": "src/test/ui/feature-gates/feature-gate-never_type.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -0,0 +1,48 @@\n+error[E0658]: The `!` type is experimental\n+  --> $DIR/feature-gate-never_type.rs:7:17\n+   |\n+LL | type Ma = (u32, !, i32);\n+   |                 ^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n+   = help: add `#![feature(never_type)]` to the crate attributes to enable\n+\n+error[E0658]: The `!` type is experimental\n+  --> $DIR/feature-gate-never_type.rs:8:20\n+   |\n+LL | type Meeshka = Vec<!>;\n+   |                    ^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n+   = help: add `#![feature(never_type)]` to the crate attributes to enable\n+\n+error[E0658]: The `!` type is experimental\n+  --> $DIR/feature-gate-never_type.rs:9:24\n+   |\n+LL | type Mow = &'static fn(!) -> !;\n+   |                        ^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n+   = help: add `#![feature(never_type)]` to the crate attributes to enable\n+\n+error[E0658]: The `!` type is experimental\n+  --> $DIR/feature-gate-never_type.rs:10:27\n+   |\n+LL | type Skwoz = &'static mut !;\n+   |                           ^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n+   = help: add `#![feature(never_type)]` to the crate attributes to enable\n+\n+error[E0658]: The `!` type is experimental\n+  --> $DIR/feature-gate-never_type.rs:13:16\n+   |\n+LL |     type Wub = !;\n+   |                ^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n+   = help: add `#![feature(never_type)]` to the crate attributes to enable\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "d7209fc4de867f168c5db50c403efc4ba33abf49", "filename": "src/test/ui/for-loop-while/loop-break-value.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Ffor-loop-while%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Ffor-loop-while%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Floop-break-value.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n \n #![allow(unreachable_code)]\n+#![feature(never_type)]\n \n #[allow(unused)]\n fn never_returns() {"}, {"sha": "4dd4798abb7ce890e9cca2a72188bf028fb9d6ef", "filename": "src/test/ui/lint/must_use-unit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,3 +1,4 @@\n+#![feature(never_type)]\n #![deny(unused_must_use)]\n \n #[must_use]"}, {"sha": "0a9939b2015b7f14cc859b7c88238c27bc2745a7", "filename": "src/test/ui/lint/must_use-unit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,17 +1,17 @@\n error: unused return value of `foo` that must be used\n-  --> $DIR/must_use-unit.rs:12:5\n+  --> $DIR/must_use-unit.rs:13:5\n    |\n LL |     foo();\n    |     ^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/must_use-unit.rs:1:9\n+  --> $DIR/must_use-unit.rs:2:9\n    |\n LL | #![deny(unused_must_use)]\n    |         ^^^^^^^^^^^^^^^\n \n error: unused return value of `bar` that must be used\n-  --> $DIR/must_use-unit.rs:14:5\n+  --> $DIR/must_use-unit.rs:15:5\n    |\n LL |     bar();\n    |     ^^^^^^"}, {"sha": "473be434a7524931c374fe960c661e17176f3ded", "filename": "src/test/ui/lint/uninitialized-zeroed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -2,7 +2,7 @@\n // This test checks that calling `mem::{uninitialized,zeroed}` with certain types results\n // in a lint.\n \n-#![feature(rustc_attrs)]\n+#![feature(never_type, rustc_attrs)]\n #![allow(deprecated)]\n #![deny(invalid_value)]\n "}, {"sha": "6c4160c36aa39f81041792fb5c87bcfbf08b092b", "filename": "src/test/ui/loops/loop-break-value.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Floops%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Floops%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-break-value.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,3 +1,5 @@\n+#![feature(never_type)]\n+\n fn main() {\n     let val: ! = loop { break break; };\n     //~^ ERROR mismatched types"}, {"sha": "3bb0cd50d63fb41444bf4a61f3dd274d097f4dec", "filename": "src/test/ui/loops/loop-break-value.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,13 +1,13 @@\n warning: denote infinite loops with `loop { ... }`\n-  --> $DIR/loop-break-value.rs:24:5\n+  --> $DIR/loop-break-value.rs:26:5\n    |\n LL |     'while_loop: while true {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: use `loop`\n    |\n    = note: `#[warn(while_true)]` on by default\n \n error[E0571]: `break` with value from a `while` loop\n-  --> $DIR/loop-break-value.rs:26:9\n+  --> $DIR/loop-break-value.rs:28:9\n    |\n LL |         break ();\n    |         ^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -18,7 +18,7 @@ LL |         break;\n    |         ^^^^^\n \n error[E0571]: `break` with value from a `while` loop\n-  --> $DIR/loop-break-value.rs:28:13\n+  --> $DIR/loop-break-value.rs:30:13\n    |\n LL |             break 'while_loop 123;\n    |             ^^^^^^^^^^^^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -29,7 +29,7 @@ LL |             break;\n    |             ^^^^^\n \n error[E0571]: `break` with value from a `while` loop\n-  --> $DIR/loop-break-value.rs:36:12\n+  --> $DIR/loop-break-value.rs:38:12\n    |\n LL |         if break () {\n    |            ^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -40,7 +40,7 @@ LL |         if break {\n    |            ^^^^^\n \n error[E0571]: `break` with value from a `while` loop\n-  --> $DIR/loop-break-value.rs:41:9\n+  --> $DIR/loop-break-value.rs:43:9\n    |\n LL |         break None;\n    |         ^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -51,7 +51,7 @@ LL |         break;\n    |         ^^^^^\n \n error[E0571]: `break` with value from a `while` loop\n-  --> $DIR/loop-break-value.rs:47:13\n+  --> $DIR/loop-break-value.rs:49:13\n    |\n LL |             break 'while_let_loop \"nope\";\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -62,7 +62,7 @@ LL |             break;\n    |             ^^^^^\n \n error[E0571]: `break` with value from a `for` loop\n-  --> $DIR/loop-break-value.rs:54:9\n+  --> $DIR/loop-break-value.rs:56:9\n    |\n LL |         break ();\n    |         ^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -73,7 +73,7 @@ LL |         break;\n    |         ^^^^^\n \n error[E0571]: `break` with value from a `for` loop\n-  --> $DIR/loop-break-value.rs:55:9\n+  --> $DIR/loop-break-value.rs:57:9\n    |\n LL |         break [()];\n    |         ^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -84,7 +84,7 @@ LL |         break;\n    |         ^^^^^\n \n error[E0571]: `break` with value from a `for` loop\n-  --> $DIR/loop-break-value.rs:62:13\n+  --> $DIR/loop-break-value.rs:64:13\n    |\n LL |             break 'for_loop Some(17);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -95,7 +95,7 @@ LL |             break;\n    |             ^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:2:31\n+  --> $DIR/loop-break-value.rs:4:31\n    |\n LL |     let val: ! = loop { break break; };\n    |                               ^^^^^ expected `!`, found `()`\n@@ -104,31 +104,31 @@ LL |     let val: ! = loop { break break; };\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:9:19\n+  --> $DIR/loop-break-value.rs:11:19\n    |\n LL |             break 123;\n    |                   ^^^ expected `&str`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:14:15\n+  --> $DIR/loop-break-value.rs:16:15\n    |\n LL |         break \"asdf\";\n    |               ^^^^^^ expected `i32`, found `&str`\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:19:31\n+  --> $DIR/loop-break-value.rs:21:31\n    |\n LL |             break 'outer_loop \"nope\";\n    |                               ^^^^^^ expected `i32`, found `&str`\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:71:26\n+  --> $DIR/loop-break-value.rs:73:26\n    |\n LL |                 break 'c 123;\n    |                          ^^^ expected `()`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:78:15\n+  --> $DIR/loop-break-value.rs:80:15\n    |\n LL |         break (break, break);\n    |               ^^^^^^^^^^^^^^ expected `()`, found tuple\n@@ -137,13 +137,13 @@ LL |         break (break, break);\n                   found tuple `(!, !)`\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:83:15\n+  --> $DIR/loop-break-value.rs:85:15\n    |\n LL |         break 2;\n    |               ^ expected `()`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:88:9\n+  --> $DIR/loop-break-value.rs:90:9\n    |\n LL |         break;\n    |         ^^^^^"}, {"sha": "6f13d5612ce51b93a333eaf4dfbcb558e68f5b17", "filename": "src/test/ui/mir/mir_calls_to_shims.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -2,6 +2,7 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(fn_traits)]\n+#![feature(never_type)]\n \n use std::panic;\n "}, {"sha": "0d7d2c0ed3fa9402eaf9c808572292fba19e3cb7", "filename": "src/test/ui/never_type/adjust_never.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fadjust_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fadjust_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fadjust_never.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -2,6 +2,8 @@\n \n // check-pass\n \n+#![feature(never_type)]\n+\n fn main() {\n     let x: ! = panic!();\n     let y: u32 = x;"}, {"sha": "2d9689888cb3006d0f64b26c850b21f969c4868d", "filename": "src/test/ui/never_type/auto-traits.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fauto-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fauto-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fauto-traits.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,6 +1,7 @@\n // check-pass\n \n #![feature(optin_builtin_traits)]\n+#![feature(never_type)]\n \n fn main() {\n     enum Void {}"}, {"sha": "d06637e74a2f26b9da61b538f2f89c8d0eead623", "filename": "src/test/ui/never_type/call-fn-never-arg-wrong-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,7 @@\n // Test that we can't pass other types for !\n \n+#![feature(never_type)]\n+\n fn foo(x: !) -> ! {\n     x\n }"}, {"sha": "eacef1dc3302d1facfca65bfafd225ba632fa782", "filename": "src/test/ui/never_type/call-fn-never-arg-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/call-fn-never-arg-wrong-type.rs:8:9\n+  --> $DIR/call-fn-never-arg-wrong-type.rs:10:9\n    |\n LL |     foo(\"wow\");\n    |         ^^^^^ expected `!`, found `&str`"}, {"sha": "9d355817ee80dc459ad86ebfce4f4a79d3d194ff", "filename": "src/test/ui/never_type/call-fn-never-arg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -2,6 +2,7 @@\n \n // check-pass\n \n+#![feature(never_type)]\n #![allow(unreachable_code)]\n \n fn foo(x: !) -> ! {"}, {"sha": "0139ebe4640be6f3d91c0562290813cee17d9bae", "filename": "src/test/ui/never_type/cast-never.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fcast-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fcast-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fcast-never.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -2,6 +2,8 @@\n \n // check-pass\n \n+#![feature(never_type)]\n+\n fn main() {\n     let x: ! = panic!();\n     let y: u32 = x as u32;"}, {"sha": "1780cb6535d05c6fabbe23546d754def6f13015f", "filename": "src/test/ui/never_type/defaulted-never-note.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,6 +1,6 @@\n // We need to opt into the `never_type_fallback` feature\n // to trigger the requirement that this is testing.\n-#![feature(never_type_fallback)]\n+#![feature(never_type, never_type_fallback)]\n \n #![allow(unused)]\n "}, {"sha": "764f58ce9e805e34328e1c467ddc91ba10be3bb4", "filename": "src/test/ui/never_type/dispatch_from_dyn_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fdispatch_from_dyn_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fdispatch_from_dyn_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdispatch_from_dyn_zst.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(unsize, dispatch_from_dyn)]\n+#![feature(unsize, dispatch_from_dyn, never_type)]\n \n #![allow(dead_code)]\n "}, {"sha": "ea4881049d7921e756662aa323b7237753b2f069", "filename": "src/test/ui/never_type/diverging-fallback-control-flow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-control-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-control-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-control-flow.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -11,7 +11,7 @@\n // These represent current behavior, but are pretty dubious.  I would\n // like to revisit these and potentially change them. --nmatsakis\n \n-#![feature(never_type_fallback)]\n+#![feature(never_type, never_type_fallback)]\n \n trait BadDefault {\n     fn default() -> Self;"}, {"sha": "9423f08858b9ba9622fd042c2c3cd827f684ed50", "filename": "src/test/ui/never_type/impl-for-never.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fimpl-for-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fimpl-for-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fimpl-for-never.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,7 @@\n // run-pass\n \n+#![feature(never_type)]\n+\n // Test that we can call static methods on ! both directly and when it appears in a generic\n \n trait StringifyType {"}, {"sha": "699e480dfe7e53140d261d7e916f418243912c82", "filename": "src/test/ui/never_type/issue-44402.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fissue-44402.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fissue-44402.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-44402.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,6 +1,7 @@\n // check-pass\n \n #![allow(dead_code)]\n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n \n // Regression test for inhabitedness check. The old"}, {"sha": "7bb7c87097c503a790d517c905cdee80ecad8f11", "filename": "src/test/ui/never_type/never-assign-dead-code.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -2,6 +2,7 @@\n \n // check-pass\n \n+#![feature(never_type)]\n #![warn(unused)]\n \n fn main() {"}, {"sha": "1860150fa8bc6e2899a3c480c273b470965b40de", "filename": "src/test/ui/never_type/never-assign-dead-code.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,35 +1,35 @@\n warning: unreachable statement\n-  --> $DIR/never-assign-dead-code.rs:9:5\n+  --> $DIR/never-assign-dead-code.rs:10:5\n    |\n LL |     let x: ! = panic!(\"aah\");\n    |                ------------- any code following this expression is unreachable\n LL |     drop(x);\n    |     ^^^^^^^^ unreachable statement\n    |\n note: lint level defined here\n-  --> $DIR/never-assign-dead-code.rs:5:9\n+  --> $DIR/never-assign-dead-code.rs:6:9\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unreachable_code)]` implied by `#[warn(unused)]`\n    = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n warning: unreachable call\n-  --> $DIR/never-assign-dead-code.rs:9:5\n+  --> $DIR/never-assign-dead-code.rs:10:5\n    |\n LL |     drop(x);\n    |     ^^^^ - any code following this expression is unreachable\n    |     |\n    |     unreachable call\n \n warning: unused variable: `x`\n-  --> $DIR/never-assign-dead-code.rs:8:9\n+  --> $DIR/never-assign-dead-code.rs:9:9\n    |\n LL |     let x: ! = panic!(\"aah\");\n    |         ^ help: consider prefixing with an underscore: `_x`\n    |\n note: lint level defined here\n-  --> $DIR/never-assign-dead-code.rs:5:9\n+  --> $DIR/never-assign-dead-code.rs:6:9\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^"}, {"sha": "67e26f5663f412ed5fd18167e7fcf3607ab82c43", "filename": "src/test/ui/never_type/never-assign-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,6 @@\n // Test that we can't use another type in place of !\n \n+#![feature(never_type)]\n #![deny(warnings)]\n \n fn main() {"}, {"sha": "ce34d9483247f776b41cefeb3e2e51b844b158e0", "filename": "src/test/ui/never_type/never-assign-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/never-assign-wrong-type.rs:6:16\n+  --> $DIR/never-assign-wrong-type.rs:7:16\n    |\n LL |     let x: ! = \"hello\";\n    |            -   ^^^^^^^ expected `!`, found `&str`"}, {"sha": "3bb917c931635299e302860d646009d68d97b207", "filename": "src/test/ui/never_type/never-associated-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-associated-type.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -2,6 +2,8 @@\n \n // check-pass\n \n+#![feature(never_type)]\n+\n trait Foo {\n     type Wow;\n "}, {"sha": "9d16015bdc129bd5e0a5c43ccb674ca1727a98e0", "filename": "src/test/ui/never_type/never-from-impl-is-reserved.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,7 @@\n // check that the `for<T> T: From<!>` impl is reserved\n \n+#![feature(never_type)]\n+\n pub struct MyFoo;\n pub trait MyTrait {}\n "}, {"sha": "8b8d0f4ea73bea6f27ca5e1e6efb48cd9d337e7f", "filename": "src/test/ui/never_type/never-from-impl-is-reserved.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `MyTrait` for type `MyFoo`:\n-  --> $DIR/never-from-impl-is-reserved.rs:8:1\n+  --> $DIR/never-from-impl-is-reserved.rs:10:1\n    |\n LL | impl MyTrait for MyFoo {}\n    | ---------------------- first implementation here"}, {"sha": "35af37910ef3e92f28039f0791df0f2eb689d2e0", "filename": "src/test/ui/never_type/never-result.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-result.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -5,6 +5,8 @@\n \n // Test that we can extract a ! through pattern matching then use it as several different types.\n \n+#![feature(never_type)]\n+\n fn main() {\n     let x: Result<u32, !> = Ok(123);\n     match x {"}, {"sha": "13cd59e6aa9f138e6982af760e32cfe9ecf51eb8", "filename": "src/test/ui/never_type/never-type-arg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-type-arg.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -2,6 +2,8 @@\n \n // check-pass\n \n+#![feature(never_type)]\n+\n struct Wub;\n \n impl PartialEq<!> for Wub {"}, {"sha": "9ccc73dbf92d4c4449a43ea35e4e1e6bdeadfa9b", "filename": "src/test/ui/never_type/never-type-rvalues.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever-type-rvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever-type-rvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-type-rvalues.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n \n+#![feature(never_type)]\n #![allow(dead_code)]\n #![allow(path_statements)]\n #![allow(unreachable_patterns)]"}, {"sha": "f2e9e087307db833f47d04fd57ec0a0728055040", "filename": "src/test/ui/never_type/never-value-fallback-issue-66757.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -0,0 +1,29 @@\n+// Regression test for #66757\n+//\n+// Test than when you have a `!` value (e.g., the local variable\n+// never) and an uninferred variable (here the argument to `From`) it\n+// doesn't fallback to `()` but rather `!`.\n+//\n+// run-pass\n+\n+#![feature(never_type)]\n+\n+// FIXME(#67225) -- this should be true even without the fallback gate.\n+#![feature(never_type_fallback)]\n+\n+struct E;\n+\n+impl From<!> for E {\n+    fn from(_: !) -> E {\n+        E\n+    }\n+}\n+\n+#[allow(unreachable_code)]\n+#[allow(dead_code)]\n+fn foo(never: !) {\n+    <E as From<!>>::from(never);  // Ok\n+    <E as From<_>>::from(never);  // Inference fails here\n+}\n+\n+fn main() { }"}, {"sha": "fce3ced9aac7fc58f4e8bfcbfaae77559a177ed9", "filename": "src/test/ui/never_type/never_transmute_never.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever_transmute_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fnever_transmute_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever_transmute_never.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -2,6 +2,7 @@\n \n #![crate_type=\"lib\"]\n \n+#![feature(never_type)]\n #![allow(dead_code)]\n #![allow(unreachable_code)]\n #![allow(unused_variables)]"}, {"sha": "e0c30160b9e94be9ff2ceb286ad6d04151e26029", "filename": "src/test/ui/never_type/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fpanic-uninitialized-zeroed.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -3,6 +3,7 @@\n // This test checks that instantiating an uninhabited type via `mem::{uninitialized,zeroed}` results\n // in a runtime panic.\n \n+#![feature(never_type)]\n #![allow(deprecated, invalid_value)]\n \n use std::{mem, panic};"}, {"sha": "50451576f9c9771bb822754ee330bfbdde281278", "filename": "src/test/ui/never_type/try_from.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Ftry_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fnever_type%2Ftry_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ftry_from.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -5,6 +5,8 @@\n // This test was added to show the motivation for doing this\n // over `TryFrom` being blanket impl for all `T: From`\n \n+#![feature(never_type)]\n+\n use std::convert::{TryInto, Infallible};\n \n struct Foo<T> {"}, {"sha": "315eb03d165642a9300580b3ab78761b551414af", "filename": "src/test/ui/pattern/usefulness/match-privately-empty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,3 +1,4 @@\n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n \n mod private {"}, {"sha": "f79d180a1b8b5c0f82765f868c761e1ff6950d62", "filename": "src/test/ui/pattern/usefulness/match-privately-empty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `Some(Private { misc: true, .. })` not covered\n-  --> $DIR/match-privately-empty.rs:12:11\n+  --> $DIR/match-privately-empty.rs:13:11\n    |\n LL |     match private::DATA {\n    |           ^^^^^^^^^^^^^ pattern `Some(Private { misc: true, .. })` not covered"}, {"sha": "ae4e492456af9ad8861775387bb5b41a97693635", "filename": "src/test/ui/print_type_sizes/uninhabited.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -4,6 +4,7 @@\n // ^-- needed because `--pass check` does not emit the output needed.\n //     FIXME: consider using an attribute instead of side-effects.\n \n+#![feature(never_type)]\n #![feature(start)]\n \n #[start]"}, {"sha": "b45e5daf42c8d6498ca21b700b21ccabfd5f1765", "filename": "src/test/ui/reachable/expr_add.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_add.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,3 +1,4 @@\n+#![feature(never_type)]\n #![allow(unused_variables)]\n #![deny(unreachable_code)]\n "}, {"sha": "880dea1cc3516fa5210f76a0a5559359f89c291e", "filename": "src/test/ui/reachable/expr_add.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_add.rs:16:13\n+  --> $DIR/expr_add.rs:17:13\n    |\n LL |     let x = Foo + return;\n    |             ^^^^^^------\n@@ -8,7 +8,7 @@ LL |     let x = Foo + return;\n    |             unreachable expression\n    |\n note: lint level defined here\n-  --> $DIR/expr_add.rs:2:9\n+  --> $DIR/expr_add.rs:3:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "e547f75e2697b3b89428b35d12e56f077ce23e8a", "filename": "src/test/ui/reachable/expr_assign.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,3 +1,4 @@\n+#![feature(never_type)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n #![allow(dead_code)]"}, {"sha": "3004da040632867b4cd64100107c80f367ab6956", "filename": "src/test/ui/reachable/expr_assign.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_assign.rs:9:5\n+  --> $DIR/expr_assign.rs:10:5\n    |\n LL |     x = return;\n    |     ^^^^------\n@@ -8,21 +8,21 @@ LL |     x = return;\n    |     unreachable expression\n    |\n note: lint level defined here\n-  --> $DIR/expr_assign.rs:4:9\n+  --> $DIR/expr_assign.rs:5:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable expression\n-  --> $DIR/expr_assign.rs:19:14\n+  --> $DIR/expr_assign.rs:20:14\n    |\n LL |         *p = return;\n    |         --   ^^^^^^ unreachable expression\n    |         |\n    |         any code following this expression is unreachable\n \n error: unreachable expression\n-  --> $DIR/expr_assign.rs:25:15\n+  --> $DIR/expr_assign.rs:26:15\n    |\n LL |     *{return; &mut i} = 22;\n    |       ------  ^^^^^^ unreachable expression"}, {"sha": "1eaa96c3ce7739ba12f4a9ab7814e660fe5e4beb", "filename": "src/test/ui/reachable/expr_call.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_call.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,3 +1,4 @@\n+#![feature(never_type)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n #![allow(dead_code)]"}, {"sha": "ae8b4dd87b5b9a5d55f2a328cdafe3a2edeb97f6", "filename": "src/test/ui/reachable/expr_call.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,19 +1,19 @@\n error: unreachable expression\n-  --> $DIR/expr_call.rs:12:17\n+  --> $DIR/expr_call.rs:13:17\n    |\n LL |     foo(return, 22);\n    |         ------  ^^ unreachable expression\n    |         |\n    |         any code following this expression is unreachable\n    |\n note: lint level defined here\n-  --> $DIR/expr_call.rs:4:9\n+  --> $DIR/expr_call.rs:5:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable call\n-  --> $DIR/expr_call.rs:17:5\n+  --> $DIR/expr_call.rs:18:5\n    |\n LL |     bar(return);\n    |     ^^^ ------ any code following this expression is unreachable"}, {"sha": "f53bcb97e69723ad748e710a63deae7916f00876", "filename": "src/test/ui/reachable/expr_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -2,7 +2,7 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(type_ascription)]\n+#![feature(never_type, type_ascription)]\n \n fn a() {\n     // the cast is unreachable:"}, {"sha": "d917df05b3c3dc038913cd2e087529b5355829dd", "filename": "src/test/ui/reachable/expr_method.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_method.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,3 +1,4 @@\n+#![feature(never_type)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n #![allow(dead_code)]"}, {"sha": "82a0745f0629f3ac9f1557e94dfa0d6d354c22f7", "filename": "src/test/ui/reachable/expr_method.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,19 +1,19 @@\n error: unreachable expression\n-  --> $DIR/expr_method.rs:15:21\n+  --> $DIR/expr_method.rs:16:21\n    |\n LL |     Foo.foo(return, 22);\n    |             ------  ^^ unreachable expression\n    |             |\n    |             any code following this expression is unreachable\n    |\n note: lint level defined here\n-  --> $DIR/expr_method.rs:4:9\n+  --> $DIR/expr_method.rs:5:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable call\n-  --> $DIR/expr_method.rs:20:9\n+  --> $DIR/expr_method.rs:21:9\n    |\n LL |     Foo.bar(return);\n    |         ^^^ ------ any code following this expression is unreachable"}, {"sha": "8d32397b54248a8479e9c6fc7cc29af55d22f008", "filename": "src/test/ui/reachable/expr_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -2,7 +2,7 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(type_ascription)]\n+#![feature(never_type, type_ascription)]\n \n fn a() {\n     // the cast is unreachable:"}, {"sha": "e229d22ebc798053202ab241897fb3b498ed6c61", "filename": "src/test/ui/reachable/expr_unary.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,3 +1,4 @@\n+#![feature(never_type)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n #![allow(dead_code)]"}, {"sha": "f5c3564217bbab51b8a573460a960d4fdd378081", "filename": "src/test/ui/reachable/expr_unary.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,11 +1,11 @@\n error[E0600]: cannot apply unary operator `!` to type `!`\n-  --> $DIR/expr_unary.rs:7:16\n+  --> $DIR/expr_unary.rs:8:16\n    |\n LL |     let x: ! = ! { return; };\n    |                ^^^^^^^^^^^^^ cannot apply unary operator `!`\n \n error: unreachable expression\n-  --> $DIR/expr_unary.rs:7:16\n+  --> $DIR/expr_unary.rs:8:16\n    |\n LL |     let x: ! = ! { return; };\n    |                ^^^^------^^^\n@@ -14,7 +14,7 @@ LL |     let x: ! = ! { return; };\n    |                unreachable expression\n    |\n note: lint level defined here\n-  --> $DIR/expr_unary.rs:4:9\n+  --> $DIR/expr_unary.rs:5:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "4de29c3c3d7616406daac5cf25fe7a81904e7928", "filename": "src/test/ui/reachable/unreachable-loop-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Funreachable-loop-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Funreachable-loop-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Funreachable-loop-patterns.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,4 +1,4 @@\n-#![feature(never_type_fallback)]\n+#![feature(never_type, never_type_fallback)]\n #![feature(exhaustive_patterns)]\n \n #![allow(unreachable_code)]"}, {"sha": "23360e73f4a3a6870d616f2b7f4d84d868a02d6c", "filename": "src/test/ui/reachable/unreachable-try-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Funreachable-try-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Funreachable-try-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Funreachable-try-pattern.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(exhaustive_patterns)]\n+#![feature(never_type, exhaustive_patterns)]\n #![warn(unreachable_code)]\n #![warn(unreachable_patterns)]\n "}, {"sha": "71f8fe3a783e2247ba69b35d8fea2865f6e588ec", "filename": "src/test/ui/reachable/unwarned-match-on-never.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Funwarned-match-on-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Funwarned-match-on-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Funwarned-match-on-never.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,6 +1,8 @@\n #![deny(unreachable_code)]\n #![allow(dead_code)]\n \n+#![feature(never_type)]\n+\n fn foo(x: !) -> bool {\n     // Explicit matches on the never type are unwarned.\n     match x {}"}, {"sha": "6b2fb4a33c1e80c76c0b62743a4e504a20dd702c", "filename": "src/test/ui/reachable/unwarned-match-on-never.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Funwarned-match-on-never.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Freachable%2Funwarned-match-on-never.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Funwarned-match-on-never.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/unwarned-match-on-never.rs:8:5\n+  --> $DIR/unwarned-match-on-never.rs:10:5\n    |\n LL |     match x {}\n    |           - any code following this expression is unreachable\n@@ -14,15 +14,15 @@ LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable arm\n-  --> $DIR/unwarned-match-on-never.rs:13:15\n+  --> $DIR/unwarned-match-on-never.rs:15:15\n    |\n LL |     match (return) {\n    |           -------- any code following this expression is unreachable\n LL |         () => ()\n    |               ^^ unreachable arm\n \n error: unreachable expression\n-  --> $DIR/unwarned-match-on-never.rs:19:5\n+  --> $DIR/unwarned-match-on-never.rs:21:5\n    |\n LL |       return;\n    |       ------ any code following this expression is unreachable"}, {"sha": "a2735d4cbfb2928c1e32eb3bb4a81d73e1411b3a", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/auxiliary/uninhabited.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fauxiliary%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fauxiliary%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fauxiliary%2Funinhabited.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,4 +1,5 @@\n #![crate_type = \"rlib\"]\n+#![feature(never_type)]\n \n #[non_exhaustive]\n pub enum UninhabitedEnum {"}, {"sha": "80b9dc4c1c338c80be9addad9ade8cf503adb9ac", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/coercions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,4 +1,5 @@\n // aux-build:uninhabited.rs\n+#![feature(never_type)]\n \n extern crate uninhabited;\n "}, {"sha": "d2d319f50c78dfffc0dfa7d74ec9a4f8a8ecdac0", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/coercions.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,29 +1,29 @@\n error[E0308]: mismatched types\n-  --> $DIR/coercions.rs:22:5\n+  --> $DIR/coercions.rs:23:5\n    |\n LL | fn cannot_coerce_empty_enum_to_anything(x: UninhabitedEnum) -> A {\n    |                                                                - expected `A` because of return type\n LL |     x\n    |     ^ expected struct `A`, found enum `uninhabited::UninhabitedEnum`\n \n error[E0308]: mismatched types\n-  --> $DIR/coercions.rs:26:5\n+  --> $DIR/coercions.rs:27:5\n    |\n LL | fn cannot_coerce_empty_tuple_struct_to_anything(x: UninhabitedTupleStruct) -> A {\n    |                                                                               - expected `A` because of return type\n LL |     x\n    |     ^ expected struct `A`, found struct `uninhabited::UninhabitedTupleStruct`\n \n error[E0308]: mismatched types\n-  --> $DIR/coercions.rs:30:5\n+  --> $DIR/coercions.rs:31:5\n    |\n LL | fn cannot_coerce_empty_struct_to_anything(x: UninhabitedStruct) -> A {\n    |                                                                    - expected `A` because of return type\n LL |     x\n    |     ^ expected struct `A`, found struct `uninhabited::UninhabitedStruct`\n \n error[E0308]: mismatched types\n-  --> $DIR/coercions.rs:34:5\n+  --> $DIR/coercions.rs:35:5\n    |\n LL | fn cannot_coerce_enum_with_empty_variants_to_anything(x: UninhabitedVariants) -> A {\n    |                                                                                  - expected `A` because of return type"}, {"sha": "6b911dd989cc580f89170be9eb9eabdc673d3f37", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/coercions_same_crate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,3 +1,5 @@\n+#![feature(never_type)]\n+\n #[non_exhaustive]\n pub enum UninhabitedEnum {\n }"}, {"sha": "fd2c56974bd4ac7567262ce420c41e9b72ad5750", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/coercions_same_crate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,29 +1,29 @@\n error[E0308]: mismatched types\n-  --> $DIR/coercions_same_crate.rs:28:5\n+  --> $DIR/coercions_same_crate.rs:30:5\n    |\n LL | fn cannot_coerce_empty_enum_to_anything(x: UninhabitedEnum) -> A {\n    |                                                                - expected `A` because of return type\n LL |     x\n    |     ^ expected struct `A`, found enum `UninhabitedEnum`\n \n error[E0308]: mismatched types\n-  --> $DIR/coercions_same_crate.rs:32:5\n+  --> $DIR/coercions_same_crate.rs:34:5\n    |\n LL | fn cannot_coerce_empty_tuple_struct_to_anything(x: UninhabitedTupleStruct) -> A {\n    |                                                                               - expected `A` because of return type\n LL |     x\n    |     ^ expected struct `A`, found struct `UninhabitedTupleStruct`\n \n error[E0308]: mismatched types\n-  --> $DIR/coercions_same_crate.rs:36:5\n+  --> $DIR/coercions_same_crate.rs:38:5\n    |\n LL | fn cannot_coerce_empty_struct_to_anything(x: UninhabitedStruct) -> A {\n    |                                                                    - expected `A` because of return type\n LL |     x\n    |     ^ expected struct `A`, found struct `UninhabitedStruct`\n \n error[E0308]: mismatched types\n-  --> $DIR/coercions_same_crate.rs:40:5\n+  --> $DIR/coercions_same_crate.rs:42:5\n    |\n LL | fn cannot_coerce_enum_with_empty_variants_to_anything(x: UninhabitedVariants) -> A {\n    |                                                                                  - expected `A` because of return type"}, {"sha": "98a7fdbc5049abe48cf39a87ded6105a243d1ab5", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,4 +1,5 @@\n // aux-build:uninhabited.rs\n+#![feature(never_type)]\n \n extern crate uninhabited;\n "}, {"sha": "abca542373f3ad0d1e34eb9da542f05d3f9f1df9", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,29 +1,29 @@\n error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedEnum` is non-empty\n-  --> $DIR/indirect_match.rs:18:11\n+  --> $DIR/indirect_match.rs:19:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedStruct` is non-empty\n-  --> $DIR/indirect_match.rs:22:11\n+  --> $DIR/indirect_match.rs:23:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedTupleStruct` is non-empty\n-  --> $DIR/indirect_match.rs:26:11\n+  --> $DIR/indirect_match.rs:27:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedVariants` is non-empty\n-  --> $DIR/indirect_match.rs:32:11\n+  --> $DIR/indirect_match.rs:33:11\n    |\n LL |     match x {}\n    |           ^"}, {"sha": "8f090fe886a00564ddfb51531fd67b01e747deb3", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_same_crate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,3 +1,5 @@\n+#![feature(never_type)]\n+\n #[non_exhaustive]\n pub enum UninhabitedEnum {\n }"}, {"sha": "989cb791a417cc9847b6f392c197b9028106375d", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_same_crate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: type `IndirectUninhabitedEnum` is non-empty\n-  --> $DIR/indirect_match_same_crate.rs:32:11\n+  --> $DIR/indirect_match_same_crate.rs:34:11\n    |\n LL | pub struct IndirectUninhabitedEnum(UninhabitedEnum);\n    | ---------------------------------------------------- `IndirectUninhabitedEnum` defined here\n@@ -10,7 +10,7 @@ LL |     match x {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `IndirectUninhabitedStruct` is non-empty\n-  --> $DIR/indirect_match_same_crate.rs:36:11\n+  --> $DIR/indirect_match_same_crate.rs:38:11\n    |\n LL | pub struct IndirectUninhabitedStruct(UninhabitedStruct);\n    | -------------------------------------------------------- `IndirectUninhabitedStruct` defined here\n@@ -21,7 +21,7 @@ LL |     match x {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `IndirectUninhabitedTupleStruct` is non-empty\n-  --> $DIR/indirect_match_same_crate.rs:40:11\n+  --> $DIR/indirect_match_same_crate.rs:42:11\n    |\n LL | pub struct IndirectUninhabitedTupleStruct(UninhabitedTupleStruct);\n    | ------------------------------------------------------------------ `IndirectUninhabitedTupleStruct` defined here\n@@ -32,7 +32,7 @@ LL |     match x {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `IndirectUninhabitedVariants` is non-empty\n-  --> $DIR/indirect_match_same_crate.rs:46:11\n+  --> $DIR/indirect_match_same_crate.rs:48:11\n    |\n LL | pub struct IndirectUninhabitedVariants(UninhabitedVariants);\n    | ------------------------------------------------------------ `IndirectUninhabitedVariants` defined here"}, {"sha": "be86519ecb159cdf961f06dfeb856d4d906dc0dc", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,6 +1,7 @@\n // aux-build:uninhabited.rs\n #![deny(unreachable_patterns)]\n #![feature(exhaustive_patterns)]\n+#![feature(never_type)]\n \n extern crate uninhabited;\n "}, {"sha": "17a8d01007205972ccf42cdfa594a23907d7b9ad", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,29 +1,29 @@\n error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedEnum` is non-empty\n-  --> $DIR/indirect_match_with_exhaustive_patterns.rs:22:11\n+  --> $DIR/indirect_match_with_exhaustive_patterns.rs:23:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedStruct` is non-empty\n-  --> $DIR/indirect_match_with_exhaustive_patterns.rs:26:11\n+  --> $DIR/indirect_match_with_exhaustive_patterns.rs:27:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedTupleStruct` is non-empty\n-  --> $DIR/indirect_match_with_exhaustive_patterns.rs:30:11\n+  --> $DIR/indirect_match_with_exhaustive_patterns.rs:31:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedVariants` is non-empty\n-  --> $DIR/indirect_match_with_exhaustive_patterns.rs:36:11\n+  --> $DIR/indirect_match_with_exhaustive_patterns.rs:37:11\n    |\n LL |     match x {}\n    |           ^"}, {"sha": "60289aa7803788be6724e7d4b0fc6f7f380b5aa0", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns_same_crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns_same_crate.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -2,6 +2,7 @@\n \n #![deny(unreachable_patterns)]\n #![feature(exhaustive_patterns)]\n+#![feature(never_type)]\n \n #[non_exhaustive]\n pub enum UninhabitedEnum {"}, {"sha": "e54098d4d48b958fae8839616e29b6b9460b1bcb", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,4 +1,5 @@\n // aux-build:uninhabited.rs\n+#![feature(never_type)]\n \n extern crate uninhabited;\n "}, {"sha": "ccc25a184e946a90dde3582f3d542fd0fc6dfa18", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,29 +1,29 @@\n error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedEnum` is non-empty\n-  --> $DIR/match.rs:18:11\n+  --> $DIR/match.rs:19:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedStruct` is non-empty\n-  --> $DIR/match.rs:22:11\n+  --> $DIR/match.rs:23:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedTupleStruct` is non-empty\n-  --> $DIR/match.rs:26:11\n+  --> $DIR/match.rs:27:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Tuple(_)` and `Struct { .. }` not covered\n-  --> $DIR/match.rs:30:11\n+  --> $DIR/match.rs:31:11\n    |\n LL |     match x {}\n    |           ^ patterns `Tuple(_)` and `Struct { .. }` not covered"}, {"sha": "ebbdfba15f3a3caf7d745f828dd85feed396dcee", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_same_crate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,3 +1,5 @@\n+#![feature(never_type)]\n+\n #[non_exhaustive]\n pub enum UninhabitedEnum {\n }"}, {"sha": "858aae585765f8ac9070edfb7141d735f4fec7a4", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_same_crate.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: type `UninhabitedStruct` is non-empty\n-  --> $DIR/match_same_crate.rs:28:11\n+  --> $DIR/match_same_crate.rs:30:11\n    |\n LL | / pub struct UninhabitedStruct {\n LL | |     _priv: !,\n@@ -12,7 +12,7 @@ LL |       match x {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `UninhabitedTupleStruct` is non-empty\n-  --> $DIR/match_same_crate.rs:32:11\n+  --> $DIR/match_same_crate.rs:34:11\n    |\n LL | pub struct UninhabitedTupleStruct(!);\n    | ------------------------------------- `UninhabitedTupleStruct` defined here\n@@ -23,7 +23,7 @@ LL |     match x {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Tuple(_)` and `Struct { .. }` not covered\n-  --> $DIR/match_same_crate.rs:36:11\n+  --> $DIR/match_same_crate.rs:38:11\n    |\n LL | / pub enum UninhabitedVariants {\n LL | |     #[non_exhaustive] Tuple(!),"}, {"sha": "900dfff652ea6db465a898b8aa5088dabf79d4b2", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,6 +1,7 @@\n // aux-build:uninhabited.rs\n #![deny(unreachable_patterns)]\n #![feature(exhaustive_patterns)]\n+#![feature(never_type)]\n \n extern crate uninhabited;\n "}, {"sha": "a54885c96e5ee66bfc7b6dae5f4c46a88e13f98c", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,29 +1,29 @@\n error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedEnum` is non-empty\n-  --> $DIR/match_with_exhaustive_patterns.rs:21:11\n+  --> $DIR/match_with_exhaustive_patterns.rs:22:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedStruct` is non-empty\n-  --> $DIR/match_with_exhaustive_patterns.rs:25:11\n+  --> $DIR/match_with_exhaustive_patterns.rs:26:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedTupleStruct` is non-empty\n-  --> $DIR/match_with_exhaustive_patterns.rs:29:11\n+  --> $DIR/match_with_exhaustive_patterns.rs:30:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Tuple(_)` and `Struct { .. }` not covered\n-  --> $DIR/match_with_exhaustive_patterns.rs:33:11\n+  --> $DIR/match_with_exhaustive_patterns.rs:34:11\n    |\n LL |     match x {}\n    |           ^ patterns `Tuple(_)` and `Struct { .. }` not covered"}, {"sha": "de5530485f3e69ea31af2d3a4aa10bc493b57f6b", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns_same_crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns_same_crate.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -2,6 +2,7 @@\n \n #![deny(unreachable_patterns)]\n #![feature(exhaustive_patterns)]\n+#![feature(never_type)]\n \n #[non_exhaustive]\n pub enum UninhabitedEnum {"}, {"sha": "ffc496a975ecf00b69f0faee7c7a42d807917243", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/patterns_same_crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,6 @@\n #![deny(unreachable_patterns)]\n #![feature(exhaustive_patterns)]\n+#![feature(never_type)]\n \n #[non_exhaustive]\n pub enum UninhabitedEnum {"}, {"sha": "e3de94be1282e4d2511c262eeef595edb43e1b6e", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/patterns_same_crate.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,5 @@\n error: unreachable pattern\n-  --> $DIR/patterns_same_crate.rs:51:9\n+  --> $DIR/patterns_same_crate.rs:52:9\n    |\n LL |         Some(_x) => (),\n    |         ^^^^^^^^\n@@ -11,25 +11,25 @@ LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/patterns_same_crate.rs:56:9\n+  --> $DIR/patterns_same_crate.rs:57:9\n    |\n LL |         Some(_x) => (),\n    |         ^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/patterns_same_crate.rs:60:15\n+  --> $DIR/patterns_same_crate.rs:61:15\n    |\n LL |     while let PartiallyInhabitedVariants::Struct { x } = partially_inhabited_variant() {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/patterns_same_crate.rs:64:15\n+  --> $DIR/patterns_same_crate.rs:65:15\n    |\n LL |     while let Some(_x) = uninhabited_struct() {\n    |               ^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/patterns_same_crate.rs:67:15\n+  --> $DIR/patterns_same_crate.rs:68:15\n    |\n LL |     while let Some(_x) = uninhabited_tuple_struct() {\n    |               ^^^^^^^^"}, {"sha": "f14589ccf846d07e06fb6f6f2262c36602bc1e5e", "filename": "src/test/ui/traits/reservation-impls/reservation-impl-non-lattice-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-non-lattice-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-non-lattice-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-non-lattice-ok.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -30,7 +30,7 @@\n //\n // [ii]: http://smallcultfollowing.com/babysteps/blog/2016/09/24/intersection-impls/\n \n-#![feature(rustc_attrs)]\n+#![feature(rustc_attrs, never_type)]\n \n trait MyTrait {}\n "}, {"sha": "27433fd770b050caffa3db99abd4171502135b16", "filename": "src/test/ui/type-sizes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-sizes.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -2,6 +2,7 @@\n \n #![allow(non_camel_case_types)]\n #![allow(dead_code)]\n+#![feature(never_type)]\n \n use std::mem::size_of;\n "}, {"sha": "48cd92719b49ab51198e56727c30abd90b39ed79", "filename": "src/test/ui/uninhabited/uninhabited-irrefutable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,3 +1,4 @@\n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n \n mod foo {"}, {"sha": "26e1be34ea75dfb651fa8c4e38c791bb842a617f", "filename": "src/test/ui/uninhabited/uninhabited-irrefutable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,5 @@\n error[E0005]: refutable pattern in local binding: `A(_)` not covered\n-  --> $DIR/uninhabited-irrefutable.rs:26:9\n+  --> $DIR/uninhabited-irrefutable.rs:27:9\n    |\n LL | / enum Foo {\n LL | |     A(foo::SecretlyEmpty),"}, {"sha": "1bf01184a08e7c4bbb169c82498262663a8cc4f3", "filename": "src/test/ui/uninhabited/uninhabited-patterns.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.rs?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,5 +1,6 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(slice_patterns)]\n #![deny(unreachable_patterns)]"}, {"sha": "3e5329cfb3011aa027746bb521b91bf49164dbc3", "filename": "src/test/ui/uninhabited/uninhabited-patterns.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f829840f7e5897745bc7b5ff951b006a2c4e0e3/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.stderr?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1,35 +1,35 @@\n error: unreachable pattern\n-  --> $DIR/uninhabited-patterns.rs:26:9\n+  --> $DIR/uninhabited-patterns.rs:27:9\n    |\n LL |         &[..] => (),\n    |         ^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/uninhabited-patterns.rs:5:9\n+  --> $DIR/uninhabited-patterns.rs:6:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/uninhabited-patterns.rs:31:9\n+  --> $DIR/uninhabited-patterns.rs:32:9\n    |\n LL |         Ok(box _) => (),\n    |         ^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/uninhabited-patterns.rs:33:9\n+  --> $DIR/uninhabited-patterns.rs:34:9\n    |\n LL |         Err(&[..]) => (),\n    |         ^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/uninhabited-patterns.rs:40:9\n+  --> $DIR/uninhabited-patterns.rs:41:9\n    |\n LL |         Err(Ok(_y)) => (),\n    |         ^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/uninhabited-patterns.rs:43:15\n+  --> $DIR/uninhabited-patterns.rs:44:15\n    |\n LL |     while let Some(_y) = foo() {\n    |               ^^^^^^^^"}, {"sha": "69f99e74ac2266dff4b5adc7c59b35236f0abef1", "filename": "src/tools/clippy", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy?ref=6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "patch": "@@ -1 +1 @@\n-Subproject commit 374db5c0b7a8ebc92ecb35ee21e11961da6c754d\n+Subproject commit 69f99e74ac2266dff4b5adc7c59b35236f0abef1"}]}