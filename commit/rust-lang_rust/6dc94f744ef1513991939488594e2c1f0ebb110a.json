{"sha": "6dc94f744ef1513991939488594e2c1f0ebb110a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYzk0Zjc0NGVmMTUxMzk5MTkzOTQ4ODU5NGUyYzFmMGViYjExMGE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-15T22:12:06Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-15T22:12:06Z"}, "message": "rollup merge of #21197: michaelwoerister/linestablesonly-forloop\n\nFixes #21067.", "tree": {"sha": "1c031fa211a2312b31ad92e25eb561a00c5e4601", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c031fa211a2312b31ad92e25eb561a00c5e4601"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dc94f744ef1513991939488594e2c1f0ebb110a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc94f744ef1513991939488594e2c1f0ebb110a", "html_url": "https://github.com/rust-lang/rust/commit/6dc94f744ef1513991939488594e2c1f0ebb110a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dc94f744ef1513991939488594e2c1f0ebb110a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09c03421162e1773f07394a74b4d8a4bdffe490d", "url": "https://api.github.com/repos/rust-lang/rust/commits/09c03421162e1773f07394a74b4d8a4bdffe490d", "html_url": "https://github.com/rust-lang/rust/commit/09c03421162e1773f07394a74b4d8a4bdffe490d"}, {"sha": "45c6423cbc1fe5ae5be33e6afe4f313d6951e01b", "url": "https://api.github.com/repos/rust-lang/rust/commits/45c6423cbc1fe5ae5be33e6afe4f313d6951e01b", "html_url": "https://github.com/rust-lang/rust/commit/45c6423cbc1fe5ae5be33e6afe4f313d6951e01b"}], "stats": {"total": 60, "additions": 28, "deletions": 32}, "files": [{"sha": "be927503badd1d74d78ddb2a555f8f31569721ae", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6dc94f744ef1513991939488594e2c1f0ebb110a/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc94f744ef1513991939488594e2c1f0ebb110a/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=6dc94f744ef1513991939488594e2c1f0ebb110a", "patch": "@@ -856,16 +856,9 @@ fn insert_lllocals<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n             bcx.fcx.schedule_lifetime_end(cs, binding_info.llmatch);\n         }\n \n-        debug!(\"binding {} to {}\",\n-               binding_info.id,\n-               bcx.val_to_string(llval));\n+        debug!(\"binding {} to {}\", binding_info.id, bcx.val_to_string(llval));\n         bcx.fcx.lllocals.borrow_mut().insert(binding_info.id, datum);\n-\n-        if bcx.sess().opts.debuginfo == FullDebugInfo {\n-            debuginfo::create_match_binding_metadata(bcx,\n-                                                     ident,\n-                                                     binding_info);\n-        }\n+        debuginfo::create_match_binding_metadata(bcx, ident, binding_info);\n     }\n     bcx\n }"}, {"sha": "3072bcae0bfb9a927d27059f6aa3d94ec9b6f249", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6dc94f744ef1513991939488594e2c1f0ebb110a/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc94f744ef1513991939488594e2c1f0ebb110a/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=6dc94f744ef1513991939488594e2c1f0ebb110a", "patch": "@@ -44,7 +44,7 @@ use middle::subst;\n use middle::weak_lang_items;\n use middle::subst::{Subst, Substs};\n use middle::ty::{self, Ty, UnboxedClosureTyper};\n-use session::config::{self, NoDebugInfo, FullDebugInfo};\n+use session::config::{self, NoDebugInfo};\n use session::Session;\n use trans::_match;\n use trans::adt;\n@@ -1617,9 +1617,8 @@ fn create_datums_for_fn_args_under_call_abi<'blk, 'tcx>(\n     result\n }\n \n-fn copy_args_to_allocas<'blk, 'tcx>(fcx: &FunctionContext<'blk, 'tcx>,\n+fn copy_args_to_allocas<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                     arg_scope: cleanup::CustomScopeIndex,\n-                                    bcx: Block<'blk, 'tcx>,\n                                     args: &[ast::Arg],\n                                     arg_datums: Vec<RvalueDatum<'tcx>>)\n                                     -> Block<'blk, 'tcx> {\n@@ -1640,10 +1639,7 @@ fn copy_args_to_allocas<'blk, 'tcx>(fcx: &FunctionContext<'blk, 'tcx>,\n         // the event it's not truly needed.\n \n         bcx = _match::store_arg(bcx, &*args[i].pat, arg_datum, arg_scope_id);\n-\n-        if fcx.ccx.sess().opts.debuginfo == FullDebugInfo {\n-            debuginfo::create_argument_metadata(bcx, &args[i]);\n-        }\n+        debuginfo::create_argument_metadata(bcx, &args[i]);\n     }\n \n     bcx\n@@ -1693,9 +1689,7 @@ fn copy_unboxed_closure_args_to_allocas<'blk, 'tcx>(\n                                 tuple_element_datum,\n                                 arg_scope_id);\n \n-        if bcx.fcx.ccx.sess().opts.debuginfo == FullDebugInfo {\n-            debuginfo::create_argument_metadata(bcx, &args[j]);\n-        }\n+        debuginfo::create_argument_metadata(bcx, &args[j]);\n     }\n \n     bcx\n@@ -1868,9 +1862,8 @@ pub fn trans_closure<'a, 'b, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     bcx = match closure_env.kind {\n         closure::NotClosure | closure::BoxedClosure(..) => {\n-            copy_args_to_allocas(&fcx,\n+            copy_args_to_allocas(bcx,\n                                  arg_scope,\n-                                 bcx,\n                                  &decl.inputs[],\n                                  arg_datums)\n         }"}, {"sha": "5dc939dc2025bca7d192bd396e7112d7b2568e8f", "filename": "src/librustc_trans/trans/controlflow.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6dc94f744ef1513991939488594e2c1f0ebb110a/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc94f744ef1513991939488594e2c1f0ebb110a/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs?ref=6dc94f744ef1513991939488594e2c1f0ebb110a", "patch": "@@ -28,7 +28,6 @@ use trans::type_::Type;\n use trans;\n use middle::ty;\n use middle::ty::MethodCall;\n-use session::config::FullDebugInfo;\n use util::ppaux::Repr;\n use util::ppaux;\n \n@@ -66,10 +65,7 @@ pub fn trans_stmt<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n             match d.node {\n                 ast::DeclLocal(ref local) => {\n                     bcx = init_local(bcx, &**local);\n-                    if cx.sess().opts.debuginfo == FullDebugInfo {\n-                        trans::debuginfo::create_local_var_metadata(bcx,\n-                                                                    &**local);\n-                    }\n+                    debuginfo::create_local_var_metadata(bcx, &**local);\n                 }\n                 // Inner items are visited by `trans_item`/`trans_meth`.\n                 ast::DeclItem(_) => {},"}, {"sha": "a03a5090c050bc9f73b33618f523a8311c7c596e", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6dc94f744ef1513991939488594e2c1f0ebb110a/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc94f744ef1513991939488594e2c1f0ebb110a/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=6dc94f744ef1513991939488594e2c1f0ebb110a", "patch": "@@ -854,7 +854,9 @@ pub fn create_global_var_metadata(cx: &CrateContext,\n /// local in `bcx.fcx.lllocals`.\n /// Adds the created metadata nodes directly to the crate's IR.\n pub fn create_local_var_metadata(bcx: Block, local: &ast::Local) {\n-    if bcx.unreachable.get() || fn_should_be_ignored(bcx.fcx) {\n+    if bcx.unreachable.get() ||\n+       fn_should_be_ignored(bcx.fcx) ||\n+       bcx.sess().opts.debuginfo != FullDebugInfo  {\n         return;\n     }\n \n@@ -898,7 +900,9 @@ pub fn create_captured_var_metadata<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                                 env_index: uint,\n                                                 captured_by_ref: bool,\n                                                 span: Span) {\n-    if bcx.unreachable.get() || fn_should_be_ignored(bcx.fcx) {\n+    if bcx.unreachable.get() ||\n+       fn_should_be_ignored(bcx.fcx) ||\n+       bcx.sess().opts.debuginfo != FullDebugInfo {\n         return;\n     }\n \n@@ -981,7 +985,9 @@ pub fn create_captured_var_metadata<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n pub fn create_match_binding_metadata<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                                  variable_ident: ast::Ident,\n                                                  binding: BindingInfo<'tcx>) {\n-    if bcx.unreachable.get() || fn_should_be_ignored(bcx.fcx) {\n+    if bcx.unreachable.get() ||\n+       fn_should_be_ignored(bcx.fcx) ||\n+       bcx.sess().opts.debuginfo != FullDebugInfo {\n         return;\n     }\n \n@@ -1021,7 +1027,9 @@ pub fn create_match_binding_metadata<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n /// argument in `bcx.fcx.lllocals`.\n /// Adds the created metadata nodes directly to the crate's IR.\n pub fn create_argument_metadata(bcx: Block, arg: &ast::Arg) {\n-    if bcx.unreachable.get() || fn_should_be_ignored(bcx.fcx) {\n+    if bcx.unreachable.get() ||\n+       fn_should_be_ignored(bcx.fcx) ||\n+       bcx.sess().opts.debuginfo != FullDebugInfo {\n         return;\n     }\n \n@@ -1075,7 +1083,9 @@ pub fn create_argument_metadata(bcx: Block, arg: &ast::Arg) {\n /// loop variable in `bcx.fcx.lllocals`.\n /// Adds the created metadata nodes directly to the crate's IR.\n pub fn create_for_loop_var_metadata(bcx: Block, pat: &ast::Pat) {\n-    if bcx.unreachable.get() || fn_should_be_ignored(bcx.fcx) {\n+    if bcx.unreachable.get() ||\n+       fn_should_be_ignored(bcx.fcx) ||\n+       bcx.sess().opts.debuginfo != FullDebugInfo {\n         return;\n     }\n "}, {"sha": "00de4497cedbf0ee2e7e88438a350dc0b4f79372", "filename": "src/test/debuginfo/limited-debuginfo.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6dc94f744ef1513991939488594e2c1f0ebb110a/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc94f744ef1513991939488594e2c1f0ebb110a/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs?ref=6dc94f744ef1513991939488594e2c1f0ebb110a", "patch": "@@ -48,7 +48,11 @@ fn zzz() {()}\n fn some_function(a: int, b: int) {\n     let some_variable = Struct { a: 11, b: 22 };\n     let some_other_variable = 23i;\n-    zzz(); // #break\n+\n+    for x in range(0, 1) {\n+        zzz(); // #break\n+    }\n }\n \n fn some_other_function(a: int, b: int) -> bool { true }\n+"}]}