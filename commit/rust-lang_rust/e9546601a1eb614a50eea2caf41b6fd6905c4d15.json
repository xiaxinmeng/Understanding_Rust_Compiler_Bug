{"sha": "e9546601a1eb614a50eea2caf41b6fd6905c4d15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NTQ2NjAxYTFlYjYxNGE1MGVlYTJjYWY0MWI2ZmQ2OTA1YzRkMTU=", "commit": {"author": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-12T13:24:09Z"}, "committer": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-30T17:10:29Z"}, "message": "rustc_codegen_llvm: use safe references for PassManagerBuilder.", "tree": {"sha": "967e6f6070e2508211251e4a300e743a91851150", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/967e6f6070e2508211251e4a300e743a91851150"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9546601a1eb614a50eea2caf41b6fd6905c4d15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9546601a1eb614a50eea2caf41b6fd6905c4d15", "html_url": "https://github.com/rust-lang/rust/commit/e9546601a1eb614a50eea2caf41b6fd6905c4d15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9546601a1eb614a50eea2caf41b6fd6905c4d15/comments", "author": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f73cef5a3bff0da510bfc35f88bb42009af6035", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f73cef5a3bff0da510bfc35f88bb42009af6035", "html_url": "https://github.com/rust-lang/rust/commit/2f73cef5a3bff0da510bfc35f88bb42009af6035"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "c54ce29b4629cb131b7b37303ba3aa1e622f858f", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9546601a1eb614a50eea2caf41b6fd6905c4d15/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9546601a1eb614a50eea2caf41b6fd6905c4d15/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=e9546601a1eb614a50eea2caf41b6fd6905c4d15", "patch": "@@ -2051,7 +2051,7 @@ pub unsafe fn with_llvm_pmb(llmod: &llvm::Module,\n                             config: &ModuleConfig,\n                             opt_level: llvm::CodeGenOptLevel,\n                             prepare_for_thin_lto: bool,\n-                            f: &mut dyn FnMut(llvm::PassManagerBuilderRef)) {\n+                            f: &mut dyn FnMut(&llvm::PassManagerBuilder)) {\n     use std::ptr;\n \n     // Create the PassManagerBuilder for LLVM. We configure it with"}, {"sha": "8d982303614fa9af4b05b1f08c5b5a42ae3efb28", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e9546601a1eb614a50eea2caf41b6fd6905c4d15/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9546601a1eb614a50eea2caf41b6fd6905c4d15/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=e9546601a1eb614a50eea2caf41b6fd6905c4d15", "patch": "@@ -393,7 +393,6 @@ extern { pub type MemoryBuffer; }\n extern { pub type PassManager; }\n pub type PassManagerRef = *mut PassManager;\n extern { pub type PassManagerBuilder; }\n-pub type PassManagerBuilderRef = *mut PassManagerBuilder;\n extern { pub type ObjectFile; }\n extern { pub type SectionIterator; }\n pub type SectionIteratorRef = *mut SectionIterator;\n@@ -1119,23 +1118,23 @@ extern \"C\" {\n \n     pub fn LLVMInitializePasses();\n \n-    pub fn LLVMPassManagerBuilderCreate() -> PassManagerBuilderRef;\n-    pub fn LLVMPassManagerBuilderDispose(PMB: PassManagerBuilderRef);\n-    pub fn LLVMPassManagerBuilderSetSizeLevel(PMB: PassManagerBuilderRef, Value: Bool);\n-    pub fn LLVMPassManagerBuilderSetDisableUnrollLoops(PMB: PassManagerBuilderRef, Value: Bool);\n-    pub fn LLVMPassManagerBuilderUseInlinerWithThreshold(PMB: PassManagerBuilderRef,\n+    pub fn LLVMPassManagerBuilderCreate() -> &'static mut PassManagerBuilder;\n+    pub fn LLVMPassManagerBuilderDispose(PMB: &'static mut PassManagerBuilder);\n+    pub fn LLVMPassManagerBuilderSetSizeLevel(PMB: &PassManagerBuilder, Value: Bool);\n+    pub fn LLVMPassManagerBuilderSetDisableUnrollLoops(PMB: &PassManagerBuilder, Value: Bool);\n+    pub fn LLVMPassManagerBuilderUseInlinerWithThreshold(PMB: &PassManagerBuilder,\n                                                          threshold: c_uint);\n-    pub fn LLVMPassManagerBuilderPopulateModulePassManager(PMB: PassManagerBuilderRef,\n+    pub fn LLVMPassManagerBuilderPopulateModulePassManager(PMB: &PassManagerBuilder,\n                                                            PM: PassManagerRef);\n \n-    pub fn LLVMPassManagerBuilderPopulateFunctionPassManager(PMB: PassManagerBuilderRef,\n+    pub fn LLVMPassManagerBuilderPopulateFunctionPassManager(PMB: &PassManagerBuilder,\n                                                              PM: PassManagerRef);\n-    pub fn LLVMPassManagerBuilderPopulateLTOPassManager(PMB: PassManagerBuilderRef,\n+    pub fn LLVMPassManagerBuilderPopulateLTOPassManager(PMB: &PassManagerBuilder,\n                                                         PM: PassManagerRef,\n                                                         Internalize: Bool,\n                                                         RunInliner: Bool);\n     pub fn LLVMRustPassManagerBuilderPopulateThinLTOPassManager(\n-        PMB: PassManagerBuilderRef,\n+        PMB: &PassManagerBuilder,\n         PM: PassManagerRef) -> bool;\n \n     // Stuff that's in rustllvm/ because it's not upstream yet.\n@@ -1439,10 +1438,10 @@ extern \"C\" {\n                                        -> Option<&'static mut TargetMachine>;\n     pub fn LLVMRustDisposeTargetMachine(T: &'static mut TargetMachine);\n     pub fn LLVMRustAddAnalysisPasses(T: TargetMachineRef, PM: PassManagerRef, M: &Module);\n-    pub fn LLVMRustAddBuilderLibraryInfo(PMB: PassManagerBuilderRef,\n-                                         M: &Module,\n+    pub fn LLVMRustAddBuilderLibraryInfo(PMB: &'a PassManagerBuilder,\n+                                         M: &'a Module,\n                                          DisableSimplifyLibCalls: bool);\n-    pub fn LLVMRustConfigurePassManagerBuilder(PMB: PassManagerBuilderRef,\n+    pub fn LLVMRustConfigurePassManagerBuilder(PMB: &PassManagerBuilder,\n                                                OptLevel: CodeGenOptLevel,\n                                                MergeFunctions: bool,\n                                                SLPVectorize: bool,\n@@ -1470,7 +1469,7 @@ extern \"C\" {\n     pub fn LLVMRustSetLLVMOptions(Argc: c_int, Argv: *const *const c_char);\n     pub fn LLVMRustPrintPasses();\n     pub fn LLVMRustSetNormalizedTarget(M: &Module, triple: *const c_char);\n-    pub fn LLVMRustAddAlwaysInlinePass(P: PassManagerBuilderRef, AddLifetimes: bool);\n+    pub fn LLVMRustAddAlwaysInlinePass(P: &PassManagerBuilder, AddLifetimes: bool);\n     pub fn LLVMRustRunRestrictionPass(M: &Module, syms: *const *const c_char, len: size_t);\n     pub fn LLVMRustMarkAllFunctionsNounwind(M: &Module);\n "}]}