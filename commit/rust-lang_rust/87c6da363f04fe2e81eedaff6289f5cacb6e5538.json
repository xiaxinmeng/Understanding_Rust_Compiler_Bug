{"sha": "87c6da363f04fe2e81eedaff6289f5cacb6e5538", "node_id": "C_kwDOAAsO6NoAKDg3YzZkYTM2M2YwNGZlMmU4MWVlZGFmZjYyODlmNWNhY2I2ZTU1Mzg", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-09-01T04:27:31Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-09-05T13:25:49Z"}, "message": "separate the receiver from arguments in HIR", "tree": {"sha": "38b8cbd17c7e656b3e50c76dc469db8f4dce760e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38b8cbd17c7e656b3e50c76dc469db8f4dce760e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87c6da363f04fe2e81eedaff6289f5cacb6e5538", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87c6da363f04fe2e81eedaff6289f5cacb6e5538", "html_url": "https://github.com/rust-lang/rust/commit/87c6da363f04fe2e81eedaff6289f5cacb6e5538", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87c6da363f04fe2e81eedaff6289f5cacb6e5538/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "html_url": "https://github.com/rust-lang/rust/commit/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d"}], "stats": {"total": 211, "additions": 115, "deletions": 96}, "files": [{"sha": "8a45cd22953f3395b6f0c0a23f314c081ae3d825", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -68,10 +68,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         ParenthesizedGenericArgs::Err,\n                         ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                     ));\n-                    let args = self.arena.alloc_from_iter(\n-                        [&*receiver].into_iter().chain(args.iter()).map(|x| self.lower_expr_mut(x)),\n-                    );\n-                    hir::ExprKind::MethodCall(hir_seg, args, self.lower_span(span))\n+                    let receiver = self.lower_expr(receiver);\n+                    let args =\n+                        self.arena.alloc_from_iter(args.iter().map(|x| self.lower_expr_mut(x)));\n+                    hir::ExprKind::MethodCall(hir_seg, receiver, args, self.lower_span(span))\n                 }\n                 ExprKind::Binary(binop, ref lhs, ref rhs) => {\n                     let binop = self.lower_binop(binop);"}, {"sha": "f168a44c04356b8e091d9d103d3e2218144fcfde", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -711,8 +711,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                             Applicability::MachineApplicable,\n                         );\n                         self.suggested = true;\n-                    } else if let hir::ExprKind::MethodCall(_path, args @ [_, ..], sp) = expr.kind\n-                        && let hir::ExprKind::Index(val, index) = args[0].kind\n+                    } else if let hir::ExprKind::MethodCall(_path, receiver, _, sp) = expr.kind\n+                        && let hir::ExprKind::Index(val, index) = receiver.kind\n                         && expr.span == self.assign_span\n                     {\n                         // val[index].path(args..);\n@@ -724,7 +724,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                     \".get_mut(\".to_string(),\n                                 ),\n                                 (\n-                                    index.span.shrink_to_hi().with_hi(args[0].span.hi()),\n+                                    index.span.shrink_to_hi().with_hi(receiver.span.hi()),\n                                     \").map(|val| val\".to_string(),\n                                 ),\n                                 (sp.shrink_to_hi(), \")\".to_string()),\n@@ -911,11 +911,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                                         [\n                                                             Expr {\n                                                                 kind:\n-                                                                    MethodCall(\n-                                                                        path_segment,\n-                                                                        _args,\n-                                                                        span,\n-                                                                    ),\n+                                                                    MethodCall(path_segment, _, _, span),\n                                                                 hir_id,\n                                                                 ..\n                                                             },"}, {"sha": "31233062e9b3a7cd0d275dc388e2205ac955a614", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -901,13 +901,13 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         match expr.kind {\n             hir::ExprKind::MethodCall(.., args, _) => {\n                 // only the first closre parameter of the method. args[0] is MethodCall PathSegment\n-                for i in 1..args.len() {\n+\n+                for arg in args {\n                     if let hir::ExprKind::Closure(hir::Closure {\n                         capture_clause: hir::CaptureBy::Ref,\n                         ..\n-                    }) = args[i].kind\n-                    {\n-                        closure_span = Some(args[i].span.shrink_to_lo());\n+                    }) = arg.kind {\n+                        closure_span = Some(arg.span.shrink_to_lo());\n                         break;\n                     }\n                 }"}, {"sha": "3367df56a297a91fb4ebdfb36f047bdd9b1fe3b6", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -1893,7 +1893,7 @@ pub enum ExprKind<'hir> {\n     /// the `hir_id` of the `MethodCall` node itself.\n     ///\n     /// [`type_dependent_def_id`]: ../../rustc_middle/ty/struct.TypeckResults.html#method.type_dependent_def_id\n-    MethodCall(&'hir PathSegment<'hir>, &'hir [Expr<'hir>], Span),\n+    MethodCall(&'hir PathSegment<'hir>, &'hir Expr<'hir>, &'hir [Expr<'hir>], Span),\n     /// A tuple (e.g., `(a, b, c, d)`).\n     Tup(&'hir [Expr<'hir>]),\n     /// A binary operation (e.g., `a + b`, `a * b`).\n@@ -3497,7 +3497,7 @@ mod size_asserts {\n     // These are in alphabetical order, which is easy to maintain.\n     static_assert_size!(Block<'_>, 48);\n     static_assert_size!(Body<'_>, 32);\n-    static_assert_size!(Expr<'_>, 56);\n+    static_assert_size!(Expr<'_>, 64);\n     static_assert_size!(ExprKind<'_>, 40);\n     static_assert_size!(FnDecl<'_>, 40);\n     static_assert_size!(ForeignItem<'_>, 72);"}, {"sha": "2f9b92bfb9fba799bded684fb29cf0f256e53b64", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -1094,8 +1094,9 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             visitor.visit_expr(callee_expression);\n             walk_list!(visitor, visit_expr, arguments);\n         }\n-        ExprKind::MethodCall(ref segment, arguments, _) => {\n+        ExprKind::MethodCall(ref segment, receiver, arguments, _) => {\n             visitor.visit_path_segment(expression.span, segment);\n+            visitor.visit_expr(receiver);\n             walk_list!(visitor, visit_expr, arguments);\n         }\n         ExprKind::Binary(_, ref left_expression, ref right_expression) => {"}, {"sha": "bb694bacfd7e06b2db8790f5e499f5559de5b98f", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -1181,9 +1181,14 @@ impl<'a> State<'a> {\n         self.print_call_post(args)\n     }\n \n-    fn print_expr_method_call(&mut self, segment: &hir::PathSegment<'_>, args: &[hir::Expr<'_>]) {\n-        let base_args = &args[1..];\n-        self.print_expr_maybe_paren(&args[0], parser::PREC_POSTFIX);\n+    fn print_expr_method_call(\n+        &mut self,\n+        segment: &hir::PathSegment<'_>,\n+        receiver: &hir::Expr<'_>,\n+        args: &[hir::Expr<'_>],\n+    ) {\n+        let base_args = args;\n+        self.print_expr_maybe_paren(&receiver, parser::PREC_POSTFIX);\n         self.word(\".\");\n         self.print_ident(segment.ident);\n \n@@ -1394,8 +1399,8 @@ impl<'a> State<'a> {\n             hir::ExprKind::Call(func, args) => {\n                 self.print_expr_call(func, args);\n             }\n-            hir::ExprKind::MethodCall(segment, args, _) => {\n-                self.print_expr_method_call(segment, args);\n+            hir::ExprKind::MethodCall(segment, receiver, args, _) => {\n+                self.print_expr_method_call(segment, receiver, args);\n             }\n             hir::ExprKind::Binary(op, lhs, rhs) => {\n                 self.print_expr_binary(op, lhs, rhs);\n@@ -2413,9 +2418,9 @@ fn contains_exterior_struct_lit(value: &hir::Expr<'_>) -> bool {\n             contains_exterior_struct_lit(x)\n         }\n \n-        hir::ExprKind::MethodCall(.., exprs, _) => {\n+        hir::ExprKind::MethodCall(_, receiver, ..) => {\n             // `X { y: 1 }.bar(...)`\n-            contains_exterior_struct_lit(&exprs[0])\n+            contains_exterior_struct_lit(receiver)\n         }\n \n         _ => false,"}, {"sha": "9efd909f05b35a0af54f4eb87e3e647345106cd1", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -901,7 +901,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n                     }\n                 }\n             }\n-            hir::ExprKind::MethodCall(segment, _, _) => {\n+            hir::ExprKind::MethodCall(segment, ..) => {\n                 if let Some(def_id) = self.typeck_results.type_dependent_def_id(expr.hir_id) {\n                     let generics = tcx.generics_of(def_id);\n                     let insertable: Option<_> = try {\n@@ -1132,7 +1132,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FindInferSourceVisitor<'a, 'tcx> {\n                 let generic_args = &generics.own_substs_no_defaults(tcx, substs)\n                     [generics.own_counts().lifetimes..];\n                 let span = match expr.kind {\n-                    ExprKind::MethodCall(path, _, _) => path.ident.span,\n+                    ExprKind::MethodCall(path, ..) => path.ident.span,\n                     _ => expr.span,\n                 };\n \n@@ -1181,20 +1181,20 @@ impl<'a, 'tcx> Visitor<'tcx> for FindInferSourceVisitor<'a, 'tcx> {\n             })\n             .any(|generics| generics.has_impl_trait())\n         };\n-        if let ExprKind::MethodCall(path, args, span) = expr.kind\n+        if let ExprKind::MethodCall(path, receiver, args, span) = expr.kind\n             && let Some(substs) = self.node_substs_opt(expr.hir_id)\n             && substs.iter().any(|arg| self.generic_arg_contains_target(arg))\n             && let Some(def_id) = self.typeck_results.type_dependent_def_id(expr.hir_id)\n             && self.infcx.tcx.trait_of_item(def_id).is_some()\n             && !has_impl_trait(def_id)\n         {\n             let successor =\n-                args.get(1).map_or_else(|| (\")\", span.hi()), |arg| (\", \", arg.span.lo()));\n+                args.get(0).map_or_else(|| (\")\", span.hi()), |arg| (\", \", arg.span.lo()));\n             let substs = self.infcx.resolve_vars_if_possible(substs);\n             self.update_infer_source(InferSource {\n                 span: path.ident.span,\n                 kind: InferSourceKind::FullyQualifiedMethodCall {\n-                    receiver: args.first().unwrap(),\n+                    receiver,\n                     successor,\n                     substs,\n                     def_id,"}, {"sha": "fb79daf29ee1522d8e630a1906437f06182bc869", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> LateLintPass<'tcx> for ArrayIntoIter {\n         }\n \n         // We only care about method call expressions.\n-        if let hir::ExprKind::MethodCall(call, args, _) = &expr.kind {\n+        if let hir::ExprKind::MethodCall(call, receiver, ..) = &expr.kind {\n             if call.ident.name != sym::into_iter {\n                 return;\n             }\n@@ -75,7 +75,7 @@ impl<'tcx> LateLintPass<'tcx> for ArrayIntoIter {\n             };\n \n             // As this is a method call expression, we have at least one argument.\n-            let receiver_arg = &args[0];\n+            let receiver_arg = receiver;\n             let receiver_ty = cx.typeck_results().expr_ty(receiver_arg);\n             let adjustments = cx.typeck_results().expr_adjustments(receiver_arg);\n "}, {"sha": "7d62d5ac98d6ec2e8b87ed9b1c521a847d977504", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -2412,13 +2412,13 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n                         _ => {}\n                     }\n                 }\n-            } else if let hir::ExprKind::MethodCall(_, ref args, _) = expr.kind {\n+            } else if let hir::ExprKind::MethodCall(_, receiver, ..) = expr.kind {\n                 // Find problematic calls to `MaybeUninit::assume_init`.\n                 let def_id = cx.typeck_results().type_dependent_def_id(expr.hir_id)?;\n                 if cx.tcx.is_diagnostic_item(sym::assume_init, def_id) {\n                     // This is a call to *some* method named `assume_init`.\n                     // See if the `self` parameter is one of the dangerous constructors.\n-                    if let hir::ExprKind::Call(ref path_expr, _) = args[0].kind {\n+                    if let hir::ExprKind::Call(ref path_expr, _) = receiver.kind {\n                         if let hir::ExprKind::Path(ref qpath) = path_expr.kind {\n                             let def_id = cx.qpath_res(qpath, path_expr.hir_id).opt_def_id()?;\n                             match cx.tcx.get_diagnostic_name(def_id) {"}, {"sha": "23e7f21adf8e5bef8861634e20c4c20c4c6c5c93", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -51,7 +51,7 @@ fn typeck_results_of_method_fn<'tcx>(\n     expr: &Expr<'_>,\n ) -> Option<(Span, DefId, ty::subst::SubstsRef<'tcx>)> {\n     match expr.kind {\n-        ExprKind::MethodCall(segment, _, _)\n+        ExprKind::MethodCall(segment, ..)\n             if let Some(def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) =>\n         {\n             Some((segment.ident.span, def_id, cx.typeck_results().node_substs(expr.hir_id)))"}, {"sha": "646812589e3ce16abe11f919fc88cc1c0c77c679", "filename": "compiler/rustc_lint/src/methods.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -44,9 +44,13 @@ fn in_macro(span: Span) -> bool {\n \n fn first_method_call<'tcx>(\n     expr: &'tcx Expr<'tcx>,\n-) -> Option<(&'tcx PathSegment<'tcx>, &'tcx [Expr<'tcx>])> {\n-    if let ExprKind::MethodCall(path, args, _) = &expr.kind {\n-        if args.iter().any(|e| e.span.from_expansion()) { None } else { Some((path, *args)) }\n+) -> Option<(&'tcx PathSegment<'tcx>, &'tcx Expr<'tcx>)> {\n+    if let ExprKind::MethodCall(path, receiver, args, ..) = &expr.kind {\n+        if args.iter().any(|e| e.span.from_expansion()) || receiver.span.from_expansion() {\n+            None\n+        } else {\n+            Some((path, *receiver))\n+        }\n     } else {\n         None\n     }\n@@ -59,14 +63,14 @@ impl<'tcx> LateLintPass<'tcx> for TemporaryCStringAsPtr {\n         }\n \n         match first_method_call(expr) {\n-            Some((path, args)) if path.ident.name == sym::as_ptr => {\n-                let unwrap_arg = &args[0];\n+            Some((path, receiver)) if path.ident.name == sym::as_ptr => {\n+                let unwrap_arg = receiver;\n                 let as_ptr_span = path.ident.span;\n                 match first_method_call(unwrap_arg) {\n-                    Some((path, args))\n+                    Some((path, receiver))\n                         if path.ident.name == sym::unwrap || path.ident.name == sym::expect =>\n                     {\n-                        let source_arg = &args[0];\n+                        let source_arg = receiver;\n                         lint_cstring_as_ptr(cx, as_ptr_span, source_arg, unwrap_arg);\n                     }\n                     _ => return,"}, {"sha": "d1449496d331578be434f7053145359d05767316", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -41,7 +41,7 @@ declare_lint_pass!(NoopMethodCall => [NOOP_METHOD_CALL]);\n impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         // We only care about method calls.\n-        let ExprKind::MethodCall(call, elements, _) = &expr.kind else {\n+        let ExprKind::MethodCall(call, receiver, ..) = &expr.kind else {\n             return\n         };\n         // We only care about method calls corresponding to the `Clone`, `Deref` and `Borrow`\n@@ -81,7 +81,6 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n         ) {\n             return;\n         }\n-        let receiver = &elements[0];\n         let receiver_ty = cx.typeck_results().expr_ty(receiver);\n         let expr_ty = cx.typeck_results().expr_ty_adjusted(expr);\n         if receiver_ty != expr_ty {"}, {"sha": "9736b5557036c8093ca966819030b1ebb544bafc", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -1458,7 +1458,7 @@ impl InvalidAtomicOrdering {\n             sym::AtomicI64,\n             sym::AtomicI128,\n         ];\n-        if let ExprKind::MethodCall(ref method_path, args, _) = &expr.kind\n+        if let ExprKind::MethodCall(ref method_path, _, args, _) = &expr.kind\n             && recognized_names.contains(&method_path.ident.name)\n             && let Some(m_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id)\n             && let Some(impl_did) = cx.tcx.impl_of_method(m_def_id)\n@@ -1494,8 +1494,8 @@ impl InvalidAtomicOrdering {\n     fn check_atomic_load_store(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if let Some((method, args)) = Self::inherent_atomic_method_call(cx, expr, &[sym::load, sym::store])\n             && let Some((ordering_arg, invalid_ordering)) = match method {\n-                sym::load => Some((&args[1], sym::Release)),\n-                sym::store => Some((&args[2], sym::Acquire)),\n+                sym::load => Some((&args[0], sym::Release)),\n+                sym::store => Some((&args[1], sym::Acquire)),\n                 _ => None,\n             }\n             && let Some(ordering) = Self::match_ordering(cx, ordering_arg)\n@@ -1536,8 +1536,8 @@ impl InvalidAtomicOrdering {\n             else {return };\n \n         let fail_order_arg = match method {\n-            sym::fetch_update => &args[2],\n-            sym::compare_exchange | sym::compare_exchange_weak => &args[4],\n+            sym::fetch_update => &args[1],\n+            sym::compare_exchange | sym::compare_exchange_weak => &args[3],\n             _ => return,\n         };\n "}, {"sha": "b4b5a9d868d927b92f80e154e2c3f64ec116a976", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -261,15 +261,18 @@ impl<'tcx> Cx<'tcx> {\n \n         let kind = match expr.kind {\n             // Here comes the interesting stuff:\n-            hir::ExprKind::MethodCall(segment, ref args, fn_span) => {\n+            hir::ExprKind::MethodCall(segment, receiver, ref args, fn_span) => {\n                 // Rewrite a.b(c) into UFCS form like Trait::b(a, c)\n                 let expr = self.method_callee(expr, segment.ident.span, None);\n                 // When we apply adjustments to the receiver, use the span of\n                 // the overall method call for better diagnostics. args[0]\n                 // is guaranteed to exist, since a method call always has a receiver.\n-                let old_adjustment_span = self.adjustment_span.replace((args[0].hir_id, expr_span));\n+                let old_adjustment_span = self.adjustment_span.replace((receiver.hir_id, expr_span));\n                 info!(\"Using method span: {:?}\", expr.span);\n-                let args = self.mirror_exprs(args);\n+                let args = std::iter::once(receiver)\n+                    .chain(args.iter())\n+                    .map(|expr| self.mirror_expr(expr))\n+                    .collect();\n                 self.adjustment_span = old_adjustment_span;\n                 ExprKind::Call {\n                     ty: expr.ty,"}, {"sha": "214d357cae00528e57d9d2e9b5320414b34a1be7", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -1039,9 +1039,12 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 self.propagate_through_expr(&f, succ)\n             }\n \n-            hir::ExprKind::MethodCall(.., ref args, _) => {\n+            hir::ExprKind::MethodCall(.., receiver, ref args, _) => {\n                 let succ = self.check_is_ty_uninhabited(expr, succ);\n-                self.propagate_through_exprs(args, succ)\n+                std::iter::once(receiver)\n+                    .chain(args.iter())\n+                    .rev()\n+                    .fold(succ, |succ, expr| self.propagate_through_expr(expr, succ))\n             }\n \n             hir::ExprKind::Tup(ref exprs) => self.propagate_through_exprs(exprs, succ),"}, {"sha": "1bd6b857e0626bbfe4d3f37b4f68ac52f722b992", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -803,6 +803,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n         &mut self,\n         ex: &'tcx hir::Expr<'tcx>,\n         seg: &'tcx hir::PathSegment<'tcx>,\n+        receiver: &'tcx hir::Expr<'tcx>,\n         args: &'tcx [hir::Expr<'tcx>],\n     ) {\n         debug!(\"process_method_call {:?} {:?}\", ex, ex.span);\n@@ -823,6 +824,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n         }\n \n         // walk receiver and args\n+        self.visit_expr(receiver);\n         walk_list!(self, visit_expr, args);\n     }\n \n@@ -1340,7 +1342,9 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                 let res = self.save_ctxt.get_path_res(hir_expr.hir_id);\n                 self.process_struct_lit(ex, path, fields, adt.variant_of_res(res), *rest)\n             }\n-            hir::ExprKind::MethodCall(ref seg, args, _) => self.process_method_call(ex, seg, args),\n+            hir::ExprKind::MethodCall(ref seg, receiver, args, _) => {\n+                self.process_method_call(ex, seg, receiver, args)\n+            }\n             hir::ExprKind::Field(ref sub_ex, _) => {\n                 self.visit_expr(&sub_ex);\n "}, {"sha": "7ea3ed06e61293200875a14cfc74785b03f7a74f", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -590,15 +590,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let closure_params_len = closure_fn_decl.inputs.len();\n         let (\n             Some(Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::MethodCall(method_path, method_expr, _),\n+                kind: hir::ExprKind::MethodCall(method_path, receiver, ..),\n                 ..\n             })),\n             1,\n         ) = (hir, closure_params_len) else {\n             return None;\n         };\n \n-        let self_ty = self.typeck_results.borrow().expr_ty(&method_expr[0]);\n+        let self_ty = self.typeck_results.borrow().expr_ty(receiver);\n         let name = method_path.ident.name;\n         let is_as_ref_able = match self_ty.peel_refs().kind() {\n             ty::Adt(def, _) => {\n@@ -767,11 +767,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 };\n                 if self.can_coerce(ref_ty, expected) {\n                     let mut sugg_sp = sp;\n-                    if let hir::ExprKind::MethodCall(ref segment, ref args, _) = expr.kind {\n+                    if let hir::ExprKind::MethodCall(ref segment, receiver, args, _) = expr.kind {\n                         let clone_trait =\n                             self.tcx.require_lang_item(LangItem::Clone, Some(segment.ident.span));\n-                        if let ([arg], Some(true), sym::clone) = (\n-                            &args[..],\n+                        if let (true, Some(true), sym::clone) = (\n+                            args.is_empty(),\n                             self.typeck_results.borrow().type_dependent_def_id(expr.hir_id).map(\n                                 |did| {\n                                     let ai = self.tcx.associated_item(did);\n@@ -782,7 +782,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         ) {\n                             // If this expression had a clone call when suggesting borrowing\n                             // we want to suggest removing it because it'd now be unnecessary.\n-                            sugg_sp = arg.span;\n+                            sugg_sp = receiver.span;\n                         }\n                     }\n                     if let Ok(src) = sm.span_to_snippet(sugg_sp) {"}, {"sha": "5c7b8121a61e002749260bebf33d8c110dcf5b3f", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -324,8 +324,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             ExprKind::Block(body, _) => self.check_block_with_expected(&body, expected),\n             ExprKind::Call(callee, args) => self.check_call(expr, &callee, args, expected),\n-            ExprKind::MethodCall(segment, args, _) => {\n-                self.check_method_call(expr, segment, args, expected)\n+            ExprKind::MethodCall(segment, receiver, args, _) => {\n+                self.check_method_call(expr, segment, receiver, args, expected)\n             }\n             ExprKind::Cast(e, t) => self.check_expr_cast(e, t, expr),\n             ExprKind::Type(e, t) => {\n@@ -1195,13 +1195,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         expr: &'tcx hir::Expr<'tcx>,\n         segment: &hir::PathSegment<'_>,\n+        receiver: &'tcx hir::Expr<'tcx>,\n         args: &'tcx [hir::Expr<'tcx>],\n         expected: Expectation<'tcx>,\n     ) -> Ty<'tcx> {\n-        let rcvr = &args[0];\n+        let rcvr = &receiver;\n         let rcvr_t = self.check_expr(&rcvr);\n         // no need to check for bot/err -- callee does that\n-        let rcvr_t = self.structurally_resolved_type(args[0].span, rcvr_t);\n+        let rcvr_t = self.structurally_resolved_type(receiver.span, rcvr_t);\n         let span = segment.ident.span;\n \n         let method = match self.lookup_method(rcvr_t, segment, span, expr, rcvr, args) {\n@@ -1218,9 +1219,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         span,\n                         rcvr_t,\n                         segment.ident,\n-                        SelfSource::MethodCall(&args[0]),\n+                        SelfSource::MethodCall(receiver),\n                         error,\n-                        Some(args),\n+                        Some((receiver, args)),\n                     ) {\n                         err.emit();\n                     }\n@@ -1230,14 +1231,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         // Call the generic checker.\n-        self.check_method_argument_types(\n-            span,\n-            expr,\n-            method,\n-            &args[1..],\n-            DontTupleArguments,\n-            expected,\n-        )\n+        self.check_method_argument_types(span, expr, method, &args, DontTupleArguments, expected)\n     }\n \n     fn check_expr_cast("}, {"sha": "c59638f5d6f9f77a6a98c0c4b6103342a0cad91b", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -987,7 +987,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if found != self.tcx.types.unit {\n             return;\n         }\n-        if let ExprKind::MethodCall(path_segment, [rcvr, ..], _) = expr.kind {\n+        if let ExprKind::MethodCall(path_segment, rcvr, ..) = expr.kind {\n             if self\n                 .typeck_results\n                 .borrow()"}, {"sha": "3805de3cd4df58b9cd8da02fdc186cb3e28e829e", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -478,7 +478,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n             hir::ExprKind::Call(hir::Expr { span, .. }, _) => (call_span, *span, None, false),\n-            hir::ExprKind::MethodCall(path_segment, _, span) => {\n+            hir::ExprKind::MethodCall(path_segment, _, _, span) => {\n                 let ident_span = path_segment.ident.span;\n                 let ident_span = if let Some(args) = path_segment.args {\n                     ident_span.with_hi(args.span_ext.hi())\n@@ -530,13 +530,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .collect();\n         let callee_expr = match &call_expr.peel_blocks().kind {\n             hir::ExprKind::Call(callee, _) => Some(*callee),\n-            hir::ExprKind::MethodCall(_, callee, _) => {\n+            hir::ExprKind::MethodCall(_, receiver, ..) => {\n                 if let Some((DefKind::AssocFn, def_id)) =\n                     self.typeck_results.borrow().type_dependent_def(call_expr.hir_id)\n                     && let Some(assoc) = tcx.opt_associated_item(def_id)\n                     && assoc.fn_has_self_parameter\n                 {\n-                    Some(&callee[0])\n+                    Some(*receiver)\n                 } else {\n                     None\n                 }\n@@ -1805,6 +1805,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 param,\n                                 *call_hir_id,\n                                 callee.span,\n+                                None,\n                                 args,\n                             )\n                         {\n@@ -1823,7 +1824,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n             }\n-            hir::ExprKind::MethodCall(segment, args, ..) => {\n+            hir::ExprKind::MethodCall(segment, receiver, args, ..) => {\n                 for param in [param_to_point_at, fallback_param_to_point_at, self_param_to_point_at]\n                     .into_iter()\n                     .flatten()\n@@ -1834,6 +1835,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         param,\n                         hir_id,\n                         segment.ident.span,\n+                        Some(receiver),\n                         args,\n                     ) {\n                         return true;\n@@ -1901,7 +1903,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         param_to_point_at: ty::GenericArg<'tcx>,\n         call_hir_id: hir::HirId,\n         callee_span: Span,\n-        args: &[hir::Expr<'tcx>],\n+        receiver: Option<&'tcx hir::Expr<'tcx>>,\n+        args: &'tcx [hir::Expr<'tcx>],\n     ) -> bool {\n         let sig = self.tcx.fn_sig(def_id).skip_binder();\n         let args_referencing_param: Vec<_> = sig\n@@ -1910,6 +1913,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .enumerate()\n             .filter(|(_, ty)| find_param_in_ty(**ty, param_to_point_at))\n             .collect();\n+        let args: Vec<&'tcx hir::Expr<'tcx>> = if let Some(receiver) = receiver {\n+            std::iter::once(receiver).chain(args.iter()).collect()\n+        } else {\n+            args.iter().collect()\n+        };\n \n         // If there's one field that references the given generic, great!\n         if let [(idx, _)] = args_referencing_param.as_slice() && let Some(arg) = args.get(*idx) {"}, {"sha": "3d9677ecf75c7f8934206dcdb92e55ca91337359", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -1049,7 +1049,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         found_ty: Ty<'tcx>,\n         expr: &hir::Expr<'_>,\n     ) {\n-        let hir::ExprKind::MethodCall(segment, &[ref callee_expr], _) = expr.kind else { return; };\n+        let hir::ExprKind::MethodCall(segment, callee_expr, &[], _) = expr.kind else { return; };\n         let Some(clone_trait_did) = self.tcx.lang_items().clone_trait() else { return; };\n         let ty::Ref(_, pointee_ty, _) = found_ty.kind() else { return };\n         let results = self.typeck_results.borrow();"}, {"sha": "016f4056bd90302ad9aeb4553a9802d878c5e5b0", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -434,7 +434,8 @@ impl<'a, 'tcx> Visitor<'tcx> for DropRangeVisitor<'a, 'tcx> {\n \n                 self.handle_uninhabited_return(expr);\n             }\n-            ExprKind::MethodCall(_, exprs, _) => {\n+            ExprKind::MethodCall(_, receiver, exprs, _) => {\n+                self.visit_expr(receiver);\n                 for expr in exprs {\n                     self.visit_expr(expr);\n                 }"}, {"sha": "392695cca6849fd09ad026dce49981875915c645", "filename": "compiler/rustc_typeck/src/check/method/prelude2021.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -160,7 +160,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     if precise {\n                         let args = args\n                             .iter()\n-                            .skip(1)\n                             .map(|arg| {\n                                 let span = arg.span.find_ancestor_inside(sp).unwrap_or_default();\n                                 format!("}, {"sha": "124ac5c24fa5cef0ae58199d2318a92a98b12446", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -95,7 +95,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         item_name: Ident,\n         source: SelfSource<'tcx>,\n         error: MethodError<'tcx>,\n-        args: Option<&'tcx [hir::Expr<'tcx>]>,\n+        args: Option<(&'tcx hir::Expr<'tcx>, &'tcx [hir::Expr<'tcx>])>,\n     ) -> Option<DiagnosticBuilder<'_, ErrorGuaranteed>> {\n         // Avoid suggestions when we don't know what's going on.\n         if rcvr_ty.references_error() {\n@@ -998,7 +998,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         span,\n                         rcvr_ty,\n                         item_name,\n-                        args.map(|args| args.len()),\n+                        args.map(|(_, args)| args.len() + 1),\n                         source,\n                         out_of_scope_traits,\n                         &unsatisfied_predicates,\n@@ -2310,7 +2310,7 @@ pub fn all_traits(tcx: TyCtxt<'_>) -> Vec<TraitInfo> {\n \n fn print_disambiguation_help<'tcx>(\n     item_name: Ident,\n-    args: Option<&'tcx [hir::Expr<'tcx>]>,\n+    args: Option<(&'tcx hir::Expr<'tcx>, &'tcx [hir::Expr<'tcx>])>,\n     err: &mut Diagnostic,\n     trait_name: String,\n     rcvr_ty: Ty<'_>,\n@@ -2322,15 +2322,16 @@ fn print_disambiguation_help<'tcx>(\n     fn_has_self_parameter: bool,\n ) {\n     let mut applicability = Applicability::MachineApplicable;\n-    let (span, sugg) = if let (ty::AssocKind::Fn, Some(args)) = (kind, args) {\n+    let (span, sugg) = if let (ty::AssocKind::Fn, Some((receiver, args))) = (kind, args) {\n         let args = format!(\n             \"({}{})\",\n             if rcvr_ty.is_region_ptr() {\n                 if rcvr_ty.is_mutable_ptr() { \"&mut \" } else { \"&\" }\n             } else {\n                 \"\"\n             },\n-            args.iter()\n+            std::iter::once(receiver)\n+                .chain(args.iter())\n                 .map(|arg| source_map.span_to_snippet(arg.span).unwrap_or_else(|_| {\n                     applicability = Applicability::HasPlaceholders;\n                     \"_\".to_owned()"}, {"sha": "f483342b445f60471f3c643dea136efd0b696cfa", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -233,8 +233,9 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 self.consume_exprs(args);\n             }\n \n-            hir::ExprKind::MethodCall(.., args, _) => {\n+            hir::ExprKind::MethodCall(.., receiver, args, _) => {\n                 // callee.m(args)\n+                self.consume_expr(receiver);\n                 self.consume_exprs(args);\n             }\n "}, {"sha": "ec5d03300b178fa9696682d21d5a85c375dd6101", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -758,13 +758,13 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         num_assoc_fn_excess_args: usize,\n         num_trait_generics_except_self: usize,\n     ) {\n-        if let hir::ExprKind::MethodCall(_, args, _) = expr.kind {\n-            assert_eq!(args.len(), 1);\n+        if let hir::ExprKind::MethodCall(_, receiver, args, ..) = expr.kind {\n+            assert_eq!(args.len(), 0);\n             if num_assoc_fn_excess_args == num_trait_generics_except_self {\n                 if let Some(gen_args) = self.gen_args.span_ext()\n                 && let Ok(gen_args) = self.tcx.sess.source_map().span_to_snippet(gen_args)\n-                && let Ok(args) = self.tcx.sess.source_map().span_to_snippet(args[0].span) {\n-                    let sugg = format!(\"{}::{}::{}({})\", self.tcx.item_name(trait_), gen_args, self.tcx.item_name(self.def_id), args);\n+                && let Ok(receiver) = self.tcx.sess.source_map().span_to_snippet(receiver.span) {\n+                    let sugg = format!(\"{}::{}::{}({})\", self.tcx.item_name(trait_), gen_args, self.tcx.item_name(self.def_id), receiver);\n                     err.span_suggestion(expr.span, msg, sugg, Applicability::MaybeIncorrect);\n                 }\n             }"}, {"sha": "ca86ac89e8583a7b16a3b52c4e34a7438c94901d", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c6da363f04fe2e81eedaff6289f5cacb6e5538/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c6da363f04fe2e81eedaff6289f5cacb6e5538/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=87c6da363f04fe2e81eedaff6289f5cacb6e5538", "patch": "@@ -159,7 +159,7 @@ where\n                     return;\n                 }\n             }\n-            hir::ExprKind::MethodCall(path, _, call_span) => {\n+            hir::ExprKind::MethodCall(path, _, _, call_span) => {\n                 let types = tcx.typeck(ex.hir_id.owner);\n                 let Some(def_id) = types.type_dependent_def_id(ex.hir_id) else {\n                     trace!(\"type_dependent_def_id({}) = None\", ex.hir_id);"}]}