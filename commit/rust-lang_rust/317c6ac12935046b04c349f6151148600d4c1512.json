{"sha": "317c6ac12935046b04c349f6151148600d4c1512", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxN2M2YWMxMjkzNTA0NmIwNGMzNDlmNjE1MTE0ODYwMGQ0YzE1MTI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-01T09:26:28Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-04T08:45:31Z"}, "message": "use get_size_and_align to test if an allocation is live", "tree": {"sha": "1259b07bc11a80140f935b941d0941abab2bc06b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1259b07bc11a80140f935b941d0941abab2bc06b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/317c6ac12935046b04c349f6151148600d4c1512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/317c6ac12935046b04c349f6151148600d4c1512", "html_url": "https://github.com/rust-lang/rust/commit/317c6ac12935046b04c349f6151148600d4c1512", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/317c6ac12935046b04c349f6151148600d4c1512/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "842bbd2764797cbb7a8364cb17c0bb4b4a5c8432", "url": "https://api.github.com/repos/rust-lang/rust/commits/842bbd2764797cbb7a8364cb17c0bb4b4a5c8432", "html_url": "https://github.com/rust-lang/rust/commit/842bbd2764797cbb7a8364cb17c0bb4b4a5c8432"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "10dbe1799a5dc6325aa4f025b9884f59dcc1c401", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/317c6ac12935046b04c349f6151148600d4c1512/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317c6ac12935046b04c349f6151148600d4c1512/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=317c6ac12935046b04c349f6151148600d4c1512", "patch": "@@ -372,7 +372,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     }\n \n     fn call_extra_fn(\n-        _ecx: &mut InterpretCx<'mir, 'tcx, Self>,\n+        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         fn_val: !,\n         _args: &[OpTy<'tcx>],\n         _dest: Option<PlaceTy<'tcx>>,"}, {"sha": "5d88274eb968f5a66b935c3f538b00f7d8a1e089", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/317c6ac12935046b04c349f6151148600d4c1512/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317c6ac12935046b04c349f6151148600d4c1512/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=317c6ac12935046b04c349f6151148600d4c1512", "patch": "@@ -127,7 +127,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Execute `fn_val`.  it is the hook's responsibility to advance the instruction\n     /// pointer as appropriate.\n     fn call_extra_fn(\n-        ecx: &mut InterpretCx<'mir, 'tcx, Self>,\n+        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         fn_val: Self::ExtraFnVal,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n         dest: Option<PlaceTy<'tcx, Self::PointerTag>>,"}, {"sha": "642227fe29c16fe1c3714c34a419ccb6aa9366f7", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/317c6ac12935046b04c349f6151148600d4c1512/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317c6ac12935046b04c349f6151148600d4c1512/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=317c6ac12935046b04c349f6151148600d4c1512", "patch": "@@ -6,14 +6,12 @@ use rustc::hir;\n use rustc::ty::layout::{self, TyLayout, LayoutOf, VariantIdx};\n use rustc::ty;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc::mir::interpret::{\n-    GlobalAlloc, InterpResult, InterpError,\n-};\n \n use std::hash::Hash;\n \n use super::{\n-    OpTy, Machine, InterpCx, ValueVisitor, MPlaceTy,\n+    GlobalAlloc, InterpResult, InterpError,\n+    OpTy, Machine, InterpCx, ValueVisitor, MPlaceTy, AllocCheck,\n };\n \n macro_rules! validation_failure {\n@@ -505,19 +503,20 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                     // Only NULL is the niche.  So make sure the ptr is NOT NULL.\n                     if self.ecx.memory.ptr_may_be_null(ptr) {\n                         // These conditions are just here to improve the diagnostics so we can\n-                        // differentiate between null pointers and dangling pointers\n+                        // differentiate between null pointers and dangling pointers.\n                         if self.ref_tracking_for_consts.is_some() &&\n-                            self.ecx.memory.get(ptr.alloc_id).is_err() &&\n-                            self.ecx.memory.get_fn(ptr.into()).is_err() {\n+                            self.ecx.memory.get_size_and_align(ptr.alloc_id, AllocCheck::Live)\n+                                .is_err()\n+                        {\n                             return validation_failure!(\n-                                \"encountered dangling pointer\", self.path\n+                                \"a dangling pointer\", self.path\n                             );\n                         }\n                         return validation_failure!(\"a potentially NULL pointer\", self.path);\n                     }\n                     return Ok(());\n                 } else {\n-                    // Conservatively, we reject, because the pointer *could* have this\n+                    // Conservatively, we reject, because the pointer *could* have a bad\n                     // value.\n                     return validation_failure!(\n                         \"a pointer\","}]}