{"sha": "6878039c122211f227d6c42b7f08282629ceb6c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NzgwMzljMTIyMjExZjIyN2Q2YzQyYjdmMDgyODI2MjljZWI2YzQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-11T08:34:28Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-14T00:24:08Z"}, "message": "syntax: Improve --pretty normal slightly\n\nWhen printing doc comments, always put a newline after them in a macro\ninvocation to ensure that a line-doc-comment doesn't consume remaining tokens on\nthe line.", "tree": {"sha": "351056d4baa98d530ffe368f825a4d6a9122807a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/351056d4baa98d530ffe368f825a4d6a9122807a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6878039c122211f227d6c42b7f08282629ceb6c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6878039c122211f227d6c42b7f08282629ceb6c4", "html_url": "https://github.com/rust-lang/rust/commit/6878039c122211f227d6c42b7f08282629ceb6c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6878039c122211f227d6c42b7f08282629ceb6c4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25ac81eb8998e08add3eba703c701a0b9a65173f", "url": "https://api.github.com/repos/rust-lang/rust/commits/25ac81eb8998e08add3eba703c701a0b9a65173f", "html_url": "https://github.com/rust-lang/rust/commit/25ac81eb8998e08add3eba703c701a0b9a65173f"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "95ae05985d38e2954c2ea755657580d3dfc993fb", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6878039c122211f227d6c42b7f08282629ceb6c4/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6878039c122211f227d6c42b7f08282629ceb6c4/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=6878039c122211f227d6c42b7f08282629ceb6c4", "patch": "@@ -360,17 +360,17 @@ pub fn ty_to_str(cx: &ctxt, typ: t) -> StrBuf {\n       ty_uint(t) => ast_util::uint_ty_to_str(t, None,\n                                              ast_util::AutoSuffix).to_strbuf(),\n       ty_float(t) => ast_util::float_ty_to_str(t).to_strbuf(),\n-      ty_box(typ) => \"@\".to_strbuf() + ty_to_str(cx, typ),\n-      ty_uniq(typ) => \"~\".to_strbuf() + ty_to_str(cx, typ),\n-      ty_ptr(ref tm) => \"*\".to_strbuf() + mt_to_str(cx, tm),\n+      ty_box(typ) => format_strbuf!(\"@{}\", ty_to_str(cx, typ)),\n+      ty_uniq(typ) => format_strbuf!(\"~{}\", ty_to_str(cx, typ)),\n+      ty_ptr(ref tm) => format_strbuf!(\"*{}\", mt_to_str(cx, tm)),\n       ty_rptr(r, ref tm) => {\n           let mut buf = region_ptr_to_str(cx, r);\n           buf.push_str(mt_to_str(cx, tm).as_slice());\n           buf\n       }\n       ty_tup(ref elems) => {\n         let strs: Vec<StrBuf> = elems.iter().map(|elem| ty_to_str(cx, *elem)).collect();\n-        (\"(\".to_strbuf() + strs.connect(\",\") + \")\").to_strbuf()\n+        format_strbuf!(\"({})\", strs.connect(\",\"))\n       }\n       ty_closure(ref f) => {\n           closure_to_str(cx, *f)"}, {"sha": "15b931d58545ebc6406e86d2504307a6abfe28a7", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6878039c122211f227d6c42b7f08282629ceb6c4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6878039c122211f227d6c42b7f08282629ceb6c4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=6878039c122211f227d6c42b7f08282629ceb6c4", "patch": "@@ -841,7 +841,13 @@ impl<'a> State<'a> {\n         match *tt {\n             ast::TTDelim(ref tts) => self.print_tts(tts.as_slice()),\n             ast::TTTok(_, ref tk) => {\n-                word(&mut self.s, parse::token::to_str(tk).as_slice())\n+                try!(word(&mut self.s, parse::token::to_str(tk).as_slice()));\n+                match *tk {\n+                    parse::token::DOC_COMMENT(..) => {\n+                        hardbreak(&mut self.s)\n+                    }\n+                    _ => Ok(())\n+                }\n             }\n             ast::TTSeq(_, ref tts, ref sep, zerok) => {\n                 try!(word(&mut self.s, \"$(\"));\n@@ -2238,7 +2244,7 @@ impl<'a> State<'a> {\n             ast::LitUint(u, t) => {\n                 word(&mut self.s,\n                      ast_util::uint_ty_to_str(t, Some(u),\n-                                              ast_util::AutoSuffix).as_slice())\n+                                              ast_util::ForceSuffix).as_slice())\n             }\n             ast::LitIntUnsuffixed(i) => {\n                 word(&mut self.s, format!(\"{}\", i))"}]}