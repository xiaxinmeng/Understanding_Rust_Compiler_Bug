{"sha": "efa3ec67e28ab8a4c3377a039095cd464713cdfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYTNlYzY3ZTI4YWI4YTRjMzM3N2EwMzkwOTVjZDQ2NDcxM2NkZmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-11T15:35:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-11T15:35:35Z"}, "message": "Auto merge of #44435 - alexcrichton:in-scope, r=michaelwoerister\n\nrustc: Remove HirId from queries\n\nThis'll allow us to reconstruct query parameters purely from the `DepNode`\nthey're associated with.\n\nCloses #44414", "tree": {"sha": "67a3845b7aad9cfb60930ee4aba2c1cf6ebb693c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67a3845b7aad9cfb60930ee4aba2c1cf6ebb693c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efa3ec67e28ab8a4c3377a039095cd464713cdfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efa3ec67e28ab8a4c3377a039095cd464713cdfd", "html_url": "https://github.com/rust-lang/rust/commit/efa3ec67e28ab8a4c3377a039095cd464713cdfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efa3ec67e28ab8a4c3377a039095cd464713cdfd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19d30fcdb28c2a4f57774b827b1a17ee156b5c56", "url": "https://api.github.com/repos/rust-lang/rust/commits/19d30fcdb28c2a4f57774b827b1a17ee156b5c56", "html_url": "https://github.com/rust-lang/rust/commit/19d30fcdb28c2a4f57774b827b1a17ee156b5c56"}, {"sha": "caaf365a9d39e964d66d479f9be7c95bc017f156", "url": "https://api.github.com/repos/rust-lang/rust/commits/caaf365a9d39e964d66d479f9be7c95bc017f156", "html_url": "https://github.com/rust-lang/rust/commit/caaf365a9d39e964d66d479f9be7c95bc017f156"}], "stats": {"total": 263, "additions": 142, "deletions": 121}, "files": [{"sha": "27561bddd295bdedc62ea43add3fd8165cda2680", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=efa3ec67e28ab8a4c3377a039095cd464713cdfd", "patch": "@@ -60,7 +60,7 @@\n //! user of the `DepNode` API of having to know how to compute the expected\n //! fingerprint for a given set of node parameters.\n \n-use hir::def_id::{CrateNum, DefId};\n+use hir::def_id::{CrateNum, DefId, DefIndex};\n use hir::map::DefPathHash;\n use hir::{HirId, ItemLocalId};\n \n@@ -528,8 +528,8 @@ define_dep_nodes!( <'tcx>\n     [] ExternCrate(DefId),\n     [] LintLevels,\n     [] Specializes { impl1: DefId, impl2: DefId },\n-    [] InScopeTraits(HirId),\n-    [] ModuleExports(HirId),\n+    [] InScopeTraits(DefIndex),\n+    [] ModuleExports(DefId),\n     [] IsSanitizerRuntime(CrateNum),\n     [] IsProfilerRuntime(CrateNum),\n     [] GetPanicStrategy(CrateNum),\n@@ -551,15 +551,15 @@ define_dep_nodes!( <'tcx>\n     [] NativeLibraryKind(DefId),\n     [] LinkArgs,\n \n-    [] NamedRegion(HirId),\n-    [] IsLateBound(HirId),\n-    [] ObjectLifetimeDefaults(HirId),\n+    [] NamedRegion(DefIndex),\n+    [] IsLateBound(DefIndex),\n+    [] ObjectLifetimeDefaults(DefIndex),\n \n     [] Visibility(DefId),\n     [] DepKind(CrateNum),\n     [] CrateName(CrateNum),\n     [] ItemChildren(DefId),\n-    [] ExternModStmtCnum(HirId),\n+    [] ExternModStmtCnum(DefId),\n     [] GetLangItems,\n     [] DefinedLangItems(CrateNum),\n     [] MissingLangItems(CrateNum),\n@@ -570,8 +570,8 @@ define_dep_nodes!( <'tcx>\n     [] UsedCrateSource(CrateNum),\n     [] PostorderCnums,\n \n-    [] Freevars(HirId),\n-    [] MaybeUnusedTraitImport(HirId),\n+    [] Freevars(DefId),\n+    [] MaybeUnusedTraitImport(DefId),\n     [] MaybeUnusedExternCrates,\n     [] StabilityIndex,\n     [] AllCrateNums,"}, {"sha": "4e0c6479abf141c1e3fff1dfc8e3648389be1622", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=efa3ec67e28ab8a4c3377a039095cd464713cdfd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use hir::def_id::DefId;\n-use util::nodemap::NodeMap;\n+use util::nodemap::{NodeMap, DefIdMap};\n use syntax::ast;\n use syntax::ext::base::MacroKind;\n use syntax_pos::Span;\n@@ -115,7 +115,7 @@ pub type DefMap = NodeMap<PathResolution>;\n \n /// This is the replacement export map. It maps a module to all of the exports\n /// within.\n-pub type ExportMap = NodeMap<Vec<Export>>;\n+pub type ExportMap = DefIdMap<Vec<Export>>;\n \n #[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct Export {"}, {"sha": "81cf20cfc77f0f4a7b4104096d1af2334072facd", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=efa3ec67e28ab8a4c3377a039095cd464713cdfd", "patch": "@@ -199,20 +199,19 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for ast::N\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {\n+        let hir_id = hcx.tcx.hir.node_to_hir_id(*self);\n         match hcx.node_id_hashing_mode {\n             NodeIdHashingMode::Ignore => {\n                 // Most NodeIds in the HIR can be ignored, but if there is a\n                 // corresponding entry in the `trait_map` we need to hash that.\n                 // Make sure we don't ignore too much by checking that there is\n                 // no entry in a debug_assert!().\n-                let hir_id = hcx.tcx.hir.node_to_hir_id(*self);\n                 debug_assert!(hcx.tcx.in_scope_traits(hir_id).is_none());\n             }\n             NodeIdHashingMode::HashDefPath => {\n-                hcx.tcx.hir.definitions().node_to_hir_id(*self).hash_stable(hcx, hasher);\n+                hir_id.hash_stable(hcx, hasher);\n             }\n             NodeIdHashingMode::HashTraitsInScope => {\n-                let hir_id = hcx.tcx.hir.node_to_hir_id(*self);\n                 if let Some(traits) = hcx.tcx.in_scope_traits(hir_id) {\n                     // The ordering of the candidates is not fixed. So we hash\n                     // the def-ids and then sort them and hash the collection."}, {"sha": "5ca235b2ad3ec538fee18d5f65a94ce5ff667764", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=efa3ec67e28ab8a4c3377a039095cd464713cdfd", "patch": "@@ -612,8 +612,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                 // compiler-generated `extern crate` items have a dummy span.\n                 if item.span == DUMMY_SP { return }\n \n-                let hir_id = self.tcx.hir.node_to_hir_id(item.id);\n-                let cnum = match self.tcx.extern_mod_stmt_cnum(hir_id) {\n+                let def_id = self.tcx.hir.local_def_id(item.id);\n+                let cnum = match self.tcx.extern_mod_stmt_cnum(def_id) {\n                     Some(cnum) => cnum,\n                     None => return,\n                 };"}, {"sha": "d8e2ec18d651740143f29c87de28ae461bc3d502", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 78, "deletions": 36, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=efa3ec67e28ab8a4c3377a039095cd464713cdfd", "patch": "@@ -14,9 +14,9 @@ use dep_graph::DepGraph;\n use errors::DiagnosticBuilder;\n use session::Session;\n use middle;\n-use hir::{TraitCandidate, HirId};\n+use hir::{TraitCandidate, HirId, ItemLocalId};\n use hir::def::{Def, Export};\n-use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n use hir::map as hir_map;\n use hir::map::DefPathHash;\n use lint::{self, Lint};\n@@ -817,10 +817,10 @@ pub struct GlobalCtxt<'tcx> {\n \n     /// Map indicating what traits are in scope for places where this\n     /// is relevant; generated by resolve.\n-    trait_map: FxHashMap<HirId, Rc<Vec<TraitCandidate>>>,\n+    trait_map: FxHashMap<DefIndex, Rc<FxHashMap<ItemLocalId, Rc<Vec<TraitCandidate>>>>>,\n \n     /// Export map produced by name resolution.\n-    export_map: FxHashMap<HirId, Rc<Vec<Export>>>,\n+    export_map: FxHashMap<DefId, Rc<Vec<Export>>>,\n \n     named_region_map: NamedRegionMap,\n \n@@ -837,11 +837,11 @@ pub struct GlobalCtxt<'tcx> {\n     // Records the free variables refrenced by every closure\n     // expression. Do not track deps for this, just recompute it from\n     // scratch every time.\n-    freevars: FxHashMap<HirId, Rc<Vec<hir::Freevar>>>,\n+    freevars: FxHashMap<DefId, Rc<Vec<hir::Freevar>>>,\n \n-    maybe_unused_trait_imports: FxHashSet<HirId>,\n+    maybe_unused_trait_imports: FxHashSet<DefId>,\n \n-    maybe_unused_extern_crates: Vec<(HirId, Span)>,\n+    maybe_unused_extern_crates: Vec<(DefId, Span)>,\n \n     // Internal cache for metadata decoding. No need to track deps on this.\n     pub rcache: RefCell<FxHashMap<ty::CReaderCacheKey, Ty<'tcx>>>,\n@@ -1032,6 +1032,35 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             None\n         };\n \n+        let mut trait_map = FxHashMap();\n+        for (k, v) in resolutions.trait_map {\n+            let hir_id = hir.node_to_hir_id(k);\n+            let map = trait_map.entry(hir_id.owner)\n+                .or_insert_with(|| Rc::new(FxHashMap()));\n+            Rc::get_mut(map).unwrap().insert(hir_id.local_id, Rc::new(v));\n+        }\n+        let mut defs = FxHashMap();\n+        for (k, v) in named_region_map.defs {\n+            let hir_id = hir.node_to_hir_id(k);\n+            let map = defs.entry(hir_id.owner)\n+                .or_insert_with(|| Rc::new(FxHashMap()));\n+            Rc::get_mut(map).unwrap().insert(hir_id.local_id, v);\n+        }\n+        let mut late_bound = FxHashMap();\n+        for k in named_region_map.late_bound {\n+            let hir_id = hir.node_to_hir_id(k);\n+            let map = late_bound.entry(hir_id.owner)\n+                .or_insert_with(|| Rc::new(FxHashSet()));\n+            Rc::get_mut(map).unwrap().insert(hir_id.local_id);\n+        }\n+        let mut object_lifetime_defaults = FxHashMap();\n+        for (k, v) in named_region_map.object_lifetime_defaults {\n+            let hir_id = hir.node_to_hir_id(k);\n+            let map = object_lifetime_defaults.entry(hir_id.owner)\n+                .or_insert_with(|| Rc::new(FxHashMap()));\n+            Rc::get_mut(map).unwrap().insert(hir_id.local_id, Rc::new(v));\n+        }\n+\n         tls::enter_global(GlobalCtxt {\n             sess: s,\n             trans_trait_caches: traits::trans::TransTraitCaches::new(dep_graph.clone()),\n@@ -1040,40 +1069,26 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             dep_graph: dep_graph.clone(),\n             types: common_types,\n             named_region_map: NamedRegionMap {\n-                defs:\n-                    named_region_map.defs\n-                        .into_iter()\n-                        .map(|(k, v)| (hir.node_to_hir_id(k), v))\n-                        .collect(),\n-                late_bound:\n-                    named_region_map.late_bound\n-                        .into_iter()\n-                        .map(|k| hir.node_to_hir_id(k))\n-                        .collect(),\n-                object_lifetime_defaults:\n-                    named_region_map.object_lifetime_defaults\n-                        .into_iter()\n-                        .map(|(k, v)| (hir.node_to_hir_id(k), Rc::new(v)))\n-                        .collect(),\n+                defs,\n+                late_bound,\n+                object_lifetime_defaults,\n             },\n-            trait_map: resolutions.trait_map.into_iter().map(|(k, v)| {\n-                (hir.node_to_hir_id(k), Rc::new(v))\n-            }).collect(),\n+            trait_map,\n             export_map: resolutions.export_map.into_iter().map(|(k, v)| {\n-                (hir.node_to_hir_id(k), Rc::new(v))\n+                (k, Rc::new(v))\n             }).collect(),\n             freevars: resolutions.freevars.into_iter().map(|(k, v)| {\n-                (hir.node_to_hir_id(k), Rc::new(v))\n+                (hir.local_def_id(k), Rc::new(v))\n             }).collect(),\n             maybe_unused_trait_imports:\n                 resolutions.maybe_unused_trait_imports\n                     .into_iter()\n-                    .map(|id| hir.node_to_hir_id(id))\n+                    .map(|id| hir.local_def_id(id))\n                     .collect(),\n             maybe_unused_extern_crates:\n                 resolutions.maybe_unused_extern_crates\n                     .into_iter()\n-                    .map(|(id, sp)| (hir.node_to_hir_id(id), sp))\n+                    .map(|(id, sp)| (hir.local_def_id(id), sp))\n                     .collect(),\n             hir,\n             def_path_hash_to_def_id,\n@@ -1967,6 +1982,29 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let (level, src) = self.lint_level_at_node(lint, id);\n         lint::struct_lint_level(self.sess, lint, level, src, None, msg)\n     }\n+\n+    pub fn in_scope_traits(self, id: HirId) -> Option<Rc<Vec<TraitCandidate>>> {\n+        self.in_scope_traits_map(id.owner)\n+            .and_then(|map| map.get(&id.local_id).cloned())\n+    }\n+\n+    pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {\n+        self.named_region_map(id.owner)\n+            .and_then(|map| map.get(&id.local_id).cloned())\n+    }\n+\n+    pub fn is_late_bound(self, id: HirId) -> bool {\n+        self.is_late_bound_map(id.owner)\n+            .map(|set| set.contains(&id.local_id))\n+            .unwrap_or(false)\n+    }\n+\n+    pub fn object_lifetime_defaults(self, id: HirId)\n+        -> Option<Rc<Vec<ObjectLifetimeDefault>>>\n+    {\n+        self.object_lifetime_defaults_map(id.owner)\n+            .and_then(|map| map.get(&id.local_id).cloned())\n+    }\n }\n \n pub trait InternAs<T: ?Sized, R> {\n@@ -2014,20 +2052,24 @@ impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {\n }\n \n struct NamedRegionMap {\n-    defs: FxHashMap<HirId, resolve_lifetime::Region>,\n-    late_bound: FxHashSet<HirId>,\n-    object_lifetime_defaults: FxHashMap<HirId, Rc<Vec<ObjectLifetimeDefault>>>,\n+    defs: FxHashMap<DefIndex, Rc<FxHashMap<ItemLocalId, resolve_lifetime::Region>>>,\n+    late_bound: FxHashMap<DefIndex, Rc<FxHashSet<ItemLocalId>>>,\n+    object_lifetime_defaults:\n+        FxHashMap<\n+            DefIndex,\n+            Rc<FxHashMap<ItemLocalId, Rc<Vec<ObjectLifetimeDefault>>>>,\n+        >,\n }\n \n pub fn provide(providers: &mut ty::maps::Providers) {\n     // FIXME(#44234) - almost all of these queries have no sub-queries and\n     // therefore no actual inputs, they're just reading tables calculated in\n     // resolve! Does this work? Unsure! That's what the issue is about\n-    providers.in_scope_traits = |tcx, id| tcx.gcx.trait_map.get(&id).cloned();\n+    providers.in_scope_traits_map = |tcx, id| tcx.gcx.trait_map.get(&id).cloned();\n     providers.module_exports = |tcx, id| tcx.gcx.export_map.get(&id).cloned();\n-    providers.named_region = |tcx, id| tcx.gcx.named_region_map.defs.get(&id).cloned();\n-    providers.is_late_bound = |tcx, id| tcx.gcx.named_region_map.late_bound.contains(&id);\n-    providers.object_lifetime_defaults = |tcx, id| {\n+    providers.named_region_map = |tcx, id| tcx.gcx.named_region_map.defs.get(&id).cloned();\n+    providers.is_late_bound_map = |tcx, id| tcx.gcx.named_region_map.late_bound.get(&id).cloned();\n+    providers.object_lifetime_defaults_map = |tcx, id| {\n         tcx.gcx.named_region_map.object_lifetime_defaults.get(&id).cloned()\n     };\n     providers.crate_name = |tcx, id| {"}, {"sha": "5e5b222b5c61ecd9bf05dce8741e8de93cd55594", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 28, "deletions": 49, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=efa3ec67e28ab8a4c3377a039095cd464713cdfd", "patch": "@@ -12,7 +12,7 @@ use dep_graph::{DepConstructor, DepNode, DepNodeIndex};\n use errors::{Diagnostic, DiagnosticBuilder};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE, DefIndex};\n use hir::def::{Def, Export};\n-use hir::{self, TraitCandidate, HirId};\n+use hir::{self, TraitCandidate, ItemLocalId};\n use hir::svh::Svh;\n use lint;\n use middle::const_val;\n@@ -39,7 +39,7 @@ use util::common::{profq_msg, ProfileQueriesMsg};\n use rustc_data_structures::indexed_set::IdxSetBuf;\n use rustc_back::PanicStrategy;\n use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use std::cell::{RefCell, RefMut, Cell};\n use std::fmt::Debug;\n use std::hash::Hash;\n@@ -87,7 +87,7 @@ impl Key for CrateNum {\n     }\n }\n \n-impl Key for HirId {\n+impl Key for DefIndex {\n     fn map_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n@@ -556,15 +556,9 @@ impl<'tcx> QueryDescription for queries::specializes<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::in_scope_traits<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: HirId) -> String {\n-        format!(\"fetching the traits in scope at a particular ast node\")\n-    }\n-}\n-\n-impl<'tcx> QueryDescription for queries::module_exports<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: HirId) -> String {\n-        format!(\"fetching the exported items for a module\")\n+impl<'tcx> QueryDescription for queries::in_scope_traits_map<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: DefIndex) -> String {\n+        format!(\"traits in scope at a block\")\n     }\n }\n \n@@ -652,21 +646,21 @@ impl<'tcx> QueryDescription for queries::link_args<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::named_region<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: HirId) -> String {\n-        format!(\"fetching info about a named region\")\n+impl<'tcx> QueryDescription for queries::named_region_map<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: DefIndex) -> String {\n+        format!(\"looking up a named region\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::is_late_bound<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: HirId) -> String {\n-        format!(\"testing whether a lifetime is late bound\")\n+impl<'tcx> QueryDescription for queries::is_late_bound_map<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: DefIndex) -> String {\n+        format!(\"testing if a region is late boudn\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::object_lifetime_defaults<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: HirId) -> String {\n-        format!(\"fetching a list of ObjectLifetimeDefault for a lifetime\")\n+impl<'tcx> QueryDescription for queries::object_lifetime_defaults_map<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: DefIndex) -> String {\n+        format!(\"looking up lifetime defaults for a region\")\n     }\n }\n \n@@ -682,12 +676,6 @@ impl<'tcx> QueryDescription for queries::crate_name<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::extern_mod_stmt_cnum<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: HirId) -> String {\n-        format!(\"looking up the CrateNum for an `extern mod` statement\")\n-    }\n-}\n-\n impl<'tcx> QueryDescription for queries::get_lang_items<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"calculating the lang items map\")\n@@ -730,18 +718,6 @@ impl<'tcx> QueryDescription for queries::postorder_cnums<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::freevars<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: HirId) -> String {\n-        format!(\"looking up free variables for a node\")\n-    }\n-}\n-\n-impl<'tcx> QueryDescription for queries::maybe_unused_trait_import<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: HirId) -> String {\n-        format!(\"testing if a trait import is unused\")\n-    }\n-}\n-\n impl<'tcx> QueryDescription for queries::maybe_unused_extern_crates<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"looking up all possibly unused extern crates\")\n@@ -1331,8 +1307,9 @@ define_maps! { <'tcx>\n     [] fn extern_crate: ExternCrate(DefId) -> Rc<Option<ExternCrate>>,\n \n     [] fn specializes: specializes_node((DefId, DefId)) -> bool,\n-    [] fn in_scope_traits: InScopeTraits(HirId) -> Option<Rc<Vec<TraitCandidate>>>,\n-    [] fn module_exports: ModuleExports(HirId) -> Option<Rc<Vec<Export>>>,\n+    [] fn in_scope_traits_map: InScopeTraits(DefIndex)\n+        -> Option<Rc<FxHashMap<ItemLocalId, Rc<Vec<TraitCandidate>>>>>,\n+    [] fn module_exports: ModuleExports(DefId) -> Option<Rc<Vec<Export>>>,\n     [] fn lint_levels: lint_levels_node(CrateNum) -> Rc<lint::LintLevelMap>,\n \n     [] fn impl_defaultness: ImplDefaultness(DefId) -> hir::Defaultness,\n@@ -1355,16 +1332,18 @@ define_maps! { <'tcx>\n         -> Option<NativeLibraryKind>,\n     [] fn link_args: link_args_node(CrateNum) -> Rc<Vec<String>>,\n \n-    [] fn named_region: NamedRegion(HirId) -> Option<Region>,\n-    [] fn is_late_bound: IsLateBound(HirId) -> bool,\n-    [] fn object_lifetime_defaults: ObjectLifetimeDefaults(HirId)\n-        -> Option<Rc<Vec<ObjectLifetimeDefault>>>,\n+    [] fn named_region_map: NamedRegion(DefIndex) ->\n+        Option<Rc<FxHashMap<ItemLocalId, Region>>>,\n+    [] fn is_late_bound_map: IsLateBound(DefIndex) ->\n+        Option<Rc<FxHashSet<ItemLocalId>>>,\n+    [] fn object_lifetime_defaults_map: ObjectLifetimeDefaults(DefIndex)\n+        -> Option<Rc<FxHashMap<ItemLocalId, Rc<Vec<ObjectLifetimeDefault>>>>>,\n \n     [] fn visibility: Visibility(DefId) -> ty::Visibility,\n     [] fn dep_kind: DepKind(CrateNum) -> DepKind,\n     [] fn crate_name: CrateName(CrateNum) -> Symbol,\n     [] fn item_children: ItemChildren(DefId) -> Rc<Vec<Export>>,\n-    [] fn extern_mod_stmt_cnum: ExternModStmtCnum(HirId) -> Option<CrateNum>,\n+    [] fn extern_mod_stmt_cnum: ExternModStmtCnum(DefId) -> Option<CrateNum>,\n \n     [] fn get_lang_items: get_lang_items_node(CrateNum) -> Rc<LanguageItems>,\n     [] fn defined_lang_items: DefinedLangItems(CrateNum) -> Rc<Vec<(DefIndex, usize)>>,\n@@ -1376,10 +1355,10 @@ define_maps! { <'tcx>\n     [] fn used_crate_source: UsedCrateSource(CrateNum) -> Rc<CrateSource>,\n     [] fn postorder_cnums: postorder_cnums_node(CrateNum) -> Rc<Vec<CrateNum>>,\n \n-    [] fn freevars: Freevars(HirId) -> Option<Rc<Vec<hir::Freevar>>>,\n-    [] fn maybe_unused_trait_import: MaybeUnusedTraitImport(HirId) -> bool,\n+    [] fn freevars: Freevars(DefId) -> Option<Rc<Vec<hir::Freevar>>>,\n+    [] fn maybe_unused_trait_import: MaybeUnusedTraitImport(DefId) -> bool,\n     [] fn maybe_unused_extern_crates: maybe_unused_extern_crates_node(CrateNum)\n-        -> Rc<Vec<(HirId, Span)>>,\n+        -> Rc<Vec<(DefId, Span)>>,\n \n     [] fn stability_index: stability_index_node(CrateNum) -> Rc<stability::Index<'tcx>>,\n     [] fn all_crate_nums: all_crate_nums_node(CrateNum) -> Rc<Vec<CrateNum>>,"}, {"sha": "5f5f76343048965e86ccd773e73590138d8c47a9", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=efa3ec67e28ab8a4c3377a039095cd464713cdfd", "patch": "@@ -2325,8 +2325,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn with_freevars<T, F>(self, fid: NodeId, f: F) -> T where\n         F: FnOnce(&[hir::Freevar]) -> T,\n     {\n-        let hir_id = self.hir.node_to_hir_id(fid);\n-        match self.freevars(hir_id) {\n+        let def_id = self.hir.local_def_id(fid);\n+        match self.freevars(def_id) {\n             None => f(&[]),\n             Some(d) => f(&d),\n         }"}, {"sha": "f3bf37c11a5468866b6feb2cdedabdb7bf2b280f", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=efa3ec67e28ab8a4c3377a039095cd464713cdfd", "patch": "@@ -1066,8 +1066,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PluginAsLibrary {\n             _ => return,\n         };\n \n-        let hir_id = cx.tcx.hir.node_to_hir_id(it.id);\n-        let prfn = match cx.tcx.extern_mod_stmt_cnum(hir_id) {\n+        let def_id = cx.tcx.hir.local_def_id(it.id);\n+        let prfn = match cx.tcx.extern_mod_stmt_cnum(def_id) {\n             Some(cnum) => cx.tcx.plugin_registrar_fn(cnum),\n             None => {\n                 // Probably means we aren't linking the crate for some reason."}, {"sha": "b1a5029a735a5c317f4ee6e1e456d20acc036354", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=efa3ec67e28ab8a4c3377a039095cd464713cdfd", "patch": "@@ -276,7 +276,7 @@ pub fn provide_local<'tcx>(providers: &mut Providers<'tcx>) {\n             Rc::new(link_args::collect(tcx))\n         },\n         extern_mod_stmt_cnum: |tcx, id| {\n-            let id = tcx.hir.definitions().find_node_for_hir_id(id);\n+            let id = tcx.hir.as_local_node_id(id).unwrap();\n             tcx.sess.cstore.extern_mod_stmt_cnum_untracked(id)\n         },\n "}, {"sha": "641a567b56c103c06207803a218950fdf1f916d1", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=efa3ec67e28ab8a4c3377a039095cd464713cdfd", "patch": "@@ -548,12 +548,11 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                                                                  &hir::Visibility)>)\n                            -> Entry<'tcx> {\n         let tcx = self.tcx;\n-        let hir_id = tcx.hir.node_to_hir_id(id);\n         let def_id = tcx.hir.local_def_id(id);\n         debug!(\"IsolatedEncoder::encode_info_for_mod({:?})\", def_id);\n \n         let data = ModData {\n-            reexports: match tcx.module_exports(hir_id) {\n+            reexports: match tcx.module_exports(def_id) {\n                 Some(ref exports) if *vis == hir::Public => {\n                     self.lazy_seq_from_slice(exports.as_slice())\n                 }"}, {"sha": "0d5ad6f47c9ad8a927685e14768649031b239f9e", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=efa3ec67e28ab8a4c3377a039095cd464713cdfd", "patch": "@@ -325,8 +325,8 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n         // This code is here instead of in visit_item so that the\n         // crate module gets processed as well.\n         if self.prev_level.is_some() {\n-            let hir_id = self.tcx.hir.node_to_hir_id(id);\n-            if let Some(exports) = self.tcx.module_exports(hir_id) {\n+            let def_id = self.tcx.hir.local_def_id(id);\n+            if let Some(exports) = self.tcx.module_exports(def_id) {\n                 for export in exports.iter() {\n                     if let Some(node_id) = self.tcx.hir.as_local_node_id(export.def.def_id()) {\n                         self.update(node_id, Some(AccessLevel::Exported));"}, {"sha": "8f920e792b33c9e42aca873c7d4bb9fd4a0155ff", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=efa3ec67e28ab8a4c3377a039095cd464713cdfd", "patch": "@@ -1443,7 +1443,7 @@ impl<'a> Resolver<'a> {\n             def_map: NodeMap(),\n             freevars: NodeMap(),\n             freevars_seen: NodeMap(),\n-            export_map: NodeMap(),\n+            export_map: FxHashMap(),\n             trait_map: NodeMap(),\n             module_map,\n             block_map: NodeMap(),"}, {"sha": "18f8370c1b3f5ed1590a58e7dbe9544cceb8a454", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=efa3ec67e28ab8a4c3377a039095cd464713cdfd", "patch": "@@ -892,8 +892,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n \n         if reexports.len() > 0 {\n             if let Some(def_id) = module.def_id() {\n-                let node_id = self.definitions.as_local_node_id(def_id).unwrap();\n-                self.export_map.insert(node_id, reexports);\n+                self.export_map.insert(def_id, reexports);\n             }\n         }\n     }"}, {"sha": "0c35b5e6834deb2a87b62dd5b2e1074d9b9e8d94", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=efa3ec67e28ab8a4c3377a039095cd464713cdfd", "patch": "@@ -26,8 +26,8 @@ struct CheckVisitor<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx> CheckVisitor<'a, 'tcx> {\n     fn check_import(&self, id: ast::NodeId, span: Span) {\n-        let hir_id = self.tcx.hir.node_to_hir_id(id);\n-        if !self.tcx.maybe_unused_trait_import(hir_id) {\n+        let def_id = self.tcx.hir.local_def_id(id);\n+        if !self.tcx.maybe_unused_trait_import(def_id) {\n             return;\n         }\n \n@@ -75,8 +75,8 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut visitor = CheckVisitor { tcx, used_trait_imports };\n     tcx.hir.krate().visit_all_item_likes(&mut visitor);\n \n-    for &(hir_id, span) in tcx.maybe_unused_extern_crates(LOCAL_CRATE).iter() {\n-        let cnum = tcx.extern_mod_stmt_cnum(hir_id).unwrap();\n+    for &(def_id, span) in tcx.maybe_unused_extern_crates(LOCAL_CRATE).iter() {\n+        let cnum = tcx.extern_mod_stmt_cnum(def_id).unwrap();\n         if tcx.is_compiler_builtins(cnum) {\n             continue\n         }\n@@ -86,6 +86,8 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n         if tcx.has_global_allocator(cnum) {\n             continue\n         }\n+        assert_eq!(def_id.krate, LOCAL_CRATE);\n+        let hir_id = tcx.hir.definitions().def_index_to_hir_id(def_id.index);\n         let id = tcx.hir.definitions().find_node_for_hir_id(hir_id);\n         let lint = lint::builtin::UNUSED_EXTERN_CRATES;\n         let msg = \"unused extern crate\";"}, {"sha": "507393bed8a1ab9c8fbfcd391c97284930ec324e", "filename": "src/librustdoc/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustdoc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustdoc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fbuild.rs?ref=efa3ec67e28ab8a4c3377a039095cd464713cdfd", "patch": "@@ -24,6 +24,7 @@ fn main() {\n        .file(\"../rt/hoedown/src/html_smartypants.c\")\n        .file(\"../rt/hoedown/src/stack.c\")\n        .file(\"../rt/hoedown/src/version.c\")\n+       .warnings(false)\n        .include(src_dir)\n        .compile(\"libhoedown.a\");\n }"}, {"sha": "b74bac7a85b0b058db6649ff0089712822dff069", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa3ec67e28ab8a4c3377a039095cd464713cdfd/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=efa3ec67e28ab8a4c3377a039095cd464713cdfd", "patch": "@@ -199,8 +199,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             self.visit_item(item, None, &mut om);\n         }\n         self.inside_public_path = orig_inside_public_path;\n-        let hir_id = self.cx.tcx.hir.node_to_hir_id(id);\n-        if let Some(exports) = self.cx.tcx.module_exports(hir_id) {\n+        let def_id = self.cx.tcx.hir.local_def_id(id);\n+        if let Some(exports) = self.cx.tcx.module_exports(def_id) {\n             for export in exports.iter() {\n                 if let Def::Macro(def_id, ..) = export.def {\n                     if def_id.krate == LOCAL_CRATE || self.reexported_macros.contains(&def_id) {\n@@ -372,9 +372,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             _ if self.inlining && item.vis != hir::Public => {}\n             hir::ItemGlobalAsm(..) => {}\n             hir::ItemExternCrate(ref p) => {\n-                let hir_id = self.cx.tcx.hir.node_to_hir_id(item.id);\n+                let def_id = self.cx.tcx.hir.local_def_id(item.id);\n                 om.extern_crates.push(ExternCrate {\n-                    cnum: self.cx.tcx.extern_mod_stmt_cnum(hir_id)\n+                    cnum: self.cx.tcx.extern_mod_stmt_cnum(def_id)\n                                 .unwrap_or(LOCAL_CRATE),\n                     name,\n                     path: p.map(|x|x.to_string()),"}]}