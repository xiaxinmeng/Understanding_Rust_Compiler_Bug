{"sha": "04a6f22f7950daa680594353dbd03f5cb515aef5", "node_id": "C_kwDOAAsO6NoAKDA0YTZmMjJmNzk1MGRhYTY4MDU5NDM1M2RiZDAzZjVjYjUxNWFlZjU", "commit": {"author": {"name": "Florian Bartels", "email": "Florian.Bartels@elektrobit.com", "date": "2022-12-16T08:03:46Z"}, "committer": {"name": "Florian Bartels", "email": "Florian.Bartels@elektrobit.com", "date": "2022-12-28T17:32:41Z"}, "message": "Catch panics in destruction of TLS values\n\n`destroy_value` is/can be called from C code (libc). Unwinding\nfrom Rust to C code is undefined behavior, which is why unwinding\nis caught here.", "tree": {"sha": "18fc592ab8f3b26099dc2cbc972bc9e86f0ff5b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18fc592ab8f3b26099dc2cbc972bc9e86f0ff5b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04a6f22f7950daa680594353dbd03f5cb515aef5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgfX4XtN64zVoKGqFPazFePRoZQU\nenyJI6x5SpvVPVSXUAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQNp6O1YaryL5kOkFylEQJKV7+H1glUTvvfGelVpY+vzXcQ1iDmDKruxuu9GTrvvtuR\nZ805E370CzFJfUb4Q7ggE=\n-----END SSH SIGNATURE-----", "payload": "tree 18fc592ab8f3b26099dc2cbc972bc9e86f0ff5b6\nparent d67000e44e1b9908c81fc4d5de875608f1b80ae9\nauthor Florian Bartels <Florian.Bartels@elektrobit.com> 1671177826 +0100\ncommitter Florian Bartels <Florian.Bartels@elektrobit.com> 1672248761 +0100\n\nCatch panics in destruction of TLS values\n\n`destroy_value` is/can be called from C code (libc). Unwinding\nfrom Rust to C code is undefined behavior, which is why unwinding\nis caught here.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04a6f22f7950daa680594353dbd03f5cb515aef5", "html_url": "https://github.com/rust-lang/rust/commit/04a6f22f7950daa680594353dbd03f5cb515aef5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04a6f22f7950daa680594353dbd03f5cb515aef5/comments", "author": {"login": "flba-eb", "id": 108917393, "node_id": "U_kgDOBn3ykQ", "avatar_url": "https://avatars.githubusercontent.com/u/108917393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flba-eb", "html_url": "https://github.com/flba-eb", "followers_url": "https://api.github.com/users/flba-eb/followers", "following_url": "https://api.github.com/users/flba-eb/following{/other_user}", "gists_url": "https://api.github.com/users/flba-eb/gists{/gist_id}", "starred_url": "https://api.github.com/users/flba-eb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flba-eb/subscriptions", "organizations_url": "https://api.github.com/users/flba-eb/orgs", "repos_url": "https://api.github.com/users/flba-eb/repos", "events_url": "https://api.github.com/users/flba-eb/events{/privacy}", "received_events_url": "https://api.github.com/users/flba-eb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flba-eb", "id": 108917393, "node_id": "U_kgDOBn3ykQ", "avatar_url": "https://avatars.githubusercontent.com/u/108917393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flba-eb", "html_url": "https://github.com/flba-eb", "followers_url": "https://api.github.com/users/flba-eb/followers", "following_url": "https://api.github.com/users/flba-eb/following{/other_user}", "gists_url": "https://api.github.com/users/flba-eb/gists{/gist_id}", "starred_url": "https://api.github.com/users/flba-eb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flba-eb/subscriptions", "organizations_url": "https://api.github.com/users/flba-eb/orgs", "repos_url": "https://api.github.com/users/flba-eb/repos", "events_url": "https://api.github.com/users/flba-eb/events{/privacy}", "received_events_url": "https://api.github.com/users/flba-eb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d67000e44e1b9908c81fc4d5de875608f1b80ae9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d67000e44e1b9908c81fc4d5de875608f1b80ae9", "html_url": "https://github.com/rust-lang/rust/commit/d67000e44e1b9908c81fc4d5de875608f1b80ae9"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "5f7e3a5dac9b4489b735001f6f3029c1abf3ed35", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/04a6f22f7950daa680594353dbd03f5cb515aef5/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a6f22f7950daa680594353dbd03f5cb515aef5/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=04a6f22f7950daa680594353dbd03f5cb515aef5", "patch": "@@ -905,9 +905,8 @@ pub mod statik {\n pub mod fast {\n     use super::lazy::LazyKeyInner;\n     use crate::cell::Cell;\n-    use crate::fmt;\n-    use crate::mem;\n     use crate::sys::thread_local_dtor::register_dtor;\n+    use crate::{fmt, mem, panic};\n \n     #[derive(Copy, Clone)]\n     enum DtorState {\n@@ -1028,10 +1027,15 @@ pub mod fast {\n         // `Option<T>` to `None`, and `dtor_state` to `RunningOrHasRun`. This\n         // causes future calls to `get` to run `try_initialize_drop` again,\n         // which will now fail, and return `None`.\n-        unsafe {\n+        //\n+        // Wrap the call in a catch to ensure unwinding is caught in the event\n+        // a panic takes place in a destructor.\n+        if let Err(_) = panic::catch_unwind(panic::AssertUnwindSafe(|| unsafe {\n             let value = (*ptr).inner.take();\n             (*ptr).dtor_state.set(DtorState::RunningOrHasRun);\n             drop(value);\n+        })) {\n+            rtabort!(\"thread local panicked on drop\");\n         }\n     }\n }\n@@ -1044,10 +1048,8 @@ pub mod fast {\n pub mod os {\n     use super::lazy::LazyKeyInner;\n     use crate::cell::Cell;\n-    use crate::fmt;\n-    use crate::marker;\n-    use crate::ptr;\n     use crate::sys_common::thread_local_key::StaticKey as OsStaticKey;\n+    use crate::{fmt, marker, panic, ptr};\n \n     /// Use a regular global static to store this key; the state provided will then be\n     /// thread-local.\n@@ -1137,12 +1139,17 @@ pub mod os {\n         //\n         // Note that to prevent an infinite loop we reset it back to null right\n         // before we return from the destructor ourselves.\n-        unsafe {\n+        //\n+        // Wrap the call in a catch to ensure unwinding is caught in the event\n+        // a panic takes place in a destructor.\n+        if let Err(_) = panic::catch_unwind(|| unsafe {\n             let ptr = Box::from_raw(ptr as *mut Value<T>);\n             let key = ptr.key;\n             key.os.set(ptr::invalid_mut(1));\n             drop(ptr);\n             key.os.set(ptr::null_mut());\n+        }) {\n+            rtabort!(\"thread local panicked on drop\");\n         }\n     }\n }"}]}