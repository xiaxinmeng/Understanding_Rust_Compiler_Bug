{"sha": "de10545906899084162b6511f15771db491551cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMTA1NDU5MDY4OTkwODQxNjJiNjUxMWYxNTc3MWRiNDkxNTUxY2M=", "commit": {"author": {"name": "Mark Story", "email": "mark@mark-story.com", "date": "2016-01-04T04:17:49Z"}, "committer": {"name": "Mark Story", "email": "mark@mark-story.com", "date": "2016-01-14T02:02:50Z"}, "message": "Encode XML entities.", "tree": {"sha": "9ab4a879c4f075395f89037a77a1fe3f3fdb246a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ab4a879c4f075395f89037a77a1fe3f3fdb246a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de10545906899084162b6511f15771db491551cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de10545906899084162b6511f15771db491551cc", "html_url": "https://github.com/rust-lang/rust/commit/de10545906899084162b6511f15771db491551cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de10545906899084162b6511f15771db491551cc/comments", "author": {"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}, "committer": {"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3632befb5f733a1a0cd8f42c6d0b8dbca100680", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3632befb5f733a1a0cd8f42c6d0b8dbca100680", "html_url": "https://github.com/rust-lang/rust/commit/c3632befb5f733a1a0cd8f42c6d0b8dbca100680"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "212b95dd25b41587e4386da50672ef166d1e061c", "filename": "src/filemap.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/de10545906899084162b6511f15771db491551cc/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de10545906899084162b6511f15771db491551cc/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=de10545906899084162b6511f15771db491551cc", "patch": "@@ -84,11 +84,13 @@ pub fn output_checkstyle_file<T>(mut writer: T,\n         for line in mismatch.lines {\n             match line {\n                 DiffLine::Expected(ref str) => {\n+                    let message = xml_escape_str(&str);\n+                    // TODO XML encode str here.\n                     try!(write!(writer,\n                                 \"<error line=\\\"{}\\\" severity=\\\"error\\\" message=\\\"Should be \\\n                                  `{}`\\\" />\",\n                                 mismatch.line_number,\n-                                str));\n+                                message));\n                 }\n                 _ => {\n                     // Do nothing with context and expected.\n@@ -100,6 +102,23 @@ pub fn output_checkstyle_file<T>(mut writer: T,\n     Ok(())\n }\n \n+// Convert special characters into XML entities.\n+// This is needed for checkstyle output.\n+fn xml_escape_str(string: &str) -> String {\n+    let mut out = String::new();\n+    for c in string.chars() {\n+        match c {\n+            '<' => out.push_str(\"&lt;\"),\n+            '>' => out.push_str(\"&gt;\"),\n+            '\"' => out.push_str(\"&quot;\"),\n+            '\\'' => out.push_str(\"&apos;\"),\n+            '&' => out.push_str(\"&amp;\"),\n+            _ => out.push(c),\n+        }\n+    }\n+    out\n+}\n+\n // Prints all newlines either as `\\n` or as `\\r\\n`.\n pub fn write_system_newlines<T>(writer: T,\n                                 text: &StringBuffer,"}]}