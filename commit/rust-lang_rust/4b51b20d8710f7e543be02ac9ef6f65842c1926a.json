{"sha": "4b51b20d8710f7e543be02ac9ef6f65842c1926a", "node_id": "C_kwDOAAsO6NoAKDRiNTFiMjBkODcxMGY3ZTU0M2JlMDJhYzllZjZmNjU4NDJjMTkyNmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-26T05:15:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-26T05:15:25Z"}, "message": "Rollup merge of #107086 - clubby789:bootstrap-lock-pid-linux, r=albertlarsan68\n\nPrint PID holding bootstrap build lock on Linux\n\nPartially address #107077\n\nParse `/proc/locks` to find the PID of the process which created the build directory lock", "tree": {"sha": "5bb279ae8ae3e323c22dcff9ab27591b269610c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bb279ae8ae3e323c22dcff9ab27591b269610c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b51b20d8710f7e543be02ac9ef6f65842c1926a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj0gxtCRBK7hj4Ov3rIwAA9zcIAJ5v0C/+ecH7HmqXMjb2llxl\nypgfe33sk3rTIQfSdqDhxz/xANmnIYsRMavUcfQmiliFxL1f0ToTcUc5hDnjYiX+\nFrfU6qVTJvgwZC0xkopRx5a9BbjpoBsf2Ic+oxMpEFNvcT+NXqIG7hHlIcRbCGVT\nx5EXgVefpfNJ0jdyrHe7k8GBO8/gDTUGGU85L9FRkUPk4vSo+iTmlekiTKUeS7RK\nyJjstB4aE8VhHt0yu7v8FIpAdSSVDshOD6Jm8ExRGEM13tUIETnNdSPckLar01gH\nZkPCyZITsHDnhhJLFb4nM0yMbYHy3b8+i+oMDqBVuXLWd/4kSrtkhlfnROiRXvs=\n=xnfA\n-----END PGP SIGNATURE-----\n", "payload": "tree 5bb279ae8ae3e323c22dcff9ab27591b269610c3\nparent f3644ca64de6357a07a3901dd2dacbda247beec6\nparent 72117ab2c7c32805e963bbf5f0d1bdc7cd72274c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674710125 +0100\ncommitter GitHub <noreply@github.com> 1674710125 +0100\n\nRollup merge of #107086 - clubby789:bootstrap-lock-pid-linux, r=albertlarsan68\n\nPrint PID holding bootstrap build lock on Linux\n\nPartially address #107077\n\nParse `/proc/locks` to find the PID of the process which created the build directory lock\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b51b20d8710f7e543be02ac9ef6f65842c1926a", "html_url": "https://github.com/rust-lang/rust/commit/4b51b20d8710f7e543be02ac9ef6f65842c1926a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b51b20d8710f7e543be02ac9ef6f65842c1926a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3644ca64de6357a07a3901dd2dacbda247beec6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3644ca64de6357a07a3901dd2dacbda247beec6", "html_url": "https://github.com/rust-lang/rust/commit/f3644ca64de6357a07a3901dd2dacbda247beec6"}, {"sha": "72117ab2c7c32805e963bbf5f0d1bdc7cd72274c", "url": "https://api.github.com/repos/rust-lang/rust/commits/72117ab2c7c32805e963bbf5f0d1bdc7cd72274c", "html_url": "https://github.com/rust-lang/rust/commit/72117ab2c7c32805e963bbf5f0d1bdc7cd72274c"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "3856bb64fb310331f44899dcd940708335e4e24c", "filename": "src/bootstrap/bin/main.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4b51b20d8710f7e543be02ac9ef6f65842c1926a/src%2Fbootstrap%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b51b20d8710f7e543be02ac9ef6f65842c1926a/src%2Fbootstrap%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Fmain.rs?ref=4b51b20d8710f7e543be02ac9ef6f65842c1926a", "patch": "@@ -16,12 +16,17 @@ fn main() {\n     let mut build_lock;\n     let _build_lock_guard;\n     if cfg!(any(unix, windows)) {\n-        build_lock = fd_lock::RwLock::new(t!(std::fs::File::create(config.out.join(\"lock\"))));\n+        let path = config.out.join(\"lock\");\n+        build_lock = fd_lock::RwLock::new(t!(std::fs::File::create(&path)));\n         _build_lock_guard = match build_lock.try_write() {\n             Ok(lock) => lock,\n             err => {\n-                println!(\"warning: build directory locked, waiting for lock\");\n                 drop(err);\n+                if let Some(pid) = get_lock_owner(&path) {\n+                    println!(\"warning: build directory locked by process {pid}, waiting for lock\");\n+                } else {\n+                    println!(\"warning: build directory locked, waiting for lock\");\n+                }\n                 t!(build_lock.write())\n             }\n         };\n@@ -98,3 +103,30 @@ fn check_version(config: &Config) -> Option<String> {\n \n     Some(msg)\n }\n+\n+/// Get the PID of the process which took the write lock by\n+/// parsing `/proc/locks`.\n+#[cfg(target_os = \"linux\")]\n+fn get_lock_owner(f: &std::path::Path) -> Option<u64> {\n+    use std::fs::File;\n+    use std::io::{BufRead, BufReader};\n+    use std::os::unix::fs::MetadataExt;\n+\n+    let lock_inode = std::fs::metadata(f).ok()?.ino();\n+    let lockfile = File::open(\"/proc/locks\").ok()?;\n+    BufReader::new(lockfile).lines().find_map(|line| {\n+        //                       pid--vvvvvv       vvvvvvv--- inode\n+        // 21: FLOCK  ADVISORY  WRITE 359238 08:02:3719774 0 EOF\n+        let line = line.ok()?;\n+        let parts = line.split_whitespace().collect::<Vec<_>>();\n+        let (pid, inode) = (parts[4].parse::<u64>().ok()?, &parts[5]);\n+        let inode = inode.rsplit_once(':')?.1.parse::<u64>().ok()?;\n+        if inode == lock_inode { Some(pid) } else { None }\n+    })\n+}\n+\n+#[cfg(not(target_os = \"linux\"))]\n+fn get_lock_owner(_: &std::path::Path) -> Option<u64> {\n+    // FIXME: Implement on other OS's\n+    None\n+}"}]}