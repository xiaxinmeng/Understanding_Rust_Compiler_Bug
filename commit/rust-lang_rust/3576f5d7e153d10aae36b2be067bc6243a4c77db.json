{"sha": "3576f5d7e153d10aae36b2be067bc6243a4c77db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NzZmNWQ3ZTE1M2QxMGFhZTM2YjJiZTA2N2JjNjI0M2E0Yzc3ZGI=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-10T21:24:17Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-15T14:54:05Z"}, "message": "Address review comments about code style", "tree": {"sha": "592f6ca285e74402a2725a6cd28550d08b3074eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/592f6ca285e74402a2725a6cd28550d08b3074eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3576f5d7e153d10aae36b2be067bc6243a4c77db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3576f5d7e153d10aae36b2be067bc6243a4c77db", "html_url": "https://github.com/rust-lang/rust/commit/3576f5d7e153d10aae36b2be067bc6243a4c77db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3576f5d7e153d10aae36b2be067bc6243a4c77db/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cbc1cddcc6b9657fb727e35dce753d38e52cc52", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cbc1cddcc6b9657fb727e35dce753d38e52cc52", "html_url": "https://github.com/rust-lang/rust/commit/0cbc1cddcc6b9657fb727e35dce753d38e52cc52"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "d5389d06906b86529b2af586b90f0bd2ad10294a", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3576f5d7e153d10aae36b2be067bc6243a4c77db/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3576f5d7e153d10aae36b2be067bc6243a4c77db/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=3576f5d7e153d10aae36b2be067bc6243a4c77db", "patch": "@@ -5,13 +5,18 @@ use rustc_driver::abort_on_err;\n use rustc_errors::emitter::{Emitter, EmitterWriter};\n use rustc_errors::json::JsonEmitter;\n use rustc_feature::UnstableFeatures;\n-use rustc_hir::def::Namespace::TypeNS;\n+use rustc_hir::def::{Namespace::TypeNS, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::HirId;\n+use rustc_hir::{\n+    intravisit::{NestedVisitorMap, Visitor},\n+    Path,\n+};\n use rustc_interface::interface;\n+use rustc_middle::hir::map::Map;\n use rustc_middle::middle::cstore::CrateStore;\n use rustc_middle::middle::privacy::AccessLevels;\n-use rustc_middle::ty::{Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_resolve as resolve;\n use rustc_session::config::{self, CrateType, ErrorOutputType};\n use rustc_session::lint;\n@@ -587,15 +592,8 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n     })\n }\n \n-use rustc_hir::def::Res;\n-use rustc_hir::{\n-    intravisit::{NestedVisitorMap, Visitor},\n-    Path,\n-};\n-use rustc_middle::hir::map::Map;\n-\n-thread_local!(static DEFAULT_TYPECK: for<'tcx> fn(rustc_middle::ty::TyCtxt<'tcx>, rustc_span::def_id::LocalDefId) -> &'tcx rustc_middle::ty::TypeckTables<'tcx> = {\n-    let mut providers = rustc_middle::ty::query::Providers::default();\n+thread_local!(static DEFAULT_TYPECK: for<'tcx> fn(TyCtxt<'tcx>, LocalDefId) -> &'tcx ty::TypeckTables<'tcx> = {\n+    let mut providers = ty::query::Providers::default();\n     rustc_typeck::provide(&mut providers);\n     providers.typeck_tables_of\n });\n@@ -625,13 +623,11 @@ impl<'hir> Visitor<'hir> for EmitIgnoredResolutionErrors<'_, 'hir> {\n     }\n \n     fn visit_path(&mut self, path: &'v Path<'v>, _id: HirId) {\n-        log::debug!(\"visiting path {:?}\", path);\n+        debug!(\"visiting path {:?}\", path);\n         if path.res == Res::Err {\n             // We have less context here than in rustc_resolve,\n             // so we can only emit the name and span.\n             // However we can give a hint that rustc_resolve will have more info.\n-            // NOTE: this is a very rare case (only 4 out of several hundred thousand crates in a crater run)\n-            // NOTE: so it's ok for it to be slow\n             let label = format!(\n                 \"could not resolve path `{}`\",\n                 path.segments"}]}