{"sha": "51aaba6e8cf50289d55f53ac85aab4c95d601439", "node_id": "C_kwDOAAsO6NoAKDUxYWFiYTZlOGNmNTAyODlkNTVmNTNhYzg1YWFiNGM5NWQ2MDE0Mzk", "commit": {"author": {"name": "navh", "email": "navarre.hebb@gmail.com", "date": "2022-12-06T18:05:22Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2023-01-12T11:16:06Z"}, "message": "`cast_possible_truncation` Suggest TryFrom when truncation possible", "tree": {"sha": "60aaefa9488f3a3819786777c890e41121fe6cef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60aaefa9488f3a3819786777c890e41121fe6cef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51aaba6e8cf50289d55f53ac85aab4c95d601439", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEwgBEOx3xlHwII7PG9cWdDmaeUwIFAmO/6/YACgkQ9cWdDmae\nUwLRnQ/7Bkfu1AovmWTrJ4Sajhv2hfpq9BPLvlrP5+Xgbrd5hydNzKslVtVrMuCd\ndd21TNdWXvY+IY9lgbVijqqqyajVXxb729wW1EuAHlJxPOdHXypMHBKEucciZ2Ek\n478i5PGgPNX9BhQWtGsrMUcuo68ZpI/+p8+LbAXUL5ue4bi32ToINtwNXC/cq5JH\nqYlg2VZG4Ny3dDL6ULSqLioNt0kMYyIAiyFYeNQZuUemADNFYe0aJUl10hvAqAkL\n4bQStvq4DpL6eAp2eE2qrnntHWIIqmamF/uOyahFvHnO5zfLyivw5g2Rw9rc2QpD\nWCjcI7+Fox8vPLiNoIdkiDQ5PmDjmlSpfXzk8RUWyDXfZp3P6pMiKQFS3YSvY8nI\nKciyXOyQ14iWJTgjG9cBUwkxf0GiSbUbhnI6zaJ+ccBMW/ZPu03I+eCyAhUq7NCb\nbqlFlOXa31RNCBDCJw8qh1rY6C+SP3VVXKwQS7lHtB4eVRUa+ovr/GuTf8VDCI3T\nL0jIAVNHBC4++2lSHjXVfFWe8l6seBQqImlA9pO3gdzD8NywG31uXoxezHnBqfMh\n40cbtCip+zegcjq5U5VecsrKi/HEc5X1XexcLQFdJJwNs8LFNTwlnKU1Sx0t+so5\ndzVW8kpdeZXTlS0PPK+9YueldQlU6za9SAPD6c7vjA7Q3g2QbUs=\n=W2a1\n-----END PGP SIGNATURE-----", "payload": "tree 60aaefa9488f3a3819786777c890e41121fe6cef\nparent a95286b8521a83b93e3ce2c2f3d2b015948acaad\nauthor navh <navarre.hebb@gmail.com> 1670349922 +0100\ncommitter xFrednet <xFrednet@gmail.com> 1673522166 +0100\n\n`cast_possible_truncation` Suggest TryFrom when truncation possible\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51aaba6e8cf50289d55f53ac85aab4c95d601439", "html_url": "https://github.com/rust-lang/rust/commit/51aaba6e8cf50289d55f53ac85aab4c95d601439", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51aaba6e8cf50289d55f53ac85aab4c95d601439/comments", "author": {"login": "navh", "id": 10426715, "node_id": "MDQ6VXNlcjEwNDI2NzE1", "avatar_url": "https://avatars.githubusercontent.com/u/10426715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/navh", "html_url": "https://github.com/navh", "followers_url": "https://api.github.com/users/navh/followers", "following_url": "https://api.github.com/users/navh/following{/other_user}", "gists_url": "https://api.github.com/users/navh/gists{/gist_id}", "starred_url": "https://api.github.com/users/navh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/navh/subscriptions", "organizations_url": "https://api.github.com/users/navh/orgs", "repos_url": "https://api.github.com/users/navh/repos", "events_url": "https://api.github.com/users/navh/events{/privacy}", "received_events_url": "https://api.github.com/users/navh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a95286b8521a83b93e3ce2c2f3d2b015948acaad", "url": "https://api.github.com/repos/rust-lang/rust/commits/a95286b8521a83b93e3ce2c2f3d2b015948acaad", "html_url": "https://github.com/rust-lang/rust/commit/a95286b8521a83b93e3ce2c2f3d2b015948acaad"}], "stats": {"total": 174, "additions": 170, "deletions": 4}, "files": [{"sha": "d9898aeb92c4dcbba73b615fb7fc48724206f995", "filename": "clippy_lints/src/casts/cast_possible_truncation.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/51aaba6e8cf50289d55f53ac85aab4c95d601439/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51aaba6e8cf50289d55f53ac85aab4c95d601439/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs?ref=51aaba6e8cf50289d55f53ac85aab4c95d601439", "patch": "@@ -1,7 +1,11 @@\n use clippy_utils::consts::{constant, Constant};\n-use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n use clippy_utils::expr_or_init;\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::{get_discriminant_value, is_isize_or_usize};\n+use rustc_ast::ast;\n+use rustc_attr::IntType;\n+use rustc_errors::{Applicability, SuggestionStyle};\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::LateContext;\n@@ -139,7 +143,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n                 );\n                 return;\n             }\n-            format!(\"casting `{cast_from}` to `{cast_to}` may truncate the value{suffix}\",)\n+            format!(\"casting `{cast_from}` to `{cast_to}` may truncate the value{suffix}\")\n         },\n \n         (ty::Float(_), true) => {\n@@ -153,5 +157,19 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n         _ => return,\n     };\n \n-    span_lint(cx, CAST_POSSIBLE_TRUNCATION, expr.span, &msg);\n+    let snippet = snippet(cx, expr.span, \"x\");\n+    let name_of_cast_from = snippet.split(\" as\").next().unwrap_or(\"x\");\n+    let suggestion = format!(\"{cast_to}::try_from({name_of_cast_from})\");\n+\n+    span_lint_and_then(cx, CAST_POSSIBLE_TRUNCATION, expr.span, &msg, |diag| {\n+        diag.help(\"if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\");\n+        diag.span_suggestion_with_style(\n+            expr.span,\n+            \"... or use `try_from` and handle the error accordingly\",\n+            suggestion,\n+            Applicability::Unspecified,\n+            // always show the suggestion in a separate line\n+            SuggestionStyle::ShowAlways,\n+        );\n+    });\n }"}, {"sha": "38b1c5c1c7e7e947a94a2a6cad56aae16f381d5e", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51aaba6e8cf50289d55f53ac85aab4c95d601439/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51aaba6e8cf50289d55f53ac85aab4c95d601439/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=51aaba6e8cf50289d55f53ac85aab4c95d601439", "patch": "@@ -85,7 +85,7 @@ declare_clippy_lint! {\n     /// ### Why is this bad?\n     /// In some problem domains, it is good practice to avoid\n     /// truncation. This lint can be activated to help assess where additional\n-    /// checks could be beneficial.\n+    /// checks could be beneficial, and suggests implementing TryFrom trait.\n     ///\n     /// ### Example\n     /// ```rust"}, {"sha": "eceb135d62ba6df49d627785311672b85e954d4e", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/51aaba6e8cf50289d55f53ac85aab4c95d601439/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/51aaba6e8cf50289d55f53ac85aab4c95d601439/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=51aaba6e8cf50289d55f53ac85aab4c95d601439", "patch": "@@ -42,13 +42,24 @@ error: casting `f32` to `i32` may truncate the value\n LL |     1f32 as i32;\n    |     ^^^^^^^^^^^\n    |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n    = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     i32::try_from(1f32);\n+   |     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `f32` to `u32` may truncate the value\n   --> $DIR/cast.rs:25:5\n    |\n LL |     1f32 as u32;\n    |     ^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     u32::try_from(1f32);\n+   |     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `f32` to `u32` may lose the sign of the value\n   --> $DIR/cast.rs:25:5\n@@ -63,30 +74,60 @@ error: casting `f64` to `f32` may truncate the value\n    |\n LL |     1f64 as f32;\n    |     ^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     f32::try_from(1f64);\n+   |     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `i32` to `i8` may truncate the value\n   --> $DIR/cast.rs:27:5\n    |\n LL |     1i32 as i8;\n    |     ^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     i8::try_from(1i32);\n+   |     ~~~~~~~~~~~~~~~~~~\n \n error: casting `i32` to `u8` may truncate the value\n   --> $DIR/cast.rs:28:5\n    |\n LL |     1i32 as u8;\n    |     ^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     u8::try_from(1i32);\n+   |     ~~~~~~~~~~~~~~~~~~\n \n error: casting `f64` to `isize` may truncate the value\n   --> $DIR/cast.rs:29:5\n    |\n LL |     1f64 as isize;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     isize::try_from(1f64);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `f64` to `usize` may truncate the value\n   --> $DIR/cast.rs:30:5\n    |\n LL |     1f64 as usize;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     usize::try_from(1f64);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `f64` to `usize` may lose the sign of the value\n   --> $DIR/cast.rs:30:5\n@@ -143,18 +184,36 @@ error: casting `i64` to `i8` may truncate the value\n    |\n LL |     (-99999999999i64).min(1) as i8; // should be linted because signed\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     i8::try_from((-99999999999i64).min(1)); // should be linted because signed\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `u64` to `u8` may truncate the value\n   --> $DIR/cast.rs:120:5\n    |\n LL |     999999u64.clamp(0, 256) as u8; // should still be linted\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     u8::try_from(999999u64.clamp(0, 256)); // should still be linted\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E2` to `u8` may truncate the value\n   --> $DIR/cast.rs:141:21\n    |\n LL |             let _ = self as u8;\n    |                     ^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |             let _ = u8::try_from(self);\n+   |                     ~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E2::B` to `u8` will truncate the value\n   --> $DIR/cast.rs:142:21\n@@ -169,6 +228,12 @@ error: casting `main::E5` to `i8` may truncate the value\n    |\n LL |             let _ = self as i8;\n    |                     ^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |             let _ = i8::try_from(self);\n+   |                     ~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E5::A` to `i8` will truncate the value\n   --> $DIR/cast.rs:179:21\n@@ -181,30 +246,60 @@ error: casting `main::E6` to `i16` may truncate the value\n    |\n LL |             let _ = self as i16;\n    |                     ^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |             let _ = i16::try_from(self);\n+   |                     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E7` to `usize` may truncate the value on targets with 32-bit wide pointers\n   --> $DIR/cast.rs:208:21\n    |\n LL |             let _ = self as usize;\n    |                     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |             let _ = usize::try_from(self);\n+   |                     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E10` to `u16` may truncate the value\n   --> $DIR/cast.rs:249:21\n    |\n LL |             let _ = self as u16;\n    |                     ^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |             let _ = u16::try_from(self);\n+   |                     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `u32` to `u8` may truncate the value\n   --> $DIR/cast.rs:257:13\n    |\n LL |     let c = (q >> 16) as u8;\n    |             ^^^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     let c = u8::try_from((q >> 16));\n+   |             ~~~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `u32` to `u8` may truncate the value\n   --> $DIR/cast.rs:260:13\n    |\n LL |     let c = (q / 1000) as u8;\n    |             ^^^^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     let c = u8::try_from((q / 1000));\n+   |             ~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 33 previous errors\n "}, {"sha": "8acf26049f4d15755f9163ed6b0836a59c436e8b", "filename": "tests/ui/cast_size.stderr", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/51aaba6e8cf50289d55f53ac85aab4c95d601439/tests%2Fui%2Fcast_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/51aaba6e8cf50289d55f53ac85aab4c95d601439/tests%2Fui%2Fcast_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size.stderr?ref=51aaba6e8cf50289d55f53ac85aab4c95d601439", "patch": "@@ -4,7 +4,12 @@ error: casting `isize` to `i8` may truncate the value\n LL |     1isize as i8;\n    |     ^^^^^^^^^^^^\n    |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n    = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     i8::try_from(1isize);\n+   |     ~~~~~~~~~~~~~~~~~~~~\n \n error: casting `isize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`isize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\n   --> $DIR/cast_size.rs:15:5\n@@ -37,24 +42,48 @@ error: casting `isize` to `i32` may truncate the value on targets with 64-bit wi\n    |\n LL |     1isize as i32;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     i32::try_from(1isize);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `isize` to `u32` may truncate the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size.rs:20:5\n    |\n LL |     1isize as u32;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     u32::try_from(1isize);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size.rs:21:5\n    |\n LL |     1usize as u32;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     u32::try_from(1usize);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size.rs:22:5\n    |\n LL |     1usize as i32;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     i32::try_from(1usize);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size.rs:22:5\n@@ -69,18 +98,36 @@ error: casting `i64` to `isize` may truncate the value on targets with 32-bit wi\n    |\n LL |     1i64 as isize;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     isize::try_from(1i64);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size.rs:25:5\n    |\n LL |     1i64 as usize;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     usize::try_from(1i64);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size.rs:26:5\n    |\n LL |     1u64 as isize;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     isize::try_from(1u64);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size.rs:26:5\n@@ -93,6 +140,12 @@ error: casting `u64` to `usize` may truncate the value on targets with 32-bit wi\n    |\n LL |     1u64 as usize;\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     usize::try_from(1u64);\n+   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `u32` to `isize` may wrap around the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size.rs:28:5"}]}