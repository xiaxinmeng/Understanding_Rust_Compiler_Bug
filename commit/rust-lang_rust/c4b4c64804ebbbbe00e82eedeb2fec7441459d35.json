{"sha": "c4b4c64804ebbbbe00e82eedeb2fec7441459d35", "node_id": "C_kwDOAAsO6NoAKGM0YjRjNjQ4MDRlYmJiYmUwMGU4MmVlZGViMmZlYzc0NDE0NTlkMzU", "commit": {"author": {"name": "Christopher Durham", "email": "cad97@cad97.com", "date": "2022-06-30T03:17:15Z"}, "committer": {"name": "Christopher Durham", "email": "cad97@cad97.com", "date": "2022-06-30T03:17:15Z"}, "message": "Revert isize::MAX changes to Layout helpers\n\nThe isize::MAX is enforced by the constructor; let it handle it.", "tree": {"sha": "3c087f4bdab807aaad3bea1107cd718ed4e6739c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c087f4bdab807aaad3bea1107cd718ed4e6739c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4b4c64804ebbbbe00e82eedeb2fec7441459d35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4b4c64804ebbbbe00e82eedeb2fec7441459d35", "html_url": "https://github.com/rust-lang/rust/commit/c4b4c64804ebbbbe00e82eedeb2fec7441459d35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4b4c64804ebbbbe00e82eedeb2fec7441459d35/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b58193f90185a5730732a727362576a9bdca26b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b58193f90185a5730732a727362576a9bdca26b", "html_url": "https://github.com/rust-lang/rust/commit/7b58193f90185a5730732a727362576a9bdca26b"}], "stats": {"total": 53, "additions": 16, "deletions": 37}, "files": [{"sha": "70fa7d88ebfe8e891d084903e6d7eb16189d28de", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 16, "deletions": 37, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c4b4c64804ebbbbe00e82eedeb2fec7441459d35/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b4c64804ebbbbe00e82eedeb2fec7441459d35/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=c4b4c64804ebbbbe00e82eedeb2fec7441459d35", "patch": "@@ -1,5 +1,4 @@\n use crate::cmp;\n-use crate::convert::TryFrom;\n use crate::fmt;\n use crate::mem;\n use crate::num::NonZeroUsize;\n@@ -303,18 +302,10 @@ impl Layout {\n         // > must not overflow isize (i.e., the rounded value must be\n         // > less than or equal to `isize::MAX`)\n         let padded_size = self.size() + self.padding_needed_for(self.align());\n-        // Size manipulation is done in isize space to avoid overflowing isize.\n-        let n = isize::try_from(n).map_err(|_| LayoutError)?;\n-        let alloc_size = (padded_size as isize).checked_mul(n).ok_or(LayoutError)?;\n+        let alloc_size = padded_size.checked_mul(n).ok_or(LayoutError)?;\n \n-        // SAFETY: self.align is already known to be valid and alloc_size has been\n-        // padded already.\n-        unsafe {\n-            Ok((\n-                Layout::from_size_align_unchecked(alloc_size as usize, self.align()),\n-                padded_size as usize,\n-            ))\n-        }\n+        // The safe constructor is called here to enforce the isize size limit.\n+        Layout::from_size_align(alloc_size, self.align()).map(|layout| (layout, padded_size))\n     }\n \n     /// Creates a layout describing the record for `self` followed by\n@@ -368,12 +359,12 @@ impl Layout {\n         let new_align = cmp::max(self.align(), next.align());\n         let pad = self.padding_needed_for(next.align());\n \n-        // Size manipulation is done in isize space to avoid overflowing isize.\n-        let offset = (self.size() as isize).checked_add(pad as isize).ok_or(LayoutError)?;\n-        let new_size = offset.checked_add(next.size() as isize).ok_or(LayoutError)?;\n+        let offset = self.size().checked_add(pad).ok_or(LayoutError)?;\n+        let new_size = offset.checked_add(next.size()).ok_or(LayoutError)?;\n \n-        let layout = Layout::from_size_align(new_size as usize, new_align)?;\n-        Ok((layout, offset as usize))\n+        // The safe constructor is called here to enforce the isize size limit.\n+        let layout = Layout::from_size_align(new_size, new_align)?;\n+        Ok((layout, offset))\n     }\n \n     /// Creates a layout describing the record for `n` instances of\n@@ -391,9 +382,8 @@ impl Layout {\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n     pub fn repeat_packed(&self, n: usize) -> Result<Self, LayoutError> {\n-        // Size manipulation is done in isize space to avoid overflowing isize.\n-        let n = isize::try_from(n).map_err(|_| LayoutError)?;\n-        let size = (self.size() as isize).checked_mul(n).ok_or(LayoutError)?;\n+        let size = self.size().checked_mul(n).ok_or(LayoutError)?;\n+        // The safe constructor is called here to enforce the isize size limit.\n         Layout::from_size_align(size as usize, self.align())\n     }\n \n@@ -406,10 +396,9 @@ impl Layout {\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n     pub fn extend_packed(&self, next: Self) -> Result<Self, LayoutError> {\n-        // Size manipulation is done in isize space to avoid overflowing isize.\n-        let new_size =\n-            (self.size() as isize).checked_add(next.size() as isize).ok_or(LayoutError)?;\n-        Layout::from_size_align(new_size as usize, self.align())\n+        let new_size = self.size().checked_add(next.size()).ok_or(LayoutError)?;\n+        // The safe constructor is called here to enforce the isize size limit.\n+        Layout::from_size_align(new_size, self.align())\n     }\n \n     /// Creates a layout describing the record for a `[T; n]`.\n@@ -418,19 +407,9 @@ impl Layout {\n     #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n     #[inline]\n     pub fn array<T>(n: usize) -> Result<Self, LayoutError> {\n-        // Size manipulation is done in isize space to avoid overflowing isize.\n-        let n = isize::try_from(n).map_err(|_| LayoutError)?;\n-        let array_size = (mem::size_of::<T>() as isize).checked_mul(n).ok_or(LayoutError)?;\n-\n-        // SAFETY:\n-        // - Size: `array_size` cannot be too big because `size_of::<T>()` must\n-        //   be a multiple of `align_of::<T>()`. Therefore, `array_size`\n-        //   rounded up to the nearest multiple of `align_of::<T>()` is just\n-        //   `array_size`. And `array_size` cannot be too big because it was\n-        //   just checked by the `checked_mul()`.\n-        // - Alignment: `align_of::<T>()` will always give an acceptable\n-        //   (non-zero, power of two) alignment.\n-        Ok(unsafe { Layout::from_size_align_unchecked(array_size as usize, mem::align_of::<T>()) })\n+        let array_size = mem::size_of::<T>().checked_mul(n).ok_or(LayoutError)?;\n+        // The safe constructor is called here to enforce the isize size limit.\n+        Layout::from_size_align(array_size, mem::align_of::<T>())\n     }\n }\n "}]}