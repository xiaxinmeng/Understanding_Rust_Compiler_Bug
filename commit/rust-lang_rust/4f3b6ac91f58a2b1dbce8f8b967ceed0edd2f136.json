{"sha": "4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136", "node_id": "C_kwDOAAsO6NoAKDRmM2I2YWM5MWY1OGEyYjFkYmNlOGY4Yjk2N2NlZWQwZWRkMmYxMzY", "commit": {"author": {"name": "Yiming Lei", "email": "yiming.lei@futurewei.com", "date": "2022-10-04T17:30:25Z"}, "committer": {"name": "Yiming Lei", "email": "yiming.lei@futurewei.com", "date": "2022-10-04T17:30:25Z"}, "message": "follow-up fix about 101866 to print the self type.\n\tmodified:   compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs\n\tmodified:   src/test/ui/error-codes/E0283.stderr\n\tmodified:   src/test/ui/error-codes/E0790.stderr\n\tmodified:   src/test/ui/traits/static-method-generic-inference.stderr\n\tmodified:   src/test/ui/type/issue-101866.stderr", "tree": {"sha": "98e4a5bc77cf312445e9b88ece585bd001a2e47a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98e4a5bc77cf312445e9b88ece585bd001a2e47a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136", "html_url": "https://github.com/rust-lang/rust/commit/4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136/comments", "author": null, "committer": null, "parents": [{"sha": "02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "url": "https://api.github.com/repos/rust-lang/rust/commits/02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "html_url": "https://github.com/rust-lang/rust/commit/02cd79afb8080fce8c8ce35533c54d8ecf8f390e"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "e694151d503a7ceb1c4f9aeabc76ce28f8d6f6e6", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136", "patch": "@@ -2265,7 +2265,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                             };\n                             let mut suggestions = vec![(\n                                 trait_path_segment.ident.span.shrink_to_lo(),\n-                                format!(\"<{} as \", self.tcx.def_path(impl_def_id).to_string_no_crate_verbose())\n+                                format!(\"<{} as \", self.tcx.type_of(impl_def_id))\n                             )];\n                             if let Some(generic_arg) = trait_path_segment.args {\n                                 let between_span = trait_path_segment.ident.span.between(generic_arg.span_ext);"}, {"sha": "90316c6e981d8af9b2f350f5414727b88824bf6f", "filename": "src/test/ui/error-codes/E0283.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr?ref=4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136", "patch": "@@ -9,8 +9,8 @@ LL |     let cont: u32 = Generator::create();\n    |\n help: use a fully-qualified path to a specific available implementation (2 found)\n    |\n-LL |     let cont: u32 = <::Impl as Generator>::create();\n-   |                     ++++++++++          +\n+LL |     let cont: u32 = <Impl as Generator>::create();\n+   |                     ++++++++          +\n \n error[E0283]: type annotations needed\n   --> $DIR/E0283.rs:35:24"}, {"sha": "f68c0e7d220f369d4409d59e26baa99ecd954b7d", "filename": "src/test/ui/error-codes/E0790.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136/src%2Ftest%2Fui%2Ferror-codes%2FE0790.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136/src%2Ftest%2Fui%2Ferror-codes%2FE0790.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0790.stderr?ref=4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136", "patch": "@@ -9,8 +9,8 @@ LL |         MyTrait::my_fn();\n    |\n help: use the fully-qualified path to the only available implementation\n    |\n-LL |         <::inner::MyStruct as MyTrait>::my_fn();\n-   |         +++++++++++++++++++++        +\n+LL |         <MyStruct as MyTrait>::my_fn();\n+   |         ++++++++++++        +\n \n error[E0790]: cannot refer to the associated constant on trait without specifying the corresponding `impl` type\n   --> $DIR/E0790.rs:21:17\n@@ -23,8 +23,8 @@ LL |         let _ = MyTrait::MY_ASSOC_CONST;\n    |\n help: use the fully-qualified path to the only available implementation\n    |\n-LL |         let _ = <::inner::MyStruct as MyTrait>::MY_ASSOC_CONST;\n-   |                 +++++++++++++++++++++        +\n+LL |         let _ = <MyStruct as MyTrait>::MY_ASSOC_CONST;\n+   |                 ++++++++++++        +\n \n error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n   --> $DIR/E0790.rs:26:5\n@@ -37,8 +37,8 @@ LL |     inner::MyTrait::my_fn();\n    |\n help: use the fully-qualified path to the only available implementation\n    |\n-LL |     inner::<::inner::MyStruct as MyTrait>::my_fn();\n-   |            +++++++++++++++++++++        +\n+LL |     inner::<MyStruct as MyTrait>::my_fn();\n+   |            ++++++++++++        +\n \n error[E0790]: cannot refer to the associated constant on trait without specifying the corresponding `impl` type\n   --> $DIR/E0790.rs:30:13\n@@ -51,8 +51,8 @@ LL |     let _ = inner::MyTrait::MY_ASSOC_CONST;\n    |\n help: use the fully-qualified path to the only available implementation\n    |\n-LL |     let _ = inner::<::inner::MyStruct as MyTrait>::MY_ASSOC_CONST;\n-   |                    +++++++++++++++++++++        +\n+LL |     let _ = inner::<MyStruct as MyTrait>::MY_ASSOC_CONST;\n+   |                    ++++++++++++        +\n \n error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n   --> $DIR/E0790.rs:50:5\n@@ -65,8 +65,8 @@ LL |     MyTrait2::my_fn();\n    |\n help: use a fully-qualified path to a specific available implementation (2 found)\n    |\n-LL |     <::Impl1 as MyTrait2>::my_fn();\n-   |     +++++++++++         +\n+LL |     <Impl1 as MyTrait2>::my_fn();\n+   |     +++++++++         +\n \n error: aborting due to 5 previous errors\n "}, {"sha": "5f74d0c3b9260e5686593d89852bb77abed05823", "filename": "src/test/ui/traits/static-method-generic-inference.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr?ref=4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136", "patch": "@@ -9,8 +9,8 @@ LL |     let _f: base::Foo = base::HasNew::new();\n    |\n help: use the fully-qualified path to the only available implementation\n    |\n-LL |     let _f: base::Foo = base::<::base::Foo as HasNew>::new();\n-   |                               +++++++++++++++       +\n+LL |     let _f: base::Foo = base::<Foo as HasNew>::new();\n+   |                               +++++++       +\n \n error: aborting due to previous error\n "}, {"sha": "fe99821198e205eb00187dca6df4a1439ed45bf5", "filename": "src/test/ui/type/issue-101866.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136/src%2Ftest%2Fui%2Ftype%2Fissue-101866.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136/src%2Ftest%2Fui%2Ftype%2Fissue-101866.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-101866.stderr?ref=4f3b6ac91f58a2b1dbce8f8b967ceed0edd2f136", "patch": "@@ -10,7 +10,7 @@ LL |     TraitA::<i32>::func();\n help: use the fully-qualified path to the only available implementation\n    |\n LL -     TraitA::<i32>::func();\n-LL +     <::StructA as TraitA<i32>>::func();\n+LL +     <StructA as TraitA<i32>>::func();\n    |\n \n error: aborting due to previous error"}]}