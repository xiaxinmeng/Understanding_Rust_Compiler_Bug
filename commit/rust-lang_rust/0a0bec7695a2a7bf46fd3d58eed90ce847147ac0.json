{"sha": "0a0bec7695a2a7bf46fd3d58eed90ce847147ac0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMGJlYzc2OTVhMmE3YmY0NmZkM2Q1OGVlZDkwY2U4NDcxNDdhYzA=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2017-10-11T00:22:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-11T00:22:26Z"}, "message": "Rollup merge of #45139 - michaelwoerister:document-force_from_dep_node, r=nikomatsakis\n\nincr.comp.: Add some documentation to force_from_dep_node().\n\nr? @nikomatsakis", "tree": {"sha": "bb2f1b4b627d866fdfaaf6e2af84de3bf6b5edc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb2f1b4b627d866fdfaaf6e2af84de3bf6b5edc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a0bec7695a2a7bf46fd3d58eed90ce847147ac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a0bec7695a2a7bf46fd3d58eed90ce847147ac0", "html_url": "https://github.com/rust-lang/rust/commit/0a0bec7695a2a7bf46fd3d58eed90ce847147ac0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a0bec7695a2a7bf46fd3d58eed90ce847147ac0/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fab96c4b1201977f8875388611be5481079f5cf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fab96c4b1201977f8875388611be5481079f5cf2", "html_url": "https://github.com/rust-lang/rust/commit/fab96c4b1201977f8875388611be5481079f5cf2"}, {"sha": "eb1006f5cfb9429d76423bea5360d59a818fbc43", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb1006f5cfb9429d76423bea5360d59a818fbc43", "html_url": "https://github.com/rust-lang/rust/commit/eb1006f5cfb9429d76423bea5360d59a818fbc43"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "389b0401b86ab2e528276a8b7a9e57289809c6f8", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0a0bec7695a2a7bf46fd3d58eed90ce847147ac0/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0bec7695a2a7bf46fd3d58eed90ce847147ac0/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=0a0bec7695a2a7bf46fd3d58eed90ce847147ac0", "patch": "@@ -603,6 +603,49 @@ macro_rules! define_provider_struct {\n     };\n }\n \n+\n+/// The red/green evaluation system will try to mark a specific DepNode in the\n+/// dependency graph as green by recursively trying to mark the dependencies of\n+/// that DepNode as green. While doing so, it will sometimes encounter a DepNode\n+/// where we don't know if it is red or green and we therefore actually have\n+/// to recompute its value in order to find out. Since the only piece of\n+/// information that we have at that point is the DepNode we are trying to\n+/// re-evaluate, we need some way to re-run a query from just that. This is what\n+/// `force_from_dep_node()` implements.\n+///\n+/// In the general case, a DepNode consists of a DepKind and an opaque\n+/// GUID/fingerprint that will uniquely identify the node. This GUID/fingerprint\n+/// is usually constructed by computing a stable hash of the query-key that the\n+/// DepNode corresponds to. Consequently, it is not in general possible to go\n+/// back from hash to query-key (since hash functions are not reversible). For\n+/// this reason `force_from_dep_node()` is expected to fail from time to time\n+/// because we just cannot find out, from the DepNode alone, what the\n+/// corresponding query-key is and therefore cannot re-run the query.\n+///\n+/// The system deals with this case letting `try_mark_green` fail which forces\n+/// the root query to be re-evaluated.\n+///\n+/// Now, if force_from_dep_node() would always fail, it would be pretty useless.\n+/// Fortunately, we can use some contextual information that will allow us to\n+/// reconstruct query-keys for certain kinds of DepNodes. In particular, we\n+/// enforce by construction that the GUID/fingerprint of certain DepNodes is a\n+/// valid DefPathHash. Since we also always build a huge table that maps every\n+/// DefPathHash in the current codebase to the corresponding DefId, we have\n+/// everything we need to re-run the query.\n+///\n+/// Take the `mir_validated` query as an example. Like many other queries, it\n+/// just has a single parameter: the DefId of the item it will compute the\n+/// validated MIR for. Now, when we call `force_from_dep_node()` on a dep-node\n+/// with kind `MirValidated`, we know that the GUID/fingerprint of the dep-node\n+/// is actually a DefPathHash, and can therefore just look up the corresponding\n+/// DefId in `tcx.def_path_hash_to_def_id`.\n+///\n+/// When you implement a new query, it will likely have a corresponding new\n+/// DepKind, and you'll have to support it here in `force_from_dep_node()`. As\n+/// a rule of thumb, if your query takes a DefId or DefIndex as sole parameter,\n+/// then `force_from_dep_node()` should not fail for it. Otherwise, you can just\n+/// add it to the \"We don't have enough information to reconstruct...\" group in\n+/// the match below.\n pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n                                            dep_node: &DepNode)\n                                            -> bool {\n@@ -687,16 +730,16 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::Hir |\n \n         // This are anonymous nodes\n+        DepKind::TraitSelect |\n+\n+        // We don't have enough information to reconstruct the query key of\n+        // these\n         DepKind::IsCopy |\n         DepKind::IsSized |\n         DepKind::IsFreeze |\n         DepKind::NeedsDrop |\n         DepKind::Layout |\n-        DepKind::TraitSelect |\n         DepKind::ConstEval |\n-\n-        // We don't have enough information to reconstruct the query key of\n-        // these\n         DepKind::InstanceSymbolName |\n         DepKind::MirShim |\n         DepKind::BorrowCheckKrate |"}]}