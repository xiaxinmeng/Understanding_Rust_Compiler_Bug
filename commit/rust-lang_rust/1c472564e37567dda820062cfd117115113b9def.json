{"sha": "1c472564e37567dda820062cfd117115113b9def", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNDcyNTY0ZTM3NTY3ZGRhODIwMDYyY2ZkMTE3MTE1MTEzYjlkZWY=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-20T22:33:18Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-24T18:44:58Z"}, "message": "Add `5.timesi() |idx| { ... }`", "tree": {"sha": "06f475b12e937ab09febd74a27361da02ec8b87d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06f475b12e937ab09febd74a27361da02ec8b87d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c472564e37567dda820062cfd117115113b9def", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c472564e37567dda820062cfd117115113b9def", "html_url": "https://github.com/rust-lang/rust/commit/1c472564e37567dda820062cfd117115113b9def", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c472564e37567dda820062cfd117115113b9def/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a57686d46d1fbdb3a8c6aec6761ff4791e6a9526", "url": "https://api.github.com/repos/rust-lang/rust/commits/a57686d46d1fbdb3a8c6aec6761ff4791e6a9526", "html_url": "https://github.com/rust-lang/rust/commit/a57686d46d1fbdb3a8c6aec6761ff4791e6a9526"}], "stats": {"total": 61, "additions": 47, "deletions": 14}, "files": [{"sha": "4738574fdb479a51a07b91180822d286983f300b", "filename": "src/libcore/core.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1c472564e37567dda820062cfd117115113b9def/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c472564e37567dda820062cfd117115113b9def/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=1c472564e37567dda820062cfd117115113b9def", "patch": "@@ -10,22 +10,22 @@ import str::{extensions, str_slice, unique_str};\n import vec::extensions;\n import vec::{const_vector, copyable_vector, immutable_vector};\n import vec::{immutable_copyable_vector, iter_trait_extensions, vec_concat};\n-import iter::{base_iter, extended_iter, copyable_iter, times};\n+import iter::{base_iter, extended_iter, copyable_iter, times, timesi};\n import option::extensions;\n import option_iter::extensions;\n import ptr::{extensions, ptr};\n import rand::extensions;\n import result::extensions;\n-import int::{num, times};\n-import i8::{num, times};\n-import i16::{num, times};\n-import i32::{num, times};\n-import i64::{num, times};\n-import uint::{num, times};\n-import u8::{num, times};\n-import u16::{num, times};\n-import u32::{num, times};\n-import u64::{num, times};\n+import int::{num, times, timesi};\n+import i8::{num, times, timesi};\n+import i16::{num, times, timesi};\n+import i32::{num, times, timesi};\n+import i64::{num, times, timesi};\n+import uint::{num, times, timesi};\n+import u8::{num, times, timesi};\n+import u16::{num, times, timesi};\n+import u32::{num, times, timesi};\n+import u64::{num, times, timesi};\n import float::num;\n import f32::num;\n import f64::num;\n@@ -34,7 +34,7 @@ import num::num;\n export path, option, some, none, unreachable;\n export extensions;\n // The following exports are the extension impls for numeric types\n-export num, times;\n+export num, times, timesi;\n // The following exports are the common traits\n export str_slice, unique_str;\n export const_vector, copyable_vector, immutable_vector;"}, {"sha": "9986b22669d0217e6efe9b01ff5ca1e350563c9e", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1c472564e37567dda820062cfd117115113b9def/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c472564e37567dda820062cfd117115113b9def/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=1c472564e37567dda820062cfd117115113b9def", "patch": "@@ -11,7 +11,7 @@ export range;\n export compl;\n export abs;\n export parse_buf, from_str, to_str, to_str_bytes, str;\n-export num, ord, eq, times;\n+export num, ord, eq, times, timesi;\n \n const min_value: T = -1 as T << (inst::bits - 1 as T);\n const max_value: T = min_value - 1 as T;\n@@ -155,6 +155,23 @@ impl times of iter::times for T {\n     }\n }\n \n+impl timesi of iter::timesi for T {\n+    #[inline(always)]\n+    /// Like `times`, but provides an index\n+    fn timesi(it: fn(uint) -> bool) {\n+        let slf = self as uint;\n+        if slf < 0u {\n+            fail #fmt(\"The .timesi method expects a nonnegative number, \\\n+                       but found %?\", self);\n+        }\n+        let mut i = 0u;\n+        while i < slf {\n+            if !it(i) { break }\n+            i += 1u;\n+        }\n+    }\n+}\n+\n // FIXME: Has alignment issues on windows and 32-bit linux (#2609)\n #[test]\n #[ignore]"}, {"sha": "e4e57b7ec78fea4af21dae8ef26661c2cdfef64a", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c472564e37567dda820062cfd117115113b9def/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c472564e37567dda820062cfd117115113b9def/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=1c472564e37567dda820062cfd117115113b9def", "patch": "@@ -16,6 +16,9 @@ trait extended_iter<A> {\n iface times {\n     fn times(it: fn() -> bool);\n }\n+iface timesi{\n+    fn timesi(it: fn(uint) -> bool);\n+}\n \n trait copyable_iter<A:copy> {\n     fn filter_to_vec(pred: fn(A) -> bool) -> ~[A];"}, {"sha": "e3b4f08ddaa8a116fcb0730a9e57999dc6ca4117", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1c472564e37567dda820062cfd117115113b9def/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c472564e37567dda820062cfd117115113b9def/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=1c472564e37567dda820062cfd117115113b9def", "patch": "@@ -11,7 +11,7 @@ export range;\n export compl;\n export to_str, to_str_bytes;\n export from_str, from_str_radix, str, parse_buf;\n-export num, ord, eq, times;\n+export num, ord, eq, times, timesi;\n \n const min_value: T = 0 as T;\n const max_value: T = 0 as T - 1 as T;\n@@ -120,6 +120,19 @@ impl times of iter::times for T {\n     }\n }\n \n+impl timesi of iter::timesi for T {\n+    #[inline(always)]\n+    /// Like `times`, but with an index, `eachi`-style.\n+    fn timesi(it: fn(uint) -> bool) {\n+        let slf = self as uint;\n+        let mut i = 0u;\n+        while i < slf {\n+            if !it(i) { break }\n+            i += 1u;\n+        }\n+    }\n+}\n+\n /// Parse a string to an int\n fn from_str(s: ~str) -> option<T> { parse_buf(str::bytes(s), 10u) }\n "}]}