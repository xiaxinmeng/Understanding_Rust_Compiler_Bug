{"sha": "7c96e40da81165beef4f273f44e96eeef5a1bd30", "node_id": "C_kwDOAAsO6NoAKDdjOTZlNDBkYTgxMTY1YmVlZjRmMjczZjQ0ZTk2ZWVlZjVhMWJkMzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-04T08:54:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-04T08:54:33Z"}, "message": "Auto merge of #109891 - the8472:llvm-16-fixes-79308, r=nikic\n\nllvm 16 finally reconizes some additional vec in-place conversions as noops\n\ncloses #79308\n\nr? `@nikic`", "tree": {"sha": "009fee667d77a8d2415677df0f86be3be436ac15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/009fee667d77a8d2415677df0f86be3be436ac15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c96e40da81165beef4f273f44e96eeef5a1bd30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c96e40da81165beef4f273f44e96eeef5a1bd30", "html_url": "https://github.com/rust-lang/rust/commit/7c96e40da81165beef4f273f44e96eeef5a1bd30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c96e40da81165beef4f273f44e96eeef5a1bd30/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35d06f9c747bc791d7d6902248d851da98616a57", "url": "https://api.github.com/repos/rust-lang/rust/commits/35d06f9c747bc791d7d6902248d851da98616a57", "html_url": "https://github.com/rust-lang/rust/commit/35d06f9c747bc791d7d6902248d851da98616a57"}, {"sha": "7a70647f195f6b0a0f1ebd72b1542ba91a32f43a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a70647f195f6b0a0f1ebd72b1542ba91a32f43a", "html_url": "https://github.com/rust-lang/rust/commit/7a70647f195f6b0a0f1ebd72b1542ba91a32f43a"}], "stats": {"total": 42, "additions": 31, "deletions": 11}, "files": [{"sha": "d68067ceb19f7e2c1969c67204001c9735464617", "filename": "tests/codegen/vec-in-place.rs", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7c96e40da81165beef4f273f44e96eeef5a1bd30/tests%2Fcodegen%2Fvec-in-place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c96e40da81165beef4f273f44e96eeef5a1bd30/tests%2Fcodegen%2Fvec-in-place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fvec-in-place.rs?ref=7c96e40da81165beef4f273f44e96eeef5a1bd30", "patch": "@@ -1,11 +1,13 @@\n // ignore-debug: the debug assertions get in the way\n // compile-flags: -O -Z merge-functions=disabled\n+// min-llvm-version: 16\n #![crate_type = \"lib\"]\n \n // Ensure that trivial casts of vec elements are O(1)\n \n pub struct Wrapper<T>(T);\n \n+// previously repr(C) caused the optimization to fail\n #[repr(C)]\n pub struct Foo {\n     a: u64,\n@@ -14,9 +16,8 @@ pub struct Foo {\n     d: u64,\n }\n \n-// Going from an aggregate struct to another type currently requires Copy to\n-// enable the TrustedRandomAccess specialization. Without it optimizations do not yet\n-// reliably recognize the loops as noop for repr(C) or non-Copy structs.\n+// implementing Copy exercises the TrustedRandomAccess specialization inside the in-place\n+// specialization\n #[derive(Copy, Clone)]\n pub struct Bar {\n     a: u64,\n@@ -25,6 +26,14 @@ pub struct Bar {\n     d: u64,\n }\n \n+// this exercises the try-fold codepath\n+pub struct Baz {\n+    a: u64,\n+    b: u64,\n+    c: u64,\n+    d: u64,\n+}\n+\n // CHECK-LABEL: @vec_iterator_cast_primitive\n #[no_mangle]\n pub fn vec_iterator_cast_primitive(vec: Vec<i8>) -> Vec<u8> {\n@@ -52,18 +61,29 @@ pub fn vec_iterator_cast_unwrap(vec: Vec<Wrapper<u8>>) -> Vec<u8> {\n // CHECK-LABEL: @vec_iterator_cast_aggregate\n #[no_mangle]\n pub fn vec_iterator_cast_aggregate(vec: Vec<[u64; 4]>) -> Vec<Foo> {\n-    // FIXME These checks should be the same as other functions.\n-    // CHECK-NOT: @__rust_alloc\n-    // CHECK-NOT: @__rust_alloc\n+    // CHECK-NOT: loop\n+    // CHECK-NOT: call\n     vec.into_iter().map(|e| unsafe { std::mem::transmute(e) }).collect()\n }\n \n-// CHECK-LABEL: @vec_iterator_cast_deaggregate\n+// CHECK-LABEL: @vec_iterator_cast_deaggregate_tra\n #[no_mangle]\n-pub fn vec_iterator_cast_deaggregate(vec: Vec<Bar>) -> Vec<[u64; 4]> {\n-    // FIXME These checks should be the same as other functions.\n-    // CHECK-NOT: @__rust_alloc\n-    // CHECK-NOT: @__rust_alloc\n+pub fn vec_iterator_cast_deaggregate_tra(vec: Vec<Bar>) -> Vec<[u64; 4]> {\n+    // CHECK-NOT: loop\n+    // CHECK-NOT: call\n+\n+    // Safety: For the purpose of this test we assume that Bar layout matches [u64; 4].\n+    // This currently is not guaranteed for repr(Rust) types, but it happens to work here and\n+    // the UCG may add additional guarantees for homogenous types in the future that would make this\n+    // correct.\n+    vec.into_iter().map(|e| unsafe { std::mem::transmute(e) }).collect()\n+}\n+\n+// CHECK-LABEL: @vec_iterator_cast_deaggregate_fold\n+#[no_mangle]\n+pub fn vec_iterator_cast_deaggregate_fold(vec: Vec<Baz>) -> Vec<[u64; 4]> {\n+    // CHECK-NOT: loop\n+    // CHECK-NOT: call\n \n     // Safety: For the purpose of this test we assume that Bar layout matches [u64; 4].\n     // This currently is not guaranteed for repr(Rust) types, but it happens to work here and"}]}