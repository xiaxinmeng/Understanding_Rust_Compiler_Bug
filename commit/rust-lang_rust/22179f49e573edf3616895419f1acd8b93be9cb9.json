{"sha": "22179f49e573edf3616895419f1acd8b93be9cb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMTc5ZjQ5ZTU3M2VkZjM2MTY4OTU0MTlmMWFjZDhiOTNiZTljYjk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-09-06T20:52:07Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-09-08T18:04:14Z"}, "message": "librustc: Feature gate subslice matching in non-tail positions.\n\nThis breaks code that uses the `..xs` form anywhere but at the end of a\nslice. For example:\n\n    match foo {\n        [ 1, ..xs, 2 ]\n        [ ..xs, 1, 2 ]\n    }\n\nAdd the `#![feature(advanced_slice_patterns)]` gate to reenable the\nsyntax.\n\nRFC #54.\n\nCloses #16951.\n\n[breaking-change]", "tree": {"sha": "f1528efbde03fb923da106b56318154915e47435", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1528efbde03fb923da106b56318154915e47435"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22179f49e573edf3616895419f1acd8b93be9cb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22179f49e573edf3616895419f1acd8b93be9cb9", "html_url": "https://github.com/rust-lang/rust/commit/22179f49e573edf3616895419f1acd8b93be9cb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22179f49e573edf3616895419f1acd8b93be9cb9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f34760e4173dda94162502153fe4c5a2a96fc9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f34760e4173dda94162502153fe4c5a2a96fc9d", "html_url": "https://github.com/rust-lang/rust/commit/6f34760e4173dda94162502153fe4c5a2a96fc9d"}], "stats": {"total": 63, "additions": 57, "deletions": 6}, "files": [{"sha": "321b7424676e20eaa3d8eab8b8ff02e4d73f4cda", "filename": "src/doc/rust.md", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=22179f49e573edf3616895419f1acd8b93be9cb9", "patch": "@@ -3290,13 +3290,15 @@ between `_` and `..` is that the pattern `C(_)` is only type-correct if `C` has\n exactly one argument, while the pattern `C(..)` is type-correct for any enum\n variant `C`, regardless of how many arguments `C` has.\n \n-Used inside a vector pattern, `..` stands for any number of elements. This\n-wildcard can be used at most once for a given vector, which implies that it\n-cannot be used to specifically match elements that are at an unknown distance\n-from both ends of a vector, like `[.., 42, ..]`. If followed by a variable name,\n-it will bind the corresponding slice to the variable. Example:\n+Used inside a vector pattern, `..` stands for any number of elements, when the\n+`advanced_slice_patterns` feature gate is turned on. This wildcard can be used\n+at most once for a given vector, which implies that it cannot be used to\n+specifically match elements that are at an unknown distance from both ends of a\n+vector, like `[.., 42, ..]`.  If followed by a variable name, it will bind the\n+corresponding slice to the variable.  Example:\n \n ~~~~\n+# #![feature(advanced_slice_patterns)]\n fn is_symmetric(list: &[uint]) -> bool {\n     match list {\n         [] | [_]                   => true,"}, {"sha": "c83b81660d58fb296231cd22d37bb74673c6512b", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=22179f49e573edf3616895419f1acd8b93be9cb9", "patch": "@@ -69,6 +69,7 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"rustc_diagnostic_macros\", Active),\n     (\"unboxed_closures\", Active),\n     (\"import_shadowing\", Active),\n+    (\"advanced_slice_patterns\", Active),\n \n     // if you change this list without updating src/doc/rust.md, cmr will be sad\n \n@@ -364,6 +365,20 @@ impl<'a> Visitor<()> for Context<'a> {\n         }\n     }\n \n+    fn visit_pat(&mut self, pattern: &ast::Pat, (): ()) {\n+        match pattern.node {\n+            ast::PatVec(_, Some(_), ref last) if !last.is_empty() => {\n+                self.gate_feature(\"advanced_slice_patterns\",\n+                                  pattern.span,\n+                                  \"multiple-element slice matches anywhere \\\n+                                   but at the end of a slice (e.g. \\\n+                                   `[0, ..xs, 0]` are experimental\")\n+            }\n+            _ => {}\n+        }\n+        visit::walk_pat(self, pattern, ())\n+    }\n+\n     fn visit_fn(&mut self,\n                 fn_kind: &visit::FnKind,\n                 fn_decl: &ast::FnDecl,"}, {"sha": "62f4f4aaede29de61f5a1e64c9bdb4ed91254917", "filename": "src/test/compile-fail/borrowck-vec-pattern-element-loan.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs?ref=22179f49e573edf3616895419f1acd8b93be9cb9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(advanced_slice_patterns)]\n+\n fn a<'a>() -> &'a [int] {\n     let vec = vec!(1, 2, 3, 4);\n     let vec: &[int] = vec.as_slice(); //~ ERROR does not live long enough"}, {"sha": "51e3c612c717143fa66359be2930f4289bda87b4", "filename": "src/test/compile-fail/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs?ref=22179f49e573edf3616895419f1acd8b93be9cb9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(advanced_slice_patterns)]\n \n fn a() {\n     let mut vec = [box 1i, box 2, box 3];"}, {"sha": "c6753baf0571e1f2d67fbb5246275aff6c9dd1e2", "filename": "src/test/compile-fail/feature-gate-advanced-slice-features.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Ftest%2Fcompile-fail%2Ffeature-gate-advanced-slice-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Ftest%2Fcompile-fail%2Ffeature-gate-advanced-slice-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-advanced-slice-features.rs?ref=22179f49e573edf3616895419f1acd8b93be9cb9", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = [ 1i, 2, 3, 4, 5 ];\n+    match x {\n+        [ ..xs, 4, 5 ] => {}    //~ ERROR multiple-element slice matches\n+        [ 1, ..xs, 5 ] => {}    //~ ERROR multiple-element slice matches\n+        [ 1, 2, ..xs ] => {}    // OK without feature gate\n+    }\n+}\n+"}, {"sha": "7b52e7774d47119813797ed6d206b73c8833d6d0", "filename": "src/test/compile-fail/non-exhaustive-pattern-witness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs?ref=22179f49e573edf3616895419f1acd8b93be9cb9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n+#![feature(advanced_slice_patterns, struct_variant)]\n \n struct Foo {\n     first: bool,"}, {"sha": "1c87b6dad8970abffcbdd4f03cbd4b9df2bdb98a", "filename": "src/test/run-pass/ignore-all-the-things.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Ftest%2Frun-pass%2Fignore-all-the-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Ftest%2Frun-pass%2Fignore-all-the-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fignore-all-the-things.rs?ref=22179f49e573edf3616895419f1acd8b93be9cb9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(advanced_slice_patterns)]\n+\n struct Foo(int, int, int, int);\n struct Bar{a: int, b: int, c: int, d: int}\n "}, {"sha": "f45b988b8363b3fb0d7c07b216be3ef758aa62f0", "filename": "src/test/run-pass/issue-7784.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Ftest%2Frun-pass%2Fissue-7784.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Ftest%2Frun-pass%2Fissue-7784.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7784.rs?ref=22179f49e573edf3616895419f1acd8b93be9cb9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(advanced_slice_patterns)]\n+\n fn foo<T: Add<T, T> + Clone>([x, y, z]: [T, ..3]) -> (T, T, T) {\n     (x.clone(), x.clone() + y.clone(), x + y + z)\n }"}, {"sha": "ae4fd1f1993b7227ebcded4fa9c28e999972dacb", "filename": "src/test/run-pass/match-vec-alternatives.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Ftest%2Frun-pass%2Fmatch-vec-alternatives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Ftest%2Frun-pass%2Fmatch-vec-alternatives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-vec-alternatives.rs?ref=22179f49e573edf3616895419f1acd8b93be9cb9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(advanced_slice_patterns)]\n+\n fn match_vecs<'a, T>(l1: &'a [T], l2: &'a [T]) -> &'static str {\n     match (l1, l2) {\n         ([], []) => \"both empty\","}, {"sha": "a1a14823ff5955b5923d6d6021bd4c7d903c3959", "filename": "src/test/run-pass/vec-matching-fixed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Ftest%2Frun-pass%2Fvec-matching-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Ftest%2Frun-pass%2Fvec-matching-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-fixed.rs?ref=22179f49e573edf3616895419f1acd8b93be9cb9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(advanced_slice_patterns)]\n+\n fn a() {\n     let x = [1i, 2, 3];\n     match x {"}, {"sha": "3a55b4b68a9d3b8b3dba5d20e2937e38fd9b11d6", "filename": "src/test/run-pass/vec-matching-fold.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs?ref=22179f49e573edf3616895419f1acd8b93be9cb9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(advanced_slice_patterns)]\n+\n fn foldl<T,U:Clone>(values: &[T],\n                     initial: U,\n                     function: |partial: U, element: &T| -> U)"}, {"sha": "89d4e3743e367abeb27656a352fdf1cebdf6666c", "filename": "src/test/run-pass/vec-matching.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Ftest%2Frun-pass%2Fvec-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22179f49e573edf3616895419f1acd8b93be9cb9/src%2Ftest%2Frun-pass%2Fvec-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching.rs?ref=22179f49e573edf3616895419f1acd8b93be9cb9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(advanced_slice_patterns)]\n+\n fn a() {\n     let x = [1i];\n     match x {"}]}