{"sha": "742706511c9f33c6a0d4380392e513e5249057e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MjcwNjUxMWM5ZjMzYzZhMGQ0MzgwMzkyZTUxM2U1MjQ5MDU3ZTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-09T22:19:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-09T22:19:24Z"}, "message": "Auto merge of #5702 - ebroto:5698_mul_not_comm, r=matthiaskrgr\n\nif_same_then_else: don't assume multiplication is always commutative\n\nchangelog: Don't assume multiplication is always commutative in [`if_same_then_else`]\n\nFixes #5698", "tree": {"sha": "39d2084da9be56fd1f847fd62453b29ced7ba07b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39d2084da9be56fd1f847fd62453b29ced7ba07b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/742706511c9f33c6a0d4380392e513e5249057e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/742706511c9f33c6a0d4380392e513e5249057e3", "html_url": "https://github.com/rust-lang/rust/commit/742706511c9f33c6a0d4380392e513e5249057e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/742706511c9f33c6a0d4380392e513e5249057e3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f065d4b887e6722d617eacc93d5dcb75e6b32105", "url": "https://api.github.com/repos/rust-lang/rust/commits/f065d4b887e6722d617eacc93d5dcb75e6b32105", "html_url": "https://github.com/rust-lang/rust/commit/f065d4b887e6722d617eacc93d5dcb75e6b32105"}, {"sha": "2f74283fce768a262387fe7f51e1e4ebb9b0e300", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f74283fce768a262387fe7f51e1e4ebb9b0e300", "html_url": "https://github.com/rust-lang/rust/commit/2f74283fce768a262387fe7f51e1e4ebb9b0e300"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "9c2c96203c032e1c3d96b499ed684b5316e736e5", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/742706511c9f33c6a0d4380392e513e5249057e3/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742706511c9f33c6a0d4380392e513e5249057e3/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=742706511c9f33c6a0d4380392e513e5249057e3", "patch": "@@ -309,18 +309,15 @@ fn swap_binop<'a>(\n     rhs: &'a Expr<'a>,\n ) -> Option<(BinOpKind, &'a Expr<'a>, &'a Expr<'a>)> {\n     match binop {\n-        BinOpKind::Add\n-        | BinOpKind::Mul\n-        | BinOpKind::Eq\n-        | BinOpKind::Ne\n-        | BinOpKind::BitAnd\n-        | BinOpKind::BitXor\n-        | BinOpKind::BitOr => Some((binop, rhs, lhs)),\n+        BinOpKind::Add | BinOpKind::Eq | BinOpKind::Ne | BinOpKind::BitAnd | BinOpKind::BitXor | BinOpKind::BitOr => {\n+            Some((binop, rhs, lhs))\n+        },\n         BinOpKind::Lt => Some((BinOpKind::Gt, rhs, lhs)),\n         BinOpKind::Le => Some((BinOpKind::Ge, rhs, lhs)),\n         BinOpKind::Ge => Some((BinOpKind::Le, rhs, lhs)),\n         BinOpKind::Gt => Some((BinOpKind::Lt, rhs, lhs)),\n-        BinOpKind::Shl\n+        BinOpKind::Mul // Not always commutative, e.g. with matrices. See issue #5698\n+        | BinOpKind::Shl\n         | BinOpKind::Shr\n         | BinOpKind::Rem\n         | BinOpKind::Sub"}, {"sha": "9c5fe02f7519bd25b178af70bf7b01da77520463", "filename": "tests/ui/if_same_then_else.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/742706511c9f33c6a0d4380392e513e5249057e3/tests%2Fui%2Fif_same_then_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742706511c9f33c6a0d4380392e513e5249057e3/tests%2Fui%2Fif_same_then_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.rs?ref=742706511c9f33c6a0d4380392e513e5249057e3", "patch": "@@ -142,4 +142,16 @@ fn func() {\n \n fn f(val: &[u8]) {}\n \n+mod issue_5698 {\n+    fn mul_not_always_commutative(x: i32, y: i32) -> i32 {\n+        if x == 42 {\n+            x * y\n+        } else if x == 21 {\n+            y * x\n+        } else {\n+            0\n+        }\n+    }\n+}\n+\n fn main() {}"}]}