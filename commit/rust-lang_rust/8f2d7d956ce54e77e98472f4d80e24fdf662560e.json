{"sha": "8f2d7d956ce54e77e98472f4d80e24fdf662560e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMmQ3ZDk1NmNlNTRlNzdlOTg0NzJmNGQ4MGUyNGZkZjY2MjU2MGU=", "commit": {"author": {"name": "Josh Stone", "email": "cuviper@gmail.com", "date": "2016-02-15T00:24:02Z"}, "committer": {"name": "Josh Stone", "email": "cuviper@gmail.com", "date": "2016-02-15T03:11:39Z"}, "message": "std: use LFS readdir64_r on Linux", "tree": {"sha": "f4fedb8fbfdec0d45922ffd848ef6fbc473c68ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4fedb8fbfdec0d45922ffd848ef6fbc473c68ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f2d7d956ce54e77e98472f4d80e24fdf662560e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f2d7d956ce54e77e98472f4d80e24fdf662560e", "html_url": "https://github.com/rust-lang/rust/commit/8f2d7d956ce54e77e98472f4d80e24fdf662560e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f2d7d956ce54e77e98472f4d80e24fdf662560e/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcdfed49d7414a44bb3cfe73cf62ad2881055230", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcdfed49d7414a44bb3cfe73cf62ad2881055230", "html_url": "https://github.com/rust-lang/rust/commit/dcdfed49d7414a44bb3cfe73cf62ad2881055230"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "a2ff0d8e1d1ce538196595d9a3e6e046da2111a3", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8f2d7d956ce54e77e98472f4d80e24fdf662560e/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2d7d956ce54e77e98472f4d80e24fdf662560e/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=8f2d7d956ce54e77e98472f4d80e24fdf662560e", "patch": "@@ -15,7 +15,7 @@ use os::unix::prelude::*;\n use ffi::{CString, CStr, OsString, OsStr};\n use fmt;\n use io::{self, Error, ErrorKind, SeekFrom};\n-use libc::{self, dirent, c_int, mode_t};\n+use libc::{self, c_int, mode_t};\n use mem;\n use path::{Path, PathBuf};\n use ptr;\n@@ -26,10 +26,12 @@ use sys::{cvt, cvt_r};\n use sys_common::{AsInner, FromInner};\n \n #[cfg(target_os = \"linux\")]\n-use libc::{stat64, fstat64, lstat64, off64_t, ftruncate64, lseek64};\n+use libc::{stat64, fstat64, lstat64, off64_t, ftruncate64, lseek64, dirent64, readdir64_r};\n #[cfg(not(target_os = \"linux\"))]\n use libc::{stat as stat64, fstat as fstat64, lstat as lstat64, off_t as off64_t,\n-           ftruncate as ftruncate64, lseek as lseek64};\n+           ftruncate as ftruncate64, lseek as lseek64, dirent as dirent64};\n+#[cfg(not(any(target_os = \"linux\", target_os = \"solaris\")))]\n+use libc::{readdir_r as readdir64_r};\n \n pub struct File(FileDesc);\n \n@@ -49,7 +51,7 @@ unsafe impl Send for Dir {}\n unsafe impl Sync for Dir {}\n \n pub struct DirEntry {\n-    entry: dirent,\n+    entry: dirent64,\n     root: Arc<PathBuf>,\n     // We need to store an owned copy of the directory name\n     // on Solaris because a) it uses a zero-length array to\n@@ -224,7 +226,7 @@ impl Iterator for ReadDir {\n             };\n             let mut entry_ptr = ptr::null_mut();\n             loop {\n-                if libc::readdir_r(self.dirp.0, &mut ret.entry, &mut entry_ptr) != 0 {\n+                if readdir64_r(self.dirp.0, &mut ret.entry, &mut entry_ptr) != 0 {\n                     return Some(Err(Error::last_os_error()))\n                 }\n                 if entry_ptr.is_null() {"}]}