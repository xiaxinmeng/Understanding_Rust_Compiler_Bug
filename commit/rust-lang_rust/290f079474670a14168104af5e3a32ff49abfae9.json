{"sha": "290f079474670a14168104af5e3a32ff49abfae9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MGYwNzk0NzQ2NzBhMTQxNjgxMDRhZjVlM2EzMmZmNDlhYmZhZTk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-31T02:05:56Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-31T02:06:06Z"}, "message": "Frontend bits for #2317, general const-expr classification.", "tree": {"sha": "3d9794c4141163461c0ec470820ff47f35f257e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d9794c4141163461c0ec470820ff47f35f257e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/290f079474670a14168104af5e3a32ff49abfae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/290f079474670a14168104af5e3a32ff49abfae9", "html_url": "https://github.com/rust-lang/rust/commit/290f079474670a14168104af5e3a32ff49abfae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/290f079474670a14168104af5e3a32ff49abfae9/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf8c7739369da57555e65b2c187759e59edd96ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf8c7739369da57555e65b2c187759e59edd96ae", "html_url": "https://github.com/rust-lang/rust/commit/bf8c7739369da57555e65b2c187759e59edd96ae"}], "stats": {"total": 209, "additions": 208, "deletions": 1}, "files": [{"sha": "265cb7d37497624dea43c4d421e4f5e5d436175d", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/290f079474670a14168104af5e3a32ff49abfae9/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/290f079474670a14168104af5e3a32ff49abfae9/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=290f079474670a14168104af5e3a32ff49abfae9", "patch": "@@ -469,6 +469,9 @@ fn id_visitor(vfn: fn@(node_id)) -> visit::vt<()> {\n             vfn(e.id);\n         },\n \n+        visit_expr_post: fn@(_e: @expr) {\n+        },\n+\n         visit_ty: fn@(t: @ty) {\n             alt t.node {\n               ty_path(_, id) {"}, {"sha": "a542ca574ace30005c86432ece83cda0c64cdd40", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/290f079474670a14168104af5e3a32ff49abfae9/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/290f079474670a14168104af5e3a32ff49abfae9/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=290f079474670a14168104af5e3a32ff49abfae9", "patch": "@@ -55,6 +55,7 @@ type visitor<E> =\n       visit_pat: fn@(@pat, E, vt<E>),\n       visit_decl: fn@(@decl, E, vt<E>),\n       visit_expr: fn@(@expr, E, vt<E>),\n+      visit_expr_post: fn@(@expr, E, vt<E>),\n       visit_ty: fn@(@ty, E, vt<E>),\n       visit_ty_params: fn@(~[ty_param], E, vt<E>),\n       visit_fn: fn@(fn_kind, fn_decl, blk, span, node_id, E, vt<E>),\n@@ -74,6 +75,7 @@ fn default_visitor<E>() -> visitor<E> {\n           visit_pat: |a,b,c|visit_pat::<E>(a, b, c),\n           visit_decl: |a,b,c|visit_decl::<E>(a, b, c),\n           visit_expr: |a,b,c|visit_expr::<E>(a, b, c),\n+          visit_expr_post: |_a,_b,_c| (),\n           visit_ty: |a,b,c|skip_ty::<E>(a, b, c),\n           visit_ty_params: |a,b,c|visit_ty_params::<E>(a, b, c),\n           visit_fn: |a,b,c,d,e,f,g|visit_fn::<E>(a, b, c, d, e, f, g),\n@@ -428,6 +430,7 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n       }\n       expr_mac(mac) { visit_mac(mac, e, v); }\n     }\n+    v.visit_expr_post(ex, e, v);\n }\n \n fn visit_arm<E>(a: arm, e: E, v: vt<E>) {\n@@ -451,6 +454,7 @@ type simple_visitor =\n       visit_pat: fn@(@pat),\n       visit_decl: fn@(@decl),\n       visit_expr: fn@(@expr),\n+      visit_expr_post: fn@(@expr),\n       visit_ty: fn@(@ty),\n       visit_ty_params: fn@(~[ty_param]),\n       visit_fn: fn@(fn_kind, fn_decl, blk, span, node_id),\n@@ -472,6 +476,7 @@ fn default_simple_visitor() -> simple_visitor {\n           visit_pat: fn@(_p: @pat) { },\n           visit_decl: fn@(_d: @decl) { },\n           visit_expr: fn@(_e: @expr) { },\n+          visit_expr_post: fn@(_e: @expr) { },\n           visit_ty: simple_ignore_ty,\n           visit_ty_params: fn@(_ps: ~[ty_param]) {},\n           visit_fn: fn@(_fk: fn_kind, _d: fn_decl, _b: blk, _sp: span,\n@@ -529,6 +534,9 @@ fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n         f(ex);\n         visit_expr(ex, e, v);\n     }\n+    fn v_expr_post(f: fn@(@expr), ex: @expr, &&_e: (), _v: vt<()>) {\n+        f(ex);\n+    }\n     fn v_ty(f: fn@(@ty), ty: @ty, &&e: (), v: vt<()>) {\n         f(ty);\n         visit_ty(ty, e, v);\n@@ -578,6 +586,8 @@ fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n                 visit_pat: |a,b,c|v_pat(v.visit_pat, a, b, c),\n                 visit_decl: |a,b,c|v_decl(v.visit_decl, a, b, c),\n                 visit_expr: |a,b,c|v_expr(v.visit_expr, a, b, c),\n+                visit_expr_post: |a,b,c| v_expr_post(v.visit_expr_post,\n+                                                     a, b, c),\n                 visit_ty: visit_ty,\n                 visit_ty_params: |a,b,c|\n                     v_ty_params(v.visit_ty_params, a, b, c),"}, {"sha": "bd634a2b46e34dc8c901876003cf6a601cb0295e", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/290f079474670a14168104af5e3a32ff49abfae9/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/290f079474670a14168104af5e3a32ff49abfae9/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=290f079474670a14168104af5e3a32ff49abfae9", "patch": "@@ -197,6 +197,9 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n                                                             impl_map,\n                                                             trait_map,\n                                                             crate));\n+    // These next two const passes can probably be merged\n+    time(time_passes, ~\"const marking\", ||\n+        middle::const_eval::process_crate(crate, def_map, ty_cx));\n \n     time(time_passes, ~\"const checking\", ||\n         middle::check_const::check_crate(sess, crate, ast_map, def_map,"}, {"sha": "50ec4e62175410b696f930c3a49a8cb2a9c69d1f", "filename": "src/rustc/middle/const_eval.rs", "status": "modified", "additions": 188, "deletions": 1, "changes": 189, "blob_url": "https://github.com/rust-lang/rust/blob/290f079474670a14168104af5e3a32ff49abfae9/src%2Frustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/290f079474670a14168104af5e3a32ff49abfae9/src%2Frustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fconst_eval.rs?ref=290f079474670a14168104af5e3a32ff49abfae9", "patch": "@@ -1,4 +1,182 @@\n-import syntax::ast::*;\n+import syntax::{ast,ast_util,visit};\n+import ast::*;\n+\n+//\n+// This pass classifies expressions by their constant-ness.\n+//\n+// Constant-ness comes in 3 flavours:\n+//\n+//   - Integer-constants: can be evaluated by the frontend all the way down\n+//     to their actual value. They are used in a few places (enum\n+//     discriminants, switch arms) and are a subset of\n+//     general-constants. They cover all the integer and integer-ish\n+//     literals (nil, bool, int, uint, char, iNN, uNN) and all integer\n+//     operators and copies applied to them.\n+//\n+//   - General-constants: can be evaluated by LLVM but not necessarily by\n+//     the frontend; usually due to reliance on target-specific stuff such\n+//     as \"where in memory the value goes\" or \"what floating point mode the\n+//     target uses\". This _includes_ integer-constants, plus the following\n+//     constructors:\n+//\n+//        fixed-size vectors and strings: []/_ and \"\"/_\n+//        vector and string slices: &[] and &\"\"\n+//        tuples: (,)\n+//        records: {...}\n+//        enums: foo(...)\n+//        floating point literals and operators\n+//        & and * pointers\n+//        copies of general constants\n+//\n+//        (in theory, probably not at first: if/alt on integer-const\n+//         conditions / descriminants)\n+//\n+//   - Non-constants: everything else.\n+//\n+\n+enum constness {\n+    integral_const,\n+    general_const,\n+    non_const\n+}\n+\n+fn join(a: constness, b: constness) -> constness {\n+    alt (a,b) {\n+      (integral_const, integral_const) { integral_const }\n+      (integral_const, general_const)\n+      | (general_const, integral_const)\n+      | (general_const, general_const) { general_const }\n+      _ { non_const }\n+    }\n+}\n+\n+fn join_all(cs: &[constness]) -> constness {\n+    vec::foldl(integral_const, cs, join)\n+}\n+\n+fn classify(e: @expr,\n+            def_map: resolve3::DefMap,\n+            tcx: ty::ctxt) -> constness {\n+    let did = ast_util::local_def(e.id);\n+    alt tcx.ccache.find(did) {\n+      some(x) { x }\n+      none {\n+        let cn =\n+            alt e.node {\n+              ast::expr_lit(lit) {\n+                alt lit.node {\n+                  ast::lit_str(*) |\n+                  ast::lit_float(*) { general_const }\n+                  _ { integral_const }\n+                }\n+              }\n+\n+              ast::expr_copy(inner) |\n+              ast::expr_unary(_, inner) {\n+                classify(inner, def_map, tcx)\n+              }\n+\n+              ast::expr_binary(_, a, b) {\n+                join(classify(a, def_map, tcx),\n+                     classify(b, def_map, tcx))\n+              }\n+\n+              ast::expr_tup(es) |\n+              ast::expr_vec(es, ast::m_imm) {\n+                join_all(vec::map(es, |e| classify(e, def_map, tcx)))\n+              }\n+\n+              ast::expr_vstore(e, vstore) {\n+                alt vstore {\n+                  ast::vstore_fixed(_) |\n+                  ast::vstore_slice(_) { classify(e, def_map, tcx) }\n+                  ast::vstore_uniq |\n+                  ast::vstore_box { non_const }\n+                }\n+              }\n+\n+              ast::expr_rec(fs, none) {\n+                let cs = do vec::map(fs) |f| {\n+                    if f.node.mutbl == ast::m_imm {\n+                        classify(f.node.expr, def_map, tcx)\n+                    } else {\n+                        non_const\n+                    }\n+                };\n+                join_all(cs)\n+              }\n+\n+              ast::expr_cast(base, _) {\n+                let ty = ty::expr_ty(tcx, e);\n+                let base = classify(base, def_map, tcx);\n+                if ty::type_is_integral(ty) {\n+                    join(integral_const, base)\n+                } else if ty::type_is_fp(ty) {\n+                    join(general_const, base)\n+                } else {\n+                    non_const\n+                }\n+              }\n+\n+              ast::expr_field(base, _, _) {\n+                classify(base, def_map, tcx)\n+              }\n+\n+              ast::expr_index(base, idx) {\n+                join(classify(base, def_map, tcx),\n+                     classify(idx, def_map, tcx))\n+              }\n+\n+              ast::expr_addr_of(ast::m_imm, base) {\n+                classify(base, def_map, tcx)\n+              }\n+\n+              // FIXME: #1272, we can probably do something CCI-ish\n+              // surrounding nonlocal constants. But we don't yet.\n+              ast::expr_path(_) {\n+                alt def_map.find(e.id) {\n+                  some(ast::def_const(def_id)) {\n+                    if ast_util::is_local(def_id) {\n+                        let ty = ty::expr_ty(tcx, e);\n+                        if ty::type_is_integral(ty) {\n+                            integral_const\n+                        } else {\n+                            general_const\n+                        }\n+                    } else {\n+                        non_const\n+                    }\n+                  }\n+                  some(_) {\n+                    non_const\n+                  }\n+                  none {\n+                    tcx.sess.span_bug(e.span,\n+                                      ~\"unknown path when \\\n+                                        classifying constants\");\n+                  }\n+                }\n+              }\n+\n+              _ { non_const }\n+            };\n+        tcx.ccache.insert(did, cn);\n+        cn\n+      }\n+    }\n+}\n+\n+fn process_crate(crate: @ast::crate,\n+                 def_map: resolve3::DefMap,\n+                 tcx: ty::ctxt) {\n+    let v = visit::mk_simple_visitor(@{\n+        visit_expr_post: |e| { classify(e, def_map, tcx); }\n+        with *visit::default_simple_visitor()\n+    });\n+    visit::visit_crate(*crate, (), v);\n+    tcx.sess.abort_if_errors();\n+}\n+\n \n // FIXME (#33): this doesn't handle big integer/float literals correctly\n // (nor does the rest of our literal handling).\n@@ -175,3 +353,12 @@ fn lit_expr_eq(tcx: middle::ty::ctxt, a: @expr, b: @expr) -> bool {\n fn lit_eq(a: @lit, b: @lit) -> bool {\n     compare_const_vals(lit_to_const(a), lit_to_const(b)) == 0\n }\n+\n+\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:"}, {"sha": "bae5b34f5a1e7e59fcbc45d2cd004a39144e14f5", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/290f079474670a14168104af5e3a32ff49abfae9/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/290f079474670a14168104af5e3a32ff49abfae9/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=290f079474670a14168104af5e3a32ff49abfae9", "patch": "@@ -249,6 +249,7 @@ type ctxt =\n       freevars: freevars::freevar_map,\n       tcache: type_cache,\n       rcache: creader_cache,\n+      ccache: constness_cache,\n       short_names_cache: hashmap<t, @~str>,\n       needs_drop_cache: hashmap<t, bool>,\n       needs_unwind_cleanup_cache: hashmap<t, bool>,\n@@ -534,6 +535,8 @@ type ty_param_bounds_and_ty = {bounds: @~[param_bounds],\n \n type type_cache = hashmap<ast::def_id, ty_param_bounds_and_ty>;\n \n+type constness_cache = hashmap<ast::def_id, const_eval::constness>;\n+\n type node_type_table = @smallintmap::smallintmap<t>;\n \n fn mk_rcache() -> creader_cache {\n@@ -581,6 +584,7 @@ fn mk_ctxt(s: session::session,\n       freevars: freevars,\n       tcache: ast_util::new_def_hash(),\n       rcache: mk_rcache(),\n+      ccache: ast_util::new_def_hash(),\n       short_names_cache: new_ty_hash(),\n       needs_drop_cache: new_ty_hash(),\n       needs_unwind_cleanup_cache: new_ty_hash(),"}]}