{"sha": "8addb2e684dfbe0cd2e16a769485a093f9b2de32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZGRiMmU2ODRkZmJlMGNkMmUxNmE3Njk0ODVhMDkzZjliMmRlMzI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-06-10T09:03:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-10T09:03:42Z"}, "message": "Rollup merge of #72897 - lcnr:structurally-match-normalize, r=pnkfelix\n\nnormalize adt fields during structural match checking\n\nfixes #72896\n\ncurrently only fixes the issue itself and compiles stage 1 libs.\nI believe we have to use something else to normalize the adt fields here,\nas I expect some partially resolved adts to cause problems :thinking:\n\nstage 1 libs and the test itself pass, not sure about the rest...\nWill spend some more time looking into it tomorrow.\n\nr? @pnkfelix cc @eddyb", "tree": {"sha": "00dbc98394618b70ec998050191fd616f75da35f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00dbc98394618b70ec998050191fd616f75da35f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8addb2e684dfbe0cd2e16a769485a093f9b2de32", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe4KHuCRBK7hj4Ov3rIwAAdHIIABl1hhvMQheel//4141BRNIP\ng+KYcG3ZuZgDp7brTGo2xpqBuCl3Rbvrf6oIq08bQl3thgFJ4IFzXawD2CtBdzWP\n9dm5/S1cEO9Cmo6+3jX/G9ZH7Iufb1LyQNUIwXFuAF4vK2z+iAMGsQg9HjXQ9/+H\nJoE6a508l8GPTCdRlFqHNblcfxNRXWC2A86RPylxUo2D8E4ZbkNswYePfw+OlHeO\npic1IUFm2k8mOhxxH5sAwjCTE71PYyTMJRdyoQDdyuRBbb004ko5FLLZW6sSxMGG\nhYZzmMQM6Uf5TZryiB5pvIIr9cBQcD8xvfS8LIa0DVRE2ez6cWVzzzq0J/53aOg=\n=PfBk\n-----END PGP SIGNATURE-----\n", "payload": "tree 00dbc98394618b70ec998050191fd616f75da35f\nparent fda594e6ae5c430475120944b8a0e92fe8f206a5\nparent 4725af38bc51760ad36180ebd7d128481b3d8ccc\nauthor Dylan DPC <dylan.dpc@gmail.com> 1591779822 +0200\ncommitter GitHub <noreply@github.com> 1591779822 +0200\n\nRollup merge of #72897 - lcnr:structurally-match-normalize, r=pnkfelix\n\nnormalize adt fields during structural match checking\n\nfixes #72896\n\ncurrently only fixes the issue itself and compiles stage 1 libs.\nI believe we have to use something else to normalize the adt fields here,\nas I expect some partially resolved adts to cause problems :thinking:\n\nstage 1 libs and the test itself pass, not sure about the rest...\nWill spend some more time looking into it tomorrow.\n\nr? @pnkfelix cc @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8addb2e684dfbe0cd2e16a769485a093f9b2de32", "html_url": "https://github.com/rust-lang/rust/commit/8addb2e684dfbe0cd2e16a769485a093f9b2de32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8addb2e684dfbe0cd2e16a769485a093f9b2de32/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fda594e6ae5c430475120944b8a0e92fe8f206a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fda594e6ae5c430475120944b8a0e92fe8f206a5", "html_url": "https://github.com/rust-lang/rust/commit/fda594e6ae5c430475120944b8a0e92fe8f206a5"}, {"sha": "4725af38bc51760ad36180ebd7d128481b3d8ccc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4725af38bc51760ad36180ebd7d128481b3d8ccc", "html_url": "https://github.com/rust-lang/rust/commit/4725af38bc51760ad36180ebd7d128481b3d8ccc"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "87ff667b6a09a735e4cc7d3f10ed3f81660e2012", "filename": "src/librustc_trait_selection/traits/structural_match.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8addb2e684dfbe0cd2e16a769485a093f9b2de32/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8addb2e684dfbe0cd2e16a769485a093f9b2de32/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs?ref=8addb2e684dfbe0cd2e16a769485a093f9b2de32", "patch": "@@ -251,7 +251,10 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n         // fields of ADT.\n         let tcx = self.tcx();\n         for field_ty in adt_def.all_fields().map(|field| field.ty(tcx, substs)) {\n-            if field_ty.visit_with(self) {\n+            let ty = self.tcx().normalize_erasing_regions(ty::ParamEnv::empty(), field_ty);\n+            debug!(\"structural-match ADT: field_ty={:?}, ty={:?}\", field_ty, ty);\n+\n+            if ty.visit_with(self) {\n                 // found an ADT without structural-match; halt visiting!\n                 assert!(self.found.is_some());\n                 return true;"}, {"sha": "3a8b82037310a41360207dce21544e9d56c80740", "filename": "src/test/ui/match/issue-72896.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8addb2e684dfbe0cd2e16a769485a093f9b2de32/src%2Ftest%2Fui%2Fmatch%2Fissue-72896.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8addb2e684dfbe0cd2e16a769485a093f9b2de32/src%2Ftest%2Fui%2Fmatch%2Fissue-72896.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-72896.rs?ref=8addb2e684dfbe0cd2e16a769485a093f9b2de32", "patch": "@@ -0,0 +1,23 @@\n+// run-pass\n+trait EnumSetType {\n+    type Repr;\n+}\n+\n+enum Enum8 { }\n+impl EnumSetType for Enum8 {\n+    type Repr = u8;\n+}\n+\n+#[derive(PartialEq, Eq)]\n+struct EnumSet<T: EnumSetType> {\n+    __enumset_underlying: T::Repr,\n+}\n+\n+const CONST_SET: EnumSet<Enum8> = EnumSet { __enumset_underlying: 3 };\n+\n+fn main() {\n+    match CONST_SET {\n+        CONST_SET => { /* ok */ }\n+        _ => panic!(\"match fell through?\"),\n+    }\n+}"}]}