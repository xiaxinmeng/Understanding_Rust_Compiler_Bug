{"sha": "dc8ee51c5418ce37b63f1c9bdee98745f5dfe627", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjOGVlNTFjNTQxOGNlMzdiNjNmMWM5YmRlZTk4NzQ1ZjVkZmU2Mjc=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-09-27T19:31:00Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-10-07T20:48:16Z"}, "message": "Use builder.compiler_for() to find the libstd stamp", "tree": {"sha": "6c7c8209665c9718f05156a94ee7f0ad694b3914", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c7c8209665c9718f05156a94ee7f0ad694b3914"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc8ee51c5418ce37b63f1c9bdee98745f5dfe627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc8ee51c5418ce37b63f1c9bdee98745f5dfe627", "html_url": "https://github.com/rust-lang/rust/commit/dc8ee51c5418ce37b63f1c9bdee98745f5dfe627", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc8ee51c5418ce37b63f1c9bdee98745f5dfe627/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faee5fd388a564febc56aa642241f221c0ac1cd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/faee5fd388a564febc56aa642241f221c0ac1cd1", "html_url": "https://github.com/rust-lang/rust/commit/faee5fd388a564febc56aa642241f221c0ac1cd1"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "e1e47d5370a067c15e37f9003f095421d51902a8", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc8ee51c5418ce37b63f1c9bdee98745f5dfe627/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc8ee51c5418ce37b63f1c9bdee98745f5dfe627/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=dc8ee51c5418ce37b63f1c9bdee98745f5dfe627", "patch": "@@ -680,11 +680,11 @@ impl Step for Std {\n         let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target));\n         let _ = fs::remove_dir_all(&image);\n \n-\n         let dst = image.join(\"lib/rustlib\").join(target).join(\"lib\");\n         t!(fs::create_dir_all(&dst));\n \n-        let stamp = dbg!(compile::libstd_stamp(builder, compiler, target));\n+        let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n+        let stamp = dbg!(compile::libstd_stamp(builder, compiler_to_use, target));\n         for (path, host) in builder.read_stamp_file(&stamp) {\n             if !host {\n                 builder.copy(&path, &dst.join(path.file_name().unwrap()));"}]}