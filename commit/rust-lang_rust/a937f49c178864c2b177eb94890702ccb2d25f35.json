{"sha": "a937f49c178864c2b177eb94890702ccb2d25f35", "node_id": "C_kwDOAAsO6NoAKGE5MzdmNDljMTc4ODY0YzJiMTc3ZWI5NDg5MDcwMmNjYjJkMjVmMzU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-04-04T08:01:31Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-04-04T08:01:31Z"}, "message": "Merge from rustc", "tree": {"sha": "2834d0224de5b81378eb93ff9199edb519ea9790", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2834d0224de5b81378eb93ff9199edb519ea9790"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a937f49c178864c2b177eb94890702ccb2d25f35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a937f49c178864c2b177eb94890702ccb2d25f35", "html_url": "https://github.com/rust-lang/rust/commit/a937f49c178864c2b177eb94890702ccb2d25f35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a937f49c178864c2b177eb94890702ccb2d25f35/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6495af39afb4618147636c1b6c4afba7751393f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6495af39afb4618147636c1b6c4afba7751393f", "html_url": "https://github.com/rust-lang/rust/commit/b6495af39afb4618147636c1b6c4afba7751393f"}, {"sha": "6a6a262f7b4600c3101b52a1aebc89618d764da3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a6a262f7b4600c3101b52a1aebc89618d764da3", "html_url": "https://github.com/rust-lang/rust/commit/6a6a262f7b4600c3101b52a1aebc89618d764da3"}], "stats": {"total": 4661, "additions": 3010, "deletions": 1651}, "files": [{"sha": "1323f973ccfddbc0d89793316aef866050cee3de", "filename": "CHANGELOG.md", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -152,6 +152,8 @@ Current stable, released 2023-03-09\n \n * `SYSROOT` and `--sysroot` can now be set at the same time\n   [#10149](https://github.com/rust-lang/rust-clippy/pull/10149)\n+* Fix error when providing an `array-size-threshold` in `clippy.toml`\n+  [#10423](https://github.com/rust-lang/rust-clippy/pull/10423)\n \n ## Rust 1.67\n \n@@ -186,8 +188,6 @@ Released 2023-01-26\n \n ### Moves and Deprecations\n \n-* Moved [`uninlined_format_args`] to `style` (Now warn-by-default)\n-  [#9865](https://github.com/rust-lang/rust-clippy/pull/9865)\n * Moved [`needless_collect`] to `nursery` (Now allow-by-default)\n   [#9705](https://github.com/rust-lang/rust-clippy/pull/9705)\n * Moved [`or_fun_call`] to `nursery` (Now allow-by-default)\n@@ -423,7 +423,7 @@ Released 2022-12-15\n   [#9490](https://github.com/rust-lang/rust-clippy/pull/9490)\n * [`almost_complete_letter_range`]: No longer lints in external macros\n   [#9467](https://github.com/rust-lang/rust-clippy/pull/9467)\n-* [`drop_copy`]: No longer lints on idiomatic cases in match arms \n+* [`drop_copy`]: No longer lints on idiomatic cases in match arms\n   [#9491](https://github.com/rust-lang/rust-clippy/pull/9491)\n * [`question_mark`]: No longer lints in const context\n   [#9487](https://github.com/rust-lang/rust-clippy/pull/9487)\n@@ -4382,6 +4382,7 @@ Released 2018-09-13\n <!-- begin autogenerated links to lint list -->\n [`absurd_extreme_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons\n [`alloc_instead_of_core`]: https://rust-lang.github.io/rust-clippy/master/index.html#alloc_instead_of_core\n+[`allow_attributes`]: https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\n [`allow_attributes_without_reason`]: https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason\n [`almost_complete_letter_range`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_complete_letter_range\n [`almost_complete_range`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_complete_range\n@@ -4661,6 +4662,7 @@ Released 2018-09-13\n [`manual_instant_elapsed`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_instant_elapsed\n [`manual_is_ascii_check`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_is_ascii_check\n [`manual_let_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else\n+[`manual_main_separator_str`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_main_separator_str\n [`manual_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_map\n [`manual_memcpy`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_memcpy\n [`manual_non_exhaustive`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive\n@@ -4985,6 +4987,7 @@ Released 2018-09-13\n [`unnecessary_safety_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_safety_doc\n [`unnecessary_self_imports`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_self_imports\n [`unnecessary_sort_by`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_sort_by\n+[`unnecessary_struct_initialization`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_struct_initialization\n [`unnecessary_to_owned`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_to_owned\n [`unnecessary_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_unwrap\n [`unnecessary_wraps`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps"}, {"sha": "3df1328036948c6cc97e4573c4cc8bbfc41881b6", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -50,7 +50,7 @@ a [developer guide] and is a good place to start your journey.\n All issues on Clippy are mentored, if you want help simply ask someone from the\n Clippy team directly by mentioning them in the issue or over on [Zulip]. All\n currently active team members can be found\n-[here](https://github.com/rust-lang/highfive/blob/master/highfive/configs/rust-lang/rust-clippy.json#L3)\n+[here](https://github.com/rust-lang/rust-clippy/blob/master/triagebot.toml#L18)\n \n Some issues are easier than others. The [`good-first-issue`] label can be used to find the easy\n issues. You can use `@rustbot claim` to assign the issue to yourself."}, {"sha": "9ed6627b7413094be364db1e7c472cdbbfec87f7", "filename": "book/src/lint_configuration.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/book%2Fsrc%2Flint_configuration.md", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/book%2Fsrc%2Flint_configuration.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Flint_configuration.md?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -519,6 +519,7 @@ for the generic parameters for determining interior mutability\n **Default Value:** `[\"bytes::Bytes\"]` (`Vec<String>`)\n \n * [mutable_key_type](https://rust-lang.github.io/rust-clippy/master/index.html#mutable_key_type)\n+* [ifs_same_cond](https://rust-lang.github.io/rust-clippy/master/index.html#ifs_same_cond)\n \n \n ### allow-mixed-uninlined-format-args"}, {"sha": "8871873c6612f5e27ce1100b7dc6a17b182775ad", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,4 @@\n #![feature(let_chains)]\n-#![feature(once_cell)]\n #![feature(rustc_private)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n // warn on lints, that are included in `rust-lang/rust`s bootstrap"}, {"sha": "15d46e954a9a59b6633d5411a584f79c7d08e950", "filename": "clippy_lints/src/allow_attributes.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fallow_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fallow_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fallow_attributes.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -0,0 +1,71 @@\n+use ast::AttrStyle;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use rustc_ast as ast;\n+use rustc_errors::Applicability;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// Detects uses of the `#[allow]` attribute and suggests replacing it with\n+    /// the `#[expect]` (See [RFC 2383](https://rust-lang.github.io/rfcs/2383-lint-reasons.html))\n+    ///\n+    /// The expect attribute is still unstable and requires the `lint_reasons`\n+    /// on nightly. It can be enabled by adding `#![feature(lint_reasons)]` to\n+    /// the crate root.\n+    ///\n+    /// This lint only warns outer attributes (`#[allow]`), as inner attributes\n+    /// (`#![allow]`) are usually used to enable or disable lints on a global scale.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// `#[expect]` attributes suppress the lint emission, but emit a warning, if\n+    /// the expectation is unfulfilled. This can be useful to be notified when the\n+    /// lint is no longer triggered.\n+    ///\n+    /// ### Example\n+    /// ```rust,ignore\n+    /// #[allow(unused_mut)]\n+    /// fn foo() -> usize {\n+    ///    let mut a = Vec::new();\n+    ///    a.len()\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// #![feature(lint_reasons)]\n+    /// #[expect(unused_mut)]\n+    /// fn foo() -> usize {\n+    ///     let mut a = Vec::new();\n+    ///     a.len()\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.69.0\"]\n+    pub ALLOW_ATTRIBUTES,\n+    restriction,\n+    \"`#[allow]` will not trigger if a warning isn't found. `#[expect]` triggers if there are no warnings.\"\n+}\n+\n+declare_lint_pass!(AllowAttribute => [ALLOW_ATTRIBUTES]);\n+\n+impl LateLintPass<'_> for AllowAttribute {\n+    // Separate each crate's features.\n+    fn check_attribute(&mut self, cx: &LateContext<'_>, attr: &ast::Attribute) {\n+        if_chain! {\n+            if cx.tcx.features().lint_reasons;\n+            if let AttrStyle::Outer = attr.style;\n+            if let Some(ident) = attr.ident();\n+            if ident.name == rustc_span::symbol::sym::allow;\n+            then {\n+                span_lint_and_sugg(\n+                    cx,\n+                    ALLOW_ATTRIBUTES,\n+                    ident.span,\n+                    \"#[allow] attribute found\",\n+                    \"replace it with\",\n+                    \"expect\".into(),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "29fde9336c0b9fa1f34f821661479f8a05cdb978", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -495,18 +495,19 @@ struct NotSimplificationVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for NotSimplificationVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        if let ExprKind::Unary(UnOp::Not, inner) = &expr.kind {\n-            if let Some(suggestion) = simplify_not(self.cx, inner) {\n-                span_lint_and_sugg(\n-                    self.cx,\n-                    NONMINIMAL_BOOL,\n-                    expr.span,\n-                    \"this boolean expression can be simplified\",\n-                    \"try\",\n-                    suggestion,\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n+        if let ExprKind::Unary(UnOp::Not, inner) = &expr.kind &&\n+            !inner.span.from_expansion() &&\n+            let Some(suggestion) = simplify_not(self.cx, inner)\n+        {\n+            span_lint_and_sugg(\n+                self.cx,\n+                NONMINIMAL_BOOL,\n+                expr.span,\n+                \"this boolean expression can be simplified\",\n+                \"try\",\n+                suggestion,\n+                Applicability::MachineApplicable,\n+            );\n         }\n \n         walk_expr(self, expr);"}, {"sha": "970f50049935ce1919804db5b7c3ad2d5c6aabc3", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 62, "deletions": 8, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,18 +1,20 @@\n use clippy_utils::diagnostics::{span_lint_and_note, span_lint_and_then};\n use clippy_utils::source::{first_line_of_span, indent_of, reindent_multiline, snippet, snippet_opt};\n-use clippy_utils::ty::needs_ordered_drop;\n+use clippy_utils::ty::{is_interior_mut_ty, needs_ordered_drop};\n use clippy_utils::visitors::for_each_expr;\n use clippy_utils::{\n-    capture_local_usage, eq_expr_value, get_enclosing_block, hash_expr, hash_stmt, if_sequence, is_else_clause,\n-    is_lint_allowed, path_to_local, search_same, ContainsName, HirEqInterExpr, SpanlessEq,\n+    capture_local_usage, def_path_def_ids, eq_expr_value, find_binding_init, get_enclosing_block, hash_expr, hash_stmt,\n+    if_sequence, is_else_clause, is_lint_allowed, path_to_local, search_same, ContainsName, HirEqInterExpr, SpanlessEq,\n };\n use core::iter;\n use core::ops::ControlFlow;\n use rustc_errors::Applicability;\n+use rustc_hir::def_id::DefIdSet;\n use rustc_hir::intravisit;\n use rustc_hir::{BinOpKind, Block, Expr, ExprKind, HirId, HirIdSet, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_middle::query::Key;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::hygiene::walk_chain;\n use rustc_span::source_map::SourceMap;\n use rustc_span::{BytePos, Span, Symbol};\n@@ -159,18 +161,40 @@ declare_clippy_lint! {\n     \"`if` statement with shared code in all blocks\"\n }\n \n-declare_lint_pass!(CopyAndPaste => [\n+pub struct CopyAndPaste {\n+    ignore_interior_mutability: Vec<String>,\n+    ignored_ty_ids: DefIdSet,\n+}\n+\n+impl CopyAndPaste {\n+    pub fn new(ignore_interior_mutability: Vec<String>) -> Self {\n+        Self {\n+            ignore_interior_mutability,\n+            ignored_ty_ids: DefIdSet::new(),\n+        }\n+    }\n+}\n+\n+impl_lint_pass!(CopyAndPaste => [\n     IFS_SAME_COND,\n     SAME_FUNCTIONS_IN_IF_CONDITION,\n     IF_SAME_THEN_ELSE,\n     BRANCHES_SHARING_CODE\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for CopyAndPaste {\n+    fn check_crate(&mut self, cx: &LateContext<'tcx>) {\n+        for ignored_ty in &self.ignore_interior_mutability {\n+            let path: Vec<&str> = ignored_ty.split(\"::\").collect();\n+            for id in def_path_def_ids(cx, path.as_slice()) {\n+                self.ignored_ty_ids.insert(id);\n+            }\n+        }\n+    }\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if !expr.span.from_expansion() && matches!(expr.kind, ExprKind::If(..)) && !is_else_clause(cx.tcx, expr) {\n             let (conds, blocks) = if_sequence(expr);\n-            lint_same_cond(cx, &conds);\n+            lint_same_cond(cx, &conds, &self.ignored_ty_ids);\n             lint_same_fns_in_if_cond(cx, &conds);\n             let all_same =\n                 !is_lint_allowed(cx, IF_SAME_THEN_ELSE, expr.hir_id) && lint_if_same_then_else(cx, &conds, &blocks);\n@@ -547,9 +571,39 @@ fn check_for_warn_of_moved_symbol(cx: &LateContext<'_>, symbols: &[(HirId, Symbo\n     })\n }\n \n+fn method_caller_is_mutable(cx: &LateContext<'_>, caller_expr: &Expr<'_>, ignored_ty_ids: &DefIdSet) -> bool {\n+    let caller_ty = cx.typeck_results().expr_ty(caller_expr);\n+    // Check if given type has inner mutability and was not set to ignored by the configuration\n+    let is_inner_mut_ty = is_interior_mut_ty(cx, caller_ty)\n+        && !matches!(caller_ty.ty_adt_id(), Some(adt_id) if ignored_ty_ids.contains(&adt_id));\n+\n+    is_inner_mut_ty\n+        || caller_ty.is_mutable_ptr()\n+        // `find_binding_init` will return the binding iff its not mutable\n+        || path_to_local(caller_expr)\n+            .and_then(|hid| find_binding_init(cx, hid))\n+            .is_none()\n+}\n+\n /// Implementation of `IFS_SAME_COND`.\n-fn lint_same_cond(cx: &LateContext<'_>, conds: &[&Expr<'_>]) {\n-    for (i, j) in search_same(conds, |e| hash_expr(cx, e), |lhs, rhs| eq_expr_value(cx, lhs, rhs)) {\n+fn lint_same_cond(cx: &LateContext<'_>, conds: &[&Expr<'_>], ignored_ty_ids: &DefIdSet) {\n+    for (i, j) in search_same(\n+        conds,\n+        |e| hash_expr(cx, e),\n+        |lhs, rhs| {\n+            // Ignore eq_expr side effects iff one of the expressin kind is a method call\n+            // and the caller is not a mutable, including inner mutable type.\n+            if let ExprKind::MethodCall(_, caller, _, _) = lhs.kind {\n+                if method_caller_is_mutable(cx, caller, ignored_ty_ids) {\n+                    false\n+                } else {\n+                    SpanlessEq::new(cx).eq_expr(lhs, rhs)\n+                }\n+            } else {\n+                eq_expr_value(cx, lhs, rhs)\n+            }\n+        },\n+    ) {\n         span_lint_and_note(\n             cx,\n             IFS_SAME_COND,"}, {"sha": "8ca91301472e649f8c399dc910cf9bdf74d36469", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -35,6 +35,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::utils::internal_lints::produce_ice::PRODUCE_ICE_INFO,\n     #[cfg(feature = \"internal\")]\n     crate::utils::internal_lints::unnecessary_def_path::UNNECESSARY_DEF_PATH_INFO,\n+    crate::allow_attributes::ALLOW_ATTRIBUTES_INFO,\n     crate::almost_complete_range::ALMOST_COMPLETE_RANGE_INFO,\n     crate::approx_const::APPROX_CONSTANT_INFO,\n     crate::as_conversions::AS_CONVERSIONS_INFO,\n@@ -262,6 +263,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::manual_clamp::MANUAL_CLAMP_INFO,\n     crate::manual_is_ascii_check::MANUAL_IS_ASCII_CHECK_INFO,\n     crate::manual_let_else::MANUAL_LET_ELSE_INFO,\n+    crate::manual_main_separator_str::MANUAL_MAIN_SEPARATOR_STR_INFO,\n     crate::manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE_INFO,\n     crate::manual_rem_euclid::MANUAL_REM_EUCLID_INFO,\n     crate::manual_retain::MANUAL_RETAIN_INFO,\n@@ -616,6 +618,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::unnamed_address::VTABLE_ADDRESS_COMPARISONS_INFO,\n     crate::unnecessary_owned_empty_strings::UNNECESSARY_OWNED_EMPTY_STRINGS_INFO,\n     crate::unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS_INFO,\n+    crate::unnecessary_struct_initialization::UNNECESSARY_STRUCT_INITIALIZATION_INFO,\n     crate::unnecessary_wraps::UNNECESSARY_WRAPS_INFO,\n     crate::unnested_or_patterns::UNNESTED_OR_PATTERNS_INFO,\n     crate::unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME_INFO,"}, {"sha": "80c22742ba442b5990e9e86754b625510c65f01c", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::{span_lint_and_note, span_lint_and_sugg};\n-use clippy_utils::source::snippet_with_macro_callsite;\n+use clippy_utils::source::snippet_with_context;\n use clippy_utils::ty::{has_drop, is_copy};\n use clippy_utils::{\n     any_parent_is_automatically_derived, contains_name, get_parent_expr, is_from_proc_macro, match_def_path, paths,\n@@ -160,6 +160,8 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n                 }\n             };\n \n+            let init_ctxt = local.span.ctxt();\n+\n             // find all \"later statement\"'s where the fields of the binding set as\n             // Default::default() get reassigned, unless the reassignment refers to the original binding\n             let mut first_assign = None;\n@@ -169,7 +171,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n                 // find out if and which field was set by this `consecutive_statement`\n                 if let Some((field_ident, assign_rhs)) = field_reassigned_by_stmt(consecutive_statement, binding_name) {\n                     // interrupt and cancel lint if assign_rhs references the original binding\n-                    if contains_name(binding_name, assign_rhs, cx) {\n+                    if contains_name(binding_name, assign_rhs, cx) || init_ctxt != consecutive_statement.span.ctxt() {\n                         cancel_lint = true;\n                         break;\n                     }\n@@ -204,11 +206,12 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n                     .iter()\n                     .all(|field| assigned_fields.iter().any(|(a, _)| a == &field.name));\n \n+                let mut app = Applicability::Unspecified;\n                 let field_list = assigned_fields\n                     .into_iter()\n                     .map(|(field, rhs)| {\n                         // extract and store the assigned value for help message\n-                        let value_snippet = snippet_with_macro_callsite(cx, rhs.span, \"..\");\n+                        let value_snippet = snippet_with_context(cx, rhs.span, init_ctxt, \"..\", &mut app).0;\n                         format!(\"{field}: {value_snippet}\")\n                     })\n                     .collect::<Vec<String>>()"}, {"sha": "f425dd5fb70b57fee1abcaf4b11c76a0a928393f", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -24,8 +24,8 @@ use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for deriving `Hash` but implementing `PartialEq`\n-    /// explicitly or vice versa.\n+    /// Lints against manual `PartialEq` implementations for types with a derived `Hash`\n+    /// implementation.\n     ///\n     /// ### Why is this bad?\n     /// The implementation of these traits must agree (for\n@@ -54,8 +54,8 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for deriving `Ord` but implementing `PartialOrd`\n-    /// explicitly or vice versa.\n+    /// Lints against manual `PartialOrd` and `Ord` implementations for types with a derived `Ord`\n+    /// or `PartialOrd` implementation.\n     ///\n     /// ### Why is this bad?\n     /// The implementation of these traits must agree (for"}, {"sha": "1e9e826631c37227a560b7a60d63739a60b1c91a", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -50,10 +50,7 @@ pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Imp\n         let attr = cx.tcx.get_attr(item.owner_id, sym::must_use);\n         if let Some(attr) = attr {\n             check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr);\n-        } else if is_public\n-            && !is_proc_macro(attrs)\n-            && trait_ref_of_method(cx, item.owner_id.def_id).is_none()\n-        {\n+        } else if is_public && !is_proc_macro(attrs) && trait_ref_of_method(cx, item.owner_id.def_id).is_none() {\n             check_must_use_candidate(\n                 cx,\n                 sig.decl,"}, {"sha": "725bd3d54bc22e52d2da6f61e5d36ed8e795dc4f", "filename": "clippy_lints/src/if_then_some_else_none.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,8 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::eager_or_lazy::switch_to_eager_eval;\n use clippy_utils::msrvs::{self, Msrv};\n-use clippy_utils::source::snippet_with_macro_callsite;\n+use clippy_utils::source::snippet_with_context;\n+use clippy_utils::sugg::Sugg;\n use clippy_utils::{contains_return, higher, is_else_clause, is_res_lang_ctor, path_res, peel_blocks};\n+use rustc_errors::Applicability;\n use rustc_hir::LangItem::{OptionNone, OptionSome};\n use rustc_hir::{Expr, ExprKind, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -72,21 +74,20 @@ impl<'tcx> LateLintPass<'tcx> for IfThenSomeElseNone {\n             return;\n         }\n \n+        let ctxt = expr.span.ctxt();\n+\n         if let Some(higher::If { cond, then, r#else: Some(els) }) = higher::If::hir(expr)\n             && let ExprKind::Block(then_block, _) = then.kind\n             && let Some(then_expr) = then_block.expr\n             && let ExprKind::Call(then_call, [then_arg]) = then_expr.kind\n+            && then_expr.span.ctxt() == ctxt\n             && is_res_lang_ctor(cx, path_res(cx, then_call), OptionSome)\n             && is_res_lang_ctor(cx, path_res(cx, peel_blocks(els)), OptionNone)\n             && !stmts_contains_early_return(then_block.stmts)\n         {\n-            let cond_snip = snippet_with_macro_callsite(cx, cond.span, \"[condition]\");\n-            let cond_snip = if matches!(cond.kind, ExprKind::Unary(_, _) | ExprKind::Binary(_, _, _)) {\n-                format!(\"({cond_snip})\")\n-            } else {\n-                cond_snip.into_owned()\n-            };\n-            let arg_snip = snippet_with_macro_callsite(cx, then_arg.span, \"\");\n+            let mut app = Applicability::Unspecified;\n+            let cond_snip = Sugg::hir_with_context(cx, cond, expr.span.ctxt(), \"[condition]\", &mut app).maybe_par().to_string();\n+            let arg_snip = snippet_with_context(cx, then_arg.span, ctxt, \"[body]\", &mut app).0;\n             let mut method_body = if then_block.stmts.is_empty() {\n                 arg_snip.into_owned()\n             } else {"}, {"sha": "c01e3882d529f67f4f56ac7323d2ea2de85a9249", "filename": "clippy_lints/src/let_with_type_underscore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Flet_with_type_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Flet_with_type_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_with_type_underscore.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use rustc_hir::*;\n+use rustc_hir::{Local, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};"}, {"sha": "3da7f95c1b9fe3c98103a64198a95d075e5a86b6", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -7,7 +7,6 @@\n #![feature(let_chains)]\n #![feature(lint_reasons)]\n #![feature(never_type)]\n-#![feature(once_cell)]\n #![feature(rustc_private)]\n #![feature(stmt_expr_attributes)]\n #![recursion_limit = \"512\"]\n@@ -67,6 +66,7 @@ mod declared_lints;\n mod renamed_lints;\n \n // begin lints modules, do not remove this comment, it\u2019s used in `update_lints`\n+mod allow_attributes;\n mod almost_complete_range;\n mod approx_const;\n mod as_conversions;\n@@ -179,6 +179,7 @@ mod manual_bits;\n mod manual_clamp;\n mod manual_is_ascii_check;\n mod manual_let_else;\n+mod manual_main_separator_str;\n mod manual_non_exhaustive;\n mod manual_rem_euclid;\n mod manual_retain;\n@@ -300,6 +301,7 @@ mod unit_types;\n mod unnamed_address;\n mod unnecessary_owned_empty_strings;\n mod unnecessary_self_imports;\n+mod unnecessary_struct_initialization;\n mod unnecessary_wraps;\n mod unnested_or_patterns;\n mod unsafe_removed_from_name;\n@@ -656,7 +658,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(empty_enum::EmptyEnum));\n     store.register_late_pass(|_| Box::new(invalid_upcast_comparisons::InvalidUpcastComparisons));\n     store.register_late_pass(|_| Box::new(regex::Regex));\n-    store.register_late_pass(|_| Box::new(copies::CopyAndPaste));\n+    let ignore_interior_mutability = conf.ignore_interior_mutability.clone();\n+    store.register_late_pass(move |_| Box::new(copies::CopyAndPaste::new(ignore_interior_mutability.clone())));\n     store.register_late_pass(|_| Box::new(copy_iterator::CopyIterator));\n     store.register_late_pass(|_| Box::new(format::UselessFormat));\n     store.register_late_pass(|_| Box::new(swap::Swap));\n@@ -933,6 +936,9 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(missing_assert_message::MissingAssertMessage));\n     store.register_early_pass(|| Box::new(redundant_async_block::RedundantAsyncBlock));\n     store.register_late_pass(|_| Box::new(let_with_type_underscore::UnderscoreTyped));\n+    store.register_late_pass(|_| Box::new(allow_attributes::AllowAttribute));\n+    store.register_late_pass(move |_| Box::new(manual_main_separator_str::ManualMainSeparatorStr::new(msrv())));\n+    store.register_late_pass(|_| Box::new(unnecessary_struct_initialization::UnnecessaryStruct));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "9d9341559ac722eb8416c76c26493b4355ae154f", "filename": "clippy_lints/src/loops/same_item_push.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,15 +1,17 @@\n use super::SAME_ITEM_PUSH;\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::path_to_local;\n-use clippy_utils::source::snippet_with_macro_callsite;\n+use clippy_utils::source::snippet_with_context;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::Applicability;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, HirId, Mutability, Node, Pat, PatKind, Stmt, StmtKind};\n use rustc_lint::LateContext;\n use rustc_span::symbol::sym;\n+use rustc_span::SyntaxContext;\n use std::iter::Iterator;\n \n /// Detects for loop pushing the same item into a Vec\n@@ -20,9 +22,10 @@ pub(super) fn check<'tcx>(\n     body: &'tcx Expr<'_>,\n     _: &'tcx Expr<'_>,\n ) {\n-    fn emit_lint(cx: &LateContext<'_>, vec: &Expr<'_>, pushed_item: &Expr<'_>) {\n-        let vec_str = snippet_with_macro_callsite(cx, vec.span, \"\");\n-        let item_str = snippet_with_macro_callsite(cx, pushed_item.span, \"\");\n+    fn emit_lint(cx: &LateContext<'_>, vec: &Expr<'_>, pushed_item: &Expr<'_>, ctxt: SyntaxContext) {\n+        let mut app = Applicability::Unspecified;\n+        let vec_str = snippet_with_context(cx, vec.span, ctxt, \"\", &mut app).0;\n+        let item_str = snippet_with_context(cx, pushed_item.span, ctxt, \"\", &mut app).0;\n \n         span_lint_and_help(\n             cx,\n@@ -43,7 +46,7 @@ pub(super) fn check<'tcx>(\n     walk_expr(&mut same_item_push_visitor, body);\n     if_chain! {\n         if same_item_push_visitor.should_lint();\n-        if let Some((vec, pushed_item)) = same_item_push_visitor.vec_push;\n+        if let Some((vec, pushed_item, ctxt)) = same_item_push_visitor.vec_push;\n         let vec_ty = cx.typeck_results().expr_ty(vec);\n         let ty = vec_ty.walk().nth(1).unwrap().expect_ty();\n         if cx\n@@ -69,11 +72,11 @@ pub(super) fn check<'tcx>(\n                                 then {\n                                     match init.kind {\n                                         // immutable bindings that are initialized with literal\n-                                        ExprKind::Lit(..) => emit_lint(cx, vec, pushed_item),\n+                                        ExprKind::Lit(..) => emit_lint(cx, vec, pushed_item, ctxt),\n                                         // immutable bindings that are initialized with constant\n                                         ExprKind::Path(ref path) => {\n                                             if let Res::Def(DefKind::Const, ..) = cx.qpath_res(path, init.hir_id) {\n-                                                emit_lint(cx, vec, pushed_item);\n+                                                emit_lint(cx, vec, pushed_item, ctxt);\n                                             }\n                                         }\n                                         _ => {},\n@@ -82,11 +85,11 @@ pub(super) fn check<'tcx>(\n                             }\n                         },\n                         // constant\n-                        Res::Def(DefKind::Const, ..) => emit_lint(cx, vec, pushed_item),\n+                        Res::Def(DefKind::Const, ..) => emit_lint(cx, vec, pushed_item, ctxt),\n                         _ => {},\n                     }\n                 },\n-                ExprKind::Lit(..) => emit_lint(cx, vec, pushed_item),\n+                ExprKind::Lit(..) => emit_lint(cx, vec, pushed_item, ctxt),\n                 _ => {},\n             }\n         }\n@@ -98,7 +101,7 @@ struct SameItemPushVisitor<'a, 'tcx> {\n     non_deterministic_expr: bool,\n     multiple_pushes: bool,\n     // this field holds the last vec push operation visited, which should be the only push seen\n-    vec_push: Option<(&'tcx Expr<'tcx>, &'tcx Expr<'tcx>)>,\n+    vec_push: Option<(&'tcx Expr<'tcx>, &'tcx Expr<'tcx>, SyntaxContext)>,\n     cx: &'a LateContext<'tcx>,\n     used_locals: FxHashSet<HirId>,\n }\n@@ -118,7 +121,7 @@ impl<'a, 'tcx> SameItemPushVisitor<'a, 'tcx> {\n         if_chain! {\n             if !self.non_deterministic_expr;\n             if !self.multiple_pushes;\n-            if let Some((vec, _)) = self.vec_push;\n+            if let Some((vec, _, _)) = self.vec_push;\n             if let Some(hir_id) = path_to_local(vec);\n             then {\n                 !self.used_locals.contains(&hir_id)\n@@ -173,7 +176,10 @@ impl<'a, 'tcx> Visitor<'tcx> for SameItemPushVisitor<'a, 'tcx> {\n \n // Given some statement, determine if that statement is a push on a Vec. If it is, return\n // the Vec being pushed into and the item being pushed\n-fn get_vec_push<'tcx>(cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) -> Option<(&'tcx Expr<'tcx>, &'tcx Expr<'tcx>)> {\n+fn get_vec_push<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    stmt: &'tcx Stmt<'_>,\n+) -> Option<(&'tcx Expr<'tcx>, &'tcx Expr<'tcx>, SyntaxContext)> {\n     if_chain! {\n             // Extract method being called\n             if let StmtKind::Semi(semi_stmt) = &stmt.kind;\n@@ -184,7 +190,7 @@ fn get_vec_push<'tcx>(cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) -> Option<(&\n             if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(self_expr), sym::Vec);\n             if path.ident.name.as_str() == \"push\";\n             then {\n-                return Some((self_expr, pushed_item))\n+                return Some((self_expr, pushed_item, semi_stmt.span.ctxt()))\n             }\n     }\n     None"}, {"sha": "577bc1d661dbd50b4bfd88a853738d50a2dd45fe", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -5,7 +5,7 @@ use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n     AsyncGeneratorKind, Block, Body, Closure, Expr, ExprKind, FnDecl, FnRetTy, GeneratorKind, GenericArg, GenericBound,\n-    ItemKind, LifetimeName, Term, TraitRef, Ty, TyKind, TypeBindingKind,\n+    ImplItem, Item, ItemKind, LifetimeName, Node, Term, TraitRef, Ty, TyKind, TypeBindingKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -45,7 +45,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n         decl: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         span: Span,\n-        _: LocalDefId,\n+        def_id: LocalDefId,\n     ) {\n         if_chain! {\n             if let Some(header) = kind.header();\n@@ -59,6 +59,8 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n             if let ExprKind::Block(block, _) = body.value.kind;\n             if block.stmts.is_empty();\n             if let Some(closure_body) = desugared_async_block(cx, block);\n+            if let Node::Item(Item {vis_span, ..}) | Node::ImplItem(ImplItem {vis_span, ..}) =\n+                cx.tcx.hir().get_by_def_id(def_id);\n             then {\n                 let header_span = span.with_hi(ret_ty.span.hi());\n \n@@ -69,15 +71,22 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n                     \"this function can be simplified using the `async fn` syntax\",\n                     |diag| {\n                         if_chain! {\n+                            if let Some(vis_snip) = snippet_opt(cx, *vis_span);\n                             if let Some(header_snip) = snippet_opt(cx, header_span);\n                             if let Some(ret_pos) = position_before_rarrow(&header_snip);\n                             if let Some((ret_sugg, ret_snip)) = suggested_ret(cx, output);\n                             then {\n+                                let header_snip = if vis_snip.is_empty() {\n+                                    format!(\"async {}\", &header_snip[..ret_pos])\n+                                } else {\n+                                    format!(\"{} async {}\", vis_snip, &header_snip[vis_snip.len() + 1..ret_pos])\n+                                };\n+\n                                 let help = format!(\"make the function `async` and {ret_sugg}\");\n                                 diag.span_suggestion(\n                                     header_span,\n                                     help,\n-                                    format!(\"async {}{ret_snip}\", &header_snip[..ret_pos]),\n+                                    format!(\"{header_snip}{ret_snip}\"),\n                                     Applicability::MachineApplicable\n                                 );\n "}, {"sha": "440362b96b4700bd204df45b40557e83767a369c", "filename": "clippy_lints/src/manual_clamp.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmanual_clamp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmanual_clamp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_clamp.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -6,7 +6,8 @@ use clippy_utils::ty::implements_trait;\n use clippy_utils::visitors::is_const_evaluatable;\n use clippy_utils::MaybePath;\n use clippy_utils::{\n-    eq_expr_value, is_diag_trait_item, is_trait_method, path_res, path_to_local_id, peel_blocks, peel_blocks_with_stmt,\n+    eq_expr_value, in_constant, is_diag_trait_item, is_trait_method, path_res, path_to_local_id, peel_blocks,\n+    peel_blocks_with_stmt,\n };\n use itertools::Itertools;\n use rustc_errors::Applicability;\n@@ -117,7 +118,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualClamp {\n         if !self.msrv.meets(msrvs::CLAMP) {\n             return;\n         }\n-        if !expr.span.from_expansion() {\n+        if !expr.span.from_expansion() && !in_constant(cx, expr.hir_id) {\n             let suggestion = is_if_elseif_else_pattern(cx, expr)\n                 .or_else(|| is_max_min_pattern(cx, expr))\n                 .or_else(|| is_call_max_min_pattern(cx, expr))\n@@ -130,7 +131,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualClamp {\n     }\n \n     fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>) {\n-        if !self.msrv.meets(msrvs::CLAMP) {\n+        if !self.msrv.meets(msrvs::CLAMP) || in_constant(cx, block.hir_id) {\n             return;\n         }\n         for suggestion in is_two_if_pattern(cx, block) {"}, {"sha": "c292bbe4e9344ce80e22f849704f52a2dded01ad", "filename": "clippy_lints/src/manual_main_separator_str.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmanual_main_separator_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmanual_main_separator_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_main_separator_str.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -0,0 +1,74 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::msrvs::{self, Msrv};\n+use clippy_utils::{is_trait_method, match_def_path, paths, peel_hir_expr_refs};\n+use rustc_errors::Applicability;\n+use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::{Expr, ExprKind, Mutability, QPath};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for references on `std::path::MAIN_SEPARATOR.to_string()` used\n+    /// to build a `&str`.\n+    ///\n+    /// ### Why is this bad?\n+    /// There exists a `std::path::MAIN_SEPARATOR_STR` which does not require\n+    /// an extra memory allocation.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let s: &str = &std::path::MAIN_SEPARATOR.to_string();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let s: &str = std::path::MAIN_SEPARATOR_STR;\n+    /// ```\n+    #[clippy::version = \"1.70.0\"]\n+    pub MANUAL_MAIN_SEPARATOR_STR,\n+    complexity,\n+    \"`&std::path::MAIN_SEPARATOR.to_string()` can be replaced by `std::path::MAIN_SEPARATOR_STR`\"\n+}\n+\n+pub struct ManualMainSeparatorStr {\n+    msrv: Msrv,\n+}\n+\n+impl ManualMainSeparatorStr {\n+    #[must_use]\n+    pub fn new(msrv: Msrv) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(ManualMainSeparatorStr => [MANUAL_MAIN_SEPARATOR_STR]);\n+\n+impl LateLintPass<'_> for ManualMainSeparatorStr {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        if self.msrv.meets(msrvs::PATH_MAIN_SEPARATOR_STR) &&\n+            let (target, _) = peel_hir_expr_refs(expr) &&\n+            is_trait_method(cx, target, sym::ToString) &&\n+            let ExprKind::MethodCall(path, receiver, &[], _) = target.kind &&\n+            path.ident.name == sym::to_string &&\n+            let ExprKind::Path(QPath::Resolved(None, path)) = receiver.kind &&\n+            let Res::Def(DefKind::Const, receiver_def_id) = path.res &&\n+            match_def_path(cx, receiver_def_id, &paths::PATH_MAIN_SEPARATOR) &&\n+            let ty::Ref(_, ty, Mutability::Not) = cx.typeck_results().expr_ty_adjusted(expr).kind() &&\n+            ty.is_str()\n+            {\n+                span_lint_and_sugg(\n+                    cx,\n+                    MANUAL_MAIN_SEPARATOR_STR,\n+                    expr.span,\n+                    \"taking a reference on `std::path::MAIN_SEPARATOR` conversion to `String`\",\n+                    \"replace with\",\n+                    \"std::path::MAIN_SEPARATOR_STR\".to_owned(),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+    }\n+\n+    extract_msrv_attr!(LateContext);\n+}"}, {"sha": "b94501bf0ad38d4d9f22a785bf4ecf21fd9b336c", "filename": "clippy_lints/src/matches/manual_unwrap_or.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmatches%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmatches%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmanual_unwrap_or.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -32,14 +32,8 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, scrutinee:\n             let reindented_or_body =\n                 reindent_multiline(or_body_snippet.into(), true, Some(indent));\n \n-            let suggestion = if scrutinee.span.from_expansion() {\n-                    // we don't want parentheses around macro, e.g. `(some_macro!()).unwrap_or(0)`\n-                    sugg::Sugg::hir_with_macro_callsite(cx, scrutinee, \"..\")\n-                }\n-                else {\n-                    sugg::Sugg::hir(cx, scrutinee, \"..\").maybe_par()\n-                };\n-\n+            let mut app = Applicability::MachineApplicable;\n+            let suggestion = sugg::Sugg::hir_with_context(cx, scrutinee, expr.span.ctxt(), \"..\", &mut app).maybe_par();\n             span_lint_and_sugg(\n                 cx,\n                 MANUAL_UNWRAP_OR, expr.span,\n@@ -48,7 +42,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, scrutinee:\n                 format!(\n                     \"{suggestion}.unwrap_or({reindented_or_body})\",\n                 ),\n-                Applicability::MachineApplicable,\n+                app,\n             );\n         }\n     }"}, {"sha": "df1e585f10b21e60a359fde343343061542bedf3", "filename": "clippy_lints/src/matches/match_bool.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmatches%2Fmatch_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmatches%2Fmatch_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_bool.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -10,9 +10,9 @@ use rustc_middle::ty;\n \n use super::MATCH_BOOL;\n \n-pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr: &Expr<'_>) {\n+pub(crate) fn check(cx: &LateContext<'_>, scrutinee: &Expr<'_>, arms: &[Arm<'_>], expr: &Expr<'_>) {\n     // Type of expression is `bool`.\n-    if *cx.typeck_results().expr_ty(ex).kind() == ty::Bool {\n+    if *cx.typeck_results().expr_ty(scrutinee).kind() == ty::Bool {\n         span_lint_and_then(\n             cx,\n             MATCH_BOOL,\n@@ -36,24 +36,26 @@ pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr:\n                     };\n \n                     if let Some((true_expr, false_expr)) = exprs {\n+                        let mut app = Applicability::HasPlaceholders;\n+                        let ctxt = expr.span.ctxt();\n                         let sugg = match (is_unit_expr(true_expr), is_unit_expr(false_expr)) {\n                             (false, false) => Some(format!(\n                                 \"if {} {} else {}\",\n-                                snippet(cx, ex.span, \"b\"),\n-                                expr_block(cx, true_expr, None, \"..\", Some(expr.span)),\n-                                expr_block(cx, false_expr, None, \"..\", Some(expr.span))\n+                                snippet(cx, scrutinee.span, \"b\"),\n+                                expr_block(cx, true_expr, ctxt, \"..\", Some(expr.span), &mut app),\n+                                expr_block(cx, false_expr, ctxt, \"..\", Some(expr.span), &mut app)\n                             )),\n                             (false, true) => Some(format!(\n                                 \"if {} {}\",\n-                                snippet(cx, ex.span, \"b\"),\n-                                expr_block(cx, true_expr, None, \"..\", Some(expr.span))\n+                                snippet(cx, scrutinee.span, \"b\"),\n+                                expr_block(cx, true_expr, ctxt, \"..\", Some(expr.span), &mut app)\n                             )),\n                             (true, false) => {\n-                                let test = Sugg::hir(cx, ex, \"..\");\n+                                let test = Sugg::hir(cx, scrutinee, \"..\");\n                                 Some(format!(\n                                     \"if {} {}\",\n                                     !test,\n-                                    expr_block(cx, false_expr, None, \"..\", Some(expr.span))\n+                                    expr_block(cx, false_expr, ctxt, \"..\", Some(expr.span), &mut app)\n                                 ))\n                             },\n                             (true, true) => None,"}, {"sha": "aba4c85c59e284a631c853600795b49e7087ebae", "filename": "clippy_lints/src/matches/match_ref_pats.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmatches%2Fmatch_ref_pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmatches%2Fmatch_ref_pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_ref_pats.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,13 +1,14 @@\n use clippy_utils::diagnostics::{multispan_sugg, span_lint_and_then};\n-use clippy_utils::source::snippet;\n+use clippy_utils::source::{snippet, walk_span_to_context};\n use clippy_utils::sugg::Sugg;\n use core::iter::once;\n+use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, Pat, PatKind};\n use rustc_lint::LateContext;\n \n use super::MATCH_REF_PATS;\n \n-pub(crate) fn check<'a, 'b, I>(cx: &LateContext<'_>, ex: &Expr<'_>, pats: I, expr: &Expr<'_>)\n+pub(crate) fn check<'a, 'b, I>(cx: &LateContext<'_>, scrutinee: &Expr<'_>, pats: I, expr: &Expr<'_>)\n where\n     'b: 'a,\n     I: Clone + Iterator<Item = &'a Pat<'b>>,\n@@ -17,13 +18,28 @@ where\n     }\n \n     let (first_sugg, msg, title);\n-    let span = ex.span.source_callsite();\n-    if let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Not, inner) = ex.kind {\n-        first_sugg = once((span, Sugg::hir_with_macro_callsite(cx, inner, \"..\").to_string()));\n+    let ctxt = expr.span.ctxt();\n+    let mut app = Applicability::Unspecified;\n+    if let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Not, inner) = scrutinee.kind {\n+        if scrutinee.span.ctxt() != ctxt {\n+            return;\n+        }\n+        first_sugg = once((\n+            scrutinee.span,\n+            Sugg::hir_with_context(cx, inner, ctxt, \"..\", &mut app).to_string(),\n+        ));\n         msg = \"try\";\n         title = \"you don't need to add `&` to both the expression and the patterns\";\n     } else {\n-        first_sugg = once((span, Sugg::hir_with_macro_callsite(cx, ex, \"..\").deref().to_string()));\n+        let Some(span) = walk_span_to_context(scrutinee.span, ctxt) else {\n+            return;\n+        };\n+        first_sugg = once((\n+            span,\n+            Sugg::hir_with_context(cx, scrutinee, ctxt, \"..\", &mut app)\n+                .deref()\n+                .to_string(),\n+        ));\n         msg = \"instead of prefixing all patterns with `&`, you can dereference the expression\";\n         title = \"you don't need to add `&` to all patterns\";\n     }"}, {"sha": "89da7a55cbd5f82ad7014b584d246d82a317b7a1", "filename": "clippy_lints/src/matches/match_single_binding.rs", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,10 +1,9 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::macros::HirNode;\n-use clippy_utils::source::{indent_of, snippet, snippet_block, snippet_with_applicability};\n-use clippy_utils::sugg::Sugg;\n+use clippy_utils::source::{indent_of, snippet, snippet_block_with_context, snippet_with_applicability};\n use clippy_utils::{get_parent_expr, is_refutable, peel_blocks};\n use rustc_errors::Applicability;\n-use rustc_hir::{Arm, Expr, ExprKind, Node, PatKind};\n+use rustc_hir::{Arm, Expr, ExprKind, Node, PatKind, StmtKind};\n use rustc_lint::LateContext;\n use rustc_span::Span;\n \n@@ -24,21 +23,30 @@ pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], e\n     let matched_vars = ex.span;\n     let bind_names = arms[0].pat.span;\n     let match_body = peel_blocks(arms[0].body);\n-    let mut snippet_body = if match_body.span.from_expansion() {\n-        Sugg::hir_with_macro_callsite(cx, match_body, \"..\").to_string()\n-    } else {\n-        snippet_block(cx, match_body.span, \"..\", Some(expr.span)).to_string()\n-    };\n+    let mut app = Applicability::MaybeIncorrect;\n+    let mut snippet_body = snippet_block_with_context(\n+        cx,\n+        match_body.span,\n+        arms[0].span.ctxt(),\n+        \"..\",\n+        Some(expr.span),\n+        &mut app,\n+    )\n+    .0\n+    .to_string();\n \n     // Do we need to add ';' to suggestion ?\n-    if let ExprKind::Block(block, _) = match_body.kind {\n-        // macro + expr_ty(body) == ()\n-        if block.span.from_expansion() && cx.typeck_results().expr_ty(match_body).is_unit() {\n-            snippet_body.push(';');\n+    if let Node::Stmt(stmt) = cx.tcx.hir().get_parent(expr.hir_id)\n+        && let StmtKind::Expr(_) = stmt.kind\n+        && match match_body.kind {\n+            // We don't need to add a ; to blocks, unless that block is from a macro expansion\n+            ExprKind::Block(block, _) => block.span.from_expansion(),\n+            _ => true,\n         }\n+    {\n+        snippet_body.push(';');\n     }\n \n-    let mut applicability = Applicability::MaybeIncorrect;\n     match arms[0].pat.kind {\n         PatKind::Binding(..) | PatKind::Tuple(_, _) | PatKind::Struct(..) => {\n             let (target_span, sugg) = match opt_parent_assign_span(cx, ex) {\n@@ -48,7 +56,7 @@ pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], e\n                         (ex, expr),\n                         (bind_names, matched_vars),\n                         &snippet_body,\n-                        &mut applicability,\n+                        &mut app,\n                         Some(span),\n                         true,\n                     );\n@@ -60,7 +68,7 @@ pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], e\n                         \"this assignment could be simplified\",\n                         \"consider removing the `match` expression\",\n                         sugg,\n-                        applicability,\n+                        app,\n                     );\n \n                     return;\n@@ -69,10 +77,10 @@ pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], e\n                     span,\n                     format!(\n                         \"let {} = {};\\n{}let {} = {snippet_body};\",\n-                        snippet_with_applicability(cx, bind_names, \"..\", &mut applicability),\n-                        snippet_with_applicability(cx, matched_vars, \"..\", &mut applicability),\n+                        snippet_with_applicability(cx, bind_names, \"..\", &mut app),\n+                        snippet_with_applicability(cx, matched_vars, \"..\", &mut app),\n                         \" \".repeat(indent_of(cx, expr.span).unwrap_or(0)),\n-                        snippet_with_applicability(cx, pat_span, \"..\", &mut applicability)\n+                        snippet_with_applicability(cx, pat_span, \"..\", &mut app)\n                     ),\n                 ),\n                 None => {\n@@ -81,7 +89,7 @@ pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], e\n                         (ex, expr),\n                         (bind_names, matched_vars),\n                         &snippet_body,\n-                        &mut applicability,\n+                        &mut app,\n                         None,\n                         true,\n                     );\n@@ -96,7 +104,7 @@ pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], e\n                 \"this match could be written as a `let` statement\",\n                 \"consider using a `let` statement\",\n                 sugg,\n-                applicability,\n+                app,\n             );\n         },\n         PatKind::Wild => {\n@@ -106,7 +114,7 @@ pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], e\n                     (ex, expr),\n                     (bind_names, matched_vars),\n                     &snippet_body,\n-                    &mut applicability,\n+                    &mut app,\n                     None,\n                     false,\n                 );\n@@ -118,7 +126,7 @@ pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], e\n                     \"this match could be replaced by its scrutinee and body\",\n                     \"consider using the scrutinee and body instead\",\n                     sugg,\n-                    applicability,\n+                    app,\n                 );\n             } else {\n                 span_lint_and_sugg("}, {"sha": "7b609ff3df8fb2be8c9e733555b5496996e80f56", "filename": "clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,6 +1,6 @@\n use super::REDUNDANT_PATTERN_MATCHING;\n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::source::snippet;\n+use clippy_utils::source::{snippet, walk_span_to_context};\n use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::{is_type_diagnostic_item, needs_ordered_drop};\n use clippy_utils::visitors::any_temporaries_need_ordered_drop;\n@@ -150,22 +150,25 @@ fn find_sugg_for_if_let<'tcx>(\n             // if/while let ... = ... { ... }\n             // ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n             let expr_span = expr.span;\n+            let ctxt = expr.span.ctxt();\n \n             // if/while let ... = ... { ... }\n-            //                 ^^^\n-            let op_span = result_expr.span.source_callsite();\n+            //                    ^^^\n+            let Some(res_span) = walk_span_to_context(result_expr.span.source_callsite(), ctxt) else {\n+                return;\n+            };\n \n             // if/while let ... = ... { ... }\n-            // ^^^^^^^^^^^^^^^^^^^\n-            let span = expr_span.until(op_span.shrink_to_hi());\n+            // ^^^^^^^^^^^^^^^^^^^^^^\n+            let span = expr_span.until(res_span.shrink_to_hi());\n \n-            let app = if needs_drop {\n+            let mut app = if needs_drop {\n                 Applicability::MaybeIncorrect\n             } else {\n                 Applicability::MachineApplicable\n             };\n \n-            let sugg = Sugg::hir_with_macro_callsite(cx, result_expr, \"_\")\n+            let sugg = Sugg::hir_with_context(cx, result_expr, ctxt, \"_\", &mut app)\n                 .maybe_par()\n                 .to_string();\n "}, {"sha": "ad47c13896c58251805eb65a76181051347b47ef", "filename": "clippy_lints/src/matches/single_match.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -67,8 +67,10 @@ fn report_single_pattern(\n     els: Option<&Expr<'_>>,\n ) {\n     let lint = if els.is_some() { SINGLE_MATCH_ELSE } else { SINGLE_MATCH };\n+    let ctxt = expr.span.ctxt();\n+    let mut app = Applicability::HasPlaceholders;\n     let els_str = els.map_or(String::new(), |els| {\n-        format!(\" else {}\", expr_block(cx, els, None, \"..\", Some(expr.span)))\n+        format!(\" else {}\", expr_block(cx, els, ctxt, \"..\", Some(expr.span), &mut app))\n     });\n \n     let (pat, pat_ref_count) = peel_hir_pat_refs(arms[0].pat);\n@@ -103,7 +105,7 @@ fn report_single_pattern(\n                 // PartialEq for different reference counts may not exist.\n                 \"&\".repeat(ref_count_diff),\n                 snippet(cx, arms[0].pat.span, \"..\"),\n-                expr_block(cx, arms[0].body, None, \"..\", Some(expr.span)),\n+                expr_block(cx, arms[0].body, ctxt, \"..\", Some(expr.span), &mut app),\n             );\n             (msg, sugg)\n         } else {\n@@ -112,21 +114,13 @@ fn report_single_pattern(\n                 \"if let {} = {} {}{els_str}\",\n                 snippet(cx, arms[0].pat.span, \"..\"),\n                 snippet(cx, ex.span, \"..\"),\n-                expr_block(cx, arms[0].body, None, \"..\", Some(expr.span)),\n+                expr_block(cx, arms[0].body, ctxt, \"..\", Some(expr.span), &mut app),\n             );\n             (msg, sugg)\n         }\n     };\n \n-    span_lint_and_sugg(\n-        cx,\n-        lint,\n-        expr.span,\n-        msg,\n-        \"try this\",\n-        sugg,\n-        Applicability::HasPlaceholders,\n-    );\n+    span_lint_and_sugg(cx, lint, expr.span, msg, \"try this\", sugg, app);\n }\n \n fn check_opt_like<'a>("}, {"sha": "00853348840eda3d49a986189c86aa9a911bd3d1", "filename": "clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,6 +1,6 @@\n use super::{contains_return, BIND_INSTEAD_OF_MAP};\n use clippy_utils::diagnostics::{multispan_sugg_with_applicability, span_lint_and_sugg, span_lint_and_then};\n-use clippy_utils::source::{snippet, snippet_with_macro_callsite};\n+use clippy_utils::source::{snippet, snippet_with_context};\n use clippy_utils::{peel_blocks, visitors::find_all_ret_expressions};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -76,11 +76,8 @@ pub(crate) trait BindInsteadOfMap {\n             if !contains_return(inner_expr);\n             if let Some(msg) = Self::lint_msg(cx);\n             then {\n-                let some_inner_snip = if inner_expr.span.from_expansion() {\n-                    snippet_with_macro_callsite(cx, inner_expr.span, \"_\")\n-                } else {\n-                    snippet(cx, inner_expr.span, \"_\")\n-                };\n+                let mut app = Applicability::MachineApplicable;\n+                let some_inner_snip = snippet_with_context(cx, inner_expr.span, closure_expr.span.ctxt(), \"_\", &mut app).0;\n \n                 let closure_args_snip = snippet(cx, closure_args_span, \"..\");\n                 let option_snip = snippet(cx, recv.span, \"..\");\n@@ -92,7 +89,7 @@ pub(crate) trait BindInsteadOfMap {\n                     &msg,\n                     \"try this\",\n                     note,\n-                    Applicability::MachineApplicable,\n+                    app,\n                 );\n                 true\n             } else {"}, {"sha": "5e8ad0861f33d8d1c639faf143320707867c5a8d", "filename": "clippy_lints/src/methods/clone_on_ref_ptr.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_ref_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_ref_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_ref_ptr.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::paths;\n-use clippy_utils::source::snippet_with_macro_callsite;\n+use clippy_utils::source::snippet_with_context;\n use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -33,7 +33,9 @@ pub(super) fn check(\n             return;\n         };\n \n-        let snippet = snippet_with_macro_callsite(cx, receiver.span, \"..\");\n+        // Sometimes unnecessary ::<_> after Rc/Arc/Weak\n+        let mut app = Applicability::Unspecified;\n+        let snippet = snippet_with_context(cx, receiver.span, expr.span.ctxt(), \"..\", &mut app).0;\n \n         span_lint_and_sugg(\n             cx,\n@@ -42,7 +44,7 @@ pub(super) fn check(\n             \"using `.clone()` on a ref-counted pointer\",\n             \"try this\",\n             format!(\"{caller_type}::<{}>::clone(&{snippet})\", subst.type_at(0)),\n-            Applicability::Unspecified, // Sometimes unnecessary ::<_> after Rc/Arc/Weak\n+            app,\n         );\n     }\n }"}, {"sha": "7ce28ea93e01a2747ca007048b1a8bd8ce99cb55", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::eager_or_lazy::switch_to_lazy_eval;\n-use clippy_utils::source::{snippet, snippet_with_macro_callsite};\n+use clippy_utils::source::snippet_with_context;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use clippy_utils::{contains_return, is_trait_item, last_path_segment};\n use if_chain::if_chain;\n@@ -9,7 +9,6 @@ use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym, Symbol};\n-use std::borrow::Cow;\n \n use super::OR_FUN_CALL;\n \n@@ -111,37 +110,24 @@ pub(super) fn check<'tcx>(\n             if poss.contains(&name);\n \n             then {\n+                let ctxt = span.ctxt();\n+                let mut app = Applicability::HasPlaceholders;\n                 let sugg = {\n                     let (snippet_span, use_lambda) = match (fn_has_arguments, fun_span) {\n                         (false, Some(fun_span)) => (fun_span, false),\n                         _ => (arg.span, true),\n                     };\n \n-                    let format_span = |span: Span| {\n-                        let not_macro_argument_snippet = snippet_with_macro_callsite(cx, span, \"..\");\n-                        let snip = if not_macro_argument_snippet == \"vec![]\" {\n-                            let macro_expanded_snipped = snippet(cx, snippet_span, \"..\");\n-                            match macro_expanded_snipped.strip_prefix(\"$crate::vec::\") {\n-                                Some(stripped) => Cow::Owned(stripped.to_owned()),\n-                                None => macro_expanded_snipped,\n-                            }\n-                        } else {\n-                            not_macro_argument_snippet\n-                        };\n-\n-                        snip.to_string()\n-                    };\n-\n-                    let snip = format_span(snippet_span);\n+                    let snip = snippet_with_context(cx, snippet_span, ctxt, \"..\", &mut app).0;\n                     let snip = if use_lambda {\n                         let l_arg = if fn_has_arguments { \"_\" } else { \"\" };\n                         format!(\"|{l_arg}| {snip}\")\n                     } else {\n-                        snip\n+                        snip.into_owned()\n                     };\n \n                     if let Some(f) = second_arg {\n-                        let f = format_span(f.span);\n+                        let f = snippet_with_context(cx, f.span, ctxt, \"..\", &mut app).0;\n                         format!(\"{snip}, {f}\")\n                     } else {\n                         snip\n@@ -155,7 +141,7 @@ pub(super) fn check<'tcx>(\n                     &format!(\"use of `{name}` followed by a function call\"),\n                     \"try this\",\n                     format!(\"{name}_{suffix}({sugg})\"),\n-                    Applicability::HasPlaceholders,\n+                    app,\n                 );\n             }\n         }"}, {"sha": "3752b9a946f8ea20a9dfc91450bf154293eda6a4", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_hir_and_then};\n-use clippy_utils::source::{snippet, snippet_opt};\n+use clippy_utils::source::{snippet, snippet_opt, snippet_with_context};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n@@ -181,20 +181,17 @@ impl<'tcx> LateLintPass<'tcx> for LintPass {\n             if let PatKind::Binding(BindingAnnotation(ByRef::Yes, mutabl), .., name, None) = local.pat.kind;\n             if let Some(init) = local.init;\n             then {\n-                // use the macro callsite when the init span (but not the whole local span)\n-                // comes from an expansion like `vec![1, 2, 3]` in `let ref _ = vec![1, 2, 3];`\n-                let sugg_init = if init.span.from_expansion() && !local.span.from_expansion() {\n-                    Sugg::hir_with_macro_callsite(cx, init, \"..\")\n-                } else {\n-                    Sugg::hir(cx, init, \"..\")\n-                };\n+                let ctxt = local.span.ctxt();\n+                let mut app = Applicability::MachineApplicable;\n+                let sugg_init = Sugg::hir_with_context(cx, init, ctxt, \"..\", &mut app);\n                 let (mutopt, initref) = if mutabl == Mutability::Mut {\n                     (\"mut \", sugg_init.mut_addr())\n                 } else {\n                     (\"\", sugg_init.addr())\n                 };\n                 let tyopt = if let Some(ty) = local.ty {\n-                    format!(\": &{mutopt}{ty}\", ty=snippet(cx, ty.span, \"..\"))\n+                    let ty_snip = snippet_with_context(cx, ty.span, ctxt, \"_\", &mut app).0;\n+                    format!(\": &{mutopt}{ty_snip}\")\n                 } else {\n                     String::new()\n                 };\n@@ -212,7 +209,7 @@ impl<'tcx> LateLintPass<'tcx> for LintPass {\n                                 \"let {name}{tyopt} = {initref};\",\n                                 name=snippet(cx, name.span, \"..\"),\n                             ),\n-                            Applicability::MachineApplicable,\n+                            app,\n                         );\n                     }\n                 );"}, {"sha": "309f67521a3b4f0323ee3c2f48e45ecfab0dfee1", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 13, "deletions": 47, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,10 +1,11 @@\n use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::ty::is_interior_mut_ty;\n use clippy_utils::{def_path_def_ids, trait_ref_of_method};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::TypeVisitableExt;\n-use rustc_middle::ty::{Adt, Array, Ref, Slice, Tuple, Ty};\n+use rustc_middle::query::Key;\n+use rustc_middle::ty::{Adt, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n@@ -153,53 +154,18 @@ impl MutableKeyType {\n             let is_keyed_type = [sym::HashMap, sym::BTreeMap, sym::HashSet, sym::BTreeSet]\n                 .iter()\n                 .any(|diag_item| cx.tcx.is_diagnostic_item(*diag_item, def.did()));\n-            if is_keyed_type && self.is_interior_mutable_type(cx, substs.type_at(0)) {\n-                span_lint(cx, MUTABLE_KEY_TYPE, span, \"mutable key type\");\n+            if !is_keyed_type {\n+                return;\n             }\n-        }\n-    }\n \n-    /// Determines if a type contains interior mutability which would affect its implementation of\n-    /// [`Hash`] or [`Ord`].\n-    fn is_interior_mutable_type<'tcx>(&self, cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n-        match *ty.kind() {\n-            Ref(_, inner_ty, mutbl) => mutbl == hir::Mutability::Mut || self.is_interior_mutable_type(cx, inner_ty),\n-            Slice(inner_ty) => self.is_interior_mutable_type(cx, inner_ty),\n-            Array(inner_ty, size) => {\n-                size.try_eval_target_usize(cx.tcx, cx.param_env)\n-                    .map_or(true, |u| u != 0)\n-                    && self.is_interior_mutable_type(cx, inner_ty)\n-            },\n-            Tuple(fields) => fields.iter().any(|ty| self.is_interior_mutable_type(cx, ty)),\n-            Adt(def, substs) => {\n-                // Special case for collections in `std` who's impl of `Hash` or `Ord` delegates to\n-                // that of their type parameters.  Note: we don't include `HashSet` and `HashMap`\n-                // because they have no impl for `Hash` or `Ord`.\n-                let def_id = def.did();\n-                let is_std_collection = [\n-                    sym::Option,\n-                    sym::Result,\n-                    sym::LinkedList,\n-                    sym::Vec,\n-                    sym::VecDeque,\n-                    sym::BTreeMap,\n-                    sym::BTreeSet,\n-                    sym::Rc,\n-                    sym::Arc,\n-                ]\n-                .iter()\n-                .any(|diag_item| cx.tcx.is_diagnostic_item(*diag_item, def_id));\n-                let is_box = Some(def_id) == cx.tcx.lang_items().owned_box();\n-                if is_std_collection || is_box || self.ignore_mut_def_ids.contains(&def_id) {\n-                    // The type is mutable if any of its type parameters are\n-                    substs.types().any(|ty| self.is_interior_mutable_type(cx, ty))\n-                } else {\n-                    !ty.has_escaping_bound_vars()\n-                        && cx.tcx.layout_of(cx.param_env.and(ty)).is_ok()\n-                        && !ty.is_freeze(cx.tcx, cx.param_env)\n-                }\n-            },\n-            _ => false,\n+            let subst_ty = substs.type_at(0);\n+            // Determines if a type contains interior mutability which would affect its implementation of\n+            // [`Hash`] or [`Ord`].\n+            if is_interior_mut_ty(cx, subst_ty)\n+                && !matches!(subst_ty.ty_adt_id(), Some(adt_id) if self.ignore_mut_def_ids.contains(&adt_id))\n+            {\n+                span_lint(cx, MUTABLE_KEY_TYPE, span, \"mutable key type\");\n+            }\n         }\n     }\n }"}, {"sha": "c87059bf61de3cb2f119cb9db4e6290e2e8af0e5", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -340,26 +340,19 @@ fn suggest_bool_comparison<'a, 'tcx>(\n     cx: &LateContext<'tcx>,\n     e: &'tcx Expr<'_>,\n     expr: &Expr<'_>,\n-    mut applicability: Applicability,\n+    mut app: Applicability,\n     message: &str,\n     conv_hint: impl FnOnce(Sugg<'a>) -> Sugg<'a>,\n ) {\n-    let hint = if expr.span.from_expansion() {\n-        if applicability != Applicability::Unspecified {\n-            applicability = Applicability::MaybeIncorrect;\n-        }\n-        Sugg::hir_with_macro_callsite(cx, expr, \"..\")\n-    } else {\n-        Sugg::hir_with_applicability(cx, expr, \"..\", &mut applicability)\n-    };\n+    let hint = Sugg::hir_with_context(cx, expr, e.span.ctxt(), \"..\", &mut app);\n     span_lint_and_sugg(\n         cx,\n         BOOL_COMPARISON,\n         e.span,\n         message,\n         \"try simplifying it as shown\",\n         conv_hint(hint).to_string(),\n-        applicability,\n+        app,\n     );\n }\n "}, {"sha": "327e090d38be886e612786373c783a1620e720be", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -124,9 +124,9 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n \n         let preds = traits::elaborate_predicates(cx.tcx, cx.param_env.caller_bounds().iter())\n             .filter(|p| !p.is_global())\n-            .filter_map(|obligation| {\n+            .filter_map(|pred| {\n                 // Note that we do not want to deal with qualified predicates here.\n-                match obligation.predicate.kind().no_bound_vars() {\n+                match pred.kind().no_bound_vars() {\n                     Some(ty::PredicateKind::Clause(ty::Clause::Trait(pred))) if pred.def_id() != sized_trait => {\n                         Some(pred)\n                     },"}, {"sha": "8fd9ae351a0d708695b0e46fc160569805dd888d", "filename": "clippy_lints/src/no_mangle_with_rust_abi.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fno_mangle_with_rust_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fno_mangle_with_rust_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_mangle_with_rust_abi.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,9 +1,10 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{BytePos, Pos};\n use rustc_target::spec::abi::Abi;\n \n declare_clippy_lint! {\n@@ -38,25 +39,28 @@ impl<'tcx> LateLintPass<'tcx> for NoMangleWithRustAbi {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         if let ItemKind::Fn(fn_sig, _, _) = &item.kind {\n             let attrs = cx.tcx.hir().attrs(item.hir_id());\n-            let mut applicability = Applicability::MachineApplicable;\n-            let snippet = snippet_with_applicability(cx, fn_sig.span, \"..\", &mut applicability);\n+            let mut app = Applicability::MaybeIncorrect;\n+            let snippet = snippet_with_applicability(cx, fn_sig.span, \"..\", &mut app);\n             for attr in attrs {\n                 if let Some(ident) = attr.ident()\n                     && ident.name == rustc_span::sym::no_mangle\n                     && fn_sig.header.abi == Abi::Rust\n-                    && !snippet.contains(\"extern\") {\n+                    && let Some((fn_attrs, _)) = snippet.split_once(\"fn\")\n+                    && !fn_attrs.contains(\"extern\")\n+                {\n+                    let sugg_span = fn_sig.span\n+                        .with_lo(fn_sig.span.lo() + BytePos::from_usize(fn_attrs.len()))\n+                        .shrink_to_lo();\n \n-                    let suggestion = snippet.split_once(\"fn\")\n-                        .map_or(String::new(), |(first, second)| format!(r#\"{first}extern \"C\" fn{second}\"#));\n-\n-                    span_lint_and_sugg(\n+                    span_lint_and_then(\n                         cx,\n                         NO_MANGLE_WITH_RUST_ABI,\n                         fn_sig.span,\n-                        \"attribute #[no_mangle] set on a Rust ABI function\",\n-                        \"try\",\n-                        suggestion,\n-                        applicability\n+                        \"`#[no_mangle]` set on a function with the default (`Rust`) ABI\",\n+                        |diag| {\n+                            diag.span_suggestion(sugg_span, \"set an ABI\", \"extern \\\"C\\\" \", app)\n+                                .span_suggestion(sugg_span, \"or explicitly set the default\", \"extern \\\"Rust\\\" \", app);\n+                        },\n                     );\n                 }\n             }"}, {"sha": "bbbcda069c5517fe0074fbe99c738870dedc30a4", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -12,6 +12,7 @@ use rustc_hir::{\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::SyntaxContext;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -95,10 +96,10 @@ struct OptionOccurrence {\n     none_expr: String,\n }\n \n-fn format_option_in_sugg(cx: &LateContext<'_>, cond_expr: &Expr<'_>, as_ref: bool, as_mut: bool) -> String {\n+fn format_option_in_sugg(cond_sugg: Sugg<'_>, as_ref: bool, as_mut: bool) -> String {\n     format!(\n         \"{}{}\",\n-        Sugg::hir_with_macro_callsite(cx, cond_expr, \"..\").maybe_par(),\n+        cond_sugg.maybe_par(),\n         if as_mut {\n             \".as_mut()\"\n         } else if as_ref {\n@@ -111,6 +112,7 @@ fn format_option_in_sugg(cx: &LateContext<'_>, cond_expr: &Expr<'_>, as_ref: boo\n \n fn try_get_option_occurrence<'tcx>(\n     cx: &LateContext<'tcx>,\n+    ctxt: SyntaxContext,\n     pat: &Pat<'tcx>,\n     expr: &Expr<'_>,\n     if_then: &'tcx Expr<'_>,\n@@ -160,11 +162,23 @@ fn try_get_option_occurrence<'tcx>(\n                 }\n             }\n \n+            let mut app = Applicability::Unspecified;\n             return Some(OptionOccurrence {\n-                option: format_option_in_sugg(cx, cond_expr, as_ref, as_mut),\n+                option: format_option_in_sugg(\n+                    Sugg::hir_with_context(cx, cond_expr, ctxt, \"..\", &mut app),\n+                    as_ref,\n+                    as_mut,\n+                ),\n                 method_sugg: method_sugg.to_string(),\n-                some_expr: format!(\"|{capture_mut}{capture_name}| {}\", Sugg::hir_with_macro_callsite(cx, some_body, \"..\")),\n-                none_expr: format!(\"{}{}\", if method_sugg == \"map_or\" { \"\" } else { \"|| \" }, Sugg::hir_with_macro_callsite(cx, none_body, \"..\")),\n+                some_expr: format!(\n+                    \"|{capture_mut}{capture_name}| {}\",\n+                    Sugg::hir_with_context(cx, some_body, ctxt, \"..\", &mut app),\n+                ),\n+                none_expr: format!(\n+                    \"{}{}\",\n+                    if method_sugg == \"map_or\" { \"\" } else { \"|| \" },\n+                    Sugg::hir_with_context(cx, none_body, ctxt, \"..\", &mut app),\n+                ),\n             });\n         }\n     }\n@@ -194,7 +208,7 @@ fn detect_option_if_let_else<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) ->\n     }) = higher::IfLet::hir(cx, expr)\n     {\n         if !is_else_clause(cx.tcx, expr) {\n-            return try_get_option_occurrence(cx, let_pat, let_expr, if_then, if_else);\n+            return try_get_option_occurrence(cx, expr.span.ctxt(), let_pat, let_expr, if_then, if_else);\n         }\n     }\n     None\n@@ -203,7 +217,7 @@ fn detect_option_if_let_else<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) ->\n fn detect_option_match<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) -> Option<OptionOccurrence> {\n     if let ExprKind::Match(ex, arms, MatchSource::Normal) = expr.kind {\n         if let Some((let_pat, if_then, if_else)) = try_convert_match(cx, arms) {\n-            return try_get_option_occurrence(cx, let_pat, ex, if_then, if_else);\n+            return try_get_option_occurrence(cx, expr.span.ctxt(), let_pat, ex, if_then, if_else);\n         }\n     }\n     None"}, {"sha": "5ac203665d0c02aac644c3cc38e230df8bb246a8", "filename": "clippy_lints/src/redundant_async_block.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fredundant_async_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fredundant_async_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_async_block.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::{diagnostics::span_lint_and_sugg, source::snippet};\n-use rustc_ast::ast::*;\n+use rustc_ast::ast::{Expr, ExprKind, Stmt, StmtKind};\n use rustc_ast::visit::Visitor as AstVisitor;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n@@ -32,7 +32,7 @@ declare_clippy_lint! {\n     /// ```\n     #[clippy::version = \"1.69.0\"]\n     pub REDUNDANT_ASYNC_BLOCK,\n-    complexity,\n+    nursery,\n     \"`async { future.await }` can be replaced by `future`\"\n }\n declare_lint_pass!(RedundantAsyncBlock => [REDUNDANT_ASYNC_BLOCK]);\n@@ -48,6 +48,11 @@ impl EarlyLintPass for RedundantAsyncBlock {\n             !future.span.from_expansion() &&\n             !await_in_expr(future)\n         {\n+            if captures_value(last) {\n+                // If the async block captures variables then there is no equivalence.\n+                return;\n+            }\n+\n             span_lint_and_sugg(\n                 cx,\n                 REDUNDANT_ASYNC_BLOCK,\n@@ -82,3 +87,33 @@ impl<'ast> AstVisitor<'ast> for AwaitDetector {\n         }\n     }\n }\n+\n+/// Check whether an expression may have captured a local variable.\n+/// This is done by looking for paths with only one segment, except as\n+/// a prefix of `.await` since this would be captured by value.\n+///\n+/// This function will sometimes return `true` even tough there are no\n+/// captures happening: at the AST level, it is impossible to\n+/// dinstinguish a function call from a call to a closure which comes\n+/// from the local environment.\n+fn captures_value(expr: &Expr) -> bool {\n+    let mut detector = CaptureDetector::default();\n+    detector.visit_expr(expr);\n+    detector.capture_found\n+}\n+\n+#[derive(Default)]\n+struct CaptureDetector {\n+    capture_found: bool,\n+}\n+\n+impl<'ast> AstVisitor<'ast> for CaptureDetector {\n+    fn visit_expr(&mut self, ex: &'ast Expr) {\n+        match (&ex.kind, self.capture_found) {\n+            (ExprKind::Await(fut), _) if matches!(fut.kind, ExprKind::Path(..)) => (),\n+            (ExprKind::Path(_, path), _) if path.segments.len() == 1 => self.capture_found = true,\n+            (_, false) => rustc_ast::visit::walk_expr(self, ex),\n+            _ => (),\n+        }\n+    }\n+}"}, {"sha": "c984a8286eb88ab1bc7ab3bc0a766c8499a09b09", "filename": "clippy_lints/src/ref_option_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fref_option_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fref_option_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fref_option_ref.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::last_path_segment;\n use clippy_utils::source::snippet;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{GenericArg, Mutability, Ty, TyKind};\n+use rustc_hir::{GenericArg, GenericArgsParentheses, Mutability, Ty, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n@@ -47,7 +47,7 @@ impl<'tcx> LateLintPass<'tcx> for RefOptionRef {\n \n             if cx.tcx.is_diagnostic_item(sym::Option, def_id);\n             if let Some(params) = last_path_segment(qpath).args ;\n-            if !params.parenthesized;\n+            if params.parenthesized == GenericArgsParentheses::No;\n             if let Some(inner_ty) = params.args.iter().find_map(|arg| match arg {\n                 GenericArg::Type(inner_ty) => Some(inner_ty),\n                 _ => None,"}, {"sha": "355f907e2577b6ebebc75bdbf7338e86ed9d6596", "filename": "clippy_lints/src/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,7 +1,6 @@\n use crate::rustc_lint::LintContext;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::snippet_with_macro_callsite;\n-use clippy_utils::sugg;\n+use clippy_utils::source::snippet_with_context;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Block, ExprKind};\n@@ -44,25 +43,23 @@ impl<'tcx> LateLintPass<'tcx> for SemicolonIfNothingReturned {\n             if let Some(expr) = block.expr;\n             let t_expr = cx.typeck_results().expr_ty(expr);\n             if t_expr.is_unit();\n-            if let snippet = snippet_with_macro_callsite(cx, expr.span, \"}\");\n+            let mut app = Applicability::MaybeIncorrect;\n+            if let snippet = snippet_with_context(cx, expr.span, block.span.ctxt(), \"}\", &mut app).0;\n             if !snippet.ends_with('}') && !snippet.ends_with(';');\n             if cx.sess().source_map().is_multiline(block.span);\n             then {\n                 // filter out the desugared `for` loop\n                 if let ExprKind::DropTemps(..) = &expr.kind {\n                     return;\n                 }\n-\n-                let sugg = sugg::Sugg::hir_with_macro_callsite(cx, expr, \"..\");\n-                let suggestion = format!(\"{sugg};\");\n                 span_lint_and_sugg(\n                     cx,\n                     SEMICOLON_IF_NOTHING_RETURNED,\n                     expr.span.source_callsite(),\n                     \"consider adding a `;` to the last statement for consistent formatting\",\n                     \"add a `;` here\",\n-                    suggestion,\n-                    Applicability::MaybeIncorrect,\n+                    format!(\"{snippet};\"),\n+                    app,\n                 );\n             }\n         }"}, {"sha": "869358fb1ba704fb526549c8642bd2e109efcf3e", "filename": "clippy_lints/src/significant_drop_tightening.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,9 +1,9 @@\n-use crate::FxHashSet;\n use clippy_utils::{\n     diagnostics::span_lint_and_then,\n     get_attr,\n     source::{indent_of, snippet},\n };\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir::{\n     self as hir,\n@@ -58,6 +58,7 @@ impl_lint_pass!(SignificantDropTightening<'_> => [SIGNIFICANT_DROP_TIGHTENING]);\n pub struct SignificantDropTightening<'tcx> {\n     /// Auxiliary structure used to avoid having to verify the same type multiple times.\n     seen_types: FxHashSet<Ty<'tcx>>,\n+    type_cache: FxHashMap<Ty<'tcx>, bool>,\n }\n \n impl<'tcx> SignificantDropTightening<'tcx> {\n@@ -118,7 +119,7 @@ impl<'tcx> SignificantDropTightening<'tcx> {\n         stmt: &hir::Stmt<'_>,\n         cb: impl Fn(&mut SigDropAuxParams),\n     ) {\n-        let mut sig_drop_finder = SigDropFinder::new(cx, &mut self.seen_types);\n+        let mut sig_drop_finder = SigDropFinder::new(cx, &mut self.seen_types, &mut self.type_cache);\n         sig_drop_finder.visit_expr(expr);\n         if sig_drop_finder.has_sig_drop {\n             cb(sdap);\n@@ -296,15 +297,24 @@ impl Default for SigDropAuxParams {\n struct SigDropChecker<'cx, 'sdt, 'tcx> {\n     cx: &'cx LateContext<'tcx>,\n     seen_types: &'sdt mut FxHashSet<Ty<'tcx>>,\n+    type_cache: &'sdt mut FxHashMap<Ty<'tcx>, bool>,\n }\n \n impl<'cx, 'sdt, 'tcx> SigDropChecker<'cx, 'sdt, 'tcx> {\n-    pub(crate) fn new(cx: &'cx LateContext<'tcx>, seen_types: &'sdt mut FxHashSet<Ty<'tcx>>) -> Self {\n+    pub(crate) fn new(\n+        cx: &'cx LateContext<'tcx>,\n+        seen_types: &'sdt mut FxHashSet<Ty<'tcx>>,\n+        type_cache: &'sdt mut FxHashMap<Ty<'tcx>, bool>,\n+    ) -> Self {\n         seen_types.clear();\n-        Self { cx, seen_types }\n+        Self {\n+            cx,\n+            seen_types,\n+            type_cache,\n+        }\n     }\n \n-    pub(crate) fn has_sig_drop_attr(&mut self, ty: Ty<'tcx>) -> bool {\n+    pub(crate) fn has_sig_drop_attr_uncached(&mut self, ty: Ty<'tcx>) -> bool {\n         if let Some(adt) = ty.ty_adt_def() {\n             let mut iter = get_attr(\n                 self.cx.sess(),\n@@ -340,6 +350,16 @@ impl<'cx, 'sdt, 'tcx> SigDropChecker<'cx, 'sdt, 'tcx> {\n         }\n     }\n \n+    pub(crate) fn has_sig_drop_attr(&mut self, ty: Ty<'tcx>) -> bool {\n+        // The borrow checker prevents us from using something fancier like or_insert_with.\n+        if let Some(ty) = self.type_cache.get(&ty) {\n+            return *ty;\n+        }\n+        let value = self.has_sig_drop_attr_uncached(ty);\n+        self.type_cache.insert(ty, value);\n+        value\n+    }\n+\n     fn has_seen_ty(&mut self, ty: Ty<'tcx>) -> bool {\n         !self.seen_types.insert(ty)\n     }\n@@ -353,11 +373,15 @@ struct SigDropFinder<'cx, 'sdt, 'tcx> {\n }\n \n impl<'cx, 'sdt, 'tcx> SigDropFinder<'cx, 'sdt, 'tcx> {\n-    fn new(cx: &'cx LateContext<'tcx>, seen_types: &'sdt mut FxHashSet<Ty<'tcx>>) -> Self {\n+    fn new(\n+        cx: &'cx LateContext<'tcx>,\n+        seen_types: &'sdt mut FxHashSet<Ty<'tcx>>,\n+        type_cache: &'sdt mut FxHashMap<Ty<'tcx>, bool>,\n+    ) -> Self {\n         Self {\n             cx,\n             has_sig_drop: false,\n-            sig_drop_checker: SigDropChecker::new(cx, seen_types),\n+            sig_drop_checker: SigDropChecker::new(cx, seen_types, type_cache),\n         }\n     }\n }"}, {"sha": "f7eef03d1d473c42f5e7fe2f101eba41d84a11f0", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -6,7 +6,8 @@ use clippy_utils::{can_mut_borrow_both, eq_expr_value, in_constant, std_or_core}\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Block, Expr, ExprKind, PatKind, QPath, Stmt, StmtKind};\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n@@ -188,8 +189,10 @@ fn check_suspicious_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n         if let Some((lhs0, rhs0)) = parse(first)\n             && let Some((lhs1, rhs1)) = parse(second)\n             && first.span.eq_ctxt(second.span)\n+\t\t\t&& !in_external_macro(cx.sess(), first.span)\n             && is_same(cx, lhs0, rhs1)\n             && is_same(cx, lhs1, rhs0)\n+\t\t\t&& !is_same(cx, lhs1, rhs1) // Ignore a = b; a = a (#10421)\n             && let Some(lhs_sugg) = match &lhs0 {\n                 ExprOrIdent::Expr(expr) => Sugg::hir_opt(cx, expr),\n                 ExprOrIdent::Ident(ident) => Some(Sugg::NonParen(ident.as_str().into())),\n@@ -257,8 +260,8 @@ fn parse<'a, 'hir>(stmt: &'a Stmt<'hir>) -> Option<(ExprOrIdent<'hir>, &'a Expr<\n /// Implementation of the xor case for `MANUAL_SWAP` lint.\n fn check_xor_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n     for [s1, s2, s3] in block.stmts.array_windows::<3>() {\n+        let ctxt = s1.span.ctxt();\n         if_chain! {\n-            let ctxt = s1.span.ctxt();\n             if let Some((lhs0, rhs0)) = extract_sides_of_xor_assign(s1, ctxt);\n             if let Some((lhs1, rhs1)) = extract_sides_of_xor_assign(s2, ctxt);\n             if let Some((lhs2, rhs2)) = extract_sides_of_xor_assign(s3, ctxt);"}, {"sha": "acdf54710691e5dbab98131cc679421f8ead050e", "filename": "clippy_lints/src/types/borrowed_box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -20,7 +20,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, lt: &Lifetime, m\n                 if let QPath::Resolved(None, path) = *qpath;\n                 if let [ref bx] = *path.segments;\n                 if let Some(params) = bx.args;\n-                if !params.parenthesized;\n+                if params.parenthesized == hir::GenericArgsParentheses::No;\n                 if let Some(inner) = params.args.iter().find_map(|arg| match arg {\n                     GenericArg::Type(ty) => Some(ty),\n                     _ => None,"}, {"sha": "a30748db88fc94cce03a884e1dff2e43821dcd98", "filename": "clippy_lints/src/types/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Ftypes%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Ftypes%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Futils.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,14 +1,14 @@\n use clippy_utils::last_path_segment;\n use if_chain::if_chain;\n-use rustc_hir::{GenericArg, QPath, TyKind};\n+use rustc_hir::{GenericArg, GenericArgsParentheses, QPath, TyKind};\n use rustc_lint::LateContext;\n use rustc_span::source_map::Span;\n \n pub(super) fn match_borrows_parameter(_cx: &LateContext<'_>, qpath: &QPath<'_>) -> Option<Span> {\n     let last = last_path_segment(qpath);\n     if_chain! {\n         if let Some(params) = last.args;\n-        if !params.parenthesized;\n+        if params.parenthesized == GenericArgsParentheses::No;\n         if let Some(ty) = params.args.iter().find_map(|arg| match arg {\n             GenericArg::Type(ty) => Some(ty),\n             _ => None,"}, {"sha": "cc7c2b039f2d725b50741526d2d1168d6f90ea07", "filename": "clippy_lints/src/unit_types/let_unit_value.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::get_parent_node;\n-use clippy_utils::source::snippet_with_macro_callsite;\n+use clippy_utils::source::snippet_with_context;\n use clippy_utils::visitors::{for_each_local_assignment, for_each_value_source};\n use core::ops::ControlFlow;\n use rustc_errors::Applicability;\n@@ -52,12 +52,13 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, local: &'tcx Local<'_>) {\n                 \"this let-binding has unit value\",\n                 |diag| {\n                     if let Some(expr) = &local.init {\n-                        let snip = snippet_with_macro_callsite(cx, expr.span, \"()\");\n+                        let mut app = Applicability::MachineApplicable;\n+                        let snip = snippet_with_context(cx, expr.span, local.span.ctxt(), \"()\", &mut app).0;\n                         diag.span_suggestion(\n                             local.span,\n                             \"omit the `let` binding\",\n                             format!(\"{snip};\"),\n-                            Applicability::MachineApplicable, // snippet\n+                            app,\n                         );\n                     }\n                 },"}, {"sha": "af0b4b1592f4cbf8faccda4a4c2f86a8edf9600a", "filename": "clippy_lints/src/unnecessary_struct_initialization.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Funnecessary_struct_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Funnecessary_struct_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_struct_initialization.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -0,0 +1,84 @@\n+use clippy_utils::{diagnostics::span_lint_and_sugg, get_parent_expr, path_to_local, source::snippet, ty::is_copy};\n+use rustc_hir::{BindingAnnotation, Expr, ExprKind, Node, PatKind, UnOp};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for initialization of a `struct` by copying a base without setting\n+    /// any field.\n+    ///\n+    /// ### Why is this bad?\n+    /// Readibility suffers from unnecessary struct building.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// struct S { s: String }\n+    ///\n+    /// let a = S { s: String::from(\"Hello, world!\") };\n+    /// let b = S { ..a };\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// struct S { s: String }\n+    ///\n+    /// let a = S { s: String::from(\"Hello, world!\") };\n+    /// let b = a;\n+    /// ```\n+    #[clippy::version = \"1.70.0\"]\n+    pub UNNECESSARY_STRUCT_INITIALIZATION,\n+    complexity,\n+    \"struct built from a base that can be written mode concisely\"\n+}\n+declare_lint_pass!(UnnecessaryStruct => [UNNECESSARY_STRUCT_INITIALIZATION]);\n+\n+impl LateLintPass<'_> for UnnecessaryStruct {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        if let ExprKind::Struct(_, &[], Some(base)) = expr.kind {\n+            if let Some(parent) = get_parent_expr(cx, expr) &&\n+                let parent_ty = cx.typeck_results().expr_ty_adjusted(parent) &&\n+                parent_ty.is_any_ptr()\n+            {\n+                if is_copy(cx, cx.typeck_results().expr_ty(expr)) && path_to_local(base).is_some() {\n+                    // When the type implements `Copy`, a reference to the new struct works on the\n+                    // copy. Using the original would borrow it.\n+                    return;\n+                }\n+\n+                if parent_ty.is_mutable_ptr() && !is_mutable(cx, base) {\n+                    // The original can be used in a mutable reference context only if it is mutable.\n+                    return;\n+                }\n+            }\n+\n+            // TODO: do not propose to replace *XX if XX is not Copy\n+            if let ExprKind::Unary(UnOp::Deref, target) = base.kind &&\n+                matches!(target.kind, ExprKind::Path(..)) &&\n+                !is_copy(cx, cx.typeck_results().expr_ty(expr))\n+            {\n+                // `*base` cannot be used instead of the struct in the general case if it is not Copy.\n+                return;\n+            }\n+\n+            span_lint_and_sugg(\n+                cx,\n+                UNNECESSARY_STRUCT_INITIALIZATION,\n+                expr.span,\n+                \"unnecessary struct building\",\n+                \"replace with\",\n+                snippet(cx, base.span, \"..\").into_owned(),\n+                rustc_errors::Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}\n+\n+fn is_mutable(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    if let Some(hir_id) = path_to_local(expr) &&\n+        let Node::Pat(pat) = cx.tcx.hir().get(hir_id)\n+    {\n+        matches!(pat.kind, PatKind::Binding(BindingAnnotation::MUT, ..))\n+    } else {\n+        true\n+    }\n+}"}, {"sha": "7dfb0956077e4e7b6b0152263023f48cf2eef3fd", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::{\n     def::{CtorOf, DefKind, Res},\n     def_id::LocalDefId,\n     intravisit::{walk_inf, walk_ty, Visitor},\n-    Expr, ExprKind, FnRetTy, FnSig, GenericArg, GenericParam, GenericParamKind, HirId, Impl, ImplItemKind, Item,\n+    Expr, ExprKind, FnRetTy, FnSig, GenericArg, GenericArgsParentheses, GenericParam, GenericParamKind, HirId, Impl, ImplItemKind, Item,\n     ItemKind, Pat, PatKind, Path, QPath, Ty, TyKind,\n };\n use rustc_hir_analysis::hir_ty_to_ty;\n@@ -100,7 +100,8 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             if let TyKind::Path(QPath::Resolved(_, item_path)) = self_ty.kind;\n             let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;\n             if parameters.as_ref().map_or(true, |params| {\n-                !params.parenthesized && !params.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)))\n+                params.parenthesized  == GenericArgsParentheses::No\n+                    && !params.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)))\n             });\n             if !item.span.from_expansion();\n             if !is_from_proc_macro(cx, item); // expensive, should be last check"}, {"sha": "ddbe6b2c7904d433fef6f831ae3a1e5e89e461aa", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n-use clippy_utils::source::{snippet, snippet_with_macro_callsite};\n+use clippy_utils::source::{snippet, snippet_with_context};\n use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::{is_copy, is_type_diagnostic_item, same_type_and_consts};\n use clippy_utils::{get_parent_expr, is_trait_method, match_def_path, path_to_local, paths};\n@@ -68,15 +68,16 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                     let a = cx.typeck_results().expr_ty(e);\n                     let b = cx.typeck_results().expr_ty(recv);\n                     if same_type_and_consts(a, b) {\n-                        let sugg = snippet_with_macro_callsite(cx, recv.span, \"<expr>\").to_string();\n+                        let mut app = Applicability::MachineApplicable;\n+                        let sugg = snippet_with_context(cx, recv.span, e.span.ctxt(), \"<expr>\", &mut app).0;\n                         span_lint_and_sugg(\n                             cx,\n                             USELESS_CONVERSION,\n                             e.span,\n                             &format!(\"useless conversion to the same type: `{b}`\"),\n                             \"consider removing `.into()`\",\n-                            sugg,\n-                            Applicability::MachineApplicable, // snippet\n+                            sugg.into_owned(),\n+                            app,\n                         );\n                     }\n                 }\n@@ -165,7 +166,8 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                             if same_type_and_consts(a, b);\n \n                             then {\n-                                let sugg = Sugg::hir_with_macro_callsite(cx, arg, \"<expr>\").maybe_par();\n+                                let mut app = Applicability::MachineApplicable;\n+                                let sugg = Sugg::hir_with_context(cx, arg, e.span.ctxt(), \"<expr>\", &mut app).maybe_par();\n                                 let sugg_msg =\n                                     format!(\"consider removing `{}()`\", snippet(cx, path.span, \"From::from\"));\n                                 span_lint_and_sugg(\n@@ -175,7 +177,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                                     &format!(\"useless conversion to the same type: `{b}`\"),\n                                     &sugg_msg,\n                                     sugg.to_string(),\n-                                    Applicability::MachineApplicable, // snippet\n+                                    app,\n                                 );\n                             }\n                         }"}, {"sha": "8ba252425a3d0a5dcb49e0df076e2790617b98a0", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -437,7 +437,7 @@ define_Conf! {\n     ///\n     /// The maximum size of the `Err`-variant in a `Result` returned from a function\n     (large_error_threshold: u64 = 128),\n-    /// Lint: MUTABLE_KEY_TYPE.\n+    /// Lint: MUTABLE_KEY_TYPE, IFS_SAME_COND.\n     ///\n     /// A list of paths to types that should be treated like `Arc`, i.e. ignored but\n     /// for the generic parameters for determining interior mutability"}, {"sha": "36f910c983f64d7ebdccb9e41d27c479c4793ba5", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -158,12 +158,10 @@ impl LateLintPass<'_> for WildcardImports {\n                 let mut imports = used_imports.items().map(ToString::to_string).into_sorted_stable_ord(false);\n                 let imports_string = if imports.len() == 1 {\n                     imports.pop().unwrap()\n+                } else if braced_glob {\n+                    imports.join(\", \")\n                 } else {\n-                    if braced_glob {\n-                        imports.join(\", \")\n-                    } else {\n-                        format!(\"{{{}}}\", imports.join(\", \"))\n-                    }\n+                    format!(\"{{{}}}\", imports.join(\", \"))\n                 };\n \n                 let sugg = if braced_glob {"}, {"sha": "b4ad42a50279f1e39497af6eb7c27430c0c57024", "filename": "clippy_utils/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fattrs.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -146,7 +146,7 @@ pub fn get_unique_attr<'a>(\n /// Return true if the attributes contain any of `proc_macro`,\n /// `proc_macro_derive` or `proc_macro_attribute`, false otherwise\n pub fn is_proc_macro(attrs: &[ast::Attribute]) -> bool {\n-    attrs.iter().any(|attr| attr.is_proc_macro_attr())\n+    attrs.iter().any(rustc_ast::Attribute::is_proc_macro_attr)\n }\n \n /// Return true if the attributes contain `#[doc(hidden)]`"}, {"sha": "28c857170613593887ec0e72f21fe7214c6bd306", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -199,10 +199,9 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                 },\n \n                 // Memory allocation, custom operator, loop, or call to an unknown function\n-                ExprKind::Unary(..)\n-                | ExprKind::Binary(..)\n-                | ExprKind::Loop(..)\n-                | ExprKind::Call(..) => self.eagerness = Lazy,\n+                ExprKind::Unary(..) | ExprKind::Binary(..) | ExprKind::Loop(..) | ExprKind::Call(..) => {\n+                    self.eagerness = Lazy;\n+                },\n \n                 ExprKind::ConstBlock(_)\n                 | ExprKind::Array(_)"}, {"sha": "3ee7147828bd5f9010fc3056d92fc39a32987f4f", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -401,14 +401,9 @@ impl HirEqInterExpr<'_, '_, '_> {\n     }\n \n     fn eq_path_parameters(&mut self, left: &GenericArgs<'_>, right: &GenericArgs<'_>) -> bool {\n-        if !(left.parenthesized || right.parenthesized) {\n+        if left.parenthesized == right.parenthesized {\n             over(left.args, right.args, |l, r| self.eq_generic_arg(l, r)) // FIXME(flip1995): may not work\n                 && over(left.bindings, right.bindings, |l, r| self.eq_type_binding(l, r))\n-        } else if left.parenthesized && right.parenthesized {\n-            over(left.inputs(), right.inputs(), |l, r| self.eq_ty(l, r))\n-                && both(&Some(&left.bindings[0].ty()), &Some(&right.bindings[0].ty()), |l, r| {\n-                    self.eq_ty(l, r)\n-                })\n         } else {\n             false\n         }"}, {"sha": "619aa9f4bf6fab48be3119b28ff5a269b74cab53", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -3,7 +3,6 @@\n #![feature(let_chains)]\n #![feature(lint_reasons)]\n #![feature(never_type)]\n-#![feature(once_cell)]\n #![feature(rustc_private)]\n #![recursion_limit = \"512\"]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n@@ -2106,7 +2105,6 @@ pub fn fn_has_unsatisfiable_preds(cx: &LateContext<'_>, did: DefId) -> bool {\n     traits::impossible_predicates(\n         cx.tcx,\n         traits::elaborate_predicates(cx.tcx, predicates)\n-            .map(|o| o.predicate)\n             .collect::<Vec<_>>(),\n     )\n }"}, {"sha": "e05de2dc99c05ad808cf2958a374524de2d6462d", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -19,6 +19,7 @@ macro_rules! msrv_aliases {\n \n // names may refer to stabilized feature flags or library items\n msrv_aliases! {\n+    1,68,0 { PATH_MAIN_SEPARATOR_STR }\n     1,65,0 { LET_ELSE }\n     1,62,0 { BOOL_THEN_SOME, DEFAULT_ENUM_ATTRIBUTE }\n     1,58,0 { FORMAT_ARGS_CAPTURE, PATTERN_TRAIT_CHAR_ARRAY }"}, {"sha": "c919575bfe906229a5f3754dd1de4fb35718708e", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -67,6 +67,7 @@ pub const PARKING_LOT_MUTEX_GUARD: [&str; 3] = [\"lock_api\", \"mutex\", \"MutexGuard\n pub const PARKING_LOT_RWLOCK_READ_GUARD: [&str; 3] = [\"lock_api\", \"rwlock\", \"RwLockReadGuard\"];\n pub const PARKING_LOT_RWLOCK_WRITE_GUARD: [&str; 3] = [\"lock_api\", \"rwlock\", \"RwLockWriteGuard\"];\n pub const PATH_BUF_AS_PATH: [&str; 4] = [\"std\", \"path\", \"PathBuf\", \"as_path\"];\n+pub const PATH_MAIN_SEPARATOR: [&str; 3] = [\"std\", \"path\", \"MAIN_SEPARATOR\"];\n pub const PATH_TO_PATH_BUF: [&str; 4] = [\"std\", \"path\", \"Path\", \"to_path_buf\"];\n pub const PEEKABLE: [&str; 5] = [\"core\", \"iter\", \"adapters\", \"peekable\", \"Peekable\"];\n pub const PERMISSIONS: [&str; 3] = [\"std\", \"fs\", \"Permissions\"];"}, {"sha": "d66640ba0b7a74f00ca309c5240a4de47ab51ac1", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -176,9 +176,10 @@ fn check_rvalue<'tcx>(\n             // FIXME(dyn-star)\n             unimplemented!()\n         },\n-        Rvalue::Cast(CastKind::Transmute, _, _) => {\n-            Err((span, \"transmute can attempt to turn pointers into integers, so is unstable in const fn\".into()))\n-        },\n+        Rvalue::Cast(CastKind::Transmute, _, _) => Err((\n+            span,\n+            \"transmute can attempt to turn pointers into integers, so is unstable in const fn\".into(),\n+        )),\n         // binops are fine on integers\n         Rvalue::BinaryOp(_, box (lhs, rhs)) | Rvalue::CheckedBinaryOp(_, box (lhs, rhs)) => {\n             check_operand(tcx, lhs, span, body)?;"}, {"sha": "62fa37660fad5b0f241bfe6eeab1a4f4099a0943", "filename": "clippy_utils/src/source.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsource.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -12,24 +12,21 @@ use rustc_span::{BytePos, Pos, Span, SpanData, SyntaxContext, DUMMY_SP};\n use std::borrow::Cow;\n \n /// Like `snippet_block`, but add braces if the expr is not an `ExprKind::Block`.\n-/// Also takes an `Option<String>` which can be put inside the braces.\n-pub fn expr_block<'a, T: LintContext>(\n+pub fn expr_block<T: LintContext>(\n     cx: &T,\n     expr: &Expr<'_>,\n-    option: Option<String>,\n-    default: &'a str,\n+    outer: SyntaxContext,\n+    default: &str,\n     indent_relative_to: Option<Span>,\n-) -> Cow<'a, str> {\n-    let code = snippet_block(cx, expr.span, default, indent_relative_to);\n-    let string = option.unwrap_or_default();\n-    if expr.span.from_expansion() {\n-        Cow::Owned(format!(\"{{ {} }}\", snippet_with_macro_callsite(cx, expr.span, default)))\n+    app: &mut Applicability,\n+) -> String {\n+    let (code, from_macro) = snippet_block_with_context(cx, expr.span, outer, default, indent_relative_to, app);\n+    if from_macro {\n+        format!(\"{{ {code} }}\")\n     } else if let ExprKind::Block(_, _) = expr.kind {\n-        Cow::Owned(format!(\"{code}{string}\"))\n-    } else if string.is_empty() {\n-        Cow::Owned(format!(\"{{ {code} }}\"))\n+        format!(\"{code}\")\n     } else {\n-        Cow::Owned(format!(\"{{\\n{code};\\n{string}\\n}}\"))\n+        format!(\"{{ {code} }}\")\n     }\n }\n \n@@ -229,12 +226,6 @@ fn snippet_with_applicability_sess<'a>(\n     )\n }\n \n-/// Same as `snippet`, but should only be used when it's clear that the input span is\n-/// not a macro argument.\n-pub fn snippet_with_macro_callsite<'a, T: LintContext>(cx: &T, span: Span, default: &'a str) -> Cow<'a, str> {\n-    snippet(cx, span.source_callsite(), default)\n-}\n-\n /// Converts a span to a code snippet. Returns `None` if not available.\n pub fn snippet_opt(cx: &impl LintContext, span: Span) -> Option<String> {\n     snippet_opt_sess(cx.sess(), span)\n@@ -303,6 +294,19 @@ pub fn snippet_block_with_applicability<'a>(\n     reindent_multiline(snip, true, indent)\n }\n \n+pub fn snippet_block_with_context<'a>(\n+    cx: &impl LintContext,\n+    span: Span,\n+    outer: SyntaxContext,\n+    default: &'a str,\n+    indent_relative_to: Option<Span>,\n+    app: &mut Applicability,\n+) -> (Cow<'a, str>, bool) {\n+    let (snip, from_macro) = snippet_with_context(cx, span, outer, default, app);\n+    let indent = indent_relative_to.and_then(|s| indent_of(cx, s));\n+    (reindent_multiline(snip, true, indent), from_macro)\n+}\n+\n /// Same as `snippet_with_applicability`, but first walks the span up to the given context. This\n /// will result in the macro call, rather then the expansion, if the span is from a child context.\n /// If the span is not from a child context, it will be used directly instead."}, {"sha": "a5a4a921d94ec7565626dfbde1135ddf339e5dc9", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,9 +1,7 @@\n //! Contains utility functions to generate suggestions.\n #![deny(clippy::missing_docs_in_private_items)]\n \n-use crate::source::{\n-    snippet, snippet_opt, snippet_with_applicability, snippet_with_context, snippet_with_macro_callsite,\n-};\n+use crate::source::{snippet, snippet_opt, snippet_with_applicability, snippet_with_context};\n use crate::ty::expr_sig;\n use crate::{get_parent_expr_for_hir, higher};\n use rustc_ast::util::parser::AssocOp;\n@@ -89,12 +87,6 @@ impl<'a> Sugg<'a> {\n         })\n     }\n \n-    /// Same as `hir`, but will use the pre expansion span if the `expr` was in a macro.\n-    pub fn hir_with_macro_callsite(cx: &LateContext<'_>, expr: &hir::Expr<'_>, default: &'a str) -> Self {\n-        let get_snippet = |span| snippet_with_macro_callsite(cx, span, default);\n-        Self::hir_from_snippet(expr, get_snippet)\n-    }\n-\n     /// Same as `hir`, but first walks the span up to the given context. This will result in the\n     /// macro call, rather then the expansion, if the span is from a child context. If the span is\n     /// not from a child context, it will be used directly instead."}, {"sha": "0b47234647fb6120240578d2ec43c60b81ce07d7", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 53, "deletions": 10, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -16,9 +16,9 @@ use rustc_infer::infer::{\n use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::{\n-    self, AdtDef, AliasTy, AssocKind, Binder, BoundRegion, FnSig, IntTy, List, ParamEnv, Predicate, PredicateKind,\n-    Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitableExt, TypeVisitor,\n-    UintTy, VariantDef, VariantDiscr,\n+    self, layout::ValidityRequirement, AdtDef, AliasTy, AssocKind, Binder, BoundRegion, FnSig, IntTy, List, ParamEnv,\n+    Predicate, PredicateKind, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable,\n+    TypeVisitableExt, TypeVisitor, UintTy, VariantDef, VariantDiscr,\n };\n use rustc_middle::ty::{GenericArg, GenericArgKind};\n use rustc_span::symbol::Ident;\n@@ -538,13 +538,12 @@ pub fn same_type_and_consts<'tcx>(a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n }\n \n /// Checks if a given type looks safe to be uninitialized.\n-pub fn is_uninit_value_valid_for_ty(cx: &LateContext<'_>, ty: Ty<'_>) -> bool {\n-    match *ty.kind() {\n-        ty::Array(component, _) => is_uninit_value_valid_for_ty(cx, component),\n-        ty::Tuple(types) => types.iter().all(|ty| is_uninit_value_valid_for_ty(cx, ty)),\n-        ty::Adt(adt, _) => cx.tcx.lang_items().maybe_uninit() == Some(adt.did()),\n-        _ => false,\n-    }\n+pub fn is_uninit_value_valid_for_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n+    cx.tcx\n+        .check_validity_requirement((ValidityRequirement::Uninit, cx.param_env.and(ty)))\n+        // For types containing generic parameters we cannot get a layout to check.\n+        // Therefore, we are conservative and assume that they don't allow uninit.\n+        .unwrap_or(false)\n }\n \n /// Gets an iterator over all predicates which apply to the given item.\n@@ -1121,3 +1120,47 @@ pub fn make_normalized_projection<'tcx>(\n     }\n     helper(tcx, param_env, make_projection(tcx, container_id, assoc_ty, substs)?)\n }\n+\n+/// Check if given type has inner mutability such as [`std::cell::Cell`] or [`std::cell::RefCell`]\n+/// etc.\n+pub fn is_interior_mut_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n+    match *ty.kind() {\n+        ty::Ref(_, inner_ty, mutbl) => mutbl == Mutability::Mut || is_interior_mut_ty(cx, inner_ty),\n+        ty::Slice(inner_ty) => is_interior_mut_ty(cx, inner_ty),\n+        ty::Array(inner_ty, size) => {\n+            size.try_eval_target_usize(cx.tcx, cx.param_env)\n+                .map_or(true, |u| u != 0)\n+                && is_interior_mut_ty(cx, inner_ty)\n+        },\n+        ty::Tuple(fields) => fields.iter().any(|ty| is_interior_mut_ty(cx, ty)),\n+        ty::Adt(def, substs) => {\n+            // Special case for collections in `std` who's impl of `Hash` or `Ord` delegates to\n+            // that of their type parameters.  Note: we don't include `HashSet` and `HashMap`\n+            // because they have no impl for `Hash` or `Ord`.\n+            let def_id = def.did();\n+            let is_std_collection = [\n+                sym::Option,\n+                sym::Result,\n+                sym::LinkedList,\n+                sym::Vec,\n+                sym::VecDeque,\n+                sym::BTreeMap,\n+                sym::BTreeSet,\n+                sym::Rc,\n+                sym::Arc,\n+            ]\n+            .iter()\n+            .any(|diag_item| cx.tcx.is_diagnostic_item(*diag_item, def_id));\n+            let is_box = Some(def_id) == cx.tcx.lang_items().owned_box();\n+            if is_std_collection || is_box {\n+                // The type is mutable if any of its type parameters are\n+                substs.types().any(|ty| is_interior_mut_ty(cx, ty))\n+            } else {\n+                !ty.has_escaping_bound_vars()\n+                    && cx.tcx.layout_of(cx.param_env.and(ty)).is_ok()\n+                    && !ty.is_freeze(cx.tcx, cx.param_env)\n+            }\n+        },\n+        _ => false,\n+    }\n+}"}, {"sha": "1dc19bac98444341636615ca66ee48be34fbe25e", "filename": "clippy_utils/src/visitors.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/clippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fvisitors.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -599,9 +599,7 @@ pub fn for_each_unconsumed_temporary<'tcx, B>(\n             | ExprKind::Let(&Let { init: e, .. }) => {\n                 helper(typeck, false, e, f)?;\n             },\n-            ExprKind::Block(&Block { expr: Some(e), .. }, _)\n-            | ExprKind::Cast(e, _)\n-            | ExprKind::Unary(_, e) => {\n+            ExprKind::Block(&Block { expr: Some(e), .. }, _) | ExprKind::Cast(e, _) | ExprKind::Unary(_, e) => {\n                 helper(typeck, true, e, f)?;\n             },\n             ExprKind::Call(callee, args) => {"}, {"sha": "0b2458ea00708b3745e62b4fe560c26b70683469", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2023-03-10\"\n+channel = \"nightly-2023-03-24\"\n components = [\"cargo\", \"llvm-tools\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "9e0822404b6b8ed227c628d75609ee48418a825e", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,6 +1,6 @@\n #![feature(rustc_private)]\n #![feature(let_chains)]\n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n #![feature(lint_reasons)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n // warn on lints, that are included in `rust-lang/rust`s bootstrap"}, {"sha": "57890ff31737b5a95256b48f448a60774f0f3bc3", "filename": "tests/compile-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n #![feature(test)] // compiletest_rs requires this attribute\n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n #![feature(is_sorted)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![warn(rust_2018_idioms, unused_lifetimes)]"}, {"sha": "68a878e9a3d310058cc9fd8f473b470ed09eca6c", "filename": "tests/dogfood.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -3,7 +3,7 @@\n //!\n //! See [Eating your own dog food](https://en.wikipedia.org/wiki/Eating_your_own_dog_food) for context\n \n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n@@ -37,10 +37,10 @@ fn dogfood_clippy() {\n     }\n \n     assert!(\n-        !failed_packages.is_empty(),\n+        failed_packages.is_empty(),\n         \"Dogfood failed for packages `{}`\",\n         failed_packages.iter().format(\", \"),\n-    )\n+    );\n }\n \n #[test]"}, {"sha": "8feea800fdbe30b7d52d2173c9dcf6c9614b3ea7", "filename": "tests/lint_message_convention.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Flint_message_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Flint_message_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Flint_message_convention.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,4 +1,4 @@\n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![warn(rust_2018_idioms, unused_lifetimes)]\n "}, {"sha": "b4619e980f303e4a3ceccc32626226400fc1f3b6", "filename": "tests/ui-internal/custom_ice_message.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui-internal%2Fcustom_ice_message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui-internal%2Fcustom_ice_message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fcustom_ice_message.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -9,3 +9,4 @@ note: we would appreciate a bug report: https://github.com/rust-lang/rust-clippy\n \n note: Clippy version: foo\n \n+thread panicked while panicking. aborting."}, {"sha": "90a36ecd92022c69911f71162a5036ffc11c0492", "filename": "tests/ui-toml/ifs_same_cond/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui-toml%2Fifs_same_cond%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui-toml%2Fifs_same_cond%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fifs_same_cond%2Fclippy.toml?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -0,0 +1 @@\n+ignore-interior-mutability = [\"std::cell::Cell\"]"}, {"sha": "d623ac7e0200820de7ee1d5e62d02d91efaba023", "filename": "tests/ui-toml/ifs_same_cond/ifs_same_cond.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui-toml%2Fifs_same_cond%2Fifs_same_cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui-toml%2Fifs_same_cond%2Fifs_same_cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fifs_same_cond%2Fifs_same_cond.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -0,0 +1,18 @@\n+#![warn(clippy::ifs_same_cond)]\n+#![allow(clippy::if_same_then_else, clippy::comparison_chain)]\n+\n+fn main() {}\n+\n+fn issue10272() {\n+    use std::cell::Cell;\n+\n+    // Because the `ignore-interior-mutability` configuration\n+    // is set to ignore for `std::cell::Cell`, the following `get()` calls\n+    // should trigger warning\n+    let x = Cell::new(true);\n+    if x.get() {\n+    } else if !x.take() {\n+    } else if x.get() {\n+    } else {\n+    }\n+}"}, {"sha": "2841f62bc94ab1e10914223a7d7bfdf0533c4b17", "filename": "tests/ui-toml/ifs_same_cond/ifs_same_cond.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui-toml%2Fifs_same_cond%2Fifs_same_cond.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui-toml%2Fifs_same_cond%2Fifs_same_cond.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fifs_same_cond%2Fifs_same_cond.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -0,0 +1,15 @@\n+error: this `if` has the same condition as a previous `if`\n+  --> $DIR/ifs_same_cond.rs:15:15\n+   |\n+LL |     } else if x.get() {\n+   |               ^^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/ifs_same_cond.rs:13:8\n+   |\n+LL |     if x.get() {\n+   |        ^^^^^^^\n+   = note: `-D clippy::ifs-same-cond` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "b8dd0619e6d00f5f199d1acb0775165f7f0ce340", "filename": "tests/ui/allow_attributes.fixed", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fallow_attributes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fallow_attributes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fallow_attributes.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -0,0 +1,25 @@\n+// run-rustfix\n+#![allow(unused)]\n+#![warn(clippy::allow_attributes)]\n+#![feature(lint_reasons)]\n+\n+fn main() {}\n+\n+// Using clippy::needless_borrow just as a placeholder, it isn't relevant.\n+\n+// Should lint\n+#[expect(dead_code)]\n+struct T1;\n+\n+struct T2; // Should not lint\n+#[deny(clippy::needless_borrow)] // Should not lint\n+struct T3;\n+#[warn(clippy::needless_borrow)] // Should not lint\n+struct T4;\n+// `panic = \"unwind\"` should always be true\n+#[cfg_attr(panic = \"unwind\", expect(dead_code))]\n+struct CfgT;\n+\n+fn ignore_inner_attr() {\n+    #![allow(unused)] // Should not lint\n+}"}, {"sha": "295f560906a7853d216172797cb3530111eb3aad", "filename": "tests/ui/allow_attributes.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fallow_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fallow_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fallow_attributes.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -0,0 +1,25 @@\n+// run-rustfix\n+#![allow(unused)]\n+#![warn(clippy::allow_attributes)]\n+#![feature(lint_reasons)]\n+\n+fn main() {}\n+\n+// Using clippy::needless_borrow just as a placeholder, it isn't relevant.\n+\n+// Should lint\n+#[allow(dead_code)]\n+struct T1;\n+\n+struct T2; // Should not lint\n+#[deny(clippy::needless_borrow)] // Should not lint\n+struct T3;\n+#[warn(clippy::needless_borrow)] // Should not lint\n+struct T4;\n+// `panic = \"unwind\"` should always be true\n+#[cfg_attr(panic = \"unwind\", allow(dead_code))]\n+struct CfgT;\n+\n+fn ignore_inner_attr() {\n+    #![allow(unused)] // Should not lint\n+}"}, {"sha": "681837e9ed770aea6f3ace0ee5e88c02b72e9f28", "filename": "tests/ui/allow_attributes.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fallow_attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fallow_attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fallow_attributes.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -0,0 +1,16 @@\n+error: #[allow] attribute found\n+  --> $DIR/allow_attributes.rs:11:3\n+   |\n+LL | #[allow(dead_code)]\n+   |   ^^^^^ help: replace it with: `expect`\n+   |\n+   = note: `-D clippy::allow-attributes` implied by `-D warnings`\n+\n+error: #[allow] attribute found\n+  --> $DIR/allow_attributes.rs:20:30\n+   |\n+LL | #[cfg_attr(panic = \"unwind\", allow(dead_code))]\n+   |                              ^^^^^ help: replace it with: `expect`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a4bf7fe18d5f46786a5b1f49bfcede671528bc25", "filename": "tests/ui/almost_complete_range.fixed", "status": "modified", "additions": 17, "deletions": 32, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Falmost_complete_range.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Falmost_complete_range.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_complete_range.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n // edition:2018\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![feature(exclusive_range_pattern)]\n #![feature(stmt_expr_attributes)]\n@@ -9,33 +9,10 @@\n #![allow(clippy::needless_parens_on_range_literals)]\n #![allow(clippy::double_parens)]\n \n-#[macro_use]\n-extern crate macro_rules;\n-\n-macro_rules! a {\n-    () => {\n-        'a'\n-    };\n-}\n-macro_rules! A {\n-    () => {\n-        'A'\n-    };\n-}\n-macro_rules! zero {\n-    () => {\n-        '0'\n-    };\n-}\n-\n-macro_rules! b {\n-    () => {\n-        let _ = 'a'..='z';\n-        let _ = 'A'..='Z';\n-        let _ = '0'..='9';\n-    };\n-}\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n+#[inline_macros]\n fn main() {\n     #[rustfmt::skip]\n     {\n@@ -56,9 +33,9 @@ fn main() {\n     let _ = b'B'..b'Z';\n     let _ = b'1'..b'9';\n \n-    let _ = a!()..='z';\n-    let _ = A!()..='Z';\n-    let _ = zero!()..='9';\n+    let _ = inline!('a')..='z';\n+    let _ = inline!('A')..='Z';\n+    let _ = inline!('0')..='9';\n \n     let _ = match 0u8 {\n         b'a'..=b'z' if true => 1,\n@@ -80,8 +57,16 @@ fn main() {\n         _ => 7,\n     };\n \n-    almost_complete_range!();\n-    b!();\n+    external!(\n+        let _ = 'a'..'z';\n+        let _ = 'A'..'Z';\n+        let _ = '0'..'9';\n+    );\n+    inline!(\n+        let _ = 'a'..='z';\n+        let _ = 'A'..='Z';\n+        let _ = '0'..='9';\n+    );\n }\n \n #[clippy::msrv = \"1.25\"]"}, {"sha": "8237c3a13611a36b1737dd5bd49478be8fd42bc3", "filename": "tests/ui/almost_complete_range.rs", "status": "modified", "additions": 17, "deletions": 32, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Falmost_complete_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Falmost_complete_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_complete_range.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n // edition:2018\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![feature(exclusive_range_pattern)]\n #![feature(stmt_expr_attributes)]\n@@ -9,33 +9,10 @@\n #![allow(clippy::needless_parens_on_range_literals)]\n #![allow(clippy::double_parens)]\n \n-#[macro_use]\n-extern crate macro_rules;\n-\n-macro_rules! a {\n-    () => {\n-        'a'\n-    };\n-}\n-macro_rules! A {\n-    () => {\n-        'A'\n-    };\n-}\n-macro_rules! zero {\n-    () => {\n-        '0'\n-    };\n-}\n-\n-macro_rules! b {\n-    () => {\n-        let _ = 'a'..'z';\n-        let _ = 'A'..'Z';\n-        let _ = '0'..'9';\n-    };\n-}\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n+#[inline_macros]\n fn main() {\n     #[rustfmt::skip]\n     {\n@@ -56,9 +33,9 @@ fn main() {\n     let _ = b'B'..b'Z';\n     let _ = b'1'..b'9';\n \n-    let _ = a!()..'z';\n-    let _ = A!()..'Z';\n-    let _ = zero!()..'9';\n+    let _ = inline!('a')..'z';\n+    let _ = inline!('A')..'Z';\n+    let _ = inline!('0')..'9';\n \n     let _ = match 0u8 {\n         b'a'..b'z' if true => 1,\n@@ -80,8 +57,16 @@ fn main() {\n         _ => 7,\n     };\n \n-    almost_complete_range!();\n-    b!();\n+    external!(\n+        let _ = 'a'..'z';\n+        let _ = 'A'..'Z';\n+        let _ = '0'..'9';\n+    );\n+    inline!(\n+        let _ = 'a'..'z';\n+        let _ = 'A'..'Z';\n+        let _ = '0'..'9';\n+    );\n }\n \n #[clippy::msrv = \"1.25\"]"}, {"sha": "34521c13ab3ed4bfb0f34e2dff02f756a1027244", "filename": "tests/ui/almost_complete_range.stderr", "status": "modified", "additions": 42, "deletions": 51, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Falmost_complete_range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Falmost_complete_range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_complete_range.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:42:17\n+  --> $DIR/almost_complete_range.rs:19:17\n    |\n LL |         let _ = ('a') ..'z';\n    |                 ^^^^^^--^^^\n@@ -9,222 +9,213 @@ LL |         let _ = ('a') ..'z';\n    = note: `-D clippy::almost-complete-range` implied by `-D warnings`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:43:17\n+  --> $DIR/almost_complete_range.rs:20:17\n    |\n LL |         let _ = 'A' .. ('Z');\n    |                 ^^^^--^^^^^^\n    |                     |\n    |                     help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:44:17\n+  --> $DIR/almost_complete_range.rs:21:17\n    |\n LL |         let _ = ((('0'))) .. ('9');\n    |                 ^^^^^^^^^^--^^^^^^\n    |                           |\n    |                           help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:51:13\n+  --> $DIR/almost_complete_range.rs:28:13\n    |\n LL |     let _ = (b'a')..(b'z');\n    |             ^^^^^^--^^^^^^\n    |                   |\n    |                   help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:52:13\n+  --> $DIR/almost_complete_range.rs:29:13\n    |\n LL |     let _ = b'A'..b'Z';\n    |             ^^^^--^^^^\n    |                 |\n    |                 help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:53:13\n+  --> $DIR/almost_complete_range.rs:30:13\n    |\n LL |     let _ = b'0'..b'9';\n    |             ^^^^--^^^^\n    |                 |\n    |                 help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:59:13\n+  --> $DIR/almost_complete_range.rs:36:13\n    |\n-LL |     let _ = a!()..'z';\n-   |             ^^^^--^^^\n-   |                 |\n-   |                 help: use an inclusive range: `..=`\n+LL |     let _ = inline!('a')..'z';\n+   |             ^^^^^^^^^^^^--^^^\n+   |                         |\n+   |                         help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:60:13\n+  --> $DIR/almost_complete_range.rs:37:13\n    |\n-LL |     let _ = A!()..'Z';\n-   |             ^^^^--^^^\n-   |                 |\n-   |                 help: use an inclusive range: `..=`\n+LL |     let _ = inline!('A')..'Z';\n+   |             ^^^^^^^^^^^^--^^^\n+   |                         |\n+   |                         help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:61:13\n+  --> $DIR/almost_complete_range.rs:38:13\n    |\n-LL |     let _ = zero!()..'9';\n-   |             ^^^^^^^--^^^\n-   |                    |\n-   |                    help: use an inclusive range: `..=`\n+LL |     let _ = inline!('0')..'9';\n+   |             ^^^^^^^^^^^^--^^^\n+   |                         |\n+   |                         help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:64:9\n+  --> $DIR/almost_complete_range.rs:41:9\n    |\n LL |         b'a'..b'z' if true => 1,\n    |         ^^^^--^^^^\n    |             |\n    |             help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:65:9\n+  --> $DIR/almost_complete_range.rs:42:9\n    |\n LL |         b'A'..b'Z' if true => 2,\n    |         ^^^^--^^^^\n    |             |\n    |             help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:66:9\n+  --> $DIR/almost_complete_range.rs:43:9\n    |\n LL |         b'0'..b'9' if true => 3,\n    |         ^^^^--^^^^\n    |             |\n    |             help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:74:9\n+  --> $DIR/almost_complete_range.rs:51:9\n    |\n LL |         'a'..'z' if true => 1,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:75:9\n+  --> $DIR/almost_complete_range.rs:52:9\n    |\n LL |         'A'..'Z' if true => 2,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:76:9\n+  --> $DIR/almost_complete_range.rs:53:9\n    |\n LL |         '0'..'9' if true => 3,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:33:17\n+  --> $DIR/almost_complete_range.rs:66:17\n    |\n LL |         let _ = 'a'..'z';\n    |                 ^^^--^^^\n    |                    |\n    |                    help: use an inclusive range: `..=`\n-...\n-LL |     b!();\n-   |     ---- in this macro invocation\n    |\n-   = note: this error originates in the macro `b` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_main` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:34:17\n+  --> $DIR/almost_complete_range.rs:67:17\n    |\n LL |         let _ = 'A'..'Z';\n    |                 ^^^--^^^\n    |                    |\n    |                    help: use an inclusive range: `..=`\n-...\n-LL |     b!();\n-   |     ---- in this macro invocation\n    |\n-   = note: this error originates in the macro `b` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_main` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:35:17\n+  --> $DIR/almost_complete_range.rs:68:17\n    |\n LL |         let _ = '0'..'9';\n    |                 ^^^--^^^\n    |                    |\n    |                    help: use an inclusive range: `..=`\n-...\n-LL |     b!();\n-   |     ---- in this macro invocation\n    |\n-   = note: this error originates in the macro `b` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_main` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:90:9\n+  --> $DIR/almost_complete_range.rs:75:9\n    |\n LL |         'a'..'z' => 1,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `...`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:91:9\n+  --> $DIR/almost_complete_range.rs:76:9\n    |\n LL |         'A'..'Z' => 2,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `...`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:92:9\n+  --> $DIR/almost_complete_range.rs:77:9\n    |\n LL |         '0'..'9' => 3,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `...`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:99:13\n+  --> $DIR/almost_complete_range.rs:84:13\n    |\n LL |     let _ = 'a'..'z';\n    |             ^^^--^^^\n    |                |\n    |                help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:100:13\n+  --> $DIR/almost_complete_range.rs:85:13\n    |\n LL |     let _ = 'A'..'Z';\n    |             ^^^--^^^\n    |                |\n    |                help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:101:13\n+  --> $DIR/almost_complete_range.rs:86:13\n    |\n LL |     let _ = '0'..'9';\n    |             ^^^--^^^\n    |                |\n    |                help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:103:9\n+  --> $DIR/almost_complete_range.rs:88:9\n    |\n LL |         'a'..'z' => 1,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:104:9\n+  --> $DIR/almost_complete_range.rs:89:9\n    |\n LL |         'A'..'Z' => 1,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `..=`\n \n error: almost complete ascii range\n-  --> $DIR/almost_complete_range.rs:105:9\n+  --> $DIR/almost_complete_range.rs:90:9\n    |\n LL |         '0'..'9' => 3,\n    |         ^^^--^^^"}, {"sha": "c50d4088b5ebb0d1414d31b275d52bc70ae11981", "filename": "tests/ui/as_conversions.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fas_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fas_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fas_conversions.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,20 +1,15 @@\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::as_conversions)]\n #![allow(clippy::borrow_as_ptr)]\n \n-#[macro_use]\n-extern crate macro_rules;\n-\n-fn with_external_macro() {\n-    as_conv_with_arg!(0u32 as u64);\n-    as_conv!();\n-}\n+extern crate proc_macros;\n+use proc_macros::external;\n \n fn main() {\n     let i = 0u32 as u64;\n \n     let j = &i as *const u64 as *mut u64;\n \n-    with_external_macro();\n+    external!(0u32 as u64);\n }"}, {"sha": "54037a6499787cc63ad371ed7cb39574fa2c66d4", "filename": "tests/ui/as_conversions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fas_conversions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fas_conversions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fas_conversions.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n error: using a potentially dangerous silent `as` conversion\n-  --> $DIR/as_conversions.rs:15:13\n+  --> $DIR/as_conversions.rs:10:13\n    |\n LL |     let i = 0u32 as u64;\n    |             ^^^^^^^^^^^\n@@ -8,15 +8,15 @@ LL |     let i = 0u32 as u64;\n    = note: `-D clippy::as-conversions` implied by `-D warnings`\n \n error: using a potentially dangerous silent `as` conversion\n-  --> $DIR/as_conversions.rs:17:13\n+  --> $DIR/as_conversions.rs:12:13\n    |\n LL |     let j = &i as *const u64 as *mut u64;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a safe wrapper for this conversion\n \n error: using a potentially dangerous silent `as` conversion\n-  --> $DIR/as_conversions.rs:17:13\n+  --> $DIR/as_conversions.rs:12:13\n    |\n LL |     let j = &i as *const u64 as *mut u64;\n    |             ^^^^^^^^^^^^^^^^"}, {"sha": "3d917e3dc75e9211a5ca7f5a52de06d569792acb", "filename": "tests/ui/auxiliary/doc_unsafe_macros.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b6495af39afb4618147636c1b6c4afba7751393f/tests%2Fui%2Fauxiliary%2Fdoc_unsafe_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6495af39afb4618147636c1b6c4afba7751393f/tests%2Fui%2Fauxiliary%2Fdoc_unsafe_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fdoc_unsafe_macros.rs?ref=b6495af39afb4618147636c1b6c4afba7751393f", "patch": "@@ -1,16 +0,0 @@\n-#[macro_export]\n-macro_rules! undocd_unsafe {\n-    () => {\n-        pub unsafe fn oy_vey() {\n-            unimplemented!();\n-        }\n-    };\n-}\n-#[macro_export]\n-macro_rules! undocd_safe {\n-    () => {\n-        pub fn vey_oy() {\n-            unimplemented!();\n-        }\n-    };\n-}"}, {"sha": "1eb77c531835a165f898ba04d35ab50b64ae05bb", "filename": "tests/ui/auxiliary/implicit_hasher_macros.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6495af39afb4618147636c1b6c4afba7751393f/tests%2Fui%2Fauxiliary%2Fimplicit_hasher_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6495af39afb4618147636c1b6c4afba7751393f/tests%2Fui%2Fauxiliary%2Fimplicit_hasher_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fimplicit_hasher_macros.rs?ref=b6495af39afb4618147636c1b6c4afba7751393f", "patch": "@@ -1,6 +0,0 @@\n-#[macro_export]\n-macro_rules! implicit_hasher_fn {\n-    () => {\n-        pub fn f(input: &HashMap<u32, u32>) {}\n-    };\n-}"}, {"sha": "a9bb61451dca68d086e839197b360174da39c4b8", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 5, "deletions": 136, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -2,21 +2,6 @@\n \n //! Used to test that certain lints don't trigger in imported external macros\n \n-#[macro_export]\n-macro_rules! foofoo {\n-    () => {\n-        loop {}\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! must_use_unit {\n-    () => {\n-        #[must_use]\n-        fn foo() {}\n-    };\n-}\n-\n #[macro_export]\n macro_rules! try_err {\n     () => {\n@@ -36,84 +21,6 @@ macro_rules! string_add {\n     };\n }\n \n-#[macro_export]\n-macro_rules! take_external {\n-    ($s:expr) => {\n-        std::mem::replace($s, Default::default())\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! option_env_unwrap_external {\n-    ($env: expr) => {\n-        option_env!($env).unwrap()\n-    };\n-    ($env: expr, $message: expr) => {\n-        option_env!($env).expect($message)\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! ref_arg_binding {\n-    () => {\n-        let ref _y = 42;\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! ref_arg_function {\n-    () => {\n-        fn fun_example(ref _x: usize) {}\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! as_conv_with_arg {\n-    (0u32 as u64) => {\n-        ()\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! as_conv {\n-    () => {\n-        0u32 as u64\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! large_enum_variant {\n-    () => {\n-        enum LargeEnumInMacro {\n-            A(i32),\n-            B([i32; 8000]),\n-        }\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! field_reassign_with_default {\n-    () => {\n-        #[derive(Default)]\n-        struct A {\n-            pub i: i32,\n-            pub j: i64,\n-        }\n-        fn lint() {\n-            let mut a: A = Default::default();\n-            a.i = 42;\n-            a;\n-        }\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! default_numeric_fallback {\n-    () => {\n-        let x = 22;\n-    };\n-}\n-\n #[macro_export]\n macro_rules! mut_mut {\n     () => {\n@@ -122,49 +29,11 @@ macro_rules! mut_mut {\n }\n \n #[macro_export]\n-macro_rules! ptr_as_ptr_cast {\n-    ($ptr: ident) => {\n-        $ptr as *const i32\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! manual_rem_euclid {\n+macro_rules! issue_10421 {\n     () => {\n-        let value: i32 = 5;\n-        let _: i32 = ((value % 4) + 4) % 4;\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! equatable_if_let {\n-    ($a:ident) => {{ if let 2 = $a {} }};\n-}\n-\n-#[macro_export]\n-macro_rules! almost_complete_range {\n-    () => {\n-        let _ = 'a'..'z';\n-        let _ = 'A'..'Z';\n-        let _ = '0'..'9';\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! unsafe_macro {\n-    () => {\n-        unsafe {\n-            *core::ptr::null::<()>();\n-            *core::ptr::null::<()>();\n-        }\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! needless_lifetime {\n-    () => {\n-        fn needless_lifetime<'a>(x: &'a u8) -> &'a u8 {\n-            unimplemented!()\n-        }\n+        let mut a = 1;\n+        let mut b = 2;\n+        a = b;\n+        b = a;\n     };\n }"}, {"sha": "7ed8a28dbd935a91ad5b305f06f3b00f64532e57", "filename": "tests/ui/auxiliary/macro_use_helper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fauxiliary%2Fmacro_use_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fauxiliary%2Fmacro_use_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_use_helper.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -13,7 +13,7 @@ pub mod inner {\n \n     // RE-EXPORT\n     // this will stick in `inner` module\n-    pub use macro_rules::foofoo;\n+    pub use macro_rules::mut_mut;\n     pub use macro_rules::try_err;\n \n     pub mod nested {"}, {"sha": "8ea631f2bbd420fd20795fde30cf81e1bd939d80", "filename": "tests/ui/auxiliary/proc_macro_with_span.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b6495af39afb4618147636c1b6c4afba7751393f/tests%2Fui%2Fauxiliary%2Fproc_macro_with_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6495af39afb4618147636c1b6c4afba7751393f/tests%2Fui%2Fauxiliary%2Fproc_macro_with_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_with_span.rs?ref=b6495af39afb4618147636c1b6c4afba7751393f", "patch": "@@ -1,32 +0,0 @@\n-// compile-flags: --emit=link\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-\n-use proc_macro::{token_stream::IntoIter, Group, Span, TokenStream, TokenTree};\n-\n-#[proc_macro]\n-pub fn with_span(input: TokenStream) -> TokenStream {\n-    let mut iter = input.into_iter();\n-    let span = iter.next().unwrap().span();\n-    let mut res = TokenStream::new();\n-    write_with_span(span, iter, &mut res);\n-    res\n-}\n-\n-fn write_with_span(s: Span, input: IntoIter, out: &mut TokenStream) {\n-    for mut tt in input {\n-        if let TokenTree::Group(g) = tt {\n-            let mut stream = TokenStream::new();\n-            write_with_span(s, g.stream().into_iter(), &mut stream);\n-            let mut group = Group::new(g.delimiter(), stream);\n-            group.set_span(s);\n-            out.extend([TokenTree::Group(group)]);\n-        } else {\n-            tt.set_span(s);\n-            out.extend([tt]);\n-        }\n-    }\n-}"}, {"sha": "325be83a0d73d932520288dcb8fa0ab55e631060", "filename": "tests/ui/auxiliary/proc_macros.rs", "status": "added", "additions": 474, "deletions": 0, "changes": 474, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fauxiliary%2Fproc_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fauxiliary%2Fproc_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macros.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -0,0 +1,474 @@\n+// compile-flags: --emit=link\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![feature(let_chains)]\n+#![feature(proc_macro_span)]\n+#![allow(dead_code)]\n+\n+extern crate proc_macro;\n+\n+use core::mem;\n+use proc_macro::{\n+    token_stream::IntoIter,\n+    Delimiter::{self, Brace, Parenthesis},\n+    Group, Ident, Literal, Punct,\n+    Spacing::{self, Alone, Joint},\n+    Span, TokenStream, TokenTree as TT,\n+};\n+\n+type Result<T> = core::result::Result<T, TokenStream>;\n+\n+/// Make a `compile_error!` pointing to the given span.\n+fn make_error(msg: &str, span: Span) -> TokenStream {\n+    TokenStream::from_iter([\n+        TT::Ident(Ident::new(\"compile_error\", span)),\n+        TT::Punct(punct_with_span('!', Alone, span)),\n+        TT::Group({\n+            let mut msg = Literal::string(msg);\n+            msg.set_span(span);\n+            group_with_span(Parenthesis, TokenStream::from_iter([TT::Literal(msg)]), span)\n+        }),\n+    ])\n+}\n+\n+fn expect_tt<T>(tt: Option<TT>, f: impl FnOnce(TT) -> Option<T>, expected: &str, span: Span) -> Result<T> {\n+    match tt {\n+        None => Err(make_error(\n+            &format!(\"unexpected end of input, expected {expected}\"),\n+            span,\n+        )),\n+        Some(tt) => {\n+            let span = tt.span();\n+            match f(tt) {\n+                Some(x) => Ok(x),\n+                None => Err(make_error(&format!(\"unexpected token, expected {expected}\"), span)),\n+            }\n+        },\n+    }\n+}\n+\n+fn punct_with_span(c: char, spacing: Spacing, span: Span) -> Punct {\n+    let mut p = Punct::new(c, spacing);\n+    p.set_span(span);\n+    p\n+}\n+\n+fn group_with_span(delimiter: Delimiter, stream: TokenStream, span: Span) -> Group {\n+    let mut g = Group::new(delimiter, stream);\n+    g.set_span(span);\n+    g\n+}\n+\n+/// Token used to escape the following token from the macro's span rules.\n+const ESCAPE_CHAR: char = '$';\n+\n+/// Takes a single token followed by a sequence tokens. Returns the sequence of tokens with their\n+/// span set to that of the first token. Tokens may be escaped with either `#ident` or `#(tokens)`.\n+#[proc_macro]\n+pub fn with_span(input: TokenStream) -> TokenStream {\n+    let mut iter = input.into_iter();\n+    let span = iter.next().unwrap().span();\n+    let mut res = TokenStream::new();\n+    if let Err(e) = write_with_span(span, iter, &mut res) {\n+        e\n+    } else {\n+        res\n+    }\n+}\n+\n+/// Takes a sequence of tokens and return the tokens with the span set such that they appear to be\n+/// from an external macro. Tokens may be escaped with either `#ident` or `#(tokens)`.\n+#[proc_macro]\n+pub fn external(input: TokenStream) -> TokenStream {\n+    let mut res = TokenStream::new();\n+    if let Err(e) = write_with_span(Span::mixed_site(), input.into_iter(), &mut res) {\n+        e\n+    } else {\n+        res\n+    }\n+}\n+\n+/// Copies all the tokens, replacing all their spans with the given span. Tokens can be escaped\n+/// either by `#ident` or `#(tokens)`.\n+fn write_with_span(s: Span, mut input: IntoIter, out: &mut TokenStream) -> Result<()> {\n+    while let Some(tt) = input.next() {\n+        match tt {\n+            TT::Punct(p) if p.as_char() == ESCAPE_CHAR => {\n+                expect_tt(\n+                    input.next(),\n+                    |tt| match tt {\n+                        tt @ (TT::Ident(_) | TT::Literal(_)) => {\n+                            out.extend([tt]);\n+                            Some(())\n+                        },\n+                        TT::Punct(mut p) if p.as_char() == ESCAPE_CHAR => {\n+                            p.set_span(s);\n+                            out.extend([TT::Punct(p)]);\n+                            Some(())\n+                        },\n+                        TT::Group(g) if g.delimiter() == Parenthesis => {\n+                            out.extend([TT::Group(group_with_span(Delimiter::None, g.stream(), g.span()))]);\n+                            Some(())\n+                        },\n+                        _ => None,\n+                    },\n+                    \"an ident, a literal, or parenthesized tokens\",\n+                    p.span(),\n+                )?;\n+            },\n+            TT::Group(g) => {\n+                let mut stream = TokenStream::new();\n+                write_with_span(s, g.stream().into_iter(), &mut stream)?;\n+                out.extend([TT::Group(group_with_span(g.delimiter(), stream, s))]);\n+            },\n+            mut tt => {\n+                tt.set_span(s);\n+                out.extend([tt]);\n+            },\n+        }\n+    }\n+    Ok(())\n+}\n+\n+/// Within the item this attribute is attached to, an `inline!` macro is available which expands the\n+/// contained tokens as though they came from a macro expansion.\n+///\n+/// Within the `inline!` macro, any token preceded by `$` is passed as though it were an argument\n+/// with an automatically chosen fragment specifier. `$ident` will be passed as `ident`, `$1` or\n+/// `$\"literal\"` will be passed as `literal`, `$'lt` will be passed as `lifetime`, and `$(...)` will\n+/// pass the contained tokens as a `tt` sequence (the wrapping parenthesis are removed). If another\n+/// specifier is required it can be specified within parenthesis like `$(@expr ...)`. This will\n+/// expand the remaining tokens as a single argument.\n+///\n+/// Multiple `inline!` macros may be nested within each other. This will expand as nested macro\n+/// calls. However, any arguments will be passed as though they came from the outermost context.\n+#[proc_macro_attribute]\n+pub fn inline_macros(args: TokenStream, input: TokenStream) -> TokenStream {\n+    let mut args = args.into_iter();\n+    let mac_name = match args.next() {\n+        Some(TT::Ident(name)) => Some(name),\n+        Some(tt) => {\n+            return make_error(\n+                \"unexpected argument, expected either an ident or no arguments\",\n+                tt.span(),\n+            );\n+        },\n+        None => None,\n+    };\n+    if let Some(tt) = args.next() {\n+        return make_error(\n+            \"unexpected argument, expected either an ident or no arguments\",\n+            tt.span(),\n+        );\n+    };\n+\n+    let mac_name = if let Some(mac_name) = mac_name {\n+        Ident::new(&format!(\"__inline_mac_{mac_name}\"), Span::call_site())\n+    } else {\n+        let mut input = match LookaheadIter::new(input.clone().into_iter()) {\n+            Some(x) => x,\n+            None => return input,\n+        };\n+        loop {\n+            match input.next() {\n+                None => break Ident::new(\"__inline_mac\", Span::call_site()),\n+                Some(TT::Ident(kind)) => match &*kind.to_string() {\n+                    \"impl\" => break Ident::new(\"__inline_mac_impl\", Span::call_site()),\n+                    kind @ (\"struct\" | \"enum\" | \"union\" | \"fn\" | \"mod\" | \"trait\" | \"type\" | \"const\" | \"static\") => {\n+                        if let TT::Ident(name) = &input.tt {\n+                            break Ident::new(&format!(\"__inline_mac_{kind}_{name}\"), Span::call_site());\n+                        } else {\n+                            break Ident::new(&format!(\"__inline_mac_{kind}\"), Span::call_site());\n+                        }\n+                    },\n+                    _ => {},\n+                },\n+                _ => {},\n+            }\n+        }\n+    };\n+\n+    let mut expander = Expander::default();\n+    let mut mac = MacWriter::new(mac_name);\n+    if let Err(e) = expander.expand(input.into_iter(), &mut mac) {\n+        return e;\n+    }\n+    let mut out = TokenStream::new();\n+    mac.finish(&mut out);\n+    out.extend(expander.expn);\n+    out\n+}\n+\n+/// Wraps a `TokenStream` iterator with a single token lookahead.\n+struct LookaheadIter {\n+    tt: TT,\n+    iter: IntoIter,\n+}\n+impl LookaheadIter {\n+    fn new(mut iter: IntoIter) -> Option<Self> {\n+        iter.next().map(|tt| Self { tt, iter })\n+    }\n+\n+    /// Get's the lookahead token, replacing it with the next token in the stream.\n+    /// Note: If there isn't a next token, this will not return the lookahead token.\n+    fn next(&mut self) -> Option<TT> {\n+        self.iter.next().map(|tt| mem::replace(&mut self.tt, tt))\n+    }\n+}\n+\n+/// Builds the macro used to implement all the `inline!` macro calls.\n+struct MacWriter {\n+    name: Ident,\n+    macros: TokenStream,\n+    next_idx: usize,\n+}\n+impl MacWriter {\n+    fn new(name: Ident) -> Self {\n+        Self {\n+            name,\n+            macros: TokenStream::new(),\n+            next_idx: 0,\n+        }\n+    }\n+\n+    /// Inserts a new `inline!` call.\n+    fn insert(&mut self, name_span: Span, bang_span: Span, body: Group, expander: &mut Expander) -> Result<()> {\n+        let idx = self.next_idx;\n+        self.next_idx += 1;\n+\n+        let mut inner = Expander::for_arm(idx);\n+        inner.expand(body.stream().into_iter(), self)?;\n+        let new_arm = inner.arm.unwrap();\n+\n+        self.macros.extend([\n+            TT::Group(Group::new(Parenthesis, new_arm.args_def)),\n+            TT::Punct(Punct::new('=', Joint)),\n+            TT::Punct(Punct::new('>', Alone)),\n+            TT::Group(Group::new(Parenthesis, inner.expn)),\n+            TT::Punct(Punct::new(';', Alone)),\n+        ]);\n+\n+        expander.expn.extend([\n+            TT::Ident({\n+                let mut name = self.name.clone();\n+                name.set_span(name_span);\n+                name\n+            }),\n+            TT::Punct(punct_with_span('!', Alone, bang_span)),\n+        ]);\n+        let mut call_body = TokenStream::from_iter([TT::Literal(Literal::usize_unsuffixed(idx))]);\n+        if let Some(arm) = expander.arm.as_mut() {\n+            if !new_arm.args.is_empty() {\n+                arm.add_sub_args(new_arm.args, &mut call_body);\n+            }\n+        } else {\n+            call_body.extend(new_arm.args);\n+        }\n+        let mut g = Group::new(body.delimiter(), call_body);\n+        g.set_span(body.span());\n+        expander.expn.extend([TT::Group(g)]);\n+        Ok(())\n+    }\n+\n+    /// Creates the macro definition.\n+    fn finish(self, out: &mut TokenStream) {\n+        if self.next_idx != 0 {\n+            out.extend([\n+                TT::Ident(Ident::new(\"macro_rules\", Span::call_site())),\n+                TT::Punct(Punct::new('!', Alone)),\n+                TT::Ident(self.name),\n+                TT::Group(Group::new(Brace, self.macros)),\n+            ])\n+        }\n+    }\n+}\n+\n+struct MacroArm {\n+    args_def: TokenStream,\n+    args: Vec<TT>,\n+}\n+impl MacroArm {\n+    fn add_single_arg_def(&mut self, kind: &str, dollar_span: Span, arg_span: Span, out: &mut TokenStream) {\n+        let mut name = Ident::new(&format!(\"_{}\", self.args.len()), Span::call_site());\n+        self.args_def.extend([\n+            TT::Punct(Punct::new('$', Alone)),\n+            TT::Ident(name.clone()),\n+            TT::Punct(Punct::new(':', Alone)),\n+            TT::Ident(Ident::new(kind, Span::call_site())),\n+        ]);\n+        name.set_span(arg_span);\n+        out.extend([TT::Punct(punct_with_span('$', Alone, dollar_span)), TT::Ident(name)]);\n+    }\n+\n+    fn add_parenthesized_arg_def(&mut self, kind: Ident, dollar_span: Span, arg_span: Span, out: &mut TokenStream) {\n+        let mut name = Ident::new(&format!(\"_{}\", self.args.len()), Span::call_site());\n+        self.args_def.extend([TT::Group(Group::new(\n+            Parenthesis,\n+            TokenStream::from_iter([\n+                TT::Punct(Punct::new('$', Alone)),\n+                TT::Ident(name.clone()),\n+                TT::Punct(Punct::new(':', Alone)),\n+                TT::Ident(kind),\n+            ]),\n+        ))]);\n+        name.set_span(arg_span);\n+        out.extend([TT::Punct(punct_with_span('$', Alone, dollar_span)), TT::Ident(name)]);\n+    }\n+\n+    fn add_multi_arg_def(&mut self, dollar_span: Span, arg_span: Span, out: &mut TokenStream) {\n+        let mut name = Ident::new(&format!(\"_{}\", self.args.len()), Span::call_site());\n+        self.args_def.extend([TT::Group(Group::new(\n+            Parenthesis,\n+            TokenStream::from_iter([\n+                TT::Punct(Punct::new('$', Alone)),\n+                TT::Group(Group::new(\n+                    Parenthesis,\n+                    TokenStream::from_iter([\n+                        TT::Punct(Punct::new('$', Alone)),\n+                        TT::Ident(name.clone()),\n+                        TT::Punct(Punct::new(':', Alone)),\n+                        TT::Ident(Ident::new(\"tt\", Span::call_site())),\n+                    ]),\n+                )),\n+                TT::Punct(Punct::new('*', Alone)),\n+            ]),\n+        ))]);\n+        name.set_span(arg_span);\n+        out.extend([\n+            TT::Punct(punct_with_span('$', Alone, dollar_span)),\n+            TT::Group(group_with_span(\n+                Parenthesis,\n+                TokenStream::from_iter([TT::Punct(punct_with_span('$', Alone, dollar_span)), TT::Ident(name)]),\n+                dollar_span,\n+            )),\n+            TT::Punct(punct_with_span('*', Alone, dollar_span)),\n+        ]);\n+    }\n+\n+    fn add_arg(&mut self, dollar_span: Span, tt: TT, input: &mut IntoIter, out: &mut TokenStream) -> Result<()> {\n+        match tt {\n+            TT::Punct(p) if p.as_char() == ESCAPE_CHAR => out.extend([TT::Punct(p)]),\n+            TT::Punct(p) if p.as_char() == '\\'' && p.spacing() == Joint => {\n+                let lt_name = expect_tt(\n+                    input.next(),\n+                    |tt| match tt {\n+                        TT::Ident(x) => Some(x),\n+                        _ => None,\n+                    },\n+                    \"lifetime name\",\n+                    p.span(),\n+                )?;\n+                let arg_span = p.span().join(lt_name.span()).unwrap_or(p.span());\n+                self.add_single_arg_def(\"lifetime\", dollar_span, arg_span, out);\n+                self.args.extend([TT::Punct(p), TT::Ident(lt_name)]);\n+            },\n+            TT::Ident(x) => {\n+                self.add_single_arg_def(\"ident\", dollar_span, x.span(), out);\n+                self.args.push(TT::Ident(x));\n+            },\n+            TT::Literal(x) => {\n+                self.add_single_arg_def(\"literal\", dollar_span, x.span(), out);\n+                self.args.push(TT::Literal(x));\n+            },\n+            TT::Group(g) if g.delimiter() == Parenthesis => {\n+                let mut inner = g.stream().into_iter();\n+                if let Some(TT::Punct(p)) = inner.next()\n+                    && p.as_char() == '@'\n+                {\n+                    let kind = expect_tt(\n+                        inner.next(),\n+                        |tt| match tt {\n+                            TT::Ident(kind) => Some(kind),\n+                            _ => None,\n+                        },\n+                        \"a macro fragment specifier\",\n+                        p.span(),\n+                    )?;\n+                    self.add_parenthesized_arg_def(kind, dollar_span, g.span(), out);\n+                    self.args.push(TT::Group(group_with_span(Parenthesis, inner.collect(), g.span())))\n+                } else {\n+                    self.add_multi_arg_def(dollar_span, g.span(), out);\n+                    self.args.push(TT::Group(g));\n+                }\n+            },\n+            tt => return Err(make_error(\"unsupported escape\", tt.span())),\n+        };\n+        Ok(())\n+    }\n+\n+    fn add_sub_args(&mut self, args: Vec<TT>, out: &mut TokenStream) {\n+        self.add_multi_arg_def(Span::call_site(), Span::call_site(), out);\n+        self.args\n+            .extend([TT::Group(Group::new(Parenthesis, TokenStream::from_iter(args)))]);\n+    }\n+}\n+\n+#[derive(Default)]\n+struct Expander {\n+    arm: Option<MacroArm>,\n+    expn: TokenStream,\n+}\n+impl Expander {\n+    fn for_arm(idx: usize) -> Self {\n+        Self {\n+            arm: Some(MacroArm {\n+                args_def: TokenStream::from_iter([TT::Literal(Literal::usize_unsuffixed(idx))]),\n+                args: Vec::new(),\n+            }),\n+            expn: TokenStream::new(),\n+        }\n+    }\n+\n+    fn write_tt(&mut self, tt: TT, mac: &mut MacWriter) -> Result<()> {\n+        match tt {\n+            TT::Group(g) => {\n+                let outer = mem::take(&mut self.expn);\n+                self.expand(g.stream().into_iter(), mac)?;\n+                let inner = mem::replace(&mut self.expn, outer);\n+                self.expn\n+                    .extend([TT::Group(group_with_span(g.delimiter(), inner, g.span()))]);\n+            },\n+            tt => self.expn.extend([tt]),\n+        }\n+        Ok(())\n+    }\n+\n+    fn expand(&mut self, input: IntoIter, mac: &mut MacWriter) -> Result<()> {\n+        let Some(mut input) = LookaheadIter::new(input) else {\n+            return Ok(());\n+        };\n+        while let Some(tt) = input.next() {\n+            if let TT::Punct(p) = &tt\n+                && p.as_char() == ESCAPE_CHAR\n+                && let Some(arm) = self.arm.as_mut()\n+            {\n+                arm.add_arg(p.span(), mem::replace(&mut input.tt, tt), &mut input.iter, &mut self.expn)?;\n+                if input.next().is_none() {\n+                    return Ok(());\n+                }\n+            } else if let TT::Punct(p) = &input.tt\n+                && p.as_char() == '!'\n+                && let TT::Ident(name) = &tt\n+                && name.to_string() == \"inline\"\n+            {\n+                let g = expect_tt(\n+                    input.iter.next(),\n+                    |tt| match tt {\n+                        TT::Group(g) => Some(g),\n+                        _ => None,\n+                    },\n+                    \"macro arguments\",\n+                    p.span(),\n+                )?;\n+                mac.insert(name.span(), p.span(), g, self)?;\n+                if input.next().is_none() {\n+                    return Ok(());\n+                }\n+            } else {\n+                self.write_tt(tt, mac)?;\n+            }\n+        }\n+        self.write_tt(input.tt, mac)\n+    }\n+}"}, {"sha": "b03c21262c3bdfbb53321533c022604ae9ab5009", "filename": "tests/ui/borrow_interior_mutable_const/auxiliary/helper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fborrow_interior_mutable_const%2Fauxiliary%2Fhelper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fborrow_interior_mutable_const%2Fauxiliary%2Fhelper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const%2Fauxiliary%2Fhelper.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n // this file solely exists to test constants defined in foreign crates.\n-// As the most common case is the `http` crate, it replicates `http::HeadewrName`'s structure.\n+// As the most common case is the `http` crate, it replicates `http::HeaderName`'s structure.\n \n #![allow(clippy::declare_interior_mutable_const)]\n #![allow(unused_tuple_struct_fields)]"}, {"sha": "1ab3570c907ce99c75929b1703e653bc06f8a851", "filename": "tests/ui/crashes/ice-10148.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fcrashes%2Fice-10148.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fcrashes%2Fice-10148.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-10148.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,8 +1,8 @@\n-// aux-build:../../auxiliary/proc_macro_with_span.rs\n+// aux-build:../../auxiliary/proc_macros.rs\n \n-extern crate proc_macro_with_span;\n+extern crate proc_macros;\n \n-use proc_macro_with_span::with_span;\n+use proc_macros::with_span;\n \n fn main() {\n     println!(with_span!(\"\"something \"\"));"}, {"sha": "263c27d3d646af634a9b338163ce3416db5fcf75", "filename": "tests/ui/crashes/ice-6254.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fcrashes%2Fice-6254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fcrashes%2Fice-6254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6254.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -6,6 +6,8 @@ LL |         FOO_REF_REF => {},\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n    = note: `-D indirect-structural-match` implied by `-D warnings`\n \n error: aborting due to previous error"}, {"sha": "42c15d6a70b837ea66dac7b1998ce4de3b04e01c", "filename": "tests/ui/default_numeric_fallback_f64.fixed", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fdefault_numeric_fallback_f64.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fdefault_numeric_fallback_f64.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_f64.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::default_numeric_fallback)]\n #![allow(\n@@ -13,8 +13,8 @@\n     clippy::let_with_type_underscore\n )]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n mod basic_expr {\n     fn test() {\n@@ -167,20 +167,17 @@ mod method_calls {\n }\n \n mod in_macro {\n-    macro_rules! internal_macro {\n-        () => {\n-            let x = 22.0_f64;\n-        };\n-    }\n+    use super::*;\n \n     // Should lint in internal macro.\n+    #[inline_macros]\n     fn internal() {\n-        internal_macro!();\n+        inline!(let x = 22.0_f64;);\n     }\n \n     // Should NOT lint in external macro.\n     fn external() {\n-        default_numeric_fallback!();\n+        external!(let x = 22.;);\n     }\n }\n "}, {"sha": "7da7ea254e98b4f95df55a9875f68e0664f54816", "filename": "tests/ui/default_numeric_fallback_f64.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fdefault_numeric_fallback_f64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fdefault_numeric_fallback_f64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_f64.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::default_numeric_fallback)]\n #![allow(\n@@ -13,8 +13,8 @@\n     clippy::let_with_type_underscore\n )]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n mod basic_expr {\n     fn test() {\n@@ -167,20 +167,17 @@ mod method_calls {\n }\n \n mod in_macro {\n-    macro_rules! internal_macro {\n-        () => {\n-            let x = 22.;\n-        };\n-    }\n+    use super::*;\n \n     // Should lint in internal macro.\n+    #[inline_macros]\n     fn internal() {\n-        internal_macro!();\n+        inline!(let x = 22.;);\n     }\n \n     // Should NOT lint in external macro.\n     fn external() {\n-        default_numeric_fallback!();\n+        external!(let x = 22.;);\n     }\n }\n "}, {"sha": "b949cd1d50b180b1e77e41b32ecbe7c88d40e38d", "filename": "tests/ui/default_numeric_fallback_f64.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -139,15 +139,12 @@ LL |         s.generic_arg(1.);\n    |                       ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:172:21\n+  --> $DIR/default_numeric_fallback_f64.rs:175:25\n    |\n-LL |             let x = 22.;\n-   |                     ^^^ help: consider adding suffix: `22.0_f64`\n-...\n-LL |         internal_macro!();\n-   |         ----------------- in this macro invocation\n+LL |         inline!(let x = 22.;);\n+   |                         ^^^ help: consider adding suffix: `22.0_f64`\n    |\n-   = note: this error originates in the macro `internal_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_internal` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 24 previous errors\n "}, {"sha": "b7485b73dcddd484f2f3626e7a005d05f92f0488", "filename": "tests/ui/default_numeric_fallback_i32.fixed", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![feature(lint_reasons)]\n #![warn(clippy::default_numeric_fallback)]\n@@ -13,8 +13,8 @@\n     clippy::let_with_type_underscore\n )]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n mod basic_expr {\n     fn test() {\n@@ -168,20 +168,17 @@ mod method_calls {\n }\n \n mod in_macro {\n-    macro_rules! internal_macro {\n-        () => {\n-            let x = 22_i32;\n-        };\n-    }\n+    use super::*;\n \n     // Should lint in internal macro.\n+    #[inline_macros]\n     fn internal() {\n-        internal_macro!();\n+        inline!(let x = 22_i32;);\n     }\n \n     // Should NOT lint in external macro.\n     fn external() {\n-        default_numeric_fallback!();\n+        external!(let x = 22;);\n     }\n }\n "}, {"sha": "7307d31354ebdeae5d22cdb99358b6aaacd27783", "filename": "tests/ui/default_numeric_fallback_i32.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fdefault_numeric_fallback_i32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fdefault_numeric_fallback_i32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![feature(lint_reasons)]\n #![warn(clippy::default_numeric_fallback)]\n@@ -13,8 +13,8 @@\n     clippy::let_with_type_underscore\n )]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n mod basic_expr {\n     fn test() {\n@@ -168,20 +168,17 @@ mod method_calls {\n }\n \n mod in_macro {\n-    macro_rules! internal_macro {\n-        () => {\n-            let x = 22;\n-        };\n-    }\n+    use super::*;\n \n     // Should lint in internal macro.\n+    #[inline_macros]\n     fn internal() {\n-        internal_macro!();\n+        inline!(let x = 22;);\n     }\n \n     // Should NOT lint in external macro.\n     fn external() {\n-        default_numeric_fallback!();\n+        external!(let x = 22;);\n     }\n }\n "}, {"sha": "48cd28102ce4bb85169916a5a6515d904fecf87a", "filename": "tests/ui/default_numeric_fallback_i32.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -151,15 +151,12 @@ LL |         s.generic_arg(1);\n    |                       ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:173:21\n+  --> $DIR/default_numeric_fallback_i32.rs:176:25\n    |\n-LL |             let x = 22;\n-   |                     ^^ help: consider adding suffix: `22_i32`\n-...\n-LL |         internal_macro!();\n-   |         ----------------- in this macro invocation\n+LL |         inline!(let x = 22;);\n+   |                         ^^ help: consider adding suffix: `22_i32`\n    |\n-   = note: this error originates in the macro `internal_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_internal` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 26 previous errors\n "}, {"sha": "7842ef3ec40c2577ec3d834f8179b058644c0112", "filename": "tests/ui/default_trait_access.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fdefault_trait_access.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fdefault_trait_access.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,12 +1,12 @@\n // run-rustfix\n-// aux-build: proc_macro_with_span.rs\n+// aux-build: proc_macros.rs\n #![deny(clippy::default_trait_access)]\n #![allow(dead_code, unused_imports)]\n #![allow(clippy::uninlined_format_args)]\n \n-extern crate proc_macro_with_span;\n+extern crate proc_macros;\n \n-use proc_macro_with_span::with_span;\n+use proc_macros::with_span;\n use std::default;\n use std::default::Default as D2;\n use std::string;"}, {"sha": "cbb3e59c970ebb7831765de28fb441889b719a05", "filename": "tests/ui/default_trait_access.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,12 +1,12 @@\n // run-rustfix\n-// aux-build: proc_macro_with_span.rs\n+// aux-build: proc_macros.rs\n #![deny(clippy::default_trait_access)]\n #![allow(dead_code, unused_imports)]\n #![allow(clippy::uninlined_format_args)]\n \n-extern crate proc_macro_with_span;\n+extern crate proc_macros;\n \n-use proc_macro_with_span::with_span;\n+use proc_macros::with_span;\n use std::default;\n use std::default::Default as D2;\n use std::string;"}, {"sha": "ca5c03304c7f29992ef3dc83cf557ec9fe83d46f", "filename": "tests/ui/deref_addrof.fixed", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fderef_addrof.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fderef_addrof.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,7 +1,12 @@\n // run-rustfix\n+// aux-build:proc_macros.rs\n+\n #![allow(clippy::return_self_not_must_use)]\n #![warn(clippy::deref_addrof)]\n \n+extern crate proc_macros;\n+use proc_macros::inline_macros;\n+\n fn get_number() -> usize {\n     10\n }\n@@ -41,28 +46,15 @@ fn main() {\n     let _ = unsafe { *core::ptr::addr_of!(a) };\n }\n \n-#[rustfmt::skip]\n-macro_rules! m {\n-    ($visitor: expr) => {\n-        $visitor\n-    };\n-}\n-\n-#[rustfmt::skip]\n-macro_rules! m_mut {\n-    ($visitor: expr) => {\n-        $visitor\n-    };\n-}\n-\n #[derive(Copy, Clone)]\n pub struct S;\n+#[inline_macros]\n impl S {\n     pub fn f(&self) -> &Self {\n-        m!(self)\n+        inline!($(@expr self))\n     }\n     #[allow(unused_mut)] // mut will be unused, once the macro is fixed\n     pub fn f_mut(mut self) -> Self {\n-        m_mut!(self)\n+        inline!($(@expr self))\n     }\n }"}, {"sha": "3db5fafe94499f97c256c7f370941150d26ac79f", "filename": "tests/ui/deref_addrof.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fderef_addrof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fderef_addrof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,7 +1,12 @@\n // run-rustfix\n+// aux-build:proc_macros.rs\n+\n #![allow(clippy::return_self_not_must_use)]\n #![warn(clippy::deref_addrof)]\n \n+extern crate proc_macros;\n+use proc_macros::inline_macros;\n+\n fn get_number() -> usize {\n     10\n }\n@@ -41,28 +46,15 @@ fn main() {\n     let _ = unsafe { *core::ptr::addr_of!(a) };\n }\n \n-#[rustfmt::skip]\n-macro_rules! m {\n-    ($visitor: expr) => {\n-        *& $visitor\n-    };\n-}\n-\n-#[rustfmt::skip]\n-macro_rules! m_mut {\n-    ($visitor: expr) => {\n-        *& mut $visitor\n-    };\n-}\n-\n #[derive(Copy, Clone)]\n pub struct S;\n+#[inline_macros]\n impl S {\n     pub fn f(&self) -> &Self {\n-        m!(self)\n+        inline!(*& $(@expr self))\n     }\n     #[allow(unused_mut)] // mut will be unused, once the macro is fixed\n     pub fn f_mut(mut self) -> Self {\n-        m_mut!(self)\n+        inline!(*&mut $(@expr self))\n     }\n }"}, {"sha": "e0287522fc56fa8c35834cb8ec8568fb39da1e12", "filename": "tests/ui/deref_addrof.stderr", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fderef_addrof.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fderef_addrof.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,74 +1,68 @@\n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:19:13\n+  --> $DIR/deref_addrof.rs:24:13\n    |\n LL |     let b = *&a;\n    |             ^^^ help: try this: `a`\n    |\n    = note: `-D clippy::deref-addrof` implied by `-D warnings`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:21:13\n+  --> $DIR/deref_addrof.rs:26:13\n    |\n LL |     let b = *&get_number();\n    |             ^^^^^^^^^^^^^^ help: try this: `get_number()`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:26:13\n+  --> $DIR/deref_addrof.rs:31:13\n    |\n LL |     let b = *&bytes[1..2][0];\n    |             ^^^^^^^^^^^^^^^^ help: try this: `bytes[1..2][0]`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:30:13\n+  --> $DIR/deref_addrof.rs:35:13\n    |\n LL |     let b = *&(a);\n    |             ^^^^^ help: try this: `(a)`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:32:13\n+  --> $DIR/deref_addrof.rs:37:13\n    |\n LL |     let b = *(&a);\n    |             ^^^^^ help: try this: `a`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:35:13\n+  --> $DIR/deref_addrof.rs:40:13\n    |\n LL |     let b = *((&a));\n    |             ^^^^^^^ help: try this: `a`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:37:13\n+  --> $DIR/deref_addrof.rs:42:13\n    |\n LL |     let b = *&&a;\n    |             ^^^^ help: try this: `&a`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:39:14\n+  --> $DIR/deref_addrof.rs:44:14\n    |\n LL |     let b = **&aref;\n    |              ^^^^^^ help: try this: `aref`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:47:9\n+  --> $DIR/deref_addrof.rs:54:17\n    |\n-LL |         *& $visitor\n-   |         ^^^^^^^^^^^ help: try this: `$visitor`\n-...\n-LL |         m!(self)\n-   |         -------- in this macro invocation\n+LL |         inline!(*& $(@expr self))\n+   |                 ^^^^^^^^^^^^^^^^ help: try this: `$(@expr self)`\n    |\n-   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:54:9\n+  --> $DIR/deref_addrof.rs:58:17\n    |\n-LL |         *& mut $visitor\n-   |         ^^^^^^^^^^^^^^^ help: try this: `$visitor`\n-...\n-LL |         m_mut!(self)\n-   |         ------------ in this macro invocation\n+LL |         inline!(*&mut $(@expr self))\n+   |                 ^^^^^^^^^^^^^^^^^^^ help: try this: `$(@expr self)`\n    |\n-   = note: this error originates in the macro `m_mut` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 10 previous errors\n "}, {"sha": "57c0be3f51e1bed7146497199406647f7ac59220", "filename": "tests/ui/deref_addrof_macro.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fderef_addrof_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fderef_addrof_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof_macro.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,10 +1,13 @@\n-macro_rules! m {\n-    ($($x:tt),*) => { &[$(($x, stringify!(x)),)*] };\n-}\n+// aux-build:proc_macros.rs\n+\n+#![warn(clippy::deref_addrof)]\n+\n+extern crate proc_macros;\n \n-#[warn(clippy::deref_addrof)]\n-fn f() -> [(i32, &'static str); 3] {\n-    *m![1, 2, 3] // should be fine\n+#[proc_macros::inline_macros]\n+fn f() -> i32 {\n+    // should be fine\n+    *inline!(&$1)\n }\n \n fn main() {}"}, {"sha": "30674ce3708e741ec4f6646e3c9f89504dce831f", "filename": "tests/ui/doc_unsafe.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fdoc_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fdoc_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_unsafe.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,9 +1,9 @@\n-// aux-build:doc_unsafe_macros.rs\n+// aux-build:proc_macros.rs\n \n #![allow(clippy::let_unit_value)]\n \n-#[macro_use]\n-extern crate doc_unsafe_macros;\n+extern crate proc_macros;\n+use proc_macros::external;\n \n /// This is not sufficiently documented\n pub unsafe fn destroy_the_planet() {\n@@ -105,7 +105,11 @@ macro_rules! very_unsafe {\n very_unsafe!();\n \n // we don't lint code from external macros\n-undocd_unsafe!();\n+external! {\n+    pub unsafe fn oy_vey() {\n+        unimplemented!();\n+    }\n+}\n \n fn main() {\n     unsafe {"}, {"sha": "6a8e6b550c13f0395b355c71f56b1e170a768064", "filename": "tests/ui/empty_loop.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fempty_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fempty_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_loop.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,9 +1,9 @@\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::empty_loop)]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n fn should_trigger() {\n     loop {}\n@@ -16,6 +16,7 @@ fn should_trigger() {\n     }\n }\n \n+#[inline_macros]\n fn should_not_trigger() {\n     loop {\n         panic!(\"This is fine\")\n@@ -38,14 +39,10 @@ fn should_not_trigger() {\n     loop {}\n \n     // We don't lint loops inside macros\n-    macro_rules! foo {\n-        () => {\n-            loop {}\n-        };\n-    }\n+    inline!(loop {});\n \n     // We don't lint external macros\n-    foofoo!()\n+    external!(loop {});\n }\n \n fn main() {}"}, {"sha": "007702ab550bf13b7793c8c5ac12daf0ece11b6d", "filename": "tests/ui/equatable_if_let.fixed", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fequatable_if_let.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fequatable_if_let.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fequatable_if_let.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,11 +1,11 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![allow(unused_variables, dead_code, clippy::derive_partial_eq_without_eq)]\n #![warn(clippy::equatable_if_let)]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n use std::cmp::Ordering;\n \n@@ -44,6 +44,7 @@ impl PartialEq for NotStructuralEq {\n     }\n }\n \n+#[inline_macros]\n fn main() {\n     let a = 2;\n     let b = 3;\n@@ -78,14 +79,9 @@ fn main() {\n     if Some(g) == Some(NotStructuralEq::A) {}\n     if matches!(h, NoPartialEqStruct { a: 2, b: false }) {}\n \n-    macro_rules! m1 {\n-        (x) => {\n-            \"abc\"\n-        };\n-    }\n-    if \"abc\" == m1!(x) {\n+    if \"abc\" == inline!(\"abc\") {\n         println!(\"OK\");\n     }\n \n-    equatable_if_let!(a);\n+    external!({ if let 2 = $a {} });\n }"}, {"sha": "3bda7977645b3308151efa8c3d7c41e39b22faf5", "filename": "tests/ui/equatable_if_let.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fequatable_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fequatable_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fequatable_if_let.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,11 +1,11 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![allow(unused_variables, dead_code, clippy::derive_partial_eq_without_eq)]\n #![warn(clippy::equatable_if_let)]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n use std::cmp::Ordering;\n \n@@ -44,6 +44,7 @@ impl PartialEq for NotStructuralEq {\n     }\n }\n \n+#[inline_macros]\n fn main() {\n     let a = 2;\n     let b = 3;\n@@ -78,14 +79,9 @@ fn main() {\n     if let Some(NotStructuralEq::A) = Some(g) {}\n     if let NoPartialEqStruct { a: 2, b: false } = h {}\n \n-    macro_rules! m1 {\n-        (x) => {\n-            \"abc\"\n-        };\n-    }\n-    if let m1!(x) = \"abc\" {\n+    if let inline!(\"abc\") = \"abc\" {\n         println!(\"OK\");\n     }\n \n-    equatable_if_let!(a);\n+    external!({ if let 2 = $a {} });\n }"}, {"sha": "a72d87bb7ba96f3cfd424fea8add153ad7a0a5be", "filename": "tests/ui/equatable_if_let.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fequatable_if_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fequatable_if_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fequatable_if_let.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,88 +1,88 @@\n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:59:8\n+  --> $DIR/equatable_if_let.rs:60:8\n    |\n LL |     if let 2 = a {}\n    |        ^^^^^^^^^ help: try: `a == 2`\n    |\n    = note: `-D clippy::equatable-if-let` implied by `-D warnings`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:60:8\n+  --> $DIR/equatable_if_let.rs:61:8\n    |\n LL |     if let Ordering::Greater = a.cmp(&b) {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `a.cmp(&b) == Ordering::Greater`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:61:8\n+  --> $DIR/equatable_if_let.rs:62:8\n    |\n LL |     if let Some(2) = c {}\n    |        ^^^^^^^^^^^^^^^ help: try: `c == Some(2)`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:62:8\n+  --> $DIR/equatable_if_let.rs:63:8\n    |\n LL |     if let Struct { a: 2, b: false } = d {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `d == (Struct { a: 2, b: false })`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:63:8\n+  --> $DIR/equatable_if_let.rs:64:8\n    |\n LL |     if let Enum::TupleVariant(32, 64) = e {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `e == Enum::TupleVariant(32, 64)`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:64:8\n+  --> $DIR/equatable_if_let.rs:65:8\n    |\n LL |     if let Enum::RecordVariant { a: 64, b: 32 } = e {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `e == (Enum::RecordVariant { a: 64, b: 32 })`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:65:8\n+  --> $DIR/equatable_if_let.rs:66:8\n    |\n LL |     if let Enum::UnitVariant = e {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `e == Enum::UnitVariant`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:66:8\n+  --> $DIR/equatable_if_let.rs:67:8\n    |\n LL |     if let (Enum::UnitVariant, &Struct { a: 2, b: false }) = (e, &d) {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(e, &d) == (Enum::UnitVariant, &Struct { a: 2, b: false })`\n \n error: this pattern matching can be expressed using `matches!`\n-  --> $DIR/equatable_if_let.rs:75:8\n+  --> $DIR/equatable_if_let.rs:76:8\n    |\n LL |     if let NotPartialEq::A = f {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `matches!(f, NotPartialEq::A)`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:76:8\n+  --> $DIR/equatable_if_let.rs:77:8\n    |\n LL |     if let NotStructuralEq::A = g {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `g == NotStructuralEq::A`\n \n error: this pattern matching can be expressed using `matches!`\n-  --> $DIR/equatable_if_let.rs:77:8\n+  --> $DIR/equatable_if_let.rs:78:8\n    |\n LL |     if let Some(NotPartialEq::A) = Some(f) {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `matches!(Some(f), Some(NotPartialEq::A))`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:78:8\n+  --> $DIR/equatable_if_let.rs:79:8\n    |\n LL |     if let Some(NotStructuralEq::A) = Some(g) {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Some(g) == Some(NotStructuralEq::A)`\n \n error: this pattern matching can be expressed using `matches!`\n-  --> $DIR/equatable_if_let.rs:79:8\n+  --> $DIR/equatable_if_let.rs:80:8\n    |\n LL |     if let NoPartialEqStruct { a: 2, b: false } = h {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `matches!(h, NoPartialEqStruct { a: 2, b: false })`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:86:8\n+  --> $DIR/equatable_if_let.rs:82:8\n    |\n-LL |     if let m1!(x) = \"abc\" {\n-   |        ^^^^^^^^^^^^^^^^^^ help: try: `\"abc\" == m1!(x)`\n+LL |     if let inline!(\"abc\") = \"abc\" {\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `\"abc\" == inline!(\"abc\")`\n \n error: aborting due to 14 previous errors\n "}, {"sha": "0e208b3ed0e15fa0a4ac080df92b7c7430ff3155", "filename": "tests/ui/field_reassign_with_default.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Ffield_reassign_with_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Ffield_reassign_with_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffield_reassign_with_default.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,12 +1,12 @@\n // aux-build:proc_macro_derive.rs\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::field_reassign_with_default)]\n \n #[macro_use]\n extern crate proc_macro_derive;\n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n // Don't lint on derives that derive `Default`\n // See https://github.com/rust-lang/rust-clippy/issues/6545\n@@ -36,14 +36,6 @@ struct D {\n     b: Option<i32>,\n }\n \n-macro_rules! m {\n-    ($key:ident: $value:tt) => {{\n-        let mut data = $crate::D::default();\n-        data.$key = Some($value);\n-        data\n-    }};\n-}\n-\n /// Implements .next() that returns a different number each time.\n struct SideEffect(i32);\n \n@@ -57,6 +49,7 @@ impl SideEffect {\n     }\n }\n \n+#[inline_macros]\n fn main() {\n     // wrong, produces first error in stderr\n     let mut a: A = Default::default();\n@@ -150,7 +143,18 @@ fn main() {\n     a.i = vec![1];\n \n     // Don't lint in external macros\n-    field_reassign_with_default!();\n+    external! {\n+        #[derive(Default)]\n+        struct A {\n+            pub i: i32,\n+            pub j: i64,\n+        }\n+        fn lint() {\n+            let mut a: A = Default::default();\n+            a.i = 42;\n+            a;\n+        }\n+    }\n \n     // be sure suggestion is correct with generics\n     let mut a: Wrapper<bool> = Default::default();\n@@ -160,9 +164,11 @@ fn main() {\n     a.i = 42;\n \n     // Don't lint in macros\n-    m! {\n-        a: 42\n-    };\n+    inline!(\n+        let mut data = $crate::D::default();\n+        data.$a = Some($42);\n+        data\n+    );\n }\n \n mod m {"}, {"sha": "da74f9ef9f7eebc4e77f5fb5723c95cb9bc0c229", "filename": "tests/ui/field_reassign_with_default.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Ffield_reassign_with_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Ffield_reassign_with_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffield_reassign_with_default.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,132 +1,132 @@\n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:63:5\n+  --> $DIR/field_reassign_with_default.rs:56:5\n    |\n LL |     a.i = 42;\n    |     ^^^^^^^^^\n    |\n note: consider initializing the variable with `main::A { i: 42, ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:62:5\n+  --> $DIR/field_reassign_with_default.rs:55:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: `-D clippy::field-reassign-with-default` implied by `-D warnings`\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:103:5\n+  --> $DIR/field_reassign_with_default.rs:96:5\n    |\n LL |     a.j = 43;\n    |     ^^^^^^^^^\n    |\n note: consider initializing the variable with `main::A { j: 43, i: 42 }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:102:5\n+  --> $DIR/field_reassign_with_default.rs:95:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:108:5\n+  --> $DIR/field_reassign_with_default.rs:101:5\n    |\n LL |     a.i = 42;\n    |     ^^^^^^^^^\n    |\n note: consider initializing the variable with `main::A { i: 42, j: 44 }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:107:5\n+  --> $DIR/field_reassign_with_default.rs:100:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:114:5\n+  --> $DIR/field_reassign_with_default.rs:107:5\n    |\n LL |     a.i = 42;\n    |     ^^^^^^^^^\n    |\n note: consider initializing the variable with `main::A { i: 42, ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:113:5\n+  --> $DIR/field_reassign_with_default.rs:106:5\n    |\n LL |     let mut a = A::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:124:5\n+  --> $DIR/field_reassign_with_default.rs:117:5\n    |\n LL |     a.i = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: consider initializing the variable with `main::A { i: Default::default(), ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:123:5\n+  --> $DIR/field_reassign_with_default.rs:116:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:128:5\n+  --> $DIR/field_reassign_with_default.rs:121:5\n    |\n LL |     a.i = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: consider initializing the variable with `main::A { i: Default::default(), j: 45 }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:127:5\n+  --> $DIR/field_reassign_with_default.rs:120:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:150:5\n+  --> $DIR/field_reassign_with_default.rs:143:5\n    |\n LL |     a.i = vec![1];\n    |     ^^^^^^^^^^^^^^\n    |\n note: consider initializing the variable with `C { i: vec![1], ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:149:5\n+  --> $DIR/field_reassign_with_default.rs:142:5\n    |\n LL |     let mut a: C = C::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:157:5\n+  --> $DIR/field_reassign_with_default.rs:161:5\n    |\n LL |     a.i = true;\n    |     ^^^^^^^^^^^\n    |\n note: consider initializing the variable with `Wrapper::<bool> { i: true }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:156:5\n+  --> $DIR/field_reassign_with_default.rs:160:5\n    |\n LL |     let mut a: Wrapper<bool> = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:160:5\n+  --> $DIR/field_reassign_with_default.rs:164:5\n    |\n LL |     a.i = 42;\n    |     ^^^^^^^^^\n    |\n note: consider initializing the variable with `WrapperMulti::<i32, i64> { i: 42, ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:159:5\n+  --> $DIR/field_reassign_with_default.rs:163:5\n    |\n LL |     let mut a: WrapperMulti<i32, i64> = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:229:13\n+  --> $DIR/field_reassign_with_default.rs:235:13\n    |\n LL |             f.name = name.len();\n    |             ^^^^^^^^^^^^^^^^^^^^\n    |\n note: consider initializing the variable with `issue6312::ImplDropAllCopy { name: name.len(), ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:228:13\n+  --> $DIR/field_reassign_with_default.rs:234:13\n    |\n LL |             let mut f = ImplDropAllCopy::default();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:245:13\n+  --> $DIR/field_reassign_with_default.rs:251:13\n    |\n LL |             f.name = name.len();\n    |             ^^^^^^^^^^^^^^^^^^^^\n    |\n note: consider initializing the variable with `issue6312::NoDropAllCopy { name: name.len(), ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:244:13\n+  --> $DIR/field_reassign_with_default.rs:250:13\n    |\n LL |             let mut f = NoDropAllCopy::default();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "9ce9a87626a79f4cfaa0610a92f03a1472c5815f", "filename": "tests/ui/ifs_same_cond.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fifs_same_cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fifs_same_cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fifs_same_cond.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -43,4 +43,30 @@ fn ifs_same_cond() {\n     }\n }\n \n+fn issue10272() {\n+    let a = String::from(\"ha\");\n+    if a.contains(\"ah\") {\n+    } else if a.contains(\"ah\") {\n+        // Trigger this lint\n+    } else if a.contains(\"ha\") {\n+    } else if a == \"wow\" {\n+    }\n+\n+    let p: *mut i8 = std::ptr::null_mut();\n+    if p.is_null() {\n+    } else if p.align_offset(0) == 0 {\n+    } else if p.is_null() {\n+        // ok, p is mutable pointer\n+    } else {\n+    }\n+\n+    let x = std::cell::Cell::new(true);\n+    if x.get() {\n+    } else if !x.take() {\n+    } else if x.get() {\n+        // ok, x is interior mutable type\n+    } else {\n+    }\n+}\n+\n fn main() {}"}, {"sha": "9519f6904cb1ebf913631f26f7fb0a9203cc96a9", "filename": "tests/ui/ifs_same_cond.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fifs_same_cond.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fifs_same_cond.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fifs_same_cond.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -35,5 +35,17 @@ note: same as this\n LL |     if 2 * a == 1 {\n    |        ^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: this `if` has the same condition as a previous `if`\n+  --> $DIR/ifs_same_cond.rs:49:15\n+   |\n+LL |     } else if a.contains(\"ah\") {\n+   |               ^^^^^^^^^^^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/ifs_same_cond.rs:48:8\n+   |\n+LL |     if a.contains(\"ah\") {\n+   |        ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "35d08a07bc3fe6ea70bec4490a34075444b5fdc6", "filename": "tests/ui/implicit_hasher.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,9 +1,11 @@\n-// aux-build:implicit_hasher_macros.rs\n+// aux-build:proc_macros.rs\n+\n #![deny(clippy::implicit_hasher)]\n #![allow(unused)]\n \n #[macro_use]\n-extern crate implicit_hasher_macros;\n+extern crate proc_macros;\n+use proc_macros::external;\n \n use std::cmp::Eq;\n use std::collections::{HashMap, HashSet};\n@@ -68,22 +70,19 @@ impl<S: BuildHasher + Default> Foo<i64> for HashSet<String, S> {\n \n pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n \n-macro_rules! gen {\n-    (impl) => {\n+#[proc_macros::inline_macros]\n+pub mod gen {\n+    use super::*;\n+    inline! {\n         impl<K: Hash + Eq, V> Foo<u8> for HashMap<K, V> {\n             fn make() -> (Self, Self) {\n                 (HashMap::new(), HashMap::with_capacity(10))\n             }\n         }\n-    };\n \n-    (fn $name:ident) => {\n-        pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n-    };\n+        pub fn bar(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n+    }\n }\n-#[rustfmt::skip]\n-gen!(impl);\n-gen!(fn bar);\n \n // When the macro is in a different file, the suggestion spans can't be combined properly\n // and should not cause an ICE\n@@ -94,7 +93,9 @@ pub mod test_macro;\n __implicit_hasher_test_macro!(impl<K, V> for HashMap<K, V> where V: test_macro::A);\n \n // #4260\n-implicit_hasher_fn!();\n+external! {\n+    pub fn f(input: &HashMap<u32, u32>) {}\n+}\n \n // #7712\n pub async fn election_vote(_data: HashMap<i32, i32>) {}"}, {"sha": "83b46de2eb5e322b412e3c1004e06c1ede443ecc", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 23, "deletions": 32, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,11 +1,11 @@\n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:16:35\n+  --> $DIR/implicit_hasher.rs:18:35\n    |\n LL | impl<K: Hash + Eq, V> Foo<i8> for HashMap<K, V> {\n    |                                   ^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/implicit_hasher.rs:2:9\n+  --> $DIR/implicit_hasher.rs:3:9\n    |\n LL | #![deny(clippy::implicit_hasher)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -19,7 +19,7 @@ LL |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default:\n    |          ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:25:36\n+  --> $DIR/implicit_hasher.rs:27:36\n    |\n LL | impl<K: Hash + Eq, V> Foo<i8> for (HashMap<K, V>,) {\n    |                                    ^^^^^^^^^^^^^\n@@ -34,7 +34,7 @@ LL |         ((HashMap::default(),), (HashMap::with_capacity_and_hasher(10, Defa\n    |           ~~~~~~~~~~~~~~~~~~     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:30:19\n+  --> $DIR/implicit_hasher.rs:32:19\n    |\n LL | impl Foo<i16> for HashMap<String, String> {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -49,7 +49,7 @@ LL |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default:\n    |          ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: impl for `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:47:32\n+  --> $DIR/implicit_hasher.rs:49:32\n    |\n LL | impl<T: Hash + Eq> Foo<i8> for HashSet<T> {\n    |                                ^^^^^^^^^^\n@@ -64,7 +64,7 @@ LL |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default:\n    |          ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: impl for `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:52:19\n+  --> $DIR/implicit_hasher.rs:54:19\n    |\n LL | impl Foo<i16> for HashSet<String> {\n    |                   ^^^^^^^^^^^^^^^\n@@ -79,7 +79,7 @@ LL |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default:\n    |          ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: parameter of type `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:69:23\n+  --> $DIR/implicit_hasher.rs:71:23\n    |\n LL | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                       ^^^^^^^^^^^^^^^^^\n@@ -90,7 +90,7 @@ LL | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _s\n    |           +++++++++++++++++++++++++++++            ~~~~~~~~~~~~~~~~~~~~\n \n error: parameter of type `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:69:53\n+  --> $DIR/implicit_hasher.rs:71:53\n    |\n LL | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                                                     ^^^^^^^^^^^^\n@@ -101,15 +101,12 @@ LL | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set:\n    |           +++++++++++++++++++++++++++++                                          ~~~~~~~~~~~~~~~\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:73:43\n+  --> $DIR/implicit_hasher.rs:77:43\n    |\n LL |         impl<K: Hash + Eq, V> Foo<u8> for HashMap<K, V> {\n    |                                           ^^^^^^^^^^^^^\n-...\n-LL | gen!(impl);\n-   | ---------- in this macro invocation\n    |\n-   = note: this error originates in the macro `gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_mod_gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider adding a type parameter\n    |\n LL |         impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<u8> for HashMap<K, V, S> {\n@@ -120,37 +117,31 @@ LL |                 (HashMap::default(), HashMap::with_capacity_and_hasher(10,\n    |                  ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: parameter of type `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:81:33\n+  --> $DIR/implicit_hasher.rs:83:31\n    |\n-LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n-   |                                 ^^^^^^^^^^^^^^^^^\n-...\n-LL | gen!(fn bar);\n-   | ------------ in this macro invocation\n+LL |         pub fn bar(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n+   |                               ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in the macro `gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_mod_gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider adding a type parameter\n    |\n-LL |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _set: &mut HashSet<i32>) {}\n-   |                     +++++++++++++++++++++++++++++            ~~~~~~~~~~~~~~~~~~~~\n+LL |         pub fn bar<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _set: &mut HashSet<i32>) {}\n+   |                   +++++++++++++++++++++++++++++            ~~~~~~~~~~~~~~~~~~~~\n \n error: parameter of type `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:81:63\n+  --> $DIR/implicit_hasher.rs:83:61\n    |\n-LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n-   |                                                               ^^^^^^^^^^^^\n-...\n-LL | gen!(fn bar);\n-   | ------------ in this macro invocation\n+LL |         pub fn bar(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n+   |                                                             ^^^^^^^^^^^^\n    |\n-   = note: this error originates in the macro `gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_mod_gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider adding a type parameter\n    |\n-LL |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32, S>) {}\n-   |                     +++++++++++++++++++++++++++++                                          ~~~~~~~~~~~~~~~\n+LL |         pub fn bar<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32, S>) {}\n+   |                   +++++++++++++++++++++++++++++                                          ~~~~~~~~~~~~~~~\n \n error: parameter of type `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:100:35\n+  --> $DIR/implicit_hasher.rs:101:35\n    |\n LL | pub async fn election_vote(_data: HashMap<i32, i32>) {}\n    |                                   ^^^^^^^^^^^^^^^^^"}, {"sha": "5aaa00f85172408d2ad539c27a95cd45cdfda50c", "filename": "tests/ui/inconsistent_struct_constructor.fixed", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Finconsistent_struct_constructor.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Finconsistent_struct_constructor.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_struct_constructor.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,29 +1,25 @@\n // run-rustfix\n+// aux-build:proc_macros.rs\n+\n #![warn(clippy::inconsistent_struct_constructor)]\n #![allow(clippy::redundant_field_names)]\n #![allow(clippy::unnecessary_operation)]\n #![allow(clippy::no_effect)]\n #![allow(dead_code)]\n \n+extern crate proc_macros;\n+\n #[derive(Default)]\n struct Foo {\n     x: i32,\n     y: i32,\n     z: i32,\n }\n \n-macro_rules! new_foo {\n-    () => {\n-        let x = 1;\n-        let y = 1;\n-        let z = 1;\n-        Foo { y, x, z }\n-    };\n-}\n-\n mod without_base {\n     use super::Foo;\n \n+    #[proc_macros::inline_macros]\n     fn test() {\n         let x = 1;\n         let y = 1;\n@@ -34,7 +30,12 @@ mod without_base {\n \n         // Should NOT lint.\n         // issue #7069.\n-        new_foo!();\n+        inline!({\n+            let x = 1;\n+            let y = 1;\n+            let z = 1;\n+            Foo { y, x, z }\n+        });\n \n         // Should NOT lint because the order is the same as in the definition.\n         Foo { x, y, z };"}, {"sha": "2b2dd7f59a4dab71dbf3962027434b9d4bf4b49d", "filename": "tests/ui/inconsistent_struct_constructor.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_struct_constructor.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,29 +1,25 @@\n // run-rustfix\n+// aux-build:proc_macros.rs\n+\n #![warn(clippy::inconsistent_struct_constructor)]\n #![allow(clippy::redundant_field_names)]\n #![allow(clippy::unnecessary_operation)]\n #![allow(clippy::no_effect)]\n #![allow(dead_code)]\n \n+extern crate proc_macros;\n+\n #[derive(Default)]\n struct Foo {\n     x: i32,\n     y: i32,\n     z: i32,\n }\n \n-macro_rules! new_foo {\n-    () => {\n-        let x = 1;\n-        let y = 1;\n-        let z = 1;\n-        Foo { y, x, z }\n-    };\n-}\n-\n mod without_base {\n     use super::Foo;\n \n+    #[proc_macros::inline_macros]\n     fn test() {\n         let x = 1;\n         let y = 1;\n@@ -34,7 +30,12 @@ mod without_base {\n \n         // Should NOT lint.\n         // issue #7069.\n-        new_foo!();\n+        inline!({\n+            let x = 1;\n+            let y = 1;\n+            let z = 1;\n+            Foo { y, x, z }\n+        });\n \n         // Should NOT lint because the order is the same as in the definition.\n         Foo { x, y, z };"}, {"sha": "785a6dc9d53adc21c81d78481f767890afe7dee7", "filename": "tests/ui/inconsistent_struct_constructor.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Finconsistent_struct_constructor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Finconsistent_struct_constructor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_struct_constructor.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,13 +1,13 @@\n error: struct constructor field order is inconsistent with struct definition field order\n-  --> $DIR/inconsistent_struct_constructor.rs:33:9\n+  --> $DIR/inconsistent_struct_constructor.rs:29:9\n    |\n LL |         Foo { y, x, z };\n    |         ^^^^^^^^^^^^^^^ help: try: `Foo { x, y, z }`\n    |\n    = note: `-D clippy::inconsistent-struct-constructor` implied by `-D warnings`\n \n error: struct constructor field order is inconsistent with struct definition field order\n-  --> $DIR/inconsistent_struct_constructor.rs:55:9\n+  --> $DIR/inconsistent_struct_constructor.rs:56:9\n    |\n LL | /         Foo {\n LL | |             z,"}, {"sha": "f09f8ae0ccc35eb40f7bf4ae4168c81af5116df6", "filename": "tests/ui/large_enum_variant.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,11 +1,11 @@\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![allow(dead_code)]\n #![allow(unused_variables)]\n #![warn(clippy::large_enum_variant)]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::external;\n \n enum LargeEnum {\n     A(i32),\n@@ -155,5 +155,10 @@ enum LargeEnumOfConst {\n }\n \n fn main() {\n-    large_enum_variant!();\n+    external!(\n+        enum LargeEnumInMacro {\n+            A(i32),\n+            B([i32; 8000]),\n+        }\n+    );\n }"}, {"sha": "15f7a099a7de5834ea8ce111d5eb0f2a492d259f", "filename": "tests/ui/macro_use_imports.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmacro_use_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmacro_use_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -20,7 +20,7 @@ mod a {\n     use mac;\n     use mini_mac::ClippyMiniMacroTest;\n     use mini_mac;\n-    use mac::{inner::foofoo, inner::try_err};\n+    use mac::{inner::mut_mut, inner::try_err};\n     use mac::inner;\n     use mac::inner::nested::string_add;\n     use mac::inner::nested;\n@@ -36,7 +36,7 @@ mod a {\n         let v: ty_macro!() = Vec::default();\n \n         inner::try_err!();\n-        inner::foofoo!();\n+        inner::mut_mut!();\n         nested::string_add!();\n     }\n }"}, {"sha": "b1a287332949019d7b13fe8ca22740a50cae3522", "filename": "tests/ui/macro_use_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmacro_use_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmacro_use_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -36,7 +36,7 @@ mod a {\n         let v: ty_macro!() = Vec::default();\n \n         inner::try_err!();\n-        inner::foofoo!();\n+        inner::mut_mut!();\n         nested::string_add!();\n     }\n }"}, {"sha": "68d558dede054ec7039fa7056eddaba2718886b9", "filename": "tests/ui/macro_use_imports.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmacro_use_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmacro_use_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -16,7 +16,7 @@ error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n   --> $DIR/macro_use_imports.rs:23:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{inner::foofoo, inner::try_err};`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{inner::mut_mut, inner::try_err};`\n \n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n   --> $DIR/macro_use_imports.rs:19:5"}, {"sha": "5aac5af26db566228d997f8ef3080927c1e461ff", "filename": "tests/ui/macro_use_imports_expect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmacro_use_imports_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmacro_use_imports_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports_expect.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -39,7 +39,7 @@ mod a {\n         let v: ty_macro!() = Vec::default();\n \n         inner::try_err!();\n-        inner::foofoo!();\n+        inner::mut_mut!();\n         nested::string_add!();\n     }\n }"}, {"sha": "5cc4a43af7e36ef6996a45a9d3a0510b29457b0d", "filename": "tests/ui/manual_async_fn.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmanual_async_fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmanual_async_fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -107,4 +107,10 @@ mod issue_5765 {\n     }\n }\n \n+pub async fn issue_10450() -> i32 { 42 }\n+\n+pub(crate) async fn issue_10450_2() -> i32 { 42 }\n+\n+pub(self) async fn issue_10450_3() -> i32 { 42 }\n+\n fn main() {}"}, {"sha": "ba504b8a8231f1147de9eb6966e0974c375dd0d0", "filename": "tests/ui/manual_async_fn.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -127,4 +127,16 @@ mod issue_5765 {\n     }\n }\n \n+pub fn issue_10450() -> impl Future<Output = i32> {\n+    async { 42 }\n+}\n+\n+pub(crate) fn issue_10450_2() -> impl Future<Output = i32> {\n+    async { 42 }\n+}\n+\n+pub(self) fn issue_10450_3() -> impl Future<Output = i32> {\n+    async { 42 }\n+}\n+\n fn main() {}"}, {"sha": "f5ee3eb7cccbaae20e84b4542989dd1550fd61aa", "filename": "tests/ui/manual_async_fn.stderr", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmanual_async_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmanual_async_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -161,5 +161,50 @@ help: move the body of the async block to the enclosing function\n LL | fn explicit<'a, 'b>(_: &'a i32, _: &'b i32) -> impl Future<Output = i32> + 'a + 'b { 42 }\n    |                                                                                    ~~~~~~\n \n-error: aborting due to 10 previous errors\n+error: this function can be simplified using the `async fn` syntax\n+  --> $DIR/manual_async_fn.rs:130:1\n+   |\n+LL | pub fn issue_10450() -> impl Future<Output = i32> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function `async` and return the output of the future directly\n+   |\n+LL | pub async fn issue_10450() -> i32 {\n+   | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+help: move the body of the async block to the enclosing function\n+   |\n+LL | pub fn issue_10450() -> impl Future<Output = i32> { 42 }\n+   |                                                   ~~~~~~\n+\n+error: this function can be simplified using the `async fn` syntax\n+  --> $DIR/manual_async_fn.rs:134:1\n+   |\n+LL | pub(crate) fn issue_10450_2() -> impl Future<Output = i32> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function `async` and return the output of the future directly\n+   |\n+LL | pub(crate) async fn issue_10450_2() -> i32 {\n+   | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+help: move the body of the async block to the enclosing function\n+   |\n+LL | pub(crate) fn issue_10450_2() -> impl Future<Output = i32> { 42 }\n+   |                                                            ~~~~~~\n+\n+error: this function can be simplified using the `async fn` syntax\n+  --> $DIR/manual_async_fn.rs:138:1\n+   |\n+LL | pub(self) fn issue_10450_3() -> impl Future<Output = i32> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function `async` and return the output of the future directly\n+   |\n+LL | pub(self) async fn issue_10450_3() -> i32 {\n+   | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+help: move the body of the async block to the enclosing function\n+   |\n+LL | pub(self) fn issue_10450_3() -> impl Future<Output = i32> { 42 }\n+   |                                                           ~~~~~~\n+\n+error: aborting due to 13 previous errors\n "}, {"sha": "cdfd8e4c3fe3eaffc5d1d25aa1dc91bc3d3b5011", "filename": "tests/ui/manual_clamp.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmanual_clamp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmanual_clamp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_clamp.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -326,3 +326,22 @@ fn msrv_1_50() {\n         input\n     };\n }\n+\n+const fn _const() {\n+    let (input, min, max) = (0, -1, 2);\n+    let _ = if input < min {\n+        min\n+    } else if input > max {\n+        max\n+    } else {\n+        input\n+    };\n+\n+    let mut x = input;\n+    if max < x {\n+        let x = max;\n+    }\n+    if min > x {\n+        x = min;\n+    }\n+}"}, {"sha": "50f46d6b355009c86df008215f0bda910e315c2c", "filename": "tests/ui/manual_main_separator_str.fixed", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmanual_main_separator_str.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmanual_main_separator_str.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_main_separator_str.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -0,0 +1,39 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::manual_main_separator_str)]\n+\n+use std::path::MAIN_SEPARATOR;\n+\n+fn len(s: &str) -> usize {\n+    s.len()\n+}\n+\n+struct U<'a> {\n+    f: &'a str,\n+    g: &'a String,\n+}\n+\n+struct V<T> {\n+    f: T,\n+}\n+\n+fn main() {\n+    // Should lint\n+    let _: &str = std::path::MAIN_SEPARATOR_STR;\n+    let _ = len(std::path::MAIN_SEPARATOR_STR);\n+    let _: Vec<u16> = std::path::MAIN_SEPARATOR_STR.encode_utf16().collect();\n+\n+    // Should lint for field `f` only\n+    let _ = U {\n+        f: std::path::MAIN_SEPARATOR_STR,\n+        g: &MAIN_SEPARATOR.to_string(),\n+    };\n+\n+    // Should not lint\n+    let _: &String = &MAIN_SEPARATOR.to_string();\n+    let _ = &MAIN_SEPARATOR.to_string();\n+    let _ = V {\n+        f: &MAIN_SEPARATOR.to_string(),\n+    };\n+}"}, {"sha": "2dbb9e66151d482b3a80241d52e78b871f45313b", "filename": "tests/ui/manual_main_separator_str.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmanual_main_separator_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmanual_main_separator_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_main_separator_str.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -0,0 +1,39 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::manual_main_separator_str)]\n+\n+use std::path::MAIN_SEPARATOR;\n+\n+fn len(s: &str) -> usize {\n+    s.len()\n+}\n+\n+struct U<'a> {\n+    f: &'a str,\n+    g: &'a String,\n+}\n+\n+struct V<T> {\n+    f: T,\n+}\n+\n+fn main() {\n+    // Should lint\n+    let _: &str = &MAIN_SEPARATOR.to_string();\n+    let _ = len(&MAIN_SEPARATOR.to_string());\n+    let _: Vec<u16> = MAIN_SEPARATOR.to_string().encode_utf16().collect();\n+\n+    // Should lint for field `f` only\n+    let _ = U {\n+        f: &MAIN_SEPARATOR.to_string(),\n+        g: &MAIN_SEPARATOR.to_string(),\n+    };\n+\n+    // Should not lint\n+    let _: &String = &MAIN_SEPARATOR.to_string();\n+    let _ = &MAIN_SEPARATOR.to_string();\n+    let _ = V {\n+        f: &MAIN_SEPARATOR.to_string(),\n+    };\n+}"}, {"sha": "e6cefde66a7d27b648287ba30210df2b3c5b9a1d", "filename": "tests/ui/manual_main_separator_str.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmanual_main_separator_str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmanual_main_separator_str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_main_separator_str.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -0,0 +1,28 @@\n+error: taking a reference on `std::path::MAIN_SEPARATOR` conversion to `String`\n+  --> $DIR/manual_main_separator_str.rs:23:19\n+   |\n+LL |     let _: &str = &MAIN_SEPARATOR.to_string();\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `std::path::MAIN_SEPARATOR_STR`\n+   |\n+   = note: `-D clippy::manual-main-separator-str` implied by `-D warnings`\n+\n+error: taking a reference on `std::path::MAIN_SEPARATOR` conversion to `String`\n+  --> $DIR/manual_main_separator_str.rs:24:17\n+   |\n+LL |     let _ = len(&MAIN_SEPARATOR.to_string());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `std::path::MAIN_SEPARATOR_STR`\n+\n+error: taking a reference on `std::path::MAIN_SEPARATOR` conversion to `String`\n+  --> $DIR/manual_main_separator_str.rs:25:23\n+   |\n+LL |     let _: Vec<u16> = MAIN_SEPARATOR.to_string().encode_utf16().collect();\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `std::path::MAIN_SEPARATOR_STR`\n+\n+error: taking a reference on `std::path::MAIN_SEPARATOR` conversion to `String`\n+  --> $DIR/manual_main_separator_str.rs:29:12\n+   |\n+LL |         f: &MAIN_SEPARATOR.to_string(),\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `std::path::MAIN_SEPARATOR_STR`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "1f6df1b0a86549318fab4113f9a9eefab781cc42", "filename": "tests/ui/manual_rem_euclid.fixed", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmanual_rem_euclid.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmanual_rem_euclid.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,19 +1,13 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::manual_rem_euclid)]\n #![allow(clippy::let_with_type_underscore)]\n \n-#[macro_use]\n-extern crate macro_rules;\n-\n-macro_rules! internal_rem_euclid {\n-    () => {\n-        let value: i32 = 5;\n-        let _: i32 = value.rem_euclid(4);\n-    };\n-}\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n+#[inline_macros]\n fn main() {\n     let value: i32 = 5;\n \n@@ -39,10 +33,16 @@ fn main() {\n     let _: i32 = ((4 % value) + 4) % 4;\n \n     // Lint in internal macros\n-    internal_rem_euclid!();\n+    inline!(\n+        let value: i32 = 5;\n+        let _: i32 = value.rem_euclid(4);\n+    );\n \n     // Do not lint in external macros\n-    manual_rem_euclid!();\n+    external!(\n+        let value: i32 = 5;\n+        let _: i32 = ((value % 4) + 4) % 4;\n+    );\n }\n \n // Should lint for params too"}, {"sha": "b275e8a38d21e540f2ac7a02e6720e9ff943180f", "filename": "tests/ui/manual_rem_euclid.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,19 +1,13 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::manual_rem_euclid)]\n #![allow(clippy::let_with_type_underscore)]\n \n-#[macro_use]\n-extern crate macro_rules;\n-\n-macro_rules! internal_rem_euclid {\n-    () => {\n-        let value: i32 = 5;\n-        let _: i32 = ((value % 4) + 4) % 4;\n-    };\n-}\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n+#[inline_macros]\n fn main() {\n     let value: i32 = 5;\n \n@@ -39,10 +33,16 @@ fn main() {\n     let _: i32 = ((4 % value) + 4) % 4;\n \n     // Lint in internal macros\n-    internal_rem_euclid!();\n+    inline!(\n+        let value: i32 = 5;\n+        let _: i32 = ((value % 4) + 4) % 4;\n+    );\n \n     // Do not lint in external macros\n-    manual_rem_euclid!();\n+    external!(\n+        let value: i32 = 5;\n+        let _: i32 = ((value % 4) + 4) % 4;\n+    );\n }\n \n // Should lint for params too"}, {"sha": "a43707f89c49e69765da409cd423e1ac16690ce9", "filename": "tests/ui/manual_rem_euclid.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmanual_rem_euclid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmanual_rem_euclid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,45 +1,42 @@\n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:20:18\n+  --> $DIR/manual_rem_euclid.rs:14:18\n    |\n LL |     let _: i32 = ((value % 4) + 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n    |\n    = note: `-D clippy::manual-rem-euclid` implied by `-D warnings`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:21:18\n+  --> $DIR/manual_rem_euclid.rs:15:18\n    |\n LL |     let _: i32 = (4 + (value % 4)) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:22:18\n+  --> $DIR/manual_rem_euclid.rs:16:18\n    |\n LL |     let _: i32 = (value % 4 + 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:23:18\n+  --> $DIR/manual_rem_euclid.rs:17:18\n    |\n LL |     let _: i32 = (4 + value % 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:24:22\n+  --> $DIR/manual_rem_euclid.rs:18:22\n    |\n LL |     let _: i32 = 1 + (4 + value % 4) % 4;\n    |                      ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:13:22\n+  --> $DIR/manual_rem_euclid.rs:38:22\n    |\n LL |         let _: i32 = ((value % 4) + 4) % 4;\n    |                      ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n-...\n-LL |     internal_rem_euclid!();\n-   |     ---------------------- in this macro invocation\n    |\n-   = note: this error originates in the macro `internal_rem_euclid` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_main` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: manual `rem_euclid` implementation\n   --> $DIR/manual_rem_euclid.rs:50:5"}, {"sha": "201301cc9b737cde9405996cbd617124f922d081", "filename": "tests/ui/match_single_binding.fixed", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmatch_single_binding.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmatch_single_binding.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,7 +1,12 @@\n // run-rustfix\n #![warn(clippy::match_single_binding)]\n-#![allow(unused_variables)]\n-#![allow(clippy::toplevel_ref_arg, clippy::uninlined_format_args)]\n+#![allow(\n+    unused,\n+    clippy::let_unit_value,\n+    clippy::no_effect,\n+    clippy::toplevel_ref_arg,\n+    clippy::uninlined_format_args\n+)]\n \n struct Point {\n     x: i32,\n@@ -109,10 +114,9 @@ fn main() {\n \n     // Lint\n     let x = 1;\n-    println!(\"Not an array index start\");\n+    println!(\"Not an array index start\")\n }\n \n-#[allow(dead_code)]\n fn issue_8723() {\n     let (mut val, idx) = (\"a b\", 1);\n \n@@ -125,16 +129,15 @@ fn issue_8723() {\n     let _ = val;\n }\n \n-#[allow(dead_code)]\n+fn side_effects() {}\n+\n fn issue_9575() {\n-    fn side_effects() {}\n     let _ = || {\n         side_effects();\n-        println!(\"Needs curlies\");\n+        println!(\"Needs curlies\")\n     };\n }\n \n-#[allow(dead_code)]\n fn issue_9725(r: Option<u32>) {\n     let x = r;\n     match x {\n@@ -146,3 +149,25 @@ fn issue_9725(r: Option<u32>) {\n         },\n     };\n }\n+\n+fn issue_10447() -> usize {\n+    ();\n+\n+    let a = ();\n+\n+    side_effects();\n+\n+    let b = side_effects();\n+\n+    println!(\"1\");\n+\n+    let c = println!(\"1\");\n+\n+    let in_expr = [\n+        (),\n+        side_effects(),\n+        println!(\"1\"),\n+    ];\n+\n+    2\n+}"}, {"sha": "8b047b19ce96882c606a794c56235108371e4991", "filename": "tests/ui/match_single_binding.rs", "status": "modified", "additions": 49, "deletions": 6, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,7 +1,12 @@\n // run-rustfix\n #![warn(clippy::match_single_binding)]\n-#![allow(unused_variables)]\n-#![allow(clippy::toplevel_ref_arg, clippy::uninlined_format_args)]\n+#![allow(\n+    unused,\n+    clippy::let_unit_value,\n+    clippy::no_effect,\n+    clippy::toplevel_ref_arg,\n+    clippy::uninlined_format_args\n+)]\n \n struct Point {\n     x: i32,\n@@ -127,7 +132,6 @@ fn main() {\n     }\n }\n \n-#[allow(dead_code)]\n fn issue_8723() {\n     let (mut val, idx) = (\"a b\", 1);\n \n@@ -141,15 +145,14 @@ fn issue_8723() {\n     let _ = val;\n }\n \n-#[allow(dead_code)]\n+fn side_effects() {}\n+\n fn issue_9575() {\n-    fn side_effects() {}\n     let _ = || match side_effects() {\n         _ => println!(\"Needs curlies\"),\n     };\n }\n \n-#[allow(dead_code)]\n fn issue_9725(r: Option<u32>) {\n     match r {\n         x => match x {\n@@ -162,3 +165,43 @@ fn issue_9725(r: Option<u32>) {\n         },\n     };\n }\n+\n+fn issue_10447() -> usize {\n+    match 1 {\n+        _ => (),\n+    }\n+\n+    let a = match 1 {\n+        _ => (),\n+    };\n+\n+    match 1 {\n+        _ => side_effects(),\n+    }\n+\n+    let b = match 1 {\n+        _ => side_effects(),\n+    };\n+\n+    match 1 {\n+        _ => println!(\"1\"),\n+    }\n+\n+    let c = match 1 {\n+        _ => println!(\"1\"),\n+    };\n+\n+    let in_expr = [\n+        match 1 {\n+            _ => (),\n+        },\n+        match 1 {\n+            _ => side_effects(),\n+        },\n+        match 1 {\n+            _ => println!(\"1\"),\n+        },\n+    ];\n+\n+    2\n+}"}, {"sha": "9d16af76c6af912fff2b500c9624b6f1ecb65dce", "filename": "tests/ui/match_single_binding.stderr", "status": "modified", "additions": 93, "deletions": 18, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmatch_single_binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmatch_single_binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:28:5\n+  --> $DIR/match_single_binding.rs:33:5\n    |\n LL | /     match (a, b, c) {\n LL | |         (x, y, z) => {\n@@ -18,7 +18,7 @@ LL +     }\n    |\n \n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:34:5\n+  --> $DIR/match_single_binding.rs:39:5\n    |\n LL | /     match (a, b, c) {\n LL | |         (x, y, z) => println!(\"{} {} {}\", x, y, z),\n@@ -32,15 +32,15 @@ LL +     println!(\"{} {} {}\", x, y, z);\n    |\n \n error: this match could be replaced by its body itself\n-  --> $DIR/match_single_binding.rs:51:5\n+  --> $DIR/match_single_binding.rs:56:5\n    |\n LL | /     match a {\n LL | |         _ => println!(\"whatever\"),\n LL | |     }\n    | |_____^ help: consider using the match body instead: `println!(\"whatever\");`\n \n error: this match could be replaced by its body itself\n-  --> $DIR/match_single_binding.rs:55:5\n+  --> $DIR/match_single_binding.rs:60:5\n    |\n LL | /     match a {\n LL | |         _ => {\n@@ -59,7 +59,7 @@ LL +     }\n    |\n \n error: this match could be replaced by its body itself\n-  --> $DIR/match_single_binding.rs:62:5\n+  --> $DIR/match_single_binding.rs:67:5\n    |\n LL | /     match a {\n LL | |         _ => {\n@@ -81,7 +81,7 @@ LL +     }\n    |\n \n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:72:5\n+  --> $DIR/match_single_binding.rs:77:5\n    |\n LL | /     match p {\n LL | |         Point { x, y } => println!(\"Coords: ({}, {})\", x, y),\n@@ -95,7 +95,7 @@ LL +     println!(\"Coords: ({}, {})\", x, y);\n    |\n \n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:76:5\n+  --> $DIR/match_single_binding.rs:81:5\n    |\n LL | /     match p {\n LL | |         Point { x: x1, y: y1 } => println!(\"Coords: ({}, {})\", x1, y1),\n@@ -109,7 +109,7 @@ LL +     println!(\"Coords: ({}, {})\", x1, y1);\n    |\n \n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:81:5\n+  --> $DIR/match_single_binding.rs:86:5\n    |\n LL | /     match x {\n LL | |         ref r => println!(\"Got a reference to {}\", r),\n@@ -123,7 +123,7 @@ LL +     println!(\"Got a reference to {}\", r);\n    |\n \n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:86:5\n+  --> $DIR/match_single_binding.rs:91:5\n    |\n LL | /     match x {\n LL | |         ref mut mr => println!(\"Got a mutable reference to {}\", mr),\n@@ -137,7 +137,7 @@ LL +     println!(\"Got a mutable reference to {}\", mr);\n    |\n \n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:90:5\n+  --> $DIR/match_single_binding.rs:95:5\n    |\n LL | /     let product = match coords() {\n LL | |         Point { x, y } => x * y,\n@@ -151,7 +151,7 @@ LL +     let product = x * y;\n    |\n \n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:98:18\n+  --> $DIR/match_single_binding.rs:103:18\n    |\n LL |           .map(|i| match i.unwrap() {\n    |  __________________^\n@@ -168,16 +168,16 @@ LL ~         })\n    |\n \n error: this match could be replaced by its body itself\n-  --> $DIR/match_single_binding.rs:124:5\n+  --> $DIR/match_single_binding.rs:129:5\n    |\n LL | /     match x {\n LL | |         // =>\n LL | |         _ => println!(\"Not an array index start\"),\n LL | |     }\n-   | |_____^ help: consider using the match body instead: `println!(\"Not an array index start\");`\n+   | |_____^ help: consider using the match body instead: `println!(\"Not an array index start\")`\n \n error: this assignment could be simplified\n-  --> $DIR/match_single_binding.rs:134:5\n+  --> $DIR/match_single_binding.rs:138:5\n    |\n LL | /     val = match val.split_at(idx) {\n LL | |         (pre, suf) => {\n@@ -197,7 +197,7 @@ LL ~     };\n    |\n \n error: this match could be replaced by its scrutinee and body\n-  --> $DIR/match_single_binding.rs:147:16\n+  --> $DIR/match_single_binding.rs:151:16\n    |\n LL |       let _ = || match side_effects() {\n    |  ________________^\n@@ -209,12 +209,12 @@ help: consider using the scrutinee and body instead\n    |\n LL ~     let _ = || {\n LL +         side_effects();\n-LL +         println!(\"Needs curlies\");\n+LL +         println!(\"Needs curlies\")\n LL ~     };\n    |\n \n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:154:5\n+  --> $DIR/match_single_binding.rs:157:5\n    |\n LL | /     match r {\n LL | |         x => match x {\n@@ -238,5 +238,80 @@ LL +         },\n LL ~     };\n    |\n \n-error: aborting due to 15 previous errors\n+error: this match could be replaced by its body itself\n+  --> $DIR/match_single_binding.rs:170:5\n+   |\n+LL | /     match 1 {\n+LL | |         _ => (),\n+LL | |     }\n+   | |_____^ help: consider using the match body instead: `();`\n+\n+error: this match could be replaced by its body itself\n+  --> $DIR/match_single_binding.rs:174:13\n+   |\n+LL |       let a = match 1 {\n+   |  _____________^\n+LL | |         _ => (),\n+LL | |     };\n+   | |_____^ help: consider using the match body instead: `()`\n+\n+error: this match could be replaced by its body itself\n+  --> $DIR/match_single_binding.rs:178:5\n+   |\n+LL | /     match 1 {\n+LL | |         _ => side_effects(),\n+LL | |     }\n+   | |_____^ help: consider using the match body instead: `side_effects();`\n+\n+error: this match could be replaced by its body itself\n+  --> $DIR/match_single_binding.rs:182:13\n+   |\n+LL |       let b = match 1 {\n+   |  _____________^\n+LL | |         _ => side_effects(),\n+LL | |     };\n+   | |_____^ help: consider using the match body instead: `side_effects()`\n+\n+error: this match could be replaced by its body itself\n+  --> $DIR/match_single_binding.rs:186:5\n+   |\n+LL | /     match 1 {\n+LL | |         _ => println!(\"1\"),\n+LL | |     }\n+   | |_____^ help: consider using the match body instead: `println!(\"1\");`\n+\n+error: this match could be replaced by its body itself\n+  --> $DIR/match_single_binding.rs:190:13\n+   |\n+LL |       let c = match 1 {\n+   |  _____________^\n+LL | |         _ => println!(\"1\"),\n+LL | |     };\n+   | |_____^ help: consider using the match body instead: `println!(\"1\")`\n+\n+error: this match could be replaced by its body itself\n+  --> $DIR/match_single_binding.rs:195:9\n+   |\n+LL | /         match 1 {\n+LL | |             _ => (),\n+LL | |         },\n+   | |_________^ help: consider using the match body instead: `()`\n+\n+error: this match could be replaced by its body itself\n+  --> $DIR/match_single_binding.rs:198:9\n+   |\n+LL | /         match 1 {\n+LL | |             _ => side_effects(),\n+LL | |         },\n+   | |_________^ help: consider using the match body instead: `side_effects()`\n+\n+error: this match could be replaced by its body itself\n+  --> $DIR/match_single_binding.rs:201:9\n+   |\n+LL | /         match 1 {\n+LL | |             _ => println!(\"1\"),\n+LL | |         },\n+   | |_________^ help: consider using the match body instead: `println!(\"1\")`\n+\n+error: aborting due to 24 previous errors\n "}, {"sha": "e3cf56a4293cc81803d96356ecfde77d566c2e66", "filename": "tests/ui/match_single_binding2.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmatch_single_binding2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmatch_single_binding2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding2.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -30,7 +30,7 @@ fn main() {\n         #[rustfmt::skip]\n         Some((first, _second)) => {\n             let (a, b) = get_tup();\n-            println!(\"a {:?} and b {:?}\", a, b);\n+            println!(\"a {:?} and b {:?}\", a, b)\n         },\n         None => println!(\"nothing\"),\n     }\n@@ -49,5 +49,5 @@ fn main() {\n         0 => 1,\n         _ => 2,\n     };\n-    println!(\"Single branch\");\n+    println!(\"Single branch\")\n }"}, {"sha": "e180b93e76d7bce23ee6b9ab18fe30dab95a93f0", "filename": "tests/ui/match_single_binding2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmatch_single_binding2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmatch_single_binding2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding2.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -27,7 +27,7 @@ LL | |             }\n help: consider using a `let` statement\n    |\n LL ~             let (a, b) = get_tup();\n-LL +             println!(\"a {:?} and b {:?}\", a, b);\n+LL +             println!(\"a {:?} and b {:?}\", a, b)\n    |\n \n error: this match could be replaced by its scrutinee and body\n@@ -61,7 +61,7 @@ LL ~     match x {\n LL +         0 => 1,\n LL +         _ => 2,\n LL +     };\n-LL +     println!(\"Single branch\");\n+LL +     println!(\"Single branch\")\n    |\n \n error: aborting due to 4 previous errors"}, {"sha": "3932e7d00c19dd09b8b3c0e078cac0ad38ec20c6", "filename": "tests/ui/mem_replace_macro.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmem_replace_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmem_replace_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace_macro.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,21 +1,12 @@\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n #![warn(clippy::mem_replace_with_default)]\n \n-#[macro_use]\n-extern crate macro_rules;\n-\n-macro_rules! take {\n-    ($s:expr) => {\n-        std::mem::replace($s, Default::default())\n-    };\n-}\n-\n-fn replace_with_default() {\n-    let s = &mut String::from(\"foo\");\n-    take!(s);\n-    take_external!(s);\n-}\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n+#[inline_macros]\n fn main() {\n-    replace_with_default();\n+    let s = &mut String::from(\"foo\");\n+    inline!(std::mem::replace($s, Default::default()));\n+    external!(std::mem::replace($s, Default::default()));\n }"}, {"sha": "35dda93da3d03d9ecc28b482bd2f26fbbe213dd3", "filename": "tests/ui/mem_replace_macro.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmem_replace_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmem_replace_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace_macro.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,14 +1,11 @@\n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace_macro.rs:9:9\n+  --> $DIR/mem_replace_macro.rs:10:13\n    |\n-LL |         std::mem::replace($s, Default::default())\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL |     take!(s);\n-   |     -------- in this macro invocation\n+LL |     inline!(std::mem::replace($s, Default::default()));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::mem-replace-with-default` implied by `-D warnings`\n-   = note: this error originates in the macro `take` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_main` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "e6f88c6e622cbd968db481d445d276478e894e84", "filename": "tests/ui/missing_const_for_fn/cant_be_const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -3,15 +3,15 @@\n //! The .stderr output of this test should be empty. Otherwise it's a bug somewhere.\n \n // aux-build:helper.rs\n-// aux-build:../../auxiliary/proc_macro_with_span.rs\n+// aux-build:../../auxiliary/proc_macros.rs\n \n #![warn(clippy::missing_const_for_fn)]\n #![feature(start)]\n \n extern crate helper;\n-extern crate proc_macro_with_span;\n+extern crate proc_macros;\n \n-use proc_macro_with_span::with_span;\n+use proc_macros::with_span;\n \n struct Game;\n "}, {"sha": "5752048949ca452d820a72a511b246dae3ee27dd", "filename": "tests/ui/missing_doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_doc.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n // needs-asm-support\n-// aux-build: proc_macro_with_span.rs\n+// aux-build: proc_macros.rs\n \n #![warn(clippy::missing_docs_in_private_items)]\n // When denying at the crate level, be sure to not get random warnings from the\n@@ -8,9 +8,9 @@\n //! Some garbage docs for the crate here\n #![doc = \"More garbage\"]\n \n-extern crate proc_macro_with_span;\n+extern crate proc_macros;\n \n-use proc_macro_with_span::with_span;\n+use proc_macros::with_span;\n use std::arch::global_asm;\n \n type Typedef = String;"}, {"sha": "e2d49b0907d5792d4b6d67932e9152b2a0f17f43", "filename": "tests/ui/missing_doc_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmissing_doc_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmissing_doc_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_doc_impl.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,4 +1,4 @@\n-// aux-build: proc_macro_with_span.rs\n+// aux-build: proc_macros.rs\n \n #![warn(clippy::missing_docs_in_private_items)]\n #![allow(dead_code)]\n@@ -7,8 +7,8 @@\n //! Some garbage docs for the crate here\n #![doc = \"More garbage\"]\n \n-extern crate proc_macro_with_span;\n-use proc_macro_with_span::with_span;\n+extern crate proc_macros;\n+use proc_macros::with_span;\n \n struct Foo {\n     a: isize,"}, {"sha": "9a47d7c56ed1e410715e6878050c7706e14e9a48", "filename": "tests/ui/mistyped_literal_suffix.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmistyped_literal_suffix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmistyped_literal_suffix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmistyped_literal_suffix.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-// aux-build: proc_macro_with_span.rs\n+// aux-build: proc_macros.rs\n \n #![allow(\n     dead_code,\n@@ -10,8 +10,8 @@\n     clippy::unusual_byte_groupings\n )]\n \n-extern crate proc_macro_with_span;\n-use proc_macro_with_span::with_span;\n+extern crate proc_macros;\n+use proc_macros::with_span;\n \n fn main() {\n     let fail14 = 2_i32;"}, {"sha": "04261cba55aa4d1bf1d5fd12fa24778a27b57fb7", "filename": "tests/ui/mistyped_literal_suffix.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmistyped_literal_suffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmistyped_literal_suffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmistyped_literal_suffix.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-// aux-build: proc_macro_with_span.rs\n+// aux-build: proc_macros.rs\n \n #![allow(\n     dead_code,\n@@ -10,8 +10,8 @@\n     clippy::unusual_byte_groupings\n )]\n \n-extern crate proc_macro_with_span;\n-use proc_macro_with_span::with_span;\n+extern crate proc_macros;\n+use proc_macros::with_span;\n \n fn main() {\n     let fail14 = 2_32;"}, {"sha": "9082f1675a8759cf8eac494ca09adaa1eae1a79f", "filename": "tests/ui/multiple_unsafe_ops_per_block.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,12 +1,12 @@\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n #![allow(unused)]\n #![allow(deref_nullptr)]\n #![allow(clippy::unnecessary_operation)]\n #![allow(clippy::drop_copy)]\n #![warn(clippy::multiple_unsafe_ops_per_block)]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::external;\n \n use core::arch::asm;\n \n@@ -113,7 +113,10 @@ unsafe fn read_char_good(ptr: *const u8) -> char {\n \n // no lint\n fn issue10259() {\n-    unsafe_macro!();\n+    external!(unsafe {\n+        *core::ptr::null::<()>();\n+        *core::ptr::null::<()>();\n+    });\n }\n \n fn _fn_ptr(x: unsafe fn()) {"}, {"sha": "badc284ec423e9b61b59efcbc31040f35822be2e", "filename": "tests/ui/multiple_unsafe_ops_per_block.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmultiple_unsafe_ops_per_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmultiple_unsafe_ops_per_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmultiple_unsafe_ops_per_block.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -126,7 +126,7 @@ LL |     unsafe { char::from_u32_unchecked(*ptr.cast::<u32>()) }\n    |                                       ^^^^^^^^^^^^^^^^^^\n \n error: this `unsafe` block contains 2 unsafe operations, expected only one\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:120:5\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:123:5\n    |\n LL | /     unsafe {\n LL | |         x();\n@@ -135,18 +135,18 @@ LL | |     }\n    | |_____^\n    |\n note: unsafe function call occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:121:9\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:124:9\n    |\n LL |         x();\n    |         ^^^\n note: unsafe function call occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:122:9\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:125:9\n    |\n LL |         x();\n    |         ^^^\n \n error: this `unsafe` block contains 2 unsafe operations, expected only one\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:131:9\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:134:9\n    |\n LL | /         unsafe {\n LL | |             T::X();\n@@ -155,18 +155,18 @@ LL | |         }\n    | |_________^\n    |\n note: unsafe function call occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:132:13\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:135:13\n    |\n LL |             T::X();\n    |             ^^^^^^\n note: unsafe function call occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:133:13\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:136:13\n    |\n LL |             T::X();\n    |             ^^^^^^\n \n error: this `unsafe` block contains 2 unsafe operations, expected only one\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:141:5\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:144:5\n    |\n LL | /     unsafe {\n LL | |         x.0();\n@@ -175,12 +175,12 @@ LL | |     }\n    | |_____^\n    |\n note: unsafe function call occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:142:9\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:145:9\n    |\n LL |         x.0();\n    |         ^^^^^\n note: unsafe function call occurs here\n-  --> $DIR/multiple_unsafe_ops_per_block.rs:143:9\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:146:9\n    |\n LL |         x.0();\n    |         ^^^^^"}, {"sha": "b7d375ff80e117d2e864ce337f81d605262e0372", "filename": "tests/ui/must_use_unit.fixed", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmust_use_unit.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmust_use_unit.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmust_use_unit.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,11 +1,11 @@\n //run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::must_use_unit)]\n #![allow(clippy::unused_unit)]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::external;\n \n \n pub fn must_use_default() {}\n@@ -22,5 +22,8 @@ fn main() {\n     must_use_with_note();\n \n     // We should not lint in external macros\n-    must_use_unit!();\n+    external!(\n+        #[must_use]\n+        fn foo() {}\n+    );\n }"}, {"sha": "74d6b4ca865cde4fe83e48784024dff269f3cf9b", "filename": "tests/ui/must_use_unit.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmust_use_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmust_use_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmust_use_unit.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,11 +1,11 @@\n //run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::must_use_unit)]\n #![allow(clippy::unused_unit)]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::external;\n \n #[must_use]\n pub fn must_use_default() {}\n@@ -22,5 +22,8 @@ fn main() {\n     must_use_with_note();\n \n     // We should not lint in external macros\n-    must_use_unit!();\n+    external!(\n+        #[must_use]\n+        fn foo() {}\n+    );\n }"}, {"sha": "06bb085442a793b328f8887a99bfc7d8519e8444", "filename": "tests/ui/mut_mut.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mut.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,10 +1,10 @@\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n #![warn(clippy::mut_mut)]\n #![allow(unused)]\n #![allow(clippy::no_effect, clippy::uninlined_format_args, clippy::unnecessary_operation)]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n fn fun(x: &mut &mut u32) -> bool {\n     **x > 0\n@@ -21,6 +21,7 @@ macro_rules! mut_ptr {\n }\n \n #[allow(unused_mut, unused_variables)]\n+#[inline_macros]\n fn main() {\n     let mut x = &mut &mut 1u32;\n     {\n@@ -37,7 +38,7 @@ fn main() {\n         ***y + **x;\n     }\n \n-    let mut z = mut_ptr!(&mut 3u32);\n+    let mut z = inline!(&mut $(&mut 3u32));\n }\n \n fn issue939() {\n@@ -55,7 +56,7 @@ fn issue939() {\n \n fn issue6922() {\n     // do not lint from an external macro\n-    mut_mut!();\n+    external!(let mut_mut_ty: &mut &mut u32 = &mut &mut 1u32;);\n }\n \n mod issue9035 {"}, {"sha": "93b857eb207480398c4e6494dd1a52458063b6fa", "filename": "tests/ui/mut_mut.stderr", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmut_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fmut_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mut.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -7,54 +7,51 @@ LL | fn fun(x: &mut &mut u32) -> bool {\n    = note: `-D clippy::mut-mut` implied by `-D warnings`\n \n error: generally you want to avoid `&mut &mut _` if possible\n-  --> $DIR/mut_mut.rs:25:17\n+  --> $DIR/mut_mut.rs:26:17\n    |\n LL |     let mut x = &mut &mut 1u32;\n    |                 ^^^^^^^^^^^^^^\n \n error: generally you want to avoid `&mut &mut _` if possible\n-  --> $DIR/mut_mut.rs:19:9\n+  --> $DIR/mut_mut.rs:41:25\n    |\n-LL |         &mut $p\n-   |         ^^^^^^^\n-...\n-LL |     let mut z = mut_ptr!(&mut 3u32);\n-   |                 ------------------- in this macro invocation\n+LL |     let mut z = inline!(&mut $(&mut 3u32));\n+   |                         ^\n    |\n-   = note: this error originates in the macro `mut_ptr` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_main` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this expression mutably borrows a mutable reference. Consider reborrowing\n-  --> $DIR/mut_mut.rs:27:21\n+  --> $DIR/mut_mut.rs:28:21\n    |\n LL |         let mut y = &mut x;\n    |                     ^^^^^^\n \n error: generally you want to avoid `&mut &mut _` if possible\n-  --> $DIR/mut_mut.rs:31:32\n+  --> $DIR/mut_mut.rs:32:32\n    |\n LL |         let y: &mut &mut u32 = &mut &mut 2;\n    |                                ^^^^^^^^^^^\n \n error: generally you want to avoid `&mut &mut _` if possible\n-  --> $DIR/mut_mut.rs:31:16\n+  --> $DIR/mut_mut.rs:32:16\n    |\n LL |         let y: &mut &mut u32 = &mut &mut 2;\n    |                ^^^^^^^^^^^^^\n \n error: generally you want to avoid `&mut &mut _` if possible\n-  --> $DIR/mut_mut.rs:36:37\n+  --> $DIR/mut_mut.rs:37:37\n    |\n LL |         let y: &mut &mut &mut u32 = &mut &mut &mut 2;\n    |                                     ^^^^^^^^^^^^^^^^\n \n error: generally you want to avoid `&mut &mut _` if possible\n-  --> $DIR/mut_mut.rs:36:16\n+  --> $DIR/mut_mut.rs:37:16\n    |\n LL |         let y: &mut &mut &mut u32 = &mut &mut &mut 2;\n    |                ^^^^^^^^^^^^^^^^^^\n \n error: generally you want to avoid `&mut &mut _` if possible\n-  --> $DIR/mut_mut.rs:36:21\n+  --> $DIR/mut_mut.rs:37:21\n    |\n LL |         let y: &mut &mut &mut u32 = &mut &mut &mut 2;\n    |                     ^^^^^^^^^^^^^"}, {"sha": "86d899bb46c361bc2856f1ffc18c24249470d2ea", "filename": "tests/ui/needless_late_init.fixed", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fneedless_late_init.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fneedless_late_init.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+// aux-build:proc_macros.rs\n #![feature(let_chains)]\n #![allow(unused)]\n #![allow(\n@@ -10,6 +11,8 @@\n     clippy::uninlined_format_args\n )]\n \n+extern crate proc_macros;\n+\n use std::collections::{BTreeMap, BTreeSet, HashMap, HashSet};\n use std::rc::Rc;\n \n@@ -138,6 +141,7 @@ const fn in_const() -> &'static str {\n     a\n }\n \n+#[proc_macros::inline_macros]\n fn does_not_lint() {\n     let z;\n     if false {\n@@ -195,35 +199,27 @@ fn does_not_lint() {\n     }\n     y = 3;\n \n-    macro_rules! assign {\n-        ($i:ident) => {\n-            $i = 1;\n-        };\n-    }\n     let x;\n-    assign!(x);\n+    inline!($x = 1;);\n \n     let x;\n     if true {\n-        assign!(x);\n+        inline!($x = 1;);\n     } else {\n         x = 2;\n     }\n \n-    macro_rules! in_macro {\n-        () => {\n-            let x;\n-            x = 1;\n+    inline!({\n+        let x;\n+        x = 1;\n \n-            let x;\n-            if true {\n-                x = 1;\n-            } else {\n-                x = 2;\n-            }\n-        };\n-    }\n-    in_macro!();\n+        let x;\n+        if true {\n+            x = 1;\n+        } else {\n+            x = 2;\n+        }\n+    });\n \n     // ignore if-lets - https://github.com/rust-lang/rust-clippy/issues/8613\n     let x;"}, {"sha": "969afb38edf2ea1c2a5d36e8737104cfc4283efb", "filename": "tests/ui/needless_late_init.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+// aux-build:proc_macros.rs\n #![feature(let_chains)]\n #![allow(unused)]\n #![allow(\n@@ -10,6 +11,8 @@\n     clippy::uninlined_format_args\n )]\n \n+extern crate proc_macros;\n+\n use std::collections::{BTreeMap, BTreeSet, HashMap, HashSet};\n use std::rc::Rc;\n \n@@ -138,6 +141,7 @@ const fn in_const() -> &'static str {\n     a\n }\n \n+#[proc_macros::inline_macros]\n fn does_not_lint() {\n     let z;\n     if false {\n@@ -195,35 +199,27 @@ fn does_not_lint() {\n     }\n     y = 3;\n \n-    macro_rules! assign {\n-        ($i:ident) => {\n-            $i = 1;\n-        };\n-    }\n     let x;\n-    assign!(x);\n+    inline!($x = 1;);\n \n     let x;\n     if true {\n-        assign!(x);\n+        inline!($x = 1;);\n     } else {\n         x = 2;\n     }\n \n-    macro_rules! in_macro {\n-        () => {\n-            let x;\n-            x = 1;\n+    inline!({\n+        let x;\n+        x = 1;\n \n-            let x;\n-            if true {\n-                x = 1;\n-            } else {\n-                x = 2;\n-            }\n-        };\n-    }\n-    in_macro!();\n+        let x;\n+        if true {\n+            x = 1;\n+        } else {\n+            x = 2;\n+        }\n+    });\n \n     // ignore if-lets - https://github.com/rust-lang/rust-clippy/issues/8613\n     let x;"}, {"sha": "eff782f8bf1049be24fe76399290cc81aaa1090a", "filename": "tests/ui/needless_late_init.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fneedless_late_init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fneedless_late_init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:24:5\n+  --> $DIR/needless_late_init.rs:27:5\n    |\n LL |     let a;\n    |     ^^^^^^ created here\n@@ -13,7 +13,7 @@ LL |     let a = \"zero\";\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:27:5\n+  --> $DIR/needless_late_init.rs:30:5\n    |\n LL |     let b;\n    |     ^^^^^^ created here\n@@ -27,7 +27,7 @@ LL |     let b = 1;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:28:5\n+  --> $DIR/needless_late_init.rs:31:5\n    |\n LL |     let c;\n    |     ^^^^^^ created here\n@@ -41,7 +41,7 @@ LL |     let c = 2;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:32:5\n+  --> $DIR/needless_late_init.rs:35:5\n    |\n LL |     let d: usize;\n    |     ^^^^^^^^^^^^^ created here\n@@ -54,7 +54,7 @@ LL |     let d: usize = 1;\n    |     ~~~~~~~~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:35:5\n+  --> $DIR/needless_late_init.rs:38:5\n    |\n LL |     let e;\n    |     ^^^^^^ created here\n@@ -67,7 +67,7 @@ LL |     let e = format!(\"{}\", d);\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:40:5\n+  --> $DIR/needless_late_init.rs:43:5\n    |\n LL |     let a;\n    |     ^^^^^^\n@@ -88,7 +88,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:49:5\n+  --> $DIR/needless_late_init.rs:52:5\n    |\n LL |     let b;\n    |     ^^^^^^\n@@ -109,7 +109,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:56:5\n+  --> $DIR/needless_late_init.rs:59:5\n    |\n LL |     let d;\n    |     ^^^^^^\n@@ -130,7 +130,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:64:5\n+  --> $DIR/needless_late_init.rs:67:5\n    |\n LL |     let e;\n    |     ^^^^^^\n@@ -151,7 +151,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:71:5\n+  --> $DIR/needless_late_init.rs:74:5\n    |\n LL |     let f;\n    |     ^^^^^^\n@@ -167,7 +167,7 @@ LL +         1 => \"three\",\n    |\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:77:5\n+  --> $DIR/needless_late_init.rs:80:5\n    |\n LL |     let g: usize;\n    |     ^^^^^^^^^^^^^\n@@ -187,7 +187,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:85:5\n+  --> $DIR/needless_late_init.rs:88:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -201,7 +201,7 @@ LL |     let x = 1;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:89:5\n+  --> $DIR/needless_late_init.rs:92:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -215,7 +215,7 @@ LL |     let x = SignificantDrop;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:93:5\n+  --> $DIR/needless_late_init.rs:96:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -229,7 +229,7 @@ LL |     let x = SignificantDrop;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:112:5\n+  --> $DIR/needless_late_init.rs:115:5\n    |\n LL |     let a;\n    |     ^^^^^^\n@@ -250,7 +250,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:129:5\n+  --> $DIR/needless_late_init.rs:132:5\n    |\n LL |     let a;\n    |     ^^^^^^"}, {"sha": "e6ead69d148e8dc49c8df3739d4f0176cd3bf385", "filename": "tests/ui/needless_lifetimes.fixed", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fneedless_lifetimes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fneedless_lifetimes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::needless_lifetimes)]\n #![allow(\n@@ -12,8 +12,8 @@\n     clippy::get_first\n )]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::inline_macros;\n \n fn distinct_lifetimes(_x: &u8, _y: &u8, _z: u8) {}\n \n@@ -502,30 +502,29 @@ mod pr_9743_output_lifetime_checks {\n     }\n }\n \n+#[inline_macros]\n mod in_macro {\n-    macro_rules! local_one_input_macro {\n-        () => {\n-            fn one_input(x: &u8) -> &u8 {\n-                unimplemented!()\n-            }\n-        };\n-    }\n+    use proc_macros::external;\n \n     // lint local macro expands to function with needless lifetimes\n-    local_one_input_macro!();\n+    inline! {\n+        fn one_input(x: &u8) -> &u8 {\n+            unimplemented!()\n+        }\n+    }\n \n     // no lint on external macro\n-    macro_rules::needless_lifetime!();\n-\n-    macro_rules! expanded_lifetime {\n-        ($l:lifetime) => {\n-            fn f<$l>(arg: &$l str) -> &$l str {\n-                arg\n-            }\n+    external! {\n+        fn needless_lifetime<'a>(x: &'a u8) -> &'a u8 {\n+            unimplemented!()\n         }\n     }\n \n-    expanded_lifetime!('a);\n+    inline! {\n+        fn f<$'a>(arg: &$'a str) -> &$'a str {\n+            arg\n+        }\n+    }\n }\n \n mod issue5787 {"}, {"sha": "06eb430506f9f74222dd24b9196211c6c7729572", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::needless_lifetimes)]\n #![allow(\n@@ -12,8 +12,8 @@\n     clippy::get_first\n )]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::inline_macros;\n \n fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) {}\n \n@@ -502,30 +502,29 @@ mod pr_9743_output_lifetime_checks {\n     }\n }\n \n+#[inline_macros]\n mod in_macro {\n-    macro_rules! local_one_input_macro {\n-        () => {\n-            fn one_input<'a>(x: &'a u8) -> &'a u8 {\n-                unimplemented!()\n-            }\n-        };\n-    }\n+    use proc_macros::external;\n \n     // lint local macro expands to function with needless lifetimes\n-    local_one_input_macro!();\n+    inline! {\n+        fn one_input<'a>(x: &'a u8) -> &'a u8 {\n+            unimplemented!()\n+        }\n+    }\n \n     // no lint on external macro\n-    macro_rules::needless_lifetime!();\n-\n-    macro_rules! expanded_lifetime {\n-        ($l:lifetime) => {\n-            fn f<$l>(arg: &$l str) -> &$l str {\n-                arg\n-            }\n+    external! {\n+        fn needless_lifetime<'a>(x: &'a u8) -> &'a u8 {\n+            unimplemented!()\n         }\n     }\n \n-    expanded_lifetime!('a);\n+    inline! {\n+        fn f<$'a>(arg: &$'a str) -> &$'a str {\n+            arg\n+        }\n+    }\n }\n \n mod issue5787 {"}, {"sha": "86acc4e00469ff5a4c946d61c0b3707575a81271", "filename": "tests/ui/needless_lifetimes.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fneedless_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fneedless_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -540,19 +540,16 @@ LL +     fn multiple_inputs_output_not_elided<'b>(x: &u8, y: &'b u8, z: &'b u8)\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:508:13\n+  --> $DIR/needless_lifetimes.rs:511:9\n    |\n-LL |             fn one_input<'a>(x: &'a u8) -> &'a u8 {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL |     local_one_input_macro!();\n-   |     ------------------------ in this macro invocation\n+LL |         fn one_input<'a>(x: &'a u8) -> &'a u8 {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in the macro `local_one_input_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_mod_in_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: elide the lifetimes\n    |\n-LL -             fn one_input<'a>(x: &'a u8) -> &'a u8 {\n-LL +             fn one_input(x: &u8) -> &u8 {\n+LL -         fn one_input<'a>(x: &'a u8) -> &'a u8 {\n+LL +         fn one_input(x: &u8) -> &u8 {\n    |\n \n error: aborting due to 46 previous errors"}, {"sha": "4e8517cad1006805621a0a2760b161bad4e7e4c8", "filename": "tests/ui/needless_update.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_update.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::needless_update)]\n-#![allow(clippy::no_effect)]\n+#![allow(clippy::no_effect, clippy::unnecessary_struct_initialization)]\n \n struct S {\n     pub a: i32,"}, {"sha": "1e42e1fbabfeb654a31088c344a18185583554e9", "filename": "tests/ui/no_effect.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,7 +1,12 @@\n #![feature(fn_traits, unboxed_closures)]\n #![warn(clippy::no_effect_underscore_binding)]\n #![allow(dead_code, path_statements)]\n-#![allow(clippy::deref_addrof, clippy::redundant_field_names, clippy::uninlined_format_args)]\n+#![allow(\n+    clippy::deref_addrof,\n+    clippy::redundant_field_names,\n+    clippy::uninlined_format_args,\n+    clippy::unnecessary_struct_initialization\n+)]\n \n struct Unit;\n struct Tuple(i32);"}, {"sha": "f10f2bcf2a8a0bfa27366425b324091c4b87ee1d", "filename": "tests/ui/no_effect.stderr", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fno_effect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fno_effect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,177 +1,177 @@\n error: statement with no effect\n-  --> $DIR/no_effect.rs:92:5\n+  --> $DIR/no_effect.rs:97:5\n    |\n LL |     0;\n    |     ^^\n    |\n    = note: `-D clippy::no-effect` implied by `-D warnings`\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:93:5\n+  --> $DIR/no_effect.rs:98:5\n    |\n LL |     s2;\n    |     ^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:94:5\n+  --> $DIR/no_effect.rs:99:5\n    |\n LL |     Unit;\n    |     ^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:95:5\n+  --> $DIR/no_effect.rs:100:5\n    |\n LL |     Tuple(0);\n    |     ^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:96:5\n+  --> $DIR/no_effect.rs:101:5\n    |\n LL |     Struct { field: 0 };\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:97:5\n+  --> $DIR/no_effect.rs:102:5\n    |\n LL |     Struct { ..s };\n    |     ^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:98:5\n+  --> $DIR/no_effect.rs:103:5\n    |\n LL |     Union { a: 0 };\n    |     ^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:99:5\n+  --> $DIR/no_effect.rs:104:5\n    |\n LL |     Enum::Tuple(0);\n    |     ^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:100:5\n+  --> $DIR/no_effect.rs:105:5\n    |\n LL |     Enum::Struct { field: 0 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:101:5\n+  --> $DIR/no_effect.rs:106:5\n    |\n LL |     5 + 6;\n    |     ^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:102:5\n+  --> $DIR/no_effect.rs:107:5\n    |\n LL |     *&42;\n    |     ^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:103:5\n+  --> $DIR/no_effect.rs:108:5\n    |\n LL |     &6;\n    |     ^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:104:5\n+  --> $DIR/no_effect.rs:109:5\n    |\n LL |     (5, 6, 7);\n    |     ^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:105:5\n+  --> $DIR/no_effect.rs:110:5\n    |\n LL |     ..;\n    |     ^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:106:5\n+  --> $DIR/no_effect.rs:111:5\n    |\n LL |     5..;\n    |     ^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:107:5\n+  --> $DIR/no_effect.rs:112:5\n    |\n LL |     ..5;\n    |     ^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:108:5\n+  --> $DIR/no_effect.rs:113:5\n    |\n LL |     5..6;\n    |     ^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:109:5\n+  --> $DIR/no_effect.rs:114:5\n    |\n LL |     5..=6;\n    |     ^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:110:5\n+  --> $DIR/no_effect.rs:115:5\n    |\n LL |     [42, 55];\n    |     ^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:111:5\n+  --> $DIR/no_effect.rs:116:5\n    |\n LL |     [42, 55][1];\n    |     ^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:112:5\n+  --> $DIR/no_effect.rs:117:5\n    |\n LL |     (42, 55).1;\n    |     ^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:113:5\n+  --> $DIR/no_effect.rs:118:5\n    |\n LL |     [42; 55];\n    |     ^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:114:5\n+  --> $DIR/no_effect.rs:119:5\n    |\n LL |     [42; 55][13];\n    |     ^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:116:5\n+  --> $DIR/no_effect.rs:121:5\n    |\n LL |     || x += 5;\n    |     ^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:118:5\n+  --> $DIR/no_effect.rs:123:5\n    |\n LL |     FooString { s: s };\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:119:5\n+  --> $DIR/no_effect.rs:124:5\n    |\n LL |     let _unused = 1;\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::no-effect-underscore-binding` implied by `-D warnings`\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:120:5\n+  --> $DIR/no_effect.rs:125:5\n    |\n LL |     let _penguin = || println!(\"Some helpful closure\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:121:5\n+  --> $DIR/no_effect.rs:126:5\n    |\n LL |     let _duck = Struct { field: 0 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:122:5\n+  --> $DIR/no_effect.rs:127:5\n    |\n LL |     let _cat = [2, 4, 6, 8][2];\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "d18dec22a8bbe1a1449689599165e7484a48c6fa", "filename": "tests/ui/no_mangle_with_rust_abi.fixed", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b6495af39afb4618147636c1b6c4afba7751393f/tests%2Fui%2Fno_mangle_with_rust_abi.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b6495af39afb4618147636c1b6c4afba7751393f/tests%2Fui%2Fno_mangle_with_rust_abi.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_mangle_with_rust_abi.fixed?ref=b6495af39afb4618147636c1b6c4afba7751393f", "patch": "@@ -1,48 +0,0 @@\n-// run-rustfix\n-\n-#![allow(unused)]\n-#![warn(clippy::no_mangle_with_rust_abi)]\n-\n-#[no_mangle]\n-extern \"C\" fn rust_abi_fn_one(arg_one: u32, arg_two: usize) {}\n-\n-#[no_mangle]\n-pub extern \"C\" fn rust_abi_fn_two(arg_one: u32, arg_two: usize) {}\n-\n-/// # Safety\n-/// This function shouldn't be called unless the horsemen are ready\n-#[no_mangle]\n-pub unsafe extern \"C\" fn rust_abi_fn_three(arg_one: u32, arg_two: usize) {}\n-\n-/// # Safety\n-/// This function shouldn't be called unless the horsemen are ready\n-#[no_mangle]\n-unsafe extern \"C\" fn rust_abi_fn_four(arg_one: u32, arg_two: usize) {}\n-\n-#[no_mangle]\n-extern \"C\" fn rust_abi_multiline_function_really_long_name_to_overflow_args_to_multiple_lines(\n-    arg_one: u32,\n-    arg_two: usize,\n-) -> u32 {\n-    0\n-}\n-\n-// Must not run on functions that explicitly opt in to Rust ABI with `extern \"Rust\"`\n-#[no_mangle]\n-#[rustfmt::skip]\n-extern \"Rust\" fn rust_abi_fn_explicit_opt_in(arg_one: u32, arg_two: usize) {}\n-\n-fn rust_abi_fn_again(arg_one: u32, arg_two: usize) {}\n-\n-#[no_mangle]\n-extern \"C\" fn c_abi_fn(arg_one: u32, arg_two: usize) {}\n-\n-extern \"C\" fn c_abi_fn_again(arg_one: u32, arg_two: usize) {}\n-\n-extern \"C\" {\n-    fn c_abi_in_block(arg_one: u32, arg_two: usize);\n-}\n-\n-fn main() {\n-    // test code goes here\n-}"}, {"sha": "b32e721110e0b924da38d15a446420d48e8fa17d", "filename": "tests/ui/no_mangle_with_rust_abi.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fno_mangle_with_rust_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fno_mangle_with_rust_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_mangle_with_rust_abi.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,3 @@\n-// run-rustfix\n-\n #![allow(unused)]\n #![warn(clippy::no_mangle_with_rust_abi)]\n "}, {"sha": "da5d31d8f2d4c377b781d9670914fd91ad28b5ec", "filename": "tests/ui/no_mangle_with_rust_abi.stderr", "status": "modified", "additions": 55, "deletions": 19, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fno_mangle_with_rust_abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fno_mangle_with_rust_abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_mangle_with_rust_abi.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,45 +1,81 @@\n-error: attribute #[no_mangle] set on a Rust ABI function\n-  --> $DIR/no_mangle_with_rust_abi.rs:7:1\n+error: `#[no_mangle]` set on a function with the default (`Rust`) ABI\n+  --> $DIR/no_mangle_with_rust_abi.rs:5:1\n    |\n LL | fn rust_abi_fn_one(arg_one: u32, arg_two: usize) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `extern \"C\" fn rust_abi_fn_one(arg_one: u32, arg_two: usize)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::no-mangle-with-rust-abi` implied by `-D warnings`\n+help: set an ABI\n+   |\n+LL | extern \"C\" fn rust_abi_fn_one(arg_one: u32, arg_two: usize) {}\n+   | ++++++++++\n+help: or explicitly set the default\n+   |\n+LL | extern \"Rust\" fn rust_abi_fn_one(arg_one: u32, arg_two: usize) {}\n+   | +++++++++++++\n \n-error: attribute #[no_mangle] set on a Rust ABI function\n-  --> $DIR/no_mangle_with_rust_abi.rs:10:1\n+error: `#[no_mangle]` set on a function with the default (`Rust`) ABI\n+  --> $DIR/no_mangle_with_rust_abi.rs:8:1\n    |\n LL | pub fn rust_abi_fn_two(arg_one: u32, arg_two: usize) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `pub extern \"C\" fn rust_abi_fn_two(arg_one: u32, arg_two: usize)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: set an ABI\n+   |\n+LL | pub extern \"C\" fn rust_abi_fn_two(arg_one: u32, arg_two: usize) {}\n+   |     ++++++++++\n+help: or explicitly set the default\n+   |\n+LL | pub extern \"Rust\" fn rust_abi_fn_two(arg_one: u32, arg_two: usize) {}\n+   |     +++++++++++++\n \n-error: attribute #[no_mangle] set on a Rust ABI function\n-  --> $DIR/no_mangle_with_rust_abi.rs:15:1\n+error: `#[no_mangle]` set on a function with the default (`Rust`) ABI\n+  --> $DIR/no_mangle_with_rust_abi.rs:13:1\n    |\n LL | pub unsafe fn rust_abi_fn_three(arg_one: u32, arg_two: usize) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `pub unsafe extern \"C\" fn rust_abi_fn_three(arg_one: u32, arg_two: usize)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: set an ABI\n+   |\n+LL | pub unsafe extern \"C\" fn rust_abi_fn_three(arg_one: u32, arg_two: usize) {}\n+   |            ++++++++++\n+help: or explicitly set the default\n+   |\n+LL | pub unsafe extern \"Rust\" fn rust_abi_fn_three(arg_one: u32, arg_two: usize) {}\n+   |            +++++++++++++\n \n-error: attribute #[no_mangle] set on a Rust ABI function\n-  --> $DIR/no_mangle_with_rust_abi.rs:20:1\n+error: `#[no_mangle]` set on a function with the default (`Rust`) ABI\n+  --> $DIR/no_mangle_with_rust_abi.rs:18:1\n    |\n LL | unsafe fn rust_abi_fn_four(arg_one: u32, arg_two: usize) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `unsafe extern \"C\" fn rust_abi_fn_four(arg_one: u32, arg_two: usize)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: set an ABI\n+   |\n+LL | unsafe extern \"C\" fn rust_abi_fn_four(arg_one: u32, arg_two: usize) {}\n+   |        ++++++++++\n+help: or explicitly set the default\n+   |\n+LL | unsafe extern \"Rust\" fn rust_abi_fn_four(arg_one: u32, arg_two: usize) {}\n+   |        +++++++++++++\n \n-error: attribute #[no_mangle] set on a Rust ABI function\n-  --> $DIR/no_mangle_with_rust_abi.rs:23:1\n+error: `#[no_mangle]` set on a function with the default (`Rust`) ABI\n+  --> $DIR/no_mangle_with_rust_abi.rs:21:1\n    |\n LL | / fn rust_abi_multiline_function_really_long_name_to_overflow_args_to_multiple_lines(\n LL | |     arg_one: u32,\n LL | |     arg_two: usize,\n LL | | ) -> u32 {\n    | |________^\n    |\n-help: try\n+help: set an ABI\n    |\n-LL + extern \"C\" fn rust_abi_multiline_function_really_long_name_to_overflow_args_to_multiple_lines(\n-LL +     arg_one: u32,\n-LL +     arg_two: usize,\n-LL ~ ) -> u32 {\n+LL | extern \"C\" fn rust_abi_multiline_function_really_long_name_to_overflow_args_to_multiple_lines(\n+   | ++++++++++\n+help: or explicitly set the default\n    |\n+LL | extern \"Rust\" fn rust_abi_multiline_function_really_long_name_to_overflow_args_to_multiple_lines(\n+   | +++++++++++++\n \n error: aborting due to 5 previous errors\n "}, {"sha": "3b5a374b4a7b4c6be95005679efa27ecd17fd7b5", "filename": "tests/ui/nonminimal_bool.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fnonminimal_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fnonminimal_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnonminimal_bool.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -63,3 +63,32 @@ fn issue9428() {\n         println!(\"foo\");\n     }\n }\n+\n+fn issue_10523() {\n+    macro_rules! a {\n+        ($v:expr) => {\n+            $v.is_some()\n+        };\n+    }\n+    let x: Option<u32> = None;\n+    if !a!(x) {}\n+}\n+\n+fn issue_10523_1() {\n+    macro_rules! a {\n+        ($v:expr) => {\n+            !$v.is_some()\n+        };\n+    }\n+    let x: Option<u32> = None;\n+    if a!(x) {}\n+}\n+\n+fn issue_10523_2() {\n+    macro_rules! a {\n+        () => {\n+            !None::<u32>.is_some()\n+        };\n+    }\n+    if a!() {}\n+}"}, {"sha": "9a56cf40d8a771134a59620656acc0307610d8a0", "filename": "tests/ui/option_env_unwrap.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Foption_env_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Foption_env_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_env_unwrap.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,24 +1,16 @@\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n #![warn(clippy::option_env_unwrap)]\n #![allow(clippy::map_flatten)]\n \n-#[macro_use]\n-extern crate macro_rules;\n-\n-macro_rules! option_env_unwrap {\n-    ($env: expr) => {\n-        option_env!($env).unwrap()\n-    };\n-    ($env: expr, $message: expr) => {\n-        option_env!($env).expect($message)\n-    };\n-}\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n+#[inline_macros]\n fn main() {\n     let _ = option_env!(\"PATH\").unwrap();\n     let _ = option_env!(\"PATH\").expect(\"environment variable PATH isn't set\");\n-    let _ = option_env_unwrap!(\"PATH\");\n-    let _ = option_env_unwrap!(\"PATH\", \"environment variable PATH isn't set\");\n-    let _ = option_env_unwrap_external!(\"PATH\");\n-    let _ = option_env_unwrap_external!(\"PATH\", \"environment variable PATH isn't set\");\n+    let _ = inline!(option_env!($\"PATH\").unwrap());\n+    let _ = inline!(option_env!($\"PATH\").expect($\"environment variable PATH isn't set\"));\n+    let _ = external!(option_env!($\"PATH\").unwrap());\n+    let _ = external!(option_env!($\"PATH\").expect($\"environment variable PATH isn't set\"));\n }"}, {"sha": "7bba62686eecf7111ae5e1297aaaa7b792ceb8a3", "filename": "tests/ui/option_env_unwrap.stderr", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Foption_env_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Foption_env_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_env_unwrap.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n error: this will panic at run-time if the environment variable doesn't exist at compile-time\n-  --> $DIR/option_env_unwrap.rs:18:13\n+  --> $DIR/option_env_unwrap.rs:10:13\n    |\n LL |     let _ = option_env!(\"PATH\").unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,54 +8,48 @@ LL |     let _ = option_env!(\"PATH\").unwrap();\n    = note: `-D clippy::option-env-unwrap` implied by `-D warnings`\n \n error: this will panic at run-time if the environment variable doesn't exist at compile-time\n-  --> $DIR/option_env_unwrap.rs:19:13\n+  --> $DIR/option_env_unwrap.rs:11:13\n    |\n LL |     let _ = option_env!(\"PATH\").expect(\"environment variable PATH isn't set\");\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using the `env!` macro instead\n \n error: this will panic at run-time if the environment variable doesn't exist at compile-time\n-  --> $DIR/option_env_unwrap.rs:10:9\n+  --> $DIR/option_env_unwrap.rs:12:21\n    |\n-LL |         option_env!($env).unwrap()\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL |     let _ = option_env_unwrap!(\"PATH\");\n-   |             -------------------------- in this macro invocation\n+LL |     let _ = inline!(option_env!($\"PATH\").unwrap());\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using the `env!` macro instead\n-   = note: this error originates in the macro `option_env_unwrap` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_main` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this will panic at run-time if the environment variable doesn't exist at compile-time\n-  --> $DIR/option_env_unwrap.rs:13:9\n+  --> $DIR/option_env_unwrap.rs:13:21\n    |\n-LL |         option_env!($env).expect($message)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL |     let _ = option_env_unwrap!(\"PATH\", \"environment variable PATH isn't set\");\n-   |             ----------------------------------------------------------------- in this macro invocation\n+LL |     let _ = inline!(option_env!($\"PATH\").expect($\"environment variable PATH isn't set\"));\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using the `env!` macro instead\n-   = note: this error originates in the macro `option_env_unwrap` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_main` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this will panic at run-time if the environment variable doesn't exist at compile-time\n-  --> $DIR/option_env_unwrap.rs:22:13\n+  --> $DIR/option_env_unwrap.rs:14:13\n    |\n-LL |     let _ = option_env_unwrap_external!(\"PATH\");\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _ = external!(option_env!($\"PATH\").unwrap());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using the `env!` macro instead\n-   = note: this error originates in the macro `option_env_unwrap_external` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `external` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this will panic at run-time if the environment variable doesn't exist at compile-time\n-  --> $DIR/option_env_unwrap.rs:23:13\n+  --> $DIR/option_env_unwrap.rs:15:13\n    |\n-LL |     let _ = option_env_unwrap_external!(\"PATH\", \"environment variable PATH isn't set\");\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _ = external!(option_env!($\"PATH\").expect($\"environment variable PATH isn't set\"));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using the `env!` macro instead\n-   = note: this error originates in the macro `option_env_unwrap_external` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `external` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "ee7b998a0b2f3137be667ed74f2b8c8fc22f48ce", "filename": "tests/ui/ptr_as_ptr.fixed", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fptr_as_ptr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fptr_as_ptr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_as_ptr.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,16 +1,12 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::ptr_as_ptr)]\n \n-extern crate macro_rules;\n-\n-macro_rules! cast_it {\n-    ($ptr: ident) => {\n-        $ptr.cast::<i32>()\n-    };\n-}\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n+#[inline_macros]\n fn main() {\n     let ptr: *const u32 = &42_u32;\n     let mut_ptr: *mut u32 = &mut 42_u32;\n@@ -38,10 +34,10 @@ fn main() {\n     let _: *mut i32 = mut_ptr.cast();\n \n     // Make sure the lint is triggered inside a macro\n-    let _ = cast_it!(ptr);\n+    let _ = inline!($ptr.cast::<i32>());\n \n     // Do not lint inside macros from external crates\n-    let _ = macro_rules::ptr_as_ptr_cast!(ptr);\n+    let _ = external!($ptr as *const i32);\n }\n \n #[clippy::msrv = \"1.37\"]"}, {"sha": "c88329ce4eccd440a99215705df392cea417cdc4", "filename": "tests/ui/ptr_as_ptr.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fptr_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fptr_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_as_ptr.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,16 +1,12 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::ptr_as_ptr)]\n \n-extern crate macro_rules;\n-\n-macro_rules! cast_it {\n-    ($ptr: ident) => {\n-        $ptr as *const i32\n-    };\n-}\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n+#[inline_macros]\n fn main() {\n     let ptr: *const u32 = &42_u32;\n     let mut_ptr: *mut u32 = &mut 42_u32;\n@@ -38,10 +34,10 @@ fn main() {\n     let _: *mut i32 = mut_ptr as _;\n \n     // Make sure the lint is triggered inside a macro\n-    let _ = cast_it!(ptr);\n+    let _ = inline!($ptr as *const i32);\n \n     // Do not lint inside macros from external crates\n-    let _ = macro_rules::ptr_as_ptr_cast!(ptr);\n+    let _ = external!($ptr as *const i32);\n }\n \n #[clippy::msrv = \"1.37\"]"}, {"sha": "78d733994ac691c56b844fb1e2d2e77051428b43", "filename": "tests/ui/ptr_as_ptr.stderr", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fptr_as_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fptr_as_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_as_ptr.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,54 +1,51 @@\n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:18:13\n+  --> $DIR/ptr_as_ptr.rs:14:13\n    |\n LL |     let _ = ptr as *const i32;\n    |             ^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast::<i32>()`\n    |\n    = note: `-D clippy::ptr-as-ptr` implied by `-D warnings`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:19:13\n+  --> $DIR/ptr_as_ptr.rs:15:13\n    |\n LL |     let _ = mut_ptr as *mut i32;\n    |             ^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `mut_ptr.cast::<i32>()`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:24:17\n+  --> $DIR/ptr_as_ptr.rs:20:17\n    |\n LL |         let _ = *ptr_ptr as *const i32;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(*ptr_ptr).cast::<i32>()`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:37:25\n+  --> $DIR/ptr_as_ptr.rs:33:25\n    |\n LL |     let _: *const i32 = ptr as *const _;\n    |                         ^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast()`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:38:23\n+  --> $DIR/ptr_as_ptr.rs:34:23\n    |\n LL |     let _: *mut i32 = mut_ptr as _;\n    |                       ^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `mut_ptr.cast()`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:10:9\n+  --> $DIR/ptr_as_ptr.rs:37:21\n    |\n-LL |         $ptr as *const i32\n-   |         ^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `$ptr.cast::<i32>()`\n-...\n-LL |     let _ = cast_it!(ptr);\n-   |             ------------- in this macro invocation\n+LL |     let _ = inline!($ptr as *const i32);\n+   |                     ^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `$ptr.cast::<i32>()`\n    |\n-   = note: this error originates in the macro `cast_it` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_main` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:62:13\n+  --> $DIR/ptr_as_ptr.rs:58:13\n    |\n LL |     let _ = ptr as *const i32;\n    |             ^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast::<i32>()`\n \n error: `as` casting between raw pointers without changing its mutability\n-  --> $DIR/ptr_as_ptr.rs:63:13\n+  --> $DIR/ptr_as_ptr.rs:59:13\n    |\n LL |     let _ = mut_ptr as *mut i32;\n    |             ^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `mut_ptr.cast::<i32>()`"}, {"sha": "d26b7a332cbbf6095681174cf3d051db232db0ee", "filename": "tests/ui/redundant_async_block.fixed", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fredundant_async_block.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fredundant_async_block.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_async_block.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -3,6 +3,8 @@\n #![allow(unused)]\n #![warn(clippy::redundant_async_block)]\n \n+use std::future::Future;\n+\n async fn func1(n: usize) -> usize {\n     n + 1\n }\n@@ -62,3 +64,48 @@ fn main() {\n     let fut = async_await_parameter_in_macro!(func2());\n     let fut = async_await_in_macro!(std::convert::identity);\n }\n+\n+#[allow(clippy::let_and_return)]\n+fn capture_local() -> impl Future<Output = i32> {\n+    // Lint\n+    let fut = async { 17 };\n+    fut\n+}\n+\n+fn capture_local_closure(s: &str) -> impl Future<Output = &str> {\n+    let f = move || std::future::ready(s);\n+    // Do not lint: `f` would not live long enough\n+    async move { f().await }\n+}\n+\n+#[allow(clippy::let_and_return)]\n+fn capture_arg(s: &str) -> impl Future<Output = &str> {\n+    // Lint\n+    let fut = async move { s };\n+    fut\n+}\n+\n+#[derive(Debug, Clone)]\n+struct F {}\n+\n+impl F {\n+    async fn run(&self) {}\n+}\n+\n+pub async fn run() {\n+    let f = F {};\n+    let c = f.clone();\n+    // Do not lint: `c` would not live long enough\n+    spawn(async move { c.run().await });\n+    let _f = f;\n+}\n+\n+fn spawn<F: Future + 'static>(_: F) {}\n+\n+async fn work(_: &str) {}\n+\n+fn capture() {\n+    let val = \"Hello World\".to_owned();\n+    // Do not lint: `val` would not live long enough\n+    spawn(async { work(&{ val }).await });\n+}"}, {"sha": "04726e6280508d11650049b90a33094a0f37e631", "filename": "tests/ui/redundant_async_block.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fredundant_async_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fredundant_async_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_async_block.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -3,6 +3,8 @@\n #![allow(unused)]\n #![warn(clippy::redundant_async_block)]\n \n+use std::future::Future;\n+\n async fn func1(n: usize) -> usize {\n     n + 1\n }\n@@ -62,3 +64,48 @@ fn main() {\n     let fut = async_await_parameter_in_macro!(func2());\n     let fut = async_await_in_macro!(std::convert::identity);\n }\n+\n+#[allow(clippy::let_and_return)]\n+fn capture_local() -> impl Future<Output = i32> {\n+    // Lint\n+    let fut = async { 17 };\n+    async move { fut.await }\n+}\n+\n+fn capture_local_closure(s: &str) -> impl Future<Output = &str> {\n+    let f = move || std::future::ready(s);\n+    // Do not lint: `f` would not live long enough\n+    async move { f().await }\n+}\n+\n+#[allow(clippy::let_and_return)]\n+fn capture_arg(s: &str) -> impl Future<Output = &str> {\n+    // Lint\n+    let fut = async move { s };\n+    async move { fut.await }\n+}\n+\n+#[derive(Debug, Clone)]\n+struct F {}\n+\n+impl F {\n+    async fn run(&self) {}\n+}\n+\n+pub async fn run() {\n+    let f = F {};\n+    let c = f.clone();\n+    // Do not lint: `c` would not live long enough\n+    spawn(async move { c.run().await });\n+    let _f = f;\n+}\n+\n+fn spawn<F: Future + 'static>(_: F) {}\n+\n+async fn work(_: &str) {}\n+\n+fn capture() {\n+    let val = \"Hello World\".to_owned();\n+    // Do not lint: `val` would not live long enough\n+    spawn(async { work(&{ val }).await });\n+}"}, {"sha": "1a1c1603e0809ea6a56821231fbb2f3be478d35d", "filename": "tests/ui/redundant_async_block.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fredundant_async_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fredundant_async_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_async_block.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,28 +1,40 @@\n error: this async expression only awaits a single future\n-  --> $DIR/redundant_async_block.rs:13:13\n+  --> $DIR/redundant_async_block.rs:15:13\n    |\n LL |     let x = async { f.await };\n    |             ^^^^^^^^^^^^^^^^^ help: you can reduce it to: `f`\n    |\n    = note: `-D clippy::redundant-async-block` implied by `-D warnings`\n \n error: this async expression only awaits a single future\n-  --> $DIR/redundant_async_block.rs:46:16\n+  --> $DIR/redundant_async_block.rs:48:16\n    |\n LL |     let fut2 = async { fut1.await };\n    |                ^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `fut1`\n \n error: this async expression only awaits a single future\n-  --> $DIR/redundant_async_block.rs:49:16\n+  --> $DIR/redundant_async_block.rs:51:16\n    |\n LL |     let fut2 = async move { fut1.await };\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `fut1`\n \n error: this async expression only awaits a single future\n-  --> $DIR/redundant_async_block.rs:51:15\n+  --> $DIR/redundant_async_block.rs:53:15\n    |\n LL |     let fut = async { async { 42 }.await };\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `async { 42 }`\n \n-error: aborting due to 4 previous errors\n+error: this async expression only awaits a single future\n+  --> $DIR/redundant_async_block.rs:72:5\n+   |\n+LL |     async move { fut.await }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `fut`\n+\n+error: this async expression only awaits a single future\n+  --> $DIR/redundant_async_block.rs:85:5\n+   |\n+LL |     async move { fut.await }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `fut`\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "42348df4480b3ec7b142866c317f07d7a60d5619", "filename": "tests/ui/redundant_pattern_matching_result.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fredundant_pattern_matching_result.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fredundant_pattern_matching_result.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_result.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -69,8 +69,8 @@ fn issue5504() {\n     }\n \n     fn try_result_opt() -> Result<i32, i32> {\n-        while (r#try!(result_opt())).is_some() {}\n-        if (r#try!(result_opt())).is_some() {}\n+        while r#try!(result_opt()).is_some() {}\n+        if r#try!(result_opt()).is_some() {}\n         Ok(42)\n     }\n "}, {"sha": "d6a46babb77952de2a4d3f602841b77172bef6d6", "filename": "tests/ui/redundant_pattern_matching_result.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fredundant_pattern_matching_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fredundant_pattern_matching_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_result.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -88,13 +88,13 @@ error: redundant pattern matching, consider using `is_some()`\n   --> $DIR/redundant_pattern_matching_result.rs:84:19\n    |\n LL |         while let Some(_) = r#try!(result_opt()) {}\n-   |         ----------^^^^^^^----------------------- help: try this: `while (r#try!(result_opt())).is_some()`\n+   |         ----------^^^^^^^----------------------- help: try this: `while r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n   --> $DIR/redundant_pattern_matching_result.rs:85:16\n    |\n LL |         if let Some(_) = r#try!(result_opt()) {}\n-   |         -------^^^^^^^----------------------- help: try this: `if (r#try!(result_opt())).is_some()`\n+   |         -------^^^^^^^----------------------- help: try this: `if r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n   --> $DIR/redundant_pattern_matching_result.rs:91:12"}, {"sha": "3c86f41f3a6e7e237412b18363b4cdf4851beb7e", "filename": "tests/ui/single_match_else.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fsingle_match_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fsingle_match_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match_else.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,9 +1,9 @@\n-// aux-build: proc_macro_with_span.rs\n+// aux-build: proc_macros.rs\n #![warn(clippy::single_match_else)]\n #![allow(clippy::needless_return, clippy::no_effect, clippy::uninlined_format_args)]\n \n-extern crate proc_macro_with_span;\n-use proc_macro_with_span::with_span;\n+extern crate proc_macros;\n+use proc_macros::with_span;\n \n enum ExprNode {\n     ExprAddrOf,"}, {"sha": "20edbe31fa9e7ef0c52930e20a2b0c26eb82687d", "filename": "tests/ui/string_add.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fstring_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fstring_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_add.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,7 +1,7 @@\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::external;\n \n #[warn(clippy::string_add)]\n #[allow(clippy::string_add_assign, unused)]\n@@ -22,5 +22,8 @@ fn main() {\n     x = x + 1;\n     assert_eq!(2, x);\n \n-    string_add!();\n+    external!({\n+        let y = \"\".to_owned();\n+        let z = y + \"...\";\n+    });\n }"}, {"sha": "9703674d1a4ed35ff2a28b356ac1a517b8182e4a", "filename": "tests/ui/swap.fixed", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fswap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fswap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+// aux-build: macro_rules.rs\n \n #![warn(clippy::all)]\n #![allow(\n@@ -8,7 +9,8 @@\n     redundant_semicolons,\n     dead_code,\n     unused_assignments,\n-    unused_variables\n+    unused_variables,\n+    clippy::let_and_return\n )]\n \n struct Foo(u32);\n@@ -186,3 +188,14 @@ const fn issue_9864(mut u: u32) -> u32 {\n     v = temp;\n     u + v\n }\n+\n+#[macro_use]\n+extern crate macro_rules;\n+\n+const fn issue_10421(x: u32) -> u32 {\n+    issue_10421!();\n+    let a = x;\n+    let a = a;\n+    let a = a;\n+    a\n+}"}, {"sha": "a0228065e46b5984bae752a93fe07b35a420b7bc", "filename": "tests/ui/swap.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+// aux-build: macro_rules.rs\n \n #![warn(clippy::all)]\n #![allow(\n@@ -8,7 +9,8 @@\n     redundant_semicolons,\n     dead_code,\n     unused_assignments,\n-    unused_variables\n+    unused_variables,\n+    clippy::let_and_return\n )]\n \n struct Foo(u32);\n@@ -215,3 +217,14 @@ const fn issue_9864(mut u: u32) -> u32 {\n     v = temp;\n     u + v\n }\n+\n+#[macro_use]\n+extern crate macro_rules;\n+\n+const fn issue_10421(x: u32) -> u32 {\n+    issue_10421!();\n+    let a = x;\n+    let a = a;\n+    let a = a;\n+    a\n+}"}, {"sha": "0c246268499d9cb6f5f4a0321cffbab1a4e7a1d1", "filename": "tests/ui/swap.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fswap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Fswap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n error: this looks like you are swapping `bar.a` and `bar.b` manually\n-  --> $DIR/swap.rs:25:5\n+  --> $DIR/swap.rs:27:5\n    |\n LL | /     let temp = bar.a;\n LL | |     bar.a = bar.b;\n@@ -10,55 +10,55 @@ LL | |     bar.b = temp;\n    = note: `-D clippy::manual-swap` implied by `-D warnings`\n \n error: this looks like you are swapping elements of `foo` manually\n-  --> $DIR/swap.rs:37:5\n+  --> $DIR/swap.rs:39:5\n    |\n LL | /     let temp = foo[0];\n LL | |     foo[0] = foo[1];\n LL | |     foo[1] = temp;\n    | |__________________^ help: try: `foo.swap(0, 1);`\n \n error: this looks like you are swapping elements of `foo` manually\n-  --> $DIR/swap.rs:46:5\n+  --> $DIR/swap.rs:48:5\n    |\n LL | /     let temp = foo[0];\n LL | |     foo[0] = foo[1];\n LL | |     foo[1] = temp;\n    | |__________________^ help: try: `foo.swap(0, 1);`\n \n error: this looks like you are swapping elements of `foo` manually\n-  --> $DIR/swap.rs:65:5\n+  --> $DIR/swap.rs:67:5\n    |\n LL | /     let temp = foo[0];\n LL | |     foo[0] = foo[1];\n LL | |     foo[1] = temp;\n    | |__________________^ help: try: `foo.swap(0, 1);`\n \n error: this looks like you are swapping `a` and `b` manually\n-  --> $DIR/swap.rs:76:5\n+  --> $DIR/swap.rs:78:5\n    |\n LL | /     a ^= b;\n LL | |     b ^= a;\n LL | |     a ^= b;\n    | |___________^ help: try: `std::mem::swap(&mut a, &mut b);`\n \n error: this looks like you are swapping `bar.a` and `bar.b` manually\n-  --> $DIR/swap.rs:84:5\n+  --> $DIR/swap.rs:86:5\n    |\n LL | /     bar.a ^= bar.b;\n LL | |     bar.b ^= bar.a;\n LL | |     bar.a ^= bar.b;\n    | |___________________^ help: try: `std::mem::swap(&mut bar.a, &mut bar.b);`\n \n error: this looks like you are swapping elements of `foo` manually\n-  --> $DIR/swap.rs:92:5\n+  --> $DIR/swap.rs:94:5\n    |\n LL | /     foo[0] ^= foo[1];\n LL | |     foo[1] ^= foo[0];\n LL | |     foo[0] ^= foo[1];\n    | |_____________________^ help: try: `foo.swap(0, 1);`\n \n error: this looks like you are swapping `foo[0][1]` and `bar[1][0]` manually\n-  --> $DIR/swap.rs:121:5\n+  --> $DIR/swap.rs:123:5\n    |\n LL | /     let temp = foo[0][1];\n LL | |     foo[0][1] = bar[1][0];\n@@ -68,7 +68,7 @@ LL | |     bar[1][0] = temp;\n    = note: or maybe you should use `std::mem::replace`?\n \n error: this looks like you are swapping `a` and `b` manually\n-  --> $DIR/swap.rs:135:7\n+  --> $DIR/swap.rs:137:7\n    |\n LL |       ; let t = a;\n    |  _______^\n@@ -79,7 +79,7 @@ LL | |     b = t;\n    = note: or maybe you should use `std::mem::replace`?\n \n error: this looks like you are swapping `c.0` and `a` manually\n-  --> $DIR/swap.rs:144:7\n+  --> $DIR/swap.rs:146:7\n    |\n LL |       ; let t = c.0;\n    |  _______^\n@@ -90,7 +90,7 @@ LL | |     a = t;\n    = note: or maybe you should use `std::mem::replace`?\n \n error: this looks like you are swapping `b` and `a` manually\n-  --> $DIR/swap.rs:170:5\n+  --> $DIR/swap.rs:172:5\n    |\n LL | /     let t = b;\n LL | |     b = a;\n@@ -100,7 +100,7 @@ LL | |     a = t;\n    = note: or maybe you should use `std::mem::replace`?\n \n error: this looks like you are trying to swap `a` and `b`\n-  --> $DIR/swap.rs:132:5\n+  --> $DIR/swap.rs:134:5\n    |\n LL | /     a = b;\n LL | |     b = a;\n@@ -110,7 +110,7 @@ LL | |     b = a;\n    = note: `-D clippy::almost-swapped` implied by `-D warnings`\n \n error: this looks like you are trying to swap `c.0` and `a`\n-  --> $DIR/swap.rs:141:5\n+  --> $DIR/swap.rs:143:5\n    |\n LL | /     c.0 = a;\n LL | |     a = c.0;\n@@ -119,7 +119,7 @@ LL | |     a = c.0;\n    = note: or maybe you should use `std::mem::replace`?\n \n error: this looks like you are trying to swap `a` and `b`\n-  --> $DIR/swap.rs:148:5\n+  --> $DIR/swap.rs:150:5\n    |\n LL | /     let a = b;\n LL | |     let b = a;\n@@ -128,7 +128,7 @@ LL | |     let b = a;\n    = note: or maybe you should use `std::mem::replace`?\n \n error: this looks like you are trying to swap `d` and `c`\n-  --> $DIR/swap.rs:153:5\n+  --> $DIR/swap.rs:155:5\n    |\n LL | /     d = c;\n LL | |     c = d;\n@@ -137,7 +137,7 @@ LL | |     c = d;\n    = note: or maybe you should use `std::mem::replace`?\n \n error: this looks like you are trying to swap `a` and `b`\n-  --> $DIR/swap.rs:157:5\n+  --> $DIR/swap.rs:159:5\n    |\n LL | /     let a = b;\n LL | |     b = a;\n@@ -146,7 +146,7 @@ LL | |     b = a;\n    = note: or maybe you should use `std::mem::replace`?\n \n error: this looks like you are swapping `s.0.x` and `s.0.y` manually\n-  --> $DIR/swap.rs:205:5\n+  --> $DIR/swap.rs:207:5\n    |\n LL | /     let t = s.0.x;\n LL | |     s.0.x = s.0.y;"}, {"sha": "174c858a47d1f98b1703fb7ea4cfae763ff7ad91", "filename": "tests/ui/toplevel_ref_arg.fixed", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Ftoplevel_ref_arg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Ftoplevel_ref_arg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,17 +1,12 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n #![warn(clippy::toplevel_ref_arg)]\n-#![allow(clippy::uninlined_format_args)]\n+#![allow(clippy::uninlined_format_args, unused)]\n \n-#[macro_use]\n-extern crate macro_rules;\n-\n-macro_rules! gen_binding {\n-    () => {\n-        let _y = &42;\n-    };\n-}\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n+#[inline_macros]\n fn main() {\n     // Closures should not warn\n     let y = |ref x| println!(\"{:?}\", x);\n@@ -38,13 +33,8 @@ fn main() {\n     for ref _x in 0..10 {}\n \n     // lint in macro\n-    #[allow(unused)]\n-    {\n-        gen_binding!();\n-    }\n+    inline!(let _y = &42;);\n \n     // do not lint in external macro\n-    {\n-        ref_arg_binding!();\n-    }\n+    external!(let ref _y = 42;);\n }"}, {"sha": "4b81a06112fe23cf62459e304e06389129f3da52", "filename": "tests/ui/toplevel_ref_arg.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Ftoplevel_ref_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Ftoplevel_ref_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,17 +1,12 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n #![warn(clippy::toplevel_ref_arg)]\n-#![allow(clippy::uninlined_format_args)]\n+#![allow(clippy::uninlined_format_args, unused)]\n \n-#[macro_use]\n-extern crate macro_rules;\n-\n-macro_rules! gen_binding {\n-    () => {\n-        let ref _y = 42;\n-    };\n-}\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n+#[inline_macros]\n fn main() {\n     // Closures should not warn\n     let y = |ref x| println!(\"{:?}\", x);\n@@ -38,13 +33,8 @@ fn main() {\n     for ref _x in 0..10 {}\n \n     // lint in macro\n-    #[allow(unused)]\n-    {\n-        gen_binding!();\n-    }\n+    inline!(let ref _y = 42;);\n \n     // do not lint in external macro\n-    {\n-        ref_arg_binding!();\n-    }\n+    external!(let ref _y = 42;);\n }"}, {"sha": "407c2d9fcd33bd757d23c0357ea2049b69091a71", "filename": "tests/ui/toplevel_ref_arg.stderr", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Ftoplevel_ref_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Ftoplevel_ref_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,45 +1,42 @@\n error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n-  --> $DIR/toplevel_ref_arg.rs:20:9\n+  --> $DIR/toplevel_ref_arg.rs:15:9\n    |\n LL |     let ref _x = 1;\n    |     ----^^^^^^----- help: try: `let _x = &1;`\n    |\n    = note: `-D clippy::toplevel-ref-arg` implied by `-D warnings`\n \n error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n-  --> $DIR/toplevel_ref_arg.rs:22:9\n+  --> $DIR/toplevel_ref_arg.rs:17:9\n    |\n LL |     let ref _y: (&_, u8) = (&1, 2);\n    |     ----^^^^^^--------------------- help: try: `let _y: &(&_, u8) = &(&1, 2);`\n \n error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n-  --> $DIR/toplevel_ref_arg.rs:24:9\n+  --> $DIR/toplevel_ref_arg.rs:19:9\n    |\n LL |     let ref _z = 1 + 2;\n    |     ----^^^^^^--------- help: try: `let _z = &(1 + 2);`\n \n error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n-  --> $DIR/toplevel_ref_arg.rs:26:9\n+  --> $DIR/toplevel_ref_arg.rs:21:9\n    |\n LL |     let ref mut _z = 1 + 2;\n    |     ----^^^^^^^^^^--------- help: try: `let _z = &mut (1 + 2);`\n \n error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n-  --> $DIR/toplevel_ref_arg.rs:31:9\n+  --> $DIR/toplevel_ref_arg.rs:26:9\n    |\n LL |     let ref _x = vec![1, 2, 3];\n    |     ----^^^^^^----------------- help: try: `let _x = &vec![1, 2, 3];`\n \n error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n-  --> $DIR/toplevel_ref_arg.rs:11:13\n+  --> $DIR/toplevel_ref_arg.rs:36:17\n    |\n-LL |         let ref _y = 42;\n-   |         ----^^^^^^------ help: try: `let _y = &42;`\n-...\n-LL |         gen_binding!();\n-   |         -------------- in this macro invocation\n+LL |     inline!(let ref _y = 42;);\n+   |             ----^^^^^^------ help: try: `let _y = &42;`\n    |\n-   = note: this error originates in the macro `gen_binding` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_main` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "2047593e7e4b81d7c5b330b037aaf4fd32c8e1ff", "filename": "tests/ui/toplevel_ref_arg_non_rustfix.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,33 +1,27 @@\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![warn(clippy::toplevel_ref_arg)]\n #![allow(unused)]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n fn the_answer(ref mut x: u8) {\n     *x = 42;\n }\n \n-macro_rules! gen_function {\n-    () => {\n-        fn fun_example(ref _x: usize) {}\n-    };\n-}\n-\n+#[inline_macros]\n fn main() {\n     let mut x = 0;\n     the_answer(x);\n \n     // lint in macro\n-    #[allow(unused)]\n-    {\n-        gen_function!();\n+    inline! {\n+        fn fun_example(ref _x: usize) {}\n     }\n \n     // do not lint in external macro\n-    {\n-        ref_arg_function!();\n+    external! {\n+        fn fun_example2(ref _x: usize) {}\n     }\n }"}, {"sha": "7307bd599d9ba03ed19f45011572ed8e8a73703c", "filename": "tests/ui/toplevel_ref_arg_non_rustfix.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -7,15 +7,12 @@ LL | fn the_answer(ref mut x: u8) {\n    = note: `-D clippy::toplevel-ref-arg` implied by `-D warnings`\n \n error: `ref` directly on a function argument is ignored. Consider using a reference type instead\n-  --> $DIR/toplevel_ref_arg_non_rustfix.rs:15:24\n+  --> $DIR/toplevel_ref_arg_non_rustfix.rs:20:24\n    |\n LL |         fn fun_example(ref _x: usize) {}\n    |                        ^^^^^^\n-...\n-LL |         gen_function!();\n-   |         --------------- in this macro invocation\n    |\n-   = note: this error originates in the macro `gen_function` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_main` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "dc497b1690f542e372a1277199c48d160b160176", "filename": "tests/ui/try_err.fixed", "status": "modified", "additions": 23, "deletions": 42, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Ftry_err.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Ftry_err.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,11 +1,11 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![deny(clippy::try_err)]\n #![allow(clippy::unnecessary_wraps, clippy::needless_question_mark)]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n use std::io;\n use std::task::Poll;\n@@ -79,36 +79,22 @@ fn nested_error() -> Result<i32, i32> {\n     Ok(1)\n }\n \n-// Bad suggestion when in macro (see #6242)\n-macro_rules! try_validation {\n-    ($e: expr) => {{\n-        match $e {\n+#[inline_macros]\n+fn calling_macro() -> Result<i32, i32> {\n+    // macro\n+    inline!(\n+        match $(Ok::<_, i32>(5)) {\n             Ok(_) => 0,\n             Err(_) => return Err(1),\n         }\n-    }};\n-}\n-\n-macro_rules! ret_one {\n-    () => {\n-        1\n-    };\n-}\n-\n-macro_rules! try_validation_in_macro {\n-    ($e: expr) => {{\n-        match $e {\n+    );\n+    // `Err` arg is another macro\n+    inline!(\n+        match $(Ok::<_, i32>(5)) {\n             Ok(_) => 0,\n-            Err(_) => return Err(ret_one!()),\n+            Err(_) => return Err(inline!(1)),\n         }\n-    }};\n-}\n-\n-fn calling_macro() -> Result<i32, i32> {\n-    // macro\n-    try_validation!(Ok::<_, i32>(5));\n-    // `Err` arg is another macro\n-    try_validation_in_macro!(Ok::<_, i32>(5));\n+    );\n     Ok(5)\n }\n \n@@ -121,24 +107,19 @@ fn main() {\n     calling_macro().unwrap();\n \n     // We don't want to lint in external macros\n-    try_err!();\n-}\n-\n-macro_rules! bar {\n-    () => {\n-        String::from(\"aasdfasdfasdfa\")\n-    };\n-}\n-\n-macro_rules! foo {\n-    () => {\n-        bar!()\n-    };\n+    external! {\n+        pub fn try_err_fn() -> Result<i32, i32> {\n+            let err: i32 = 1;\n+            // To avoid warnings during rustfix\n+            if true { Err(err)? } else { Ok(2) }\n+        }\n+    }\n }\n \n+#[inline_macros]\n pub fn macro_inside(fail: bool) -> Result<i32, String> {\n     if fail {\n-        return Err(foo!());\n+        return Err(inline!(inline!(String::from(\"aasdfasdfasdfa\"))));\n     }\n     Ok(0)\n }"}, {"sha": "86aeb75cd96a50c47f386abb1411ec457b95c767", "filename": "tests/ui/try_err.rs", "status": "modified", "additions": 23, "deletions": 42, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,11 +1,11 @@\n // run-rustfix\n-// aux-build:macro_rules.rs\n+// aux-build:proc_macros.rs\n \n #![deny(clippy::try_err)]\n #![allow(clippy::unnecessary_wraps, clippy::needless_question_mark)]\n \n-#[macro_use]\n-extern crate macro_rules;\n+extern crate proc_macros;\n+use proc_macros::{external, inline_macros};\n \n use std::io;\n use std::task::Poll;\n@@ -79,36 +79,22 @@ fn nested_error() -> Result<i32, i32> {\n     Ok(1)\n }\n \n-// Bad suggestion when in macro (see #6242)\n-macro_rules! try_validation {\n-    ($e: expr) => {{\n-        match $e {\n+#[inline_macros]\n+fn calling_macro() -> Result<i32, i32> {\n+    // macro\n+    inline!(\n+        match $(Ok::<_, i32>(5)) {\n             Ok(_) => 0,\n             Err(_) => Err(1)?,\n         }\n-    }};\n-}\n-\n-macro_rules! ret_one {\n-    () => {\n-        1\n-    };\n-}\n-\n-macro_rules! try_validation_in_macro {\n-    ($e: expr) => {{\n-        match $e {\n+    );\n+    // `Err` arg is another macro\n+    inline!(\n+        match $(Ok::<_, i32>(5)) {\n             Ok(_) => 0,\n-            Err(_) => Err(ret_one!())?,\n+            Err(_) => Err(inline!(1))?,\n         }\n-    }};\n-}\n-\n-fn calling_macro() -> Result<i32, i32> {\n-    // macro\n-    try_validation!(Ok::<_, i32>(5));\n-    // `Err` arg is another macro\n-    try_validation_in_macro!(Ok::<_, i32>(5));\n+    );\n     Ok(5)\n }\n \n@@ -121,24 +107,19 @@ fn main() {\n     calling_macro().unwrap();\n \n     // We don't want to lint in external macros\n-    try_err!();\n-}\n-\n-macro_rules! bar {\n-    () => {\n-        String::from(\"aasdfasdfasdfa\")\n-    };\n-}\n-\n-macro_rules! foo {\n-    () => {\n-        bar!()\n-    };\n+    external! {\n+        pub fn try_err_fn() -> Result<i32, i32> {\n+            let err: i32 = 1;\n+            // To avoid warnings during rustfix\n+            if true { Err(err)? } else { Ok(2) }\n+        }\n+    }\n }\n \n+#[inline_macros]\n pub fn macro_inside(fail: bool) -> Result<i32, String> {\n     if fail {\n-        Err(foo!())?;\n+        Err(inline!(inline!(String::from(\"aasdfasdfasdfa\"))))?;\n     }\n     Ok(0)\n }"}, {"sha": "4ad0e2e56a4d35ec616ddba8899ff083c051a889", "filename": "tests/ui/try_err.stderr", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Ftry_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Ftry_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -29,53 +29,47 @@ LL |                 Err(err)?;\n    |                 ^^^^^^^^^ help: try this: `return Err(err.into())`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:87:23\n+  --> $DIR/try_err.rs:88:23\n    |\n LL |             Err(_) => Err(1)?,\n    |                       ^^^^^^^ help: try this: `return Err(1)`\n-...\n-LL |     try_validation!(Ok::<_, i32>(5));\n-   |     -------------------------------- in this macro invocation\n    |\n-   = note: this error originates in the macro `try_validation` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_calling_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:102:23\n+  --> $DIR/try_err.rs:95:23\n    |\n-LL |             Err(_) => Err(ret_one!())?,\n-   |                       ^^^^^^^^^^^^^^^^ help: try this: `return Err(ret_one!())`\n-...\n-LL |     try_validation_in_macro!(Ok::<_, i32>(5));\n-   |     ----------------------------------------- in this macro invocation\n+LL |             Err(_) => Err(inline!(1))?,\n+   |                       ^^^^^^^^^^^^^^^^ help: try this: `return Err(inline!(1))`\n    |\n-   = note: this error originates in the macro `try_validation_in_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__inline_mac_fn_calling_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:141:9\n+  --> $DIR/try_err.rs:122:9\n    |\n-LL |         Err(foo!())?;\n-   |         ^^^^^^^^^^^^ help: try this: `return Err(foo!())`\n+LL |         Err(inline!(inline!(String::from(\"aasdfasdfasdfa\"))))?;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Err(inline!(inline!(String::from(\"aasdfasdfasdfa\"))))`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:148:9\n+  --> $DIR/try_err.rs:129:9\n    |\n LL |         Err(io::ErrorKind::WriteZero)?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Err(io::ErrorKind::WriteZero.into()))`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:150:9\n+  --> $DIR/try_err.rs:131:9\n    |\n LL |         Err(io::Error::new(io::ErrorKind::InvalidInput, \"error\"))?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Err(io::Error::new(io::ErrorKind::InvalidInput, \"error\")))`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:158:9\n+  --> $DIR/try_err.rs:139:9\n    |\n LL |         Err(io::ErrorKind::NotFound)?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Some(Err(io::ErrorKind::NotFound.into())))`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:167:16\n+  --> $DIR/try_err.rs:148:16\n    |\n LL |         return Err(42)?;\n    |                ^^^^^^^^ help: try this: `Err(42)`"}, {"sha": "412b36b4ee8f1b1631fe1f071d1be10888007bac", "filename": "tests/ui/uninit.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funinit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funinit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -3,13 +3,15 @@\n \n use std::mem::{self, MaybeUninit};\n \n+union MyOwnMaybeUninit {\n+    value: u8,\n+    uninit: (),\n+}\n+\n fn main() {\n     let _: usize = unsafe { MaybeUninit::uninit().assume_init() };\n \n-    // edge case: For now we lint on empty arrays\n-    let _: [u8; 0] = unsafe { MaybeUninit::uninit().assume_init() };\n-\n-    // edge case: For now we accept unit tuples\n+    // This is OK, because ZSTs do not contain data.\n     let _: () = unsafe { MaybeUninit::uninit().assume_init() };\n \n     // This is OK, because `MaybeUninit` allows uninitialized data.\n@@ -21,6 +23,19 @@ fn main() {\n     // This is OK, because all constitutent types are uninit-compatible.\n     let _: (MaybeUninit<usize>, [MaybeUninit<bool>; 2]) = unsafe { MaybeUninit::uninit().assume_init() };\n \n+    // This is OK, because our own MaybeUninit is just as fine as the one from core.\n+    let _: MyOwnMaybeUninit = unsafe { MaybeUninit::uninit().assume_init() };\n+\n+    // This is OK, because empty arrays don't contain data.\n+    let _: [u8; 0] = unsafe { MaybeUninit::uninit().assume_init() };\n+\n     // Was a false negative.\n     let _: usize = unsafe { mem::MaybeUninit::uninit().assume_init() };\n+\n+    polymorphic::<()>();\n+\n+    fn polymorphic<T>() {\n+        // We are conservative around polymorphic types.\n+        let _: T = unsafe { mem::MaybeUninit::uninit().assume_init() };\n+    }\n }"}, {"sha": "9e01b9a4aa816b3e28845631954af8471b290e19", "filename": "tests/ui/uninit.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,21 +1,21 @@\n error: this call for this type may be undefined behavior\n-  --> $DIR/uninit.rs:7:29\n+  --> $DIR/uninit.rs:12:29\n    |\n LL |     let _: usize = unsafe { MaybeUninit::uninit().assume_init() };\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[deny(clippy::uninit_assumed_init)]` on by default\n \n error: this call for this type may be undefined behavior\n-  --> $DIR/uninit.rs:10:31\n+  --> $DIR/uninit.rs:33:29\n    |\n-LL |     let _: [u8; 0] = unsafe { MaybeUninit::uninit().assume_init() };\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _: usize = unsafe { mem::MaybeUninit::uninit().assume_init() };\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this call for this type may be undefined behavior\n-  --> $DIR/uninit.rs:25:29\n+  --> $DIR/uninit.rs:39:29\n    |\n-LL |     let _: usize = unsafe { mem::MaybeUninit::uninit().assume_init() };\n+LL |         let _: T = unsafe { mem::MaybeUninit::uninit().assume_init() };\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors"}, {"sha": "59ec64a7ab1b9e3a28da817514b10155787a9400", "filename": "tests/ui/uninit_vec.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funinit_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funinit_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit_vec.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -7,6 +7,11 @@ struct MyVec {\n     vec: Vec<u8>,\n }\n \n+union MyOwnMaybeUninit {\n+    value: u8,\n+    uninit: (),\n+}\n+\n fn main() {\n     // with_capacity() -> set_len() should be detected\n     let mut vec: Vec<u8> = Vec::with_capacity(1000);\n@@ -97,4 +102,26 @@ fn main() {\n     unsafe {\n         vec.set_len(0);\n     }\n+\n+    // ZSTs should not be detected\n+    let mut vec: Vec<()> = Vec::with_capacity(1000);\n+    unsafe {\n+        vec.set_len(10);\n+    }\n+\n+    // unions should not be detected\n+    let mut vec: Vec<MyOwnMaybeUninit> = Vec::with_capacity(1000);\n+    unsafe {\n+        vec.set_len(10);\n+    }\n+\n+    polymorphic::<()>();\n+\n+    fn polymorphic<T>() {\n+        // We are conservative around polymorphic types.\n+        let mut vec: Vec<T> = Vec::with_capacity(1000);\n+        unsafe {\n+            vec.set_len(10);\n+        }\n+    }\n }"}, {"sha": "9cdf0c95ad9f108d4bc0a144658ac222cb98c6e9", "filename": "tests/ui/uninit_vec.stderr", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funinit_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funinit_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit_vec.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,5 +1,5 @@\n error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n-  --> $DIR/uninit_vec.rs:12:5\n+  --> $DIR/uninit_vec.rs:17:5\n    |\n LL |     let mut vec: Vec<u8> = Vec::with_capacity(1000);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -11,7 +11,7 @@ LL |         vec.set_len(200);\n    = note: `-D clippy::uninit-vec` implied by `-D warnings`\n \n error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n-  --> $DIR/uninit_vec.rs:18:5\n+  --> $DIR/uninit_vec.rs:23:5\n    |\n LL |     vec.reserve(1000);\n    |     ^^^^^^^^^^^^^^^^^^\n@@ -22,7 +22,7 @@ LL |         vec.set_len(200);\n    = help: initialize the buffer or wrap the content in `MaybeUninit`\n \n error: calling `set_len()` on empty `Vec` creates out-of-bound values\n-  --> $DIR/uninit_vec.rs:24:5\n+  --> $DIR/uninit_vec.rs:29:5\n    |\n LL |     let mut vec: Vec<u8> = Vec::new();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -31,7 +31,7 @@ LL |         vec.set_len(200);\n    |         ^^^^^^^^^^^^^^^^\n \n error: calling `set_len()` on empty `Vec` creates out-of-bound values\n-  --> $DIR/uninit_vec.rs:30:5\n+  --> $DIR/uninit_vec.rs:35:5\n    |\n LL |     let mut vec: Vec<u8> = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -40,7 +40,7 @@ LL |         vec.set_len(200);\n    |         ^^^^^^^^^^^^^^^^\n \n error: calling `set_len()` on empty `Vec` creates out-of-bound values\n-  --> $DIR/uninit_vec.rs:35:5\n+  --> $DIR/uninit_vec.rs:40:5\n    |\n LL |     let mut vec: Vec<u8> = Vec::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -49,7 +49,7 @@ LL |         vec.set_len(200);\n    |         ^^^^^^^^^^^^^^^^\n \n error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n-  --> $DIR/uninit_vec.rs:49:5\n+  --> $DIR/uninit_vec.rs:54:5\n    |\n LL |     let mut vec: Vec<u8> = Vec::with_capacity(1000);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -60,7 +60,7 @@ LL |         vec.set_len(200);\n    = help: initialize the buffer or wrap the content in `MaybeUninit`\n \n error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n-  --> $DIR/uninit_vec.rs:58:5\n+  --> $DIR/uninit_vec.rs:63:5\n    |\n LL |     my_vec.vec.reserve(1000);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -71,7 +71,7 @@ LL |         my_vec.vec.set_len(200);\n    = help: initialize the buffer or wrap the content in `MaybeUninit`\n \n error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n-  --> $DIR/uninit_vec.rs:63:5\n+  --> $DIR/uninit_vec.rs:68:5\n    |\n LL |     my_vec.vec = Vec::with_capacity(1000);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -82,7 +82,7 @@ LL |         my_vec.vec.set_len(200);\n    = help: initialize the buffer or wrap the content in `MaybeUninit`\n \n error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n-  --> $DIR/uninit_vec.rs:42:9\n+  --> $DIR/uninit_vec.rs:47:9\n    |\n LL |         let mut vec: Vec<u8> = Vec::with_capacity(1000);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -92,7 +92,7 @@ LL |         vec.set_len(200);\n    = help: initialize the buffer or wrap the content in `MaybeUninit`\n \n error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n-  --> $DIR/uninit_vec.rs:45:9\n+  --> $DIR/uninit_vec.rs:50:9\n    |\n LL |         vec.reserve(1000);\n    |         ^^^^^^^^^^^^^^^^^^\n@@ -101,5 +101,16 @@ LL |         vec.set_len(200);\n    |\n    = help: initialize the buffer or wrap the content in `MaybeUninit`\n \n-error: aborting due to 10 previous errors\n+error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n+  --> $DIR/uninit_vec.rs:122:9\n+   |\n+LL |         let mut vec: Vec<T> = Vec::with_capacity(1000);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         unsafe {\n+LL |             vec.set_len(10);\n+   |             ^^^^^^^^^^^^^^^\n+   |\n+   = help: initialize the buffer or wrap the content in `MaybeUninit`\n+\n+error: aborting due to 11 previous errors\n "}, {"sha": "1475d781c673400150808848d4c6ac4261e3e618", "filename": "tests/ui/uninlined_format_args.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funinlined_format_args.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funinlined_format_args.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,11 +1,11 @@\n-// aux-build:proc_macro_with_span.rs\n+// aux-build:proc_macros.rs\n // run-rustfix\n #![warn(clippy::uninlined_format_args)]\n #![allow(named_arguments_used_positionally, unused_imports, unused_macros, unused_variables)]\n #![allow(clippy::eq_op, clippy::format_in_format_args, clippy::print_literal)]\n \n-extern crate proc_macro_with_span;\n-use proc_macro_with_span::with_span;\n+extern crate proc_macros;\n+use proc_macros::with_span;\n \n macro_rules! no_param_str {\n     () => {"}, {"sha": "835afac393fae088e17222d931a4314e4959d07d", "filename": "tests/ui/uninlined_format_args.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funinlined_format_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funinlined_format_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,11 +1,11 @@\n-// aux-build:proc_macro_with_span.rs\n+// aux-build:proc_macros.rs\n // run-rustfix\n #![warn(clippy::uninlined_format_args)]\n #![allow(named_arguments_used_positionally, unused_imports, unused_macros, unused_variables)]\n #![allow(clippy::eq_op, clippy::format_in_format_args, clippy::print_literal)]\n \n-extern crate proc_macro_with_span;\n-use proc_macro_with_span::with_span;\n+extern crate proc_macros;\n+use proc_macros::with_span;\n \n macro_rules! no_param_str {\n     () => {"}, {"sha": "674ae4f1df97e023b82d30ad23cbcec13fad4971", "filename": "tests/ui/unit_arg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,4 +1,4 @@\n-// aux-build: proc_macro_with_span.rs\n+// aux-build: proc_macros.rs\n #![warn(clippy::unit_arg)]\n #![allow(unused_must_use, unused_variables)]\n #![allow(\n@@ -13,9 +13,9 @@\n     clippy::unused_unit\n )]\n \n-extern crate proc_macro_with_span;\n+extern crate proc_macros;\n \n-use proc_macro_with_span::with_span;\n+use proc_macros::with_span;\n use std::fmt::Debug;\n \n fn foo<T: Debug>(t: T) {"}, {"sha": "3b93800f8b7501eea47b337dc1ce1127e008c74f", "filename": "tests/ui/unnecessary_lazy_eval.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funnecessary_lazy_eval.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funnecessary_lazy_eval.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,12 +1,12 @@\n // run-rustfix\n-// aux-build: proc_macro_with_span.rs\n+// aux-build: proc_macros.rs\n #![warn(clippy::unnecessary_lazy_evaluations)]\n #![allow(clippy::redundant_closure)]\n #![allow(clippy::bind_instead_of_map)]\n #![allow(clippy::map_identity)]\n \n-extern crate proc_macro_with_span;\n-use proc_macro_with_span::with_span;\n+extern crate proc_macros;\n+use proc_macros::with_span;\n \n struct Deep(Option<usize>);\n "}, {"sha": "2851c0c519049a8b04cbe22e86abbba6da5d6800", "filename": "tests/ui/unnecessary_lazy_eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,12 +1,12 @@\n // run-rustfix\n-// aux-build: proc_macro_with_span.rs\n+// aux-build: proc_macros.rs\n #![warn(clippy::unnecessary_lazy_evaluations)]\n #![allow(clippy::redundant_closure)]\n #![allow(clippy::bind_instead_of_map)]\n #![allow(clippy::map_identity)]\n \n-extern crate proc_macro_with_span;\n-use proc_macro_with_span::with_span;\n+extern crate proc_macros;\n+use proc_macros::with_span;\n \n struct Deep(Option<usize>);\n "}, {"sha": "b046694f8c6f63823a928712d7690181f201a07f", "filename": "tests/ui/unnecessary_operation.fixed", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funnecessary_operation.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funnecessary_operation.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_operation.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,6 +1,12 @@\n // run-rustfix\n \n-#![allow(clippy::deref_addrof, dead_code, unused, clippy::no_effect)]\n+#![allow(\n+    clippy::deref_addrof,\n+    dead_code,\n+    unused,\n+    clippy::no_effect,\n+    clippy::unnecessary_struct_initialization\n+)]\n #![warn(clippy::unnecessary_operation)]\n \n struct Tuple(i32);"}, {"sha": "9ed9679e938b0041da85a331d58ed71f5a41d811", "filename": "tests/ui/unnecessary_operation.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funnecessary_operation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funnecessary_operation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_operation.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,6 +1,12 @@\n // run-rustfix\n \n-#![allow(clippy::deref_addrof, dead_code, unused, clippy::no_effect)]\n+#![allow(\n+    clippy::deref_addrof,\n+    dead_code,\n+    unused,\n+    clippy::no_effect,\n+    clippy::unnecessary_struct_initialization\n+)]\n #![warn(clippy::unnecessary_operation)]\n \n struct Tuple(i32);"}, {"sha": "a1d0d93998a6c776b1794e03ab7ce28985b528aa", "filename": "tests/ui/unnecessary_operation.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funnecessary_operation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funnecessary_operation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_operation.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,117 +1,117 @@\n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:50:5\n+  --> $DIR/unnecessary_operation.rs:56:5\n    |\n LL |     Tuple(get_number());\n    |     ^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n    |\n    = note: `-D clippy::unnecessary-operation` implied by `-D warnings`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:51:5\n+  --> $DIR/unnecessary_operation.rs:57:5\n    |\n LL |     Struct { field: get_number() };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:52:5\n+  --> $DIR/unnecessary_operation.rs:58:5\n    |\n LL |     Struct { ..get_struct() };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_struct();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:53:5\n+  --> $DIR/unnecessary_operation.rs:59:5\n    |\n LL |     Enum::Tuple(get_number());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:54:5\n+  --> $DIR/unnecessary_operation.rs:60:5\n    |\n LL |     Enum::Struct { field: get_number() };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:55:5\n+  --> $DIR/unnecessary_operation.rs:61:5\n    |\n LL |     5 + get_number();\n    |     ^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `5;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:56:5\n+  --> $DIR/unnecessary_operation.rs:62:5\n    |\n LL |     *&get_number();\n    |     ^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:57:5\n+  --> $DIR/unnecessary_operation.rs:63:5\n    |\n LL |     &get_number();\n    |     ^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:58:5\n+  --> $DIR/unnecessary_operation.rs:64:5\n    |\n LL |     (5, 6, get_number());\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `5;6;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:59:5\n+  --> $DIR/unnecessary_operation.rs:65:5\n    |\n LL |     get_number()..;\n    |     ^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:60:5\n+  --> $DIR/unnecessary_operation.rs:66:5\n    |\n LL |     ..get_number();\n    |     ^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:61:5\n+  --> $DIR/unnecessary_operation.rs:67:5\n    |\n LL |     5..get_number();\n    |     ^^^^^^^^^^^^^^^^ help: statement can be reduced to: `5;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:62:5\n+  --> $DIR/unnecessary_operation.rs:68:5\n    |\n LL |     [42, get_number()];\n    |     ^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `42;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:63:5\n+  --> $DIR/unnecessary_operation.rs:69:5\n    |\n LL |     [42, 55][get_usize()];\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: statement can be written as: `assert!([42, 55].len() > get_usize());`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:64:5\n+  --> $DIR/unnecessary_operation.rs:70:5\n    |\n LL |     (42, get_number()).1;\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `42;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:65:5\n+  --> $DIR/unnecessary_operation.rs:71:5\n    |\n LL |     [get_number(); 55];\n    |     ^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:66:5\n+  --> $DIR/unnecessary_operation.rs:72:5\n    |\n LL |     [42; 55][get_usize()];\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: statement can be written as: `assert!([42; 55].len() > get_usize());`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:67:5\n+  --> $DIR/unnecessary_operation.rs:73:5\n    |\n LL | /     {\n LL | |         get_number()\n LL | |     };\n    | |______^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:70:5\n+  --> $DIR/unnecessary_operation.rs:76:5\n    |\n LL | /     FooString {\n LL | |         s: String::from(\"blah\"),"}, {"sha": "b47129e4a36a881f6aa9caf3157aaabbc4425544", "filename": "tests/ui/unnecessary_struct_initialization.fixed", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funnecessary_struct_initialization.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funnecessary_struct_initialization.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_struct_initialization.fixed?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -0,0 +1,73 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::unnecessary_struct_initialization)]\n+\n+struct S {\n+    f: String,\n+}\n+\n+#[derive(Clone, Copy)]\n+struct T {\n+    f: u32,\n+}\n+\n+struct U {\n+    f: u32,\n+}\n+\n+impl Clone for U {\n+    fn clone(&self) -> Self {\n+        // Do not lint: `Self` does not implement `Copy`\n+        Self { ..*self }\n+    }\n+}\n+\n+#[derive(Copy)]\n+struct V {\n+    f: u32,\n+}\n+\n+impl Clone for V {\n+    fn clone(&self) -> Self {\n+        // Lint: `Self` implements `Copy`\n+        *self\n+    }\n+}\n+\n+fn main() {\n+    // Should lint: `a` would be consumed anyway\n+    let a = S { f: String::from(\"foo\") };\n+    let mut b = a;\n+\n+    // Should lint: `b` would be consumed, and is mutable\n+    let c = &mut b;\n+\n+    // Should not lint as `d` is not mutable\n+    let d = S { f: String::from(\"foo\") };\n+    let e = &mut S { ..d };\n+\n+    // Should lint as `f` would be consumed anyway\n+    let f = S { f: String::from(\"foo\") };\n+    let g = &f;\n+\n+    // Should lint: the result of an expression is mutable\n+    let h = &mut *Box::new(S { f: String::from(\"foo\") });\n+\n+    // Should not lint: `m` would be both alive and borrowed\n+    let m = T { f: 17 };\n+    let n = &T { ..m };\n+\n+    // Should not lint: `m` should not be modified\n+    let o = &mut T { ..m };\n+    o.f = 32;\n+    assert_eq!(m.f, 17);\n+\n+    // Should not lint: `m` should not be modified\n+    let o = &mut T { ..m } as *mut T;\n+    unsafe { &mut *o }.f = 32;\n+    assert_eq!(m.f, 17);\n+\n+    // Should lint: the result of an expression is mutable and temporary\n+    let p = &mut *Box::new(T { f: 5 });\n+}"}, {"sha": "63b11c626e5bff36b99da37e7e1c7a9add5ccecd", "filename": "tests/ui/unnecessary_struct_initialization.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funnecessary_struct_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funnecessary_struct_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_struct_initialization.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -0,0 +1,77 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::unnecessary_struct_initialization)]\n+\n+struct S {\n+    f: String,\n+}\n+\n+#[derive(Clone, Copy)]\n+struct T {\n+    f: u32,\n+}\n+\n+struct U {\n+    f: u32,\n+}\n+\n+impl Clone for U {\n+    fn clone(&self) -> Self {\n+        // Do not lint: `Self` does not implement `Copy`\n+        Self { ..*self }\n+    }\n+}\n+\n+#[derive(Copy)]\n+struct V {\n+    f: u32,\n+}\n+\n+impl Clone for V {\n+    fn clone(&self) -> Self {\n+        // Lint: `Self` implements `Copy`\n+        Self { ..*self }\n+    }\n+}\n+\n+fn main() {\n+    // Should lint: `a` would be consumed anyway\n+    let a = S { f: String::from(\"foo\") };\n+    let mut b = S { ..a };\n+\n+    // Should lint: `b` would be consumed, and is mutable\n+    let c = &mut S { ..b };\n+\n+    // Should not lint as `d` is not mutable\n+    let d = S { f: String::from(\"foo\") };\n+    let e = &mut S { ..d };\n+\n+    // Should lint as `f` would be consumed anyway\n+    let f = S { f: String::from(\"foo\") };\n+    let g = &S { ..f };\n+\n+    // Should lint: the result of an expression is mutable\n+    let h = &mut S {\n+        ..*Box::new(S { f: String::from(\"foo\") })\n+    };\n+\n+    // Should not lint: `m` would be both alive and borrowed\n+    let m = T { f: 17 };\n+    let n = &T { ..m };\n+\n+    // Should not lint: `m` should not be modified\n+    let o = &mut T { ..m };\n+    o.f = 32;\n+    assert_eq!(m.f, 17);\n+\n+    // Should not lint: `m` should not be modified\n+    let o = &mut T { ..m } as *mut T;\n+    unsafe { &mut *o }.f = 32;\n+    assert_eq!(m.f, 17);\n+\n+    // Should lint: the result of an expression is mutable and temporary\n+    let p = &mut T {\n+        ..*Box::new(T { f: 5 })\n+    };\n+}"}, {"sha": "ca497057702f602cc7829f8d0c542eb324fde917", "filename": "tests/ui/unnecessary_struct_initialization.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funnecessary_struct_initialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funnecessary_struct_initialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_struct_initialization.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -0,0 +1,46 @@\n+error: unnecessary struct building\n+  --> $DIR/unnecessary_struct_initialization.rs:34:9\n+   |\n+LL |         Self { ..*self }\n+   |         ^^^^^^^^^^^^^^^^ help: replace with: `*self`\n+   |\n+   = note: `-D clippy::unnecessary-struct-initialization` implied by `-D warnings`\n+\n+error: unnecessary struct building\n+  --> $DIR/unnecessary_struct_initialization.rs:41:17\n+   |\n+LL |     let mut b = S { ..a };\n+   |                 ^^^^^^^^^ help: replace with: `a`\n+\n+error: unnecessary struct building\n+  --> $DIR/unnecessary_struct_initialization.rs:44:18\n+   |\n+LL |     let c = &mut S { ..b };\n+   |                  ^^^^^^^^^ help: replace with: `b`\n+\n+error: unnecessary struct building\n+  --> $DIR/unnecessary_struct_initialization.rs:52:14\n+   |\n+LL |     let g = &S { ..f };\n+   |              ^^^^^^^^^ help: replace with: `f`\n+\n+error: unnecessary struct building\n+  --> $DIR/unnecessary_struct_initialization.rs:55:18\n+   |\n+LL |       let h = &mut S {\n+   |  __________________^\n+LL | |         ..*Box::new(S { f: String::from(\"foo\") })\n+LL | |     };\n+   | |_____^ help: replace with: `*Box::new(S { f: String::from(\"foo\") })`\n+\n+error: unnecessary struct building\n+  --> $DIR/unnecessary_struct_initialization.rs:74:18\n+   |\n+LL |       let p = &mut T {\n+   |  __________________^\n+LL | |         ..*Box::new(T { f: 5 })\n+LL | |     };\n+   | |_____^ help: replace with: `*Box::new(T { f: 5 })`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "431093ab36969342d6bb527b363ee7d5ab555d39", "filename": "tests/ui/unnecessary_unsafety_doc.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funnecessary_unsafety_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funnecessary_unsafety_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_unsafety_doc.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,10 +1,10 @@\n-// aux-build:doc_unsafe_macros.rs\n+// aux-build:proc_macros.rs\n \n #![allow(clippy::let_unit_value)]\n #![warn(clippy::unnecessary_safety_doc)]\n \n-#[macro_use]\n-extern crate doc_unsafe_macros;\n+extern crate proc_macros;\n+use proc_macros::external;\n \n /// This is has no safety section, and does not need one either\n pub fn destroy_the_planet() {\n@@ -129,7 +129,11 @@ macro_rules! very_safe {\n very_safe!();\n \n // we don't lint code from external macros\n-undocd_safe!();\n+external!(\n+    pub fn vey_oy() {\n+        unimplemented!();\n+    }\n+);\n \n fn main() {}\n "}, {"sha": "b0f20fdac5fa4d221f8e87ac2fab1e06fd896396", "filename": "tests/ui/unnecessary_unsafety_doc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funnecessary_unsafety_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fui%2Funnecessary_unsafety_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_unsafety_doc.stderr?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -42,7 +42,7 @@ LL | very_safe!();\n    = note: this error originates in the macro `very_safe` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: docs for safe trait have unnecessary `# Safety` section\n-  --> $DIR/unnecessary_unsafety_doc.rs:147:1\n+  --> $DIR/unnecessary_unsafety_doc.rs:151:1\n    |\n LL | pub trait DocumentedSafeTraitWithImplementationHeader {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c9cbc50546cf3949aa0cb82ae9fd57f9fd020ac8", "filename": "tests/workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/tests%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fworkspace.rs?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -1,4 +1,4 @@\n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n \n use std::path::PathBuf;\n use std::process::Command;"}, {"sha": "3f8f6a7b98c210bc9d492190fa035aa48d73e1a3", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a937f49c178864c2b177eb94890702ccb2d25f35/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a937f49c178864c2b177eb94890702ccb2d25f35/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=a937f49c178864c2b177eb94890702ccb2d25f35", "patch": "@@ -17,6 +17,7 @@ contributing_url = \"https://github.com/rust-lang/rust-clippy/blob/master/CONTRIB\n \n [assign.owners]\n \"/.github\" = [\"@flip1995\"]\n+\"/util/gh-pages\" = [\"@xFrednet\"]\n \"*\" = [\n     \"@flip1995\",\n     \"@Manishearth\","}]}