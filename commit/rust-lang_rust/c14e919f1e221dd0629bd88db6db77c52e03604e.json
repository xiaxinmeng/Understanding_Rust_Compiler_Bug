{"sha": "c14e919f1e221dd0629bd88db6db77c52e03604e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNGU5MTlmMWUyMjFkZDA2MjliZDg4ZGI2ZGI3N2M1MmUwMzYwNGU=", "commit": {"author": {"name": "Christopher Durham", "email": "cad97@cad97.com", "date": "2021-01-13T22:21:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-13T22:21:23Z"}, "message": "Apply suggestions from code review\n\nCo-authored-by: Ralf Jung <post@ralfj.de>", "tree": {"sha": "e705148d776331f86f1be7613c63f7bb85f1ebee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e705148d776331f86f1be7613c63f7bb85f1ebee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c14e919f1e221dd0629bd88db6db77c52e03604e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf/3JjCRBK7hj4Ov3rIwAAdHIIAF1DB32Sncn9bGVnpwxMv+SB\nmqpyU55qojcqBSzj15kKdfQT52hb5ZjuwCnloJoZWF4ecRc9PEMCXD85cm8L/HmD\nG3Fk/ULPZ+7s2fPTCjp312lODFatQFEuV8AXvSB9qr/ABoWFV5Z1PJBLmxSoR0vS\nLEUcu0FTn9IxSXBG98mauNRss4Ys/dkHnAEGn2vZ1tClQ31ESsvc4jGVchzjmYoR\narhPQqo/08A9h2UuiyoMyVeH+BbsxU/29SqZHXOV9WT/iuuDkr4nXM6wlRfj2pSg\n/NGV025wkEtfZj2Ga4UnoD1gaZQrulx5U2ggr3n045bdkkXiSJ8wXqlA2tJZVPA=\n=f5YP\n-----END PGP SIGNATURE-----\n", "payload": "tree e705148d776331f86f1be7613c63f7bb85f1ebee\nparent b5b6760c03867e2b16862324b4764cf35be8a1cd\nauthor Christopher Durham <cad97@cad97.com> 1610576483 -0500\ncommitter GitHub <noreply@github.com> 1610576483 -0500\n\nApply suggestions from code review\n\nCo-authored-by: Ralf Jung <post@ralfj.de>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c14e919f1e221dd0629bd88db6db77c52e03604e", "html_url": "https://github.com/rust-lang/rust/commit/c14e919f1e221dd0629bd88db6db77c52e03604e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c14e919f1e221dd0629bd88db6db77c52e03604e/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5b6760c03867e2b16862324b4764cf35be8a1cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5b6760c03867e2b16862324b4764cf35be8a1cd", "html_url": "https://github.com/rust-lang/rust/commit/b5b6760c03867e2b16862324b4764cf35be8a1cd"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "3ca10480b34c8b0b3c310e7ba89a52ac190e0f7c", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c14e919f1e221dd0629bd88db6db77c52e03604e/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14e919f1e221dd0629bd88db6db77c52e03604e/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=c14e919f1e221dd0629bd88db6db77c52e03604e", "patch": "@@ -1881,7 +1881,7 @@ impl<T: ?Sized> Weak<T> {\n \n         if is_dangling(ptr) {\n             // If the pointer is dangling, we return the sentinel directly. This cannot be\n-            // a valid payload address, as it is at least as aligned as RcBox (usize).\n+            // a valid payload address, as the payload is at least as aligned as RcBox (usize).\n             ptr as *const T\n         } else {\n             // SAFETY: if is_dangling returns false, then the pointer is dereferencable."}, {"sha": "306c0c91e4b259eaf117946624132a91fd4f2c03", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c14e919f1e221dd0629bd88db6db77c52e03604e/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14e919f1e221dd0629bd88db6db77c52e03604e/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=c14e919f1e221dd0629bd88db6db77c52e03604e", "patch": "@@ -1666,7 +1666,7 @@ impl<T: ?Sized> Weak<T> {\n \n         if is_dangling(ptr) {\n             // If the pointer is dangling, we return the sentinel directly. This cannot be\n-            // a valid payload address, as it is at least as aligned as ArcInner (usize).\n+            // a valid payload address, as the payload is at least as aligned as ArcInner (usize).\n             ptr as *const T\n         } else {\n             // SAFETY: if is_dangling returns false, then the pointer is dereferencable."}]}