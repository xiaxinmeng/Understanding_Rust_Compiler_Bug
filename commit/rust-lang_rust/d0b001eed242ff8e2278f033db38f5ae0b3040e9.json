{"sha": "d0b001eed242ff8e2278f033db38f5ae0b3040e9", "node_id": "C_kwDOAAsO6NoAKGQwYjAwMWVlZDI0MmZmOGUyMjc4ZjAzM2RiMzhmNWFlMGIzMDQwZTk", "commit": {"author": {"name": "Luna Razzaghipour", "email": "lunarazzaghipour@gmail.com", "date": "2023-05-25T10:55:42Z"}, "committer": {"name": "Luna Razzaghipour", "email": "lunarazzaghipour@gmail.com", "date": "2023-05-28T10:37:37Z"}, "message": "Use appropriate QoS classes throughout the codebase", "tree": {"sha": "991b47179398b744248192013fd0d5cc274516e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/991b47179398b744248192013fd0d5cc274516e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0b001eed242ff8e2278f033db38f5ae0b3040e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAAGgAAAATZWNkc2Etc2hhMi1uaXN0cDI1NgAAAAhuaXN0cDI1NgAAAE\nEEtPEPU+w9oQ90uLBc4R0g0O7C/w+fcT4a+R4nvkvJXioSPGOafBHNQJufyTj3tLLeNtO4\n1H9ztJfn/DlLu2mXigAAAANnaXQAAAAAAAAABnNoYTUxMgAAAGQAAAATZWNkc2Etc2hhMi\n1uaXN0cDI1NgAAAEkAAAAgHZ5D8yc/dSDWdIMNyOeF5ozjl36xM53/ohFzYWuHWpgAAAAh\nAMJlzWUpQRM+KgXtRe/KF5qKyoS5WDcwh3E689e/KQIU\n-----END SSH SIGNATURE-----", "payload": "tree 991b47179398b744248192013fd0d5cc274516e2\nparent 2924fd22138080ebf15b2aa05d31458d9fe3907d\nauthor Luna Razzaghipour <lunarazzaghipour@gmail.com> 1685012142 +1000\ncommitter Luna Razzaghipour <lunarazzaghipour@gmail.com> 1685270257 +1000\n\nUse appropriate QoS classes throughout the codebase\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0b001eed242ff8e2278f033db38f5ae0b3040e9", "html_url": "https://github.com/rust-lang/rust/commit/d0b001eed242ff8e2278f033db38f5ae0b3040e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0b001eed242ff8e2278f033db38f5ae0b3040e9/comments", "author": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2924fd22138080ebf15b2aa05d31458d9fe3907d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2924fd22138080ebf15b2aa05d31458d9fe3907d", "html_url": "https://github.com/rust-lang/rust/commit/2924fd22138080ebf15b2aa05d31458d9fe3907d"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "e40257c58f8a56fb5ef5ac2ea3566ec0f8152c82", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0b001eed242ff8e2278f033db38f5ae0b3040e9/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b001eed242ff8e2278f033db38f5ae0b3040e9/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=d0b001eed242ff8e2278f033db38f5ae0b3040e9", "patch": "@@ -90,7 +90,7 @@ impl FlycheckHandle {\n     ) -> FlycheckHandle {\n         let actor = FlycheckActor::new(id, sender, config, workspace_root);\n         let (sender, receiver) = unbounded::<StateChange>();\n-        let thread = stdx::thread::Builder::new(stdx::thread::QoSClass::Default)\n+        let thread = stdx::thread::Builder::new(stdx::thread::QoSClass::Utility)\n             .name(\"Flycheck\".to_owned())\n             .spawn(move || actor.run(receiver))\n             .expect(\"failed to spawn thread\");\n@@ -409,7 +409,7 @@ impl CargoHandle {\n \n         let (sender, receiver) = unbounded();\n         let actor = CargoActor::new(sender, stdout, stderr);\n-        let thread = stdx::thread::Builder::new(stdx::thread::QoSClass::Default)\n+        let thread = stdx::thread::Builder::new(stdx::thread::QoSClass::Utility)\n             .name(\"CargoHandle\".to_owned())\n             .spawn(move || actor.run())\n             .expect(\"failed to spawn thread\");"}, {"sha": "f049a225f077ead3e27bfe70de277790035f8fb6", "filename": "crates/ide/src/prime_caches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b001eed242ff8e2278f033db38f5ae0b3040e9/crates%2Fide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b001eed242ff8e2278f033db38f5ae0b3040e9/crates%2Fide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fprime_caches.rs?ref=d0b001eed242ff8e2278f033db38f5ae0b3040e9", "patch": "@@ -81,7 +81,7 @@ pub(crate) fn parallel_prime_caches(\n             let worker = prime_caches_worker.clone();\n             let db = db.snapshot();\n \n-            stdx::thread::Builder::new(stdx::thread::QoSClass::Default)\n+            stdx::thread::Builder::new(stdx::thread::QoSClass::Utility)\n                 .allow_leak(true)\n                 .spawn(move || Cancelled::catch(|| worker(db)))\n                 .expect(\"failed to spawn thread\");"}, {"sha": "3224aeae5645b51cbae0b714d4f4d85811dee028", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b001eed242ff8e2278f033db38f5ae0b3040e9/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b001eed242ff8e2278f033db38f5ae0b3040e9/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=d0b001eed242ff8e2278f033db38f5ae0b3040e9", "patch": "@@ -85,7 +85,7 @@ fn try_main(flags: flags::RustAnalyzer) -> Result<()> {\n             // will make actions like hitting enter in the editor slow.\n             // rust-analyzer does not block the editor\u2019s render loop,\n             // so we don\u2019t use User Interactive.\n-            with_extra_thread(\"LspServer\", stdx::thread::QoSClass::Default, run_server)?;\n+            with_extra_thread(\"LspServer\", stdx::thread::QoSClass::UserInitiated, run_server)?;\n         }\n         flags::RustAnalyzerCmd::Parse(cmd) => cmd.run()?,\n         flags::RustAnalyzerCmd::Symbols(cmd) => cmd.run()?,"}, {"sha": "ca8c06c7530b7730a9e77c6fdbd10d0e6c295db9", "filename": "crates/rust-analyzer/src/dispatch.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d0b001eed242ff8e2278f033db38f5ae0b3040e9/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b001eed242ff8e2278f033db38f5ae0b3040e9/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs?ref=d0b001eed242ff8e2278f033db38f5ae0b3040e9", "patch": "@@ -88,7 +88,8 @@ impl<'a> RequestDispatcher<'a> {\n         self\n     }\n \n-    /// Dispatches the request onto thread pool\n+    /// Dispatches a non-latency-sensitive request onto the thread pool\n+    /// without retrying it if it panics.\n     pub(crate) fn on_no_retry<R>(\n         &mut self,\n         f: fn(GlobalStateSnapshot, R::Params) -> Result<R::Result>,\n@@ -103,7 +104,7 @@ impl<'a> RequestDispatcher<'a> {\n             None => return self,\n         };\n \n-        self.global_state.task_pool.handle.spawn(QoSClass::Default, {\n+        self.global_state.task_pool.handle.spawn(QoSClass::Utility, {\n             let world = self.global_state.snapshot();\n             move || {\n                 let result = panic::catch_unwind(move || {\n@@ -124,7 +125,7 @@ impl<'a> RequestDispatcher<'a> {\n         self\n     }\n \n-    /// Dispatches the request onto thread pool\n+    /// Dispatches a non-latency-sensitive request onto the thread pool.\n     pub(crate) fn on<R>(\n         &mut self,\n         f: fn(GlobalStateSnapshot, R::Params) -> Result<R::Result>,\n@@ -134,7 +135,7 @@ impl<'a> RequestDispatcher<'a> {\n         R::Params: DeserializeOwned + panic::UnwindSafe + Send + fmt::Debug,\n         R::Result: Serialize,\n     {\n-        self.on_with_qos::<R>(QoSClass::Default, f)\n+        self.on_with_qos::<R>(QoSClass::Utility, f)\n     }\n \n     /// Dispatches a latency-sensitive request onto the thread pool.\n@@ -147,7 +148,7 @@ impl<'a> RequestDispatcher<'a> {\n         R::Params: DeserializeOwned + panic::UnwindSafe + Send + fmt::Debug,\n         R::Result: Serialize,\n     {\n-        self.on_with_qos::<R>(QoSClass::Default, f)\n+        self.on_with_qos::<R>(QoSClass::UserInitiated, f)\n     }\n \n     pub(crate) fn finish(&mut self) {"}, {"sha": "5270d858d573f8aec79405b303742d1a5a4a5528", "filename": "crates/rust-analyzer/src/handlers/notification.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b001eed242ff8e2278f033db38f5ae0b3040e9/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Fnotification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b001eed242ff8e2278f033db38f5ae0b3040e9/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Fnotification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Fnotification.rs?ref=d0b001eed242ff8e2278f033db38f5ae0b3040e9", "patch": "@@ -291,7 +291,7 @@ fn run_flycheck(state: &mut GlobalState, vfs_path: VfsPath) -> bool {\n             }\n             Ok(())\n         };\n-        state.task_pool.handle.spawn_with_sender(stdx::thread::QoSClass::Default, move |_| {\n+        state.task_pool.handle.spawn_with_sender(stdx::thread::QoSClass::Utility, move |_| {\n             if let Err(e) = std::panic::catch_unwind(task) {\n                 tracing::error!(\"flycheck task panicked: {e:?}\")\n             }"}, {"sha": "d932fcf992fc7f341113a4cd0d4fc36b501d1400", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d0b001eed242ff8e2278f033db38f5ae0b3040e9/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b001eed242ff8e2278f033db38f5ae0b3040e9/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=d0b001eed242ff8e2278f033db38f5ae0b3040e9", "patch": "@@ -397,7 +397,7 @@ impl GlobalState {\n         tracing::debug!(%cause, \"will prime caches\");\n         let num_worker_threads = self.config.prime_caches_num_threads();\n \n-        self.task_pool.handle.spawn_with_sender(stdx::thread::QoSClass::Default, {\n+        self.task_pool.handle.spawn_with_sender(stdx::thread::QoSClass::Utility, {\n             let analysis = self.snapshot().analysis;\n             move |sender| {\n                 sender.send(Task::PrimeCaches(PrimeCachesProgress::Begin)).unwrap();\n@@ -787,7 +787,10 @@ impl GlobalState {\n         tracing::trace!(\"updating notifications for {:?}\", subscriptions);\n \n         let snapshot = self.snapshot();\n-        self.task_pool.handle.spawn(stdx::thread::QoSClass::Default, move || {\n+\n+        // Diagnostics are triggered by the user typing\n+        // so we want computing them to run at the User Initiated QoS.\n+        self.task_pool.handle.spawn(stdx::thread::QoSClass::UserInitiated, move || {\n             let _p = profile::span(\"publish_diagnostics\");\n             let diagnostics = subscriptions\n                 .into_iter()"}, {"sha": "29cfb3d46a5ab863a66ab97e448cc58603b4fd1e", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0b001eed242ff8e2278f033db38f5ae0b3040e9/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b001eed242ff8e2278f033db38f5ae0b3040e9/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=d0b001eed242ff8e2278f033db38f5ae0b3040e9", "patch": "@@ -185,7 +185,7 @@ impl GlobalState {\n     pub(crate) fn fetch_workspaces(&mut self, cause: Cause) {\n         tracing::info!(%cause, \"will fetch workspaces\");\n \n-        self.task_pool.handle.spawn_with_sender(stdx::thread::QoSClass::Default, {\n+        self.task_pool.handle.spawn_with_sender(stdx::thread::QoSClass::Utility, {\n             let linked_projects = self.config.linked_projects();\n             let detached_files = self.config.detached_files().to_vec();\n             let cargo_config = self.config.cargo();\n@@ -260,7 +260,7 @@ impl GlobalState {\n         tracing::info!(%cause, \"will fetch build data\");\n         let workspaces = Arc::clone(&self.workspaces);\n         let config = self.config.cargo();\n-        self.task_pool.handle.spawn_with_sender(stdx::thread::QoSClass::Default, move |sender| {\n+        self.task_pool.handle.spawn_with_sender(stdx::thread::QoSClass::Utility, move |sender| {\n             sender.send(Task::FetchBuildData(BuildDataProgress::Begin)).unwrap();\n \n             let progress = {\n@@ -280,7 +280,7 @@ impl GlobalState {\n         let dummy_replacements = self.config.dummy_replacements().clone();\n         let proc_macro_clients = self.proc_macro_clients.clone();\n \n-        self.task_pool.handle.spawn_with_sender(stdx::thread::QoSClass::Default, move |sender| {\n+        self.task_pool.handle.spawn_with_sender(stdx::thread::QoSClass::Utility, move |sender| {\n             sender.send(Task::LoadProcMacros(ProcMacroProgress::Begin)).unwrap();\n \n             let dummy_replacements = &dummy_replacements;"}, {"sha": "478e23ca7d37e93cf9efb99078f7d66927d3d2f1", "filename": "crates/stdx/src/thread.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0b001eed242ff8e2278f033db38f5ae0b3040e9/crates%2Fstdx%2Fsrc%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b001eed242ff8e2278f033db38f5ae0b3040e9/crates%2Fstdx%2Fsrc%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Fthread.rs?ref=d0b001eed242ff8e2278f033db38f5ae0b3040e9", "patch": "@@ -155,8 +155,6 @@ pub enum QoSClass {\n     /// performance, responsiveness and efficiency.\n     Utility,\n \n-    Default,\n-\n     /// TLDR: tasks that block using your app\n     ///\n     /// Contract:\n@@ -234,7 +232,6 @@ mod imp {\n         let c = match class {\n             QoSClass::UserInteractive => libc::qos_class_t::QOS_CLASS_USER_INTERACTIVE,\n             QoSClass::UserInitiated => libc::qos_class_t::QOS_CLASS_USER_INITIATED,\n-            QoSClass::Default => libc::qos_class_t::QOS_CLASS_DEFAULT,\n             QoSClass::Utility => libc::qos_class_t::QOS_CLASS_UTILITY,\n             QoSClass::Background => libc::qos_class_t::QOS_CLASS_BACKGROUND,\n         };"}, {"sha": "26f7a9fc423593a0cfe493788200c8228d92fb6e", "filename": "crates/vfs-notify/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0b001eed242ff8e2278f033db38f5ae0b3040e9/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b001eed242ff8e2278f033db38f5ae0b3040e9/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs-notify%2Fsrc%2Flib.rs?ref=d0b001eed242ff8e2278f033db38f5ae0b3040e9", "patch": "@@ -34,7 +34,7 @@ impl loader::Handle for NotifyHandle {\n     fn spawn(sender: loader::Sender) -> NotifyHandle {\n         let actor = NotifyActor::new(sender);\n         let (sender, receiver) = unbounded::<Message>();\n-        let thread = stdx::thread::Builder::new(stdx::thread::QoSClass::Default)\n+        let thread = stdx::thread::Builder::new(stdx::thread::QoSClass::Utility)\n             .name(\"VfsLoader\".to_owned())\n             .spawn(move || actor.run(receiver))\n             .expect(\"failed to spawn thread\");"}]}