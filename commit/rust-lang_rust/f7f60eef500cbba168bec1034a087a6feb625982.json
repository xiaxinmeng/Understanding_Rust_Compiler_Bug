{"sha": "f7f60eef500cbba168bec1034a087a6feb625982", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZjYwZWVmNTAwY2JiYTE2OGJlYzEwMzRhMDg3YTZmZWI2MjU5ODI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-20T01:13:19Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-05T22:09:31Z"}, "message": "Add type constraints from const parameters\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "edc243f9b18a051942b135aacd38a658fd887a1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edc243f9b18a051942b135aacd38a658fd887a1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7f60eef500cbba168bec1034a087a6feb625982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f60eef500cbba168bec1034a087a6feb625982", "html_url": "https://github.com/rust-lang/rust/commit/f7f60eef500cbba168bec1034a087a6feb625982", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7f60eef500cbba168bec1034a087a6feb625982/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f2a4f78224f9442bca6ceb7739d3d86a7591153", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f2a4f78224f9442bca6ceb7739d3d86a7591153", "html_url": "https://github.com/rust-lang/rust/commit/7f2a4f78224f9442bca6ceb7739d3d86a7591153"}], "stats": {"total": 49, "additions": 42, "deletions": 7}, "files": [{"sha": "49d11150689a99d078e106a74bcea4fb3c3edd89", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f7f60eef500cbba168bec1034a087a6feb625982/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f60eef500cbba168bec1034a087a6feb625982/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=f7f60eef500cbba168bec1034a087a6feb625982", "patch": "@@ -4,7 +4,8 @@\n //! We walk the set of items and, for each member, generate new constraints.\n \n use hir::def_id::DefId;\n-use rustc::ty::subst::{UnpackedKind, SubstsRef};\n+use rustc::mir::interpret::ConstValue;\n+use rustc::ty::subst::{SubstsRef, UnpackedKind};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n@@ -229,12 +230,19 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n \n         // Trait are always invariant so we can take advantage of that.\n         let variance_i = self.invariant(variance);\n-        for ty in substs.types() {\n-            self.add_constraints_from_ty(current, ty, variance_i);\n-        }\n \n-        for region in substs.regions() {\n-            self.add_constraints_from_region(current, region, variance_i);\n+        for k in substs {\n+            match k.unpack() {\n+                UnpackedKind::Lifetime(lt) => {\n+                    self.add_constraints_from_region(current, lt, variance_i)\n+                }\n+                UnpackedKind::Type(ty) => {\n+                    self.add_constraints_from_ty(current, ty, variance_i)\n+                }\n+                UnpackedKind::Const(ct) => {\n+                    self.add_constraints_from_const(current, ct, variance_i)\n+                }\n+            }\n         }\n     }\n \n@@ -267,7 +275,11 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_mt(current, &ty::TypeAndMut { ty, mutbl }, variance);\n             }\n \n-            ty::Array(typ, _) |\n+            ty::Array(typ, len) => {\n+                self.add_constraints_from_ty(current, typ, variance);\n+                self.add_constraints_from_const(current, len, variance);\n+            }\n+\n             ty::Slice(typ) => {\n                 self.add_constraints_from_ty(current, typ, variance);\n             }\n@@ -383,6 +395,9 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 UnpackedKind::Type(ty) => {\n                     self.add_constraints_from_ty(current, ty, variance_i)\n                 }\n+                UnpackedKind::Const(ct) => {\n+                    self.add_constraints_from_const(current, ct, variance_i)\n+                }\n             }\n         }\n     }\n@@ -434,6 +449,26 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n         }\n     }\n \n+    fn add_constraints_from_const(\n+        &mut self,\n+        current: &CurrentItem,\n+        ct: &ty::LazyConst<'tcx>,\n+        variance: VarianceTermPtr<'a>\n+    ) {\n+        debug!(\n+            \"add_constraints_from_const(ct={:?}, variance={:?})\",\n+            ct,\n+            variance\n+        );\n+\n+        if let ty::LazyConst::Evaluated(ct) = ct {\n+            self.add_constraints_from_ty(current, ct.ty, variance);\n+            if let ConstValue::Param(ref data) = ct.val {\n+                self.add_constraint(current, data.index, variance);\n+            }\n+        }\n+    }\n+\n     /// Adds constraints appropriate for a mutability-type pair\n     /// appearing in a context with ambient variance `variance`\n     fn add_constraints_from_mt(&mut self,"}]}