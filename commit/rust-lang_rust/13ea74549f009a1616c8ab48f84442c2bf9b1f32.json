{"sha": "13ea74549f009a1616c8ab48f84442c2bf9b1f32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZWE3NDU0OWYwMDlhMTYxNmM4YWI0OGY4NDQ0MmMyYmY5YjFmMzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-27T07:28:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-27T07:28:38Z"}, "message": "Auto merge of #1530 - RalfJung:rustup, r=RalfJung\n\nrustup\n\nAnother day, another `AllocRef` API change.", "tree": {"sha": "ff017d51af372a3c30d3fbf15a8f9ca6c5d74ad1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff017d51af372a3c30d3fbf15a8f9ca6c5d74ad1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13ea74549f009a1616c8ab48f84442c2bf9b1f32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13ea74549f009a1616c8ab48f84442c2bf9b1f32", "html_url": "https://github.com/rust-lang/rust/commit/13ea74549f009a1616c8ab48f84442c2bf9b1f32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13ea74549f009a1616c8ab48f84442c2bf9b1f32/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2be4052ab03025032a64a602c99177d5d571bba8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2be4052ab03025032a64a602c99177d5d571bba8", "html_url": "https://github.com/rust-lang/rust/commit/2be4052ab03025032a64a602c99177d5d571bba8"}, {"sha": "39e6baeb91fc720494ae8ebd6f7c2cd29a19130f", "url": "https://api.github.com/repos/rust-lang/rust/commits/39e6baeb91fc720494ae8ebd6f7c2cd29a19130f", "html_url": "https://github.com/rust-lang/rust/commit/39e6baeb91fc720494ae8ebd6f7c2cd29a19130f"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "f5fb708740208f26838b54e9643cc02ef118d547", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ea74549f009a1616c8ab48f84442c2bf9b1f32/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/13ea74549f009a1616c8ab48f84442c2bf9b1f32/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=13ea74549f009a1616c8ab48f84442c2bf9b1f32", "patch": "@@ -1 +1 @@\n-c4b6d9411f939c1ad7b3521b907fa101f3360462\n+18b0585b52741ca158dfebef7968326e2704352e"}, {"sha": "cf9a2f4b6925fab7dca8d1aa3c91322247352435", "filename": "tests/run-pass/heap_allocator.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/13ea74549f009a1616c8ab48f84442c2bf9b1f32/tests%2Frun-pass%2Fheap_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ea74549f009a1616c8ab48f84442c2bf9b1f32/tests%2Frun-pass%2Fheap_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fheap_allocator.rs?ref=13ea74549f009a1616c8ab48f84442c2bf9b1f32", "patch": "@@ -6,39 +6,39 @@ use std::slice;\n \n fn check_alloc<T: AllocRef>(mut allocator: T) { unsafe {\n     for &align in &[4, 8, 16, 32] {\n-        let layout = Layout::from_size_align(20, align).unwrap();\n+        let layout_20 = Layout::from_size_align(20, align).unwrap();\n+        let layout_40 = Layout::from_size_align(40, 4*align).unwrap();\n+        let layout_10 = Layout::from_size_align(10, align/2).unwrap();\n \n         for _ in 0..32 {\n-            let a = allocator.alloc(layout).unwrap().as_non_null_ptr();\n-            assert_eq!(a.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n-            allocator.dealloc(a, layout);\n+            let a = allocator.alloc(layout_20).unwrap().as_non_null_ptr();\n+            assert_eq!(a.as_ptr() as usize % layout_20.align(), 0, \"pointer is incorrectly aligned\");\n+            allocator.dealloc(a, layout_20);\n         }\n \n-        let p1 = allocator.alloc_zeroed(layout).unwrap().as_non_null_ptr();\n-        assert_eq!(p1.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n+        let p1 = allocator.alloc_zeroed(layout_20).unwrap().as_non_null_ptr();\n+        assert_eq!(p1.as_ptr() as usize % layout_20.align(), 0, \"pointer is incorrectly aligned\");\n         assert_eq!(*p1.as_ptr(), 0);\n \n         // old size < new size\n-        let p2 = allocator.grow(p1, layout, 40).unwrap().as_non_null_ptr();\n-        let layout = Layout::from_size_align(40, align).unwrap();\n-        assert_eq!(p2.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n+        let p2 = allocator.grow(p1, layout_20, layout_40).unwrap().as_non_null_ptr();\n+        assert_eq!(p2.as_ptr() as usize % layout_40.align(), 0, \"pointer is incorrectly aligned\");\n         let slice = slice::from_raw_parts(p2.as_ptr(), 20);\n         assert_eq!(&slice, &[0_u8; 20]);\n \n         // old size == new size\n-        let p3 = allocator.grow(p2, layout, 40).unwrap().as_non_null_ptr();\n-        assert_eq!(p3.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n+        let p3 = allocator.grow(p2, layout_40, layout_40).unwrap().as_non_null_ptr();\n+        assert_eq!(p3.as_ptr() as usize % layout_40.align(), 0, \"pointer is incorrectly aligned\");\n         let slice = slice::from_raw_parts(p3.as_ptr(), 20);\n         assert_eq!(&slice, &[0_u8; 20]);\n \n         // old size > new size\n-        let p4 = allocator.shrink(p3, layout, 10).unwrap().as_non_null_ptr();\n-        let layout = Layout::from_size_align(10, align).unwrap();\n-        assert_eq!(p4.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n+        let p4 = allocator.shrink(p3, layout_40, layout_10).unwrap().as_non_null_ptr();\n+        assert_eq!(p4.as_ptr() as usize % layout_10.align(), 0, \"pointer is incorrectly aligned\");\n         let slice = slice::from_raw_parts(p4.as_ptr(), 10);\n         assert_eq!(&slice, &[0_u8; 10]);\n \n-        allocator.dealloc(p4, layout);\n+        allocator.dealloc(p4, layout_10);\n     }\n } }\n "}]}