{"sha": "c92bdc4dbbd777f6933f7990f87066147a629c8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MmJkYzRkYmJkNzc3ZjY5MzNmNzk5MGY4NzA2NjE0N2E2MjljOGQ=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-01-01T19:00:09Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-01-22T00:18:18Z"}, "message": "Split filter_map into manual_filter_map", "tree": {"sha": "2fa555bb97e2e6edbf1c36cb90ba5055c63daf20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fa555bb97e2e6edbf1c36cb90ba5055c63daf20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c92bdc4dbbd777f6933f7990f87066147a629c8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c92bdc4dbbd777f6933f7990f87066147a629c8d", "html_url": "https://github.com/rust-lang/rust/commit/c92bdc4dbbd777f6933f7990f87066147a629c8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c92bdc4dbbd777f6933f7990f87066147a629c8d/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a8660861ecf11474e03823387a50eeaa2c18a57", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a8660861ecf11474e03823387a50eeaa2c18a57", "html_url": "https://github.com/rust-lang/rust/commit/7a8660861ecf11474e03823387a50eeaa2c18a57"}], "stats": {"total": 221, "additions": 198, "deletions": 23}, "files": [{"sha": "8feb1a148afa362f445bbda3e5835b25d0c1bd7e", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c92bdc4dbbd777f6933f7990f87066147a629c8d/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/c92bdc4dbbd777f6933f7990f87066147a629c8d/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=c92bdc4dbbd777f6933f7990f87066147a629c8d", "patch": "@@ -2035,6 +2035,7 @@ Released 2018-09-13\n [`macro_use_imports`]: https://rust-lang.github.io/rust-clippy/master/index.html#macro_use_imports\n [`main_recursion`]: https://rust-lang.github.io/rust-clippy/master/index.html#main_recursion\n [`manual_async_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_async_fn\n+[`manual_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_filter_map\n [`manual_memcpy`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_memcpy\n [`manual_non_exhaustive`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive\n [`manual_ok_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_ok_or"}, {"sha": "bde9c630c6c79a283815242b4032eff15584f9ee", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c92bdc4dbbd777f6933f7990f87066147a629c8d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92bdc4dbbd777f6933f7990f87066147a629c8d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c92bdc4dbbd777f6933f7990f87066147a629c8d", "patch": "@@ -745,6 +745,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::ITER_NTH,\n         &methods::ITER_NTH_ZERO,\n         &methods::ITER_SKIP_NEXT,\n+        &methods::MANUAL_FILTER_MAP,\n         &methods::MANUAL_SATURATING_ARITHMETIC,\n         &methods::MAP_COLLECT_RESULT_UNIT,\n         &methods::MAP_FLATTEN,\n@@ -1526,6 +1527,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::ITER_NTH),\n         LintId::of(&methods::ITER_NTH_ZERO),\n         LintId::of(&methods::ITER_SKIP_NEXT),\n+        LintId::of(&methods::MANUAL_FILTER_MAP),\n         LintId::of(&methods::MANUAL_SATURATING_ARITHMETIC),\n         LintId::of(&methods::MAP_COLLECT_RESULT_UNIT),\n         LintId::of(&methods::NEW_RET_NO_SELF),\n@@ -1823,6 +1825,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::FILTER_NEXT),\n         LintId::of(&methods::FLAT_MAP_IDENTITY),\n         LintId::of(&methods::INSPECT_FOR_EACH),\n+        LintId::of(&methods::MANUAL_FILTER_MAP),\n         LintId::of(&methods::OPTION_AS_REF_DEREF),\n         LintId::of(&methods::SEARCH_IS_SOME),\n         LintId::of(&methods::SKIP_WHILE_NEXT),"}, {"sha": "518d2e67ad16d7a02e083a4530c23e05fc51be93", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 96, "deletions": 13, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/c92bdc4dbbd777f6933f7990f87066147a629c8d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92bdc4dbbd777f6933f7990f87066147a629c8d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=c92bdc4dbbd777f6933f7990f87066147a629c8d", "patch": "@@ -15,7 +15,8 @@ use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::{TraitItem, TraitItemKind};\n+use rustc_hir::def::Res;\n+use rustc_hir::{Expr, ExprKind, PatKind, QPath, TraitItem, TraitItemKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass, Lint, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, TraitRef, Ty, TyS};\n@@ -450,6 +451,32 @@ declare_clippy_lint! {\n     \"using combinations of `filter`, `map`, `filter_map` and `flat_map` which can usually be written as a single method call\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `_.filter(_).map(_)` that can be written more simply\n+    /// as `filter_map(_)`.\n+    ///\n+    /// **Why is this bad?** Redundant code in the `filter` and `map` operations is poor style and\n+    /// less performant.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+     /// **Example:**\n+    /// Bad:\n+    /// ```rust\n+    /// (0_i32..10)\n+    ///     .filter(|n| n.checked_add(1).is_some())\n+    ///     .map(|n| n.checked_add(1).unwrap());\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust\n+    /// (0_i32..10).filter_map(|n| n.checked_add(1));\n+    /// ```\n+    pub MANUAL_FILTER_MAP,\n+    complexity,\n+    \"using `_.filter(_).map(_)` in a way that can be written more simply as `filter_map(_)`\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `_.filter_map(_).next()`.\n     ///\n@@ -1473,6 +1500,7 @@ impl_lint_pass!(Methods => [\n     FILTER_NEXT,\n     SKIP_WHILE_NEXT,\n     FILTER_MAP,\n+    MANUAL_FILTER_MAP,\n     FILTER_MAP_NEXT,\n     FLAT_MAP_IDENTITY,\n     FIND_MAP,\n@@ -1540,7 +1568,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"next\", \"filter\"] => lint_filter_next(cx, expr, arg_lists[1]),\n             [\"next\", \"skip_while\"] => lint_skip_while_next(cx, expr, arg_lists[1]),\n             [\"next\", \"iter\"] => lint_iter_next(cx, expr, arg_lists[1]),\n-            [\"map\", \"filter\"] => lint_filter_map(cx, expr, arg_lists[1], arg_lists[0]),\n+            [\"map\", \"filter\"] => lint_filter_map(cx, expr),\n             [\"map\", \"filter_map\"] => lint_filter_map_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"next\", \"filter_map\"] => lint_filter_map_next(cx, expr, arg_lists[1], self.msrv.as_ref()),\n             [\"map\", \"find\"] => lint_find_map(cx, expr, arg_lists[1], arg_lists[0]),\n@@ -2989,17 +3017,72 @@ fn lint_skip_while_next<'tcx>(\n }\n \n /// lint use of `filter().map()` for `Iterators`\n-fn lint_filter_map<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    expr: &'tcx hir::Expr<'_>,\n-    _filter_args: &'tcx [hir::Expr<'_>],\n-    _map_args: &'tcx [hir::Expr<'_>],\n-) {\n-    // lint if caller of `.filter().map()` is an Iterator\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter(..).map(..)` on an `Iterator`\";\n-        let hint = \"this is more succinctly expressed by calling `.filter_map(..)` instead\";\n-        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n+fn lint_filter_map<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n+    if_chain! {\n+        if let ExprKind::MethodCall(_, _, [map_recv, map_arg], map_span) = expr.kind;\n+        if let ExprKind::MethodCall(_, _, [_, filter_arg], filter_span) = map_recv.kind;\n+        if match_trait_method(cx, expr, &paths::ITERATOR);\n+\n+        // filter(|x| ...is_some())...\n+        if let ExprKind::Closure(_, _, filter_body_id, ..) = filter_arg.kind;\n+        let filter_body = cx.tcx.hir().body(filter_body_id);\n+        if let [filter_param] = filter_body.params;\n+        // optional ref pattern: `filter(|&x| ..)`\n+        let (filter_pat, is_filter_param_ref) = if let PatKind::Ref(ref_pat, _) = filter_param.pat.kind {\n+            (ref_pat, true)\n+        } else {\n+            (filter_param.pat, false)\n+        };\n+        // closure ends with is_some() or is_ok()\n+        if let PatKind::Binding(_, filter_param_id, _, None) = filter_pat.kind;\n+        if let ExprKind::MethodCall(path, _, [filter_arg], _) = filter_body.value.kind;\n+        if let Some(opt_ty) = cx.typeck_results().expr_ty(filter_arg).ty_adt_def();\n+        if let Some(is_result) = if cx.tcx.is_diagnostic_item(sym::option_type, opt_ty.did) {\n+            Some(false)\n+        } else if cx.tcx.is_diagnostic_item(sym::result_type, opt_ty.did) {\n+            Some(true)\n+        } else {\n+            None\n+        };\n+        if path.ident.name.as_str() == if is_result { \"is_ok\" } else { \"is_some\" };\n+\n+        // ...map(|x| ...unwrap())\n+        if let ExprKind::Closure(_, _, map_body_id, ..) = map_arg.kind;\n+        let map_body = cx.tcx.hir().body(map_body_id);\n+        if let [map_param] = map_body.params;\n+        if let PatKind::Binding(_, map_param_id, map_param_ident, None) = map_param.pat.kind;\n+        // closure ends with expect() or unwrap()\n+        if let ExprKind::MethodCall(seg, _, [map_arg, ..], _) = map_body.value.kind;\n+        if matches!(seg.ident.name, sym::expect | sym::unwrap | sym::unwrap_or);\n+\n+        let eq_fallback = |a: &Expr<'_>, b: &Expr<'_>| {\n+            // in `filter(|x| ..)`, replace `*x` with `x`\n+            let a_path = if_chain! {\n+                if !is_filter_param_ref;\n+                if let ExprKind::Unary(UnOp::UnDeref, expr_path) = a.kind;\n+                then { expr_path } else { a }\n+            };\n+            // let the filter closure arg and the map closure arg be equal\n+            if_chain! {\n+                if let ExprKind::Path(QPath::Resolved(None, a_path)) = a_path.kind;\n+                if let ExprKind::Path(QPath::Resolved(None, b_path)) = b.kind;\n+                if a_path.res == Res::Local(filter_param_id);\n+                if b_path.res == Res::Local(map_param_id);\n+                if TyS::same_type(cx.typeck_results().expr_ty_adjusted(a), cx.typeck_results().expr_ty_adjusted(b));\n+                then {\n+                    return true;\n+                }\n+            }\n+            false\n+        };\n+        if SpanlessEq::new(cx).expr_fallback(eq_fallback).eq_expr(filter_arg, map_arg);\n+        then {\n+            let span = filter_span.to(map_span);\n+            let msg = \"`filter(..).map(..)` can be simplified as `filter_map(..)`\";\n+            let to_opt = if is_result { \".ok()\" } else { \"\" };\n+            let sugg = format!(\"filter_map(|{}| {}{})\", map_param_ident, snippet(cx, map_arg.span, \"..\"), to_opt);\n+            span_lint_and_sugg(cx, MANUAL_FILTER_MAP, span, msg, \"try\", sugg, Applicability::MachineApplicable);\n+        }\n     }\n }\n "}, {"sha": "c7b4f28be3a4454f5a01293c6bf0ba8d7b5a02ba", "filename": "tests/ui/filter_methods.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c92bdc4dbbd777f6933f7990f87066147a629c8d/tests%2Fui%2Ffilter_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c92bdc4dbbd777f6933f7990f87066147a629c8d/tests%2Fui%2Ffilter_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.stderr?ref=c92bdc4dbbd777f6933f7990f87066147a629c8d", "patch": "@@ -1,12 +1,3 @@\n-error: called `filter(..).map(..)` on an `Iterator`\n-  --> $DIR/filter_methods.rs:6:21\n-   |\n-LL |     let _: Vec<_> = vec![5; 6].into_iter().filter(|&x| x == 0).map(|x| x * 2).collect();\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::filter-map` implied by `-D warnings`\n-   = help: this is more succinctly expressed by calling `.filter_map(..)` instead\n-\n error: called `filter(..).flat_map(..)` on an `Iterator`\n   --> $DIR/filter_methods.rs:8:21\n    |\n@@ -17,6 +8,7 @@ LL | |         .filter(|&x| x == 0)\n LL | |         .flat_map(|x| x.checked_mul(2))\n    | |_______________________________________^\n    |\n+   = note: `-D clippy::filter-map` implied by `-D warnings`\n    = help: this is more succinctly expressed by calling `.flat_map(..)` and filtering by returning `iter::empty()`\n \n error: called `filter_map(..).flat_map(..)` on an `Iterator`\n@@ -43,5 +35,5 @@ LL | |         .map(|x| x.checked_mul(2))\n    |\n    = help: this is more succinctly expressed by only calling `.filter_map(..)` instead\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "fc8f58f8ea5cdf1192a5a585d1ce4ee97961062b", "filename": "tests/ui/manual_filter_map.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c92bdc4dbbd777f6933f7990f87066147a629c8d/tests%2Fui%2Fmanual_filter_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c92bdc4dbbd777f6933f7990f87066147a629c8d/tests%2Fui%2Fmanual_filter_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.fixed?ref=c92bdc4dbbd777f6933f7990f87066147a629c8d", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+#![warn(clippy::manual_filter_map)]\n+#![allow(clippy::redundant_closure)] // FIXME suggestion may have redundant closure\n+\n+fn main() {\n+    // is_some(), unwrap()\n+    let _ = (0..).filter_map(|a| to_opt(a));\n+\n+    // ref pattern, expect()\n+    let _ = (0..).filter_map(|a| to_opt(a));\n+\n+    // is_ok(), unwrap_or()\n+    let _ = (0..).filter_map(|a| to_res(a).ok());\n+}\n+\n+fn no_lint() {\n+    // no shared code\n+    let _ = (0..).filter(|n| *n > 1).map(|n| n + 1);\n+\n+    // very close but different since filter() provides a reference\n+    let _ = (0..).filter(|n| to_opt(n).is_some()).map(|a| to_opt(a).unwrap());\n+\n+    // similar but different\n+    let _ = (0..).filter(|n| to_opt(n).is_some()).map(|n| to_res(n).unwrap());\n+    let _ = (0..)\n+        .filter(|n| to_opt(n).map(|n| n + 1).is_some())\n+        .map(|a| to_opt(a).unwrap());\n+}\n+\n+fn to_opt<T>(_: T) -> Option<T> {\n+    unimplemented!()\n+}\n+\n+fn to_res<T>(_: T) -> Result<T, ()> {\n+    unimplemented!()\n+}"}, {"sha": "3af4bbee3bf82c17355da7f9922d23e16fbeffd9", "filename": "tests/ui/manual_filter_map.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c92bdc4dbbd777f6933f7990f87066147a629c8d/tests%2Fui%2Fmanual_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92bdc4dbbd777f6933f7990f87066147a629c8d/tests%2Fui%2Fmanual_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.rs?ref=c92bdc4dbbd777f6933f7990f87066147a629c8d", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+#![warn(clippy::manual_filter_map)]\n+#![allow(clippy::redundant_closure)] // FIXME suggestion may have redundant closure\n+\n+fn main() {\n+    // is_some(), unwrap()\n+    let _ = (0..).filter(|n| to_opt(*n).is_some()).map(|a| to_opt(a).unwrap());\n+\n+    // ref pattern, expect()\n+    let _ = (0..).filter(|&n| to_opt(n).is_some()).map(|a| to_opt(a).expect(\"hi\"));\n+\n+    // is_ok(), unwrap_or()\n+    let _ = (0..).filter(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(1));\n+}\n+\n+fn no_lint() {\n+    // no shared code\n+    let _ = (0..).filter(|n| *n > 1).map(|n| n + 1);\n+\n+    // very close but different since filter() provides a reference\n+    let _ = (0..).filter(|n| to_opt(n).is_some()).map(|a| to_opt(a).unwrap());\n+\n+    // similar but different\n+    let _ = (0..).filter(|n| to_opt(n).is_some()).map(|n| to_res(n).unwrap());\n+    let _ = (0..)\n+        .filter(|n| to_opt(n).map(|n| n + 1).is_some())\n+        .map(|a| to_opt(a).unwrap());\n+}\n+\n+fn to_opt<T>(_: T) -> Option<T> {\n+    unimplemented!()\n+}\n+\n+fn to_res<T>(_: T) -> Result<T, ()> {\n+    unimplemented!()\n+}"}, {"sha": "4d4e2d5c12fe942127d3e72534bfa50392d6c68d", "filename": "tests/ui/manual_filter_map.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c92bdc4dbbd777f6933f7990f87066147a629c8d/tests%2Fui%2Fmanual_filter_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c92bdc4dbbd777f6933f7990f87066147a629c8d/tests%2Fui%2Fmanual_filter_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.stderr?ref=c92bdc4dbbd777f6933f7990f87066147a629c8d", "patch": "@@ -0,0 +1,22 @@\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:8:19\n+   |\n+LL |     let _ = (0..).filter(|n| to_opt(*n).is_some()).map(|a| to_opt(a).unwrap());\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `filter_map(|a| to_opt(a))`\n+   |\n+   = note: `-D clippy::manual-filter-map` implied by `-D warnings`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:11:19\n+   |\n+LL |     let _ = (0..).filter(|&n| to_opt(n).is_some()).map(|a| to_opt(a).expect(\"hi\"));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `filter_map(|a| to_opt(a))`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:14:19\n+   |\n+LL |     let _ = (0..).filter(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(1));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `filter_map(|a| to_res(a).ok())`\n+\n+error: aborting due to 3 previous errors\n+"}]}