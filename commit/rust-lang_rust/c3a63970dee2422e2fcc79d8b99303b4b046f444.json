{"sha": "c3a63970dee2422e2fcc79d8b99303b4b046f444", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYTYzOTcwZGVlMjQyMmUyZmNjNzlkOGI5OTMwM2I0YjA0NmY0NDQ=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-03-19T08:01:17Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-29T11:12:49Z"}, "message": "Move alloc::Bound to {core,std}::ops\n\nThe stable reexport `std::collections::Bound` is now deprecated.\n\nAnother deprecated reexport could be added in `alloc`,\nbut that crate is unstable.", "tree": {"sha": "f8cdc9df5af3d6f06bac1650ac7df2bbe549b7f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8cdc9df5af3d6f06bac1650ac7df2bbe549b7f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3a63970dee2422e2fcc79d8b99303b4b046f444", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3a63970dee2422e2fcc79d8b99303b4b046f444", "html_url": "https://github.com/rust-lang/rust/commit/c3a63970dee2422e2fcc79d8b99303b4b046f444", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3a63970dee2422e2fcc79d8b99303b4b046f444/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "409744bcb91f4efa35b8fcc9e7033523a86b90c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/409744bcb91f4efa35b8fcc9e7033523a86b90c2", "html_url": "https://github.com/rust-lang/rust/commit/409744bcb91f4efa35b8fcc9e7033523a86b90c2"}], "stats": {"total": 127, "additions": 64, "deletions": 63}, "files": [{"sha": "2ba56063e36601e9e5a01cd89ed215dea10cab91", "filename": "src/liballoc/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Fliballoc%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Fliballoc%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fmap.rs?ref=c3a63970dee2422e2fcc79d8b99303b4b046f444", "patch": "@@ -13,11 +13,11 @@ use core::fmt::Debug;\n use core::hash::{Hash, Hasher};\n use core::iter::{FromIterator, Peekable, FusedIterator};\n use core::marker::PhantomData;\n+use core::ops::Bound::{Excluded, Included, Unbounded};\n use core::ops::Index;\n use core::{fmt, intrinsics, mem, ptr};\n \n use borrow::Borrow;\n-use Bound::{Excluded, Included, Unbounded};\n use range::RangeArgument;\n \n use super::node::{self, Handle, NodeRef, marker};\n@@ -804,7 +804,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     ///\n     /// ```\n     /// use std::collections::BTreeMap;\n-    /// use std::collections::Bound::Included;\n+    /// use std::ops::Bound::Included;\n     ///\n     /// let mut map = BTreeMap::new();\n     /// map.insert(3, \"a\");"}, {"sha": "d488dd6cbbd7337bb2ebd5289a1a8f26694d112d", "filename": "src/liballoc/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Fliballoc%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Fliballoc%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fset.rs?ref=c3a63970dee2422e2fcc79d8b99303b4b046f444", "patch": "@@ -240,7 +240,7 @@ impl<T: Ord> BTreeSet<T> {\n     ///\n     /// ```\n     /// use std::collections::BTreeSet;\n-    /// use std::collections::Bound::Included;\n+    /// use std::ops::Bound::Included;\n     ///\n     /// let mut set = BTreeSet::new();\n     /// set.insert(3);"}, {"sha": "eddbd50ea0381204613137ae3d1585a3c8492fb2", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=c3a63970dee2422e2fcc79d8b99303b4b046f444", "patch": "@@ -204,57 +204,6 @@ mod std {\n     pub use core::ops;      // RangeFull\n }\n \n-/// An endpoint of a range of keys.\n-///\n-/// # Examples\n-///\n-/// `Bound`s are range endpoints:\n-///\n-/// ```\n-/// #![feature(collections_range)]\n-///\n-/// use std::collections::range::RangeArgument;\n-/// use std::collections::Bound::*;\n-///\n-/// assert_eq!((..100).start(), Unbounded);\n-/// assert_eq!((1..12).start(), Included(&1));\n-/// assert_eq!((1..12).end(), Excluded(&12));\n-/// ```\n-///\n-/// Using a tuple of `Bound`s as an argument to [`BTreeMap::range`].\n-/// Note that in most cases, it's better to use range syntax (`1..5`) instead.\n-///\n-/// ```\n-/// use std::collections::BTreeMap;\n-/// use std::collections::Bound::{Excluded, Included, Unbounded};\n-///\n-/// let mut map = BTreeMap::new();\n-/// map.insert(3, \"a\");\n-/// map.insert(5, \"b\");\n-/// map.insert(8, \"c\");\n-///\n-/// for (key, value) in map.range((Excluded(3), Included(8))) {\n-///     println!(\"{}: {}\", key, value);\n-/// }\n-///\n-/// assert_eq!(Some((&3, &\"a\")), map.range((Unbounded, Included(5))).next());\n-/// ```\n-///\n-/// [`BTreeMap::range`]: btree_map/struct.BTreeMap.html#method.range\n-#[stable(feature = \"collections_bound\", since = \"1.17.0\")]\n-#[derive(Clone, Copy, Debug, Hash, PartialEq, Eq)]\n-pub enum Bound<T> {\n-    /// An inclusive bound.\n-    #[stable(feature = \"collections_bound\", since = \"1.17.0\")]\n-    Included(#[stable(feature = \"collections_bound\", since = \"1.17.0\")] T),\n-    /// An exclusive bound.\n-    #[stable(feature = \"collections_bound\", since = \"1.17.0\")]\n-    Excluded(#[stable(feature = \"collections_bound\", since = \"1.17.0\")] T),\n-    /// An infinite endpoint. Indicates that there is no bound in this direction.\n-    #[stable(feature = \"collections_bound\", since = \"1.17.0\")]\n-    Unbounded,\n-}\n-\n /// An intermediate trait for specialization of `Extend`.\n #[doc(hidden)]\n trait SpecExtend<I: IntoIterator> {"}, {"sha": "7cadbf3c90a024070280c6c4afc751f5fed1ad5b", "filename": "src/liballoc/range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Fliballoc%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Fliballoc%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frange.rs?ref=c3a63970dee2422e2fcc79d8b99303b4b046f444", "patch": "@@ -15,7 +15,7 @@\n //! Range syntax.\n \n use core::ops::{RangeFull, Range, RangeTo, RangeFrom, RangeInclusive, RangeToInclusive};\n-use Bound::{self, Excluded, Included, Unbounded};\n+use core::ops::Bound::{self, Excluded, Included, Unbounded};\n \n /// `RangeArgument` is implemented by Rust's built-in range types, produced\n /// by range syntax like `..`, `a..`, `..b` or `c..d`."}, {"sha": "754c78f777990522145c98f6d7a560ad3e8c3274", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=c3a63970dee2422e2fcc79d8b99303b4b046f444", "patch": "@@ -59,6 +59,7 @@\n use core::fmt;\n use core::hash;\n use core::iter::{FromIterator, FusedIterator};\n+use core::ops::Bound::{Excluded, Included, Unbounded};\n use core::ops::{self, Add, AddAssign, Index, IndexMut};\n use core::ptr;\n use core::str::pattern::Pattern;\n@@ -67,7 +68,6 @@ use std_unicode::char::{decode_utf16, REPLACEMENT_CHARACTER};\n \n use borrow::{Cow, ToOwned};\n use range::RangeArgument;\n-use Bound::{Excluded, Included, Unbounded};\n use str::{self, from_boxed_utf8_unchecked, FromStr, Utf8Error, Chars};\n use vec::Vec;\n use boxed::Box;"}, {"sha": "6ebdb86cc4a9865a42bdde87419e87503ef249f0", "filename": "src/liballoc/tests/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs?ref=c3a63970dee2422e2fcc79d8b99303b4b046f444", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n use std::collections::BTreeMap;\n-use std::collections::Bound::{self, Excluded, Included, Unbounded};\n use std::collections::btree_map::Entry::{Occupied, Vacant};\n+use std::ops::Bound::{self, Excluded, Included, Unbounded};\n use std::rc::Rc;\n \n use std::iter::FromIterator;"}, {"sha": "280570ecd65cbb1a232745758a6812096c349910", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=c3a63970dee2422e2fcc79d8b99303b4b046f444", "patch": "@@ -75,6 +75,7 @@ use core::marker::PhantomData;\n use core::mem;\n #[cfg(not(test))]\n use core::num::Float;\n+use core::ops::Bound::{Excluded, Included, Unbounded};\n use core::ops::{InPlace, Index, IndexMut, Place, Placer};\n use core::ops;\n use core::ptr;\n@@ -87,7 +88,6 @@ use boxed::Box;\n use raw_vec::RawVec;\n use super::range::RangeArgument;\n use super::allocator::CollectionAllocErr;\n-use Bound::{Excluded, Included, Unbounded};\n \n /// A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.\n ///"}, {"sha": "9efd730790d3bdf827d7f29a02264c31309b7270", "filename": "src/liballoc/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Fliballoc%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Fliballoc%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec_deque.rs?ref=c3a63970dee2422e2fcc79d8b99303b4b046f444", "patch": "@@ -21,6 +21,7 @@ use core::cmp::Ordering;\n use core::fmt;\n use core::iter::{repeat, FromIterator, FusedIterator};\n use core::mem;\n+use core::ops::Bound::{Excluded, Included, Unbounded};\n use core::ops::{Index, IndexMut, Place, Placer, InPlace};\n use core::ptr;\n use core::ptr::NonNull;\n@@ -33,7 +34,6 @@ use raw_vec::RawVec;\n \n use super::allocator::CollectionAllocErr;\n use super::range::RangeArgument;\n-use Bound::{Excluded, Included, Unbounded};\n use super::vec::Vec;\n \n const INITIAL_CAPACITY: usize = 7; // 2^3 - 1"}, {"sha": "b0e75135282631c03d32a017d1e62af62c123ace", "filename": "src/libcore/ops/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Flibcore%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Flibcore%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fmod.rs?ref=c3a63970dee2422e2fcc79d8b99303b4b046f444", "patch": "@@ -192,7 +192,7 @@ pub use self::index::{Index, IndexMut};\n pub use self::range::{Range, RangeFrom, RangeFull, RangeTo};\n \n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n-pub use self::range::{RangeInclusive, RangeToInclusive};\n+pub use self::range::{RangeInclusive, RangeToInclusive, Bound};\n \n #[unstable(feature = \"try_trait\", issue = \"42327\")]\n pub use self::try::Try;"}, {"sha": "dd44aedd09f5aeb9b6a68ee9b56c325e1305ac63", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=c3a63970dee2422e2fcc79d8b99303b4b046f444", "patch": "@@ -442,3 +442,54 @@ impl<Idx: PartialOrd<Idx>> RangeToInclusive<Idx> {\n \n // RangeToInclusive<Idx> cannot impl From<RangeTo<Idx>>\n // because underflow would be possible with (..0).into()\n+\n+/// An endpoint of a range of keys.\n+///\n+/// # Examples\n+///\n+/// `Bound`s are range endpoints:\n+///\n+/// ```\n+/// #![feature(collections_range)]\n+///\n+/// use std::collections::range::RangeArgument;\n+/// use std::ops::Bound::*;\n+///\n+/// assert_eq!((..100).start(), Unbounded);\n+/// assert_eq!((1..12).start(), Included(&1));\n+/// assert_eq!((1..12).end(), Excluded(&12));\n+/// ```\n+///\n+/// Using a tuple of `Bound`s as an argument to [`BTreeMap::range`].\n+/// Note that in most cases, it's better to use range syntax (`1..5`) instead.\n+///\n+/// ```\n+/// use std::collections::BTreeMap;\n+/// use std::ops::Bound::{Excluded, Included, Unbounded};\n+///\n+/// let mut map = BTreeMap::new();\n+/// map.insert(3, \"a\");\n+/// map.insert(5, \"b\");\n+/// map.insert(8, \"c\");\n+///\n+/// for (key, value) in map.range((Excluded(3), Included(8))) {\n+///     println!(\"{}: {}\", key, value);\n+/// }\n+///\n+/// assert_eq!(Some((&3, &\"a\")), map.range((Unbounded, Included(5))).next());\n+/// ```\n+///\n+/// [`BTreeMap::range`]: ../../std/collections/btree_map/struct.BTreeMap.html#method.range\n+#[stable(feature = \"collections_bound\", since = \"1.17.0\")]\n+#[derive(Clone, Copy, Debug, Hash, PartialEq, Eq)]\n+pub enum Bound<T> {\n+    /// An inclusive bound.\n+    #[stable(feature = \"collections_bound\", since = \"1.17.0\")]\n+    Included(#[stable(feature = \"collections_bound\", since = \"1.17.0\")] T),\n+    /// An exclusive bound.\n+    #[stable(feature = \"collections_bound\", since = \"1.17.0\")]\n+    Excluded(#[stable(feature = \"collections_bound\", since = \"1.17.0\")] T),\n+    /// An infinite endpoint. Indicates that there is no bound in this direction.\n+    #[stable(feature = \"collections_bound\", since = \"1.17.0\")]\n+    Unbounded,\n+}"}, {"sha": "b40f2f922379bc868da5647fa1924c2892018392", "filename": "src/librustc_data_structures/array_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Flibrustc_data_structures%2Farray_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Flibrustc_data_structures%2Farray_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Farray_vec.rs?ref=c3a63970dee2422e2fcc79d8b99303b4b046f444", "patch": "@@ -19,8 +19,8 @@ use std::slice;\n use std::fmt;\n use std::mem;\n use std::collections::range::RangeArgument;\n-use std::collections::Bound::{Excluded, Included, Unbounded};\n use std::mem::ManuallyDrop;\n+use std::ops::Bound::{Excluded, Included, Unbounded};\n \n pub unsafe trait Array {\n     type Element;"}, {"sha": "e6f15a6119e075e1c04f2d9ba172a9887a21f346", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=c3a63970dee2422e2fcc79d8b99303b4b046f444", "patch": "@@ -420,7 +420,8 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use alloc::Bound;\n+#[rustc_deprecated(reason = \"moved to `std::ops::Bound`\", since = \"1.26.0\")]\n+pub use ops::Bound;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use alloc::{BinaryHeap, BTreeMap, BTreeSet};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "e096fb3bbaef723a60aea7d1d43b5656cbe14de4", "filename": "src/test/run-pass/sync-send-iterators-in-libcollections.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a63970dee2422e2fcc79d8b99303b4b046f444/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcollections.rs?ref=c3a63970dee2422e2fcc79d8b99303b4b046f444", "patch": "@@ -18,8 +18,8 @@ use std::collections::VecDeque;\n use std::collections::HashMap;\n use std::collections::HashSet;\n \n-use std::collections::Bound::Included;\n use std::mem;\n+use std::ops::Bound::Included;\n \n fn is_sync<T>(_: T) where T: Sync {}\n fn is_send<T>(_: T) where T: Send {}"}]}