{"sha": "8c331ee4709c73b23f0f4c7525661ea7d47c8467", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMzMxZWU0NzA5YzczYjIzZjBmNGM3NTI1NjYxZWE3ZDQ3Yzg0Njc=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-02T16:05:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-02T16:05:12Z"}, "message": "Rollup merge of #74686 - ssomers:btree_cleanup_3, r=Mark-Simulacrum\n\nBTreeMap: remove into_slices and its unsafe block\n\nA small tweak to make BTreeMap code shorter and less unsafe.\n\nr? @Mark-Simulacrum", "tree": {"sha": "d4bf4379d3ac60528149c94046fc677c06d08b96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4bf4379d3ac60528149c94046fc677c06d08b96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c331ee4709c73b23f0f4c7525661ea7d47c8467", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfJuQ4CRBK7hj4Ov3rIwAAdHIIAFcg6BaN2qbVrc/tP997vX0H\nOSkDrYyCkaV02PlEyXiwwPdpm3QePWaj7YTs+Yv0DPHht3eeYbDuykACJnFbmoOR\nbdO0499n6Hp0Kcpie6zmaPWp+b6WZsgh3B0g6GVg+aIs5LDVgloN3bIVQcmYYA4u\n2m0uopA/fBP6jwxvZrDuQkFpsZLNu5AMP32iYY1zMP/dfmJksF/tjUEBnR36c7sj\n1JzKQKuts4CV5n5OXk1H9u1A0Ek+vRlD2xXhkH62EB+Ar3hi5tAwDZ6xr2pdWAMc\nJP5ZE88ozrAws5NY9arJ4hCLrHeH7K+ZxP4xjrWELm81g4gLqDsRbQgLIOZQP00=\n=D35U\n-----END PGP SIGNATURE-----\n", "payload": "tree d4bf4379d3ac60528149c94046fc677c06d08b96\nparent e8876ae2c11f341565059b900eeae1254a9accf1\nparent c4f4639e1a2eb07d17e7393a1c7f0594f0c11faf\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1596384312 +0900\ncommitter GitHub <noreply@github.com> 1596384312 +0900\n\nRollup merge of #74686 - ssomers:btree_cleanup_3, r=Mark-Simulacrum\n\nBTreeMap: remove into_slices and its unsafe block\n\nA small tweak to make BTreeMap code shorter and less unsafe.\n\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c331ee4709c73b23f0f4c7525661ea7d47c8467", "html_url": "https://github.com/rust-lang/rust/commit/8c331ee4709c73b23f0f4c7525661ea7d47c8467", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c331ee4709c73b23f0f4c7525661ea7d47c8467/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8876ae2c11f341565059b900eeae1254a9accf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8876ae2c11f341565059b900eeae1254a9accf1", "html_url": "https://github.com/rust-lang/rust/commit/e8876ae2c11f341565059b900eeae1254a9accf1"}, {"sha": "c4f4639e1a2eb07d17e7393a1c7f0594f0c11faf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f4639e1a2eb07d17e7393a1c7f0594f0c11faf", "html_url": "https://github.com/rust-lang/rust/commit/c4f4639e1a2eb07d17e7393a1c7f0594f0c11faf"}], "stats": {"total": 13, "additions": 3, "deletions": 10}, "files": [{"sha": "9352c5806a48f69cd05f34498524fa7bb858e0dd", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8c331ee4709c73b23f0f4c7525661ea7d47c8467/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c331ee4709c73b23f0f4c7525661ea7d47c8467/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=8c331ee4709c73b23f0f4c7525661ea7d47c8467", "patch": "@@ -466,12 +466,6 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> {\n     fn into_val_slice(self) -> &'a [V] {\n         unsafe { slice::from_raw_parts(MaybeUninit::first_ptr(&self.as_leaf().vals), self.len()) }\n     }\n-\n-    fn into_slices(self) -> (&'a [K], &'a [V]) {\n-        // SAFETY: equivalent to reborrow() except not requiring Type: 'a\n-        let k = unsafe { ptr::read(&self) };\n-        (k.into_key_slice(), self.into_val_slice())\n-    }\n }\n \n impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n@@ -980,10 +974,9 @@ impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Internal>, marke\n \n impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Immut<'a>, K, V, NodeType>, marker::KV> {\n     pub fn into_kv(self) -> (&'a K, &'a V) {\n-        unsafe {\n-            let (keys, vals) = self.node.into_slices();\n-            (keys.get_unchecked(self.idx), vals.get_unchecked(self.idx))\n-        }\n+        let keys = self.node.into_key_slice();\n+        let vals = self.node.into_val_slice();\n+        unsafe { (keys.get_unchecked(self.idx), vals.get_unchecked(self.idx)) }\n     }\n }\n "}]}