{"sha": "32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZDM1ZTZlOWZiOWE1ZjFjYmI1MWZkZmY2YWVkOTM5OGM0ZWMyNzE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-29T18:10:22Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-29T21:53:03Z"}, "message": "rustc: Make the `trait_map` of TyCtxt private\n\nThis map is calculated in resolve, but we want to be sure to track it for\nincremental compliation. Hide it behind a query to get more refactorings later.", "tree": {"sha": "ca79236fee833534495828bd366627fcab75be84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca79236fee833534495828bd366627fcab75be84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271", "html_url": "https://github.com/rust-lang/rust/commit/32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faf477a8c232d0442d16a4025f49d3ae1519131e", "url": "https://api.github.com/repos/rust-lang/rust/commits/faf477a8c232d0442d16a4025f49d3ae1519131e", "html_url": "https://github.com/rust-lang/rust/commit/faf477a8c232d0442d16a4025f49d3ae1519131e"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "92078f97e418f21a3d6168d54e84ab8d14330d03", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271", "patch": "@@ -62,6 +62,7 @@\n \n use hir::def_id::{CrateNum, DefId};\n use hir::map::DefPathHash;\n+use hir::HirId;\n \n use ich::Fingerprint;\n use ty::{TyCtxt, Instance, InstanceDef};\n@@ -527,6 +528,7 @@ define_dep_nodes!( <'tcx>\n     [] HasGlobalAllocator(DefId),\n     [] ExternCrate(DefId),\n     [] LintLevels,\n+    [] InScopeTraits(HirId),\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "234f3a883d72a2d790b93c04ea2a9bc939684abc", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271", "patch": "@@ -205,13 +205,15 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for ast::N\n                 // corresponding entry in the `trait_map` we need to hash that.\n                 // Make sure we don't ignore too much by checking that there is\n                 // no entry in a debug_assert!().\n-                debug_assert!(hcx.tcx.trait_map.get(self).is_none());\n+                let hir_id = hcx.tcx.hir.node_to_hir_id(*self);\n+                debug_assert!(hcx.tcx.in_scope_traits(hir_id).is_none());\n             }\n             NodeIdHashingMode::HashDefPath => {\n                 hcx.tcx.hir.definitions().node_to_hir_id(*self).hash_stable(hcx, hasher);\n             }\n             NodeIdHashingMode::HashTraitsInScope => {\n-                if let Some(traits) = hcx.tcx.trait_map.get(self) {\n+                let hir_id = hcx.tcx.hir.node_to_hir_id(*self);\n+                if let Some(traits) = hcx.tcx.in_scope_traits(hir_id) {\n                     // The ordering of the candidates is not fixed. So we hash\n                     // the def-ids and then sort them and hash the collection.\n                     let mut candidates: AccumulateVec<[_; 8]> ="}, {"sha": "9ff5a33af507d8420c73c50342eba6ab648f756f", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271", "patch": "@@ -14,7 +14,7 @@ use dep_graph::DepGraph;\n use errors::DiagnosticBuilder;\n use session::Session;\n use middle;\n-use hir::{TraitMap};\n+use hir::{TraitCandidate, HirId};\n use hir::def::{Def, ExportMap};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use hir::map as hir_map;\n@@ -819,7 +819,7 @@ pub struct GlobalCtxt<'tcx> {\n \n     /// Map indicating what traits are in scope for places where this\n     /// is relevant; generated by resolve.\n-    pub trait_map: TraitMap,\n+    trait_map: FxHashMap<HirId, Rc<Vec<TraitCandidate>>>,\n \n     /// Export map produced by name resolution.\n     pub export_map: ExportMap,\n@@ -1078,7 +1078,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             dep_graph: dep_graph.clone(),\n             types: common_types,\n             named_region_map,\n-            trait_map: resolutions.trait_map,\n+            trait_map: resolutions.trait_map.into_iter().map(|(k, v)| {\n+                (hir.node_to_hir_id(k), Rc::new(v))\n+            }).collect(),\n             export_map: resolutions.export_map,\n             hir,\n             def_path_hash_to_def_id,\n@@ -1997,3 +1999,13 @@ impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {\n         Ok(f(&iter.collect::<Result<AccumulateVec<[_; 8]>, _>>()?))\n     }\n }\n+\n+fn in_scope_traits<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: HirId)\n+    -> Option<Rc<Vec<TraitCandidate>>>\n+{\n+    tcx.gcx.trait_map.get(&id).cloned()\n+}\n+\n+pub fn provide(providers: &mut ty::maps::Providers) {\n+    providers.in_scope_traits = in_scope_traits;\n+}"}, {"sha": "25c2c6b0d710c3202d6fb62ec2f4a0d91fd7178d", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271", "patch": "@@ -12,7 +12,7 @@ use dep_graph::{DepConstructor, DepNode, DepNodeIndex};\n use errors::{Diagnostic, DiagnosticBuilder};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use hir::def::Def;\n-use hir;\n+use hir::{self, TraitCandidate, HirId};\n use lint;\n use middle::const_val;\n use middle::cstore::{ExternCrate, LinkagePreference};\n@@ -80,6 +80,15 @@ impl Key for CrateNum {\n     }\n }\n \n+impl Key for HirId {\n+    fn map_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+    fn default_span(&self, _tcx: TyCtxt) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n impl Key for DefId {\n     fn map_crate(&self) -> CrateNum {\n         self.krate\n@@ -540,6 +549,12 @@ impl<'tcx> QueryDescription for queries::lint_levels<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::in_scope_traits<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: HirId) -> String {\n+        format!(\"fetching the traits in scope at a particular ast node\")\n+    }\n+}\n+\n // If enabled, send a message to the profile-queries thread\n macro_rules! profq_msg {\n     ($tcx:expr, $msg:expr) => {\n@@ -1108,6 +1123,8 @@ define_maps! { <'tcx>\n     [] extern_crate: ExternCrate(DefId) -> Rc<Option<ExternCrate>>,\n \n     [] lint_levels: lint_levels(CrateNum) -> Rc<lint::LintLevelMap>,\n+\n+    [] in_scope_traits: InScopeTraits(HirId) -> Option<Rc<Vec<TraitCandidate>>>,\n }\n \n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {"}, {"sha": "ca735599a0da64c4f8641723541540772994a3b3", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271", "patch": "@@ -2517,6 +2517,7 @@ fn param_env<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n pub fn provide(providers: &mut ty::maps::Providers) {\n     util::provide(providers);\n+    context::provide(providers);\n     *providers = ty::maps::Providers {\n         associated_item,\n         associated_item_def_ids,"}, {"sha": "056a1c90654597a11aa8d7fbb6284cd357c97874", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271", "patch": "@@ -663,9 +663,10 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                                                          expr_id: ast::NodeId)\n                                                          -> Result<(), MethodError<'tcx>> {\n         let mut duplicates = FxHashSet();\n-        let opt_applicable_traits = self.tcx.trait_map.get(&expr_id);\n+        let expr_hir_id = self.tcx.hir.node_to_hir_id(expr_id);\n+        let opt_applicable_traits = self.tcx.in_scope_traits(expr_hir_id);\n         if let Some(applicable_traits) = opt_applicable_traits {\n-            for trait_candidate in applicable_traits {\n+            for trait_candidate in applicable_traits.iter() {\n                 let trait_did = trait_candidate.def_id;\n                 if duplicates.insert(trait_did) {\n                     let import_id = trait_candidate.import_id;"}]}