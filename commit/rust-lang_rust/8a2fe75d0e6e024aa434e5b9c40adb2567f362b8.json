{"sha": "8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "node_id": "C_kwDOAAsO6NoAKDhhMmZlNzVkMGU2ZTAyNGFhNDM0ZTViOWM0MGFkYjI1NjdmMzYyYjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-09T04:47:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-09T04:47:30Z"}, "message": "Auto merge of #95960 - jhpratt:remove-rustc_deprecated, r=compiler-errors\n\nRemove `#[rustc_deprecated]`\n\nThis removes `#[rustc_deprecated]` and introduces diagnostics to help users to the right direction (that being `#[deprecated]`). All uses of `#[rustc_deprecated]` have been converted. CI is expected to fail initially; this requires #95958, which includes converting `stdarch`.\n\nI plan on following up in a short while (maybe a bootstrap cycle?) removing the diagnostics, as they're only intended to be short-term.", "tree": {"sha": "efdc8580272e7994c4de5ab04f16cc3087e73c64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efdc8580272e7994c4de5ab04f16cc3087e73c64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "html_url": "https://github.com/rust-lang/rust/commit/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db5b365fb0e7aa5f59d80236f520f5afc6e39ff4", "url": "https://api.github.com/repos/rust-lang/rust/commits/db5b365fb0e7aa5f59d80236f520f5afc6e39ff4", "html_url": "https://github.com/rust-lang/rust/commit/db5b365fb0e7aa5f59d80236f520f5afc6e39ff4"}, {"sha": "dac487ae2bf9f0d51b7462e9d311d67f46048643", "url": "https://api.github.com/repos/rust-lang/rust/commits/dac487ae2bf9f0d51b7462e9d311d67f46048643", "html_url": "https://github.com/rust-lang/rust/commit/dac487ae2bf9f0d51b7462e9d311d67f46048643"}], "stats": {"total": 843, "additions": 406, "deletions": 437}, "files": [{"sha": "5a79cf68f113e192d745abd3b630802bf11e9d90", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -679,12 +679,12 @@ where\n             continue;\n         }\n \n-        if let Some((_, span)) = &depr {\n-            struct_span_err!(diagnostic, attr.span, E0550, \"multiple deprecated attributes\")\n-                .span_label(attr.span, \"repeated deprecation attribute\")\n-                .span_label(*span, \"first deprecation attribute\")\n+        // FIXME(jhpratt) remove this eventually\n+        if attr.has_name(sym::rustc_deprecated) {\n+            diagnostic\n+                .struct_span_err(attr.span, \"`#[rustc_deprecated]` has been removed\")\n+                .help(\"use `#[deprecated]` instead\")\n                 .emit();\n-            break;\n         }\n \n         let Some(meta) = attr.meta() else {\n@@ -742,12 +742,24 @@ where\n                                     continue 'outer;\n                                 }\n                             }\n-                            // FIXME(jhpratt) remove this after a bootstrap occurs. Emitting an\n-                            // error specific to the renaming would be a good idea as well.\n+                            // FIXME(jhpratt) remove this eventually\n                             sym::reason if attr.has_name(sym::rustc_deprecated) => {\n                                 if !get(mi, &mut note) {\n                                     continue 'outer;\n                                 }\n+\n+                                let mut diag = diagnostic\n+                                    .struct_span_err(mi.span, \"`reason` has been renamed\");\n+                                match note {\n+                                    Some(note) => diag.span_suggestion(\n+                                        mi.span,\n+                                        \"use `note` instead\",\n+                                        format!(\"note = \\\"{note}\\\"\"),\n+                                        Applicability::MachineApplicable,\n+                                    ),\n+                                    None => diag.span_help(mi.span, \"use `note` instead\"),\n+                                };\n+                                diag.emit();\n                             }\n                             sym::suggestion => {\n                                 if !sess.features_untracked().deprecated_suggestion {"}, {"sha": "c53d60a5f4757b08a86b7e5e8e405cf611945548", "filename": "compiler/rustc_error_codes/src/error_codes/E0539.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0539.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0539.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0539.md?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -6,7 +6,7 @@ Erroneous code example:\n #![feature(staged_api)]\n #![stable(since = \"1.0.0\", feature = \"test\")]\n \n-#[rustc_deprecated(reason)] // error!\n+#[deprecated(note)] // error!\n #[unstable(feature = \"deprecated_fn\", issue = \"123\")]\n fn deprecated() {}\n \n@@ -30,7 +30,7 @@ To fix these issues you need to give required key-value pairs.\n #![feature(staged_api)]\n #![stable(since = \"1.0.0\", feature = \"test\")]\n \n-#[rustc_deprecated(since = \"1.39.0\", reason = \"reason\")] // ok!\n+#[deprecated(since = \"1.39.0\", note = \"reason\")] // ok!\n #[unstable(feature = \"deprecated_fn\", issue = \"123\")]\n fn deprecated() {}\n "}, {"sha": "c69e574179b105691eee6e3083e62bdb99237472", "filename": "compiler/rustc_error_codes/src/error_codes/E0542.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0542.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0542.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0542.md?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -13,8 +13,8 @@ fn _stable_fn() {}\n const fn _stable_const_fn() {}\n \n #[stable(feature = \"_deprecated_fn\", since = \"0.1.0\")]\n-#[rustc_deprecated(\n-    reason = \"explanation for deprecation\"\n+#[deprecated(\n+    note = \"explanation for deprecation\"\n )] // invalid\n fn _deprecated_fn() {}\n ```\n@@ -32,9 +32,9 @@ fn _stable_fn() {}\n const fn _stable_const_fn() {}\n \n #[stable(feature = \"_deprecated_fn\", since = \"0.1.0\")]\n-#[rustc_deprecated(\n+#[deprecated(\n     since = \"1.0.0\",\n-    reason = \"explanation for deprecation\"\n+    note = \"explanation for deprecation\"\n )] // ok!\n fn _deprecated_fn() {}\n ```"}, {"sha": "d0b2e2f7a7d0fe3ad8ee0abefe5909c4c19e9ec8", "filename": "compiler/rustc_error_codes/src/error_codes/E0543.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0543.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0543.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0543.md?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1,4 +1,4 @@\n-The `reason` value is missing in a stability attribute.\n+The `note` value is missing in a stability attribute.\n \n Erroneous code example:\n \n@@ -7,22 +7,22 @@ Erroneous code example:\n #![stable(since = \"1.0.0\", feature = \"test\")]\n \n #[stable(since = \"0.1.0\", feature = \"_deprecated_fn\")]\n-#[rustc_deprecated(\n+#[deprecated(\n     since = \"1.0.0\"\n )] // invalid\n fn _deprecated_fn() {}\n ```\n \n-To fix this issue, you need to provide the `reason` field. Example:\n+To fix this issue, you need to provide the `note` field. Example:\n \n ```\n #![feature(staged_api)]\n #![stable(since = \"1.0.0\", feature = \"test\")]\n \n #[stable(since = \"0.1.0\", feature = \"_deprecated_fn\")]\n-#[rustc_deprecated(\n+#[deprecated(\n     since = \"1.0.0\",\n-    reason = \"explanation for deprecation\"\n+    note = \"explanation for deprecation\"\n )] // ok!\n fn _deprecated_fn() {}\n ```"}, {"sha": "70e458a98673ce8c1e5f7d403ec5ac6defb4c430", "filename": "compiler/rustc_error_codes/src/error_codes/E0549.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0549.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0549.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0549.md?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1,15 +1,15 @@\n-A `rustc_deprecated` attribute wasn't paired with a `stable`/`unstable`\n-attribute.\n+A `deprecated` attribute wasn't paired with a `stable`/`unstable` attribute with\n+`#![feature(staged_api)]` enabled.\n \n Erroneous code example:\n \n ```compile_fail,E0549\n #![feature(staged_api)]\n #![stable(since = \"1.0.0\", feature = \"test\")]\n \n-#[rustc_deprecated(\n+#[deprecated(\n     since = \"1.0.1\",\n-    reason = \"explanation for deprecation\"\n+    note = \"explanation for deprecation\"\n )] // invalid\n fn _deprecated_fn() {}\n ```\n@@ -22,9 +22,9 @@ Example:\n #![stable(since = \"1.0.0\", feature = \"test\")]\n \n #[stable(since = \"1.0.0\", feature = \"test\")]\n-#[rustc_deprecated(\n+#[deprecated(\n     since = \"1.0.1\",\n-    reason = \"explanation for deprecation\"\n+    note = \"explanation for deprecation\"\n )] // ok!\n fn _deprecated_fn() {}\n ```"}, {"sha": "6aac5c969d23bf723fe47b203813ec6736dcad9e", "filename": "compiler/rustc_error_codes/src/error_codes/E0550.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0550.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0550.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0550.md?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1,8 +1,10 @@\n+#### Note: this error code is no longer emitted by the compiler\n+\n More than one `deprecated` attribute has been put on an item.\n \n Erroneous code example:\n \n-```compile_fail,E0550\n+```compile_fail\n #[deprecated(note = \"because why not?\")]\n #[deprecated(note = \"right?\")] // error!\n fn the_banished() {}"}, {"sha": "b912061ec42ccbaf43a067f3b8adec0cb457556e", "filename": "compiler/rustc_error_codes/src/error_codes/E0734.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0734.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0734.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0734.md?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -3,7 +3,6 @@ A stability attribute has been used outside of the standard library.\n Erroneous code example:\n \n ```compile_fail,E0734\n-#[rustc_deprecated(since = \"b\", reason = \"text\")] // invalid\n #[stable(feature = \"a\", since = \"b\")] // invalid\n #[unstable(feature = \"b\", issue = \"none\")] // invalid\n fn foo(){}"}, {"sha": "c5f42aa7af72438e85ee45a71d60ed7e7814f0bb", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -304,8 +304,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n             List: r#\"/*opt*/ since = \"version\", /*opt*/ note = \"reason\"\"#,\n             NameValueStr: \"reason\"\n         ),\n-        // This has special duplicate handling in E0550 to handle duplicates with rustc_deprecated\n-        DuplicatesOk\n+        ErrorFollowing\n     ),\n \n     // Crate properties:\n@@ -469,10 +468,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // ==========================================================================\n \n     ungated!(feature, CrateLevel, template!(List: \"name1, name2, ...\"), DuplicatesOk),\n-    // DuplicatesOk since it has its own validation\n+    // FIXME(jhpratt) remove this eventually\n     ungated!(\n         rustc_deprecated, Normal,\n-        template!(List: r#\"since = \"version\", note = \"...\"\"#), DuplicatesOk // See E0550\n+        template!(List: r#\"since = \"version\", note = \"...\"\"#), ErrorFollowing\n     ),\n     // DuplicatesOk since it has its own validation\n     ungated!("}, {"sha": "565ec4e5ab9b97c4679ff98026d2e5f224c3b961", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -2201,13 +2201,12 @@ declare_lint! {\n     /// used by user code.\n     ///\n     /// This lint is only enabled in the standard library. It works with the\n-    /// use of `#[rustc_deprecated]` with a `since` field of a version in the\n-    /// future. This allows something to be marked as deprecated in a future\n-    /// version, and then this lint will ensure that the item is no longer\n-    /// used in the standard library. See the [stability documentation] for\n-    /// more details.\n+    /// use of `#[deprecated]` with a `since` field of a version in the future.\n+    /// This allows something to be marked as deprecated in a future version,\n+    /// and then this lint will ensure that the item is no longer used in the\n+    /// standard library. See the [stability documentation] for more details.\n     ///\n-    /// [stability documentation]: https://rustc-dev-guide.rust-lang.org/stability.html#rustc_deprecated\n+    /// [stability documentation]: https://rustc-dev-guide.rust-lang.org/stability.html#deprecated\n     pub DEPRECATED_IN_FUTURE,\n     Allow,\n     \"detects use of items that will be deprecated in a future version\","}, {"sha": "6918046390e6f9dc3b347e329d9baf615e41ff53", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -118,8 +118,7 @@ pub fn deprecation_in_effect(depr: &Deprecation) -> bool {\n     }\n \n     if !is_since_rustc_version {\n-        // The `since` field doesn't have semantic purpose in the stable `deprecated`\n-        // attribute, only in `rustc_deprecated`.\n+        // The `since` field doesn't have semantic purpose without `#![staged_api]`.\n         return true;\n     }\n \n@@ -336,7 +335,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 // topmost deprecation. For example, if a struct is deprecated,\n                 // the use of a field won't be linted.\n                 //\n-                // #[rustc_deprecated] however wants to emit down the whole\n+                // With #![staged_api], we want to emit down the whole\n                 // hierarchy.\n                 let depr_attr = &depr_entry.attr;\n                 if !skip || depr_attr.is_since_rustc_version {"}, {"sha": "5bdf36a63a22506122a2c5bf6a0ebbba99bc5ffe", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -657,7 +657,7 @@ impl<T> [T] {\n     /// ```\n     #[rustc_allow_incoherent_impl]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_deprecated(since = \"1.3.0\", reason = \"renamed to join\")]\n+    #[deprecated(since = \"1.3.0\", note = \"renamed to join\")]\n     pub fn connect<Separator>(&self, sep: Separator) -> <Self as Join<Separator>>::Output\n     where\n         Self: Join<Separator>,"}, {"sha": "cf864039a23bad947491e70efc956af49c63807e", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -419,9 +419,9 @@ impl Layout {\n }\n \n #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n-#[rustc_deprecated(\n+#[deprecated(\n     since = \"1.52.0\",\n-    reason = \"Name does not follow std convention, use LayoutError\",\n+    note = \"Name does not follow std convention, use LayoutError\",\n     suggestion = \"LayoutError\"\n )]\n pub type LayoutErr = LayoutError;"}, {"sha": "a034562d13ab7ad968f5e535e8251d097a53ebdb", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -10,9 +10,9 @@ pub use self::global::GlobalAlloc;\n #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n pub use self::layout::Layout;\n #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n-#[rustc_deprecated(\n+#[deprecated(\n     since = \"1.52.0\",\n-    reason = \"Name does not follow std convention, use LayoutError\",\n+    note = \"Name does not follow std convention, use LayoutError\",\n     suggestion = \"LayoutError\"\n )]\n #[allow(deprecated, deprecated_in_future)]"}, {"sha": "5cecc4086d8f3ac6e538fbcfff0e5add75059614", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -79,7 +79,7 @@ impl<T, const N: usize> IntoIterator for [T; N] {\n impl<T, const N: usize> IntoIter<T, N> {\n     /// Creates a new iterator over the given `array`.\n     #[stable(feature = \"array_value_iter\", since = \"1.51.0\")]\n-    #[rustc_deprecated(since = \"1.59.0\", reason = \"use `IntoIterator::into_iter` instead\")]\n+    #[deprecated(since = \"1.59.0\", note = \"use `IntoIterator::into_iter` instead\")]\n     pub fn new(array: [T; N]) -> Self {\n         IntoIterator::into_iter(array)\n     }"}, {"sha": "700a78cac5ab8abf28a5b088fe517646a3611314", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1653,10 +1653,10 @@ impl<'a> Formatter<'a> {\n     /// Flags for formatting\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.24.0\",\n-        reason = \"use the `sign_plus`, `sign_minus`, `alternate`, \\\n-                  or `sign_aware_zero_pad` methods instead\"\n+        note = \"use the `sign_plus`, `sign_minus`, `alternate`, \\\n+                or `sign_aware_zero_pad` methods instead\"\n     )]\n     pub fn flags(&self) -> u32 {\n         self.flags"}, {"sha": "c2ade8c7e54edd246e5b8608e65b50cb77f5e644", "filename": "library/core/src/hash/sip.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -14,10 +14,7 @@ use crate::ptr;\n ///\n /// See: <https://131002.net/siphash>\n #[unstable(feature = \"hashmap_internals\", issue = \"none\")]\n-#[rustc_deprecated(\n-    since = \"1.13.0\",\n-    reason = \"use `std::collections::hash_map::DefaultHasher` instead\"\n-)]\n+#[deprecated(since = \"1.13.0\", note = \"use `std::collections::hash_map::DefaultHasher` instead\")]\n #[derive(Debug, Clone, Default)]\n #[doc(hidden)]\n pub struct SipHasher13 {\n@@ -28,10 +25,7 @@ pub struct SipHasher13 {\n ///\n /// See: <https://131002.net/siphash/>\n #[unstable(feature = \"hashmap_internals\", issue = \"none\")]\n-#[rustc_deprecated(\n-    since = \"1.13.0\",\n-    reason = \"use `std::collections::hash_map::DefaultHasher` instead\"\n-)]\n+#[deprecated(since = \"1.13.0\", note = \"use `std::collections::hash_map::DefaultHasher` instead\")]\n #[derive(Debug, Clone, Default)]\n struct SipHasher24 {\n     hasher: Hasher<Sip24Rounds>,\n@@ -50,10 +44,7 @@ struct SipHasher24 {\n /// it is not intended for cryptographic purposes. As such, all\n /// cryptographic uses of this implementation are _strongly discouraged_.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(\n-    since = \"1.13.0\",\n-    reason = \"use `std::collections::hash_map::DefaultHasher` instead\"\n-)]\n+#[deprecated(since = \"1.13.0\", note = \"use `std::collections::hash_map::DefaultHasher` instead\")]\n #[derive(Debug, Clone, Default)]\n pub struct SipHasher(SipHasher24);\n \n@@ -153,9 +144,9 @@ impl SipHasher {\n     /// Creates a new `SipHasher` with the two initial keys set to 0.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.13.0\",\n-        reason = \"use `std::collections::hash_map::DefaultHasher` instead\"\n+        note = \"use `std::collections::hash_map::DefaultHasher` instead\"\n     )]\n     #[must_use]\n     pub fn new() -> SipHasher {\n@@ -165,9 +156,9 @@ impl SipHasher {\n     /// Creates a `SipHasher` that is keyed off the provided keys.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.13.0\",\n-        reason = \"use `std::collections::hash_map::DefaultHasher` instead\"\n+        note = \"use `std::collections::hash_map::DefaultHasher` instead\"\n     )]\n     #[must_use]\n     pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher {\n@@ -179,9 +170,9 @@ impl SipHasher13 {\n     /// Creates a new `SipHasher13` with the two initial keys set to 0.\n     #[inline]\n     #[unstable(feature = \"hashmap_internals\", issue = \"none\")]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.13.0\",\n-        reason = \"use `std::collections::hash_map::DefaultHasher` instead\"\n+        note = \"use `std::collections::hash_map::DefaultHasher` instead\"\n     )]\n     pub fn new() -> SipHasher13 {\n         SipHasher13::new_with_keys(0, 0)\n@@ -190,9 +181,9 @@ impl SipHasher13 {\n     /// Creates a `SipHasher13` that is keyed off the provided keys.\n     #[inline]\n     #[unstable(feature = \"hashmap_internals\", issue = \"none\")]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.13.0\",\n-        reason = \"use `std::collections::hash_map::DefaultHasher` instead\"\n+        note = \"use `std::collections::hash_map::DefaultHasher` instead\"\n     )]\n     pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher13 {\n         SipHasher13 { hasher: Hasher::new_with_keys(key0, key1) }"}, {"sha": "d1647c388594c83f13606217a943cb9b2a017384", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -63,10 +63,7 @@ use crate::mem;\n use crate::sync::atomic::{self, AtomicBool, AtomicI32, AtomicIsize, AtomicU32, Ordering};\n \n #[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n-#[rustc_deprecated(\n-    reason = \"no longer an intrinsic - use `ptr::drop_in_place` directly\",\n-    since = \"1.52.0\"\n-)]\n+#[deprecated(note = \"no longer an intrinsic - use `ptr::drop_in_place` directly\", since = \"1.52.0\")]\n #[inline]\n pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n     // SAFETY: see `ptr::drop_in_place`"}, {"sha": "a231f533d190b0660927e7fdcc106830cb5d3ade", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -410,7 +410,7 @@ macro_rules! matches {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"1.39.0\", reason = \"use the `?` operator instead\")]\n+#[deprecated(since = \"1.39.0\", note = \"use the `?` operator instead\")]\n #[doc(alias = \"?\")]\n macro_rules! r#try {\n     ($expr:expr $(,)?) => {\n@@ -1536,10 +1536,7 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[allow_internal_unstable(core_intrinsics, libstd_sys_internals)]\n-    #[rustc_deprecated(\n-        since = \"1.52.0\",\n-        reason = \"rustc-serialize is deprecated and no longer supported\"\n-    )]\n+    #[deprecated(since = \"1.52.0\", note = \"rustc-serialize is deprecated and no longer supported\")]\n     #[doc(hidden)] // While technically stable, using it is unstable, and deprecated. Hide it.\n     pub macro RustcDecodable($item:item) {\n         /* compiler built-in */\n@@ -1549,10 +1546,7 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[allow_internal_unstable(core_intrinsics)]\n-    #[rustc_deprecated(\n-        since = \"1.52.0\",\n-        reason = \"rustc-serialize is deprecated and no longer supported\"\n-    )]\n+    #[deprecated(since = \"1.52.0\", note = \"rustc-serialize is deprecated and no longer supported\")]\n     #[doc(hidden)] // While technically stable, using it is unstable, and deprecated. Hide it.\n     pub macro RustcEncodable($item:item) {\n         /* compiler built-in */"}, {"sha": "4ce7c8c2b607b1a629739d8b004348abcca07bd0", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -408,7 +408,7 @@ pub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n #[inline]\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(reason = \"use `align_of` instead\", since = \"1.2.0\")]\n+#[deprecated(note = \"use `align_of` instead\", since = \"1.2.0\")]\n pub fn min_align_of<T>() -> usize {\n     intrinsics::min_align_of::<T>()\n }\n@@ -431,7 +431,7 @@ pub fn min_align_of<T>() -> usize {\n #[inline]\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(reason = \"use `align_of_val` instead\", since = \"1.2.0\")]\n+#[deprecated(note = \"use `align_of_val` instead\", since = \"1.2.0\")]\n pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n     // SAFETY: val is a reference, so it's a valid raw pointer\n     unsafe { intrinsics::min_align_of_val(val) }\n@@ -673,7 +673,7 @@ pub unsafe fn zeroed<T>() -> T {\n /// [inv]: MaybeUninit#initialization-invariant\n #[inline(always)]\n #[must_use]\n-#[rustc_deprecated(since = \"1.39.0\", reason = \"use `mem::MaybeUninit` instead\")]\n+#[deprecated(since = \"1.39.0\", note = \"use `mem::MaybeUninit` instead\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated_in_future)]\n #[allow(deprecated)]"}, {"sha": "29b36521fa6c3f278ef629b6d8968fdca0b1cdf0", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 15, "deletions": 39, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -31,7 +31,7 @@ use crate::num::FpCategory;\n /// let r = f32::RADIX;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `RADIX` associated constant on `f32`\")]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `RADIX` associated constant on `f32`\")]\n pub const RADIX: u32 = f32::RADIX;\n \n /// Number of significant digits in base 2.\n@@ -48,9 +48,9 @@ pub const RADIX: u32 = f32::RADIX;\n /// let d = f32::MANTISSA_DIGITS;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(\n+#[deprecated(\n     since = \"TBD\",\n-    reason = \"replaced by the `MANTISSA_DIGITS` associated constant on `f32`\"\n+    note = \"replaced by the `MANTISSA_DIGITS` associated constant on `f32`\"\n )]\n pub const MANTISSA_DIGITS: u32 = f32::MANTISSA_DIGITS;\n \n@@ -68,7 +68,7 @@ pub const MANTISSA_DIGITS: u32 = f32::MANTISSA_DIGITS;\n /// let d = f32::DIGITS;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `DIGITS` associated constant on `f32`\")]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `DIGITS` associated constant on `f32`\")]\n pub const DIGITS: u32 = f32::DIGITS;\n \n /// [Machine epsilon] value for `f32`.\n@@ -89,10 +89,7 @@ pub const DIGITS: u32 = f32::DIGITS;\n /// let e = f32::EPSILON;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(\n-    since = \"TBD\",\n-    reason = \"replaced by the `EPSILON` associated constant on `f32`\"\n-)]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `EPSILON` associated constant on `f32`\")]\n pub const EPSILON: f32 = f32::EPSILON;\n \n /// Smallest finite `f32` value.\n@@ -109,7 +106,7 @@ pub const EPSILON: f32 = f32::EPSILON;\n /// let min = f32::MIN;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `MIN` associated constant on `f32`\")]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `MIN` associated constant on `f32`\")]\n pub const MIN: f32 = f32::MIN;\n \n /// Smallest positive normal `f32` value.\n@@ -126,10 +123,7 @@ pub const MIN: f32 = f32::MIN;\n /// let min = f32::MIN_POSITIVE;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(\n-    since = \"TBD\",\n-    reason = \"replaced by the `MIN_POSITIVE` associated constant on `f32`\"\n-)]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `MIN_POSITIVE` associated constant on `f32`\")]\n pub const MIN_POSITIVE: f32 = f32::MIN_POSITIVE;\n \n /// Largest finite `f32` value.\n@@ -146,7 +140,7 @@ pub const MIN_POSITIVE: f32 = f32::MIN_POSITIVE;\n /// let max = f32::MAX;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `MAX` associated constant on `f32`\")]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `MAX` associated constant on `f32`\")]\n pub const MAX: f32 = f32::MAX;\n \n /// One greater than the minimum possible normal power of 2 exponent.\n@@ -163,10 +157,7 @@ pub const MAX: f32 = f32::MAX;\n /// let min = f32::MIN_EXP;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(\n-    since = \"TBD\",\n-    reason = \"replaced by the `MIN_EXP` associated constant on `f32`\"\n-)]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `MIN_EXP` associated constant on `f32`\")]\n pub const MIN_EXP: i32 = f32::MIN_EXP;\n \n /// Maximum possible power of 2 exponent.\n@@ -183,10 +174,7 @@ pub const MIN_EXP: i32 = f32::MIN_EXP;\n /// let max = f32::MAX_EXP;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(\n-    since = \"TBD\",\n-    reason = \"replaced by the `MAX_EXP` associated constant on `f32`\"\n-)]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `MAX_EXP` associated constant on `f32`\")]\n pub const MAX_EXP: i32 = f32::MAX_EXP;\n \n /// Minimum possible normal power of 10 exponent.\n@@ -203,10 +191,7 @@ pub const MAX_EXP: i32 = f32::MAX_EXP;\n /// let min = f32::MIN_10_EXP;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(\n-    since = \"TBD\",\n-    reason = \"replaced by the `MIN_10_EXP` associated constant on `f32`\"\n-)]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `MIN_10_EXP` associated constant on `f32`\")]\n pub const MIN_10_EXP: i32 = f32::MIN_10_EXP;\n \n /// Maximum possible power of 10 exponent.\n@@ -223,10 +208,7 @@ pub const MIN_10_EXP: i32 = f32::MIN_10_EXP;\n /// let max = f32::MAX_10_EXP;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(\n-    since = \"TBD\",\n-    reason = \"replaced by the `MAX_10_EXP` associated constant on `f32`\"\n-)]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `MAX_10_EXP` associated constant on `f32`\")]\n pub const MAX_10_EXP: i32 = f32::MAX_10_EXP;\n \n /// Not a Number (NaN).\n@@ -243,7 +225,7 @@ pub const MAX_10_EXP: i32 = f32::MAX_10_EXP;\n /// let nan = f32::NAN;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `NAN` associated constant on `f32`\")]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `NAN` associated constant on `f32`\")]\n pub const NAN: f32 = f32::NAN;\n \n /// Infinity (\u221e).\n@@ -260,10 +242,7 @@ pub const NAN: f32 = f32::NAN;\n /// let inf = f32::INFINITY;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(\n-    since = \"TBD\",\n-    reason = \"replaced by the `INFINITY` associated constant on `f32`\"\n-)]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `INFINITY` associated constant on `f32`\")]\n pub const INFINITY: f32 = f32::INFINITY;\n \n /// Negative infinity (\u2212\u221e).\n@@ -280,10 +259,7 @@ pub const INFINITY: f32 = f32::INFINITY;\n /// let ninf = f32::NEG_INFINITY;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(\n-    since = \"TBD\",\n-    reason = \"replaced by the `NEG_INFINITY` associated constant on `f32`\"\n-)]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `NEG_INFINITY` associated constant on `f32`\")]\n pub const NEG_INFINITY: f32 = f32::NEG_INFINITY;\n \n /// Basic mathematical constants."}, {"sha": "b8780235e40574b6766f858cd362d641893d62e3", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 17, "deletions": 41, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -31,7 +31,7 @@ use crate::num::FpCategory;\n /// let r = f64::RADIX;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `RADIX` associated constant on `f64`\")]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `RADIX` associated constant on `f64`\")]\n pub const RADIX: u32 = f64::RADIX;\n \n /// Number of significant digits in base 2.\n@@ -48,9 +48,9 @@ pub const RADIX: u32 = f64::RADIX;\n /// let d = f64::MANTISSA_DIGITS;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(\n+#[deprecated(\n     since = \"TBD\",\n-    reason = \"replaced by the `MANTISSA_DIGITS` associated constant on `f64`\"\n+    note = \"replaced by the `MANTISSA_DIGITS` associated constant on `f64`\"\n )]\n pub const MANTISSA_DIGITS: u32 = f64::MANTISSA_DIGITS;\n \n@@ -68,7 +68,7 @@ pub const MANTISSA_DIGITS: u32 = f64::MANTISSA_DIGITS;\n /// let d = f64::DIGITS;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `DIGITS` associated constant on `f64`\")]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `DIGITS` associated constant on `f64`\")]\n pub const DIGITS: u32 = f64::DIGITS;\n \n /// [Machine epsilon] value for `f64`.\n@@ -89,10 +89,7 @@ pub const DIGITS: u32 = f64::DIGITS;\n /// let e = f64::EPSILON;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(\n-    since = \"TBD\",\n-    reason = \"replaced by the `EPSILON` associated constant on `f64`\"\n-)]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `EPSILON` associated constant on `f64`\")]\n pub const EPSILON: f64 = f64::EPSILON;\n \n /// Smallest finite `f64` value.\n@@ -109,7 +106,7 @@ pub const EPSILON: f64 = f64::EPSILON;\n /// let min = f64::MIN;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `MIN` associated constant on `f64`\")]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `MIN` associated constant on `f64`\")]\n pub const MIN: f64 = f64::MIN;\n \n /// Smallest positive normal `f64` value.\n@@ -126,10 +123,7 @@ pub const MIN: f64 = f64::MIN;\n /// let min = f64::MIN_POSITIVE;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(\n-    since = \"TBD\",\n-    reason = \"replaced by the `MIN_POSITIVE` associated constant on `f64`\"\n-)]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `MIN_POSITIVE` associated constant on `f64`\")]\n pub const MIN_POSITIVE: f64 = f64::MIN_POSITIVE;\n \n /// Largest finite `f64` value.\n@@ -146,7 +140,7 @@ pub const MIN_POSITIVE: f64 = f64::MIN_POSITIVE;\n /// let max = f64::MAX;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `MAX` associated constant on `f64`\")]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `MAX` associated constant on `f64`\")]\n pub const MAX: f64 = f64::MAX;\n \n /// One greater than the minimum possible normal power of 2 exponent.\n@@ -163,10 +157,7 @@ pub const MAX: f64 = f64::MAX;\n /// let min = f64::MIN_EXP;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(\n-    since = \"TBD\",\n-    reason = \"replaced by the `MIN_EXP` associated constant on `f64`\"\n-)]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `MIN_EXP` associated constant on `f64`\")]\n pub const MIN_EXP: i32 = f64::MIN_EXP;\n \n /// Maximum possible power of 2 exponent.\n@@ -183,10 +174,7 @@ pub const MIN_EXP: i32 = f64::MIN_EXP;\n /// let max = f64::MAX_EXP;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(\n-    since = \"TBD\",\n-    reason = \"replaced by the `MAX_EXP` associated constant on `f64`\"\n-)]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `MAX_EXP` associated constant on `f64`\")]\n pub const MAX_EXP: i32 = f64::MAX_EXP;\n \n /// Minimum possible normal power of 10 exponent.\n@@ -203,10 +191,7 @@ pub const MAX_EXP: i32 = f64::MAX_EXP;\n /// let min = f64::MIN_10_EXP;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(\n-    since = \"TBD\",\n-    reason = \"replaced by the `MIN_10_EXP` associated constant on `f64`\"\n-)]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `MIN_10_EXP` associated constant on `f64`\")]\n pub const MIN_10_EXP: i32 = f64::MIN_10_EXP;\n \n /// Maximum possible power of 10 exponent.\n@@ -223,10 +208,7 @@ pub const MIN_10_EXP: i32 = f64::MIN_10_EXP;\n /// let max = f64::MAX_10_EXP;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(\n-    since = \"TBD\",\n-    reason = \"replaced by the `MAX_10_EXP` associated constant on `f64`\"\n-)]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `MAX_10_EXP` associated constant on `f64`\")]\n pub const MAX_10_EXP: i32 = f64::MAX_10_EXP;\n \n /// Not a Number (NaN).\n@@ -243,7 +225,7 @@ pub const MAX_10_EXP: i32 = f64::MAX_10_EXP;\n /// let nan = f64::NAN;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `NAN` associated constant on `f64`\")]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `NAN` associated constant on `f64`\")]\n pub const NAN: f64 = f64::NAN;\n \n /// Infinity (\u221e).\n@@ -260,10 +242,7 @@ pub const NAN: f64 = f64::NAN;\n /// let inf = f64::INFINITY;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(\n-    since = \"TBD\",\n-    reason = \"replaced by the `INFINITY` associated constant on `f64`\"\n-)]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `INFINITY` associated constant on `f64`\")]\n pub const INFINITY: f64 = f64::INFINITY;\n \n /// Negative infinity (\u2212\u221e).\n@@ -280,10 +259,7 @@ pub const INFINITY: f64 = f64::INFINITY;\n /// let ninf = f64::NEG_INFINITY;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(\n-    since = \"TBD\",\n-    reason = \"replaced by the `NEG_INFINITY` associated constant on `f64`\"\n-)]\n+#[deprecated(since = \"TBD\", note = \"replaced by the `NEG_INFINITY` associated constant on `f64`\")]\n pub const NEG_INFINITY: f64 = f64::NEG_INFINITY;\n \n /// Basic mathematical constants.\n@@ -658,7 +634,7 @@ impl f64 {\n \n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"renamed to is_sign_positive\")]\n+    #[deprecated(since = \"1.0.0\", note = \"renamed to is_sign_positive\")]\n     #[inline]\n     #[doc(hidden)]\n     pub fn is_positive(self) -> bool {\n@@ -688,7 +664,7 @@ impl f64 {\n \n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"renamed to is_sign_negative\")]\n+    #[deprecated(since = \"1.0.0\", note = \"renamed to is_sign_negative\")]\n     #[inline]\n     #[doc(hidden)]\n     pub fn is_negative(self) -> bool {"}, {"sha": "1f435784be14cd088811357c079606fcae88a52e", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -2717,7 +2717,7 @@ macro_rules! int_impl {\n         #[inline(always)]\n         #[rustc_promotable]\n         #[rustc_const_stable(feature = \"const_min_value\", since = \"1.32.0\")]\n-        #[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `MIN` associated constant on this type\")]\n+        #[deprecated(since = \"TBD\", note = \"replaced by the `MIN` associated constant on this type\")]\n         pub const fn min_value() -> Self {\n             Self::MIN\n         }\n@@ -2730,7 +2730,7 @@ macro_rules! int_impl {\n         #[inline(always)]\n         #[rustc_promotable]\n         #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n-        #[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `MAX` associated constant on this type\")]\n+        #[deprecated(since = \"TBD\", note = \"replaced by the `MAX` associated constant on this type\")]\n         pub const fn max_value() -> Self {\n             Self::MAX\n         }"}, {"sha": "7b048dc5206bc92fae88c12aef4a210e18e3b994", "filename": "library/core/src/num/shells/i128.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi128.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -5,9 +5,9 @@\n //! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"i128\", since = \"1.26.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"TBD\",\n-    reason = \"all constants in this module replaced by associated constants on `i128`\"\n+    note = \"all constants in this module replaced by associated constants on `i128`\"\n )]\n \n int_module! { i128, #[stable(feature = \"i128\", since=\"1.26.0\")] }"}, {"sha": "5c5812d5c5ecd9233de3e1104afdb504d119b731", "filename": "library/core/src/num/shells/i16.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi16.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -5,9 +5,9 @@\n //! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"TBD\",\n-    reason = \"all constants in this module replaced by associated constants on `i16`\"\n+    note = \"all constants in this module replaced by associated constants on `i16`\"\n )]\n \n int_module! { i16 }"}, {"sha": "b283ac64415f60984352a6217b7c8ebaedd9449a", "filename": "library/core/src/num/shells/i32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi32.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -5,9 +5,9 @@\n //! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"TBD\",\n-    reason = \"all constants in this module replaced by associated constants on `i32`\"\n+    note = \"all constants in this module replaced by associated constants on `i32`\"\n )]\n \n int_module! { i32 }"}, {"sha": "a416fa7e9361d38a9ea155d8f46c147745998bb3", "filename": "library/core/src/num/shells/i64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi64.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -5,9 +5,9 @@\n //! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"TBD\",\n-    reason = \"all constants in this module replaced by associated constants on `i64`\"\n+    note = \"all constants in this module replaced by associated constants on `i64`\"\n )]\n \n int_module! { i64 }"}, {"sha": "02465013a4a77b56368ae2656fce22dcff5dd053", "filename": "library/core/src/num/shells/i8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi8.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -5,9 +5,9 @@\n //! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"TBD\",\n-    reason = \"all constants in this module replaced by associated constants on `i8`\"\n+    note = \"all constants in this module replaced by associated constants on `i8`\"\n )]\n \n int_module! { i8 }"}, {"sha": "2b1133e11a571e910a88c59bb78b0c0169a0a381", "filename": "library/core/src/num/shells/int_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fint_macros.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -19,7 +19,7 @@ macro_rules! int_module {\n         /// ```\n         ///\n         #[$attr]\n-        #[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `MIN` associated constant on this type\")]\n+        #[deprecated(since = \"TBD\", note = \"replaced by the `MIN` associated constant on this type\")]\n         pub const MIN: $T = $T::MIN;\n \n         #[doc = concat!(\n@@ -38,7 +38,7 @@ macro_rules! int_module {\n         /// ```\n         ///\n         #[$attr]\n-        #[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `MAX` associated constant on this type\")]\n+        #[deprecated(since = \"TBD\", note = \"replaced by the `MAX` associated constant on this type\")]\n         pub const MAX: $T = $T::MAX;\n     )\n }"}, {"sha": "1579fbab6d47f454c46f7de60dd34365a0b5d6d8", "filename": "library/core/src/num/shells/isize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fisize.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -5,9 +5,9 @@\n //! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"TBD\",\n-    reason = \"all constants in this module replaced by associated constants on `isize`\"\n+    note = \"all constants in this module replaced by associated constants on `isize`\"\n )]\n \n int_module! { isize }"}, {"sha": "fe08cee586c3d660eb493aadb1e8214686413ae2", "filename": "library/core/src/num/shells/u128.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu128.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -5,9 +5,9 @@\n //! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"i128\", since = \"1.26.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"TBD\",\n-    reason = \"all constants in this module replaced by associated constants on `u128`\"\n+    note = \"all constants in this module replaced by associated constants on `u128`\"\n )]\n \n int_module! { u128, #[stable(feature = \"i128\", since=\"1.26.0\")] }"}, {"sha": "36f8c6978789d1148788afbec20ecc929d707524", "filename": "library/core/src/num/shells/u16.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu16.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -5,9 +5,9 @@\n //! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"TBD\",\n-    reason = \"all constants in this module replaced by associated constants on `u16`\"\n+    note = \"all constants in this module replaced by associated constants on `u16`\"\n )]\n \n int_module! { u16 }"}, {"sha": "1c369097dcdb0c06c0452d8c328a48d82e1f04f0", "filename": "library/core/src/num/shells/u32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu32.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -5,9 +5,9 @@\n //! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"TBD\",\n-    reason = \"all constants in this module replaced by associated constants on `u32`\"\n+    note = \"all constants in this module replaced by associated constants on `u32`\"\n )]\n \n int_module! { u32 }"}, {"sha": "e8b691d155572f44915ea859c0c660b3f9e93dd3", "filename": "library/core/src/num/shells/u64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu64.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -5,9 +5,9 @@\n //! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"TBD\",\n-    reason = \"all constants in this module replaced by associated constants on `u64`\"\n+    note = \"all constants in this module replaced by associated constants on `u64`\"\n )]\n \n int_module! { u64 }"}, {"sha": "817c6a18aaaa3e7cc41d2df44c7574823426629e", "filename": "library/core/src/num/shells/u8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu8.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -5,9 +5,9 @@\n //! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"TBD\",\n-    reason = \"all constants in this module replaced by associated constants on `u8`\"\n+    note = \"all constants in this module replaced by associated constants on `u8`\"\n )]\n \n int_module! { u8 }"}, {"sha": "3e1bec5ec481515b27cca53cda8c9eb70d7d6923", "filename": "library/core/src/num/shells/usize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fusize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fusize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fusize.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -5,9 +5,9 @@\n //! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"TBD\",\n-    reason = \"all constants in this module replaced by associated constants on `usize`\"\n+    note = \"all constants in this module replaced by associated constants on `usize`\"\n )]\n \n int_module! { usize }"}, {"sha": "cd4b0e18c4dffd0eb68345b2773d30439910b199", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -2431,7 +2431,7 @@ macro_rules! uint_impl {\n         #[rustc_promotable]\n         #[inline(always)]\n         #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n-        #[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `MIN` associated constant on this type\")]\n+        #[deprecated(since = \"TBD\", note = \"replaced by the `MIN` associated constant on this type\")]\n         pub const fn min_value() -> Self { Self::MIN }\n \n         /// New code should prefer to use\n@@ -2442,7 +2442,7 @@ macro_rules! uint_impl {\n         #[rustc_promotable]\n         #[inline(always)]\n         #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n-        #[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `MAX` associated constant on this type\")]\n+        #[deprecated(since = \"TBD\", note = \"replaced by the `MAX` associated constant on this type\")]\n         pub const fn max_value() -> Self { Self::MAX }\n     }\n }"}, {"sha": "e00c6d377c70b8965e6c8206c8b07210cb09c07a", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1129,7 +1129,7 @@ impl FusedIterator for Lines<'_> {}\n ///\n /// [`lines_any`]: str::lines_any\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"1.4.0\", reason = \"use lines()/Lines instead now\")]\n+#[deprecated(since = \"1.4.0\", note = \"use lines()/Lines instead now\")]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[derive(Clone, Debug)]\n #[allow(deprecated)]"}, {"sha": "ede9a28dcbe7c2f10ffc75eb7814ca96277fb75c", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -591,7 +591,7 @@ impl str {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_deprecated(since = \"1.29.0\", reason = \"use `get_unchecked(begin..end)` instead\")]\n+    #[deprecated(since = \"1.29.0\", note = \"use `get_unchecked(begin..end)` instead\")]\n     #[must_use]\n     #[inline]\n     pub unsafe fn slice_unchecked(&self, begin: usize, end: usize) -> &str {\n@@ -625,7 +625,7 @@ impl str {\n     /// * `begin` and `end` must be byte positions within the string slice.\n     /// * `begin` and `end` must lie on UTF-8 sequence boundaries.\n     #[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]\n-    #[rustc_deprecated(since = \"1.29.0\", reason = \"use `get_unchecked_mut(begin..end)` instead\")]\n+    #[deprecated(since = \"1.29.0\", note = \"use `get_unchecked_mut(begin..end)` instead\")]\n     #[inline]\n     pub unsafe fn slice_mut_unchecked(&mut self, begin: usize, end: usize) -> &mut str {\n         // SAFETY: the caller must uphold the safety contract for `get_unchecked_mut`;\n@@ -1000,7 +1000,7 @@ impl str {\n \n     /// An iterator over the lines of a string.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_deprecated(since = \"1.4.0\", reason = \"use lines() instead now\")]\n+    #[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]\n     #[inline]\n     #[allow(deprecated)]\n     pub fn lines_any(&self) -> LinesAny<'_> {\n@@ -1964,11 +1964,7 @@ impl str {\n                   without modifying the original\"]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_deprecated(\n-        since = \"1.33.0\",\n-        reason = \"superseded by `trim_start`\",\n-        suggestion = \"trim_start\"\n-    )]\n+    #[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion = \"trim_start\")]\n     pub fn trim_left(&self) -> &str {\n         self.trim_start()\n     }\n@@ -2008,11 +2004,7 @@ impl str {\n                   without modifying the original\"]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_deprecated(\n-        since = \"1.33.0\",\n-        reason = \"superseded by `trim_end`\",\n-        suggestion = \"trim_end\"\n-    )]\n+    #[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion = \"trim_end\")]\n     pub fn trim_right(&self) -> &str {\n         self.trim_end()\n     }\n@@ -2240,9 +2232,9 @@ impl str {\n     /// assert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.33.0\",\n-        reason = \"superseded by `trim_start_matches`\",\n+        note = \"superseded by `trim_start_matches`\",\n         suggestion = \"trim_start_matches\"\n     )]\n     pub fn trim_left_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str {\n@@ -2283,9 +2275,9 @@ impl str {\n     /// assert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.33.0\",\n-        reason = \"superseded by `trim_end_matches`\",\n+        note = \"superseded by `trim_end_matches`\",\n         suggestion = \"trim_end_matches\"\n     )]\n     pub fn trim_right_matches<'a, P>(&'a self, pat: P) -> &'a str"}, {"sha": "a01f3fbad565c7fc612393ffa2502ad6122d8be4", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -271,9 +271,9 @@ pub enum Ordering {\n /// An [`AtomicBool`] initialized to `false`.\n #[cfg(target_has_atomic_load_store = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(\n+#[deprecated(\n     since = \"1.34.0\",\n-    reason = \"the `new` function is now preferred\",\n+    note = \"the `new` function is now preferred\",\n     suggestion = \"AtomicBool::new(false)\"\n )]\n pub const ATOMIC_BOOL_INIT: AtomicBool = AtomicBool::new(false);\n@@ -551,9 +551,9 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.50.0\",\n-        reason = \"Use `compare_exchange` or `compare_exchange_weak` instead\"\n+        note = \"Use `compare_exchange` or `compare_exchange_weak` instead\"\n     )]\n     #[cfg(target_has_atomic = \"8\")]\n     pub fn compare_and_swap(&self, current: bool, new: bool, order: Ordering) -> bool {\n@@ -1235,9 +1235,9 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.50.0\",\n-        reason = \"Use `compare_exchange` or `compare_exchange_weak` instead\"\n+        note = \"Use `compare_exchange` or `compare_exchange_weak` instead\"\n     )]\n     #[cfg(target_has_atomic = \"ptr\")]\n     pub fn compare_and_swap(&self, current: *mut T, new: *mut T, order: Ordering) -> *mut T {\n@@ -1490,9 +1490,9 @@ macro_rules! atomic_int {\n \n         /// An atomic integer initialized to `0`.\n         #[$stable_init_const]\n-        #[rustc_deprecated(\n+        #[deprecated(\n             since = \"1.34.0\",\n-            reason = \"the `new` function is now preferred\",\n+            note = \"the `new` function is now preferred\",\n             suggestion = $atomic_new,\n         )]\n         pub const $atomic_init: $atomic_type = $atomic_type::new(0);\n@@ -1812,9 +1812,9 @@ macro_rules! atomic_int {\n             /// ```\n             #[inline]\n             #[$stable]\n-            #[rustc_deprecated(\n+            #[deprecated(\n                 since = \"1.50.0\",\n-                reason = \"Use `compare_exchange` or `compare_exchange_weak` instead\")\n+                note = \"Use `compare_exchange` or `compare_exchange_weak` instead\")\n             ]\n             #[$cfg_cas]\n             pub fn compare_and_swap(&self,\n@@ -3023,7 +3023,7 @@ impl<T> fmt::Pointer for AtomicPtr<T> {\n /// [`hint::spin_loop`]: crate::hint::spin_loop\n #[inline]\n #[stable(feature = \"spin_loop_hint\", since = \"1.24.0\")]\n-#[rustc_deprecated(since = \"1.51.0\", reason = \"use hint::spin_loop instead\")]\n+#[deprecated(since = \"1.51.0\", note = \"use hint::spin_loop instead\")]\n pub fn spin_loop_hint() {\n     spin_loop()\n }"}, {"sha": "c29f015777f1a4ff188a10e32021932d6678f4f0", "filename": "library/std/src/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fascii.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -39,7 +39,7 @@ pub use core::ascii::{escape_default, EscapeDefault};\n ///\n /// [combining character]: https://en.wikipedia.org/wiki/Combining_character\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n+#[deprecated(since = \"1.26.0\", note = \"use inherent methods instead\")]\n pub trait AsciiExt {\n     /// Container type for copied ASCII characters.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "ae2baba09e6836c16f69e5c0352a8444afc6a6b9", "filename": "library/std/src/collections/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -402,7 +402,7 @@\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n // FIXME(#82080) The deprecation here is only theoretical, and does not actually produce a warning.\n-#[rustc_deprecated(reason = \"moved to `std::ops::Bound`\", since = \"1.26.0\")]\n+#[deprecated(note = \"moved to `std::ops::Bound`\", since = \"1.26.0\")]\n #[doc(hidden)]\n pub use crate::ops::Bound;\n "}, {"sha": "4027a71a06c5f56b0979aa8593a7be4b01cbc32f", "filename": "library/std/src/env.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -577,10 +577,10 @@ impl Error for JoinPathsError {\n ///     None => println!(\"Impossible to get your home dir!\"),\n /// }\n /// ```\n-#[rustc_deprecated(\n+#[deprecated(\n     since = \"1.29.0\",\n-    reason = \"This function's behavior is unexpected and probably not what you want. \\\n-              Consider using a crate from crates.io instead.\"\n+    note = \"This function's behavior is unexpected and probably not what you want. \\\n+            Consider using a crate from crates.io instead.\"\n )]\n #[must_use]\n #[stable(feature = \"env\", since = \"1.0.0\")]"}, {"sha": "361163d1970058c5acca3165137a01542fc5c50e", "filename": "library/std/src/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -145,15 +145,15 @@ pub trait Error: Debug + Display {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_deprecated(since = \"1.42.0\", reason = \"use the Display impl or to_string()\")]\n+    #[deprecated(since = \"1.42.0\", note = \"use the Display impl or to_string()\")]\n     fn description(&self) -> &str {\n         \"description() is deprecated; use Display\"\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.33.0\",\n-        reason = \"replaced by Error::source, which can support downcasting\"\n+        note = \"replaced by Error::source, which can support downcasting\"\n     )]\n     #[allow(missing_docs)]\n     fn cause(&self) -> Option<&dyn Error> {"}, {"sha": "557c59dfb5f8e15cd8bba4986493848b98d4fb8e", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -511,15 +511,15 @@ impl f32 {\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.10.0\",\n-        reason = \"you probably meant `(self - other).abs()`: \\\n-                  this operation is `(self - other).max(0.0)` \\\n-                  except that `abs_sub` also propagates NaNs (also \\\n-                  known as `fdimf` in C). If you truly need the positive \\\n-                  difference, consider using that expression or the C function \\\n-                  `fdimf`, depending on how you wish to handle NaN (please consider \\\n-                  filing an issue describing your use-case too).\"\n+        note = \"you probably meant `(self - other).abs()`: \\\n+                this operation is `(self - other).max(0.0)` \\\n+                except that `abs_sub` also propagates NaNs (also \\\n+                known as `fdimf` in C). If you truly need the positive \\\n+                difference, consider using that expression or the C function \\\n+                `fdimf`, depending on how you wish to handle NaN (please consider \\\n+                filing an issue describing your use-case too).\"\n     )]\n     pub fn abs_sub(self, other: f32) -> f32 {\n         unsafe { cmath::fdimf(self, other) }"}, {"sha": "6f322aea6aab2fd5969ef40b83d8e3fe725f7ed5", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -513,15 +513,15 @@ impl f64 {\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.10.0\",\n-        reason = \"you probably meant `(self - other).abs()`: \\\n-                  this operation is `(self - other).max(0.0)` \\\n-                  except that `abs_sub` also propagates NaNs (also \\\n-                  known as `fdim` in C). If you truly need the positive \\\n-                  difference, consider using that expression or the C function \\\n-                  `fdim`, depending on how you wish to handle NaN (please consider \\\n-                  filing an issue describing your use-case too).\"\n+        note = \"you probably meant `(self - other).abs()`: \\\n+                this operation is `(self - other).max(0.0)` \\\n+                except that `abs_sub` also propagates NaNs (also \\\n+                known as `fdim` in C). If you truly need the positive \\\n+                difference, consider using that expression or the C function \\\n+                `fdim`, depending on how you wish to handle NaN (please consider \\\n+                filing an issue describing your use-case too).\"\n     )]\n     pub fn abs_sub(self, other: f64) -> f64 {\n         unsafe { cmath::fdim(self, other) }"}, {"sha": "431a1efc8d1f64d4e7f3d56e9f3b31e3a0728295", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1851,10 +1851,10 @@ pub fn hard_link<P: AsRef<Path>, Q: AsRef<Path>>(original: P, link: Q) -> io::Re\n /// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(\n+#[deprecated(\n     since = \"1.1.0\",\n-    reason = \"replaced with std::os::unix::fs::symlink and \\\n-              std::os::windows::fs::{symlink_file, symlink_dir}\"\n+    note = \"replaced with std::os::unix::fs::symlink and \\\n+            std::os::windows::fs::{symlink_file, symlink_dir}\"\n )]\n pub fn soft_link<P: AsRef<Path>, Q: AsRef<Path>>(original: P, link: Q) -> io::Result<()> {\n     fs_imp::symlink(original.as_ref(), link.as_ref())"}, {"sha": "06300035633b9b498420bd8967f410d41a7fa370", "filename": "library/std/src/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -915,20 +915,14 @@ impl TcpListener {\n     }\n \n     #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n-    #[rustc_deprecated(\n-        since = \"1.16.0\",\n-        reason = \"this option can only be set before the socket is bound\"\n-    )]\n+    #[deprecated(since = \"1.16.0\", note = \"this option can only be set before the socket is bound\")]\n     #[allow(missing_docs)]\n     pub fn set_only_v6(&self, only_v6: bool) -> io::Result<()> {\n         self.0.set_only_v6(only_v6)\n     }\n \n     #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n-    #[rustc_deprecated(\n-        since = \"1.16.0\",\n-        reason = \"this option can only be set before the socket is bound\"\n-    )]\n+    #[deprecated(since = \"1.16.0\", note = \"this option can only be set before the socket is bound\")]\n     #[allow(missing_docs)]\n     pub fn only_v6(&self) -> io::Result<bool> {\n         self.0.only_v6()"}, {"sha": "1beb3cf6e84b59bef3ed676dce6ecd931358374f", "filename": "library/std/src/os/android/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Ffs.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -18,10 +18,10 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.8.0\",\n-        reason = \"deprecated in favor of the accessor \\\n-                  methods of this trait\"\n+        note = \"deprecated in favor of the accessor \\\n+                methods of this trait\"\n     )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;"}, {"sha": "a255d03208623989c716f48cd1e964746c6f8fdb", "filename": "library/std/src/os/android/raw.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fraw.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1,12 +1,12 @@\n //! Android-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"1.8.0\",\n-    reason = \"these type aliases are no longer supported by \\\n-              the standard library, the `libc` crate on \\\n-              crates.io should be used instead for the correct \\\n-              definitions\"\n+    note = \"these type aliases are no longer supported by \\\n+            the standard library, the `libc` crate on \\\n+            crates.io should be used instead for the correct \\\n+            definitions\"\n )]\n #![allow(deprecated)]\n "}, {"sha": "1424fc4c69880f38f727a099df678825cebe2227", "filename": "library/std/src/os/dragonfly/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fdragonfly%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fdragonfly%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fdragonfly%2Ffs.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -18,10 +18,10 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.8.0\",\n-        reason = \"deprecated in favor of the accessor \\\n-                  methods of this trait\"\n+        note = \"deprecated in favor of the accessor \\\n+                methods of this trait\"\n     )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;"}, {"sha": "071bf6199aa23c231b6aaa21d75912f0656f08bc", "filename": "library/std/src/os/dragonfly/raw.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fdragonfly%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fdragonfly%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fdragonfly%2Fraw.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1,12 +1,12 @@\n //! Dragonfly-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"1.8.0\",\n-    reason = \"these type aliases are no longer supported by \\\n-              the standard library, the `libc` crate on \\\n-              crates.io should be used instead for the correct \\\n-              definitions\"\n+    note = \"these type aliases are no longer supported by \\\n+            the standard library, the `libc` crate on \\\n+            crates.io should be used instead for the correct \\\n+            definitions\"\n )]\n #![allow(deprecated)]\n "}, {"sha": "d5ec8e03c00d1477726acd93121862ae1524b766", "filename": "library/std/src/os/emscripten/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Femscripten%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Femscripten%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Femscripten%2Ffs.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -18,10 +18,10 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.8.0\",\n-        reason = \"deprecated in favor of the accessor \\\n-                  methods of this trait\"\n+        note = \"deprecated in favor of the accessor \\\n+                methods of this trait\"\n     )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;"}, {"sha": "d23011c7381413e9dab49bf80372032a04333f5a", "filename": "library/std/src/os/emscripten/raw.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Femscripten%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Femscripten%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Femscripten%2Fraw.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -3,12 +3,12 @@\n //! except using the musl-specific stat64 structure in liblibc.\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"1.8.0\",\n-    reason = \"these type aliases are no longer supported by \\\n-              the standard library, the `libc` crate on \\\n-              crates.io should be used instead for the correct \\\n-              definitions\"\n+    note = \"these type aliases are no longer supported by \\\n+            the standard library, the `libc` crate on \\\n+            crates.io should be used instead for the correct \\\n+            definitions\"\n )]\n #![allow(deprecated)]\n "}, {"sha": "88701dafe20ce4037b6f0b2db38dc873853f4829", "filename": "library/std/src/os/espidf/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fespidf%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fespidf%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fespidf%2Ffs.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -12,10 +12,10 @@ use crate::os::espidf::raw;\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.8.0\",\n-        reason = \"deprecated in favor of the accessor \\\n-                  methods of this trait\"\n+        note = \"deprecated in favor of the accessor \\\n+                methods of this trait\"\n     )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;"}, {"sha": "7df0e74b22335656038c7ffc8cb3d3b8004135fc", "filename": "library/std/src/os/espidf/raw.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fespidf%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fespidf%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fespidf%2Fraw.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1,12 +1,12 @@\n //! Raw type definitions for the ESP-IDF framework.\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"1.8.0\",\n-    reason = \"these type aliases are no longer supported by \\\n-              the standard library, the `libc` crate on \\\n-              crates.io should be used instead for the correct \\\n-              definitions\"\n+    note = \"these type aliases are no longer supported by \\\n+            the standard library, the `libc` crate on \\\n+            crates.io should be used instead for the correct \\\n+            definitions\"\n )]\n \n use crate::os::raw::c_long;"}, {"sha": "8db3a950c40ffefa864b4cf914318d92c4759d3b", "filename": "library/std/src/os/freebsd/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Ffreebsd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Ffreebsd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffreebsd%2Ffs.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -18,10 +18,10 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.8.0\",\n-        reason = \"deprecated in favor of the accessor \\\n-                  methods of this trait\"\n+        note = \"deprecated in favor of the accessor \\\n+                methods of this trait\"\n     )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;"}, {"sha": "ab0bf7923194867213e676507d063989c05c9fcf", "filename": "library/std/src/os/freebsd/raw.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Ffreebsd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Ffreebsd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffreebsd%2Fraw.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1,12 +1,12 @@\n //! FreeBSD-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"1.8.0\",\n-    reason = \"these type aliases are no longer supported by \\\n-              the standard library, the `libc` crate on \\\n-              crates.io should be used instead for the correct \\\n-              definitions\"\n+    note = \"these type aliases are no longer supported by \\\n+            the standard library, the `libc` crate on \\\n+            crates.io should be used instead for the correct \\\n+            definitions\"\n )]\n #![allow(deprecated)]\n "}, {"sha": "060d6e86b6c2bcf27d253ed013eafb5f6fac9f54", "filename": "library/std/src/os/fuchsia/raw.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Ffuchsia%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Ffuchsia%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffuchsia%2Fraw.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1,12 +1,12 @@\n //! Fuchsia-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"1.8.0\",\n-    reason = \"these type aliases are no longer supported by \\\n-              the standard library, the `libc` crate on \\\n-              crates.io should be used instead for the correct \\\n-              definitions\"\n+    note = \"these type aliases are no longer supported by \\\n+            the standard library, the `libc` crate on \\\n+            crates.io should be used instead for the correct \\\n+            definitions\"\n )]\n #![allow(deprecated)]\n "}, {"sha": "a23a2af8f6e7b2b4723a41077bbabadde3e9547d", "filename": "library/std/src/os/haiku/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fhaiku%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fhaiku%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fhaiku%2Ffs.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -18,10 +18,10 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.8.0\",\n-        reason = \"deprecated in favor of the accessor \\\n-                  methods of this trait\"\n+        note = \"deprecated in favor of the accessor \\\n+                methods of this trait\"\n     )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;"}, {"sha": "afbb66ccb5e5d6da3e1a4fa340fc5edff51961d6", "filename": "library/std/src/os/haiku/raw.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fhaiku%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fhaiku%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fhaiku%2Fraw.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1,12 +1,12 @@\n //! Haiku-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"1.53.0\",\n-    reason = \"these type aliases are no longer supported by \\\n-              the standard library, the `libc` crate on \\\n-              crates.io should be used instead for the correct \\\n-              definitions\"\n+    note = \"these type aliases are no longer supported by \\\n+            the standard library, the `libc` crate on \\\n+            crates.io should be used instead for the correct \\\n+            definitions\"\n )]\n #![allow(deprecated)]\n "}, {"sha": "63be48b8131b249b23e059ef7d41d040674fdc00", "filename": "library/std/src/os/illumos/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fillumos%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fillumos%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fillumos%2Ffs.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -18,9 +18,9 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.8.0\",\n-        reason = \"deprecated in favor of the accessor methods of this trait\"\n+        note = \"deprecated in favor of the accessor methods of this trait\"\n     )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;"}, {"sha": "2bea9ebb3c8369f69411e7a0faec67b59ad03184", "filename": "library/std/src/os/illumos/raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fillumos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fillumos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fillumos%2Fraw.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1,9 +1,9 @@\n //! illumos-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"1.8.0\",\n-    reason = \"these type aliases are no longer supported by the standard library, the `libc` \\\n+    note = \"these type aliases are no longer supported by the standard library, the `libc` \\\n     crate on crates.io should be used instead for the correct definitions\"\n )]\n #![allow(deprecated)]"}, {"sha": "4a4637ce0722d04767c205a6b9f5fb9565d162e5", "filename": "library/std/src/os/ios/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fios%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fios%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fios%2Ffs.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -18,10 +18,10 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.8.0\",\n-        reason = \"deprecated in favor of the accessor \\\n-                  methods of this trait\"\n+        note = \"deprecated in favor of the accessor \\\n+                methods of this trait\"\n     )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;"}, {"sha": "af12aeebe5d0c7cf1cd387ba48c40652955672e7", "filename": "library/std/src/os/ios/raw.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fios%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fios%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fios%2Fraw.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1,12 +1,12 @@\n //! iOS-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"1.8.0\",\n-    reason = \"these type aliases are no longer supported by \\\n-              the standard library, the `libc` crate on \\\n-              crates.io should be used instead for the correct \\\n-              definitions\"\n+    note = \"these type aliases are no longer supported by \\\n+            the standard library, the `libc` crate on \\\n+            crates.io should be used instead for the correct \\\n+            definitions\"\n )]\n #![allow(deprecated)]\n "}, {"sha": "6d6a535b1e8315a0cba700baf89d445a17a15539", "filename": "library/std/src/os/l4re/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fl4re%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fl4re%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fl4re%2Ffs.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -38,7 +38,7 @@ pub trait MetadataExt {\n     /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(since = \"1.8.0\", reason = \"other methods of this trait are now preferred\")]\n+    #[deprecated(since = \"1.8.0\", note = \"other methods of this trait are now preferred\")]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;\n "}, {"sha": "699e8be33c8a81cb21699cdac5800dd451ea8257", "filename": "library/std/src/os/l4re/raw.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fl4re%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fl4re%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fl4re%2Fraw.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1,12 +1,12 @@\n //! L4Re-specific raw type definitions.\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"1.8.0\",\n-    reason = \"these type aliases are no longer supported by \\\n-              the standard library, the `libc` crate on \\\n-              crates.io should be used instead for the correct \\\n-              definitions\"\n+    note = \"these type aliases are no longer supported by \\\n+            the standard library, the `libc` crate on \\\n+            crates.io should be used instead for the correct \\\n+            definitions\"\n )]\n #![allow(deprecated)]\n "}, {"sha": "479bbcc17a89ec67ae0f175042d38216a87ff84a", "filename": "library/std/src/os/linux/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Flinux%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Flinux%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Ffs.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -38,7 +38,7 @@ pub trait MetadataExt {\n     /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(since = \"1.8.0\", reason = \"other methods of this trait are now preferred\")]\n+    #[deprecated(since = \"1.8.0\", note = \"other methods of this trait are now preferred\")]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;\n "}, {"sha": "c73791d14529c6976adec84643f01976433c05be", "filename": "library/std/src/os/linux/raw.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1,12 +1,12 @@\n //! Linux-specific raw type definitions.\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"1.8.0\",\n-    reason = \"these type aliases are no longer supported by \\\n-              the standard library, the `libc` crate on \\\n-              crates.io should be used instead for the correct \\\n-              definitions\"\n+    note = \"these type aliases are no longer supported by \\\n+            the standard library, the `libc` crate on \\\n+            crates.io should be used instead for the correct \\\n+            definitions\"\n )]\n #![allow(deprecated)]\n "}, {"sha": "91915da6a432cc49926e37d2bbc391c602168e06", "filename": "library/std/src/os/macos/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fmacos%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fmacos%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmacos%2Ffs.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -18,10 +18,10 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.8.0\",\n-        reason = \"deprecated in favor of the accessor \\\n-                  methods of this trait\"\n+        note = \"deprecated in favor of the accessor \\\n+                methods of this trait\"\n     )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;"}, {"sha": "0b21f6ee5e498cd90b0f350e486e784d90851738", "filename": "library/std/src/os/macos/raw.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fmacos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fmacos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmacos%2Fraw.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1,12 +1,12 @@\n //! macOS-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"1.8.0\",\n-    reason = \"these type aliases are no longer supported by \\\n-              the standard library, the `libc` crate on \\\n-              crates.io should be used instead for the correct \\\n-              definitions\"\n+    note = \"these type aliases are no longer supported by \\\n+            the standard library, the `libc` crate on \\\n+            crates.io should be used instead for the correct \\\n+            definitions\"\n )]\n #![allow(deprecated)]\n "}, {"sha": "fe0be069e5e3f2077a75e63b25a907b68dbda037", "filename": "library/std/src/os/netbsd/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fnetbsd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fnetbsd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fnetbsd%2Ffs.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -18,10 +18,10 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.8.0\",\n-        reason = \"deprecated in favor of the accessor \\\n-                  methods of this trait\"\n+        note = \"deprecated in favor of the accessor \\\n+                methods of this trait\"\n     )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;"}, {"sha": "18057291feec820db2c92e5d143d55d8067e2314", "filename": "library/std/src/os/netbsd/raw.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fnetbsd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fnetbsd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fnetbsd%2Fraw.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1,12 +1,12 @@\n //! NetBSD-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"1.8.0\",\n-    reason = \"these type aliases are no longer supported by \\\n-              the standard library, the `libc` crate on \\\n-              crates.io should be used instead for the correct \\\n-              definitions\"\n+    note = \"these type aliases are no longer supported by \\\n+            the standard library, the `libc` crate on \\\n+            crates.io should be used instead for the correct \\\n+            definitions\"\n )]\n #![allow(deprecated)]\n "}, {"sha": "b8d8d31c5b8cf0eac1e39ddde4c9bcbbc317d1e2", "filename": "library/std/src/os/openbsd/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fopenbsd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fopenbsd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fopenbsd%2Ffs.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -18,10 +18,10 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.8.0\",\n-        reason = \"deprecated in favor of the accessor \\\n-                  methods of this trait\"\n+        note = \"deprecated in favor of the accessor \\\n+                methods of this trait\"\n     )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;"}, {"sha": "6711fb51b1702bb451b0057504e6e6bcb5b82bfe", "filename": "library/std/src/os/openbsd/raw.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fopenbsd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fopenbsd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fopenbsd%2Fraw.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1,12 +1,12 @@\n //! OpenBSD-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"1.8.0\",\n-    reason = \"these type aliases are no longer supported by \\\n-              the standard library, the `libc` crate on \\\n-              crates.io should be used instead for the correct \\\n-              definitions\"\n+    note = \"these type aliases are no longer supported by \\\n+            the standard library, the `libc` crate on \\\n+            crates.io should be used instead for the correct \\\n+            definitions\"\n )]\n #![allow(deprecated)]\n "}, {"sha": "682ca6a2c0309f103b45105b30e2d7438b83fdc5", "filename": "library/std/src/os/redox/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fredox%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fredox%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fredox%2Ffs.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -34,10 +34,10 @@ pub trait MetadataExt {\n     /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.8.0\",\n-        reason = \"deprecated in favor of the accessor \\\n-                  methods of this trait\"\n+        note = \"deprecated in favor of the accessor \\\n+                methods of this trait\"\n     )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;"}, {"sha": "7b1cd8ae800a4d1026d6b3165f0c95312f7d3f8e", "filename": "library/std/src/os/redox/raw.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fredox%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fredox%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fredox%2Fraw.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1,12 +1,12 @@\n //! Redox-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"1.8.0\",\n-    reason = \"these type aliases are no longer supported by \\\n-              the standard library, the `libc` crate on \\\n-              crates.io should be used instead for the correct \\\n-              definitions\"\n+    note = \"these type aliases are no longer supported by \\\n+            the standard library, the `libc` crate on \\\n+            crates.io should be used instead for the correct \\\n+            definitions\"\n )]\n #![allow(deprecated)]\n "}, {"sha": "093143737042945143f3b6fcab9e8ce2cdc1b053", "filename": "library/std/src/os/solaris/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fsolaris%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fsolaris%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fsolaris%2Ffs.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -18,10 +18,10 @@ pub trait MetadataExt {\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.8.0\",\n-        reason = \"deprecated in favor of the accessor \\\n-                  methods of this trait\"\n+        note = \"deprecated in favor of the accessor \\\n+                methods of this trait\"\n     )]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;"}, {"sha": "63426c96951f5a3fd8d7a596cd690019ef05cc6d", "filename": "library/std/src/os/solaris/raw.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fsolaris%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Fsolaris%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fsolaris%2Fraw.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1,12 +1,12 @@\n //! Solaris-specific raw type definitions\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"1.8.0\",\n-    reason = \"these type aliases are no longer supported by \\\n-              the standard library, the `libc` crate on \\\n-              crates.io should be used instead for the correct \\\n-              definitions\"\n+    note = \"these type aliases are no longer supported by \\\n+            the standard library, the `libc` crate on \\\n+            crates.io should be used instead for the correct \\\n+            definitions\"\n )]\n #![allow(deprecated)]\n "}, {"sha": "9dca9b4a4a3f6bf67b39b97a3101c0f0b283f164", "filename": "library/std/src/os/unix/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -103,7 +103,7 @@ pub trait CommandExt: Sealed {\n     ///\n     /// [`pre_exec`]: CommandExt::pre_exec\n     #[stable(feature = \"process_exec\", since = \"1.15.0\")]\n-    #[rustc_deprecated(since = \"1.37.0\", reason = \"should be unsafe, use `pre_exec` instead\")]\n+    #[deprecated(since = \"1.37.0\", note = \"should be unsafe, use `pre_exec` instead\")]\n     fn before_exec<F>(&mut self, f: F) -> &mut process::Command\n     where\n         F: FnMut() -> io::Result<()> + Send + Sync + 'static,"}, {"sha": "fe761627bc1f2246a9f7b1786b9e97a148cf6055", "filename": "library/std/src/os/unix/raw.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Funix%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fos%2Funix%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fraw.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1,12 +1,12 @@\n //! Unix-specific primitives available on all unix platforms.\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(\n+#![deprecated(\n     since = \"1.8.0\",\n-    reason = \"these type aliases are no longer supported by \\\n-              the standard library, the `libc` crate on \\\n-              crates.io should be used instead for the correct \\\n-              definitions\"\n+    note = \"these type aliases are no longer supported by \\\n+            the standard library, the `libc` crate on \\\n+            crates.io should be used instead for the correct \\\n+            definitions\"\n )]\n #![allow(deprecated)]\n "}, {"sha": "7ff2f330f8a56895730f971befd2b6e1bf2ffc86", "filename": "library/std/src/sync/condvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -303,7 +303,7 @@ impl Condvar {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_deprecated(since = \"1.6.0\", reason = \"replaced by `std::sync::Condvar::wait_timeout`\")]\n+    #[deprecated(since = \"1.6.0\", note = \"replaced by `std::sync::Condvar::wait_timeout`\")]\n     pub fn wait_timeout_ms<'a, T>(\n         &self,\n         guard: MutexGuard<'a, T>,"}, {"sha": "a7feea588598c7f4f35d9bcf30227b368f154dc2", "filename": "library/std/src/sync/once.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -152,9 +152,9 @@ pub struct OnceState {\n /// static START: Once = ONCE_INIT;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(\n+#[deprecated(\n     since = \"1.38.0\",\n-    reason = \"the `new` function is now preferred\",\n+    note = \"the `new` function is now preferred\",\n     suggestion = \"Once::new()\"\n )]\n pub const ONCE_INIT: Once = Once::new();"}, {"sha": "7f9b297e9dc3a581c26dd651fb525edd5ea13a96", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -789,7 +789,7 @@ pub fn panicking() -> bool {\n /// thread::sleep_ms(2000);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"1.6.0\", reason = \"replaced by `std::thread::sleep`\")]\n+#[deprecated(since = \"1.6.0\", note = \"replaced by `std::thread::sleep`\")]\n pub fn sleep_ms(ms: u32) {\n     sleep(Duration::from_millis(ms as u64))\n }\n@@ -943,7 +943,7 @@ pub fn park() {\n ///\n /// See the [park documentation][`park`] for more detail.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"1.6.0\", reason = \"replaced by `std::thread::park_timeout`\")]\n+#[deprecated(since = \"1.6.0\", note = \"replaced by `std::thread::park_timeout`\")]\n pub fn park_timeout_ms(ms: u32) {\n     park_timeout(Duration::from_millis(ms as u64))\n }"}, {"sha": "c13ae1e431a6c3c151c26a6d72b09b77231d5c59", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -531,8 +531,8 @@ fn short_item_info(\n     if let Some(depr @ Deprecation { note, since, is_since_rustc_version: _, suggestion: _ }) =\n         item.deprecation(cx.tcx())\n     {\n-        // We display deprecation messages for #[deprecated] and #[rustc_deprecated]\n-        // but only display the future-deprecation messages for #[rustc_deprecated].\n+        // We display deprecation messages for #[deprecated], but only display\n+        // the future-deprecation messages for rustc versions.\n         let mut message = if let Some(since) = since {\n             let since = since.as_str();\n             if !stability::deprecation_in_effect(&depr) {"}, {"sha": "2670e7f5d046eb0a725246c571dfabbe0e0116bb", "filename": "src/test/rustdoc/deprecated-future-staged-api.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Frustdoc%2Fdeprecated-future-staged-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Frustdoc%2Fdeprecated-future-staged-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdeprecated-future-staged-api.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -0,0 +1,18 @@\n+#![feature(staged_api)]\n+#![stable(feature = \"deprecated-future-staged-api\", since = \"1.0.0\")]\n+\n+// @has deprecated_future_staged_api/index.html '//*[@class=\"stab deprecated\"]' \\\n+//      'Deprecation planned'\n+// @has deprecated_future_staged_api/struct.S1.html '//*[@class=\"stab deprecated\"]' \\\n+//      'Deprecating in 99.99.99: effectively never'\n+#[deprecated(since = \"99.99.99\", note = \"effectively never\")]\n+#[stable(feature = \"deprecated-future-staged-api\", since = \"1.0.0\")]\n+pub struct S1;\n+\n+// @has deprecated_future_staged_api/index.html '//*[@class=\"stab deprecated\"]' \\\n+//      'Deprecation planned'\n+// @has deprecated_future_staged_api/struct.S2.html '//*[@class=\"stab deprecated\"]' \\\n+//      'Deprecating in a future Rust version: literally never'\n+#[deprecated(since = \"TBD\", note = \"literally never\")]\n+#[stable(feature = \"deprecated-future-staged-api\", since = \"1.0.0\")]\n+pub struct S2;"}, {"sha": "651ae2f1ae8754397b980461eb933214742948e3", "filename": "src/test/rustdoc/inline_cross/auxiliary/macros.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fmacros.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1,11 +1,10 @@\n #![feature(staged_api)]\n-\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n /// docs for my_macro\n #[unstable(feature = \"macro_test\", issue = \"none\")]\n-#[rustc_deprecated(since = \"1.2.3\", reason = \"text\")]\n+#[deprecated(since = \"1.2.3\", note = \"text\")]\n #[macro_export]\n macro_rules! my_macro {\n-    () => ()\n+    () => {};\n }"}, {"sha": "13b4c3c7f61a47604d16920cdd03f653d758345d", "filename": "src/test/rustdoc/inline_cross/macros.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Frustdoc%2Finline_cross%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Frustdoc%2Finline_cross%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fmacros.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -2,7 +2,6 @@\n // build-aux-docs\n \n #![feature(macro_test)]\n-\n #![crate_name = \"foo\"]\n \n extern crate macros;\n@@ -16,5 +15,5 @@ extern crate macros;\n // @has - '//*[@class=\"docblock\"]' 'docs for my_macro'\n // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.2.3: text'\n // @has - '//*[@class=\"stab unstable\"]' 'macro_test'\n-// @has - '//a/@href' '../src/macros/macros.rs.html#9-11'\n+// @has - '//a/@href' '../src/macros/macros.rs.html#8-10'\n pub use macros::my_macro;"}, {"sha": "01f95538196f06925c7338a83ce8dd18607452cf", "filename": "src/test/rustdoc/issue-32374.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Frustdoc%2Fissue-32374.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Frustdoc%2Fissue-32374.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-32374.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -14,14 +14,14 @@\n // @matches issue_32374/struct.T.html '//*[@class=\"stab unstable\"]' \\\n //      '\ud83d\udd2c This is a nightly-only experimental API. \\(test\\s#32374\\)$'\n /// Docs\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n #[unstable(feature = \"test\", issue = \"32374\")]\n pub struct T;\n \n // @has issue_32374/struct.U.html '//*[@class=\"stab deprecated\"]' \\\n //      '\ud83d\udc4e Deprecated since 1.0.0: deprecated'\n // @has issue_32374/struct.U.html '//*[@class=\"stab unstable\"]' \\\n //      '\ud83d\udd2c This is a nightly-only experimental API. (test #32374)'\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"deprecated\")]\n+#[deprecated(since = \"1.0.0\", note = \"deprecated\")]\n #[unstable(feature = \"test\", issue = \"32374\", reason = \"unstable\")]\n pub struct U;"}, {"sha": "95a767a8329ac7677b8b66e34bdc6aa7f4454dce", "filename": "src/test/rustdoc/rustc_deprecated-future.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/db5b365fb0e7aa5f59d80236f520f5afc6e39ff4/src%2Ftest%2Frustdoc%2Frustc_deprecated-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5b365fb0e7aa5f59d80236f520f5afc6e39ff4/src%2Ftest%2Frustdoc%2Frustc_deprecated-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frustc_deprecated-future.rs?ref=db5b365fb0e7aa5f59d80236f520f5afc6e39ff4", "patch": "@@ -1,19 +0,0 @@\n-#![feature(staged_api)]\n-\n-#![stable(feature = \"rustc_deprecated-future-test\", since = \"1.0.0\")]\n-\n-// @has rustc_deprecated_future/index.html '//*[@class=\"stab deprecated\"]' \\\n-//      'Deprecation planned'\n-// @has rustc_deprecated_future/struct.S1.html '//*[@class=\"stab deprecated\"]' \\\n-//      'Deprecating in 99.99.99: effectively never'\n-#[rustc_deprecated(since = \"99.99.99\", reason = \"effectively never\")]\n-#[stable(feature = \"rustc_deprecated-future-test\", since = \"1.0.0\")]\n-pub struct S1;\n-\n-// @has rustc_deprecated_future/index.html '//*[@class=\"stab deprecated\"]' \\\n-//      'Deprecation planned'\n-// @has rustc_deprecated_future/struct.S2.html '//*[@class=\"stab deprecated\"]' \\\n-//      'Deprecating in a future Rust version: literally never'\n-#[rustc_deprecated(since = \"TBD\", reason = \"literally never\")]\n-#[stable(feature = \"rustc_deprecated-future-test\", since = \"1.0.0\")]\n-pub struct S2;"}, {"sha": "fb2a9a401ed22f47066fff6e6efcae491b423122", "filename": "src/test/ui/deprecation/deprecation-in-future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -6,7 +6,7 @@\n pub fn deprecated_future() {}\n \n fn test() {\n-    deprecated_future(); // ok; deprecated_in_future only applies to rustc_deprecated\n+    deprecated_future(); // ok; deprecated_in_future only applies with `#![feature(staged_api)]`\n     //~^ WARNING use of deprecated function `deprecated_future`: text [deprecated]\n }\n "}, {"sha": "99d1c73413af4f084b2671da6ad51cd160ddbb2b", "filename": "src/test/ui/deprecation/deprecation-in-future.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.stderr?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1,7 +1,7 @@\n warning: use of deprecated function `deprecated_future`: text\n   --> $DIR/deprecation-in-future.rs:9:5\n    |\n-LL |     deprecated_future(); // ok; deprecated_in_future only applies to rustc_deprecated\n+LL |     deprecated_future(); // ok; deprecated_in_future only applies with `#![feature(staged_api)]`\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(deprecated)]` on by default"}, {"sha": "65cc4e2ef1e41b07a22e2de10beff53d6728132b", "filename": "src/test/ui/deprecation/deprecation-lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -260,7 +260,7 @@ mod this_crate {\n         <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n         <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n \n-        // Future deprecations are only permitted for rustc_deprecated.\n+        // Future deprecations are only permitted with `#![feature(staged_api)]`\n         deprecated_future(); //~ ERROR use of deprecated function\n         deprecated_future_text(); //~ ERROR use of deprecated function\n "}, {"sha": "9ea75b68f81ce0c5f209b905e2883e110c7cf40d", "filename": "src/test/ui/deprecation/deprecation-sanity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -24,7 +24,7 @@ mod bogus_attribute_types_1 {\n }\n \n #[deprecated(since = \"a\", note = \"b\")]\n-#[deprecated(since = \"a\", note = \"b\")] //~ ERROR multiple deprecated attributes\n+#[deprecated(since = \"a\", note = \"b\")] //~ ERROR multiple `deprecated` attributes\n fn multiple1() { }\n \n #[deprecated(since = \"a\", since = \"b\", note = \"c\")] //~ ERROR multiple 'since' items"}, {"sha": "973c672df91c3c2b933496205ed8b9f7797335fc", "filename": "src/test/ui/deprecation/deprecation-sanity.stderr", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.stderr?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1,3 +1,15 @@\n+error: multiple `deprecated` attributes\n+  --> $DIR/deprecation-sanity.rs:27:1\n+   |\n+LL | #[deprecated(since = \"a\", note = \"b\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/deprecation-sanity.rs:26:1\n+   |\n+LL | #[deprecated(since = \"a\", note = \"b\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0541]: unknown meta item 'reason'\n   --> $DIR/deprecation-sanity.rs:4:43\n    |\n@@ -40,14 +52,6 @@ error[E0565]: item in `deprecated` must be a key/value pair\n LL |     #[deprecated(\"test\")]\n    |                  ^^^^^^\n \n-error[E0550]: multiple deprecated attributes\n-  --> $DIR/deprecation-sanity.rs:27:1\n-   |\n-LL | #[deprecated(since = \"a\", note = \"b\")]\n-   | -------------------------------------- first deprecation attribute\n-LL | #[deprecated(since = \"a\", note = \"b\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ repeated deprecation attribute\n-\n error[E0538]: multiple 'since' items\n   --> $DIR/deprecation-sanity.rs:30:27\n    |\n@@ -64,5 +68,5 @@ LL | #[deprecated = \"hello\"]\n \n error: aborting due to 10 previous errors\n \n-Some errors have detailed explanations: E0538, E0541, E0550, E0551, E0565.\n+Some errors have detailed explanations: E0538, E0541, E0551, E0565.\n For more information about an error, try `rustc --explain E0538`."}, {"sha": "b87bd069c606c0a7c3935b249f40a0960bac6717", "filename": "src/test/ui/deprecation/rustc_deprecated.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecated.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -0,0 +1,13 @@\n+// compile-flags: --crate-type=lib\n+\n+#![feature(staged_api)]\n+#![stable(since = \"1.0.0\", feature = \"rust1\")]\n+\n+#[rustc_deprecated( //~ ERROR `#[rustc_deprecated]` has been removed\n+    //~^ HELP use `#[deprecated]` instead\n+    since = \"1.100.0\",\n+    reason = \"text\" //~ ERROR `reason` has been renamed\n+    //~^ HELP use `note` instead\n+)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+fn foo() {}"}, {"sha": "4413e196f09c49947dcf098804cafc2528a66152", "filename": "src/test/ui/deprecation/rustc_deprecated.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecated.stderr?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -0,0 +1,21 @@\n+error: `#[rustc_deprecated]` has been removed\n+  --> $DIR/rustc_deprecated.rs:6:1\n+   |\n+LL | / #[rustc_deprecated(\n+LL | |\n+LL | |     since = \"1.100.0\",\n+LL | |     reason = \"text\"\n+LL | |\n+LL | | )]\n+   | |__^\n+   |\n+   = help: use `#[deprecated]` instead\n+\n+error: `reason` has been renamed\n+  --> $DIR/rustc_deprecated.rs:9:5\n+   |\n+LL |     reason = \"text\"\n+   |     ^^^^^^^^^^^^^^^ help: use `note` instead: `note = \"text\"`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "cc30e6ab9a9b31b73aca2905aa7037ec1d4bd48c", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -59,7 +59,7 @@ fn multiple3() { }\n \n #[stable(feature = \"a\", since = \"b\")] //~ ERROR invalid stability version found\n #[deprecated(since = \"b\", note = \"text\")]\n-#[deprecated(since = \"b\", note = \"text\")] //~ ERROR multiple deprecated attributes\n+#[deprecated(since = \"b\", note = \"text\")] //~ ERROR multiple `deprecated` attributes\n #[rustc_const_unstable(feature = \"c\", issue = \"none\")]\n #[rustc_const_unstable(feature = \"d\", issue = \"none\")] //~ ERROR multiple stability levels\n pub const fn multiple4() { }"}, {"sha": "fcb1eefddbcef733b7777a3273d27a903b1a8c50", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.stderr", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a2fe75d0e6e024aa434e5b9c40adb2567f362b8/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr?ref=8a2fe75d0e6e024aa434e5b9c40adb2567f362b8", "patch": "@@ -1,3 +1,15 @@\n+error: multiple `deprecated` attributes\n+  --> $DIR/stability-attribute-sanity.rs:62:1\n+   |\n+LL | #[deprecated(since = \"b\", note = \"text\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/stability-attribute-sanity.rs:61:1\n+   |\n+LL | #[deprecated(since = \"b\", note = \"text\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0541]: unknown meta item 'reason'\n   --> $DIR/stability-attribute-sanity.rs:8:42\n    |\n@@ -82,14 +94,6 @@ error[E0544]: multiple stability levels\n LL | #[stable(feature = \"a\", since = \"b\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0550]: multiple deprecated attributes\n-  --> $DIR/stability-attribute-sanity.rs:62:1\n-   |\n-LL | #[deprecated(since = \"b\", note = \"text\")]\n-   | ----------------------------------------- first deprecation attribute\n-LL | #[deprecated(since = \"b\", note = \"text\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ repeated deprecation attribute\n-\n error[E0544]: multiple stability levels\n   --> $DIR/stability-attribute-sanity.rs:64:1\n    |\n@@ -128,5 +132,5 @@ LL | #[stable(feature = \"a\", since = \"1.0.0\")]\n \n error: aborting due to 20 previous errors\n \n-Some errors have detailed explanations: E0539, E0541, E0542, E0543, E0544, E0546, E0547, E0549, E0550.\n+Some errors have detailed explanations: E0539, E0541, E0542, E0543, E0544, E0546, E0547, E0549.\n For more information about an error, try `rustc --explain E0539`."}]}