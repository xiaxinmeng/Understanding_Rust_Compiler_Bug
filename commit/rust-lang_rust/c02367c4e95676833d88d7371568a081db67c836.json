{"sha": "c02367c4e95676833d88d7371568a081db67c836", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMjM2N2M0ZTk1Njc2ODMzZDg4ZDczNzE1NjhhMDgxZGI2N2M4MzY=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-02-03T07:12:07Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-02-03T07:12:07Z"}, "message": "Fix breakage due to rust-lang/rust#58079\n\nThe rustc change added HirId to a few nodes. As I understand it, the plan is\nto remove the NodeId from these nodes eventually. Where the NodeId was\nnot being matched, I used `..` to try and avoid further breakage. Where it\nwas, I used `_` to make the fix easier when NodeId is removed.", "tree": {"sha": "d4fcb78d1cff6387f727da9cdc8c6e7ca0019d99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4fcb78d1cff6387f727da9cdc8c6e7ca0019d99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c02367c4e95676833d88d7371568a081db67c836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c02367c4e95676833d88d7371568a081db67c836", "html_url": "https://github.com/rust-lang/rust/commit/c02367c4e95676833d88d7371568a081db67c836", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c02367c4e95676833d88d7371568a081db67c836/comments", "author": null, "committer": null, "parents": [{"sha": "27b5dd8886ac0423e059c0817b55a4e618b344a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/27b5dd8886ac0423e059c0817b55a4e618b344a0", "html_url": "https://github.com/rust-lang/rust/commit/27b5dd8886ac0423e059c0817b55a4e618b344a0"}], "stats": {"total": 69, "additions": 34, "deletions": 35}, "files": [{"sha": "74d45505a4bc4f30921bba544e0c8d086915d0a8", "filename": "clippy_lints/src/blacklisted_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblacklisted_name.rs?ref=c02367c4e95676833d88d7371568a081db67c836", "patch": "@@ -44,7 +44,7 @@ impl LintPass for BlackListedName {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlackListedName {\n     fn check_pat(&mut self, cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat) {\n-        if let PatKind::Binding(_, _, ident, _) = pat.node {\n+        if let PatKind::Binding(.., ident, _) = pat.node {\n             if self.blacklist.contains(&ident.name.to_string()) {\n                 span_lint(\n                     cx,"}, {"sha": "41afe5ce0d79ed07333e6afeca95b7c323aeb89e", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=c02367c4e95676833d88d7371568a081db67c836", "patch": "@@ -286,7 +286,7 @@ fn bindings<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat) -> FxHashMap<LocalI\n                     bindings_impl(cx, pat, map);\n                 }\n             },\n-            PatKind::Binding(_, _, ident, ref as_pat) => {\n+            PatKind::Binding(.., ident, ref as_pat) => {\n                 if let Entry::Vacant(v) = map.entry(ident.as_str()) {\n                     v.insert(cx.tables.pat_ty(pat));\n                 }"}, {"sha": "4dbb390cd504c9337016c3caed4720feccf7c450", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=c02367c4e95676833d88d7371568a081db67c836", "patch": "@@ -81,7 +81,7 @@ fn check_closure(cx: &LateContext<'_, '_>, expr: &Expr) {\n                 _ => (),\n             }\n             for (a1, a2) in iter_input_pats(decl, body).zip(args) {\n-                if let PatKind::Binding(_, _, ident, _) = a1.pat.node {\n+                if let PatKind::Binding(.., ident, _) = a1.pat.node {\n                     // XXXManishearth Should I be checking the binding mode here?\n                     if let ExprKind::Path(QPath::Resolved(None, ref p)) = a2.node {\n                         if p.segments.len() != 1 {"}, {"sha": "b6e0480d986bd493a63e01e4690da7a34fb30ecf", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=c02367c4e95676833d88d7371568a081db67c836", "patch": "@@ -274,7 +274,7 @@ impl<'a, 'tcx> Functions {\n }\n \n fn raw_ptr_arg(arg: &hir::Arg, ty: &hir::Ty) -> Option<ast::NodeId> {\n-    if let (&hir::PatKind::Binding(_, id, _, _), &hir::TyKind::Ptr(_)) = (&arg.pat.node, &ty.node) {\n+    if let (&hir::PatKind::Binding(_, id, _, _, _), &hir::TyKind::Ptr(_)) = (&arg.pat.node, &ty.node) {\n         Some(id)\n     } else {\n         None"}, {"sha": "a6d34f2c7a234290b500d5098826d18bb985e8b3", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=c02367c4e95676833d88d7371568a081db67c836", "patch": "@@ -94,10 +94,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n                         |db| {\n                             if variant.fields.len() == 1 {\n                                 let span = match def.variants[i].node.data {\n-                                    VariantData::Struct(ref fields, _) | VariantData::Tuple(ref fields, _) => {\n+                                    VariantData::Struct(ref fields, ..) | VariantData::Tuple(ref fields, ..) => {\n                                         fields[0].ty.span\n                                     },\n-                                    VariantData::Unit(_) => unreachable!(),\n+                                    VariantData::Unit(..) => unreachable!(),\n                                 };\n                                 if let Some(snip) = snippet_opt(cx, span) {\n                                     db.span_suggestion("}, {"sha": "a4f69e3217189ee5255d1ccc66d76b41934a54c9", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=c02367c4e95676833d88d7371568a081db67c836", "patch": "@@ -73,7 +73,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n             if_chain! {\n                 if let Some(expr) = it.peek();\n                 if let hir::StmtKind::Local(ref local) = stmt.node;\n-                if let hir::PatKind::Binding(mode, canonical_id, ident, None) = local.pat.node;\n+                if let hir::PatKind::Binding(mode, canonical_id, _, ident, None) = local.pat.node;\n                 if let hir::StmtKind::Expr(ref if_) = expr.node;\n                 if let hir::ExprKind::If(ref cond, ref then, ref else_) = if_.node;\n                 if !used_in_expr(cx, canonical_id, cond);"}, {"sha": "dcd1a4e0a61033e58537f5b207afc3b52bf3749c", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=c02367c4e95676833d88d7371568a081db67c836", "patch": "@@ -969,7 +969,7 @@ fn detect_manual_memcpy<'a, 'tcx>(\n     }) = higher::range(cx, arg)\n     {\n         // the var must be a single name\n-        if let PatKind::Binding(_, canonical_id, _, _) = pat.node {\n+        if let PatKind::Binding(_, canonical_id, _, _, _) = pat.node {\n             let print_sum = |arg1: &Offset, arg2: &Offset| -> String {\n                 match (&arg1.value[..], arg1.negate, &arg2.value[..], arg2.negate) {\n                     (\"0\", _, \"0\", _) => \"\".into(),\n@@ -1086,7 +1086,7 @@ fn check_for_loop_range<'a, 'tcx>(\n     }) = higher::range(cx, arg)\n     {\n         // the var must be a single name\n-        if let PatKind::Binding(_, canonical_id, ident, _) = pat.node {\n+        if let PatKind::Binding(_, canonical_id, _, ident, _) = pat.node {\n             let mut visitor = VarVisitor {\n                 cx,\n                 var: canonical_id,\n@@ -1637,7 +1637,7 @@ fn check_for_mutability(cx: &LateContext<'_, '_>, bound: &Expr) -> Option<NodeId\n                 let node_str = cx.tcx.hir().get(node_id);\n                 if_chain! {\n                     if let Node::Binding(pat) = node_str;\n-                    if let PatKind::Binding(bind_ann, _, _, _) = pat.node;\n+                    if let PatKind::Binding(bind_ann, ..) = pat.node;\n                     if let BindingAnnotation::Mutable = bind_ann;\n                     then {\n                         return Some(node_id);\n@@ -1670,7 +1670,7 @@ fn check_for_mutation(\n fn pat_is_wild<'tcx>(pat: &'tcx PatKind, body: &'tcx Expr) -> bool {\n     match *pat {\n         PatKind::Wild => true,\n-        PatKind::Binding(_, _, ident, None) if ident.as_str().starts_with('_') => {\n+        PatKind::Binding(.., ident, None) if ident.as_str().starts_with('_') => {\n             let mut visitor = UsedVisitor {\n                 var: ident.name,\n                 used: false,\n@@ -2095,7 +2095,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n         // Look for declarations of the variable\n         if let StmtKind::Local(ref local) = stmt.node {\n             if local.pat.id == self.var_id {\n-                if let PatKind::Binding(_, _, ident, _) = local.pat.node {\n+                if let PatKind::Binding(.., ident, _) = local.pat.node {\n                     self.name = Some(ident.name);\n \n                     self.state = if let Some(ref init) = local.init {\n@@ -2286,7 +2286,7 @@ impl<'tcx> Visitor<'tcx> for LoopNestVisitor {\n         if self.nesting != Unknown {\n             return;\n         }\n-        if let PatKind::Binding(_, _, span_name, _) = pat.node {\n+        if let PatKind::Binding(.., span_name, _) = pat.node {\n             if self.iterator == span_name.name {\n                 self.nesting = RuledOut;\n                 return;"}, {"sha": "5699870c307de77b25c79746bfb60ed5bac431b1", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=c02367c4e95676833d88d7371568a081db67c836", "patch": "@@ -70,13 +70,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             then {\n                 match closure_body.arguments[0].pat.node {\n                     hir::PatKind::Ref(ref inner, _) => if let hir::PatKind::Binding(\n-                        hir::BindingAnnotation::Unannotated, _, name, None\n+                        hir::BindingAnnotation::Unannotated, .., name, None\n                     ) = inner.node {\n                         if ident_eq(name, closure_expr) {\n                             lint(cx, e.span, args[0].span);\n                         }\n                     },\n-                    hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, _, name, None) => {\n+                    hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, .., name, None) => {\n                         match closure_expr.node {\n                             hir::ExprKind::Unary(hir::UnOp::UnDeref, ref inner) => {\n                                 if ident_eq(name, inner) && !cx.tables.expr_ty(inner).is_box() {"}, {"sha": "9cb160685ca6bfd95412a433676ef1124fbcd8e5", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=c02367c4e95676833d88d7371568a081db67c836", "patch": "@@ -338,7 +338,7 @@ fn check_single_match_opt_like(\n             }\n             print::to_string(print::NO_ANN, |s| s.print_qpath(path, false))\n         },\n-        PatKind::Binding(BindingAnnotation::Unannotated, _, ident, None) => ident.to_string(),\n+        PatKind::Binding(BindingAnnotation::Unannotated, .., ident, None) => ident.to_string(),\n         PatKind::Path(ref path) => print::to_string(print::NO_ANN, |s| s.print_qpath(path, false)),\n         _ => return,\n     };\n@@ -657,7 +657,7 @@ fn is_ref_some_arm(arm: &Arm) -> Option<BindingAnnotation> {\n     if_chain! {\n         if let PatKind::TupleStruct(ref path, ref pats, _) = arm.pats[0].node;\n         if pats.len() == 1 && match_qpath(path, &paths::OPTION_SOME);\n-        if let PatKind::Binding(rb, _, ident, _) = pats[0].node;\n+        if let PatKind::Binding(rb, .., ident, _) = pats[0].node;\n         if rb == BindingAnnotation::Ref || rb == BindingAnnotation::RefMut;\n         if let ExprKind::Call(ref e, ref args) = remove_blocks(&arm.body).node;\n         if let ExprKind::Path(ref some_path) = e.node;"}, {"sha": "99cdba9402fed78cb8f36c07880555e4ad1e7bd5", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=c02367c4e95676833d88d7371568a081db67c836", "patch": "@@ -264,8 +264,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         }\n         for arg in iter_input_pats(decl, body) {\n             match arg.pat.node {\n-                PatKind::Binding(BindingAnnotation::Ref, _, _, _)\n-                | PatKind::Binding(BindingAnnotation::RefMut, _, _, _) => {\n+                PatKind::Binding(BindingAnnotation::Ref, ..) | PatKind::Binding(BindingAnnotation::RefMut, ..) => {\n                     span_lint(\n                         cx,\n                         TOPLEVEL_REF_ARG,\n@@ -282,7 +281,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, s: &'tcx Stmt) {\n         if_chain! {\n             if let StmtKind::Local(ref l) = s.node;\n-            if let PatKind::Binding(an, _, i, None) = l.pat.node;\n+            if let PatKind::Binding(an, .., i, None) = l.pat.node;\n             if let Some(ref init) = l.init;\n             then {\n                 if an == BindingAnnotation::Ref || an == BindingAnnotation::RefMut {\n@@ -445,7 +444,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     }\n \n     fn check_pat(&mut self, cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat) {\n-        if let PatKind::Binding(_, _, ident, Some(ref right)) = pat.node {\n+        if let PatKind::Binding(.., ident, Some(ref right)) = pat.node {\n             if let PatKind::Wild = right.node {\n                 span_lint(\n                     cx,"}, {"sha": "777d2f683f0dab777a5d2fab19f9c52511ccfffe", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=c02367c4e95676833d88d7371568a081db67c836", "patch": "@@ -89,7 +89,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n             return;\n         }\n         if_chain! {\n-            if let PatKind::Binding(BindingAnnotation::Ref, _, name, _) = pat.node;\n+            if let PatKind::Binding(BindingAnnotation::Ref, .., name, _) = pat.node;\n             if let ty::Ref(_, tam, mutbl) = cx.tables.pat_ty(pat).sty;\n             if mutbl == MutImmutable;\n             if let ty::Ref(_, _, mutbl) = tam.sty;"}, {"sha": "eae8ed541e224132dd384a53c7fdd18ba91c8460", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=c02367c4e95676833d88d7371568a081db67c836", "patch": "@@ -76,7 +76,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrowedRef {\n             if let PatKind::Ref(ref sub_pat, MutImmutable) = pat.node;\n \n             // Check sub_pat got a `ref` keyword (excluding `ref mut`).\n-            if let PatKind::Binding(BindingAnnotation::Ref, _, spanned_name, ..) = sub_pat.node;\n+            if let PatKind::Binding(BindingAnnotation::Ref, .., spanned_name, _) = sub_pat.node;\n             then {\n                 span_lint_and_then(cx, NEEDLESS_BORROWED_REFERENCE, pat.span,\n                                    \"this pattern takes a reference on something that is being de-referenced\","}, {"sha": "77a6aeba53b0b9ad28e86dcbef52abd242a66924", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=c02367c4e95676833d88d7371568a081db67c836", "patch": "@@ -164,7 +164,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n             // Ignore `self`s.\n             if idx == 0 {\n-                if let PatKind::Binding(_, _, ident, ..) = arg.pat.node {\n+                if let PatKind::Binding(.., ident, _) = arg.pat.node {\n                     if ident.as_str() == \"self\" {\n                         continue;\n                     }"}, {"sha": "722f64405c795f0b27e74441bd4bcc63cda2fd8a", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=c02367c4e95676833d88d7371568a081db67c836", "patch": "@@ -108,7 +108,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n fn check_fn<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, decl: &'tcx FnDecl, body: &'tcx Body) {\n     let mut bindings = Vec::new();\n     for arg in iter_input_pats(decl, body) {\n-        if let PatKind::Binding(_, _, ident, _) = arg.pat.node {\n+        if let PatKind::Binding(.., ident, _) = arg.pat.node {\n             bindings.push((ident.name, ident.span))\n         }\n     }\n@@ -172,7 +172,7 @@ fn check_pat<'a, 'tcx>(\n ) {\n     // TODO: match more stuff / destructuring\n     match pat.node {\n-        PatKind::Binding(_, _, ident, ref inner) => {\n+        PatKind::Binding(.., ident, ref inner) => {\n             let name = ident.name;\n             if is_binding(cx, pat.hir_id) {\n                 let mut new_binding = true;"}, {"sha": "b8ab32491a3bcd269b0fbf223649e4661a0dd17c", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=c02367c4e95676833d88d7371568a081db67c836", "patch": "@@ -96,7 +96,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         // Matches statements which initializes vectors. For example: `let mut vec = Vec::with_capacity(10)`\n         if_chain! {\n             if let StmtKind::Local(ref local) = stmt.node;\n-            if let PatKind::Binding(BindingAnnotation::Mutable, _, variable_name, None) = local.pat.node;\n+            if let PatKind::Binding(BindingAnnotation::Mutable, .., variable_name, None) = local.pat.node;\n             if let Some(ref init) = local.init;\n             if let Some(ref len_arg) = Self::is_vec_with_capacity(init);\n "}, {"sha": "7b532cdb17250dfff748ab04937e143a8e90bc2a", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=c02367c4e95676833d88d7371568a081db67c836", "patch": "@@ -77,7 +77,7 @@ fn check_manual_swap(cx: &LateContext<'_, '_>, block: &Block) {\n             // let t = foo();\n             if let StmtKind::Local(ref tmp) = w[0].node;\n             if let Some(ref tmp_init) = tmp.init;\n-            if let PatKind::Binding(_, _, ident, None) = tmp.pat.node;\n+            if let PatKind::Binding(.., ident, None) = tmp.pat.node;\n \n             // foo() = bar();\n             if let StmtKind::Semi(ref first) = w[1].node;"}, {"sha": "264a5463225df79434c34cb6089e3247b1603a19", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=c02367c4e95676833d88d7371568a081db67c836", "patch": "@@ -513,7 +513,7 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n         let current = format!(\"{}.node\", self.current);\n         match pat.node {\n             PatKind::Wild => println!(\"Wild = {};\", current),\n-            PatKind::Binding(anno, _, ident, ref sub) => {\n+            PatKind::Binding(anno, .., ident, ref sub) => {\n                 let anno_pat = match anno {\n                     BindingAnnotation::Unannotated => \"BindingAnnotation::Unannotated\",\n                     BindingAnnotation::Mutable => \"BindingAnnotation::Mutable\","}, {"sha": "53876fef579455f293be5096a4b064313d489caa", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=c02367c4e95676833d88d7371568a081db67c836", "patch": "@@ -193,7 +193,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             (&PatKind::TupleStruct(ref lp, ref la, ls), &PatKind::TupleStruct(ref rp, ref ra, rs)) => {\n                 self.eq_qpath(lp, rp) && over(la, ra, |l, r| self.eq_pat(l, r)) && ls == rs\n             },\n-            (&PatKind::Binding(ref lb, _, ref li, ref lp), &PatKind::Binding(ref rb, _, ref ri, ref rp)) => {\n+            (&PatKind::Binding(ref lb, .., ref li, ref lp), &PatKind::Binding(ref rb, .., ref ri, ref rp)) => {\n                 lb == rb && li.name.as_str() == ri.name.as_str() && both(lp, rp, |l, r| self.eq_pat(l, r))\n             },\n             (&PatKind::Path(ref l), &PatKind::Path(ref r)) => self.eq_qpath(l, r),"}, {"sha": "508bf26bab90f69641443f41699785bfd49be55b", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=c02367c4e95676833d88d7371568a081db67c836", "patch": "@@ -420,7 +420,7 @@ fn print_pat(cx: &LateContext<'_, '_>, pat: &hir::Pat, indent: usize) {\n     println!(\"{}+\", ind);\n     match pat.node {\n         hir::PatKind::Wild => println!(\"{}Wild\", ind),\n-        hir::PatKind::Binding(ref mode, _, ident, ref inner) => {\n+        hir::PatKind::Binding(ref mode, .., ident, ref inner) => {\n             println!(\"{}Binding\", ind);\n             println!(\"{}mode: {:?}\", ind, mode);\n             println!(\"{}name: {}\", ind, ident.name);"}, {"sha": "e68cefe2bc451cb7723337940f0854d68203f1a1", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02367c4e95676833d88d7371568a081db67c836/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=c02367c4e95676833d88d7371568a081db67c836", "patch": "@@ -373,7 +373,7 @@ pub fn get_item_name(cx: &LateContext<'_, '_>, expr: &Expr) -> Option<Name> {\n /// Get the name of a `Pat`, if any\n pub fn get_pat_name(pat: &Pat) -> Option<Name> {\n     match pat.node {\n-        PatKind::Binding(_, _, ref spname, _) => Some(spname.name),\n+        PatKind::Binding(.., ref spname, _) => Some(spname.name),\n         PatKind::Path(ref qpath) => single_segment_path(qpath).map(|ps| ps.ident.name),\n         PatKind::Box(ref p) | PatKind::Ref(ref p, _) => get_pat_name(&*p),\n         _ => None,\n@@ -1008,7 +1008,7 @@ pub fn opt_def_id(def: Def) -> Option<DefId> {\n }\n \n pub fn is_self(slf: &Arg) -> bool {\n-    if let PatKind::Binding(_, _, name, _) = slf.pat.node {\n+    if let PatKind::Binding(.., name, _) = slf.pat.node {\n         name.name == keywords::SelfLower.name()\n     } else {\n         false\n@@ -1038,7 +1038,7 @@ pub fn is_try(expr: &Expr) -> Option<&Expr> {\n         if_chain! {\n             if let PatKind::TupleStruct(ref path, ref pat, None) = arm.pats[0].node;\n             if match_qpath(path, &paths::RESULT_OK[1..]);\n-            if let PatKind::Binding(_, defid, _, None) = pat[0].node;\n+            if let PatKind::Binding(_, defid, _, _, None) = pat[0].node;\n             if let ExprKind::Path(QPath::Resolved(None, ref path)) = arm.body.node;\n             if let Def::Local(lid) = path.def;\n             if lid == defid;\n@@ -1087,7 +1087,7 @@ pub fn is_allowed(cx: &LateContext<'_, '_>, lint: &'static Lint, id: NodeId) ->\n \n pub fn get_arg_name(pat: &Pat) -> Option<ast::Name> {\n     match pat.node {\n-        PatKind::Binding(_, _, ident, None) => Some(ident.name),\n+        PatKind::Binding(.., ident, None) => Some(ident.name),\n         PatKind::Ref(ref subpat, _) => get_arg_name(subpat),\n         _ => None,\n     }"}]}