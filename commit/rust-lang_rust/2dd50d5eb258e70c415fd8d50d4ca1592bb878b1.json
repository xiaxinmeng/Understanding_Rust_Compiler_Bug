{"sha": "2dd50d5eb258e70c415fd8d50d4ca1592bb878b1", "node_id": "C_kwDOAAsO6NoAKDJkZDUwZDVlYjI1OGU3MGM0MTVmZDhkNTBkNGNhMTU5MmJiODc4YjE", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-12-31T10:15:52Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-01-01T05:06:50Z"}, "message": "rustc_metadata: Use a query for collecting all traits in encoder", "tree": {"sha": "4e3e132a458746cf36a861feaa5a6b1bb0143223", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e3e132a458746cf36a861feaa5a6b1bb0143223"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dd50d5eb258e70c415fd8d50d4ca1592bb878b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dd50d5eb258e70c415fd8d50d4ca1592bb878b1", "html_url": "https://github.com/rust-lang/rust/commit/2dd50d5eb258e70c415fd8d50d4ca1592bb878b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dd50d5eb258e70c415fd8d50d4ca1592bb878b1/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "html_url": "https://github.com/rust-lang/rust/commit/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef"}], "stats": {"total": 111, "additions": 63, "deletions": 48}, "files": [{"sha": "1069c24405842a949d3be09a17f901a6d5aa8109", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dd50d5eb258e70c415fd8d50d4ca1592bb878b1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd50d5eb258e70c415fd8d50d4ca1592bb878b1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=2dd50d5eb258e70c415fd8d50d4ca1592bb878b1", "patch": "@@ -45,7 +45,8 @@ use std::num::NonZeroUsize;\n use std::path::Path;\n use tracing::debug;\n \n-pub use cstore_impl::{provide, provide_extern};\n+pub(super) use cstore_impl::provide;\n+pub use cstore_impl::provide_extern;\n use rustc_span::hygiene::HygieneDecodeContext;\n \n mod cstore_impl;"}, {"sha": "7ffc586fda3a5e88c4064d0dbbdc83181415dc07", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2dd50d5eb258e70c415fd8d50d4ca1592bb878b1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd50d5eb258e70c415fd8d50d4ca1592bb878b1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=2dd50d5eb258e70c415fd8d50d4ca1592bb878b1", "patch": "@@ -4,11 +4,9 @@ use crate::native_libs;\n \n use rustc_ast as ast;\n use rustc_data_structures::stable_map::FxHashMap;\n-use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::hir::exports::Export;\n use rustc_middle::middle::exported_symbols::ExportedSymbol;\n use rustc_middle::middle::stability::DeprecationEntry;\n@@ -243,7 +241,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     expn_that_defined => { cdata.get_expn_that_defined(def_id.index, tcx.sess) }\n }\n \n-pub fn provide(providers: &mut Providers) {\n+pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n     // FIXME(#44234) - almost all of these queries have no sub-queries and\n     // therefore no actual inputs, they're just reading tables calculated in\n     // resolve! Does this work? Unsure! That's what the issue is about\n@@ -289,28 +287,6 @@ pub fn provide(providers: &mut Providers) {\n                 foreign_modules::collect(tcx).into_iter().map(|m| (m.def_id, m)).collect();\n             Lrc::new(modules)\n         },\n-        traits_in_crate: |tcx, cnum| {\n-            assert_eq!(cnum, LOCAL_CRATE);\n-\n-            #[derive(Default)]\n-            struct TraitsVisitor {\n-                traits: Vec<DefId>,\n-            }\n-            impl ItemLikeVisitor<'_> for TraitsVisitor {\n-                fn visit_item(&mut self, item: &hir::Item<'_>) {\n-                    if let hir::ItemKind::Trait(..) | hir::ItemKind::TraitAlias(..) = item.kind {\n-                        self.traits.push(item.def_id.to_def_id());\n-                    }\n-                }\n-                fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}\n-                fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}\n-                fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}\n-            }\n-\n-            let mut visitor = TraitsVisitor::default();\n-            tcx.hir().visit_all_item_likes(&mut visitor);\n-            tcx.arena.alloc_slice(&visitor.traits)\n-        },\n \n         // Returns a map from a sufficiently visible external item (i.e., an\n         // external item that is visible from at least one local module) to a"}, {"sha": "e2aaa88f548f1156fd3f61d098317d79c1ac7b25", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 53, "deletions": 21, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/2dd50d5eb258e70c415fd8d50d4ca1592bb878b1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd50d5eb258e70c415fd8d50d4ca1592bb878b1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=2dd50d5eb258e70c415fd8d50d4ca1592bb878b1", "patch": "@@ -27,6 +27,7 @@ use rustc_middle::thir;\n use rustc_middle::traits::specialization_graph;\n use rustc_middle::ty::codec::TyEncoder;\n use rustc_middle::ty::fast_reject::{self, SimplifyParams, StripReferences};\n+use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, SymbolName, Ty, TyCtxt};\n use rustc_serialize::{opaque, Encodable, Encoder};\n use rustc_session::config::CrateType;\n@@ -612,10 +613,15 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         self.encode_def_path_table();\n         let def_path_table_bytes = self.position() - i;\n \n+        // Encode the def IDs of traits, for rustdoc and diagnostics.\n+        i = self.position();\n+        let traits = self.encode_traits();\n+        let traits_bytes = self.position() - i;\n+\n         // Encode the def IDs of impls, for coherence checking.\n         i = self.position();\n-        let (traits, impls) = self.encode_traits_and_impls();\n-        let traits_and_impls_bytes = self.position() - i;\n+        let impls = self.encode_impls();\n+        let impls_bytes = self.position() - i;\n \n         let tcx = self.tcx;\n \n@@ -726,8 +732,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             native_libraries,\n             foreign_modules,\n             source_map,\n-            impls,\n             traits,\n+            impls,\n             exported_symbols,\n             interpret_alloc_index,\n             tables,\n@@ -754,7 +760,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             eprintln!(\" diagnostic item bytes: {}\", diagnostic_item_bytes);\n             eprintln!(\"          native bytes: {}\", native_lib_bytes);\n             eprintln!(\"      source_map bytes: {}\", source_map_bytes);\n-            eprintln!(\"traits and impls bytes: {}\", traits_and_impls_bytes);\n+            eprintln!(\"          traits bytes: {}\", traits_bytes);\n+            eprintln!(\"           impls bytes: {}\", impls_bytes);\n             eprintln!(\"    exp. symbols bytes: {}\", exported_symbols_bytes);\n             eprintln!(\"  def-path table bytes: {}\", def_path_table_bytes);\n             eprintln!(\" def-path hashes bytes: {}\", def_path_hash_map_bytes);\n@@ -1791,24 +1798,22 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         self.lazy(&tcx.lang_items().missing)\n     }\n \n+    fn encode_traits(&mut self) -> Lazy<[DefIndex]> {\n+        empty_proc_macro!(self);\n+        self.lazy(self.tcx.traits_in_crate(LOCAL_CRATE).iter().map(|def_id| def_id.index))\n+    }\n+\n     /// Encodes an index, mapping each trait to its (local) implementations.\n-    fn encode_traits_and_impls(&mut self) -> (Lazy<[DefIndex]>, Lazy<[TraitImpls]>) {\n-        if self.is_proc_macro {\n-            return (Lazy::empty(), Lazy::empty());\n-        }\n+    fn encode_impls(&mut self) -> Lazy<[TraitImpls]> {\n         debug!(\"EncodeContext::encode_traits_and_impls()\");\n+        empty_proc_macro!(self);\n         let tcx = self.tcx;\n-        let mut visitor =\n-            TraitsAndImplsVisitor { tcx, impls: FxHashMap::default(), traits: Default::default() };\n+        let mut visitor = ImplsVisitor { tcx, impls: FxHashMap::default() };\n         tcx.hir().visit_all_item_likes(&mut visitor);\n \n-        let mut all_traits = visitor.traits;\n         let mut all_impls: Vec<_> = visitor.impls.into_iter().collect();\n \n         // Bring everything into deterministic order for hashing\n-        all_traits.sort_by_cached_key(|&local_def_index| {\n-            tcx.hir().def_path_hash(LocalDefId { local_def_index })\n-        });\n         all_impls.sort_by_cached_key(|&(trait_def_id, _)| tcx.def_path_hash(trait_def_id));\n \n         let all_impls: Vec<_> = all_impls\n@@ -1826,7 +1831,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             })\n             .collect();\n \n-        (self.lazy(&all_traits), self.lazy(&all_impls))\n+        self.lazy(&all_impls)\n     }\n \n     // Encodes all symbols exported from this crate into the metadata.\n@@ -2048,18 +2053,14 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     }\n }\n \n-struct TraitsAndImplsVisitor<'tcx> {\n+struct ImplsVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    traits: Vec<DefIndex>,\n     impls: FxHashMap<DefId, Vec<(DefIndex, Option<fast_reject::SimplifiedType>)>>,\n }\n \n-impl<'tcx, 'v> ItemLikeVisitor<'v> for TraitsAndImplsVisitor<'tcx> {\n+impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplsVisitor<'tcx> {\n     fn visit_item(&mut self, item: &hir::Item<'_>) {\n         match item.kind {\n-            hir::ItemKind::Trait(..) | hir::ItemKind::TraitAlias(..) => {\n-                self.traits.push(item.def_id.local_def_index);\n-            }\n             hir::ItemKind::Impl(..) => {\n                 if let Some(trait_ref) = self.tcx.impl_trait_ref(item.def_id.to_def_id()) {\n                     let simplified_self_ty = fast_reject::simplify_type(\n@@ -2224,3 +2225,34 @@ fn encode_metadata_impl(tcx: TyCtxt<'_>) -> EncodedMetadata {\n \n     EncodedMetadata { raw_data: result }\n }\n+\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n+        traits_in_crate: |tcx, cnum| {\n+            assert_eq!(cnum, LOCAL_CRATE);\n+\n+            #[derive(Default)]\n+            struct TraitsVisitor {\n+                traits: Vec<DefId>,\n+            }\n+            impl ItemLikeVisitor<'_> for TraitsVisitor {\n+                fn visit_item(&mut self, item: &hir::Item<'_>) {\n+                    if let hir::ItemKind::Trait(..) | hir::ItemKind::TraitAlias(..) = item.kind {\n+                        self.traits.push(item.def_id.to_def_id());\n+                    }\n+                }\n+                fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}\n+                fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}\n+                fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}\n+            }\n+\n+            let mut visitor = TraitsVisitor::default();\n+            tcx.hir().visit_all_item_likes(&mut visitor);\n+            // Bring everything into deterministic order.\n+            visitor.traits.sort_by_cached_key(|&def_id| tcx.def_path_hash(def_id));\n+            tcx.arena.alloc_slice(&visitor.traits)\n+        },\n+\n+        ..*providers\n+    };\n+}"}, {"sha": "35016453369b59468abead6823818507868fca88", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dd50d5eb258e70c415fd8d50d4ca1592bb878b1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd50d5eb258e70c415fd8d50d4ca1592bb878b1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=2dd50d5eb258e70c415fd8d50d4ca1592bb878b1", "patch": "@@ -16,6 +16,7 @@ use rustc_middle::hir::exports::Export;\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc_middle::mir;\n use rustc_middle::thir;\n+use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, ReprOptions, Ty};\n use rustc_serialize::opaque::Encoder;\n use rustc_session::config::SymbolManglingVersion;\n@@ -29,8 +30,8 @@ use rustc_target::spec::{PanicStrategy, TargetTriple};\n use std::marker::PhantomData;\n use std::num::NonZeroUsize;\n \n+pub use decoder::provide_extern;\n use decoder::DecodeContext;\n-pub use decoder::{provide, provide_extern};\n crate use decoder::{CrateMetadata, CrateNumMap, MetadataBlob};\n use encoder::EncodeContext;\n pub use encoder::{encode_metadata, EncodedMetadata};\n@@ -454,3 +455,8 @@ struct GeneratorData<'tcx> {\n const TAG_VALID_SPAN_LOCAL: u8 = 0;\n const TAG_VALID_SPAN_FOREIGN: u8 = 1;\n const TAG_PARTIAL_SPAN: u8 = 2;\n+\n+pub fn provide(providers: &mut Providers) {\n+    encoder::provide(providers);\n+    decoder::provide(providers);\n+}"}]}