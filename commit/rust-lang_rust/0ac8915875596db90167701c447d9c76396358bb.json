{"sha": "0ac8915875596db90167701c447d9c76396358bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYzg5MTU4NzU1OTZkYjkwMTY3NzAxYzQ0N2Q5Yzc2Mzk2MzU4YmI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-01-20T09:07:33Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-01-21T19:19:27Z"}, "message": "The war on abort_if_errors", "tree": {"sha": "3f002348f372314c17bfcd2e1195ac1bfd3a0494", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f002348f372314c17bfcd2e1195ac1bfd3a0494"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ac8915875596db90167701c447d9c76396358bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac8915875596db90167701c447d9c76396358bb", "html_url": "https://github.com/rust-lang/rust/commit/0ac8915875596db90167701c447d9c76396358bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ac8915875596db90167701c447d9c76396358bb/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1b6b33c6dbae1c72eebc50ba86a267704c2fade", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1b6b33c6dbae1c72eebc50ba86a267704c2fade", "html_url": "https://github.com/rust-lang/rust/commit/b1b6b33c6dbae1c72eebc50ba86a267704c2fade"}], "stats": {"total": 147, "additions": 73, "deletions": 74}, "files": [{"sha": "756d708732a4ef44ca3b3daa5a279cfbbcaca395", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ac8915875596db90167701c447d9c76396358bb/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac8915875596db90167701c447d9c76396358bb/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=0ac8915875596db90167701c447d9c76396358bb", "patch": "@@ -270,8 +270,8 @@ pub fn validate_crate_name(sess: Option<&Session>, s: &str, sp: Option<Span>) {\n     let say = |s: &str| {\n         match (sp, sess) {\n             (_, None) => panic!(\"{}\", s),\n-            (Some(sp), Some(sess)) => sess.span_err(sp, s),\n-            (None, Some(sess)) => sess.err(s),\n+            (Some(sp), Some(sess)) => sess.span_fatal(sp, s),\n+            (None, Some(sess)) => sess.fatal(s),\n         }\n     };\n     if s.is_empty() {\n@@ -282,10 +282,6 @@ pub fn validate_crate_name(sess: Option<&Session>, s: &str, sp: Option<Span>) {\n         if c == '_'  { continue }\n         say(&format!(\"invalid character `{}` in crate name: `{}`\", c, s));\n     }\n-    match sess {\n-        Some(sess) => sess.abort_if_errors(),\n-        None => {}\n-    }\n }\n \n /// A dummy crate store that does not support any non-local crates,"}, {"sha": "6e57d5dd1ba8d5f906e5ff777dc415863a1ca847", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ac8915875596db90167701c447d9c76396358bb/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac8915875596db90167701c447d9c76396358bb/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=0ac8915875596db90167701c447d9c76396358bb", "patch": "@@ -239,7 +239,6 @@ pub fn collect_language_items(session: &Session,\n     collector.collect(krate);\n     let LanguageItemCollector { mut items, .. } = collector;\n     weak_lang_items::check_crate(krate, session, &mut items);\n-    session.abort_if_errors();\n     items\n }\n "}, {"sha": "975ec0e709b7d272605e9c31b6f9c2fe057c6511", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0ac8915875596db90167701c447d9c76396358bb/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac8915875596db90167701c447d9c76396358bb/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=0ac8915875596db90167701c447d9c76396358bb", "patch": "@@ -176,14 +176,15 @@ impl Session {\n     pub fn abort_if_errors(&self) {\n         self.diagnostic().abort_if_errors();\n     }\n-    pub fn abort_if_new_errors<F>(&self, mut f: F)\n-        where F: FnMut()\n+    pub fn abort_if_new_errors<F, T>(&self, f: F) -> T\n+        where F: FnOnce() -> T\n     {\n         let count = self.err_count();\n-        f();\n+        let result = f();\n         if self.err_count() > count {\n             self.abort_if_errors();\n         }\n+        result\n     }\n     pub fn span_warn(&self, sp: Span, msg: &str) {\n         self.diagnostic().span_warn(sp, msg)"}, {"sha": "1db04033f940edd0d4c63c47143eb34c27e66294", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 33, "deletions": 31, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/0ac8915875596db90167701c447d9c76396358bb/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac8915875596db90167701c447d9c76396358bb/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=0ac8915875596db90167701c447d9c76396358bb", "patch": "@@ -69,7 +69,6 @@ pub fn compile_input(sess: Session,\n         let state = $make_state;\n         (control.$point.callback)(state);\n \n-        $tsess.abort_if_errors();\n         if control.$point.stop == Compilation::Stop {\n             return;\n         }\n@@ -481,13 +480,15 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     });\n \n     time(time_passes, \"gated macro checking\", || {\n-        let features = syntax::feature_gate::check_crate_macros(sess.codemap(),\n-                                                                &sess.parse_sess.span_diagnostic,\n-                                                                &krate);\n-\n-        // these need to be set \"early\" so that expansion sees `quote` if enabled.\n-        *sess.features.borrow_mut() = features;\n-        sess.abort_if_errors();\n+        sess.abort_if_new_errors(|| {\n+            let features =\n+              syntax::feature_gate::check_crate_macros(sess.codemap(),\n+                                                       &sess.parse_sess.span_diagnostic,\n+                                                       &krate);\n+\n+            // these need to be set \"early\" so that expansion sees `quote` if enabled.\n+            *sess.features.borrow_mut() = features;\n+        });\n     });\n \n \n@@ -525,7 +526,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     let Registry { syntax_exts, early_lint_passes, late_lint_passes, lint_groups,\n                    llvm_passes, attributes, .. } = registry;\n \n-    {\n+    sess.abort_if_new_errors(|| {\n         let mut ls = sess.lint_store.borrow_mut();\n         for pass in early_lint_passes {\n             ls.register_early_pass(Some(sess), true, pass);\n@@ -540,17 +541,14 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n \n         *sess.plugin_llvm_passes.borrow_mut() = llvm_passes;\n         *sess.plugin_attributes.borrow_mut() = attributes.clone();\n-    }\n+    });\n \n     // Lint plugins are registered; now we can process command line flags.\n     if sess.opts.describe_lints {\n         super::describe_lints(&*sess.lint_store.borrow(), true);\n         return None;\n     }\n-    sess.lint_store.borrow_mut().process_command_line(sess);\n-\n-    // Abort if there are errors from lint processing or a plugin registrar.\n-    sess.abort_if_errors();\n+    sess.abort_if_new_errors(|| sess.lint_store.borrow_mut().process_command_line(sess));\n \n     krate = time(time_passes, \"expansion\", || {\n         // Windows dlls do not have rpaths, so they don't know how to find their\n@@ -594,13 +592,14 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     // much as possible (e.g. help the programmer avoid platform\n     // specific differences)\n     time(time_passes, \"complete gated feature checking 1\", || {\n-        let features = syntax::feature_gate::check_crate(sess.codemap(),\n-                                                         &sess.parse_sess.span_diagnostic,\n-                                                         &krate,\n-                                                         &attributes,\n-                                                         sess.opts.unstable_features);\n-        *sess.features.borrow_mut() = features;\n-        sess.abort_if_errors();\n+        sess.abort_if_new_errors(|| {\n+            let features = syntax::feature_gate::check_crate(sess.codemap(),\n+                                                             &sess.parse_sess.span_diagnostic,\n+                                                             &krate,\n+                                                             &attributes,\n+                                                             sess.opts.unstable_features);\n+            *sess.features.borrow_mut() = features;\n+        });\n     });\n \n     // JBC: make CFG processing part of expansion to avoid this problem:\n@@ -639,13 +638,14 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     // later, to make sure we've got everything (e.g. configuration\n     // can insert new attributes via `cfg_attr`)\n     time(time_passes, \"complete gated feature checking 2\", || {\n-        let features = syntax::feature_gate::check_crate(sess.codemap(),\n-                                                         &sess.parse_sess.span_diagnostic,\n-                                                         &krate,\n-                                                         &attributes,\n-                                                         sess.opts.unstable_features);\n-        *sess.features.borrow_mut() = features;\n-        sess.abort_if_errors();\n+        sess.abort_if_new_errors(|| {\n+            let features = syntax::feature_gate::check_crate(sess.codemap(),\n+                                                             &sess.parse_sess.span_diagnostic,\n+                                                             &krate,\n+                                                             &attributes,\n+                                                             sess.opts.unstable_features);\n+            *sess.features.borrow_mut() = features;\n+        });\n     });\n \n     time(time_passes,\n@@ -711,9 +711,11 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n          \"external crate/lib resolution\",\n          || LocalCrateReader::new(sess, cstore, &hir_map).read_crates(krate));\n \n-    let lang_items = time(time_passes,\n-                          \"language item collection\",\n-                          || middle::lang_items::collect_language_items(&sess, &hir_map));\n+    let lang_items = time(time_passes, \"language item collection\", || {\n+        sess.abort_if_new_errors(|| {\n+            middle::lang_items::collect_language_items(&sess, &hir_map)\n+        })\n+    });\n \n     let resolve::CrateMap {\n         def_map,"}, {"sha": "9c75007a8db764f72083fffe9e35f27edb3df636", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0ac8915875596db90167701c447d9c76396358bb/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac8915875596db90167701c447d9c76396358bb/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=0ac8915875596db90167701c447d9c76396358bb", "patch": "@@ -258,15 +258,14 @@ impl<'a> CrateReader<'a> {\n                             metadata: &MetadataBlob) {\n         let crate_rustc_version = decoder::crate_rustc_version(metadata.as_slice());\n         if crate_rustc_version != Some(rustc_version()) {\n-            span_err!(self.sess, span, E0514,\n-                      \"the crate `{}` has been compiled with {}, which is \\\n-                       incompatible with this version of rustc\",\n-                      name,\n-                      crate_rustc_version\n-                          .as_ref().map(|s|&**s)\n-                          .unwrap_or(\"an old version of rustc\")\n+            span_fatal!(self.sess, span, E0514,\n+                        \"the crate `{}` has been compiled with {}, which is \\\n+                         incompatible with this version of rustc\",\n+                        name,\n+                        crate_rustc_version\n+                            .as_ref().map(|s|&**s)\n+                            .unwrap_or(\"an old version of rustc\")\n             );\n-            self.sess.abort_if_errors();\n         }\n     }\n \n@@ -511,7 +510,6 @@ impl<'a> CrateReader<'a> {\n                     }\n                 };\n                 let span = mk_sp(lo, p.last_span.hi);\n-                p.abort_if_errors();\n \n                 // Mark the attrs as used\n                 for attr in &attrs {\n@@ -554,8 +552,7 @@ impl<'a> CrateReader<'a> {\n                                   name,\n                                   config::host_triple(),\n                                   self.sess.opts.target_triple);\n-            span_err!(self.sess, span, E0456, \"{}\", &message[..]);\n-            self.sess.abort_if_errors();\n+            span_fatal!(self.sess, span, E0456, \"{}\", &message[..]);\n         }\n \n         let registrar ="}, {"sha": "f422a47572b8da45b3afcf7f39bd755b72543d36", "filename": "src/librustc_passes/const_fn.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0ac8915875596db90167701c447d9c76396358bb/src%2Flibrustc_passes%2Fconst_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac8915875596db90167701c447d9c76396358bb/src%2Flibrustc_passes%2Fconst_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconst_fn.rs?ref=0ac8915875596db90167701c447d9c76396358bb", "patch": "@@ -18,8 +18,9 @@ use syntax::visit::{self, Visitor, FnKind};\n use syntax::codemap::Span;\n \n pub fn check_crate(sess: &Session, krate: &ast::Crate) {\n-    visit::walk_crate(&mut CheckConstFn{ sess: sess }, krate);\n-    sess.abort_if_errors();\n+    sess.abort_if_new_errors(|| {\n+        visit::walk_crate(&mut CheckConstFn{ sess: sess }, krate);\n+    });\n }\n \n struct CheckConstFn<'a> {"}, {"sha": "fb4eb61ceb4d40b1446615f5caffa7f41772d6cf", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ac8915875596db90167701c447d9c76396358bb/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac8915875596db90167701c447d9c76396358bb/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=0ac8915875596db90167701c447d9c76396358bb", "patch": "@@ -4019,10 +4019,8 @@ pub fn create_resolver<'a, 'tcx>(session: &'a Session,\n     resolver.callback = callback;\n \n     build_reduced_graph::build_reduced_graph(&mut resolver, krate);\n-    session.abort_if_errors();\n \n     resolve_imports::resolve_imports(&mut resolver);\n-    session.abort_if_errors();\n \n     resolver\n }"}, {"sha": "a7a4ddc3b2a636e95767afd112ee8da449e557b7", "filename": "src/libsyntax/errors/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0ac8915875596db90167701c447d9c76396358bb/src%2Flibsyntax%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac8915875596db90167701c447d9c76396358bb/src%2Flibsyntax%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fmod.rs?ref=0ac8915875596db90167701c447d9c76396358bb", "patch": "@@ -555,6 +555,9 @@ impl Handler {\n pub enum Level {\n     Bug,\n     Fatal,\n+    // An error which while not immediately fatal, should stop the compiler\n+    // progressing beyond the current phase.\n+    PhaseFatal,\n     Error,\n     Warning,\n     Note,\n@@ -573,7 +576,7 @@ impl fmt::Display for Level {\n impl Level {\n     fn color(self) -> term::color::Color {\n         match self {\n-            Bug | Fatal | Error => term::color::BRIGHT_RED,\n+            Bug | Fatal | PhaseFatal | Error => term::color::BRIGHT_RED,\n             Warning => term::color::BRIGHT_YELLOW,\n             Note => term::color::BRIGHT_GREEN,\n             Help => term::color::BRIGHT_CYAN,\n@@ -584,7 +587,7 @@ impl Level {\n     fn to_str(self) -> &'static str {\n         match self {\n             Bug => \"error: internal compiler error\",\n-            Fatal | Error => \"error\",\n+            Fatal | PhaseFatal | Error => \"error\",\n             Warning => \"warning\",\n             Note => \"note\",\n             Help => \"help\","}, {"sha": "72537f6c7b26afa7dc3948a3fcdd1b8261739a22", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0ac8915875596db90167701c447d9c76396358bb/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac8915875596db90167701c447d9c76396358bb/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0ac8915875596db90167701c447d9c76396358bb", "patch": "@@ -1304,9 +1304,14 @@ pub fn expand_crate(mut cx: ExtCtxt,\n             expander.cx.syntax_env.insert(name, extension);\n         }\n \n+        let err_count = cx.parse_sess.span_diagnostic.err_count();\n         let mut ret = expander.fold_crate(c);\n         ret.exported_macros = expander.cx.exported_macros.clone();\n-        cx.parse_sess.span_diagnostic.abort_if_errors();\n+\n+        if cx.parse_sess.span_diagnostic.err_count() > err_count {\n+            cx.parse_sess.span_diagnostic.abort_if_errors();\n+        }\n+\n         ret\n     };\n     return (ret, cx.syntax_env.names);"}, {"sha": "32372ccc13b4727a3315540456e426e3bcf9b6b0", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0ac8915875596db90167701c447d9c76396358bb/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac8915875596db90167701c447d9c76396358bb/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=0ac8915875596db90167701c447d9c76396358bb", "patch": "@@ -98,7 +98,7 @@ pub fn parse_crate_from_source_str(name: String,\n                                            cfg,\n                                            name,\n                                            source);\n-    maybe_aborted(panictry!(p.parse_crate_mod()),p)\n+    panictry!(p.parse_crate_mod())\n }\n \n pub fn parse_crate_attrs_from_source_str(name: String,\n@@ -110,7 +110,7 @@ pub fn parse_crate_attrs_from_source_str(name: String,\n                                            cfg,\n                                            name,\n                                            source);\n-    maybe_aborted(panictry!(p.parse_inner_attributes()), p)\n+    panictry!(p.parse_inner_attributes())\n }\n \n pub fn parse_expr_from_source_str(name: String,\n@@ -119,7 +119,7 @@ pub fn parse_expr_from_source_str(name: String,\n                                   sess: &ParseSess)\n                                   -> P<ast::Expr> {\n     let mut p = new_parser_from_source_str(sess, cfg, name, source);\n-    maybe_aborted(panictry!(p.parse_expr()), p)\n+    panictry!(p.parse_expr())\n }\n \n pub fn parse_item_from_source_str(name: String,\n@@ -128,7 +128,7 @@ pub fn parse_item_from_source_str(name: String,\n                                   sess: &ParseSess)\n                                   -> Option<P<ast::Item>> {\n     let mut p = new_parser_from_source_str(sess, cfg, name, source);\n-    maybe_aborted(panictry!(p.parse_item()), p)\n+    panictry!(p.parse_item())\n }\n \n pub fn parse_meta_from_source_str(name: String,\n@@ -137,7 +137,7 @@ pub fn parse_meta_from_source_str(name: String,\n                                   sess: &ParseSess)\n                                   -> P<ast::MetaItem> {\n     let mut p = new_parser_from_source_str(sess, cfg, name, source);\n-    maybe_aborted(panictry!(p.parse_meta_item()), p)\n+    panictry!(p.parse_meta_item())\n }\n \n pub fn parse_stmt_from_source_str(name: String,\n@@ -151,7 +151,7 @@ pub fn parse_stmt_from_source_str(name: String,\n         name,\n         source\n     );\n-    maybe_aborted(panictry!(p.parse_stmt()), p)\n+    panictry!(p.parse_stmt())\n }\n \n // Warning: This parses with quote_depth > 0, which is not the default.\n@@ -168,7 +168,7 @@ pub fn parse_tts_from_source_str(name: String,\n     );\n     p.quote_depth += 1;\n     // right now this is re-creating the token trees from ... token trees.\n-    maybe_aborted(panictry!(p.parse_all_token_trees()),p)\n+    panictry!(p.parse_all_token_trees())\n }\n \n // Create a new parser from a source string\n@@ -265,16 +265,10 @@ pub fn tts_to_parser<'a>(sess: &'a ParseSess,\n     p\n }\n \n-/// Abort if necessary\n-pub fn maybe_aborted<T>(result: T, p: Parser) -> T {\n-    p.abort_if_errors();\n-    result\n-}\n \n fn abort_if_errors<'a, T>(result: PResult<'a, T>, p: &Parser) -> T {\n     match result {\n         Ok(c) => {\n-            p.abort_if_errors();\n             c\n         }\n         Err(mut e) => {"}, {"sha": "acce6ed87d00b5a25c892fba351bdf499dfddb76", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0ac8915875596db90167701c447d9c76396358bb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac8915875596db90167701c447d9c76396358bb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0ac8915875596db90167701c447d9c76396358bb", "patch": "@@ -2357,7 +2357,11 @@ impl<'a> Parser<'a> {\n \n     // Assuming we have just parsed `.foo` (i.e., a dot and an ident), continue\n     // parsing into an expression.\n-    fn parse_dot_suffix(&mut self, ident: Ident, ident_span: Span, self_value: P<Expr>) -> PResult<'a, P<Expr>> {\n+    fn parse_dot_suffix(&mut self,\n+                        ident: Ident,\n+                        ident_span: Span,\n+                        self_value: P<Expr>)\n+                        -> PResult<'a, P<Expr>> {\n         let (_, tys, bindings) = if self.eat(&token::ModSep) {\n             try!(self.expect_lt());\n             try!(self.parse_generic_values_after_lt())\n@@ -2463,7 +2467,6 @@ impl<'a> Parser<'a> {\n \n                   }\n                   _ => {\n-                    // TODO special case lifetime\n                     // FIXME Could factor this out into non_fatal_unexpected or something.\n                     let actual = self.this_token_to_string();\n                     self.span_err(self.span, &format!(\"unexpected token: `{}`\", actual));"}]}