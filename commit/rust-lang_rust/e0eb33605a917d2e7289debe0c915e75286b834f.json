{"sha": "e0eb33605a917d2e7289debe0c915e75286b834f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZWIzMzYwNWE5MTdkMmU3Mjg5ZGViZTBjOTE1ZTc1Mjg2YjgzNGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-25T14:40:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-25T14:40:24Z"}, "message": "Encapsulate CrateGraph a bit", "tree": {"sha": "ea35a9250c22fdc201daad5ae971a214f1c23e70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea35a9250c22fdc201daad5ae971a214f1c23e70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0eb33605a917d2e7289debe0c915e75286b834f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0eb33605a917d2e7289debe0c915e75286b834f", "html_url": "https://github.com/rust-lang/rust/commit/e0eb33605a917d2e7289debe0c915e75286b834f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0eb33605a917d2e7289debe0c915e75286b834f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75d9cbd7c22b09a0bc2731731228c95ae60573c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/75d9cbd7c22b09a0bc2731731228c95ae60573c3", "html_url": "https://github.com/rust-lang/rust/commit/75d9cbd7c22b09a0bc2731731228c95ae60573c3"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "ff56a3c3481c044d6e6b2a1fac38feb8d0c896bb", "filename": "crates/ra_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0eb33605a917d2e7289debe0c915e75286b834f/crates%2Fra_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e0eb33605a917d2e7289debe0c915e75286b834f/crates%2Fra_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2FCargo.toml?ref=e0eb33605a917d2e7289debe0c915e75286b834f", "patch": "@@ -11,7 +11,7 @@ rayon = \"1.0.2\"\n fst = \"0.3.1\"\n ra_syntax = { path = \"../ra_syntax\" }\n ra_editor = { path = \"../ra_editor\" }\n-salsa = \"0.6.2\"\n+salsa = \"0.6.1\"\n rustc-hash = \"1.0\"\n \n [dev-dependencies]"}, {"sha": "af7894cd06a26122ca48fc36bee322c05ced6301", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e0eb33605a917d2e7289debe0c915e75286b834f/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0eb33605a917d2e7289debe0c915e75286b834f/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=e0eb33605a917d2e7289debe0c915e75286b834f", "patch": "@@ -15,9 +15,9 @@ mod completion;\n use std::{\n     fmt,\n     sync::Arc,\n-    collections::BTreeMap,\n };\n \n+use rustc_hash::FxHashMap;\n use ra_syntax::{AtomEdit, File, TextRange, TextUnit};\n use relative_path::{RelativePath, RelativePathBuf};\n use rayon::prelude::*;\n@@ -55,9 +55,21 @@ pub struct FileId(pub u32);\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct CrateId(pub u32);\n \n-#[derive(Debug, Clone, Default, PartialEq, Eq, Hash)]\n+#[derive(Debug, Clone, Default, PartialEq, Eq)]\n pub struct CrateGraph {\n-    pub crate_roots: BTreeMap<CrateId, FileId>,\n+    crate_roots: FxHashMap<CrateId, FileId>,\n+}\n+\n+impl CrateGraph {\n+    pub fn new() -> CrateGraph {\n+        CrateGraph::default()\n+    }\n+    pub fn add_crate_root(&mut self, file_id: FileId) -> CrateId{\n+        let crate_id = CrateId(self.crate_roots.len() as u32);\n+        let prev = self.crate_roots.insert(crate_id, file_id);\n+        assert!(prev.is_none());\n+        crate_id\n+    }\n }\n \n pub trait FileResolver: fmt::Debug + Send + Sync + 'static {"}, {"sha": "806e1fb34584f22ea73d40c1765b5b81f8bd2a25", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e0eb33605a917d2e7289debe0c915e75286b834f/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0eb33605a917d2e7289debe0c915e75286b834f/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=e0eb33605a917d2e7289debe0c915e75286b834f", "patch": "@@ -7,7 +7,6 @@ extern crate test_utils;\n \n use std::{\n     sync::Arc,\n-    collections::BTreeMap,\n };\n \n use ra_syntax::TextRange;\n@@ -130,19 +129,17 @@ fn test_resolve_crate_root() {\n     let snap = host.analysis();\n     assert!(snap.crate_for(FileId(2)).unwrap().is_empty());\n \n-    let crate_graph = CrateGraph {\n-        crate_roots: {\n-            let mut m = BTreeMap::default();\n-            m.insert(CrateId(1), FileId(1));\n-            m\n-        },\n+    let crate_graph = {\n+        let mut g = CrateGraph::new();\n+        g.add_crate_root(FileId(1));\n+        g\n     };\n     let mut change = AnalysisChange::new();\n     change.set_crate_graph(crate_graph);\n     host.apply_change(change);\n     let snap = host.analysis();\n \n-    assert_eq!(snap.crate_for(FileId(2)).unwrap(), vec![CrateId(1)],);\n+    assert_eq!(snap.crate_for(FileId(2)).unwrap(), vec![CrateId(0)],);\n }\n \n #[test]"}, {"sha": "25986e230443aeb2ec33b4c8d1b7c4ebacfd6c33", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e0eb33605a917d2e7289debe0c915e75286b834f/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0eb33605a917d2e7289debe0c915e75286b834f/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=e0eb33605a917d2e7289debe0c915e75286b834f", "patch": "@@ -2,11 +2,10 @@ use std::{\n     fs,\n     path::{Path, PathBuf},\n     sync::Arc,\n-    collections::BTreeMap,\n };\n \n use languageserver_types::Url;\n-use ra_analysis::{Analysis, AnalysisHost, AnalysisChange, CrateGraph, CrateId, FileId, FileResolver, LibraryData};\n+use ra_analysis::{Analysis, AnalysisHost, AnalysisChange, CrateGraph, FileId, FileResolver, LibraryData};\n use rustc_hash::FxHashMap;\n \n use crate::{\n@@ -149,7 +148,7 @@ impl ServerWorldState {\n         Ok(file_id)\n     }\n     pub fn set_workspaces(&mut self, ws: Vec<CargoWorkspace>) {\n-        let mut crate_roots = BTreeMap::default();\n+        let mut crate_graph = CrateGraph::new();\n         ws.iter()\n             .flat_map(|ws| {\n                 ws.packages()\n@@ -158,11 +157,9 @@ impl ServerWorldState {\n             })\n             .for_each(|root| {\n                 if let Some(file_id) = self.path_map.get_id(root) {\n-                    let crate_id = CrateId(crate_roots.len() as u32);\n-                    crate_roots.insert(crate_id, file_id);\n+                    crate_graph.add_crate_root(file_id);\n                 }\n             });\n-        let crate_graph = CrateGraph { crate_roots };\n         self.workspaces = Arc::new(ws);\n         let mut change = AnalysisChange::new();\n         change.set_crate_graph(crate_graph);"}]}