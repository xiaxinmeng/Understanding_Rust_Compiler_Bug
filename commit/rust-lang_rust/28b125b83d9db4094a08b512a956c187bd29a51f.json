{"sha": "28b125b83d9db4094a08b512a956c187bd29a51f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YjEyNWI4M2Q5ZGI0MDk0YTA4YjUxMmE5NTZjMTg3YmQyOWE1MWY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-05-08T23:00:29Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-05-11T11:24:21Z"}, "message": "Turn `ast::Lit` into a struct", "tree": {"sha": "14c5e4dae465b21dcf439c6ed993e9decf6bc23f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14c5e4dae465b21dcf439c6ed993e9decf6bc23f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28b125b83d9db4094a08b512a956c187bd29a51f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28b125b83d9db4094a08b512a956c187bd29a51f", "html_url": "https://github.com/rust-lang/rust/commit/28b125b83d9db4094a08b512a956c187bd29a51f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28b125b83d9db4094a08b512a956c187bd29a51f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8e0d0a2aa4f18d76a701150fccb67533f377368", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8e0d0a2aa4f18d76a701150fccb67533f377368", "html_url": "https://github.com/rust-lang/rust/commit/b8e0d0a2aa4f18d76a701150fccb67533f377368"}], "stats": {"total": 41, "additions": 24, "deletions": 17}, "files": [{"sha": "88a2c295a6ef6ed5e94fad406a428aee6168d4a8", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28b125b83d9db4094a08b512a956c187bd29a51f/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b125b83d9db4094a08b512a956c187bd29a51f/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=28b125b83d9db4094a08b512a956c187bd29a51f", "patch": "@@ -162,7 +162,11 @@ impl_stable_hash_for!(enum ::syntax::ast::LitIntType {\n     Unsuffixed\n });\n \n-impl_stable_hash_for_spanned!(::syntax::ast::LitKind);\n+impl_stable_hash_for!(struct ::syntax::ast::Lit {\n+    node,\n+    span\n+});\n+\n impl_stable_hash_for!(enum ::syntax::ast::LitKind {\n     Str(value, style),\n     Err(value),"}, {"sha": "783792cf1977ab5ac283c46c3df8ab26154e3a63", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28b125b83d9db4094a08b512a956c187bd29a51f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b125b83d9db4094a08b512a956c187bd29a51f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=28b125b83d9db4094a08b512a956c187bd29a51f", "patch": "@@ -1351,7 +1351,11 @@ pub enum StrStyle {\n }\n \n /// A literal.\n-pub type Lit = Spanned<LitKind>;\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq)]\n+pub struct Lit {\n+    pub node: LitKind,\n+    pub span: Span,\n+}\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy, Hash, PartialEq)]\n pub enum LitIntType {"}, {"sha": "e331a26335443a802e291a9829c8b46dac77a2cf", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/28b125b83d9db4094a08b512a956c187bd29a51f/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b125b83d9db4094a08b512a956c187bd29a51f/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=28b125b83d9db4094a08b512a956c187bd29a51f", "patch": "@@ -16,7 +16,7 @@ use crate::ast::{AttrId, Attribute, AttrStyle, Name, Ident, Path, PathSegment};\n use crate::ast::{MetaItem, MetaItemKind, NestedMetaItem};\n use crate::ast::{Lit, LitKind, Expr, ExprKind, Item, Local, Stmt, StmtKind, GenericParam};\n use crate::mut_visit::visit_clobber;\n-use crate::source_map::{BytePos, Spanned, respan, dummy_spanned};\n+use crate::source_map::{BytePos, Spanned, dummy_spanned};\n use crate::parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};\n use crate::parse::parser::Parser;\n use crate::parse::{self, ParseSess, PResult};\n@@ -350,11 +350,11 @@ impl Attribute {\n /* Constructors */\n \n pub fn mk_name_value_item_str(ident: Ident, value: Spanned<Symbol>) -> MetaItem {\n-    let value = respan(value.span, LitKind::Str(value.node, ast::StrStyle::Cooked));\n+    let value = Lit { node: LitKind::Str(value.node, ast::StrStyle::Cooked), span: value.span };\n     mk_name_value_item(ident.span.to(value.span), ident, value)\n }\n \n-pub fn mk_name_value_item(span: Span, ident: Ident, value: ast::Lit) -> MetaItem {\n+pub fn mk_name_value_item(span: Span, ident: Ident, value: Lit) -> MetaItem {\n     MetaItem { path: Path::from_ident(ident), span, node: MetaItemKind::NameValue(value) }\n }\n \n@@ -417,7 +417,7 @@ pub fn mk_spanned_attr_outer(sp: Span, id: AttrId, item: MetaItem) -> Attribute\n \n pub fn mk_sugared_doc_attr(id: AttrId, text: Symbol, span: Span) -> Attribute {\n     let style = doc_comment_style(&text.as_str());\n-    let lit = respan(span, LitKind::Str(text, ast::StrStyle::Cooked));\n+    let lit = Lit { node: LitKind::Str(text, ast::StrStyle::Cooked), span };\n     Attribute {\n         id,\n         style,\n@@ -562,7 +562,7 @@ impl MetaItemKind {\n                 tokens.next();\n                 return if let Some(TokenTree::Token(span, token)) = tokens.next() {\n                     LitKind::from_token(token)\n-                        .map(|lit| MetaItemKind::NameValue(Spanned { node: lit, span: span }))\n+                        .map(|node| MetaItemKind::NameValue(Lit { node, span }))\n                 } else {\n                     None\n                 };\n@@ -609,7 +609,7 @@ impl NestedMetaItem {\n         if let Some(TokenTree::Token(span, token)) = tokens.peek().cloned() {\n             if let Some(node) = LitKind::from_token(token) {\n                 tokens.next();\n-                return Some(NestedMetaItem::Literal(respan(span, node)));\n+                return Some(NestedMetaItem::Literal(Lit { node, span }));\n             }\n         }\n "}, {"sha": "0fe85361b54b1c9cc084287a6dba3df57f35deef", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28b125b83d9db4094a08b512a956c187bd29a51f/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b125b83d9db4094a08b512a956c187bd29a51f/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=28b125b83d9db4094a08b512a956c187bd29a51f", "patch": "@@ -697,8 +697,8 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr_struct(span, self.path_ident(span, id), fields)\n     }\n \n-    fn expr_lit(&self, sp: Span, lit: ast::LitKind) -> P<ast::Expr> {\n-        self.expr(sp, ast::ExprKind::Lit(respan(sp, lit)))\n+    fn expr_lit(&self, span: Span, node: ast::LitKind) -> P<ast::Expr> {\n+        self.expr(span, ast::ExprKind::Lit(ast::Lit { node, span }))\n     }\n     fn expr_usize(&self, span: Span, i: usize) -> P<ast::Expr> {\n         self.expr_lit(span, ast::LitKind::Int(i as u128,\n@@ -1164,10 +1164,10 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         attr::mk_list_item(sp, Ident::with_empty_ctxt(name).with_span_pos(sp), mis)\n     }\n \n-    fn meta_name_value(&self, sp: Span, name: ast::Name, value: ast::LitKind)\n+    fn meta_name_value(&self, span: Span, name: ast::Name, node: ast::LitKind)\n                        -> ast::MetaItem {\n-        attr::mk_name_value_item(sp, Ident::with_empty_ctxt(name).with_span_pos(sp),\n-                                 respan(sp, value))\n+        attr::mk_name_value_item(span, Ident::with_empty_ctxt(name).with_span_pos(span),\n+                                 ast::Lit { node, span })\n     }\n \n     fn item_use(&self, sp: Span,"}, {"sha": "2b30d2db95e01774a76a6ba6900770a19f5b9893", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/28b125b83d9db4094a08b512a956c187bd29a51f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b125b83d9db4094a08b512a956c187bd29a51f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=28b125b83d9db4094a08b512a956c187bd29a51f", "patch": "@@ -2140,15 +2140,14 @@ impl<'a> Parser<'a> {\n     /// Matches `lit = true | false | token_lit`.\n     crate fn parse_lit(&mut self) -> PResult<'a, Lit> {\n         let lo = self.span;\n-        let lit = if self.eat_keyword(keywords::True) {\n+        let node = if self.eat_keyword(keywords::True) {\n             LitKind::Bool(true)\n         } else if self.eat_keyword(keywords::False) {\n             LitKind::Bool(false)\n         } else {\n-            let lit = self.parse_lit_token()?;\n-            lit\n+            self.parse_lit_token()?\n         };\n-        Ok(source_map::Spanned { node: lit, span: lo.to(self.prev_span) })\n+        Ok(Lit { node, span: lo.to(self.prev_span) })\n     }\n \n     /// Matches `'-' lit | lit` (cf. `ast_validation::AstValidator::check_expr_within_pat`)."}]}