{"sha": "9588f7fe7434fa7201799d10a16ef810bf1ae2a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ODhmN2ZlNzQzNGZhNzIwMTc5OWQxMGExNmVmODEwYmYxYWUyYTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-06-24T19:12:47Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-07-02T16:25:22Z"}, "message": "rewrite `dup_vec` to use `IndexVec` instead of `u32`", "tree": {"sha": "d814ffbdcca600986337061ed2c849ce30a8a435", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d814ffbdcca600986337061ed2c849ce30a8a435"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9588f7fe7434fa7201799d10a16ef810bf1ae2a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9588f7fe7434fa7201799d10a16ef810bf1ae2a1", "html_url": "https://github.com/rust-lang/rust/commit/9588f7fe7434fa7201799d10a16ef810bf1ae2a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9588f7fe7434fa7201799d10a16ef810bf1ae2a1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4a3753cfb9472da78539ecbd97913118f132f8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4a3753cfb9472da78539ecbd97913118f132f8b", "html_url": "https://github.com/rust-lang/rust/commit/b4a3753cfb9472da78539ecbd97913118f132f8b"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "3808a0014a12c97f5218b0e0c55d96de24b8e96a", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9588f7fe7434fa7201799d10a16ef810bf1ae2a1/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9588f7fe7434fa7201799d10a16ef810bf1ae2a1/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=9588f7fe7434fa7201799d10a16ef810bf1ae2a1", "patch": "@@ -22,7 +22,6 @@ use rustc_data_structures::graph::implementation::{\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use smallvec::SmallVec;\n use std::fmt;\n-use std::u32;\n use syntax_pos::Span;\n \n mod graphviz;\n@@ -623,7 +622,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         // idea is to report errors that derive from independent\n         // regions of the graph, but not those that derive from\n         // overlapping locations.\n-        let mut dup_vec = vec![u32::MAX; self.num_vars()];\n+        let mut dup_vec = IndexVec::from_elem_n(None, self.num_vars());\n \n         for (node_vid, value) in var_data.values.iter_enumerated() {\n             match *value {\n@@ -702,7 +701,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n     fn collect_error_for_expanding_node(\n         &self,\n         graph: &RegionGraph<'tcx>,\n-        dup_vec: &mut [u32],\n+        dup_vec: &mut IndexVec<RegionVid, Option<RegionVid>>,\n         node_idx: RegionVid,\n         errors: &mut Vec<RegionResolutionError<'tcx>>,\n     ) {\n@@ -781,7 +780,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         graph: &RegionGraph<'tcx>,\n         orig_node_idx: RegionVid,\n         dir: Direction,\n-        mut dup_vec: Option<&mut [u32]>,\n+        mut dup_vec: Option<&mut IndexVec<RegionVid, Option<RegionVid>>>,\n     ) -> (Vec<RegionAndOrigin<'tcx>>, bool) {\n         struct WalkState<'tcx> {\n             set: FxHashSet<RegionVid>,\n@@ -806,9 +805,9 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n \n             // check whether we've visited this node on some previous walk\n             if let Some(dup_vec) = &mut dup_vec {\n-                if dup_vec[node_idx.index() as usize] == u32::MAX {\n-                    dup_vec[node_idx.index() as usize] = orig_node_idx.index() as u32;\n-                } else if dup_vec[node_idx.index() as usize] != orig_node_idx.index() as u32 {\n+                if dup_vec[node_idx].is_none() {\n+                    dup_vec[node_idx] = Some(orig_node_idx);\n+                } else if dup_vec[node_idx] != Some(orig_node_idx) {\n                     state.dup_found = true;\n                 }\n "}]}