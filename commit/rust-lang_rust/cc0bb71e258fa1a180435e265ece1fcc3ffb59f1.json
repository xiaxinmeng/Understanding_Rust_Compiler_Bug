{"sha": "cc0bb71e258fa1a180435e265ece1fcc3ffb59f1", "node_id": "C_kwDOAAsO6NoAKGNjMGJiNzFlMjU4ZmExYTE4MDQzNWUyNjVlY2UxZmNjM2ZmYjU5ZjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-02T19:42:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-02T19:42:17Z"}, "message": "Auto merge of #12662 - DorianListens:dscheidt/extract-function-duplicate-name, r=DorianListens\n\nfix: Extract Function produces duplicate fn names\n\nThis change fixes #10037, in more or less the most naive fashion\npossible.\n\nWe continue to start with the hardcoded default of \"fun_name\", and now append a\ncounter to the end of it if that name is already in scope.\n\nIn the future, we can probably apply more heuristics here to wind up with more\nuseful names by default, but for now this resolves the immediate problem.", "tree": {"sha": "48e6359e7866d50e535ef6b5c90c3460a8f5c708", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48e6359e7866d50e535ef6b5c90c3460a8f5c708"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc0bb71e258fa1a180435e265ece1fcc3ffb59f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc0bb71e258fa1a180435e265ece1fcc3ffb59f1", "html_url": "https://github.com/rust-lang/rust/commit/cc0bb71e258fa1a180435e265ece1fcc3ffb59f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc0bb71e258fa1a180435e265ece1fcc3ffb59f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1ac46201d568fbe08deabafaa91100a1810d31b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ac46201d568fbe08deabafaa91100a1810d31b", "html_url": "https://github.com/rust-lang/rust/commit/d1ac46201d568fbe08deabafaa91100a1810d31b"}, {"sha": "0039d6f731a7d06d9d3ac4b832bd7d4707c36ec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0039d6f731a7d06d9d3ac4b832bd7d4707c36ec3", "html_url": "https://github.com/rust-lang/rust/commit/0039d6f731a7d06d9d3ac4b832bd7d4707c36ec3"}], "stats": {"total": 72, "additions": 70, "deletions": 2}, "files": [{"sha": "68dcb6c0d23c448577b3b3f4fe10c70b73859649", "filename": "crates/ide-assists/src/handlers/extract_function.rs", "status": "modified", "additions": 70, "deletions": 2, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/cc0bb71e258fa1a180435e265ece1fcc3ffb59f1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0bb71e258fa1a180435e265ece1fcc3ffb59f1/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=cc0bb71e258fa1a180435e265ece1fcc3ffb59f1", "patch": "@@ -81,7 +81,8 @@ pub(crate) fn extract_function(acc: &mut Assists, ctx: &AssistContext) -> Option\n \n     let anchor = if self_param.is_some() { Anchor::Method } else { Anchor::Freestanding };\n     let insert_after = node_to_insert_after(&body, anchor)?;\n-    let module = ctx.sema.scope(&insert_after)?.module();\n+    let semantics_scope = ctx.sema.scope(&insert_after)?;\n+    let module = semantics_scope.module();\n \n     let ret_ty = body.return_ty(ctx)?;\n     let control_flow = body.external_control_flow(ctx, &container_info)?;\n@@ -105,8 +106,10 @@ pub(crate) fn extract_function(acc: &mut Assists, ctx: &AssistContext) -> Option\n             let params =\n                 body.extracted_function_params(ctx, &container_info, locals_used.iter().copied());\n \n+            let name = make_function_name(&semantics_scope);\n+\n             let fun = Function {\n-                name: make::name_ref(\"fun_name\"),\n+                name,\n                 self_param,\n                 params,\n                 control_flow,\n@@ -155,6 +158,21 @@ pub(crate) fn extract_function(acc: &mut Assists, ctx: &AssistContext) -> Option\n     )\n }\n \n+fn make_function_name(semantics_scope: &hir::SemanticsScope) -> ast::NameRef {\n+    let mut names_in_scope = vec![];\n+    semantics_scope.process_all_names(&mut |name, _| names_in_scope.push(name.to_string()));\n+\n+    let default_name = \"fun_name\";\n+\n+    let mut name = default_name.to_string();\n+    let mut counter = 0;\n+    while names_in_scope.contains(&name) {\n+        counter += 1;\n+        name = format!(\"{}{}\", &default_name, counter)\n+    }\n+    make::name_ref(&name)\n+}\n+\n /// Try to guess what user wants to extract\n ///\n /// We have basically have two cases:\n@@ -4709,6 +4727,56 @@ fn $0fun_name() {\n     /* a comment */\n     let x = 0;\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn it_should_not_generate_duplicate_function_names() {\n+        check_assist(\n+            extract_function,\n+            r#\"\n+fn fun_name() {\n+    $0let x = 0;$0\n+}\n+\"#,\n+            r#\"\n+fn fun_name() {\n+    fun_name1();\n+}\n+\n+fn $0fun_name1() {\n+    let x = 0;\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn should_increment_suffix_until_it_finds_space() {\n+        check_assist(\n+            extract_function,\n+            r#\"\n+fn fun_name1() {\n+    let y = 0;\n+}\n+\n+fn fun_name() {\n+    $0let x = 0;$0\n+}\n+\"#,\n+            r#\"\n+fn fun_name1() {\n+    let y = 0;\n+}\n+\n+fn fun_name() {\n+    fun_name2();\n+}\n+\n+fn $0fun_name2() {\n+    let x = 0;\n+}\n \"#,\n         );\n     }"}]}