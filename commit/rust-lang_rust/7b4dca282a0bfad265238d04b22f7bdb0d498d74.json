{"sha": "7b4dca282a0bfad265238d04b22f7bdb0d498d74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNGRjYTI4MmEwYmZhZDI2NTIzOGQwNGIyMmY3YmRiMGQ0OThkNzQ=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-20T02:47:29Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-20T03:09:13Z"}, "message": "Document all methods", "tree": {"sha": "b9fce1683b5da06fb61d07949799dc2b61792b02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9fce1683b5da06fb61d07949799dc2b61792b02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b4dca282a0bfad265238d04b22f7bdb0d498d74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b4dca282a0bfad265238d04b22f7bdb0d498d74", "html_url": "https://github.com/rust-lang/rust/commit/7b4dca282a0bfad265238d04b22f7bdb0d498d74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b4dca282a0bfad265238d04b22f7bdb0d498d74/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ce7b619952dade385f9f67fcc6f3003a90eefd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ce7b619952dade385f9f67fcc6f3003a90eefd7", "html_url": "https://github.com/rust-lang/rust/commit/2ce7b619952dade385f9f67fcc6f3003a90eefd7"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "c0152b0c7d5040c50e7a330c1c4faa0a6ad7e184", "filename": "src/librustc_mir/dataflow/generic/engine.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b4dca282a0bfad265238d04b22f7bdb0d498d74/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4dca282a0bfad265238d04b22f7bdb0d498d74/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs?ref=7b4dca282a0bfad265238d04b22f7bdb0d498d74", "patch": "@@ -121,11 +121,17 @@ where\n         }\n     }\n \n+    /// Signals that we do not want dataflow state to propagate across unwind edges for these\n+    /// `BasicBlock`s.\n+    ///\n+    /// You must take care that `dead_unwinds` does not contain a `BasicBlock` that *can* actually\n+    /// unwind during execution. Otherwise, your dataflow results will not be correct.\n     pub fn dead_unwinds(mut self, dead_unwinds: &'a BitSet<BasicBlock>) -> Self {\n         self.dead_unwinds = Some(dead_unwinds);\n         self\n     }\n \n+    /// Computes the fixpoint for this dataflow problem and returns it.\n     pub fn iterate_to_fixpoint(mut self) -> Results<'tcx, A> {\n         let mut temp_state = BitSet::new_empty(self.bits_per_block);\n "}, {"sha": "c9b4f875ebdf85f7b28e6022579ca4ef7a12575d", "filename": "src/librustc_mir/dataflow/generic/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b4dca282a0bfad265238d04b22f7bdb0d498d74/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4dca282a0bfad265238d04b22f7bdb0d498d74/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fmod.rs?ref=7b4dca282a0bfad265238d04b22f7bdb0d498d74", "patch": "@@ -60,11 +60,13 @@ impl<A> Results<'tcx, A>\n where\n     A: Analysis<'tcx>,\n {\n-    pub fn into_cursor(self, body: &'mir mir::Body<'tcx>) -> ResultsCursor<'mir, 'tcx, A> {\n+    /// Creates a `ResultsCursor` that can inspect these `Results`.\n+    pub fn into_results_cursor(self, body: &'mir mir::Body<'tcx>) -> ResultsCursor<'mir, 'tcx, A> {\n         ResultsCursor::new(body, self)\n     }\n \n-    pub fn on_block_entry(&self, block: BasicBlock) -> &BitSet<A::Idx> {\n+    /// Gets the entry set for the given block.\n+    pub fn entry_set_for_block(&self, block: BasicBlock) -> &BitSet<A::Idx> {\n         &self.entry_sets[block]\n     }\n }\n@@ -288,12 +290,14 @@ pub trait GenKill<T> {\n     /// Removes `elem` from the state vector.\n     fn kill(&mut self, elem: T);\n \n+    /// Calls `gen` for each element in `elems`.\n     fn gen_all(&mut self, elems: impl IntoIterator<Item = T>) {\n         for elem in elems {\n             self.gen(elem);\n         }\n     }\n \n+    /// Calls `kill` for each element in `elems`.\n     fn kill_all(&mut self, elems: impl IntoIterator<Item = T>) {\n         for elem in elems {\n             self.kill(elem);\n@@ -304,7 +308,7 @@ pub trait GenKill<T> {\n /// Stores a transfer function for a gen/kill problem.\n ///\n /// Calling `gen`/`kill` on a `GenKillSet` will \"build up\" a transfer function so that it can be\n-/// applied to a state vector efficiently. When there are multiple calls to `gen` and/or `kill` for\n+/// applied multiple times efficiently. When there are multiple calls to `gen` and/or `kill` for\n /// the same element, the most recent one takes precedence.\n #[derive(Clone)]\n pub struct GenKillSet<T: Idx> {"}, {"sha": "50d4bdb67f755bfdc15ff68f31e61798129d57c8", "filename": "src/librustc_mir/dataflow/generic/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b4dca282a0bfad265238d04b22f7bdb0d498d74/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4dca282a0bfad265238d04b22f7bdb0d498d74/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Ftests.rs?ref=7b4dca282a0bfad265238d04b22f7bdb0d498d74", "patch": "@@ -276,7 +276,8 @@ fn cursor_seek() {\n     let body = &body;\n     let analysis = MockAnalysis { body };\n \n-    let mut cursor = Results { entry_sets: analysis.mock_entry_sets(), analysis }.into_cursor(body);\n+    let mut cursor =\n+        Results { entry_sets: analysis.mock_entry_sets(), analysis }.into_results_cursor(body);\n \n     // Sanity check: the mock call return effect is unique and actually being applied.\n     let call_terminator_loc = Location { block: BasicBlock::from_usize(2), statement_index: 2 };"}]}