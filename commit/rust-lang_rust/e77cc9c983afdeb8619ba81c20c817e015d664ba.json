{"sha": "e77cc9c983afdeb8619ba81c20c817e015d664ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3N2NjOWM5ODNhZmRlYjg2MTliYTgxYzIwYzgxN2UwMTVkNjY0YmE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-10-03T20:00:09Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-01T18:04:14Z"}, "message": "elaborate `T: 'a` dependencies", "tree": {"sha": "ebd30c630b5a6b889f95c6c1395928a5be05817e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebd30c630b5a6b889f95c6c1395928a5be05817e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e77cc9c983afdeb8619ba81c20c817e015d664ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e77cc9c983afdeb8619ba81c20c817e015d664ba", "html_url": "https://github.com/rust-lang/rust/commit/e77cc9c983afdeb8619ba81c20c817e015d664ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e77cc9c983afdeb8619ba81c20c817e015d664ba/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce340af738909feae304f6617bcef55bbb8b7101", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce340af738909feae304f6617bcef55bbb8b7101", "html_url": "https://github.com/rust-lang/rust/commit/ce340af738909feae304f6617bcef55bbb8b7101"}], "stats": {"total": 232, "additions": 212, "deletions": 20}, "files": [{"sha": "0c5ff3cd2794d664d790f2c93e34d75edf3d2e5e", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 58, "deletions": 20, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/e77cc9c983afdeb8619ba81c20c817e015d664ba/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77cc9c983afdeb8619ba81c20c817e015d664ba/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=e77cc9c983afdeb8619ba81c20c817e015d664ba", "patch": "@@ -1,3 +1,4 @@\n+\n // Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -11,6 +12,7 @@\n use hir::def_id::DefId;\n use ty::subst::{Subst, Substs};\n use ty::{self, Ty, TyCtxt, ToPredicate, ToPolyTraitRef};\n+use ty::outlives::Component;\n use util::common::ErrorReported;\n use util::nodemap::FnvHashSet;\n \n@@ -166,27 +168,63 @@ impl<'cx, 'gcx, 'tcx> Elaborator<'cx, 'gcx, 'tcx> {\n             ty::Predicate::ClosureKind(..) => {\n                 // Nothing to elaborate when waiting for a closure's kind to be inferred.\n             }\n-            ty::Predicate::RegionOutlives(..) |\n-            ty::Predicate::TypeOutlives(..) => {\n-                // Currently, we do not \"elaborate\" predicates like\n-                // `'a : 'b` or `T : 'a`.  We could conceivably do\n-                // more here.  For example,\n-                //\n-                //     &'a int : 'b\n-                //\n-                // implies that\n-                //\n-                //     'a : 'b\n-                //\n-                // and we could get even more if we took WF\n-                // constraints into account. For example,\n-                //\n-                //     &'a &'b int : 'c\n-                //\n-                // implies that\n+\n+            ty::Predicate::RegionOutlives(..) => {\n+                // Nothing to elaborate from `'a: 'b`.\n+            }\n+\n+            ty::Predicate::TypeOutlives(ref data) => {\n+                // We know that `T: 'a` for some type `T`. We can\n+                // often elaborate this. For example, if we know that\n+                // `[U]: 'a`, that implies that `U: 'a`. Similarly, if\n+                // we know `&'a U: 'b`, then we know that `'a: 'b` and\n+                // `U: 'b`.\n                 //\n-                //     'b : 'a\n-                //     'a : 'c\n+                // We can basically ignore bound regions here. So for\n+                // example `for<'c> Foo<'a,'c>: 'b` can be elaborated to\n+                // `'a: 'b`.\n+\n+                // Ignore `for<'a> T: 'a` -- we might in the future\n+                // consider this as evidence that `Foo: 'static`, but\n+                // I'm a bit wary of such constructions and so for now\n+                // I want to be conservative. --nmatsakis\n+                let ty_max = data.skip_binder().0;\n+                let r_min = data.skip_binder().1;\n+                if r_min.is_bound() {\n+                    return;\n+                }\n+\n+                let visited = &mut self.visited;\n+                self.stack.extend(\n+                    tcx.outlives_components(ty_max)\n+                       .into_iter()\n+                       .filter_map(|component| match component {\n+                           Component::Region(r) => if r.is_bound() {\n+                               None\n+                           } else {\n+                               Some(ty::Predicate::RegionOutlives(\n+                                   ty::Binder(ty::OutlivesPredicate(r, r_min))))\n+                           },\n+\n+                           Component::Param(p) => {\n+                               let ty = tcx.mk_param(p.idx, p.name);\n+                               Some(ty::Predicate::TypeOutlives(\n+                                   ty::Binder(ty::OutlivesPredicate(ty, r_min))))\n+                           },\n+\n+                           Component::UnresolvedInferenceVariable(_) => {\n+                               None\n+                           },\n+\n+                           Component::Projection(_) |\n+                           Component::EscapingProjection(_) => {\n+                               // We can probably do more here. This\n+                               // corresponds to a case like `<T as\n+                               // Foo<'a>>::U: 'b`.\n+                               None\n+                           },\n+                       })\n+                       .filter(|p| visited.insert(p)));\n             }\n         }\n     }"}, {"sha": "321359cb96c3dc67a46773fb9fbe0db3552df5fb", "filename": "src/test/compile-fail/issue-18937.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e77cc9c983afdeb8619ba81c20c817e015d664ba/src%2Ftest%2Fcompile-fail%2Fissue-18937.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77cc9c983afdeb8619ba81c20c817e015d664ba/src%2Ftest%2Fcompile-fail%2Fissue-18937.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18937.rs?ref=e77cc9c983afdeb8619ba81c20c817e015d664ba", "patch": "@@ -1,3 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #18937.\n+\n use std::fmt;\n \n #[derive(Debug)]"}, {"sha": "42a2e820d2e9835933d3ac31301d0ac01b0fb107", "filename": "src/test/compile-fail/traits-elaborate-type-region-proj.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e77cc9c983afdeb8619ba81c20c817e015d664ba/src%2Ftest%2Fcompile-fail%2Ftraits-elaborate-type-region-proj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77cc9c983afdeb8619ba81c20c817e015d664ba/src%2Ftest%2Fcompile-fail%2Ftraits-elaborate-type-region-proj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-elaborate-type-region-proj.rs?ref=e77cc9c983afdeb8619ba81c20c817e015d664ba", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+\n+// Test that we elaborate `Type: 'region` constraints and infer various important things.\n+\n+trait Master<'a, T: ?Sized, U> {\n+    fn foo() where T: 'a;\n+}\n+\n+// `U::Item: 'a` does not imply that `U: 'a`\n+impl<'a, U: Iterator> Master<'a, U::Item, U> for () {\n+    fn foo() where U: 'a { }\n+    //~^ ERROR parameter type `V` may not live long enough\n+}\n+\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}, {"sha": "3c11b8bb1ef147b1ce66f954bc41cf73dcb89099", "filename": "src/test/compile-fail/traits-elaborate-type-region-unrelated.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e77cc9c983afdeb8619ba81c20c817e015d664ba/src%2Ftest%2Fcompile-fail%2Ftraits-elaborate-type-region-unrelated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77cc9c983afdeb8619ba81c20c817e015d664ba/src%2Ftest%2Fcompile-fail%2Ftraits-elaborate-type-region-unrelated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-elaborate-type-region-unrelated.rs?ref=e77cc9c983afdeb8619ba81c20c817e015d664ba", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+\n+// Test that we elaborate `Type: 'region` constraints and infer various important things.\n+\n+trait Master<'a, T: ?Sized, U> {\n+    fn foo() where T: 'a;\n+}\n+\n+// `U: 'a` does not imply `V: 'a`\n+impl<'a, U, V> Master<'a, U, V> for () {\n+    fn foo() where V: 'a { }\n+    //~^ ERROR parameter type `V` may not live long enough\n+}\n+\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}, {"sha": "7a24d087b44e2b8c29b277ef173702ee76ba8f4f", "filename": "src/test/run-pass/issue-18937-1.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e77cc9c983afdeb8619ba81c20c817e015d664ba/src%2Ftest%2Frun-pass%2Fissue-18937-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77cc9c983afdeb8619ba81c20c817e015d664ba/src%2Ftest%2Frun-pass%2Fissue-18937-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18937-1.rs?ref=e77cc9c983afdeb8619ba81c20c817e015d664ba", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to type-check this example. In particular,\n+// knowing that `T: 'a` allows us to deduce that `[U]: 'a` (because\n+// when `T=[U]` it implies that `U: 'a`).\n+//\n+// Regr. test for live code we found in the wild when fixing #18937.\n+\n+pub trait Leak<T : ?Sized> {\n+    fn leak<'a>(self) -> &'a T where T: 'a;\n+}\n+\n+impl<U> Leak<[U]> for Vec<U> {\n+    fn leak<'a>(mut self) -> &'a [U] where [U]: 'a {\n+        let r: *mut [U] = &mut self[..];\n+        std::mem::forget(self);\n+        unsafe { &mut *r }\n+    }\n+}\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}, {"sha": "4621c2ca4be28ee98a466d2d16fd672cd171e3ff", "filename": "src/test/run-pass/traits-elaborate-type-region.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e77cc9c983afdeb8619ba81c20c817e015d664ba/src%2Ftest%2Frun-pass%2Ftraits-elaborate-type-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77cc9c983afdeb8619ba81c20c817e015d664ba/src%2Ftest%2Frun-pass%2Ftraits-elaborate-type-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-elaborate-type-region.rs?ref=e77cc9c983afdeb8619ba81c20c817e015d664ba", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+\n+// Test that we elaborate `Type: 'region` constraints and infer various important things.\n+\n+trait Master<'a, T: ?Sized> {\n+    fn foo() where T: 'a;\n+}\n+\n+// [U]: 'a => U: 'a\n+impl<'a, U> Master<'a, [U]> for () {\n+    fn foo() where U: 'a { }\n+}\n+\n+// &'b U: 'a => 'b: 'a, U: 'a\n+impl<'a, 'b, U> Master<'a, &'b U> for () {\n+    fn foo() where 'b: 'a, U: 'a { }\n+}\n+\n+// &'b [U]: 'a => 'b: 'a, U: 'a\n+impl<'a, 'b, U> Master<'a, &'b [U]> for () {\n+    fn foo() where 'b: 'a, U: 'a { }\n+}\n+\n+// Foo<'b>: 'a => 'b: 'a\n+struct Foo<'a> { x: &'a () }\n+impl<'a, 'b> Master<'a, Foo<'b>> for () {\n+    fn foo() where 'b: 'a { }\n+}\n+\n+// Bar<'b, T>: 'a => 'b: 'a, T: 'a\n+struct Bar<'a, T: 'a> { x: &'a T }\n+impl<'a, 'b, T> Master<'a, Bar<'b, T>> for () {\n+    fn foo() where 'b: 'a, T: 'a { }\n+}\n+\n+// fn(T): 'a => T: 'a\n+impl<'a, T> Master<'a, fn(T)> for () {\n+    fn foo() where T: 'a { }\n+}\n+\n+// fn() -> T: 'a => T: 'a\n+impl<'a, T> Master<'a, fn() -> T> for () {\n+    fn foo() where T: 'a { }\n+}\n+\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}]}