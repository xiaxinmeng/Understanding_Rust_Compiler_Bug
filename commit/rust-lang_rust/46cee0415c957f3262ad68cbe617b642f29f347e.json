{"sha": "46cee0415c957f3262ad68cbe617b642f29f347e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2Y2VlMDQxNWM5NTdmMzI2MmFkNjhjYmU2MTdiNjQyZjI5ZjM0N2U=", "commit": {"author": {"name": "darksv", "email": "darek969-12@o2.pl", "date": "2018-09-15T12:35:30Z"}, "committer": {"name": "darksv", "email": "darek969-12@o2.pl", "date": "2018-09-15T12:35:30Z"}, "message": "move reparsing tests", "tree": {"sha": "d87e17ab13142a1a2d60b1d8012c3b09cc7f2815", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d87e17ab13142a1a2d60b1d8012c3b09cc7f2815"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46cee0415c957f3262ad68cbe617b642f29f347e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46cee0415c957f3262ad68cbe617b642f29f347e", "html_url": "https://github.com/rust-lang/rust/commit/46cee0415c957f3262ad68cbe617b642f29f347e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46cee0415c957f3262ad68cbe617b642f29f347e/comments", "author": {"login": "darksv", "id": 6718130, "node_id": "MDQ6VXNlcjY3MTgxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/6718130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darksv", "html_url": "https://github.com/darksv", "followers_url": "https://api.github.com/users/darksv/followers", "following_url": "https://api.github.com/users/darksv/following{/other_user}", "gists_url": "https://api.github.com/users/darksv/gists{/gist_id}", "starred_url": "https://api.github.com/users/darksv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darksv/subscriptions", "organizations_url": "https://api.github.com/users/darksv/orgs", "repos_url": "https://api.github.com/users/darksv/repos", "events_url": "https://api.github.com/users/darksv/events{/privacy}", "received_events_url": "https://api.github.com/users/darksv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "darksv", "id": 6718130, "node_id": "MDQ6VXNlcjY3MTgxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/6718130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darksv", "html_url": "https://github.com/darksv", "followers_url": "https://api.github.com/users/darksv/followers", "following_url": "https://api.github.com/users/darksv/following{/other_user}", "gists_url": "https://api.github.com/users/darksv/gists{/gist_id}", "starred_url": "https://api.github.com/users/darksv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darksv/subscriptions", "organizations_url": "https://api.github.com/users/darksv/orgs", "repos_url": "https://api.github.com/users/darksv/repos", "events_url": "https://api.github.com/users/darksv/events{/privacy}", "received_events_url": "https://api.github.com/users/darksv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16ad5384f0c0427922b2d2d05025412fc8e4addf", "url": "https://api.github.com/repos/rust-lang/rust/commits/16ad5384f0c0427922b2d2d05025412fc8e4addf", "html_url": "https://github.com/rust-lang/rust/commit/16ad5384f0c0427922b2d2d05025412fc8e4addf"}], "stats": {"total": 269, "additions": 140, "deletions": 129}, "files": [{"sha": "886195660035aea9716c2beef9b610b50e78cbc0", "filename": "crates/libsyntax2/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46cee0415c957f3262ad68cbe617b642f29f347e/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cee0415c957f3262ad68cbe617b642f29f347e/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Flib.rs?ref=46cee0415c957f3262ad68cbe617b642f29f347e", "patch": "@@ -27,6 +27,10 @@ extern crate parking_lot;\n extern crate smol_str;\n extern crate text_unit;\n \n+#[cfg(test)]\n+#[macro_use]\n+extern crate test_utils;\n+\n pub mod algo;\n pub mod ast;\n mod lexer;"}, {"sha": "1df2ca0943a94f518906081f8b5a8761d0d2b332", "filename": "crates/libsyntax2/src/reparsing.rs", "status": "modified", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/46cee0415c957f3262ad68cbe617b642f29f347e/crates%2Flibsyntax2%2Fsrc%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cee0415c957f3262ad68cbe617b642f29f347e/crates%2Flibsyntax2%2Fsrc%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Freparsing.rs?ref=46cee0415c957f3262ad68cbe617b642f29f347e", "patch": "@@ -186,3 +186,138 @@ fn merge_errors(\n     }\n     res\n }\n+\n+#[cfg(test)]\n+use super::{File, text_utils, test_utils, utils};\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::{*, utils::dump_tree};\n+\n+    #[test]\n+    fn reparse_test() {\n+        fn do_check(before: &str, replace_with: &str) {\n+            let (range, before) = test_utils::extract_range(before);\n+            let after = text_utils::replace_range(before.clone(), range, replace_with);\n+\n+            let fully_reparsed = File::parse(&after);\n+            let incrementally_reparsed = {\n+                let f = File::parse(&before);\n+                let edit = AtomEdit { delete: range, insert: replace_with.to_string() };\n+                f.incremental_reparse(&edit).expect(\"cannot incrementally reparse\")\n+            };\n+            assert_eq_text!(\n+                &dump_tree(fully_reparsed.syntax()),\n+                &dump_tree(incrementally_reparsed.syntax()),\n+            )\n+        }\n+\n+        do_check(r\"\n+fn foo() {\n+    let x = foo + <|>bar<|>\n+}\n+\", \"baz\");\n+        do_check(r\"\n+fn foo() {\n+    let x = foo<|> + bar<|>\n+}\n+\", \"baz\");\n+        do_check(r\"\n+struct Foo {\n+    f: foo<|><|>\n+}\n+\", \",\\n    g: (),\");\n+        do_check(r\"\n+fn foo {\n+    let;\n+    1 + 1;\n+    <|>92<|>;\n+}\n+\", \"62\");\n+        do_check(r\"\n+mod foo {\n+    fn <|><|>\n+}\n+\", \"bar\");\n+        do_check(r\"\n+trait Foo {\n+    type <|>Foo<|>;\n+}\n+\", \"Output\");\n+        do_check(r\"\n+trait Foo {\n+    type<|> Foo<|>;\n+}\n+\", \"Output\");\n+        do_check(r\"\n+impl IntoIterator<Item=i32> for Foo {\n+    f<|><|>\n+}\n+\", \"n next(\");\n+        do_check(r\"\n+use a::b::{foo,<|>,bar<|>};\n+    \", \"baz\");\n+        do_check(r\"\n+pub enum A {\n+    Foo<|><|>\n+}\n+\", \"\\nBar;\\n\");\n+        do_check(r\"\n+foo!{a, b<|><|> d}\n+\", \", c[3]\");\n+        do_check(r\"\n+fn foo() {\n+    vec![<|><|>]\n+}\n+\", \"123\");\n+        do_check(r\"\n+extern {\n+    fn<|>;<|>\n+}\n+\", \" exit(code: c_int)\");\n+        do_check(r\"<|><|>\n+fn foo() -> i32 {\n+    1\n+}\n+\", \"\\n\\n\\n   \\n\");\n+        do_check(r\"\n+fn foo() -> <|><|> {}\n+\", \"  \\n\");\n+        do_check(r\"\n+fn <|>foo<|>() -> i32 {\n+    1\n+}\n+\", \"bar\");\n+        do_check(r\"\n+fn aa<|><|>bb() {\n+\n+}\n+\", \"foofoo\");\n+        do_check(r\"\n+fn aabb /* <|><|> */ () {\n+\n+}\n+\", \"some comment\");\n+        do_check(r\"\n+fn aabb <|><|> () {\n+\n+}\n+\", \"    \\t\\t\\n\\n\");\n+        do_check(r\"\n+trait foo {\n+// comment <|><|>\n+}\n+\", \"\\n\");\n+        do_check(r\"\n+/// good <|><|>omment\n+mod {\n+}\n+\", \"c\");\n+        do_check(r#\"\n+fn -> &str { \"Hello<|><|>\" }\n+\"#, \", world\");\n+        do_check(r#\"\n+fn -> &str { // \"Hello<|><|>\"\n+\"#, \", world\");\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "5a8879fcedc240eefc175aa7dd24e6d6e5587ab0", "filename": "crates/libsyntax2/tests/test/main.rs", "status": "modified", "additions": 1, "deletions": 129, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/46cee0415c957f3262ad68cbe617b642f29f347e/crates%2Flibsyntax2%2Ftests%2Ftest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cee0415c957f3262ad68cbe617b642f29f347e/crates%2Flibsyntax2%2Ftests%2Ftest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Ftest%2Fmain.rs?ref=46cee0415c957f3262ad68cbe617b642f29f347e", "patch": "@@ -9,9 +9,8 @@ use std::{\n     fmt::Write,\n };\n \n-use test_utils::extract_range;\n use libsyntax2::{\n-    File, AtomEdit,\n+    File,\n     utils::{dump_tree, check_fuzz_invariants},\n };\n \n@@ -23,133 +22,6 @@ fn lexer_tests() {\n     })\n }\n \n-#[test]\n-fn reparse_test() {\n-    fn do_check(before: &str, replace_with: &str) {\n-        let (range, before) = extract_range(before);\n-        let after = libsyntax2::text_utils::replace_range(before.clone(), range, replace_with);\n-\n-        let fully_reparsed = File::parse(&after);\n-        let incrementally_reparsed = {\n-            let f = File::parse(&before);\n-            let edit = AtomEdit { delete: range, insert: replace_with.to_string() };\n-            f.incremental_reparse(&edit).expect(\"cannot incrementally reparse\")\n-        };\n-        assert_eq_text!(\n-            &dump_tree(fully_reparsed.syntax()),\n-            &dump_tree(incrementally_reparsed.syntax()),\n-        )\n-    }\n-\n-    do_check(r\"\n-fn foo() {\n-    let x = foo + <|>bar<|>\n-}\n-\", \"baz\");\n-    do_check(r\"\n-fn foo() {\n-    let x = foo<|> + bar<|>\n-}\n-\", \"baz\");\n-    do_check(r\"\n-struct Foo {\n-    f: foo<|><|>\n-}\n-\", \",\\n    g: (),\");\n-    do_check(r\"\n-fn foo {\n-    let;\n-    1 + 1;\n-    <|>92<|>;\n-}\n-\", \"62\");\n-    do_check(r\"\n-mod foo {\n-    fn <|><|>\n-}\n-\", \"bar\");\n-    do_check(r\"\n-trait Foo {\n-    type <|>Foo<|>;\n-}\n-\", \"Output\");\n-    do_check(r\"\n-trait Foo {\n-    type<|> Foo<|>;\n-}\n-\", \"Output\");\n-    do_check(r\"\n-impl IntoIterator<Item=i32> for Foo {\n-    f<|><|>\n-}\n-\", \"n next(\");\n-    do_check(r\"\n-use a::b::{foo,<|>,bar<|>};\n-    \", \"baz\");\n-    do_check(r\"\n-pub enum A {\n-    Foo<|><|>\n-}\n-\", \"\\nBar;\\n\");\n-    do_check(r\"\n-foo!{a, b<|><|> d}\n-\", \", c[3]\");\n-    do_check(r\"\n-fn foo() {\n-    vec![<|><|>]\n-}\n-\", \"123\");\n-    do_check(r\"\n-extern {\n-    fn<|>;<|>\n-}\n-\", \" exit(code: c_int)\");\n-do_check(r\"<|><|>\n-fn foo() -> i32 {\n-    1\n-}\n-\", \"\\n\\n\\n   \\n\");\n-    do_check(r\"\n-fn foo() -> <|><|> {}\n-\", \"  \\n\");\n-    do_check(r\"\n-fn <|>foo<|>() -> i32 {\n-    1\n-}\n-\", \"bar\");\n-do_check(r\"\n-fn aa<|><|>bb() {\n-\n-}\n-\", \"foofoo\");\n-    do_check(r\"\n-fn aabb /* <|><|> */ () {\n-\n-}\n-\", \"some comment\");\n-    do_check(r\"\n-fn aabb <|><|> () {\n-\n-}\n-\", \"    \\t\\t\\n\\n\");\n-    do_check(r\"\n-trait foo {\n-// comment <|><|>\n-}\n-\", \"\\n\");\n-    do_check(r\"\n-/// good <|><|>omment\n-mod {\n-}\n-\", \"c\");\n-    do_check(r#\"\n-fn -> &str { \"Hello<|><|>\" }\n-\"#, \", world\");\n-    do_check(r#\"\n-fn -> &str { // \"Hello<|><|>\"\n-\"#, \", world\");\n-}\n-\n #[test]\n fn parser_tests() {\n     dir_tests(&[\"parser/inline\", \"parser/ok\", \"parser/err\"], |text| {"}]}