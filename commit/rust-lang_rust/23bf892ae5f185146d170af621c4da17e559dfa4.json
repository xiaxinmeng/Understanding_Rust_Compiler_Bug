{"sha": "23bf892ae5f185146d170af621c4da17e559dfa4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYmY4OTJhZTVmMTg1MTQ2ZDE3MGFmNjIxYzRkYTE3ZTU1OWRmYTQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-27T06:21:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-13T21:24:10Z"}, "message": "core::rt: Improve docs", "tree": {"sha": "aa39fff3c55e40858fd8fac4eaf73ea72d70ddc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa39fff3c55e40858fd8fac4eaf73ea72d70ddc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23bf892ae5f185146d170af621c4da17e559dfa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23bf892ae5f185146d170af621c4da17e559dfa4", "html_url": "https://github.com/rust-lang/rust/commit/23bf892ae5f185146d170af621c4da17e559dfa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23bf892ae5f185146d170af621c4da17e559dfa4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93ca5ebccb4ff6761fc61b31f7a9e1e6ffc866df", "url": "https://api.github.com/repos/rust-lang/rust/commits/93ca5ebccb4ff6761fc61b31f7a9e1e6ffc866df", "html_url": "https://github.com/rust-lang/rust/commit/93ca5ebccb4ff6761fc61b31f7a9e1e6ffc866df"}], "stats": {"total": 65, "additions": 57, "deletions": 8}, "files": [{"sha": "c332e48489a72cc4863449a99d481d9d71b5cc34", "filename": "src/libcore/rt/mod.rs", "status": "modified", "additions": 57, "deletions": 8, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/23bf892ae5f185146d170af621c4da17e559dfa4/src%2Flibcore%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23bf892ae5f185146d170af621c4da17e559dfa4/src%2Flibcore%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fmod.rs?ref=23bf892ae5f185146d170af621c4da17e559dfa4", "patch": "@@ -8,12 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/*! The Rust runtime, including the scheduler and I/O interface\n+/*! Rust runtime services, including the task scheduler and I/O interface\n \n # XXX\n \n * Unsafe uses of borrowed pointers should just use unsafe pointers\n-* Unwinding is not wired up correctly\n \n */\n \n@@ -22,29 +21,76 @@\n \n use libc::c_char;\n \n+/// The Scheduler and Task types, and thread-local access thereof\n #[path = \"sched/mod.rs\"]\n mod sched;\n-pub mod rtio;\n-pub mod uvll;\n-mod uvio;\n+\n+/// Synchronous I/O\n+#[path = \"io/mod.rs\"]\n+pub mod io;\n+\n+/// Thread-local implementations of language-critical runtime features like @\n+pub mod local_services;\n+\n+/// The EventLoop and internal synchronous I/O interface, dynamically\n+/// overridable so that it's primary implementation on libuv can\n+/// live outside of core.\n+mod rtio;\n+\n+/// libuv\n #[path = \"uv/mod.rs\"]\n mod uv;\n-#[path = \"io/mod.rs\"]\n-mod io;\n+\n+/// The implementation of `rtio` for libuv\n+mod uvio;\n+\n+/// C bindings to libuv\n+pub mod uvll;\n+\n+\n // FIXME #5248: The import in `sched` doesn't resolve unless this is pub!\n+/// Bindings to pthread/windows thread-local storage\n pub mod thread_local_storage;\n+\n+/// A parallel work-stealing queue\n mod work_queue;\n+\n+/// Stack segments and their cacheing\n mod stack;\n+\n+/// CPU context swapping\n mod context;\n+\n+/// Bindings to system threading libraries\n mod thread;\n+\n+/// The runtime configuration, read from environment variables\n pub mod env;\n-pub mod local_services;\n+\n+/// The local, managed heap\n mod local_heap;\n \n /// Tools for testing the runtime\n #[cfg(test)]\n pub mod test;\n \n+/// Set up a default runtime configuration, given compiler-supplied arguments.\n+///\n+/// This is invoked by the `start` _language item_ (unstable::lang) to\n+/// run a Rust executable.\n+///\n+/// # Arguments\n+///\n+/// * `main` - A C-abi function that takes no arguments and returns `c_void`.\n+///   It is a wrapper around the user-defined `main` function, and will be run\n+///   in a task.\n+/// * `argc` & `argv` - The argument vector. On Unix this information is used\n+///   by os::args.\n+/// * `crate_map` - Runtime information about the executing crate, mostly for logging\n+///\n+/// # Return value\n+///\n+/// The return value is used as the process return code. 0 on success, 101 on error.\n pub fn start(main: *u8, _argc: int, _argv: **c_char, _crate_map: *u8) -> int {\n \n     use self::sched::{Scheduler, Task};\n@@ -79,6 +125,8 @@ pub fn start(main: *u8, _argc: int, _argv: **c_char, _crate_map: *u8) -> int {\n \n /// Possible contexts in which Rust code may be executing.\n /// Different runtime services are available depending on context.\n+/// Mostly used for determining if we're using the new scheduler\n+/// or the old scheduler.\n #[deriving(Eq)]\n pub enum RuntimeContext {\n     // Only the exchange heap is available\n@@ -91,6 +139,7 @@ pub enum RuntimeContext {\n     OldTaskContext\n }\n \n+/// Determine the current RuntimeContext\n pub fn context() -> RuntimeContext {\n \n     use task::rt::rust_task;"}]}