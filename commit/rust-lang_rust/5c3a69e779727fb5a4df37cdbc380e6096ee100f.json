{"sha": "5c3a69e779727fb5a4df37cdbc380e6096ee100f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjM2E2OWU3Nzk3MjdmYjVhNGRmMzdjZGJjMzgwZTYwOTZlZTEwMGY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-06T23:11:47Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-06T23:11:47Z"}, "message": "ICH: Add test case for enum constructor expressions.", "tree": {"sha": "4267ba664521d1b569ffe9bbd6b1a8b0bded9639", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4267ba664521d1b569ffe9bbd6b1a8b0bded9639"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c3a69e779727fb5a4df37cdbc380e6096ee100f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c3a69e779727fb5a4df37cdbc380e6096ee100f", "html_url": "https://github.com/rust-lang/rust/commit/5c3a69e779727fb5a4df37cdbc380e6096ee100f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c3a69e779727fb5a4df37cdbc380e6096ee100f/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "277675cb0013352883942c563cda1e8cd240866b", "url": "https://api.github.com/repos/rust-lang/rust/commits/277675cb0013352883942c563cda1e8cd240866b", "html_url": "https://github.com/rust-lang/rust/commit/277675cb0013352883942c563cda1e8cd240866b"}], "stats": {"total": 387, "additions": 387, "deletions": 0}, "files": [{"sha": "7f991b30fc4924d98f91b1de001333d5834c8c5f", "filename": "src/test/incremental/hashes/enum_constructors.rs", "status": "added", "additions": 387, "deletions": 0, "changes": 387, "blob_url": "https://github.com/rust-lang/rust/blob/5c3a69e779727fb5a4df37cdbc380e6096ee100f/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3a69e779727fb5a4df37cdbc380e6096ee100f/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs?ref=5c3a69e779727fb5a4df37cdbc380e6096ee100f", "patch": "@@ -0,0 +1,387 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for struct constructor expressions.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+\n+enum Enum {\n+    Struct {\n+        x: i32,\n+        y: i64,\n+        z: i16,\n+    },\n+    Tuple(i32, i64, i16)\n+}\n+\n+// Change field value (struct-like) -----------------------------------------\n+#[cfg(cfail1)]\n+fn change_field_value_struct_like() -> Enum {\n+    Enum::Struct {\n+        x: 0,\n+        y: 1,\n+        z: 2,\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_field_value_struct_like() -> Enum {\n+    Enum::Struct {\n+        x: 0,\n+        y: 2,\n+        z: 2,\n+    }\n+}\n+\n+\n+\n+// Change field order (struct-like) -----------------------------------------\n+#[cfg(cfail1)]\n+fn change_field_order_struct_like() -> Enum {\n+    Enum::Struct {\n+        x: 3,\n+        y: 4,\n+        z: 5,\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_field_order_struct_like() -> Enum {\n+    Enum::Struct {\n+        y: 4,\n+        x: 3,\n+        z: 5,\n+    }\n+}\n+\n+\n+enum Enum2 {\n+    Struct {\n+        x: i8,\n+        y: i8,\n+        z: i8,\n+    },\n+    Struct2 {\n+        x: i8,\n+        y: i8,\n+        z: i8,\n+    },\n+    Tuple(u16, u16, u16),\n+    Tuple2(u64, u64, u64),\n+}\n+\n+// Change constructor path (struct-like) ------------------------------------\n+#[cfg(cfail1)]\n+fn change_constructor_path_struct_like() {\n+    let _ = Enum::Struct {\n+        x: 0,\n+        y: 1,\n+        z: 2,\n+    };\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_constructor_path_struct_like() {\n+    let _ = Enum2::Struct {\n+        x: 0,\n+        y: 1,\n+        z: 2,\n+    };\n+}\n+\n+\n+\n+// Change variant (regular struct) ------------------------------------\n+#[cfg(cfail1)]\n+fn change_constructor_variant_struct_like() {\n+    let _ = Enum2::Struct {\n+        x: 0,\n+        y: 1,\n+        z: 2,\n+    };\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_constructor_variant_struct_like() {\n+    let _ = Enum2::Struct2 {\n+        x: 0,\n+        y: 1,\n+        z: 2,\n+    };\n+}\n+\n+\n+// Change constructor path indirectly (struct-like) -------------------------\n+mod change_constructor_path_indirectly_struct_like {\n+    #[cfg(cfail1)]\n+    use super::Enum as TheEnum;\n+    #[cfg(not(cfail1))]\n+    use super::Enum2 as TheEnum;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn function() -> TheEnum {\n+        TheEnum::Struct {\n+            x: 0,\n+            y: 1,\n+            z: 2,\n+        }\n+    }\n+}\n+\n+\n+// Change constructor variant indirectly (struct-like) ---------------------------\n+mod change_constructor_variant_indirectly_struct_like {\n+    use super::Enum2;\n+    #[cfg(cfail1)]\n+    use super::Enum2::Struct as Variant;\n+    #[cfg(not(cfail1))]\n+    use super::Enum2::Struct2 as Variant;\n+\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn function() -> Enum2 {\n+        Variant {\n+            x: 0,\n+            y: 1,\n+            z: 2,\n+        }\n+    }\n+}\n+\n+\n+// Change field value (tuple-like) -------------------------------------------\n+#[cfg(cfail1)]\n+fn change_field_value_tuple_like() -> Enum {\n+    Enum::Tuple(0, 1, 2)\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_field_value_tuple_like() -> Enum {\n+    Enum::Tuple(0, 1, 3)\n+}\n+\n+\n+\n+// Change constructor path (tuple-like) --------------------------------------\n+#[cfg(cfail1)]\n+fn change_constructor_path_tuple_like() {\n+    let _ = Enum::Tuple(0, 1, 2);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_constructor_path_tuple_like() {\n+    let _ = Enum2::Tuple(0, 1, 2);\n+}\n+\n+\n+\n+// Change constructor variant (tuple-like) --------------------------------------\n+#[cfg(cfail1)]\n+fn change_constructor_variant_tuple_like() {\n+    let _ = Enum2::Tuple(0, 1, 2);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_constructor_variant_tuple_like() {\n+    let _ = Enum2::Tuple2(0, 1, 2);\n+}\n+\n+\n+// Change constructor path indirectly (tuple-like) ---------------------------\n+mod change_constructor_path_indirectly_tuple_like {\n+    #[cfg(cfail1)]\n+    use super::Enum as TheEnum;\n+    #[cfg(not(cfail1))]\n+    use super::Enum2 as TheEnum;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn function() -> TheEnum {\n+        TheEnum::Tuple(0, 1, 2)\n+    }\n+}\n+\n+\n+\n+// Change constructor variant indirectly (tuple-like) ---------------------------\n+mod change_constructor_variant_indirectly_tuple_like {\n+    use super::Enum2;\n+    #[cfg(cfail1)]\n+    use super::Enum2::Tuple as Variant;\n+    #[cfg(not(cfail1))]\n+    use super::Enum2::Tuple2 as Variant;\n+\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn function() -> Enum2 {\n+        Variant(0, 1, 2)\n+    }\n+}\n+\n+\n+enum Clike {\n+    A,\n+    B,\n+    C\n+}\n+\n+enum Clike2 {\n+    B,\n+    C,\n+    D\n+}\n+\n+// Change constructor path (C-like) --------------------------------------\n+#[cfg(cfail1)]\n+fn change_constructor_path_c_like() {\n+    let _ = Clike::B;\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_constructor_path_c_like() {\n+    let _ = Clike2::B;\n+}\n+\n+\n+\n+// Change constructor variant (C-like) --------------------------------------\n+#[cfg(cfail1)]\n+fn change_constructor_variant_c_like() {\n+    let _ = Clike::A;\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_constructor_variant_c_like() {\n+    let _ = Clike::C;\n+}\n+\n+\n+// Change constructor path indirectly (C-like) ---------------------------\n+mod change_constructor_path_indirectly_c_like {\n+    #[cfg(cfail1)]\n+    use super::Clike as TheEnum;\n+    #[cfg(not(cfail1))]\n+    use super::Clike2 as TheEnum;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn function() -> TheEnum {\n+        TheEnum::B\n+    }\n+}\n+\n+\n+\n+// Change constructor variant indirectly (C-like) ---------------------------\n+mod change_constructor_variant_indirectly_c_like {\n+    use super::Clike;\n+    #[cfg(cfail1)]\n+    use super::Clike::A as Variant;\n+    #[cfg(not(cfail1))]\n+    use super::Clike::B as Variant;\n+\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn function() -> Clike {\n+        Variant\n+    }\n+}"}]}