{"sha": "7112fc8cd1d42bc660f60cbae7beb86cfa81936c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMTJmYzhjZDFkNDJiYzY2MGY2MGNiYWU3YmViODZjZmE4MTkzNmM=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-11-19T09:23:50Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-11-19T09:23:50Z"}, "message": "Handle Goto, Panic, and If terminators properly.", "tree": {"sha": "914ed1f3834afa93d9d3c3db328d38e474a38b3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/914ed1f3834afa93d9d3c3db328d38e474a38b3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7112fc8cd1d42bc660f60cbae7beb86cfa81936c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7112fc8cd1d42bc660f60cbae7beb86cfa81936c", "html_url": "https://github.com/rust-lang/rust/commit/7112fc8cd1d42bc660f60cbae7beb86cfa81936c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7112fc8cd1d42bc660f60cbae7beb86cfa81936c/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c37b2bba055cabca0591f4e8ebbe7168c273ea14", "url": "https://api.github.com/repos/rust-lang/rust/commits/c37b2bba055cabca0591f4e8ebbe7168c273ea14", "html_url": "https://github.com/rust-lang/rust/commit/c37b2bba055cabca0591f4e8ebbe7168c273ea14"}], "stats": {"total": 72, "additions": 55, "deletions": 17}, "files": [{"sha": "47b1ab252a42273a587261da2a9bdbed7f3385db", "filename": "src/interpreter.rs", "status": "modified", "additions": 45, "deletions": 17, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/7112fc8cd1d42bc660f60cbae7beb86cfa81936c/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7112fc8cd1d42bc660f60cbae7beb86cfa81936c/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=7112fc8cd1d42bc660f60cbae7beb86cfa81936c", "patch": "@@ -34,35 +34,63 @@ impl Interpreter {\n         }\n     }\n \n-    fn call(&mut self, mir: &Mir, _args: &[Value]) -> Value {\n+    fn push_stack_frame(&mut self, mir: &Mir, _args: &[Value]) {\n         self.call_stack.push(Frame {\n             offset: self.value_stack.len(),\n             num_args: mir.arg_decls.len(),\n             num_vars: mir.var_decls.len(),\n             num_temps: mir.temp_decls.len(),\n         });\n \n-        {\n-            let frame = self.call_stack.last().unwrap();\n-            let frame_size = 1 + frame.num_args + frame.num_vars + frame.num_temps;\n-            self.value_stack.extend(iter::repeat(Value::Uninit).take(frame_size));\n-        }\n+        let frame = self.call_stack.last().unwrap();\n+        let frame_size = 1 + frame.num_args + frame.num_vars + frame.num_temps;\n+        self.value_stack.extend(iter::repeat(Value::Uninit).take(frame_size));\n+\n+        // TODO(tsion): Write args into value_stack.\n+    }\n+\n+    fn call(&mut self, mir: &Mir, args: &[Value]) -> Value {\n+        self.push_stack_frame(mir, args);\n+        let mut block = mir::START_BLOCK;\n+\n+        loop {\n+            use rustc_mir::repr::Terminator::*;\n+\n+            let block_data = mir.basic_block_data(block);\n+\n+            for stmt in &block_data.statements {\n+                use rustc_mir::repr::StatementKind::*;\n \n-        let start_block = mir.basic_block_data(mir::START_BLOCK);\n+                match stmt.kind {\n+                    Assign(ref lvalue, ref rvalue) => {\n+                        let index = self.eval_lvalue(lvalue);\n+                        let value = self.eval_rvalue(rvalue);\n+                        self.value_stack[index] = value;\n+                    }\n+\n+                    Drop(_kind, ref _lv) => {\n+                        // TODO\n+                    },\n+                }\n+            }\n \n-        for stmt in &start_block.statements {\n-            use rustc_mir::repr::StatementKind::*;\n+            println!(\"{:?}\", block_data.terminator);\n+            match block_data.terminator {\n+                Goto { target } => block = target,\n \n-            match stmt.kind {\n-                Assign(ref lvalue, ref rvalue) => {\n-                    let index = self.eval_lvalue(lvalue);\n-                    let value = self.eval_rvalue(rvalue);\n-                    self.value_stack[index] = value;\n+                Panic { target: _target } => unimplemented!(),\n+\n+                If { ref cond, targets } => {\n+                    match self.eval_operand(&cond) {\n+                        Value::Bool(true) => block = targets[0],\n+                        Value::Bool(false) => block = targets[1],\n+                        cond_val => panic!(\"Non-boolean `if` condition value: {:?}\", cond_val),\n+                    }\n                 }\n \n-                Drop(_kind, ref _lv) => {\n-                    // TODO\n-                },\n+                Return => break,\n+\n+                _ => unimplemented!(),\n             }\n         }\n "}, {"sha": "ceb82466ea69c1c20c1b58be3bb6af181f406ac4", "filename": "test/basic.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7112fc8cd1d42bc660f60cbae7beb86cfa81936c/test%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7112fc8cd1d42bc660f60cbae7beb86cfa81936c/test%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fbasic.rs?ref=7112fc8cd1d42bc660f60cbae7beb86cfa81936c", "patch": "@@ -28,4 +28,14 @@ fn arith() -> i32 {\n     3*3 + 4*4\n }\n \n+#[miri_run(expected = \"Int(0)\")]\n+fn if_false() -> i32 {\n+    if false { 1 } else { 0 }\n+}\n+\n+#[miri_run(expected = \"Int(1)\")]\n+fn if_true() -> i32 {\n+    if true { 1 } else { 0 }\n+}\n+\n fn main() {}"}]}