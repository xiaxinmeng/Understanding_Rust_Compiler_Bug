{"sha": "faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZWZjODNhN2ExY2EzMWM0ZjMyZmVjYTRmOGIwYjBiOTliOTgzMWI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-10-20T17:26:24Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-10-23T21:14:50Z"}, "message": "Feature gate extern prelude additions from `extern crate` items\n\nFix rustdoc and fulldeps tests", "tree": {"sha": "c648a98d9efc0643a482656434d537e29f99af62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c648a98d9efc0643a482656434d537e29f99af62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b", "html_url": "https://github.com/rust-lang/rust/commit/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f625ac48dc3b834c35796496c600a96e053227e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f625ac48dc3b834c35796496c600a96e053227e", "html_url": "https://github.com/rust-lang/rust/commit/0f625ac48dc3b834c35796496c600a96e053227e"}], "stats": {"total": 152, "additions": 143, "deletions": 9}, "files": [{"sha": "2c21067bd58c8881debec221bacd46ac150e3a76", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b", "patch": "@@ -58,6 +58,7 @@ use syntax::ast::{self, Name, NodeId, Ident, FloatTy, IntTy, UintTy};\n use syntax::ext::base::SyntaxExtension;\n use syntax::ext::base::Determinacy::{self, Determined, Undetermined};\n use syntax::ext::base::MacroKind;\n+use syntax::feature_gate::{emit_feature_err, GateIssue};\n use syntax::symbol::{Symbol, keywords};\n use syntax::util::lev_distance::find_best_match_for_name;\n \n@@ -1971,7 +1972,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n \n         if !module.no_implicit_prelude {\n             if ns == TypeNS {\n-                if let Some(binding) = self.extern_prelude_get(ident, !record_used) {\n+                if let Some(binding) = self.extern_prelude_get(ident, !record_used, false) {\n                     return Some(LexicalScopeBinding::Item(binding));\n                 }\n             }\n@@ -4820,10 +4821,17 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         self.name_already_seen.insert(name, span);\n     }\n \n-    fn extern_prelude_get(&mut self, ident: Ident, speculative: bool)\n+    fn extern_prelude_get(&mut self, ident: Ident, speculative: bool, skip_feature_gate: bool)\n                           -> Option<&'a NameBinding<'a>> {\n         self.extern_prelude.get(&ident.modern()).cloned().and_then(|entry| {\n             if let Some(binding) = entry.extern_crate_item {\n+                if !speculative && !skip_feature_gate && entry.introduced_by_item &&\n+                   !self.session.features_untracked().extern_crate_item_prelude {\n+                    emit_feature_err(&self.session.parse_sess, \"extern_crate_item_prelude\",\n+                                     ident.span, GateIssue::Language,\n+                                     \"use of extern prelude names introduced \\\n+                                      with `extern crate` items is unstable\");\n+                }\n                 Some(binding)\n             } else {\n                 let crate_id = if !speculative {"}, {"sha": "3345e01a929c773404cb4cf3803afb7a8f756619", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b", "patch": "@@ -693,7 +693,8 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 WhereToResolve::ExternPrelude => {\n                     let mut result = Err(Determinacy::Determined);\n                     if use_prelude {\n-                        if let Some(binding) = self.extern_prelude_get(ident, !record_used) {\n+                        if let Some(binding) = self.extern_prelude_get(ident, !record_used,\n+                                                                       innermost_result.is_some()) {\n                             result = Ok((binding, Flags::PRELUDE, Flags::empty()));\n                         }\n                     }"}, {"sha": "6c73f1bd0f8c5af59f96d582dc1a7a4f7d6b998e", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b", "patch": "@@ -222,7 +222,7 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n                     ns == TypeNS &&\n                     !ident.is_path_segment_keyword()\n                 {\n-                    if let Some(binding) = self.extern_prelude_get(ident, !record_used) {\n+                    if let Some(binding) = self.extern_prelude_get(ident, !record_used, false) {\n                         let module = self.get_module(binding.def().def_id());\n                         self.populate_module_if_necessary(module);\n                         return Ok(binding);\n@@ -742,7 +742,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         for ((span, _, ns), results) in uniform_paths_canaries {\n             let name = results.name;\n             let external_crate = if ns == TypeNS {\n-                self.extern_prelude_get(Ident::with_empty_ctxt(name), true)\n+                self.extern_prelude_get(Ident::with_empty_ctxt(name), true, false)\n                     .map(|binding| binding.def())\n             } else {\n                 None\n@@ -1023,6 +1023,13 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                             Some(this.dummy_binding);\n                     }\n                 }\n+                if record_used && ns == TypeNS {\n+                    if let ModuleOrUniformRoot::UniformRoot(..) = module {\n+                        // Make sure single-segment import is resolved non-speculatively\n+                        // at least once to report the feature error.\n+                        this.extern_prelude_get(ident, false, false);\n+                    }\n+                }\n             }\n         });\n "}, {"sha": "8f9c3fa4b7f205a7cba10e0b0ff67b3e18356832", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b", "patch": "@@ -476,7 +476,9 @@ pub fn run_core(search_paths: SearchPaths,\n             trait_map: resolver.trait_map.clone(),\n             maybe_unused_trait_imports: resolver.maybe_unused_trait_imports.clone(),\n             maybe_unused_extern_crates: resolver.maybe_unused_extern_crates.clone(),\n-            extern_prelude: resolver.extern_prelude.clone(),\n+            extern_prelude: resolver.extern_prelude.iter().map(|(ident, entry)| {\n+                (ident.name, entry.introduced_by_item)\n+            }).collect(),\n         };\n         let analysis = ty::CrateAnalysis {\n             access_levels: Lrc::new(AccessLevels::default()),"}, {"sha": "2cd4fd92bc81e97c9000d617217ce9219fb1575e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b", "patch": "@@ -501,6 +501,9 @@ declare_features! (\n \n     // Allows `const _: TYPE = VALUE`\n     (active, underscore_const_names, \"1.31.0\", Some(54912), None),\n+\n+    // `extern crate foo as bar;` puts `bar` into extern prelude.\n+    (active, extern_crate_item_prelude, \"1.31.0\", Some(54658), None),\n );\n \n declare_features! ("}, {"sha": "e320ad9713542961e4acd73c72741b555e626a72", "filename": "src/test/ui-fulldeps/proc-macro/extern-prelude-extern-crate-proc-macro.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fextern-prelude-extern-crate-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fextern-prelude-extern-crate-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fextern-prelude-extern-crate-proc-macro.rs?ref=faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b", "patch": "@@ -1,6 +1,8 @@\n // compile-pass\n // edition:2018\n \n+#![feature(extern_crate_item_prelude)]\n+\n extern crate proc_macro;\n use proc_macro::TokenStream; // OK\n "}, {"sha": "59ca668d4852553736fd0879fa9f54394204748c", "filename": "src/test/ui-fulldeps/resolve-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr?ref=faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b", "patch": "@@ -20,7 +20,7 @@ error: cannot find derive macro `attr_proc_macra` in this scope\n   --> $DIR/resolve-error.rs:54:10\n    |\n LL | #[derive(attr_proc_macra)]\n-   |          ^^^^^^^^^^^^^^^\n+   |          ^^^^^^^^^^^^^^^ help: try: `attr_proc_macro`\n \n error: cannot find macro `FooWithLongNama!` in this scope\n   --> $DIR/resolve-error.rs:59:5"}, {"sha": "eb7c52c3d0f322e433e316b2b96b1c76849bace4", "filename": "src/test/ui/feature-gates/feature-gate-extern_crate_item_prelude.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_item_prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_item_prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_item_prelude.rs?ref=faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b", "patch": "@@ -0,0 +1,39 @@\n+// edition:2018\n+\n+#![feature(alloc)]\n+\n+extern crate alloc;\n+\n+mod in_scope {\n+    fn check() {\n+        let v = alloc::vec![0];\n+        //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n+        type A = alloc::boxed::Box<u8>;\n+        //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n+    }\n+}\n+\n+mod absolute {\n+    fn check() {\n+        let v = ::alloc::vec![0];\n+        //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n+        type A = ::alloc::boxed::Box<u8>;\n+        //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n+    }\n+}\n+\n+mod import_in_scope {\n+    use alloc;\n+    //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n+    use alloc::boxed;\n+    //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n+}\n+\n+mod import_absolute {\n+    use ::alloc;\n+    //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n+    use ::alloc::boxed;\n+    //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n+}\n+\n+fn main() {}"}, {"sha": "4dec8a35bcab1dc7de76dbaed1a193c1fd4fdeee", "filename": "src/test/ui/feature-gates/feature-gate-extern_crate_item_prelude.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_item_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_item_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_item_prelude.stderr?ref=faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b", "patch": "@@ -0,0 +1,67 @@\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+  --> $DIR/feature-gate-extern_crate_item_prelude.rs:26:9\n+   |\n+LL |     use alloc;\n+   |         ^^^^^\n+   |\n+   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n+\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+  --> $DIR/feature-gate-extern_crate_item_prelude.rs:28:9\n+   |\n+LL |     use alloc::boxed;\n+   |         ^^^^^\n+   |\n+   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n+\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+  --> $DIR/feature-gate-extern_crate_item_prelude.rs:33:11\n+   |\n+LL |     use ::alloc;\n+   |           ^^^^^\n+   |\n+   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n+\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+  --> $DIR/feature-gate-extern_crate_item_prelude.rs:35:11\n+   |\n+LL |     use ::alloc::boxed;\n+   |           ^^^^^\n+   |\n+   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n+\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+  --> $DIR/feature-gate-extern_crate_item_prelude.rs:9:17\n+   |\n+LL |         let v = alloc::vec![0];\n+   |                 ^^^^^\n+   |\n+   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n+\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+  --> $DIR/feature-gate-extern_crate_item_prelude.rs:11:18\n+   |\n+LL |         type A = alloc::boxed::Box<u8>;\n+   |                  ^^^^^\n+   |\n+   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n+\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+  --> $DIR/feature-gate-extern_crate_item_prelude.rs:18:19\n+   |\n+LL |         let v = ::alloc::vec![0];\n+   |                   ^^^^^\n+   |\n+   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n+\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+  --> $DIR/feature-gate-extern_crate_item_prelude.rs:20:20\n+   |\n+LL |         type A = ::alloc::boxed::Box<u8>;\n+   |                    ^^^^^\n+   |\n+   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "c48a65798b6c13bdc71345a6c291101206813a31", "filename": "src/test/ui/imports/extern-prelude-extern-crate-cfg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-cfg.rs?ref=faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b", "patch": "@@ -1,6 +1,7 @@\n // compile-pass\n // compile-flags:--cfg my_feature\n \n+#![feature(extern_crate_item_prelude)]\n #![no_std]\n \n #[cfg(my_feature)]"}, {"sha": "8c147dfd04a3c7b6173393f9234760550a17b42b", "filename": "src/test/ui/imports/extern-prelude-extern-crate-pass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-pass.rs?ref=faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b", "patch": "@@ -1,6 +1,8 @@\n // compile-pass\n // aux-build:two_macros.rs\n \n+#![feature(extern_crate_item_prelude)]\n+\n extern crate two_macros;\n \n mod m {"}, {"sha": "732f1c4de2fb351aab488b7d157786a376a03368", "filename": "src/test/ui/imports/extern-prelude-extern-crate-restricted-shadowing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs?ref=faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b", "patch": "@@ -1,5 +1,7 @@\n // aux-build:two_macros.rs\n \n+#![feature(extern_crate_item_prelude)]\n+\n macro_rules! define_vec {\n     () => {\n         extern crate std as Vec;"}, {"sha": "6c832e70e49a75396e2c0bdec13a58b9a34c86a9", "filename": "src/test/ui/imports/extern-prelude-extern-crate-restricted-shadowing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr?ref=faefc83a7a1ca31c4f32feca4f8b0b0b99b9831b", "patch": "@@ -1,11 +1,11 @@\n error[E0659]: `Vec` is ambiguous\n-  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:13:9\n+  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:15:9\n    |\n LL |         Vec::panic!(); //~ ERROR `Vec` is ambiguous\n    |         ^^^ ambiguous name\n    |\n note: `Vec` could refer to the name defined here\n-  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:5:9\n+  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:7:9\n    |\n LL |         extern crate std as Vec;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^"}]}