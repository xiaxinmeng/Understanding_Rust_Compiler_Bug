{"sha": "90130549f4d82e5d269b40542ee21866a8d4dcc2", "node_id": "C_kwDOAAsO6NoAKDkwMTMwNTQ5ZjRkODJlNWQyNjliNDA1NDJlZTIxODY2YThkNGRjYzI", "commit": {"author": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-04-08T10:35:29Z"}, "committer": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-04-08T10:35:29Z"}, "message": "Windows: Use a pipe relay for chaining pipes", "tree": {"sha": "74807104e7662e65ca2d3b0258531852398170dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74807104e7662e65ca2d3b0258531852398170dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90130549f4d82e5d269b40542ee21866a8d4dcc2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmJQD/EACgkQcTRy8vRW\nJ95FzhAAtlIK+ollHJF//igoXIaoih3B8L/rrEYdTnUfxHJ1I3IBFFUoHi5dyf+d\nQtV2bjt2NE0o613yTICmc3SPNwGCwrAj5cdSitDEuYpZrGIyq8dP5pNoYd4afboE\nknKE/jMUHbSN7VLG3m+o/7zWH3Mbwkgd2afmkoj9e5s99oeB7gv6/aHD2YGc/h9r\nvWEQEPca80aNW2A3ayoerHiY3657MMeOo0jjC5S5kWSXkQ81bbW2oTyVuVbuw6P5\n/Jj51hy185HD+MAMNEojLApyY8gSrVN5qE9nUE4G+cDGGYSt+EBGdgq0qwPPtupe\nWArtZxIQd/64weB6pvJXW0V/K7XaOI8W2hImoIBD/v6/Ikb55IuCgbWGsUTNZZ20\nyH45R9YgB8wTbzd/W0UEVMgWpCWAOysFbeRcUWKnktdj3+UiFFOTch7hxBsD2gFQ\noBzhdjRkg0rI46oFKOhFTv9yhPhaeew+i9L6JY2IqxTG3mCJqpkGXSHhCwV18XxZ\nJuz8wPZDvzwjd48a1lFb3bFQZCKz86z4FRKyVjtHTG8JKPSuw3dIdfocWFUe9qam\nj9V/pSwrzicH8VTJmUa4GpxID81iDJCqXJi0hDsfgo2VUdX8KdGMlFPDnSW2358l\nL1ZeSHx7oB30QcXenLokHch51cH/LbL5VzsXqkhZhFWdC0ROlBY=\n=DhCM\n-----END PGP SIGNATURE-----", "payload": "tree 74807104e7662e65ca2d3b0258531852398170dc\nparent e745b4ddbd05026c75aae4506aef39fdfe1603c5\nauthor Chris Denton <christophersdenton@gmail.com> 1649414129 +0100\ncommitter Chris Denton <christophersdenton@gmail.com> 1649414129 +0100\n\nWindows: Use a pipe relay for chaining pipes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90130549f4d82e5d269b40542ee21866a8d4dcc2", "html_url": "https://github.com/rust-lang/rust/commit/90130549f4d82e5d269b40542ee21866a8d4dcc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90130549f4d82e5d269b40542ee21866a8d4dcc2/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e745b4ddbd05026c75aae4506aef39fdfe1603c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e745b4ddbd05026c75aae4506aef39fdfe1603c5", "html_url": "https://github.com/rust-lang/rust/commit/e745b4ddbd05026c75aae4506aef39fdfe1603c5"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "998ab0ca36ea9b4d56169793c0b4b4dfe3706c01", "filename": "library/std/src/sys/windows/pipe.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/90130549f4d82e5d269b40542ee21866a8d4dcc2/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90130549f4d82e5d269b40542ee21866a8d4dcc2/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs?ref=90130549f4d82e5d269b40542ee21866a8d4dcc2", "patch": "@@ -162,6 +162,46 @@ pub fn anon_pipe(ours_readable: bool, their_handle_inheritable: bool) -> io::Res\n     }\n }\n \n+/// Takes an asynchronous source pipe and returns a synchronous pipe suitable\n+/// for sending to a child process.\n+///\n+/// This is achieved by creating a new set of pipes and spawning a thread that\n+/// relays messages between the source and the synchronous pipe.\n+pub fn spawn_pipe_relay(\n+    source: &AnonPipe,\n+    ours_readable: bool,\n+    their_handle_inheritable: bool,\n+) -> io::Result<AnonPipe> {\n+    // We need this handle to live for the lifetime of the thread spawned below.\n+    let source = source.duplicate()?;\n+\n+    // create a new pair of anon pipes.\n+    let Pipes { theirs, ours } = anon_pipe(ours_readable, their_handle_inheritable)?;\n+\n+    // Spawn a thread that passes messages from one pipe to the other.\n+    // Any errors will simply cause the thread to exit.\n+    let (reader, writer) = if ours_readable { (ours, source) } else { (source, ours) };\n+    crate::thread::spawn(move || {\n+        let mut buf = [0_u8; 4096];\n+        'reader: while let Ok(len) = reader.read(&mut buf) {\n+            if len == 0 {\n+                break;\n+            }\n+            let mut start = 0;\n+            while let Ok(written) = writer.write(&buf[start..len]) {\n+                start += written;\n+                if start == len {\n+                    continue 'reader;\n+                }\n+            }\n+            break;\n+        }\n+    });\n+\n+    // Return the pipe that should be sent to the child process.\n+    Ok(theirs)\n+}\n+\n fn random_number() -> usize {\n     static N: AtomicUsize = AtomicUsize::new(0);\n     loop {\n@@ -189,6 +229,9 @@ impl AnonPipe {\n     pub fn into_handle(self) -> Handle {\n         self.inner\n     }\n+    fn duplicate(&self) -> io::Result<Self> {\n+        self.inner.duplicate(0, false, c::DUPLICATE_SAME_ACCESS).map(|inner| AnonPipe { inner })\n+    }\n \n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n         let result = unsafe {"}, {"sha": "a0c0f5dc3ec2cf499741a2d990a163c64c93fae5", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90130549f4d82e5d269b40542ee21866a8d4dcc2/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90130549f4d82e5d269b40542ee21866a8d4dcc2/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=90130549f4d82e5d269b40542ee21866a8d4dcc2", "patch": "@@ -172,6 +172,7 @@ pub enum Stdio {\n     Inherit,\n     Null,\n     MakePipe,\n+    Pipe(AnonPipe),\n     Handle(Handle),\n }\n \n@@ -528,6 +529,11 @@ impl Stdio {\n                 Ok(pipes.theirs.into_handle())\n             }\n \n+            Stdio::Pipe(ref source) => {\n+                let ours_readable = stdio_id != c::STD_INPUT_HANDLE;\n+                pipe::spawn_pipe_relay(source, ours_readable, true).map(AnonPipe::into_handle)\n+            }\n+\n             Stdio::Handle(ref handle) => handle.duplicate(0, true, c::DUPLICATE_SAME_ACCESS),\n \n             // Open up a reference to NUL with appropriate read/write\n@@ -552,7 +558,7 @@ impl Stdio {\n \n impl From<AnonPipe> for Stdio {\n     fn from(pipe: AnonPipe) -> Stdio {\n-        Stdio::Handle(pipe.into_handle())\n+        Stdio::Pipe(pipe)\n     }\n }\n "}]}