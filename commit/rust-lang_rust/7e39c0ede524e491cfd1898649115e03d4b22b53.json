{"sha": "7e39c0ede524e491cfd1898649115e03d4b22b53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMzljMGVkZTUyNGU0OTFjZmQxODk4NjQ5MTE1ZTAzZDRiMjJiNTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-26T13:40:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-26T13:40:43Z"}, "message": "Auto merge of #38015 - sanxiyn:rollup, r=sanxiyn\n\nRollup of 7 pull requests\n\n- Successful merges: #37962, #37963, #37967, #37978, #37985, #38001, #38010\n- Failed merges:", "tree": {"sha": "1a5de822f4ab8986d731f642a7ff0ab92b9307cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a5de822f4ab8986d731f642a7ff0ab92b9307cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e39c0ede524e491cfd1898649115e03d4b22b53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e39c0ede524e491cfd1898649115e03d4b22b53", "html_url": "https://github.com/rust-lang/rust/commit/7e39c0ede524e491cfd1898649115e03d4b22b53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e39c0ede524e491cfd1898649115e03d4b22b53/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73e98a0210f0afdec28b4f5bc0f7327d6a5a8555", "url": "https://api.github.com/repos/rust-lang/rust/commits/73e98a0210f0afdec28b4f5bc0f7327d6a5a8555", "html_url": "https://github.com/rust-lang/rust/commit/73e98a0210f0afdec28b4f5bc0f7327d6a5a8555"}, {"sha": "44b926a6bbe3b8a48d077a72126b5921f87ece65", "url": "https://api.github.com/repos/rust-lang/rust/commits/44b926a6bbe3b8a48d077a72126b5921f87ece65", "html_url": "https://github.com/rust-lang/rust/commit/44b926a6bbe3b8a48d077a72126b5921f87ece65"}], "stats": {"total": 133, "additions": 119, "deletions": 14}, "files": [{"sha": "79e0021b148a049f34e9f06a493cbd400ad618ea", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e39c0ede524e491cfd1898649115e03d4b22b53/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e39c0ede524e491cfd1898649115e03d4b22b53/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=7e39c0ede524e491cfd1898649115e03d4b22b53", "patch": "@@ -16,7 +16,7 @@\n #![unstable(feature = \"enumset\",\n             reason = \"matches collection reform specification, \\\n                       waiting for dust to settle\",\n-            issue = \"0\")]\n+            issue = \"37966\")]\n \n use core::marker;\n use core::fmt;"}, {"sha": "3999db0d63c99ac8770076f537e8807d5a8e33cc", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e39c0ede524e491cfd1898649115e03d4b22b53/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e39c0ede524e491cfd1898649115e03d4b22b53/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=7e39c0ede524e491cfd1898649115e03d4b22b53", "patch": "@@ -225,12 +225,12 @@\n //! often called 'iterator adapters', as they're a form of the 'adapter\n //! pattern'.\n //!\n-//! Common iterator adapters include [`map()`], [`take()`], and [`collect()`].\n+//! Common iterator adapters include [`map()`], [`take()`], and [`filter()`].\n //! For more, see their documentation.\n //!\n //! [`map()`]: trait.Iterator.html#method.map\n //! [`take()`]: trait.Iterator.html#method.take\n-//! [`collect()`]: trait.Iterator.html#method.collect\n+//! [`filter()`]: trait.Iterator.html#method.filter\n //!\n //! # Laziness\n //!\n@@ -268,7 +268,7 @@\n //! [`map()`]: trait.Iterator.html#method.map\n //!\n //! The two most common ways to evaluate an iterator are to use a `for` loop\n-//! like this, or using the [`collect()`] adapter to produce a new collection.\n+//! like this, or using the [`collect()`] method to produce a new collection.\n //!\n //! [`collect()`]: trait.Iterator.html#method.collect\n //!\n@@ -937,7 +937,7 @@ unsafe impl<A, B> TrustedLen for Zip<A, B>\n /// you can also [`map()`] backwards:\n ///\n /// ```rust\n-/// let v: Vec<i32> = vec![1, 2, 3].into_iter().rev().map(|x| x + 1).collect();\n+/// let v: Vec<i32> = vec![1, 2, 3].into_iter().map(|x| x + 1).rev().collect();\n ///\n /// assert_eq!(v, [4, 3, 2]);\n /// ```"}, {"sha": "e115263d2eb9591a536f6dd88144e64f58cb41db", "filename": "src/libstd/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e39c0ede524e491cfd1898649115e03d4b22b53/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e39c0ede524e491cfd1898649115e03d4b22b53/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=7e39c0ede524e491cfd1898649115e03d4b22b53", "patch": "@@ -109,7 +109,7 @@ pub trait Error: Debug + Display {\n     ///\n     /// impl Error for SuperError {\n     ///     fn description(&self) -> &str {\n-    ///         \"I'm the superhero of errors!\"\n+    ///         \"I'm the superhero of errors\"\n     ///     }\n     ///\n     ///     fn cause(&self) -> Option<&Error> {\n@@ -128,7 +128,7 @@ pub trait Error: Debug + Display {\n     ///\n     /// impl Error for SuperErrorSideKick {\n     ///     fn description(&self) -> &str {\n-    ///         \"I'm SuperError side kick!\"\n+    ///         \"I'm SuperError side kick\"\n     ///     }\n     /// }\n     ///"}, {"sha": "1ce37f6cc0a167bafe45cb51326cf07c18d80f1c", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/7e39c0ede524e491cfd1898649115e03d4b22b53/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e39c0ede524e491cfd1898649115e03d4b22b53/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=7e39c0ede524e491cfd1898649115e03d4b22b53", "patch": "@@ -282,6 +282,14 @@ impl SocketAddrV4 {\n impl SocketAddrV6 {\n     /// Creates a new socket address from the ip/port/flowinfo/scope_id\n     /// components.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{SocketAddrV6, Ipv6Addr};\n+    ///\n+    /// let socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 0);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(ip: Ipv6Addr, port: u16, flowinfo: u32, scope_id: u32)\n                -> SocketAddrV6 {\n@@ -298,6 +306,15 @@ impl SocketAddrV6 {\n     }\n \n     /// Returns the IP address associated with this socket address.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{SocketAddrV6, Ipv6Addr};\n+    ///\n+    /// let socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 0);\n+    /// assert_eq!(socket.ip(), &Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn ip(&self) -> &Ipv6Addr {\n         unsafe {\n@@ -306,44 +323,111 @@ impl SocketAddrV6 {\n     }\n \n     /// Change the IP address associated with this socket address.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{SocketAddrV6, Ipv6Addr};\n+    ///\n+    /// let mut socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 0);\n+    /// socket.set_ip(Ipv6Addr::new(76, 45, 0, 0, 0, 0, 0, 0));\n+    /// assert_eq!(socket.ip(), &Ipv6Addr::new(76, 45, 0, 0, 0, 0, 0, 0));\n+    /// ```\n     #[stable(feature = \"sockaddr_setters\", since = \"1.9.0\")]\n     pub fn set_ip(&mut self, new_ip: Ipv6Addr) {\n         self.inner.sin6_addr = *new_ip.as_inner()\n     }\n \n     /// Returns the port number associated with this socket address.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{SocketAddrV6, Ipv6Addr};\n+    ///\n+    /// let socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 0);\n+    /// assert_eq!(socket.port(), 8080);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn port(&self) -> u16 {\n         ntoh(self.inner.sin6_port)\n     }\n \n     /// Change the port number associated with this socket address.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{SocketAddrV6, Ipv6Addr};\n+    ///\n+    /// let mut socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 0);\n+    /// socket.set_port(4242);\n+    /// assert_eq!(socket.port(), 4242);\n+    /// ```\n     #[stable(feature = \"sockaddr_setters\", since = \"1.9.0\")]\n     pub fn set_port(&mut self, new_port: u16) {\n         self.inner.sin6_port = hton(new_port);\n     }\n \n     /// Returns the flow information associated with this address,\n     /// corresponding to the `sin6_flowinfo` field in C.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{SocketAddrV6, Ipv6Addr};\n+    ///\n+    /// let socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 10, 0);\n+    /// assert_eq!(socket.flowinfo(), 10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn flowinfo(&self) -> u32 {\n         self.inner.sin6_flowinfo\n     }\n \n     /// Change the flow information associated with this socket address.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{SocketAddrV6, Ipv6Addr};\n+    ///\n+    /// let mut socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 10, 0);\n+    /// socket.set_flowinfo(56);\n+    /// assert_eq!(socket.flowinfo(), 56);\n+    /// ```\n     #[stable(feature = \"sockaddr_setters\", since = \"1.9.0\")]\n     pub fn set_flowinfo(&mut self, new_flowinfo: u32) {\n         self.inner.sin6_flowinfo = new_flowinfo;\n     }\n \n     /// Returns the scope ID associated with this address,\n     /// corresponding to the `sin6_scope_id` field in C.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{SocketAddrV6, Ipv6Addr};\n+    ///\n+    /// let socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 78);\n+    /// assert_eq!(socket.scope_id(), 78);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn scope_id(&self) -> u32 {\n         self.inner.sin6_scope_id\n     }\n \n     /// Change the scope ID associated with this socket address.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{SocketAddrV6, Ipv6Addr};\n+    ///\n+    /// let mut socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 78);\n+    /// socket.set_scope_id(42);\n+    /// assert_eq!(socket.scope_id(), 42);\n+    /// ```\n     #[stable(feature = \"sockaddr_setters\", since = \"1.9.0\")]\n     pub fn set_scope_id(&mut self, new_scope_id: u32) {\n         self.inner.sin6_scope_id = new_scope_id;"}, {"sha": "04050a5edc4523b94d89e2464737cb05cfa60f55", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e39c0ede524e491cfd1898649115e03d4b22b53/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e39c0ede524e491cfd1898649115e03d4b22b53/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=7e39c0ede524e491cfd1898649115e03d4b22b53", "patch": "@@ -153,7 +153,7 @@ pub fn take_hook() -> Box<Fn(&PanicInfo) + 'static + Sync + Send> {\n \n         match hook {\n             Hook::Default => Box::new(default_hook),\n-            Hook::Custom(ptr) => {Box::from_raw(ptr)} // FIXME #30530\n+            Hook::Custom(ptr) => Box::from_raw(ptr),\n         }\n     }\n }"}, {"sha": "ca6e46eb15ac6451630d2159b05abc728cdbb9e4", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e39c0ede524e491cfd1898649115e03d4b22b53/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e39c0ede524e491cfd1898649115e03d4b22b53/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=7e39c0ede524e491cfd1898649115e03d4b22b53", "patch": "@@ -491,11 +491,11 @@ pub fn channel<T>() -> (Sender<T>, Receiver<T>) {\n /// becomes available. These channels differ greatly in the semantics of the\n /// sender from asynchronous channels, however.\n ///\n-/// This channel has an internal buffer on which messages will be queued. When\n-/// the internal buffer becomes full, future sends will *block* waiting for the\n-/// buffer to open up. Note that a buffer size of 0 is valid, in which case this\n-/// becomes  \"rendezvous channel\" where each send will not return until a recv\n-/// is paired with it.\n+/// This channel has an internal buffer on which messages will be queued. `bound`\n+/// specifies the buffer size. When the internal buffer becomes full, future sends\n+/// will *block* waiting for the buffer to open up. Note that a buffer size of 0\n+/// is valid, in which case this becomes  \"rendezvous channel\" where each send will\n+/// not return until a recv is paired with it.\n ///\n /// As with asynchronous channels, all senders will panic in `send` if the\n /// `Receiver` has been destroyed."}, {"sha": "df4a3746a49bd7480ae37eb1d536e12de816b34f", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7e39c0ede524e491cfd1898649115e03d4b22b53/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e39c0ede524e491cfd1898649115e03d4b22b53/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=7e39c0ede524e491cfd1898649115e03d4b22b53", "patch": "@@ -133,7 +133,14 @@ unsafe impl<T: ?Sized + Send> Sync for Mutex<T> { }\n /// dropped (falls out of scope), the lock will be unlocked.\n ///\n /// The data protected by the mutex can be access through this guard via its\n-/// `Deref` and `DerefMut` implementations\n+/// `Deref` and `DerefMut` implementations.\n+///\n+/// This structure is created by the [`lock()`] and [`try_lock()`] methods on\n+/// [`Mutex`].\n+///\n+/// [`lock()`]: struct.Mutex.html#method.lock\n+/// [`try_lock()`]: struct.Mutex.html#method.try_lock\n+/// [`Mutex`]: struct.Mutex.html\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct MutexGuard<'a, T: ?Sized + 'a> {"}, {"sha": "f83cf7ba9c29e41dc21679f63cff17e0c44df7ed", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e39c0ede524e491cfd1898649115e03d4b22b53/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e39c0ede524e491cfd1898649115e03d4b22b53/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=7e39c0ede524e491cfd1898649115e03d4b22b53", "patch": "@@ -77,6 +77,13 @@ unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n \n /// RAII structure used to release the shared read access of a lock when\n /// dropped.\n+///\n+/// This structure is created by the [`read()`] and [`try_read()`] methods on\n+/// [`RwLock`].\n+///\n+/// [`read()`]: struct.RwLock.html#method.read\n+/// [`try_read()`]: struct.RwLock.html#method.try_read\n+/// [`RwLock`]: struct.RwLock.html\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RwLockReadGuard<'a, T: ?Sized + 'a> {\n@@ -88,6 +95,13 @@ impl<'a, T: ?Sized> !marker::Send for RwLockReadGuard<'a, T> {}\n \n /// RAII structure used to release the exclusive write access of a lock when\n /// dropped.\n+///\n+/// This structure is created by the [`write()`] and [`try_write()`] methods\n+/// on [`RwLock`].\n+///\n+/// [`write()`]: struct.RwLock.html#method.write\n+/// [`try_write()`]: struct.RwLock.html#method.try_write\n+/// [`RwLock`]: struct.RwLock.html\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RwLockWriteGuard<'a, T: ?Sized + 'a> {"}]}