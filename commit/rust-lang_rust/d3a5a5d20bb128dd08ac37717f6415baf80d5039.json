{"sha": "d3a5a5d20bb128dd08ac37717f6415baf80d5039", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzYTVhNWQyMGJiMTI4ZGQwOGFjMzc3MTdmNjQxNWJhZjgwZDUwMzk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-01T16:23:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-01T16:23:36Z"}, "message": "Rollup merge of #69607 - GuillaumeGomez:cleanup-e0376, r=Dylan-DPC\n\nClean up E0376 explanation\n\nr? @Dylan-DPC", "tree": {"sha": "d1d11d9401394a1739e96bbd54bca5aec78fea25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1d11d9401394a1739e96bbd54bca5aec78fea25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3a5a5d20bb128dd08ac37717f6415baf80d5039", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeW+GICRBK7hj4Ov3rIwAAdHIIABL1JY5Q+NF3hkDBTXGQd7JU\nIVWHJ46HOyShf7bXHmz9lYmA4xPoMWUcXWe2klmORLpotLVxF1R1q+dDHeMQ/sZS\nVA1WDKNyaixO/odnV9yDqhGuWGGdttWtTcosxwQ4lTVi8rh4cQ91MrDes0f3FBJr\nAB5ZRUSHWZfuVAgtcK/82wLWMCskgYnGIZ9wOGK67tqzt5JQP5HLOcdka8fIGMtp\nLYXCBx6d9ljT1AYMlslSSgbR0bOyaXZtNIu9wM11awoNbRFKzg5/yQo6wMQOYkq2\nnyaLC1WNzOC6d5NIw76tDoSNui+D/MI4HPdZ8mjxfp/cRgelRyarX5wv17SYsqs=\n=3zU4\n-----END PGP SIGNATURE-----\n", "payload": "tree d1d11d9401394a1739e96bbd54bca5aec78fea25\nparent 22a03913f4ebd9d190c2037411301783f9178946\nparent dd142b1dc43f0e9a9b860003816b1a91b4e1a52d\nauthor Dylan DPC <dylan.dpc@gmail.com> 1583079816 +0100\ncommitter GitHub <noreply@github.com> 1583079816 +0100\n\nRollup merge of #69607 - GuillaumeGomez:cleanup-e0376, r=Dylan-DPC\n\nClean up E0376 explanation\n\nr? @Dylan-DPC\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3a5a5d20bb128dd08ac37717f6415baf80d5039", "html_url": "https://github.com/rust-lang/rust/commit/d3a5a5d20bb128dd08ac37717f6415baf80d5039", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3a5a5d20bb128dd08ac37717f6415baf80d5039/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22a03913f4ebd9d190c2037411301783f9178946", "url": "https://api.github.com/repos/rust-lang/rust/commits/22a03913f4ebd9d190c2037411301783f9178946", "html_url": "https://github.com/rust-lang/rust/commit/22a03913f4ebd9d190c2037411301783f9178946"}, {"sha": "dd142b1dc43f0e9a9b860003816b1a91b4e1a52d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd142b1dc43f0e9a9b860003816b1a91b4e1a52d", "html_url": "https://github.com/rust-lang/rust/commit/dd142b1dc43f0e9a9b860003816b1a91b4e1a52d"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "50de15bd30f09ac87544ec01d2ce362af83b0439", "filename": "src/librustc_error_codes/error_codes/E0376.md", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d3a5a5d20bb128dd08ac37717f6415baf80d5039/src%2Flibrustc_error_codes%2Ferror_codes%2FE0376.md", "raw_url": "https://github.com/rust-lang/rust/raw/d3a5a5d20bb128dd08ac37717f6415baf80d5039/src%2Flibrustc_error_codes%2Ferror_codes%2FE0376.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0376.md?ref=d3a5a5d20bb128dd08ac37717f6415baf80d5039", "patch": "@@ -1,14 +1,6 @@\n-The type you are trying to impl `CoerceUnsized` for is not a struct.\n-`CoerceUnsized` can only be implemented for a struct. Unsized types are\n-already able to be coerced without an implementation of `CoerceUnsized`\n-whereas a struct containing an unsized type needs to know the unsized type\n-field it's containing is able to be coerced. An [unsized type][1]\n-is any type that the compiler doesn't know the length or alignment of at\n-compile time. Any struct containing an unsized type is also unsized.\n-\n-[1]: https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait\n+`CoerceUnsized` was implemented on something that isn't a struct.\n \n-Example of erroneous code:\n+Erroneous code example:\n \n ```compile_fail,E0376\n #![feature(coerce_unsized)]\n@@ -22,6 +14,15 @@ struct Foo<T: ?Sized> {\n impl<T, U> CoerceUnsized<U> for Foo<T> {}\n ```\n \n+`CoerceUnsized` can only be implemented for a struct. Unsized types are\n+already able to be coerced without an implementation of `CoerceUnsized`\n+whereas a struct containing an unsized type needs to know the unsized type\n+field it's containing is able to be coerced. An [unsized type][1]\n+is any type that the compiler doesn't know the length or alignment of at\n+compile time. Any struct containing an unsized type is also unsized.\n+\n+[1]: https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait\n+\n The `CoerceUnsized` trait takes a struct type. Make sure the type you are\n providing to `CoerceUnsized` is a struct with only the last field containing an\n unsized type."}]}