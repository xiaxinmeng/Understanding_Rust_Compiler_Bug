{"sha": "620544e0ba73bd27d8e73cbae4c0e5eea69100cc", "node_id": "C_kwDOAAsO6NoAKDYyMDU0NGUwYmE3M2JkMjdkOGU3M2NiYWU0YzBlNWVlYTY5MTAwY2M", "commit": {"author": {"name": "Noam Ta Shma", "email": "noam.tashma@gmail.com", "date": "2023-03-03T19:35:47Z"}, "committer": {"name": "Noam Ta Shma", "email": "noam.tashma@gmail.com", "date": "2023-03-06T19:51:50Z"}, "message": "issue-108706-fix", "tree": {"sha": "593c185fa9634ec140c5a89b17ecd25b034f02f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/593c185fa9634ec140c5a89b17ecd25b034f02f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/620544e0ba73bd27d8e73cbae4c0e5eea69100cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/620544e0ba73bd27d8e73cbae4c0e5eea69100cc", "html_url": "https://github.com/rust-lang/rust/commit/620544e0ba73bd27d8e73cbae4c0e5eea69100cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/620544e0ba73bd27d8e73cbae4c0e5eea69100cc/comments", "author": {"login": "noamtashma", "id": 9135297, "node_id": "MDQ6VXNlcjkxMzUyOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/9135297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/noamtashma", "html_url": "https://github.com/noamtashma", "followers_url": "https://api.github.com/users/noamtashma/followers", "following_url": "https://api.github.com/users/noamtashma/following{/other_user}", "gists_url": "https://api.github.com/users/noamtashma/gists{/gist_id}", "starred_url": "https://api.github.com/users/noamtashma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/noamtashma/subscriptions", "organizations_url": "https://api.github.com/users/noamtashma/orgs", "repos_url": "https://api.github.com/users/noamtashma/repos", "events_url": "https://api.github.com/users/noamtashma/events{/privacy}", "received_events_url": "https://api.github.com/users/noamtashma/received_events", "type": "User", "site_admin": false}, "committer": {"login": "noamtashma", "id": 9135297, "node_id": "MDQ6VXNlcjkxMzUyOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/9135297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/noamtashma", "html_url": "https://github.com/noamtashma", "followers_url": "https://api.github.com/users/noamtashma/followers", "following_url": "https://api.github.com/users/noamtashma/following{/other_user}", "gists_url": "https://api.github.com/users/noamtashma/gists{/gist_id}", "starred_url": "https://api.github.com/users/noamtashma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/noamtashma/subscriptions", "organizations_url": "https://api.github.com/users/noamtashma/orgs", "repos_url": "https://api.github.com/users/noamtashma/repos", "events_url": "https://api.github.com/users/noamtashma/events{/privacy}", "received_events_url": "https://api.github.com/users/noamtashma/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f4e73c4a4212922f0c24c6743b3837902619200", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f4e73c4a4212922f0c24c6743b3837902619200", "html_url": "https://github.com/rust-lang/rust/commit/5f4e73c4a4212922f0c24c6743b3837902619200"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "94656b803d5e8594969ef86c091da38f9098e1d1", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/620544e0ba73bd27d8e73cbae4c0e5eea69100cc/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620544e0ba73bd27d8e73cbae4c0e5eea69100cc/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=620544e0ba73bd27d8e73cbae4c0e5eea69100cc", "patch": "@@ -51,8 +51,16 @@ mod tests;\n ///\n /// Going above this limit will abort your program (although not\n /// necessarily) at _exactly_ `MAX_REFCOUNT + 1` references.\n+/// Trying to go above it might call a `panic` (if not actually going above it).\n+///\n+/// This is a global invariant, and also applies when using a compare-exchange loop.\n+///\n+/// See comment in `Arc::clone`.\n const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n \n+/// The error in case either counter reaches above `MAX_REFCOUNT`, and we can `panic` safely.\n+const INTERNAL_OVERFLOW_ERROR: &str = \"Arc counter overflow\";\n+\n #[cfg(not(sanitize = \"thread\"))]\n macro_rules! acquire {\n     ($x:expr) => {\n@@ -950,6 +958,9 @@ impl<T: ?Sized> Arc<T> {\n                 continue;\n             }\n \n+            // We can't allow the refcount to increase much past `MAX_REFCOUNT`.\n+            assert!(cur <= MAX_REFCOUNT, \"{}\", INTERNAL_OVERFLOW_ERROR);\n+\n             // NOTE: this code currently ignores the possibility of overflow\n             // into usize::MAX; in general both Rc and Arc need to be adjusted\n             // to deal with overflow.\n@@ -1373,6 +1384,11 @@ impl<T: ?Sized> Clone for Arc<T> {\n         // the worst already happened and we actually do overflow the `usize` counter. However, that\n         // requires the counter to grow from `isize::MAX` to `usize::MAX` between the increment\n         // above and the `abort` below, which seems exceedingly unlikely.\n+        //\n+        // This is a global invariant, and also applies when using a compare-exchange loop to increment\n+        // counters in other methods.\n+        // Otherwise, the counter could be brought to an almost-overflow using a compare-exchange loop,\n+        // and then overflow using a few `fetch_add`s.\n         if old_size > MAX_REFCOUNT {\n             abort();\n         }\n@@ -2001,9 +2017,7 @@ impl<T: ?Sized> Weak<T> {\n                     return None;\n                 }\n                 // See comments in `Arc::clone` for why we do this (for `mem::forget`).\n-                if n > MAX_REFCOUNT {\n-                    abort();\n-                }\n+                assert!(n <= MAX_REFCOUNT, \"{}\", INTERNAL_OVERFLOW_ERROR);\n                 Some(n + 1)\n             })\n             .ok()"}]}