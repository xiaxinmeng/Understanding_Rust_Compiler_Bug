{"sha": "5b89f3fb942e46cd421f1c9dd80d34dd8944d6eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViODlmM2ZiOTQyZTQ2Y2Q0MjFmMWM5ZGQ4MGQzNGRkODk0NGQ2ZWI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-27T16:01:33Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-27T16:01:33Z"}, "message": "implement Arc<T> -> Arc<Trait> unsizing", "tree": {"sha": "42e02fb5a8fd7350f675f8cda015ea26bc18ddd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42e02fb5a8fd7350f675f8cda015ea26bc18ddd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b89f3fb942e46cd421f1c9dd80d34dd8944d6eb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX6pfdAAoJEFbW7qD8Z6xGnvMP/2C4dArQLGdblkHtOYWetWm8\njeA0RrrdvbIPngCP5utT3n8vS8uzADPC2NBysCagDt/Z5/Cg7x15q8wBajkDwFJK\nZoY05rUF+W/dJmH5mJ+YzTXPUA3zBEqQDHu4hS6p6ouAsKeMoX9+0GA6D0gd6tvZ\nBxRnING1jFUSTL5TqV/uluB9vymHxeino9MWc3W5WNboAaaVmojBvbseOEl6GZuF\nStFJe1epG0XHcH4OZorf1DVnFaPXSH9WWbJRHnk3zJIjvDpXAVw/4inqTGmn6rUr\nBCvLnEI8LzELgdkwXUh9gkf9KO3b91827xq2hqiy4P8Xhm9kHQlDP88oxu4ooRi4\nzLatXkBPsm6KrEpGNBkiRVXFGZTgfRdK3VQ9O2dDlRCfOn5tPPjH8PAjCeZ1ZDJ/\nb4ievGtlcL3gpXb+3u0iLCw2ZQxBE3UBy5Uh8zAdqLYIxyuyMNTdFs9wii2ZajmM\no6vFA9bcaxsMqr433eYK0BMX+uShH54zIpQV4AXcFe9aC7VZQKP1bFAj4ZYlFDYb\nMhId/hJ/bl88YZT0dCbUoggwXt9+MAqDNXl3xgpNdqIz4E9t1Dlm3eKHqdVupMYD\nnR+VV0Q9XwJrdZpui5kUsQQ6a7S4zl7T7aUcmuZlmZF6hprdmfGbyesJcTsfQBmj\ndZHbneBuIsrAxRZfowo7\n=0vnE\n-----END PGP SIGNATURE-----", "payload": "tree 42e02fb5a8fd7350f675f8cda015ea26bc18ddd6\nparent 622d407e0ef6d8f605167e1190d79d946a399bd6\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474992093 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474992093 +0200\n\nimplement Arc<T> -> Arc<Trait> unsizing"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b89f3fb942e46cd421f1c9dd80d34dd8944d6eb", "html_url": "https://github.com/rust-lang/rust/commit/5b89f3fb942e46cd421f1c9dd80d34dd8944d6eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b89f3fb942e46cd421f1c9dd80d34dd8944d6eb/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "622d407e0ef6d8f605167e1190d79d946a399bd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/622d407e0ef6d8f605167e1190d79d946a399bd6", "html_url": "https://github.com/rust-lang/rust/commit/622d407e0ef6d8f605167e1190d79d946a399bd6"}], "stats": {"total": 163, "additions": 112, "deletions": 51}, "files": [{"sha": "8fb899572c4e351a5d8e14fa10acb3500f182830", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 93, "deletions": 51, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/5b89f3fb942e46cd421f1c9dd80d34dd8944d6eb/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89f3fb942e46cd421f1c9dd80d34dd8944d6eb/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=5b89f3fb942e46cd421f1c9dd80d34dd8944d6eb", "patch": "@@ -295,6 +295,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         }\n     }\n \n+    pub fn monomorphize_field_ty(&self, f: ty::FieldDef<'tcx>, substs: &'tcx Substs<'tcx>) -> Ty<'tcx> {\n+        let substituted = &f.ty(self.tcx, substs);\n+        self.tcx.normalize_associated_type(&substituted)\n+    }\n+\n     pub fn monomorphize(&self, ty: Ty<'tcx>, substs: &'tcx Substs<'tcx>) -> Ty<'tcx> {\n         let substituted = ty.subst(self.tcx, substs);\n         self.tcx.normalize_associated_type(&substituted)\n@@ -608,56 +613,19 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.memory.write_ptr(dest, ptr)?;\n             }\n \n-            Cast(kind, ref operand, dest_ty) => {\n+            Cast(kind, ref operand, cast_ty) => {\n+                debug_assert_eq!(self.monomorphize(cast_ty, self.substs()), dest_ty);\n                 use rustc::mir::repr::CastKind::*;\n                 match kind {\n                     Unsize => {\n                         let src = self.eval_operand(operand)?;\n                         let src_ty = self.operand_ty(operand);\n-                        let dest_ty = self.monomorphize(dest_ty, self.substs());\n-                        // FIXME: cases where dest_ty is not a fat pointer. e.g. Arc<Struct> -> Arc<Trait>\n-                        assert!(self.type_is_fat_ptr(dest_ty));\n-                        let src_pointee_ty = pointee_type(src_ty).unwrap();\n-                        let dest_pointee_ty = pointee_type(dest_ty).unwrap();\n-\n-                        // A<Struct> -> A<Trait> conversion\n-                        let (src_pointee_ty, dest_pointee_ty) = self.tcx.struct_lockstep_tails(src_pointee_ty, dest_pointee_ty);\n-\n-                        match (&src_pointee_ty.sty, &dest_pointee_ty.sty) {\n-                            (&ty::TyArray(_, length), &ty::TySlice(_)) => {\n-                                let ptr = src.read_ptr(&self.memory)?;\n-                                self.memory.write_ptr(dest, ptr)?;\n-                                let ptr_size = self.memory.pointer_size() as isize;\n-                                let dest_extra = dest.offset(ptr_size);\n-                                self.memory.write_usize(dest_extra, length as u64)?;\n-                            }\n-                            (&ty::TyTrait(_), &ty::TyTrait(_)) => {\n-                                // For now, upcasts are limited to changes in marker\n-                                // traits, and hence never actually require an actual\n-                                // change to the vtable.\n-                                self.write_value(src, dest, dest_ty)?;\n-                            },\n-                            (_, &ty::TyTrait(ref data)) => {\n-                                let trait_ref = data.principal.with_self_ty(self.tcx, src_pointee_ty);\n-                                let trait_ref = self.tcx.erase_regions(&trait_ref);\n-                                let vtable = self.get_vtable(trait_ref)?;\n-                                let ptr = src.read_ptr(&self.memory)?;\n-\n-                                self.memory.write_ptr(dest, ptr)?;\n-                                let ptr_size = self.memory.pointer_size() as isize;\n-                                let dest_extra = dest.offset(ptr_size);\n-                                self.memory.write_ptr(dest_extra, vtable)?;\n-                            },\n-\n-                            _ => bug!(\"invalid unsizing {:?} -> {:?}\", src_ty, dest_ty),\n-                        }\n+                        self.unsize_into(src, src_ty, dest, dest_ty)?;\n                     }\n \n                     Misc => {\n                         let src = self.eval_operand(operand)?;\n                         let src_ty = self.operand_ty(operand);\n-                        // FIXME: dest_ty should already be monomorphized\n-                        let dest_ty = self.monomorphize(dest_ty, self.substs());\n                         if self.type_is_fat_ptr(src_ty) {\n                             trace!(\"misc cast: {:?}\", src);\n                             let ptr_size = self.memory.pointer_size();\n@@ -772,9 +740,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n         use rustc::ty::layout::Layout::*;\n         match *layout {\n-            Univariant { .. } => {\n-                assert_eq!(field_index, 0);\n-                Ok(Size::from_bytes(0))\n+            Univariant { ref variant, .. } => {\n+                Ok(variant.field_offset(field_index))\n             }\n             FatPointer { .. } => {\n                 let bytes = layout::FAT_PTR_ADDR * self.memory.pointer_size();\n@@ -1118,16 +1085,91 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     fn substs(&self) -> &'tcx Substs<'tcx> {\n         self.frame().substs\n     }\n-}\n \n-fn pointee_type(ptr_ty: ty::Ty) -> Option<ty::Ty> {\n-    match ptr_ty.sty {\n-        ty::TyRef(_, ty::TypeAndMut { ty, .. }) |\n-        ty::TyRawPtr(ty::TypeAndMut { ty, .. }) |\n-        ty::TyBox(ty) => {\n-            Some(ty)\n+    fn unsize_into(\n+        &mut self,\n+        src: Value,\n+        src_ty: Ty<'tcx>,\n+        dest: Pointer,\n+        dest_ty: Ty<'tcx>,\n+    ) -> EvalResult<'tcx, ()> {\n+        match (&src_ty.sty, &dest_ty.sty) {\n+            (&ty::TyBox(sty), &ty::TyBox(dty)) |\n+            (&ty::TyRef(_, ty::TypeAndMut { ty: sty, .. }), &ty::TyRef(_, ty::TypeAndMut { ty: dty, .. })) |\n+            (&ty::TyRef(_, ty::TypeAndMut { ty: sty, .. }), &ty::TyRawPtr(ty::TypeAndMut { ty: dty, .. })) |\n+            (&ty::TyRawPtr(ty::TypeAndMut { ty: sty, .. }), &ty::TyRawPtr(ty::TypeAndMut { ty: dty, .. })) => {\n+                // A<Struct> -> A<Trait> conversion\n+                let (src_pointee_ty, dest_pointee_ty) = self.tcx.struct_lockstep_tails(sty, dty);\n+\n+                match (&src_pointee_ty.sty, &dest_pointee_ty.sty) {\n+                    (&ty::TyArray(_, length), &ty::TySlice(_)) => {\n+                        let ptr = src.read_ptr(&self.memory)?;\n+                        self.memory.write_ptr(dest, ptr)?;\n+                        let ptr_size = self.memory.pointer_size() as isize;\n+                        let dest_extra = dest.offset(ptr_size);\n+                        self.memory.write_usize(dest_extra, length as u64)?;\n+                    }\n+                    (&ty::TyTrait(_), &ty::TyTrait(_)) => {\n+                        // For now, upcasts are limited to changes in marker\n+                        // traits, and hence never actually require an actual\n+                        // change to the vtable.\n+                        self.write_value(src, dest, dest_ty)?;\n+                    },\n+                    (_, &ty::TyTrait(ref data)) => {\n+                        let trait_ref = data.principal.with_self_ty(self.tcx, src_pointee_ty);\n+                        let trait_ref = self.tcx.erase_regions(&trait_ref);\n+                        let vtable = self.get_vtable(trait_ref)?;\n+                        let ptr = src.read_ptr(&self.memory)?;\n+\n+                        self.memory.write_ptr(dest, ptr)?;\n+                        let ptr_size = self.memory.pointer_size() as isize;\n+                        let dest_extra = dest.offset(ptr_size);\n+                        self.memory.write_ptr(dest_extra, vtable)?;\n+                    },\n+\n+                    _ => bug!(\"invalid unsizing {:?} -> {:?}\", src_ty, dest_ty),\n+                }\n+            }\n+            (&ty::TyAdt(def_a, substs_a), &ty::TyAdt(def_b, substs_b)) => {\n+                // unsizing of generic struct with pointer fields\n+                // Example: `Arc<T>` -> `Arc<Trait>`\n+                // here we need to increase the size of every &T thin ptr field to a fat ptr\n+\n+                assert_eq!(def_a, def_b);\n+\n+                let src_fields = def_a.variants[0].fields.iter();\n+                let dst_fields = def_b.variants[0].fields.iter();\n+\n+                //let src = adt::MaybeSizedValue::sized(src);\n+                //let dst = adt::MaybeSizedValue::sized(dst);\n+                let src_ptr = match src {\n+                    Value::ByRef(ptr) => ptr,\n+                    _ => panic!(\"expected pointer, got {:?}\", src),\n+                };\n+\n+                let iter = src_fields.zip(dst_fields).enumerate();\n+                for (i, (src_f, dst_f)) in iter {\n+                    let src_fty = self.monomorphize_field_ty(src_f, substs_a);\n+                    let dst_fty = self.monomorphize_field_ty(dst_f, substs_b);\n+                    if self.type_size(dst_fty) == 0 {\n+                        continue;\n+                    }\n+                    let src_field_offset = self.get_field_offset(src_ty, i)?.bytes() as isize;\n+                    let dst_field_offset = self.get_field_offset(dest_ty, i)?.bytes() as isize;\n+                    let src_f_ptr = src_ptr.offset(src_field_offset);\n+                    let dst_f_ptr = dest.offset(dst_field_offset);\n+                    if src_fty == dst_fty {\n+                        self.move_(src_f_ptr, dst_f_ptr, src_fty)?;\n+                    } else {\n+                        self.unsize_into(Value::ByRef(src_f_ptr), src_fty, dst_f_ptr, dst_fty)?;\n+                    }\n+                }\n+            }\n+            _ => bug!(\"unsize_into: invalid conversion: {:?} -> {:?}\",\n+                      src_ty,\n+                      dest_ty),\n         }\n-        _ => None,\n+        Ok(())\n     }\n }\n "}, {"sha": "edbf2b81ce941e2ae140848723c64f36ae8b9462", "filename": "tests/run-pass/issue-33387.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5b89f3fb942e46cd421f1c9dd80d34dd8944d6eb/tests%2Frun-pass%2Fissue-33387.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89f3fb942e46cd421f1c9dd80d34dd8944d6eb/tests%2Frun-pass%2Fissue-33387.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-33387.rs?ref=5b89f3fb942e46cd421f1c9dd80d34dd8944d6eb", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::sync::Arc;\n+\n+trait Foo {}\n+\n+impl Foo for [u8; 2] {}\n+\n+fn main() {\n+    let _: Arc<Foo + Send> = Arc::new([3, 4]);\n+}"}]}