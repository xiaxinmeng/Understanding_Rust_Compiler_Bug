{"sha": "9661a819688443b19dad91b85a4898a01a7b0858", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NjFhODE5Njg4NDQzYjE5ZGFkOTFiODVhNDg5OGEwMWE3YjA4NTg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-25T07:40:18Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-25T07:40:18Z"}, "message": "librustc_codegen_llvm: deny(elided_lifetimes_in_paths)", "tree": {"sha": "89393fa0bb2504af29a2a6900398f88d42403845", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89393fa0bb2504af29a2a6900398f88d42403845"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9661a819688443b19dad91b85a4898a01a7b0858", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9661a819688443b19dad91b85a4898a01a7b0858", "html_url": "https://github.com/rust-lang/rust/commit/9661a819688443b19dad91b85a4898a01a7b0858", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9661a819688443b19dad91b85a4898a01a7b0858/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1911babed0364ede7dedc646dbca63fac03d5c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1911babed0364ede7dedc646dbca63fac03d5c5", "html_url": "https://github.com/rust-lang/rust/commit/c1911babed0364ede7dedc646dbca63fac03d5c5"}], "stats": {"total": 142, "additions": 73, "deletions": 69}, "files": [{"sha": "1fe020561dde11a0f278f7cd017986788ee2e53d", "filename": "src/librustc_codegen_llvm/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fallocator.rs?ref=9661a819688443b19dad91b85a4898a01a7b0858", "patch": "@@ -9,7 +9,7 @@ use rustc_allocator::{ALLOCATOR_METHODS, AllocatorTy};\n use crate::ModuleLlvm;\n use crate::llvm::{self, False, True};\n \n-pub(crate) unsafe fn codegen(tcx: TyCtxt, mods: &mut ModuleLlvm, kind: AllocatorKind) {\n+pub(crate) unsafe fn codegen(tcx: TyCtxt<'_, '_, '_>, mods: &mut ModuleLlvm, kind: AllocatorKind) {\n     let llcx = &*mods.llcx;\n     let llmod = mods.llmod();\n     let usize = match &tcx.sess.target.target.target_pointer_width[..] {"}, {"sha": "71e7535313f77e8c7fe43d68c7bbf74f37eb31ff", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=9661a819688443b19dad91b85a4898a01a7b0858", "patch": "@@ -308,7 +308,7 @@ pub fn from_fn_attrs(\n     }\n }\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     providers.target_features_whitelist = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);\n         if tcx.sess.opts.actually_rustdoc {\n@@ -328,7 +328,7 @@ pub fn provide(providers: &mut Providers) {\n     provide_extern(providers);\n }\n \n-pub fn provide_extern(providers: &mut Providers) {\n+pub fn provide_extern(providers: &mut Providers<'_>) {\n     providers.wasm_import_module_map = |tcx, cnum| {\n         // Build up a map from DefId to a `NativeLibrary` structure, where\n         // `NativeLibrary` internally contains information about\n@@ -362,7 +362,7 @@ pub fn provide_extern(providers: &mut Providers) {\n     };\n }\n \n-fn wasm_import_module(tcx: TyCtxt, id: DefId) -> Option<CString> {\n+fn wasm_import_module(tcx: TyCtxt<'_, '_, '_>, id: DefId) -> Option<CString> {\n     tcx.wasm_import_module_map(id.krate)\n         .get(&id)\n         .map(|s| CString::new(&s[..]).unwrap())"}, {"sha": "3fb9d4b5b776bf823bbece07d392280de2b100cf", "filename": "src/librustc_codegen_llvm/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs?ref=9661a819688443b19dad91b85a4898a01a7b0858", "patch": "@@ -42,7 +42,7 @@ enum Addition {\n     },\n }\n \n-fn is_relevant_child(c: &Child) -> bool {\n+fn is_relevant_child(c: &Child<'_>) -> bool {\n     match c.name() {\n         Some(name) => !name.contains(\"SYMDEF\"),\n         None => false,"}, {"sha": "819f7f9410257cd483afca9138a9c5485a5f8a46", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=9661a819688443b19dad91b85a4898a01a7b0858", "patch": "@@ -808,7 +808,7 @@ fn exec_linker(sess: &Session, cmd: &mut Command, out_filename: &Path, tmpdir: &\n     }\n \n     impl<'a> fmt::Display for Escape<'a> {\n-        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n             if self.is_like_msvc {\n                 // This is \"documented\" at\n                 // https://msdn.microsoft.com/en-us/library/4xdcbak7.aspx"}, {"sha": "2b7abcb52bef8cf5391c551c3c7127592e8c5360", "filename": "src/librustc_codegen_llvm/back/rpath.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs?ref=9661a819688443b19dad91b85a4898a01a7b0858", "patch": "@@ -15,7 +15,7 @@ pub struct RPathConfig<'a> {\n     pub get_install_prefix_lib_path: &'a mut dyn FnMut() -> PathBuf,\n }\n \n-pub fn get_rpath_flags(config: &mut RPathConfig) -> Vec<String> {\n+pub fn get_rpath_flags(config: &mut RPathConfig<'_>) -> Vec<String> {\n     // No rpath on windows\n     if !config.has_rpath {\n         return Vec::new();\n@@ -52,7 +52,7 @@ fn rpaths_to_flags(rpaths: &[String]) -> Vec<String> {\n     ret\n }\n \n-fn get_rpaths(config: &mut RPathConfig, libs: &[PathBuf]) -> Vec<String> {\n+fn get_rpaths(config: &mut RPathConfig<'_>, libs: &[PathBuf]) -> Vec<String> {\n     debug!(\"output: {:?}\", config.out_filename.display());\n     debug!(\"libs:\");\n     for libpath in libs {\n@@ -86,12 +86,12 @@ fn get_rpaths(config: &mut RPathConfig, libs: &[PathBuf]) -> Vec<String> {\n     rpaths\n }\n \n-fn get_rpaths_relative_to_output(config: &mut RPathConfig,\n+fn get_rpaths_relative_to_output(config: &mut RPathConfig<'_>,\n                                  libs: &[PathBuf]) -> Vec<String> {\n     libs.iter().map(|a| get_rpath_relative_to_output(config, a)).collect()\n }\n \n-fn get_rpath_relative_to_output(config: &mut RPathConfig, lib: &Path) -> String {\n+fn get_rpath_relative_to_output(config: &mut RPathConfig<'_>, lib: &Path) -> String {\n     // Mac doesn't appear to support $ORIGIN\n     let prefix = if config.is_like_osx {\n         \"@loader_path\"\n@@ -127,7 +127,7 @@ fn path_relative_from(path: &Path, base: &Path) -> Option<PathBuf> {\n     } else {\n         let mut ita = path.components();\n         let mut itb = base.components();\n-        let mut comps: Vec<Component> = vec![];\n+        let mut comps: Vec<Component<'_>> = vec![];\n         loop {\n             match (ita.next(), itb.next()) {\n                 (None, None) => break,\n@@ -154,7 +154,7 @@ fn path_relative_from(path: &Path, base: &Path) -> Option<PathBuf> {\n }\n \n \n-fn get_install_prefix_rpath(config: &mut RPathConfig) -> String {\n+fn get_install_prefix_rpath(config: &mut RPathConfig<'_>) -> String {\n     let path = (config.get_install_prefix_lib_path)();\n     let path = env::current_dir().unwrap().join(&path);\n     // FIXME (#9639): This needs to handle non-utf8 paths"}, {"sha": "e1d3351d3deca7476946d7f76bd28e8a98f70935", "filename": "src/librustc_codegen_llvm/back/wasm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fback%2Fwasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fback%2Fwasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwasm.rs?ref=9661a819688443b19dad91b85a4898a01a7b0858", "patch": "@@ -60,7 +60,7 @@ pub fn rewrite_imports(path: &Path, import_map: &FxHashMap<String, String>) {\n     fs::write(path, &ret.data).expect(\"failed to write wasm output\");\n \n     fn rewrite_import_section(\n-        wasm: &mut WasmDecoder,\n+        wasm: &mut WasmDecoder<'_>,\n         import_map: &FxHashMap<String, String>,\n     )\n         -> Vec<u8>\n@@ -75,7 +75,7 @@ pub fn rewrite_imports(path: &Path, import_map: &FxHashMap<String, String>) {\n         return dst.data\n     }\n \n-    fn rewrite_import_entry(wasm: &mut WasmDecoder,\n+    fn rewrite_import_entry(wasm: &mut WasmDecoder<'_>,\n                             dst: &mut WasmEncoder,\n                             import_map: &FxHashMap<String, String>) {\n         // More info about the binary format here is available at:"}, {"sha": "db5430a4219a0acea6d5f90f655360642fd76c36", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=9661a819688443b19dad91b85a4898a01a7b0858", "patch": "@@ -83,7 +83,7 @@ pub fn write_output_file(\n }\n \n pub fn create_target_machine(\n-    tcx: TyCtxt,\n+    tcx: TyCtxt<'_, '_, '_>,\n     find_features: bool,\n ) -> &'static mut llvm::TargetMachine {\n     target_machine_factory(tcx.sess, tcx.backend_optimization_level(LOCAL_CRATE), find_features)()"}, {"sha": "1dac1557707c9c903ceb2fcf415aac10530f2f55", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=9661a819688443b19dad91b85a4898a01a7b0858", "patch": "@@ -172,17 +172,17 @@ pub fn compile_codegen_unit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             let mono_items = cx.codegen_unit\n                                .items_in_deterministic_order(cx.tcx);\n             for &(mono_item, (linkage, visibility)) in &mono_items {\n-                mono_item.predefine::<Builder>(&cx, linkage, visibility);\n+                mono_item.predefine::<Builder<'_, '_, '_>>(&cx, linkage, visibility);\n             }\n \n             // ... and now that we have everything pre-defined, fill out those definitions.\n             for &(mono_item, _) in &mono_items {\n-                mono_item.define::<Builder>(&cx);\n+                mono_item.define::<Builder<'_, '_, '_>>(&cx);\n             }\n \n             // If this codegen unit contains the main function, also create the\n             // wrapper here\n-            maybe_create_entry_wrapper::<Builder>(&cx);\n+            maybe_create_entry_wrapper::<Builder<'_, '_, '_>>(&cx);\n \n             // Run replace-all-uses-with for statics that need it\n             for &(old_g, new_g) in cx.statics_to_rauw().borrow().iter() {"}, {"sha": "d4d38a464576d2a9539082556764ef97475a2074", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=9661a819688443b19dad91b85a4898a01a7b0858", "patch": "@@ -456,7 +456,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     fn checked_binop(\n         &mut self,\n         oop: OverflowOp,\n-        ty: Ty,\n+        ty: Ty<'_>,\n         lhs: Self::Value,\n         rhs: Self::Value,\n     ) -> (Self::Value, Self::Value) {"}, {"sha": "23e3a8425d37001bf67be923f9693d7c8a0dc93a", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=9661a819688443b19dad91b85a4898a01a7b0858", "patch": "@@ -144,7 +144,7 @@ pub fn is_pie_binary(sess: &Session) -> bool {\n }\n \n pub unsafe fn create_module(\n-    tcx: TyCtxt,\n+    tcx: TyCtxt<'_, '_, '_>,\n     llcx: &'ll llvm::Context,\n     mod_name: &str,\n ) -> &'ll llvm::Module {"}, {"sha": "c8ddf733ecf1f5c8d1583afda83616f94e601068", "filename": "src/librustc_codegen_llvm/debuginfo/create_scope_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs?ref=9661a819688443b19dad91b85a4898a01a7b0858", "patch": "@@ -20,7 +20,7 @@ use syntax_pos::BytePos;\n /// If debuginfo is disabled, the returned vector is empty.\n pub fn create_mir_scopes(\n     cx: &CodegenCx<'ll, '_>,\n-    mir: &Mir,\n+    mir: &Mir<'_>,\n     debug_context: &FunctionDebugContext<&'ll DISubprogram>,\n ) -> IndexVec<SourceScope, MirDebugScope<&'ll DIScope>> {\n     let null_scope = MirDebugScope {\n@@ -55,7 +55,7 @@ pub fn create_mir_scopes(\n }\n \n fn make_mir_scope(cx: &CodegenCx<'ll, '_>,\n-                  mir: &Mir,\n+                  mir: &Mir<'_>,\n                   has_variables: &BitSet<SourceScope>,\n                   debug_context: &FunctionDebugContextData<&'ll DISubprogram>,\n                   scope: SourceScope,"}, {"sha": "91496ffbe557a4b65aea8c791f76c6d1bf4958cc", "filename": "src/librustc_codegen_llvm/debuginfo/gdb.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs?ref=9661a819688443b19dad91b85a4898a01a7b0858", "patch": "@@ -13,7 +13,7 @@ use syntax::attr;\n \n /// Inserts a side-effect free instruction sequence that makes sure that the\n /// .debug_gdb_scripts global is referenced, so it isn't removed by the linker.\n-pub fn insert_reference_to_gdb_debug_scripts_section_global(bx: &mut Builder) {\n+pub fn insert_reference_to_gdb_debug_scripts_section_global(bx: &mut Builder<'_, '_, '_>) {\n     if needs_gdb_debug_scripts_section(bx) {\n         let gdb_debug_scripts_section = get_or_insert_gdb_debug_scripts_section_global(bx);\n         // Load just the first byte as that's all that's necessary to force\n@@ -64,7 +64,7 @@ pub fn get_or_insert_gdb_debug_scripts_section_global(cx: &CodegenCx<'ll, '_>)\n     })\n }\n \n-pub fn needs_gdb_debug_scripts_section(cx: &CodegenCx) -> bool {\n+pub fn needs_gdb_debug_scripts_section(cx: &CodegenCx<'_, '_>) -> bool {\n     let omit_gdb_pretty_printer_section =\n         attr::contains_name(&cx.tcx.hir().krate_attrs(),\n                             \"omit_gdb_pretty_printer_section\");"}, {"sha": "ddcbf29da832b95dd9bab76446e1eb00b91498d1", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=9661a819688443b19dad91b85a4898a01a7b0858", "patch": "@@ -60,7 +60,7 @@ impl Hash for llvm::Metadata {\n }\n \n impl fmt::Debug for llvm::Metadata {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         (self as *const Self).fmt(f)\n     }\n }\n@@ -817,7 +817,7 @@ fn pointer_type_metadata(\n     }\n }\n \n-pub fn compile_unit_metadata(tcx: TyCtxt,\n+pub fn compile_unit_metadata(tcx: TyCtxt<'_, '_, '_>,\n                              codegen_unit_name: &str,\n                              debug_context: &CrateDebugContext<'ll, '_>)\n                              -> &'ll DIDescriptor {\n@@ -1162,7 +1162,7 @@ fn prepare_union_metadata(\n // sometimes emit the old style rather than emit something completely\n // useless when rust is compiled against LLVM 6 or older.  This\n // function decides which representation will be emitted.\n-fn use_enum_fallback(cx: &CodegenCx) -> bool {\n+fn use_enum_fallback(cx: &CodegenCx<'_, '_>) -> bool {\n     // On MSVC we have to use the fallback mode, because LLVM doesn't\n     // lower variant parts to PDB.\n     return cx.sess().target.target.options.is_like_msvc\n@@ -1736,7 +1736,7 @@ fn prepare_enum_metadata(\n         }),\n     );\n \n-    fn get_enum_discriminant_name(cx: &CodegenCx,\n+    fn get_enum_discriminant_name(cx: &CodegenCx<'_, '_>,\n                                   def_id: DefId)\n                                   -> InternedString {\n         cx.tcx.item_name(def_id)\n@@ -1863,7 +1863,7 @@ fn compute_type_parameters(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>) -> Option<&'\n     }\n     return Some(create_DIArray(DIB(cx), &[]));\n \n-    fn get_parameter_names(cx: &CodegenCx,\n+    fn get_parameter_names(cx: &CodegenCx<'_, '_>,\n                            generics: &ty::Generics)\n                            -> Vec<InternedString> {\n         let mut names = generics.parent.map_or(vec![], |def_id| {"}, {"sha": "ae6e16b31e7aa13b6616440e6b475f33fa478e52", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=9661a819688443b19dad91b85a4898a01a7b0858", "patch": "@@ -103,7 +103,7 @@ impl<'a, 'tcx> CrateDebugContext<'a, 'tcx> {\n }\n \n /// Creates any deferred debug metadata nodes\n-pub fn finalize(cx: &CodegenCx) {\n+pub fn finalize(cx: &CodegenCx<'_, '_>) {\n     if cx.dbg_cx.is_none() {\n         return;\n     }\n@@ -233,7 +233,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         instance: Instance<'tcx>,\n         sig: ty::FnSig<'tcx>,\n         llfn: &'ll Value,\n-        mir: &mir::Mir,\n+        mir: &mir::Mir<'_>,\n     ) -> FunctionDebugContext<&'ll DISubprogram> {\n         if self.sess().opts.debuginfo == DebugInfo::None {\n             return FunctionDebugContext::DebugInfoDisabled;\n@@ -455,7 +455,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             return create_DIArray(DIB(cx), &template_params[..]);\n         }\n \n-        fn get_parameter_names(cx: &CodegenCx,\n+        fn get_parameter_names(cx: &CodegenCx<'_, '_>,\n                                generics: &ty::Generics)\n                                -> Vec<InternedString> {\n             let mut names = generics.parent.map_or(vec![], |def_id| {\n@@ -518,7 +518,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n     fn create_mir_scopes(\n         &self,\n-        mir: &mir::Mir,\n+        mir: &mir::Mir<'_>,\n         debug_context: &FunctionDebugContext<&'ll DISubprogram>,\n     ) -> IndexVec<mir::SourceScope, MirDebugScope<&'ll DIScope>> {\n         create_scope_map::create_mir_scopes(self, mir, debug_context)"}, {"sha": "32e930ac44c850a007c6e5711bddd5386f5301be", "filename": "src/librustc_codegen_llvm/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs?ref=9661a819688443b19dad91b85a4898a01a7b0858", "patch": "@@ -178,7 +178,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         }\n     }\n \n-    fn push_item_name(cx: &CodegenCx,\n+    fn push_item_name(cx: &CodegenCx<'_, '_>,\n                       def_id: DefId,\n                       qualified: bool,\n                       output: &mut String) {"}, {"sha": "c64e0d9806b2930653f9f2907fba2c188cff2567", "filename": "src/librustc_codegen_llvm/debuginfo/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs?ref=9661a819688443b19dad91b85a4898a01a7b0858", "patch": "@@ -13,7 +13,7 @@ use rustc_codegen_ssa::traits::*;\n \n use syntax_pos::Span;\n \n-pub fn is_node_local_to_unit(cx: &CodegenCx, def_id: DefId) -> bool\n+pub fn is_node_local_to_unit(cx: &CodegenCx<'_, '_>, def_id: DefId) -> bool\n {\n     // The is_local_to_unit flag indicates whether a function is local to the\n     // current compilation unit (i.e., if it is *static* in the C-sense). The\n@@ -37,7 +37,7 @@ pub fn create_DIArray(\n }\n \n /// Returns syntax_pos::Loc corresponding to the beginning of the span\n-pub fn span_start(cx: &CodegenCx, span: Span) -> syntax_pos::Loc {\n+pub fn span_start(cx: &CodegenCx<'_, '_>, span: Span) -> syntax_pos::Loc {\n     cx.sess().source_map().lookup_char_pos(span.lo())\n }\n "}, {"sha": "d1cbe1d4dd6866c44880432ada15a6e69a6c7ea5", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=9661a819688443b19dad91b85a4898a01a7b0858", "patch": "@@ -1251,8 +1251,8 @@ fn generic_simd_intrinsic(\n \n     fn simd_simple_float_intrinsic(\n         name: &str,\n-        in_elem: &::rustc::ty::TyS,\n-        in_ty: &::rustc::ty::TyS,\n+        in_elem: &::rustc::ty::TyS<'_>,\n+        in_ty: &::rustc::ty::TyS<'_>,\n         in_len: usize,\n         bx: &mut Builder<'a, 'll, 'tcx>,\n         span: Span,\n@@ -1362,7 +1362,7 @@ fn generic_simd_intrinsic(\n     // FIXME: use:\n     //  https://github.com/llvm-mirror/llvm/blob/master/include/llvm/IR/Function.h#L182\n     //  https://github.com/llvm-mirror/llvm/blob/master/include/llvm/IR/Intrinsics.h#L81\n-    fn llvm_vector_str(elem_ty: ty::Ty, vec_len: usize, no_pointers: usize) -> String {\n+    fn llvm_vector_str(elem_ty: ty::Ty<'_>, vec_len: usize, no_pointers: usize) -> String {\n         let p0s: String = \"p0\".repeat(no_pointers);\n         match elem_ty.sty {\n             ty::Int(v) => format!(\"v{}{}i{}\", vec_len, p0s, v.bit_width().unwrap()),\n@@ -1372,7 +1372,7 @@ fn generic_simd_intrinsic(\n         }\n     }\n \n-    fn llvm_vector_ty(cx: &CodegenCx<'ll, '_>, elem_ty: ty::Ty, vec_len: usize,\n+    fn llvm_vector_ty(cx: &CodegenCx<'ll, '_>, elem_ty: ty::Ty<'_>, vec_len: usize,\n                       mut no_pointers: usize) -> &'ll Type {\n         // FIXME: use cx.layout_of(ty).llvm_type() ?\n         let mut elem_ty = match elem_ty.sty {\n@@ -1418,15 +1418,15 @@ fn generic_simd_intrinsic(\n                  in_ty, ret_ty);\n \n         // This counts how many pointers\n-        fn ptr_count(t: ty::Ty) -> usize {\n+        fn ptr_count(t: ty::Ty<'_>) -> usize {\n             match t.sty {\n                 ty::RawPtr(p) => 1 + ptr_count(p.ty),\n                 _ => 0,\n             }\n         }\n \n         // Non-ptr type\n-        fn non_ptr(t: ty::Ty) -> ty::Ty {\n+        fn non_ptr(t: ty::Ty<'_>) -> ty::Ty<'_> {\n             match t.sty {\n                 ty::RawPtr(p) => non_ptr(p.ty),\n                 _ => t,\n@@ -1517,15 +1517,15 @@ fn generic_simd_intrinsic(\n                  arg_tys[2].simd_size(tcx));\n \n         // This counts how many pointers\n-        fn ptr_count(t: ty::Ty) -> usize {\n+        fn ptr_count(t: ty::Ty<'_>) -> usize {\n             match t.sty {\n                 ty::RawPtr(p) => 1 + ptr_count(p.ty),\n                 _ => 0,\n             }\n         }\n \n         // Non-ptr type\n-        fn non_ptr(t: ty::Ty) -> ty::Ty {\n+        fn non_ptr(t: ty::Ty<'_>) -> ty::Ty<'_> {\n             match t.sty {\n                 ty::RawPtr(p) => non_ptr(p.ty),\n                 _ => t,\n@@ -1901,7 +1901,7 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n // Returns None if the type is not an integer\n // FIXME: there\u2019s multiple of this functions, investigate using some of the already existing\n // stuffs.\n-fn int_type_width_signed(ty: Ty, cx: &CodegenCx) -> Option<(u64, bool)> {\n+fn int_type_width_signed(ty: Ty<'_>, cx: &CodegenCx<'_, '_>) -> Option<(u64, bool)> {\n     match ty.sty {\n         ty::Int(t) => Some((match t {\n             ast::IntTy::Isize => cx.tcx.sess.target.isize_ty.bit_width().unwrap() as u64,"}, {"sha": "5b8c7461bcb60ed3aa667beb59b7bcc705c29b5e", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=9661a819688443b19dad91b85a4898a01a7b0858", "patch": "@@ -23,7 +23,6 @@\n #![feature(static_nobundle)]\n #![deny(rust_2018_idioms)]\n #![allow(explicit_outlives_requirements)]\n-#![allow(elided_lifetimes_in_paths)]\n \n use back::write::create_target_machine;\n use syntax_pos::symbol::Symbol;\n@@ -114,7 +113,7 @@ mod va_arg;\n pub struct LlvmCodegenBackend(());\n \n impl ExtraBackendMethods for LlvmCodegenBackend {\n-    fn new_metadata(&self, tcx: TyCtxt, mod_name: &str) -> ModuleLlvm {\n+    fn new_metadata(&self, tcx: TyCtxt<'_, '_, '_>, mod_name: &str) -> ModuleLlvm {\n         ModuleLlvm::new(tcx, mod_name)\n     }\n     fn write_metadata<'b, 'gcx>(\n@@ -124,7 +123,12 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n     ) -> EncodedMetadata {\n         base::write_metadata(tcx, metadata)\n     }\n-    fn codegen_allocator(&self, tcx: TyCtxt, mods: &mut ModuleLlvm, kind: AllocatorKind) {\n+    fn codegen_allocator(\n+        &self,\n+        tcx: TyCtxt<'_, '_, '_>,\n+        mods: &mut ModuleLlvm,\n+        kind: AllocatorKind\n+    ) {\n         unsafe { allocator::codegen(tcx, mods, kind) }\n     }\n     fn compile_codegen_unit<'a, 'tcx: 'a>(\n@@ -280,14 +284,14 @@ impl CodegenBackend for LlvmCodegenBackend {\n         box metadata::LlvmMetadataLoader\n     }\n \n-    fn provide(&self, providers: &mut ty::query::Providers) {\n+    fn provide(&self, providers: &mut ty::query::Providers<'_>) {\n         rustc_codegen_utils::symbol_names::provide(providers);\n         rustc_codegen_ssa::back::symbol_export::provide(providers);\n         rustc_codegen_ssa::base::provide_both(providers);\n         attributes::provide(providers);\n     }\n \n-    fn provide_extern(&self, providers: &mut ty::query::Providers) {\n+    fn provide_extern(&self, providers: &mut ty::query::Providers<'_>) {\n         rustc_codegen_ssa::back::symbol_export::provide_extern(providers);\n         rustc_codegen_ssa::base::provide_both(providers);\n         attributes::provide_extern(providers);\n@@ -362,7 +366,7 @@ unsafe impl Send for ModuleLlvm { }\n unsafe impl Sync for ModuleLlvm { }\n \n impl ModuleLlvm {\n-    fn new(tcx: TyCtxt, mod_name: &str) -> Self {\n+    fn new(tcx: TyCtxt<'_, '_, '_>, mod_name: &str) -> Self {\n         unsafe {\n             let llcx = llvm::LLVMRustContextCreate(tcx.sess.fewer_names());\n             let llmod_raw = context::create_module(tcx, llcx, mod_name) as *const _;"}, {"sha": "0a8bb3250c5d5a5e7cdc563813f6142ebe6f57f5", "filename": "src/librustc_codegen_llvm/llvm/archive_ro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fllvm%2Farchive_ro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fllvm%2Farchive_ro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Farchive_ro.rs?ref=9661a819688443b19dad91b85a4898a01a7b0858", "patch": "@@ -36,7 +36,7 @@ impl ArchiveRO {\n         };\n     }\n \n-    pub fn iter(&self) -> Iter {\n+    pub fn iter(&self) -> Iter<'_> {\n         unsafe {\n             Iter {\n                 raw: super::LLVMRustArchiveIteratorNew(self.raw),"}, {"sha": "2ad6d9c053a2035575cbf0427d35ec4f006a498e", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=9661a819688443b19dad91b85a4898a01a7b0858", "patch": "@@ -1283,7 +1283,7 @@ extern \"C\" {\n                               SingleThreaded: Bool)\n                               -> &'a Value;\n \n-    pub fn LLVMRustBuildAtomicFence(B: &Builder,\n+    pub fn LLVMRustBuildAtomicFence(B: &Builder<'_>,\n                                     Order: AtomicOrdering,\n                                     Scope: SynchronizationScope);\n \n@@ -1311,17 +1311,17 @@ extern \"C\" {\n     pub fn LLVMPassManagerBuilderUseInlinerWithThreshold(PMB: &PassManagerBuilder,\n                                                          threshold: c_uint);\n     pub fn LLVMPassManagerBuilderPopulateModulePassManager(PMB: &PassManagerBuilder,\n-                                                           PM: &PassManager);\n+                                                           PM: &PassManager<'_>);\n \n     pub fn LLVMPassManagerBuilderPopulateFunctionPassManager(PMB: &PassManagerBuilder,\n-                                                             PM: &PassManager);\n+                                                             PM: &PassManager<'_>);\n     pub fn LLVMPassManagerBuilderPopulateLTOPassManager(PMB: &PassManagerBuilder,\n-                                                        PM: &PassManager,\n+                                                        PM: &PassManager<'_>,\n                                                         Internalize: Bool,\n                                                         RunInliner: Bool);\n     pub fn LLVMRustPassManagerBuilderPopulateThinLTOPassManager(\n         PMB: &PassManagerBuilder,\n-        PM: &PassManager);\n+        PM: &PassManager<'_>);\n \n     // Stuff that's in rustllvm/ because it's not upstream yet.\n \n@@ -1340,11 +1340,11 @@ extern \"C\" {\n     /// list:\n     pub fn LLVMIsSectionIteratorAtEnd(ObjFile: &'a ObjectFile, SI: &SectionIterator<'a>) -> Bool;\n     /// Moves the section iterator to point to the next section.\n-    pub fn LLVMMoveToNextSection(SI: &SectionIterator);\n+    pub fn LLVMMoveToNextSection(SI: &SectionIterator<'_>);\n     /// Returns the current section size.\n-    pub fn LLVMGetSectionSize(SI: &SectionIterator) -> c_ulonglong;\n+    pub fn LLVMGetSectionSize(SI: &SectionIterator<'_>) -> c_ulonglong;\n     /// Returns the current section contents as a string buffer.\n-    pub fn LLVMGetSectionContents(SI: &SectionIterator) -> *const c_char;\n+    pub fn LLVMGetSectionContents(SI: &SectionIterator<'_>) -> *const c_char;\n \n     /// Reads the given file and returns it as a memory buffer. Use\n     /// LLVMDisposeMemoryBuffer() to get rid of it.\n@@ -1392,7 +1392,7 @@ extern \"C\" {\n \n     pub fn LLVMRustDIBuilderDispose(Builder: &'a mut DIBuilder<'a>);\n \n-    pub fn LLVMRustDIBuilderFinalize(Builder: &DIBuilder);\n+    pub fn LLVMRustDIBuilderFinalize(Builder: &DIBuilder<'_>);\n \n     pub fn LLVMRustDIBuilderCreateCompileUnit(Builder: &DIBuilder<'a>,\n                                               Lang: c_uint,\n@@ -1635,7 +1635,7 @@ extern \"C\" {\n \n     pub fn LLVMRustPassKind(Pass: &Pass) -> PassKind;\n     pub fn LLVMRustFindAndCreatePass(Pass: *const c_char) -> Option<&'static mut Pass>;\n-    pub fn LLVMRustAddPass(PM: &PassManager, Pass: &'static mut Pass);\n+    pub fn LLVMRustAddPass(PM: &PassManager<'_>, Pass: &'static mut Pass);\n \n     pub fn LLVMRustHasFeature(T: &TargetMachine, s: *const c_char) -> bool;\n \n@@ -1700,13 +1700,13 @@ extern \"C\" {\n     pub fn LLVMRustArchiveIteratorNext(\n         AIR: &ArchiveIterator<'a>,\n     ) -> Option<&'a mut ArchiveChild<'a>>;\n-    pub fn LLVMRustArchiveChildName(ACR: &ArchiveChild, size: &mut size_t) -> *const c_char;\n-    pub fn LLVMRustArchiveChildData(ACR: &ArchiveChild, size: &mut size_t) -> *const c_char;\n+    pub fn LLVMRustArchiveChildName(ACR: &ArchiveChild<'_>, size: &mut size_t) -> *const c_char;\n+    pub fn LLVMRustArchiveChildData(ACR: &ArchiveChild<'_>, size: &mut size_t) -> *const c_char;\n     pub fn LLVMRustArchiveChildFree(ACR: &'a mut ArchiveChild<'a>);\n     pub fn LLVMRustArchiveIteratorFree(AIR: &'a mut ArchiveIterator<'a>);\n     pub fn LLVMRustDestroyArchive(AR: &'static mut Archive);\n \n-    pub fn LLVMRustGetSectionName(SI: &SectionIterator, data: &mut *const c_char) -> size_t;\n+    pub fn LLVMRustGetSectionName(SI: &SectionIterator<'_>, data: &mut *const c_char) -> size_t;\n \n     #[allow(improper_ctypes)]\n     pub fn LLVMRustWriteTwineToString(T: &Twine, s: &RustString);\n@@ -1742,7 +1742,7 @@ extern \"C\" {\n \n     pub fn LLVMRustWriteArchive(Dst: *const c_char,\n                                 NumMembers: size_t,\n-                                Members: *const &RustArchiveMember,\n+                                Members: *const &RustArchiveMember<'_>,\n                                 WriteSymbtab: bool,\n                                 Kind: ArchiveKind)\n                                 -> LLVMRustResult;\n@@ -1815,7 +1815,7 @@ extern \"C\" {\n     pub fn LLVMRustThinLTOPatchDICompileUnit(M: &Module, CU: *mut c_void);\n \n     pub fn LLVMRustLinkerNew(M: &'a Module) -> &'a mut Linker<'a>;\n-    pub fn LLVMRustLinkerAdd(linker: &Linker,\n+    pub fn LLVMRustLinkerAdd(linker: &Linker<'_>,\n                              bytecode: *const c_char,\n                              bytecode_len: usize) -> bool;\n     pub fn LLVMRustLinkerFree(linker: &'a mut Linker<'a>);"}, {"sha": "d5424fa45916660469ce49e5f842882681fd1666", "filename": "src/librustc_codegen_llvm/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_.rs?ref=9661a819688443b19dad91b85a4898a01a7b0858", "patch": "@@ -31,7 +31,7 @@ impl PartialEq for Type {\n }\n \n impl fmt::Debug for Type {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(&llvm::build_string(|s| unsafe {\n             llvm::LLVMRustWriteTypeToString(self, s);\n         }).expect(\"non-UTF8 type description from LLVM\"))"}, {"sha": "eadbe754e8e41cdaa07bcaf08587436e995ba45f", "filename": "src/librustc_codegen_llvm/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9661a819688443b19dad91b85a4898a01a7b0858/src%2Flibrustc_codegen_llvm%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fvalue.rs?ref=9661a819688443b19dad91b85a4898a01a7b0858", "patch": "@@ -22,7 +22,7 @@ impl Hash for Value {\n \n \n impl fmt::Debug for Value {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(&llvm::build_string(|s| unsafe {\n             llvm::LLVMRustWriteValueToString(self, s);\n         }).expect(\"non-UTF8 value description from LLVM\"))"}]}