{"sha": "f84deffd72d28143bf95c91563121de9b41c76ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NGRlZmZkNzJkMjgxNDNiZjk1YzkxNTYzMTIxZGU5YjQxYzc2YWU=", "commit": {"author": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2020-03-16T13:51:44Z"}, "committer": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2020-03-17T13:47:05Z"}, "message": "Support loading OUT_DIR for CLI runs", "tree": {"sha": "283cbe1a1f6d37e8f1225ba760823636dbc9e00a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/283cbe1a1f6d37e8f1225ba760823636dbc9e00a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f84deffd72d28143bf95c91563121de9b41c76ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f84deffd72d28143bf95c91563121de9b41c76ae", "html_url": "https://github.com/rust-lang/rust/commit/f84deffd72d28143bf95c91563121de9b41c76ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f84deffd72d28143bf95c91563121de9b41c76ae/comments", "author": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e7dbb1abd8ca502749d734ef25ba3359dc7d11b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e7dbb1abd8ca502749d734ef25ba3359dc7d11b", "html_url": "https://github.com/rust-lang/rust/commit/9e7dbb1abd8ca502749d734ef25ba3359dc7d11b"}], "stats": {"total": 129, "additions": 81, "deletions": 48}, "files": [{"sha": "3cf394bb41ff2043487410dda6c34df4096ab7c4", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f84deffd72d28143bf95c91563121de9b41c76ae/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84deffd72d28143bf95c91563121de9b41c76ae/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=f84deffd72d28143bf95c91563121de9b41c76ae", "patch": "@@ -28,10 +28,12 @@ pub(crate) enum Command {\n         only: Option<String>,\n         with_deps: bool,\n         path: PathBuf,\n+        load_output_dirs: bool,\n     },\n     Bench {\n         path: PathBuf,\n         what: BenchWhat,\n+        load_output_dirs: bool,\n     },\n     RunServer,\n     Version,\n@@ -136,8 +138,9 @@ USAGE:\n     rust-analyzer analysis-stats [FLAGS] [OPTIONS] [PATH]\n \n FLAGS:\n-    -h, --help            Prints help information\n+    -h, --help              Prints help information\n         --memory-usage\n+        --load-output-dirs  Load OUT_DIR values by running `cargo check` before analysis\n     -v, --verbose\n     -q, --quiet\n \n@@ -154,6 +157,7 @@ ARGS:\n                 let memory_usage = matches.contains(\"--memory-usage\");\n                 let only: Option<String> = matches.opt_value_from_str([\"-o\", \"--only\"])?;\n                 let with_deps: bool = matches.contains(\"--with-deps\");\n+                let load_output_dirs = matches.contains(\"--load-output-dirs\");\n                 let path = {\n                     let mut trailing = matches.free()?;\n                     if trailing.len() != 1 {\n@@ -162,7 +166,7 @@ ARGS:\n                     trailing.pop().unwrap().into()\n                 };\n \n-                Command::Stats { randomize, memory_usage, only, with_deps, path }\n+                Command::Stats { randomize, memory_usage, only, with_deps, path, load_output_dirs }\n             }\n             \"analysis-bench\" => {\n                 if matches.contains([\"-h\", \"--help\"]) {\n@@ -174,7 +178,8 @@ USAGE:\n     rust-analyzer analysis-bench [FLAGS] [OPTIONS]\n \n FLAGS:\n-    -h, --help        Prints help information\n+    -h, --help          Prints help information\n+    --load-output-dirs  Load OUT_DIR values by running `cargo check` before analysis\n     -v, --verbose\n \n OPTIONS:\n@@ -201,7 +206,8 @@ ARGS:\n                         \"exactly one of  `--highlight`, `--complete` or `--goto-def` must be set\"\n                     ),\n                 };\n-                Command::Bench { path, what }\n+                let load_output_dirs = matches.contains(\"--load-output-dirs\");\n+                Command::Bench { path, what, load_output_dirs }\n             }\n             _ => {\n                 eprintln!("}, {"sha": "a744a6695ddc6029229a4e3aa9354202a8162e75", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f84deffd72d28143bf95c91563121de9b41c76ae/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84deffd72d28143bf95c91563121de9b41c76ae/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=f84deffd72d28143bf95c91563121de9b41c76ae", "patch": "@@ -19,19 +19,25 @@ fn main() -> Result<()> {\n         args::Command::Parse { no_dump } => cli::parse(no_dump)?,\n         args::Command::Symbols => cli::symbols()?,\n         args::Command::Highlight { rainbow } => cli::highlight(rainbow)?,\n-        args::Command::Stats { randomize, memory_usage, only, with_deps, path } => {\n-            cli::analysis_stats(\n-                args.verbosity,\n-                memory_usage,\n-                path.as_ref(),\n-                only.as_ref().map(String::as_ref),\n-                with_deps,\n-                randomize,\n-            )?\n-        }\n-\n-        args::Command::Bench { path, what } => {\n-            cli::analysis_bench(args.verbosity, path.as_ref(), what)?\n+        args::Command::Stats {\n+            randomize,\n+            memory_usage,\n+            only,\n+            with_deps,\n+            path,\n+            load_output_dirs,\n+        } => cli::analysis_stats(\n+            args.verbosity,\n+            memory_usage,\n+            path.as_ref(),\n+            only.as_ref().map(String::as_ref),\n+            with_deps,\n+            randomize,\n+            load_output_dirs,\n+        )?,\n+\n+        args::Command::Bench { path, what, load_output_dirs } => {\n+            cli::analysis_bench(args.verbosity, path.as_ref(), what, load_output_dirs)?\n         }\n \n         args::Command::RunServer => run_server()?,"}, {"sha": "7164b0adeb26faffd28a8ba5bae20e498f6f4799", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f84deffd72d28143bf95c91563121de9b41c76ae/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84deffd72d28143bf95c91563121de9b41c76ae/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=f84deffd72d28143bf95c91563121de9b41c76ae", "patch": "@@ -42,12 +42,17 @@ fn rsplit_at_char(s: &str, c: char) -> Result<(&str, &str)> {\n     Ok((&s[..idx], &s[idx + 1..]))\n }\n \n-pub fn analysis_bench(verbosity: Verbosity, path: &Path, what: BenchWhat) -> Result<()> {\n+pub fn analysis_bench(\n+    verbosity: Verbosity,\n+    path: &Path,\n+    what: BenchWhat,\n+    load_output_dirs: bool,\n+) -> Result<()> {\n     ra_prof::init();\n \n     let start = Instant::now();\n     eprint!(\"loading: \");\n-    let (mut host, roots) = load_cargo(path)?;\n+    let (mut host, roots) = load_cargo(path, load_output_dirs)?;\n     let db = host.raw_database();\n     eprintln!(\"{:?}\\n\", start.elapsed());\n "}, {"sha": "27459be8c871c8b289ecd0a8e64a7182333c1ed2", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f84deffd72d28143bf95c91563121de9b41c76ae/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84deffd72d28143bf95c91563121de9b41c76ae/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=f84deffd72d28143bf95c91563121de9b41c76ae", "patch": "@@ -23,9 +23,10 @@ pub fn analysis_stats(\n     only: Option<&str>,\n     with_deps: bool,\n     randomize: bool,\n+    load_output_dirs: bool,\n ) -> Result<()> {\n     let db_load_time = Instant::now();\n-    let (mut host, roots) = load_cargo(path)?;\n+    let (mut host, roots) = load_cargo(path, load_output_dirs)?;\n     let db = host.raw_database();\n     println!(\"Database loaded, {} roots, {:?}\", roots.len(), db_load_time.elapsed());\n     let analysis_time = Instant::now();"}, {"sha": "54e2fa1a7c8b38bfce938a9a047218d5ae9b0278", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 43, "deletions": 28, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/f84deffd72d28143bf95c91563121de9b41c76ae/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84deffd72d28143bf95c91563121de9b41c76ae/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=f84deffd72d28143bf95c91563121de9b41c76ae", "patch": "@@ -1,13 +1,13 @@\n //! Loads a Cargo project into a static instance of analysis, without support\n //! for incorporating changes.\n \n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n \n use anyhow::Result;\n use crossbeam_channel::{unbounded, Receiver};\n-use ra_db::{CrateGraph, FileId, SourceRootId};\n+use ra_db::{ExternSourceId, FileId, SourceRootId};\n use ra_ide::{AnalysisChange, AnalysisHost};\n-use ra_project_model::{get_rustc_cfg_options, PackageRoot, ProjectWorkspace};\n+use ra_project_model::{get_rustc_cfg_options, CargoFeatures, PackageRoot, ProjectWorkspace};\n use ra_vfs::{RootEntry, Vfs, VfsChange, VfsTask, Watch};\n use rustc_hash::{FxHashMap, FxHashSet};\n \n@@ -22,10 +22,21 @@ fn vfs_root_to_id(r: ra_vfs::VfsRoot) -> SourceRootId {\n \n pub(crate) fn load_cargo(\n     root: &Path,\n+    load_out_dirs_from_check: bool,\n ) -> Result<(AnalysisHost, FxHashMap<SourceRootId, PackageRoot>)> {\n     let root = std::env::current_dir()?.join(root);\n-    let ws = ProjectWorkspace::discover(root.as_ref(), &Default::default())?;\n-    let project_roots = ws.to_roots();\n+    let ws = ProjectWorkspace::discover(\n+        root.as_ref(),\n+        &CargoFeatures { load_out_dirs_from_check, ..Default::default() },\n+    )?;\n+\n+    let mut extern_dirs = FxHashSet::default();\n+    extern_dirs.extend(ws.out_dirs());\n+\n+    let mut project_roots = ws.to_roots();\n+    project_roots\n+        .extend(extern_dirs.iter().map(|path| PackageRoot::new(path.to_path_buf(), false)));\n+\n     let (sender, receiver) = unbounded();\n     let sender = Box::new(move |t| sender.send(t).unwrap());\n     let (mut vfs, roots) = Vfs::new(\n@@ -44,25 +55,6 @@ pub(crate) fn load_cargo(\n         Watch(false),\n     );\n \n-    // FIXME: cfg options?\n-    let default_cfg_options = {\n-        let mut opts = get_rustc_cfg_options();\n-        opts.insert_atom(\"test\".into());\n-        opts.insert_atom(\"debug_assertion\".into());\n-        opts\n-    };\n-\n-    // FIXME: outdirs?\n-    let extern_source_roots = FxHashMap::default();\n-\n-    let crate_graph =\n-        ws.to_crate_graph(&default_cfg_options, &extern_source_roots, &mut |path: &Path| {\n-            let vfs_file = vfs.load(path);\n-            log::debug!(\"vfs file {:?} -> {:?}\", path, vfs_file);\n-            vfs_file.map(vfs_file_to_id)\n-        });\n-    log::debug!(\"crate graph: {:?}\", crate_graph);\n-\n     let source_roots = roots\n         .iter()\n         .map(|&vfs_root| {\n@@ -75,23 +67,24 @@ pub(crate) fn load_cargo(\n             (source_root_id, project_root)\n         })\n         .collect::<FxHashMap<_, _>>();\n-    let host = load(&source_roots, crate_graph, &mut vfs, receiver);\n+    let host = load(&source_roots, ws, &mut vfs, receiver, extern_dirs);\n     Ok((host, source_roots))\n }\n \n pub(crate) fn load(\n     source_roots: &FxHashMap<SourceRootId, PackageRoot>,\n-    crate_graph: CrateGraph,\n+    ws: ProjectWorkspace,\n     vfs: &mut Vfs,\n     receiver: Receiver<VfsTask>,\n+    extern_dirs: FxHashSet<PathBuf>,\n ) -> AnalysisHost {\n     let lru_cap = std::env::var(\"RA_LRU_CAP\").ok().and_then(|it| it.parse::<usize>().ok());\n     let mut host = AnalysisHost::new(lru_cap);\n     let mut analysis_change = AnalysisChange::new();\n-    analysis_change.set_crate_graph(crate_graph);\n \n     // wait until Vfs has loaded all roots\n     let mut roots_loaded = FxHashSet::default();\n+    let mut extern_source_roots = FxHashMap::default();\n     for task in receiver {\n         vfs.handle_task(task);\n         let mut done = false;\n@@ -111,6 +104,11 @@ pub(crate) fn load(\n                         source_roots[&source_root_id].path().display().to_string(),\n                     );\n \n+                    let vfs_root_path = vfs.root2path(root);\n+                    if extern_dirs.contains(&vfs_root_path) {\n+                        extern_source_roots.insert(vfs_root_path, ExternSourceId(root.0));\n+                    }\n+\n                     let mut file_map = FxHashMap::default();\n                     for (vfs_file, path, text) in files {\n                         let file_id = vfs_file_to_id(vfs_file);\n@@ -137,6 +135,23 @@ pub(crate) fn load(\n         }\n     }\n \n+    // FIXME: cfg options?\n+    let default_cfg_options = {\n+        let mut opts = get_rustc_cfg_options();\n+        opts.insert_atom(\"test\".into());\n+        opts.insert_atom(\"debug_assertion\".into());\n+        opts\n+    };\n+\n+    let crate_graph =\n+        ws.to_crate_graph(&default_cfg_options, &extern_source_roots, &mut |path: &Path| {\n+            let vfs_file = vfs.load(path);\n+            log::debug!(\"vfs file {:?} -> {:?}\", path, vfs_file);\n+            vfs_file.map(vfs_file_to_id)\n+        });\n+    log::debug!(\"crate graph: {:?}\", crate_graph);\n+    analysis_change.set_crate_graph(crate_graph);\n+\n     host.apply_change(analysis_change);\n     host\n }\n@@ -150,7 +165,7 @@ mod tests {\n     #[test]\n     fn test_loading_rust_analyzer() {\n         let path = Path::new(env!(\"CARGO_MANIFEST_DIR\")).parent().unwrap().parent().unwrap();\n-        let (host, _roots) = load_cargo(path).unwrap();\n+        let (host, _roots) = load_cargo(path, false).unwrap();\n         let n_crates = Crate::all(host.raw_database()).len();\n         // RA has quite a few crates, but the exact count doesn't matter\n         assert!(n_crates > 20);"}]}