{"sha": "221f677d70809bef43e22b689e41de88b31080f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMWY2NzdkNzA4MDliZWY0M2UyMmI2ODllNDFkZTg4YjMxMDgwZjQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-22T14:41:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-22T14:41:11Z"}, "message": "Rollup merge of #71336 - ecstatic-morse:check-consts-asm, r=oli-obk\n\nExhaustively match on `{Statement,Terminator}Kind` during const checking\n\nThis adds a pre-monomorphization error for inline assembly in a const context as well.\n\nr? @oli-obk", "tree": {"sha": "8aa890acc93b0261c8fad215c93d7e99ca349d2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8aa890acc93b0261c8fad215c93d7e99ca349d2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/221f677d70809bef43e22b689e41de88b31080f4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeoFeHCRBK7hj4Ov3rIwAAdHIIAFvvfStjxXod/cavGC4PicmM\nJpP6OZ+GRV7vq5FcPpHd+eXD2xciUIz4jwbcH2MO7yicCUaNj7UfNeAAz2ycA+c8\nr7+TgHKuzK+fQ3ZLrKzvlluYbYCn2X5m2rN1o0auqq0o9rgyN6QI1VSOwQFkhOp8\nT/pYNtPdxEZY7kJq78eOYbvnqYpngWDEeERGPQL8WDRcOt24wsgALF53ZGqrex+8\nfJDAiUi2576nWC4wpB+9ox5G7MM9p2BuHKaYSemq7QcUEJsBCHpQbPhRNkNwMmNa\napwwnbtyg1HTbYdezOzyOxlC9OoQJ5kKFvtbU0FmKErC4+rpfq30IbtWAxeXo+A=\n=us9D\n-----END PGP SIGNATURE-----\n", "payload": "tree 8aa890acc93b0261c8fad215c93d7e99ca349d2f\nparent e69141a52f61d3a48fb990d309a7b89ac78a2924\nparent 152c06569b6d785cea2d408c3ebd93aaee09772d\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587566471 +0200\ncommitter GitHub <noreply@github.com> 1587566471 +0200\n\nRollup merge of #71336 - ecstatic-morse:check-consts-asm, r=oli-obk\n\nExhaustively match on `{Statement,Terminator}Kind` during const checking\n\nThis adds a pre-monomorphization error for inline assembly in a const context as well.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/221f677d70809bef43e22b689e41de88b31080f4", "html_url": "https://github.com/rust-lang/rust/commit/221f677d70809bef43e22b689e41de88b31080f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/221f677d70809bef43e22b689e41de88b31080f4/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e69141a52f61d3a48fb990d309a7b89ac78a2924", "url": "https://api.github.com/repos/rust-lang/rust/commits/e69141a52f61d3a48fb990d309a7b89ac78a2924", "html_url": "https://github.com/rust-lang/rust/commit/e69141a52f61d3a48fb990d309a7b89ac78a2924"}, {"sha": "152c06569b6d785cea2d408c3ebd93aaee09772d", "url": "https://api.github.com/repos/rust-lang/rust/commits/152c06569b6d785cea2d408c3ebd93aaee09772d", "html_url": "https://github.com/rust-lang/rust/commit/152c06569b6d785cea2d408c3ebd93aaee09772d"}], "stats": {"total": 65, "additions": 59, "deletions": 6}, "files": [{"sha": "c4b94b70938d33505fb7b204a8738cd517108d06", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/221f677d70809bef43e22b689e41de88b31080f4/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221f677d70809bef43e22b689e41de88b31080f4/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=221f677d70809bef43e22b689e41de88b31080f4", "patch": "@@ -147,6 +147,10 @@ impl NonConstOp for IfOrMatch {\n     }\n }\n \n+#[derive(Debug)]\n+pub struct InlineAsm;\n+impl NonConstOp for InlineAsm {}\n+\n #[derive(Debug)]\n pub struct LiveDrop;\n impl NonConstOp for LiveDrop {"}, {"sha": "f77ff54ba1bb1cad90389ca799c4fb713ed46561", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/221f677d70809bef43e22b689e41de88b31080f4/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221f677d70809bef43e22b689e41de88b31080f4/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=221f677d70809bef43e22b689e41de88b31080f4", "patch": "@@ -478,14 +478,24 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n             StatementKind::Assign(..) | StatementKind::SetDiscriminant { .. } => {\n                 self.super_statement(statement, location);\n             }\n-            StatementKind::FakeRead(FakeReadCause::ForMatchedPlace, _) => {\n+\n+            StatementKind::FakeRead(\n+                FakeReadCause::ForMatchedPlace\n+                | FakeReadCause::ForMatchGuard\n+                | FakeReadCause::ForGuardBinding,\n+                _,\n+            ) => {\n+                self.super_statement(statement, location);\n                 self.check_op(ops::IfOrMatch);\n             }\n-            // FIXME(eddyb) should these really do nothing?\n-            StatementKind::FakeRead(..)\n+            StatementKind::LlvmInlineAsm { .. } => {\n+                self.super_statement(statement, location);\n+                self.check_op(ops::InlineAsm);\n+            }\n+\n+            StatementKind::FakeRead(FakeReadCause::ForLet | FakeReadCause::ForIndex, _)\n             | StatementKind::StorageLive(_)\n             | StatementKind::StorageDead(_)\n-            | StatementKind::LlvmInlineAsm { .. }\n             | StatementKind::Retag { .. }\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Nop => {}\n@@ -572,7 +582,19 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                 }\n             }\n \n-            _ => {}\n+            // FIXME: Some of these are only caught by `min_const_fn`, but should error here\n+            // instead.\n+            TerminatorKind::Abort\n+            | TerminatorKind::Assert { .. }\n+            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::FalseUnwind { .. }\n+            | TerminatorKind::GeneratorDrop\n+            | TerminatorKind::Goto { .. }\n+            | TerminatorKind::Resume\n+            | TerminatorKind::Return\n+            | TerminatorKind::SwitchInt { .. }\n+            | TerminatorKind::Unreachable\n+            | TerminatorKind::Yield { .. } => {}\n         }\n     }\n }"}, {"sha": "c2ab97e54f0c8252d8b4092fb71ad24208c51646", "filename": "src/test/ui/consts/inline_asm.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/221f677d70809bef43e22b689e41de88b31080f4/src%2Ftest%2Fui%2Fconsts%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221f677d70809bef43e22b689e41de88b31080f4/src%2Ftest%2Fui%2Fconsts%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finline_asm.rs?ref=221f677d70809bef43e22b689e41de88b31080f4", "patch": "@@ -0,0 +1,6 @@\n+#![feature(llvm_asm)]\n+\n+const _: () = unsafe { llvm_asm!(\"nop\") };\n+//~^ ERROR contains unimplemented expression type\n+\n+fn main() {}"}, {"sha": "0a064c8136651e45e1e33bf15ce2f73117de04e5", "filename": "src/test/ui/consts/inline_asm.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/221f677d70809bef43e22b689e41de88b31080f4/src%2Ftest%2Fui%2Fconsts%2Finline_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/221f677d70809bef43e22b689e41de88b31080f4/src%2Ftest%2Fui%2Fconsts%2Finline_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finline_asm.stderr?ref=221f677d70809bef43e22b689e41de88b31080f4", "patch": "@@ -0,0 +1,11 @@\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/inline_asm.rs:3:24\n+   |\n+LL | const _: () = unsafe { llvm_asm!(\"nop\") };\n+   |                        ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0019`."}, {"sha": "ddc4767b83aa1aba535c82980bd78627d570e6fc", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221f677d70809bef43e22b689e41de88b31080f4/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221f677d70809bef43e22b689e41de88b31080f4/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs?ref=221f677d70809bef43e22b689e41de88b31080f4", "patch": "@@ -11,4 +11,6 @@ static TEST_BAD: () = {\n     //~^ ERROR could not evaluate static initializer\n     //~| NOTE in this expansion of llvm_asm!\n     //~| NOTE inline assembly is not supported\n+    //~| WARN skipping const checks\n+    //~| NOTE in this expansion of llvm_asm!\n };"}, {"sha": "444a0172621e214022e94cc486efbe2e6083ad3f", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/221f677d70809bef43e22b689e41de88b31080f4/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/221f677d70809bef43e22b689e41de88b31080f4/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr?ref=221f677d70809bef43e22b689e41de88b31080f4", "patch": "@@ -1,3 +1,11 @@\n+warning: skipping const checks\n+  --> $DIR/inline_asm.rs:10:14\n+   |\n+LL |     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error[E0080]: could not evaluate static initializer\n   --> $DIR/inline_asm.rs:10:14\n    |\n@@ -6,6 +14,6 @@ LL |     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}]}