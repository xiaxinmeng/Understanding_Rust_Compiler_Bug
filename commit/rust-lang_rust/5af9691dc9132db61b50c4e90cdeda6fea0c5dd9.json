{"sha": "5af9691dc9132db61b50c4e90cdeda6fea0c5dd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZjk2OTFkYzkxMzJkYjYxYjUwYzRlOTBjZGVkYTZmZWEwYzVkZDk=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-08-11T13:54:31Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-08-12T19:43:00Z"}, "message": "Handle placeholder assoc types when Chalk produces them", "tree": {"sha": "fa1f8c46158271eb859928ed9da3eb389f861c09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa1f8c46158271eb859928ed9da3eb389f861c09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5af9691dc9132db61b50c4e90cdeda6fea0c5dd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5af9691dc9132db61b50c4e90cdeda6fea0c5dd9", "html_url": "https://github.com/rust-lang/rust/commit/5af9691dc9132db61b50c4e90cdeda6fea0c5dd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5af9691dc9132db61b50c4e90cdeda6fea0c5dd9/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d72b14cfe3606e9c55e488d74568471f981bb3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d72b14cfe3606e9c55e488d74568471f981bb3d", "html_url": "https://github.com/rust-lang/rust/commit/9d72b14cfe3606e9c55e488d74568471f981bb3d"}], "stats": {"total": 70, "additions": 67, "deletions": 3}, "files": [{"sha": "28727bb181e16bcfd9c82f9266573d6a3f1dc414", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5af9691dc9132db61b50c4e90cdeda6fea0c5dd9/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af9691dc9132db61b50c4e90cdeda6fea0c5dd9/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=5af9691dc9132db61b50c4e90cdeda6fea0c5dd9", "patch": "@@ -3181,6 +3181,55 @@ fn test<T: Trait>(t: T) { (*t)<|>; }\n     assert_eq!(t, \"i128\");\n }\n \n+#[test]\n+fn associated_type_placeholder() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+pub trait ApplyL {\n+    type Out;\n+}\n+\n+pub struct RefMutL<T>;\n+\n+impl<T> ApplyL for RefMutL<T> {\n+    type Out = <T as ApplyL>::Out;\n+}\n+\n+fn test<T: ApplyL>() {\n+    let y: <RefMutL<T> as ApplyL>::Out = no_matter;\n+    y<|>;\n+}\n+\"#,\n+    );\n+    // inside the generic function, the associated type gets normalized to a placeholder `ApplL::Out<T>` [https://rust-lang.github.io/rustc-guide/traits/associated-types.html#placeholder-associated-types].\n+    // FIXME: fix type parameter names going missing when going through Chalk\n+    assert_eq!(t, \"ApplyL::Out<[missing name]>\");\n+}\n+\n+#[test]\n+fn associated_type_placeholder_2() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+pub trait ApplyL {\n+    type Out;\n+}\n+fn foo<T: ApplyL>(t: T) -> <T as ApplyL>::Out;\n+\n+fn test<T: ApplyL>(t: T) {\n+    let y = foo(t);\n+    y<|>;\n+}\n+\"#,\n+    );\n+    // FIXME here Chalk doesn't normalize the type to a placeholder. I think we\n+    // need to add a rule like Normalize(<T as ApplyL>::Out -> ApplyL::Out<T>)\n+    // to the trait env ourselves here; probably Chalk can't do this by itself.\n+    // assert_eq!(t, \"ApplyL::Out<[missing name]>\");\n+    assert_eq!(t, \"{unknown}\");\n+}\n+\n fn type_at_pos(db: &MockDatabase, pos: FilePosition) -> String {\n     let file = db.parse(pos.file_id).ok().unwrap();\n     let expr = algo::find_node_at_offset::<ast::Expr>(file.syntax(), pos.offset).unwrap();"}, {"sha": "6df7094c580cb87ea7f0a8a4a9978850cbb461ce", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5af9691dc9132db61b50c4e90cdeda6fea0c5dd9/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af9691dc9132db61b50c4e90cdeda6fea0c5dd9/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=5af9691dc9132db61b50c4e90cdeda6fea0c5dd9", "patch": "@@ -45,8 +45,17 @@ impl ToChalk for Ty {\n     fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Ty {\n         match self {\n             Ty::Apply(apply_ty) => {\n-                let struct_id = apply_ty.ctor.to_chalk(db);\n-                let name = TypeName::TypeKindId(struct_id.into());\n+                let name = match apply_ty.ctor {\n+                    TypeCtor::AssociatedType(type_alias) => {\n+                        let type_id = type_alias.to_chalk(db);\n+                        TypeName::AssociatedType(type_id)\n+                    }\n+                    _ => {\n+                        // other TypeCtors get interned and turned into a chalk StructId\n+                        let struct_id = apply_ty.ctor.to_chalk(db);\n+                        TypeName::TypeKindId(struct_id.into())\n+                    }\n+                };\n                 let parameters = apply_ty.parameters.to_chalk(db);\n                 chalk_ir::ApplicationTy { name, parameters }.cast()\n             }\n@@ -79,15 +88,21 @@ impl ToChalk for Ty {\n     fn from_chalk(db: &impl HirDatabase, chalk: chalk_ir::Ty) -> Self {\n         match chalk {\n             chalk_ir::Ty::Apply(apply_ty) => {\n+                // FIXME this is kind of hacky due to the fact that\n+                // TypeName::Placeholder is a Ty::Param on our side\n                 match apply_ty.name {\n                     TypeName::TypeKindId(TypeKindId::StructId(struct_id)) => {\n                         let ctor = from_chalk(db, struct_id);\n                         let parameters = from_chalk(db, apply_ty.parameters);\n                         Ty::Apply(ApplicationTy { ctor, parameters })\n                     }\n+                    TypeName::AssociatedType(type_id) => {\n+                        let ctor = TypeCtor::AssociatedType(from_chalk(db, type_id));\n+                        let parameters = from_chalk(db, apply_ty.parameters);\n+                        Ty::Apply(ApplicationTy { ctor, parameters })\n+                    }\n                     // FIXME handle TypeKindId::Trait/Type here\n                     TypeName::TypeKindId(_) => unimplemented!(),\n-                    TypeName::AssociatedType(_) => unimplemented!(),\n                     TypeName::Placeholder(idx) => {\n                         assert_eq!(idx.ui, UniverseIndex::ROOT);\n                         Ty::Param { idx: idx.idx as u32, name: crate::Name::missing() }"}]}