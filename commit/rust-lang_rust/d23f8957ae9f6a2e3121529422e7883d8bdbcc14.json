{"sha": "d23f8957ae9f6a2e3121529422e7883d8bdbcc14", "node_id": "C_kwDOAAsO6NoAKGQyM2Y4OTU3YWU5ZjZhMmUzMTIxNTI5NDIyZTc4ODNkOGJkYmNjMTQ", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-04-14T19:49:05Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-05-10T17:36:02Z"}, "message": "Improve warning message by saying that it \"does nothing\"", "tree": {"sha": "6780d3822dcaef72f5fd0730013a701d00f7721e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6780d3822dcaef72f5fd0730013a701d00f7721e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d23f8957ae9f6a2e3121529422e7883d8bdbcc14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d23f8957ae9f6a2e3121529422e7883d8bdbcc14", "html_url": "https://github.com/rust-lang/rust/commit/d23f8957ae9f6a2e3121529422e7883d8bdbcc14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d23f8957ae9f6a2e3121529422e7883d8bdbcc14/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "457fa953a2ed374630e1f5cd0d8c599c2b4b0609", "url": "https://api.github.com/repos/rust-lang/rust/commits/457fa953a2ed374630e1f5cd0d8c599c2b4b0609", "html_url": "https://github.com/rust-lang/rust/commit/457fa953a2ed374630e1f5cd0d8c599c2b4b0609"}], "stats": {"total": 86, "additions": 43, "deletions": 43}, "files": [{"sha": "e323570b5bc062bf975557a8ca4073b0770e19e8", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d23f8957ae9f6a2e3121529422e7883d8bdbcc14/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d23f8957ae9f6a2e3121529422e7883d8bdbcc14/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=d23f8957ae9f6a2e3121529422e7883d8bdbcc14", "patch": "@@ -521,14 +521,14 @@ lint_opaque_hidden_inferred_bound = opaque type `{$ty}` does not satisfy its ass\n \n lint_opaque_hidden_inferred_bound_sugg = add this bound\n \n-lint_drop_ref = calls to `std::mem::drop` with a reference instead of an owned value\n+lint_drop_ref = calls to `std::mem::drop` with a reference instead of an owned value does nothing\n     .label = argument has type `{$arg_ty}`\n \n-lint_drop_copy = calls to `std::mem::drop` with a value that implements `Copy`.\n+lint_drop_copy = calls to `std::mem::drop` with a value that implements `Copy` does nothing\n     .label = argument has type `{$arg_ty}`\n \n-lint_forget_ref = calls to `std::mem::forget` with a reference instead of an owned value\n+lint_forget_ref = calls to `std::mem::forget` with a reference instead of an owned value does nothing\n     .label = argument has type `{$arg_ty}`\n \n-lint_forget_copy = calls to `std::mem::forget` with a value that implements `Copy`.\n+lint_forget_copy = calls to `std::mem::forget` with a value that implements `Copy` does nothing\n     .label = argument has type `{$arg_ty}`"}, {"sha": "2f122ad2aaa48a757e940ce545852707cd0f8354", "filename": "tests/ui/lint/drop_copy.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d23f8957ae9f6a2e3121529422e7883d8bdbcc14/tests%2Fui%2Flint%2Fdrop_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d23f8957ae9f6a2e3121529422e7883d8bdbcc14/tests%2Fui%2Flint%2Fdrop_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdrop_copy.stderr?ref=d23f8957ae9f6a2e3121529422e7883d8bdbcc14", "patch": "@@ -1,4 +1,4 @@\n-warning: calls to `std::mem::drop` with a value that implements `Copy`.\n+warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n   --> $DIR/drop_copy.rs:34:5\n    |\n LL |     drop(s1);\n@@ -12,15 +12,15 @@ note: the lint level is defined here\n LL | #![warn(drop_copy)]\n    |         ^^^^^^^^^\n \n-warning: calls to `std::mem::drop` with a value that implements `Copy`.\n+warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n   --> $DIR/drop_copy.rs:35:5\n    |\n LL |     drop(s2);\n    |     ^^^^^--^\n    |          |\n    |          argument has type `SomeStruct`\n \n-warning: calls to `std::mem::drop` with a reference instead of an owned value\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_copy.rs:36:5\n    |\n LL |     drop(s3);\n@@ -30,55 +30,55 @@ LL |     drop(s3);\n    |\n    = note: `#[warn(drop_ref)]` on by default\n \n-warning: calls to `std::mem::drop` with a value that implements `Copy`.\n+warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n   --> $DIR/drop_copy.rs:37:5\n    |\n LL |     drop(s4);\n    |     ^^^^^--^\n    |          |\n    |          argument has type `SomeStruct`\n \n-warning: calls to `std::mem::drop` with a reference instead of an owned value\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_copy.rs:38:5\n    |\n LL |     drop(s5);\n    |     ^^^^^--^\n    |          |\n    |          argument has type `&SomeStruct`\n \n-warning: calls to `std::mem::drop` with a reference instead of an owned value\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_copy.rs:50:5\n    |\n LL |     drop(a2);\n    |     ^^^^^--^\n    |          |\n    |          argument has type `&AnotherStruct`\n \n-warning: calls to `std::mem::drop` with a reference instead of an owned value\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_copy.rs:52:5\n    |\n LL |     drop(a4);\n    |     ^^^^^--^\n    |          |\n    |          argument has type `&AnotherStruct`\n \n-warning: calls to `std::mem::drop` with a value that implements `Copy`.\n+warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n   --> $DIR/drop_copy.rs:71:13\n    |\n LL |             drop(println_and(13));\n    |             ^^^^^---------------^\n    |                  |\n    |                  argument has type `i32`\n \n-warning: calls to `std::mem::drop` with a value that implements `Copy`.\n+warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n   --> $DIR/drop_copy.rs:74:14\n    |\n LL |         3 if drop(println_and(14)) == () => (),\n    |              ^^^^^---------------^\n    |                   |\n    |                   argument has type `i32`\n \n-warning: calls to `std::mem::drop` with a value that implements `Copy`.\n+warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n   --> $DIR/drop_copy.rs:76:14\n    |\n LL |         4 => drop(2),"}, {"sha": "cd81f72d6e9b28da4bac488663b8a04f2602b222", "filename": "tests/ui/lint/drop_ref.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d23f8957ae9f6a2e3121529422e7883d8bdbcc14/tests%2Fui%2Flint%2Fdrop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d23f8957ae9f6a2e3121529422e7883d8bdbcc14/tests%2Fui%2Flint%2Fdrop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdrop_ref.stderr?ref=d23f8957ae9f6a2e3121529422e7883d8bdbcc14", "patch": "@@ -1,4 +1,4 @@\n-warning: calls to `std::mem::drop` with a reference instead of an owned value\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_ref.rs:8:5\n    |\n LL |     drop(&SomeStruct);\n@@ -12,87 +12,87 @@ note: the lint level is defined here\n LL | #![warn(drop_ref)]\n    |         ^^^^^^^^\n \n-warning: calls to `std::mem::drop` with a reference instead of an owned value\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_ref.rs:11:5\n    |\n LL |     drop(&owned1);\n    |     ^^^^^-------^\n    |          |\n    |          argument has type `&SomeStruct`\n \n-warning: calls to `std::mem::drop` with a reference instead of an owned value\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_ref.rs:12:5\n    |\n LL |     drop(&&owned1);\n    |     ^^^^^--------^\n    |          |\n    |          argument has type `&&SomeStruct`\n \n-warning: calls to `std::mem::drop` with a reference instead of an owned value\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_ref.rs:13:5\n    |\n LL |     drop(&mut owned1);\n    |     ^^^^^-----------^\n    |          |\n    |          argument has type `&mut SomeStruct`\n \n-warning: calls to `std::mem::drop` with a reference instead of an owned value\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_ref.rs:17:5\n    |\n LL |     drop(reference1);\n    |     ^^^^^----------^\n    |          |\n    |          argument has type `&SomeStruct`\n \n-warning: calls to `std::mem::drop` with a reference instead of an owned value\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_ref.rs:20:5\n    |\n LL |     drop(reference2);\n    |     ^^^^^----------^\n    |          |\n    |          argument has type `&mut SomeStruct`\n \n-warning: calls to `std::mem::drop` with a reference instead of an owned value\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_ref.rs:23:5\n    |\n LL |     drop(reference3);\n    |     ^^^^^----------^\n    |          |\n    |          argument has type `&SomeStruct`\n \n-warning: calls to `std::mem::drop` with a reference instead of an owned value\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_ref.rs:28:5\n    |\n LL |     drop(&val);\n    |     ^^^^^----^\n    |          |\n    |          argument has type `&T`\n \n-warning: calls to `std::mem::drop` with a reference instead of an owned value\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_ref.rs:36:5\n    |\n LL |     std::mem::drop(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^-----------^\n    |                    |\n    |                    argument has type `&SomeStruct`\n \n-warning: calls to `std::mem::drop` with a reference instead of an owned value\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_ref.rs:91:13\n    |\n LL |             drop(println_and(&13));\n    |             ^^^^^----------------^\n    |                  |\n    |                  argument has type `&i32`\n \n-warning: calls to `std::mem::drop` with a reference instead of an owned value\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_ref.rs:94:14\n    |\n LL |         3 if drop(println_and(&14)) == () => (),\n    |              ^^^^^----------------^\n    |                   |\n    |                   argument has type `&i32`\n \n-warning: calls to `std::mem::drop` with a reference instead of an owned value\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_ref.rs:96:14\n    |\n LL |         4 => drop(&2),"}, {"sha": "b5ce052d3796dee8a517bf97d09836dcb6815a8f", "filename": "tests/ui/lint/forget_copy.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d23f8957ae9f6a2e3121529422e7883d8bdbcc14/tests%2Fui%2Flint%2Fforget_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d23f8957ae9f6a2e3121529422e7883d8bdbcc14/tests%2Fui%2Flint%2Fforget_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforget_copy.stderr?ref=d23f8957ae9f6a2e3121529422e7883d8bdbcc14", "patch": "@@ -1,4 +1,4 @@\n-warning: calls to `std::mem::forget` with a value that implements `Copy`.\n+warning: calls to `std::mem::forget` with a value that implements `Copy` does nothing\n   --> $DIR/forget_copy.rs:34:5\n    |\n LL |     forget(s1);\n@@ -12,15 +12,15 @@ note: the lint level is defined here\n LL | #![warn(forget_copy)]\n    |         ^^^^^^^^^^^\n \n-warning: calls to `std::mem::forget` with a value that implements `Copy`.\n+warning: calls to `std::mem::forget` with a value that implements `Copy` does nothing\n   --> $DIR/forget_copy.rs:35:5\n    |\n LL |     forget(s2);\n    |     ^^^^^^^--^\n    |            |\n    |            argument has type `SomeStruct`\n \n-warning: calls to `std::mem::forget` with a reference instead of an owned value\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_copy.rs:36:5\n    |\n LL |     forget(s3);\n@@ -30,39 +30,39 @@ LL |     forget(s3);\n    |\n    = note: `#[warn(forget_ref)]` on by default\n \n-warning: calls to `std::mem::forget` with a value that implements `Copy`.\n+warning: calls to `std::mem::forget` with a value that implements `Copy` does nothing\n   --> $DIR/forget_copy.rs:37:5\n    |\n LL |     forget(s4);\n    |     ^^^^^^^--^\n    |            |\n    |            argument has type `SomeStruct`\n \n-warning: calls to `std::mem::forget` with a reference instead of an owned value\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_copy.rs:38:5\n    |\n LL |     forget(s5);\n    |     ^^^^^^^--^\n    |            |\n    |            argument has type `&SomeStruct`\n \n-warning: calls to `std::mem::forget` with a reference instead of an owned value\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_copy.rs:50:5\n    |\n LL |     forget(a2);\n    |     ^^^^^^^--^\n    |            |\n    |            argument has type `&AnotherStruct`\n \n-warning: calls to `std::mem::forget` with a reference instead of an owned value\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_copy.rs:52:5\n    |\n LL |     forget(a3);\n    |     ^^^^^^^--^\n    |            |\n    |            argument has type `&AnotherStruct`\n \n-warning: calls to `std::mem::forget` with a reference instead of an owned value\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_copy.rs:53:5\n    |\n LL |     forget(a4);"}, {"sha": "f20f5f54b25a14071e53890991e40e4191975195", "filename": "tests/ui/lint/forget_ref.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d23f8957ae9f6a2e3121529422e7883d8bdbcc14/tests%2Fui%2Flint%2Fforget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d23f8957ae9f6a2e3121529422e7883d8bdbcc14/tests%2Fui%2Flint%2Fforget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforget_ref.stderr?ref=d23f8957ae9f6a2e3121529422e7883d8bdbcc14", "patch": "@@ -1,4 +1,4 @@\n-warning: calls to `std::mem::forget` with a reference instead of an owned value\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_ref.rs:10:5\n    |\n LL |     forget(&SomeStruct);\n@@ -12,63 +12,63 @@ note: the lint level is defined here\n LL | #![warn(forget_ref)]\n    |         ^^^^^^^^^^\n \n-warning: calls to `std::mem::forget` with a reference instead of an owned value\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_ref.rs:13:5\n    |\n LL |     forget(&owned);\n    |     ^^^^^^^------^\n    |            |\n    |            argument has type `&SomeStruct`\n \n-warning: calls to `std::mem::forget` with a reference instead of an owned value\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_ref.rs:14:5\n    |\n LL |     forget(&&owned);\n    |     ^^^^^^^-------^\n    |            |\n    |            argument has type `&&SomeStruct`\n \n-warning: calls to `std::mem::forget` with a reference instead of an owned value\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_ref.rs:15:5\n    |\n LL |     forget(&mut owned);\n    |     ^^^^^^^----------^\n    |            |\n    |            argument has type `&mut SomeStruct`\n \n-warning: calls to `std::mem::forget` with a reference instead of an owned value\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_ref.rs:19:5\n    |\n LL |     forget(&*reference1);\n    |     ^^^^^^^------------^\n    |            |\n    |            argument has type `&SomeStruct`\n \n-warning: calls to `std::mem::forget` with a reference instead of an owned value\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_ref.rs:22:5\n    |\n LL |     forget(reference2);\n    |     ^^^^^^^----------^\n    |            |\n    |            argument has type `&mut SomeStruct`\n \n-warning: calls to `std::mem::forget` with a reference instead of an owned value\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_ref.rs:25:5\n    |\n LL |     forget(reference3);\n    |     ^^^^^^^----------^\n    |            |\n    |            argument has type `&SomeStruct`\n \n-warning: calls to `std::mem::forget` with a reference instead of an owned value\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_ref.rs:30:5\n    |\n LL |     forget(&val);\n    |     ^^^^^^^----^\n    |            |\n    |            argument has type `&T`\n \n-warning: calls to `std::mem::forget` with a reference instead of an owned value\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_ref.rs:38:5\n    |\n LL |     std::mem::forget(&SomeStruct);"}]}