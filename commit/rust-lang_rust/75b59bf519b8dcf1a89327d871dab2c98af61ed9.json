{"sha": "75b59bf519b8dcf1a89327d871dab2c98af61ed9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YjU5YmY1MTliOGRjZjFhODkzMjdkODcxZGFiMmM5OGFmNjFlZDk=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-02-03T19:44:37Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-02-03T19:44:37Z"}, "message": "Merge #39\n\n39: Tools r=matklad a=matklad\n\ncloses #34 \r\n\r\nbors r+", "tree": {"sha": "6322bf271a4fd5e838098a0f523739fc9a0c9416", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6322bf271a4fd5e838098a0f523739fc9a0c9416"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75b59bf519b8dcf1a89327d871dab2c98af61ed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75b59bf519b8dcf1a89327d871dab2c98af61ed9", "html_url": "https://github.com/rust-lang/rust/commit/75b59bf519b8dcf1a89327d871dab2c98af61ed9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75b59bf519b8dcf1a89327d871dab2c98af61ed9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "3c70ae2e26f654ce536f00fde8c159e4ebe6901a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c70ae2e26f654ce536f00fde8c159e4ebe6901a", "html_url": "https://github.com/rust-lang/rust/commit/3c70ae2e26f654ce536f00fde8c159e4ebe6901a"}, {"sha": "b072e68ad5bf1687aebd2ff1c7bf327d38a6a2f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b072e68ad5bf1687aebd2ff1c7bf327d38a6a2f2", "html_url": "https://github.com/rust-lang/rust/commit/b072e68ad5bf1687aebd2ff1c7bf327d38a6a2f2"}], "stats": {"total": 230, "additions": 192, "deletions": 38}, "files": [{"sha": "7d89cf49041e9f0a9c6cbd2c946682e894a0cff1", "filename": ".cargo/config", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75b59bf519b8dcf1a89327d871dab2c98af61ed9/.cargo%2Fconfig", "raw_url": "https://github.com/rust-lang/rust/raw/75b59bf519b8dcf1a89327d871dab2c98af61ed9/.cargo%2Fconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.cargo%2Fconfig?ref=75b59bf519b8dcf1a89327d871dab2c98af61ed9", "patch": "@@ -1,3 +1,4 @@\n [alias]\n parse = \"run --package tools --bin parse\"\n gen = \"run --package tools --bin gen\"\n+collect-tests = \"run --package tools --bin collect-tests --\""}, {"sha": "8c7d118c82ed9e081ece3a57d6ef9049bd2925f8", "filename": "appveyor.yml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75b59bf519b8dcf1a89327d871dab2c98af61ed9/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/75b59bf519b8dcf1a89327d871dab2c98af61ed9/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=75b59bf519b8dcf1a89327d871dab2c98af61ed9", "patch": "@@ -10,6 +10,7 @@ install:\n build: false\n \n test_script:\n+  - cargo collect-tests --verify\n   - cargo test\n \n branches:"}, {"sha": "db06dbebc9898f05f606aa9bfe416d84a36a1f13", "filename": "docs/TESTS.md", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/75b59bf519b8dcf1a89327d871dab2c98af61ed9/docs%2FTESTS.md", "raw_url": "https://github.com/rust-lang/rust/raw/75b59bf519b8dcf1a89327d871dab2c98af61ed9/docs%2FTESTS.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2FTESTS.md?ref=75b59bf519b8dcf1a89327d871dab2c98af61ed9", "patch": "@@ -19,12 +19,26 @@ files to have the same name except for the leading number. In general,\n test suite should be append-only: old tests should not be modified,\n new tests should be created instead.\n \n-\n Note that only `ok` tests are normative: `err` tests test error\n recovery and it is totally ok for a parser to not implement any error\n recovery at all. However, for libsyntax2.0 we do care about error\n recovery, and we do care about precise and useful error messages.\n \n+There are also so-called \"inline tests\". They appear as the comments \n+with a `test` header in the source code, like this:\n+\n+```rust\n+// test fn_basic\n+// fn foo() {}\n+fn fn_item(p: &mut Parser) {\n+    // ...\n+}\n+``` \n+\n+You can run `cargo collect-tests` command to collect all inline tests \n+into `tests/data/inline` directory. The main advantage of inline tests\n+is that they help to illustrate what the relevant code is doing. \n+\n \n Contribution opportunity: design and implement testing infrastructure\n for validators."}, {"sha": "f8754c06fe42cb42d5487fbbb6108803ddb28209", "filename": "docs/TOOLS.md", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75b59bf519b8dcf1a89327d871dab2c98af61ed9/docs%2FTOOLS.md", "raw_url": "https://github.com/rust-lang/rust/raw/75b59bf519b8dcf1a89327d871dab2c98af61ed9/docs%2FTOOLS.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2FTOOLS.md?ref=75b59bf519b8dcf1a89327d871dab2c98af61ed9", "patch": "@@ -17,14 +17,20 @@ cargo tool\n ```\n \n \n-# Tool: `gen`\n+## Tool: `gen`\n \n This tool reads a \"grammar\" from [grammar.ron](../grammar.ron) and\n generates the `syntax_kinds.rs` file. You should run this tool if you \n add new keywords or syntax elements.\n \n \n-# Tool: 'parse'\n+## Tool: `parse`\n \n This tool reads rust source code from the standard input, parses it,\n and prints the result to stdout.\n+\n+\n+## Tool: `collect-tests`\n+\n+This tools collect inline tests from comments in libsyntax2 source code\n+and places them into `tests/data/inline` directory."}, {"sha": "5cf2fc39a496af2c7d077f58e4dbed4a48b46883", "filename": "src/parser/event_parser/grammar/items/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75b59bf519b8dcf1a89327d871dab2c98af61ed9/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b59bf519b8dcf1a89327d871dab2c98af61ed9/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Fmod.rs?ref=75b59bf519b8dcf1a89327d871dab2c98af61ed9", "patch": "@@ -52,11 +52,15 @@ fn item(p: &mut Parser) {\n             STATIC_ITEM\n         }\n         CONST_KW => match p.nth(1) {\n+            // test const_fn\n+            // const fn foo() {}\n             FN_KW => {\n                 p.bump();\n                 fn_item(p);\n                 FN_ITEM\n             }\n+            // test const_unsafe_fn\n+            // const unsafe fn foo() {}\n             UNSAFE_KW if p.nth(2) == FN_KW => {\n                 p.bump();\n                 p.bump();"}, {"sha": "31a1e435f555a5ccdc6581b17c778848e6b5a8a7", "filename": "tests/data/parser/inline/0001_const_unsafe_fn.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75b59bf519b8dcf1a89327d871dab2c98af61ed9/tests%2Fdata%2Fparser%2Finline%2F0001_const_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b59bf519b8dcf1a89327d871dab2c98af61ed9/tests%2Fdata%2Fparser%2Finline%2F0001_const_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0001_const_unsafe_fn.rs?ref=75b59bf519b8dcf1a89327d871dab2c98af61ed9", "patch": "@@ -0,0 +1 @@\n+const unsafe fn foo() {}"}, {"sha": "1f0865cb013d644cd8a38bcb9198b8b2074dfe5d", "filename": "tests/data/parser/inline/0001_const_unsafe_fn.txt", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/75b59bf519b8dcf1a89327d871dab2c98af61ed9/tests%2Fdata%2Fparser%2Finline%2F0001_const_unsafe_fn.txt", "raw_url": "https://github.com/rust-lang/rust/raw/75b59bf519b8dcf1a89327d871dab2c98af61ed9/tests%2Fdata%2Fparser%2Finline%2F0001_const_unsafe_fn.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0001_const_unsafe_fn.txt?ref=75b59bf519b8dcf1a89327d871dab2c98af61ed9", "patch": "@@ -0,0 +1,15 @@\n+FILE@[0; 25)\n+  FN_ITEM@[0; 25)\n+    CONST_KW@[0; 5)\n+    WHITESPACE@[5; 6)\n+    UNSAFE_KW@[6; 12)\n+    WHITESPACE@[12; 13)\n+    FN_KW@[13; 15)\n+    WHITESPACE@[15; 16)\n+    IDENT@[16; 19) \"foo\"\n+    L_PAREN@[19; 20)\n+    R_PAREN@[20; 21)\n+    WHITESPACE@[21; 22)\n+    L_CURLY@[22; 23)\n+    R_CURLY@[23; 24)\n+    WHITESPACE@[24; 25)"}, {"sha": "8c84d9cd7c420e056585ae9b00586f820835f432", "filename": "tests/data/parser/inline/0002_const_fn.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75b59bf519b8dcf1a89327d871dab2c98af61ed9/tests%2Fdata%2Fparser%2Finline%2F0002_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b59bf519b8dcf1a89327d871dab2c98af61ed9/tests%2Fdata%2Fparser%2Finline%2F0002_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0002_const_fn.rs?ref=75b59bf519b8dcf1a89327d871dab2c98af61ed9", "patch": "@@ -0,0 +1 @@\n+const fn foo() {}"}, {"sha": "2d360d78bc43342c8cf299c5579f8c7ed406fcbb", "filename": "tests/data/parser/inline/0002_const_fn.txt", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/75b59bf519b8dcf1a89327d871dab2c98af61ed9/tests%2Fdata%2Fparser%2Finline%2F0002_const_fn.txt", "raw_url": "https://github.com/rust-lang/rust/raw/75b59bf519b8dcf1a89327d871dab2c98af61ed9/tests%2Fdata%2Fparser%2Finline%2F0002_const_fn.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0002_const_fn.txt?ref=75b59bf519b8dcf1a89327d871dab2c98af61ed9", "patch": "@@ -0,0 +1,13 @@\n+FILE@[0; 18)\n+  FN_ITEM@[0; 18)\n+    CONST_KW@[0; 5)\n+    WHITESPACE@[5; 6)\n+    FN_KW@[6; 8)\n+    WHITESPACE@[8; 9)\n+    IDENT@[9; 12) \"foo\"\n+    L_PAREN@[12; 13)\n+    R_PAREN@[13; 14)\n+    WHITESPACE@[14; 15)\n+    L_CURLY@[15; 16)\n+    R_CURLY@[16; 17)\n+    WHITESPACE@[17; 18)"}, {"sha": "eba9322a1cacabd251827e334cf8ed0b5eb22cbc", "filename": "tests/data/parser/ok/0024_const_fn.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c70ae2e26f654ce536f00fde8c159e4ebe6901a/tests%2Fdata%2Fparser%2Fok%2F0024_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c70ae2e26f654ce536f00fde8c159e4ebe6901a/tests%2Fdata%2Fparser%2Fok%2F0024_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0024_const_fn.rs?ref=3c70ae2e26f654ce536f00fde8c159e4ebe6901a", "patch": "@@ -1,5 +0,0 @@\n-const fn foo() {\n-}\n-\n-const unsafe fn foo() {\n-}"}, {"sha": "0fd485997295dcb7df626751bfd52894c77c868c", "filename": "tests/data/parser/ok/0024_const_fn.txt", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3c70ae2e26f654ce536f00fde8c159e4ebe6901a/tests%2Fdata%2Fparser%2Fok%2F0024_const_fn.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3c70ae2e26f654ce536f00fde8c159e4ebe6901a/tests%2Fdata%2Fparser%2Fok%2F0024_const_fn.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0024_const_fn.txt?ref=3c70ae2e26f654ce536f00fde8c159e4ebe6901a", "patch": "@@ -1,29 +0,0 @@\n-FILE@[0; 46)\n-  FN_ITEM@[0; 20)\n-    CONST_KW@[0; 5)\n-    WHITESPACE@[5; 6)\n-    FN_KW@[6; 8)\n-    WHITESPACE@[8; 9)\n-    IDENT@[9; 12) \"foo\"\n-    L_PAREN@[12; 13)\n-    R_PAREN@[13; 14)\n-    WHITESPACE@[14; 15)\n-    L_CURLY@[15; 16)\n-    WHITESPACE@[16; 17)\n-    R_CURLY@[17; 18)\n-    WHITESPACE@[18; 20)\n-  FN_ITEM@[20; 46)\n-    CONST_KW@[20; 25)\n-    WHITESPACE@[25; 26)\n-    UNSAFE_KW@[26; 32)\n-    WHITESPACE@[32; 33)\n-    FN_KW@[33; 35)\n-    WHITESPACE@[35; 36)\n-    IDENT@[36; 39) \"foo\"\n-    L_PAREN@[39; 40)\n-    R_PAREN@[40; 41)\n-    WHITESPACE@[41; 42)\n-    L_CURLY@[42; 43)\n-    WHITESPACE@[43; 44)\n-    R_CURLY@[44; 45)\n-    WHITESPACE@[45; 46)"}, {"sha": "7446859b5a433347517726f6f10c2dcb4de703dd", "filename": "tests/data/parser/ok/0024_const_item.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/75b59bf519b8dcf1a89327d871dab2c98af61ed9/tests%2Fdata%2Fparser%2Fok%2F0024_const_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b59bf519b8dcf1a89327d871dab2c98af61ed9/tests%2Fdata%2Fparser%2Fok%2F0024_const_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0024_const_item.rs?ref=75b59bf519b8dcf1a89327d871dab2c98af61ed9", "previous_filename": "tests/data/parser/ok/0025_const_item.rs"}, {"sha": "588e001f59a42c5962ca78cb307e94652ce6fb37", "filename": "tests/data/parser/ok/0024_const_item.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/75b59bf519b8dcf1a89327d871dab2c98af61ed9/tests%2Fdata%2Fparser%2Fok%2F0024_const_item.txt", "raw_url": "https://github.com/rust-lang/rust/raw/75b59bf519b8dcf1a89327d871dab2c98af61ed9/tests%2Fdata%2Fparser%2Fok%2F0024_const_item.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0024_const_item.txt?ref=75b59bf519b8dcf1a89327d871dab2c98af61ed9", "previous_filename": "tests/data/parser/ok/0025_const_item.txt"}, {"sha": "68a6434bec19a92392733da9d5ccda73c7626701", "filename": "tests/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b59bf519b8dcf1a89327d871dab2c98af61ed9/tests%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b59bf519b8dcf1a89327d871dab2c98af61ed9/tests%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fparser.rs?ref=75b59bf519b8dcf1a89327d871dab2c98af61ed9", "patch": "@@ -7,7 +7,7 @@ use testutils::dir_tests;\n \n #[test]\n fn parser_tests() {\n-    dir_tests(&[\"parser/ok\", \"parser/err\"], |text| {\n+    dir_tests(&[\"parser/inline\", \"parser/ok\", \"parser/err\"], |text| {\n         let tokens = tokenize(text);\n         let file = parse(text.to_string(), &tokens);\n         dump_tree(&file)"}, {"sha": "8cbc2fc93b05b0c46adb78f8e630fdb99e843ba6", "filename": "tools/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b59bf519b8dcf1a89327d871dab2c98af61ed9/tools%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/75b59bf519b8dcf1a89327d871dab2c98af61ed9/tools%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tools%2FCargo.toml?ref=75b59bf519b8dcf1a89327d871dab2c98af61ed9", "patch": "@@ -9,4 +9,6 @@ serde = \"1.0.26\"\n serde_derive = \"1.0.26\"\n file = \"1.1.1\"\n ron = \"0.1.5\"\n+walkdir = \"2\"\n+itertools = \"0.7\"\n libsyntax2 = { path = \"../\" }"}, {"sha": "df9d2db81583c138a82e796851650719a70b44ac", "filename": "tools/src/bin/collect-tests.rs", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/75b59bf519b8dcf1a89327d871dab2c98af61ed9/tools%2Fsrc%2Fbin%2Fcollect-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b59bf519b8dcf1a89327d871dab2c98af61ed9/tools%2Fsrc%2Fbin%2Fcollect-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tools%2Fsrc%2Fbin%2Fcollect-tests.rs?ref=75b59bf519b8dcf1a89327d871dab2c98af61ed9", "patch": "@@ -0,0 +1,130 @@\n+extern crate file;\n+extern crate itertools;\n+extern crate walkdir;\n+\n+use walkdir::WalkDir;\n+use itertools::Itertools;\n+\n+use std::path::{Path, PathBuf};\n+use std::collections::HashSet;\n+use std::fs;\n+\n+fn main() {\n+    let verify = ::std::env::args().any(|arg| arg == \"--verify\");\n+\n+    let d = grammar_dir();\n+    let tests = tests_from_dir(&d);\n+    let existing = existing_tests();\n+\n+    for t in existing.difference(&tests) {\n+        panic!(\"Test is deleted: {}\\n{}\", t.name, t.text);\n+    }\n+\n+    let new_tests = tests.difference(&existing);\n+    for (i, t) in new_tests.enumerate() {\n+        if verify {\n+            panic!(\"Inline test is not recorded: {}\", t.name);\n+        }\n+\n+        let name = format!(\"{:04}_{}.rs\", existing.len() + i + 1, t.name);\n+        println!(\"Creating {}\", name);\n+        let path = inline_tests_dir().join(name);\n+        file::put_text(&path, &t.text).unwrap();\n+    }\n+}\n+\n+#[derive(Debug, Eq)]\n+struct Test {\n+    name: String,\n+    text: String,\n+}\n+\n+impl PartialEq for Test {\n+    fn eq(&self, other: &Test) -> bool {\n+        self.name.eq(&other.name)\n+    }\n+}\n+\n+impl ::std::hash::Hash for Test {\n+    fn hash<H: ::std::hash::Hasher>(&self, state: &mut H) {\n+        self.name.hash(state)\n+    }\n+}\n+\n+fn tests_from_dir(dir: &Path) -> HashSet<Test> {\n+    let mut res = HashSet::new();\n+    for entry in WalkDir::new(dir) {\n+        let entry = entry.unwrap();\n+        if !entry.file_type().is_file() {\n+            continue;\n+        }\n+        if entry.path().extension().unwrap_or_default() != \"rs\" {\n+            continue;\n+        }\n+        let text = file::get_text(entry.path()).unwrap();\n+\n+        for test in collect_tests(&text) {\n+            if let Some(old_test) = res.replace(test) {\n+                panic!(\"Duplicate test: {}\", old_test.name)\n+            }\n+        }\n+    }\n+    res\n+}\n+\n+fn collect_tests(s: &str) -> Vec<Test> {\n+    let mut res = vec![];\n+    let prefix = \"// \";\n+    let comment_blocks = s.lines()\n+        .map(str::trim_left)\n+        .group_by(|line| line.starts_with(prefix));\n+\n+    for (is_comment, block) in comment_blocks.into_iter() {\n+        if !is_comment {\n+            continue;\n+        }\n+        let mut block = block.map(|line| &line[prefix.len()..]);\n+        let first = block.next().unwrap();\n+        if !first.starts_with(\"test \") {\n+            continue;\n+        }\n+        let name = first[\"test \".len()..].to_string();\n+        let text: String = itertools::join(block.chain(::std::iter::once(\"\")), \"\\n\");\n+        assert!(!text.trim().is_empty() && text.ends_with(\"\\n\"));\n+        res.push(Test { name, text })\n+    }\n+    res\n+}\n+\n+fn existing_tests() -> HashSet<Test> {\n+    let mut res = HashSet::new();\n+    for file in fs::read_dir(&inline_tests_dir()).unwrap() {\n+        let file = file.unwrap();\n+        let path = file.path();\n+        if path.extension().unwrap_or_default() != \"rs\" {\n+            continue;\n+        }\n+        let name = path.file_name().unwrap().to_str().unwrap();\n+        let name = name[\"0000_\".len()..name.len() - 3].to_string();\n+        let text = file::get_text(&path).unwrap();\n+        res.insert(Test { name, text });\n+    }\n+    res\n+}\n+\n+fn inline_tests_dir() -> PathBuf {\n+    let res = base_dir().join(\"tests/data/parser/inline\");\n+    if !res.is_dir() {\n+        fs::create_dir_all(&res).unwrap();\n+    }\n+    res\n+}\n+\n+fn grammar_dir() -> PathBuf {\n+    base_dir().join(\"src/parser/event_parser/grammar\")\n+}\n+\n+fn base_dir() -> PathBuf {\n+    let dir = env!(\"CARGO_MANIFEST_DIR\");\n+    PathBuf::from(dir).parent().unwrap().to_owned()\n+}"}]}