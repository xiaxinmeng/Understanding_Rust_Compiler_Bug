{"sha": "5fabdb8f7fd0c2c48d47ce08126d27ade5beefd9", "node_id": "C_kwDOAAsO6NoAKDVmYWJkYjhmN2ZkMGMyYzQ4ZDQ3Y2UwODEyNmQyN2FkZTViZWVmZDk", "commit": {"author": {"name": "ltdk", "email": "usr@ltdk.xyz", "date": "2022-05-28T21:20:43Z"}, "committer": {"name": "ltdk", "email": "usr@ltdk.xyz", "date": "2022-05-28T21:20:43Z"}, "message": "Add E0788 for improper #[no_coverage] usage", "tree": {"sha": "199a872e51d4105c51ab4ee1dbec2a0de02af34d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/199a872e51d4105c51ab4ee1dbec2a0de02af34d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fabdb8f7fd0c2c48d47ce08126d27ade5beefd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fabdb8f7fd0c2c48d47ce08126d27ade5beefd9", "html_url": "https://github.com/rust-lang/rust/commit/5fabdb8f7fd0c2c48d47ce08126d27ade5beefd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fabdb8f7fd0c2c48d47ce08126d27ade5beefd9/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebbcbfc236ced21d5e6a92269edb704692ff26b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebbcbfc236ced21d5e6a92269edb704692ff26b8", "html_url": "https://github.com/rust-lang/rust/commit/ebbcbfc236ced21d5e6a92269edb704692ff26b8"}], "stats": {"total": 202, "additions": 202, "deletions": 0}, "files": [{"sha": "0114461e38811153ba7ba0f1d6830e2ac498e2d7", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5fabdb8f7fd0c2c48d47ce08126d27ade5beefd9/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fabdb8f7fd0c2c48d47ce08126d27ade5beefd9/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=5fabdb8f7fd0c2c48d47ce08126d27ade5beefd9", "patch": "@@ -491,6 +491,7 @@ E0784: include_str!(\"./error_codes/E0784.md\"),\n E0785: include_str!(\"./error_codes/E0785.md\"),\n E0786: include_str!(\"./error_codes/E0786.md\"),\n E0787: include_str!(\"./error_codes/E0787.md\"),\n+E0788: include_str!(\"./error_codes/E0788.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "68bd53cea6ff6c16f5ed28e73f0e6976c12b9a7c", "filename": "compiler/rustc_error_codes/src/error_codes/E0788.md", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5fabdb8f7fd0c2c48d47ce08126d27ade5beefd9/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0788.md", "raw_url": "https://github.com/rust-lang/rust/raw/5fabdb8f7fd0c2c48d47ce08126d27ade5beefd9/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0788.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0788.md?ref=5fabdb8f7fd0c2c48d47ce08126d27ade5beefd9", "patch": "@@ -0,0 +1,21 @@\n+A `#[no_coverage]` attribute was incorrectly placed on something that couldn't\n+be covered.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0788\n+#[no_coverage]\n+struct Foo;\n+\n+#[no_coverage]\n+const FOO: Foo = Foo;\n+```\n+\n+`#[no_coverage]` tells the compiler to not generate coverage instrumentation for\n+a piece of code when the `-C instrument-coverage` flag is passed. Things like\n+structs and consts are not coverable code, and thus cannot do anything with this\n+attribute.\n+\n+If you wish to apply this attribute to all methods in an impl or module,\n+manually annotate each method; it is not possible to annotate the entire impl\n+with a `#[no_coverage]` attribute."}, {"sha": "f3734e1a1206de3fb92d0471b98af6d03a9fefb3", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5fabdb8f7fd0c2c48d47ce08126d27ade5beefd9/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fabdb8f7fd0c2c48d47ce08126d27ade5beefd9/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=5fabdb8f7fd0c2c48d47ce08126d27ade5beefd9", "patch": "@@ -76,6 +76,7 @@ impl CheckAttrVisitor<'_> {\n         for attr in attrs {\n             let attr_is_valid = match attr.name_or_empty() {\n                 sym::inline => self.check_inline(hir_id, attr, span, target),\n+                sym::no_coverage => self.check_no_coverage(hir_id, attr, span, target),\n                 sym::non_exhaustive => self.check_non_exhaustive(hir_id, attr, span, target),\n                 sym::marker => self.check_marker(hir_id, attr, span, target),\n                 sym::rustc_must_implement_one_of => {\n@@ -292,6 +293,56 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n+    /// Checks if a `#[no_coverage]` is applied directly to a function\n+    fn check_no_coverage(\n+        &self,\n+        hir_id: HirId,\n+        attr: &Attribute,\n+        span: Span,\n+        target: Target,\n+    ) -> bool {\n+        match target {\n+            // no_coverage on function is fine\n+            Target::Fn\n+            | Target::Closure\n+            | Target::Method(MethodKind::Trait { body: true } | MethodKind::Inherent) => true,\n+\n+            // function prototypes can't be covered\n+            Target::Method(MethodKind::Trait { body: false }) | Target::ForeignFn => {\n+                self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n+                    lint.build(\"`#[no_coverage]` is ignored on function prototypes\").emit();\n+                });\n+                true\n+            }\n+\n+            Target::Mod | Target::ForeignMod | Target::Impl | Target::Trait => {\n+                self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n+                    lint.build(\"`#[no_coverage]` cannot be done recursively and must be applied to functions directly\").emit();\n+                });\n+                true\n+            }\n+\n+            Target::Expression | Target::Statement | Target::Arm => {\n+                self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n+                    lint.build(\"`#[no_coverage]` can only be applied at the function level, not on code directly\").emit();\n+                });\n+                true\n+            }\n+\n+            _ => {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    attr.span,\n+                    E0788,\n+                    \"`#[no_coverage]` must be applied to coverable code\",\n+                )\n+                .span_label(span, \"not coverable code\")\n+                .emit();\n+                false\n+            }\n+        }\n+    }\n+\n     fn check_generic_attr(\n         &self,\n         hir_id: HirId,"}, {"sha": "c02cd976bc9450f08c4eff6667f955aa6652df41", "filename": "src/test/ui/lint/no-coverage.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5fabdb8f7fd0c2c48d47ce08126d27ade5beefd9/src%2Ftest%2Fui%2Flint%2Fno-coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fabdb8f7fd0c2c48d47ce08126d27ade5beefd9/src%2Ftest%2Fui%2Flint%2Fno-coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fno-coverage.rs?ref=5fabdb8f7fd0c2c48d47ce08126d27ade5beefd9", "patch": "@@ -0,0 +1,46 @@\n+#![feature(extern_types)]\n+#![feature(no_coverage)]\n+#![feature(type_alias_impl_trait)]\n+#![warn(unused_attributes)]\n+\n+trait Trait {\n+    #[no_coverage] //~ ERROR `#[no_coverage]` must be applied to coverable code\n+    const X: u32;\n+\n+    #[no_coverage] //~ ERROR `#[no_coverage]` must be applied to coverable code\n+    type T;\n+\n+    type U;\n+}\n+\n+impl Trait for () {\n+    const X: u32 = 0;\n+\n+    #[no_coverage] //~ ERROR `#[no_coverage]` must be applied to coverable code\n+    type T = Self;\n+\n+    #[no_coverage] //~ ERROR `#[no_coverage]` must be applied to coverable code\n+    type U = impl Trait; //~ ERROR unconstrained opaque type\n+}\n+\n+extern \"C\" {\n+    #[no_coverage] //~ ERROR `#[no_coverage]` must be applied to coverable code\n+    static X: u32;\n+\n+    #[no_coverage] //~ ERROR `#[no_coverage]` must be applied to coverable code\n+    type T;\n+}\n+\n+#[no_coverage]\n+fn main() {\n+    #[no_coverage] //~ WARN `#[no_coverage]` can only be applied at the function level, not on code directly\n+    let _ = ();\n+\n+    match () {\n+        #[no_coverage] //~ WARN `#[no_coverage]` can only be applied at the function level, not on code directly\n+        () => (),\n+    }\n+\n+    #[no_coverage] //~ WARN `#[no_coverage]` can only be applied at the function level, not on code directly\n+    return ();\n+}"}, {"sha": "8549eb699eeac716e6bc782d2552d2d53e8de766", "filename": "src/test/ui/lint/no-coverage.stderr", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/5fabdb8f7fd0c2c48d47ce08126d27ade5beefd9/src%2Ftest%2Fui%2Flint%2Fno-coverage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fabdb8f7fd0c2c48d47ce08126d27ade5beefd9/src%2Ftest%2Fui%2Flint%2Fno-coverage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fno-coverage.stderr?ref=5fabdb8f7fd0c2c48d47ce08126d27ade5beefd9", "patch": "@@ -0,0 +1,83 @@\n+warning: `#[no_coverage]` can only be applied at the function level, not on code directly\n+  --> $DIR/no-coverage.rs:36:5\n+   |\n+LL |     #[no_coverage]\n+   |     ^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/no-coverage.rs:4:9\n+   |\n+LL | #![warn(unused_attributes)]\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+warning: `#[no_coverage]` can only be applied at the function level, not on code directly\n+  --> $DIR/no-coverage.rs:40:9\n+   |\n+LL |         #[no_coverage]\n+   |         ^^^^^^^^^^^^^^\n+\n+warning: `#[no_coverage]` can only be applied at the function level, not on code directly\n+  --> $DIR/no-coverage.rs:44:5\n+   |\n+LL |     #[no_coverage]\n+   |     ^^^^^^^^^^^^^^\n+\n+error[E0788]: `#[no_coverage]` must be applied to coverable code\n+  --> $DIR/no-coverage.rs:7:5\n+   |\n+LL |     #[no_coverage]\n+   |     ^^^^^^^^^^^^^^\n+LL |     const X: u32;\n+   |     ------------- not coverable code\n+\n+error[E0788]: `#[no_coverage]` must be applied to coverable code\n+  --> $DIR/no-coverage.rs:10:5\n+   |\n+LL |     #[no_coverage]\n+   |     ^^^^^^^^^^^^^^\n+LL |     type T;\n+   |     ------- not coverable code\n+\n+error[E0788]: `#[no_coverage]` must be applied to coverable code\n+  --> $DIR/no-coverage.rs:19:5\n+   |\n+LL |     #[no_coverage]\n+   |     ^^^^^^^^^^^^^^\n+LL |     type T = Self;\n+   |     -------------- not coverable code\n+\n+error[E0788]: `#[no_coverage]` must be applied to coverable code\n+  --> $DIR/no-coverage.rs:22:5\n+   |\n+LL |     #[no_coverage]\n+   |     ^^^^^^^^^^^^^^\n+LL |     type U = impl Trait;\n+   |     -------------------- not coverable code\n+\n+error[E0788]: `#[no_coverage]` must be applied to coverable code\n+  --> $DIR/no-coverage.rs:27:5\n+   |\n+LL |     #[no_coverage]\n+   |     ^^^^^^^^^^^^^^\n+LL |     static X: u32;\n+   |     -------------- not coverable code\n+\n+error[E0788]: `#[no_coverage]` must be applied to coverable code\n+  --> $DIR/no-coverage.rs:30:5\n+   |\n+LL |     #[no_coverage]\n+   |     ^^^^^^^^^^^^^^\n+LL |     type T;\n+   |     ------- not coverable code\n+\n+error: unconstrained opaque type\n+  --> $DIR/no-coverage.rs:23:14\n+   |\n+LL |     type U = impl Trait;\n+   |              ^^^^^^^^^^\n+   |\n+   = note: `U` must be used in combination with a concrete type within the same module\n+\n+error: aborting due to 7 previous errors; 3 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0788`."}]}