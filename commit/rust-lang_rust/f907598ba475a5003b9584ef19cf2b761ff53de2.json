{"sha": "f907598ba475a5003b9584ef19cf2b761ff53de2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MDc1OThiYTQ3NWE1MDAzYjk1ODRlZjE5Y2YyYjc2MWZmNTNkZTI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-17T02:05:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-17T02:05:17Z"}, "message": "Rollup merge of #70029 - jonas-schievink:bootstrap, r=Centril\n\nBump the bootstrap compiler", "tree": {"sha": "256f82449baea23e52d5d0f1d4c850c7e254c0a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/256f82449baea23e52d5d0f1d4c850c7e254c0a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f907598ba475a5003b9584ef19cf2b761ff53de2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJecDBeCRBK7hj4Ov3rIwAAdHIIAB9dkqvK6Dle/0K0RyujnxI+\nRGJnVbh3D4Fjys562FBF1MiYb8fXeOUU9RY2LKytzmbj9aALr82v67E5Ezshl10/\n5L0UPBNbxL7PKdeZ4Zg5GC10vFEMdaP8OHtOnl0yY4uuLiTf39/iTRd47ZHaJA++\neh0kDqtLFpCj/7JyWN8GuCOLii+xm2Lc1XJonY43waMJlOrK2srmnW8vxdV2SKnO\nH6P78g0+Ka/FKE2p2evYmg6VkrjbWHwb85pRMgHuZWJv9YltCORU1a5t0bPpew+J\nZX3cVC10Pe2L2kyGns2mgB0jnxvzbnIJ7KzBe4Rhvkl63PSprV8k/XqhDfaLOPM=\n=TG42\n-----END PGP SIGNATURE-----\n", "payload": "tree 256f82449baea23e52d5d0f1d4c850c7e254c0a2\nparent 3d25622537a6c79303fb86d76ad7cbca2702fc1f\nparent f53f9a88f16dc3d1b94ed2e7f0f201e1456d8cfc\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584410717 +0100\ncommitter GitHub <noreply@github.com> 1584410717 +0100\n\nRollup merge of #70029 - jonas-schievink:bootstrap, r=Centril\n\nBump the bootstrap compiler\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f907598ba475a5003b9584ef19cf2b761ff53de2", "html_url": "https://github.com/rust-lang/rust/commit/f907598ba475a5003b9584ef19cf2b761ff53de2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f907598ba475a5003b9584ef19cf2b761ff53de2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d25622537a6c79303fb86d76ad7cbca2702fc1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d25622537a6c79303fb86d76ad7cbca2702fc1f", "html_url": "https://github.com/rust-lang/rust/commit/3d25622537a6c79303fb86d76ad7cbca2702fc1f"}, {"sha": "f53f9a88f16dc3d1b94ed2e7f0f201e1456d8cfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f53f9a88f16dc3d1b94ed2e7f0f201e1456d8cfc", "html_url": "https://github.com/rust-lang/rust/commit/f53f9a88f16dc3d1b94ed2e7f0f201e1456d8cfc"}], "stats": {"total": 117, "additions": 9, "deletions": 108}, "files": [{"sha": "602e4511ea583c82414e7d718406772cf10f61a7", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f907598ba475a5003b9584ef19cf2b761ff53de2/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f907598ba475a5003b9584ef19cf2b761ff53de2/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=f907598ba475a5003b9584ef19cf2b761ff53de2", "patch": "@@ -725,7 +725,7 @@ impl<'a> Builder<'a> {\n             self.clear_if_dirty(&my_out, &rustdoc);\n         }\n \n-        cargo.env(\"CARGO_TARGET_DIR\", &out_dir).arg(cmd).arg(\"-Zconfig-profile\");\n+        cargo.env(\"CARGO_TARGET_DIR\", &out_dir).arg(cmd);\n \n         let profile_var = |name: &str| {\n             let profile = if self.config.rust_optimize { \"RELEASE\" } else { \"DEV\" };\n@@ -847,13 +847,7 @@ impl<'a> Builder<'a> {\n             rustflags.arg(\"-Zforce-unstable-if-unmarked\");\n         }\n \n-        // cfg(bootstrap): the flag was renamed from `-Zexternal-macro-backtrace`\n-        // to `-Zmacro-backtrace`, keep only the latter after beta promotion.\n-        if stage == 0 {\n-            rustflags.arg(\"-Zexternal-macro-backtrace\");\n-        } else {\n-            rustflags.arg(\"-Zmacro-backtrace\");\n-        }\n+        rustflags.arg(\"-Zmacro-backtrace\");\n \n         let want_rustdoc = self.doc_tests != DocTests::No;\n "}, {"sha": "be2b0f36d14a7ef0a2d002d3ce1c73cc5df68bc4", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f907598ba475a5003b9584ef19cf2b761ff53de2/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f907598ba475a5003b9584ef19cf2b761ff53de2/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=f907598ba475a5003b9584ef19cf2b761ff53de2", "patch": "@@ -13,7 +13,7 @@ use build_helper::output;\n use crate::Build;\n \n // The version number\n-pub const CFG_RELEASE_NUM: &str = \"1.43.0\";\n+pub const CFG_RELEASE_NUM: &str = \"1.44.0\";\n \n pub struct GitInfo {\n     inner: Option<Info>,"}, {"sha": "36641284a769b00a8f234153a9bf1ec3fbc9a776", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f907598ba475a5003b9584ef19cf2b761ff53de2/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f907598ba475a5003b9584ef19cf2b761ff53de2/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=f907598ba475a5003b9584ef19cf2b761ff53de2", "patch": "@@ -1105,29 +1105,6 @@ impl<T: ?Sized> AsMut<T> for Box<T> {\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<T: ?Sized> Unpin for Box<T> {}\n \n-#[cfg(bootstrap)]\n-#[unstable(feature = \"generator_trait\", issue = \"43122\")]\n-impl<G: ?Sized + Generator + Unpin> Generator for Box<G> {\n-    type Yield = G::Yield;\n-    type Return = G::Return;\n-\n-    fn resume(mut self: Pin<&mut Self>) -> GeneratorState<Self::Yield, Self::Return> {\n-        G::resume(Pin::new(&mut *self))\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[unstable(feature = \"generator_trait\", issue = \"43122\")]\n-impl<G: ?Sized + Generator> Generator for Pin<Box<G>> {\n-    type Yield = G::Yield;\n-    type Return = G::Return;\n-\n-    fn resume(mut self: Pin<&mut Self>) -> GeneratorState<Self::Yield, Self::Return> {\n-        G::resume((*self).as_mut())\n-    }\n-}\n-\n-#[cfg(not(bootstrap))]\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n impl<G: ?Sized + Generator<R> + Unpin, R> Generator<R> for Box<G> {\n     type Yield = G::Yield;\n@@ -1138,7 +1115,6 @@ impl<G: ?Sized + Generator<R> + Unpin, R> Generator<R> for Box<G> {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n impl<G: ?Sized + Generator<R>, R> Generator<R> for Pin<Box<G>> {\n     type Yield = G::Yield;"}, {"sha": "a922d4f118b5afa893beccb3dea507a802b34160", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f907598ba475a5003b9584ef19cf2b761ff53de2/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f907598ba475a5003b9584ef19cf2b761ff53de2/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=f907598ba475a5003b9584ef19cf2b761ff53de2", "patch": "@@ -1569,7 +1569,7 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n #[lang = \"unsafe_cell\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[repr(transparent)]\n-#[cfg_attr(not(bootstrap), repr(no_niche))] // rust-lang/rust#68303.\n+#[repr(no_niche)] // rust-lang/rust#68303.\n pub struct UnsafeCell<T: ?Sized> {\n     value: T,\n }"}, {"sha": "5a731766054bda150c93b3bcdcfa2c796b5217c5", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f907598ba475a5003b9584ef19cf2b761ff53de2/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f907598ba475a5003b9584ef19cf2b761ff53de2/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=f907598ba475a5003b9584ef19cf2b761ff53de2", "patch": "@@ -140,7 +140,7 @@\n #![feature(associated_type_bounds)]\n #![feature(const_type_id)]\n #![feature(const_caller_location)]\n-#![cfg_attr(not(bootstrap), feature(no_niche))] // rust-lang/rust#68303\n+#![feature(no_niche)] // rust-lang/rust#68303\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "4f23620b92b806067b336ac4fa76a5f3a7c96459", "filename": "src/libcore/ops/generator.rs", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f907598ba475a5003b9584ef19cf2b761ff53de2/src%2Flibcore%2Fops%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f907598ba475a5003b9584ef19cf2b761ff53de2/src%2Flibcore%2Fops%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fgenerator.rs?ref=f907598ba475a5003b9584ef19cf2b761ff53de2", "patch": "@@ -67,7 +67,7 @@ pub enum GeneratorState<Y, R> {\n #[lang = \"generator\"]\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n #[fundamental]\n-pub trait Generator<#[cfg(not(bootstrap))] R = ()> {\n+pub trait Generator<R = ()> {\n     /// The type of value this generator yields.\n     ///\n     /// This associated type corresponds to the `yield` expression and the\n@@ -110,35 +110,9 @@ pub trait Generator<#[cfg(not(bootstrap))] R = ()> {\n     /// been returned previously. While generator literals in the language are\n     /// guaranteed to panic on resuming after `Complete`, this is not guaranteed\n     /// for all implementations of the `Generator` trait.\n-    fn resume(\n-        self: Pin<&mut Self>,\n-        #[cfg(not(bootstrap))] arg: R,\n-    ) -> GeneratorState<Self::Yield, Self::Return>;\n+    fn resume(self: Pin<&mut Self>, arg: R) -> GeneratorState<Self::Yield, Self::Return>;\n }\n \n-#[cfg(bootstrap)]\n-#[unstable(feature = \"generator_trait\", issue = \"43122\")]\n-impl<G: ?Sized + Generator> Generator for Pin<&mut G> {\n-    type Yield = G::Yield;\n-    type Return = G::Return;\n-\n-    fn resume(mut self: Pin<&mut Self>) -> GeneratorState<Self::Yield, Self::Return> {\n-        G::resume((*self).as_mut())\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-#[unstable(feature = \"generator_trait\", issue = \"43122\")]\n-impl<G: ?Sized + Generator + Unpin> Generator for &mut G {\n-    type Yield = G::Yield;\n-    type Return = G::Return;\n-\n-    fn resume(mut self: Pin<&mut Self>) -> GeneratorState<Self::Yield, Self::Return> {\n-        G::resume(Pin::new(&mut *self))\n-    }\n-}\n-\n-#[cfg(not(bootstrap))]\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n impl<G: ?Sized + Generator<R>, R> Generator<R> for Pin<&mut G> {\n     type Yield = G::Yield;\n@@ -149,7 +123,6 @@ impl<G: ?Sized + Generator<R>, R> Generator<R> for Pin<&mut G> {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n impl<G: ?Sized + Generator<R> + Unpin, R> Generator<R> for &mut G {\n     type Yield = G::Yield;"}, {"sha": "edeb4f83c7d7e6f1bbf0fb388be057f81d7f211f", "filename": "src/librustc_data_structures/box_region.rs", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f907598ba475a5003b9584ef19cf2b761ff53de2/src%2Flibrustc_data_structures%2Fbox_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f907598ba475a5003b9584ef19cf2b761ff53de2/src%2Flibrustc_data_structures%2Fbox_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbox_region.rs?ref=f907598ba475a5003b9584ef19cf2b761ff53de2", "patch": "@@ -25,22 +25,6 @@ pub struct PinnedGenerator<I, A, R> {\n }\n \n impl<I, A, R> PinnedGenerator<I, A, R> {\n-    #[cfg(bootstrap)]\n-    pub fn new<T: Generator<Yield = YieldType<I, A>, Return = R> + 'static>(\n-        generator: T,\n-    ) -> (I, Self) {\n-        let mut result = PinnedGenerator { generator: Box::pin(generator) };\n-\n-        // Run it to the first yield to set it up\n-        let init = match Pin::new(&mut result.generator).resume() {\n-            GeneratorState::Yielded(YieldType::Initial(y)) => y,\n-            _ => panic!(),\n-        };\n-\n-        (init, result)\n-    }\n-\n-    #[cfg(not(bootstrap))]\n     pub fn new<T: Generator<Yield = YieldType<I, A>, Return = R> + 'static>(\n         generator: T,\n     ) -> (I, Self) {\n@@ -55,19 +39,6 @@ impl<I, A, R> PinnedGenerator<I, A, R> {\n         (init, result)\n     }\n \n-    #[cfg(bootstrap)]\n-    pub unsafe fn access(&mut self, closure: *mut dyn FnMut()) {\n-        BOX_REGION_ARG.with(|i| {\n-            i.set(Action::Access(AccessAction(closure)));\n-        });\n-\n-        // Call the generator, which in turn will call the closure in BOX_REGION_ARG\n-        if let GeneratorState::Complete(_) = Pin::new(&mut self.generator).resume() {\n-            panic!()\n-        }\n-    }\n-\n-    #[cfg(not(bootstrap))]\n     pub unsafe fn access(&mut self, closure: *mut dyn FnMut()) {\n         BOX_REGION_ARG.with(|i| {\n             i.set(Action::Access(AccessAction(closure)));\n@@ -79,16 +50,6 @@ impl<I, A, R> PinnedGenerator<I, A, R> {\n         }\n     }\n \n-    #[cfg(bootstrap)]\n-    pub fn complete(&mut self) -> R {\n-        // Tell the generator we want it to complete, consuming it and yielding a result\n-        BOX_REGION_ARG.with(|i| i.set(Action::Complete));\n-\n-        let result = Pin::new(&mut self.generator).resume();\n-        if let GeneratorState::Complete(r) = result { r } else { panic!() }\n-    }\n-\n-    #[cfg(not(bootstrap))]\n     pub fn complete(&mut self) -> R {\n         // Tell the generator we want it to complete, consuming it and yielding a result\n         BOX_REGION_ARG.with(|i| i.set(Action::Complete));"}, {"sha": "c1ca6771326cb73ed89725363cec789b9fcbe73f", "filename": "src/libstd/future.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f907598ba475a5003b9584ef19cf2b761ff53de2/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f907598ba475a5003b9584ef19cf2b761ff53de2/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=f907598ba475a5003b9584ef19cf2b761ff53de2", "patch": "@@ -41,10 +41,7 @@ impl<T: Generator<Yield = ()>> Future for GenFuture<T> {\n         // Safe because we're !Unpin + !Drop mapping to a ?Unpin value\n         let gen = unsafe { Pin::map_unchecked_mut(self, |s| &mut s.0) };\n         let _guard = unsafe { set_task_context(cx) };\n-        match gen.resume(\n-            #[cfg(not(bootstrap))]\n-            (),\n-        ) {\n+        match gen.resume(()) {\n             GeneratorState::Yielded(()) => Poll::Pending,\n             GeneratorState::Complete(x) => Poll::Ready(x),\n         }"}, {"sha": "4d9a91e38b33c5b551e5585c3342638991b9aecc", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f907598ba475a5003b9584ef19cf2b761ff53de2/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f907598ba475a5003b9584ef19cf2b761ff53de2/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=f907598ba475a5003b9584ef19cf2b761ff53de2", "patch": "@@ -12,7 +12,7 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.x.0` for Cargo where they were released on `date`.\n \n-date: 2020-02-29\n+date: 2020-03-12\n rustc: beta\n cargo: beta\n "}]}