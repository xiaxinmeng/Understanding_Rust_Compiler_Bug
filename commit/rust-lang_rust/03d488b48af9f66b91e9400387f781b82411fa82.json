{"sha": "03d488b48af9f66b91e9400387f781b82411fa82", "node_id": "C_kwDOAAsO6NoAKDAzZDQ4OGI0OGFmOWY2NmI5MWU5NDAwMzg3Zjc4MWI4MjQxMWZhODI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-20T04:23:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-20T04:23:09Z"}, "message": "Auto merge of #98843 - Urgau:check-cfg-stage0, r=Mark-Simulacrum\n\nEnable check-cfg in stage0\n\nNow that the bootstrap cargo supports `rustc-check-cfg` we can now enable it with `-Zcheck-cfg=output` and use it in `rustc_llvm` to unblock `--check-cfg` support in stage0.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "29b064c193e25dc33985a05e80b3cc797f1d4cd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29b064c193e25dc33985a05e80b3cc797f1d4cd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03d488b48af9f66b91e9400387f781b82411fa82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03d488b48af9f66b91e9400387f781b82411fa82", "html_url": "https://github.com/rust-lang/rust/commit/03d488b48af9f66b91e9400387f781b82411fa82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03d488b48af9f66b91e9400387f781b82411fa82/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f426146460c5446bb41ac0b677bbfe5b6ff502ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/f426146460c5446bb41ac0b677bbfe5b6ff502ba", "html_url": "https://github.com/rust-lang/rust/commit/f426146460c5446bb41ac0b677bbfe5b6ff502ba"}, {"sha": "f818872ecb924fd5cf388a19a2119b0c1f5b7872", "url": "https://api.github.com/repos/rust-lang/rust/commits/f818872ecb924fd5cf388a19a2119b0c1f5b7872", "html_url": "https://github.com/rust-lang/rust/commit/f818872ecb924fd5cf388a19a2119b0c1f5b7872"}], "stats": {"total": 132, "additions": 61, "deletions": 71}, "files": [{"sha": "62ef5804dce6d7491f1a8c79620d4986114ed745", "filename": "compiler/rustc_llvm/build.rs", "status": "modified", "additions": 29, "deletions": 33, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/03d488b48af9f66b91e9400387f781b82411fa82/compiler%2Frustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03d488b48af9f66b91e9400387f781b82411fa82/compiler%2Frustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fbuild.rs?ref=03d488b48af9f66b91e9400387f781b82411fa82", "patch": "@@ -4,6 +4,29 @@ use std::fmt::Display;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n \n+const OPTIONAL_COMPONENTS: &[&str] = &[\n+    \"x86\",\n+    \"arm\",\n+    \"aarch64\",\n+    \"amdgpu\",\n+    \"avr\",\n+    \"m68k\",\n+    \"mips\",\n+    \"powerpc\",\n+    \"systemz\",\n+    \"jsbackend\",\n+    \"webassembly\",\n+    \"msp430\",\n+    \"sparc\",\n+    \"nvptx\",\n+    \"hexagon\",\n+    \"riscv\",\n+    \"bpf\",\n+];\n+\n+const REQUIRED_COMPONENTS: &[&str] =\n+    &[\"ipo\", \"bitreader\", \"bitwriter\", \"linker\", \"asmparser\", \"lto\", \"coverage\", \"instrumentation\"];\n+\n fn detect_llvm_link() -> (&'static str, &'static str) {\n     // Force the link mode we want, preferring static by default, but\n     // possibly overridden by `configure --enable-llvm-link-shared`.\n@@ -76,6 +99,10 @@ fn output(cmd: &mut Command) -> String {\n }\n \n fn main() {\n+    for component in REQUIRED_COMPONENTS.iter().chain(OPTIONAL_COMPONENTS.iter()) {\n+        println!(\"cargo:rustc-check-cfg=values(llvm_component,\\\"{}\\\")\", component);\n+    }\n+\n     if tracked_env_var_os(\"RUST_CHECK\").is_some() {\n         // If we're just running `check`, there's no need for LLVM to be built.\n         return;\n@@ -131,42 +158,11 @@ fn main() {\n     let host = env::var(\"HOST\").expect(\"HOST was not set\");\n     let is_crossed = target != host;\n \n-    let optional_components = &[\n-        \"x86\",\n-        \"arm\",\n-        \"aarch64\",\n-        \"amdgpu\",\n-        \"avr\",\n-        \"m68k\",\n-        \"mips\",\n-        \"powerpc\",\n-        \"systemz\",\n-        \"jsbackend\",\n-        \"webassembly\",\n-        \"msp430\",\n-        \"sparc\",\n-        \"nvptx\",\n-        \"hexagon\",\n-        \"riscv\",\n-        \"bpf\",\n-    ];\n-\n-    let required_components = &[\n-        \"ipo\",\n-        \"bitreader\",\n-        \"bitwriter\",\n-        \"linker\",\n-        \"asmparser\",\n-        \"lto\",\n-        \"coverage\",\n-        \"instrumentation\",\n-    ];\n-\n     let components = output(Command::new(&llvm_config).arg(\"--components\"));\n     let mut components = components.split_whitespace().collect::<Vec<_>>();\n-    components.retain(|c| optional_components.contains(c) || required_components.contains(c));\n+    components.retain(|c| OPTIONAL_COMPONENTS.contains(c) || REQUIRED_COMPONENTS.contains(c));\n \n-    for component in required_components {\n+    for component in REQUIRED_COMPONENTS {\n         if !components.contains(component) {\n             panic!(\"require llvm component {} but wasn't found\", component);\n         }"}, {"sha": "575cbc3beb2e7cf2e6b976d560e5180134a0f008", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 32, "deletions": 38, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/03d488b48af9f66b91e9400387f781b82411fa82/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03d488b48af9f66b91e9400387f781b82411fa82/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=03d488b48af9f66b91e9400387f781b82411fa82", "patch": "@@ -1468,45 +1468,39 @@ impl<'a> Builder<'a> {\n             rustflags.arg(\"-Zunstable-options\");\n         }\n \n-        // FIXME(Urgau): This a hack as it shouldn't be gated on stage 0 but until `rustc_llvm`\n-        // is made to work with `--check-cfg` which is currently not easly possible until cargo\n-        // get some support for setting `--check-cfg` within build script, it's the least invasive\n-        // hack that still let's us have cfg checking for the vast majority of the codebase.\n-        if stage != 0 {\n-            // Enable cfg checking of cargo features for everything but std and also enable cfg\n-            // checking of names and values.\n-            //\n-            // Note: `std`, `alloc` and `core` imports some dependencies by #[path] (like\n-            // backtrace, core_simd, std_float, ...), those dependencies have their own\n-            // features but cargo isn't involved in the #[path] process and so cannot pass the\n-            // complete list of features, so for that reason we don't enable checking of\n-            // features for std crates.\n-            cargo.arg(if mode != Mode::Std {\n-                \"-Zcheck-cfg=names,values,features\"\n-            } else {\n-                \"-Zcheck-cfg=names,values\"\n-            });\n+        // Enable cfg checking of cargo features for everything but std and also enable cfg\n+        // checking of names and values.\n+        //\n+        // Note: `std`, `alloc` and `core` imports some dependencies by #[path] (like\n+        // backtrace, core_simd, std_float, ...), those dependencies have their own\n+        // features but cargo isn't involved in the #[path] process and so cannot pass the\n+        // complete list of features, so for that reason we don't enable checking of\n+        // features for std crates.\n+        cargo.arg(if mode != Mode::Std {\n+            \"-Zcheck-cfg=names,values,output,features\"\n+        } else {\n+            \"-Zcheck-cfg=names,values,output\"\n+        });\n \n-            // Add extra cfg not defined in/by rustc\n-            //\n-            // Note: Altrough it would seems that \"-Zunstable-options\" to `rustflags` is useless as\n-            // cargo would implicitly add it, it was discover that sometimes bootstrap only use\n-            // `rustflags` without `cargo` making it required.\n-            rustflags.arg(\"-Zunstable-options\");\n-            for (restricted_mode, name, values) in EXTRA_CHECK_CFGS {\n-                if *restricted_mode == None || *restricted_mode == Some(mode) {\n-                    // Creating a string of the values by concatenating each value:\n-                    // ',\"tvos\",\"watchos\"' or '' (nothing) when there are no values\n-                    let values = match values {\n-                        Some(values) => values\n-                            .iter()\n-                            .map(|val| [\",\", \"\\\"\", val, \"\\\"\"])\n-                            .flatten()\n-                            .collect::<String>(),\n-                        None => String::new(),\n-                    };\n-                    rustflags.arg(&format!(\"--check-cfg=values({name}{values})\"));\n-                }\n+        // Add extra cfg not defined in/by rustc\n+        //\n+        // Note: Altrough it would seems that \"-Zunstable-options\" to `rustflags` is useless as\n+        // cargo would implicitly add it, it was discover that sometimes bootstrap only use\n+        // `rustflags` without `cargo` making it required.\n+        rustflags.arg(\"-Zunstable-options\");\n+        for (restricted_mode, name, values) in EXTRA_CHECK_CFGS {\n+            if *restricted_mode == None || *restricted_mode == Some(mode) {\n+                // Creating a string of the values by concatenating each value:\n+                // ',\"tvos\",\"watchos\"' or '' (nothing) when there are no values\n+                let values = match values {\n+                    Some(values) => values\n+                        .iter()\n+                        .map(|val| [\",\", \"\\\"\", val, \"\\\"\"])\n+                        .flatten()\n+                        .collect::<String>(),\n+                    None => String::new(),\n+                };\n+                rustflags.arg(&format!(\"--check-cfg=values({name}{values})\"));\n             }\n         }\n "}]}