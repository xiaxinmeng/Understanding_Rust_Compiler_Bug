{"sha": "351b7d099a90868c8021485af4221ec35c84fcd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MWI3ZDA5OWE5MDg2OGM4MDIxNDg1YWY0MjIxZWMzNWM4NGZjZDI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-29T13:43:36Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-02T20:42:56Z"}, "message": "also use mir_assign_valid_types in from_known_layout check", "tree": {"sha": "0552afd95c203d6f73ff35c32fe976f453354ea9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0552afd95c203d6f73ff35c32fe976f453354ea9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/351b7d099a90868c8021485af4221ec35c84fcd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/351b7d099a90868c8021485af4221ec35c84fcd2", "html_url": "https://github.com/rust-lang/rust/commit/351b7d099a90868c8021485af4221ec35c84fcd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/351b7d099a90868c8021485af4221ec35c84fcd2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "100c809386149ef2a9dcda3f79d1416bd07dbb59", "url": "https://api.github.com/repos/rust-lang/rust/commits/100c809386149ef2a9dcda3f79d1416bd07dbb59", "html_url": "https://github.com/rust-lang/rust/commit/100c809386149ef2a9dcda3f79d1416bd07dbb59"}], "stats": {"total": 121, "additions": 58, "deletions": 63}, "files": [{"sha": "ce098f583d055866aed56e9ddb70a03ae0dc5cea", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/351b7d099a90868c8021485af4221ec35c84fcd2/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351b7d099a90868c8021485af4221ec35c84fcd2/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=351b7d099a90868c8021485af4221ec35c84fcd2", "patch": "@@ -210,6 +210,48 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> LayoutOf for InterpCx<'mir, 'tcx, M> {\n     }\n }\n \n+/// Test if it is valid for a MIR assignment to assign `src`-typed place to `dest`-typed value.\n+/// This test should be symmetric, as it is primarily about layout compatibility.\n+pub(super) fn mir_assign_valid_types<'tcx>(src: Ty<'tcx>, dest: Ty<'tcx>) -> bool {\n+    src == dest\n+        || match (&src.kind, &dest.kind) {\n+            (ty::Ref(_, src_pointee, _), ty::Ref(_, dest_pointee, _)) => {\n+                // After optimizations, there can be assignments that change reference mutability.\n+                // This does not affect reference layout, so that is fine.\n+                src_pointee == dest_pointee\n+            }\n+            (ty::FnPtr(_), ty::FnPtr(_)) => {\n+                // All function pointers have equal layout, and thus can be assigned.\n+                true\n+            }\n+            _ => false,\n+        }\n+}\n+\n+/// Use the already known layout if given (but sanity check in debug mode),\n+/// or compute the layout.\n+#[cfg_attr(not(debug_assertions), inline(always))]\n+pub(super) fn from_known_layout<'tcx>(\n+    known_layout: Option<TyAndLayout<'tcx>>,\n+    compute: impl FnOnce() -> InterpResult<'tcx, TyAndLayout<'tcx>>,\n+) -> InterpResult<'tcx, TyAndLayout<'tcx>> {\n+    match known_layout {\n+        None => compute(),\n+        Some(known_layout) => {\n+            if cfg!(debug_assertions) {\n+                let check_layout = compute()?;\n+                assert!(\n+                    mir_assign_valid_types(check_layout.ty, known_layout.ty),\n+                    \"expected type differs from actual type.\\nexpected: {:?}\\nactual: {:?}\",\n+                    known_layout.ty,\n+                    check_layout.ty,\n+                );\n+            }\n+            Ok(known_layout)\n+        }\n+    }\n+}\n+\n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub fn new(\n         tcx: TyCtxtAt<'tcx>,\n@@ -377,7 +419,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // have to support that case (mostly by skipping all caching).\n         match frame.locals.get(local).and_then(|state| state.layout.get()) {\n             None => {\n-                let layout = crate::interpret::operand::from_known_layout(layout, || {\n+                let layout = from_known_layout(layout, || {\n                     let local_ty = frame.body.local_decls[local].ty;\n                     let local_ty =\n                         self.subst_from_frame_and_normalize_erasing_regions(frame, local_ty);"}, {"sha": "fb59a177b971637066937a43aa6726faa7782871", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/351b7d099a90868c8021485af4221ec35c84fcd2/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351b7d099a90868c8021485af4221ec35c84fcd2/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=351b7d099a90868c8021485af4221ec35c84fcd2", "patch": "@@ -18,19 +18,13 @@ mod visitor;\n pub use rustc_middle::mir::interpret::*; // have all the `interpret` symbols in one place: here\n \n pub use self::eval_context::{Frame, InterpCx, LocalState, LocalValue, StackPopCleanup};\n-\n-pub use self::place::{MPlaceTy, MemPlace, MemPlaceMeta, Place, PlaceTy};\n-\n-pub use self::memory::{AllocCheck, FnVal, Memory, MemoryKind};\n-\n+pub use self::intern::{intern_const_alloc_recursive, InternKind};\n pub use self::machine::{AllocMap, Machine, MayLeak, StackPopJump};\n-\n-pub use self::operand::{ImmTy, Immediate, OpTy, Operand, ScalarMaybeUndef};\n-\n-pub use self::visitor::{MutValueVisitor, ValueVisitor};\n-\n+pub use self::memory::{AllocCheck, FnVal, Memory, MemoryKind};\n+pub use self::operand::{ImmTy, Immediate, OpTy, Operand};\n+pub use self::place::{MPlaceTy, MemPlace, MemPlaceMeta, Place, PlaceTy};\n pub use self::validity::RefTracking;\n-\n-pub use self::intern::{intern_const_alloc_recursive, InternKind};\n+pub use self::visitor::{MutValueVisitor, ValueVisitor};\n \n crate use self::intrinsics::eval_nullary_intrinsic;\n+use eval_context::{from_known_layout, mir_assign_valid_types};"}, {"sha": "12595e4e4d92685510959d58effc63a5a68098ad", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 6, "deletions": 29, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/351b7d099a90868c8021485af4221ec35c84fcd2/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351b7d099a90868c8021485af4221ec35c84fcd2/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=351b7d099a90868c8021485af4221ec35c84fcd2", "patch": "@@ -2,21 +2,21 @@\n //! All high-level functions to read from memory work on operands as sources.\n \n use std::convert::TryFrom;\n+use std::fmt::Write;\n \n-use super::{InterpCx, MPlaceTy, Machine, MemPlace, Place, PlaceTy};\n use rustc_hir::def::Namespace;\n use rustc_macros::HashStable;\n-pub use rustc_middle::mir::interpret::ScalarMaybeUndef;\n-use rustc_middle::mir::interpret::{\n-    sign_extend, truncate, AllocId, ConstValue, GlobalId, InterpResult, Pointer, Scalar,\n-};\n use rustc_middle::ty::layout::{IntegerExt, PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::print::{FmtPrinter, PrettyPrinter, Printer};\n use rustc_middle::ty::Ty;\n use rustc_middle::{mir, ty};\n use rustc_target::abi::{Abi, DiscriminantKind, HasDataLayout, Integer, LayoutOf, Size};\n use rustc_target::abi::{VariantIdx, Variants};\n-use std::fmt::Write;\n+\n+use super::{\n+    from_known_layout, sign_extend, truncate, AllocId, ConstValue, GlobalId, InterpCx,\n+    InterpResult, MPlaceTy, Machine, MemPlace, Place, PlaceTy, Pointer, Scalar, ScalarMaybeUndef,\n+};\n \n /// An `Immediate` represents a single immediate self-contained Rust value.\n ///\n@@ -203,29 +203,6 @@ impl<'tcx, Tag: Copy> ImmTy<'tcx, Tag> {\n     }\n }\n \n-// Use the existing layout if given (but sanity check in debug mode),\n-// or compute the layout.\n-#[inline(always)]\n-pub(super) fn from_known_layout<'tcx>(\n-    layout: Option<TyAndLayout<'tcx>>,\n-    compute: impl FnOnce() -> InterpResult<'tcx, TyAndLayout<'tcx>>,\n-) -> InterpResult<'tcx, TyAndLayout<'tcx>> {\n-    match layout {\n-        None => compute(),\n-        Some(layout) => {\n-            if cfg!(debug_assertions) {\n-                let layout2 = compute()?;\n-                assert_eq!(\n-                    layout.layout, layout2.layout,\n-                    \"mismatch in layout of supposedly equal-layout types {:?} and {:?}\",\n-                    layout.ty, layout2.ty\n-                );\n-            }\n-            Ok(layout)\n-        }\n-    }\n-}\n-\n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Normalice `place.ptr` to a `Pointer` if this is a place and not a ZST.\n     /// Can be helpful to avoid lots of `force_ptr` calls later, if this place is used a lot."}, {"sha": "c9999ef7c95e516ae930ac5a516fb16f8d21143a", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/351b7d099a90868c8021485af4221ec35c84fcd2/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351b7d099a90868c8021485af4221ec35c84fcd2/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=351b7d099a90868c8021485af4221ec35c84fcd2", "patch": "@@ -7,16 +7,15 @@ use std::hash::Hash;\n \n use rustc_macros::HashStable;\n use rustc_middle::mir;\n-use rustc_middle::mir::interpret::truncate;\n use rustc_middle::ty::layout::{PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::{self, Ty};\n use rustc_target::abi::{Abi, Align, DiscriminantKind, FieldsShape};\n use rustc_target::abi::{HasDataLayout, LayoutOf, Size, VariantIdx, Variants};\n \n use super::{\n-    AllocId, AllocMap, Allocation, AllocationExtra, ImmTy, Immediate, InterpCx, InterpResult,\n-    LocalValue, Machine, MemoryKind, OpTy, Operand, Pointer, PointerArithmetic, RawConst, Scalar,\n-    ScalarMaybeUndef,\n+    mir_assign_valid_types, truncate, AllocId, AllocMap, Allocation, AllocationExtra, ImmTy,\n+    Immediate, InterpCx, InterpResult, LocalValue, Machine, MemoryKind, OpTy, Operand, Pointer,\n+    PointerArithmetic, RawConst, Scalar, ScalarMaybeUndef,\n };\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable)]\n@@ -283,23 +282,6 @@ impl<'tcx, Tag: ::std::fmt::Debug> PlaceTy<'tcx, Tag> {\n     }\n }\n \n-/// Test if it is valid for a MIR assignment to assign `src`-typed place to `dest`-typed value.\n-fn mir_assign_valid_types<'tcx>(src: Ty<'tcx>, dest: Ty<'tcx>) -> bool {\n-    src == dest\n-        || match (&src.kind, &dest.kind) {\n-            (ty::Ref(_, src_pointee, _), ty::Ref(_, dest_pointee, _)) => {\n-                // After optimizations, there can be assignments that change reference mutability.\n-                // This does not affect reference layout, so that is fine.\n-                src_pointee == dest_pointee\n-            }\n-            (ty::FnPtr(_), ty::FnPtr(_)) => {\n-                // All function pointers have equal layout, and thus can be assigned.\n-                true\n-            }\n-            _ => false,\n-        }\n-}\n-\n // separating the pointer tag for `impl Trait`, see https://github.com/rust-lang/rust/issues/54385\n impl<'mir, 'tcx, Tag, M> InterpCx<'mir, 'tcx, M>\n where"}]}