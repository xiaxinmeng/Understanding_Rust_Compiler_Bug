{"sha": "bdda1196f2ee661657f3a215307e9ed7f0df13f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZGExMTk2ZjJlZTY2MTY1N2YzYTIxNTMwN2U5ZWQ3ZjBkZjEzZjY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-01-26T12:37:46Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:10Z"}, "message": "Use layout::Integer over manual *size resolving", "tree": {"sha": "694d45fc4bad3e7eb1f686328986750f54c8dde6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/694d45fc4bad3e7eb1f686328986750f54c8dde6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdda1196f2ee661657f3a215307e9ed7f0df13f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53IACgkQpp+NIls6\n19mdUg//T7DaIduLjtN2NyqdRkVkboBDdJipT2NeRme+Tmm51sUz/WdVDHtl6zER\nMC+9JZFlmz4JCFiTkjCWS7zmF1LyMSuEZsd0clzX/+Ttg/bdqjjPuFWMxxgs1JMQ\n/2L6d+WUio1NG9KG2OUrxwbKVd4+Ov1zCOm6JyHb6nNVUIpeXRDyfJ9UMfkXQ4Qa\nJF9kb1meYKmlITbWlJ1HLc/LZTXNLnz+D3h+g0zuTDAv+tNpaK8GCpoXBG9rCyku\nbT7Mfim+UhiyyoF0EbAaxcz7eivCQm3GsBVzZe94qfeQbnqle3EwSPYV72YiCAxV\nOulg9QdpW+J5E6s/7VJE+xLnGWm0fQAz5J7Lnuk/PPg4/ZppRzdPL4LSqMPvGLmF\nfxQiUBlGdC04A2ZZBJ51yopJEmnk6K98r5Ck6HZLTtCuA4T56hbPoDRcre8zZdSG\nxPcg6I3HCHrqIy2j/B5bhYAwbQXom4uk0nlP4ktBxdqwNL3TVEOYWpGBRbwLphD4\n3GE2SRDr24zYCXJf9eYqjQNyTt8iH8l3ns/QYDBH6Mmsh3RSALkXHUlKx49I+gdW\nMKVlMLgFUMiskDAOLPdUqLaZOFiws2Iolo72k/RfWPRNoc6BiQnMrRIdrd42JMVI\nUVMwq2yF5bnroinTnvspmpt1SIqmX36jqK+VreODvsHkcKNm4Cg=\n=SchS\n-----END PGP SIGNATURE-----", "payload": "tree 694d45fc4bad3e7eb1f686328986750f54c8dde6\nparent 9857eaa4dfc1a103369b423b12cac1993a8d9e96\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1516970266 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494450 +0100\n\nUse layout::Integer over manual *size resolving\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdda1196f2ee661657f3a215307e9ed7f0df13f6", "html_url": "https://github.com/rust-lang/rust/commit/bdda1196f2ee661657f3a215307e9ed7f0df13f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdda1196f2ee661657f3a215307e9ed7f0df13f6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9857eaa4dfc1a103369b423b12cac1993a8d9e96", "url": "https://api.github.com/repos/rust-lang/rust/commits/9857eaa4dfc1a103369b423b12cac1993a8d9e96", "html_url": "https://github.com/rust-lang/rust/commit/9857eaa4dfc1a103369b423b12cac1993a8d9e96"}], "stats": {"total": 53, "additions": 26, "deletions": 27}, "files": [{"sha": "dd33d68de2e4a4e8d448c89fe4ac411053011060", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/bdda1196f2ee661657f3a215307e9ed7f0df13f6/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdda1196f2ee661657f3a215307e9ed7f0df13f6/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=bdda1196f2ee661657f3a215307e9ed7f0df13f6", "patch": "@@ -22,6 +22,7 @@ use ty::fold::TypeVisitor;\n use ty::subst::{Subst, UnpackedKind};\n use ty::maps::TyCtxtAt;\n use ty::TypeVariants::*;\n+use ty::layout::Integer;\n use util::common::ErrorReported;\n use middle::lang_items;\n use mir::interpret::{Value, PrimVal};\n@@ -32,7 +33,7 @@ use rustc_data_structures::fx::FxHashMap;\n use std::{cmp, fmt};\n use std::hash::Hash;\n use std::intrinsics;\n-use syntax::ast::{self, Name, UintTy, IntTy};\n+use syntax::ast::{self, Name};\n use syntax::attr::{self, SignedInt, UnsignedInt};\n use syntax_pos::{Span, DUMMY_SP};\n \n@@ -58,31 +59,21 @@ impl<'tcx> Discr<'tcx> {\n         self.checked_add(tcx, 1).0\n     }\n     pub fn checked_add<'a, 'gcx>(self, tcx: TyCtxt<'a, 'gcx, 'tcx>, n: u128) -> (Self, bool) {\n-        let ty = match self.ty.sty {\n-            TyInt(IntTy::Isize) => tcx.mk_mach_int(tcx.sess.target.isize_ty),\n-            TyUint(UintTy::Usize) => tcx.mk_mach_uint(tcx.sess.target.usize_ty),\n-            _ => self.ty,\n+        let (int, signed) = match self.ty.sty {\n+            TyInt(ity) => (Integer::from_attr(tcx, SignedInt(ity)), true),\n+            TyUint(uty) => (Integer::from_attr(tcx, UnsignedInt(uty)), false),\n+            _ => bug!(\"non integer discriminant\"),\n         };\n-        let (min, max) = match ty.sty {\n-            TyInt(IntTy::I8)  => (i8::min_value() as i128 as u128, i8::max_value() as u128),\n-            TyInt(IntTy::I16) => (i16::min_value() as i128 as u128, i16::max_value() as u128),\n-            TyInt(IntTy::I32) => (i32::min_value() as i128 as u128, i32::max_value() as u128),\n-            TyInt(IntTy::I64) => (i64::min_value() as i128 as u128, i64::max_value() as u128),\n-            TyInt(IntTy::I128) => (i128::min_value() as i128 as u128, i128::max_value() as u128),\n-            TyInt(IntTy::Isize) => unreachable!(),\n-            TyUint(UintTy::U8)  => (u8::min_value() as u128, u8::max_value() as u128),\n-            TyUint(UintTy::U16) => (u16::min_value() as u128, u16::max_value() as u128),\n-            TyUint(UintTy::U32) => (u32::min_value() as u128, u32::max_value() as u128),\n-            TyUint(UintTy::U64) => (u64::min_value() as u128, u64::max_value() as u128),\n-            TyUint(UintTy::U128) => (u128::min_value() as u128, u128::max_value()),\n-            TyUint(UintTy::Usize) => unreachable!(),\n-            _ => bug!(\"not a valid discriminant type: {}\", ty)\n-        };\n-        if ty.is_signed() {\n+        if signed {\n+            let (min, max) = match int {\n+                Integer::I8 => (i8::min_value() as i128, i8::max_value() as i128),\n+                Integer::I16 => (i16::min_value() as i128, i16::max_value() as i128),\n+                Integer::I32 => (i32::min_value() as i128, i32::max_value() as i128),\n+                Integer::I64 => (i64::min_value() as i128, i64::max_value() as i128),\n+                Integer::I128 => (i128::min_value(), i128::max_value()),\n+            };\n             let val = self.val as i128;\n             let n = n as i128;\n-            let max = max as i128;\n-            let min = min as i128;\n             let oflo = val > max - n;\n             let val = if oflo {\n                 min + (n - (max - val))\n@@ -94,14 +85,22 @@ impl<'tcx> Discr<'tcx> {\n                 ty: self.ty,\n             }, oflo)\n         } else {\n-            let oflo = self.val > max - n;\n+            let (min, max) = match int {\n+                Integer::I8 => (u8::min_value() as u128, u8::max_value() as u128),\n+                Integer::I16 => (u16::min_value() as u128, u16::max_value() as u128),\n+                Integer::I32 => (u32::min_value() as u128, u32::max_value() as u128),\n+                Integer::I64 => (u64::min_value() as u128, u64::max_value() as u128),\n+                Integer::I128 => (u128::min_value(), u128::max_value()),\n+            };\n+            let val = self.val;\n+            let oflo = val > max - n;\n             let val = if oflo {\n-                min + (n - (max - self.val))\n+                min + (n - (max - val))\n             } else {\n-                self.val + n\n+                val + n\n             };\n             (Self {\n-                val,\n+                val: val,\n                 ty: self.ty,\n             }, oflo)\n         }"}]}