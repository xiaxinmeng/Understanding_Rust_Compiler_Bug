{"sha": "06a1c14d52a8482a33416c21b320970cab80cccc", "node_id": "C_kwDOAAsO6NoAKDA2YTFjMTRkNTJhODQ4MmEzMzQxNmMyMWIzMjA5NzBjYWI4MGNjY2M", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-12-17T13:53:28Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-12-23T11:03:47Z"}, "message": "Switch all libraries to the 2021 edition", "tree": {"sha": "c65ae1e5cf06d9bf4ec6d9db91427e39a65acdda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c65ae1e5cf06d9bf4ec6d9db91427e39a65acdda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06a1c14d52a8482a33416c21b320970cab80cccc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmHEV5MACgkQbQF6ltjm\nwvnBSA/+IJerwSEn3vVqaO5YrITzcuytlj9E2tiUEL4IdNXB0kc5NwAQSEVhkqVf\nTAjYgyxQ15Q+sm7Xw67Pp+IdT1H3hSnGQLRkOJH3UkvADbA0eRqSdRTbqxwlHeR4\nUbvpxpABYznBiTS3vE9JOhd3Ige66Wy89Rb4ydauItKI/rJJZDnkDF3v14zqh/AO\ncGXFYr2s68byupQdGGrwm+4ykpGYE5k52aePp4wHEhQ3aJWG3yPTh6gSoK4nj9G7\nzAqP93bjmoPwE62BKy4QMD9780bK13IZGFzpOlaDbSVxHo1Hfn5tEN9tV4bdYC+h\nYJde5zrDToqbq09LjFMRHcZSfMWQmqOaxyJFjo/mZhF953VyrlXX6QxrcqZaBi4D\nVvgyqmH6NaohmSSJ9SQaw7Uwvr2NrULtJ2wq2n+y9D8zOc5a7L1fEX52lQdQtAFf\nB2VVJTs3rBUKz2IbvDWuJrLWIS12C3lPtN7s6iBp1ntsEBeRfvZEH/WBo6HCKtwp\nRzShKE8pQnA1XkCIu96LcdGG+Gm5Lcx6zEFxmv5PQN0c2nC7qhKgufrcaWVoCfXr\nij4cB6csYfUZDzuyccKZYsTeOn/kihag+3dc1QZCkA9ULAbcymn5AjOt6Ng+Oza5\npOlLIAeqORYfKENu8zaKhJqQ2SA60AXMYx6GvRmO8gQn/o9FxMA=\n=Vmm2\n-----END PGP SIGNATURE-----", "payload": "tree c65ae1e5cf06d9bf4ec6d9db91427e39a65acdda\nparent f52eb4ca8b21371f435a1941e05af749a5894df1\nauthor Deadbeef <ent3rm4n@gmail.com> 1639749208 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1640257427 +0800\n\nSwitch all libraries to the 2021 edition\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06a1c14d52a8482a33416c21b320970cab80cccc", "html_url": "https://github.com/rust-lang/rust/commit/06a1c14d52a8482a33416c21b320970cab80cccc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06a1c14d52a8482a33416c21b320970cab80cccc/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f52eb4ca8b21371f435a1941e05af749a5894df1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f52eb4ca8b21371f435a1941e05af749a5894df1", "html_url": "https://github.com/rust-lang/rust/commit/f52eb4ca8b21371f435a1941e05af749a5894df1"}], "stats": {"total": 83, "additions": 18, "deletions": 65}, "files": [{"sha": "265020209eb12742c64b4c8c48a98856bc55ed7b", "filename": "library/alloc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Falloc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Falloc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2FCargo.toml?ref=06a1c14d52a8482a33416c21b320970cab80cccc", "patch": "@@ -6,7 +6,7 @@ repository = \"https://github.com/rust-lang/rust.git\"\n description = \"The Rust core allocation and collections library\"\n autotests = false\n autobenches = false\n-edition = \"2018\"\n+edition = \"2021\"\n \n [dependencies]\n core = { path = \"../core\" }"}, {"sha": "6bc4ba3cc0edf24dd75e18062d636c6debb1315b", "filename": "library/core/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Fcore%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Fcore%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2FCargo.toml?ref=06a1c14d52a8482a33416c21b320970cab80cccc", "patch": "@@ -6,7 +6,7 @@ repository = \"https://github.com/rust-lang/rust.git\"\n description = \"The Rust Core Library\"\n autotests = false\n autobenches = false\n-edition = \"2018\"\n+edition = \"2021\"\n \n [lib]\n test = false"}, {"sha": "121aa634deb330988fb3c4ad224e11e619677d1b", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=06a1c14d52a8482a33416c21b320970cab80cccc", "patch": "@@ -66,8 +66,6 @@ where\n ///\n /// ```rust\n /// #![feature(array_from_fn)]\n-/// # // Apparently these doc tests are still on edition2018\n-/// # use std::convert::TryInto;\n ///\n /// let array: Result<[u8; 5], _> = std::array::try_from_fn(|i| i.try_into());\n /// assert_eq!(array, Ok([0, 1, 2, 3, 4]));"}, {"sha": "d40f69f8b35743d3bd5c662d86401b83a35fecef", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=06a1c14d52a8482a33416c21b320970cab80cccc", "patch": "@@ -426,8 +426,6 @@ pub trait TryInto<T>: Sized {\n /// `TryFrom<T>` can be implemented as follows:\n ///\n /// ```\n-/// use std::convert::TryFrom;\n-///\n /// struct GreaterThanZero(i32);\n ///\n /// impl TryFrom<i32> for GreaterThanZero {\n@@ -448,8 +446,6 @@ pub trait TryInto<T>: Sized {\n /// As described, [`i32`] implements `TryFrom<`[`i64`]`>`:\n ///\n /// ```\n-/// use std::convert::TryFrom;\n-///\n /// let big_number = 1_000_000_000_000i64;\n /// // Silently truncates `big_number`, requires detecting\n /// // and handling the truncation after the fact."}, {"sha": "26c97b8ed785dd992f2a316147060b9628b51c07", "filename": "library/core/src/iter/traits/collect.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs?ref=06a1c14d52a8482a33416c21b320970cab80cccc", "patch": "@@ -15,8 +15,6 @@\n /// Basic usage:\n ///\n /// ```\n-/// use std::iter::FromIterator;\n-///\n /// let five_fives = std::iter::repeat(5).take(5);\n ///\n /// let v = Vec::from_iter(five_fives);\n@@ -37,8 +35,6 @@\n /// Implementing `FromIterator` for your type:\n ///\n /// ```\n-/// use std::iter::FromIterator;\n-///\n /// // A sample collection, that's just a wrapper over Vec<T>\n /// #[derive(Debug)]\n /// struct MyCollection(Vec<i32>);\n@@ -102,8 +98,6 @@ pub trait FromIterator<A>: Sized {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// use std::iter::FromIterator;\n-    ///\n     /// let five_fives = std::iter::repeat(5).take(5);\n     ///\n     /// let v = Vec::from_iter(five_fives);"}, {"sha": "2049adafa2fed9a02ad6f950dddba51eeb81f89b", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=06a1c14d52a8482a33416c21b320970cab80cccc", "patch": "@@ -1155,8 +1155,6 @@ pub trait Iterator {\n     /// Stopping after an initial [`None`]:\n     ///\n     /// ```\n-    /// use std::convert::TryFrom;\n-    ///\n     /// let a = [0, 1, 2, -3, 4, 5, -6];\n     ///\n     /// let iter = a.iter().map_while(|x| u32::try_from(*x).ok());\n@@ -1172,8 +1170,6 @@ pub trait Iterator {\n     /// removed:\n     ///\n     /// ```\n-    /// use std::convert::TryFrom;\n-    ///\n     /// let a = [1, 2, -3, 4];\n     /// let mut iter = a.iter();\n     ///"}, {"sha": "6f7c5a6d119945fe5acc75bf55d09b2a90b0e694", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=06a1c14d52a8482a33416c21b320970cab80cccc", "patch": "@@ -2602,8 +2602,6 @@ macro_rules! int_impl {\n         /// When starting from a slice rather than an array, fallible conversion APIs can be used:\n         ///\n         /// ```\n-        /// use std::convert::TryInto;\n-        ///\n         #[doc = concat!(\"fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\")]\n         #[doc = concat!(\"    let (int_bytes, rest) = input.split_at(std::mem::size_of::<\", stringify!($SelfT), \">());\")]\n         ///     *input = rest;\n@@ -2633,8 +2631,6 @@ macro_rules! int_impl {\n         /// When starting from a slice rather than an array, fallible conversion APIs can be used:\n         ///\n         /// ```\n-        /// use std::convert::TryInto;\n-        ///\n         #[doc = concat!(\"fn read_le_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\")]\n         #[doc = concat!(\"    let (int_bytes, rest) = input.split_at(std::mem::size_of::<\", stringify!($SelfT), \">());\")]\n         ///     *input = rest;\n@@ -2675,8 +2671,6 @@ macro_rules! int_impl {\n         /// When starting from a slice rather than an array, fallible conversion APIs can be used:\n         ///\n         /// ```\n-        /// use std::convert::TryInto;\n-        ///\n         #[doc = concat!(\"fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\")]\n         #[doc = concat!(\"    let (int_bytes, rest) = input.split_at(std::mem::size_of::<\", stringify!($SelfT), \">());\")]\n         ///     *input = rest;"}, {"sha": "1dd8b0a18ab1bd5e81a9f16b872161994d758914", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=06a1c14d52a8482a33416c21b320970cab80cccc", "patch": "@@ -2323,8 +2323,6 @@ macro_rules! uint_impl {\n         /// When starting from a slice rather than an array, fallible conversion APIs can be used:\n         ///\n         /// ```\n-        /// use std::convert::TryInto;\n-        ///\n         #[doc = concat!(\"fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\")]\n         #[doc = concat!(\"    let (int_bytes, rest) = input.split_at(std::mem::size_of::<\", stringify!($SelfT), \">());\")]\n         ///     *input = rest;\n@@ -2354,8 +2352,6 @@ macro_rules! uint_impl {\n         /// When starting from a slice rather than an array, fallible conversion APIs can be used:\n         ///\n         /// ```\n-        /// use std::convert::TryInto;\n-        ///\n         #[doc = concat!(\"fn read_le_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\")]\n         #[doc = concat!(\"    let (int_bytes, rest) = input.split_at(std::mem::size_of::<\", stringify!($SelfT), \">());\")]\n         ///     *input = rest;\n@@ -2396,8 +2392,6 @@ macro_rules! uint_impl {\n         /// When starting from a slice rather than an array, fallible conversion APIs can be used:\n         ///\n         /// ```\n-        /// use std::convert::TryInto;\n-        ///\n         #[doc = concat!(\"fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\")]\n         #[doc = concat!(\"    let (int_bytes, rest) = input.split_at(std::mem::size_of::<\", stringify!($SelfT), \">());\")]\n         ///     *input = rest;"}, {"sha": "46183d1ad00665fdf6da15728ec3cb3c13591b9f", "filename": "library/panic_abort/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Fpanic_abort%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Fpanic_abort%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_abort%2FCargo.toml?ref=06a1c14d52a8482a33416c21b320970cab80cccc", "patch": "@@ -4,7 +4,7 @@ version = \"0.0.0\"\n license = \"MIT OR Apache-2.0\"\n repository = \"https://github.com/rust-lang/rust.git\"\n description = \"Implementation of Rust panics via process aborts\"\n-edition = \"2018\"\n+edition = \"2021\"\n \n [lib]\n test = false"}, {"sha": "d720cc7bcbdf1c3c0067b3232dc4fcd7c1d6e51a", "filename": "library/panic_unwind/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Fpanic_unwind%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Fpanic_unwind%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2FCargo.toml?ref=06a1c14d52a8482a33416c21b320970cab80cccc", "patch": "@@ -4,7 +4,7 @@ version = \"0.0.0\"\n license = \"MIT OR Apache-2.0\"\n repository = \"https://github.com/rust-lang/rust.git\"\n description = \"Implementation of Rust panics via stack unwinding\"\n-edition = \"2018\"\n+edition = \"2021\"\n \n [lib]\n test = false"}, {"sha": "db5e2e4e245ea59f84c5828116a313d543f29c4c", "filename": "library/proc_macro/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Fproc_macro%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Fproc_macro%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2FCargo.toml?ref=06a1c14d52a8482a33416c21b320970cab80cccc", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"proc_macro\"\n version = \"0.0.0\"\n-edition = \"2018\"\n+edition = \"2021\"\n \n [dependencies]\n std = { path = \"../std\" }"}, {"sha": "3371dfa124253ee29c4971be8544a5030fc95ba4", "filename": "library/profiler_builtins/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Fprofiler_builtins%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Fprofiler_builtins%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fprofiler_builtins%2FCargo.toml?ref=06a1c14d52a8482a33416c21b320970cab80cccc", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"profiler_builtins\"\n version = \"0.0.0\"\n-edition = \"2018\"\n+edition = \"2021\"\n \n [lib]\n test = false"}, {"sha": "049ca3e46b57d784c045f5e1ad7d19afa57c779b", "filename": "library/rustc-std-workspace-alloc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Frustc-std-workspace-alloc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Frustc-std-workspace-alloc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Frustc-std-workspace-alloc%2FCargo.toml?ref=06a1c14d52a8482a33416c21b320970cab80cccc", "patch": "@@ -5,7 +5,7 @@ license = 'MIT OR Apache-2.0'\n description = \"\"\"\n Hack for the compiler's own build system\n \"\"\"\n-edition = \"2018\"\n+edition = \"2021\"\n \n [lib]\n path = \"lib.rs\""}, {"sha": "ff5cfcbd641443fc1dd91cec70c6308c476eaaae", "filename": "library/rustc-std-workspace-core/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Frustc-std-workspace-core%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Frustc-std-workspace-core%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Frustc-std-workspace-core%2FCargo.toml?ref=06a1c14d52a8482a33416c21b320970cab80cccc", "patch": "@@ -5,7 +5,7 @@ license = 'MIT OR Apache-2.0'\n description = \"\"\"\n Hack for the compiler's own build system\n \"\"\"\n-edition = \"2018\"\n+edition = \"2021\"\n \n [lib]\n path = \"lib.rs\""}, {"sha": "3a1dc2a02b557abf7b16cf2400084542432e4c0a", "filename": "library/rustc-std-workspace-std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Frustc-std-workspace-std%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Frustc-std-workspace-std%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Frustc-std-workspace-std%2FCargo.toml?ref=06a1c14d52a8482a33416c21b320970cab80cccc", "patch": "@@ -5,7 +5,7 @@ license = 'MIT OR Apache-2.0'\n description = \"\"\"\n Hack for the compiler's own build system\n \"\"\"\n-edition = \"2018\"\n+edition = \"2021\"\n \n [lib]\n path = \"lib.rs\""}, {"sha": "2da41484ca564afc15543d16a356502d3a3b49b2", "filename": "library/test/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Ftest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Ftest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2FCargo.toml?ref=06a1c14d52a8482a33416c21b320970cab80cccc", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"test\"\n version = \"0.0.0\"\n-edition = \"2018\"\n+edition = \"2021\"\n \n [lib]\n crate-type = [\"dylib\", \"rlib\"]"}, {"sha": "69fce8d7795c17e442a6a65e2405f5b95ad14ba4", "filename": "library/unwind/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Funwind%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/06a1c14d52a8482a33416c21b320970cab80cccc/library%2Funwind%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2FCargo.toml?ref=06a1c14d52a8482a33416c21b320970cab80cccc", "patch": "@@ -3,7 +3,7 @@ name = \"unwind\"\n version = \"0.0.0\"\n license = \"MIT OR Apache-2.0\"\n repository = \"https://github.com/rust-lang/rust.git\"\n-edition = \"2018\"\n+edition = \"2021\"\n include = [\n   '/libunwind/*',\n ]"}, {"sha": "b0abee459869cc5d5b4981c2fe44f660f72a231f", "filename": "src/tools/tidy/src/edition.rs", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/06a1c14d52a8482a33416c21b320970cab80cccc/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a1c14d52a8482a33416c21b320970cab80cccc/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs?ref=06a1c14d52a8482a33416c21b320970cab80cccc", "patch": "@@ -2,11 +2,6 @@\n \n use std::path::Path;\n \n-fn is_edition_2018(mut line: &str) -> bool {\n-    line = line.trim();\n-    line == \"edition = \\\"2018\\\"\"\n-}\n-\n fn is_edition_2021(mut line: &str) -> bool {\n     line = line.trim();\n     line == \"edition = \\\"2021\\\"\"\n@@ -23,27 +18,13 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 return;\n             }\n \n-            // Not all library crates are ready to migrate to 2021.\n-            if file.components().any(|c| c.as_os_str() == \"library\")\n-                && file.components().all(|c| c.as_os_str() != \"std\")\n-            {\n-                let has = contents.lines().any(is_edition_2018);\n-                if !has {\n-                    tidy_error!(\n-                        bad,\n-                        \"{} doesn't have `edition = \\\"2018\\\"` on a separate line\",\n-                        file.display()\n-                    );\n-                }\n-            } else {\n-                let is_2021 = contents.lines().any(is_edition_2021);\n-                if !is_2021 {\n-                    tidy_error!(\n-                        bad,\n-                        \"{} doesn't have `edition = \\\"2021\\\"` on a separate line\",\n-                        file.display()\n-                    );\n-                }\n+            let is_2021 = contents.lines().any(is_edition_2021);\n+            if !is_2021 {\n+                tidy_error!(\n+                    bad,\n+                    \"{} doesn't have `edition = \\\"2021\\\"` on a separate line\",\n+                    file.display()\n+                );\n             }\n         },\n     );"}]}