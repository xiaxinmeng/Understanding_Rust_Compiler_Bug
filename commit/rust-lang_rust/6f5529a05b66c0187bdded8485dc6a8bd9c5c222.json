{"sha": "6f5529a05b66c0187bdded8485dc6a8bd9c5c222", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNTUyOWEwNWI2NmMwMTg3YmRkZWQ4NDg1ZGM2YThiZDljNWMyMjI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-20T18:47:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-20T18:47:27Z"}, "message": "Merge branch 'master' into patch-1", "tree": {"sha": "9cc7bf010b018a4db8fdac09d20fa2e66fb09150", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cc7bf010b018a4db8fdac09d20fa2e66fb09150"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f5529a05b66c0187bdded8485dc6a8bd9c5c222", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdC9S/CRBK7hj4Ov3rIwAAdHIIAKIhO8PmIlXRV+y+LsPTvev2\nqkjSK1PYFx7JMUGePYzATIfaPQVCiwWjwQ/2rg+LcU9FqPstatXsgwB6/Ov9JQhz\nOwu79CHaYDB8Or9rSy0/i2mJjX/irxJIFoSq6IkXq+HTlnpczzbeUW6ifM6Pm7oe\nRfO1Ph0MN6xATkQNzgsxDtLUDZh6Ae6/nTF4GzfZiAabOtWRJBrVgoP5WRpv7vfr\nNOPIdBlrwWnRlJdcY1K9HbE79OumaUOzPrRekD+4JpN7vuyuF9xcQB4vwlh1e8Qk\nQZbV5A7zkowsEngrXVCDnuSYE2zXXtP83HmoXHJEc4yvdxf3tkChxN7wgyEGNHk=\n=9Q2I\n-----END PGP SIGNATURE-----\n", "payload": "tree 9cc7bf010b018a4db8fdac09d20fa2e66fb09150\nparent 03eff5981b05ab20461e745a031bd6599a41af7d\nparent e4b298bc4f5a7e86eb78404e25de08f179091e03\nauthor Ralf Jung <post@ralfj.de> 1561056447 +0200\ncommitter GitHub <noreply@github.com> 1561056447 +0200\n\nMerge branch 'master' into patch-1"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f5529a05b66c0187bdded8485dc6a8bd9c5c222", "html_url": "https://github.com/rust-lang/rust/commit/6f5529a05b66c0187bdded8485dc6a8bd9c5c222", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03eff5981b05ab20461e745a031bd6599a41af7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/03eff5981b05ab20461e745a031bd6599a41af7d", "html_url": "https://github.com/rust-lang/rust/commit/03eff5981b05ab20461e745a031bd6599a41af7d"}, {"sha": "e4b298bc4f5a7e86eb78404e25de08f179091e03", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b298bc4f5a7e86eb78404e25de08f179091e03", "html_url": "https://github.com/rust-lang/rust/commit/e4b298bc4f5a7e86eb78404e25de08f179091e03"}], "stats": {"total": 203, "additions": 176, "deletions": 27}, "files": [{"sha": "9d2a8772234b3944ccc4a267d62667813c517f0f", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=6f5529a05b66c0187bdded8485dc6a8bd9c5c222", "patch": "@@ -1 +1 @@\n-d8f50ab0ea6c529c24e575279acc72093caeb679\n+374c63e0fc356eb61b1966cb6026a2a49fe9226d"}, {"sha": "9b0d02f4b7e29ca622e07c1cf99a23eba9d49530", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=6f5529a05b66c0187bdded8485dc6a8bd9c5c222", "patch": "@@ -43,7 +43,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n         compiler.session().abort_if_errors();\n         compiler.global_ctxt().unwrap().peek_mut().enter(|tcx| {\n             if std::env::args().any(|arg| arg == \"--test\") {\n-                struct Visitor<'tcx>(TyCtxt<'tcx, 'tcx>);\n+                struct Visitor<'tcx>(TyCtxt<'tcx>);\n                 impl<'tcx, 'hir> itemlikevisit::ItemLikeVisitor<'hir> for Visitor<'tcx> {\n                     fn visit_item(&mut self, i: &'hir hir::Item) {\n                         if let hir::ItemKind::Fn(.., body_id) = i.node {"}, {"sha": "eca1d9144ec4e8c154612ec41f64e87fa15115fb", "filename": "src/fn_call.rs", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=6f5529a05b66c0187bdded8485dc6a8bd9c5c222", "patch": "@@ -560,18 +560,56 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let n = this.memory().get(ptr.alloc_id)?.read_c_str(tcx, ptr)?.len();\n                 this.write_scalar(Scalar::from_uint(n as u64, dest.layout.size), dest)?;\n             }\n-            \"cbrt\" => {\n+\n+            // math functions\n+\n+            \"cbrtf\" | \"coshf\" | \"sinhf\" |\"tanf\" => {\n+                // FIXME: Using host floats.\n+                let f = f32::from_bits(this.read_scalar(args[0])?.to_u32()?);\n+                let f = match link_name {\n+                    \"cbrtf\" => f.cbrt(),\n+                    \"coshf\" => f.cosh(),\n+                    \"sinhf\" => f.sinh(),\n+                    \"tanf\" => f.tan(),\n+                    _ => bug!(),\n+                };\n+                this.write_scalar(Scalar::from_u32(f.to_bits()), dest)?;\n+            }\n+            // underscore case for windows\n+            \"_hypotf\" | \"hypotf\" | \"atan2f\" => {\n+                // FIXME: Using host floats.\n+                let f1 = f32::from_bits(this.read_scalar(args[0])?.to_u32()?);\n+                let f2 = f32::from_bits(this.read_scalar(args[1])?.to_u32()?);\n+                let n = match link_name {\n+                    \"_hypotf\" | \"hypotf\" => f1.hypot(f2),\n+                    \"atan2f\" => f1.atan2(f2),\n+                    _ => bug!(),\n+                };\n+                this.write_scalar(Scalar::from_u32(n.to_bits()), dest)?;\n+            }\n+\n+            \"cbrt\" | \"cosh\" | \"sinh\" | \"tan\" => {\n                 // FIXME: Using host floats.\n                 let f = f64::from_bits(this.read_scalar(args[0])?.to_u64()?);\n-                let n = f.cbrt();\n-                this.write_scalar(Scalar::from_u64(n.to_bits()), dest)?;\n+                let f = match link_name {\n+                    \"cbrt\" => f.cbrt(),\n+                    \"cosh\" => f.cosh(),\n+                    \"sinh\" => f.sinh(),\n+                    \"tan\" => f.tan(),\n+                    _ => bug!(),\n+                };\n+                this.write_scalar(Scalar::from_u64(f.to_bits()), dest)?;\n             }\n             // underscore case for windows\n-            \"_hypot\" | \"hypot\" => {\n+            \"_hypot\" | \"hypot\" | \"atan2\" => {\n                 // FIXME: Using host floats.\n                 let f1 = f64::from_bits(this.read_scalar(args[0])?.to_u64()?);\n                 let f2 = f64::from_bits(this.read_scalar(args[1])?.to_u64()?);\n-                let n = f1.hypot(f2);\n+                let n = match link_name {\n+                    \"_hypot\" | \"hypot\" => f1.hypot(f2),\n+                    \"atan2\" => f1.atan2(f2),\n+                    _ => bug!(),\n+                };\n                 this.write_scalar(Scalar::from_u64(n.to_bits()), dest)?;\n             }\n "}, {"sha": "0ecccd02d7e1b6a6c92f26c531b8d665dfd03ba9", "filename": "src/intrinsic.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/src%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/src%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic.rs?ref=6f5529a05b66c0187bdded8485dc6a8bd9c5c222", "patch": "@@ -272,7 +272,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let b = this.read_immediate(args[1])?;\n                 // check x % y != 0\n                 if this.binary_op(mir::BinOp::Rem, a, b)?.0.to_bits(dest.layout.size)? != 0 {\n-                    return err!(ValidationFailure(format!(\"exact_div: {:?} cannot be divided by {:?}\", a, b)));\n+                    // Check if `b` is -1, which is the \"min_value / -1\" case.\n+                    let minus1 = Scalar::from_int(-1, dest.layout.size);\n+                    return if b.to_scalar().unwrap() == minus1 {\n+                        err!(Intrinsic(format!(\"exact_div: result of dividing MIN by -1 cannot be represented\")))\n+                    } else {\n+                        err!(Intrinsic(format!(\"exact_div: {:?} cannot be divided by {:?} without remainder\", *a, *b)))\n+                    };\n                 }\n                 this.binop_ignore_overflow(mir::BinOp::Div, a, b, dest)?;\n             },\n@@ -459,6 +465,22 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 )?;\n             }\n \n+            \"unchecked_add\" | \"unchecked_sub\" | \"unchecked_mul\" => {\n+                let l = this.read_immediate(args[0])?;\n+                let r = this.read_immediate(args[1])?;\n+                let op = match intrinsic_name.get() {\n+                    \"unchecked_add\" => mir::BinOp::Add,\n+                    \"unchecked_sub\" => mir::BinOp::Sub,\n+                    \"unchecked_mul\" => mir::BinOp::Mul,\n+                    _ => bug!(),\n+                };\n+                let (res, overflowed) = this.binary_op(op, l, r)?;\n+                if overflowed {\n+                    return err!(Intrinsic(format!(\"Overflowing arithmetic in {}\", intrinsic_name.get())));\n+                }\n+                this.write_scalar(res, dest)?;\n+            }\n+\n             \"uninit\" => {\n                 // Check fast path: we don't want to force an allocation in case the destination is a simple value,\n                 // but we also do not want to create a new allocation with 0s and then copy that over."}, {"sha": "061b07478a28bcf0d2dd4f5a654c0d4e0cd07e14", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=6f5529a05b66c0187bdded8485dc6a8bd9c5c222", "patch": "@@ -72,7 +72,7 @@ pub struct MiriConfig {\n \n // Used by priroda.\n pub fn create_ecx<'mir, 'tcx: 'mir>(\n-    tcx: TyCtxt<'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx>,\n     main_id: DefId,\n     config: MiriConfig,\n ) -> InterpResult<'tcx, InterpretCx<'mir, 'tcx, Evaluator<'tcx>>> {\n@@ -212,7 +212,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n }\n \n pub fn eval_main<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx>,\n     main_id: DefId,\n     config: MiriConfig,\n ) {\n@@ -475,7 +475,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n \n     fn find_foreign_static(\n         def_id: DefId,\n-        tcx: TyCtxtAt<'tcx, 'tcx>,\n+        tcx: TyCtxtAt<'tcx>,\n     ) -> InterpResult<'tcx, Cow<'tcx, Allocation>> {\n         let attrs = tcx.get_attrs(def_id);\n         let link_name = match attr::first_attr_value_str_by_name(&attrs, sym::link_name) {"}, {"sha": "3200504ddb6e1d45ce85daf15d1345f995f49294", "filename": "tests/compile-fail/div-by-zero-3.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Fcompile-fail%2Fdiv-by-zero-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Fcompile-fail%2Fdiv-by-zero-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdiv-by-zero-3.rs?ref=6f5529a05b66c0187bdded8485dc6a8bd9c5c222", "patch": "@@ -0,0 +1,11 @@\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics::*;\n+\n+//error-pattern: Division by 0 in unchecked_rem\n+\n+fn main() {\n+    unsafe {\n+        let _n = unchecked_rem(3u32, 0);\n+    }\n+}"}, {"sha": "171bedeadc672bb03e1e8f981f7e62b8082d6a5e", "filename": "tests/compile-fail/exact_div1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Fcompile-fail%2Fexact_div1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Fcompile-fail%2Fexact_div1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fexact_div1.rs?ref=6f5529a05b66c0187bdded8485dc6a8bd9c5c222", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // divison by 0\n+    unsafe { std::intrinsics::exact_div(2, 0); } //~ ERROR divisor of zero\n+}"}, {"sha": "22bcf027dd05f854aa1556825e3e2ae4091c30e7", "filename": "tests/compile-fail/exact_div2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Fcompile-fail%2Fexact_div2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Fcompile-fail%2Fexact_div2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fexact_div2.rs?ref=6f5529a05b66c0187bdded8485dc6a8bd9c5c222", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // divison with a remainder\n+    unsafe { std::intrinsics::exact_div(2u16, 3); } //~ ERROR Scalar(0x0002) cannot be divided by Scalar(0x0003) without remainder\n+}"}, {"sha": "2db62e0092d51ebaf08160cc14756450899d7dd6", "filename": "tests/compile-fail/exact_div3.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Fcompile-fail%2Fexact_div3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Fcompile-fail%2Fexact_div3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fexact_div3.rs?ref=6f5529a05b66c0187bdded8485dc6a8bd9c5c222", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // signed divison with a remainder\n+    unsafe { std::intrinsics::exact_div(-19i8, 2); } //~ ERROR Scalar(0xed) cannot be divided by Scalar(0x02) without remainder\n+}"}, {"sha": "736d4f2516d2ddb6a958870354084091c75a52a9", "filename": "tests/compile-fail/exact_div4.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Fcompile-fail%2Fexact_div4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Fcompile-fail%2Fexact_div4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fexact_div4.rs?ref=6f5529a05b66c0187bdded8485dc6a8bd9c5c222", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // divison of min_value by -1\n+    unsafe { std::intrinsics::exact_div(i64::min_value(), -1); } //~ ERROR result of dividing MIN by -1 cannot be represented\n+}"}, {"sha": "2447c8ba4a818cb68f3d5a1084d3dd9bb5061ebe", "filename": "tests/compile-fail/unchecked_add1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Fcompile-fail%2Funchecked_add1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Fcompile-fail%2Funchecked_add1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funchecked_add1.rs?ref=6f5529a05b66c0187bdded8485dc6a8bd9c5c222", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // MAX overflow\n+    unsafe { std::intrinsics::unchecked_add(40000u16, 30000); } //~ ERROR Overflowing arithmetic in unchecked_add\n+}"}, {"sha": "e292cdf6d961e07f3858a9cf02d9edc350188c80", "filename": "tests/compile-fail/unchecked_add2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Fcompile-fail%2Funchecked_add2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Fcompile-fail%2Funchecked_add2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funchecked_add2.rs?ref=6f5529a05b66c0187bdded8485dc6a8bd9c5c222", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // MIN overflow\n+    unsafe { std::intrinsics::unchecked_add(-30000i16, -8000); } //~ ERROR Overflowing arithmetic in unchecked_add\n+}"}, {"sha": "57bfaf124c2417c593db226fdf2cb9f3fd78f9bc", "filename": "tests/compile-fail/unchecked_mul1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Fcompile-fail%2Funchecked_mul1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Fcompile-fail%2Funchecked_mul1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funchecked_mul1.rs?ref=6f5529a05b66c0187bdded8485dc6a8bd9c5c222", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // MAX overflow\n+    unsafe { std::intrinsics::unchecked_mul(300u16, 250u16); } //~ ERROR Overflowing arithmetic in unchecked_mul\n+}"}, {"sha": "690f2dc76284ccc4cb4dfaa8779bee7ebd167dd8", "filename": "tests/compile-fail/unchecked_mul2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Fcompile-fail%2Funchecked_mul2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Fcompile-fail%2Funchecked_mul2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funchecked_mul2.rs?ref=6f5529a05b66c0187bdded8485dc6a8bd9c5c222", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // MIN overflow\n+    unsafe { std::intrinsics::unchecked_mul(1_000_000_000i32, -4); } //~ ERROR Overflowing arithmetic in unchecked_mul\n+}"}, {"sha": "0be8afa2c34cc8010ccb52c405660f700cd1e5af", "filename": "tests/compile-fail/unchecked_sub1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Fcompile-fail%2Funchecked_sub1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Fcompile-fail%2Funchecked_sub1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funchecked_sub1.rs?ref=6f5529a05b66c0187bdded8485dc6a8bd9c5c222", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // MIN overflow\n+    unsafe { std::intrinsics::unchecked_sub(14u32, 22); } //~ ERROR Overflowing arithmetic in unchecked_sub\n+}"}, {"sha": "bc23fa37c36764368b6081aec2446bac3fbdc353", "filename": "tests/compile-fail/unchecked_sub2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Fcompile-fail%2Funchecked_sub2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Fcompile-fail%2Funchecked_sub2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funchecked_sub2.rs?ref=6f5529a05b66c0187bdded8485dc6a8bd9c5c222", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // MAX overflow\n+    unsafe { std::intrinsics::unchecked_sub(30000i16, -7000); } //~ ERROR Overflowing arithmetic in unchecked_sub\n+}"}, {"sha": "af3517af6f7a021582e172280607fa1e8a585ace", "filename": "tests/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintrinsics-integer.rs?ref=6f5529a05b66c0187bdded8485dc6a8bd9c5c222", "patch": "@@ -8,23 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(intrinsics)]\n-\n-mod rusti {\n-    extern \"rust-intrinsic\" {\n-        pub fn ctpop<T>(x: T) -> T;\n-        pub fn ctlz<T>(x: T) -> T;\n-        pub fn ctlz_nonzero<T>(x: T) -> T;\n-        pub fn cttz<T>(x: T) -> T;\n-        pub fn cttz_nonzero<T>(x: T) -> T;\n-        pub fn bswap<T>(x: T) -> T;\n-    }\n-}\n+#![feature(core_intrinsics)]\n+use std::intrinsics::*;\n \n pub fn main() {\n     unsafe {\n-        use crate::rusti::*;\n-\n         assert_eq!(ctpop(0u8), 0); assert_eq!(ctpop(0i8), 0);\n         assert_eq!(ctpop(0u16), 0); assert_eq!(ctpop(0i16), 0);\n         assert_eq!(ctpop(0u32), 0); assert_eq!(ctpop(0i32), 0);\n@@ -138,5 +126,29 @@ pub fn main() {\n         assert_eq!(bswap(0x0ABBCC0Di32), 0x0DCCBB0A);\n         assert_eq!(bswap(0x0122334455667708u64), 0x0877665544332201);\n         assert_eq!(bswap(0x0122334455667708i64), 0x0877665544332201);\n+\n+        assert_eq!(exact_div(9*9u32, 3), 27);\n+        assert_eq!(exact_div(-9*9i32, 3), -27);\n+        assert_eq!(exact_div(9*9i8, -3), -27);\n+        assert_eq!(exact_div(-9*9i64, -3), 27);\n+\n+        assert_eq!(unchecked_div(9*9u32, 2), 40);\n+        assert_eq!(unchecked_div(-9*9i32, 2), -40);\n+        assert_eq!(unchecked_div(9*9i8, -2), -40);\n+        assert_eq!(unchecked_div(-9*9i64, -2), 40);\n+\n+        assert_eq!(unchecked_rem(9*9u32, 2), 1);\n+        assert_eq!(unchecked_rem(-9*9i32, 2), -1);\n+        assert_eq!(unchecked_rem(9*9i8, -2), 1);\n+        assert_eq!(unchecked_rem(-9*9i64, -2), -1);\n+\n+        assert_eq!(unchecked_add(23u8, 19), 42);\n+        assert_eq!(unchecked_add(5, -10), -5);\n+\n+        assert_eq!(unchecked_sub(23u8, 19), 4);\n+        assert_eq!(unchecked_sub(-17, -27), 10);\n+\n+        assert_eq!(unchecked_mul(6u8, 7), 42);\n+        assert_eq!(unchecked_mul(13, -5), -65);\n     }\n }"}, {"sha": "20c0f674948869308c32547b1ea6d1a382e6bbd6", "filename": "tests/run-pass/intrinsics-math.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Frun-pass%2Fintrinsics-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5529a05b66c0187bdded8485dc6a8bd9c5c222/tests%2Frun-pass%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintrinsics-math.rs?ref=6f5529a05b66c0187bdded8485dc6a8bd9c5c222", "patch": "@@ -67,6 +67,22 @@ pub fn main() {\n     assert_approx_eq!(0.1f32.trunc(), 0.0f32);\n     assert_approx_eq!((-0.1f64).trunc(), 0.0f64);\n \n-    assert_approx_eq!(27f64.cbrt(), 3.0f64);\n-    assert_approx_eq!(3f64.hypot(4f64), 5.0f64);\n+    assert_approx_eq!(27.0f32.cbrt(), 3.0f32);\n+    assert_approx_eq!(27.0f64.cbrt(), 3.0f64);\n+\n+    assert_approx_eq!(3.0f32.hypot(4.0f32), 5.0f32);\n+    assert_approx_eq!(3.0f64.hypot(4.0f64), 5.0f64);\n+\n+    assert_approx_eq!(1.0f32.atan2(2.0f32), 0.46364761f32);\n+    assert_approx_eq!(1.0f32.atan2(2.0f32), 0.46364761f32);\n+\n+    assert_approx_eq!(1.0f32.cosh(), 1.54308f32);\n+    assert_approx_eq!(1.0f64.cosh(), 1.54308f64);\n+\n+    assert_approx_eq!(1.0f32.sinh(), 1.1752012f32);\n+    assert_approx_eq!(1.0f64.sinh(), 1.1752012f64);\n+\n+    assert_approx_eq!(1.0f32.tan(), 1.557408f32);\n+    assert_approx_eq!(1.0f64.tan(), 1.557408f64);\n+\n }"}]}