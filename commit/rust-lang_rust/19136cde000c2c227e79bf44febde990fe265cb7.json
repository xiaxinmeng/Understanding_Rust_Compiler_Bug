{"sha": "19136cde000c2c227e79bf44febde990fe265cb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MTM2Y2RlMDAwYzJjMjI3ZTc5YmY0NGZlYmRlOTkwZmUyNjVjYjc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-11T17:43:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-11T17:43:10Z"}, "message": "uncopypaste def sources", "tree": {"sha": "59693dafb7c1f1104ab99a0d7b90d3fca4089cb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59693dafb7c1f1104ab99a0d7b90d3fca4089cb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19136cde000c2c227e79bf44febde990fe265cb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19136cde000c2c227e79bf44febde990fe265cb7", "html_url": "https://github.com/rust-lang/rust/commit/19136cde000c2c227e79bf44febde990fe265cb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19136cde000c2c227e79bf44febde990fe265cb7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f9c350812e37b3cf2a1fcfb3c60a78122d60bf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f9c350812e37b3cf2a1fcfb3c60a78122d60bf7", "html_url": "https://github.com/rust-lang/rust/commit/0f9c350812e37b3cf2a1fcfb3c60a78122d60bf7"}], "stats": {"total": 66, "additions": 26, "deletions": 40}, "files": [{"sha": "5f61bb589391eb2b1fb7dd8b12f2621c60cb2989", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/19136cde000c2c227e79bf44febde990fe265cb7/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19136cde000c2c227e79bf44febde990fe265cb7/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=19136cde000c2c227e79bf44febde990fe265cb7", "patch": "@@ -2,7 +2,7 @@ use std::sync::Arc;\n \n use relative_path::RelativePathBuf;\n use ra_db::{CrateId, Cancelable, FileId};\n-use ra_syntax::{ast, TreeArc, SyntaxNode, AstNode};\n+use ra_syntax::{ast, TreeArc, SyntaxNode};\n \n use crate::{\n     Name, DefId, Path, PerNs, ScopesWithSyntaxMapping, Ty, HirFileId,\n@@ -12,6 +12,7 @@ use crate::{\n     expr::BodySyntaxMapping,\n     ty::InferenceResult,\n     adt::VariantData,\n+    code_model_impl::def_id_to_ast,\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -186,13 +187,7 @@ impl Struct {\n         &self,\n         db: &impl HirDatabase,\n     ) -> Cancelable<(HirFileId, TreeArc<ast::StructDef>)> {\n-        let (file_id, syntax) = self.def_id.source(db);\n-        Ok((\n-            file_id,\n-            ast::StructDef::cast(&syntax)\n-                .expect(\"struct def should point to StructDef node\")\n-                .to_owned(),\n-        ))\n+        Ok(def_id_to_ast(db, self.def_id))\n     }\n }\n \n@@ -219,13 +214,7 @@ impl Enum {\n     }\n \n     pub fn source(&self, db: &impl HirDatabase) -> Cancelable<(HirFileId, TreeArc<ast::EnumDef>)> {\n-        let (file_id, syntax) = self.def_id.source(db);\n-        Ok((\n-            file_id,\n-            ast::EnumDef::cast(&syntax)\n-                .expect(\"enum def should point to EnumDef node\")\n-                .to_owned(),\n-        ))\n+        Ok(def_id_to_ast(db, self.def_id))\n     }\n }\n \n@@ -259,13 +248,7 @@ impl EnumVariant {\n         &self,\n         db: &impl HirDatabase,\n     ) -> Cancelable<(HirFileId, TreeArc<ast::EnumVariant>)> {\n-        let (file_id, syntax) = self.def_id.source(db);\n-        Ok((\n-            file_id,\n-            ast::EnumVariant::cast(&syntax)\n-                .expect(\"variant def should point to EnumVariant node\")\n-                .to_owned(),\n-        ))\n+        Ok(def_id_to_ast(db, self.def_id))\n     }\n }\n \n@@ -304,7 +287,7 @@ impl Function {\n     }\n \n     pub fn source(&self, db: &impl HirDatabase) -> Cancelable<(HirFileId, TreeArc<ast::FnDef>)> {\n-        Ok(self.source_impl(db))\n+        Ok(def_id_to_ast(db, self.def_id))\n     }\n \n     pub fn body_syntax_mapping(&self, db: &impl HirDatabase) -> Cancelable<Arc<BodySyntaxMapping>> {"}, {"sha": "0cea9f7b6ff767ef48684c1c1a3309d0c3cd5380", "filename": "crates/ra_hir/src/code_model_impl.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/19136cde000c2c227e79bf44febde990fe265cb7/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19136cde000c2c227e79bf44febde990fe265cb7/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs?ref=19136cde000c2c227e79bf44febde990fe265cb7", "patch": "@@ -1,3 +1,18 @@\n mod krate; // `crate` is invalid ident :(\n mod module;\n pub(crate) mod function;\n+\n+use ra_syntax::{AstNode, TreeArc};\n+\n+use crate::{HirDatabase, DefId, HirFileId};\n+\n+pub(crate) fn def_id_to_ast<N: AstNode>(\n+    db: &impl HirDatabase,\n+    def_id: DefId,\n+) -> (HirFileId, TreeArc<N>) {\n+    let (file_id, syntax) = def_id.source(db);\n+    let ast = N::cast(&syntax)\n+        .unwrap_or_else(|| panic!(\"def points to wrong source {:?} {:?}\", def_id, syntax))\n+        .to_owned();\n+    (file_id, ast)\n+}"}, {"sha": "1ce939e05afaa4264453f6cfd0b3f5908a5a3b27", "filename": "crates/ra_hir/src/code_model_impl/function.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/19136cde000c2c227e79bf44febde990fe265cb7/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19136cde000c2c227e79bf44febde990fe265cb7/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs?ref=19136cde000c2c227e79bf44febde990fe265cb7", "patch": "@@ -3,16 +3,14 @@ mod scope;\n use std::sync::Arc;\n \n use ra_db::Cancelable;\n-use ra_syntax::{\n-    TreeArc,\n-    ast::{self, AstNode, NameOwner},\n-};\n+use ra_syntax::{TreeArc, ast::{self, NameOwner}};\n \n use crate::{\n-    DefId, DefKind, HirDatabase, Name, AsName, Function, FnSignature, Module, HirFileId,\n+    DefId, HirDatabase, Name, AsName, Function, FnSignature, Module,\n     type_ref::{TypeRef, Mutability},\n     expr::Body,\n     impl_block::ImplBlock,\n+    code_model_impl::def_id_to_ast,\n };\n \n pub use self::scope::{FnScopes, ScopesWithSyntaxMapping, ScopeEntryWithSyntax};\n@@ -22,16 +20,6 @@ impl Function {\n         Function { def_id }\n     }\n \n-    pub(crate) fn source_impl(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::FnDef>) {\n-        let def_loc = self.def_id.loc(db);\n-        assert!(def_loc.kind == DefKind::Function);\n-        let syntax = db.file_item(def_loc.source_item_id);\n-        (\n-            def_loc.source_item_id.file_id,\n-            ast::FnDef::cast(&syntax).unwrap().to_owned(),\n-        )\n-    }\n-\n     pub(crate) fn body(&self, db: &impl HirDatabase) -> Cancelable<Arc<Body>> {\n         db.body_hir(self.def_id)\n     }\n@@ -48,8 +36,8 @@ impl Function {\n \n impl FnSignature {\n     pub(crate) fn fn_signature_query(db: &impl HirDatabase, def_id: DefId) -> Arc<FnSignature> {\n-        let func = Function::new(def_id);\n-        let node = func.source_impl(db).1; // TODO we're using source_impl here to avoid returning Cancelable... this is a bit hacky\n+        // FIXME: we're using def_id_to_ast here to avoid returning Cancelable... this is a bit hacky\n+        let node: TreeArc<ast::FnDef> = def_id_to_ast(db, def_id).1;\n         let name = node\n             .name()\n             .map(|n| n.as_name())"}]}