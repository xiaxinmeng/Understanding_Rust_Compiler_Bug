{"sha": "7c09ad0627938949829de181ab23b976b9a1507f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMDlhZDA2Mjc5Mzg5NDk4MjlkZTE4MWFiMjNiOTc2YjlhMTUwN2Y=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-05-27T00:38:41Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-06-19T18:04:30Z"}, "message": "Use builtin types for Never, Array, and FnDef", "tree": {"sha": "23abce8199ee20db06f1027de3418163463139b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23abce8199ee20db06f1027de3418163463139b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c09ad0627938949829de181ab23b976b9a1507f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c09ad0627938949829de181ab23b976b9a1507f", "html_url": "https://github.com/rust-lang/rust/commit/7c09ad0627938949829de181ab23b976b9a1507f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c09ad0627938949829de181ab23b976b9a1507f/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6aa2e9d97831fed07646419113173dd7283a756e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6aa2e9d97831fed07646419113173dd7283a756e", "html_url": "https://github.com/rust-lang/rust/commit/6aa2e9d97831fed07646419113173dd7283a756e"}], "stats": {"total": 71, "additions": 23, "deletions": 48}, "files": [{"sha": "ec32bcf8a0b67f61ea1c67cde73e4a760df549e7", "filename": "src/librustc_middle/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c09ad0627938949829de181ab23b976b9a1507f/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c09ad0627938949829de181ab23b976b9a1507f/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs?ref=7c09ad0627938949829de181ab23b976b9a1507f", "patch": "@@ -21,10 +21,8 @@ use std::hash::{Hash, Hasher};\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub enum RustDefId {\n     Adt(DefId),\n-    Never,\n-    Array,\n-    FnDef(DefId),\n \n+    FnDef(DefId),\n     Trait(DefId),\n     Impl(DefId),\n     AssocTy(DefId),"}, {"sha": "367c59802793499cd34daeb9b07561aca34091e8", "filename": "src/librustc_traits/chalk/db.rs", "status": "modified", "additions": 2, "deletions": 37, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7c09ad0627938949829de181ab23b976b9a1507f/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c09ad0627938949829de181ab23b976b9a1507f/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Fdb.rs?ref=7c09ad0627938949829de181ab23b976b9a1507f", "patch": "@@ -168,35 +168,6 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                 });\n                 struct_datum\n             }\n-            RustDefId::Array => {\n-                return Arc::new(chalk_solve::rust_ir::AdtDatum {\n-                    id: struct_id,\n-                    binders: chalk_ir::Binders::new(\n-                        chalk_ir::VariableKinds::from(\n-                            &self.interner,\n-                            Some(chalk_ir::VariableKind::Ty(chalk_ir::TyKind::General)),\n-                        ),\n-                        chalk_solve::rust_ir::AdtDatumBound {\n-                            fields: vec![],\n-                            where_clauses: vec![],\n-                        },\n-                    ),\n-                    flags: chalk_solve::rust_ir::AdtFlags { upstream: false, fundamental: false },\n-                });\n-            }\n-            RustDefId::Never | RustDefId::FnDef(_) => {\n-                return Arc::new(chalk_solve::rust_ir::AdtDatum {\n-                    id: struct_id,\n-                    binders: chalk_ir::Binders::new(\n-                        chalk_ir::VariableKinds::new(&self.interner),\n-                        chalk_solve::rust_ir::AdtDatumBound {\n-                            fields: vec![],\n-                            where_clauses: vec![],\n-                        },\n-                    ),\n-                    flags: chalk_solve::rust_ir::AdtFlags { upstream: false, fundamental: false },\n-                });\n-            }\n \n             v => bug!(\"Used not struct variant ({:?}) when expecting struct variant.\", v),\n         }\n@@ -287,8 +258,6 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         // FIXME(chalk): this match can be removed when builtin types supported\n         match struct_id.0 {\n             RustDefId::Adt(_) => {}\n-            RustDefId::Never => return false,\n-            RustDefId::Array => return false,\n             _ => bug!(\"Did not use `Adt` variant when expecting adt.\"),\n         }\n         let adt_def_id: DefId = match struct_id.0 {\n@@ -385,8 +354,6 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                     chalk_ir::TypeName::Adt(chalk_ir::AdtId(rust_def_id)) => {\n                         use rustc_middle::traits::ChalkRustDefId::*;\n                         match rust_def_id {\n-                            Never | Array | FnDef(_) => Some(true),\n-\n                             Adt(adt_def_id) => {\n                                 let adt_def = self.tcx.adt_def(adt_def_id);\n                                 match adt_def.adt_kind() {\n@@ -402,7 +369,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                                 }\n                             }\n \n-                            Trait(_) | Impl(_) | AssocTy(_) | Opaque(_) => panic!(),\n+                            FnDef(_) | Trait(_) | Impl(_) | AssocTy(_) | Opaque(_) => panic!(),\n                         }\n                     }\n                     _ => None,\n@@ -420,8 +387,6 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                     chalk_ir::TypeName::Adt(chalk_ir::AdtId(rust_def_id)) => {\n                         use rustc_middle::traits::ChalkRustDefId::*;\n                         match rust_def_id {\n-                            Never => Some(false),\n-                            FnDef(_) | Array => Some(true),\n                             Adt(adt_def_id) => {\n                                 let adt_def = self.tcx.adt_def(adt_def_id);\n                                 match adt_def.adt_kind() {\n@@ -436,7 +401,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                                     }\n                                 }\n                             }\n-                            Trait(_) | Impl(_) | AssocTy(_) | Opaque(_) => panic!(),\n+                            FnDef(_) | Trait(_) | Impl(_) | AssocTy(_) | Opaque(_) => panic!(),\n                         }\n                     }\n                     _ => None,"}, {"sha": "e4483843dd02b8438e012310cd06230b01848ee0", "filename": "src/librustc_traits/chalk/lowering.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7c09ad0627938949829de181ab23b976b9a1507f/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c09ad0627938949829de181ab23b976b9a1507f/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Flowering.rs?ref=7c09ad0627938949829de181ab23b976b9a1507f", "patch": "@@ -311,10 +311,22 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n             Foreign(_def_id) => unimplemented!(),\n             Str => apply(chalk_ir::TypeName::Str, empty()),\n             Array(ty, _) => apply(\n-                struct_ty(RustDefId::Array),\n-                chalk_ir::Substitution::from1(\n+                chalk_ir::TypeName::Array,\n+                chalk_ir::Substitution::from(\n                     interner,\n-                    chalk_ir::GenericArgData::Ty(ty.lower_into(interner)).intern(interner),\n+                    &[\n+                        chalk_ir::GenericArgData::Ty(ty.lower_into(interner)).intern(interner),\n+                        chalk_ir::GenericArgData::Const(\n+                            chalk_ir::ConstData {\n+                                ty: apply(chalk_ir::TypeName::Tuple(0), empty()),\n+                                value: chalk_ir::ConstValue::Concrete(chalk_ir::ConcreteConst {\n+                                    interned: 0,\n+                                }),\n+                            }\n+                            .intern(interner),\n+                        )\n+                        .intern(interner),\n+                    ],\n                 ),\n             ),\n             Slice(ty) => apply(\n@@ -348,7 +360,10 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                     ),\n                 )\n             }\n-            FnDef(def_id, _) => apply(struct_ty(RustDefId::FnDef(def_id)), empty()),\n+            FnDef(def_id, _) => apply(\n+                chalk_ir::TypeName::FnDef(chalk_ir::FnDefId(RustDefId::FnDef(def_id))),\n+                empty(),\n+            ),\n             FnPtr(sig) => {\n                 let (inputs_and_outputs, binders, _named_regions) =\n                     collect_bound_vars(interner, interner.tcx, &sig.inputs_and_output());\n@@ -371,7 +386,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n             Closure(_def_id, _) => unimplemented!(),\n             Generator(_def_id, _substs, _) => unimplemented!(),\n             GeneratorWitness(_) => unimplemented!(),\n-            Never => apply(struct_ty(RustDefId::Never), empty()),\n+            Never => apply(chalk_ir::TypeName::Never, empty()),\n             Tuple(substs) => {\n                 apply(chalk_ir::TypeName::Tuple(substs.len()), substs.lower_into(interner))\n             }"}, {"sha": "f33ec3a9fb91518d0534ff8230b9a9580243afa8", "filename": "src/librustc_traits/chalk/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c09ad0627938949829de181ab23b976b9a1507f/src%2Flibrustc_traits%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c09ad0627938949829de181ab23b976b9a1507f/src%2Flibrustc_traits%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Fmod.rs?ref=7c09ad0627938949829de181ab23b976b9a1507f", "patch": "@@ -108,9 +108,6 @@ crate fn evaluate_goal<'tcx>(\n                         TyData::Apply(_application_ty) => match _application_ty.name {\n                             chalk_ir::TypeName::Adt(_struct_id) => match _struct_id.0 {\n                                 RustDefId::Adt(_) => unimplemented!(),\n-                                RustDefId::Never => unimplemented!(),\n-                                RustDefId::Array => unimplemented!(),\n-                                RustDefId::FnDef(_) => unimplemented!(),\n                                 _ => panic!(\"Unexpected struct id\"),\n                             },\n                             chalk_ir::TypeName::Scalar(scalar) => match scalar {"}]}