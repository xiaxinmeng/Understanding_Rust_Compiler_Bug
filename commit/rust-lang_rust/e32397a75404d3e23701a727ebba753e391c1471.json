{"sha": "e32397a75404d3e23701a727ebba753e391c1471", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMjM5N2E3NTQwNGQzZTIzNzAxYTcyN2ViYmE3NTNlMzkxYzE0NzE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-20T17:32:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-20T17:32:04Z"}, "message": "Rollup merge of #66060 - traxys:test_65401, r=michaelwoerister\n\nMaking ICEs and test them in incremental\n\nThis adds:\n - A way to make the compiler ICE\n - A way to check for ICE in `cfail` tests with `should-ice`\n - A regression test for issue #65401\n\nI am not sure the attribute added `should-ice` is the best for this job", "tree": {"sha": "e0b1b353d1b6e6d185d96780fc85e92725ab8b57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0b1b353d1b6e6d185d96780fc85e92725ab8b57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e32397a75404d3e23701a727ebba753e391c1471", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd1XiUCRBK7hj4Ov3rIwAAdHIIAINuTDw2qzdQDp+FvRDQ4gNG\ncV4QYXIXMD426nb2d8K0Ae4C7EpBlo37vFA6HM2WktYi8TVBAZyEYr6bW8su6/Yz\njVr4WAcAeuTZwkSG/BxHqkgC/Eaq8VJVR+ZYkLgslxEn3g1pgsOcHbckMmEyz2Cq\nfk4FQboZbJNcXBULQVXEqI7amqMup0qPx9cf3HRl3BT3YppPpSZPN0ZUyxpZjCg2\nxBdaS5oyY1wffT5YOc6hsv/KRPcIPUaCFPg+zgXZRIIZzk9+Gw/MzZqP3ZwyrUUS\n51JE8eoF+1GOOMBEEn7i5DXntZgIWvRVc6I6SCO55zWvlriXhCL1qcGl6Az1M9U=\n=KDh0\n-----END PGP SIGNATURE-----\n", "payload": "tree e0b1b353d1b6e6d185d96780fc85e92725ab8b57\nparent b9cf5417892ef242c783ef963deff5436205b0f6\nparent e01d9415e26dfcdd31c182bec21049502f5477ff\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1574271124 +0100\ncommitter GitHub <noreply@github.com> 1574271124 +0100\n\nRollup merge of #66060 - traxys:test_65401, r=michaelwoerister\n\nMaking ICEs and test them in incremental\n\nThis adds:\n - A way to make the compiler ICE\n - A way to check for ICE in `cfail` tests with `should-ice`\n - A regression test for issue #65401\n\nI am not sure the attribute added `should-ice` is the best for this job\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e32397a75404d3e23701a727ebba753e391c1471", "html_url": "https://github.com/rust-lang/rust/commit/e32397a75404d3e23701a727ebba753e391c1471", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e32397a75404d3e23701a727ebba753e391c1471/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9cf5417892ef242c783ef963deff5436205b0f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9cf5417892ef242c783ef963deff5436205b0f6", "html_url": "https://github.com/rust-lang/rust/commit/b9cf5417892ef242c783ef963deff5436205b0f6"}, {"sha": "e01d9415e26dfcdd31c182bec21049502f5477ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/e01d9415e26dfcdd31c182bec21049502f5477ff", "html_url": "https://github.com/rust-lang/rust/commit/e01d9415e26dfcdd31c182bec21049502f5477ff"}], "stats": {"total": 157, "additions": 120, "deletions": 37}, "files": [{"sha": "cd93fed8e1e0e7da1bd85e1538f5a2cd70c0db5a", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -29,6 +29,12 @@ use syntax_pos::symbol::Symbol;\n // Queries marked with `fatal_cycle` do not need the latter implementation,\n // as they will raise an fatal error on query cycles instead.\n rustc_queries! {\n+    Other {\n+        query trigger_delay_span_bug(key: DefId) -> () {\n+            desc { \"trigger a delay span bug\" }\n+        }\n+    }\n+\n     Other {\n         /// Records the type of every item.\n         query type_of(key: DefId) -> Ty<'tcx> {"}, {"sha": "fb2099e71a31a136597f853f93f18dba1d50bdd0", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -19,26 +19,58 @@ extern crate rustc;\n \n use rustc::ty::TyCtxt;\n use rustc::ty::query::Providers;\n-use rustc::hir::def_id::LOCAL_CRATE;\n+use rustc::hir::def_id::{LOCAL_CRATE, DefId};\n use syntax::symbol::sym;\n \n pub mod link;\n pub mod codegen_backend;\n pub mod symbol_names;\n pub mod symbol_names_test;\n \n+\n+pub fn trigger_delay_span_bug(tcx: TyCtxt<'_>, key: DefId) {\n+    tcx.sess.delay_span_bug(\n+        tcx.def_span(key),\n+        \"delayed span bug triggered by #[rustc_error(delay_span_bug_from_inside_query)]\"\n+    );\n+}\n+\n /// check for the #[rustc_error] annotation, which forces an\n /// error in codegen. This is used to write compile-fail tests\n /// that actually test that compilation succeeds without\n /// reporting an error.\n pub fn check_for_rustc_errors_attr(tcx: TyCtxt<'_>) {\n     if let Some((def_id, _)) = tcx.entry_fn(LOCAL_CRATE) {\n-        if tcx.has_attr(def_id, sym::rustc_error) {\n-            tcx.sess.span_fatal(tcx.def_span(def_id), \"compilation successful\");\n+        let attrs = &*tcx.get_attrs(def_id);\n+        for attr in attrs {\n+            if attr.check_name(sym::rustc_error) {\n+                match attr.meta_item_list() {\n+                    // check if there is a #[rustc_error(delayed)]\n+                    Some(list) => {\n+                        if list.iter().any(|list_item| {\n+                            list_item.ident().map(|i| i.name) ==\n+                                Some(sym::delay_span_bug_from_inside_query)\n+                        }) {\n+                            tcx.ensure().trigger_delay_span_bug(def_id);\n+                        }\n+                    }\n+                    // bare #[rustc_error]\n+                    None => {\n+                        tcx.sess.span_fatal(\n+                            tcx.def_span(def_id),\n+                            \"fatal error triggered by #[rustc_error]\"\n+                        );\n+                    }\n+                }\n+            }\n         }\n     }\n }\n \n pub fn provide(providers: &mut Providers<'_>) {\n     crate::symbol_names::provide(providers);\n+    *providers = Providers {\n+        trigger_delay_span_bug,\n+        ..*providers\n+    };\n }"}, {"sha": "a13a4475ef01cd270bdac96798ffd3496d082834", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -543,7 +543,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     rustc_attr!(TEST, rustc_variance, Normal, template!(Word)),\n     rustc_attr!(TEST, rustc_layout, Normal, template!(List: \"field1, field2, ...\")),\n     rustc_attr!(TEST, rustc_regions, Normal, template!(Word)),\n-    rustc_attr!(TEST, rustc_error, Whitelisted, template!(Word)),\n+    rustc_attr!(\n+        TEST, rustc_error, Whitelisted,\n+        template!(Word, List: \"delay_span_bug_from_inside_query\")\n+    ),\n     rustc_attr!(TEST, rustc_dump_user_substs, Whitelisted, template!(Word)),\n     rustc_attr!(TEST, rustc_if_this_changed, Whitelisted, template!(Word, List: \"DepNode\")),\n     rustc_attr!(TEST, rustc_then_this_would_need, Whitelisted, template!(List: \"DepNode\")),"}, {"sha": "1139bf67a36d09ded74f31816c75695af5bf5ba7", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -236,6 +236,7 @@ symbols! {\n         default_lib_allocator,\n         default_type_parameter_fallback,\n         default_type_params,\n+        delay_span_bug_from_inside_query,\n         deny,\n         deprecated,\n         deref,"}, {"sha": "2529e531e30ad18d1d255f17d9c3bc33a0d89aab", "filename": "src/test/incremental/delayed_span_bug.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fincremental%2Fdelayed_span_bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fincremental%2Fdelayed_span_bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fdelayed_span_bug.rs?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -0,0 +1,8 @@\n+// revisions: cfail1 cfail2\n+// should-ice\n+// error-pattern: delayed span bug triggered by #[rustc_error(delay_span_bug_from_inside_query)]\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_error(delay_span_bug_from_inside_query)]\n+fn main() {}"}, {"sha": "4e6754c865dcef8173dc85e6e3d5737dc573540d", "filename": "src/test/ui/associated-types/bound-lifetime-constrained.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.rs?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -45,4 +45,4 @@ fn clause2<T>() where T: for<'a> Fn() -> <() as Foo<'a>>::Item {\n }\n \n #[rustc_error]\n-fn main() { } //[ok]~ ERROR compilation successful\n+fn main() { } //[ok]~ ERROR fatal error triggered by #[rustc_error]"}, {"sha": "5ece425196c777cba7e326998a661cea4798bcdd", "filename": "src/test/ui/associated-types/bound-lifetime-in-binding-only.ok.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.ok.stderr?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -1,4 +1,4 @@\n-error: compilation successful\n+error: fatal error triggered by #[rustc_error]\n   --> $DIR/bound-lifetime-in-binding-only.rs:71:1\n    |\n LL | fn main() { }"}, {"sha": "e714457ef7b382ecd7d7abe819927cd6851c94ac", "filename": "src/test/ui/associated-types/bound-lifetime-in-binding-only.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.rs?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -68,4 +68,4 @@ fn ok3<T>() where for<'a> Parameterized<'a>: Foo<Item=&'a i32> {\n }\n \n #[rustc_error]\n-fn main() { } //[ok]~ ERROR compilation successful\n+fn main() { } //[ok]~ ERROR fatal error triggered by #[rustc_error]"}, {"sha": "8c0980983119b9e2eba30177d3da56d5d9f190e8", "filename": "src/test/ui/associated-types/bound-lifetime-in-return-only.ok.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.ok.stderr?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -1,4 +1,4 @@\n-error: compilation successful\n+error: fatal error triggered by #[rustc_error]\n   --> $DIR/bound-lifetime-in-return-only.rs:49:1\n    |\n LL | fn main() { }"}, {"sha": "a60ccb6c4b28d8e8d443af37544620f33796fa33", "filename": "src/test/ui/associated-types/bound-lifetime-in-return-only.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.rs?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -46,4 +46,4 @@ fn ok2(_: &dyn for<'a,'b> Fn<(&'b Parameterized<'a>,), Output=&'a i32>) {\n }\n \n #[rustc_error]\n-fn main() { } //[ok]~ ERROR compilation successful\n+fn main() { } //[ok]~ ERROR fatal error triggered by #[rustc_error]"}, {"sha": "baa8e6f82f646fa0fa55d7355d370c4285656b18", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.ok.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.ok.stderr?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -1,4 +1,4 @@\n-error: compilation successful\n+error: fatal error triggered by #[rustc_error]\n   --> $DIR/project-fn-ret-contravariant.rs:50:1\n    |\n LL | fn main() { }"}, {"sha": "baa8e6f82f646fa0fa55d7355d370c4285656b18", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.oneuse.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.oneuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.oneuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.oneuse.stderr?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -1,4 +1,4 @@\n-error: compilation successful\n+error: fatal error triggered by #[rustc_error]\n   --> $DIR/project-fn-ret-contravariant.rs:50:1\n    |\n LL | fn main() { }"}, {"sha": "ebf52918153c1678c15cd0d080faddb127dce564", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -48,5 +48,5 @@ fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n \n #[rustc_error]\n fn main() { }\n-//[ok]~^ ERROR compilation successful\n-//[oneuse]~^^ ERROR compilation successful\n+//[ok]~^ ERROR fatal error triggered by #[rustc_error]\n+//[oneuse]~^^ ERROR fatal error triggered by #[rustc_error]"}, {"sha": "8f445acf2b98cf4fae8b7327221c731c98ecda97", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.ok.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.ok.stderr?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -1,4 +1,4 @@\n-error: compilation successful\n+error: fatal error triggered by #[rustc_error]\n   --> $DIR/project-fn-ret-invariant.rs:59:1\n    |\n LL | fn main() { }"}, {"sha": "23d873212ed1edbe7741fd67a35e0b1662d13e50", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -57,4 +57,4 @@ fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n \n #[rustc_error]\n fn main() { }\n-//[ok]~^ ERROR compilation successful\n+//[ok]~^ ERROR fatal error triggered by #[rustc_error]"}, {"sha": "63d88543607f3635f7db9156f21ed684138742cd", "filename": "src/test/ui/associated-types/higher-ranked-projection.good.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -1,4 +1,4 @@\n-error: compilation successful\n+error: fatal error triggered by #[rustc_error]\n   --> $DIR/higher-ranked-projection.rs:24:1\n    |\n LL | / fn main() {"}, {"sha": "5315e21b0f5a9ea2545d15d5e3550374b75c59f4", "filename": "src/test/ui/associated-types/higher-ranked-projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -21,7 +21,7 @@ fn foo<U, T>(_t: T)\n {}\n \n #[rustc_error]\n-fn main() { //[good]~ ERROR compilation successful\n+fn main() { //[good]~ ERROR fatal error triggered by #[rustc_error]\n     foo(());\n     //[bad]~^ ERROR type mismatch\n }"}, {"sha": "6aba6466fada53b920ef1bcd13d0eaf27a98ebec", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_bound_a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -1,4 +1,4 @@\n-error: compilation successful\n+error: fatal error triggered by #[rustc_error]\n   --> $DIR/hr-subtype.rs:100:1\n    |\n LL | / fn main() {"}, {"sha": "6aba6466fada53b920ef1bcd13d0eaf27a98ebec", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_bound_b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -1,4 +1,4 @@\n-error: compilation successful\n+error: fatal error triggered by #[rustc_error]\n   --> $DIR/hr-subtype.rs:100:1\n    |\n LL | / fn main() {"}, {"sha": "6aba6466fada53b920ef1bcd13d0eaf27a98ebec", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_vs_bound_co_b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -1,4 +1,4 @@\n-error: compilation successful\n+error: fatal error triggered by #[rustc_error]\n   --> $DIR/hr-subtype.rs:100:1\n    |\n LL | / fn main() {"}, {"sha": "6aba6466fada53b920ef1bcd13d0eaf27a98ebec", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -1,4 +1,4 @@\n-error: compilation successful\n+error: fatal error triggered by #[rustc_error]\n   --> $DIR/hr-subtype.rs:100:1\n    |\n LL | / fn main() {"}, {"sha": "6aba6466fada53b920ef1bcd13d0eaf27a98ebec", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_x.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -1,4 +1,4 @@\n-error: compilation successful\n+error: fatal error triggered by #[rustc_error]\n   --> $DIR/hr-subtype.rs:100:1\n    |\n LL | / fn main() {"}, {"sha": "b31f198bd97bf8cee87182f5f2efae6780ce8870", "filename": "src/test/ui/hr-subtype/hr-subtype.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -98,9 +98,9 @@ check! { bound_a_b_ret_a_vs_bound_a_ret_a: (for<'a,'b> fn(&'a u32, &'b u32) -> &\n \n #[rustc_error]\n fn main() {\n-//[bound_a_vs_bound_a]~^ ERROR compilation successful\n-//[bound_a_vs_bound_b]~^^ ERROR compilation successful\n-//[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n-//[bound_co_a_vs_bound_co_b]~^^^^ ERROR compilation successful\n-//[free_x_vs_free_x]~^^^^^ ERROR compilation successful\n+//[bound_a_vs_bound_a]~^ ERROR fatal error triggered by #[rustc_error]\n+//[bound_a_vs_bound_b]~^^ ERROR fatal error triggered by #[rustc_error]\n+//[bound_inv_a_vs_bound_inv_b]~^^^ ERROR fatal error triggered by #[rustc_error]\n+//[bound_co_a_vs_bound_co_b]~^^^^ ERROR fatal error triggered by #[rustc_error]\n+//[free_x_vs_free_x]~^^^^^ ERROR fatal error triggered by #[rustc_error]\n }"}, {"sha": "a8a8fa4e19a4a91756f9a6f6d7a7e2886d28adbd", "filename": "src/test/ui/proc-macro/no-macro-use-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fproc-macro%2Fno-macro-use-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fproc-macro%2Fno-macro-use-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fno-macro-use-attr.rs?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -7,4 +7,4 @@ extern crate test_macros;\n //~^ WARN unused extern crate\n \n #[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+fn main() {} //~ ERROR fatal error triggered by #[rustc_error]"}, {"sha": "50552ea7dbb68a61ccf91243015e8750c254c605", "filename": "src/test/ui/proc-macro/no-macro-use-attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fproc-macro%2Fno-macro-use-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Fproc-macro%2Fno-macro-use-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fno-macro-use-attr.stderr?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -10,7 +10,7 @@ note: lint level defined here\n LL | #![warn(unused_extern_crates)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: compilation successful\n+error: fatal error triggered by #[rustc_error]\n   --> $DIR/no-macro-use-attr.rs:10:1\n    |\n LL | fn main() {}"}, {"sha": "21addfab8f50da51dab0c8c65eab2648cf317a93", "filename": "src/test/ui/rfc1445/feature-gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Frfc1445%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Frfc1445%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Ffeature-gate.rs?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -18,7 +18,7 @@ struct Foo {\n const FOO: Foo = Foo { x: 0 };\n \n #[rustc_error]\n-fn main() { //[with_gate]~ ERROR compilation successful\n+fn main() { //[with_gate]~ ERROR fatal error triggered by #[rustc_error]\n     let y = Foo { x: 1 };\n     match y {\n         FOO => { }"}, {"sha": "fabbfd5c70bb901b9ed0c4cc81e68e698d244c0d", "filename": "src/test/ui/rfc1445/feature-gate.with_gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Frfc1445%2Ffeature-gate.with_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Frfc1445%2Ffeature-gate.with_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Ffeature-gate.with_gate.stderr?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -1,4 +1,4 @@\n-error: compilation successful\n+error: fatal error triggered by #[rustc_error]\n   --> $DIR/feature-gate.rs:21:1\n    |\n LL | / fn main() {"}, {"sha": "69d57948fb5e74a27b7eeb36d2305e7bffe8f805", "filename": "src/test/ui/rustc-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Frustc-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Frustc-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustc-error.rs?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -2,5 +2,5 @@\n \n #[rustc_error]\n fn main() {\n-    //~^ ERROR compilation successful\n+    //~^ ERROR fatal error triggered by #[rustc_error]\n }"}, {"sha": "7dfc44492959473f8d5f9c9c61afdad183a828ce", "filename": "src/test/ui/rustc-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Frustc-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftest%2Fui%2Frustc-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustc-error.stderr?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -1,4 +1,4 @@\n-error: compilation successful\n+error: fatal error triggered by #[rustc_error]\n   --> $DIR/rustc-error.rs:4:1\n    |\n LL | / fn main() {"}, {"sha": "dc4811e5d24ce96d422eabbd573fbd8a9cffb441", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -375,6 +375,8 @@ pub struct TestProps {\n     // If true, `rustfix` will only apply `MachineApplicable` suggestions.\n     pub rustfix_only_machine_applicable: bool,\n     pub assembly_output: Option<String>,\n+    // If true, the test is expected to ICE\n+    pub should_ice: bool,\n }\n \n impl TestProps {\n@@ -413,6 +415,7 @@ impl TestProps {\n             run_rustfix: false,\n             rustfix_only_machine_applicable: false,\n             assembly_output: None,\n+            should_ice: false,\n         }\n     }\n \n@@ -463,6 +466,10 @@ impl TestProps {\n                 self.pp_exact = config.parse_pp_exact(ln, testfile);\n             }\n \n+            if !self.should_ice {\n+                self.should_ice = config.parse_should_ice(ln);\n+            }\n+\n             if !self.build_aux_docs {\n                 self.build_aux_docs = config.parse_build_aux_docs(ln);\n             }\n@@ -577,6 +584,9 @@ impl TestProps {\n                 _ => 1,\n             };\n         }\n+        if self.should_ice {\n+            self.failure_status = 101;\n+        }\n \n         for key in &[\"RUST_TEST_NOCAPTURE\", \"RUST_TEST_THREADS\"] {\n             if let Ok(val) = env::var(key) {\n@@ -687,6 +697,9 @@ fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut dyn FnMut(&str)) {\n }\n \n impl Config {\n+    fn parse_should_ice(&self, line: &str) -> bool {\n+        self.parse_name_directive(line, \"should-ice\")\n+    }\n     fn parse_error_pattern(&self, line: &str) -> Option<String> {\n         self.parse_name_value_directive(line, \"error-pattern\")\n     }"}, {"sha": "15ae67fb12c516a0484e84ab59c7d9424d83944d", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32397a75404d3e23701a727ebba753e391c1471/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=e32397a75404d3e23701a727ebba753e391c1471", "patch": "@@ -298,6 +298,12 @@ impl<'test> TestCx<'test> {\n     /// Code executed for each revision in turn (or, if there are no\n     /// revisions, exactly once, with revision == None).\n     fn run_revision(&self) {\n+        if self.props.should_ice {\n+            if self.config.mode != CompileFail &&\n+                self.config.mode != Incremental {\n+                self.fatal(\"cannot use should-ice in a test that is not cfail\");\n+            }\n+        }\n         match self.config.mode {\n             CompileFail => self.run_cfail_test(),\n             RunFail => self.run_rfail_test(),\n@@ -383,7 +389,7 @@ impl<'test> TestCx<'test> {\n     fn run_cfail_test(&self) {\n         let proc_res = self.compile_test();\n         self.check_if_test_should_compile(&proc_res);\n-        self.check_no_compiler_crash(&proc_res);\n+        self.check_no_compiler_crash(&proc_res, self.props.should_ice);\n \n         let output_to_check = self.get_output(&proc_res);\n         let expected_errors = errors::load_errors(&self.testpaths.file, self.revision);\n@@ -395,6 +401,12 @@ impl<'test> TestCx<'test> {\n         } else {\n             self.check_error_patterns(&output_to_check, &proc_res);\n         }\n+        if self.props.should_ice {\n+            match proc_res.status.code() {\n+                Some(101) => (),\n+                _ => self.fatal(\"expected ICE\"),\n+            }\n+        }\n \n         self.check_forbid_output(&output_to_check, &proc_res);\n     }\n@@ -1402,9 +1414,11 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n-    fn check_no_compiler_crash(&self, proc_res: &ProcRes) {\n+    fn check_no_compiler_crash(&self, proc_res: &ProcRes, should_ice: bool) {\n         match proc_res.status.code() {\n-            Some(101) => self.fatal_proc_rec(\"compiler encountered internal error\", proc_res),\n+            Some(101) if !should_ice => {\n+                self.fatal_proc_rec(\"compiler encountered internal error\", proc_res)\n+            }\n             None => self.fatal_proc_rec(\"compiler terminated by signal\", proc_res),\n             _ => (),\n         }\n@@ -2518,7 +2532,7 @@ impl<'test> TestCx<'test> {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n         }\n \n-        self.check_no_compiler_crash(&proc_res);\n+        self.check_no_compiler_crash(&proc_res, self.props.should_ice);\n \n         const PREFIX: &'static str = \"MONO_ITEM \";\n         const CGU_MARKER: &'static str = \"@@\";\n@@ -2774,8 +2788,14 @@ impl<'test> TestCx<'test> {\n         }\n \n         if revision.starts_with(\"rpass\") {\n+            if revision_cx.props.should_ice {\n+                revision_cx.fatal(\"can only use should-ice in cfail tests\");\n+            }\n             revision_cx.run_rpass_test();\n         } else if revision.starts_with(\"rfail\") {\n+            if revision_cx.props.should_ice {\n+                revision_cx.fatal(\"can only use should-ice in cfail tests\");\n+            }\n             revision_cx.run_rfail_test();\n         } else if revision.starts_with(\"cfail\") {\n             revision_cx.run_cfail_test();"}]}