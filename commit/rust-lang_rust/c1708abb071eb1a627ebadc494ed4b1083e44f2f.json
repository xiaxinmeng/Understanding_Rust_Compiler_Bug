{"sha": "c1708abb071eb1a627ebadc494ed4b1083e44f2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNzA4YWJiMDcxZWIxYTYyN2ViYWRjNDk0ZWQ0YjEwODNlNDRmMmY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-02T02:24:08Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-04T14:14:39Z"}, "message": "type_check.rs: rustfmt", "tree": {"sha": "f5dada2190aad0118487585339029bfb45a39f61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5dada2190aad0118487585339029bfb45a39f61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1708abb071eb1a627ebadc494ed4b1083e44f2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1708abb071eb1a627ebadc494ed4b1083e44f2f", "html_url": "https://github.com/rust-lang/rust/commit/c1708abb071eb1a627ebadc494ed4b1083e44f2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1708abb071eb1a627ebadc494ed4b1083e44f2f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "506e80c8998d299b61b7e75b8e6cb405bac71d9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/506e80c8998d299b61b7e75b8e6cb405bac71d9e", "html_url": "https://github.com/rust-lang/rust/commit/506e80c8998d299b61b7e75b8e6cb405bac71d9e"}], "stats": {"total": 52, "additions": 23, "deletions": 29}, "files": [{"sha": "f0b62e28a0da618c2725caf2dab597ef130f180e", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 23, "deletions": 29, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c1708abb071eb1a627ebadc494ed4b1083e44f2f/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1708abb071eb1a627ebadc494ed4b1083e44f2f/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=c1708abb071eb1a627ebadc494ed4b1083e44f2f", "patch": "@@ -104,12 +104,7 @@ impl<'a, 'b, 'gcx, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn visit_place(\n-        &mut self,\n-        place: &Place<'tcx>,\n-        context: PlaceContext,\n-        location: Location,\n-    ) {\n+    fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, location: Location) {\n         self.sanitize_place(place, location, context);\n     }\n \n@@ -164,11 +159,12 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn sanitize_place(&mut self,\n-                       place: &Place<'tcx>,\n-                       location: Location,\n-                       context: PlaceContext)\n-                       -> PlaceTy<'tcx> {\n+    fn sanitize_place(\n+        &mut self,\n+        place: &Place<'tcx>,\n+        location: Location,\n+        context: PlaceContext,\n+    ) -> PlaceTy<'tcx> {\n         debug!(\"sanitize_place: {:?}\", place);\n         let place_ty = match *place {\n             Place::Local(index) => PlaceTy::Ty {\n@@ -210,9 +206,11 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         };\n         if let PlaceContext::Copy = context {\n             let ty = place_ty.to_ty(self.tcx());\n-            if self.cx.infcx.type_moves_by_default(self.cx.param_env, ty, DUMMY_SP) {\n-                span_mirbug!(self, place,\n-                             \"attempted copy of non-Copy type ({:?})\", ty);\n+            if self.cx\n+                .infcx\n+                .type_moves_by_default(self.cx.param_env, ty, DUMMY_SP)\n+            {\n+                span_mirbug!(self, place, \"attempted copy of non-Copy type ({:?})\", ty);\n             }\n         }\n         place_ty\n@@ -312,18 +310,16 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n             ProjectionElem::Field(field, fty) => {\n                 let fty = self.sanitize_type(place, fty);\n                 match self.field_ty(place, base, field, location) {\n-                    Ok(ty) => {\n-                        if let Err(terr) = self.cx.eq_types(ty, fty, location.at_self()) {\n-                            span_mirbug!(\n-                                self,\n-                                place,\n-                                \"bad field access ({:?}: {:?}): {:?}\",\n-                                ty,\n-                                fty,\n-                                terr\n-                            );\n-                        }\n-                    }\n+                    Ok(ty) => if let Err(terr) = self.cx.eq_types(ty, fty, location.at_self()) {\n+                        span_mirbug!(\n+                            self,\n+                            place,\n+                            \"bad field access ({:?}: {:?}): {:?}\",\n+                            ty,\n+                            fty,\n+                            terr\n+                        );\n+                    },\n                     Err(FieldAccessError::OutOfRange { field_count }) => span_mirbug!(\n                         self,\n                         place,\n@@ -358,9 +354,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                 variant_index,\n             } => (&adt_def.variants[variant_index], substs),\n             PlaceTy::Ty { ty } => match ty.sty {\n-                ty::TyAdt(adt_def, substs) if !adt_def.is_enum() => {\n-                    (&adt_def.variants[0], substs)\n-                }\n+                ty::TyAdt(adt_def, substs) if !adt_def.is_enum() => (&adt_def.variants[0], substs),\n                 ty::TyClosure(def_id, substs) => {\n                     return match substs.upvar_tys(def_id, tcx).nth(field.index()) {\n                         Some(ty) => Ok(ty),"}]}