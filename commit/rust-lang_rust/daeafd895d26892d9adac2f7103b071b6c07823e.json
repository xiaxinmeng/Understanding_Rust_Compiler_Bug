{"sha": "daeafd895d26892d9adac2f7103b071b6c07823e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZWFmZDg5NWQyNjg5MmQ5YWRhYzJmNzEwM2IwNzFiNmMwNzgyM2U=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-13T18:25:30Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-28T16:57:36Z"}, "message": "Talk about specific types and remove lifetimes from output", "tree": {"sha": "eb604e07b5b63584e1869daf05e33db9f8f397b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb604e07b5b63584e1869daf05e33db9f8f397b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daeafd895d26892d9adac2f7103b071b6c07823e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daeafd895d26892d9adac2f7103b071b6c07823e", "html_url": "https://github.com/rust-lang/rust/commit/daeafd895d26892d9adac2f7103b071b6c07823e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daeafd895d26892d9adac2f7103b071b6c07823e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56aa89cdbec7d020dbeff76d0a2f6d0f28a1c12f", "url": "https://api.github.com/repos/rust-lang/rust/commits/56aa89cdbec7d020dbeff76d0a2f6d0f28a1c12f", "html_url": "https://github.com/rust-lang/rust/commit/56aa89cdbec7d020dbeff76d0a2f6d0f28a1c12f"}], "stats": {"total": 143, "additions": 100, "deletions": 43}, "files": [{"sha": "edf95bf76125d8a2815caf357200e257838cebf2", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 62, "deletions": 22, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=daeafd895d26892d9adac2f7103b071b6c07823e", "patch": "@@ -237,7 +237,7 @@ pub fn trait_ref_is_local_or_fundamental<'tcx>(\n }\n \n pub enum OrphanCheckErr<'tcx> {\n-    NonLocalInputType(Vec<(Ty<'tcx>, usize)>),\n+    NonLocalInputType(Vec<(Ty<'tcx>, bool)>),\n     UncoveredTy(Ty<'tcx>),\n }\n \n@@ -355,7 +355,7 @@ pub fn orphan_check(\n /// Note that this function is never called for types that have both type\n /// parameters and inference variables.\n fn orphan_check_trait_ref<'tcx>(\n-    tcx: TyCtxt<'_>,\n+    tcx: TyCtxt<'tcx>,\n     trait_ref: ty::TraitRef<'tcx>,\n     in_crate: InCrate,\n ) -> Result<(), OrphanCheckErr<'tcx>> {\n@@ -397,14 +397,19 @@ fn orphan_check_trait_ref<'tcx>(\n             .enumerate()\n         {\n             debug!(\"orphan_check_trait_ref: check ty `{:?}`\", input_ty);\n-            if ty_is_local(tcx, input_ty, in_crate) {\n+            let non_local_tys = ty_is_non_local(tcx, input_ty, in_crate);\n+            if non_local_tys.is_none() {\n                 debug!(\"orphan_check_trait_ref: ty_is_local `{:?}`\", input_ty);\n                 return Ok(());\n             } else if let ty::Param(_) = input_ty.kind {\n                 debug!(\"orphan_check_trait_ref: uncovered ty: `{:?}`\", input_ty);\n                 return Err(OrphanCheckErr::UncoveredTy(input_ty))\n             }\n-            non_local_spans.push((input_ty, i));\n+            if let Some(non_local_tys) = non_local_tys {\n+                for input_ty in non_local_tys {\n+                    non_local_spans.push((input_ty, i == 0));\n+                }\n+            }\n         }\n         // If we exit above loop, never found a local type.\n         debug!(\"orphan_check_trait_ref: no local type\");\n@@ -416,7 +421,8 @@ fn orphan_check_trait_ref<'tcx>(\n         // first.  Find the first input type that either references a\n         // type parameter OR some local type.\n         for (i, input_ty) in trait_ref.input_types().enumerate() {\n-            if ty_is_local(tcx, input_ty, in_crate) {\n+            let non_local_tys = ty_is_non_local(tcx, input_ty, in_crate);\n+            if non_local_tys.is_none() {\n                 debug!(\"orphan_check_trait_ref: ty_is_local `{:?}`\", input_ty);\n \n                 // First local input type. Check that there are no\n@@ -444,16 +450,20 @@ fn orphan_check_trait_ref<'tcx>(\n                 return Err(OrphanCheckErr::UncoveredTy(param));\n             }\n \n-            non_local_spans.push((input_ty, i));\n+            if let Some(non_local_tys) = non_local_tys {\n+                for input_ty in non_local_tys {\n+                    non_local_spans.push((input_ty, i == 0));\n+                }\n+            }\n         }\n         // If we exit above loop, never found a local type.\n         debug!(\"orphan_check_trait_ref: no local type\");\n         Err(OrphanCheckErr::NonLocalInputType(non_local_spans))\n     }\n }\n \n-fn uncovered_tys<'tcx>(tcx: TyCtxt<'_>, ty: Ty<'tcx>, in_crate: InCrate) -> Vec<Ty<'tcx>> {\n-    if ty_is_local_constructor(tcx, ty, in_crate) {\n+fn uncovered_tys<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, in_crate: InCrate) -> Vec<Ty<'tcx>> {\n+    if ty_is_non_local_constructor(tcx, ty, in_crate).is_none() {\n         vec![]\n     } else if fundamental_ty(ty) {\n         ty.walk_shallow()\n@@ -471,9 +481,23 @@ fn is_possibly_remote_type(ty: Ty<'_>, _in_crate: InCrate) -> bool {\n     }\n }\n \n-fn ty_is_local(tcx: TyCtxt<'_>, ty: Ty<'_>, in_crate: InCrate) -> bool {\n-    ty_is_local_constructor(tcx, ty, in_crate) ||\n-        fundamental_ty(ty) && ty.walk_shallow().any(|t| ty_is_local(tcx, t, in_crate))\n+fn ty_is_non_local<'t>(tcx: TyCtxt<'t>, ty: Ty<'t>, in_crate: InCrate) -> Option<Vec<Ty<'t>>> {\n+    match ty_is_non_local_constructor(tcx, ty, in_crate) {\n+        Some(ty) => if !fundamental_ty(ty) {\n+            Some(vec![ty])\n+        } else {\n+            let tys: Vec<_> = ty.walk_shallow()\n+                .filter_map(|t| ty_is_non_local(tcx, t, in_crate))\n+                .flat_map(|i| i)\n+                .collect();\n+            if tys.is_empty() {\n+                None\n+            } else {\n+                Some(tys)\n+            }\n+        },\n+        None => None,\n+    }\n }\n \n fn fundamental_ty(ty: Ty<'_>) -> bool {\n@@ -493,8 +517,12 @@ fn def_id_is_local(def_id: DefId, in_crate: InCrate) -> bool {\n     }\n }\n \n-fn ty_is_local_constructor(tcx: TyCtxt<'_>, ty: Ty<'_>, in_crate: InCrate) -> bool {\n-    debug!(\"ty_is_local_constructor({:?})\", ty);\n+fn ty_is_non_local_constructor<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    ty: Ty<'tcx>,\n+    in_crate: InCrate,\n+) -> Option<Ty<'tcx>> {\n+    debug!(\"ty_is_non_local_constructor({:?})\", ty);\n \n     match ty.kind {\n         ty::Bool |\n@@ -513,37 +541,49 @@ fn ty_is_local_constructor(tcx: TyCtxt<'_>, ty: Ty<'_>, in_crate: InCrate) -> bo\n         ty::Tuple(..) |\n         ty::Param(..) |\n         ty::Projection(..) => {\n-            false\n+            Some(ty)\n         }\n \n         ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) => match in_crate {\n-            InCrate::Local => false,\n+            InCrate::Local => Some(ty),\n             // The inference variable might be unified with a local\n             // type in that remote crate.\n-            InCrate::Remote => true,\n+            InCrate::Remote => None,\n         },\n \n-        ty::Adt(def, _) => def_id_is_local(def.did, in_crate),\n-        ty::Foreign(did) => def_id_is_local(did, in_crate),\n+        ty::Adt(def, _) => if def_id_is_local(def.did, in_crate) {\n+            None\n+        } else {\n+            Some(ty)\n+        },\n+        ty::Foreign(did) => if def_id_is_local(did, in_crate) {\n+            None\n+        } else {\n+            Some(ty)\n+        },\n         ty::Opaque(did, _) => {\n             // Check the underlying type that this opaque\n             // type resolves to.\n             // This recursion will eventually terminate,\n             // since we've already managed to successfully\n             // resolve all opaque types by this point\n             let real_ty = tcx.type_of(did);\n-            ty_is_local_constructor(tcx, real_ty, in_crate)\n+            ty_is_non_local_constructor(tcx, real_ty, in_crate)\n         }\n \n         ty::Dynamic(ref tt, ..) => {\n             if let Some(principal) = tt.principal() {\n-                def_id_is_local(principal.def_id(), in_crate)\n+                if def_id_is_local(principal.def_id(), in_crate) {\n+                    None\n+                } else {\n+                    Some(ty)\n+                }\n             } else {\n-                false\n+                Some(ty)\n             }\n         }\n \n-        ty::Error => true,\n+        ty::Error => None,\n \n         ty::UnnormalizedProjection(..) |\n         ty::Closure(..) |"}, {"sha": "ef2de50b2cb463cffc2232a82f63825a445d22ba", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=daeafd895d26892d9adac2f7103b071b6c07823e", "patch": "@@ -42,11 +42,28 @@ impl ItemLikeVisitor<'v> for OrphanChecker<'tcx> {\n                          arbitrary types\"\n                     );\n                     err.span_label(sp, \"impl doesn't use only types from inside the current crate\");\n-                    for (ty, i) in &tys {\n-                        let msg = format!(\"`{}` is not defined in the current crate\", ty);\n-                        if *i == 0 {\n+                    for (ty, is_target_ty) in &tys {\n+                        // FIXME: We want to remove the type arguments from the displayed type.\n+                        //        The reverse of `resolve_vars_if_possible`.\n+                        let mut ty = *ty;\n+                        self.tcx.infer_ctxt().enter(|infcx| {\n+                            // Remove the lifetimes unnecessary for this error.\n+                            ty = infcx.freshen(ty);\n+                        });\n+                        let msg = format!(\n+                            \"`{}` is not defined in the current crate{}\",\n+                            ty,\n+                            match &ty.kind {\n+                                ty::Slice(_) => \" because slices are always considered foreign\",\n+                                ty::Array(..) => \" because arrays are always considered foreign\",\n+                                _ => \"\",\n+                            },\n+                        );\n+                        if *is_target_ty {\n+                            // Point at `D<A>` in `impl<A, B> for C<B> in D<A>`\n                             err.span_label(impl_ty.span, &msg);\n                         } else {\n+                            // Point at `C<B>` in `impl<A, B> for C<B> in D<A>`\n                             err.span_label(tr.path.span, &msg);\n                         }\n                     }"}, {"sha": "a3da52fe484ac4fcc918f614336d469f820c5add", "filename": "src/test/ui/coherence/coherence-fundamental-trait-objects.old.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.old.stderr?ref=daeafd895d26892d9adac2f7103b071b6c07823e", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Misc for dyn Fundamental<Local> {}\n    | ^^^^^^^^^^^^^^----------------------\n    | |             |\n-   | |             `(dyn coherence_fundamental_trait_lib::Fundamental<Local> + 'static)` is not defined in the current crate\n+   | |             `dyn coherence_fundamental_trait_lib::Fundamental<Local>` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "a3da52fe484ac4fcc918f614336d469f820c5add", "filename": "src/test/ui/coherence/coherence-fundamental-trait-objects.re.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.re.stderr?ref=daeafd895d26892d9adac2f7103b071b6c07823e", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Misc for dyn Fundamental<Local> {}\n    | ^^^^^^^^^^^^^^----------------------\n    | |             |\n-   | |             `(dyn coherence_fundamental_trait_lib::Fundamental<Local> + 'static)` is not defined in the current crate\n+   | |             `dyn coherence_fundamental_trait_lib::Fundamental<Local>` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "b8137b36948cdb36ed995c6ad07bf2e8c6f54a2e", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-negative.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr?ref=daeafd895d26892d9adac2f7103b071b6c07823e", "patch": "@@ -16,7 +16,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl !Send for dyn Marker2 {}\n    | ^^^^^^^^^^^^^^^-----------\n    | |              |\n-   | |              `(dyn Marker2 + 'static)` is not defined in the current crate\n+   | |              `dyn Marker2` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "d68337bed0066df70f4c54cd1e4906b4e7cbfa4f", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-positive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr?ref=daeafd895d26892d9adac2f7103b071b6c07823e", "patch": "@@ -16,7 +16,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | unsafe impl Send for dyn Marker2 {}\n    | ^^^^^^^^^^^^^^^^^^^^^-----------\n    | |                    |\n-   | |                    `(dyn Marker2 + 'static)` is not defined in the current crate\n+   | |                    `dyn Marker2` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "c2c61fd6d916ece279afeacf1ce7eafcecf71d19", "filename": "src/test/ui/coherence/coherence-impls-copy.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.old.stderr?ref=daeafd895d26892d9adac2f7103b071b6c07823e", "patch": "@@ -73,7 +73,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Copy for [MyType] {}\n    | ^^^^^^^^^^^^^^--------\n    | |             |\n-   | |             `[MyType]` is not defined in the current crate\n+   | |             `[MyType]` is not defined in the current crate because slices are always considered foreign\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead\n@@ -84,7 +84,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Copy for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^------------------\n    | |             |\n-   | |             `&'static [NotSync]` is not defined in the current crate\n+   | |             `[NotSync]` is not defined in the current crate because slices are always considered foreign\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "c2c61fd6d916ece279afeacf1ce7eafcecf71d19", "filename": "src/test/ui/coherence/coherence-impls-copy.re.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.re.stderr?ref=daeafd895d26892d9adac2f7103b071b6c07823e", "patch": "@@ -73,7 +73,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Copy for [MyType] {}\n    | ^^^^^^^^^^^^^^--------\n    | |             |\n-   | |             `[MyType]` is not defined in the current crate\n+   | |             `[MyType]` is not defined in the current crate because slices are always considered foreign\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead\n@@ -84,7 +84,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Copy for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^------------------\n    | |             |\n-   | |             `[NotSync]` is not defined in the current crate\n+   | |             `[NotSync]` is not defined in the current crate because slices are always considered foreign\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "3c504c591ba690c34eeb78c08b16336c65d63403", "filename": "src/test/ui/coherence/coherence-impls-send.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.old.stderr?ref=daeafd895d26892d9adac2f7103b071b6c07823e", "patch": "@@ -21,7 +21,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | unsafe impl Send for [MyType] {}\n    | ^^^^^^^^^^^^^^^^^^^^^--------\n    | |                    |\n-   | |                    `[MyType]` is not defined in the current crate\n+   | |                    `[MyType]` is not defined in the current crate because slices are always considered foreign\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead\n@@ -32,7 +32,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | unsafe impl Send for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^------------------\n    | |                    |\n-   | |                    `&'static [NotSync]` is not defined in the current crate\n+   | |                    `[NotSync]` is not defined in the current crate because slices are always considered foreign\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "3c504c591ba690c34eeb78c08b16336c65d63403", "filename": "src/test/ui/coherence/coherence-impls-send.re.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.re.stderr?ref=daeafd895d26892d9adac2f7103b071b6c07823e", "patch": "@@ -21,7 +21,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | unsafe impl Send for [MyType] {}\n    | ^^^^^^^^^^^^^^^^^^^^^--------\n    | |                    |\n-   | |                    `[MyType]` is not defined in the current crate\n+   | |                    `[MyType]` is not defined in the current crate because slices are always considered foreign\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead\n@@ -32,7 +32,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | unsafe impl Send for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^------------------\n    | |                    |\n-   | |                    `[NotSync]` is not defined in the current crate\n+   | |                    `[NotSync]` is not defined in the current crate because slices are always considered foreign\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "a2a653cf330fe4a6f82bce01f250c0365aa912f4", "filename": "src/test/ui/coherence/coherence-impls-sized.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.old.stderr?ref=daeafd895d26892d9adac2f7103b071b6c07823e", "patch": "@@ -51,7 +51,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Sized for [MyType] {}\n    | ^^^^^^^^^^^^^^^--------\n    | |              |\n-   | |              `[MyType]` is not defined in the current crate\n+   | |              `[MyType]` is not defined in the current crate because slices are always considered foreign\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead\n@@ -62,7 +62,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Sized for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^------------------\n    | |              |\n-   | |              `&'static [NotSync]` is not defined in the current crate\n+   | |              `[NotSync]` is not defined in the current crate because slices are always considered foreign\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "a2a653cf330fe4a6f82bce01f250c0365aa912f4", "filename": "src/test/ui/coherence/coherence-impls-sized.re.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.re.stderr?ref=daeafd895d26892d9adac2f7103b071b6c07823e", "patch": "@@ -51,7 +51,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Sized for [MyType] {}\n    | ^^^^^^^^^^^^^^^--------\n    | |              |\n-   | |              `[MyType]` is not defined in the current crate\n+   | |              `[MyType]` is not defined in the current crate because slices are always considered foreign\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead\n@@ -62,7 +62,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Sized for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^------------------\n    | |              |\n-   | |              `[NotSync]` is not defined in the current crate\n+   | |              `[NotSync]` is not defined in the current crate because slices are always considered foreign\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "a374b0d2636cddfb212e10f6066dcbcbaf771ef2", "filename": "src/test/ui/dropck/drop-on-non-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.stderr?ref=daeafd895d26892d9adac2f7103b071b6c07823e", "patch": "@@ -10,7 +10,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl<'a> Drop for &'a mut isize {\n    | ^^^^^^^^^^^^^^^^^^-------------\n    | |                 |\n-   | |                 `&'a mut isize` is not defined in the current crate\n+   | |                 `isize` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "7d5175246d19ed3156dc6f0ac0b02c5b72928071", "filename": "src/test/ui/error-codes/E0206.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daeafd895d26892d9adac2f7103b071b6c07823e/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr?ref=daeafd895d26892d9adac2f7103b071b6c07823e", "patch": "@@ -16,7 +16,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl Copy for Foo { }\n    | ^^^^^^^^^^^^^^---\n    | |             |\n-   | |             `[u8; _]` is not defined in the current crate\n+   | |             `[u8; _]` is not defined in the current crate because arrays are always considered foreign\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}]}