{"sha": "d4d7eb069b1a9299605bdfd513917fa9a0981702", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZDdlYjA2OWIxYTkyOTk2MDViZGZkNTEzOTE3ZmE5YTA5ODE3MDI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-10-07T19:05:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-12T23:33:06Z"}, "message": "add unsafe tags into various points in the translation chains\nand so forth", "tree": {"sha": "b72307b5b65c57a4b0d3090de2a76ac73c757aaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b72307b5b65c57a4b0d3090de2a76ac73c757aaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4d7eb069b1a9299605bdfd513917fa9a0981702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4d7eb069b1a9299605bdfd513917fa9a0981702", "html_url": "https://github.com/rust-lang/rust/commit/d4d7eb069b1a9299605bdfd513917fa9a0981702", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4d7eb069b1a9299605bdfd513917fa9a0981702/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1cefa52d01bb9a1ff55e76da8320641040d79cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1cefa52d01bb9a1ff55e76da8320641040d79cc", "html_url": "https://github.com/rust-lang/rust/commit/c1cefa52d01bb9a1ff55e76da8320641040d79cc"}], "stats": {"total": 204, "additions": 128, "deletions": 76}, "files": [{"sha": "01f44cd2edbfaf1e9d77eaecdae617e3dc7b8ea2", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4d7eb069b1a9299605bdfd513917fa9a0981702/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d7eb069b1a9299605bdfd513917fa9a0981702/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=d4d7eb069b1a9299605bdfd513917fa9a0981702", "patch": "@@ -35,10 +35,12 @@ tag output_type {\n }\n \n fn llvm_err(sess: session::session, msg: str) {\n-    let buf = llvm::LLVMRustGetLastError();\n-    if buf == std::ptr::null() {\n-        sess.fatal(msg);\n-    } else { sess.fatal(msg + \": \" + str::str_from_cstr(buf)); }\n+    unsafe {\n+        let buf = llvm::LLVMRustGetLastError();\n+        if buf == std::ptr::null() {\n+            sess.fatal(msg);\n+        } else { sess.fatal(msg + \": \" + str::str_from_cstr(buf)); }\n+    }\n }\n \n fn link_intrinsics(sess: session::session, llmod: ModuleRef) {"}, {"sha": "2cf85bcd218c668973edbaeb327697202f1ed34a", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d4d7eb069b1a9299605bdfd513917fa9a0981702/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d7eb069b1a9299605bdfd513917fa9a0981702/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=d4d7eb069b1a9299605bdfd513917fa9a0981702", "patch": "@@ -961,7 +961,9 @@ fn type_to_str_inner(names: type_names, outer0: [TypeRef], ty: TypeRef) ->\n         let out_ty: TypeRef = llvm::LLVMGetReturnType(ty);\n         let n_args: uint = llvm::LLVMCountParamTypes(ty);\n         let args: [TypeRef] = vec::init_elt::<TypeRef>(0 as TypeRef, n_args);\n-        llvm::LLVMGetParamTypes(ty, vec::to_ptr(args));\n+        unsafe {\n+            llvm::LLVMGetParamTypes(ty, vec::to_ptr(args));\n+        }\n         s += tys_str(names, outer, args);\n         s += \") -> \";\n         s += type_to_str_inner(names, outer, out_ty);\n@@ -971,7 +973,9 @@ fn type_to_str_inner(names: type_names, outer0: [TypeRef], ty: TypeRef) ->\n         let s: str = \"{\";\n         let n_elts: uint = llvm::LLVMCountStructElementTypes(ty);\n         let elts: [TypeRef] = vec::init_elt::<TypeRef>(0 as TypeRef, n_elts);\n-        llvm::LLVMGetStructElementTypes(ty, vec::to_ptr(elts));\n+        unsafe {\n+            llvm::LLVMGetStructElementTypes(ty, vec::to_ptr(elts));\n+        }\n         s += tys_str(names, outer, elts);\n         s += \"}\";\n         ret s;\n@@ -1011,7 +1015,9 @@ fn float_width(llt: TypeRef) -> uint {\n \n fn fn_ty_param_tys(fn_ty: TypeRef) -> [TypeRef] {\n     let args = vec::init_elt(0 as TypeRef, llvm::LLVMCountParamTypes(fn_ty));\n-    llvm::LLVMGetParamTypes(fn_ty, vec::to_ptr(args));\n+    unsafe {\n+        llvm::LLVMGetParamTypes(fn_ty, vec::to_ptr(args));\n+    }\n     ret args;\n }\n "}, {"sha": "1dd51a8b680abb7a5c6a4e60599c99666b9d8fe0", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d4d7eb069b1a9299605bdfd513917fa9a0981702/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d7eb069b1a9299605bdfd513917fa9a0981702/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=d4d7eb069b1a9299605bdfd513917fa9a0981702", "patch": "@@ -170,24 +170,26 @@ fn find_library_crate_aux(nn: {prefix: str, suffix: str}, crate_name: str,\n }\n \n fn get_metadata_section(filename: str) -> option::t<@[u8]> {\n-    let mb = str::as_buf(filename, {|buf|\n-        llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf)\n-    });\n-    if mb as int == 0 { ret option::none::<@[u8]>; }\n-    let of = mk_object_file(mb);\n-    let si = mk_section_iter(of.llof);\n-    while llvm::LLVMIsSectionIteratorAtEnd(of.llof, si.llsi) == False {\n-        let name_buf = llvm::LLVMGetSectionName(si.llsi);\n-        let name = str::str_from_cstr(name_buf);\n-        if str::eq(name, x86::get_meta_sect_name()) {\n-            let cbuf = llvm::LLVMGetSectionContents(si.llsi);\n-            let csz = llvm::LLVMGetSectionSize(si.llsi);\n-            let cvbuf: *u8 = std::unsafe::reinterpret_cast(cbuf);\n-            ret option::some::<@[u8]>(@vec::unsafe::from_buf(cvbuf, csz));\n+    unsafe {\n+        let mb = str::as_buf(filename, {|buf|\n+            llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf)\n+                                       });\n+        if mb as int == 0 { ret option::none::<@[u8]>; }\n+        let of = mk_object_file(mb);\n+        let si = mk_section_iter(of.llof);\n+        while llvm::LLVMIsSectionIteratorAtEnd(of.llof, si.llsi) == False {\n+            let name_buf = llvm::LLVMGetSectionName(si.llsi);\n+            let name = str::str_from_cstr(name_buf);\n+            if str::eq(name, x86::get_meta_sect_name()) {\n+                let cbuf = llvm::LLVMGetSectionContents(si.llsi);\n+                let csz = llvm::LLVMGetSectionSize(si.llsi);\n+                let cvbuf: *u8 = std::unsafe::reinterpret_cast(cbuf);\n+                ret option::some::<@[u8]>(@vec::unsafe::from_buf(cvbuf, csz));\n+            }\n+            llvm::LLVMMoveToNextSection(si.llsi);\n         }\n-        llvm::LLVMMoveToNextSection(si.llsi);\n+        ret option::none::<@[u8]>;\n     }\n-    ret option::none::<@[u8]>;\n }\n \n fn load_library_crate(sess: session::session, span: span, ident: ast::ident,"}, {"sha": "7cf9a9c27b3f2ec089d3b883746ade752d31625f", "filename": "src/comp/middle/trans_build.rs", "status": "modified", "additions": 49, "deletions": 28, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/d4d7eb069b1a9299605bdfd513917fa9a0981702/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d7eb069b1a9299605bdfd513917fa9a0981702/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_build.rs?ref=d4d7eb069b1a9299605bdfd513917fa9a0981702", "patch": "@@ -37,8 +37,10 @@ fn AggregateRet(cx: @block_ctxt, RetVals: [ValueRef]) {\n     if cx.unreachable { ret; }\n     assert (!cx.terminated);\n     cx.terminated = true;\n-    llvm::LLVMBuildAggregateRet(B(cx), vec::to_ptr(RetVals),\n-                                vec::len(RetVals));\n+    unsafe {\n+        llvm::LLVMBuildAggregateRet(B(cx), vec::to_ptr(RetVals),\n+                                    vec::len(RetVals));\n+    }\n }\n \n fn Br(cx: @block_ctxt, Dest: BasicBlockRef) {\n@@ -88,18 +90,22 @@ fn Invoke(cx: @block_ctxt, Fn: ValueRef, Args: [ValueRef],\n     if cx.unreachable { ret; }\n     assert (!cx.terminated);\n     cx.terminated = true;\n-    llvm::LLVMBuildInvoke(B(cx), Fn, vec::to_ptr(Args),\n-                          vec::len(Args), Then, Catch, noname());\n+    unsafe {\n+        llvm::LLVMBuildInvoke(B(cx), Fn, vec::to_ptr(Args),\n+                              vec::len(Args), Then, Catch, noname());\n+    }\n }\n \n fn FastInvoke(cx: @block_ctxt, Fn: ValueRef, Args: [ValueRef],\n               Then: BasicBlockRef, Catch: BasicBlockRef) {\n     if cx.unreachable { ret; }\n     assert (!cx.terminated);\n     cx.terminated = true;\n-    let v = llvm::LLVMBuildInvoke(B(cx), Fn, vec::to_ptr(Args),\n-                                  vec::len(Args), Then, Catch, noname());\n-    llvm::LLVMSetInstructionCallConv(v, lib::llvm::LLVMFastCallConv);\n+    unsafe {\n+        let v = llvm::LLVMBuildInvoke(B(cx), Fn, vec::to_ptr(Args),\n+                                      vec::len(Args), Then, Catch, noname());\n+        llvm::LLVMSetInstructionCallConv(v, lib::llvm::LLVMFastCallConv);\n+    }\n }\n \n fn Unreachable(cx: @block_ctxt) {\n@@ -311,15 +317,19 @@ fn Store(cx: @block_ctxt, Val: ValueRef, Ptr: ValueRef) {\n \n fn GEP(cx: @block_ctxt, Pointer: ValueRef, Indices: [ValueRef]) -> ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(T_ptr(T_nil())); }\n-    ret llvm::LLVMBuildGEP(B(cx), Pointer, vec::to_ptr(Indices),\n-                           vec::len(Indices), noname());\n+    unsafe {\n+        ret llvm::LLVMBuildGEP(B(cx), Pointer, vec::to_ptr(Indices),\n+                               vec::len(Indices), noname());\n+    }\n }\n \n fn InBoundsGEP(cx: @block_ctxt, Pointer: ValueRef, Indices: [ValueRef]) ->\n    ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(T_ptr(T_nil())); }\n-    ret llvm::LLVMBuildInBoundsGEP(B(cx), Pointer, vec::to_ptr(Indices),\n-                                   vec::len(Indices), noname());\n+    unsafe {\n+        ret llvm::LLVMBuildInBoundsGEP(B(cx), Pointer, vec::to_ptr(Indices),\n+                                       vec::len(Indices), noname());\n+    }\n }\n \n fn StructGEP(cx: @block_ctxt, Pointer: ValueRef, Idx: uint) -> ValueRef {\n@@ -460,9 +470,11 @@ fn Phi(cx: @block_ctxt, Ty: TypeRef, vals: [ValueRef], bbs: [BasicBlockRef])\n     if cx.unreachable { ret llvm::LLVMGetUndef(Ty); }\n     assert (vec::len::<ValueRef>(vals) == vec::len::<BasicBlockRef>(bbs));\n     let phi = EmptyPhi(cx, Ty);\n-    llvm::LLVMAddIncoming(phi, vec::to_ptr(vals), vec::to_ptr(bbs),\n-                          vec::len(vals));\n-    ret phi;\n+    unsafe {\n+        llvm::LLVMAddIncoming(phi, vec::to_ptr(vals), vec::to_ptr(bbs),\n+                              vec::len(vals));\n+        ret phi;\n+    }\n }\n \n fn AddIncomingToPhi(phi: ValueRef, val: ValueRef, bb: BasicBlockRef) {\n@@ -480,26 +492,32 @@ fn _UndefReturn(Fn: ValueRef) -> ValueRef {\n }\n \n fn Call(cx: @block_ctxt, Fn: ValueRef, Args: [ValueRef]) -> ValueRef {\n-    if cx.unreachable { ret _UndefReturn(Fn); }\n-    ret llvm::LLVMBuildCall(B(cx), Fn, vec::to_ptr(Args),\n-                            vec::len(Args), noname());\n+    unsafe {\n+        if cx.unreachable { ret _UndefReturn(Fn); }\n+        ret llvm::LLVMBuildCall(B(cx), Fn, vec::to_ptr(Args),\n+                                vec::len(Args), noname());\n+    }\n }\n \n fn FastCall(cx: @block_ctxt, Fn: ValueRef, Args: [ValueRef]) -> ValueRef {\n-    if cx.unreachable { ret _UndefReturn(Fn); }\n-    let v = llvm::LLVMBuildCall(B(cx), Fn, vec::to_ptr(Args),\n-                                vec::len(Args), noname());\n-    llvm::LLVMSetInstructionCallConv(v, lib::llvm::LLVMFastCallConv);\n-    ret v;\n+    unsafe {\n+        if cx.unreachable { ret _UndefReturn(Fn); }\n+        let v = llvm::LLVMBuildCall(B(cx), Fn, vec::to_ptr(Args),\n+                                    vec::len(Args), noname());\n+        llvm::LLVMSetInstructionCallConv(v, lib::llvm::LLVMFastCallConv);\n+        ret v;\n+    }\n }\n \n fn CallWithConv(cx: @block_ctxt, Fn: ValueRef, Args: [ValueRef], Conv: uint)\n    -> ValueRef {\n-    if cx.unreachable { ret _UndefReturn(Fn); }\n-    let v = llvm::LLVMBuildCall(B(cx), Fn, vec::to_ptr(Args),\n-                                vec::len(Args), noname());\n-    llvm::LLVMSetInstructionCallConv(v, Conv);\n-    ret v;\n+    unsafe {\n+        if cx.unreachable { ret _UndefReturn(Fn); }\n+        let v = llvm::LLVMBuildCall(B(cx), Fn, vec::to_ptr(Args),\n+                                    vec::len(Args), noname());\n+        llvm::LLVMSetInstructionCallConv(v, Conv);\n+        ret v;\n+    }\n }\n \n fn Select(cx: @block_ctxt, If: ValueRef, Then: ValueRef, Else: ValueRef) ->\n@@ -568,7 +586,10 @@ fn Trap(cx: @block_ctxt) {\n     });\n     assert (T as int != 0);\n     let Args: [ValueRef] = [];\n-    llvm::LLVMBuildCall(b, T, vec::to_ptr(Args), vec::len(Args), noname());\n+    unsafe {\n+        llvm::LLVMBuildCall(b, T, vec::to_ptr(Args),\n+                            vec::len(Args), noname());\n+    }\n }\n \n fn LandingPad(cx: @block_ctxt, Ty: TypeRef, PersFn: ValueRef,"}, {"sha": "945530d87d2af3ed1c69795228b1b453036ddc73", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 43, "deletions": 22, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/d4d7eb069b1a9299605bdfd513917fa9a0981702/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d7eb069b1a9299605bdfd513917fa9a0981702/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=d4d7eb069b1a9299605bdfd513917fa9a0981702", "patch": "@@ -518,8 +518,10 @@ fn T_size_t() -> TypeRef {\n }\n \n fn T_fn(inputs: [TypeRef], output: TypeRef) -> TypeRef {\n-    ret llvm::LLVMFunctionType(output, to_ptr(inputs),\n-                               std::vec::len::<TypeRef>(inputs), False);\n+    unsafe {\n+        ret llvm::LLVMFunctionType(output, to_ptr(inputs),\n+                                   std::vec::len::<TypeRef>(inputs), False);\n+    }\n }\n \n fn T_fn_pair(cx: crate_ctxt, tfn: TypeRef) -> TypeRef {\n@@ -529,7 +531,9 @@ fn T_fn_pair(cx: crate_ctxt, tfn: TypeRef) -> TypeRef {\n fn T_ptr(t: TypeRef) -> TypeRef { ret llvm::LLVMPointerType(t, 0u); }\n \n fn T_struct(elts: [TypeRef]) -> TypeRef {\n-    ret llvm::LLVMStructType(to_ptr(elts), std::vec::len(elts), False);\n+    unsafe {\n+        ret llvm::LLVMStructType(to_ptr(elts), std::vec::len(elts), False);\n+    }\n }\n \n fn T_named_struct(name: str) -> TypeRef {\n@@ -538,7 +542,9 @@ fn T_named_struct(name: str) -> TypeRef {\n }\n \n fn set_struct_body(t: TypeRef, elts: [TypeRef]) {\n-    llvm::LLVMStructSetBody(t, to_ptr(elts), std::vec::len(elts), False);\n+    unsafe {\n+        llvm::LLVMStructSetBody(t, to_ptr(elts), std::vec::len(elts), False);\n+    }\n }\n \n fn T_empty_struct() -> TypeRef { ret T_struct([]); }\n@@ -578,12 +584,15 @@ fn T_task() -> TypeRef {\n fn T_tydesc_field(cx: crate_ctxt, field: int) -> TypeRef {\n     // Bit of a kludge: pick the fn typeref out of the tydesc..\n \n-    let tydesc_elts: [TypeRef] =\n-        std::vec::init_elt::<TypeRef>(T_nil(), abi::n_tydesc_fields as uint);\n-    llvm::LLVMGetStructElementTypes(cx.tydesc_type,\n-                                    to_ptr::<TypeRef>(tydesc_elts));\n-    let t = llvm::LLVMGetElementType(tydesc_elts[field]);\n-    ret t;\n+    unsafe {\n+        let tydesc_elts: [TypeRef] =\n+            std::vec::init_elt::<TypeRef>(T_nil(),\n+                                          abi::n_tydesc_fields as uint);\n+        llvm::LLVMGetStructElementTypes(cx.tydesc_type,\n+                                        to_ptr::<TypeRef>(tydesc_elts));\n+        let t = llvm::LLVMGetElementType(tydesc_elts[field]);\n+        ret t;\n+    }\n }\n \n fn T_glue_fn(cx: crate_ctxt) -> TypeRef {\n@@ -790,30 +799,42 @@ fn C_postr(s: str) -> ValueRef {\n }\n \n fn C_zero_byte_arr(size: uint) -> ValueRef {\n-    let i = 0u;\n-    let elts: [ValueRef] = [];\n-    while i < size { elts += [C_u8(0u)]; i += 1u; }\n-    ret llvm::LLVMConstArray(T_i8(), std::vec::to_ptr(elts),\n-                             std::vec::len(elts));\n+    unsafe {\n+        let i = 0u;\n+        let elts: [ValueRef] = [];\n+        while i < size { elts += [C_u8(0u)]; i += 1u; }\n+        ret llvm::LLVMConstArray(T_i8(), std::vec::to_ptr(elts),\n+                                 std::vec::len(elts));\n+    }\n }\n \n fn C_struct(elts: [ValueRef]) -> ValueRef {\n-    ret llvm::LLVMConstStruct(std::vec::to_ptr(elts), std::vec::len(elts),\n-                              False);\n+    unsafe {\n+        ret llvm::LLVMConstStruct(std::vec::to_ptr(elts), std::vec::len(elts),\n+                                  False);\n+    }\n }\n \n fn C_named_struct(T: TypeRef, elts: [ValueRef]) -> ValueRef {\n-    ret llvm::LLVMConstNamedStruct(T, std::vec::to_ptr(elts),\n-                                   std::vec::len(elts));\n+    unsafe {\n+        ret llvm::LLVMConstNamedStruct(T, std::vec::to_ptr(elts),\n+                                       std::vec::len(elts));\n+    }\n }\n \n fn C_array(ty: TypeRef, elts: [ValueRef]) -> ValueRef {\n-    ret llvm::LLVMConstArray(ty, std::vec::to_ptr(elts), std::vec::len(elts));\n+    unsafe {\n+        ret llvm::LLVMConstArray(ty, std::vec::to_ptr(elts),\n+                                 std::vec::len(elts));\n+    }\n }\n \n fn C_bytes(bytes: [u8]) -> ValueRef {\n-    ret llvm::LLVMConstString(unsafe::reinterpret_cast(vec::to_ptr(bytes)),\n-                              vec::len(bytes), False);\n+    unsafe {\n+        ret llvm::LLVMConstString(\n+            unsafe::reinterpret_cast(vec::to_ptr(bytes)),\n+            vec::len(bytes), False);\n+    }\n }\n \n fn C_shape(ccx: @crate_ctxt, bytes: [u8]) -> ValueRef {"}, {"sha": "8cce515ec3e7d022f81d82daf4b74ca450072bda", "filename": "src/test/stdtest/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4d7eb069b1a9299605bdfd513917fa9a0981702/src%2Ftest%2Fstdtest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d7eb069b1a9299605bdfd513917fa9a0981702/src%2Ftest%2Fstdtest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fstr.rs?ref=d4d7eb069b1a9299605bdfd513917fa9a0981702", "patch": "@@ -256,7 +256,7 @@ fn unsafe_from_bytes() {\n }\n \n #[test]\n-fn str_from_cstr() {\n+unsafe fn str_from_cstr() {\n     let a = [65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 0u8];\n     let b = vec::to_ptr(a);\n     let c = str::str_from_cstr(b);\n@@ -278,7 +278,7 @@ fn as_buf_small() {\n }\n \n #[test]\n-fn as_buf2() {\n+unsafe fn as_buf2() {\n     let s = \"hello\";\n     let sb = str::as_buf(s, {|b| b });\n     let s_cstr = str::str_from_cstr(sb);"}, {"sha": "313db7b71f107b600cfe62136fa5da8a1096182f", "filename": "src/test/stdtest/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d7eb069b1a9299605bdfd513917fa9a0981702/src%2Ftest%2Fstdtest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d7eb069b1a9299605bdfd513917fa9a0981702/src%2Ftest%2Fstdtest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fvec.rs?ref=d4d7eb069b1a9299605bdfd513917fa9a0981702", "patch": "@@ -21,7 +21,7 @@ fn square_if_odd(&&n: uint) -> option::t<uint> {\n fn add(&&x: uint, &&y: uint) -> uint { ret x + y; }\n \n #[test]\n-fn test_unsafe_ptrs() {\n+unsafe fn test_unsafe_ptrs() {\n     // Test on-stack copy-from-buf.\n     let a = [1, 2, 3];\n     let ptr = vec::to_ptr(a);"}]}