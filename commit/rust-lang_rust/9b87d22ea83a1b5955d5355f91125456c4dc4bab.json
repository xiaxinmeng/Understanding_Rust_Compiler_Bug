{"sha": "9b87d22ea83a1b5955d5355f91125456c4dc4bab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliODdkMjJlYTgzYTFiNTk1NWQ1MzU1ZjkxMTI1NDU2YzRkYzRiYWI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-03-22T17:30:35Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-08-05T15:48:04Z"}, "message": "Don't abort on unevaluated constants without at least tryting to eval them", "tree": {"sha": "5d7f00e640c68d1f87e12c7f7c0a1386e57d76e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d7f00e640c68d1f87e12c7f7c0a1386e57d76e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b87d22ea83a1b5955d5355f91125456c4dc4bab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b87d22ea83a1b5955d5355f91125456c4dc4bab", "html_url": "https://github.com/rust-lang/rust/commit/9b87d22ea83a1b5955d5355f91125456c4dc4bab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b87d22ea83a1b5955d5355f91125456c4dc4bab/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "437f017e2ed2e8c60b6f4af9dc71559ca87fd645", "url": "https://api.github.com/repos/rust-lang/rust/commits/437f017e2ed2e8c60b6f4af9dc71559ca87fd645", "html_url": "https://github.com/rust-lang/rust/commit/437f017e2ed2e8c60b6f4af9dc71559ca87fd645"}], "stats": {"total": 144, "additions": 80, "deletions": 64}, "files": [{"sha": "723a4f390550c751647a14b092404d6c2df1bcca", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -896,7 +896,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n \n         // Always promote `[T; 0]` (even when e.g., borrowed mutably).\n         let promotable = match expr_ty.sty {\n-            ty::Array(_, len) if len.assert_usize(self.tcx) == Some(0) => true,\n+            ty::Array(_, len) if len.try_eval_usize(self.tcx) == Some(0) => true,\n             _ => promotable,\n         };\n "}, {"sha": "63f81aa97e72f04a299512ad8b76582fab764958", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -90,7 +90,7 @@ impl<'tcx> PlaceTy<'tcx> {\n             ProjectionElem::Subslice { from, to } => {\n                 PlaceTy::from_ty(match self.ty.sty {\n                     ty::Array(inner, size) => {\n-                        let size = size.unwrap_usize(tcx);\n+                        let size = size.eval_usize(tcx);\n                         let len = size - (from as u64) - (to as u64);\n                         tcx.mk_array(inner, len)\n                     }"}, {"sha": "04e3dad85ea0165c47a6ea8e3d505d9a5b250422", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -417,7 +417,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     Some(format!(\"[{}]\", self.tcx.type_of(def.did).to_string())),\n                 ));\n                 let tcx = self.tcx;\n-                if let Some(len) = len.assert_usize(tcx) {\n+                if let Some(len) = len.try_eval_usize(tcx) {\n                     flags.push((\n                         sym::_Self,\n                         Some(format!(\"[{}; {}]\", self.tcx.type_of(def.did).to_string(), len)),"}, {"sha": "46b6500e3cd1cd59d53c2fc0a7accdcf077b6f9f", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -194,7 +194,7 @@ impl<'tcx> ty::TyS<'tcx> {\n             ty::Foreign(def_id) => format!(\"extern type `{}`\", tcx.def_path_str(def_id)).into(),\n             ty::Array(_, n) => {\n                 let n = tcx.lift_to_global(&n).unwrap();\n-                match n.assert_usize(tcx) {\n+                match n.try_eval_usize(tcx) {\n                     Some(n) => format!(\"array of {} elements\", n).into(),\n                     None => \"array\".into(),\n                 }"}, {"sha": "3aeae11685c34b6cef402bacbff2436a46c1e87b", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -190,7 +190,7 @@ impl<'tcx> TyS<'tcx> {\n                 }))\n             }\n \n-            Array(ty, len) => match len.assert_usize(tcx) {\n+            Array(ty, len) => match len.try_eval_usize(tcx) {\n                 // If the array is definitely non-empty, it's uninhabited if\n                 // the type of its elements is uninhabited.\n                 Some(n) if n != 0 => ty.uninhabited_from(tcx),"}, {"sha": "7354ad241f9c5e4bf3b62f51a9b89e4683f5fcc2", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -594,7 +594,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     }\n                 }\n \n-                let count = count.assert_usize(tcx).ok_or(LayoutError::Unknown(ty))?;\n+                let count = count.try_eval_usize(tcx).ok_or(LayoutError::Unknown(ty))?;\n                 let element = self.layout_of(element)?;\n                 let size = element.size.checked_mul(count, dl)\n                     .ok_or(LayoutError::SizeOverflow(ty))?;"}, {"sha": "e2834cd92ec12ba9b8dc07e07e2ae91989a95d5b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -2368,7 +2368,7 @@ impl<'tcx> AdtDef {\n         match tcx.const_eval(param_env.and(cid)) {\n             Ok(val) => {\n                 // FIXME: Find the right type and use it instead of `val.ty` here\n-                if let Some(b) = val.assert_bits(tcx.global_tcx(), val.ty) {\n+                if let Some(b) = val.try_eval_bits(tcx.global_tcx(), val.ty) {\n                     trace!(\"discriminants: {} ({:?})\", b, repr_type);\n                     Some(Discr {\n                         val: b,"}, {"sha": "84c458984706d27cf19ecc31ec595cbef1512a93", "filename": "src/librustc/ty/print/obsolete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -89,7 +89,7 @@ impl DefPathBasedNames<'tcx> {\n             ty::Array(inner_type, len) => {\n                 output.push('[');\n                 self.push_type_name(inner_type, output, debug);\n-                write!(output, \"; {}\", len.unwrap_usize(self.tcx)).unwrap();\n+                write!(output, \"; {}\", len.eval_usize(self.tcx)).unwrap();\n                 output.push(']');\n             }\n             ty::Slice(inner_type) => {"}, {"sha": "41f85942faa6ec167b59acb3d59727cf6bdb96a3", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -696,7 +696,7 @@ pub trait PrettyPrinter<'tcx>:\n             },\n             ty::Array(ty, sz) => {\n                 p!(write(\"[\"), print(ty), write(\"; \"));\n-                if let Some(n) = sz.assert_usize(self.tcx()) {\n+                if let Some(n) = sz.try_eval_usize(self.tcx()) {\n                     p!(write(\"{}\", n));\n                 } else {\n                     p!(write(\"_\"));\n@@ -915,7 +915,7 @@ pub trait PrettyPrinter<'tcx>:\n         if let ty::Ref(_, ref_ty, _) = ct.ty.sty {\n             let byte_str = match (ct.val, &ref_ty.sty) {\n                 (ConstValue::Scalar(Scalar::Ptr(ptr)), ty::Array(t, n)) if *t == u8 => {\n-                    let n = n.unwrap_usize(self.tcx());\n+                    let n = n.eval_usize(self.tcx());\n                     Some(self.tcx()\n                         .alloc_map.lock()\n                         .unwrap_memory(ptr.alloc_id)"}, {"sha": "25ff71cca86bc2c60a82d0650d36860e96315c35", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -466,7 +466,7 @@ pub fn super_relate_tys<R: TypeRelation<'tcx>>(\n                 Err(err) => {\n                     // Check whether the lengths are both concrete/known values,\n                     // but are unequal, for better diagnostics.\n-                    match (sz_a.assert_usize(tcx), sz_b.assert_usize(tcx)) {\n+                    match (sz_a.try_eval_usize(tcx), sz_b.try_eval_usize(tcx)) {\n                         (Some(sz_a_val), Some(sz_b_val)) => {\n                             Err(TypeError::FixedArraySize(\n                                 expected_found(relation, &sz_a_val, &sz_b_val)"}, {"sha": "7bc903e8c4a66dd088305b3e58fb7780154898ea", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -15,7 +15,7 @@ use crate::ty::{self, AdtDef, Discr, DefIdTree, TypeFlags, Ty, TyCtxt, TypeFolda\n use crate::ty::{List, TyS, ParamEnvAnd, ParamEnv};\n use crate::ty::layout::VariantIdx;\n use crate::util::captures::Captures;\n-use crate::mir::interpret::Scalar;\n+use crate::mir::interpret::{Scalar, GlobalId};\n \n use smallvec::SmallVec;\n use std::borrow::Cow;\n@@ -1726,7 +1726,7 @@ impl<'tcx> TyS<'tcx> {\n                 ty.expect_ty().conservative_is_privately_uninhabited(tcx)\n             }),\n             ty::Array(ty, len) => {\n-                match len.assert_usize(tcx) {\n+                match len.try_eval_usize(tcx) {\n                     // If the array is definitely non-empty, it's uninhabited if\n                     // the type of its elements is uninhabited.\n                     Some(n) if n != 0 => ty.conservative_is_privately_uninhabited(tcx),\n@@ -2291,36 +2291,52 @@ impl<'tcx> Const<'tcx> {\n     }\n \n     #[inline]\n-    pub fn assert_bits(&self, tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Option<u128> {\n+    pub fn try_eval_bits(&self, tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Option<u128> {\n         assert_eq!(self.ty, ty);\n-        let ty = tcx.lift_to_global(&ty).unwrap();\n+        // FIXME(eddyb, oli-obk) get the right param_env.\n         let size = tcx.layout_of(ParamEnv::empty().and(ty)).ok()?.size;\n-        self.val.try_to_bits(size)\n+        match self.val {\n+            // FIXME(const_generics): this doesn't work right now,\n+            // because it tries to relate an `Infer` to a `Param`.\n+            ConstValue::Unevaluated(did, substs) => {\n+                let substs = tcx.lift_to_global(&substs).unwrap();\n+                let instance = ty::Instance::resolve(tcx, ParamEnv::empty(), did, substs)?;\n+                let gid = GlobalId {\n+                    instance,\n+                    promoted: None,\n+                };\n+                let evaluated = tcx.const_eval(ParamEnv::empty().and(gid)).ok()?;\n+                evaluated.val.try_to_bits(size)\n+            },\n+            // FIXME(const_generics): try to evaluate generic consts with a given param env?\n+            // E.g. when you have an associated constant whose value depends on a generic const\n+            _ => self.val.try_to_bits(size),\n+        }\n     }\n \n     #[inline]\n-    pub fn assert_bool(&self, tcx: TyCtxt<'tcx>) -> Option<bool> {\n-        self.assert_bits(tcx, tcx.types.bool).and_then(|v| match v {\n+    pub fn try_eval_bool(&self, tcx: TyCtxt<'tcx>) -> Option<bool> {\n+        self.try_eval_bits(tcx, tcx.types.bool).and_then(|v| match v {\n             0 => Some(false),\n             1 => Some(true),\n             _ => None,\n         })\n     }\n \n     #[inline]\n-    pub fn assert_usize(&self, tcx: TyCtxt<'tcx>) -> Option<u64> {\n-        self.assert_bits(tcx, tcx.types.usize).map(|v| v as u64)\n+    pub fn try_eval_usize(&self, tcx: TyCtxt<'tcx>) -> Option<u64> {\n+        self.try_eval_bits(tcx, tcx.types.usize).map(|v| v as u64)\n     }\n \n     #[inline]\n-    pub fn unwrap_bits(&self, tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> u128 {\n-        self.assert_bits(tcx, ty).unwrap_or_else(||\n+    pub fn eval_bits(&self, tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> u128 {\n+        self.try_eval_bits(tcx, ty).unwrap_or_else(||\n             bug!(\"expected bits of {}, got {:#?}\", ty, self))\n     }\n \n     #[inline]\n-    pub fn unwrap_usize(&self, tcx: TyCtxt<'tcx>) -> u64 {\n-        self.unwrap_bits(tcx, tcx.types.usize) as u64\n+    pub fn eval_usize(&self, tcx: TyCtxt<'tcx>) -> u64 {\n+        self.eval_bits(tcx, tcx.types.usize) as u64\n     }\n }\n "}, {"sha": "f07f2dc3aa7b139be79493804cfe91017e3d7fd4", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -341,7 +341,7 @@ fn fixed_vec_metadata(\n     let (size, align) = cx.size_and_align_of(array_or_slice_type);\n \n     let upper_bound = match array_or_slice_type.sty {\n-        ty::Array(_, len) => len.unwrap_usize(cx.tcx) as c_longlong,\n+        ty::Array(_, len) => len.eval_usize(cx.tcx) as c_longlong,\n         _ => -1\n     };\n "}, {"sha": "7db971bc4b8ce02e8fb841c927658f3f7f83b9a5", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -132,7 +132,7 @@ pub fn unsized_info<'tcx, Cx: CodegenMethods<'tcx>>(\n         cx.tcx().struct_lockstep_tails_erasing_lifetimes(source, target, cx.param_env());\n     match (&source.sty, &target.sty) {\n         (&ty::Array(_, len), &ty::Slice(_)) => {\n-            cx.const_usize(len.unwrap_usize(cx.tcx()))\n+            cx.const_usize(len.eval_usize(cx.tcx()))\n         }\n         (&ty::Dynamic(..), &ty::Dynamic(..)) => {\n             // For now, upcasts are limited to changes in marker"}, {"sha": "0c1def33ad348d4cecaab25437440370a4b6d6d7", "filename": "src/librustc_codegen_ssa/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -89,7 +89,7 @@ pub fn push_debuginfo_type_name<'tcx>(\n         ty::Array(inner_type, len) => {\n             output.push('[');\n             push_debuginfo_type_name(tcx, inner_type, true, output, visited);\n-            output.push_str(&format!(\"; {}\", len.unwrap_usize(tcx)));\n+            output.push_str(&format!(\"; {}\", len.eval_usize(tcx)));\n             output.push(']');\n         },\n         ty::Slice(inner_type) => {"}, {"sha": "a51deafa9d73b97e8e0a0c8d2596af2f37c18d93", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -41,7 +41,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             .map(|c| {\n                 let field_ty = c.ty.builtin_index().unwrap();\n                 let fields = match c.ty.sty {\n-                    ty::Array(_, n) => n.unwrap_usize(bx.tcx()),\n+                    ty::Array(_, n) => n.eval_usize(bx.tcx()),\n                     _ => bug!(\"invalid simd shuffle type: {}\", c.ty),\n                 };\n                 let values: Vec<_> = (0..fields).map(|field| {"}, {"sha": "40f2a000289d5e7c6b1045e9fa525aa7c8c6cd3b", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -521,7 +521,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         } = *place {\n             if let LocalRef::Operand(Some(op)) = self.locals[index] {\n                 if let ty::Array(_, n) = op.layout.ty.sty {\n-                    let n = n.unwrap_usize(bx.cx().tcx());\n+                    let n = n.eval_usize(bx.cx().tcx());\n                     return bx.cx().const_usize(n);\n                 }\n             }"}, {"sha": "cce228ff63b60d96bb8a880167d450b6d0d4b513", "filename": "src/librustc_codegen_utils/symbol_names/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -512,7 +512,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         }\n         self = ct.ty.print(self)?;\n \n-        if let Some(bits) = ct.assert_bits(self.tcx, ty::ParamEnv::empty().and(ct.ty)) {\n+        if let Some(bits) = ct.try_eval_bits(self.tcx, ct.ty) {\n             let _ = write!(self.out, \"{:x}_\", bits);\n         } else {\n             // NOTE(eddyb) despite having the path, we need to"}, {"sha": "c717d269b588aee00a57211eb56a976aad60c5b2", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -208,7 +208,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                     }\n                     has_emitted\n                 }\n-                ty::Array(ty, len) => match len.assert_usize(cx.tcx) {\n+                ty::Array(ty, len) => match len.try_eval_usize(cx.tcx) {\n                     // If the array is definitely non-empty, we can do `#[must_use]` checking.\n                     Some(n) if n != 0 => {\n                         let descr_pre = &format!("}, {"sha": "7cfb8f552ad4aae3c208ffa8aa749840f8027491", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -669,7 +669,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n             ProjectionElem::Subslice { from, to } => PlaceTy::from_ty(\n                 match base_ty.sty {\n                     ty::Array(inner, size) => {\n-                        let size = size.unwrap_usize(tcx);\n+                        let size = size.eval_usize(tcx);\n                         let min_size = (from as u64) + (to as u64);\n                         if let Some(rest_size) = size.checked_sub(min_size) {\n                             tcx.mk_array(inner, rest_size)"}, {"sha": "631e7e0309a2863a52cce2909cfa5e8bec148aeb", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -339,7 +339,7 @@ fn place_base_conflict<'tcx>(\n                 (StaticKind::Promoted(promoted_1), StaticKind::Promoted(promoted_2)) => {\n                     if promoted_1 == promoted_2 {\n                         if let ty::Array(_, len) = s1.ty.sty {\n-                            if let Some(0) = len.assert_usize(tcx) {\n+                            if let Some(0) = len.try_eval_usize(tcx) {\n                                 // Ignore conflicts with promoted [T; 0].\n                                 debug!(\"place_element_conflict: IGNORE-LEN-0-PROMOTED\");\n                                 return Overlap::Disjoint;"}, {"sha": "930b0c93082765a84780cf02e759338c828f5066", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -111,7 +111,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             PatternKind::Constant { value } => {\n                 indices.entry(value)\n                        .or_insert_with(|| {\n-                           options.push(value.unwrap_bits(self.hir.tcx(), switch_ty));\n+                           options.push(value.eval_bits(self.hir.tcx(), switch_ty));\n                            options.len() - 1\n                        });\n                 true"}, {"sha": "caa77f2eb0ead07dd0f862d2bec1265541bbf12c", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -556,7 +556,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n             };\n             let span = cx.tcx.def_span(def_id);\n             let count = match cx.tcx.at(span).const_eval(cx.param_env.and(global_id)) {\n-                Ok(cv) => cv.unwrap_usize(cx.tcx),\n+                Ok(cv) => cv.eval_usize(cx.tcx),\n                 Err(ErrorHandled::Reported) => 0,\n                 Err(ErrorHandled::TooGeneric) => {\n                     cx.tcx.sess.span_err(span, \"array lengths can't depend on generic parameters\");"}, {"sha": "2ef1b76979bf8b6fcec50a5b885abd949ac403c8", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -228,7 +228,7 @@ impl LiteralExpander<'tcx> {\n                 ConstValue::Slice {\n                     data: self.tcx.alloc_map.lock().unwrap_memory(p.alloc_id),\n                     start: p.offset.bytes().try_into().unwrap(),\n-                    end: n.unwrap_usize(self.tcx).try_into().unwrap(),\n+                    end: n.eval_usize(self.tcx).try_into().unwrap(),\n                 }\n             },\n             // fat pointers stay the same\n@@ -646,8 +646,8 @@ fn all_constructors<'a, 'tcx>(\n                 ConstantValue(ty::Const::from_bool(cx.tcx, b))\n             }).collect()\n         }\n-        ty::Array(ref sub_ty, len) if len.assert_usize(cx.tcx).is_some() => {\n-            let len = len.unwrap_usize(cx.tcx);\n+        ty::Array(ref sub_ty, len) if len.try_eval_usize(cx.tcx).is_some() => {\n+            let len = len.eval_usize(cx.tcx);\n             if len != 0 && cx.is_uninhabited(sub_ty) {\n                 vec![]\n             } else {\n@@ -789,7 +789,7 @@ where\n                 match (value.val, &value.ty.sty) {\n                     (_, ty::Array(_, n)) => max_fixed_len = cmp::max(\n                         max_fixed_len,\n-                        n.unwrap_usize(cx.tcx),\n+                        n.eval_usize(cx.tcx),\n                     ),\n                     (ConstValue::Slice{ start, end, .. }, ty::Slice(_)) => max_fixed_len = cmp::max(\n                         max_fixed_len,\n@@ -856,7 +856,7 @@ impl<'tcx> IntRange<'tcx> {\n             }\n             ConstantValue(val) if is_integral(val.ty) => {\n                 let ty = val.ty;\n-                if let Some(val) = val.assert_bits(tcx, ty) {\n+                if let Some(val) = val.try_eval_bits(tcx, ty) {\n                     let bias = IntRange::signed_bias(tcx, ty);\n                     let val = val ^ bias;\n                     Some(IntRange { range: val..=val, ty })\n@@ -873,8 +873,8 @@ impl<'tcx> IntRange<'tcx> {\n             match pat.kind {\n                 box PatternKind::Constant { value } => break ConstantValue(value),\n                 box PatternKind::Range(PatternRange { lo, hi, ty, end }) => break ConstantRange(\n-                    lo.unwrap_bits(tcx, ty),\n-                    hi.unwrap_bits(tcx, ty),\n+                    lo.eval_bits(tcx, ty),\n+                    hi.eval_bits(tcx, ty),\n                     ty,\n                     end,\n                 ),\n@@ -1327,14 +1327,14 @@ fn pat_constructors<'tcx>(cx: &mut MatchCheckCtxt<'_, 'tcx>,\n         PatternKind::Constant { value } => Some(vec![ConstantValue(value)]),\n         PatternKind::Range(PatternRange { lo, hi, ty, end }) =>\n             Some(vec![ConstantRange(\n-                lo.unwrap_bits(cx.tcx, ty),\n-                hi.unwrap_bits(cx.tcx, ty),\n+                lo.eval_bits(cx.tcx, ty),\n+                hi.eval_bits(cx.tcx, ty),\n                 ty,\n                 end,\n             )]),\n         PatternKind::Array { .. } => match pcx.ty.sty {\n             ty::Array(_, length) => Some(vec![\n-                Slice(length.unwrap_usize(cx.tcx))\n+                Slice(length.eval_usize(cx.tcx))\n             ]),\n             _ => span_bug!(pat.span, \"bad ty {:?} for array pattern\", pcx.ty)\n         },\n@@ -1402,7 +1402,7 @@ fn constructor_sub_pattern_tys<'a, 'tcx>(\n                         match ty.sty {\n                             // If the field type returned is an array of an unknown\n                             // size return an TyErr.\n-                            ty::Array(_, len) if len.assert_usize(cx.tcx).is_none() =>\n+                            ty::Array(_, len) if len.try_eval_usize(cx.tcx).is_none() =>\n                                 cx.tcx.types.err,\n                             _ => ty,\n                         }\n@@ -1436,7 +1436,7 @@ fn slice_pat_covered_by_const<'tcx>(\n     let data: &[u8] = match (const_val.val, &const_val.ty.sty) {\n         (ConstValue::ByRef { offset, alloc, .. }, ty::Array(t, n)) => {\n             assert_eq!(*t, tcx.types.u8);\n-            let n = n.assert_usize(tcx).unwrap();\n+            let n = n.eval_usize(tcx);\n             let ptr = Pointer::new(AllocId(0), offset);\n             alloc.get_bytes(&tcx, ptr, Size::from_bytes(n)).unwrap()\n         },\n@@ -1464,7 +1464,7 @@ fn slice_pat_covered_by_const<'tcx>(\n     {\n         match pat.kind {\n             box PatternKind::Constant { value } => {\n-                let b = value.unwrap_bits(tcx, pat.ty);\n+                let b = value.eval_bits(tcx, pat.ty);\n                 assert_eq!(b as u8 as u128, b);\n                 if b as u8 != *ch {\n                     return Ok(false);\n@@ -1760,7 +1760,7 @@ fn specialize<'p, 'a: 'p, 'tcx>(\n                                 ConstValue::ByRef { offset, alloc, .. } => (\n                                     alloc,\n                                     offset,\n-                                    n.unwrap_usize(cx.tcx),\n+                                    n.eval_usize(cx.tcx),\n                                     t,\n                                 ),\n                                 _ => span_bug!("}, {"sha": "0614b0b29930f80441725c8e98f172681068debb", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -728,7 +728,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n \n             ty::Array(_, len) => {\n                 // fixed-length array\n-                let len = len.unwrap_usize(self.tcx);\n+                let len = len.eval_usize(self.tcx);\n                 assert!(len >= prefix.len() as u64 + suffix.len() as u64);\n                 PatternKind::Array { prefix: prefix, slice: slice, suffix: suffix }\n             }\n@@ -1123,7 +1123,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             }\n             ty::Array(_, n) => {\n                 PatternKind::Array {\n-                    prefix: (0..n.unwrap_usize(self.tcx))\n+                    prefix: (0..n.eval_usize(self.tcx))\n                         .map(|i| adt_subpattern(i as usize, None))\n                         .collect(),\n                     slice: None,\n@@ -1206,7 +1206,7 @@ fn search_for_adt_without_structural_match<'tcx>(tcx: TyCtxt<'tcx>,\n                     // (But still tell caller to continue search.)\n                     return false;\n                 }\n-                ty::Array(_, n) if n.assert_usize(self.tcx) == Some(0) => {\n+                ty::Array(_, n) if n.try_eval_usize(self.tcx) == Some(0) => {\n                     // rust-lang/rust#62336: ignore type of contents\n                     // for empty array.\n                     return false;\n@@ -1470,7 +1470,7 @@ pub fn compare_const_vals<'tcx>(\n         return fallback();\n     }\n \n-    if let (Some(a), Some(b)) = (a.assert_bits(tcx, ty), b.assert_bits(tcx, ty)) {\n+    if let (Some(a), Some(b)) = (a.try_eval_bits(tcx, ty), b.try_eval_bits(tcx, ty)) {\n         use ::rustc_apfloat::Float;\n         return match ty.sty {\n             ty::Float(ast::FloatTy::F32) => {"}, {"sha": "5efcd1cbeeb5f3971758c916170959fb8a0a1665", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -253,7 +253,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // u64 cast is from usize to u64, which is always good\n                 let val = Immediate::new_slice(\n                     ptr,\n-                    length.unwrap_usize(self.tcx.tcx),\n+                    length.eval_usize(self.tcx.tcx),\n                     self,\n                 );\n                 self.write_immediate(val, dest)"}, {"sha": "e615645bb2ae1fa9b72f5993d27ecf82b3fc3c54", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -176,7 +176,7 @@ for\n                     (InternMode::ConstBase, hir::Mutability::MutMutable) |\n                     (InternMode::Const, hir::Mutability::MutMutable) => {\n                         match referenced_ty.sty {\n-                            ty::Array(_, n) if n.unwrap_usize(self.ecx.tcx.tcx) == 0 => {}\n+                            ty::Array(_, n) if n.eval_usize(self.ecx.tcx.tcx) == 0 => {}\n                             ty::Slice(_)\n                                 if value.to_meta().unwrap().unwrap().to_usize(self.ecx)? == 0 => {}\n                             _ => bug!(\"const qualif failed to prevent mutable references\"),"}, {"sha": "5752a8ccec09560f2ab52404956294de9c01dcf0", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -313,7 +313,7 @@ fn build_clone_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, self_ty: Ty<'tcx>) -\n     match self_ty.sty {\n         _ if is_copy => builder.copy_shim(),\n         ty::Array(ty, len) => {\n-            let len = len.unwrap_usize(tcx);\n+            let len = len.eval_usize(tcx);\n             builder.array_shim(dest, src, ty, len)\n         }\n         ty::Closure(def_id, substs) => {"}, {"sha": "69ad41260777a93d6f48996f9da2e33c11e97bae", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -367,7 +367,7 @@ impl Qualif for HasMutInterior {\n                     } else if let ty::Array(_, len) = ty.sty {\n                         // FIXME(eddyb) the `cx.mode == Mode::NonConstFn` condition\n                         // seems unnecessary, given that this is merely a ZST.\n-                        match len.assert_usize(cx.tcx) {\n+                        match len.try_eval_usize(cx.tcx) {\n                             Some(0) if cx.mode == Mode::NonConstFn => {},\n                             _ => return true,\n                         }"}, {"sha": "160751aac599c1be2462b023b18bafd3a37c8d8d", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -26,7 +26,7 @@ impl MirPass for SimplifyBranches {\n                 TerminatorKind::SwitchInt {\n                     discr: Operand::Constant(ref c), switch_ty, ref values, ref targets, ..\n                 } => {\n-                    let constant = c.literal.assert_bits(tcx, switch_ty);\n+                    let constant = c.literal.try_eval_bits(tcx, switch_ty);\n                     if let Some(constant) = constant {\n                         let (otherwise, targets) = targets.split_last().unwrap();\n                         let mut ret = TerminatorKind::Goto { target: *otherwise };\n@@ -43,7 +43,7 @@ impl MirPass for SimplifyBranches {\n                 },\n                 TerminatorKind::Assert {\n                     target, cond: Operand::Constant(ref c), expected, ..\n-                } if (c.literal.assert_bool(tcx) == Some(true)) == expected =>\n+                } if (c.literal.try_eval_bool(tcx) == Some(true)) == expected =>\n                     TerminatorKind::Goto { target },\n                 TerminatorKind::FalseEdges { real_target, .. } => {\n                     TerminatorKind::Goto { target: real_target }"}, {"sha": "2ad6eaa3ed915b7623f065aad3bb31a7c33cbad2", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -68,7 +68,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UniformArrayMoveOutVisitor<'a, 'tcx> {\n                     let place_ty =\n                         Place::ty_from(&src_place.base, &proj.base, self.body, self.tcx).ty;\n                     if let ty::Array(item_ty, const_size) = place_ty.sty {\n-                        if let Some(size) = const_size.assert_usize(self.tcx) {\n+                        if let Some(size) = const_size.try_eval_usize(self.tcx) {\n                             assert!(size <= u32::max_value() as u64,\n                                     \"uniform array move out doesn't supported\n                                      for array bigger then u32\");\n@@ -219,7 +219,7 @@ impl MirPass for RestoreSubsliceArrayMoveOut {\n                             let src_ty =\n                                 Place::ty_from(src_place.base, src_place.projection, body, tcx).ty;\n                             if let ty::Array(_, ref size_o) = src_ty.sty {\n-                                size_o.assert_usize(tcx)\n+                                size_o.try_eval_usize(tcx)\n                             } else {\n                                 None\n                             }"}, {"sha": "42f90b2ae4013df21f086465827ce2444e02bf4f", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -821,7 +821,7 @@ where\n                 self.complete_drop(Some(DropFlagMode::Deep), succ, unwind)\n             }\n             ty::Array(ety, size) => {\n-                let size = size.assert_usize(self.tcx());\n+                let size = size.try_eval_usize(self.tcx());\n                 self.open_drop_for_array(ety, size)\n             },\n             ty::Slice(ety) => self.open_drop_for_array(ety, None),"}, {"sha": "9ae4e99ca6eb7caec9566577e77b6cfd20fff357", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -423,7 +423,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let expected_ty = self.structurally_resolved_type(pat.span, expected);\n                 let (inner_ty, slice_ty) = match expected_ty.sty {\n                     ty::Array(inner_ty, size) => {\n-                        if let Some(size) = size.assert_usize(tcx) {\n+                        if let Some(size) = size.try_eval_usize(tcx) {\n                             let min_len = before.len() as u64 + after.len() as u64;\n                             if slice.is_none() {\n                                 if min_len != size {"}, {"sha": "845022f506a75ad57723b147d4d1ae410a77517e", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87d22ea83a1b5955d5355f91125456c4dc4bab/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=9b87d22ea83a1b5955d5355f91125456c4dc4bab", "patch": "@@ -1386,7 +1386,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     ty::Array(_, len) => {\n                         if let (Some(len), Ok(user_index)) = (\n-                            len.assert_usize(self.tcx),\n+                            len.try_eval_usize(self.tcx),\n                             field.as_str().parse::<u64>()\n                         ) {\n                             let base = self.tcx.sess.source_map()"}]}