{"sha": "f37247f885026d29bf26fd4aed6e9135e4f32ebf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNzI0N2Y4ODUwMjZkMjliZjI2ZmQ0YWVkNmU5MTM1ZTRmMzJlYmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-17T13:19:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-17T13:19:42Z"}, "message": "Auto merge of #56003 - nikomatsakis:issue-54467-infer-outlives-bounds-and-trait-objects, r=eddyb\n\ndo not propagate inferred bounds on trait objects if they involve `Self`\n\nFixes #54467, which is a Rust 2018 Release blocking issue.\n\nr? @eddyb", "tree": {"sha": "e085ad502811efffc43ca79e1482217015da2f40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e085ad502811efffc43ca79e1482217015da2f40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f37247f885026d29bf26fd4aed6e9135e4f32ebf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f37247f885026d29bf26fd4aed6e9135e4f32ebf", "html_url": "https://github.com/rust-lang/rust/commit/f37247f885026d29bf26fd4aed6e9135e4f32ebf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f37247f885026d29bf26fd4aed6e9135e4f32ebf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6e9485bfc245eb5f10b1f2b0a786538d12d1cb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e9485bfc245eb5f10b1f2b0a786538d12d1cb0", "html_url": "https://github.com/rust-lang/rust/commit/f6e9485bfc245eb5f10b1f2b0a786538d12d1cb0"}, {"sha": "6575988d8e383fedd3d5579577c05ef23e77913b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6575988d8e383fedd3d5579577c05ef23e77913b", "html_url": "https://github.com/rust-lang/rust/commit/6575988d8e383fedd3d5579577c05ef23e77913b"}], "stats": {"total": 76, "additions": 66, "deletions": 10}, "files": [{"sha": "8c3cd5e6612b96e962daffc7d8f0650361ffa334", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f37247f885026d29bf26fd4aed6e9135e4f32ebf/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f37247f885026d29bf26fd4aed6e9135e4f32ebf/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=f37247f885026d29bf26fd4aed6e9135e4f32ebf", "patch": "@@ -700,7 +700,12 @@ fn do_normalize_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                      predicates: Vec<ty::Predicate<'tcx>>)\n                                      -> Result<Vec<ty::Predicate<'tcx>>, ErrorReported>\n {\n-    debug!(\"do_normalize_predicates({:?})\", predicates);\n+    debug!(\n+        \"do_normalize_predicates(predicates={:?}, region_context={:?}, cause={:?})\",\n+        predicates,\n+        region_context,\n+        cause,\n+    );\n     let span = cause.span;\n     tcx.infer_ctxt().enter(|infcx| {\n         // FIXME. We should really... do something with these region"}, {"sha": "f3c570e84009b9b3f06a5e30fb669bcca69684c5", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f37247f885026d29bf26fd4aed6e9135e4f32ebf/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f37247f885026d29bf26fd4aed6e9135e4f32ebf/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f37247f885026d29bf26fd4aed6e9135e4f32ebf", "patch": "@@ -1608,10 +1608,21 @@ fn predicates_defined_on<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n ) -> Lrc<ty::GenericPredicates<'tcx>> {\n+    debug!(\"predicates_defined_on({:?})\", def_id);\n     let mut result = tcx.explicit_predicates_of(def_id);\n+    debug!(\n+        \"predicates_defined_on: explicit_predicates_of({:?}) = {:?}\",\n+        def_id,\n+        result,\n+    );\n     let inferred_outlives = tcx.inferred_outlives_of(def_id);\n     if !inferred_outlives.is_empty() {\n         let span = tcx.def_span(def_id);\n+        debug!(\n+            \"predicates_defined_on: inferred_outlives_of({:?}) = {:?}\",\n+            def_id,\n+            inferred_outlives,\n+        );\n         Lrc::make_mut(&mut result)\n             .predicates\n             .extend(inferred_outlives.iter().map(|&p| (p, span)));"}, {"sha": "30e304375fe0e357bc1ebdfc3b8436fe57f8336a", "filename": "src/librustc_typeck/outlives/implicit_infer.rs", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f37247f885026d29bf26fd4aed6e9135e4f32ebf/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f37247f885026d29bf26fd4aed6e9135e4f32ebf/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs?ref=f37247f885026d29bf26fd4aed6e9135e4f32ebf", "patch": "@@ -14,6 +14,7 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::subst::{Kind, Subst, UnpackedKind};\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::fold::TypeFoldable;\n use rustc::util::nodemap::FxHashMap;\n \n use super::explicit::ExplicitPredicatesMap;\n@@ -245,6 +246,7 @@ fn insert_required_predicates_to_be_wf<'tcx>(\n     }\n }\n \n+#[derive(Debug)]\n pub struct IgnoreSelfTy(bool);\n \n /// We also have to check the explicit predicates\n@@ -270,10 +272,18 @@ pub fn check_explicit_predicates<'tcx>(\n     explicit_map: &mut ExplicitPredicatesMap<'tcx>,\n     ignore_self_ty: IgnoreSelfTy,\n ) {\n-    debug!(\"def_id = {:?}\", &def_id);\n-    debug!(\"substs = {:?}\", &substs);\n-    debug!(\"explicit_map =  {:?}\", explicit_map);\n-    debug!(\"required_predicates = {:?}\", required_predicates);\n+    debug!(\n+        \"check_explicit_predicates(def_id={:?}, \\\n+         substs={:?}, \\\n+         explicit_map={:?}, \\\n+         required_predicates={:?}, \\\n+         ignore_self_ty={:?})\",\n+        def_id,\n+        substs,\n+        explicit_map,\n+        required_predicates,\n+        ignore_self_ty,\n+    );\n     let explicit_predicates = explicit_map.explicit_predicates_of(tcx, *def_id);\n \n     for outlives_predicate in explicit_predicates.iter() {\n@@ -302,13 +312,23 @@ pub fn check_explicit_predicates<'tcx>(\n         //\n         // Note that we do this check for self **before** applying `substs`. In the\n         // case that `substs` come from a `dyn Trait` type, our caller will have\n-        // included `Self = dyn Trait<'x, X>` as the value for `Self`. If we were\n+        // included `Self = usize` as the value for `Self`. If we were\n         // to apply the substs, and not filter this predicate, we might then falsely\n         // conclude that e.g. `X: 'x` was a reasonable inferred requirement.\n-        if let UnpackedKind::Type(ty) = outlives_predicate.0.unpack() {\n-            if ty.is_self() && ignore_self_ty.0 {\n-                debug!(\"skipping self ty = {:?}\", &ty);\n-                continue;\n+        //\n+        // Another similar case is where we have a inferred\n+        // requirement like `<Self as Trait>::Foo: 'b`. We presently\n+        // ignore such requirements as well (cc #54467)-- though\n+        // conceivably it might be better if we could extract the `Foo\n+        // = X` binding from the object type (there must be such a\n+        // binding) and thus infer an outlives requirement that `X:\n+        // 'b`.\n+        if ignore_self_ty.0 {\n+            if let UnpackedKind::Type(ty) = outlives_predicate.0.unpack() {\n+                if ty.has_self_ty() {\n+                    debug!(\"skipping self ty = {:?}\", &ty);\n+                    continue;\n+                }\n             }\n         }\n "}, {"sha": "1eb53ffc730f6cf9285157ff74c9e3b1b62077d8", "filename": "src/librustc_typeck/outlives/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f37247f885026d29bf26fd4aed6e9135e4f32ebf/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f37247f885026d29bf26fd4aed6e9135e4f32ebf/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs?ref=f37247f885026d29bf26fd4aed6e9135e4f32ebf", "patch": "@@ -67,6 +67,9 @@ fn inferred_outlives_of<'a, 'tcx>(\n                     }\n                     err.emit();\n                 }\n+\n+                debug!(\"inferred_outlives_of({:?}) = {:?}\", item_def_id, predicates);\n+\n                 predicates\n             }\n "}, {"sha": "438923e29246c99fe5f443cd126bf217a57b41c1", "filename": "src/test/ui/rfc-2093-infer-outlives/issue-54467.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f37247f885026d29bf26fd4aed6e9135e4f32ebf/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fissue-54467.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f37247f885026d29bf26fd4aed6e9135e4f32ebf/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fissue-54467.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fissue-54467.rs?ref=f37247f885026d29bf26fd4aed6e9135e4f32ebf", "patch": "@@ -0,0 +1,17 @@\n+// Regression test for #54467:\n+//\n+// Here, the trait object has an \"inferred outlives\" requirement that\n+// `<Self as MyIterator<'a>>::Item: 'a`; but since we don't know what\n+// `Self` is, we were (incorrectly) messing things up, leading to\n+// strange errors. This test ensures that we do not give compilation\n+// errors.\n+//\n+// compile-pass\n+\n+trait MyIterator<'a>: Iterator where Self::Item: 'a { }\n+\n+struct MyStruct<'a, A> {\n+    item: Box<dyn MyIterator<'a, Item = A>>\n+}\n+\n+fn main() { }"}]}