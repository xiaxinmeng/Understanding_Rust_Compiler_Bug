{"sha": "4f3a9881da89361358247ba58574b9eee37df4aa", "node_id": "C_kwDOAAsO6NoAKDRmM2E5ODgxZGE4OTM2MTM1ODI0N2JhNTg1NzRiOWVlZTM3ZGY0YWE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-29T09:30:07Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-29T10:04:38Z"}, "message": "teach ./miri how to do Josh syncs", "tree": {"sha": "db24c9d02a8a92d2e64a7a90501f7610435dfde4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db24c9d02a8a92d2e64a7a90501f7610435dfde4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f3a9881da89361358247ba58574b9eee37df4aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f3a9881da89361358247ba58574b9eee37df4aa", "html_url": "https://github.com/rust-lang/rust/commit/4f3a9881da89361358247ba58574b9eee37df4aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f3a9881da89361358247ba58574b9eee37df4aa/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0fbf0d0775d37d61a62643f2f3bdf45f8763067", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0fbf0d0775d37d61a62643f2f3bdf45f8763067", "html_url": "https://github.com/rust-lang/rust/commit/a0fbf0d0775d37d61a62643f2f3bdf45f8763067"}], "stats": {"total": 133, "additions": 89, "deletions": 44}, "files": [{"sha": "b18083849cf62e1b67b54ca8493110dcc31ca17d", "filename": "src/tools/miri/CONTRIBUTING.md", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4f3a9881da89361358247ba58574b9eee37df4aa/src%2Ftools%2Fmiri%2FCONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/4f3a9881da89361358247ba58574b9eee37df4aa/src%2Ftools%2Fmiri%2FCONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCONTRIBUTING.md?ref=4f3a9881da89361358247ba58574b9eee37df4aa", "patch": "@@ -290,14 +290,12 @@ cargo run --release -p josh-proxy -- --local=$(pwd)/local --remote=https://githu\n \n ### Importing changes from the rustc repo\n \n+Josh needs to be running, as described above.\n We assume we start on an up-to-date master branch in the Miri repo.\n \n ```sh\n-# Fetch rustc side of the history. Takes ca 5 min the first time.\n-# Do NOT change that commit ID, it needs to be exactly this!\n-git fetch http://localhost:8000/rust-lang/rust.git:at_commit=75dd959a3a40eb5b4574f8d2e23aa6efbeb33573[:prefix=src/tools/miri]:/src/tools/miri.git master\n-# Include that history into ours.\n-git merge FETCH_HEAD -m \"merge rustc history\"\n+# Fetch and merge rustc side of the history. Takes ca 5 min the first time.\n+./miri rustc-pull\n # Update toolchain reference and apply formatting.\n ./rustup-toolchain HEAD && ./miri fmt\n git commit -am \"rustup\"\n@@ -310,16 +308,15 @@ needed.\n \n ### Exporting changes to the rustc repo\n \n-We will use the josh proxy to push to your fork of rustc. You need to make sure\n-that the master branch of your fork is up-to-date. Also make sure that there\n-exists no branch called `miri` in your fork. Then run the following in the Miri\n-repo, assuming we are on an up-to-date master branch:\n+Josh needs to be running, as described above. We will use the josh proxy to push\n+to your fork of rustc. Run the following in the Miri repo, assuming we are on an\n+up-to-date master branch:\n \n ```sh\n # Push the Miri changes to your rustc fork (substitute your github handle for YOUR_NAME).\n-# Do NOT change that commit ID, it needs to be exactly this!\n-git push http://localhost:8000/YOUR_NAME/rust.git:at_commit=75dd959a3a40eb5b4574f8d2e23aa6efbeb33573[:prefix=src/tools/miri]:/src/tools/miri.git -o base=master HEAD:miri\n+./miri rustc-push YOUR_NAME miri\n ```\n \n-This will create a new branch in your fork, and the output should include a link\n-to create a rustc PR that will integrate those changes into the main repository.\n+This will create a new branch called 'miri' in your fork, and the output should\n+include a link to create a rustc PR that will integrate those changes into the\n+main repository."}, {"sha": "662f2b8e631725fc45a76ccb743c8f7327192181", "filename": "src/tools/miri/miri", "status": "modified", "additions": 79, "deletions": 31, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/4f3a9881da89361358247ba58574b9eee37df4aa/src%2Ftools%2Fmiri%2Fmiri", "raw_url": "https://github.com/rust-lang/rust/raw/4f3a9881da89361358247ba58574b9eee37df4aa/src%2Ftools%2Fmiri%2Fmiri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fmiri?ref=4f3a9881da89361358247ba58574b9eee37df4aa", "patch": "@@ -42,6 +42,15 @@ many different seeds.\n Runs the benchmarks from bench-cargo-miri in hyperfine. hyperfine needs to be installed.\n <benches> can explicitly list the benchmarks to run; by default, all of them are run.\n \n+./miri rustc-pull:\n+Pull and merge Miri changes from the rustc repo.\n+\n+./miri rustc-push <github user> <branch>:\n+Push Miri changes back to the rustc repo. This will update the 'master' branch\n+in the Rust fork of the given user to upstream. It will also pull a copy of the\n+rustc history into the Miri repo, unless you set the RUSTC_GIT env var to an\n+existing clone of the rustc repo.\n+\n   ENVIRONMENT VARIABLES\n \n MIRI_SYSROOT:\n@@ -52,37 +61,60 @@ Pass extra flags to all cargo invocations. (Ignored by `./miri cargo`.)\n EOF\n )\n \n-## We need to know where we are.\n+## We need to know which command to run and some global constants.\n+COMMAND=\"$1\"\n+if [ -z \"$COMMAND\" ]; then\n+    echo \"$USAGE\"\n+    exit 1\n+fi\n+shift\n # macOS does not have a useful readlink/realpath so we have to use Python instead...\n MIRIDIR=$(python3 -c 'import os, sys; print(os.path.dirname(os.path.realpath(sys.argv[1])))' \"$0\")\n+# Used for rustc syncs.\n+JOSH_FILTER=\":at_commit=75dd959a3a40eb5b4574f8d2e23aa6efbeb33573[:prefix=src/tools/miri]:/src/tools/miri\"\n \n-## Run the auto-things.\n-if [ -z \"$MIRI_AUTO_OPS\" ]; then\n-    export MIRI_AUTO_OPS=42\n-\n-    # Run this first, so that the toolchain doesn't change after\n-    # other code has run.\n-    if [ -f \"$MIRIDIR/.auto-everything\" ] || [ -f \"$MIRIDIR/.auto-toolchain\" ] ; then\n-        (cd \"$MIRIDIR\" && ./rustup-toolchain)\n+## Early commands, that don't do auto-things and don't want the environment-altering things happening below.\n+case \"$COMMAND\" in\n+rustc-pull)\n+    cd \"$MIRIDIR\"\n+    git fetch http://localhost:8000/rust-lang/rust.git$JOSH_FILTER.git master\n+    git merge FETCH_HEAD\n+    exit 0\n+    ;;\n+rustc-push)\n+    USER=\"$1\"\n+    BRANCH=\"$2\"\n+    if [ -z \"$USER\" ] || [ -z \"$BRANCH\" ]; then\n+        echo \"Usage: $0 rustc-push <github user> <branch>\"\n+        exit 1\n     fi\n-\n-    if [ -f \"$MIRIDIR/.auto-everything\" ] || [ -f \"$MIRIDIR/.auto-fmt\" ] ; then\n-        $0 fmt\n+    if [ -n \"$RUSTC_GIT\" ]; then\n+        # Use an existing fork for the branch updates.\n+        cd \"$RUSTC_GIT\"\n+    else\n+        # Do this in the local Miri repo.\n+        echo \"This will pull a copy of the rust-lang/rust history into this Miri checkout, growing it by about 1GB.\"\n+        read -r -p \"To avoid that, abort now and set the RUSTC_GIT environment variable to an existing rustc checkout. Proceed? [y/N] \"\n+        if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n+            exit 1\n+        fi\n+        cd \"$MIRIDIR\"\n     fi\n-\n-    if [ -f \"$MIRIDIR/.auto-everything\" ] || [ -f \"$MIRIDIR/.auto-clippy\" ] ; then\n-        $0 clippy -- -D warnings\n+    # Prepare the branches. For reliable pushing we need to push to a non-existent branch\n+    # and set `-o base` to a branch that holds current rustc master.\n+    echo \"Preparing $USER/rust...\"\n+    if git fetch https://github.com/$USER/rust $BRANCH &>/dev/null; then\n+        echo \"The '$BRANCH' seems to already exist in $USER/rust. Please delete it and try again.\"\n+        exit 1\n     fi\n-fi\n-\n-## Determine command and toolchain.\n-COMMAND=\"$1\"\n-[ $# -gt 0 ] && shift\n-# Doing this *after* auto-toolchain logic above, since that might change the toolchain.\n-TOOLCHAIN=$(cd \"$MIRIDIR\"; rustup show active-toolchain | head -n 1 | cut -d ' ' -f 1)\n-\n-## Handle some commands early, since they should *not* alter the environment.\n-case \"$COMMAND\" in\n+    git fetch https://github.com/rust-lang/rust master\n+    git push https://github.com/$USER/rust FETCH_HEAD:master\n+    # Do the actual push.\n+    cd \"$MIRIDIR\"\n+    echo \"Pushing Miri changes...\"\n+    git push http://localhost:8000/$USER/rust.git$JOSH_FILTER.git HEAD:$BRANCH -o base=master\n+    exit 0\n+    ;;\n many-seeds)\n     for SEED in $({ echo obase=16; seq 0 255; } | bc); do\n         echo \"Trying seed: $SEED\"\n@@ -106,9 +138,28 @@ bench)\n     ;;\n esac\n \n+## Run the auto-things.\n+if [ -z \"$MIRI_AUTO_OPS\" ]; then\n+    export MIRI_AUTO_OPS=42\n+\n+    # Run this first, so that the toolchain doesn't change after\n+    # other code has run.\n+    if [ -f \"$MIRIDIR/.auto-everything\" ] || [ -f \"$MIRIDIR/.auto-toolchain\" ] ; then\n+        (cd \"$MIRIDIR\" && ./rustup-toolchain)\n+    fi\n+\n+    if [ -f \"$MIRIDIR/.auto-everything\" ] || [ -f \"$MIRIDIR/.auto-fmt\" ] ; then\n+        $0 fmt\n+    fi\n+\n+    if [ -f \"$MIRIDIR/.auto-everything\" ] || [ -f \"$MIRIDIR/.auto-clippy\" ] ; then\n+        $0 clippy -- -D warnings\n+    fi\n+fi\n+\n ## Prepare the environment\n # Determine some toolchain properties\n-# export the target so its available in miri\n+TOOLCHAIN=$(cd \"$MIRIDIR\"; rustup show active-toolchain | head -n 1 | cut -d ' ' -f 1)\n TARGET=$(rustc +$TOOLCHAIN --version --verbose | grep \"^host:\" | cut -d ' ' -f 2)\n SYSROOT=$(rustc +$TOOLCHAIN --print sysroot)\n LIBDIR=$SYSROOT/lib/rustlib/$TARGET/lib\n@@ -227,10 +278,7 @@ cargo)\n     $CARGO \"$@\"\n     ;;\n *)\n-    if [ -n \"$COMMAND\" ]; then\n-      echo \"Unknown command: $COMMAND\"\n-      echo\n-    fi\n-    echo \"$USAGE\"\n+    echo \"Unknown command: $COMMAND\"\n     exit 1\n+    ;;\n esac"}]}