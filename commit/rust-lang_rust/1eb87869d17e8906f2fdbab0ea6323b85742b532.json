{"sha": "1eb87869d17e8906f2fdbab0ea6323b85742b532", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYjg3ODY5ZDE3ZTg5MDZmMmZkYmFiMGVhNjMyM2I4NTc0MmI1MzI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-12-24T12:29:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-24T12:29:26Z"}, "message": "Rollup merge of #55470 - daniellimws:box-from-docs, r=Centril\n\nbox: Add documentation for `From` impls\n\nThis is a part of #51430. A brief description of the behaviour and examples are added to the documentation.\n\nI am not sure what sort of examples to put for the `From` for `Pin` as my [code](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2015&gist=97c908f44e41c9faeffec5b61d72a03e) doesn't even manage to compile using the nightly build.\n\nSomehow I feel that I missed out something so do let me know if more information is needed in the documentation or any of the examples require change.", "tree": {"sha": "e5616273a03fcdbf13c8f89d9252749c8b633eb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5616273a03fcdbf13c8f89d9252749c8b633eb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1eb87869d17e8906f2fdbab0ea6323b85742b532", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcINEmCRBK7hj4Ov3rIwAAdHIIACIttGcSt7pkt00k2iRR7hJc\n0sOfVt+s2Qk38cXciFkOoGgLg5MqDNRKZ5/QNYt4AwbHtk0z71r2jaTFtJP6h4Za\nmuUgFUR5BStOAobBBReD/8rmGtXw9dIEL1jxCyvf5xup8RSEsDlhBIrqLk5obIOG\nmx6NQZN58Kgwwp6AK81YfjSp3PXLrrrABiu3Xgh1TsXKg9Ldsv0q9iFDmEll6mJs\n+z/mFGbOd+7+VDuwUCg0fHNxatyMXt0ACx/VkNDebbK8NM/rbhvFJpAHu+rBb9B2\n/L6cCXoUL8O5O29Z7j6OrA9ihV50gaoFhB4cMl6Wml9KijR2PjaHnvT3EyNTXfM=\n=LX89\n-----END PGP SIGNATURE-----\n", "payload": "tree e5616273a03fcdbf13c8f89d9252749c8b633eb3\nparent 94bf2c15eb3d072e92855a605783a29920df9e46\nparent 5e2bfda19af0f00707ff0c19547127f902d36b97\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1545654566 +0100\ncommitter GitHub <noreply@github.com> 1545654566 +0100\n\nRollup merge of #55470 - daniellimws:box-from-docs, r=Centril\n\nbox: Add documentation for `From` impls\n\nThis is a part of #51430. A brief description of the behaviour and examples are added to the documentation.\n\nI am not sure what sort of examples to put for the `From` for `Pin` as my [code](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2015&gist=97c908f44e41c9faeffec5b61d72a03e) doesn't even manage to compile using the nightly build.\n\nSomehow I feel that I missed out something so do let me know if more information is needed in the documentation or any of the examples require change.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1eb87869d17e8906f2fdbab0ea6323b85742b532", "html_url": "https://github.com/rust-lang/rust/commit/1eb87869d17e8906f2fdbab0ea6323b85742b532", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1eb87869d17e8906f2fdbab0ea6323b85742b532/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94bf2c15eb3d072e92855a605783a29920df9e46", "url": "https://api.github.com/repos/rust-lang/rust/commits/94bf2c15eb3d072e92855a605783a29920df9e46", "html_url": "https://github.com/rust-lang/rust/commit/94bf2c15eb3d072e92855a605783a29920df9e46"}, {"sha": "5e2bfda19af0f00707ff0c19547127f902d36b97", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e2bfda19af0f00707ff0c19547127f902d36b97", "html_url": "https://github.com/rust-lang/rust/commit/5e2bfda19af0f00707ff0c19547127f902d36b97"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "859749780b472d6722b39bb74bcb332de26ad454", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1eb87869d17e8906f2fdbab0ea6323b85742b532/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb87869d17e8906f2fdbab0ea6323b85742b532/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=1eb87869d17e8906f2fdbab0ea6323b85742b532", "patch": "@@ -443,13 +443,28 @@ impl<T: ?Sized + Hasher> Hasher for Box<T> {\n \n #[stable(feature = \"from_for_ptrs\", since = \"1.6.0\")]\n impl<T> From<T> for Box<T> {\n+    /// Converts a generic type `T` into a `Box<T>`\n+    ///\n+    /// The conversion allocates on the heap and moves `t`\n+    /// from the stack into it.\n+    ///\n+    /// # Examples\n+    /// ```rust\n+    /// let x = 5;\n+    /// let boxed = Box::new(5);\n+    ///\n+    /// assert_eq!(Box::from(x), boxed);\n+    /// ```\n     fn from(t: T) -> Self {\n         Box::new(t)\n     }\n }\n \n #[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<T> From<Box<T>> for Pin<Box<T>> {\n+    /// Converts a `Box<T>` into a `Pin<Box<T>>`\n+    ///\n+    /// This conversion does not allocate on the heap and happens in place.\n     fn from(boxed: Box<T>) -> Self {\n         // It's not possible to move or replace the insides of a `Pin<Box<T>>`\n         // when `T: !Unpin`,  so it's safe to pin it directly without any\n@@ -460,6 +475,19 @@ impl<T> From<Box<T>> for Pin<Box<T>> {\n \n #[stable(feature = \"box_from_slice\", since = \"1.17.0\")]\n impl<'a, T: Copy> From<&'a [T]> for Box<[T]> {\n+    /// Converts a `&[T]` into a `Box<[T]>`\n+    ///\n+    /// This conversion allocates on the heap\n+    /// and performs a copy of `slice`.\n+    ///\n+    /// # Examples\n+    /// ```rust\n+    /// // create a &[u8] which will be used to create a Box<[u8]>\n+    /// let slice: &[u8] = &[104, 101, 108, 108, 111];\n+    /// let boxed_slice: Box<[u8]> = Box::from(slice);\n+    ///\n+    /// println!(\"{:?}\", boxed_slice);\n+    /// ```\n     fn from(slice: &'a [T]) -> Box<[T]> {\n         let mut boxed = unsafe { RawVec::with_capacity(slice.len()).into_box() };\n         boxed.copy_from_slice(slice);\n@@ -469,6 +497,16 @@ impl<'a, T: Copy> From<&'a [T]> for Box<[T]> {\n \n #[stable(feature = \"box_from_slice\", since = \"1.17.0\")]\n impl<'a> From<&'a str> for Box<str> {\n+    /// Converts a `&str` into a `Box<str>`\n+    ///\n+    /// This conversion allocates on the heap\n+    /// and performs a copy of `s`.\n+    ///\n+    /// # Examples\n+    /// ```rust\n+    /// let boxed: Box<str> = Box::from(\"hello\");\n+    /// println!(\"{}\", boxed);\n+    /// ```\n     #[inline]\n     fn from(s: &'a str) -> Box<str> {\n         unsafe { from_boxed_utf8_unchecked(Box::from(s.as_bytes())) }\n@@ -477,6 +515,22 @@ impl<'a> From<&'a str> for Box<str> {\n \n #[stable(feature = \"boxed_str_conv\", since = \"1.19.0\")]\n impl From<Box<str>> for Box<[u8]> {\n+    /// Converts a `Box<str>>` into a `Box<[u8]>`\n+    ///\n+    /// This conversion does not allocate on the heap and happens in place.\n+    ///\n+    /// # Examples\n+    /// ```rust\n+    /// // create a Box<str> which will be used to create a Box<[u8]>\n+    /// let boxed: Box<str> = Box::from(\"hello\");\n+    /// let boxed_str: Box<[u8]> = Box::from(boxed);\n+    ///\n+    /// // create a &[u8] which will be used to create a Box<[u8]>\n+    /// let slice: &[u8] = &[104, 101, 108, 108, 111];\n+    /// let boxed_slice = Box::from(slice);\n+    ///\n+    /// assert_eq!(boxed_slice, boxed_str);\n+    /// ```\n     #[inline]\n     fn from(s: Box<str>) -> Self {\n         unsafe { Box::from_raw(Box::into_raw(s) as *mut [u8]) }"}]}