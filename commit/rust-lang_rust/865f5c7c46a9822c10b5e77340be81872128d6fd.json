{"sha": "865f5c7c46a9822c10b5e77340be81872128d6fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NWY1YzdjNDZhOTgyMmMxMGI1ZTc3MzQwYmU4MTg3MjEyOGQ2ZmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-06T12:13:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-06T12:13:39Z"}, "message": "Auto merge of #4777 - lzutao:66014-rustup, r=matthiaskrgr\n\n rustup https://github.com/rust-lang/rust/pull/65776\n\nchangelog: none", "tree": {"sha": "32066013b7d6504ea57c814a3ae967214cf2e1ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32066013b7d6504ea57c814a3ae967214cf2e1ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/865f5c7c46a9822c10b5e77340be81872128d6fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/865f5c7c46a9822c10b5e77340be81872128d6fd", "html_url": "https://github.com/rust-lang/rust/commit/865f5c7c46a9822c10b5e77340be81872128d6fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/865f5c7c46a9822c10b5e77340be81872128d6fd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eae7b997dd41e397a2c01a5b6724d0b38353e686", "url": "https://api.github.com/repos/rust-lang/rust/commits/eae7b997dd41e397a2c01a5b6724d0b38353e686", "html_url": "https://github.com/rust-lang/rust/commit/eae7b997dd41e397a2c01a5b6724d0b38353e686"}, {"sha": "42c8c03464c5ca876d9fa1e31b6837a647bac5e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/42c8c03464c5ca876d9fa1e31b6837a647bac5e0", "html_url": "https://github.com/rust-lang/rust/commit/42c8c03464c5ca876d9fa1e31b6837a647bac5e0"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "b07ebe501c7697ec71245c7d287e6675fe2ac6c3", "filename": ".travis.yml", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/865f5c7c46a9822c10b5e77340be81872128d6fd/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/865f5c7c46a9822c10b5e77340be81872128d6fd/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=865f5c7c46a9822c10b5e77340be81872128d6fd", "patch": "@@ -56,15 +56,15 @@ matrix:\n     # We don't want to run these always because they go towards\n     # the build limit within the Travis rust-lang account.\n     # The jobs are approximately sorted by execution time\n+    - env: INTEGRATION=rust-lang/rls\n+      if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=rust-lang/cargo\n       if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=rust-lang-nursery/chalk\n       if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n-    - env: INTEGRATION=rust-lang/rls\n-      if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=Geal/nom\n       if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n-    # FIXME blocked on https://github.com/rust-lang/rust-clippy/issues/4742\n+    # FIXME blocked on https://github.com/rust-lang/rust-clippy/issues/4727\n     #- env: INTEGRATION=rust-lang/rustfmt\n     #  if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=hyperium/hyper\n@@ -90,7 +90,6 @@ matrix:\n   allow_failures:\n     - os: windows\n       env: CARGO_INCREMENTAL=0 OS_WINDOWS=true\n-    - env: INTEGRATION=rust-lang-nursery/stdsimd\n \n before_script:\n   - |"}, {"sha": "608fb668c5ae0312e1089399d5311693e26bb108", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/865f5c7c46a9822c10b5e77340be81872128d6fd/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/865f5c7c46a9822c10b5e77340be81872128d6fd/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=865f5c7c46a9822c10b5e77340be81872128d6fd", "patch": "@@ -18,20 +18,21 @@ edition = \"2018\"\n \n [dependencies]\n cargo_metadata = \"0.9.0\"\n+if_chain = \"1.0.0\"\n itertools = \"0.8\"\n lazy_static = \"1.0.2\"\n matches = \"0.1.7\"\n+pulldown-cmark = \"0.6.0\"\n quine-mc_cluskey = \"0.2.2\"\n regex-syntax = \"0.6\"\n-semver = \"0.9.0\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n+smallvec = { version = \"1\", features = [\"union\"] }\n toml = \"0.5.3\"\n unicode-normalization = \"0.1\"\n-pulldown-cmark = \"0.6.0\"\n-url = { version =  \"2.1.0\", features = [\"serde\"] } # cargo requires serde feat in its url dep\n-# see https://github.com/rust-lang/rust/pull/63587#issuecomment-522343864\n-if_chain = \"1.0.0\"\n-smallvec = { version = \"0.6.5\", features = [\"union\"] }\n+semver = \"0.9.0\"\n+# NOTE: cargo requires serde feat in its url dep\n+# see <https://github.com/rust-lang/rust/pull/63587#issuecomment-522343864>\n+url = { version =  \"2.1.0\", features = [\"serde\"] }\n \n [features]\n debugging = []"}, {"sha": "db94d9dcdafa38c06768baceedfa258729d7ca6a", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/865f5c7c46a9822c10b5e77340be81872128d6fd/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/865f5c7c46a9822c10b5e77340be81872128d6fd/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=865f5c7c46a9822c10b5e77340be81872128d6fd", "patch": "@@ -17,7 +17,7 @@ use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast;\n use syntax::source_map::Span;\n-use syntax::symbol::{sym, LocalInternedString, Symbol};\n+use syntax::symbol::{sym, Symbol, SymbolStr};\n \n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n@@ -1148,8 +1148,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n         }\n \n         let (method_names, arg_lists, method_spans) = method_calls(expr, 2);\n-        let method_names: Vec<LocalInternedString> = method_names.iter().map(|s| s.as_str()).collect();\n-        let method_names: Vec<&str> = method_names.iter().map(std::convert::AsRef::as_ref).collect();\n+        let method_names: Vec<SymbolStr> = method_names.iter().map(|s| s.as_str()).collect();\n+        let method_names: Vec<&str> = method_names.iter().map(|s| &**s).collect();\n \n         match method_names.as_slice() {\n             [\"unwrap\", \"get\"] => lint_get_unwrap(cx, expr, arg_lists[1], false),"}, {"sha": "12df9325650f3648c5695ae8645501eae5fadf2d", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/865f5c7c46a9822c10b5e77340be81872128d6fd/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/865f5c7c46a9822c10b5e77340be81872128d6fd/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=865f5c7c46a9822c10b5e77340be81872128d6fd", "patch": "@@ -5,7 +5,7 @@ use std::cmp::Ordering;\n use syntax::ast::*;\n use syntax::attr;\n use syntax::source_map::Span;\n-use syntax::symbol::LocalInternedString;\n+use syntax::symbol::SymbolStr;\n use syntax::visit::{walk_block, walk_expr, walk_pat, Visitor};\n \n declare_clippy_lint! {\n@@ -72,7 +72,7 @@ pub struct NonExpressiveNames {\n impl_lint_pass!(NonExpressiveNames => [SIMILAR_NAMES, MANY_SINGLE_CHAR_NAMES, JUST_UNDERSCORES_AND_DIGITS]);\n \n struct ExistingName {\n-    interned: LocalInternedString,\n+    interned: SymbolStr,\n     span: Span,\n     len: usize,\n     whitelist: &'static [&'static str],"}, {"sha": "eee60e33bab636eee51fbf172135b4442b0295b6", "filename": "clippy_lints/src/path_buf_push_overwrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/865f5c7c46a9822c10b5e77340be81872128d6fd/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/865f5c7c46a9822c10b5e77340be81872128d6fd/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs?ref=865f5c7c46a9822c10b5e77340be81872128d6fd", "patch": "@@ -50,7 +50,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PathBufPushOverwrite {\n             if let Some(get_index_arg) = args.get(1);\n             if let ExprKind::Lit(ref lit) = get_index_arg.kind;\n             if let LitKind::Str(ref path_lit, _) = lit.node;\n-            if let pushed_path = Path::new(&path_lit.as_str());\n+            if let pushed_path = Path::new(&*path_lit.as_str());\n             if let Some(pushed_path_lit) = pushed_path.to_str();\n             if pushed_path.has_root();\n             if let Some(root) = pushed_path.components().next();"}, {"sha": "2f0e406b1a55c32d8d5c6a3fb769e26e86431a49", "filename": "clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/865f5c7c46a9822c10b5e77340be81872128d6fd/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/865f5c7c46a9822c10b5e77340be81872128d6fd/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=865f5c7c46a9822c10b5e77340be81872128d6fd", "patch": "@@ -3,7 +3,7 @@ use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::ast::*;\n use syntax::source_map::Span;\n-use syntax::symbol::LocalInternedString;\n+use syntax::symbol::SymbolStr;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for imports that remove \"unsafe\" from an item's\n@@ -73,6 +73,6 @@ fn unsafe_to_safe_check(old_name: Ident, new_name: Ident, cx: &EarlyContext<'_>,\n }\n \n #[must_use]\n-fn contains_unsafe(name: &LocalInternedString) -> bool {\n+fn contains_unsafe(name: &SymbolStr) -> bool {\n     name.contains(\"Unsafe\") || name.contains(\"unsafe\")\n }"}, {"sha": "1d1a3da6bc4176a48ac4c6512aae798a73fa9f4b", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/865f5c7c46a9822c10b5e77340be81872128d6fd/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/865f5c7c46a9822c10b5e77340be81872128d6fd/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=865f5c7c46a9822c10b5e77340be81872128d6fd", "patch": "@@ -13,7 +13,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n use syntax::ast::{Crate as AstCrate, ItemKind, Name};\n use syntax::source_map::Span;\n-use syntax_pos::symbol::LocalInternedString;\n+use syntax_pos::symbol::SymbolStr;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for various things we like to keep tidy in clippy.\n@@ -112,7 +112,7 @@ impl EarlyLintPass for ClippyLintsInternal {\n             if let ItemKind::Mod(ref utils_mod) = utils.kind {\n                 if let Some(paths) = utils_mod.items.iter().find(|item| item.ident.name.as_str() == \"paths\") {\n                     if let ItemKind::Mod(ref paths_mod) = paths.kind {\n-                        let mut last_name: Option<LocalInternedString> = None;\n+                        let mut last_name: Option<SymbolStr> = None;\n                         for item in &*paths_mod.items {\n                             let name = item.ident.as_str();\n                             if let Some(ref last_name) = last_name {\n@@ -279,8 +279,8 @@ declare_lint_pass!(OuterExpnDataPass => [OUTER_EXPN_EXPN_DATA]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OuterExpnDataPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n         let (method_names, arg_lists, spans) = method_calls(expr, 2);\n-        let method_names: Vec<LocalInternedString> = method_names.iter().map(|s| s.as_str()).collect();\n-        let method_names: Vec<&str> = method_names.iter().map(std::convert::AsRef::as_ref).collect();\n+        let method_names: Vec<SymbolStr> = method_names.iter().map(|s| s.as_str()).collect();\n+        let method_names: Vec<&str> = method_names.iter().map(|s| &**s).collect();\n         if_chain! {\n             if let [\"expn_data\", \"outer_expn\"] = method_names.as_slice();\n             let args = arg_lists[1];"}, {"sha": "42bde5e07f368496792618e76eca4131aa73093e", "filename": "tests/ui/builtin-type-shadow.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/865f5c7c46a9822c10b5e77340be81872128d6fd/tests%2Fui%2Fbuiltin-type-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/865f5c7c46a9822c10b5e77340be81872128d6fd/tests%2Fui%2Fbuiltin-type-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-type-shadow.stderr?ref=865f5c7c46a9822c10b5e77340be81872128d6fd", "patch": "@@ -10,9 +10,11 @@ error[E0308]: mismatched types\n   --> $DIR/builtin-type-shadow.rs:5:5\n    |\n LL | fn foo<u32>(a: u32) -> u32 {\n-   |                        --- expected `u32` because of return type\n+   |        ---             --- expected `u32` because of return type\n+   |        |\n+   |        this type parameter\n LL |     42\n-   |     ^^ expected type parameter, found integer\n+   |     ^^ expected type parameter `u32`, found integer\n    |\n    = note: expected type `u32`\n               found type `{integer}`"}]}