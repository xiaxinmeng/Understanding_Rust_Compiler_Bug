{"sha": "c7edcb3a72f3991962acce0874c2ee24a4f38cf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZWRjYjNhNzJmMzk5MTk2MmFjY2UwODc0YzJlZTI0YTRmMzhjZjU=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-17T17:10:02Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-17T17:10:02Z"}, "message": "Support #fmt precision for string types", "tree": {"sha": "7e0f3a79abea51f31a46e105970fe1fd5e074af7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e0f3a79abea51f31a46e105970fe1fd5e074af7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7edcb3a72f3991962acce0874c2ee24a4f38cf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7edcb3a72f3991962acce0874c2ee24a4f38cf5", "html_url": "https://github.com/rust-lang/rust/commit/c7edcb3a72f3991962acce0874c2ee24a4f38cf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7edcb3a72f3991962acce0874c2ee24a4f38cf5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96e3e29e88fa877aa087b616a58b3492b036ee85", "url": "https://api.github.com/repos/rust-lang/rust/commits/96e3e29e88fa877aa087b616a58b3492b036ee85", "html_url": "https://github.com/rust-lang/rust/commit/96e3e29e88fa877aa087b616a58b3492b036ee85"}], "stats": {"total": 74, "additions": 70, "deletions": 4}, "files": [{"sha": "3aa24a90fe6f21590db3ea147f85ffe4efede980", "filename": "src/comp/front/extfmt.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c7edcb3a72f3991962acce0874c2ee24a4f38cf5/src%2Fcomp%2Ffront%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7edcb3a72f3991962acce0874c2ee24a4f38cf5/src%2Fcomp%2Ffront%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fextfmt.rs?ref=c7edcb3a72f3991962acce0874c2ee24a4f38cf5", "patch": "@@ -234,18 +234,22 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n         fn make_conv_rec(common.span sp,\n                          @ast.expr flags_expr,\n                          @ast.expr width_expr,\n+                         @ast.expr precision_expr,\n                          @ast.expr ty_expr) -> @ast.expr {\n             ret make_rec_expr(sp, vec(tup(\"flags\", flags_expr),\n                                       tup(\"width\", width_expr),\n+                                      tup(\"precision\", precision_expr),\n                                       tup(\"ty\", ty_expr)));\n         }\n \n         auto rt_conv_flags = make_flags(sp, cnv.flags);\n         auto rt_conv_width = make_count(sp, cnv.width);\n+        auto rt_conv_precision = make_count(sp, cnv.precision);\n         auto rt_conv_ty = make_ty(sp, cnv.ty);\n         ret make_conv_rec(sp,\n                           rt_conv_flags,\n                           rt_conv_width,\n+                          rt_conv_precision,\n                           rt_conv_ty);\n     }\n \n@@ -296,6 +300,8 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n         alt (cnv.precision) {\n             case (count_implied) {\n             }\n+            case (count_is(_)) {\n+            }\n             case (_) {\n                 log unsupported;\n                 fail;\n@@ -444,8 +450,8 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n                 }\n \n                 // TODO: Remove debug logging\n-                // log \"Building conversion:\";\n-                // log_conv(conv);\n+                //log \"Building conversion:\";\n+                //log_conv(conv);\n \n                 n += 1u;\n                 auto arg_expr = args.(n);"}, {"sha": "af18a0d6d764d03bac7db0b0e56674d8249fff8f", "filename": "src/lib/ExtFmt.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c7edcb3a72f3991962acce0874c2ee24a4f38cf5/src%2Flib%2FExtFmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7edcb3a72f3991962acce0874c2ee24a4f38cf5/src%2Flib%2FExtFmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2FExtFmt.rs?ref=c7edcb3a72f3991962acce0874c2ee24a4f38cf5", "patch": "@@ -246,7 +246,17 @@ mod CT {\n         }\n \n         if (s.(i) == '.' as u8) {\n-            ret parse_count(s, i + 1u, lim);\n+            auto count = parse_count(s, i + 1u, lim);\n+            // If there were no digits specified, i.e. the precision\n+            // was \".\", then the precision is 0\n+            alt (count._0) {\n+                case (count_implied) {\n+                    ret tup(count_is(0), count._1);\n+                }\n+                case (_) {\n+                    ret count;\n+                }\n+            }\n         } else {\n             ret tup(count_implied, i);\n         }\n@@ -318,6 +328,7 @@ mod RT {\n     // instead just use a bool per flag\n     type conv = rec(vec[flag] flags,\n                     count width,\n+                    count precision,\n                     ty ty);\n \n     fn conv_int(&conv cv, int i) -> str {\n@@ -356,7 +367,19 @@ mod RT {\n     }\n \n     fn conv_str(&conv cv, str s) -> str {\n-        ret pad(cv, s);\n+        auto unpadded = s;\n+        alt (cv.precision) {\n+            case (count_implied) {\n+            }\n+            case (count_is(?max)) {\n+                // For strings, precision is the maximum characters displayed\n+                if (max as uint < _str.char_len(s)) {\n+                    // FIXME: substr works on bytes, not chars!\n+                    unpadded = _str.substr(s, 0u, max as uint);\n+                }\n+            }\n+        }\n+        ret pad(cv, unpadded);\n     }\n \n     fn pad(&conv cv, str s) -> str {"}, {"sha": "abe3a30acf253ba15164214b99480a8c9f09725d", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c7edcb3a72f3991962acce0874c2ee24a4f38cf5/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7edcb3a72f3991962acce0874c2ee24a4f38cf5/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=c7edcb3a72f3991962acce0874c2ee24a4f38cf5", "patch": "@@ -53,4 +53,41 @@ fn main() {\n   test(#fmt(\"%-10x\", 0xff_u), \"ff        \");\n   test(#fmt(\"%-10X\", 0xff_u), \"FF        \");\n   test(#fmt(\"%-10t\", 0xff_u), \"11111111  \");\n+\n+  // Precision\n+//   test(#fmt(\"%.d\", 0), \"\");\n+//   test(#fmt(\"%.u\", 0u), \"\");\n+//   test(#fmt(\"%.x\", 0u), \"\");\n+//   test(#fmt(\"%.d\", 10), \"10\");\n+//   test(#fmt(\"%.d\", -10), \"-10\");\n+//   test(#fmt(\"%.u\", 10u), \"10\");\n+   test(#fmt(\"%.s\", \"test\"), \"\");\n+//   test(#fmt(\"%.x\", 127u), \"7f\");\n+\n+//   test(#fmt(\"%.0d\", 0), \"\");\n+//   test(#fmt(\"%.0u\", 0u), \"\");\n+//   test(#fmt(\"%.0x\", 0u), \"\");\n+//   test(#fmt(\"%.0d\", 10), \"10\");\n+//   test(#fmt(\"%.0d\", -10), \"-10\");\n+//   test(#fmt(\"%.0u\", 10u), \"10\");\n+   test(#fmt(\"%.0s\", \"test\"), \"\");\n+//   test(#fmt(\"%.0x\", 127u), \"7f\");\n+\n+//   test(#fmt(\"%.1d\", 0), \"0\");\n+//   test(#fmt(\"%.1u\", 0u), \"0\");\n+//   test(#fmt(\"%.1x\", 0u), \"0\");\n+//   test(#fmt(\"%.1d\", 10), \"10\");\n+//   test(#fmt(\"%.1d\", -10), \"-10\");\n+//   test(#fmt(\"%.1u\", 10u), \"10\");\n+   test(#fmt(\"%.1s\", \"test\"), \"t\");\n+//   test(#fmt(\"%.1x\", 127u), \"7f\");\n+\n+//   test(#fmt(\"%.5d\", 0), \"00000\");\n+//   test(#fmt(\"%.5u\", 0u), \"00000\");\n+//   test(#fmt(\"%.5x\", 0u), \"00000\");\n+//   test(#fmt(\"%.5d\", 10), \"00010\");\n+//   test(#fmt(\"%.5d\", -10), \"-00010\");\n+//   test(#fmt(\"%.5u\", 10u), \"00010\");\n+   test(#fmt(\"%.5s\", \"test\"), \"test\");\n+//   test(#fmt(\"%.5x\", 127u), \"0007f\");\n }"}]}