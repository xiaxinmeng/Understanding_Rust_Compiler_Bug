{"sha": "e9c28b2564c26767b6cab2f95e851389b4c1b014", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YzI4YjI1NjRjMjY3NjdiNmNhYjJmOTVlODUxMzg5YjRjMWIwMTQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T12:15:49Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:22:25Z"}, "message": "Use Kind instead of UnpackedKind in Substs methods", "tree": {"sha": "21b42b8133f1abf8f11f8bb30d61754eb01b1f18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21b42b8133f1abf8f11f8bb30d61754eb01b1f18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9c28b2564c26767b6cab2f95e851389b4c1b014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9c28b2564c26767b6cab2f95e851389b4c1b014", "html_url": "https://github.com/rust-lang/rust/commit/e9c28b2564c26767b6cab2f95e851389b4c1b014", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9c28b2564c26767b6cab2f95e851389b4c1b014/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ae2468261dca097ecfa81a74654fed32b60f8ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ae2468261dca097ecfa81a74654fed32b60f8ce", "html_url": "https://github.com/rust-lang/rust/commit/3ae2468261dca097ecfa81a74654fed32b60f8ce"}], "stats": {"total": 169, "additions": 75, "deletions": 94}, "files": [{"sha": "38db58b1e0006b319ffbd9e40c563f1e9a4559c7", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=e9c28b2564c26767b6cab2f95e851389b4c1b014", "patch": "@@ -21,7 +21,7 @@ use hir::def_id::DefId;\n use middle::free_region::RegionRelations;\n use middle::region;\n use middle::lang_items;\n-use ty::subst::{UnpackedKind, Substs};\n+use ty::subst::{Kind, Substs};\n use ty::{TyVid, IntVid, FloatVid};\n use ty::{self, Ty, TyCtxt, GenericParamDefKind};\n use ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n@@ -908,12 +908,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn var_for_def(&self,\n                        span: Span,\n                        param: &ty::GenericParamDef)\n-                       -> UnpackedKind<'tcx> {\n+                       -> Kind<'tcx> {\n         match param.kind {\n             GenericParamDefKind::Lifetime => {\n                 // Create a region inference variable for the given\n                 // region parameter definition.\n-                UnpackedKind::Lifetime(self.next_region_var(EarlyBoundRegion(span, param.name)))\n+                self.next_region_var(EarlyBoundRegion(span, param.name)).into()\n             }\n             GenericParamDefKind::Type(_) => {\n                 // Create a type inference variable for the given\n@@ -930,7 +930,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                              false,\n                                              TypeVariableOrigin::TypeParameterDefinition(span, param.name));\n \n-                UnpackedKind::Type(self.tcx.mk_var(ty_var_id))\n+                self.tcx.mk_var(ty_var_id).into()\n             }\n         }\n     }"}, {"sha": "36fedab9e7993958b2d7490b4229b992a6741334", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=e9c28b2564c26767b6cab2f95e851389b4c1b014", "patch": "@@ -22,7 +22,7 @@ use hir::def_id::DefId;\n use infer::outlives::env::OutlivesEnvironment;\n use middle::region;\n use middle::const_val::ConstEvalErr;\n-use ty::subst::{UnpackedKind, Substs};\n+use ty::subst::Substs;\n use ty::{self, AdtKind, Slice, Ty, TyCtxt, GenericParamDefKind, TypeFoldable, ToPredicate};\n use ty::error::{ExpectedFound, TypeError};\n use infer::{InferCtxt};\n@@ -843,11 +843,9 @@ fn vtable_methods<'a, 'tcx>(\n                 let substs = trait_ref.map_bound(|trait_ref| {\n                     Substs::for_item(tcx, def_id, |param, _| {\n                         match param.kind {\n-                            GenericParamDefKind::Lifetime => {\n-                                UnpackedKind::Lifetime(tcx.types.re_erased)\n-                            }\n+                            GenericParamDefKind::Lifetime => tcx.types.re_erased.into(),\n                             GenericParamDefKind::Type(_) => {\n-                                UnpackedKind::Type(trait_ref.substs.type_for_def(param))\n+                                trait_ref.substs.type_for_def(param).into()\n                             }\n                         }\n                     })"}, {"sha": "592f04ca9136a6c44bbce36ed1563a8174ad4ba2", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=e9c28b2564c26767b6cab2f95e851389b4c1b014", "patch": "@@ -32,7 +32,7 @@ use middle::lang_items;\n use middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n use middle::stability;\n use mir::{self, Mir, interpret};\n-use ty::subst::{Kind, UnpackedKind, Substs, Subst};\n+use ty::subst::{Kind, Substs, Subst};\n use ty::ReprOptions;\n use ty::Instance;\n use traits;\n@@ -2331,10 +2331,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 GenericParamDefKind::Lifetime => bug!(),\n                 GenericParamDefKind::Type(ty_param) => {\n                     if param.index == 0 {\n-                        UnpackedKind::Type(ty)\n+                        ty.into()\n                     } else {\n                         assert!(ty_param.has_default);\n-                        UnpackedKind::Type(self.type_of(param.def_id).subst(self, substs))\n+                        self.type_of(param.def_id).subst(self, substs).into()\n                     }\n                 }\n             }"}, {"sha": "3c016b38aff41f02684d8b16474d04033ab1463c", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=e9c28b2564c26767b6cab2f95e851389b4c1b014", "patch": "@@ -184,12 +184,9 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n         Substs::for_item(tcx, def_id, |param, _| {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => {\n-                    UnpackedKind::Lifetime(\n-                        tcx.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())))\n-                }\n-                GenericParamDefKind::Type(_) => {\n-                    UnpackedKind::Type(tcx.mk_ty_param_from_def(param))\n+                    tcx.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()\n                 }\n+                GenericParamDefKind::Type(_) => tcx.mk_ty_param_from_def(param).into(),\n             }\n         })\n     }\n@@ -203,7 +200,7 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n                        def_id: DefId,\n                        mut mk_kind: F)\n                        -> &'tcx Substs<'tcx>\n-    where F: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> UnpackedKind<'tcx>\n+    where F: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> Kind<'tcx>\n     {\n         let defs = tcx.generics_of(def_id);\n         let mut substs = Vec::with_capacity(defs.count());\n@@ -216,7 +213,7 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n                         def_id: DefId,\n                         mut mk_kind: F)\n                         -> &'tcx Substs<'tcx>\n-    where F: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> UnpackedKind<'tcx>\n+    where F: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> Kind<'tcx>\n     {\n         let defs = tcx.generics_of(def_id);\n         let mut result = Vec::with_capacity(defs.count());\n@@ -229,7 +226,7 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n                              tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                              defs: &ty::Generics,\n                              mk_kind: &mut F)\n-    where F: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> UnpackedKind<'tcx>\n+    where F: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> Kind<'tcx>\n     {\n \n         if let Some(def_id) = defs.parent {\n@@ -242,12 +239,12 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n     fn fill_single<F>(substs: &mut Vec<Kind<'tcx>>,\n                            defs: &ty::Generics,\n                            mk_kind: &mut F)\n-    where F: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> UnpackedKind<'tcx>\n+    where F: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> Kind<'tcx>\n     {\n         for param in &defs.params {\n             let kind = mk_kind(param, substs);\n             assert_eq!(param.index as usize, substs.len());\n-            substs.push(kind.pack());\n+            substs.push(kind);\n         }\n     }\n "}, {"sha": "d5532f8f8355a3167ea79d8c40cb5db9a6f37255", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=e9c28b2564c26767b6cab2f95e851389b4c1b014", "patch": "@@ -576,7 +576,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn empty_substs_for_def_id(self, item_def_id: DefId) -> &'tcx Substs<'tcx> {\n         Substs::for_item(self, item_def_id, |param, _| {\n             match param.kind {\n-                GenericParamDefKind::Lifetime => UnpackedKind::Lifetime(self.types.re_erased),\n+                GenericParamDefKind::Lifetime => self.types.re_erased.into(),\n                 GenericParamDefKind::Type(_) => {\n                     bug!(\"empty_substs_for_def_id: {:?} has type parameters\", item_def_id)\n                 }"}, {"sha": "bff8f2246ab3f31a8395fd997c7e29cdad164b0e", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=e9c28b2564c26767b6cab2f95e851389b4c1b014", "patch": "@@ -196,7 +196,7 @@ use rustc::hir::def_id::DefId;\n use rustc::middle::const_val::ConstVal;\n use rustc::mir::interpret::{AllocId, ConstValue};\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n-use rustc::ty::subst::{Substs, Kind, UnpackedKind};\n+use rustc::ty::subst::{Substs, Kind};\n use rustc::ty::{self, TypeFoldable, Ty, TyCtxt, GenericParamDefKind};\n use rustc::ty::adjustment::CustomCoerceUnsized;\n use rustc::session::config;\n@@ -1114,11 +1114,9 @@ fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n                     let substs = Substs::for_item(tcx, method.def_id, |param, _| {\n                         match param.kind {\n-                            GenericParamDefKind::Lifetime => {\n-                                UnpackedKind::Lifetime(tcx.types.re_erased)\n-                            }\n+                            GenericParamDefKind::Lifetime => tcx.types.re_erased.into(),\n                             GenericParamDefKind::Type(_) => {\n-                                UnpackedKind::Type(trait_ref.substs.type_for_def(param))\n+                                trait_ref.substs.type_for_def(param).into()\n                             }\n                         }\n                     });"}, {"sha": "c79298d8dd2cfa8a2dcbaf2432b33f32ab5fd53d", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=e9c28b2564c26767b6cab2f95e851389b4c1b014", "patch": "@@ -13,7 +13,7 @@ use rustc::hir::def_id::DefId;\n use rustc::infer;\n use rustc::mir::*;\n use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind};\n-use rustc::ty::subst::{Kind, UnpackedKind, Subst, Substs};\n+use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::ty::maps::Providers;\n \n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n@@ -429,8 +429,8 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n \n         let substs = Substs::for_item(tcx, self.def_id, |param, _| {\n             match param.kind {\n-                GenericParamDefKind::Lifetime => UnpackedKind::Lifetime(tcx.types.re_erased),\n-                GenericParamDefKind::Type(_) => UnpackedKind::Type(ty),\n+                GenericParamDefKind::Lifetime => tcx.types.re_erased.into(),\n+                GenericParamDefKind::Type(_) => ty.into(),\n             }\n         });\n "}, {"sha": "dc7c8849f914e5e8f96636151c34a5ad8e660ec3", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=e9c28b2564c26767b6cab2f95e851389b4c1b014", "patch": "@@ -269,31 +269,30 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => {\n                     let i = param.index as usize - own_self;\n-                    let lt = if let Some(lifetime) = parameters.lifetimes.get(i) {\n-                        self.ast_region_to_region(lifetime, Some(param))\n+                    if let Some(lifetime) = parameters.lifetimes.get(i) {\n+                        self.ast_region_to_region(lifetime, Some(param)).into()\n                     } else {\n-                        tcx.types.re_static\n-                    };\n-                    UnpackedKind::Lifetime(lt)\n+                        tcx.types.re_static.into()\n+                    }\n                 }\n                 GenericParamDefKind::Type(ty) => {\n                     let i = param.index as usize;\n \n                     // Handle Self first, so we can adjust the index to match the AST.\n                     if let (0, Some(ty)) = (i, self_ty) {\n-                        return UnpackedKind::Type(ty);\n+                        return ty.into();\n                     }\n \n                     let i = i - (lt_accepted + own_self);\n-                    let ty = if i < ty_provided {\n+                    if i < ty_provided {\n                         // A provided type parameter.\n-                        self.ast_ty_to_ty(&parameters.types[i])\n+                        self.ast_ty_to_ty(&parameters.types[i]).into()\n                     } else if infer_types {\n                         // No type parameters were provided, we can infer all.\n                         if !default_needs_object_self(param) {\n-                            self.ty_infer_for_def(param, span)\n+                            self.ty_infer_for_def(param, span).into()\n                         } else {\n-                            self.ty_infer(span)\n+                            self.ty_infer(span).into()\n                         }\n                     } else if ty.has_default {\n                         // No type parameter provided, but a default exists.\n@@ -314,20 +313,19 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                                                 type parameters must be specified on object \\\n                                                 types\"))\n                                 .emit();\n-                            tcx.types.err\n+                            tcx.types.err.into()\n                         } else {\n                             // This is a default type parameter.\n                             self.normalize_ty(\n                                 span,\n                                 tcx.at(span).type_of(param.def_id)\n                                     .subst_spanned(tcx, substs, Some(span))\n-                            )\n+                            ).into()\n                         }\n                     } else {\n                         // We've already errored above about the mismatch.\n-                        tcx.types.err\n-                    };\n-                    UnpackedKind::Type(ty)\n+                        tcx.types.err.into()\n+                    }\n                 }\n             }\n         });\n@@ -1162,12 +1160,10 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             Substs::fill_item(&mut substs, tcx, parent_generics, &mut |param, _| {\n                 match param.kind {\n                     GenericParamDefKind::Lifetime => {\n-                        UnpackedKind::Lifetime(\n-                            tcx.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())))\n-                    }\n-                    GenericParamDefKind::Type(_) => {\n-                        UnpackedKind::Type(tcx.mk_ty_param_from_def(param))\n+                        tcx.mk_region(\n+                            ty::ReEarlyBound(param.to_early_bound_region_data())).into()\n                     }\n+                    GenericParamDefKind::Type(_) => tcx.mk_ty_param_from_def(param).into(),\n                 }\n             });\n "}, {"sha": "c2ec6475b9c6596bb97cd9227c90f9f8ff89d254", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=e9c28b2564c26767b6cab2f95e851389b4c1b014", "patch": "@@ -19,7 +19,7 @@ use rustc::infer::LateBoundRegionConversionTime;\n use rustc::infer::type_variable::TypeVariableOrigin;\n use rustc::traits::error_reporting::ArgKind;\n use rustc::ty::{self, ToPolyTraitRef, Ty, GenericParamDefKind};\n-use rustc::ty::subst::{UnpackedKind, Substs};\n+use rustc::ty::subst::Substs;\n use rustc::ty::TypeFoldable;\n use std::cmp;\n use std::iter;\n@@ -110,8 +110,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     span_bug!(expr.span, \"closure has region param\")\n                 }\n                 GenericParamDefKind::Type(_) => {\n-                    UnpackedKind::Type(self.infcx\n-                        .next_ty_var(TypeVariableOrigin::ClosureSynthetic(expr.span)))\n+                    self.infcx\n+                        .next_ty_var(TypeVariableOrigin::ClosureSynthetic(expr.span)).into()\n                 }\n             }\n         });"}, {"sha": "aa3a166d0656fd71136c0cafe013bb5a7a845da3", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=e9c28b2564c26767b6cab2f95e851389b4c1b014", "patch": "@@ -16,7 +16,7 @@ use hir::def_id::DefId;\n use rustc::ty::subst::Substs;\n use rustc::traits;\n use rustc::ty::{self, Ty, GenericParamDefKind};\n-use rustc::ty::subst::{UnpackedKind, Subst};\n+use rustc::ty::subst::Subst;\n use rustc::ty::adjustment::{Adjustment, Adjust, OverloadedDeref};\n use rustc::ty::adjustment::{AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::fold::TypeFoldable;\n@@ -320,22 +320,22 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         Substs::for_item(self.tcx, pick.item.def_id, |param, _| {\n             let i = param.index as usize;\n             if i < parent_substs.len() {\n-                parent_substs[i].unpack()\n+                parent_substs[i]\n             } else {\n                 match param.kind {\n                     GenericParamDefKind::Lifetime => {\n                         if let Some(lifetime) = provided.as_ref().and_then(|p| {\n                             p.lifetimes.get(i - parent_substs.len())\n                         }) {\n-                            return UnpackedKind::Lifetime(\n-                                AstConv::ast_region_to_region(self.fcx, lifetime, Some(param)));\n+                            return AstConv::ast_region_to_region(\n+                                self.fcx, lifetime, Some(param)).into();\n                         }\n                     }\n                     GenericParamDefKind::Type(_) => {\n                         if let Some(ast_ty) = provided.as_ref().and_then(|p| {\n                             p.types.get(i - parent_substs.len() - own_counts.lifetimes)\n                         }) {\n-                            return UnpackedKind::Type(self.to_ty(ast_ty));\n+                            return self.to_ty(ast_ty).into();\n                         }\n                     }\n                 }"}, {"sha": "15a8efd5885d77755c2ca725f822e64c5471b913", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=e9c28b2564c26767b6cab2f95e851389b4c1b014", "patch": "@@ -20,7 +20,7 @@ use rustc::ty::subst::Substs;\n use rustc::traits;\n use rustc::ty::{self, Ty, ToPredicate, ToPolyTraitRef, TraitRef, TypeFoldable};\n use rustc::ty::GenericParamDefKind;\n-use rustc::ty::subst::{UnpackedKind, Subst};\n+use rustc::ty::subst::Subst;\n use rustc::infer::{self, InferOk};\n \n use syntax::ast;\n@@ -259,9 +259,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 GenericParamDefKind::Lifetime => {}\n                 GenericParamDefKind::Type(_) => {\n                     if param.index == 0 {\n-                        return UnpackedKind::Type(self_ty);\n+                        return self_ty.into();\n                     } else if let Some(ref input_types) = opt_input_types {\n-                        return UnpackedKind::Type(input_types[param.index as usize - 1]);\n+                        return input_types[param.index as usize - 1].into();\n                     }\n                 }\n             }"}, {"sha": "6b860dbe8febbfee9a756afe14eb848d3f613fb0", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=e9c28b2564c26767b6cab2f95e851389b4c1b014", "patch": "@@ -17,7 +17,7 @@ use check::FnCtxt;\n use hir::def_id::DefId;\n use hir::def::Def;\n use namespace::Namespace;\n-use rustc::ty::subst::{UnpackedKind, Subst, Substs};\n+use rustc::ty::subst::{Subst, Substs};\n use rustc::traits::{self, ObligationCause};\n use rustc::ty::{self, Ty, ToPolyTraitRef, ToPredicate, TraitRef, TypeFoldable};\n use rustc::ty::GenericParamDefKind;\n@@ -1391,13 +1391,13 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             let substs = Substs::for_item(self.tcx, method, |param, _| {\n                 let i = param.index as usize;\n                 if i < substs.len() {\n-                    substs[i].unpack()\n+                    substs[i]\n                 } else {\n                     match param.kind {\n                         GenericParamDefKind::Lifetime => {\n                             // In general, during probe we erase regions. See\n                             // `impl_self_ty()` for an explanation.\n-                            UnpackedKind::Lifetime(self.tcx.types.re_erased)\n+                            self.tcx.types.re_erased.into()\n                         }\n                         GenericParamDefKind::Type(_) => self.var_for_def(self.span, param),\n                     }\n@@ -1415,13 +1415,10 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n     fn fresh_item_substs(&self, def_id: DefId) -> &'tcx Substs<'tcx> {\n         Substs::for_item(self.tcx, def_id, |param, _| {\n             match param.kind {\n-                GenericParamDefKind::Lifetime => {\n-                    UnpackedKind::Lifetime(self.tcx.types.re_erased)\n-                }\n+                GenericParamDefKind::Lifetime => self.tcx.types.re_erased.into(),\n                 GenericParamDefKind::Type(_) => {\n-                    UnpackedKind::Type(self.next_ty_var(\n-                        TypeVariableOrigin::SubstitutionPlaceholder(\n-                        self.tcx.def_span(def_id))))\n+                    self.next_ty_var(TypeVariableOrigin::SubstitutionPlaceholder(\n+                        self.tcx.def_span(def_id))).into()\n                 }\n             }\n         })"}, {"sha": "2e9f31dd15e1ea17bf5e6c37040b8a3ea8b5e7b4", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e9c28b2564c26767b6cab2f95e851389b4c1b014", "patch": "@@ -1746,11 +1746,10 @@ impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n     fn ty_infer_for_def(&self,\n                         ty_param_def: &ty::GenericParamDef,\n                         span: Span) -> Ty<'tcx> {\n-        if let UnpackedKind::Type(ty) = self.var_for_def(span, ty_param_def) {\n-            ty\n-        } else {\n-            unreachable!()\n+        if let UnpackedKind::Type(ty) = self.var_for_def(span, ty_param_def).unpack() {\n+            return ty;\n         }\n+        unreachable!()\n     }\n \n     fn projected_ty_from_poly_trait_ref(&self,\n@@ -4769,7 +4768,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 if let GenericParamDefKind::Type(_) = param.kind {\n                     // Handle Self first, so we can adjust the index to match the AST.\n                     if has_self && i == 0 {\n-                        return opt_self_ty.map(|ty| UnpackedKind::Type(ty)).unwrap_or_else(|| {\n+                        return opt_self_ty.map(|ty| Kind::from(ty)).unwrap_or_else(|| {\n                             self.var_for_def(span, param)\n                         });\n                     }\n@@ -4787,12 +4786,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         s.parameters.as_ref().map_or(&[][..], |p| &p.lifetimes[..])\n                     });\n \n-                    let lt = if let Some(lifetime) = lifetimes.get(i) {\n-                        AstConv::ast_region_to_region(self, lifetime, Some(param))\n+                    if let Some(lifetime) = lifetimes.get(i) {\n+                        AstConv::ast_region_to_region(self, lifetime, Some(param)).into()\n                     } else {\n-                        self.re_infer(span, Some(param)).unwrap()\n-                    };\n-                    UnpackedKind::Lifetime(lt)\n+                        self.re_infer(span, Some(param)).unwrap().into()\n+                    }\n                 }\n                 GenericParamDefKind::Type(_) => {\n                     let (types, infer_types) = segment.map_or((&[][..], true), |(s, _)| {\n@@ -4811,14 +4809,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                     if let Some(ast_ty) = types.get(i) {\n                         // A provided type parameter.\n-                        UnpackedKind::Type(self.to_ty(ast_ty))\n+                        self.to_ty(ast_ty).into()\n                     } else if !infer_types && has_default {\n                         // No type parameter provided, but a default exists.\n                         let default = self.tcx.type_of(param.def_id);\n-                        UnpackedKind::Type(self.normalize_ty(\n+                        self.normalize_ty(\n                             span,\n                             default.subst_spanned(self.tcx, substs, Some(span))\n-                        ))\n+                        ).into()\n                     } else {\n                         // No type parameters were provided, we can infer all.\n                         // This can also be reached in some error cases:"}, {"sha": "34978c4e31bef7307142ebd7f0c0afa06f6c208c", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=e9c28b2564c26767b6cab2f95e851389b4c1b014", "patch": "@@ -14,7 +14,7 @@ use constrained_type_params::{identify_constrained_type_params, Parameter};\n use hir::def_id::DefId;\n use rustc::traits::{self, ObligationCauseCode};\n use rustc::ty::{self, Lift, Ty, TyCtxt, GenericParamDefKind};\n-use rustc::ty::subst::{UnpackedKind, Substs};\n+use rustc::ty::subst::Substs;\n use rustc::ty::util::ExplicitSelf;\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n use rustc::middle::lang_items;\n@@ -409,8 +409,7 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n         match param.kind {\n             GenericParamDefKind::Lifetime => {\n                 // All regions are identity.\n-                UnpackedKind::Lifetime(\n-                    fcx.tcx.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())))\n+                fcx.tcx.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()\n             }\n             GenericParamDefKind::Type(_) => {\n                 // If the param has a default,\n@@ -419,11 +418,11 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n                     // and it's not a dependent default\n                     if !default_ty.needs_subst() {\n                         // then substitute with the default.\n-                        return UnpackedKind::Type(default_ty);\n+                        return default_ty.into();\n                     }\n                 }\n                 // Mark unwanted params as err.\n-                UnpackedKind::Type(fcx.tcx.types.err)\n+                fcx.tcx.types.err.into()\n             }\n         }\n     });"}, {"sha": "8eb050783595464532dd5a0a9163cda925b6712a", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c28b2564c26767b6cab2f95e851389b4c1b014/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e9c28b2564c26767b6cab2f95e851389b4c1b014", "patch": "@@ -30,7 +30,7 @@ use constrained_type_params as ctp;\n use middle::lang_items::SizedTraitLangItem;\n use middle::resolve_lifetime as rl;\n use rustc::mir::mono::Linkage;\n-use rustc::ty::subst::{UnpackedKind, Substs};\n+use rustc::ty::subst::Substs;\n use rustc::ty::GenericParamDefKind;\n use rustc::ty::{ToPredicate, ReprOptions};\n use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt};\n@@ -1101,11 +1101,9 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     match param.kind {\n                         GenericParamDefKind::Lifetime => {\n                             let region = param.to_early_bound_region_data();\n-                            UnpackedKind::Lifetime(tcx.mk_region(ty::ReEarlyBound(region)))\n-                        }\n-                        GenericParamDefKind::Type(_) => {\n-                            UnpackedKind::Type(tcx.mk_ty_param_from_def(param))\n+                            tcx.mk_region(ty::ReEarlyBound(region)).into()\n                         }\n+                        GenericParamDefKind::Type(_) => tcx.mk_ty_param_from_def(param).into(),\n                     }\n                 })\n             };"}]}