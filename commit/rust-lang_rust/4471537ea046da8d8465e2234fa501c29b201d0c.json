{"sha": "4471537ea046da8d8465e2234fa501c29b201d0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NzE1MzdlYTA0NmRhOGQ4NDY1ZTIyMzRmYTUwMWMyOWIyMDFkMGM=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2018-08-02T20:58:53Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2018-08-02T20:58:53Z"}, "message": "make TinyList more readable and optimize remove(_)\n\nalso add benchmarks\n\nBefore:\n\n```\ntest tiny_list::test::bench_insert_empty             ... bench:           1 ns/iter (+/- 0)\ntest tiny_list::test::bench_insert_one               ... bench:          16 ns/iter (+/- 0)\ntest tiny_list::test::bench_remove_empty             ... bench:           2 ns/iter (+/- 0)\ntest tiny_list::test::bench_remove_one               ... bench:           6 ns/iter (+/- 0)\ntest tiny_list::test::bench_remove_unknown           ... bench:           4 ns/iter (+/- 0)\n```\n\nAfter:\n\n```\ntest tiny_list::test::bench_insert_empty             ... bench:           1 ns/iter (+/- 0)\ntest tiny_list::test::bench_insert_one               ... bench:          16 ns/iter (+/- 0)\ntest tiny_list::test::bench_remove_empty             ... bench:           0 ns/iter (+/- 0)\ntest tiny_list::test::bench_remove_one               ... bench:           3 ns/iter (+/- 0)\ntest tiny_list::test::bench_remove_unknown           ... bench:           2 ns/iter (+/- 0)\n```", "tree": {"sha": "413d633e1c0dbbfeeef1e86901c8874475034239", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/413d633e1c0dbbfeeef1e86901c8874475034239"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4471537ea046da8d8465e2234fa501c29b201d0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4471537ea046da8d8465e2234fa501c29b201d0c", "html_url": "https://github.com/rust-lang/rust/commit/4471537ea046da8d8465e2234fa501c29b201d0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4471537ea046da8d8465e2234fa501c29b201d0c/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03da14ba8cd22acbcfe1cca617f6c274999e5e9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/03da14ba8cd22acbcfe1cca617f6c274999e5e9e", "html_url": "https://github.com/rust-lang/rust/commit/03da14ba8cd22acbcfe1cca617f6c274999e5e9e"}], "stats": {"total": 81, "additions": 49, "deletions": 32}, "files": [{"sha": "c12fc22baf02021db2514a854d0f79e731b1b3cd", "filename": "src/librustc_data_structures/tiny_list.rs", "status": "modified", "additions": 49, "deletions": 32, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/4471537ea046da8d8465e2234fa501c29b201d0c/src%2Flibrustc_data_structures%2Ftiny_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4471537ea046da8d8465e2234fa501c29b201d0c/src%2Flibrustc_data_structures%2Ftiny_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftiny_list.rs?ref=4471537ea046da8d8465e2234fa501c29b201d0c", "patch": "@@ -50,44 +50,22 @@ impl<T: PartialEq> TinyList<T> {\n \n     #[inline]\n     pub fn insert(&mut self, data: T) {\n-        let current_head = mem::replace(&mut self.head, None);\n-\n-        if let Some(current_head) = current_head {\n-            let current_head = Box::new(current_head);\n-            self.head = Some(Element {\n-                data,\n-                next: Some(current_head)\n-            });\n-        } else {\n-            self.head = Some(Element {\n-                data,\n-                next: None,\n-            })\n-        }\n+        self.head = Some(Element {\n+            data,\n+            next: mem::replace(&mut self.head, None).map(Box::new),\n+        });\n     }\n \n     #[inline]\n     pub fn remove(&mut self, data: &T) -> bool {\n-        let remove_head = if let Some(ref mut head) = self.head {\n-            if head.data == *data {\n-                Some(mem::replace(&mut head.next, None))\n-            } else {\n-                None\n+        self.head = match self.head {\n+            Some(ref mut head) if head.data == *data => {\n+                mem::replace(&mut head.next, None).map(|x| *x)\n             }\n-        } else {\n-            return false\n+            Some(ref mut head) => return head.remove_next(data),\n+            None => return false,\n         };\n-\n-        if let Some(remove_head) = remove_head {\n-            if let Some(next) = remove_head {\n-                self.head = Some(*next);\n-            } else {\n-                self.head = None;\n-            }\n-            return true\n-        }\n-\n-        self.head.as_mut().unwrap().remove_next(data)\n+        true\n     }\n \n     #[inline]\n@@ -156,6 +134,8 @@ impl<T: PartialEq> Element<T> {\n #[cfg(test)]\n mod test {\n     use super::*;\n+    extern crate test;\n+    use self::test::Bencher;\n \n     #[test]\n     fn test_contains_and_insert() {\n@@ -248,4 +228,41 @@ mod test {\n \n         assert_eq!(list.len(), 0);\n     }\n+\n+    #[bench]\n+    fn bench_insert_empty(b: &mut Bencher) {\n+        b.iter(|| {\n+            let mut list = TinyList::new();\n+            list.insert(1);\n+        })\n+    }\n+\n+    #[bench]\n+    fn bench_insert_one(b: &mut Bencher) {\n+        b.iter(|| {\n+            let mut list = TinyList::new_single(0);\n+            list.insert(1);\n+        })\n+    }\n+\n+    #[bench]\n+    fn bench_remove_empty(b: &mut Bencher) {\n+        b.iter(|| {\n+            TinyList::new().remove(&1)\n+        });\n+    }\n+\n+    #[bench]\n+    fn bench_remove_unknown(b: &mut Bencher) {\n+        b.iter(|| {\n+            TinyList::new_single(0).remove(&1)\n+        });\n+    }\n+\n+    #[bench]\n+    fn bench_remove_one(b: &mut Bencher) {\n+        b.iter(|| {\n+            TinyList::new_single(1).remove(&1)\n+        });\n+    }\n }"}]}