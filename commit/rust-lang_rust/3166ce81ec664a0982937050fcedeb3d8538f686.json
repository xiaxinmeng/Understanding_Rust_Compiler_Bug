{"sha": "3166ce81ec664a0982937050fcedeb3d8538f686", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNjZjZTgxZWM2NjRhMDk4MjkzNzA1MGZjZWRlYjNkODUzOGY2ODY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-05T23:57:14Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-05T23:57:14Z"}, "message": "Account for derefs when suggesting assoc function", "tree": {"sha": "8171f887f3a5d46b6e7aa657168b537cfe328f15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8171f887f3a5d46b6e7aa657168b537cfe328f15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3166ce81ec664a0982937050fcedeb3d8538f686", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3166ce81ec664a0982937050fcedeb3d8538f686", "html_url": "https://github.com/rust-lang/rust/commit/3166ce81ec664a0982937050fcedeb3d8538f686", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3166ce81ec664a0982937050fcedeb3d8538f686/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5497ba1690a1cbf65db8cd1a018bf7fc8b82a73a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5497ba1690a1cbf65db8cd1a018bf7fc8b82a73a", "html_url": "https://github.com/rust-lang/rust/commit/5497ba1690a1cbf65db8cd1a018bf7fc8b82a73a"}], "stats": {"total": 55, "additions": 52, "deletions": 3}, "files": [{"sha": "621124541d11def776a1f61fad07b8899075099c", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3166ce81ec664a0982937050fcedeb3d8538f686/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3166ce81ec664a0982937050fcedeb3d8538f686/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=3166ce81ec664a0982937050fcedeb3d8538f686", "patch": "@@ -461,17 +461,34 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     err.span_label(span, \"this is an associated function, not a method\");\n                 }\n                 if static_sources.len() == 1 {\n+                    let ty_str = if let Some(CandidateSource::ImplSource(\n+                        impl_did,\n+                    )) = static_sources.get(0) {\n+                        // When the \"method\" is resolved through dereferencing, we really want the\n+                        // original type that has the associated function for accurate suggestions.\n+                        // (#61411)\n+                        let ty = self.impl_self_ty(span, *impl_did).ty;\n+                        match (&ty.peel_refs().kind, &actual.peel_refs().kind) {\n+                            (ty::Adt(def, _), ty::Adt(def_actual, _)) if def == def_actual => {\n+                                // Use `actual` as it will have more `substs` filled in.\n+                                self.ty_to_value_string(actual.peel_refs())\n+                            }\n+                            _ => self.ty_to_value_string(ty.peel_refs()),\n+                        }\n+                    } else {\n+                        self.ty_to_value_string(actual.peel_refs())\n+                    };\n                     if let SelfSource::MethodCall(expr) = source {\n                         err.span_suggestion(\n                             expr.span.to(span),\n                             \"use associated function syntax instead\",\n-                            format!(\"{}::{}\", self.ty_to_value_string(actual), item_name),\n+                            format!(\"{}::{}\", ty_str, item_name),\n                             Applicability::MachineApplicable,\n                         );\n                     } else {\n                         err.help(&format!(\n                             \"try with `{}::{}`\",\n-                            self.ty_to_value_string(actual),\n+                            ty_str,\n                             item_name,\n                         ));\n                     }"}, {"sha": "b98bc572a397c6c87cbf8b6ed148beb919fe5b1f", "filename": "src/test/ui/issues/issue-3707.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3166ce81ec664a0982937050fcedeb3d8538f686/src%2Ftest%2Fui%2Fissues%2Fissue-3707.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3166ce81ec664a0982937050fcedeb3d8538f686/src%2Ftest%2Fui%2Fissues%2Fissue-3707.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3707.stderr?ref=3166ce81ec664a0982937050fcedeb3d8538f686", "patch": "@@ -5,7 +5,7 @@ LL |         self.boom();\n    |         -----^^^^\n    |         |    |\n    |         |    this is an associated function, not a method\n-   |         help: use associated function syntax instead: `&Obj::boom`\n+   |         help: use associated function syntax instead: `Obj::boom`\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: the candidate is defined in an impl for the type `Obj`"}, {"sha": "5480adb31015a360e0b26cd35b8434a1105360f5", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-with-turbofish-through-deref.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3166ce81ec664a0982937050fcedeb3d8538f686/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish-through-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3166ce81ec664a0982937050fcedeb3d8538f686/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish-through-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish-through-deref.rs?ref=3166ce81ec664a0982937050fcedeb3d8538f686", "patch": "@@ -0,0 +1,13 @@\n+use std::cell::RefCell;\n+\n+struct HasAssocMethod;\n+\n+impl HasAssocMethod {\n+    fn hello() {}\n+}\n+fn main() {\n+    let shared_state = RefCell::new(HasAssocMethod);\n+    let state = shared_state.borrow_mut();\n+    state.hello();\n+    //~^ ERROR no method named `hello` found for type `std::cell::RefMut<'_, HasAssocMethod>`\n+}"}, {"sha": "a1c0126146e73278a2f3942db88d02ef1a1cde84", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-with-turbofish-through-deref.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3166ce81ec664a0982937050fcedeb3d8538f686/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish-through-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3166ce81ec664a0982937050fcedeb3d8538f686/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish-through-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish-through-deref.stderr?ref=3166ce81ec664a0982937050fcedeb3d8538f686", "patch": "@@ -0,0 +1,19 @@\n+error[E0599]: no method named `hello` found for type `std::cell::RefMut<'_, HasAssocMethod>` in the current scope\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish-through-deref.rs:11:11\n+   |\n+LL |     state.hello();\n+   |     ------^^^^^\n+   |     |     |\n+   |     |     this is an associated function, not a method\n+   |     help: use associated function syntax instead: `HasAssocMethod::hello`\n+   |\n+   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n+note: the candidate is defined in an impl for the type `HasAssocMethod`\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish-through-deref.rs:6:5\n+   |\n+LL |     fn hello() {}\n+   |     ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}