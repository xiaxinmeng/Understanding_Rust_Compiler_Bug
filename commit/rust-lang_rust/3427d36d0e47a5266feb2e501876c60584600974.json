{"sha": "3427d36d0e47a5266feb2e501876c60584600974", "node_id": "C_kwDOAAsO6NoAKDM0MjdkMzZkMGU0N2E1MjY2ZmViMmU1MDE4NzZjNjA1ODQ2MDA5NzQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-09T14:30:17Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-09T14:30:17Z"}, "message": "fix: Fix search not searching bodies of attributed items", "tree": {"sha": "acec3b6efd8040b2257a45587d2e913c24dbdb42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acec3b6efd8040b2257a45587d2e913c24dbdb42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3427d36d0e47a5266feb2e501876c60584600974", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3427d36d0e47a5266feb2e501876c60584600974", "html_url": "https://github.com/rust-lang/rust/commit/3427d36d0e47a5266feb2e501876c60584600974", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3427d36d0e47a5266feb2e501876c60584600974/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e158dc72465d79084184b34054239544f5bab095", "url": "https://api.github.com/repos/rust-lang/rust/commits/e158dc72465d79084184b34054239544f5bab095", "html_url": "https://github.com/rust-lang/rust/commit/e158dc72465d79084184b34054239544f5bab095"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "39fc08ecdcfe3f7f7fed01c7b4ec1d99867a5928", "filename": "crates/hir-expand/src/lib.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3427d36d0e47a5266feb2e501876c60584600974/crates%2Fhir-expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427d36d0e47a5266feb2e501876c60584600974/crates%2Fhir-expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Flib.rs?ref=3427d36d0e47a5266feb2e501876c60584600974", "patch": "@@ -815,7 +815,7 @@ impl<'a> InFile<&'a SyntaxNode> {\n     /// Falls back to the macro call range if the node cannot be mapped up fully.\n     ///\n     /// For attributes and derives, this will point back to the attribute only.\n-    /// For the entire item `InFile::use original_file_range_full`.\n+    /// For the entire item use [`InFile::original_file_range_full`].\n     pub fn original_file_range(self, db: &dyn db::AstDatabase) -> FileRange {\n         match self.file_id.repr() {\n             HirFileIdRepr::FileId(file_id) => FileRange { file_id, range: self.value.text_range() },\n@@ -830,6 +830,21 @@ impl<'a> InFile<&'a SyntaxNode> {\n         }\n     }\n \n+    /// Falls back to the macro call range if the node cannot be mapped up fully.\n+    pub fn original_file_range_full(self, db: &dyn db::AstDatabase) -> FileRange {\n+        match self.file_id.repr() {\n+            HirFileIdRepr::FileId(file_id) => FileRange { file_id, range: self.value.text_range() },\n+            HirFileIdRepr::MacroFile(mac_file) => {\n+                if let Some(res) = self.original_file_range_opt(db) {\n+                    return res;\n+                }\n+                // Fall back to whole macro call.\n+                let loc = db.lookup_intern_macro_call(mac_file.macro_call_id);\n+                loc.kind.original_call_range_with_body(db)\n+            }\n+        }\n+    }\n+\n     /// Attempts to map the syntax node back up its macro calls.\n     pub fn original_file_range_opt(self, db: &dyn db::AstDatabase) -> Option<FileRange> {\n         match ascend_node_border_tokens(db, self) {"}, {"sha": "12f5e4e2a23a85c000d7537172a8819927dcd8bb", "filename": "crates/ide-db/src/search.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3427d36d0e47a5266feb2e501876c60584600974/crates%2Fide-db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427d36d0e47a5266feb2e501876c60584600974/crates%2Fide-db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsearch.rs?ref=3427d36d0e47a5266feb2e501876c60584600974", "patch": "@@ -244,14 +244,14 @@ impl Definition {\n                 DefWithBody::Variant(v) => v.source(db).map(|src| src.syntax().cloned()),\n             };\n             return match def {\n-                Some(def) => SearchScope::file_range(def.as_ref().original_file_range(db)),\n+                Some(def) => SearchScope::file_range(def.as_ref().original_file_range_full(db)),\n                 None => SearchScope::single_file(file_id),\n             };\n         }\n \n         if let Definition::SelfType(impl_) = self {\n             return match impl_.source(db).map(|src| src.syntax().cloned()) {\n-                Some(def) => SearchScope::file_range(def.as_ref().original_file_range(db)),\n+                Some(def) => SearchScope::file_range(def.as_ref().original_file_range_full(db)),\n                 None => SearchScope::single_file(file_id),\n             };\n         }\n@@ -268,7 +268,7 @@ impl Definition {\n                 hir::GenericDef::Const(it) => it.source(db).map(|src| src.syntax().cloned()),\n             };\n             return match def {\n-                Some(def) => SearchScope::file_range(def.as_ref().original_file_range(db)),\n+                Some(def) => SearchScope::file_range(def.as_ref().original_file_range_full(db)),\n                 None => SearchScope::single_file(file_id),\n             };\n         }"}]}