{"sha": "2ef9a8ae0fed0a92b86b316f98f3467aef1e547c", "node_id": "C_kwDOAAsO6NoAKDJlZjlhOGFlMGZlZDBhOTJiODZiMzE2Zjk4ZjM0NjdhZWYxZTU0N2M", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-10-07T19:46:28Z"}, "committer": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-11-19T15:47:42Z"}, "message": "add coretests for `is_aligned`", "tree": {"sha": "2d5623780eca48ecdf7e65ba5b510a2caa3b5d0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d5623780eca48ecdf7e65ba5b510a2caa3b5d0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ef9a8ae0fed0a92b86b316f98f3467aef1e547c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ef9a8ae0fed0a92b86b316f98f3467aef1e547c", "html_url": "https://github.com/rust-lang/rust/commit/2ef9a8ae0fed0a92b86b316f98f3467aef1e547c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ef9a8ae0fed0a92b86b316f98f3467aef1e547c/comments", "author": null, "committer": null, "parents": [{"sha": "6f6320a0a916b57dc37568d3ce5f5ed0e749ef61", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f6320a0a916b57dc37568d3ce5f5ed0e749ef61", "html_url": "https://github.com/rust-lang/rust/commit/6f6320a0a916b57dc37568d3ce5f5ed0e749ef61"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "66d28770b87f9fbdf177d660434a337410b9d65d", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ef9a8ae0fed0a92b86b316f98f3467aef1e547c/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ef9a8ae0fed0a92b86b316f98f3467aef1e547c/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=2ef9a8ae0fed0a92b86b316f98f3467aef1e547c", "patch": "@@ -19,6 +19,7 @@\n #![feature(const_nonnull_new)]\n #![feature(const_num_from_num)]\n #![feature(const_pointer_byte_offsets)]\n+#![feature(const_pointer_is_aligned)]\n #![feature(const_ptr_as_ref)]\n #![feature(const_ptr_read)]\n #![feature(const_ptr_write)]\n@@ -82,6 +83,7 @@\n #![feature(never_type)]\n #![feature(unwrap_infallible)]\n #![feature(pointer_byte_offsets)]\n+#![feature(pointer_is_aligned)]\n #![feature(portable_simd)]\n #![feature(ptr_metadata)]\n #![feature(once_cell)]"}, {"sha": "9f74b0c04107e8ab898d4094977fc72a4b39f19c", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2ef9a8ae0fed0a92b86b316f98f3467aef1e547c/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ef9a8ae0fed0a92b86b316f98f3467aef1e547c/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=2ef9a8ae0fed0a92b86b316f98f3467aef1e547c", "patch": "@@ -632,6 +632,54 @@ fn align_offset_issue_103361() {\n     let _ = (SIZE as *const HugeSize).align_offset(SIZE);\n }\n \n+#[test]\n+fn is_aligned() {\n+    let data = 42;\n+    let ptr: *const i32 = &data;\n+    assert!(ptr.is_aligned());\n+    assert!(ptr.is_aligned_to(1));\n+    assert!(ptr.is_aligned_to(2));\n+    assert!(ptr.is_aligned_to(4));\n+    assert!(ptr.wrapping_byte_add(2).is_aligned_to(1));\n+    assert!(ptr.wrapping_byte_add(2).is_aligned_to(2));\n+    assert!(!ptr.wrapping_byte_add(2).is_aligned_to(4));\n+\n+    // At runtime either `ptr` or `ptr+1` is aligned to 8.\n+    assert_ne!(ptr.is_aligned_to(8), ptr.wrapping_add(1).is_aligned_to(8));\n+}\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+fn is_aligned_const() {\n+    const {\n+        let data = 42;\n+        let ptr: *const i32 = &data;\n+        assert!(ptr.is_aligned());\n+        assert!(ptr.is_aligned_to(1));\n+        assert!(ptr.is_aligned_to(2));\n+        assert!(ptr.is_aligned_to(4));\n+        assert!(ptr.wrapping_byte_add(2).is_aligned_to(1));\n+        assert!(ptr.wrapping_byte_add(2).is_aligned_to(2));\n+        assert!(!ptr.wrapping_byte_add(2).is_aligned_to(4));\n+\n+        // At comptime neither `ptr` nor `ptr+1` is aligned to 8.\n+        assert!(!ptr.is_aligned_to(8));\n+        assert!(!ptr.wrapping_add(1).is_aligned_to(8));\n+    }\n+}\n+\n+#[test]\n+#[cfg(bootstrap)]\n+fn is_aligned_const() {\n+    const {\n+        let data = 42;\n+        let ptr: *const i32 = &data;\n+        // The bootstrap compiler always returns false for is_aligned.\n+        assert!(!ptr.is_aligned());\n+        assert!(!ptr.is_aligned_to(1));\n+    }\n+}\n+\n #[test]\n fn offset_from() {\n     let mut a = [0; 5];"}]}