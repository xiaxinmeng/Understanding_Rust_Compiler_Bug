{"sha": "9a90d03ad171856dc016c2dcc19292ec49a8a26f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhOTBkMDNhZDE3MTg1NmRjMDE2YzJkY2MxOTI5MmVjNDlhOGEyNmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-29T11:45:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-29T11:45:11Z"}, "message": "Auto merge of #62226 - Centril:rollup-rcy1alx, r=Centril\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #61199 (Revert \"Set test flag when rustdoc is running with --test option\" )\n - #61755 (Add `--pass $mode` to compiletest through `./x.py`)\n - #61818 (Issue #60709 test)\n - #62023 (publish_toolstate: don't use 'new' from inside the loop)\n - #62104 (Inform the query system about properties of queries at compile time)\n - #62163 (Avoid mem::uninitialized() in std::sys::unix)\n - #62204 (doc(libcore) Fix CS)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "e58a6ce9404cb99e10492811a292201555a3f1c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e58a6ce9404cb99e10492811a292201555a3f1c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a90d03ad171856dc016c2dcc19292ec49a8a26f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a90d03ad171856dc016c2dcc19292ec49a8a26f", "html_url": "https://github.com/rust-lang/rust/commit/9a90d03ad171856dc016c2dcc19292ec49a8a26f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a90d03ad171856dc016c2dcc19292ec49a8a26f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ec39423dd0d02f81866b675dd9299972e1b9af5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec39423dd0d02f81866b675dd9299972e1b9af5", "html_url": "https://github.com/rust-lang/rust/commit/8ec39423dd0d02f81866b675dd9299972e1b9af5"}, {"sha": "38801ce5d0c1d85e79749718ababb32f2f53f915", "url": "https://api.github.com/repos/rust-lang/rust/commits/38801ce5d0c1d85e79749718ababb32f2f53f915", "html_url": "https://github.com/rust-lang/rust/commit/38801ce5d0c1d85e79749718ababb32f2f53f915"}], "stats": {"total": 616, "additions": 392, "deletions": 224}, "files": [{"sha": "cab7443bf3fe87cf9aa6f921a21de25501b592ac", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -598,6 +598,7 @@ fn test_with_no_doc_stage0() {\n         bless: false,\n         compare_mode: None,\n         rustfix_coverage: false,\n+        pass: None,\n     };\n \n     let build = Build::new(config);\n@@ -640,6 +641,7 @@ fn test_exclude() {\n         bless: false,\n         compare_mode: None,\n         rustfix_coverage: false,\n+        pass: None,\n     };\n \n     let build = Build::new(config);"}, {"sha": "179accda0c8b249034899efc1171e1aa255a9e4a", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -58,6 +58,7 @@ pub enum Subcommand {\n         /// Whether to automatically update stderr/stdout files\n         bless: bool,\n         compare_mode: Option<String>,\n+        pass: Option<String>,\n         test_args: Vec<String>,\n         rustc_args: Vec<String>,\n         fail_fast: bool,\n@@ -199,6 +200,12 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\"\n                     \"mode describing what file the actual ui output will be compared to\",\n                     \"COMPARE MODE\",\n                 );\n+                opts.optopt(\n+                    \"\",\n+                    \"pass\",\n+                    \"force {check,build,run}-pass tests to this mode.\",\n+                    \"check | build | run\"\n+                );\n                 opts.optflag(\n                     \"\",\n                     \"rustfix-coverage\",\n@@ -401,6 +408,7 @@ Arguments:\n                 paths,\n                 bless: matches.opt_present(\"bless\"),\n                 compare_mode: matches.opt_str(\"compare-mode\"),\n+                pass: matches.opt_str(\"pass\"),\n                 test_args: matches.opt_strs(\"test-args\"),\n                 rustc_args: matches.opt_strs(\"rustc-args\"),\n                 fail_fast: !matches.opt_present(\"no-fail-fast\"),\n@@ -524,6 +532,15 @@ impl Subcommand {\n             _ => None,\n         }\n     }\n+\n+    pub fn pass(&self) -> Option<&str> {\n+        match *self {\n+            Subcommand::Test {\n+                ref pass, ..\n+            } => pass.as_ref().map(|s| &s[..]),\n+            _ => None,\n+        }\n+    }\n }\n \n fn split(s: &[String]) -> Vec<String> {"}, {"sha": "1d54ca16a315bd22194f145c861672c6c5ba7200", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -1065,6 +1065,11 @@ impl Step for Compiletest {\n             }\n         });\n \n+        if let Some(ref pass) = builder.config.cmd.pass() {\n+            cmd.arg(\"--pass\");\n+            cmd.arg(pass);\n+        }\n+\n         if let Some(ref nodejs) = builder.config.nodejs {\n             cmd.arg(\"--nodejs\").arg(nodejs);\n         }"}, {"sha": "1865160bc3cf428626241165fbf37ef080aa940c", "filename": "src/libcore/iter/traits/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -196,7 +196,7 @@ pub trait FromIterator<A>: Sized {\n /// ```rust\n /// fn collect_as_strings<T>(collection: T) -> Vec<String>\n ///     where T: IntoIterator,\n-///           T::Item : std::fmt::Debug,\n+///           T::Item: std::fmt::Debug,\n /// {\n ///     collection\n ///         .into_iter()"}, {"sha": "d9757d78dcebbf34886c9c6b8915e9faf0e9b9ef", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -73,9 +73,9 @@ impl<T: ?Sized> !Send for *mut T { }\n /// impl Foo for Impl { }\n /// impl Bar for Impl { }\n ///\n-/// let x: &Foo = &Impl;    // OK\n-/// // let y: &Bar = &Impl; // error: the trait `Bar` cannot\n-///                         // be made into an object\n+/// let x: &dyn Foo = &Impl;    // OK\n+/// // let y: &dyn Bar = &Impl; // error: the trait `Bar` cannot\n+///                             // be made into an object\n /// ```\n ///\n /// [trait object]: ../../book/ch17-02-trait-objects.html"}, {"sha": "e110e93a95412b73a0b72215a8b1345b86e6dc56", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -510,6 +510,8 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n /// A simple example:\n ///\n /// ```\n+/// #![feature(mem_take)]\n+///\n /// use std::mem;\n ///\n /// let mut v: Vec<i32> = vec![1, 2];\n@@ -540,7 +542,8 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n /// `self`, allowing it to be returned:\n ///\n /// ```\n-/// # #![allow(dead_code)]\n+/// #![feature(mem_take)]\n+///\n /// use std::mem;\n ///\n /// # struct Buffer<T> { buf: Vec<T> }"}, {"sha": "75c329a7d6c10ad4a60d795a1fe58e48f6a69e02", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -53,7 +53,7 @@\n /// let value: i32 = 123;\n ///\n /// // let the compiler make a trait object\n-/// let object: &Foo = &value;\n+/// let object: &dyn Foo = &value;\n ///\n /// // look at the raw representation\n /// let raw_object: raw::TraitObject = unsafe { mem::transmute(object) };\n@@ -65,7 +65,7 @@\n ///\n /// // construct a new object, pointing to a different `i32`, being\n /// // careful to use the `i32` vtable from `object`\n-/// let synthesized: &Foo = unsafe {\n+/// let synthesized: &dyn Foo = unsafe {\n ///      mem::transmute(raw::TraitObject {\n ///          data: &other_value as *const _ as *mut (),\n ///          vtable: raw_object.vtable,"}, {"sha": "3d5e7dd0af1213b009b6f61d88f573916cfc40ef", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -142,9 +142,6 @@ macro_rules! define_dep_nodes {\n                 }\n             }\n \n-            // FIXME: Make `is_anon`, `is_eval_always` and `has_params` properties\n-            // of queries\n-            #[inline(always)]\n             pub fn is_anon(&self) -> bool {\n                 match *self {\n                     $(\n@@ -163,7 +160,6 @@ macro_rules! define_dep_nodes {\n             }\n \n             #[allow(unreachable_code)]\n-            #[inline(always)]\n             pub fn has_params(&self) -> bool {\n                 match *self {\n                     $("}, {"sha": "6ad4ecb3e980c71ca6bf596bd0d1107115cc8183", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -1,5 +1,5 @@\n use crate::dep_graph::SerializedDepNodeIndex;\n-use crate::dep_graph::DepNode;\n+use crate::dep_graph::{DepKind, DepNode};\n use crate::hir::def_id::{CrateNum, DefId};\n use crate::ty::TyCtxt;\n use crate::ty::query::queries;\n@@ -28,13 +28,18 @@ pub trait QueryConfig<'tcx> {\n }\n \n pub(crate) trait QueryAccessors<'tcx>: QueryConfig<'tcx> {\n+    const ANON: bool;\n+    const EVAL_ALWAYS: bool;\n+\n     fn query(key: Self::Key) -> Query<'tcx>;\n \n     // Don't use this method to access query results, instead use the methods on TyCtxt\n     fn query_cache<'a>(tcx: TyCtxt<'tcx>) -> &'a Lock<QueryCache<'tcx, Self>>;\n \n     fn to_dep_node(tcx: TyCtxt<'tcx>, key: &Self::Key) -> DepNode;\n \n+    fn dep_kind() -> DepKind;\n+\n     // Don't use this method to compute query results, instead use the methods on TyCtxt\n     fn compute(tcx: TyCtxt<'tcx>, key: Self::Key) -> Self::Value;\n "}, {"sha": "e788628bc58e23e903828d82bd4fe81a0a8a120f", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -101,6 +101,6 @@ pub use self::on_disk_cache::OnDiskCache;\n rustc_query_append! { [define_queries!][ <'tcx>\n     Other {\n         /// Runs analysis passes on the crate.\n-        [] fn analysis: Analysis(CrateNum) -> Result<(), ErrorReported>,\n+        [eval_always] fn analysis: Analysis(CrateNum) -> Result<(), ErrorReported>,\n     },\n ]}"}, {"sha": "553c701c3aaa058e377bf5fd3af4f32bfa30e018", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 45, "deletions": 12, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -376,15 +376,13 @@ impl<'tcx> TyCtxt<'tcx> {\n             return self.force_query_with_job::<Q>(key, job, null_dep_node).0;\n         }\n \n-        let dep_node = Q::to_dep_node(self, &key);\n-\n-        if dep_node.kind.is_anon() {\n+        if Q::ANON {\n             profq_msg!(self, ProfileQueriesMsg::ProviderBegin);\n             self.sess.profiler(|p| p.start_query(Q::NAME));\n \n             let ((result, dep_node_index), diagnostics) = with_diagnostics(|diagnostics| {\n                 self.start_query(job.job.clone(), diagnostics, |tcx| {\n-                    tcx.dep_graph.with_anon_task(dep_node.kind, || {\n+                    tcx.dep_graph.with_anon_task(Q::dep_kind(), || {\n                         Q::compute(tcx.global_tcx(), key)\n                     })\n                 })\n@@ -405,7 +403,9 @@ impl<'tcx> TyCtxt<'tcx> {\n             return result;\n         }\n \n-        if !dep_node.kind.is_eval_always() {\n+        let dep_node = Q::to_dep_node(self, &key);\n+\n+        if !Q::EVAL_ALWAYS {\n             // The diagnostics for this query will be\n             // promoted to the current session during\n             // try_mark_green(), so we can ignore them here.\n@@ -546,7 +546,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         let ((result, dep_node_index), diagnostics) = with_diagnostics(|diagnostics| {\n             self.start_query(job.job.clone(), diagnostics, |tcx| {\n-                if dep_node.kind.is_eval_always() {\n+                if Q::EVAL_ALWAYS {\n                     tcx.dep_graph.with_eval_always_task(dep_node,\n                                                         tcx,\n                                                         key,\n@@ -569,8 +569,8 @@ impl<'tcx> TyCtxt<'tcx> {\n             self.dep_graph.mark_loaded_from_cache(dep_node_index, false);\n         }\n \n-        if dep_node.kind != crate::dep_graph::DepKind::Null {\n-            if unlikely!(!diagnostics.is_empty()) {\n+        if unlikely!(!diagnostics.is_empty()) {\n+            if dep_node.kind != crate::dep_graph::DepKind::Null {\n                 self.queries.on_disk_cache\n                     .store_diagnostics(dep_node_index, diagnostics);\n             }\n@@ -589,15 +589,16 @@ impl<'tcx> TyCtxt<'tcx> {\n     ///\n     /// Note: The optimization is only available during incr. comp.\n     pub(super) fn ensure_query<Q: QueryDescription<'tcx>>(self, key: Q::Key) -> () {\n-        let dep_node = Q::to_dep_node(self, &key);\n-\n-        if dep_node.kind.is_eval_always() {\n+        if Q::EVAL_ALWAYS {\n             let _ = self.get_query::<Q>(DUMMY_SP, key);\n             return;\n         }\n \n         // Ensuring an anonymous query makes no sense\n-        assert!(!dep_node.kind.is_anon());\n+        assert!(!Q::ANON);\n+\n+        let dep_node = Q::to_dep_node(self, &key);\n+\n         if self.dep_graph.try_mark_green_and_read(self, &dep_node).is_none() {\n             // A None return from `try_mark_green_and_read` means that this is either\n             // a new dep node or that the dep node has already been marked red.\n@@ -653,6 +654,30 @@ macro_rules! handle_cycle_error {\n     };\n }\n \n+macro_rules! is_anon {\n+    ([]) => {{\n+        false\n+    }};\n+    ([anon$(, $modifiers:ident)*]) => {{\n+        true\n+    }};\n+    ([$other:ident$(, $modifiers:ident)*]) => {\n+        is_anon!([$($modifiers),*])\n+    };\n+}\n+\n+macro_rules! is_eval_always {\n+    ([]) => {{\n+        false\n+    }};\n+    ([eval_always$(, $modifiers:ident)*]) => {{\n+        true\n+    }};\n+    ([$other:ident$(, $modifiers:ident)*]) => {\n+        is_eval_always!([$($modifiers),*])\n+    };\n+}\n+\n macro_rules! hash_result {\n     ([][$hcx:expr, $result:expr]) => {{\n         dep_graph::hash_result($hcx, &$result)\n@@ -933,6 +958,9 @@ macro_rules! define_queries_inner {\n         }\n \n         impl<$tcx> QueryAccessors<$tcx> for queries::$name<$tcx> {\n+            const ANON: bool = is_anon!([$($modifiers)*]);\n+            const EVAL_ALWAYS: bool = is_eval_always!([$($modifiers)*]);\n+\n             #[inline(always)]\n             fn query(key: Self::Key) -> Query<'tcx> {\n                 Query::$name(key)\n@@ -951,6 +979,11 @@ macro_rules! define_queries_inner {\n                 DepNode::new(tcx, $node(*key))\n             }\n \n+            #[inline(always)]\n+            fn dep_kind() -> dep_graph::DepKind {\n+                dep_graph::DepKind::$node\n+            }\n+\n             #[inline]\n             fn compute(tcx: TyCtxt<'tcx>, key: Self::Key) -> Self::Value {\n                 __query_compute::$name(move || {"}, {"sha": "2cf364b562766fb6e66bd066d4f42aa450c4b3e7", "filename": "src/librustc_macros/src/query.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fquery.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -423,20 +423,6 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n             if modifiers.no_hash {\n                 attributes.push(quote! { no_hash });\n             };\n-\n-            let mut attribute_stream = quote! {};\n-\n-            for e in attributes.into_iter().intersperse(quote! {,}) {\n-                attribute_stream.extend(e);\n-            }\n-\n-            // Add the query to the group\n-            group_stream.extend(quote! {\n-                [#attribute_stream] fn #name: #name(#arg) #result,\n-            });\n-\n-            let mut attributes = Vec::new();\n-\n             // Pass on the anon modifier\n             if modifiers.anon {\n                 attributes.push(quote! { anon });\n@@ -450,6 +436,12 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n             for e in attributes.into_iter().intersperse(quote! {,}) {\n                 attribute_stream.extend(e);\n             }\n+\n+            // Add the query to the group\n+            group_stream.extend(quote! {\n+                [#attribute_stream] fn #name: #name(#arg) #result,\n+            });\n+\n             // Create a dep node for the query\n             dep_node_def_stream.extend(quote! {\n                 [#attribute_stream] #name(#arg),"}, {"sha": "67ca7f407d80164735e2b323444b44db8323a0c4", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -351,9 +351,6 @@ impl Options {\n                             .unwrap_or_else(|| PathBuf::from(\"doc\"));\n         let mut cfgs = matches.opt_strs(\"cfg\");\n         cfgs.push(\"rustdoc\".to_string());\n-        if should_test {\n-            cfgs.push(\"test\".to_string());\n-        }\n \n         let extension_css = matches.opt_str(\"e\").map(|s| PathBuf::from(&s));\n "}, {"sha": "4201de794b70835406a05713122b0816d5e584ea", "filename": "src/libstd/sys/unix/condvar.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -40,15 +40,15 @@ impl Condvar {\n                   target_os = \"android\",\n                   target_os = \"hermit\")))]\n     pub unsafe fn init(&mut self) {\n-        use crate::mem;\n-        let mut attr: libc::pthread_condattr_t = mem::uninitialized();\n-        let r = libc::pthread_condattr_init(&mut attr);\n+        use crate::mem::MaybeUninit;\n+        let mut attr = MaybeUninit::<libc::pthread_condattr_t>::uninit();\n+        let r = libc::pthread_condattr_init(attr.as_mut_ptr());\n         assert_eq!(r, 0);\n-        let r = libc::pthread_condattr_setclock(&mut attr, libc::CLOCK_MONOTONIC);\n+        let r = libc::pthread_condattr_setclock(attr.as_mut_ptr(), libc::CLOCK_MONOTONIC);\n         assert_eq!(r, 0);\n-        let r = libc::pthread_cond_init(self.inner.get(), &attr);\n+        let r = libc::pthread_cond_init(self.inner.get(), attr.as_ptr());\n         assert_eq!(r, 0);\n-        let r = libc::pthread_condattr_destroy(&mut attr);\n+        let r = libc::pthread_condattr_destroy(attr.as_mut_ptr());\n         assert_eq!(r, 0);\n     }\n "}, {"sha": "41090caee8459fea5e08e6ad9054379d9da08da3", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -40,10 +40,9 @@ use libc::MSG_NOSIGNAL;\n               target_os = \"haiku\")))]\n const MSG_NOSIGNAL: libc::c_int = 0x0;\n \n-fn sun_path_offset() -> usize {\n+fn sun_path_offset(addr: &libc::sockaddr_un) -> usize {\n     // Work with an actual instance of the type since using a null pointer is UB\n-    let addr: libc::sockaddr_un = unsafe { mem::uninitialized() };\n-    let base = &addr as *const _ as usize;\n+    let base = addr as *const _ as usize;\n     let path = &addr.sun_path as *const _ as usize;\n     path - base\n }\n@@ -69,7 +68,7 @@ unsafe fn sockaddr_un(path: &Path) -> io::Result<(libc::sockaddr_un, libc::sockl\n     // null byte for pathname addresses is already there because we zeroed the\n     // struct\n \n-    let mut len = sun_path_offset() + bytes.len();\n+    let mut len = sun_path_offset(&addr) + bytes.len();\n     match bytes.get(0) {\n         Some(&0) | None => {}\n         Some(_) => len += 1,\n@@ -122,7 +121,7 @@ impl SocketAddr {\n         if len == 0 {\n             // When there is a datagram from unnamed unix socket\n             // linux returns zero bytes of address\n-            len = sun_path_offset() as libc::socklen_t;  // i.e., zero-length address\n+            len = sun_path_offset(&addr) as libc::socklen_t;  // i.e., zero-length address\n         } else if addr.sun_family != libc::AF_UNIX as libc::sa_family_t {\n             return Err(io::Error::new(io::ErrorKind::InvalidInput,\n                                       \"file descriptor did not correspond to a Unix socket\"));\n@@ -200,7 +199,7 @@ impl SocketAddr {\n     }\n \n     fn address<'a>(&'a self) -> AddressKind<'a> {\n-        let len = self.len as usize - sun_path_offset();\n+        let len = self.len as usize - sun_path_offset(&self.addr);\n         let path = unsafe { mem::transmute::<&[libc::c_char], &[u8]>(&self.addr.sun_path) };\n \n         // macOS seems to return a len of 16 and a zeroed sun_path for unnamed addresses"}, {"sha": "b43af8fdcaaa12ed392c2b3679464772a53104e6", "filename": "src/libstd/sys/unix/mutex.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -1,5 +1,5 @@\n use crate::cell::UnsafeCell;\n-use crate::mem;\n+use crate::mem::MaybeUninit;\n \n pub struct Mutex { inner: UnsafeCell<libc::pthread_mutex_t> }\n \n@@ -40,14 +40,14 @@ impl Mutex {\n         // references, we instead create the mutex with type\n         // PTHREAD_MUTEX_NORMAL which is guaranteed to deadlock if we try to\n         // re-lock it from the same thread, thus avoiding undefined behavior.\n-        let mut attr: libc::pthread_mutexattr_t = mem::uninitialized();\n-        let r = libc::pthread_mutexattr_init(&mut attr);\n+        let mut attr = MaybeUninit::<libc::pthread_mutexattr_t>::uninit();\n+        let r = libc::pthread_mutexattr_init(attr.as_mut_ptr());\n         debug_assert_eq!(r, 0);\n-        let r = libc::pthread_mutexattr_settype(&mut attr, libc::PTHREAD_MUTEX_NORMAL);\n+        let r = libc::pthread_mutexattr_settype(attr.as_mut_ptr(), libc::PTHREAD_MUTEX_NORMAL);\n         debug_assert_eq!(r, 0);\n-        let r = libc::pthread_mutex_init(self.inner.get(), &attr);\n+        let r = libc::pthread_mutex_init(self.inner.get(), attr.as_ptr());\n         debug_assert_eq!(r, 0);\n-        let r = libc::pthread_mutexattr_destroy(&mut attr);\n+        let r = libc::pthread_mutexattr_destroy(attr.as_mut_ptr());\n         debug_assert_eq!(r, 0);\n     }\n     #[inline]\n@@ -89,19 +89,19 @@ unsafe impl Sync for ReentrantMutex {}\n \n impl ReentrantMutex {\n     pub unsafe fn uninitialized() -> ReentrantMutex {\n-        ReentrantMutex { inner: mem::uninitialized() }\n+        ReentrantMutex { inner: UnsafeCell::new(libc::PTHREAD_MUTEX_INITIALIZER) }\n     }\n \n     pub unsafe fn init(&mut self) {\n-        let mut attr: libc::pthread_mutexattr_t = mem::uninitialized();\n-        let result = libc::pthread_mutexattr_init(&mut attr as *mut _);\n+        let mut attr = MaybeUninit::<libc::pthread_mutexattr_t>::uninit();\n+        let result = libc::pthread_mutexattr_init(attr.as_mut_ptr());\n         debug_assert_eq!(result, 0);\n-        let result = libc::pthread_mutexattr_settype(&mut attr as *mut _,\n+        let result = libc::pthread_mutexattr_settype(attr.as_mut_ptr(),\n                                                     libc::PTHREAD_MUTEX_RECURSIVE);\n         debug_assert_eq!(result, 0);\n-        let result = libc::pthread_mutex_init(self.inner.get(), &attr as *const _);\n+        let result = libc::pthread_mutex_init(self.inner.get(), attr.as_ptr());\n         debug_assert_eq!(result, 0);\n-        let result = libc::pthread_mutexattr_destroy(&mut attr as *mut _);\n+        let result = libc::pthread_mutexattr_destroy(attr.as_mut_ptr());\n         debug_assert_eq!(result, 0);\n     }\n "}, {"sha": "3ff4f194cd1a913451cfa89f4e1514de05b83c46", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -437,7 +437,7 @@ mod tests {\n \n     #[cfg(target_os = \"android\")]\n     unsafe fn sigemptyset(set: *mut libc::sigset_t) -> libc::c_int {\n-        libc::memset(set as *mut _, 0, mem::size_of::<libc::sigset_t>());\n+        set.write_bytes(0u8, 1);\n         return 0;\n     }\n \n@@ -466,11 +466,11 @@ mod tests {\n             // Test to make sure that a signal mask does not get inherited.\n             let mut cmd = Command::new(OsStr::new(\"cat\"));\n \n-            let mut set: libc::sigset_t = mem::uninitialized();\n-            let mut old_set: libc::sigset_t = mem::uninitialized();\n-            t!(cvt(sigemptyset(&mut set)));\n-            t!(cvt(sigaddset(&mut set, libc::SIGINT)));\n-            t!(cvt(libc::pthread_sigmask(libc::SIG_SETMASK, &set, &mut old_set)));\n+            let mut set = mem::MaybeUninit::<libc::sigset_t>::uninit();\n+            let mut old_set = mem::MaybeUninit::<libc::sigset_t>::uninit();\n+            t!(cvt(sigemptyset(set.as_mut_ptr())));\n+            t!(cvt(sigaddset(set.as_mut_ptr(), libc::SIGINT)));\n+            t!(cvt(libc::pthread_sigmask(libc::SIG_SETMASK, set.as_ptr(), old_set.as_mut_ptr())));\n \n             cmd.stdin(Stdio::MakePipe);\n             cmd.stdout(Stdio::MakePipe);\n@@ -479,7 +479,7 @@ mod tests {\n             let stdin_write = pipes.stdin.take().unwrap();\n             let stdout_read = pipes.stdout.take().unwrap();\n \n-            t!(cvt(libc::pthread_sigmask(libc::SIG_SETMASK, &old_set,\n+            t!(cvt(libc::pthread_sigmask(libc::SIG_SETMASK, old_set.as_ptr(),\n                                          ptr::null_mut())));\n \n             t!(cvt(libc::kill(cat.id() as libc::pid_t, libc::SIGINT)));"}, {"sha": "be38a1334ec32acfa25690b7f9c7f01e39f1e9c6", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -202,26 +202,24 @@ impl Command {\n         // emscripten has no signal support.\n         #[cfg(not(any(target_os = \"emscripten\")))]\n         {\n-            use crate::mem;\n+            use crate::mem::MaybeUninit;\n             // Reset signal handling so the child process starts in a\n             // standardized state. libstd ignores SIGPIPE, and signal-handling\n             // libraries often set a mask. Child processes inherit ignored\n             // signals and the signal mask from their parent, but most\n             // UNIX programs do not reset these things on their own, so we\n             // need to clean things up now to avoid confusing the program\n             // we're about to run.\n-            let mut set: libc::sigset_t = mem::uninitialized();\n+            let mut set = MaybeUninit::<libc::sigset_t>::uninit();\n             if cfg!(target_os = \"android\") {\n                 // Implementing sigemptyset allow us to support older Android\n                 // versions. See the comment about Android and sig* functions in\n                 // process_common.rs\n-                libc::memset(&mut set as *mut _ as *mut _,\n-                             0,\n-                             mem::size_of::<libc::sigset_t>());\n+                set.as_mut_ptr().write_bytes(0u8, 1);\n             } else {\n-                cvt(libc::sigemptyset(&mut set))?;\n+                cvt(libc::sigemptyset(set.as_mut_ptr()))?;\n             }\n-            cvt(libc::pthread_sigmask(libc::SIG_SETMASK, &set,\n+            cvt(libc::pthread_sigmask(libc::SIG_SETMASK, set.as_ptr(),\n                                          ptr::null_mut()))?;\n             let ret = sys::signal(libc::SIGPIPE, libc::SIG_DFL);\n             if ret == libc::SIG_ERR {\n@@ -273,7 +271,7 @@ impl Command {\n     fn posix_spawn(&mut self, stdio: &ChildPipes, envp: Option<&CStringArray>)\n         -> io::Result<Option<Process>>\n     {\n-        use crate::mem;\n+        use crate::mem::MaybeUninit;\n         use crate::sys;\n \n         if self.get_gid().is_some() ||\n@@ -315,63 +313,63 @@ impl Command {\n \n         let mut p = Process { pid: 0, status: None };\n \n-        struct PosixSpawnFileActions(libc::posix_spawn_file_actions_t);\n+        struct PosixSpawnFileActions(MaybeUninit<libc::posix_spawn_file_actions_t>);\n \n         impl Drop for PosixSpawnFileActions {\n             fn drop(&mut self) {\n                 unsafe {\n-                    libc::posix_spawn_file_actions_destroy(&mut self.0);\n+                    libc::posix_spawn_file_actions_destroy(self.0.as_mut_ptr());\n                 }\n             }\n         }\n \n-        struct PosixSpawnattr(libc::posix_spawnattr_t);\n+        struct PosixSpawnattr(MaybeUninit<libc::posix_spawnattr_t>);\n \n         impl Drop for PosixSpawnattr {\n             fn drop(&mut self) {\n                 unsafe {\n-                    libc::posix_spawnattr_destroy(&mut self.0);\n+                    libc::posix_spawnattr_destroy(self.0.as_mut_ptr());\n                 }\n             }\n         }\n \n         unsafe {\n-            let mut file_actions = PosixSpawnFileActions(mem::uninitialized());\n-            let mut attrs = PosixSpawnattr(mem::uninitialized());\n+            let mut file_actions = PosixSpawnFileActions(MaybeUninit::uninit());\n+            let mut attrs = PosixSpawnattr(MaybeUninit::uninit());\n \n-            libc::posix_spawnattr_init(&mut attrs.0);\n-            libc::posix_spawn_file_actions_init(&mut file_actions.0);\n+            libc::posix_spawnattr_init(attrs.0.as_mut_ptr());\n+            libc::posix_spawn_file_actions_init(file_actions.0.as_mut_ptr());\n \n             if let Some(fd) = stdio.stdin.fd() {\n-                cvt(libc::posix_spawn_file_actions_adddup2(&mut file_actions.0,\n+                cvt(libc::posix_spawn_file_actions_adddup2(file_actions.0.as_mut_ptr(),\n                                                            fd,\n                                                            libc::STDIN_FILENO))?;\n             }\n             if let Some(fd) = stdio.stdout.fd() {\n-                cvt(libc::posix_spawn_file_actions_adddup2(&mut file_actions.0,\n+                cvt(libc::posix_spawn_file_actions_adddup2(file_actions.0.as_mut_ptr(),\n                                                            fd,\n                                                            libc::STDOUT_FILENO))?;\n             }\n             if let Some(fd) = stdio.stderr.fd() {\n-                cvt(libc::posix_spawn_file_actions_adddup2(&mut file_actions.0,\n+                cvt(libc::posix_spawn_file_actions_adddup2(file_actions.0.as_mut_ptr(),\n                                                            fd,\n                                                            libc::STDERR_FILENO))?;\n             }\n             if let Some((f, cwd)) = addchdir {\n-                cvt(f(&mut file_actions.0, cwd.as_ptr()))?;\n+                cvt(f(file_actions.0.as_mut_ptr(), cwd.as_ptr()))?;\n             }\n \n-            let mut set: libc::sigset_t = mem::uninitialized();\n-            cvt(libc::sigemptyset(&mut set))?;\n-            cvt(libc::posix_spawnattr_setsigmask(&mut attrs.0,\n-                                                 &set))?;\n-            cvt(libc::sigaddset(&mut set, libc::SIGPIPE))?;\n-            cvt(libc::posix_spawnattr_setsigdefault(&mut attrs.0,\n-                                                    &set))?;\n+            let mut set = MaybeUninit::<libc::sigset_t>::uninit();\n+            cvt(libc::sigemptyset(set.as_mut_ptr()))?;\n+            cvt(libc::posix_spawnattr_setsigmask(attrs.0.as_mut_ptr(),\n+                                                 set.as_ptr()))?;\n+            cvt(libc::sigaddset(set.as_mut_ptr(), libc::SIGPIPE))?;\n+            cvt(libc::posix_spawnattr_setsigdefault(attrs.0.as_mut_ptr(),\n+                                                    set.as_ptr()))?;\n \n             let flags = libc::POSIX_SPAWN_SETSIGDEF |\n                 libc::POSIX_SPAWN_SETSIGMASK;\n-            cvt(libc::posix_spawnattr_setflags(&mut attrs.0, flags as _))?;\n+            cvt(libc::posix_spawnattr_setflags(attrs.0.as_mut_ptr(), flags as _))?;\n \n             // Make sure we synchronize access to the global `environ` resource\n             let _env_lock = sys::os::env_lock();\n@@ -380,8 +378,8 @@ impl Command {\n             let ret = libc::posix_spawnp(\n                 &mut p.pid,\n                 self.get_argv()[0],\n-                &file_actions.0,\n-                &attrs.0,\n+                file_actions.0.as_ptr(),\n+                attrs.0.as_ptr(),\n                 self.get_argv().as_ptr() as *const _,\n                 envp as *const _,\n             );"}, {"sha": "266bd2a04a2222012209e4eacad48bb0f8c9574e", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -1132,6 +1132,7 @@ impl LocalInternedString {\n         }\n     }\n \n+    #[inline]\n     pub fn get(&self) -> &str {\n         // This returns a valid string since we ensure that `self` outlives the interner\n         // by creating the interner on a thread which outlives threads which can access it.\n@@ -1145,6 +1146,7 @@ impl<U: ?Sized> std::convert::AsRef<U> for LocalInternedString\n where\n     str: std::convert::AsRef<U>\n {\n+    #[inline]\n     fn as_ref(&self) -> &U {\n         self.string.as_ref()\n     }\n@@ -1185,6 +1187,7 @@ impl !Sync for LocalInternedString {}\n \n impl std::ops::Deref for LocalInternedString {\n     type Target = str;\n+    #[inline]\n     fn deref(&self) -> &str { self.string }\n }\n "}, {"sha": "c4e328560ddf701c4067e26f5167cc52638b8096", "filename": "src/test/run-pass/async-await/async-fn-size.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Frun-pass%2Fasync-await%2Fasync-fn-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Frun-pass%2Fasync-await%2Fasync-fn-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasync-await%2Fasync-fn-size.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -1,9 +1,9 @@\n // edition:2018\n-// aux-build:arc_wake.rs\n \n #![feature(async_await, await_macro)]\n \n-extern crate arc_wake;\n+#[path = \"../auxiliary/arc_wake.rs\"]\n+mod arc_wake;\n \n use std::pin::Pin;\n use std::future::Future;", "previous_filename": "src/test/run-pass/async-fn-size.rs"}, {"sha": "778d3ee0c70836d8734d6ecd23accb58411017fb", "filename": "src/test/run-pass/async-await/issue-60709.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Frun-pass%2Fasync-await%2Fissue-60709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Frun-pass%2Fasync-await%2Fissue-60709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasync-await%2Fissue-60709.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -0,0 +1,28 @@\n+// This used to compile the future down to ud2, due to uninhabited types being\n+// handled incorrectly in generators.\n+// compile-flags: -Copt-level=z -Cdebuginfo=2 --edition=2018\n+\n+#![feature(async_await, await_macro)]\n+#![allow(unused)]\n+\n+use std::future::Future;\n+use std::task::Poll;\n+use std::task::Context;\n+use std::pin::Pin;\n+use std::rc::Rc;\n+\n+struct Never();\n+impl Future for Never {\n+    type Output = ();\n+    fn poll(self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<Self::Output> {\n+        Poll::Pending\n+    }\n+}\n+\n+fn main() {\n+    let fut = async {\n+        let _rc = Rc::new(()); // Also crashes with Arc\n+        await!(Never());\n+    };\n+    let _bla = fut; // Moving the future is required.\n+}"}, {"sha": "6112e9b30e83799ed5d66a30cc60c3504976ac64", "filename": "src/test/rustdoc-ui/cfg-test.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Frustdoc-ui%2Fcfg-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Frustdoc-ui%2Fcfg-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcfg-test.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -2,18 +2,21 @@\n // compile-flags:--test\n // normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n \n+// Crates like core have doctests gated on `cfg(not(test))` so we need to make\n+// sure `cfg(test)` is not active when running `rustdoc --test`.\n+\n /// this doctest will be ignored:\n ///\n /// ```\n /// assert!(false);\n /// ```\n-#[cfg(not(test))]\n+#[cfg(test)]\n pub struct Foo;\n \n /// this doctest will be tested:\n ///\n /// ```\n /// assert!(true);\n /// ```\n-#[cfg(test)]\n+#[cfg(not(test))]\n pub struct Foo;"}, {"sha": "67873870e89b27f12342b1ad30800ce251123478", "filename": "src/test/rustdoc-ui/cfg-test.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Frustdoc-ui%2Fcfg-test.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Frustdoc-ui%2Fcfg-test.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcfg-test.stdout?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -1,6 +1,6 @@\n \n running 1 test\n-test $DIR/cfg-test.rs - Foo (line 15) ... ok\n+test $DIR/cfg-test.rs - Foo (line 18) ... ok\n \n test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n "}, {"sha": "fa8859cbb3bb652282ed7d1ac8cd4182420a62cc", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -1,19 +1,23 @@\n-#![warn(const_err)]\n-\n-// compile-pass\n // compile-flags: -O\n+\n+#![deny(const_err)]\n+\n fn main() {\n     println!(\"{}\", 0u32 - 1);\n     let _x = 0u32 - 1;\n-    //~^ WARN const_err\n+    //~^ ERROR this expression will panic at runtime [const_err]\n     println!(\"{}\", 1/(1-1));\n-    //~^ WARN const_err\n+    //~^ ERROR this expression will panic at runtime [const_err]\n+    //~| ERROR attempt to divide by zero [const_err]\n+    //~| ERROR reaching this expression at runtime will panic or abort [const_err]\n     let _x = 1/(1-1);\n-    //~^ WARN const_err\n-    //~| WARN const_err\n+    //~^ ERROR const_err\n+    //~| ERROR const_err\n     println!(\"{}\", 1/(false as u32));\n-    //~^ WARN const_err\n+    //~^ ERROR this expression will panic at runtime [const_err]\n+    //~| ERROR attempt to divide by zero [const_err]\n+    //~| ERROR reaching this expression at runtime will panic or abort [const_err]\n     let _x = 1/(false as u32);\n-    //~^ WARN const_err\n-    //~| WARN const_err\n+    //~^ ERROR const_err\n+    //~| ERROR const_err\n }"}, {"sha": "12407accf096f0ee5b01c1d03301317b4a81044c", "filename": "src/test/ui/consts/const-eval/promoted_errors.stderr", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -1,72 +1,74 @@\n-warning: this expression will panic at runtime\n+error: this expression will panic at runtime\n   --> $DIR/promoted_errors.rs:7:14\n    |\n LL |     let _x = 0u32 - 1;\n    |              ^^^^^^^^ attempt to subtract with overflow\n    |\n note: lint level defined here\n-  --> $DIR/promoted_errors.rs:1:9\n+  --> $DIR/promoted_errors.rs:3:9\n    |\n-LL | #![warn(const_err)]\n+LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n-warning: attempt to divide by zero\n+error: attempt to divide by zero\n   --> $DIR/promoted_errors.rs:9:20\n    |\n LL |     println!(\"{}\", 1/(1-1));\n    |                    ^^^^^^^\n \n-warning: this expression will panic at runtime\n+error: this expression will panic at runtime\n   --> $DIR/promoted_errors.rs:9:20\n    |\n LL |     println!(\"{}\", 1/(1-1));\n    |                    ^^^^^^^ attempt to divide by zero\n \n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:11:14\n+error: attempt to divide by zero\n+  --> $DIR/promoted_errors.rs:13:14\n    |\n LL |     let _x = 1/(1-1);\n    |              ^^^^^^^\n \n-warning: this expression will panic at runtime\n-  --> $DIR/promoted_errors.rs:11:14\n+error: this expression will panic at runtime\n+  --> $DIR/promoted_errors.rs:13:14\n    |\n LL |     let _x = 1/(1-1);\n    |              ^^^^^^^ attempt to divide by zero\n \n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:14:20\n+error: attempt to divide by zero\n+  --> $DIR/promoted_errors.rs:16:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^\n \n-warning: this expression will panic at runtime\n-  --> $DIR/promoted_errors.rs:14:20\n+error: this expression will panic at runtime\n+  --> $DIR/promoted_errors.rs:16:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^ attempt to divide by zero\n \n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:16:14\n+error: attempt to divide by zero\n+  --> $DIR/promoted_errors.rs:20:14\n    |\n LL |     let _x = 1/(false as u32);\n    |              ^^^^^^^^^^^^^^^^\n \n-warning: this expression will panic at runtime\n-  --> $DIR/promoted_errors.rs:16:14\n+error: this expression will panic at runtime\n+  --> $DIR/promoted_errors.rs:20:14\n    |\n LL |     let _x = 1/(false as u32);\n    |              ^^^^^^^^^^^^^^^^ attempt to divide by zero\n \n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:14:20\n+error: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors.rs:16:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^ attempt to divide by zero\n \n-warning: reaching this expression at runtime will panic or abort\n+error: reaching this expression at runtime will panic or abort\n   --> $DIR/promoted_errors.rs:9:20\n    |\n LL |     println!(\"{}\", 1/(1-1));\n    |                    ^^^^^^^ attempt to divide by zero\n \n+error: aborting due to 11 previous errors\n+"}, {"sha": "2f17f95b7a3beffb5ddbdf99a76c529400edeae9", "filename": "src/test/ui/emit-artifact-notifications.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Femit-artifact-notifications.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Femit-artifact-notifications.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-artifact-notifications.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -1,5 +1,7 @@\n // compile-flags:--emit=metadata --error-format=json -Z emit-artifact-notifications\n // compile-pass\n+// ignore-pass\n+// ^-- needed because `--pass check` does not emit the output needed.\n \n // A very basic test for the emission of artifact notifications in JSON output.\n "}, {"sha": "c1f874c079cb53a25f34816842bcc4a9d3064c18", "filename": "src/test/ui/lint/lint-type-overflow2.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -1,15 +1,13 @@\n // compile-flags: -O\n-#![warn(overflowing_literals)]\n-#![warn(const_err)]\n-// compile-pass\n \n-#[allow(unused_variables)]\n+#![deny(overflowing_literals)]\n+#![deny(const_err)]\n \n fn main() {\n-    let x2: i8 = --128; //~ warn: literal out of range for i8\n+    let x2: i8 = --128; //~ ERROR literal out of range for `i8`\n \n-    let x = -3.40282357e+38_f32; //~ warn: literal out of range for f32\n-    let x =  3.40282357e+38_f32; //~ warn: literal out of range for f32\n-    let x = -1.7976931348623159e+308_f64; //~ warn: literal out of range for f64\n-    let x =  1.7976931348623159e+308_f64; //~ warn: literal out of range for f64\n+    let x = -3.40282357e+38_f32; //~ ERROR literal out of range for `f32`\n+    let x =  3.40282357e+38_f32; //~ ERROR literal out of range for `f32`\n+    let x = -1.7976931348623159e+308_f64; //~ ERROR literal out of range for `f64`\n+    let x =  1.7976931348623159e+308_f64; //~ ERROR literal out of range for `f64`\n }"}, {"sha": "761b095464fe84574a9fb4f0a256130a5ecf5462", "filename": "src/test/ui/lint/lint-type-overflow2.stderr", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -1,48 +1,38 @@\n-warning: literal out of range for `i8`\n-  --> $DIR/lint-type-overflow2.rs:9:20\n+error: literal out of range for `i8`\n+  --> $DIR/lint-type-overflow2.rs:7:20\n    |\n LL |     let x2: i8 = --128;\n    |                    ^^^\n    |\n note: lint level defined here\n-  --> $DIR/lint-type-overflow2.rs:2:9\n+  --> $DIR/lint-type-overflow2.rs:3:9\n    |\n-LL | #![warn(overflowing_literals)]\n+LL | #![deny(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-warning: literal out of range for `f32`\n-  --> $DIR/lint-type-overflow2.rs:11:14\n+error: literal out of range for `f32`\n+  --> $DIR/lint-type-overflow2.rs:9:14\n    |\n LL |     let x = -3.40282357e+38_f32;\n    |              ^^^^^^^^^^^^^^^^^^\n \n-warning: literal out of range for `f32`\n-  --> $DIR/lint-type-overflow2.rs:12:14\n+error: literal out of range for `f32`\n+  --> $DIR/lint-type-overflow2.rs:10:14\n    |\n LL |     let x =  3.40282357e+38_f32;\n    |              ^^^^^^^^^^^^^^^^^^\n \n-warning: literal out of range for `f64`\n-  --> $DIR/lint-type-overflow2.rs:13:14\n+error: literal out of range for `f64`\n+  --> $DIR/lint-type-overflow2.rs:11:14\n    |\n LL |     let x = -1.7976931348623159e+308_f64;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: literal out of range for `f64`\n-  --> $DIR/lint-type-overflow2.rs:14:14\n+error: literal out of range for `f64`\n+  --> $DIR/lint-type-overflow2.rs:12:14\n    |\n LL |     let x =  1.7976931348623159e+308_f64;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: this expression will panic at runtime\n-  --> $DIR/lint-type-overflow2.rs:9:18\n-   |\n-LL |     let x2: i8 = --128;\n-   |                  ^^^^^ attempt to negate with overflow\n-   |\n-note: lint level defined here\n-  --> $DIR/lint-type-overflow2.rs:3:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n+error: aborting due to 5 previous errors\n "}, {"sha": "ecfc03717db463694abc51b029672de0cc67ee07", "filename": "src/test/ui/print_type_sizes/generics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -1,5 +1,8 @@\n // compile-flags: -Z print-type-sizes\n // compile-pass\n+// ignore-pass\n+// ^-- needed because `--pass check` does not emit the output needed.\n+//     FIXME: consider using an attribute instead of side-effects.\n \n // This file illustrates how generics are handled: types have to be\n // monomorphized, in the MIR of the original function in which they"}, {"sha": "98b506b1f0db1d8deaf7475b7757b9dfeec0c67d", "filename": "src/test/ui/print_type_sizes/niche-filling.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -1,5 +1,8 @@\n // compile-flags: -Z print-type-sizes\n // compile-pass\n+// ignore-pass\n+// ^-- needed because `--pass check` does not emit the output needed.\n+//     FIXME: consider using an attribute instead of side-effects.\n \n // This file illustrates how niche-filling enums are handled,\n // modelled after cases like `Option<&u32>`, `Option<bool>` and such."}, {"sha": "f1b8a28ae304b942a4a3e68c959766c10d039f5a", "filename": "src/test/ui/print_type_sizes/no_duplicates.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -1,5 +1,8 @@\n // compile-flags: -Z print-type-sizes\n // compile-pass\n+// ignore-pass\n+// ^-- needed because `--pass check` does not emit the output needed.\n+//     FIXME: consider using an attribute instead of side-effects.\n \n // This file illustrates that when the same type occurs repeatedly\n // (even if multiple functions), it is only printed once in the"}, {"sha": "a8d409a91a240b467aa0e066dec95a3bc1bcf7db", "filename": "src/test/ui/print_type_sizes/packed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -1,5 +1,8 @@\n // compile-flags: -Z print-type-sizes\n // compile-pass\n+// ignore-pass\n+// ^-- needed because `--pass check` does not emit the output needed.\n+//     FIXME: consider using an attribute instead of side-effects.\n \n // This file illustrates how packing is handled; it should cause\n // the elimination of padding that would normally be introduced"}, {"sha": "3b5248b6f7ebb26149c40b34c4aff91f07ef37a8", "filename": "src/test/ui/print_type_sizes/repr-align.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -1,5 +1,8 @@\n // compile-flags: -Z print-type-sizes\n // compile-pass\n+// ignore-pass\n+// ^-- needed because `--pass check` does not emit the output needed.\n+//     FIXME: consider using an attribute instead of side-effects.\n \n // This file illustrates how padding is handled: alignment\n // requirements can lead to the introduction of padding, either before"}, {"sha": "c33965c4f53eaa2e6cf6e76ffba9047678e92d68", "filename": "src/test/ui/print_type_sizes/uninhabited.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -1,5 +1,8 @@\n // compile-flags: -Z print-type-sizes\n // compile-pass\n+// ignore-pass\n+// ^-- needed because `--pass check` does not emit the output needed.\n+//     FIXME: consider using an attribute instead of side-effects.\n \n #![feature(never_type)]\n #![feature(start)]"}, {"sha": "e950f7d62d6453908062eb13755ec7650b0b330b", "filename": "src/test/ui/proc-macro/auxiliary/generate-mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fgenerate-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fgenerate-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fgenerate-mod.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // force-host\n // no-prefer-dynamic\n+// ignore-pass\n \n #![crate_type = \"proc-macro\"]\n "}, {"sha": "ebc2717499843c28255eb685654310f5ff02b61a", "filename": "src/test/ui/save-analysis/emit-notifications.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -1,4 +1,7 @@\n // compile-pass\n // compile-flags: -Zsave-analysis -Zemit-artifact-notifications\n // compile-flags: --crate-type rlib --error-format=json\n+// ignore-pass\n+// ^-- needed because otherwise, the .stderr file changes with --pass check\n+\n pub fn foo() {}"}, {"sha": "a75d9f0b0bb9bba12f4e75d05b7a6d9d874816f7", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -99,6 +99,36 @@ impl fmt::Display for Mode {\n     }\n }\n \n+#[derive(Clone, Copy, PartialEq, Debug, Hash)]\n+pub enum PassMode {\n+    Check,\n+    Build,\n+    Run,\n+}\n+\n+impl FromStr for PassMode {\n+    type Err = ();\n+    fn from_str(s: &str) -> Result<Self, ()> {\n+        match s {\n+            \"check\" => Ok(PassMode::Check),\n+            \"build\" => Ok(PassMode::Build),\n+            \"run\" => Ok(PassMode::Run),\n+            _ => Err(()),\n+        }\n+    }\n+}\n+\n+impl fmt::Display for PassMode {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let s = match *self {\n+            PassMode::Check => \"check\",\n+            PassMode::Build => \"build\",\n+            PassMode::Run => \"run\",\n+        };\n+        fmt::Display::fmt(s, f)\n+    }\n+}\n+\n #[derive(Clone, Debug, PartialEq)]\n pub enum CompareMode {\n     Nll,\n@@ -184,6 +214,9 @@ pub struct Config {\n     /// Exactly match the filter, rather than a substring\n     pub filter_exact: bool,\n \n+    /// Force the pass mode of a check/build/run-pass test to this mode.\n+    pub force_pass_mode: Option<PassMode>,\n+\n     /// Write out a parseable log of tests that were run\n     pub logfile: Option<PathBuf>,\n "}, {"sha": "52f777db2daa681aa2f149a348075b9a1da617d1", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -6,7 +6,7 @@ use std::path::{Path, PathBuf};\n \n use log::*;\n \n-use crate::common::{self, CompareMode, Config, Mode};\n+use crate::common::{self, CompareMode, Config, Mode, PassMode};\n use crate::util;\n \n use crate::extract_gdb_version;\n@@ -290,13 +290,6 @@ impl EarlyProps {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Debug)]\n-pub enum PassMode {\n-    Check,\n-    Build,\n-    Run,\n-}\n-\n #[derive(Clone, Debug)]\n pub struct TestProps {\n     // Lines that should be expected, in order, on standard out\n@@ -357,7 +350,9 @@ pub struct TestProps {\n     // arguments. (In particular, it propagates to the aux-builds.)\n     pub incremental_dir: Option<PathBuf>,\n     // How far should the test proceed while still passing.\n-    pub pass_mode: Option<PassMode>,\n+    pass_mode: Option<PassMode>,\n+    // Ignore `--pass` overrides from the command line for this test.\n+    ignore_pass: bool,\n     // rustdoc will test the output of the `--test` option\n     pub check_test_line_numbers_match: bool,\n     // Do not pass `-Z ui-testing` to UI tests\n@@ -400,6 +395,7 @@ impl TestProps {\n             forbid_output: vec![],\n             incremental_dir: None,\n             pass_mode: None,\n+            ignore_pass: false,\n             check_test_line_numbers_match: false,\n             disable_ui_testing_normalization: false,\n             normalize_stdout: vec![],\n@@ -528,6 +524,10 @@ impl TestProps {\n \n             self.update_pass_mode(ln, cfg, config);\n \n+            if !self.ignore_pass {\n+                self.ignore_pass = config.parse_ignore_pass(ln);\n+            }\n+\n             if !self.disable_ui_testing_normalization {\n                 self.disable_ui_testing_normalization =\n                     config.parse_disable_ui_testing_normalization(ln);\n@@ -608,6 +608,15 @@ impl TestProps {\n             (_, None) => {}\n         }\n     }\n+\n+    pub fn pass_mode(&self, config: &Config) -> Option<PassMode> {\n+        if !self.ignore_pass {\n+            if let (mode @ Some(_), Some(_)) = (config.force_pass_mode, self.pass_mode) {\n+                return mode;\n+            }\n+        }\n+        self.pass_mode\n+    }\n }\n \n fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut dyn FnMut(&str)) {\n@@ -743,6 +752,10 @@ impl Config {\n         self.parse_name_directive(line, \"check-test-line-numbers-match\")\n     }\n \n+    fn parse_ignore_pass(&self, line: &str) -> bool {\n+        self.parse_name_directive(line, \"ignore-pass\")\n+    }\n+\n     fn parse_assembly_output(&self, line: &str) -> Option<String> {\n         self.parse_name_value_directive(line, \"assembly-output\")\n             .map(|r| r.trim().to_string())"}, {"sha": "597fdf2d95e3097b7fcd5214703c53fba5674473", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -5,7 +5,7 @@\n \n extern crate test;\n \n-use crate::common::CompareMode;\n+use crate::common::{CompareMode, PassMode};\n use crate::common::{expected_output_path, output_base_dir, output_relative_path, UI_EXTENSIONS};\n use crate::common::{Config, TestPaths};\n use crate::common::{DebugInfoCdb, DebugInfoGdbLldb, DebugInfoGdb, DebugInfoLldb, Mode, Pretty};\n@@ -128,6 +128,12 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"(compile-fail|run-fail|run-pass|\\\n              run-pass-valgrind|pretty|debug-info|incremental|mir-opt)\",\n         )\n+        .optopt(\n+            \"\",\n+            \"pass\",\n+            \"force {check,build,run}-pass tests to this mode.\",\n+            \"check | build | run\"\n+        )\n         .optflag(\"\", \"ignored\", \"run tests marked as ignored\")\n         .optflag(\"\", \"exact\", \"filters match exactly\")\n         .optopt(\n@@ -320,6 +326,10 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         run_ignored,\n         filter: matches.free.first().cloned(),\n         filter_exact: matches.opt_present(\"exact\"),\n+        force_pass_mode: matches.opt_str(\"pass\").map(|mode|\n+            mode.parse::<PassMode>()\n+                .unwrap_or_else(|_| panic!(\"unknown `--pass` option `{}` given\", mode))\n+        ),\n         logfile: matches.opt_str(\"logfile\").map(|s| PathBuf::from(&s)),\n         runtool: matches.opt_str(\"runtool\"),\n         host_rustcflags: matches.opt_str(\"host-rustcflags\"),\n@@ -382,6 +392,10 @@ pub fn log_config(config: &Config) {\n         ),\n     );\n     logv(c, format!(\"filter_exact: {}\", config.filter_exact));\n+    logv(c, format!(\n+        \"force_pass_mode: {}\",\n+        opt_str(&config.force_pass_mode.map(|m| format!(\"{}\", m))),\n+    ));\n     logv(c, format!(\"runtool: {}\", opt_str(&config.runtool)));\n     logv(\n         c,"}, {"sha": "35caf82dd71287fcf65e17d335cdd2329dc71150", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -1,6 +1,6 @@\n // ignore-tidy-filelength\n \n-use crate::common::CompareMode;\n+use crate::common::{CompareMode, PassMode};\n use crate::common::{expected_output_path, UI_EXTENSIONS, UI_FIXED, UI_STDERR, UI_STDOUT};\n use crate::common::{output_base_dir, output_base_name, output_testname_unique};\n use crate::common::{Codegen, CodegenUnits, Rustdoc};\n@@ -10,7 +10,7 @@ use crate::common::{Config, TestPaths};\n use crate::common::{Incremental, MirOpt, RunMake, Ui, JsDocTest, Assembly};\n use diff;\n use crate::errors::{self, Error, ErrorKind};\n-use crate::header::{TestProps, PassMode};\n+use crate::header::TestProps;\n use crate::json;\n use regex::{Captures, Regex};\n use rustfix::{apply_suggestions, get_suggestions_from_json, Filter};\n@@ -260,6 +260,10 @@ pub fn compute_stamp_hash(config: &Config) -> String {\n         env::var_os(\"PYTHONPATH\").hash(&mut hash);\n     }\n \n+    if let Ui | RunPass | Incremental | Pretty = config.mode {\n+        config.force_pass_mode.hash(&mut hash);\n+    }\n+\n     format!(\"{:x}\", hash.finish())\n }\n \n@@ -309,10 +313,13 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n+    fn pass_mode(&self) -> Option<PassMode> {\n+        self.props.pass_mode(self.config)\n+    }\n+\n     fn should_run_successfully(&self) -> bool {\n         match self.config.mode {\n-            RunPass => true,\n-            Ui => self.props.pass_mode == Some(PassMode::Run),\n+            RunPass | Ui => self.pass_mode() == Some(PassMode::Run),\n             mode => panic!(\"unimplemented for mode {:?}\", mode),\n         }\n     }\n@@ -322,15 +329,15 @@ impl<'test> TestCx<'test> {\n             CompileFail => false,\n             RunPass => true,\n             JsDocTest => true,\n-            Ui => self.props.pass_mode.is_some(),\n+            Ui => self.pass_mode().is_some(),\n             Incremental => {\n                 let revision = self.revision\n                     .expect(\"incremental tests require a list of revisions\");\n                 if revision.starts_with(\"rpass\") || revision.starts_with(\"rfail\") {\n                     true\n                 } else if revision.starts_with(\"cfail\") {\n                     // FIXME: would be nice if incremental revs could start with \"cpass\"\n-                    self.props.pass_mode.is_some()\n+                    self.pass_mode().is_some()\n                 } else {\n                     panic!(\"revision name must begin with rpass, rfail, or cfail\");\n                 }\n@@ -1341,7 +1348,7 @@ impl<'test> TestCx<'test> {\n     fn check_error_patterns(&self, output_to_check: &str, proc_res: &ProcRes) {\n         debug!(\"check_error_patterns\");\n         if self.props.error_patterns.is_empty() {\n-            if self.props.pass_mode.is_some() {\n+            if self.pass_mode().is_some() {\n                 return;\n             } else {\n                 self.fatal(&format!(\n@@ -1871,7 +1878,11 @@ impl<'test> TestCx<'test> {\n         result\n     }\n \n-    fn make_compile_args(&self, input_file: &Path, output_file: TargetLocation) -> Command {\n+    fn make_compile_args(\n+        &self,\n+        input_file: &Path,\n+        output_file: TargetLocation,\n+    ) -> Command {\n         let is_rustdoc = self.config.src_base.ends_with(\"rustdoc-ui\") ||\n                          self.config.src_base.ends_with(\"rustdoc-js\");\n         let mut rustc = if !is_rustdoc {\n@@ -1968,14 +1979,7 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n-        if self.props.pass_mode == Some(PassMode::Check) {\n-            assert!(\n-                !self\n-                    .props\n-                    .compile_flags\n-                    .iter()\n-                    .any(|s| s.starts_with(\"--emit\"))\n-            );\n+        if let Some(PassMode::Check) = self.pass_mode() {\n             rustc.args(&[\"--emit\", \"metadata\"]);\n         }\n "}, {"sha": "d5dff1dcae0d5c68e691a1153353ebae239e1917", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/9a90d03ad171856dc016c2dcc19292ec49a8a26f/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=9a90d03ad171856dc016c2dcc19292ec49a8a26f", "patch": "@@ -72,32 +72,33 @@ def issue(\n ):\n     # Open an issue about the toolstate failure.\n     assignees = [x.strip() for x in maintainers.split('@') if x != '']\n-    assignees.append(relevant_pr_user)\n     if status == 'test-fail':\n         status_description = 'has failing tests'\n     else:\n         status_description = 'no longer builds'\n+    request = json.dumps({\n+        'body': maybe_delink(textwrap.dedent('''\\\n+        Hello, this is your friendly neighborhood mergebot.\n+        After merging PR {}, I observed that the tool {} {}.\n+        A follow-up PR to the repository {} is needed to fix the fallout.\n+\n+        cc @{}, do you think you would have time to do the follow-up work?\n+        If so, that would be great!\n+\n+        cc @{}, the PR reviewer, and @rust-lang/compiler -- nominating for prioritization.\n+\n+        ''').format(\n+            relevant_pr_number, tool, status_description,\n+            REPOS.get(tool), relevant_pr_user, pr_reviewer\n+        )),\n+        'title': '`{}` no longer builds after {}'.format(tool, relevant_pr_number),\n+        'assignees': assignees,\n+        'labels': ['T-compiler', 'I-nominated'],\n+    })\n+    print(\"Creating issue:\\n{}\".format(request))\n     response = urllib2.urlopen(urllib2.Request(\n         gh_url(),\n-        json.dumps({\n-            'body': maybe_delink(textwrap.dedent('''\\\n-            Hello, this is your friendly neighborhood mergebot.\n-            After merging PR {}, I observed that the tool {} {}.\n-            A follow-up PR to the repository {} is needed to fix the fallout.\n-\n-            cc @{}, do you think you would have time to do the follow-up work?\n-            If so, that would be great!\n-\n-            cc @{}, the PR reviewer, and @rust-lang/compiler -- nominating for prioritization.\n-\n-            ''').format(\n-                relevant_pr_number, tool, status_description,\n-                REPOS.get(tool), relevant_pr_user, pr_reviewer\n-            )),\n-            'title': '`{}` no longer builds after {}'.format(tool, relevant_pr_number),\n-            'assignees': assignees,\n-            'labels': ['T-compiler', 'I-nominated'],\n-        }),\n+        request,\n         {\n             'Authorization': 'token ' + github_token,\n             'Content-Type': 'application/json',\n@@ -135,13 +136,13 @@ def update_latest(\n         for status in latest:\n             tool = status['tool']\n             changed = False\n-            create_issue = False\n+            create_issue_for_status = None # set to the status that caused the issue\n \n             for os, s in current_status.items():\n                 old = status[os]\n                 new = s.get(tool, old)\n                 status[os] = new\n-                if new > old:\n+                if new > old: # comparing the strings, but they are ordered appropriately!\n                     # things got fixed or at least the status quo improved\n                     changed = True\n                     message += '\ud83c\udf89 {} on {}: {} \u2192 {} (cc {}, @rust-lang/infra).\\n' \\\n@@ -156,20 +157,24 @@ def update_latest(\n                     # Most tools only create issues for build failures.\n                     # Other failures can be spurious.\n                     if new == 'build-fail' or (tool == 'miri' and new == 'test-fail'):\n-                        create_issue = True\n+                        create_issue_for_status = new\n \n-            if create_issue:\n+            if create_issue_for_status is not None:\n                 try:\n                     issue(\n-                        tool, new, MAINTAINERS.get(tool, ''),\n+                        tool, create_issue_for_status, MAINTAINERS.get(tool, ''),\n                         relevant_pr_number, relevant_pr_user, pr_reviewer,\n                     )\n-                except IOError as e:\n+                except urllib2.HTTPError as e:\n                     # network errors will simply end up not creating an issue, but that's better\n                     # than failing the entire build job\n-                    print(\"I/O error: {0}\".format(e))\n+                    print(\"HTTPError when creating issue for status regression: {0}\\n{1}\"\n+                          .format(e, e.read()))\n+                except IOError as e:\n+                    print(\"I/O error when creating issue for status regression: {0}\".format(e))\n                 except:\n-                    print(\"Unexpected error: {0}\".format(sys.exc_info()[0]))\n+                    print(\"Unexpected error when creating issue for status regression: {0}\"\n+                          .format(sys.exc_info()[0]))\n                     raise\n \n             if changed:"}]}