{"sha": "dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614", "node_id": "C_kwDOAAsO6NoAKGRkN2FmZjVjYzVkM2ViYTZkZDAzMDFiYTZiMzNkM2UxNzhmOTE2MTQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-21T22:17:20Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-21T00:51:55Z"}, "message": "Use `ThinVec` in `ast::Generics` and related types.", "tree": {"sha": "3949df9e4d08f2c0eb293926d60bfeb304f199d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3949df9e4d08f2c0eb293926d60bfeb304f199d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614", "html_url": "https://github.com/rust-lang/rust/commit/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06228d6e9331dd7742e069287bbb4802663b2742", "url": "https://api.github.com/repos/rust-lang/rust/commits/06228d6e9331dd7742e069287bbb4802663b2742", "html_url": "https://github.com/rust-lang/rust/commit/06228d6e9331dd7742e069287bbb4802663b2742"}], "stats": {"total": 194, "additions": 97, "deletions": 97}, "files": [{"sha": "735b007025ae50741d64ce39a9062e87b087384f", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614", "patch": "@@ -3698,6 +3698,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"rustc_ast\",\n  \"rustc_span\",\n+ \"thin-vec\",\n ]\n \n [[package]]"}, {"sha": "815e00228faa10eaf8b7e423d57e0dfd744fb221", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614", "patch": "@@ -384,15 +384,15 @@ impl GenericParam {\n /// a function, enum, trait, etc.\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct Generics {\n-    pub params: Vec<GenericParam>,\n+    pub params: ThinVec<GenericParam>,\n     pub where_clause: WhereClause,\n     pub span: Span,\n }\n \n impl Default for Generics {\n     /// Creates an instance of `Generics`.\n     fn default() -> Generics {\n-        Generics { params: Vec::new(), where_clause: Default::default(), span: DUMMY_SP }\n+        Generics { params: ThinVec::new(), where_clause: Default::default(), span: DUMMY_SP }\n     }\n }\n \n@@ -441,7 +441,7 @@ impl WherePredicate {\n pub struct WhereBoundPredicate {\n     pub span: Span,\n     /// Any generics from a `for` binding.\n-    pub bound_generic_params: Vec<GenericParam>,\n+    pub bound_generic_params: ThinVec<GenericParam>,\n     /// The type being bounded.\n     pub bounded_ty: P<Ty>,\n     /// Trait and lifetime bounds (`Clone + Send + 'static`).\n@@ -1169,7 +1169,7 @@ impl Expr {\n     pub fn to_bound(&self) -> Option<GenericBound> {\n         match &self.kind {\n             ExprKind::Path(None, path) => Some(GenericBound::Trait(\n-                PolyTraitRef::new(Vec::new(), path.clone(), self.span),\n+                PolyTraitRef::new(ThinVec::new(), path.clone(), self.span),\n                 TraitBoundModifier::None,\n             )),\n             _ => None,\n@@ -1574,7 +1574,7 @@ pub enum ClosureBinder {\n         /// for<'a, 'b> |_: &'a (), _: &'b ()| { ... }\n         ///     ^^^^^^ -- this\n         /// ```\n-        generic_params: P<[GenericParam]>,\n+        generic_params: ThinVec<GenericParam>,\n     },\n }\n \n@@ -2056,7 +2056,7 @@ impl Ty {\n pub struct BareFnTy {\n     pub unsafety: Unsafe,\n     pub ext: Extern,\n-    pub generic_params: Vec<GenericParam>,\n+    pub generic_params: ThinVec<GenericParam>,\n     pub decl: P<FnDecl>,\n     /// Span of the `fn(...) -> ...` part.\n     pub decl_span: Span,\n@@ -2636,7 +2636,7 @@ pub struct TraitRef {\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct PolyTraitRef {\n     /// The `'a` in `for<'a> Foo<&'a T>`.\n-    pub bound_generic_params: Vec<GenericParam>,\n+    pub bound_generic_params: ThinVec<GenericParam>,\n \n     /// The `Foo<&'a T>` in `<'a> Foo<&'a T>`.\n     pub trait_ref: TraitRef,\n@@ -2645,7 +2645,7 @@ pub struct PolyTraitRef {\n }\n \n impl PolyTraitRef {\n-    pub fn new(generic_params: Vec<GenericParam>, path: Path, span: Span) -> Self {\n+    pub fn new(generic_params: ThinVec<GenericParam>, path: Path, span: Span) -> Self {\n         PolyTraitRef {\n             bound_generic_params: generic_params,\n             trait_ref: TraitRef { path, ref_id: DUMMY_NODE_ID },\n@@ -3115,15 +3115,15 @@ mod size_asserts {\n     static_assert_size!(Block, 48);\n     static_assert_size!(Expr, 72);\n     static_assert_size!(ExprKind, 40);\n-    static_assert_size!(Fn, 184);\n+    static_assert_size!(Fn, 168);\n     static_assert_size!(ForeignItem, 96);\n     static_assert_size!(ForeignItemKind, 24);\n     static_assert_size!(GenericArg, 24);\n-    static_assert_size!(GenericBound, 72);\n-    static_assert_size!(Generics, 72);\n-    static_assert_size!(Impl, 184);\n-    static_assert_size!(Item, 184);\n-    static_assert_size!(ItemKind, 112);\n+    static_assert_size!(GenericBound, 56);\n+    static_assert_size!(Generics, 56);\n+    static_assert_size!(Impl, 168);\n+    static_assert_size!(Item, 168);\n+    static_assert_size!(ItemKind, 96);\n     static_assert_size!(LitKind, 24);\n     static_assert_size!(Local, 72);\n     static_assert_size!(MetaItemLit, 40);"}, {"sha": "6eb788a3f82d0f3b962e6cf14c1ea99517bcdbf2", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614", "patch": "@@ -839,9 +839,7 @@ pub fn noop_visit_closure_binder<T: MutVisitor>(binder: &mut ClosureBinder, vis:\n     match binder {\n         ClosureBinder::NotPresent => {}\n         ClosureBinder::For { span: _, generic_params } => {\n-            let mut vec = std::mem::take(generic_params).into_vec();\n-            vec.flat_map_in_place(|param| vis.flat_map_generic_param(param));\n-            *generic_params = P::from_vec(vec);\n+            generic_params.flat_map_in_place(|param| vis.flat_map_generic_param(param));\n         }\n     }\n }"}, {"sha": "b1b9344d2535c6f17409570326cfa73b15aea1e2", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614", "patch": "@@ -66,9 +66,9 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n-\n use smallvec::SmallVec;\n use std::collections::hash_map::Entry;\n+use thin_vec::ThinVec;\n \n macro_rules! arena_vec {\n     ($this:expr; $($x:expr),*) => (\n@@ -1207,7 +1207,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             let (bounds, lifetime_bound) = self.with_dyn_type_scope(true, |this| {\n                 let bound = this.lower_poly_trait_ref(\n                     &PolyTraitRef {\n-                        bound_generic_params: vec![],\n+                        bound_generic_params: ThinVec::new(),\n                         trait_ref: TraitRef { path: path.clone(), ref_id: t.id },\n                         span: t.span\n                     },"}, {"sha": "980a8fa93a97d531c1647b902d36e21857f1bd39", "filename": "compiler/rustc_ast_pretty/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/compiler%2Frustc_ast_pretty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/compiler%2Frustc_ast_pretty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2FCargo.toml?ref=dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614", "patch": "@@ -8,3 +8,4 @@ edition = \"2021\"\n [dependencies]\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n+thin-vec = \"0.2.12\""}, {"sha": "5eac3c47a46cbec776a4215c68feabc2b4837876", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614", "patch": "@@ -4,7 +4,7 @@ mod item;\n \n use crate::pp::Breaks::{Consistent, Inconsistent};\n use crate::pp::{self, Breaks};\n-\n+use rustc_ast::attr::AttrIdGenerator;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, BinOpToken, CommentKind, Delimiter, Nonterminal, Token, TokenKind};\n use rustc_ast::tokenstream::{TokenStream, TokenTree};\n@@ -20,9 +20,8 @@ use rustc_span::edition::Edition;\n use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, IdentPrinter, Symbol};\n use rustc_span::{BytePos, FileName, Span, DUMMY_SP};\n-\n-use rustc_ast::attr::AttrIdGenerator;\n use std::borrow::Cow;\n+use thin_vec::ThinVec;\n \n pub use self::delimited::IterDelimited;\n \n@@ -1722,7 +1721,7 @@ impl<'a> State<'a> {\n         self.ibox(INDENT_UNIT);\n         self.print_formal_generic_params(generic_params);\n         let generics = ast::Generics {\n-            params: Vec::new(),\n+            params: ThinVec::new(),\n             where_clause: ast::WhereClause {\n                 has_where_token: false,\n                 predicates: Vec::new(),"}, {"sha": "33c971b1e6aa1eb9085c3dd0b411a0450a740e9a", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614", "patch": "@@ -177,7 +177,7 @@ use std::cell::RefCell;\n use std::iter;\n use std::ops::Not;\n use std::vec;\n-use thin_vec::thin_vec;\n+use thin_vec::{thin_vec, ThinVec};\n use ty::{Bounds, Path, Ref, Self_, Ty};\n \n pub mod ty;\n@@ -318,7 +318,7 @@ pub fn combine_substructure(\n }\n \n struct TypeParameter {\n-    bound_generic_params: Vec<ast::GenericParam>,\n+    bound_generic_params: ThinVec<ast::GenericParam>,\n     ty: P<ast::Ty>,\n }\n \n@@ -385,7 +385,7 @@ fn find_type_parameters(\n     struct Visitor<'a, 'b> {\n         cx: &'a ExtCtxt<'b>,\n         ty_param_names: &'a [Symbol],\n-        bound_generic_params_stack: Vec<ast::GenericParam>,\n+        bound_generic_params_stack: ThinVec<ast::GenericParam>,\n         type_params: Vec<TypeParameter>,\n     }\n \n@@ -422,7 +422,7 @@ fn find_type_parameters(\n     let mut visitor = Visitor {\n         cx,\n         ty_param_names,\n-        bound_generic_params_stack: Vec::new(),\n+        bound_generic_params_stack: ThinVec::new(),\n         type_params: Vec::new(),\n     };\n     visit::Visitor::visit_ty(&mut visitor, ty);\n@@ -594,7 +594,7 @@ impl<'a> TraitDef<'a> {\n         let span = generics.span.with_ctxt(ctxt);\n \n         // Create the generic parameters\n-        let params: Vec<_> = generics\n+        let params: ThinVec<_> = generics\n             .params\n             .iter()\n             .map(|param| match &param.kind {"}, {"sha": "3b73576d1842f4a8388368f2b0585bf55289c196", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614", "patch": "@@ -125,7 +125,7 @@ impl<'a> ExtCtxt<'a> {\n \n     pub fn poly_trait_ref(&self, span: Span, path: ast::Path) -> ast::PolyTraitRef {\n         ast::PolyTraitRef {\n-            bound_generic_params: Vec::new(),\n+            bound_generic_params: ThinVec::new(),\n             trait_ref: self.trait_ref(path),\n             span,\n         }"}, {"sha": "cd0453afdf1faa7b4da9c7d8258de4e6c5cca23a", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614", "patch": "@@ -2095,7 +2095,7 @@ impl<'a> Parser<'a> {\n \n             self.sess.gated_spans.gate(sym::closure_lifetime_binder, span);\n \n-            ClosureBinder::For { span, generic_params: P::from_vec(lifetime_defs) }\n+            ClosureBinder::For { span, generic_params: lifetime_defs }\n         } else {\n             ClosureBinder::NotPresent\n         };"}, {"sha": "0eaa029a20d1b2af6eb8ca53afd55126c5972334", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614", "patch": "@@ -14,6 +14,7 @@ use rustc_ast::{\n use rustc_errors::{Applicability, PResult};\n use rustc_span::symbol::{kw, Ident};\n use rustc_span::Span;\n+use thin_vec::ThinVec;\n \n enum PredicateOrStructBody {\n     Predicate(ast::WherePredicate),\n@@ -121,8 +122,8 @@ impl<'a> Parser<'a> {\n \n     /// Parses a (possibly empty) list of lifetime and type parameters, possibly including\n     /// a trailing comma and erroneous trailing attributes.\n-    pub(super) fn parse_generic_params(&mut self) -> PResult<'a, Vec<ast::GenericParam>> {\n-        let mut params = Vec::new();\n+    pub(super) fn parse_generic_params(&mut self) -> PResult<'a, ThinVec<ast::GenericParam>> {\n+        let mut params = ThinVec::new();\n         let mut done = false;\n         while !done {\n             let attrs = self.parse_outer_attributes()?;\n@@ -251,7 +252,7 @@ impl<'a> Parser<'a> {\n             self.expect_gt()?;\n             (params, span_lo.to(self.prev_token.span))\n         } else {\n-            (vec![], self.prev_token.span.shrink_to_hi())\n+            (ThinVec::new(), self.prev_token.span.shrink_to_hi())\n         };\n         Ok(ast::Generics {\n             params,"}, {"sha": "92c792875ab3b32e0d0036f85e114d8031542a8e", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614", "patch": "@@ -21,7 +21,7 @@ use rustc_errors::{Applicability, PResult};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Symbol;\n-use thin_vec::thin_vec;\n+use thin_vec::{thin_vec, ThinVec};\n \n /// Any `?` or `~const` modifiers that appear at the start of a bound.\n struct BoundModifiers {\n@@ -273,7 +273,7 @@ impl<'a> Parser<'a> {\n             TyKind::Infer\n         } else if self.check_fn_front_matter(false, Case::Sensitive) {\n             // Function pointer type\n-            self.parse_ty_bare_fn(lo, Vec::new(), None, recover_return_sign)?\n+            self.parse_ty_bare_fn(lo, ThinVec::new(), None, recover_return_sign)?\n         } else if self.check_keyword(kw::For) {\n             // Function pointer type or bound list (trait object type) starting with a poly-trait.\n             //   `for<'lt> [unsafe] [extern \"ABI\"] fn (&'lt S) -> T`\n@@ -352,7 +352,7 @@ impl<'a> Parser<'a> {\n             match ty.kind {\n                 // `(TY_BOUND_NOPAREN) + BOUND + ...`.\n                 TyKind::Path(None, path) if maybe_bounds => {\n-                    self.parse_remaining_bounds_path(Vec::new(), path, lo, true)\n+                    self.parse_remaining_bounds_path(ThinVec::new(), path, lo, true)\n                 }\n                 TyKind::TraitObject(bounds, TraitObjectSyntax::None)\n                     if maybe_bounds && bounds.len() == 1 && !trailing_plus =>\n@@ -378,7 +378,7 @@ impl<'a> Parser<'a> {\n \n     fn parse_remaining_bounds_path(\n         &mut self,\n-        generic_params: Vec<GenericParam>,\n+        generic_params: ThinVec<GenericParam>,\n         path: ast::Path,\n         lo: Span,\n         parse_plus: bool,\n@@ -511,7 +511,7 @@ impl<'a> Parser<'a> {\n     fn parse_ty_bare_fn(\n         &mut self,\n         lo: Span,\n-        mut params: Vec<GenericParam>,\n+        mut params: ThinVec<GenericParam>,\n         param_insertion_point: Option<Span>,\n         recover_return_sign: RecoverReturnSign,\n     ) -> PResult<'a, TyKind> {\n@@ -545,13 +545,13 @@ impl<'a> Parser<'a> {\n     fn recover_fn_ptr_with_generics(\n         &mut self,\n         lo: Span,\n-        params: &mut Vec<GenericParam>,\n+        params: &mut ThinVec<GenericParam>,\n         param_insertion_point: Option<Span>,\n     ) -> PResult<'a, ()> {\n         let generics = self.parse_generics()?;\n         let arity = generics.params.len();\n \n-        let mut lifetimes: Vec<_> = generics\n+        let mut lifetimes: ThinVec<_> = generics\n             .params\n             .into_iter()\n             .filter(|param| matches!(param.kind, ast::GenericParamKind::Lifetime))\n@@ -662,7 +662,7 @@ impl<'a> Parser<'a> {\n             })))\n         } else if allow_plus == AllowPlus::Yes && self.check_plus() {\n             // `Trait1 + Trait2 + 'a`\n-            self.parse_remaining_bounds_path(Vec::new(), path, lo, true)\n+            self.parse_remaining_bounds_path(ThinVec::new(), path, lo, true)\n         } else {\n             // Just a type path.\n             Ok(TyKind::Path(None, path))\n@@ -993,7 +993,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Optionally parses `for<$generic_params>`.\n-    pub(super) fn parse_late_bound_lifetime_defs(&mut self) -> PResult<'a, Vec<GenericParam>> {\n+    pub(super) fn parse_late_bound_lifetime_defs(&mut self) -> PResult<'a, ThinVec<GenericParam>> {\n         if self.eat_keyword(kw::For) {\n             self.expect_lt()?;\n             let params = self.parse_generic_params()?;\n@@ -1002,7 +1002,7 @@ impl<'a> Parser<'a> {\n             // parameters, and the lifetime parameters must not have bounds.\n             Ok(params)\n         } else {\n-            Ok(Vec::new())\n+            Ok(ThinVec::new())\n         }\n     }\n \n@@ -1012,7 +1012,7 @@ impl<'a> Parser<'a> {\n     fn recover_fn_trait_with_lifetime_params(\n         &mut self,\n         fn_path: &mut ast::Path,\n-        lifetime_defs: &mut Vec<GenericParam>,\n+        lifetime_defs: &mut ThinVec<GenericParam>,\n     ) -> PResult<'a, ()> {\n         let fn_path_segment = fn_path.segments.last_mut().unwrap();\n         let generic_args = if let Some(p_args) = &fn_path_segment.args {\n@@ -1072,7 +1072,7 @@ impl<'a> Parser<'a> {\n                 kind: ast::GenericParamKind::Lifetime,\n                 colon_span: None,\n             })\n-            .collect::<Vec<GenericParam>>();\n+            .collect::<ThinVec<GenericParam>>();\n         lifetime_defs.append(&mut generic_params);\n \n         let generic_args_span = generic_args.span();"}, {"sha": "6d2d1cb15a4d8cbb7f0934d6eba5748d6539a5c5", "filename": "tests/ui/stats/hir-stats.stderr", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/tests%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614/tests%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstats%2Fhir-stats.stderr?ref=dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614", "patch": "@@ -1,16 +1,16 @@\n ast-stats-1 PRE EXPANSION AST STATS\n ast-stats-1 Name                Accumulated Size         Count     Item Size\n ast-stats-1 ----------------------------------------------------------------\n-ast-stats-1 ExprField                 48 ( 0.6%)             1            48\n+ast-stats-1 ExprField                 48 ( 0.7%)             1            48\n+ast-stats-1 WherePredicate            56 ( 0.8%)             1            56\n+ast-stats-1 - BoundPredicate            56 ( 0.8%)             1\n ast-stats-1 GenericArgs               56 ( 0.8%)             1            56\n ast-stats-1 - AngleBracketed            56 ( 0.8%)             1\n ast-stats-1 Crate                     56 ( 0.8%)             1            56\n ast-stats-1 Attribute                 64 ( 0.9%)             2            32\n ast-stats-1 - Normal                    32 ( 0.4%)             1\n ast-stats-1 - DocComment                32 ( 0.4%)             1\n ast-stats-1 Local                     72 ( 1.0%)             1            72\n-ast-stats-1 WherePredicate            72 ( 1.0%)             1            72\n-ast-stats-1 - BoundPredicate            72 ( 1.0%)             1\n ast-stats-1 Arm                       96 ( 1.3%)             2            48\n ast-stats-1 ForeignItem               96 ( 1.3%)             1            96\n ast-stats-1 - Fn                        96 ( 1.3%)             1\n@@ -20,51 +20,51 @@ ast-stats-1 - Local                     32 ( 0.4%)             1\n ast-stats-1 - MacCall                   32 ( 0.4%)             1\n ast-stats-1 - Expr                      96 ( 1.3%)             3\n ast-stats-1 Param                    160 ( 2.2%)             4            40\n-ast-stats-1 FnDecl                   200 ( 2.7%)             5            40\n-ast-stats-1 Variant                  240 ( 3.2%)             2           120\n-ast-stats-1 GenericBound             288 ( 3.9%)             4            72\n-ast-stats-1 - Trait                    288 ( 3.9%)             4\n-ast-stats-1 Block                    288 ( 3.9%)             6            48\n-ast-stats-1 AssocItem                416 ( 5.6%)             4           104\n-ast-stats-1 - Type                     208 ( 2.8%)             2\n-ast-stats-1 - Fn                       208 ( 2.8%)             2\n-ast-stats-1 GenericParam             480 ( 6.5%)             5            96\n-ast-stats-1 Expr                     576 ( 7.8%)             8            72\n+ast-stats-1 FnDecl                   200 ( 2.8%)             5            40\n+ast-stats-1 GenericBound             224 ( 3.1%)             4            56\n+ast-stats-1 - Trait                    224 ( 3.1%)             4\n+ast-stats-1 Variant                  240 ( 3.3%)             2           120\n+ast-stats-1 Block                    288 ( 4.0%)             6            48\n+ast-stats-1 AssocItem                416 ( 5.8%)             4           104\n+ast-stats-1 - Type                     208 ( 2.9%)             2\n+ast-stats-1 - Fn                       208 ( 2.9%)             2\n+ast-stats-1 GenericParam             480 ( 6.7%)             5            96\n+ast-stats-1 Expr                     576 ( 8.0%)             8            72\n ast-stats-1 - Path                      72 ( 1.0%)             1\n ast-stats-1 - Match                     72 ( 1.0%)             1\n ast-stats-1 - Struct                    72 ( 1.0%)             1\n-ast-stats-1 - Lit                      144 ( 1.9%)             2\n-ast-stats-1 - Block                    216 ( 2.9%)             3\n-ast-stats-1 Pat                      616 ( 8.3%)             7            88\n+ast-stats-1 - Lit                      144 ( 2.0%)             2\n+ast-stats-1 - Block                    216 ( 3.0%)             3\n+ast-stats-1 Pat                      616 ( 8.6%)             7            88\n ast-stats-1 - Struct                    88 ( 1.2%)             1\n ast-stats-1 - Wild                      88 ( 1.2%)             1\n-ast-stats-1 - Ident                    440 ( 5.9%)             5\n-ast-stats-1 PathSegment              720 ( 9.7%)            30            24\n-ast-stats-1 Ty                       896 (12.1%)            14            64\n+ast-stats-1 - Ident                    440 ( 6.1%)             5\n+ast-stats-1 PathSegment              720 (10.0%)            30            24\n+ast-stats-1 Ty                       896 (12.5%)            14            64\n ast-stats-1 - Ptr                       64 ( 0.9%)             1\n ast-stats-1 - Ref                       64 ( 0.9%)             1\n-ast-stats-1 - ImplicitSelf             128 ( 1.7%)             2\n-ast-stats-1 - Path                     640 ( 8.6%)            10\n-ast-stats-1 Item                   1_656 (22.3%)             9           184\n-ast-stats-1 - Trait                    184 ( 2.5%)             1\n-ast-stats-1 - Enum                     184 ( 2.5%)             1\n-ast-stats-1 - ForeignMod               184 ( 2.5%)             1\n-ast-stats-1 - Impl                     184 ( 2.5%)             1\n-ast-stats-1 - Fn                       368 ( 5.0%)             2\n-ast-stats-1 - Use                      552 ( 7.4%)             3\n+ast-stats-1 - ImplicitSelf             128 ( 1.8%)             2\n+ast-stats-1 - Path                     640 ( 8.9%)            10\n+ast-stats-1 Item                   1_512 (21.0%)             9           168\n+ast-stats-1 - Trait                    168 ( 2.3%)             1\n+ast-stats-1 - Enum                     168 ( 2.3%)             1\n+ast-stats-1 - ForeignMod               168 ( 2.3%)             1\n+ast-stats-1 - Impl                     168 ( 2.3%)             1\n+ast-stats-1 - Fn                       336 ( 4.7%)             2\n+ast-stats-1 - Use                      504 ( 7.0%)             3\n ast-stats-1 ----------------------------------------------------------------\n-ast-stats-1 Total                  7_416\n+ast-stats-1 Total                  7_192\n ast-stats-1\n ast-stats-2 POST EXPANSION AST STATS\n ast-stats-2 Name                Accumulated Size         Count     Item Size\n ast-stats-2 ----------------------------------------------------------------\n ast-stats-2 ExprField                 48 ( 0.6%)             1            48\n+ast-stats-2 WherePredicate            56 ( 0.7%)             1            56\n+ast-stats-2 - BoundPredicate            56 ( 0.7%)             1\n ast-stats-2 GenericArgs               56 ( 0.7%)             1            56\n ast-stats-2 - AngleBracketed            56 ( 0.7%)             1\n ast-stats-2 Crate                     56 ( 0.7%)             1            56\n ast-stats-2 Local                     72 ( 0.9%)             1            72\n-ast-stats-2 WherePredicate            72 ( 0.9%)             1            72\n-ast-stats-2 - BoundPredicate            72 ( 0.9%)             1\n ast-stats-2 Arm                       96 ( 1.2%)             2            48\n ast-stats-2 ForeignItem               96 ( 1.2%)             1            96\n ast-stats-2 - Fn                        96 ( 1.2%)             1\n@@ -79,41 +79,41 @@ ast-stats-2 - Semi                      32 ( 0.4%)             1\n ast-stats-2 - Expr                      96 ( 1.2%)             3\n ast-stats-2 Param                    160 ( 2.0%)             4            40\n ast-stats-2 FnDecl                   200 ( 2.5%)             5            40\n-ast-stats-2 Variant                  240 ( 3.0%)             2           120\n-ast-stats-2 GenericBound             288 ( 3.6%)             4            72\n-ast-stats-2 - Trait                    288 ( 3.6%)             4\n-ast-stats-2 Block                    288 ( 3.6%)             6            48\n-ast-stats-2 AssocItem                416 ( 5.1%)             4           104\n+ast-stats-2 GenericBound             224 ( 2.9%)             4            56\n+ast-stats-2 - Trait                    224 ( 2.9%)             4\n+ast-stats-2 Variant                  240 ( 3.1%)             2           120\n+ast-stats-2 Block                    288 ( 3.7%)             6            48\n+ast-stats-2 AssocItem                416 ( 5.3%)             4           104\n ast-stats-2 - Type                     208 ( 2.6%)             2\n ast-stats-2 - Fn                       208 ( 2.6%)             2\n-ast-stats-2 GenericParam             480 ( 5.9%)             5            96\n-ast-stats-2 Pat                      616 ( 7.6%)             7            88\n+ast-stats-2 GenericParam             480 ( 6.1%)             5            96\n+ast-stats-2 Pat                      616 ( 7.8%)             7            88\n ast-stats-2 - Struct                    88 ( 1.1%)             1\n ast-stats-2 - Wild                      88 ( 1.1%)             1\n-ast-stats-2 - Ident                    440 ( 5.4%)             5\n-ast-stats-2 Expr                     648 ( 8.0%)             9            72\n+ast-stats-2 - Ident                    440 ( 5.6%)             5\n+ast-stats-2 Expr                     648 ( 8.2%)             9            72\n ast-stats-2 - Path                      72 ( 0.9%)             1\n ast-stats-2 - Match                     72 ( 0.9%)             1\n ast-stats-2 - Struct                    72 ( 0.9%)             1\n ast-stats-2 - InlineAsm                 72 ( 0.9%)             1\n ast-stats-2 - Lit                      144 ( 1.8%)             2\n ast-stats-2 - Block                    216 ( 2.7%)             3\n-ast-stats-2 PathSegment              792 ( 9.8%)            33            24\n-ast-stats-2 Ty                       896 (11.0%)            14            64\n+ast-stats-2 PathSegment              792 (10.1%)            33            24\n+ast-stats-2 Ty                       896 (11.4%)            14            64\n ast-stats-2 - Ptr                       64 ( 0.8%)             1\n ast-stats-2 - Ref                       64 ( 0.8%)             1\n ast-stats-2 - ImplicitSelf             128 ( 1.6%)             2\n-ast-stats-2 - Path                     640 ( 7.9%)            10\n-ast-stats-2 Item                   2_024 (25.0%)            11           184\n-ast-stats-2 - Trait                    184 ( 2.3%)             1\n-ast-stats-2 - Enum                     184 ( 2.3%)             1\n-ast-stats-2 - ExternCrate              184 ( 2.3%)             1\n-ast-stats-2 - ForeignMod               184 ( 2.3%)             1\n-ast-stats-2 - Impl                     184 ( 2.3%)             1\n-ast-stats-2 - Fn                       368 ( 4.5%)             2\n-ast-stats-2 - Use                      736 ( 9.1%)             4\n+ast-stats-2 - Path                     640 ( 8.1%)            10\n+ast-stats-2 Item                   1_848 (23.5%)            11           168\n+ast-stats-2 - Trait                    168 ( 2.1%)             1\n+ast-stats-2 - Enum                     168 ( 2.1%)             1\n+ast-stats-2 - ExternCrate              168 ( 2.1%)             1\n+ast-stats-2 - ForeignMod               168 ( 2.1%)             1\n+ast-stats-2 - Impl                     168 ( 2.1%)             1\n+ast-stats-2 - Fn                       336 ( 4.3%)             2\n+ast-stats-2 - Use                      672 ( 8.6%)             4\n ast-stats-2 ----------------------------------------------------------------\n-ast-stats-2 Total                  8_112\n+ast-stats-2 Total                  7_856\n ast-stats-2\n hir-stats HIR STATS\n hir-stats Name                Accumulated Size         Count     Item Size"}]}