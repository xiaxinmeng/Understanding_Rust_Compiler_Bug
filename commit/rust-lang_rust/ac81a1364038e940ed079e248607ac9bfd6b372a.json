{"sha": "ac81a1364038e940ed079e248607ac9bfd6b372a", "node_id": "C_kwDOAAsO6NoAKGFjODFhMTM2NDAzOGU5NDBlZDA3OWUyNDg2MDdhYzliZmQ2YjM3MmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-13T07:11:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-13T07:11:22Z"}, "message": "Rollup merge of #92334 - dtolnay:rustdocmatcher, r=camelid,GuillaumeGomez\n\nrustdoc: Preserve rendering of macro_rules matchers when possible\n\nFixes #92331. This approach restores the behavior prior to #86282 **if** the matcher token held by the compiler **and** the matcher token found in the source code are identical TokenTrees. Thus #86208 remains fixed, but without regressing formatting for the vast majority of macros which are not macro-generated.", "tree": {"sha": "f9564587c213bc1da502f34e0b126cde87b02533", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9564587c213bc1da502f34e0b126cde87b02533"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac81a1364038e940ed079e248607ac9bfd6b372a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh39CaCRBK7hj4Ov3rIwAArlsIACJknZvLBMlIovMNaBem0S8L\nR/plcLkASXH+D1+OAEju7iNl3qHbT3HQ45lFnvcoXVQyUIiHhIAlctU66FaOvrdh\niJdwy7j4d7ZumBhxUawDE4y5fQbxkOUzC7mUDR5xkYUshauX/ojCT95ALyadEwWT\nzANS1ACiWKUVLXfzQtvoMtxXt9qHmpGvJILVWN7ksQP8DnH+rqkxW+TRwH093f1/\nerhBUoZS2e0pVREgNsnzgqYjRV3K/mVjnErUczDQntlAB2zp1RGF2NY8IeRpvnNx\n8ayqEun/ONln8OLn7cMXd+f34HF3u8OzB61A/DHupm4Kz4j+blBIW/Ibm0ePvPU=\n=Mi5Z\n-----END PGP SIGNATURE-----\n", "payload": "tree f9564587c213bc1da502f34e0b126cde87b02533\nparent f84d35f0b83d29f827215991963481002abe9b48\nparent 0f8415b8e1d93de7b6673298c9f10c709742d9ab\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642057882 +0100\ncommitter GitHub <noreply@github.com> 1642057882 +0100\n\nRollup merge of #92334 - dtolnay:rustdocmatcher, r=camelid,GuillaumeGomez\n\nrustdoc: Preserve rendering of macro_rules matchers when possible\n\nFixes #92331. This approach restores the behavior prior to #86282 **if** the matcher token held by the compiler **and** the matcher token found in the source code are identical TokenTrees. Thus #86208 remains fixed, but without regressing formatting for the vast majority of macros which are not macro-generated.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac81a1364038e940ed079e248607ac9bfd6b372a", "html_url": "https://github.com/rust-lang/rust/commit/ac81a1364038e940ed079e248607ac9bfd6b372a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac81a1364038e940ed079e248607ac9bfd6b372a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f84d35f0b83d29f827215991963481002abe9b48", "url": "https://api.github.com/repos/rust-lang/rust/commits/f84d35f0b83d29f827215991963481002abe9b48", "html_url": "https://github.com/rust-lang/rust/commit/f84d35f0b83d29f827215991963481002abe9b48"}, {"sha": "0f8415b8e1d93de7b6673298c9f10c709742d9ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f8415b8e1d93de7b6673298c9f10c709742d9ab", "html_url": "https://github.com/rust-lang/rust/commit/0f8415b8e1d93de7b6673298c9f10c709742d9ab"}], "stats": {"total": 107, "additions": 85, "deletions": 22}, "files": [{"sha": "b14430d10e9fc9d4434d6347916f6e02480a559e", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ac81a1364038e940ed079e248607ac9bfd6b372a/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81a1364038e940ed079e248607ac9bfd6b372a/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=ac81a1364038e940ed079e248607ac9bfd6b372a", "patch": "@@ -17,6 +17,8 @@ use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n+use rustc_session::parse::ParseSess;\n+use rustc_span::source_map::FilePathMapping;\n use rustc_span::symbol::{kw, sym, Symbol};\n use std::fmt::Write as _;\n use std::mem;\n@@ -486,20 +488,67 @@ crate const DOC_RUST_LANG_ORG_CHANNEL: &str = env!(\"DOC_RUST_LANG_ORG_CHANNEL\");\n /// Render a sequence of macro arms in a format suitable for displaying to the user\n /// as part of an item declaration.\n pub(super) fn render_macro_arms<'a>(\n+    tcx: TyCtxt<'_>,\n     matchers: impl Iterator<Item = &'a TokenTree>,\n     arm_delim: &str,\n ) -> String {\n     let mut out = String::new();\n     for matcher in matchers {\n-        writeln!(out, \"    {} => {{ ... }}{}\", render_macro_matcher(matcher), arm_delim).unwrap();\n+        writeln!(out, \"    {} => {{ ... }}{}\", render_macro_matcher(tcx, matcher), arm_delim)\n+            .unwrap();\n     }\n     out\n }\n \n /// Render a macro matcher in a format suitable for displaying to the user\n /// as part of an item declaration.\n-pub(super) fn render_macro_matcher(matcher: &TokenTree) -> String {\n-    rustc_ast_pretty::pprust::tt_to_string(matcher)\n+pub(super) fn render_macro_matcher(tcx: TyCtxt<'_>, matcher: &TokenTree) -> String {\n+    if let Some(snippet) = snippet_equal_to_token(tcx, matcher) {\n+        snippet\n+    } else {\n+        rustc_ast_pretty::pprust::tt_to_string(matcher)\n+    }\n+}\n+\n+/// Find the source snippet for this token's Span, reparse it, and return the\n+/// snippet if the reparsed TokenTree matches the argument TokenTree.\n+fn snippet_equal_to_token(tcx: TyCtxt<'_>, matcher: &TokenTree) -> Option<String> {\n+    // Find what rustc thinks is the source snippet.\n+    // This may not actually be anything meaningful if this matcher was itself\n+    // generated by a macro.\n+    let source_map = tcx.sess.source_map();\n+    let span = matcher.span();\n+    let snippet = source_map.span_to_snippet(span).ok()?;\n+\n+    // Create a Parser.\n+    let sess = ParseSess::new(FilePathMapping::empty());\n+    let file_name = source_map.span_to_filename(span);\n+    let mut parser =\n+        match rustc_parse::maybe_new_parser_from_source_str(&sess, file_name, snippet.clone()) {\n+            Ok(parser) => parser,\n+            Err(diagnostics) => {\n+                for mut diagnostic in diagnostics {\n+                    diagnostic.cancel();\n+                }\n+                return None;\n+            }\n+        };\n+\n+    // Reparse a single token tree.\n+    let mut reparsed_trees = match parser.parse_all_token_trees() {\n+        Ok(reparsed_trees) => reparsed_trees,\n+        Err(mut diagnostic) => {\n+            diagnostic.cancel();\n+            return None;\n+        }\n+    };\n+    if reparsed_trees.len() != 1 {\n+        return None;\n+    }\n+    let reparsed_tree = reparsed_trees.pop().unwrap();\n+\n+    // Compare against the original tree.\n+    if reparsed_tree.eq_unspanned(matcher) { Some(snippet) } else { None }\n }\n \n pub(super) fn display_macro_source(\n@@ -514,21 +563,21 @@ pub(super) fn display_macro_source(\n     let matchers = tts.chunks(4).map(|arm| &arm[0]);\n \n     if def.macro_rules {\n-        format!(\"macro_rules! {} {{\\n{}}}\", name, render_macro_arms(matchers, \";\"))\n+        format!(\"macro_rules! {} {{\\n{}}}\", name, render_macro_arms(cx.tcx, matchers, \";\"))\n     } else {\n         if matchers.len() <= 1 {\n             format!(\n                 \"{}macro {}{} {{\\n    ...\\n}}\",\n                 vis.to_src_with_space(cx.tcx, def_id),\n                 name,\n-                matchers.map(render_macro_matcher).collect::<String>(),\n+                matchers.map(|matcher| render_macro_matcher(cx.tcx, matcher)).collect::<String>(),\n             )\n         } else {\n             format!(\n                 \"{}macro {} {{\\n{}}}\",\n                 vis.to_src_with_space(cx.tcx, def_id),\n                 name,\n-                render_macro_arms(matchers, \",\"),\n+                render_macro_arms(cx.tcx, matchers, \",\"),\n             )\n         }\n     }"}, {"sha": "94ade31b5e5f4ce4f12bc5c5a830dc0d7cd400da", "filename": "src/test/rustdoc/decl_macro.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ac81a1364038e940ed079e248607ac9bfd6b372a/src%2Ftest%2Frustdoc%2Fdecl_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81a1364038e940ed079e248607ac9bfd6b372a/src%2Ftest%2Frustdoc%2Fdecl_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdecl_macro.rs?ref=ac81a1364038e940ed079e248607ac9bfd6b372a", "patch": "@@ -9,7 +9,7 @@ pub macro my_macro() {\n \n }\n \n-// @has decl_macro/macro.my_macro_2.html //pre 'pub macro my_macro_2($($tok : tt) *) {'\n+// @has decl_macro/macro.my_macro_2.html //pre 'pub macro my_macro_2($($tok:tt)*) {'\n // @has - //pre '...'\n // @has - //pre '}'\n pub macro my_macro_2($($tok:tt)*) {\n@@ -18,8 +18,8 @@ pub macro my_macro_2($($tok:tt)*) {\n \n // @has decl_macro/macro.my_macro_multi.html //pre 'pub macro my_macro_multi {'\n // @has - //pre '(_) => { ... },'\n-// @has - //pre '($foo : ident.$bar : expr) => { ... },'\n-// @has - //pre '($($foo : literal), +) => { ... },'\n+// @has - //pre '($foo:ident . $bar:expr) => { ... },'\n+// @has - //pre '($($foo:literal),+) => { ... },'\n // @has - //pre '}'\n pub macro my_macro_multi {\n     (_) => {\n@@ -33,7 +33,7 @@ pub macro my_macro_multi {\n     }\n }\n \n-// @has decl_macro/macro.by_example_single.html //pre 'pub macro by_example_single($foo : expr) {'\n+// @has decl_macro/macro.by_example_single.html //pre 'pub macro by_example_single($foo:expr) {'\n // @has - //pre '...'\n // @has - //pre '}'\n pub macro by_example_single {\n@@ -42,12 +42,12 @@ pub macro by_example_single {\n \n mod a {\n     mod b {\n-        // @has decl_macro/a/b/macro.by_example_vis.html //pre 'pub(super) macro by_example_vis($foo : expr) {'\n+        // @has decl_macro/a/b/macro.by_example_vis.html //pre 'pub(super) macro by_example_vis($foo:expr) {'\n         pub(in super) macro by_example_vis {\n             ($foo:expr) => {}\n         }\n         mod c {\n-            // @has decl_macro/a/b/c/macro.by_example_vis_named.html //pre 'pub(in a) macro by_example_vis_named($foo : expr) {'\n+            // @has decl_macro/a/b/c/macro.by_example_vis_named.html //pre 'pub(in a) macro by_example_vis_named($foo:expr) {'\n             pub(in a) macro by_example_vis_named {\n                 ($foo:expr) => {}\n             }"}, {"sha": "25d8bc3ec62817243fcb29657566ea1b89b2a0d1", "filename": "src/test/rustdoc/macro-generated-macro.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ac81a1364038e940ed079e248607ac9bfd6b372a/src%2Ftest%2Frustdoc%2Fmacro-generated-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81a1364038e940ed079e248607ac9bfd6b372a/src%2Ftest%2Frustdoc%2Fmacro-generated-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacro-generated-macro.rs?ref=ac81a1364038e940ed079e248607ac9bfd6b372a", "patch": "@@ -0,0 +1,14 @@\n+macro_rules! outer {\n+    ($($matcher:tt)*) => {\n+        #[macro_export]\n+        macro_rules! inner {\n+            (<= $($matcher)* =>) => {};\n+        }\n+    }\n+}\n+\n+// @has macro_generated_macro/macro.inner.html //pre 'macro_rules! inner {'\n+// @has - //pre '(<= type $($i : ident) :: * + $e : expr =>) => { ... };'\n+outer!(type $($i:ident)::* + $e:expr);\n+\n+inner!(<= type foo::bar + x.sort() =>);"}, {"sha": "ae0cf7a14789d78103c6cb4585ea36ab650153f7", "filename": "src/test/rustdoc/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac81a1364038e940ed079e248607ac9bfd6b372a/src%2Ftest%2Frustdoc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81a1364038e940ed079e248607ac9bfd6b372a/src%2Ftest%2Frustdoc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacros.rs?ref=ac81a1364038e940ed079e248607ac9bfd6b372a", "patch": "@@ -1,7 +1,7 @@\n // @has macros/macro.my_macro.html //pre 'macro_rules! my_macro {'\n // @has - //pre '() => { ... };'\n-// @has - //pre '($a : tt) => { ... };'\n-// @has - //pre '($e : expr) => { ... };'\n+// @has - //pre '($a:tt) => { ... };'\n+// @has - //pre '($e:expr) => { ... };'\n #[macro_export]\n macro_rules! my_macro {\n     () => [];\n@@ -12,8 +12,8 @@ macro_rules! my_macro {\n // Check that exported macro defined in a module are shown at crate root.\n // @has macros/macro.my_sub_macro.html //pre 'macro_rules! my_sub_macro {'\n // @has - //pre '() => { ... };'\n-// @has - //pre '($a : tt) => { ... };'\n-// @has - //pre '($e : expr) => { ... };'\n+// @has - //pre '($a:tt) => { ... };'\n+// @has - //pre '($e:expr) => { ... };'\n mod sub {\n     #[macro_export]\n     macro_rules! my_sub_macro {"}, {"sha": "aea9b9f2b395dc1b85b63f0c891026607df629db", "filename": "src/test/rustdoc/reexports-priv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac81a1364038e940ed079e248607ac9bfd6b372a/src%2Ftest%2Frustdoc%2Freexports-priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81a1364038e940ed079e248607ac9bfd6b372a/src%2Ftest%2Frustdoc%2Freexports-priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Freexports-priv.rs?ref=ac81a1364038e940ed079e248607ac9bfd6b372a", "patch": "@@ -5,7 +5,7 @@\n \n extern crate reexports;\n \n-// @has 'foo/macro.addr_of.html' '//*[@class=\"docblock item-decl\"]' 'pub macro addr_of($place : expr) {'\n+// @has 'foo/macro.addr_of.html' '//*[@class=\"docblock item-decl\"]' 'pub macro addr_of($place:expr) {'\n pub use reexports::addr_of;\n // @!has 'foo/macro.addr_of_crate.html'\n pub(crate) use reexports::addr_of_crate;\n@@ -61,11 +61,11 @@ use reexports::UnionLocal;\n \n pub mod outer {\n     pub mod inner {\n-        // @has 'foo/outer/inner/macro.addr_of.html' '//*[@class=\"docblock item-decl\"]' 'pub macro addr_of($place : expr) {'\n+        // @has 'foo/outer/inner/macro.addr_of.html' '//*[@class=\"docblock item-decl\"]' 'pub macro addr_of($place:expr) {'\n         pub use reexports::addr_of;\n-        // @has 'foo/outer/inner/macro.addr_of_crate.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) macro addr_of_crate($place : expr) {'\n+        // @has 'foo/outer/inner/macro.addr_of_crate.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) macro addr_of_crate($place:expr) {'\n         pub(crate) use reexports::addr_of_crate;\n-        // @has 'foo/outer/inner/macro.addr_of_super.html' '//*[@class=\"docblock item-decl\"]' 'pub(in outer) macro addr_of_super($place : expr) {'\n+        // @has 'foo/outer/inner/macro.addr_of_super.html' '//*[@class=\"docblock item-decl\"]' 'pub(in outer) macro addr_of_super($place:expr) {'\n         pub(super) use reexports::addr_of_super;\n         // @!has 'foo/outer/inner/macro.addr_of_self.html'\n         pub(self) use reexports::addr_of_self;"}, {"sha": "7abcbfb618122194125511eab7812079367b65e8", "filename": "src/test/rustdoc/reexports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac81a1364038e940ed079e248607ac9bfd6b372a/src%2Ftest%2Frustdoc%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac81a1364038e940ed079e248607ac9bfd6b372a/src%2Ftest%2Frustdoc%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Freexports.rs?ref=ac81a1364038e940ed079e248607ac9bfd6b372a", "patch": "@@ -4,7 +4,7 @@\n \n extern crate reexports;\n \n-// @has 'foo/macro.addr_of.html' '//*[@class=\"docblock item-decl\"]' 'pub macro addr_of($place : expr) {'\n+// @has 'foo/macro.addr_of.html' '//*[@class=\"docblock item-decl\"]' 'pub macro addr_of($place:expr) {'\n pub use reexports::addr_of;\n // @!has 'foo/macro.addr_of_crate.html'\n pub(crate) use reexports::addr_of_crate;\n@@ -60,7 +60,7 @@ use reexports::UnionLocal;\n \n pub mod outer {\n     pub mod inner {\n-        // @has 'foo/outer/inner/macro.addr_of.html' '//*[@class=\"docblock item-decl\"]' 'pub macro addr_of($place : expr) {'\n+        // @has 'foo/outer/inner/macro.addr_of.html' '//*[@class=\"docblock item-decl\"]' 'pub macro addr_of($place:expr) {'\n         pub use reexports::addr_of;\n         // @!has 'foo/outer/inner/macro.addr_of_crate.html'\n         pub(crate) use reexports::addr_of_crate;"}]}