{"sha": "57518153147ad53639f16cc940d219dc582c550a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NTE4MTUzMTQ3YWQ1MzYzOWYxNmNjOTQwZDIxOWRjNTgyYzU1MGE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-27T19:03:19Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-27T19:03:19Z"}, "message": "Add runnables", "tree": {"sha": "5c1708cf8ea4e2344c8dfc96af82343be0b0271c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c1708cf8ea4e2344c8dfc96af82343be0b0271c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57518153147ad53639f16cc940d219dc582c550a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57518153147ad53639f16cc940d219dc582c550a", "html_url": "https://github.com/rust-lang/rust/commit/57518153147ad53639f16cc940d219dc582c550a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57518153147ad53639f16cc940d219dc582c550a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b79c8b6d8a3b38c94de992a54ffb9055c1ad6f31", "url": "https://api.github.com/repos/rust-lang/rust/commits/b79c8b6d8a3b38c94de992a54ffb9055c1ad6f31", "html_url": "https://github.com/rust-lang/rust/commit/b79c8b6d8a3b38c94de992a54ffb9055c1ad6f31"}], "stats": {"total": 117, "additions": 115, "deletions": 2}, "files": [{"sha": "3d398a74c48c41f39b53c21ae6f4d8b1c8a972bb", "filename": "crates/libeditor/src/scope.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/57518153147ad53639f16cc940d219dc582c550a/crates%2Flibeditor%2Fsrc%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57518153147ad53639f16cc940d219dc582c550a/crates%2Flibeditor%2Fsrc%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fscope.rs?ref=57518153147ad53639f16cc940d219dc582c550a", "patch": "@@ -61,7 +61,19 @@ fn compute_expr_scopes(expr: ast::Expr, scopes: &mut FnScopes, scope: ScopeId) {\n                 compute_block_scopes(block, scopes, scope);\n             }\n         }\n-        // ForExpr(e) => TODO,\n+        ast::Expr::ForExpr(e) => {\n+            if let Some(expr) = e.iterable() {\n+                compute_expr_scopes(expr, scopes, scope);\n+            }\n+            let mut scope = scope;\n+            if let Some(pat) = e.pat() {\n+                scope = scopes.new_scope(scope);\n+                scopes.add_bindings(scope, pat);\n+            }\n+            if let Some(block) = e.body() {\n+                compute_block_scopes(block, scopes, scope);\n+            }\n+        },\n         _ => {\n             expr.syntax().children()\n                 .filter_map(ast::Expr::cast)"}, {"sha": "d8c24610db7209fa28a96df3d473b4eaa57a2526", "filename": "crates/libeditor/tests/test.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57518153147ad53639f16cc940d219dc582c550a/crates%2Flibeditor%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57518153147ad53639f16cc940d219dc582c550a/crates%2Flibeditor%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Ftests%2Ftest.rs?ref=57518153147ad53639f16cc940d219dc582c550a", "patch": "@@ -286,6 +286,14 @@ fn quux() {\n }\n \", r#\"[CompletionItem { name: \"b\" },\n        CompletionItem { name: \"a\" }]\"#);\n+\n+    do_check(r\"\n+fn quux() {\n+    for x in &[1, 2, 3] {\n+        <|>\n+    }\n+}\n+\", r#\"[CompletionItem { name: \"x\" }]\"#);\n }\n \n fn file(text: &str) -> File {"}, {"sha": "f99d1274ab73a0409f275785a6bf2dfc64c756cc", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57518153147ad53639f16cc940d219dc582c550a/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57518153147ad53639f16cc940d219dc582c550a/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=57518153147ad53639f16cc940d219dc582c550a", "patch": "@@ -539,6 +539,14 @@ impl<'a> AstNode<'a> for ForExpr<'a> {\n }\n \n impl<'a> ForExpr<'a> {\n+    pub fn pat(self) -> Option<Pat<'a>> {\n+        super::child_opt(self)\n+    }\n+\n+    pub fn iterable(self) -> Option<Expr<'a>> {\n+        super::child_opt(self)\n+    }\n+\n     pub fn body(self) -> Option<Block<'a>> {\n         super::child_opt(self)\n     }"}, {"sha": "a98e9e2fdcf6e37187fe1a8ebe2373babdf35e85", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57518153147ad53639f16cc940d219dc582c550a/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/57518153147ad53639f16cc940d219dc582c550a/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=57518153147ad53639f16cc940d219dc582c550a", "patch": "@@ -344,7 +344,11 @@ Grammar(\n             options: [ [\"body\", \"Block\"] ]\n         ),\n         \"ForExpr\": (\n-            options: [ [\"body\", \"Block\"] ]\n+            options: [\n+                [\"pat\", \"Pat\"],\n+                [\"iterable\", \"Expr\"],\n+                [\"body\", \"Block\"] ,\n+            ]\n         ),\n         \"WhileExpr\": (\n             options: ["}, {"sha": "583af0900ed8330f3e4467a8bf61fa09def9dc3c", "filename": "crates/server/src/main_loop/handlers.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/57518153147ad53639f16cc940d219dc582c550a/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57518153147ad53639f16cc940d219dc582c550a/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=57518153147ad53639f16cc940d219dc582c550a", "patch": "@@ -204,6 +204,56 @@ pub fn handle_code_action(\n     return Ok(Some(res));\n }\n \n+pub fn handle_runnables(\n+    world: ServerWorld,\n+    params: req::RunnablesParams,\n+) -> Result<Vec<req::Runnable>> {\n+    let file_id = params.text_document.try_conv_with(&world)?;\n+    let file = world.analysis().file_syntax(file_id)?;\n+    let line_index = world.analysis().file_line_index(file_id)?;\n+    let offset = params.position.map(|it| it.conv_with(&line_index));\n+    let mut res = Vec::new();\n+    for runnable in libeditor::runnables(&file) {\n+        if let Some(offset) = offset {\n+            if !contains_offset_nonstrict(runnable.range, offset) {\n+                continue;\n+            }\n+        }\n+\n+        let r = req::Runnable {\n+            range: runnable.range.conv_with(&line_index),\n+            label: match &runnable.kind {\n+                libeditor::RunnableKind::Test { name } =>\n+                    format!(\"test {}\", name),\n+                libeditor::RunnableKind::Bin =>\n+                    \"run binary\".to_string(),\n+            },\n+            bin: \"cargo\".to_string(),\n+            args: match runnable.kind {\n+                libeditor::RunnableKind::Test { name } => {\n+                    vec![\n+                        \"test\".to_string(),\n+                        \"--\".to_string(),\n+                        name,\n+                        \"--nocapture\".to_string(),\n+                    ]\n+                }\n+                libeditor::RunnableKind::Bin => vec![\"run\".to_string()]\n+            },\n+            env: {\n+                let mut m = HashMap::new();\n+                m.insert(\n+                    \"RUST_BACKTRACE\".to_string(),\n+                    \"short\".to_string(),\n+                );\n+                m\n+            }\n+        };\n+        res.push(r);\n+    }\n+    return Ok(res);\n+}\n+\n pub fn handle_workspace_symbol(\n     world: ServerWorld,\n     params: req::WorkspaceSymbolParams,"}, {"sha": "6d6ca6ae9aee192f1a973c8b13f41c0c75b2c97e", "filename": "crates/server/src/main_loop/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57518153147ad53639f16cc940d219dc582c550a/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57518153147ad53639f16cc940d219dc582c550a/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs?ref=57518153147ad53639f16cc940d219dc582c550a", "patch": "@@ -29,6 +29,7 @@ use {\n         handle_parent_module,\n         handle_join_lines,\n         handle_completion,\n+        handle_runnables,\n     },\n };\n \n@@ -138,6 +139,9 @@ fn on_request(\n     handle_request_on_threadpool::<req::CodeActionRequest>(\n         &mut req, pool, world, sender, handle_code_action,\n     )?;\n+    handle_request_on_threadpool::<req::Runnables>(\n+        &mut req, pool, world, sender, handle_runnables,\n+    )?;\n     handle_request_on_threadpool::<req::WorkspaceSymbol>(\n         &mut req, pool, world, sender, handle_workspace_symbol,\n     )?;"}, {"sha": "e4138abba88dd1d8a9f7a6cc222937a892093adb", "filename": "crates/server/src/req.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/57518153147ad53639f16cc940d219dc582c550a/crates%2Fserver%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57518153147ad53639f16cc940d219dc582c550a/crates%2Fserver%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Freq.rs?ref=57518153147ad53639f16cc940d219dc582c550a", "patch": "@@ -1,3 +1,5 @@\n+use std::collections::HashMap;\n+\n use serde::{ser::Serialize, de::DeserializeOwned};\n use languageserver_types::{TextDocumentIdentifier, Range, Url, Position, Location};\n use url_serde;\n@@ -134,3 +136,28 @@ pub struct JoinLinesParams {\n     pub text_document: TextDocumentIdentifier,\n     pub range: Range,\n }\n+\n+pub enum Runnables {}\n+\n+impl Request for Runnables {\n+    type Params = RunnablesParams;\n+    type Result = Vec<Runnable>;\n+    const METHOD: &'static str = \"m/joinLines\";\n+}\n+\n+#[derive(Deserialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct RunnablesParams {\n+    pub text_document: TextDocumentIdentifier,\n+    pub position: Option<Position>,\n+}\n+\n+#[derive(Serialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct Runnable {\n+    pub range: Range,\n+    pub label: String,\n+    pub bin: String,\n+    pub args: Vec<String>,\n+    pub env: HashMap<String, String>,\n+}"}]}