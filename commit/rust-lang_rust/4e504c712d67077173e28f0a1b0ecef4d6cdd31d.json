{"sha": "4e504c712d67077173e28f0a1b0ecef4d6cdd31d", "node_id": "C_kwDOAAsO6NoAKDRlNTA0YzcxMmQ2NzA3NzE3M2UyOGYwYTFiMGVjZWY0ZDZjZGQzMWQ", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-11-18T13:51:24Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-11-18T13:51:24Z"}, "message": "deduplicate tests", "tree": {"sha": "f1c73d3d211edfd352a0610fef5193b31cdd3bd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1c73d3d211edfd352a0610fef5193b31cdd3bd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e504c712d67077173e28f0a1b0ecef4d6cdd31d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e504c712d67077173e28f0a1b0ecef4d6cdd31d", "html_url": "https://github.com/rust-lang/rust/commit/4e504c712d67077173e28f0a1b0ecef4d6cdd31d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e504c712d67077173e28f0a1b0ecef4d6cdd31d/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30117a1dbb843da1d5ab1258e89a3ed0b1940475", "url": "https://api.github.com/repos/rust-lang/rust/commits/30117a1dbb843da1d5ab1258e89a3ed0b1940475", "html_url": "https://github.com/rust-lang/rust/commit/30117a1dbb843da1d5ab1258e89a3ed0b1940475"}], "stats": {"total": 48, "additions": 9, "deletions": 39}, "files": [{"sha": "1c8316f87fa073ef9bdf16e5503df9942beaaf0d", "filename": "src/test/ui/coherence/issue-100191-2.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/30117a1dbb843da1d5ab1258e89a3ed0b1940475/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30117a1dbb843da1d5ab1258e89a3ed0b1940475/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191-2.rs?ref=30117a1dbb843da1d5ab1258e89a3ed0b1940475", "patch": "@@ -1,12 +0,0 @@\n-//~ ERROR overflow evaluating the requirement `T: Trait<_>`\n-\n-#![feature(specialization, with_negative_coherence)]\n-#![allow(incomplete_features)]\n-\n-pub trait Trait<T> {}\n-\n-default impl<T, U> Trait<T> for U {}\n-\n-impl<T> Trait<<T as Iterator>::Item> for T {}\n-\n-fn main() {}"}, {"sha": "e8597fde54d3ba133ec922311d78233642e949cc", "filename": "src/test/ui/coherence/issue-100191.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/30117a1dbb843da1d5ab1258e89a3ed0b1940475/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30117a1dbb843da1d5ab1258e89a3ed0b1940475/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191.rs?ref=30117a1dbb843da1d5ab1258e89a3ed0b1940475", "patch": "@@ -1,21 +0,0 @@\n-#![crate_type = \"lib\"]\n-#![feature(specialization, with_negative_coherence)]\n-#![allow(incomplete_features)]\n-\n-trait X {}\n-trait Y: X {}\n-trait Z {\n-    type Assoc: Y;\n-}\n-struct A<T>(T);\n-\n-impl<T> Y for T where T: X {}\n-impl<T: X> Z for A<T> {\n-    type Assoc = T;\n-}\n-\n-// this impl is invalid, but causes an ICE anyway\n-impl<T> From<<A<T> as Z>::Assoc> for T {}\n-//~^ ERROR type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-\n-fn main() {}"}, {"sha": "26db9d7c9974982e38c2b5a01283ce872f286985", "filename": "src/test/ui/specialization/issue-43037.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e504c712d67077173e28f0a1b0ecef4d6cdd31d/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e504c712d67077173e28f0a1b0ecef4d6cdd31d/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.current.stderr?ref=4e504c712d67077173e28f0a1b0ecef4d6cdd31d", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/issue-43037.rs:17:6\n+  --> $DIR/issue-43037.rs:19:6\n    |\n LL | impl<T> From<<A<T> as Z>::Assoc> for T {}\n    |      ^ type parameter `T` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/specialization/issue-43037.stderr"}, {"sha": "26db9d7c9974982e38c2b5a01283ce872f286985", "filename": "src/test/ui/specialization/issue-43037.negative.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e504c712d67077173e28f0a1b0ecef4d6cdd31d/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e504c712d67077173e28f0a1b0ecef4d6cdd31d/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.negative.stderr?ref=4e504c712d67077173e28f0a1b0ecef4d6cdd31d", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/issue-100191.rs:18:6\n+  --> $DIR/issue-43037.rs:19:6\n    |\n LL | impl<T> From<<A<T> as Z>::Assoc> for T {}\n    |      ^ type parameter `T` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/coherence/issue-100191.stderr"}, {"sha": "a1e3f998b23701c5a04d86fb76594c0d0d008d89", "filename": "src/test/ui/specialization/issue-43037.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e504c712d67077173e28f0a1b0ecef4d6cdd31d/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e504c712d67077173e28f0a1b0ecef4d6cdd31d/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.rs?ref=4e504c712d67077173e28f0a1b0ecef4d6cdd31d", "patch": "@@ -1,4 +1,6 @@\n+// revisions: current negative\n #![feature(specialization)]\n+#![cfg_attr(negative, feature(with_negative_coherence))]\n #![allow(incomplete_features)]\n \n trait X {}"}, {"sha": "5013559b80ea9ae90fe56f3a5d77503072342208", "filename": "src/test/ui/specialization/issue-45814.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e504c712d67077173e28f0a1b0ecef4d6cdd31d/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e504c712d67077173e28f0a1b0ecef4d6cdd31d/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.current.stderr?ref=4e504c712d67077173e28f0a1b0ecef4d6cdd31d", "patch": "@@ -2,7 +2,7 @@ error[E0275]: overflow evaluating the requirement `T: Trait<_>`\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_45814`)\n note: required for `T` to implement `Trait<_>`\n-  --> $DIR/issue-45814.rs:8:20\n+  --> $DIR/issue-45814.rs:9:20\n    |\n LL | default impl<T, U> Trait<T> for U {}\n    |                    ^^^^^^^^     ^", "previous_filename": "src/test/ui/specialization/issue-45814.stderr"}, {"sha": "5013559b80ea9ae90fe56f3a5d77503072342208", "filename": "src/test/ui/specialization/issue-45814.negative.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e504c712d67077173e28f0a1b0ecef4d6cdd31d/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e504c712d67077173e28f0a1b0ecef4d6cdd31d/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.negative.stderr?ref=4e504c712d67077173e28f0a1b0ecef4d6cdd31d", "patch": "@@ -1,8 +1,8 @@\n error[E0275]: overflow evaluating the requirement `T: Trait<_>`\n    |\n-   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_100191_2`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_45814`)\n note: required for `T` to implement `Trait<_>`\n-  --> $DIR/issue-100191-2.rs:8:20\n+  --> $DIR/issue-45814.rs:9:20\n    |\n LL | default impl<T, U> Trait<T> for U {}\n    |                    ^^^^^^^^     ^", "previous_filename": "src/test/ui/coherence/issue-100191-2.stderr"}, {"sha": "fce236390c2b0e78ef913361fbb234ac87f6d7b7", "filename": "src/test/ui/specialization/issue-45814.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e504c712d67077173e28f0a1b0ecef4d6cdd31d/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e504c712d67077173e28f0a1b0ecef4d6cdd31d/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.rs?ref=4e504c712d67077173e28f0a1b0ecef4d6cdd31d", "patch": "@@ -1,6 +1,7 @@\n //~ ERROR overflow evaluating the requirement `T: Trait<_>`\n-\n+// revisions: current negative\n #![feature(specialization)]\n+#![cfg_attr(negative, feature(with_negative_coherence))]\n #![allow(incomplete_features)]\n \n pub trait Trait<T> {}"}]}