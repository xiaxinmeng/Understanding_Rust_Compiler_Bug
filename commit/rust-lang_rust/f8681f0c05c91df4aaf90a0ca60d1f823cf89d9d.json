{"sha": "f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NjgxZjBjMDVjOTFkZjRhYWY5MGEwY2E2MGQxZjgyM2NmODlkOWQ=", "commit": {"author": {"name": "Denys Otrishko", "email": "shishugi@gmail.com", "date": "2019-07-15T16:30:48Z"}, "committer": {"name": "Denys Otrishko", "email": "shishugi@gmail.com", "date": "2019-07-17T13:59:08Z"}, "message": "rustc_typeck: improve diagnostics for -> _ fn return type\n\nCloses: https://github.com/rust-lang/rust/issues/56132", "tree": {"sha": "44ef6dbdea8bd7fa96ce875799eecd8e07e77518", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44ef6dbdea8bd7fa96ce875799eecd8e07e77518"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEPTkowzwjbi/kT/hRt45kt1W3k4MFAl0vKawACgkQt45kt1W3\nk4OeBg//bR2tOZ3e+P6ZrXc1kXvH16ur3I4pH+cULuzu5oQ2LmV1dLGovIcG7KmL\nHVKRYIdaXYuF/tYXTNsHY9Af8zeY6m4eTt8VD5QYPUy83yAcLAh935XTh1wsFBzs\nx8bIBGQYFMrA27mICiXQ3UOWFS4etsJTVE+FZe66eaYQrOrQUW5OtKv+m8pMJs8h\nATJe/64xKYGSiV0v40aUU9SCwxQtsAx7gTIsm0y5XO4hCgw5yBFerJe3D+O+56p1\nRvV1PJg+T4ujEmRVN/ixD+q8SGZhGyU8KEbvo0hayCTQAdTSmF5zF6sMhoWXtPRH\nCCwSe7Ax2XP2j5UuA8Q5UBEy3rWJbj2yJlsfWNuvOH9UmBpCiORJbOhizp88m9nr\n/BMStfZ3FogSeZk7ERg0zjZN5goWyjxe7hpss9IyU/obqlV/vNjpv3ND5RDMGiJW\n5EHRjCDRff5RwaFZwjlFzCqsNhqXdNY86VFc033rzSzgsktLRN9eGvj6IClOWm9R\n1PPuLlZkB22NCRLk/mqt2FDkv8WHRprYvnOhIEypQ2nq9YFV1gmNiHHAH9U0nJov\nqdlLW2BN+SkFJ6JgHwSA7iRPffORHMUkAk0t5FcwMi1nQ1J1EsmlEBMKpaTDAkQt\nhxisnnu35JwHXNDdGCEd4y/VlaGdZUP+oYMxNia0LSDWMsN8j50=\n=KReN\n-----END PGP SIGNATURE-----", "payload": "tree 44ef6dbdea8bd7fa96ce875799eecd8e07e77518\nparent d9ad04a0f0feb96bc903a00a9ba79d979728edcd\nauthor Denys Otrishko <shishugi@gmail.com> 1563208248 +0300\ncommitter Denys Otrishko <shishugi@gmail.com> 1563371948 +0300\n\nrustc_typeck: improve diagnostics for -> _ fn return type\n\nCloses: https://github.com/rust-lang/rust/issues/56132\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d", "html_url": "https://github.com/rust-lang/rust/commit/f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d/comments", "author": {"login": "lundibundi", "id": 9109612, "node_id": "MDQ6VXNlcjkxMDk2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/9109612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lundibundi", "html_url": "https://github.com/lundibundi", "followers_url": "https://api.github.com/users/lundibundi/followers", "following_url": "https://api.github.com/users/lundibundi/following{/other_user}", "gists_url": "https://api.github.com/users/lundibundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/lundibundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lundibundi/subscriptions", "organizations_url": "https://api.github.com/users/lundibundi/orgs", "repos_url": "https://api.github.com/users/lundibundi/repos", "events_url": "https://api.github.com/users/lundibundi/events{/privacy}", "received_events_url": "https://api.github.com/users/lundibundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lundibundi", "id": 9109612, "node_id": "MDQ6VXNlcjkxMDk2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/9109612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lundibundi", "html_url": "https://github.com/lundibundi", "followers_url": "https://api.github.com/users/lundibundi/followers", "following_url": "https://api.github.com/users/lundibundi/following{/other_user}", "gists_url": "https://api.github.com/users/lundibundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/lundibundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lundibundi/subscriptions", "organizations_url": "https://api.github.com/users/lundibundi/orgs", "repos_url": "https://api.github.com/users/lundibundi/repos", "events_url": "https://api.github.com/users/lundibundi/events{/privacy}", "received_events_url": "https://api.github.com/users/lundibundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9ad04a0f0feb96bc903a00a9ba79d979728edcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9ad04a0f0feb96bc903a00a9ba79d979728edcd", "html_url": "https://github.com/rust-lang/rust/commit/d9ad04a0f0feb96bc903a00a9ba79d979728edcd"}], "stats": {"total": 143, "additions": 113, "deletions": 30}, "files": [{"sha": "1028c4b4680632e45f98e25388153f2ba6b01be5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d", "patch": "@@ -746,52 +746,53 @@ fn adt_destructor(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::Destructor> {\n     tcx.calculate_dtor(def_id, &mut dropck::check_drop_impl)\n }\n \n-/// If this `DefId` is a \"primary tables entry\", returns `Some((body_id, decl))`\n-/// with information about it's body-id and fn-decl (if any). Otherwise,\n+/// If this `DefId` is a \"primary tables entry\", returns\n+/// `Some((body_id, header, decl))` with information about\n+/// it's body-id, fn-header and fn-decl (if any). Otherwise,\n /// returns `None`.\n ///\n-/// If this function returns \"some\", then `typeck_tables(def_id)` will\n+/// If this function returns `Some`, then `typeck_tables(def_id)` will\n /// succeed; if it returns `None`, then `typeck_tables(def_id)` may or\n /// may not succeed. In some cases where this function returns `None`\n /// (notably closures), `typeck_tables(def_id)` would wind up\n /// redirecting to the owning function.\n fn primary_body_of(\n     tcx: TyCtxt<'_>,\n     id: hir::HirId,\n-) -> Option<(hir::BodyId, Option<&hir::FnDecl>)> {\n+) -> Option<(hir::BodyId, Option<&hir::FnHeader>, Option<&hir::FnDecl>)> {\n     match tcx.hir().get(id) {\n         Node::Item(item) => {\n             match item.node {\n                 hir::ItemKind::Const(_, body) |\n                 hir::ItemKind::Static(_, _, body) =>\n-                    Some((body, None)),\n-                hir::ItemKind::Fn(ref decl, .., body) =>\n-                    Some((body, Some(decl))),\n+                    Some((body, None, None)),\n+                hir::ItemKind::Fn(ref decl, ref header, .., body) =>\n+                    Some((body, Some(header), Some(decl))),\n                 _ =>\n                     None,\n             }\n         }\n         Node::TraitItem(item) => {\n             match item.node {\n                 hir::TraitItemKind::Const(_, Some(body)) =>\n-                    Some((body, None)),\n+                    Some((body, None, None)),\n                 hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) =>\n-                    Some((body, Some(&sig.decl))),\n+                    Some((body, Some(&sig.header), Some(&sig.decl))),\n                 _ =>\n                     None,\n             }\n         }\n         Node::ImplItem(item) => {\n             match item.node {\n                 hir::ImplItemKind::Const(_, body) =>\n-                    Some((body, None)),\n+                    Some((body, None, None)),\n                 hir::ImplItemKind::Method(ref sig, body) =>\n-                    Some((body, Some(&sig.decl))),\n+                    Some((body, Some(&sig.header), Some(&sig.decl))),\n                 _ =>\n                     None,\n             }\n         }\n-        Node::AnonConst(constant) => Some((constant.body, None)),\n+        Node::AnonConst(constant) => Some((constant.body, None, None)),\n         _ => None,\n     }\n }\n@@ -824,15 +825,21 @@ fn typeck_tables_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TypeckTables<'_> {\n     let span = tcx.hir().span(id);\n \n     // Figure out what primary body this item has.\n-    let (body_id, fn_decl) = primary_body_of(tcx, id).unwrap_or_else(|| {\n-        span_bug!(span, \"can't type-check body of {:?}\", def_id);\n-    });\n+    let (body_id, fn_header, fn_decl) = primary_body_of(tcx, id)\n+        .unwrap_or_else(|| {\n+            span_bug!(span, \"can't type-check body of {:?}\", def_id);\n+        });\n     let body = tcx.hir().body(body_id);\n \n     let tables = Inherited::build(tcx, def_id).enter(|inh| {\n         let param_env = tcx.param_env(def_id);\n-        let fcx = if let Some(decl) = fn_decl {\n-            let fn_sig = tcx.fn_sig(def_id);\n+        let fcx = if let (Some(header), Some(decl)) = (fn_header, fn_decl) {\n+            let fn_sig = if crate::collect::get_infer_ret_ty(&decl.output).is_some() {\n+                let fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);\n+                AstConv::ty_of_fn(&fcx, header.unsafety, header.abi, decl)\n+            } else {\n+                tcx.fn_sig(def_id)\n+            };\n \n             check_abi(tcx, span, fn_sig.abi());\n "}, {"sha": "a5457c45d378cd5d5120b4b1af5d2a4bfad894d8", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d", "patch": "@@ -1682,6 +1682,15 @@ fn find_existential_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     }\n }\n \n+pub fn get_infer_ret_ty(output: &'_ hir::FunctionRetTy) -> Option<&hir::Ty> {\n+    if let hir::FunctionRetTy::Return(ref ty) = output {\n+        if let hir::TyKind::Infer = ty.node {\n+            return Some(&**ty)\n+        }\n+    }\n+    None\n+}\n+\n fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n     use rustc::hir::*;\n     use rustc::hir::Node::*;\n@@ -1692,18 +1701,41 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n \n     match tcx.hir().get(hir_id) {\n         TraitItem(hir::TraitItem {\n-            node: TraitItemKind::Method(sig, _),\n+            node: TraitItemKind::Method(MethodSig { header, decl }, TraitMethod::Provided(_)),\n             ..\n         })\n         | ImplItem(hir::ImplItem {\n-            node: ImplItemKind::Method(sig, _),\n+            node: ImplItemKind::Method(MethodSig { header, decl }, _),\n             ..\n-        }) => AstConv::ty_of_fn(&icx, sig.header.unsafety, sig.header.abi, &sig.decl),\n-\n-        Item(hir::Item {\n+        })\n+        | Item(hir::Item {\n             node: ItemKind::Fn(decl, header, _, _),\n             ..\n-        }) => AstConv::ty_of_fn(&icx, header.unsafety, header.abi, decl),\n+        }) => match get_infer_ret_ty(&decl.output) {\n+            Some(ty) => {\n+                let fn_sig = tcx.typeck_tables_of(def_id).liberated_fn_sigs()[hir_id];\n+                let mut diag = bad_placeholder_type(tcx, ty.span);\n+                let ret_ty = fn_sig.output();\n+                if ret_ty != tcx.types.err  {\n+                    diag.span_suggestion(\n+                        ty.span,\n+                        \"replace `_` with the correct return type\",\n+                        ret_ty.to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+                diag.emit();\n+                ty::Binder::bind(fn_sig)\n+            },\n+            None => AstConv::ty_of_fn(&icx, header.unsafety, header.abi, decl)\n+        },\n+\n+        TraitItem(hir::TraitItem {\n+            node: TraitItemKind::Method(MethodSig { header, decl }, _),\n+            ..\n+        }) => {\n+            AstConv::ty_of_fn(&icx, header.unsafety, header.abi, decl)\n+        },\n \n         ForeignItem(&hir::ForeignItem {\n             node: ForeignItemKind::Fn(ref fn_decl, _, _),"}, {"sha": "1a16aab6a41d1218e9c010c8b8fc314498d17c41", "filename": "src/test/ui/error-codes/E0121.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr?ref=f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d", "patch": "@@ -2,7 +2,10 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/E0121.rs:1:13\n    |\n LL | fn foo() -> _ { 5 }\n-   |             ^ not allowed in type signatures\n+   |             ^\n+   |             |\n+   |             not allowed in type signatures\n+   |             help: replace `_` with the correct return type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/E0121.rs:3:13"}, {"sha": "ddaa5de4d3e27f09783169ef4e29533d18913bd0", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d", "patch": "@@ -2,7 +2,10 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/typeck_type_placeholder_item.rs:4:14\n    |\n LL | fn test() -> _ { 5 }\n-   |              ^ not allowed in type signatures\n+   |              ^\n+   |              |\n+   |              not allowed in type signatures\n+   |              help: replace `_` with the correct return type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:7:16\n@@ -98,7 +101,10 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/typeck_type_placeholder_item.rs:57:21\n    |\n LL |     fn fn_test() -> _ { 5 }\n-   |                     ^ not allowed in type signatures\n+   |                     ^\n+   |                     |\n+   |                     not allowed in type signatures\n+   |                     help: replace `_` with the correct return type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:60:23\n@@ -158,7 +164,10 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/typeck_type_placeholder_item.rs:33:24\n    |\n LL |     fn test9(&self) -> _ { () }\n-   |                        ^ not allowed in type signatures\n+   |                        ^\n+   |                        |\n+   |                        not allowed in type signatures\n+   |                        help: replace `_` with the correct return type: `()`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:36:27\n@@ -170,7 +179,10 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/typeck_type_placeholder_item.rs:41:24\n    |\n LL |     fn clone(&self) -> _ { Test9 }\n-   |                        ^ not allowed in type signatures\n+   |                        ^\n+   |                        |\n+   |                        not allowed in type signatures\n+   |                        help: replace `_` with the correct return type: `Test9`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:44:37\n@@ -182,7 +194,10 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/typeck_type_placeholder_item.rs:86:31\n    |\n LL |         fn fn_test9(&self) -> _ { () }\n-   |                               ^ not allowed in type signatures\n+   |                               ^\n+   |                               |\n+   |                               not allowed in type signatures\n+   |                               help: replace `_` with the correct return type: `()`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:89:34\n@@ -194,7 +209,10 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/typeck_type_placeholder_item.rs:94:28\n    |\n LL |         fn clone(&self) -> _ { FnTest9 }\n-   |                            ^ not allowed in type signatures\n+   |                            ^\n+   |                            |\n+   |                            not allowed in type signatures\n+   |                            help: replace `_` with the correct return type: `main::FnTest9`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:97:41"}, {"sha": "5f4cb4c1316d54357082839f6f3e310b52774014", "filename": "src/test/ui/typeck/typeck_type_placeholder_item_help.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs?ref=f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d", "patch": "@@ -0,0 +1,11 @@\n+// This test checks that it proper item type will be suggested when\n+// using the `_` type placeholder.\n+\n+fn test1() -> _ { Some(42) }\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+\n+pub fn main() {\n+    let _: Option<usize> = test1();\n+    let _: f64 = test1();\n+    let _: Option<i32> = test1();\n+}"}, {"sha": "7fb5549825cc5da42dc62f9840add630d66dfb7c", "filename": "src/test/ui/typeck/typeck_type_placeholder_item_help.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr?ref=f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d", "patch": "@@ -0,0 +1,12 @@\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item_help.rs:4:15\n+   |\n+LL | fn test1() -> _ { Some(42) }\n+   |               ^\n+   |               |\n+   |               not allowed in type signatures\n+   |               help: replace `_` with the correct return type: `std::option::Option<i32>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0121`."}]}