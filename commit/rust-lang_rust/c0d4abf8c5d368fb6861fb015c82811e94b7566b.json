{"sha": "c0d4abf8c5d368fb6861fb015c82811e94b7566b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZDRhYmY4YzVkMzY4ZmI2ODYxZmIwMTVjODI4MTFlOTRiNzU2NmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-29T00:06:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-29T00:06:59Z"}, "message": "auto merge of #11150 : huonw/rust/moar-docs, r=alexcrichton\n\n(I removed the `fn main` from the `std::rand` examples to make it consistent with the rest of the codebase.)", "tree": {"sha": "45d4b0bf69c9243c4cc0facbe78c67ab5d68fccc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45d4b0bf69c9243c4cc0facbe78c67ab5d68fccc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0d4abf8c5d368fb6861fb015c82811e94b7566b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0d4abf8c5d368fb6861fb015c82811e94b7566b", "html_url": "https://github.com/rust-lang/rust/commit/c0d4abf8c5d368fb6861fb015c82811e94b7566b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0d4abf8c5d368fb6861fb015c82811e94b7566b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "292269708701f1dfc663668aa72584617b3d9ccc", "url": "https://api.github.com/repos/rust-lang/rust/commits/292269708701f1dfc663668aa72584617b3d9ccc", "html_url": "https://github.com/rust-lang/rust/commit/292269708701f1dfc663668aa72584617b3d9ccc"}, {"sha": "87157361170ef5cd0f8a7a307d19d2343ed3618f", "url": "https://api.github.com/repos/rust-lang/rust/commits/87157361170ef5cd0f8a7a307d19d2343ed3618f", "html_url": "https://github.com/rust-lang/rust/commit/87157361170ef5cd0f8a7a307d19d2343ed3618f"}], "stats": {"total": 363, "additions": 189, "deletions": 174}, "files": [{"sha": "03956560db939bc788dc7ed66283d300a05e795e", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/c0d4abf8c5d368fb6861fb015c82811e94b7566b/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d4abf8c5d368fb6861fb015c82811e94b7566b/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=c0d4abf8c5d368fb6861fb015c82811e94b7566b", "patch": "@@ -12,6 +12,45 @@\n //!\n //! The tables use a keyed hash with new random keys generated for each container, so the ordering\n //! of a set of keys in a hash table is randomized.\n+//!\n+//! # Example\n+//!\n+//! ```rust\n+//! use std::hashmap::HashMap;\n+//!\n+//! // type inference lets us omit an explicit type signature (which\n+//! // would be `HashMap<&str, &str>` in this example).\n+//! let mut book_reviews = HashMap::new();\n+//!\n+//! // review some books.\n+//! book_reviews.insert(\"Adventures of Hucklebury Fin\",      \"My favorite book.\");\n+//! book_reviews.insert(\"Grimms' Fairy Tales\",               \"Masterpiece.\");\n+//! book_reviews.insert(\"Pride and Prejudice\",               \"Very enjoyable.\");\n+//! book_reviews.insert(\"The Adventures of Sherlock Holmes\", \"Eye lyked it alot.\");\n+//!\n+//! // check for a specific one.\n+//! if !book_reviews.contains_key(& &\"Les Mis\u00e9rables\") {\n+//!     println!(\"We've got {} reviews, but Les Mis\u00e9rables ain't one.\",\n+//!              book_reviews.len());\n+//! }\n+//!\n+//! // oops, this review has a lot of spelling mistakes, let's delete it.\n+//! book_reviews.remove(& &\"The Adventures of Sherlock Holmes\");\n+//!\n+//! // look up the values associated with some keys.\n+//! let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];\n+//! for book in to_find.iter() {\n+//!     match book_reviews.find(book) {\n+//!         Some(review) => println!(\"{}: {}\", *book, *review),\n+//!         None => println!(\"{} is unreviewed.\", *book)\n+//!     }\n+//! }\n+//!\n+//! // iterate over everything.\n+//! for (book, review) in book_reviews.iter() {\n+//!     println!(\"{}: \\\"{}\\\"\", *book, *review);\n+//! }\n+//! ```\n \n use container::{Container, Mutable, Map, MutableMap, Set, MutableSet};\n use clone::Clone;\n@@ -354,6 +393,43 @@ impl<K: Hash + Eq, V> HashMap<K, V> {\n \n     /// Modify and return the value corresponding to the key in the map, or\n     /// insert and return a new value if it doesn't exist.\n+    ///\n+    /// This method allows for all insertion behaviours of a hashmap,\n+    /// see methods like `insert`, `find_or_insert` and\n+    /// `insert_or_update_with` for less general and more friendly\n+    /// variations of this.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::hashmap::HashMap;\n+    ///\n+    /// // map some strings to vectors of strings\n+    /// let mut map = HashMap::<~str, ~[~str]>::new();\n+    /// map.insert(~\"a key\", ~[~\"value\"]);\n+    /// map.insert(~\"z key\", ~[~\"value\"]);\n+    ///\n+    /// let new = ~[~\"a key\", ~\"b key\", ~\"z key\"];\n+    /// for k in new.move_iter() {\n+    ///     map.mangle(k, ~\"new value\",\n+    ///                // if the key doesn't exist in the map yet, add it in\n+    ///                // the obvious way.\n+    ///                |_k, v| ~[v],\n+    ///                // if the key does exist either prepend or append this\n+    ///                // new value based on the first letter of the key.\n+    ///                |key, already, new| {\n+    ///                     if key.starts_with(\"z\") {\n+    ///                         already.unshift(new);\n+    ///                     } else {\n+    ///                         already.push(new);\n+    ///                     }\n+    ///                });\n+    /// }\n+    ///\n+    /// for (k, v) in map.iter() {\n+    ///    println!(\"{} -> {:?}\", *k, *v);\n+    /// }\n+    /// ```\n     pub fn mangle<'a,\n                   A>(\n                   &'a mut self,"}, {"sha": "dbfc386f55aa19d8556f1088e8d9ec0cab0f1320", "filename": "src/libstd/rand/distributions/exponential.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0d4abf8c5d368fb6861fb015c82811e94b7566b/src%2Flibstd%2Frand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d4abf8c5d368fb6861fb015c82811e94b7566b/src%2Flibstd%2Frand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fexponential.rs?ref=c0d4abf8c5d368fb6861fb015c82811e94b7566b", "patch": "@@ -60,11 +60,9 @@ impl Rand for Exp1 {\n /// use std::rand;\n /// use std::rand::distributions::{Exp, IndependentSample};\n ///\n-/// fn main() {\n-///     let exp = Exp::new(2.0);\n-///     let v = exp.ind_sample(&mut rand::task_rng());\n-///     println!(\"{} is from a Exp(2) distribution\", v);\n-/// }\n+/// let exp = Exp::new(2.0);\n+/// let v = exp.ind_sample(&mut rand::task_rng());\n+/// println!(\"{} is from a Exp(2) distribution\", v);\n /// ```\n pub struct Exp {\n     /// `lambda` stored as `1/lambda`, since this is what we scale by."}, {"sha": "22e2740b250f27ec71d10cb03f4608e3ed1543ab", "filename": "src/libstd/rand/distributions/gamma.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c0d4abf8c5d368fb6861fb015c82811e94b7566b/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d4abf8c5d368fb6861fb015c82811e94b7566b/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs?ref=c0d4abf8c5d368fb6861fb015c82811e94b7566b", "patch": "@@ -37,11 +37,9 @@ use num;\n /// use std::rand;\n /// use std::rand::distributions::{IndependentSample, Gamma};\n ///\n-/// fn main() {\n-///     let gamma = Gamma::new(2.0, 5.0);\n-///     let v = gamma.ind_sample(&mut rand::task_rng());\n-///     println!(\"{} is from a Gamma(2, 5) distribution\", v);\n-/// }\n+/// let gamma = Gamma::new(2.0, 5.0);\n+/// let v = gamma.ind_sample(&mut rand::task_rng());\n+/// println!(\"{} is from a Gamma(2, 5) distribution\", v);\n /// ```\n ///\n /// [1]: George Marsaglia and Wai Wan Tsang. 2000. \"A Simple Method\n@@ -183,11 +181,9 @@ impl IndependentSample<f64> for GammaLargeShape {\n /// use std::rand;\n /// use std::rand::distributions::{ChiSquared, IndependentSample};\n ///\n-/// fn main() {\n-///     let chi = ChiSquared::new(11.0);\n-///     let v = chi.ind_sample(&mut rand::task_rng());\n-///     println!(\"{} is from a \u03c7\u00b2(11) distribution\", v)\n-/// }\n+/// let chi = ChiSquared::new(11.0);\n+/// let v = chi.ind_sample(&mut rand::task_rng());\n+/// println!(\"{} is from a \u03c7\u00b2(11) distribution\", v)\n /// ```\n pub enum ChiSquared {\n     // k == 1, Gamma(alpha, ..) is particularly slow for alpha < 1,\n@@ -237,11 +233,9 @@ impl IndependentSample<f64> for ChiSquared {\n /// use std::rand;\n /// use std::rand::distributions::{FisherF, IndependentSample};\n ///\n-/// fn main() {\n-///     let f = FisherF::new(2.0, 32.0);\n-///     let v = f.ind_sample(&mut rand::task_rng());\n-///     println!(\"{} is from an F(2, 32) distribution\", v)\n-/// }\n+/// let f = FisherF::new(2.0, 32.0);\n+/// let v = f.ind_sample(&mut rand::task_rng());\n+/// println!(\"{} is from an F(2, 32) distribution\", v)\n /// ```\n pub struct FisherF {\n     priv numer: ChiSquared,\n@@ -283,11 +277,9 @@ impl IndependentSample<f64> for FisherF {\n /// use std::rand;\n /// use std::rand::distributions::{StudentT, IndependentSample};\n ///\n-/// fn main() {\n-///     let t = StudentT::new(11.0);\n-///     let v = t.ind_sample(&mut rand::task_rng());\n-///     println!(\"{} is from a t(11) distribution\", v)\n-/// }\n+/// let t = StudentT::new(11.0);\n+/// let v = t.ind_sample(&mut rand::task_rng());\n+/// println!(\"{} is from a t(11) distribution\", v)\n /// ```\n pub struct StudentT {\n     priv chi: ChiSquared,"}, {"sha": "d06af81841ad60d8a25a1bffa5eaa93e00cb812b", "filename": "src/libstd/rand/distributions/mod.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c0d4abf8c5d368fb6861fb015c82811e94b7566b/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d4abf8c5d368fb6861fb015c82811e94b7566b/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs?ref=c0d4abf8c5d368fb6861fb015c82811e94b7566b", "patch": "@@ -94,15 +94,13 @@ pub struct Weighted<T> {\n /// use std::rand;\n /// use std::rand::distributions::{Weighted, WeightedChoice, IndependentSample};\n ///\n-/// fn main() {\n-///     let wc = WeightedChoice::new(~[Weighted { weight: 2, item: 'a' },\n-///                                    Weighted { weight: 4, item: 'b' },\n-///                                    Weighted { weight: 1, item: 'c' }]);\n-///     let mut rng = rand::task_rng();\n-///     for _ in range(0, 16) {\n-///          // on average prints 'a' 4 times, 'b' 8 and 'c' twice.\n-///          println!(\"{}\", wc.ind_sample(&mut rng));\n-///     }\n+/// let wc = WeightedChoice::new(~[Weighted { weight: 2, item: 'a' },\n+///                                Weighted { weight: 4, item: 'b' },\n+///                                Weighted { weight: 1, item: 'c' }]);\n+/// let mut rng = rand::task_rng();\n+/// for _ in range(0, 16) {\n+///      // on average prints 'a' 4 times, 'b' 8 and 'c' twice.\n+///      println!(\"{}\", wc.ind_sample(&mut rng));\n /// }\n /// ```\n pub struct WeightedChoice<T> {"}, {"sha": "3bf7103cdc8ebe9900211c9e34bebdb3156c2c22", "filename": "src/libstd/rand/distributions/normal.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c0d4abf8c5d368fb6861fb015c82811e94b7566b/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d4abf8c5d368fb6861fb015c82811e94b7566b/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs?ref=c0d4abf8c5d368fb6861fb015c82811e94b7566b", "patch": "@@ -76,12 +76,10 @@ impl Rand for StandardNormal {\n /// use std::rand;\n /// use std::rand::distributions::{Normal, IndependentSample};\n ///\n-/// fn main() {\n-///     // mean 2, standard deviation 3\n-///     let normal = Normal::new(2.0, 3.0);\n-///     let v = normal.ind_sample(&mut rand::task_rng());\n-///     println!(\"{} is from a N(2, 9) distribution\", v)\n-/// }\n+/// // mean 2, standard deviation 3\n+/// let normal = Normal::new(2.0, 3.0);\n+/// let v = normal.ind_sample(&mut rand::task_rng());\n+/// println!(\"{} is from a N(2, 9) distribution\", v)\n /// ```\n pub struct Normal {\n     priv mean: f64,\n@@ -120,12 +118,10 @@ impl IndependentSample<f64> for Normal {\n /// use std::rand;\n /// use std::rand::distributions::{LogNormal, IndependentSample};\n ///\n-/// fn main() {\n-///     // mean 2, standard deviation 3\n-///     let log_normal = LogNormal::new(2.0, 3.0);\n-///     let v = log_normal.ind_sample(&mut rand::task_rng());\n-///     println!(\"{} is from an ln N(2, 9) distribution\", v)\n-/// }\n+/// // mean 2, standard deviation 3\n+/// let log_normal = LogNormal::new(2.0, 3.0);\n+/// let v = log_normal.ind_sample(&mut rand::task_rng());\n+/// println!(\"{} is from an ln N(2, 9) distribution\", v)\n /// ```\n pub struct LogNormal {\n     priv norm: Normal"}, {"sha": "917b14e4b4f6e30b29cd92cdee9f6b355b0b4723", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 81, "deletions": 124, "changes": 205, "blob_url": "https://github.com/rust-lang/rust/blob/c0d4abf8c5d368fb6861fb015c82811e94b7566b/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d4abf8c5d368fb6861fb015c82811e94b7566b/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=c0d4abf8c5d368fb6861fb015c82811e94b7566b", "patch": "@@ -51,21 +51,17 @@ randomness.\n use std::rand;\n use std::rand::Rng;\n \n-fn main() {\n-    let mut rng = rand::rng();\n-    if rng.gen() { // bool\n-        println!(\"int: {}, uint: {}\", rng.gen::<int>(), rng.gen::<uint>())\n-    }\n+let mut rng = rand::rng();\n+if rng.gen() { // bool\n+    println!(\"int: {}, uint: {}\", rng.gen::<int>(), rng.gen::<uint>())\n }\n  ```\n \n ```rust\n use std::rand;\n \n-fn main () {\n-    let tuple_ptr = rand::random::<~(f64, char)>();\n-    println!(\"{:?}\", tuple_ptr)\n-}\n+let tuple_ptr = rand::random::<~(f64, char)>();\n+println!(\"{:?}\", tuple_ptr)\n  ```\n */\n \n@@ -91,27 +87,28 @@ pub mod reader;\n pub mod reseeding;\n mod rand_impls;\n \n-/// A type that can be randomly generated using an Rng\n+/// A type that can be randomly generated using an `Rng`.\n pub trait Rand {\n     /// Generates a random instance of this type using the specified source of\n-    /// randomness\n+    /// randomness.\n     fn rand<R: Rng>(rng: &mut R) -> Self;\n }\n \n-/// A random number generator\n+/// A random number generator.\n pub trait Rng {\n-    /// Return the next random u32. This rarely needs to be called\n-    /// directly, prefer `r.gen()` to `r.next_u32()`.\n+    /// Return the next random u32.\n     ///\n+    /// This rarely needs to be called directly, prefer `r.gen()` to\n+    /// `r.next_u32()`.\n     // FIXME #7771: Should be implemented in terms of next_u64\n     fn next_u32(&mut self) -> u32;\n \n-    /// Return the next random u64. This rarely needs to be called\n-    /// directly, prefer `r.gen()` to `r.next_u64()`.\n+    /// Return the next random u64.\n     ///\n     /// By default this is implemented in terms of `next_u32`. An\n     /// implementation of this trait must provide at least one of\n-    /// these two methods.\n+    /// these two methods. Similarly to `next_u32`, this rarely needs\n+    /// to be called directly, prefer `r.gen()` to `r.next_u64()`.\n     fn next_u64(&mut self) -> u64 {\n         (self.next_u32() as u64 << 32) | (self.next_u32() as u64)\n     }\n@@ -139,11 +136,9 @@ pub trait Rng {\n     /// ```rust\n     /// use std::rand::{task_rng, Rng};\n     ///\n-    /// fn main() {\n-    ///    let mut v = [0u8, .. 13579];\n-    ///    task_rng().fill_bytes(v);\n-    ///    println!(\"{:?}\", v);\n-    /// }\n+    /// let mut v = [0u8, .. 13579];\n+    /// task_rng().fill_bytes(v);\n+    /// println!(\"{:?}\", v);\n     /// ```\n     fn fill_bytes(&mut self, dest: &mut [u8]) {\n         // this could, in theory, be done by transmuting dest to a\n@@ -169,20 +164,17 @@ pub trait Rng {\n         }\n     }\n \n-    /// Return a random value of a Rand type.\n+    /// Return a random value of a `Rand` type.\n     ///\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand;\n-    /// use std::rand::Rng;\n-    ///\n-    /// fn main() {\n-    ///    let mut rng = rand::task_rng();\n-    ///    let x: uint = rng.gen();\n-    ///    println!(\"{}\", x);\n-    ///    println!(\"{:?}\", rng.gen::<(f64, bool)>());\n-    /// }\n+    /// use std::rand::{task_rng, Rng};\n+    ///\n+    /// let mut rng = task_rng();\n+    /// let x: uint = rng.gen();\n+    /// println!(\"{}\", x);\n+    /// println!(\"{:?}\", rng.gen::<(f64, bool)>());\n     /// ```\n     #[inline(always)]\n     fn gen<T: Rand>(&mut self) -> T {\n@@ -194,15 +186,12 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand;\n-    /// use std::rand::Rng;\n-    ///\n-    /// fn main() {\n-    ///    let mut rng = rand::task_rng();\n-    ///    let x: ~[uint] = rng.gen_vec(10);\n-    ///    println!(\"{:?}\", x);\n-    ///    println!(\"{:?}\", rng.gen_vec::<(f64, bool)>(5));\n-    /// }\n+    /// use std::rand::{task_rng, Rng};\n+    ///\n+    /// let mut rng = task_rng();\n+    /// let x: ~[uint] = rng.gen_vec(10);\n+    /// println!(\"{:?}\", x);\n+    /// println!(\"{:?}\", rng.gen_vec::<(f64, bool)>(5));\n     /// ```\n     fn gen_vec<T: Rand>(&mut self, len: uint) -> ~[T] {\n         vec::from_fn(len, |_| self.gen())\n@@ -220,16 +209,13 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand;\n-    /// use std::rand::Rng;\n-    ///\n-    /// fn main() {\n-    ///    let mut rng = rand::task_rng();\n-    ///    let n: uint = rng.gen_range(0u, 10);\n-    ///    println!(\"{}\", n);\n-    ///    let m: f64 = rng.gen_range(-40.0, 1.3e5);\n-    ///    println!(\"{}\", m);\n-    /// }\n+    /// use std::rand::{task_rng, Rng};\n+    ///\n+    /// let mut rng = task_rng();\n+    /// let n: uint = rng.gen_range(0u, 10);\n+    /// println!(\"{}\", n);\n+    /// let m: f64 = rng.gen_range(-40.0, 1.3e5);\n+    /// println!(\"{}\", m);\n     /// ```\n     fn gen_range<T: Ord + SampleRange>(&mut self, low: T, high: T) -> T {\n         assert!(low < high, \"Rng.gen_range called with low >= high\");\n@@ -241,13 +227,10 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand;\n-    /// use std::rand::Rng;\n+    /// use std::rand::{task_rng, Rng};\n     ///\n-    /// fn main() {\n-    ///     let mut rng = rand::rng();\n-    ///     println!(\"{:b}\", rng.gen_weighted_bool(3));\n-    /// }\n+    /// let mut rng = task_rng();\n+    /// println!(\"{:b}\", rng.gen_weighted_bool(3));\n     /// ```\n     fn gen_weighted_bool(&mut self, n: uint) -> bool {\n         n == 0 || self.gen_range(0, n) == 0\n@@ -259,12 +242,9 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand;\n-    /// use std::rand::Rng;\n+    /// use std::rand::{task_rng, Rng};\n     ///\n-    /// fn main() {\n-    ///    println(rand::task_rng().gen_ascii_str(10));\n-    /// }\n+    /// println(task_rng().gen_ascii_str(10));\n     /// ```\n     fn gen_ascii_str(&mut self, len: uint) -> ~str {\n         static GEN_ASCII_STR_CHARSET: &'static [u8] = bytes!(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\n@@ -288,15 +268,12 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand;\n-    /// use std::rand::Rng;\n-    ///\n-    /// fn main() {\n-    ///     let choices = [1, 2, 4, 8, 16, 32];\n-    ///     let mut rng = rand::task_rng();\n-    ///     println!(\"{:?}\", rng.choose_option(choices));\n-    ///     println!(\"{:?}\", rng.choose_option(choices.slice_to(0)));\n-    /// }\n+    /// use std::rand::{task_rng, Rng};\n+    ///\n+    /// let choices = [1, 2, 4, 8, 16, 32];\n+    /// let mut rng = task_rng();\n+    /// println!(\"{:?}\", rng.choose_option(choices));\n+    /// println!(\"{:?}\", rng.choose_option(choices.slice_to(0)));\n     /// ```\n     fn choose_option<'a, T>(&mut self, values: &'a [T]) -> Option<&'a T> {\n         if values.is_empty() {\n@@ -311,12 +288,9 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand;\n-    /// use std::rand::Rng;\n+    /// use std::rand::{task_rng, Rng};\n     ///\n-    /// fn main() {\n-    ///     println!(\"{:?}\", rand::task_rng().shuffle(~[1,2,3]));\n-    /// }\n+    /// println!(\"{:?}\", task_rng().shuffle(~[1,2,3]));\n     /// ```\n     fn shuffle<T>(&mut self, values: ~[T]) -> ~[T] {\n         let mut v = values;\n@@ -329,17 +303,14 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand;\n-    /// use std::rand::Rng;\n-    ///\n-    /// fn main() {\n-    ///    let mut rng = rand::task_rng();\n-    ///    let mut y = [1,2,3];\n-    ///    rng.shuffle_mut(y);\n-    ///    println!(\"{:?}\", y);\n-    ///    rng.shuffle_mut(y);\n-    ///    println!(\"{:?}\", y);\n-    /// }\n+    /// use std::rand::{task_rng, Rng};\n+    ///\n+    /// let mut rng = task_rng();\n+    /// let mut y = [1,2,3];\n+    /// rng.shuffle_mut(y);\n+    /// println!(\"{:?}\", y);\n+    /// rng.shuffle_mut(y);\n+    /// println!(\"{:?}\", y);\n     /// ```\n     fn shuffle_mut<T>(&mut self, values: &mut [T]) {\n         let mut i = values.len();\n@@ -356,14 +327,11 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand;\n-    /// use std::rand::Rng;\n-    ///\n-    /// fn main() {\n-    ///    let mut rng = rand::task_rng();\n-    ///    let sample = rng.sample(range(1, 100), 5);\n-    ///    println!(\"{:?}\", sample);\n-    /// }\n+    /// use std::rand::{task_rng, Rng};\n+    ///\n+    /// let mut rng = task_rng();\n+    /// let sample = rng.sample(range(1, 100), 5);\n+    /// println!(\"{:?}\", sample);\n     /// ```\n     fn sample<A, T: Iterator<A>>(&mut self, iter: T, n: uint) -> ~[A] {\n         let mut reservoir : ~[A] = vec::with_capacity(n);\n@@ -392,12 +360,10 @@ pub trait SeedableRng<Seed>: Rng {\n     /// ```rust\n     /// use std::rand::{Rng, SeedableRng, StdRng};\n     ///\n-    /// fn main() {\n-    ///     let mut rng: StdRng = SeedableRng::from_seed(&[1, 2, 3, 4]);\n-    ///     println!(\"{}\", rng.gen::<f64>());\n-    ///     rng.reseed([5, 6, 7, 8]);\n-    ///     println!(\"{}\", rng.gen::<f64>());\n-    /// }\n+    /// let mut rng: StdRng = SeedableRng::from_seed(&[1, 2, 3, 4]);\n+    /// println!(\"{}\", rng.gen::<f64>());\n+    /// rng.reseed([5, 6, 7, 8]);\n+    /// println!(\"{}\", rng.gen::<f64>());\n     /// ```\n     fn reseed(&mut self, Seed);\n \n@@ -406,13 +372,10 @@ pub trait SeedableRng<Seed>: Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand;\n-    /// use std::rand::Rng;\n+    /// use std::rand::{Rng, SeedableRng, StdRng};\n     ///\n-    /// fn main() {\n-    ///     let mut rng: rand::StdRng = rand::SeedableRng::from_seed(&[1, 2, 3, 4]);\n-    ///     println!(\"{}\", rng.gen::<f64>());\n-    /// }\n+    /// let mut rng: StdRng = SeedableRng::from_seed(&[1, 2, 3, 4]);\n+    /// println!(\"{}\", rng.gen::<f64>());\n     /// ```\n     fn from_seed(seed: Seed) -> Self;\n }\n@@ -647,13 +610,11 @@ impl Rng for TaskRng {\n /// ```rust\n /// use std::rand::random;\n ///\n-/// fn main() {\n-///     if random() {\n-///         let x = random();\n-///         println!(\"{}\", 2u * x);\n-///     } else {\n-///         println!(\"{}\", random::<f64>());\n-///     }\n+/// if random() {\n+///     let x = random();\n+///     println!(\"{}\", 2u * x);\n+/// } else {\n+///     println!(\"{}\", random::<f64>());\n /// }\n /// ```\n #[inline]\n@@ -672,12 +633,10 @@ pub fn random<T: Rand>() -> T {\n /// ```rust\n /// use std::rand::{random, Open01};\n ///\n-/// fn main() {\n-///     println!(\"f32 from (0,1): {}\", *random::<Open01<f32>>());\n+/// println!(\"f32 from (0,1): {}\", *random::<Open01<f32>>());\n ///\n-///     let x: Open01<f64> = random();\n-///     println!(\"f64 from (0,1): {}\", *x);\n-/// }\n+/// let x: Open01<f64> = random();\n+/// println!(\"f64 from (0,1): {}\", *x);\n /// ```\n pub struct Open01<F>(F);\n \n@@ -692,12 +651,10 @@ pub struct Open01<F>(F);\n /// ```rust\n /// use std::rand::{random, Closed01};\n ///\n-/// fn main() {\n-///     println!(\"f32 from [0,1]: {}\", *random::<Closed01<f32>>());\n+/// println!(\"f32 from [0,1]: {}\", *random::<Closed01<f32>>());\n ///\n-///     let x: Closed01<f64> = random();\n-///     println!(\"f64 from [0,1]: {}\", *x);\n-/// }\n+/// let x: Closed01<f64> = random();\n+/// println!(\"f64 from [0,1]: {}\", *x);\n /// ```\n pub struct Closed01<F>(F);\n "}, {"sha": "95a822251236ce1563f3256aea235ba2f16ecae8", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0d4abf8c5d368fb6861fb015c82811e94b7566b/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d4abf8c5d368fb6861fb015c82811e94b7566b/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=c0d4abf8c5d368fb6861fb015c82811e94b7566b", "patch": "@@ -26,10 +26,8 @@ use rand::Rng;\n /// use std::rand::{reader, Rng};\n /// use std::io::mem;\n ///\n-/// fn main() {\n-///     let mut rng = reader::ReaderRng::new(mem::MemReader::new(~[1,2,3,4,5,6,7,8]));\n-///     println!(\"{:x}\", rng.gen::<uint>());\n-/// }\n+/// let mut rng = reader::ReaderRng::new(mem::MemReader::new(~[1,2,3,4,5,6,7,8]));\n+/// println!(\"{:x}\", rng.gen::<uint>());\n /// ```\n pub struct ReaderRng<R> {\n     priv reader: R"}]}