{"sha": "572081f1c4d54590fc71276d362ab0c76f71c54c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MjA4MWYxYzRkNTQ1OTBmYzcxMjc2ZDM2MmFiMGM3NmY3MWM1NGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-27T09:49:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-27T09:49:37Z"}, "message": "Merge #6586\n\n6586: Don't call a closure a function in the infer_function_return_type assist label r=lnicola a=Veykril\n\n`Add this function's return type` becomes `Add this closure's return type` for closures. This makes it more obvious that we are indeed planning on modifying the closure and not its containing function.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "1b4c2cd903e01cf32996b5f72dd4e9931567d6b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b4c2cd903e01cf32996b5f72dd4e9931567d6b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/572081f1c4d54590fc71276d362ab0c76f71c54c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfwMuxCRBK7hj4Ov3rIwAAdHIIACDRdgKpLERiPbvkBV+kcne+\nJXb38l6Ogb9oZz18DLvjpkyAQoT6dxgoAxJuirY+9GPoZynRiRDEU+c+g1bc7fbh\nDyqEcgDf/gHIPXdiMy8aqak8EcJeQbm7vC6WMqqT9ZV7KAbDkB8yB9KoTtVjTgIp\nNL2pQxFFT3bNtkJEvr8FFnZD3J0uuIYOTGcPmhrHoPyJk3NGTU8zrtX5PEMmKrtC\nOpnYh0lhcnoR/iyjm/Lbs9yGGLcluBuaP+j6Atiyabf6xg89rvsPupI7FAHyffWi\nlR+ELcls9dF09O1LmxMaRam0T25r7qo4JPSyMEq5mBTl5y1otD8Cg9rLKGhoCDA=\n=LM5i\n-----END PGP SIGNATURE-----\n", "payload": "tree 1b4c2cd903e01cf32996b5f72dd4e9931567d6b1\nparent bb2c6ceee7dd4daadd2e67eddc92357d2db129f0\nparent e8282b37d458e9dc59e741bb56de7fa8323db94d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1606470577 +0000\ncommitter GitHub <noreply@github.com> 1606470577 +0000\n\nMerge #6586\n\n6586: Don't call a closure a function in the infer_function_return_type assist label r=lnicola a=Veykril\n\n`Add this function's return type` becomes `Add this closure's return type` for closures. This makes it more obvious that we are indeed planning on modifying the closure and not its containing function.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/572081f1c4d54590fc71276d362ab0c76f71c54c", "html_url": "https://github.com/rust-lang/rust/commit/572081f1c4d54590fc71276d362ab0c76f71c54c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/572081f1c4d54590fc71276d362ab0c76f71c54c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb2c6ceee7dd4daadd2e67eddc92357d2db129f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb2c6ceee7dd4daadd2e67eddc92357d2db129f0", "html_url": "https://github.com/rust-lang/rust/commit/bb2c6ceee7dd4daadd2e67eddc92357d2db129f0"}, {"sha": "e8282b37d458e9dc59e741bb56de7fa8323db94d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8282b37d458e9dc59e741bb56de7fa8323db94d", "html_url": "https://github.com/rust-lang/rust/commit/e8282b37d458e9dc59e741bb56de7fa8323db94d"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "aa584eb034830a72be8b1d6401066f18080e958b", "filename": "crates/assists/src/handlers/infer_function_return_type.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/572081f1c4d54590fc71276d362ab0c76f71c54c/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572081f1c4d54590fc71276d362ab0c76f71c54c/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs?ref=572081f1c4d54590fc71276d362ab0c76f71c54c", "patch": "@@ -17,7 +17,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // fn foo() -> i32 { 42i32 }\n // ```\n pub(crate) fn infer_function_return_type(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let (tail_expr, builder_edit_pos, wrap_expr) = extract_tail(ctx)?;\n+    let (fn_type, tail_expr, builder_edit_pos) = extract_tail(ctx)?;\n     let module = ctx.sema.scope(tail_expr.syntax()).module()?;\n     let ty = ctx.sema.type_of_expr(&tail_expr)?;\n     if ty.is_unit() {\n@@ -27,7 +27,10 @@ pub(crate) fn infer_function_return_type(acc: &mut Assists, ctx: &AssistContext)\n \n     acc.add(\n         AssistId(\"infer_function_return_type\", AssistKind::RefactorRewrite),\n-        \"Add this function's return type\",\n+        match fn_type {\n+            FnType::Function => \"Add this function's return type\",\n+            FnType::Closure { .. } => \"Add this closure's return type\",\n+        },\n         tail_expr.syntax().text_range(),\n         |builder| {\n             match builder_edit_pos {\n@@ -38,7 +41,7 @@ pub(crate) fn infer_function_return_type(acc: &mut Assists, ctx: &AssistContext)\n                     builder.replace(text_range, &format!(\"-> {}\", ty))\n                 }\n             }\n-            if wrap_expr {\n+            if let FnType::Closure { wrap_expr: true } = fn_type {\n                 mark::hit!(wrap_closure_non_block_expr);\n                 // `|x| x` becomes `|x| -> T x` which is invalid, so wrap it in a block\n                 builder.replace(tail_expr.syntax().text_range(), &format!(\"{{{}}}\", tail_expr));\n@@ -72,8 +75,13 @@ fn ret_ty_to_action(ret_ty: Option<ast::RetType>, insert_pos: TextSize) -> Optio\n     }\n }\n \n-fn extract_tail(ctx: &AssistContext) -> Option<(ast::Expr, InsertOrReplace, bool)> {\n-    let (tail_expr, return_type_range, action, wrap_expr) =\n+enum FnType {\n+    Function,\n+    Closure { wrap_expr: bool },\n+}\n+\n+fn extract_tail(ctx: &AssistContext) -> Option<(FnType, ast::Expr, InsertOrReplace)> {\n+    let (fn_type, tail_expr, return_type_range, action) =\n         if let Some(closure) = ctx.find_node_at_offset::<ast::ClosureExpr>() {\n             let rpipe_pos = closure.param_list()?.syntax().last_token()?.text_range().end();\n             let action = ret_ty_to_action(closure.ret_type(), rpipe_pos)?;\n@@ -86,7 +94,7 @@ fn extract_tail(ctx: &AssistContext) -> Option<(ast::Expr, InsertOrReplace, bool\n             };\n \n             let ret_range = TextRange::new(rpipe_pos, body_start);\n-            (tail_expr, ret_range, action, wrap_expr)\n+            (FnType::Closure { wrap_expr }, tail_expr, ret_range, action)\n         } else {\n             let func = ctx.find_node_at_offset::<ast::Fn>()?;\n             let rparen_pos = func.param_list()?.r_paren_token()?.text_range().end();\n@@ -97,7 +105,7 @@ fn extract_tail(ctx: &AssistContext) -> Option<(ast::Expr, InsertOrReplace, bool\n \n             let ret_range_end = body.l_curly_token()?.text_range().start();\n             let ret_range = TextRange::new(rparen_pos, ret_range_end);\n-            (tail_expr, ret_range, action, false)\n+            (FnType::Function, tail_expr, ret_range, action)\n         };\n     let frange = ctx.frange.range;\n     if return_type_range.contains_range(frange) {\n@@ -109,7 +117,7 @@ fn extract_tail(ctx: &AssistContext) -> Option<(ast::Expr, InsertOrReplace, bool\n     } else {\n         return None;\n     }\n-    Some((tail_expr, action, wrap_expr))\n+    Some((fn_type, tail_expr, action))\n }\n \n #[cfg(test)]"}]}