{"sha": "2de2b1eca3c3a3a74c0374f4de0b0c3ff25e66a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZTJiMWVjYTNjM2EzYTc0YzAzNzRmNGRlMGIwYzNmZjI1ZTY2YTk=", "commit": {"author": {"name": "Nick Spain", "email": "nicholas.spain@stileeducation.com", "date": "2021-01-01T02:27:38Z"}, "committer": {"name": "Nick Spain", "email": "nicholas.spain@stileeducation.com", "date": "2021-01-02T10:53:51Z"}, "message": "Implement new HasSource::source for all implementors of HasSource", "tree": {"sha": "172d16e471ce6b4b16a1262cf4a54a5adb1db92d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/172d16e471ce6b4b16a1262cf4a54a5adb1db92d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2de2b1eca3c3a3a74c0374f4de0b0c3ff25e66a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2de2b1eca3c3a3a74c0374f4de0b0c3ff25e66a9", "html_url": "https://github.com/rust-lang/rust/commit/2de2b1eca3c3a3a74c0374f4de0b0c3ff25e66a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2de2b1eca3c3a3a74c0374f4de0b0c3ff25e66a9/comments", "author": {"login": "nick96", "id": 9591268, "node_id": "MDQ6VXNlcjk1OTEyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/9591268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nick96", "html_url": "https://github.com/nick96", "followers_url": "https://api.github.com/users/nick96/followers", "following_url": "https://api.github.com/users/nick96/following{/other_user}", "gists_url": "https://api.github.com/users/nick96/gists{/gist_id}", "starred_url": "https://api.github.com/users/nick96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nick96/subscriptions", "organizations_url": "https://api.github.com/users/nick96/orgs", "repos_url": "https://api.github.com/users/nick96/repos", "events_url": "https://api.github.com/users/nick96/events{/privacy}", "received_events_url": "https://api.github.com/users/nick96/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nick96", "id": 9591268, "node_id": "MDQ6VXNlcjk1OTEyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/9591268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nick96", "html_url": "https://github.com/nick96", "followers_url": "https://api.github.com/users/nick96/followers", "following_url": "https://api.github.com/users/nick96/following{/other_user}", "gists_url": "https://api.github.com/users/nick96/gists{/gist_id}", "starred_url": "https://api.github.com/users/nick96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nick96/subscriptions", "organizations_url": "https://api.github.com/users/nick96/orgs", "repos_url": "https://api.github.com/users/nick96/repos", "events_url": "https://api.github.com/users/nick96/events{/privacy}", "received_events_url": "https://api.github.com/users/nick96/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196", "url": "https://api.github.com/repos/rust-lang/rust/commits/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196", "html_url": "https://github.com/rust-lang/rust/commit/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "84fbeca751d549afb5d217007ef38596cc5e520c", "filename": "crates/hir/src/has_source.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2de2b1eca3c3a3a74c0374f4de0b0c3ff25e66a9/crates%2Fhir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de2b1eca3c3a3a74c0374f4de0b0c3ff25e66a9/crates%2Fhir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fhas_source.rs?ref=2de2b1eca3c3a3a74c0374f4de0b0c3ff25e66a9", "patch": "@@ -17,6 +17,7 @@ use crate::{\n pub trait HasSource {\n     type Ast;\n     fn source_old(self, db: &dyn HirDatabase) -> InFile<Self::Ast>;\n+    fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>>;\n }\n \n /// NB: Module is !HasSource, because it has two source nodes at the same time:\n@@ -54,60 +55,106 @@ impl HasSource for Field {\n             Either::Right(it) => FieldSource::Named(it),\n         })\n     }\n+\n+    fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n+        let var = VariantId::from(self.parent);\n+        let src = var.child_source(db.upcast());\n+        let field_source = src.map(|it| match it[self.id].clone() {\n+            Either::Left(it) => FieldSource::Pos(it),\n+            Either::Right(it) => FieldSource::Named(it),\n+        });\n+        Some(field_source)\n+    }\n }\n impl HasSource for Struct {\n     type Ast = ast::Struct;\n     fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Struct> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n+\n+    fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n+        Some(self.id.lookup(db.upcast()).source(db.upcast()))\n+    }\n }\n impl HasSource for Union {\n     type Ast = ast::Union;\n     fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Union> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n+\n+    fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n+        Some(self.id.lookup(db.upcast()).source(db.upcast()))\n+    }\n }\n impl HasSource for Enum {\n     type Ast = ast::Enum;\n     fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Enum> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n+\n+    fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n+        Some(self.id.lookup(db.upcast()).source(db.upcast()))\n+    }\n }\n impl HasSource for Variant {\n     type Ast = ast::Variant;\n     fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Variant> {\n         self.parent.id.child_source(db.upcast()).map(|map| map[self.id].clone())\n     }\n+\n+    fn source(self, db: &dyn HirDatabase) -> Option<InFile<ast::Variant>> {\n+        Some(self.parent.id.child_source(db.upcast()).map(|map| map[self.id].clone()))\n+    }\n }\n impl HasSource for Function {\n     type Ast = ast::Fn;\n     fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Fn> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n+\n+    fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n+        Some(self.id.lookup(db.upcast()).source(db.upcast()))\n+    }\n }\n impl HasSource for Const {\n     type Ast = ast::Const;\n     fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Const> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n+\n+    fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n+        Some(self.id.lookup(db.upcast()).source(db.upcast()))\n+    }\n }\n impl HasSource for Static {\n     type Ast = ast::Static;\n     fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Static> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n+\n+    fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n+        Some(self.id.lookup(db.upcast()).source(db.upcast()))\n+    }\n }\n impl HasSource for Trait {\n     type Ast = ast::Trait;\n     fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Trait> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n+\n+    fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n+        Some(self.id.lookup(db.upcast()).source(db.upcast()))\n+    }\n }\n impl HasSource for TypeAlias {\n     type Ast = ast::TypeAlias;\n     fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::TypeAlias> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n+\n+    fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n+        Some(self.id.lookup(db.upcast()).source(db.upcast()))\n+    }\n }\n impl HasSource for MacroDef {\n     type Ast = ast::Macro;\n@@ -117,12 +164,21 @@ impl HasSource for MacroDef {\n             value: self.id.ast_id.expect(\"MacroDef without ast_id\").to_node(db.upcast()),\n         }\n     }\n+\n+    fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n+        let ast_id = self.id.ast_id?;\n+        Some(InFile { file_id: ast_id.file_id, value: ast_id.to_node(db.upcast()) })\n+    }\n }\n impl HasSource for Impl {\n     type Ast = ast::Impl;\n     fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Impl> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n+\n+    fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n+        Some(self.id.lookup(db.upcast()).source(db.upcast()))\n+    }\n }\n \n impl HasSource for TypeParam {\n@@ -131,6 +187,11 @@ impl HasSource for TypeParam {\n         let child_source = self.id.parent.child_source(db.upcast());\n         child_source.map(|it| it[self.id.local_id].clone())\n     }\n+\n+    fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n+        let child_source = self.id.parent.child_source(db.upcast());\n+        Some(child_source.map(|it| it[self.id.local_id].clone()))\n+    }\n }\n \n impl HasSource for LifetimeParam {\n@@ -139,6 +200,11 @@ impl HasSource for LifetimeParam {\n         let child_source = self.id.parent.child_source(db.upcast());\n         child_source.map(|it| it[self.id.local_id].clone())\n     }\n+\n+    fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n+        let child_source = self.id.parent.child_source(db.upcast());\n+        Some(child_source.map(|it| it[self.id.local_id].clone()))\n+    }\n }\n \n impl HasSource for ConstParam {"}]}