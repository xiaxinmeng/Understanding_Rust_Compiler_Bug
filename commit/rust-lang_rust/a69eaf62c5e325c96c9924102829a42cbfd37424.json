{"sha": "a69eaf62c5e325c96c9924102829a42cbfd37424", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2OWVhZjYyYzVlMzI1Yzk2Yzk5MjQxMDI4MjlhNDJjYmZkMzc0MjQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-08-11T09:56:26Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-08-11T10:17:07Z"}, "message": "Improve validation of TypeckTables keys.", "tree": {"sha": "f93e15bcb48f0f37965006e15ea63eab1d32003a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f93e15bcb48f0f37965006e15ea63eab1d32003a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a69eaf62c5e325c96c9924102829a42cbfd37424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a69eaf62c5e325c96c9924102829a42cbfd37424", "html_url": "https://github.com/rust-lang/rust/commit/a69eaf62c5e325c96c9924102829a42cbfd37424", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a69eaf62c5e325c96c9924102829a42cbfd37424/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f54df1101cabc4663906a5b8b6ca99bab6267a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f54df1101cabc4663906a5b8b6ca99bab6267a3", "html_url": "https://github.com/rust-lang/rust/commit/1f54df1101cabc4663906a5b8b6ca99bab6267a3"}], "stats": {"total": 93, "additions": 55, "deletions": 38}, "files": [{"sha": "186eab724db3650bfc95b2b63c8d318282f091d0", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=a69eaf62c5e325c96c9924102829a42cbfd37424", "patch": "@@ -359,7 +359,7 @@ impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n     /// Used only by `rustc_typeck` during body type-checking/inference,\n     /// will initialize `in_progress_tables` with fresh `TypeckTables`.\n     pub fn with_fresh_in_progress_tables(mut self, table_owner: DefId) -> Self {\n-        self.fresh_tables = Some(RefCell::new(ty::TypeckTables::empty(table_owner)));\n+        self.fresh_tables = Some(RefCell::new(ty::TypeckTables::empty(Some(table_owner))));\n         self\n     }\n "}, {"sha": "930e8e7509083e837283bc1016509b906e09c285", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=a69eaf62c5e325c96c9924102829a42cbfd37424", "patch": "@@ -43,7 +43,7 @@ use syntax::ast;\n use syntax_pos::{MultiSpan, Span};\n use errors::DiagnosticBuilder;\n use hir;\n-use hir::def_id::{DefId, LOCAL_CRATE};\n+use hir::def_id::LOCAL_CRATE;\n use hir::intravisit as hir_visit;\n use syntax::visit as ast_visit;\n \n@@ -986,7 +986,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n \n     let mut cx = LateContext {\n         tcx,\n-        tables: &ty::TypeckTables::empty(DefId::invalid()),\n+        tables: &ty::TypeckTables::empty(None),\n         param_env: ty::ParamEnv::empty(Reveal::UserFacing),\n         access_levels,\n         lint_sess: LintSession::new(&tcx.sess.lint_store),"}, {"sha": "ed04186eb2861ab5e891897278049882a8c29f18", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=a69eaf62c5e325c96c9924102829a42cbfd37424", "patch": "@@ -427,7 +427,7 @@ fn find_live<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut symbol_visitor = MarkSymbolVisitor {\n         worklist,\n         tcx,\n-        tables: &ty::TypeckTables::empty(DefId::invalid()),\n+        tables: &ty::TypeckTables::empty(None),\n         live_symbols: box FxHashSet(),\n         struct_has_extern_repr: false,\n         ignore_non_const_paths: false,"}, {"sha": "98934d607032840780a28ecf72729fecad7d020b", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=a69eaf62c5e325c96c9924102829a42cbfd37424", "patch": "@@ -19,7 +19,6 @@ use syntax::ast;\n use syntax_pos::Span;\n use hir::{self, PatKind};\n use hir::def::Def;\n-use hir::def_id::DefId;\n use hir::intravisit::{self, FnKind, Visitor, NestedVisitorMap};\n \n #[derive(Copy, Clone)]\n@@ -263,7 +262,7 @@ impl<'a, 'tcx> Visitor<'tcx> for EffectCheckVisitor<'a, 'tcx> {\n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut visitor = EffectCheckVisitor {\n         tcx,\n-        tables: &ty::TypeckTables::empty(DefId::invalid()),\n+        tables: &ty::TypeckTables::empty(None),\n         body_id: hir::BodyId { node_id: ast::CRATE_NODE_ID },\n         unsafe_context: UnsafeContext::new(SafeContext),\n     };"}, {"sha": "1e2bb6627afc9610e3b1c4a1d9d7514f53072f03", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=a69eaf62c5e325c96c9924102829a42cbfd37424", "patch": "@@ -375,7 +375,7 @@ fn reachable_set<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) ->\n     });\n     let mut reachable_context = ReachableContext {\n         tcx,\n-        tables: &ty::TypeckTables::empty(DefId::invalid()),\n+        tables: &ty::TypeckTables::empty(None),\n         reachable_symbols: NodeSet(),\n         worklist: Vec::new(),\n         any_library,"}, {"sha": "d93750ec04e0c2f5d7ceb0bf1fe27cd63a001ea0", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 33, "deletions": 19, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=a69eaf62c5e325c96c9924102829a42cbfd37424", "patch": "@@ -212,7 +212,7 @@ pub struct CommonTypes<'tcx> {\n }\n \n pub struct LocalTableInContext<'a, V: 'a> {\n-    local_id_root: DefId,\n+    local_id_root: Option<DefId>,\n     data: &'a ItemLocalMap<V>\n }\n \n@@ -223,11 +223,13 @@ pub struct LocalTableInContext<'a, V: 'a> {\n /// would be in a different frame of reference and using its `local_id`\n /// would result in lookup errors, or worse, in silently wrong data being\n /// stored/returned.\n-fn validate_hir_id_for_typeck_tables(table_id_root: DefId, hir_id: hir::HirId) {\n+fn validate_hir_id_for_typeck_tables(local_id_root: Option<DefId>,\n+                                     hir_id: hir::HirId,\n+                                     mut_access: bool) {\n     #[cfg(debug_assertions)]\n     {\n-        if table_id_root.is_local() {\n-            if hir_id.owner != table_id_root.index {\n+        if let Some(local_id_root) = local_id_root {\n+            if hir_id.owner != local_id_root.index {\n                 ty::tls::with(|tcx| {\n                     let node_id = tcx.hir\n                                      .definitions()\n@@ -237,21 +239,30 @@ fn validate_hir_id_for_typeck_tables(table_id_root: DefId, hir_id: hir::HirId) {\n                           TypeckTables with local_id_root {:?}\",\n                           tcx.hir.node_to_string(node_id),\n                           DefId::local(hir_id.owner),\n-                          table_id_root)\n+                          local_id_root)\n                 });\n             }\n+        } else {\n+            // We use \"Null Object\" TypeckTables in some of the analysis passes.\n+            // These are just expected to be empty and their `local_id_root` is\n+            // `None`. Therefore we cannot verify whether a given `HirId` would\n+            // be a valid key for the given table. Instead we make sure that\n+            // nobody tries to write to such a Null Object table.\n+            if mut_access {\n+                bug!(\"access to invalid TypeckTables\")\n+            }\n         }\n     }\n }\n \n impl<'a, V> LocalTableInContext<'a, V> {\n     pub fn contains_key(&self, id: hir::HirId) -> bool {\n-        validate_hir_id_for_typeck_tables(self.local_id_root, id);\n+        validate_hir_id_for_typeck_tables(self.local_id_root, id, false);\n         self.data.contains_key(&id.local_id)\n     }\n \n     pub fn get(&self, id: hir::HirId) -> Option<&V> {\n-        validate_hir_id_for_typeck_tables(self.local_id_root, id);\n+        validate_hir_id_for_typeck_tables(self.local_id_root, id, false);\n         self.data.get(&id.local_id)\n     }\n \n@@ -269,37 +280,37 @@ impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {\n }\n \n pub struct LocalTableInContextMut<'a, V: 'a> {\n-    local_id_root: DefId,\n+    local_id_root: Option<DefId>,\n     data: &'a mut ItemLocalMap<V>\n }\n \n impl<'a, V> LocalTableInContextMut<'a, V> {\n \n     pub fn get_mut(&mut self, id: hir::HirId) -> Option<&mut V> {\n-        validate_hir_id_for_typeck_tables(self.local_id_root, id);\n+        validate_hir_id_for_typeck_tables(self.local_id_root, id, true);\n         self.data.get_mut(&id.local_id)\n     }\n \n     pub fn entry(&mut self, id: hir::HirId) -> Entry<hir::ItemLocalId, V> {\n-        validate_hir_id_for_typeck_tables(self.local_id_root, id);\n+        validate_hir_id_for_typeck_tables(self.local_id_root, id, true);\n         self.data.entry(id.local_id)\n     }\n \n     pub fn insert(&mut self, id: hir::HirId, val: V) -> Option<V> {\n-        validate_hir_id_for_typeck_tables(self.local_id_root, id);\n+        validate_hir_id_for_typeck_tables(self.local_id_root, id, true);\n         self.data.insert(id.local_id, val)\n     }\n \n     pub fn remove(&mut self, id: hir::HirId) -> Option<V> {\n-        validate_hir_id_for_typeck_tables(self.local_id_root, id);\n+        validate_hir_id_for_typeck_tables(self.local_id_root, id, true);\n         self.data.remove(&id.local_id)\n     }\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n pub struct TypeckTables<'tcx> {\n     /// The HirId::owner all ItemLocalIds in this table are relative to.\n-    pub local_id_root: DefId,\n+    pub local_id_root: Option<DefId>,\n \n     /// Resolved definitions for `<T>::X` associated paths and\n     /// method calls, including those of overloaded operators.\n@@ -363,7 +374,7 @@ pub struct TypeckTables<'tcx> {\n }\n \n impl<'tcx> TypeckTables<'tcx> {\n-    pub fn empty(local_id_root: DefId) -> TypeckTables<'tcx> {\n+    pub fn empty(local_id_root: Option<DefId>) -> TypeckTables<'tcx> {\n         TypeckTables {\n             local_id_root,\n             type_dependent_defs: ItemLocalMap(),\n@@ -388,7 +399,7 @@ impl<'tcx> TypeckTables<'tcx> {\n         match *qpath {\n             hir::QPath::Resolved(_, ref path) => path.def,\n             hir::QPath::TypeRelative(..) => {\n-                validate_hir_id_for_typeck_tables(self.local_id_root, id);\n+                validate_hir_id_for_typeck_tables(self.local_id_root, id, false);\n                 self.type_dependent_defs.get(&id.local_id).cloned().unwrap_or(Def::Err)\n             }\n         }\n@@ -436,7 +447,7 @@ impl<'tcx> TypeckTables<'tcx> {\n     }\n \n     pub fn node_id_to_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {\n-        validate_hir_id_for_typeck_tables(self.local_id_root, id);\n+        validate_hir_id_for_typeck_tables(self.local_id_root, id, false);\n         self.node_types.get(&id.local_id).cloned()\n     }\n \n@@ -448,12 +459,12 @@ impl<'tcx> TypeckTables<'tcx> {\n     }\n \n     pub fn node_substs(&self, id: hir::HirId) -> &'tcx Substs<'tcx> {\n-        validate_hir_id_for_typeck_tables(self.local_id_root, id);\n+        validate_hir_id_for_typeck_tables(self.local_id_root, id, false);\n         self.node_substs.get(&id.local_id).cloned().unwrap_or(Substs::empty())\n     }\n \n     pub fn node_substs_opt(&self, id: hir::HirId) -> Option<&'tcx Substs<'tcx>> {\n-        validate_hir_id_for_typeck_tables(self.local_id_root, id);\n+        validate_hir_id_for_typeck_tables(self.local_id_root, id, false);\n         self.node_substs.get(&id.local_id).cloned()\n     }\n \n@@ -502,7 +513,7 @@ impl<'tcx> TypeckTables<'tcx> {\n \n     pub fn expr_adjustments(&self, expr: &hir::Expr)\n                             -> &[ty::adjustment::Adjustment<'tcx>] {\n-        validate_hir_id_for_typeck_tables(self.local_id_root, expr.hir_id);\n+        validate_hir_id_for_typeck_tables(self.local_id_root, expr.hir_id, false);\n         self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])\n     }\n \n@@ -663,6 +674,9 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for Typeck\n                     closure_expr_id\n                 } = *up_var_id;\n \n+                let local_id_root =\n+                    local_id_root.expect(\"trying to hash invalid TypeckTables\");\n+\n                 let var_def_id = DefId {\n                     krate: local_id_root.krate,\n                     index: var_id,"}, {"sha": "828136d6b7e4cc777569c6d10b500fc75085033f", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=a69eaf62c5e325c96c9924102829a42cbfd37424", "patch": "@@ -45,7 +45,6 @@ use std::option;\n use std::path::Path;\n use std::str::FromStr;\n \n-use rustc::hir::def_id::DefId;\n use rustc::hir::map as hir_map;\n use rustc::hir::map::blocks;\n use rustc::hir;\n@@ -233,7 +232,7 @@ impl PpSourceMode {\n                                                                  arenas,\n                                                                  id,\n                                                                  |tcx, _, _, _| {\n-                    let empty_tables = ty::TypeckTables::empty(DefId::invalid());\n+                    let empty_tables = ty::TypeckTables::empty(None);\n                     let annotation = TypedAnnotation {\n                         tcx: tcx,\n                         tables: Cell::new(&empty_tables)"}, {"sha": "9185f73974cd72118c459390a0ddb7871b6bc0dd", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=a69eaf62c5e325c96c9924102829a42cbfd37424", "patch": "@@ -471,7 +471,7 @@ fn check_adjustments<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Exp\n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     tcx.hir.krate().visit_all_item_likes(&mut CheckCrateVisitor {\n         tcx: tcx,\n-        tables: &ty::TypeckTables::empty(DefId::invalid()),\n+        tables: &ty::TypeckTables::empty(None),\n         in_fn: false,\n         promotable: false,\n         mut_rvalue_borrows: NodeSet(),"}, {"sha": "373d7911cf93647b4090142163fb468eb81a3ad9", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=a69eaf62c5e325c96c9924102829a42cbfd37424", "patch": "@@ -1656,7 +1656,7 @@ fn privacy_access_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let krate = tcx.hir.krate();\n \n-    let empty_tables = ty::TypeckTables::empty(DefId::invalid());\n+    let empty_tables = ty::TypeckTables::empty(None);\n \n \n     // Check privacy of names not checked in previous compilation stages."}, {"sha": "c3d071d27d6ef76a7218968239b0002c793200c2", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=a69eaf62c5e325c96c9924102829a42cbfd37424", "patch": "@@ -977,7 +977,7 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(tcx: TyCtxt<'l, 'tcx, 'tcx>,\n \n     let save_ctxt = SaveContext {\n         tcx: tcx,\n-        tables: &ty::TypeckTables::empty(DefId::invalid()),\n+        tables: &ty::TypeckTables::empty(None),\n         analysis: analysis,\n         span_utils: SpanUtils::new(&tcx.sess),\n         config: find_config(config),"}, {"sha": "826e8de860b9e8cfa44616964342fbff777b4c7c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a69eaf62c5e325c96c9924102829a42cbfd37424", "patch": "@@ -901,7 +901,7 @@ fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // Consistency check our TypeckTables instance can hold all ItemLocalIds\n     // it will need to hold.\n     assert_eq!(tables.local_id_root,\n-               DefId::local(tcx.hir.definitions().node_to_hir_id(id).owner));\n+               Some(DefId::local(tcx.hir.definitions().node_to_hir_id(id).owner)));\n     tables\n }\n "}, {"sha": "a363e47a14f2925d0d46a4a298d9a4b6212b022e", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69eaf62c5e325c96c9924102829a42cbfd37424/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=a69eaf62c5e325c96c9924102829a42cbfd37424", "patch": "@@ -81,7 +81,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n \n         WritebackCx {\n             fcx: fcx,\n-            tables: ty::TypeckTables::empty(DefId::local(owner.owner)),\n+            tables: ty::TypeckTables::empty(Some(DefId::local(owner.owner))),\n             body: body\n         }\n     }\n@@ -229,10 +229,11 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n     fn visit_closures(&mut self) {\n         let fcx_tables = self.fcx.tables.borrow();\n         debug_assert_eq!(fcx_tables.local_id_root, self.tables.local_id_root);\n+        let common_local_id_root = fcx_tables.local_id_root.unwrap();\n \n         for (&id, closure_ty) in fcx_tables.closure_tys().iter() {\n             let hir_id = hir::HirId {\n-                owner: fcx_tables.local_id_root.index,\n+                owner: common_local_id_root.index,\n                 local_id: id,\n             };\n             let closure_ty = self.resolve(closure_ty, &hir_id);\n@@ -241,7 +242,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n \n         for (&id, &closure_kind) in fcx_tables.closure_kinds().iter() {\n             let hir_id = hir::HirId {\n-                owner: fcx_tables.local_id_root.index,\n+                owner: common_local_id_root.index,\n                 local_id: id,\n             };\n             self.tables.closure_kinds_mut().insert(hir_id, closure_kind);\n@@ -251,11 +252,13 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n     fn visit_cast_types(&mut self) {\n         let fcx_tables = self.fcx.tables.borrow();\n         let fcx_cast_kinds = fcx_tables.cast_kinds();\n+        debug_assert_eq!(fcx_tables.local_id_root, self.tables.local_id_root);\n         let mut self_cast_kinds = self.tables.cast_kinds_mut();\n+        let common_local_id_root = fcx_tables.local_id_root.unwrap();\n \n         for (&local_id, &cast_kind) in fcx_cast_kinds.iter() {\n             let hir_id = hir::HirId {\n-                owner: fcx_tables.local_id_root.index,\n+                owner: common_local_id_root.index,\n                 local_id,\n             };\n             self_cast_kinds.insert(hir_id, cast_kind);\n@@ -357,10 +360,11 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n     fn visit_liberated_fn_sigs(&mut self) {\n         let fcx_tables = self.fcx.tables.borrow();\n         debug_assert_eq!(fcx_tables.local_id_root, self.tables.local_id_root);\n+        let common_local_id_root = fcx_tables.local_id_root.unwrap();\n \n         for (&local_id, fn_sig) in fcx_tables.liberated_fn_sigs().iter() {\n             let hir_id = hir::HirId {\n-                owner: fcx_tables.local_id_root.index,\n+                owner: common_local_id_root.index,\n                 local_id,\n             };\n             let fn_sig = self.resolve(fn_sig, &hir_id);\n@@ -371,10 +375,11 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n     fn visit_fru_field_types(&mut self) {\n         let fcx_tables = self.fcx.tables.borrow();\n         debug_assert_eq!(fcx_tables.local_id_root, self.tables.local_id_root);\n+        let common_local_id_root = fcx_tables.local_id_root.unwrap();\n \n         for (&local_id, ftys) in fcx_tables.fru_field_types().iter() {\n             let hir_id = hir::HirId {\n-                owner: fcx_tables.local_id_root.index,\n+                owner: common_local_id_root.index,\n                 local_id,\n             };\n             let ftys = self.resolve(ftys, &hir_id);"}]}