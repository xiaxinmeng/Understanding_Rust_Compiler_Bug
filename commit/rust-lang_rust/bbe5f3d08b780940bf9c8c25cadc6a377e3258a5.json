{"sha": "bbe5f3d08b780940bf9c8c25cadc6a377e3258a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZTVmM2QwOGI3ODA5NDBiZjljOGMyNWNhZGM2YTM3N2UzMjU4YTU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-03-16T06:56:47Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-03-16T14:40:15Z"}, "message": "Rollup merge of #59146 - estebank:suggest-return-lt, r=varkor\n\nSuggest return lifetime when there's only one named lifetime\n\nFix #29094.", "tree": {"sha": "ed085dc949e0dfa8de843f90a34a2637fa7b5e9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed085dc949e0dfa8de843f90a34a2637fa7b5e9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbe5f3d08b780940bf9c8c25cadc6a377e3258a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlyNCtAACgkQ/vbIBR0O\nATxaIQ//bKjnABkw2rskcK7Ho2xEDpQDP119qpjFZc5coJOErKpvIFe8vlz4EeGD\ntsLq+OYSRX21DOvktdUPwc6TMIX6BdvWG6/0FXANS6+mqBBRba1vQfOSNt2QQnPt\nwXEF4wfAxXlAnO0OTw6kqiSIJhQcRA+YZq8uC8MTE4JdAizbxgTDmfnlV/HRIM7V\nqidyUQlOnb38Qv+It1U956dzD/fzyvP6LVZQL3DGOCTJ27JBGRgTRZn83ph6ZaOy\nWfYcoUPa9MaaqQGtPoBWJ9FcuLSGd7W22cOU7DOEqAH26df2261m5EfhS3xKUnPd\nb8ei8qzPoOtM8HK7YPecmAciEwWK1yk7CLedXbl2VU3rktkT0x2vKlJLTzOxGj7j\nnbpiMSICCqSMIHDceoXYPAmn68j+qIfZcOvxktqkVJ1zf/iIkYr6A1ij+aTcOuxU\nD/NrjD62lmDlsHiVv+ahM72YfYw8MBqSqofcjOgG6hiWdSAvNI5UK7y6k/wURZdv\nYERSAUonA6dYCj4shN1GM4ZeePFm/EG2l7UAPpStbvdBidLuA46PDFNjHH8Qs3Ww\nKaTdMXt8KePfSctGPig1x9Kl5Y7HjfLJEGZTBXap8eNVlzcvW/cMqQKUudvR2vXj\nLK074fd9GmD2Zj+qYHGpDeQBUfvWFtuDpmgu9Kc7ughJk53CFzM=\n=t2II\n-----END PGP SIGNATURE-----", "payload": "tree ed085dc949e0dfa8de843f90a34a2637fa7b5e9b\nparent 3bf4398ed2d8329765a45d7fb58111262e922ff9\nparent 0ea9b58029bc7c3da3f213eb9e39acdefcf12647\nauthor kennytm <kennytm@gmail.com> 1552719407 +0800\ncommitter kennytm <kennytm@gmail.com> 1552747215 +0800\n\nRollup merge of #59146 - estebank:suggest-return-lt, r=varkor\n\nSuggest return lifetime when there's only one named lifetime\n\nFix #29094.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbe5f3d08b780940bf9c8c25cadc6a377e3258a5", "html_url": "https://github.com/rust-lang/rust/commit/bbe5f3d08b780940bf9c8c25cadc6a377e3258a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbe5f3d08b780940bf9c8c25cadc6a377e3258a5/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bf4398ed2d8329765a45d7fb58111262e922ff9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf4398ed2d8329765a45d7fb58111262e922ff9", "html_url": "https://github.com/rust-lang/rust/commit/3bf4398ed2d8329765a45d7fb58111262e922ff9"}, {"sha": "0ea9b58029bc7c3da3f213eb9e39acdefcf12647", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ea9b58029bc7c3da3f213eb9e39acdefcf12647", "html_url": "https://github.com/rust-lang/rust/commit/0ea9b58029bc7c3da3f213eb9e39acdefcf12647"}], "stats": {"total": 81, "additions": 76, "deletions": 5}, "files": [{"sha": "ab105360388722bdd72c378d7a935153362a3592", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/bbe5f3d08b780940bf9c8c25cadc6a377e3258a5/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe5f3d08b780940bf9c8c25cadc6a377e3258a5/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=bbe5f3d08b780940bf9c8c25cadc6a377e3258a5", "patch": "@@ -2299,19 +2299,26 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let span = lifetime_refs[0].span;\n         let mut late_depth = 0;\n         let mut scope = self.scope;\n+        let mut lifetime_names = FxHashSet::default();\n         let error = loop {\n             match *scope {\n                 // Do not assign any resolution, it will be inferred.\n                 Scope::Body { .. } => return,\n \n                 Scope::Root => break None,\n \n-                Scope::Binder { s, .. } => {\n+                Scope::Binder { s, ref lifetimes, .. } => {\n+                    // collect named lifetimes for suggestions\n+                    for name in lifetimes.keys() {\n+                        if let hir::ParamName::Plain(name) = name {\n+                            lifetime_names.insert(*name);\n+                        }\n+                    }\n                     late_depth += 1;\n                     scope = s;\n                 }\n \n-                Scope::Elision { ref elide, .. } => {\n+                Scope::Elision { ref elide, ref s, .. } => {\n                     let lifetime = match *elide {\n                         Elide::FreshLateAnon(ref counter) => {\n                             for lifetime_ref in lifetime_refs {\n@@ -2321,7 +2328,17 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                             return;\n                         }\n                         Elide::Exact(l) => l.shifted(late_depth),\n-                        Elide::Error(ref e) => break Some(e),\n+                        Elide::Error(ref e) => {\n+                            if let Scope::Binder { ref lifetimes, .. } = s {\n+                                // collect named lifetimes for suggestions\n+                                for name in lifetimes.keys() {\n+                                    if let hir::ParamName::Plain(name) = name {\n+                                        lifetime_names.insert(*name);\n+                                    }\n+                                }\n+                            }\n+                            break Some(e);\n+                        }\n                     };\n                     for lifetime_ref in lifetime_refs {\n                         self.insert_lifetime(lifetime_ref, lifetime);\n@@ -2344,7 +2361,13 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         }\n         if add_label {\n-            add_missing_lifetime_specifiers_label(&mut err, span, lifetime_refs.len());\n+            add_missing_lifetime_specifiers_label(\n+                &mut err,\n+                span,\n+                lifetime_refs.len(),\n+                &lifetime_names,\n+                self.tcx.sess.source_map().span_to_snippet(span).ok().as_ref().map(|s| s.as_str()),\n+            );\n         }\n \n         err.emit();\n@@ -2885,10 +2908,23 @@ fn add_missing_lifetime_specifiers_label(\n     err: &mut DiagnosticBuilder<'_>,\n     span: Span,\n     count: usize,\n+    lifetime_names: &FxHashSet<ast::Ident>,\n+    snippet: Option<&str>,\n ) {\n     if count > 1 {\n         err.span_label(span, format!(\"expected {} lifetime parameters\", count));\n+    } else if let (1, Some(name), Some(\"&\")) = (\n+        lifetime_names.len(),\n+        lifetime_names.iter().next(),\n+        snippet,\n+    ) {\n+        err.span_suggestion(\n+            span,\n+            \"consider using the named lifetime\",\n+            format!(\"&{} \", name),\n+            Applicability::MaybeIncorrect,\n+        );\n     } else {\n         err.span_label(span, \"expected lifetime parameter\");\n-    };\n+    }\n }"}, {"sha": "9bfce11be9ea3b23938a81e6694099775aec9023", "filename": "src/test/ui/suggestions/return-without-lifetime.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbe5f3d08b780940bf9c8c25cadc6a377e3258a5/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe5f3d08b780940bf9c8c25cadc6a377e3258a5/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.rs?ref=bbe5f3d08b780940bf9c8c25cadc6a377e3258a5", "patch": "@@ -0,0 +1,10 @@\n+struct Thing<'a>(&'a ());\n+struct Foo<'a>(&usize);\n+//~^ ERROR missing lifetime specifier\n+\n+fn func1<'a>(_arg: &'a Thing) -> &() { unimplemented!() }\n+//~^ ERROR missing lifetime specifier\n+fn func2<'a>(_arg: &Thing<'a>) -> &() { unimplemented!() }\n+//~^ ERROR missing lifetime specifier\n+\n+fn main() {}"}, {"sha": "7f5ff95938e309524ce6130c406deba98afe85c3", "filename": "src/test/ui/suggestions/return-without-lifetime.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bbe5f3d08b780940bf9c8c25cadc6a377e3258a5/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe5f3d08b780940bf9c8c25cadc6a377e3258a5/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr?ref=bbe5f3d08b780940bf9c8c25cadc6a377e3258a5", "patch": "@@ -0,0 +1,25 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/return-without-lifetime.rs:2:16\n+   |\n+LL | struct Foo<'a>(&usize);\n+   |                ^ help: consider using the named lifetime: `&'a`\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/return-without-lifetime.rs:5:34\n+   |\n+LL | fn func1<'a>(_arg: &'a Thing) -> &() { unimplemented!() }\n+   |                                  ^ help: consider using the named lifetime: `&'a`\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say which one of `_arg`'s 2 lifetimes it is borrowed from\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/return-without-lifetime.rs:7:35\n+   |\n+LL | fn func2<'a>(_arg: &Thing<'a>) -> &() { unimplemented!() }\n+   |                                   ^ help: consider using the named lifetime: `&'a`\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say which one of `_arg`'s 2 lifetimes it is borrowed from\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}]}