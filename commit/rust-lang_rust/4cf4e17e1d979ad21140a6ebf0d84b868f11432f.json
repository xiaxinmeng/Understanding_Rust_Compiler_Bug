{"sha": "4cf4e17e1d979ad21140a6ebf0d84b868f11432f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZjRlMTdlMWQ5NzlhZDIxMTQwYTZlYmYwZDg0Yjg2OGYxMTQzMmY=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-02T22:13:08Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-02T23:30:56Z"}, "message": "Track the node_id of the function in trans_common::fn_ctxt.", "tree": {"sha": "8714a5c93909da25a73794c025d4a0cb600917cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8714a5c93909da25a73794c025d4a0cb600917cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cf4e17e1d979ad21140a6ebf0d84b868f11432f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cf4e17e1d979ad21140a6ebf0d84b868f11432f", "html_url": "https://github.com/rust-lang/rust/commit/4cf4e17e1d979ad21140a6ebf0d84b868f11432f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cf4e17e1d979ad21140a6ebf0d84b868f11432f/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8b0d3d7d21f877832e8583c2956fb32816ffe43", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8b0d3d7d21f877832e8583c2956fb32816ffe43", "html_url": "https://github.com/rust-lang/rust/commit/f8b0d3d7d21f877832e8583c2956fb32816ffe43"}], "stats": {"total": 56, "additions": 25, "deletions": 31}, "files": [{"sha": "1fbe16547e297344d72693fc1d9f4af267307997", "filename": "src/comp/middle/freevars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf4e17e1d979ad21140a6ebf0d84b868f11432f/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf4e17e1d979ad21140a6ebf0d84b868f11432f/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffreevars.rs?ref=4cf4e17e1d979ad21140a6ebf0d84b868f11432f", "patch": "@@ -180,7 +180,7 @@ fn def_lookup(tcx: &ty::ctxt, f: ast::node_id, id: ast::node_id) ->\n       none. { ret none; }\n       some(d) {\n         let did = ast::def_id_of_def(d);\n-        if is_freevar_of(tcx, did.node, f) {\n+        if f != -1 && is_freevar_of(tcx, did.node, f) {\n             ret some(ast::def_upvar(did, @d));\n         } else { ret some(d); }\n       }"}, {"sha": "ca50d03a47295c6968fed8dc037eb137a1286a72", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 20, "deletions": 30, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4cf4e17e1d979ad21140a6ebf0d84b868f11432f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf4e17e1d979ad21140a6ebf0d84b868f11432f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=4cf4e17e1d979ad21140a6ebf0d84b868f11432f", "patch": "@@ -3951,7 +3951,7 @@ fn trans_for_each(cx: &@block_ctxt, local: &@ast::local, seq: &@ast::expr,\n                         ty::mk_nil(lcx.ccx.tcx), 0u);\n     let lliterbody: ValueRef =\n         decl_internal_fastcall_fn(lcx.ccx.llmod, s, iter_body_llty);\n-    let fcx = new_fn_ctxt(lcx, cx.sp, lliterbody);\n+    let fcx = new_fn_ctxt_w_id(lcx, cx.sp, lliterbody, body.node.id);\n \n     // Generate code to load the environment out of the\n     // environment pointer.\n@@ -3961,7 +3961,7 @@ fn trans_for_each(cx: &@block_ctxt, local: &@ast::local, seq: &@ast::expr,\n     // Add bindings for the loop variable alias.\n     bcx = trans_alt::bind_irrefutable_pat\n         (bcx, local.node.pat, llvm::LLVMGetParam(fcx.llfn, 3u),\n-         bcx.fcx.llupvars, false);\n+         bcx.fcx.lllocals, false);\n     let lltop = bcx.llbb;\n     let r = trans_block(bcx, body, return);\n     finish_fn(fcx, lltop);\n@@ -3971,7 +3971,6 @@ fn trans_for_each(cx: &@block_ctxt, local: &@ast::local, seq: &@ast::expr,\n         r.bcx.build.RetVoid();\n     }\n \n-\n     // Step 3: Call iter passing [lliterbody, llenv], plus other args.\n     alt seq.node {\n       ast::expr_call(f, args) {\n@@ -4101,36 +4100,22 @@ fn lookup_discriminant(lcx: &@local_ctxt, tid: &ast::def_id,\n fn trans_var(cx: &@block_ctxt, sp: &span, id: ast::node_id) ->\n    lval_result {\n     let ccx = bcx_ccx(cx);\n-    // If we had a good way to get at the node_id for the function we\n-    // are in, we could do a freevars::def_lookup and avoid having to\n-    // check the llupvars case in all of the other cases...\n-    alt bcx_tcx(cx).def_map.find(id) {\n+    alt freevars::def_lookup(bcx_tcx(cx), cx.fcx.id, id) {\n+      some(ast::def_upvar(did, _)) {\n+        assert (cx.fcx.llupvars.contains_key(did.node));\n+        ret lval_mem(cx, cx.fcx.llupvars.get(did.node));\n+      }\n       some(ast::def_arg(did)) {\n-        alt cx.fcx.llargs.find(did.node) {\n-          none. {\n-            assert (cx.fcx.llupvars.contains_key(did.node));\n-            ret lval_mem(cx, cx.fcx.llupvars.get(did.node));\n-          }\n-          some(llval) { ret lval_mem(cx, llval); }\n-        }\n+        assert (cx.fcx.llargs.contains_key(did.node));\n+        ret lval_mem(cx, cx.fcx.llargs.get(did.node));\n       }\n       some(ast::def_local(did)) {\n-        alt cx.fcx.lllocals.find(did.node) {\n-          none. {\n-            assert (cx.fcx.llupvars.contains_key(did.node));\n-            ret lval_mem(cx, cx.fcx.llupvars.get(did.node));\n-          }\n-          some(llval) { ret lval_mem(cx, llval); }\n-        }\n+        assert (cx.fcx.lllocals.contains_key(did.node));\n+        ret lval_mem(cx, cx.fcx.lllocals.get(did.node));\n       }\n       some(ast::def_binding(did)) {\n-        alt cx.fcx.lllocals.find(did.node) {\n-          none. {\n-            assert (cx.fcx.llupvars.contains_key(did.node));\n-            ret lval_mem(cx, cx.fcx.llupvars.get(did.node));\n-          }\n-          some(llval) { ret lval_mem(cx, llval); }\n-        }\n+        assert (cx.fcx.lllocals.contains_key(did.node));\n+        ret lval_mem(cx, cx.fcx.lllocals.get(did.node));\n       }\n       some(ast::def_obj_field(did)) {\n         assert (cx.fcx.llobjfields.contains_key(did.node));\n@@ -6227,7 +6212,8 @@ fn mk_standard_basic_blocks(llfn: ValueRef) ->\n //  - create_llargs_for_fn_args.\n //  - new_fn_ctxt\n //  - trans_args\n-fn new_fn_ctxt(cx: @local_ctxt, sp: &span, llfndecl: ValueRef) -> @fn_ctxt {\n+fn new_fn_ctxt_w_id(cx: @local_ctxt, sp: &span, llfndecl: ValueRef,\n+                    id: ast::node_id) -> @fn_ctxt {\n     let llretptr: ValueRef = llvm::LLVMGetParam(llfndecl, 0u);\n     let lltaskptr: ValueRef = llvm::LLVMGetParam(llfndecl, 1u);\n     let llenv: ValueRef = llvm::LLVMGetParam(llfndecl, 2u);\n@@ -6256,10 +6242,14 @@ fn new_fn_ctxt(cx: @local_ctxt, sp: &span, llfndecl: ValueRef) -> @fn_ctxt {\n           llupvars: llupvars,\n           mutable lltydescs: ~[],\n           derived_tydescs: derived_tydescs,\n+          id: id,\n           sp: sp,\n           lcx: cx};\n }\n \n+fn new_fn_ctxt(cx: @local_ctxt, sp: &span, llfndecl: ValueRef) -> @fn_ctxt {\n+    be new_fn_ctxt_w_id(cx, sp, llfndecl, -1);\n+}\n \n // NB: must keep 4 fns in sync:\n //\n@@ -6460,7 +6450,7 @@ fn trans_closure(bcx_maybe: &option::t[@block_ctxt],\n     set_uwtable(llfndecl);\n \n     // Set up arguments to the function.\n-    let fcx = new_fn_ctxt(cx, sp, llfndecl);\n+    let fcx = new_fn_ctxt_w_id(cx, sp, llfndecl, id);\n     create_llargs_for_fn_args(fcx, f.proto, ty_self,\n                               ty::ret_ty_of_fn(cx.ccx.tcx, id), f.decl.inputs,\n                               ty_params);"}, {"sha": "3ff6b189d7a038125d551b5ee12dae58e8993f29", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf4e17e1d979ad21140a6ebf0d84b868f11432f/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf4e17e1d979ad21140a6ebf0d84b868f11432f/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=4cf4e17e1d979ad21140a6ebf0d84b868f11432f", "patch": "@@ -235,6 +235,9 @@ type fn_ctxt =\n     // a tydesc is created, we cache it in the derived_tydescs table for\n     // the next time that such a tydesc is needed.\n \n+    // The node_id of the function, or -1 if it doesn't correspond to a\n+    // user defined function.\n+\n     // The source span where this function comes from, for error\n     // reporting.\n \n@@ -256,6 +259,7 @@ type fn_ctxt =\n      llupvars: hashmap[ast::node_id, ValueRef],\n      mutable lltydescs: ValueRef[],\n      derived_tydescs: hashmap[ty::t, derived_tydesc_info],\n+     id: ast::node_id,\n      sp: span,\n      lcx: @local_ctxt};\n "}]}