{"sha": "6afd0f57eb97306e677caa2e072f7537a2b314a3", "node_id": "C_kwDOAAsO6NoAKDZhZmQwZjU3ZWI5NzMwNmU2NzdjYWEyZTA3MmY3NTM3YTJiMzE0YTM", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-10-24T10:38:16Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-10-24T12:30:31Z"}, "message": "Refactor: unwrap `Option` once in the beginning of closure", "tree": {"sha": "5be27dc19f465f10a80ac934413d5317661efbfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5be27dc19f465f10a80ac934413d5317661efbfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6afd0f57eb97306e677caa2e072f7537a2b314a3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmNWhW0ACgkQ4laYqTBY\nYXHr8Q//dTbLN8cazJ9wWAAEYUaHl6n5Up+SAmmrM3pUY/1IzBL51mwLfWijs4DS\ngFTXXon5cWX/7g+ncVSxX61vhWJbB7cjXwplmSxGibNXorvTIanFaOSA1+HRUaDj\n8ygTgMdtB2HxU2icRi9YaCWdIsx9YQg1rPh0zRbMySEnVyZysRvOrwjJZlS6R0OU\npQwNZFNCFy/Kfdxnhuo9ie7D3jj+sMb41pqsc3usFKOjWCcCqFJGTbTSnMYQB2pj\nELaN/+uUWTl3fKcEhqDym4edSrjPI7Bg6bSLBP6Ln1kd1Q7Qj937m2OvC0Ka1X/D\nb9QMQb+qjHd9IGnDtVN59bFlQzY+YjIY4KLjSrLRSpnTO9LOFqTx8oCMDGQfHZ5l\n6DH2RKd3Xa27PJ+SkKmInzFOwUFuaLooBv+sQKWYlwR31QdlcVOl8qctBcmPEb8q\nOM9bfJQm9wd87sYBPlD/GcKgeMH5TF75uaUnyZ6fLpx/R8Qleeb0JS6fJgzKolYr\nryT0rgISnZWF9hSjFaGSah4jPw6SJb7jHNSnrOzi13j+5b+tqfSaArpi2T04b51e\nIMXKr1/zYGRX7owe6CpUNMkyJZpBCn37tuLDZ6DLWR8diIoje5Rw/hTfbiXSrzoc\n6+n7z8KSV4TNzYL4mesZsUe4Ny0RE1MIaTo6x7DSVnFV4WyehW4=\n=2T0b\n-----END PGP SIGNATURE-----", "payload": "tree 5be27dc19f465f10a80ac934413d5317661efbfd\nparent 43fb9563b2943d6abc5f3552195f3e27ac618966\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1666607896 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1666614631 +0900\n\nRefactor: unwrap `Option` once in the beginning of closure\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6afd0f57eb97306e677caa2e072f7537a2b314a3", "html_url": "https://github.com/rust-lang/rust/commit/6afd0f57eb97306e677caa2e072f7537a2b314a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6afd0f57eb97306e677caa2e072f7537a2b314a3/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43fb9563b2943d6abc5f3552195f3e27ac618966", "url": "https://api.github.com/repos/rust-lang/rust/commits/43fb9563b2943d6abc5f3552195f3e27ac618966", "html_url": "https://github.com/rust-lang/rust/commit/43fb9563b2943d6abc5f3552195f3e27ac618966"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "9ec52282829a068b1adfaa5eb7912e23a839358a", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6afd0f57eb97306e677caa2e072f7537a2b314a3/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6afd0f57eb97306e677caa2e072f7537a2b314a3/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=6afd0f57eb97306e677caa2e072f7537a2b314a3", "patch": "@@ -487,9 +487,9 @@ impl SourceAnalyzer {\n \n         let mut prefer_value_ns = false;\n         let resolved = (|| {\n+            let infer = self.infer.as_deref()?;\n             if let Some(path_expr) = parent().and_then(ast::PathExpr::cast) {\n                 let expr_id = self.expr_id(db, &path_expr.into())?;\n-                let infer = self.infer.as_ref()?;\n                 if let Some(assoc) = infer.assoc_resolutions_for_expr(expr_id) {\n                     let assoc = match assoc {\n                         AssocItemId::FunctionId(f_in_trait) => {\n@@ -520,18 +520,18 @@ impl SourceAnalyzer {\n                 prefer_value_ns = true;\n             } else if let Some(path_pat) = parent().and_then(ast::PathPat::cast) {\n                 let pat_id = self.pat_id(&path_pat.into())?;\n-                if let Some(assoc) = self.infer.as_ref()?.assoc_resolutions_for_pat(pat_id) {\n+                if let Some(assoc) = infer.assoc_resolutions_for_pat(pat_id) {\n                     return Some(PathResolution::Def(AssocItem::from(assoc).into()));\n                 }\n                 if let Some(VariantId::EnumVariantId(variant)) =\n-                    self.infer.as_ref()?.variant_resolution_for_pat(pat_id)\n+                    infer.variant_resolution_for_pat(pat_id)\n                 {\n                     return Some(PathResolution::Def(ModuleDef::Variant(variant.into())));\n                 }\n             } else if let Some(rec_lit) = parent().and_then(ast::RecordExpr::cast) {\n                 let expr_id = self.expr_id(db, &rec_lit.into())?;\n                 if let Some(VariantId::EnumVariantId(variant)) =\n-                    self.infer.as_ref()?.variant_resolution_for_expr(expr_id)\n+                    infer.variant_resolution_for_expr(expr_id)\n                 {\n                     return Some(PathResolution::Def(ModuleDef::Variant(variant.into())));\n                 }\n@@ -541,8 +541,7 @@ impl SourceAnalyzer {\n                     || parent().and_then(ast::TupleStructPat::cast).map(ast::Pat::from);\n                 if let Some(pat) = record_pat.or_else(tuple_struct_pat) {\n                     let pat_id = self.pat_id(&pat)?;\n-                    let variant_res_for_pat =\n-                        self.infer.as_ref()?.variant_resolution_for_pat(pat_id);\n+                    let variant_res_for_pat = infer.variant_resolution_for_pat(pat_id);\n                     if let Some(VariantId::EnumVariantId(variant)) = variant_res_for_pat {\n                         return Some(PathResolution::Def(ModuleDef::Variant(variant.into())));\n                     }"}]}