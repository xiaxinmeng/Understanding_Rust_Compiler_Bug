{"sha": "63eb4d9114b05695bca2639628019ca61bae7366", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzZWI0ZDkxMTRiMDU2OTViY2EyNjM5NjI4MDE5Y2E2MWJhZTczNjY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-07-25T14:18:16Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-07-25T14:18:16Z"}, "message": "move `during_closure_kind_inference` flag to mc\n\nWe used to put the flag on the `InferCtxt`.", "tree": {"sha": "a13173a71371b8886c73ab52bb0281538c53d70d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a13173a71371b8886c73ab52bb0281538c53d70d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63eb4d9114b05695bca2639628019ca61bae7366", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63eb4d9114b05695bca2639628019ca61bae7366", "html_url": "https://github.com/rust-lang/rust/commit/63eb4d9114b05695bca2639628019ca61bae7366", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63eb4d9114b05695bca2639628019ca61bae7366/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ffc04b0325b0efc749121d03f92538daef37a11", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ffc04b0325b0efc749121d03f92538daef37a11", "html_url": "https://github.com/rust-lang/rust/commit/8ffc04b0325b0efc749121d03f92538daef37a11"}], "stats": {"total": 59, "additions": 37, "deletions": 22}, "files": [{"sha": "2ea2978b2940d858a482a408b98c424a4d2394b8", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/63eb4d9114b05695bca2639628019ca61bae7366/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63eb4d9114b05695bca2639628019ca61bae7366/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=63eb4d9114b05695bca2639628019ca61bae7366", "patch": "@@ -175,12 +175,6 @@ pub struct InferCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     // any obligations set during the current snapshot. In that case, the\n     // snapshot can't be rolled back.\n     pub obligations_in_snapshot: Cell<bool>,\n-\n-    // This is false except during closure kind inference. It is used\n-    // by the mem-categorization code to be able to have stricter\n-    // assertions (which are always true except during upvar\n-    // inference).\n-    during_closure_kind_inference: Cell<bool>,\n }\n \n /// A map returned by `skolemize_late_bound_regions()` indicating the skolemized\n@@ -497,7 +491,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'gcx> {\n             tainted_by_errors_flag: Cell::new(false),\n             err_count_on_creation: self.sess.err_count(),\n             obligations_in_snapshot: Cell::new(false),\n-            during_closure_kind_inference: Cell::new(false),\n         }\n     }\n }\n@@ -539,7 +532,6 @@ impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n             tainted_by_errors_flag: Cell::new(false),\n             err_count_on_creation: tcx.sess.err_count(),\n             obligations_in_snapshot: Cell::new(false),\n-            during_closure_kind_inference: Cell::new(false),\n         }))\n     }\n }\n@@ -1302,14 +1294,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                         .map(|method| resolve_ty(method.ty)))\n     }\n \n-    pub fn set_during_closure_kind_inference(&self, value: bool) {\n-        self.during_closure_kind_inference.set(value);\n-    }\n-\n-    pub fn during_closure_kind_inference(&self) -> bool {\n-        self.during_closure_kind_inference.get()\n-    }\n-\n     /// True if errors have been reported since this infcx was\n     /// created.  This is sometimes used as a heuristic to skip\n     /// reporting errors that often occur as a result of earlier"}, {"sha": "18b80a9636b45e0c2d91a605167bb4b127f2df96", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/63eb4d9114b05695bca2639628019ca61bae7366/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63eb4d9114b05695bca2639628019ca61bae7366/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=63eb4d9114b05695bca2639628019ca61bae7366", "patch": "@@ -271,10 +271,19 @@ enum PassArgs {\n \n impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n     pub fn new(delegate: &'a mut (Delegate<'tcx>+'a),\n-               infcx: &'a InferCtxt<'a, 'gcx, 'tcx>) -> Self\n+               infcx: &'a InferCtxt<'a, 'gcx, 'tcx>)\n+               -> Self\n+    {\n+        ExprUseVisitor::with_options(delegate, infcx, mc::MemCategorizationOptions::default())\n+    }\n+\n+    pub fn with_options(delegate: &'a mut (Delegate<'tcx>+'a),\n+                        infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n+                        options: mc::MemCategorizationOptions)\n+               -> Self\n     {\n         ExprUseVisitor {\n-            mc: mc::MemCategorizationContext::new(infcx),\n+            mc: mc::MemCategorizationContext::with_options(infcx, options),\n             delegate: delegate\n         }\n     }"}, {"sha": "0bc3c1ae899dd267d235e507c18eaded12278d50", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/63eb4d9114b05695bca2639628019ca61bae7366/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63eb4d9114b05695bca2639628019ca61bae7366/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=63eb4d9114b05695bca2639628019ca61bae7366", "patch": "@@ -259,6 +259,18 @@ impl ast_node for hir::Pat {\n #[derive(Copy, Clone)]\n pub struct MemCategorizationContext<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     pub infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n+    options: MemCategorizationOptions,\n+}\n+\n+#[derive(Copy, Clone, Default)]\n+pub struct MemCategorizationOptions {\n+    // If true, then when analyzing a closure upvar, if the closure\n+    // has a missing kind, we treat it like a Fn closure. When false,\n+    // we ICE if the closure has a missing kind. Should be false\n+    // except during closure kind inference. It is used by the\n+    // mem-categorization code to be able to have stricter assertions\n+    // (which are always true except during upvar inference).\n+    pub during_closure_kind_inference: bool,\n }\n \n pub type McResult<T> = Result<T, ()>;\n@@ -362,8 +374,15 @@ impl MutabilityCategory {\n impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n     pub fn new(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>)\n                -> MemCategorizationContext<'a, 'gcx, 'tcx> {\n+        MemCategorizationContext::with_options(infcx, MemCategorizationOptions::default())\n+    }\n+\n+    pub fn with_options(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n+                        options: MemCategorizationOptions)\n+                        -> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         MemCategorizationContext {\n             infcx: infcx,\n+            options: options,\n         }\n     }\n \n@@ -586,7 +605,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                               self.cat_upvar(id, span, var_id, fn_node_id, kind)\n                           }\n                           None => {\n-                              if !self.infcx.during_closure_kind_inference() {\n+                              if !self.options.during_closure_kind_inference {\n                                   span_bug!(\n                                       span,\n                                       \"No closure kind for {:?}\","}, {"sha": "71490423f73f2d0a510cac3b9bf01ac4c14c6751", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/63eb4d9114b05695bca2639628019ca61bae7366/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63eb4d9114b05695bca2639628019ca61bae7366/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=63eb4d9114b05695bca2639628019ca61bae7366", "patch": "@@ -171,10 +171,13 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n         debug!(\"analyze_closure(id={:?}, body.id={:?})\", id, body.id);\n \n         {\n-            self.fcx.set_during_closure_kind_inference(true);\n-            let mut euv = euv::ExprUseVisitor::new(self, self.fcx);\n+            let mut euv =\n+                euv::ExprUseVisitor::with_options(self,\n+                                                  self.fcx,\n+                                                  mc::MemCategorizationOptions {\n+                                                      during_closure_kind_inference: true\n+                                                  });\n             euv.walk_fn(decl, body);\n-            self.fcx.set_during_closure_kind_inference(false);\n         }\n \n         // Now that we've analyzed the closure, we know how each"}]}