{"sha": "284c63e84d21a844c0cbe6fc9d227f381f1b5130", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NGM2M2U4NGQyMWE4NDRjMGNiZTZmYzlkMjI3ZjM4MWYxYjUxMzA=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-10-17T05:31:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-17T05:31:09Z"}, "message": "Merge pull request #3281 from CYBAI/redundant-match\n\nAdd lint for redundant pattern matching for explicit return boolean", "tree": {"sha": "6768af67af1073207d61b137519719e2ed093310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6768af67af1073207d61b137519719e2ed093310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/284c63e84d21a844c0cbe6fc9d227f381f1b5130", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbxskdCRBK7hj4Ov3rIwAAdHIIAIQF4A3JMlRBS7yCTqjv4lb0\n3dlVK6gkaso0tuzMGfV8hWic5wu02ULREOZs8nqVzHQCkmfYnArK7znIkolgdz9U\np8eSnRlSS9CJ4a/jKy74dP2zVZggIqwdeNCheWBfXTuEgMy/zH/vlHGSPK2H3M+8\n2ncux1rki1wq0V0IbYV6Fs0hWgC1ZwMaxJRjEID3bC09OsD2IK205ZKCsssxNMx0\nbZmaU4RbDt72nasw7pK5aGvk1HR3GhYp3cTjJH3k/nHrsf7kY0vdXXYcEOAWKcCD\nJ6Z44nJkH2ogdmCD6gLn/CLLVvf/ZJY/1QjZyBFyvPif89XD++JnkTJmjDlgHik=\n=GL/z\n-----END PGP SIGNATURE-----\n", "payload": "tree 6768af67af1073207d61b137519719e2ed093310\nparent b0ab69fcf18cd7e4c7894d5cea40f2abcc9e75a2\nparent 66ae3b124949d07c2a50e051b166b93029ecc4ca\nauthor Philipp Hansch <dev@phansch.net> 1539754269 +0200\ncommitter GitHub <noreply@github.com> 1539754269 +0200\n\nMerge pull request #3281 from CYBAI/redundant-match\n\nAdd lint for redundant pattern matching for explicit return boolean"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/284c63e84d21a844c0cbe6fc9d227f381f1b5130", "html_url": "https://github.com/rust-lang/rust/commit/284c63e84d21a844c0cbe6fc9d227f381f1b5130", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/284c63e84d21a844c0cbe6fc9d227f381f1b5130/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0ab69fcf18cd7e4c7894d5cea40f2abcc9e75a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0ab69fcf18cd7e4c7894d5cea40f2abcc9e75a2", "html_url": "https://github.com/rust-lang/rust/commit/b0ab69fcf18cd7e4c7894d5cea40f2abcc9e75a2"}, {"sha": "66ae3b124949d07c2a50e051b166b93029ecc4ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/66ae3b124949d07c2a50e051b166b93029ecc4ca", "html_url": "https://github.com/rust-lang/rust/commit/66ae3b124949d07c2a50e051b166b93029ecc4ca"}], "stats": {"total": 514, "additions": 369, "deletions": 145}, "files": [{"sha": "626c39457e206fea0b314fb57a0eef6dc7e38d23", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/284c63e84d21a844c0cbe6fc9d227f381f1b5130/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/284c63e84d21a844c0cbe6fc9d227f381f1b5130/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=284c63e84d21a844c0cbe6fc9d227f381f1b5130", "patch": "@@ -816,6 +816,7 @@ All notable changes to this project will be documented in this file.\n [`redundant_closure_call`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#redundant_closure_call\n [`redundant_field_names`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#redundant_field_names\n [`redundant_pattern`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#redundant_pattern\n+[`redundant_pattern_matching`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#redundant_pattern_matching\n [`ref_in_deref`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#ref_in_deref\n [`regex_macro`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#regex_macro\n [`replace_consts`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#replace_consts"}, {"sha": "904036fe8886b4d4bd2e11dc4e362d9e3c2247f9", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/284c63e84d21a844c0cbe6fc9d227f381f1b5130/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284c63e84d21a844c0cbe6fc9d227f381f1b5130/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=284c63e84d21a844c0cbe6fc9d227f381f1b5130", "patch": "@@ -16,7 +16,7 @@ macro_rules! declare_deprecated_lint {\n \n /// **What it does:** Nothing. This lint has been deprecated.\n ///\n-/// **Deprecation reason:** This used to check for `assert!(a == b)` and recommend \n+/// **Deprecation reason:** This used to check for `assert!(a == b)` and recommend\n /// replacement with `assert_eq!(a, b)`, but this is no longer needed after RFC 2011.\n declare_deprecated_lint! {\n     pub SHOULD_ASSERT_EQ,\n@@ -102,3 +102,13 @@ declare_deprecated_lint! {\n     pub ASSIGN_OPS,\n     \"using compound assignment operators (e.g. `+=`) is harmless\"\n }\n+\n+/// **What it does:** Nothing. This lint has been deprecated.\n+///\n+/// **Deprecation reason:** The original rule will only lint for `if let`. After\n+/// making it support to lint `match`, naming as `if let` is not suitable for it.\n+/// So, this lint is deprecated.\n+declare_deprecated_lint! {\n+    pub IF_LET_REDUNDANT_PATTERN_MATCHING,\n+    \"this lint has been changed to redundant_pattern_matching\"\n+}"}, {"sha": "bced0c9552d003614b178c353db495d6b2384265", "filename": "clippy_lints/src/if_let_redundant_pattern_matching.rs", "status": "removed", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/b0ab69fcf18cd7e4c7894d5cea40f2abcc9e75a2/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0ab69fcf18cd7e4c7894d5cea40f2abcc9e75a2/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs?ref=b0ab69fcf18cd7e4c7894d5cea40f2abcc9e75a2", "patch": "@@ -1,103 +0,0 @@\n-// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc::hir::*;\n-use crate::utils::{match_qpath, paths, snippet, span_lint_and_then};\n-use crate::rustc_errors::Applicability;\n-\n-/// **What it does:** Lint for redundant pattern matching over `Result` or\n-/// `Option`\n-///\n-/// **Why is this bad?** It's more concise and clear to just use the proper\n-/// utility function\n-///\n-/// **Known problems:** None.\n-///\n-/// **Example:**\n-///\n-/// ```rust\n-/// if let Ok(_) = Ok::<i32, i32>(42) {}\n-/// if let Err(_) = Err::<i32, i32>(42) {}\n-/// if let None = None::<()> {}\n-/// if let Some(_) = Some(42) {}\n-/// ```\n-///\n-/// The more idiomatic use would be:\n-///\n-/// ```rust\n-/// if Ok::<i32, i32>(42).is_ok() {}\n-/// if Err::<i32, i32>(42).is_err() {}\n-/// if None::<()>.is_none() {}\n-/// if Some(42).is_some() {}\n-/// ```\n-///\n-declare_clippy_lint! {\n-    pub IF_LET_REDUNDANT_PATTERN_MATCHING,\n-    style,\n-    \"use the proper utility function avoiding an `if let`\"\n-}\n-\n-#[derive(Copy, Clone)]\n-pub struct Pass;\n-\n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(IF_LET_REDUNDANT_PATTERN_MATCHING)\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n-    #[allow(clippy::similar_names)]\n-    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if let ExprKind::Match(ref op, ref arms, MatchSource::IfLetDesugar { .. }) = expr.node {\n-            if arms[0].pats.len() == 1 {\n-                let good_method = match arms[0].pats[0].node {\n-                    PatKind::TupleStruct(ref path, ref pats, _) if pats.len() == 1 => {\n-                        if let PatKind::Wild = pats[0].node {\n-                            if match_qpath(path, &paths::RESULT_OK) {\n-                                \"is_ok()\"\n-                            } else if match_qpath(path, &paths::RESULT_ERR) {\n-                                \"is_err()\"\n-                            } else if match_qpath(path, &paths::OPTION_SOME) {\n-                                \"is_some()\"\n-                            } else {\n-                                return;\n-                            }\n-                        } else {\n-                            return;\n-                        }\n-                    },\n-\n-                    PatKind::Path(ref path) if match_qpath(path, &paths::OPTION_NONE) => \"is_none()\",\n-\n-                    _ => return,\n-                };\n-\n-                span_lint_and_then(\n-                    cx,\n-                    IF_LET_REDUNDANT_PATTERN_MATCHING,\n-                    arms[0].pats[0].span,\n-                    &format!(\"redundant pattern matching, consider using `{}`\", good_method),\n-                    |db| {\n-                        let span = expr.span.to(op.span);\n-                        db.span_suggestion_with_applicability(\n-                            span,\n-                            \"try this\",\n-                            format!(\"if {}.{}\", snippet(cx, op.span, \"_\"), good_method),\n-                            Applicability::MachineApplicable, // snippet\n-                        );\n-                    },\n-                );\n-            }\n-        }\n-    }\n-}"}, {"sha": "23bd71a08ab64576212afb06bf090244d621c623", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/284c63e84d21a844c0cbe6fc9d227f381f1b5130/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284c63e84d21a844c0cbe6fc9d227f381f1b5130/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=284c63e84d21a844c0cbe6fc9d227f381f1b5130", "patch": "@@ -126,7 +126,6 @@ pub mod formatting;\n pub mod functions;\n pub mod identity_conversion;\n pub mod identity_op;\n-pub mod if_let_redundant_pattern_matching;\n pub mod if_not_else;\n pub mod indexing_slicing;\n pub mod infallible_destructuring_match;\n@@ -180,6 +179,7 @@ pub mod ptr_offset_with_cast;\n pub mod question_mark;\n pub mod ranges;\n pub mod redundant_field_names;\n+pub mod redundant_pattern_matching;\n pub mod reference;\n pub mod regex;\n pub mod replace_consts;\n@@ -303,6 +303,10 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         \"assign_ops\",\n         \"using compound assignment operators (e.g. `+=`) is harmless\",\n     );\n+    store.register_removed(\n+        \"if_let_redundant_pattern_matching\",\n+        \"this lint has been changed to redundant_pattern_matching\",\n+    );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n     reg.register_late_lint_pass(box serde_api::Serde);\n@@ -402,7 +406,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box missing_doc::MissingDoc::new());\n     reg.register_late_lint_pass(box missing_inline::MissingInline);\n     reg.register_late_lint_pass(box ok_if_let::Pass);\n-    reg.register_late_lint_pass(box if_let_redundant_pattern_matching::Pass);\n+    reg.register_late_lint_pass(box redundant_pattern_matching::Pass);\n     reg.register_late_lint_pass(box partialeq_ne_impl::Pass);\n     reg.register_early_lint_pass(box reference::Pass);\n     reg.register_early_lint_pass(box reference::DerefPass);\n@@ -565,7 +569,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         functions::TOO_MANY_ARGUMENTS,\n         identity_conversion::IDENTITY_CONVERSION,\n         identity_op::IDENTITY_OP,\n-        if_let_redundant_pattern_matching::IF_LET_REDUNDANT_PATTERN_MATCHING,\n         indexing_slicing::OUT_OF_BOUNDS_INDEXING,\n         infallible_destructuring_match::INFALLIBLE_DESTRUCTURING_MATCH,\n         infinite_iter::INFINITE_ITER,\n@@ -680,6 +683,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         ranges::RANGE_PLUS_ONE,\n         ranges::RANGE_ZIP_WITH_LEN,\n         redundant_field_names::REDUNDANT_FIELD_NAMES,\n+        redundant_pattern_matching::REDUNDANT_PATTERN_MATCHING,\n         reference::DEREF_ADDROF,\n         reference::REF_IN_DEREF,\n         regex::INVALID_REGEX,\n@@ -749,7 +753,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         excessive_precision::EXCESSIVE_PRECISION,\n         formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n         formatting::SUSPICIOUS_ELSE_FORMATTING,\n-        if_let_redundant_pattern_matching::IF_LET_REDUNDANT_PATTERN_MATCHING,\n         infallible_destructuring_match::INFALLIBLE_DESTRUCTURING_MATCH,\n         len_zero::LEN_WITHOUT_IS_EMPTY,\n         len_zero::LEN_ZERO,\n@@ -800,6 +803,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         ptr::PTR_ARG,\n         question_mark::QUESTION_MARK,\n         redundant_field_names::REDUNDANT_FIELD_NAMES,\n+        redundant_pattern_matching::REDUNDANT_PATTERN_MATCHING,\n         regex::REGEX_MACRO,\n         regex::TRIVIAL_REGEX,\n         returns::LET_AND_RETURN,"}, {"sha": "f8c5b29bad16a9f6afcb844fb1cbd4d2f5a1024d", "filename": "clippy_lints/src/redundant_pattern_matching.rs", "status": "added", "additions": 228, "deletions": 0, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/284c63e84d21a844c0cbe6fc9d227f381f1b5130/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284c63e84d21a844c0cbe6fc9d227f381f1b5130/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs?ref=284c63e84d21a844c0cbe6fc9d227f381f1b5130", "patch": "@@ -0,0 +1,228 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::syntax::ptr::P;\n+use crate::syntax::ast::LitKind;\n+use crate::utils::{match_qpath, paths, snippet, span_lint_and_then};\n+use crate::rustc_errors::Applicability;\n+\n+/// **What it does:** Lint for redundant pattern matching over `Result` or\n+/// `Option`\n+///\n+/// **Why is this bad?** It's more concise and clear to just use the proper\n+/// utility function\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+///\n+/// ```rust\n+/// if let Ok(_) = Ok::<i32, i32>(42) {}\n+/// if let Err(_) = Err::<i32, i32>(42) {}\n+/// if let None = None::<()> {}\n+/// if let Some(_) = Some(42) {}\n+/// match Ok::<i32, i32>(42) {\n+///     Ok(_) => true,\n+///     Err(_) => false,\n+/// };\n+/// ```\n+///\n+/// The more idiomatic use would be:\n+///\n+/// ```rust\n+/// if Ok::<i32, i32>(42).is_ok() {}\n+/// if Err::<i32, i32>(42).is_err() {}\n+/// if None::<()>.is_none() {}\n+/// if Some(42).is_some() {}\n+/// Ok::<i32, i32>(42).is_ok();\n+/// ```\n+///\n+declare_clippy_lint! {\n+    pub REDUNDANT_PATTERN_MATCHING,\n+    style,\n+    \"use the proper utility function avoiding an `if let`\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(REDUNDANT_PATTERN_MATCHING)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    #[allow(clippy::similar_names)]\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if let ExprKind::Match(ref op, ref arms, ref match_source) = expr.node {\n+            match match_source {\n+                MatchSource::Normal => find_sugg_for_match(cx, expr, op, arms),\n+                MatchSource::IfLetDesugar { .. } => find_sugg_for_if_let(cx, expr, op, arms),\n+                _ => return,\n+            }\n+        }\n+    }\n+}\n+\n+fn find_sugg_for_if_let<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    expr: &'tcx Expr,\n+    op: &P<Expr>,\n+    arms: &HirVec<Arm>\n+) {\n+    if arms[0].pats.len() == 1 {\n+        let good_method = match arms[0].pats[0].node {\n+            PatKind::TupleStruct(ref path, ref pats, _) if pats.len() == 1 => {\n+                if let PatKind::Wild = pats[0].node {\n+                    if match_qpath(path, &paths::RESULT_OK) {\n+                        \"is_ok()\"\n+                    } else if match_qpath(path, &paths::RESULT_ERR) {\n+                        \"is_err()\"\n+                    } else if match_qpath(path, &paths::OPTION_SOME) {\n+                        \"is_some()\"\n+                    } else {\n+                        return;\n+                    }\n+                } else {\n+                    return;\n+                }\n+            },\n+\n+            PatKind::Path(ref path) if match_qpath(path, &paths::OPTION_NONE) => \"is_none()\",\n+\n+            _ => return,\n+        };\n+\n+        span_lint_and_then(\n+            cx,\n+            REDUNDANT_PATTERN_MATCHING,\n+            arms[0].pats[0].span,\n+            &format!(\"redundant pattern matching, consider using `{}`\", good_method),\n+            |db| {\n+                let span = expr.span.to(op.span);\n+                db.span_suggestion_with_applicability(\n+                    span,\n+                    \"try this\",\n+                    format!(\"if {}.{}\", snippet(cx, op.span, \"_\"), good_method),\n+                    Applicability::MachineApplicable, // snippet\n+                );\n+            },\n+        );\n+    } else {\n+        return;\n+    }\n+}\n+\n+fn find_sugg_for_match<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    expr: &'tcx Expr,\n+    op: &P<Expr>,\n+    arms: &HirVec<Arm>\n+) {\n+    if arms.len() == 2 {\n+        let node_pair = (&arms[0].pats[0].node, &arms[1].pats[0].node);\n+\n+        let found_good_method = match node_pair {\n+            (\n+                PatKind::TupleStruct(ref path_left, ref pats_left, _),\n+                PatKind::TupleStruct(ref path_right, ref pats_right, _)\n+            ) if pats_left.len() == 1 && pats_right.len() == 1 => {\n+                if let (PatKind::Wild, PatKind::Wild) = (&pats_left[0].node, &pats_right[0].node) {\n+                    find_good_method_for_match(\n+                        arms,\n+                        path_left,\n+                        path_right,\n+                        &paths::RESULT_OK,\n+                        &paths::RESULT_ERR,\n+                        \"is_ok()\",\n+                        \"is_err()\"\n+                    )\n+                } else {\n+                    None\n+                }\n+            },\n+            (\n+                PatKind::TupleStruct(ref path_left, ref pats, _),\n+                PatKind::Path(ref path_right)\n+            ) | (\n+                PatKind::Path(ref path_left),\n+                PatKind::TupleStruct(ref path_right, ref pats, _)\n+            ) if pats.len() == 1 => {\n+                if let PatKind::Wild = pats[0].node {\n+                    find_good_method_for_match(\n+                        arms,\n+                        path_left,\n+                        path_right,\n+                        &paths::OPTION_SOME,\n+                        &paths::OPTION_NONE,\n+                        \"is_some()\",\n+                        \"is_none()\"\n+                    )\n+                } else {\n+                    None\n+                }\n+            },\n+            _ => None,\n+        };\n+\n+        if let Some(good_method) = found_good_method {\n+            span_lint_and_then(\n+                cx,\n+                REDUNDANT_PATTERN_MATCHING,\n+                expr.span,\n+                &format!(\"redundant pattern matching, consider using `{}`\", good_method),\n+                |db| {\n+                    let span = expr.span.to(op.span);\n+                    db.span_suggestion_with_applicability(\n+                        span,\n+                        \"try this\",\n+                        format!(\"{}.{}\", snippet(cx, op.span, \"_\"), good_method),\n+                        Applicability::MachineApplicable, // snippet\n+                    );\n+                },\n+            );\n+        }\n+    } else {\n+        return;\n+    }\n+}\n+\n+fn find_good_method_for_match<'a>(\n+    arms: &HirVec<Arm>,\n+    path_left: &QPath,\n+    path_right: &QPath,\n+    expected_left: &[&str],\n+    expected_right: &[&str],\n+    should_be_left: &'a str,\n+    should_be_right: &'a str\n+) -> Option<&'a str> {\n+    let body_node_pair = if match_qpath(path_left, expected_left) && match_qpath(path_right, expected_right) {\n+        (&(*arms[0].body).node, &(*arms[1].body).node)\n+    } else if match_qpath(path_right, expected_left) && match_qpath(path_left, expected_right) {\n+        (&(*arms[1].body).node, &(*arms[0].body).node)\n+    } else {\n+        return None;\n+    };\n+\n+    match body_node_pair {\n+        (ExprKind::Lit(ref lit_left), ExprKind::Lit(ref lit_right)) => {\n+            match (&lit_left.node, &lit_right.node) {\n+                (LitKind::Bool(true), LitKind::Bool(false)) => Some(should_be_left),\n+                (LitKind::Bool(false), LitKind::Bool(true)) => Some(should_be_right),\n+                _ => None,\n+            }\n+        },\n+        _ => None,\n+    }\n+}"}, {"sha": "5111de671890f94484396bcd59e2a22af9f122af", "filename": "tests/ui/if_let_redundant_pattern_matching.stderr", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b0ab69fcf18cd7e4c7894d5cea40f2abcc9e75a2/tests%2Fui%2Fif_let_redundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0ab69fcf18cd7e4c7894d5cea40f2abcc9e75a2/tests%2Fui%2Fif_let_redundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_redundant_pattern_matching.stderr?ref=b0ab69fcf18cd7e4c7894d5cea40f2abcc9e75a2", "patch": "@@ -1,34 +0,0 @@\n-error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/if_let_redundant_pattern_matching.rs:19:12\n-   |\n-19 |     if let Ok(_) = Ok::<i32, i32>(42) {}\n-   |     -------^^^^^------------------------ help: try this: `if Ok::<i32, i32>(42).is_ok()`\n-   |\n-   = note: `-D clippy::if-let-redundant-pattern-matching` implied by `-D warnings`\n-\n-error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/if_let_redundant_pattern_matching.rs:21:12\n-   |\n-21 |       if let Err(_) = Err::<i32, i32>(42) {\n-   |  _____-      ^^^^^^\n-22 | |     }\n-   | |_____- help: try this: `if Err::<i32, i32>(42).is_err()`\n-\n-error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/if_let_redundant_pattern_matching.rs:24:12\n-   |\n-24 |       if let None = None::<()> {\n-   |  _____-      ^^^^\n-25 | |     }\n-   | |_____- help: try this: `if None::<()>.is_none()`\n-\n-error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/if_let_redundant_pattern_matching.rs:27:12\n-   |\n-27 |       if let Some(_) = Some(42) {\n-   |  _____-      ^^^^^^^\n-28 | |     }\n-   | |_____- help: try this: `if Some(42).is_some()`\n-\n-error: aborting due to 4 previous errors\n-"}, {"sha": "d31e97c7959efabc1fe52e83e80decff6a32f55c", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/284c63e84d21a844c0cbe6fc9d227f381f1b5130/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284c63e84d21a844c0cbe6fc9d227f381f1b5130/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=284c63e84d21a844c0cbe6fc9d227f381f1b5130", "patch": "@@ -13,7 +13,7 @@\n \n \n #![warn(clippy::all)]\n-#![allow(unused, clippy::if_let_redundant_pattern_matching)]\n+#![allow(unused, clippy::redundant_pattern_matching)]\n #![warn(clippy::single_match_else, clippy::match_same_arms)]\n \n enum ExprNode {"}, {"sha": "48b7b42cc8c891b16bfdcbe25f2e659d02e46b83", "filename": "tests/ui/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/284c63e84d21a844c0cbe6fc9d227f381f1b5130/tests%2Fui%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284c63e84d21a844c0cbe6fc9d227f381f1b5130/tests%2Fui%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.rs?ref=284c63e84d21a844c0cbe6fc9d227f381f1b5130", "patch": "@@ -11,7 +11,7 @@\n \n \n #![warn(clippy::needless_pass_by_value)]\n-#![allow(dead_code, clippy::single_match, clippy::if_let_redundant_pattern_matching, clippy::many_single_char_names, clippy::option_option)]\n+#![allow(dead_code, clippy::single_match, clippy::redundant_pattern_matching, clippy::many_single_char_names, clippy::option_option)]\n \n use std::borrow::Borrow;\n use std::convert::AsRef;"}, {"sha": "50838584f66e7458c2b3640458ea4e2b90ec7a1d", "filename": "tests/ui/redundant_pattern_matching.rs", "status": "renamed", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/284c63e84d21a844c0cbe6fc9d227f381f1b5130/tests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284c63e84d21a844c0cbe6fc9d227f381f1b5130/tests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.rs?ref=284c63e84d21a844c0cbe6fc9d227f381f1b5130", "patch": "@@ -12,7 +12,7 @@\n \n \n #![warn(clippy::all)]\n-#![warn(clippy::if_let_redundant_pattern_matching)]\n+#![warn(clippy::redundant_pattern_matching)]\n \n \n fn main() {\n@@ -42,4 +42,34 @@ fn main() {\n     if let Ok(x) = Ok::<i32,i32>(42) {\n         println!(\"{}\", x);\n     }\n+\n+    match Ok::<i32, i32>(42) {\n+        Ok(_) => true,\n+        Err(_) => false,\n+    };\n+\n+    match Ok::<i32, i32>(42) {\n+        Ok(_) => false,\n+        Err(_) => true,\n+    };\n+\n+    match Err::<i32, i32>(42) {\n+        Ok(_) => false,\n+        Err(_) => true,\n+    };\n+\n+    match Err::<i32, i32>(42) {\n+        Ok(_) => true,\n+        Err(_) => false,\n+    };\n+\n+    match Some(42) {\n+        Some(_) => true,\n+        None => false,\n+    };\n+\n+    match None::<()> {\n+        Some(_) => false,\n+        None => true,\n+    };\n }", "previous_filename": "tests/ui/if_let_redundant_pattern_matching.rs"}, {"sha": "a42ac7ba04d635bc98cb2225cad262f1721caba6", "filename": "tests/ui/redundant_pattern_matching.stderr", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/284c63e84d21a844c0cbe6fc9d227f381f1b5130/tests%2Fui%2Fredundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/284c63e84d21a844c0cbe6fc9d227f381f1b5130/tests%2Fui%2Fredundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.stderr?ref=284c63e84d21a844c0cbe6fc9d227f381f1b5130", "patch": "@@ -0,0 +1,88 @@\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching.rs:19:12\n+   |\n+19 |     if let Ok(_) = Ok::<i32, i32>(42) {}\n+   |     -------^^^^^------------------------ help: try this: `if Ok::<i32, i32>(42).is_ok()`\n+   |\n+   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching.rs:21:12\n+   |\n+21 |       if let Err(_) = Err::<i32, i32>(42) {\n+   |  _____-      ^^^^^^\n+22 | |     }\n+   | |_____- help: try this: `if Err::<i32, i32>(42).is_err()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching.rs:24:12\n+   |\n+24 |       if let None = None::<()> {\n+   |  _____-      ^^^^\n+25 | |     }\n+   | |_____- help: try this: `if None::<()>.is_none()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching.rs:27:12\n+   |\n+27 |       if let Some(_) = Some(42) {\n+   |  _____-      ^^^^^^^\n+28 | |     }\n+   | |_____- help: try this: `if Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching.rs:46:5\n+   |\n+46 | /     match Ok::<i32, i32>(42) {\n+47 | |         Ok(_) => true,\n+48 | |         Err(_) => false,\n+49 | |     };\n+   | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching.rs:51:5\n+   |\n+51 | /     match Ok::<i32, i32>(42) {\n+52 | |         Ok(_) => false,\n+53 | |         Err(_) => true,\n+54 | |     };\n+   | |_____^ help: try this: `Ok::<i32, i32>(42).is_err()`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching.rs:56:5\n+   |\n+56 | /     match Err::<i32, i32>(42) {\n+57 | |         Ok(_) => false,\n+58 | |         Err(_) => true,\n+59 | |     };\n+   | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n+\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching.rs:61:5\n+   |\n+61 | /     match Err::<i32, i32>(42) {\n+62 | |         Ok(_) => true,\n+63 | |         Err(_) => false,\n+64 | |     };\n+   | |_____^ help: try this: `Err::<i32, i32>(42).is_ok()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching.rs:66:5\n+   |\n+66 | /     match Some(42) {\n+67 | |         Some(_) => true,\n+68 | |         None => false,\n+69 | |     };\n+   | |_____^ help: try this: `Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching.rs:71:5\n+   |\n+71 | /     match None::<()> {\n+72 | |         Some(_) => false,\n+73 | |         None => true,\n+74 | |     };\n+   | |_____^ help: try this: `None::<()>.is_none()`\n+\n+error: aborting due to 10 previous errors\n+"}]}