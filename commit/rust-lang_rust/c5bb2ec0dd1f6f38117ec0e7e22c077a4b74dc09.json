{"sha": "c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1YmIyZWMwZGQxZjZmMzgxMTdlYzBlN2UyMmMwNzdhNGI3NGRjMDk=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-11-15T13:44:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-15T13:44:47Z"}, "message": "Rollup merge of #66197 - Centril:transparent-ast, r=varkor\n\nPush `ast::{ItemKind, ImplItemKind}::OpaqueTy` hack down into lowering\n\nWe currently have a hack in the form of `ast::{ItemKind, ImplItemKind}::OpaqueTy` which is constructed literally when you write `type Alias = impl Trait;` but not e.g. `type Alias = Vec<impl Trait>;`. Per https://github.com/rust-lang/rfcs/pull/2515, this needs to change to allow `impl Trait` in nested positions.  This PR achieves this change for the syntactic aspect but not the semantic one, which will require changes in lowering and def collection. In the interim, `TyKind::opaque_top_hack` is introduced to avoid knock-on changes in lowering, collection, and resolve. These hacks can then be removed and fixed one by one until the desired semantics are supported.\n\nr? @varkor", "tree": {"sha": "2804bcc92024c0ad0d0a1fa39fd820630286b75c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2804bcc92024c0ad0d0a1fa39fd820630286b75c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdzqvPCRBK7hj4Ov3rIwAAdHIIAH611v+SdQDCUnvm4NZh5QVR\nFXPewNN3tqSW4p10vZTHoMJEpnjQxlOUH7pSJlkVPyiVYxfD6jKWc1hR1hZXFhqa\ni5X+2KSFJ3kIomzmPa4Ic7k0ztcA+vD1MBm8jAD+7M+9ZCHvS8IujaFjvGcbzxm7\n0B1QtWUqf9BN4fFa+Bp7cNxMnMgsbtm0D71l0PrDJsoTF0uUR3LmifDzriu0h3Du\n7c3LPZ7xWMv0ZVfTgJJqbwmRU0NcmrQa5E+LHdokNs0YFjS7QzDRz1g6BA9JhJS2\n0oIr9ObTg+VXeZHxnvKjrtlqJQLvuQY3tfMBFtJw2p6OjhZ5Y7vge0QXuBpPuuI=\n=MeQT\n-----END PGP SIGNATURE-----\n", "payload": "tree 2804bcc92024c0ad0d0a1fa39fd820630286b75c\nparent ce36ab2b064c2aa716084d79717c64cc04bb6532\nparent 03cf0d737f075aa8839dd7cc5b1047910ec00ddf\nauthor Tyler Mandry <tmandry@gmail.com> 1573825487 +0100\ncommitter GitHub <noreply@github.com> 1573825487 +0100\n\nRollup merge of #66197 - Centril:transparent-ast, r=varkor\n\nPush `ast::{ItemKind, ImplItemKind}::OpaqueTy` hack down into lowering\n\nWe currently have a hack in the form of `ast::{ItemKind, ImplItemKind}::OpaqueTy` which is constructed literally when you write `type Alias = impl Trait;` but not e.g. `type Alias = Vec<impl Trait>;`. Per https://github.com/rust-lang/rfcs/pull/2515, this needs to change to allow `impl Trait` in nested positions.  This PR achieves this change for the syntactic aspect but not the semantic one, which will require changes in lowering and def collection. In the interim, `TyKind::opaque_top_hack` is introduced to avoid knock-on changes in lowering, collection, and resolve. These hacks can then be removed and fixed one by one until the desired semantics are supported.\n\nr? @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "html_url": "https://github.com/rust-lang/rust/commit/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce36ab2b064c2aa716084d79717c64cc04bb6532", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce36ab2b064c2aa716084d79717c64cc04bb6532", "html_url": "https://github.com/rust-lang/rust/commit/ce36ab2b064c2aa716084d79717c64cc04bb6532"}, {"sha": "03cf0d737f075aa8839dd7cc5b1047910ec00ddf", "url": "https://api.github.com/repos/rust-lang/rust/commits/03cf0d737f075aa8839dd7cc5b1047910ec00ddf", "html_url": "https://github.com/rust-lang/rust/commit/03cf0d737f075aa8839dd7cc5b1047910ec00ddf"}], "stats": {"total": 577, "additions": 314, "deletions": 263}, "files": [{"sha": "ef6a6ae23dc2f8efcd209a6443abfe2e592b1e0d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -454,7 +454,6 @@ impl<'a> LoweringContext<'a> {\n                     | ItemKind::Union(_, ref generics)\n                     | ItemKind::Enum(_, ref generics)\n                     | ItemKind::TyAlias(_, ref generics)\n-                    | ItemKind::OpaqueTy(_, ref generics)\n                     | ItemKind::Trait(_, _, ref generics, ..) => {\n                         let def_id = self.lctx.resolver.definitions().local_def_id(item.id);\n                         let count = generics"}, {"sha": "4cd42927868d731550f298bbbce6ce4352b821c6", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -337,20 +337,22 @@ impl LoweringContext<'_> {\n             ItemKind::Mod(ref m) => hir::ItemKind::Mod(self.lower_mod(m)),\n             ItemKind::ForeignMod(ref nm) => hir::ItemKind::ForeignMod(self.lower_foreign_mod(nm)),\n             ItemKind::GlobalAsm(ref ga) => hir::ItemKind::GlobalAsm(self.lower_global_asm(ga)),\n-            ItemKind::TyAlias(ref t, ref generics) => hir::ItemKind::TyAlias(\n-                self.lower_ty(t, ImplTraitContext::disallowed()),\n-                self.lower_generics(generics, ImplTraitContext::disallowed()),\n-            ),\n-            ItemKind::OpaqueTy(ref b, ref generics) => hir::ItemKind::OpaqueTy(\n-                hir::OpaqueTy {\n-                    generics: self.lower_generics(generics,\n-                        ImplTraitContext::OpaqueTy(None)),\n-                    bounds: self.lower_param_bounds(b,\n-                        ImplTraitContext::OpaqueTy(None)),\n-                    impl_trait_fn: None,\n-                    origin: hir::OpaqueTyOrigin::TypeAlias,\n+            ItemKind::TyAlias(ref ty, ref generics) => match ty.kind.opaque_top_hack() {\n+                None => {\n+                    let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n+                    let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n+                    hir::ItemKind::TyAlias(ty, generics)\n                 },\n-            ),\n+                Some(bounds) => {\n+                    let ty = hir::OpaqueTy {\n+                        generics: self.lower_generics(generics, ImplTraitContext::OpaqueTy(None)),\n+                        bounds: self.lower_param_bounds(bounds, ImplTraitContext::OpaqueTy(None)),\n+                        impl_trait_fn: None,\n+                        origin: hir::OpaqueTyOrigin::TypeAlias,\n+                    };\n+                    hir::ItemKind::OpaqueTy(ty)\n+                }\n+            }\n             ItemKind::Enum(ref enum_definition, ref generics) => {\n                 hir::ItemKind::Enum(\n                     hir::EnumDef {\n@@ -916,16 +918,20 @@ impl LoweringContext<'_> {\n \n                 (generics, hir::ImplItemKind::Method(sig, body_id))\n             }\n-            ImplItemKind::TyAlias(ref ty) => (\n-                self.lower_generics(&i.generics, ImplTraitContext::disallowed()),\n-                hir::ImplItemKind::TyAlias(self.lower_ty(ty, ImplTraitContext::disallowed())),\n-            ),\n-            ImplItemKind::OpaqueTy(ref bounds) => (\n-                self.lower_generics(&i.generics, ImplTraitContext::disallowed()),\n-                hir::ImplItemKind::OpaqueTy(\n-                    self.lower_param_bounds(bounds, ImplTraitContext::disallowed()),\n-                ),\n-            ),\n+            ImplItemKind::TyAlias(ref ty) => {\n+                let generics = self.lower_generics(&i.generics, ImplTraitContext::disallowed());\n+                let kind = match ty.kind.opaque_top_hack() {\n+                    None => {\n+                        let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n+                        hir::ImplItemKind::TyAlias(ty)\n+                    }\n+                    Some(bs) => {\n+                        let bounds = self.lower_param_bounds(bs, ImplTraitContext::disallowed());\n+                        hir::ImplItemKind::OpaqueTy(bounds)\n+                    }\n+                };\n+                (generics, kind)\n+            },\n             ImplItemKind::Macro(..) => bug!(\"`TyMac` should have been expanded by now\"),\n         };\n \n@@ -950,11 +956,13 @@ impl LoweringContext<'_> {\n             span: i.span,\n             vis: self.lower_visibility(&i.vis, Some(i.id)),\n             defaultness: self.lower_defaultness(i.defaultness, true /* [1] */),\n-            kind: match i.kind {\n+            kind: match &i.kind {\n                 ImplItemKind::Const(..) => hir::AssocItemKind::Const,\n-                ImplItemKind::TyAlias(..) => hir::AssocItemKind::Type,\n-                ImplItemKind::OpaqueTy(..) => hir::AssocItemKind::OpaqueTy,\n-                ImplItemKind::Method(ref sig, _) => hir::AssocItemKind::Method {\n+                ImplItemKind::TyAlias(ty) => match ty.kind.opaque_top_hack() {\n+                    None => hir::AssocItemKind::Type,\n+                    Some(_) => hir::AssocItemKind::OpaqueTy,\n+                },\n+                ImplItemKind::Method(sig, _) => hir::AssocItemKind::Method {\n                     has_self: sig.decl.has_self(),\n                 },\n                 ImplItemKind::Macro(..) => unimplemented!(),"}, {"sha": "cfd90f50b1b044154a62fc3f0677a059ee34bec8", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -107,7 +107,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             }\n             ItemKind::Mod(..) | ItemKind::Trait(..) | ItemKind::TraitAlias(..) |\n             ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) |\n-            ItemKind::OpaqueTy(..) | ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) |\n+            ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) |\n             ItemKind::TyAlias(..) => DefPathData::TypeNs(i.ident.name),\n             ItemKind::Fn(sig, generics, body) if sig.header.asyncness.node.is_async() => {\n                 return self.visit_async_fn(\n@@ -239,8 +239,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             }\n             ImplItemKind::Method(..) |\n             ImplItemKind::Const(..) => DefPathData::ValueNs(ii.ident.name),\n-            ImplItemKind::TyAlias(..) |\n-            ImplItemKind::OpaqueTy(..) => DefPathData::TypeNs(ii.ident.name),\n+            ImplItemKind::TyAlias(..) => DefPathData::TypeNs(ii.ident.name),\n             ImplItemKind::Macro(..) => return self.visit_macro_invoc(ii.id),\n         };\n "}, {"sha": "730991698798958af3478f31cd7400a14e3b8643", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 13, "deletions": 48, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -7,7 +7,7 @@ use syntax::ast::{self, Abi, DUMMY_NODE_ID, Ident, Attribute, AttrKind, AttrStyl\n use syntax::ast::{ItemKind, ImplItem, ImplItemKind, TraitItem, TraitItemKind, UseTree, UseTreeKind};\n use syntax::ast::{PathSegment, IsAuto, Constness, IsAsync, Unsafety, Defaultness};\n use syntax::ast::{Visibility, VisibilityKind, Mutability, FnHeader, ForeignItem, ForeignItemKind};\n-use syntax::ast::{Ty, TyKind, Generics, GenericBounds, TraitRef, EnumDef, VariantData, StructField};\n+use syntax::ast::{Ty, TyKind, Generics, TraitRef, EnumDef, VariantData, StructField};\n use syntax::ast::{Mac, MacDelimiter, Block, BindingMode, FnDecl, FnSig, SelfKind, Param};\n use syntax::ptr::P;\n use syntax::ThinVec;\n@@ -24,15 +24,6 @@ use log::debug;\n use std::mem;\n use errors::{PResult, Applicability, DiagnosticBuilder, StashKey};\n \n-/// Whether the type alias or associated type is a concrete type or an opaque type.\n-#[derive(Debug)]\n-pub(super) enum AliasKind {\n-    /// Just a new name for the same type.\n-    Weak(P<Ty>),\n-    /// Only trait impls of the type will be usable, not the actual type itself.\n-    OpaqueTy(GenericBounds),\n-}\n-\n pub(super) type ItemInfo = (Ident, ItemKind, Option<Vec<Attribute>>);\n \n impl<'a> Parser<'a> {\n@@ -269,15 +260,11 @@ impl<'a> Parser<'a> {\n             return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n \n-        if let Some(type_) = self.eat_type() {\n-            let (ident, alias, generics) = type_?;\n+        if self.eat_keyword(kw::Type) {\n             // TYPE ITEM\n-            let item_ = match alias {\n-                AliasKind::Weak(ty) => ItemKind::TyAlias(ty, generics),\n-                AliasKind::OpaqueTy(bounds) => ItemKind::OpaqueTy(bounds, generics),\n-            };\n-            let span = lo.to(self.prev_span);\n-            return Ok(Some(self.mk_item(span, ident, item_, vis, attrs)));\n+            let (ident, ty, generics) = self.parse_type_alias()?;\n+            let kind = ItemKind::TyAlias(ty, generics);\n+            return self.mk_item_with_info(attrs, lo, vis, (ident, kind, None));\n         }\n \n         if self.eat_keyword(kw::Enum) {\n@@ -711,13 +698,9 @@ impl<'a> Parser<'a> {\n         let lo = self.token.span;\n         let vis = self.parse_visibility(false)?;\n         let defaultness = self.parse_defaultness();\n-        let (name, kind, generics) = if let Some(type_) = self.eat_type() {\n-            let (name, alias, generics) = type_?;\n-            let kind = match alias {\n-                AliasKind::Weak(typ) => ast::ImplItemKind::TyAlias(typ),\n-                AliasKind::OpaqueTy(bounds) => ast::ImplItemKind::OpaqueTy(bounds),\n-            };\n-            (name, kind, generics)\n+        let (name, kind, generics) = if self.eat_keyword(kw::Type) {\n+            let (name, ty, generics) = self.parse_type_alias()?;\n+            (name, ast::ImplItemKind::TyAlias(ty), generics)\n         } else if self.is_const_item() {\n             self.parse_impl_const()?\n         } else if let Some(mac) = self.parse_assoc_macro_invoc(\"impl\", Some(&vis), at_end)? {\n@@ -1322,34 +1305,16 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    /// Parses `type Foo = Bar;` or returns `None`\n-    /// without modifying the parser state.\n-    fn eat_type(&mut self) -> Option<PResult<'a, (Ident, AliasKind, Generics)>> {\n-        // This parses the grammar:\n-        //     Ident [\"<\"...\">\"] [\"where\" ...] (\"=\" | \":\") Ty \";\"\n-        if self.eat_keyword(kw::Type) {\n-            Some(self.parse_type_alias())\n-        } else {\n-            None\n-        }\n-    }\n-\n-    /// Parses a type alias or opaque type.\n-    fn parse_type_alias(&mut self) -> PResult<'a, (Ident, AliasKind, Generics)> {\n+    /// Parses the grammar:\n+    ///     Ident [\"<\"...\">\"] [\"where\" ...] (\"=\" | \":\") Ty \";\"\n+    fn parse_type_alias(&mut self) -> PResult<'a, (Ident, P<Ty>, Generics)> {\n         let ident = self.parse_ident()?;\n         let mut tps = self.parse_generics()?;\n         tps.where_clause = self.parse_where_clause()?;\n         self.expect(&token::Eq)?;\n-        let alias = if self.check_keyword(kw::Impl) {\n-            self.bump();\n-            let bounds = self.parse_generic_bounds(Some(self.prev_span))?;\n-            AliasKind::OpaqueTy(bounds)\n-        } else {\n-            let ty = self.parse_ty()?;\n-            AliasKind::Weak(ty)\n-        };\n+        let ty = self.parse_ty()?;\n         self.expect_semi()?;\n-        Ok((ident, alias, tps))\n+        Ok((ident, ty, tps))\n     }\n \n     /// Parses an enum declaration."}, {"sha": "edb91d5bf18ed2512182b14d76b46f828a5191dc", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -20,7 +20,7 @@ use syntax::source_map::Spanned;\n use syntax::symbol::{kw, sym};\n use syntax::visit::{self, Visitor};\n use syntax::{span_err, struct_span_err, walk_list};\n-use syntax_pos::{Span, MultiSpan};\n+use syntax_pos::Span;\n use errors::{Applicability, FatalError};\n \n use rustc_error_codes::*;\n@@ -586,14 +586,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                                                 \"unions cannot have zero fields\");\n                 }\n             }\n-            ItemKind::OpaqueTy(ref bounds, _) => {\n-                if !bounds.iter()\n-                          .any(|b| if let GenericBound::Trait(..) = *b { true } else { false }) {\n-                    let msp = MultiSpan::from_spans(bounds.iter()\n-                        .map(|bound| bound.span()).collect());\n-                    self.err_handler().span_err(msp, \"at least one trait must be specified\");\n-                }\n-            }\n             _ => {}\n         }\n "}, {"sha": "fd401fde20454dac6fbdb2a586b3525dd28d4f5a", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -701,13 +701,12 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }\n \n             // These items live in the type namespace.\n-            ItemKind::TyAlias(..) => {\n-                let res = Res::Def(DefKind::TyAlias, self.r.definitions.local_def_id(item.id));\n-                self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));\n-            }\n-\n-            ItemKind::OpaqueTy(_, _) => {\n-                let res = Res::Def(DefKind::OpaqueTy, self.r.definitions.local_def_id(item.id));\n+            ItemKind::TyAlias(ref ty, _) => {\n+                let def_kind = match ty.kind.opaque_top_hack() {\n+                    None => DefKind::TyAlias,\n+                    Some(_) => DefKind::OpaqueTy,\n+                };\n+                let res = Res::Def(def_kind, self.r.definitions.local_def_id(item.id));\n                 self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));\n             }\n "}, {"sha": "8d11c7224c7044b9e1432004b96097373728c88c", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -732,7 +732,6 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n \n         match item.kind {\n             ItemKind::TyAlias(_, ref generics) |\n-            ItemKind::OpaqueTy(_, ref generics) |\n             ItemKind::Fn(_, ref generics, _) => {\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes),\n                                             |this| visit::walk_item(this, item));\n@@ -1087,18 +1086,6 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n \n                                                 this.visit_ty(ty);\n                                             }\n-                                            ImplItemKind::OpaqueTy(ref bounds) => {\n-                                                // If this is a trait impl, ensure the type\n-                                                // exists in trait\n-                                                this.check_trait_item(impl_item.ident,\n-                                                                      TypeNS,\n-                                                                      impl_item.span,\n-                                                    |n, s| TypeNotMemberOfTrait(n, s));\n-\n-                                                for bound in bounds {\n-                                                    this.visit_param_bound(bound);\n-                                                }\n-                                            }\n                                             ImplItemKind::Macro(_) =>\n                                                 panic!(\"unexpanded macro in resolve!\"),\n                                         }"}, {"sha": "5bec5b5eb6bfd6a1eacd29af161caeaddfa8fb3d", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -1133,12 +1133,6 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                 // trait.\n                 self.visit_ty(ty)\n             }\n-            ast::ImplItemKind::OpaqueTy(ref bounds) => {\n-                // FIXME: uses of the assoc type should ideally point to this\n-                // 'def' and the name here should be a ref to the def in the\n-                // trait.\n-                self.process_bounds(&bounds);\n-            }\n             ast::ImplItemKind::Macro(_) => {}\n         }\n     }\n@@ -1384,38 +1378,6 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                 self.visit_ty(&ty);\n                 self.process_generic_params(ty_params, &qualname, item.id);\n             }\n-            OpaqueTy(ref bounds, ref ty_params) => {\n-                let qualname = format!(\"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id)));\n-\n-                let value = String::new();\n-                if !self.span.filter_generated(item.ident.span) {\n-                    let span = self.span_from_span(item.ident.span);\n-                    let id = id_from_node_id(item.id, &self.save_ctxt);\n-                    let hir_id = self.tcx.hir().node_to_hir_id(item.id);\n-\n-                    self.dumper.dump_def(\n-                        &access_from!(self.save_ctxt, item, hir_id),\n-                        Def {\n-                            kind: DefKind::Type,\n-                            id,\n-                            span,\n-                            name: item.ident.to_string(),\n-                            qualname: qualname.clone(),\n-                            value,\n-                            parent: None,\n-                            children: vec![],\n-                            decl_id: None,\n-                            docs: self.save_ctxt.docs_for_attrs(&item.attrs),\n-                            sig: sig::item_signature(item, &self.save_ctxt),\n-                            attributes: lower_attributes(item.attrs.clone(), &self.save_ctxt),\n-                        },\n-                    );\n-                }\n-\n-                self.process_bounds(bounds);\n-                self.process_generic_params(ty_params, &qualname, item.id);\n-            }\n             Mac(_) => (),\n             _ => visit::walk_item(self, item),\n         }"}, {"sha": "50dfac62024b1306e63edafb53eff911a192f251", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -447,16 +447,6 @@ impl Sig for ast::Item {\n \n                 Ok(merge_sigs(sig.text.clone(), vec![sig, ty]))\n             }\n-            ast::ItemKind::OpaqueTy(ref bounds, ref generics) => {\n-                let text = \"type \".to_owned();\n-                let mut sig = name_and_generics(text, offset, generics, self.id, self.ident, scx)?;\n-\n-                sig.text.push_str(\" = impl \");\n-                sig.text.push_str(&pprust::bounds_to_string(bounds));\n-                sig.text.push(';');\n-\n-                Ok(sig)\n-            }\n             ast::ItemKind::Enum(_, ref generics) => {\n                 let text = \"enum \".to_owned();\n                 let mut sig = name_and_generics(text, offset, generics, self.id, self.ident, scx)?;"}, {"sha": "d358efbe54364d49ee323ee9b6022bb53916e7ba", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -1579,7 +1579,6 @@ pub enum ImplItemKind {\n     Const(P<Ty>, P<Expr>),\n     Method(FnSig, P<Block>),\n     TyAlias(P<Ty>),\n-    OpaqueTy(GenericBounds),\n     Macro(Mac),\n }\n \n@@ -1816,6 +1815,15 @@ impl TyKind {\n             false\n         }\n     }\n+\n+    /// HACK(type_alias_impl_trait, Centril): A temporary crutch used\n+    /// in lowering to avoid making larger changes there and beyond.\n+    pub fn opaque_top_hack(&self) -> Option<&GenericBounds> {\n+        match self {\n+            Self::ImplTrait(_, bounds) => Some(bounds),\n+            _ => None,\n+        }\n+    }\n }\n \n /// Syntax used to declare a trait object.\n@@ -2483,10 +2491,6 @@ pub enum ItemKind {\n     ///\n     /// E.g., `type Foo = Bar<u8>;`.\n     TyAlias(P<Ty>, Generics),\n-    /// An opaque `impl Trait` type alias.\n-    ///\n-    /// E.g., `type Foo = impl Bar + Boo;`.\n-    OpaqueTy(GenericBounds, Generics),\n     /// An enum definition (`enum`).\n     ///\n     /// E.g., `enum Foo<A, B> { C<A>, D<B> }`.\n@@ -2540,7 +2544,6 @@ impl ItemKind {\n             ItemKind::ForeignMod(..) => \"foreign module\",\n             ItemKind::GlobalAsm(..) => \"global asm\",\n             ItemKind::TyAlias(..) => \"type alias\",\n-            ItemKind::OpaqueTy(..) => \"opaque type\",\n             ItemKind::Enum(..) => \"enum\",\n             ItemKind::Struct(..) => \"struct\",\n             ItemKind::Union(..) => \"union\","}, {"sha": "bd836eee42af821765e15defcf96122e6ec4c45b", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -321,6 +321,27 @@ impl<'a> PostExpansionVisitor<'a> {\n             );\n         }\n     }\n+\n+    /// Feature gate `impl Trait` inside `type Alias = $type_expr;`.\n+    fn check_impl_trait(&self, ty: &ast::Ty) {\n+        struct ImplTraitVisitor<'a> {\n+            vis: &'a PostExpansionVisitor<'a>,\n+        }\n+        impl Visitor<'_> for ImplTraitVisitor<'_> {\n+            fn visit_ty(&mut self, ty: &ast::Ty) {\n+                if let ast::TyKind::ImplTrait(..) = ty.kind {\n+                    gate_feature_post!(\n+                        &self.vis,\n+                        type_alias_impl_trait,\n+                        ty.span,\n+                        \"`impl Trait` in type aliases is unstable\"\n+                    );\n+                }\n+                visit::walk_ty(self, ty);\n+            }\n+        }\n+        ImplTraitVisitor { vis: self }.visit_ty(ty);\n+    }\n }\n \n impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n@@ -455,14 +476,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, decl_macro, i.span, msg);\n             }\n \n-            ast::ItemKind::OpaqueTy(..) => {\n-                gate_feature_post!(\n-                    &self,\n-                    type_alias_impl_trait,\n-                    i.span,\n-                    \"`impl Trait` in type aliases is unstable\"\n-                );\n-            }\n+            ast::ItemKind::TyAlias(ref ty, ..) => self.check_impl_trait(&ty),\n \n             _ => {}\n         }\n@@ -636,9 +650,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 }\n             }\n             ast::TraitItemKind::Type(_, ref default) => {\n-                // We use three if statements instead of something like match guards so that all\n-                // of these errors can be emitted if all cases apply.\n-                if default.is_some() {\n+                if let Some(ty) = default {\n+                    self.check_impl_trait(ty);\n                     gate_feature_post!(&self, associated_type_defaults, ti.span,\n                                        \"associated type defaults are unstable\");\n                 }\n@@ -663,15 +676,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                        \"C-variadic functions are unstable\");\n                 }\n             }\n-            ast::ImplItemKind::OpaqueTy(..) => {\n-                gate_feature_post!(\n-                    &self,\n-                    type_alias_impl_trait,\n-                    ii.span,\n-                    \"`impl Trait` in type aliases is unstable\"\n-                );\n-            }\n-            ast::ImplItemKind::TyAlias(_) => {\n+            ast::ImplItemKind::TyAlias(ref ty) => {\n+                self.check_impl_trait(ty);\n                 self.check_gat(&ii.generics, ii.span);\n             }\n             _ => {}"}, {"sha": "f4ef993edb95ae06757af8af846fcd7c1dfd92d0", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -887,10 +887,6 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n             vis.visit_ty(ty);\n             vis.visit_generics(generics);\n         }\n-        ItemKind::OpaqueTy(bounds, generics) => {\n-            visit_bounds(bounds, vis);\n-            vis.visit_generics(generics);\n-        }\n         ItemKind::Enum(EnumDef { variants }, generics) => {\n             variants.flat_map_in_place(|variant| vis.flat_map_variant(variant));\n             vis.visit_generics(generics);\n@@ -970,7 +966,6 @@ pub fn noop_flat_map_impl_item<T: MutVisitor>(mut item: ImplItem, visitor: &mut\n             visitor.visit_block(body);\n         }\n         ImplItemKind::TyAlias(ty) => visitor.visit_ty(ty),\n-        ImplItemKind::OpaqueTy(bounds) => visit_bounds(bounds, visitor),\n         ImplItemKind::Macro(mac) => visitor.visit_mac(mac),\n     }\n     visitor.visit_span(span);"}, {"sha": "ef65a744e83b012dfcfc5470daa5b6de2d5c69ba", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -1255,19 +1255,6 @@ impl<'a> State<'a> {\n                 self.s.word(\";\");\n                 self.end(); // end the outer ibox\n             }\n-            ast::ItemKind::OpaqueTy(ref bounds, ref generics) => {\n-                self.head(visibility_qualified(&item.vis, \"type\"));\n-                self.print_ident(item.ident);\n-                self.word_space(\"= impl\");\n-                self.print_generic_params(&generics.params);\n-                self.end(); // end the inner ibox\n-\n-                self.print_where_clause(&generics.where_clause);\n-                self.s.space();\n-                self.print_type_bounds(\":\", bounds);\n-                self.s.word(\";\");\n-                self.end(); // end the outer ibox\n-            }\n             ast::ItemKind::Enum(ref enum_definition, ref params) => {\n                 self.print_enum_def(\n                     enum_definition,\n@@ -1620,13 +1607,6 @@ impl<'a> State<'a> {\n             ast::ImplItemKind::TyAlias(ref ty) => {\n                 self.print_associated_type(ii.ident, None, Some(ty));\n             }\n-            ast::ImplItemKind::OpaqueTy(ref bounds) => {\n-                self.word_space(\"type\");\n-                self.print_ident(ii.ident);\n-                self.word_space(\"= impl\");\n-                self.print_type_bounds(\":\", bounds);\n-                self.s.word(\";\");\n-            }\n             ast::ImplItemKind::Macro(ref mac) => {\n                 self.print_mac(mac);\n                 match mac.delim {"}, {"sha": "2597ffd750d775030c2e56c21e30f865806b218c", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -263,10 +263,6 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             visitor.visit_ty(typ);\n             visitor.visit_generics(generics)\n         }\n-        ItemKind::OpaqueTy(ref bounds, ref generics) => {\n-            walk_list!(visitor, visit_param_bound, bounds);\n-            visitor.visit_generics(generics)\n-        }\n         ItemKind::Enum(ref enum_definition, ref generics) => {\n             visitor.visit_generics(generics);\n             visitor.visit_enum_def(enum_definition, generics, item.id, item.span)\n@@ -628,9 +624,6 @@ pub fn walk_impl_item<'a, V: Visitor<'a>>(visitor: &mut V, impl_item: &'a ImplIt\n         ImplItemKind::TyAlias(ref ty) => {\n             visitor.visit_ty(ty);\n         }\n-        ImplItemKind::OpaqueTy(ref bounds) => {\n-            walk_list!(visitor, visit_param_bound, bounds);\n-        }\n         ImplItemKind::Macro(ref mac) => {\n             visitor.visit_mac(mac);\n         }"}, {"sha": "6088331cded776d28ec2c8786dc8d85494df4ee3", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.rs", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -1,15 +1,45 @@\n-type Foo = impl std::fmt::Debug; //~ ERROR `impl Trait` in type aliases is unstable\n+use std::fmt::Debug;\n+\n+type Foo = impl Debug; //~ ERROR `impl Trait` in type aliases is unstable\n \n trait Bar {\n-    type Baa: std::fmt::Debug;\n+    type Baa: Debug;\n     fn define() -> Self::Baa;\n }\n \n impl Bar for () {\n-    type Baa = impl std::fmt::Debug; //~ ERROR `impl Trait` in type aliases is unstable\n+    type Baa = impl Debug; //~ ERROR `impl Trait` in type aliases is unstable\n     fn define() -> Self::Baa { 0 }\n }\n \n fn define() -> Foo { 0 }\n \n+trait TraitWithDefault {\n+    type Assoc = impl Debug;\n+    //~^ ERROR associated type defaults are unstable\n+    //~| ERROR `impl Trait` not allowed outside of function\n+    //~| ERROR `impl Trait` in type aliases is unstable\n+}\n+\n+type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+//~^ ERROR `impl Trait` in type aliases is unstable\n+//~| ERROR `impl Trait` in type aliases is unstable\n+//~| ERROR `impl Trait` in type aliases is unstable\n+//~| ERROR `impl Trait` in type aliases is unstable\n+//~| ERROR `impl Trait` not allowed outside of function\n+//~| ERROR `impl Trait` not allowed outside of function\n+//~| ERROR `impl Trait` not allowed outside of function\n+\n+impl Bar for u8 {\n+    type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+    //~^ ERROR `impl Trait` in type aliases is unstable\n+    //~| ERROR `impl Trait` in type aliases is unstable\n+    //~| ERROR `impl Trait` in type aliases is unstable\n+    //~| ERROR `impl Trait` in type aliases is unstable\n+    //~| ERROR `impl Trait` not allowed outside of function\n+    //~| ERROR `impl Trait` not allowed outside of function\n+    //~| ERROR `impl Trait` not allowed outside of function\n+    fn define() -> Self::Baa { (vec![true], 0u8, 0i32..1) }\n+}\n+\n fn main() {}"}, {"sha": "d9ebcdecb9bfd2947c2abeec631b8cb45e87694d", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.stderr", "status": "modified", "additions": 141, "deletions": 8, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -1,21 +1,154 @@\n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:1:1\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:3:12\n    |\n-LL | type Foo = impl std::fmt::Debug;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type Foo = impl Debug;\n+   |            ^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:9:5\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:11:16\n    |\n-LL |     type Baa = impl std::fmt::Debug;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     type Baa = impl Debug;\n+   |                ^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n-error: aborting due to 2 previous errors\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:18:18\n+   |\n+LL |     type Assoc = impl Debug;\n+   |                  ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0658]: associated type defaults are unstable\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:18:5\n+   |\n+LL |     type Assoc = impl Debug;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29661\n+   = help: add `#![feature(associated_type_defaults)]` to the crate attributes to enable\n+\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:24:24\n+   |\n+LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+   |                        ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:24:37\n+   |\n+LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+   |                                     ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:24:49\n+   |\n+LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:24:70\n+   |\n+LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+   |                                                                      ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:34:21\n+   |\n+LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+   |                     ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:34:34\n+   |\n+LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+   |                                  ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:34:46\n+   |\n+LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:34:67\n+   |\n+LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+   |                                                                   ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:18:18\n+   |\n+LL |     type Assoc = impl Debug;\n+   |                  ^^^^^^^^^^\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:24:24\n+   |\n+LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+   |                        ^^^^^^^^^^\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:24:37\n+   |\n+LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+   |                                     ^^^^^^^^^^\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:24:49\n+   |\n+LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:34:21\n+   |\n+LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+   |                     ^^^^^^^^^^\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:34:34\n+   |\n+LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+   |                                  ^^^^^^^^^^\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:34:46\n+   |\n+LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 19 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors have detailed explanations: E0562, E0658.\n+For more information about an error, try `rustc --explain E0562`."}, {"sha": "5ab74e02e0e4045dfc779474e4f12996bbb8210d", "filename": "src/test/ui/impl-trait/where-allowed.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -163,6 +163,7 @@ type InTypeAlias<R> = impl Debug;\n \n type InReturnInTypeAlias<R> = fn() -> impl Debug;\n //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~| ERROR `impl Trait` in type aliases is unstable\n \n // Disallowed in impl headers\n impl PartialEq<impl Debug> for () {"}, {"sha": "fcd4c357afdbe38de804b6524674c7b4a8b6ddf4", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -17,19 +17,28 @@ LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic\n    |                                                 outer `impl Trait`\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:124:5\n+  --> $DIR/where-allowed.rs:124:16\n    |\n LL |     type Out = impl Debug;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:160:1\n+  --> $DIR/where-allowed.rs:160:23\n    |\n LL | type InTypeAlias<R> = impl Debug;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/where-allowed.rs:164:39\n+   |\n+LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n+   |                                       ^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n@@ -179,69 +188,69 @@ LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:168:16\n+  --> $DIR/where-allowed.rs:169:16\n    |\n LL | impl PartialEq<impl Debug> for () {\n    |                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:173:24\n+  --> $DIR/where-allowed.rs:174:24\n    |\n LL | impl PartialEq<()> for impl Debug {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:178:6\n+  --> $DIR/where-allowed.rs:179:6\n    |\n LL | impl impl Debug {\n    |      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:184:24\n+  --> $DIR/where-allowed.rs:185:24\n    |\n LL | impl InInherentImplAdt<impl Debug> {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:190:11\n+  --> $DIR/where-allowed.rs:191:11\n    |\n LL |     where impl Debug: Debug\n    |           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:197:15\n+  --> $DIR/where-allowed.rs:198:15\n    |\n LL |     where Vec<impl Debug>: Debug\n    |               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:204:24\n+  --> $DIR/where-allowed.rs:205:24\n    |\n LL |     where T: PartialEq<impl Debug>\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:211:17\n+  --> $DIR/where-allowed.rs:212:17\n    |\n LL |     where T: Fn(impl Debug)\n    |                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:218:22\n+  --> $DIR/where-allowed.rs:219:22\n    |\n LL |     where T: Fn() -> impl Debug\n    |                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:224:29\n+  --> $DIR/where-allowed.rs:225:29\n    |\n LL |     let _in_local_variable: impl Fn() = || {};\n    |                             ^^^^^^^^^\n    |\n    = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:226:46\n+  --> $DIR/where-allowed.rs:227:46\n    |\n LL |     let _in_return_in_local_variable = || -> impl Fn() { || {} };\n    |                                              ^^^^^^^^^\n@@ -270,7 +279,7 @@ error: could not find defining uses\n LL |     type Out = impl Debug;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 43 previous errors\n+error: aborting due to 44 previous errors\n \n Some errors have detailed explanations: E0282, E0562, E0658, E0666.\n For more information about an error, try `rustc --explain E0282`."}, {"sha": "c31d3912d97319ddfc3336547a23a161aff4167a", "filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -1,8 +1,8 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_nondefining_use.rs:5:20\n+  --> $DIR/generic_nondefining_use.rs:5:15\n    |\n LL | type Cmp<T> = impl 'static;\n-   |                    ^^^^^^^\n+   |               ^^^^^^^^^^^^\n \n error: defining opaque type use does not fully define opaque type\n   --> $DIR/generic_nondefining_use.rs:11:1"}, {"sha": "8015ff7eded9061fc4f84aec174c66bfe1db052d", "filename": "src/test/ui/type-alias-impl-trait/generic_not_used.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.stderr?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -1,8 +1,8 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_not_used.rs:5:38\n+  --> $DIR/generic_not_used.rs:5:33\n    |\n LL | type WrongGeneric<T: 'static> = impl 'static;\n-   |                                      ^^^^^^^\n+   |                                 ^^^^^^^^^^^^\n \n error: type parameter `V` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n   --> $DIR/generic_not_used.rs:8:73"}, {"sha": "b4ecf81ad8827a85623ed7df18b543536b5e9009", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -1,8 +1,8 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:9:29\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:9:24\n    |\n LL | type WrongGeneric<T> = impl 'static;\n-   |                             ^^^^^^^\n+   |                        ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/generic_type_does_not_live_long_enough.rs:6:18"}, {"sha": "d9600f1d1d6bc84abcf5c8c651cf7c9ba6452b1e", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -1,8 +1,8 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:9:29\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:9:24\n    |\n LL | type WrongGeneric<T> = impl 'static;\n-   |                             ^^^^^^^\n+   |                        ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/generic_type_does_not_live_long_enough.rs:6:18"}, {"sha": "5f04391d7537f53b82eee1a86ac92f6a7aa5d47c", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -1,8 +1,8 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained.rs:6:40\n+  --> $DIR/generic_underconstrained.rs:6:35\n    |\n LL | type Underconstrained<T: Trait> = impl 'static;\n-   |                                        ^^^^^^^\n+   |                                   ^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: Trait` is not satisfied\n   --> $DIR/generic_underconstrained.rs:6:1"}, {"sha": "d4c7c7c74529eaa4a7d8e6335af8b8988588b4d1", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -1,14 +1,14 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained2.rs:5:50\n+  --> $DIR/generic_underconstrained2.rs:5:45\n    |\n LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n-   |                                                  ^^^^^^^\n+   |                                             ^^^^^^^^^^^^\n \n error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained2.rs:14:51\n+  --> $DIR/generic_underconstrained2.rs:14:46\n    |\n LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n-   |                                                   ^^^^^^^\n+   |                                              ^^^^^^^^^^^^\n \n error[E0277]: `U` doesn't implement `std::fmt::Debug`\n   --> $DIR/generic_underconstrained2.rs:5:1"}, {"sha": "cb35706a51e09712fc2462d32578209da216da8e", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/issue-60371.rs:8:5\n+  --> $DIR/issue-60371.rs:8:17\n    |\n LL |     type Item = impl Bug;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable"}, {"sha": "3f7acd3383010a190581d9146cad5b1c1e9ee9df", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-with-no-traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-no-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-no-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-no-traits.stderr?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -1,8 +1,8 @@\n error: at least one trait must be specified\n-  --> $DIR/type-alias-impl-trait-with-no-traits.rs:3:17\n+  --> $DIR/type-alias-impl-trait-with-no-traits.rs:3:12\n    |\n LL | type Foo = impl 'static;\n-   |                 ^^^^^^^\n+   |            ^^^^^^^^^^^^\n \n error: at least one trait must be specified\n   --> $DIR/type-alias-impl-trait-with-no-traits.rs:10:13"}, {"sha": "9c63701ed33502e76ed545c1c4b516f4c6da4475", "filename": "src/test/ui/type-alias-impl-trait/unused_generic_param.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funused_generic_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funused_generic_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funused_generic_param.stderr?ref=c5bb2ec0dd1f6f38117ec0e7e22c077a4b74dc09", "patch": "@@ -1,14 +1,14 @@\n error: at least one trait must be specified\n-  --> $DIR/unused_generic_param.rs:6:33\n+  --> $DIR/unused_generic_param.rs:6:28\n    |\n LL | type PartiallyDefined<T> = impl 'static;\n-   |                                 ^^^^^^^\n+   |                            ^^^^^^^^^^^^\n \n error: at least one trait must be specified\n-  --> $DIR/unused_generic_param.rs:13:34\n+  --> $DIR/unused_generic_param.rs:13:29\n    |\n LL | type PartiallyDefined2<T> = impl 'static;\n-   |                                  ^^^^^^^\n+   |                             ^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}]}