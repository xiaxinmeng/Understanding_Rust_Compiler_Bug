{"sha": "008aa5a24e152691d852bd9f0a2990b6e4377397", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwOGFhNWEyNGUxNTI2OTFkODUyYmQ5ZjBhMjk5MGI2ZTQzNzczOTc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-09-04T15:09:49Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-09-05T10:43:24Z"}, "message": "Provide more context for unenclosed delimiters\n\n * When encountering EOF, point at the last opening brace that does not\n   have the same indentation level as its close delimiter.\n * When encountering the wrong type of close delimiter, point at the\n   likely correct open delimiter to give a better idea of what went\n   wrong.", "tree": {"sha": "13847227aed9aaca1f822f60180704fc72576e3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13847227aed9aaca1f822f60180704fc72576e3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/008aa5a24e152691d852bd9f0a2990b6e4377397", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/008aa5a24e152691d852bd9f0a2990b6e4377397", "html_url": "https://github.com/rust-lang/rust/commit/008aa5a24e152691d852bd9f0a2990b6e4377397", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/008aa5a24e152691d852bd9f0a2990b6e4377397/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5238b523c3959e33add469af77b2ffa5a60b4cf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5238b523c3959e33add469af77b2ffa5a60b4cf6", "html_url": "https://github.com/rust-lang/rust/commit/5238b523c3959e33add469af77b2ffa5a60b4cf6"}], "stats": {"total": 137, "additions": 124, "deletions": 13}, "files": [{"sha": "b7e8a880e7e509936746875b04553c9a67203884", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/008aa5a24e152691d852bd9f0a2990b6e4377397/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/008aa5a24e152691d852bd9f0a2990b6e4377397/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=008aa5a24e152691d852bd9f0a2990b6e4377397", "patch": "@@ -66,6 +66,10 @@ pub struct StringReader<'a> {\n     /// The raw source span which *does not* take `override_span` into account\n     span_src_raw: Span,\n     open_braces: Vec<(token::DelimToken, Span)>,\n+    /// The type and spans for all braces that have different indentation.\n+    ///\n+    /// Used only for error recovery when arriving to EOF with mismatched braces.\n+    suspicious_open_spans: Vec<(token::DelimToken, Span, Span)>,\n     crate override_span: Option<Span>,\n     last_unclosed_found_span: Option<Span>,\n }\n@@ -216,6 +220,7 @@ impl<'a> StringReader<'a> {\n             span: syntax_pos::DUMMY_SP,\n             span_src_raw: syntax_pos::DUMMY_SP,\n             open_braces: Vec::new(),\n+            suspicious_open_spans: Vec::new(),\n             override_span,\n             last_unclosed_found_span: None,\n         }"}, {"sha": "2999e65ae4aea04f21b383619e40382448f9f6a7", "filename": "src/libsyntax/parse/lexer/tokentrees.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/008aa5a24e152691d852bd9f0a2990b6e4377397/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/008aa5a24e152691d852bd9f0a2990b6e4377397/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs?ref=008aa5a24e152691d852bd9f0a2990b6e4377397", "patch": "@@ -52,6 +52,20 @@ impl<'a> StringReader<'a> {\n                     err.span_label(sp, \"un-closed delimiter\");\n                 }\n \n+                if let Some((delim, _)) = self.open_braces.last() {\n+                    if let Some((d, open_sp, close_sp)) = self.suspicious_open_spans.iter()\n+                        .filter(|(d, _, _)| delim == d)\n+                        .next()  // these are in reverse order as they get inserted on close, but\n+                    {            // we want the last open/first close\n+                        if d == delim {\n+                            err.span_label(*open_sp, \"this might be the culprit...\");\n+                            err.span_label(\n+                                *close_sp,\n+                                \"...as it matches this but it has different indentation\",\n+                            );\n+                        }\n+                    }\n+                }\n                 Err(err)\n             },\n             token::OpenDelim(delim) => {\n@@ -70,11 +84,20 @@ impl<'a> StringReader<'a> {\n                 // Expand to cover the entire delimited token tree\n                 let span = pre_span.with_hi(self.span.hi());\n \n+                let sm = self.sess.source_map();\n                 match self.token {\n                     // Correct delimiter.\n                     token::CloseDelim(d) if d == delim => {\n-                        self.open_braces.pop().unwrap();\n-\n+                        let (open_brace, open_brace_span) = self.open_braces.pop().unwrap();\n+                        if let Some(current_padding) = sm.span_to_margin(self.span) {\n+                            if let Some(padding) = sm.span_to_margin(open_brace_span) {\n+                                if current_padding != padding {\n+                                    self.suspicious_open_spans.push(\n+                                        (open_brace, open_brace_span, self.span),\n+                                    );\n+                                }\n+                            }\n+                        }\n                         // Parse the close delimiter.\n                         self.real_token();\n                     }\n@@ -96,6 +119,19 @@ impl<'a> StringReader<'a> {\n                             if let Some(&(_, sp)) = self.open_braces.last() {\n                                 err.span_label(sp, \"un-closed delimiter\");\n                             };\n+                            if let Some(current_padding) = sm.span_to_margin(self.span) {\n+                                for (brace, brace_span) in &self.open_braces {\n+                                    if let Some(padding) = sm.span_to_margin(*brace_span) {\n+                                        // high likelihood of these two corresponding\n+                                        if current_padding == padding && brace == &other {\n+                                            err.span_label(\n+                                                *brace_span,\n+                                                \"close delimiter possibly meant for this\",\n+                                            );\n+                                        }\n+                                    }\n+                                }\n+                            }\n                             err.emit();\n                         }\n                         self.open_braces.pop().unwrap();"}, {"sha": "a33090ff41b7a86f86708be4ca1fb1e85fbb571b", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/008aa5a24e152691d852bd9f0a2990b6e4377397/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/008aa5a24e152691d852bd9f0a2990b6e4377397/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=008aa5a24e152691d852bd9f0a2990b6e4377397", "patch": "@@ -251,17 +251,18 @@ impl SourceMap {\n     /// crate. The source code of such an \"imported source_file\" is not available,\n     /// but we still know enough to generate accurate debuginfo location\n     /// information for things inlined from other crates.\n-    pub fn new_imported_source_file(&self,\n-                                filename: FileName,\n-                                name_was_remapped: bool,\n-                                crate_of_origin: u32,\n-                                src_hash: u128,\n-                                name_hash: u128,\n-                                source_len: usize,\n-                                mut file_local_lines: Vec<BytePos>,\n-                                mut file_local_multibyte_chars: Vec<MultiByteChar>,\n-                                mut file_local_non_narrow_chars: Vec<NonNarrowChar>)\n-                                -> Lrc<SourceFile> {\n+    pub fn new_imported_source_file(\n+        &self,\n+        filename: FileName,\n+        name_was_remapped: bool,\n+        crate_of_origin: u32,\n+        src_hash: u128,\n+        name_hash: u128,\n+        source_len: usize,\n+        mut file_local_lines: Vec<BytePos>,\n+        mut file_local_multibyte_chars: Vec<MultiByteChar>,\n+        mut file_local_non_narrow_chars: Vec<NonNarrowChar>,\n+    ) -> Lrc<SourceFile> {\n         let start_pos = self.next_start_pos();\n \n         let end_pos = Pos::from_usize(start_pos + source_len);\n@@ -578,6 +579,15 @@ impl SourceMap {\n                                                                 .to_string())\n     }\n \n+    pub fn span_to_margin(&self, sp: Span) -> Option<usize> {\n+        match self.span_to_prev_source(sp) {\n+            Err(_) => None,\n+            Ok(source) => source.split('\\n').last().map(|last_line| {\n+                last_line.len() - last_line.trim_left().len()\n+            })\n+        }\n+    }\n+\n     /// Return the source snippet as `String` before the given `Span`\n     pub fn span_to_prev_source(&self, sp: Span) -> Result<String, SpanSnippetError> {\n         self.span_to_source(sp, |src, start_index, _| src[..start_index].to_string())"}, {"sha": "d0247b86ac372c12d1e0d91f46c6de8e6eeec7a3", "filename": "src/test/ui/parser-recovery-1.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/008aa5a24e152691d852bd9f0a2990b6e4377397/src%2Ftest%2Fui%2Fparser-recovery-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/008aa5a24e152691d852bd9f0a2990b6e4377397/src%2Ftest%2Fui%2Fparser-recovery-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser-recovery-1.stderr?ref=008aa5a24e152691d852bd9f0a2990b6e4377397", "patch": "@@ -3,6 +3,11 @@ error: this file contains an un-closed delimiter\n    |\n LL | trait Foo {\n    |           - un-closed delimiter\n+LL |     fn bar() {\n+   |              - this might be the culprit...\n+...\n+LL | }\n+   | - ...as it matches this but it has different indentation\n ...\n LL | } //~ ERROR this file contains an un-closed delimiter\n    |                                                       ^"}, {"sha": "640894475846e78595085c8e76260b81feb1c123", "filename": "src/test/ui/parser/unclosed-braces.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/008aa5a24e152691d852bd9f0a2990b6e4377397/src%2Ftest%2Fui%2Fparser%2Funclosed-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/008aa5a24e152691d852bd9f0a2990b6e4377397/src%2Ftest%2Fui%2Fparser%2Funclosed-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funclosed-braces.rs?ref=008aa5a24e152691d852bd9f0a2990b6e4377397", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S {\n+    x: [usize; 3],\n+}\n+\n+fn foo() {\n+    {\n+        {\n+            println!(\"hi\");\n+        }\n+    }\n+}\n+\n+fn main() {\n+//~^ NOTE un-closed delimiter\n+    {\n+        {\n+        //~^ NOTE this might be the culprit...\n+            foo();\n+    }\n+    //~^ NOTE ...as it matches this but it has different indentation\n+}\n+//~ ERROR this file contains an un-closed delimiter"}, {"sha": "5d5ff24faa6ddf4c8c50b16d65ad6d706b248777", "filename": "src/test/ui/parser/unclosed-braces.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/008aa5a24e152691d852bd9f0a2990b6e4377397/src%2Ftest%2Fui%2Fparser%2Funclosed-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/008aa5a24e152691d852bd9f0a2990b6e4377397/src%2Ftest%2Fui%2Fparser%2Funclosed-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funclosed-braces.stderr?ref=008aa5a24e152691d852bd9f0a2990b6e4377397", "patch": "@@ -0,0 +1,17 @@\n+error: this file contains an un-closed delimiter\n+  --> $DIR/unclosed-braces.rs:32:53\n+   |\n+LL | fn main() {\n+   |           - un-closed delimiter\n+...\n+LL |         {\n+   |         - this might be the culprit...\n+...\n+LL |     }\n+   |     - ...as it matches this but it has different indentation\n+...\n+LL | //~ ERROR this file contains an un-closed delimiter\n+   |                                                     ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b87a59d219655004b2cdb95659c014b5de27e2fe", "filename": "src/test/ui/resolve/token-error-correct-3.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/008aa5a24e152691d852bd9f0a2990b6e4377397/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/008aa5a24e152691d852bd9f0a2990b6e4377397/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr?ref=008aa5a24e152691d852bd9f0a2990b6e4377397", "patch": "@@ -1,6 +1,8 @@\n error: incorrect close delimiter: `}`\n   --> $DIR/token-error-correct-3.rs:30:9\n    |\n+LL |         if !is_directory(path.as_ref()) { //~ ERROR: cannot find function `is_directory`\n+   |                                         - close delimiter possibly meant for this\n LL |             callback(path.as_ref(); //~ ERROR expected one of\n    |                     - un-closed delimiter\n ..."}, {"sha": "b69098407323af79d253999430e7a943d8d6709f", "filename": "src/test/ui/resolve/token-error-correct.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/008aa5a24e152691d852bd9f0a2990b6e4377397/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/008aa5a24e152691d852bd9f0a2990b6e4377397/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr?ref=008aa5a24e152691d852bd9f0a2990b6e4377397", "patch": "@@ -1,6 +1,8 @@\n error: incorrect close delimiter: `}`\n   --> $DIR/token-error-correct.rs:16:1\n    |\n+LL | fn main() {\n+   |           - close delimiter possibly meant for this\n LL |     foo(bar(;\n    |            - un-closed delimiter\n LL |     //~^ ERROR: expected expression, found `;`"}, {"sha": "9800b0c5e3f05bf10af16c5cffbee4c75edfb439", "filename": "src/test/ui/token/issue-10636-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/008aa5a24e152691d852bd9f0a2990b6e4377397/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/008aa5a24e152691d852bd9f0a2990b6e4377397/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr?ref=008aa5a24e152691d852bd9f0a2990b6e4377397", "patch": "@@ -1,6 +1,8 @@\n error: incorrect close delimiter: `}`\n   --> $DIR/issue-10636-2.rs:18:1\n    |\n+LL | pub fn trace_option(option: Option<isize>) {\n+   |                                            - close delimiter possibly meant for this\n LL |     option.map(|some| 42;\n    |               - un-closed delimiter\n ..."}]}