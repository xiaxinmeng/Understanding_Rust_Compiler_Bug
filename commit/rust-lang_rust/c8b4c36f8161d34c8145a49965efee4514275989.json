{"sha": "c8b4c36f8161d34c8145a49965efee4514275989", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4YjRjMzZmODE2MWQzNGM4MTQ1YTQ5OTY1ZWZlZTQ1MTQyNzU5ODk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-10T08:11:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-10T14:10:28Z"}, "message": "Semicolon token", "tree": {"sha": "3b0a50994d76571cdfb2318f2799e6161962974c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b0a50994d76571cdfb2318f2799e6161962974c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8b4c36f8161d34c8145a49965efee4514275989", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8b4c36f8161d34c8145a49965efee4514275989", "html_url": "https://github.com/rust-lang/rust/commit/c8b4c36f8161d34c8145a49965efee4514275989", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8b4c36f8161d34c8145a49965efee4514275989/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f89f2e38855f5b47f68758e98139aa962cb7a01d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f89f2e38855f5b47f68758e98139aa962cb7a01d", "html_url": "https://github.com/rust-lang/rust/commit/f89f2e38855f5b47f68758e98139aa962cb7a01d"}], "stats": {"total": 86, "additions": 57, "deletions": 29}, "files": [{"sha": "8d0f7e922a1d0e9b9a1d47846fa9e04af99630ec", "filename": "crates/ra_assists/src/handlers/introduce_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8b4c36f8161d34c8145a49965efee4514275989/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b4c36f8161d34c8145a49965efee4514275989/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs?ref=c8b4c36f8161d34c8145a49965efee4514275989", "patch": "@@ -61,7 +61,7 @@ pub(crate) fn introduce_variable(ctx: AssistCtx) -> Option<Assist> {\n         };\n         if is_full_stmt {\n             tested_by!(test_introduce_var_expr_stmt);\n-            if full_stmt.unwrap().semi_token().is_none() {\n+            if full_stmt.unwrap().semicolon_token().is_none() {\n                 buf.push_str(\";\");\n             }\n             edit.replace(expr.syntax().text_range(), buf);"}, {"sha": "afd538e4acb513baab2c23086d95d10399580d46", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8b4c36f8161d34c8145a49965efee4514275989/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b4c36f8161d34c8145a49965efee4514275989/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=c8b4c36f8161d34c8145a49965efee4514275989", "patch": "@@ -287,7 +287,7 @@ impl RawItemsCollector {\n         let visibility = RawVisibility::from_ast_with_hygiene(module.visibility(), &self.hygiene);\n \n         let ast_id = self.source_ast_id_map.ast_id(&module);\n-        if module.semi_token().is_some() {\n+        if module.semicolon_token().is_some() {\n             let item =\n                 self.raw_items.modules.alloc(ModuleData::Declaration { name, visibility, ast_id });\n             self.push_item(current_module, attrs, RawItemKind::Module(item));"}, {"sha": "f55cd3bf5345a54759e6e984f1cfb40ae7b31793", "filename": "crates/ra_ide/src/typing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8b4c36f8161d34c8145a49965efee4514275989/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b4c36f8161d34c8145a49965efee4514275989/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping.rs?ref=c8b4c36f8161d34c8145a49965efee4514275989", "patch": "@@ -63,7 +63,7 @@ fn on_char_typed_inner(\n fn on_eq_typed(file: &SourceFile, offset: TextUnit) -> Option<SingleFileChange> {\n     assert_eq!(file.syntax().text().char_at(offset), Some('='));\n     let let_stmt: ast::LetStmt = find_node_at_offset(file.syntax(), offset)?;\n-    if let_stmt.semi_token().is_some() {\n+    if let_stmt.semicolon_token().is_some() {\n         return None;\n     }\n     if let Some(expr) = let_stmt.initializer() {"}, {"sha": "a01f6487d60c2f66a95da1b52765709c1efd7927", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8b4c36f8161d34c8145a49965efee4514275989/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b4c36f8161d34c8145a49965efee4514275989/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=c8b4c36f8161d34c8145a49965efee4514275989", "patch": "@@ -32,9 +32,9 @@ impl ast::FnDef {\n         let mut to_insert: ArrayVec<[SyntaxElement; 2]> = ArrayVec::new();\n         let old_body_or_semi: SyntaxElement = if let Some(old_body) = self.body() {\n             old_body.syntax().clone().into()\n-        } else if let Some(semi) = self.semi_token() {\n+        } else if let Some(semi) = self.semicolon_token() {\n             to_insert.push(make::tokens::single_space().into());\n-            semi.syntax.clone().into()\n+            semi.into()\n         } else {\n             to_insert.push(make::tokens::single_space().into());\n             to_insert.push(body.syntax().clone().into());"}, {"sha": "214e129187650a61009f13f858391385b20132ba", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c8b4c36f8161d34c8145a49965efee4514275989/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b4c36f8161d34c8145a49965efee4514275989/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=c8b4c36f8161d34c8145a49965efee4514275989", "patch": "@@ -58,7 +58,9 @@ impl FnDef {\n     pub fn param_list(&self) -> Option<ParamList> { support::child(&self.syntax) }\n     pub fn ret_type(&self) -> Option<RetType> { support::child(&self.syntax) }\n     pub fn body(&self) -> Option<BlockExpr> { support::child(&self.syntax) }\n-    pub fn semi_token(&self) -> Option<Semi> { support::token(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n+        support::token2(&self.syntax, T ! [ ; ])\n+    }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RetType {\n@@ -102,7 +104,9 @@ impl ast::DocCommentsOwner for StructDef {}\n impl StructDef {\n     pub fn struct_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![struct]) }\n     pub fn field_def_list(&self) -> Option<FieldDefList> { support::child(&self.syntax) }\n-    pub fn semi_token(&self) -> Option<Semi> { support::token(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n+        support::token2(&self.syntax, T ! [ ; ])\n+    }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct UnionDef {\n@@ -328,7 +332,9 @@ impl ast::DocCommentsOwner for Module {}\n impl Module {\n     pub fn mod_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![mod]) }\n     pub fn item_list(&self) -> Option<ItemList> { support::child(&self.syntax) }\n-    pub fn semi_token(&self) -> Option<Semi> { support::token(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n+        support::token2(&self.syntax, T ! [ ; ])\n+    }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ItemList {\n@@ -379,7 +385,9 @@ impl ConstDef {\n     pub fn const_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![const]) }\n     pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n     pub fn body(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn semi_token(&self) -> Option<Semi> { support::token(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n+        support::token2(&self.syntax, T ! [ ; ])\n+    }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct StaticDef {\n@@ -407,7 +415,9 @@ impl StaticDef {\n     pub fn mut_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![mut]) }\n     pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n     pub fn body(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn semi_token(&self) -> Option<Semi> { support::token(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n+        support::token2(&self.syntax, T ! [ ; ])\n+    }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeAliasDef {\n@@ -437,7 +447,9 @@ impl TypeAliasDef {\n     pub fn type_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![type]) }\n     pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n-    pub fn semi_token(&self) -> Option<Semi> { support::token(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n+        support::token2(&self.syntax, T ! [ ; ])\n+    }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ImplDef {\n@@ -582,7 +594,9 @@ impl AstNode for ArrayType {\n impl ArrayType {\n     pub fn l_brack_token(&self) -> Option<LBrack> { support::token(&self.syntax) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n-    pub fn semi_token(&self) -> Option<Semi> { support::token(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n+        support::token2(&self.syntax, T ! [ ; ])\n+    }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn r_brack_token(&self) -> Option<RBrack> { support::token(&self.syntax) }\n }\n@@ -765,7 +779,9 @@ impl ast::AttrsOwner for ArrayExpr {}\n impl ArrayExpr {\n     pub fn l_brack_token(&self) -> Option<LBrack> { support::token(&self.syntax) }\n     pub fn exprs(&self) -> AstChildren<Expr> { support::children(&self.syntax) }\n-    pub fn semi_token(&self) -> Option<Semi> { support::token(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n+        support::token2(&self.syntax, T ! [ ; ])\n+    }\n     pub fn r_brack_token(&self) -> Option<RBrack> { support::token(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1859,7 +1875,9 @@ impl MacroCall {\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n     pub fn excl_token(&self) -> Option<Excl> { support::token(&self.syntax) }\n     pub fn token_tree(&self) -> Option<TokenTree> { support::child(&self.syntax) }\n-    pub fn semi_token(&self) -> Option<Semi> { support::token(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n+        support::token2(&self.syntax, T ! [ ; ])\n+    }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Attr {\n@@ -2100,7 +2118,9 @@ impl AstNode for ExprStmt {\n impl ast::AttrsOwner for ExprStmt {}\n impl ExprStmt {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn semi_token(&self) -> Option<Semi> { support::token(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n+        support::token2(&self.syntax, T ! [ ; ])\n+    }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct LetStmt {\n@@ -2124,7 +2144,9 @@ impl LetStmt {\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n     pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n     pub fn initializer(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn semi_token(&self) -> Option<Semi> { support::token(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n+        support::token2(&self.syntax, T ! [ ; ])\n+    }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Condition {"}, {"sha": "1a6ee935f2dd66d7ff098388f515ace6d5bb720f", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c8b4c36f8161d34c8145a49965efee4514275989/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b4c36f8161d34c8145a49965efee4514275989/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=c8b4c36f8161d34c8145a49965efee4514275989", "patch": "@@ -319,15 +319,15 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             ParamList,\n             RetType,\n             body: BlockExpr,\n-            Semi\n+            T![;]\n         }\n \n         struct RetType { ThinArrow, TypeRef }\n \n         struct StructDef: VisibilityOwner, NameOwner, TypeParamsOwner, AttrsOwner, DocCommentsOwner {\n             T![struct],\n             FieldDefList,\n-            Semi\n+            T![;]\n         }\n \n         struct UnionDef: VisibilityOwner, NameOwner, TypeParamsOwner, AttrsOwner, DocCommentsOwner {\n@@ -368,7 +368,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         struct Module: VisibilityOwner, NameOwner, AttrsOwner, DocCommentsOwner {\n             T![mod],\n             ItemList,\n-            Semi\n+            T![;]\n         }\n \n         struct ItemList: ModuleItemOwner {\n@@ -382,23 +382,23 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             T![const],\n             Eq,\n             body: Expr,\n-            Semi\n+            T![;]\n         }\n \n         struct StaticDef: VisibilityOwner, NameOwner, TypeParamsOwner, AttrsOwner, DocCommentsOwner, TypeAscriptionOwner {\n             T![static],\n             T![mut],\n             Eq,\n             body: Expr,\n-            Semi\n+            T![;]\n         }\n \n         struct TypeAliasDef: VisibilityOwner, NameOwner, TypeParamsOwner, AttrsOwner, DocCommentsOwner, TypeBoundsOwner {\n             T![default],\n             T![type],\n             Eq,\n             TypeRef,\n-            Semi\n+            T![;]\n         }\n \n         struct ImplDef: TypeParamsOwner, AttrsOwner {\n@@ -416,7 +416,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         struct NeverType { Excl }\n         struct PathType { Path }\n         struct PointerType { Star, T![const], T![mut], TypeRef }\n-        struct ArrayType { LBrack, TypeRef, Semi, Expr, RBrack }\n+        struct ArrayType { LBrack, TypeRef, T![;], Expr, RBrack }\n         struct SliceType { LBrack, TypeRef, RBrack }\n         struct ReferenceType { Amp, Lifetime, T![mut], TypeRef }\n         struct PlaceholderType { Underscore }\n@@ -426,7 +426,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         struct DynTraitType: TypeBoundsOwner { T![dyn] }\n \n         struct TupleExpr: AttrsOwner { LParen, exprs: [Expr], RParen }\n-        struct ArrayExpr: AttrsOwner { LBrack, exprs: [Expr], Semi, RBrack }\n+        struct ArrayExpr: AttrsOwner { LBrack, exprs: [Expr], T![;], RBrack }\n         struct ParenExpr: AttrsOwner { LParen, Expr, RParen }\n         struct PathExpr  { Path }\n         struct LambdaExpr: AttrsOwner {\n@@ -520,7 +520,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         struct NameRef { NameRefToken }\n \n         struct MacroCall: NameOwner, AttrsOwner,DocCommentsOwner {\n-            Path, Excl, TokenTree, Semi\n+            Path, Excl, TokenTree, T![;]\n         }\n         struct Attr { Pound, Excl, LBrack, Path, Eq, input: AttrInput, RBrack }\n         struct TokenTree {}\n@@ -546,13 +546,13 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         struct WherePred: TypeBoundsOwner { Lifetime, TypeRef }\n         struct WhereClause { T![where], predicates: [WherePred] }\n         struct Abi { String }\n-        struct ExprStmt: AttrsOwner { Expr, Semi }\n+        struct ExprStmt: AttrsOwner { Expr, T![;] }\n         struct LetStmt: AttrsOwner, TypeAscriptionOwner {\n             T![let],\n             Pat,\n             Eq,\n             initializer: Expr,\n-            Semi,\n+            T![;],\n         }\n         struct Condition { T![let], Pat, Eq, Expr }\n         struct Block: AttrsOwner, ModuleItemOwner {"}, {"sha": "26f541da100ff4c5873eb86e9f29b94f97fabe08", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c8b4c36f8161d34c8145a49965efee4514275989/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b4c36f8161d34c8145a49965efee4514275989/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=c8b4c36f8161d34c8145a49965efee4514275989", "patch": "@@ -515,7 +515,7 @@ impl Field<'_> {\n     fn token_kind(&self) -> Option<proc_macro2::TokenStream> {\n         let res = match self {\n             Field::Token(token) => {\n-                let token = format_ident!(\"{}\", token);\n+                let token: proc_macro2::TokenStream = token.parse().unwrap();\n                 quote! { T![#token] }\n             }\n             _ => return None,\n@@ -524,7 +524,13 @@ impl Field<'_> {\n     }\n     fn method_name(&self) -> proc_macro2::Ident {\n         match self {\n-            Field::Token(name) => format_ident!(\"{}_token\", name),\n+            Field::Token(name) => {\n+                let name = match *name {\n+                    \";\" => \"semicolon\",\n+                    _ => name,\n+                };\n+                format_ident!(\"{}_token\", name)\n+            }\n             Field::Node { name, src } => match src {\n                 FieldSrc::Shorthand => format_ident!(\"{}\", to_lower_snake_case(name)),\n                 _ => format_ident!(\"{}\", name),"}]}