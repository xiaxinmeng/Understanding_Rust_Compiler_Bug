{"sha": "97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194", "node_id": "C_kwDOAAsO6NoAKDk3Y2Y0NjFiOGY0YzBlZDBkZThmZGMxYzQ0MWI5MDRkZGI4YjMxOTQ", "commit": {"author": {"name": "Axel Cohen", "email": "axel.cohen@eshard.com", "date": "2021-11-19T16:01:41Z"}, "committer": {"name": "Axel Cohen", "email": "axel.cohen@eshard.com", "date": "2021-12-13T09:40:44Z"}, "message": "Add a codegen option to allow loading LLVM pass plugins", "tree": {"sha": "436752a1ffb01de4304b68790df0579062e3b10d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/436752a1ffb01de4304b68790df0579062e3b10d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194", "html_url": "https://github.com/rust-lang/rust/commit/97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194/comments", "author": {"login": "eskarn", "id": 94465698, "node_id": "U_kgDOBaFuog", "avatar_url": "https://avatars.githubusercontent.com/u/94465698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eskarn", "html_url": "https://github.com/eskarn", "followers_url": "https://api.github.com/users/eskarn/followers", "following_url": "https://api.github.com/users/eskarn/following{/other_user}", "gists_url": "https://api.github.com/users/eskarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eskarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eskarn/subscriptions", "organizations_url": "https://api.github.com/users/eskarn/orgs", "repos_url": "https://api.github.com/users/eskarn/repos", "events_url": "https://api.github.com/users/eskarn/events{/privacy}", "received_events_url": "https://api.github.com/users/eskarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eskarn", "id": 94465698, "node_id": "U_kgDOBaFuog", "avatar_url": "https://avatars.githubusercontent.com/u/94465698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eskarn", "html_url": "https://github.com/eskarn", "followers_url": "https://api.github.com/users/eskarn/followers", "following_url": "https://api.github.com/users/eskarn/following{/other_user}", "gists_url": "https://api.github.com/users/eskarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eskarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eskarn/subscriptions", "organizations_url": "https://api.github.com/users/eskarn/orgs", "repos_url": "https://api.github.com/users/eskarn/repos", "events_url": "https://api.github.com/users/eskarn/events{/privacy}", "received_events_url": "https://api.github.com/users/eskarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a7fb971c939d268abdbd0963cd45d046442f7af", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a7fb971c939d268abdbd0963cd45d046442f7af", "html_url": "https://github.com/rust-lang/rust/commit/4a7fb971c939d268abdbd0963cd45d046442f7af"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "a28fca3e700effa20e373363bcecfb99152155e9", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194", "patch": "@@ -470,6 +470,8 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n \n     let extra_passes = config.passes.join(\",\");\n \n+    let pass_plugins = config.pass_plugins.join(\" \");\n+\n     // FIXME: NewPM doesn't provide a facility to pass custom InlineParams.\n     // We would have to add upstream support for this first, before we can support\n     // config.inline_threshold and our more aggressive default thresholds.\n@@ -499,6 +501,8 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n         selfprofile_after_pass_callback,\n         extra_passes.as_ptr().cast(),\n         extra_passes.len(),\n+        pass_plugins.as_ptr().cast(),\n+        pass_plugins.len(),\n     );\n     result.into_result().map_err(|()| llvm_err(diag_handler, \"failed to run LLVM passes\"))\n }"}, {"sha": "a225d59dd4036e2b044ebb0a57f436684193aac1", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194", "patch": "@@ -2304,6 +2304,8 @@ extern \"C\" {\n         end_callback: SelfProfileAfterPassCallback,\n         ExtraPasses: *const c_char,\n         ExtraPassesLen: size_t,\n+        PassPlugins: *const c_char,\n+        PassPluginsLen: size_t,\n     ) -> LLVMRustResult;\n     pub fn LLVMRustPrintModule(\n         M: &'a Module,"}, {"sha": "65a132822246396b1ff69eccd6f108ad702b6f8d", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194", "patch": "@@ -74,6 +74,8 @@ pub enum BitcodeSection {\n pub struct ModuleConfig {\n     /// Names of additional optimization passes to run.\n     pub passes: Vec<String>,\n+    /// Paths of LLVM pass plugins to load.\n+    pub pass_plugins: Vec<String>,\n     /// Some(level) to optimize at a certain level, or None to run\n     /// absolutely no optimizations (used for the metadata module).\n     pub opt_level: Option<config::OptLevel>,\n@@ -170,6 +172,8 @@ impl ModuleConfig {\n         ModuleConfig {\n             passes: if_regular!(sess.opts.cg.passes.clone(), vec![]),\n \n+            pass_plugins: if_regular!(sess.opts.cg.pass_plugins.clone(), vec![]),\n+\n             opt_level: opt_level_and_size,\n             opt_size: opt_level_and_size,\n "}, {"sha": "f63c04138e88f232f91cfcdc5e4b14618512fe5e", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194", "patch": "@@ -587,6 +587,7 @@ fn test_codegen_options_tracking_hash() {\n     tracked!(overflow_checks, Some(true));\n     tracked!(panic, Some(PanicStrategy::Abort));\n     tracked!(passes, vec![String::from(\"1\"), String::from(\"2\")]);\n+    tracked!(pass_plugins, vec![String::from(\"1\"), String::from(\"2\")]);\n     tracked!(prefer_dynamic, true);\n     tracked!(profile_generate, SwitchWithOptPath::Enabled(None));\n     tracked!(profile_use, Some(PathBuf::from(\"abc\")));"}, {"sha": "32a2ffcef00b570e815d62a395135bf32e4c7e48", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194", "patch": "@@ -17,6 +17,7 @@\n #include \"llvm/Object/ObjectFile.h\"\n #include \"llvm/Object/IRObjectFile.h\"\n #include \"llvm/Passes/PassBuilder.h\"\n+#include \"llvm/Passes/PassPlugin.h\"\n #include \"llvm/Passes/StandardInstrumentations.h\"\n #include \"llvm/Support/CBindingWrapping.h\"\n #include \"llvm/Support/FileSystem.h\"\n@@ -753,7 +754,8 @@ LLVMRustOptimizeWithNewPassManager(\n     void* LlvmSelfProfiler,\n     LLVMRustSelfProfileBeforePassCallback BeforePassCallback,\n     LLVMRustSelfProfileAfterPassCallback AfterPassCallback,\n-    const char *ExtraPasses, size_t ExtraPassesLen) {\n+    const char *ExtraPasses, size_t ExtraPassesLen,\n+    const char *PassPlugins, size_t PassPluginsLen) {\n   Module *TheModule = unwrap(ModuleRef);\n   TargetMachine *TM = unwrap(TMRef);\n   OptimizationLevel OptLevel = fromRust(OptLevelRust);\n@@ -924,6 +926,20 @@ LLVMRustOptimizeWithNewPassManager(\n     }\n   }\n \n+  if (PassPluginsLen) {\n+    auto PluginsStr = StringRef(PassPlugins, PassPluginsLen);\n+    SmallVector<StringRef> Plugins;\n+    PluginsStr.split(Plugins, ' ', -1, false);\n+    for (auto PluginPath: Plugins) {\n+      auto Plugin = PassPlugin::Load(PluginPath.str());\n+      if (!Plugin) {\n+        LLVMRustSetLastError((\"Failed to load pass plugin\" + PluginPath.str()).c_str());\n+        continue;\n+      }\n+      Plugin->registerPassBuilderCallbacks(PB);\n+    }\n+  }\n+\n #if LLVM_VERSION_GE(13, 0)\n   ModulePassManager MPM;\n #else"}, {"sha": "dcff47905357fdbca43a17566e9415ea3a6f3db1", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=97cf461b8f4c0ed0de8fdc1c441b904ddb8b3194", "patch": "@@ -1033,6 +1033,8 @@ options! {\n         \"panic strategy to compile crate with\"),\n     passes: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n         \"a list of extra LLVM passes to run (space separated)\"),\n+    pass_plugins: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n+        \"a list of LLVM pass plugins to load (space separated)\"),\n     prefer_dynamic: bool = (false, parse_bool, [TRACKED],\n         \"prefer dynamic linking to static linking (default: no)\"),\n     profile_generate: SwitchWithOptPath = (SwitchWithOptPath::Disabled,"}]}