{"sha": "70497d9d10e4807f209dc386adaba025eb95420f", "node_id": "C_kwDOAAsO6NoAKDcwNDk3ZDlkMTBlNDgwN2YyMDlkYzM4NmFkYWJhMDI1ZWI5NTQyMGY", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-27T13:55:03Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-27T13:55:03Z"}, "message": "fold_region: remove unused parameter", "tree": {"sha": "d9bb06f14e0c248c31fe1ab919c8f35285c29419", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9bb06f14e0c248c31fe1ab919c8f35285c29419"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70497d9d10e4807f209dc386adaba025eb95420f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70497d9d10e4807f209dc386adaba025eb95420f", "html_url": "https://github.com/rust-lang/rust/commit/70497d9d10e4807f209dc386adaba025eb95420f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70497d9d10e4807f209dc386adaba025eb95420f/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c", "html_url": "https://github.com/rust-lang/rust/commit/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c"}], "stats": {"total": 42, "additions": 18, "deletions": 24}, "files": [{"sha": "e60e11f11df9fdd8addebe7a8eae426fd29fa017", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=70497d9d10e4807f209dc386adaba025eb95420f", "patch": "@@ -879,7 +879,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         }\n \n         let mut found = false;\n-        tcx.fold_regions(tcx.type_of(body_parent_did), &mut true, |r: ty::Region<'tcx>, _| {\n+        tcx.fold_regions(tcx.type_of(body_parent_did), |r: ty::Region<'tcx>, _| {\n             if *r == ty::ReEarlyBound(region) {\n                 found = true;\n             }"}, {"sha": "f5c9392948b24c5391f0107e981410359802132b", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=70497d9d10e4807f209dc386adaba025eb95420f", "patch": "@@ -1009,7 +1009,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         debug!(\"try_promote_type_test_subject(ty = {:?})\", ty);\n \n-        let ty = tcx.fold_regions(ty, &mut false, |r, _depth| {\n+        let ty = tcx.fold_regions(ty, |r, _depth| {\n             let region_vid = self.to_region_vid(r);\n \n             // The challenge if this. We have some region variable `r`\n@@ -1289,7 +1289,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        tcx.fold_regions(value, &mut false, |r, _db| {\n+        tcx.fold_regions(value, |r, _db| {\n             let vid = self.to_region_vid(r);\n             let scc = self.constraint_sccs.scc(vid);\n             let repr = self.scc_representatives[scc];"}, {"sha": "d182c0cf4e8695cbbe2dae9f87ffc00f6154bb19", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=70497d9d10e4807f209dc386adaba025eb95420f", "patch": "@@ -59,7 +59,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             debug!(?concrete_type, ?substs);\n \n             let mut subst_regions = vec![self.universal_regions.fr_static];\n-            let universal_substs = infcx.tcx.fold_regions(substs, &mut false, |region, _| {\n+            let universal_substs = infcx.tcx.fold_regions(substs, |region, _| {\n                 if let ty::RePlaceholder(..) = region.kind() {\n                     // Higher kinded regions don't need remapping, they don't refer to anything outside of this the substs.\n                     return region;\n@@ -91,7 +91,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             subst_regions.dedup();\n \n             let universal_concrete_type =\n-                infcx.tcx.fold_regions(concrete_type, &mut false, |region, _| match *region {\n+                infcx.tcx.fold_regions(concrete_type, |region, _| match *region {\n                     ty::ReVar(vid) => subst_regions\n                         .iter()\n                         .find(|ur_vid| self.eval_equal(vid, **ur_vid))\n@@ -146,7 +146,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        tcx.fold_regions(ty, &mut false, |region, _| match *region {\n+        tcx.fold_regions(ty, |region, _| match *region {\n             ty::ReVar(vid) => {\n                 // Find something that we can name\n                 let upper_bound = self.approx_universal_upper_bound(vid);"}, {"sha": "7a8ce621c5d0bfdc5e46a4e62e2f19e281599153", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=70497d9d10e4807f209dc386adaba025eb95420f", "patch": "@@ -31,7 +31,7 @@ pub fn renumber_regions<'tcx, T>(infcx: &InferCtxt<'_, 'tcx>, value: T) -> T\n where\n     T: TypeFoldable<'tcx>,\n {\n-    infcx.tcx.fold_regions(value, &mut false, |_region, _depth| {\n+    infcx.tcx.fold_regions(value, |_region, _depth| {\n         let origin = NllRegionVariableOrigin::Existential { from_forall: false };\n         infcx.next_nll_region_var(origin)\n     })"}, {"sha": "5e33d9d25c223d4b29571c2672fd0d6e03e59ca9", "filename": "compiler/rustc_borrowck/src/type_check/constraint_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs?ref=70497d9d10e4807f209dc386adaba025eb95420f", "patch": "@@ -108,7 +108,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n                 // create new region variables, which can't be done later when\n                 // verifying these bounds.\n                 if t1.has_placeholders() {\n-                    t1 = tcx.fold_regions(t1, &mut false, |r, _| match *r {\n+                    t1 = tcx.fold_regions(t1, |r, _| match *r {\n                         ty::RePlaceholder(placeholder) => {\n                             self.constraints.placeholder_region(self.infcx, placeholder)\n                         }"}, {"sha": "89d84fcf09cfe66c7250f6435ce486ec2e54b557", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=70497d9d10e4807f209dc386adaba025eb95420f", "patch": "@@ -725,7 +725,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        self.tcx.fold_regions(value, &mut false, |_region, _depth| self.next_nll_region_var(origin))\n+        self.tcx.fold_regions(value, |_region, _depth| self.next_nll_region_var(origin))\n     }\n \n     #[instrument(level = \"debug\", skip(self, indices))]\n@@ -817,9 +817,7 @@ impl<'tcx> UniversalRegionIndices<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        tcx.fold_regions(value, &mut false, |region, _| {\n-            tcx.mk_region(ty::ReVar(self.to_region_vid(region)))\n-        })\n+        tcx.fold_regions(value, |region, _| tcx.mk_region(ty::ReVar(self.to_region_vid(region))))\n     }\n }\n "}, {"sha": "42d52446ab6c72615887430790a430f2ae7a0c2b", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=70497d9d10e4807f209dc386adaba025eb95420f", "patch": "@@ -79,7 +79,7 @@ pub fn find_param_with_region<'tcx>(\n             // May return None; sometimes the tables are not yet populated.\n             let ty = fn_sig.inputs()[index];\n             let mut found_anon_region = false;\n-            let new_param_ty = tcx.fold_regions(ty, &mut false, |r, _| {\n+            let new_param_ty = tcx.fold_regions(ty, |r, _| {\n                 if r == anon_region {\n                     found_anon_region = true;\n                     replace_region"}, {"sha": "68c709a2e24d3517464abeeeb38f8e514395bbca", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=70497d9d10e4807f209dc386adaba025eb95420f", "patch": "@@ -868,7 +868,7 @@ impl<'tcx> LexicalRegionResolutions<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        tcx.fold_regions(value, &mut false, |r, _db| match *r {\n+        tcx.fold_regions(value, |r, _db| match *r {\n             ty::ReVar(rid) => self.resolve_var(rid),\n             _ => r,\n         })"}, {"sha": "a6310ae5e66bda9b4aea10c176709f150d053c53", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=70497d9d10e4807f209dc386adaba025eb95420f", "patch": "@@ -465,13 +465,12 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn fold_regions<T>(\n         self,\n         value: T,\n-        skipped_regions: &mut bool,\n         mut f: impl FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,\n     ) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        value.fold_with(&mut RegionFolder::new(self, skipped_regions, &mut f))\n+        value.fold_with(&mut RegionFolder::new(self, &mut f))\n     }\n \n     /// Invoke `callback` on every region appearing free in `value`.\n@@ -579,7 +578,6 @@ impl<'tcx> TyCtxt<'tcx> {\n \n pub struct RegionFolder<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    skipped_regions: &'a mut bool,\n \n     /// Stores the index of a binder *just outside* the stuff we have\n     /// visited.  So this begins as INNERMOST; when we pass through a\n@@ -597,10 +595,9 @@ impl<'a, 'tcx> RegionFolder<'a, 'tcx> {\n     #[inline]\n     pub fn new(\n         tcx: TyCtxt<'tcx>,\n-        skipped_regions: &'a mut bool,\n         fold_region_fn: &'a mut dyn FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,\n     ) -> RegionFolder<'a, 'tcx> {\n-        RegionFolder { tcx, skipped_regions, current_index: ty::INNERMOST, fold_region_fn }\n+        RegionFolder { tcx, current_index: ty::INNERMOST, fold_region_fn }\n     }\n }\n \n@@ -624,7 +621,6 @@ impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n         match *r {\n             ty::ReLateBound(debruijn, _) if debruijn < self.current_index => {\n                 debug!(?self.current_index, \"skipped bound region\");\n-                *self.skipped_regions = true;\n                 r\n             }\n             _ => {"}, {"sha": "6ee989070b429ebff0d1b1e00ba21f2363bd5fd3", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=70497d9d10e4807f209dc386adaba025eb95420f", "patch": "@@ -225,7 +225,7 @@ pub fn resolve_interior<'a, 'tcx>(\n                 // Note that each region slot in the types gets a new fresh late bound region,\n                 // which means that none of the regions inside relate to any other, even if\n                 // typeck had previously found constraints that would cause them to be related.\n-                let folded = fcx.tcx.fold_regions(erased, &mut false, |_, current_depth| {\n+                let folded = fcx.tcx.fold_regions(erased, |_, current_depth| {\n                     let br = ty::BoundRegion {\n                         var: ty::BoundVar::from_u32(counter),\n                         kind: ty::BrAnon(counter),"}, {"sha": "2a52167c59767fafc5ba72862e8142568fcada24", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=70497d9d10e4807f209dc386adaba025eb95420f", "patch": "@@ -393,7 +393,7 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n     }\n \n     fn ct_infer(&self, ty: Ty<'tcx>, _: Option<&ty::GenericParamDef>, span: Span) -> Const<'tcx> {\n-        let ty = self.tcx.fold_regions(ty, &mut false, |r, _| match *r {\n+        let ty = self.tcx.fold_regions(ty, |r, _| match *r {\n             ty::ReErased => self.tcx.lifetimes.re_static,\n             _ => r,\n         });\n@@ -1917,7 +1917,7 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n         Some(ty) => {\n             let fn_sig = tcx.typeck(def_id).liberated_fn_sigs()[hir_id];\n             // Typeck doesn't expect erased regions to be returned from `type_of`.\n-            let fn_sig = tcx.fold_regions(fn_sig, &mut false, |r, _| match *r {\n+            let fn_sig = tcx.fold_regions(fn_sig, |r, _| match *r {\n                 ty::ReErased => tcx.lifetimes.re_static,\n                 _ => r,\n             });"}, {"sha": "6ee2b5449167c3701590ee6031d9f070ea52b000", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70497d9d10e4807f209dc386adaba025eb95420f/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=70497d9d10e4807f209dc386adaba025eb95420f", "patch": "@@ -772,7 +772,7 @@ fn infer_placeholder_type<'a>(\n     }\n \n     // Typeck doesn't expect erased regions to be returned from `type_of`.\n-    tcx.fold_regions(ty, &mut false, |r, _| match *r {\n+    tcx.fold_regions(ty, |r, _| match *r {\n         ty::ReErased => tcx.lifetimes.re_static,\n         _ => r,\n     })"}]}