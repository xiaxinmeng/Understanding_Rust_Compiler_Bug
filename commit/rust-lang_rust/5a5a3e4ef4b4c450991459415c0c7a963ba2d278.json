{"sha": "5a5a3e4ef4b4c450991459415c0c7a963ba2d278", "node_id": "C_kwDOAAsO6NoAKDVhNWEzZTRlZjRiNGM0NTA5OTE0NTk0MTVjMGM3YTk2M2JhMmQyNzg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-25T17:59:36Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-25T18:00:11Z"}, "message": "bless clippy", "tree": {"sha": "657acfd56be3293586f6d81d3e35ed543137b54c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/657acfd56be3293586f6d81d3e35ed543137b54c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a5a3e4ef4b4c450991459415c0c7a963ba2d278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a5a3e4ef4b4c450991459415c0c7a963ba2d278", "html_url": "https://github.com/rust-lang/rust/commit/5a5a3e4ef4b4c450991459415c0c7a963ba2d278", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "543afa889674aa8217af251d070a31d79ec0b040", "url": "https://api.github.com/repos/rust-lang/rust/commits/543afa889674aa8217af251d070a31d79ec0b040", "html_url": "https://github.com/rust-lang/rust/commit/543afa889674aa8217af251d070a31d79ec0b040"}], "stats": {"total": 68, "additions": 34, "deletions": 34}, "files": [{"sha": "0977c0ba016bd6d93973b69130b97edcdc5344bc", "filename": "src/tools/miri/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fbuild.rs?ref=5a5a3e4ef4b4c450991459415c0c7a963ba2d278", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     // Re-export the TARGET environment variable so it can\n     // be accessed by miri.\n     let target = std::env::var(\"TARGET\").unwrap();\n-    println!(\"cargo:rustc-env=TARGET={}\", target);\n+    println!(\"cargo:rustc-env=TARGET={target}\");\n }"}, {"sha": "22da80be90211c9584f802646ec0d738f3fe94ae", "filename": "src/tools/miri/cargo-miri/src/phases.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs?ref=5a5a3e4ef4b4c450991459415c0c7a963ba2d278", "patch": "@@ -34,7 +34,7 @@ Examples:\n \"#;\n \n fn show_help() {\n-    println!(\"{}\", CARGO_MIRI_HELP);\n+    println!(\"{CARGO_MIRI_HELP}\");\n }\n \n fn show_version() {\n@@ -52,7 +52,7 @@ fn forward_patched_extern_arg(args: &mut impl Iterator<Item = String>, cmd: &mut\n     let path = args.next().expect(\"`--extern` should be followed by a filename\");\n     if let Some(lib) = path.strip_suffix(\".rlib\") {\n         // If this is an rlib, make it an rmeta.\n-        cmd.arg(format!(\"{}.rmeta\", lib));\n+        cmd.arg(format!(\"{lib}.rmeta\"));\n     } else {\n         // Some other extern file (e.g. a `.so`). Forward unchanged.\n         cmd.arg(path);\n@@ -336,7 +336,7 @@ pub fn phase_rustc(mut args: impl Iterator<Item = String>, phase: RustcPhase) {\n                     \"[cargo-miri rustc inside rustdoc] captured input:\\n{}\",\n                     std::str::from_utf8(&env.stdin).unwrap()\n                 );\n-                eprintln!(\"[cargo-miri rustc inside rustdoc] going to run:\\n{:?}\", cmd);\n+                eprintln!(\"[cargo-miri rustc inside rustdoc] going to run:\\n{cmd:?}\");\n             }\n \n             exec_with_pipe(cmd, &env.stdin, format!(\"{}.stdin\", out_filename(\"\", \"\").display()));\n@@ -374,7 +374,7 @@ pub fn phase_rustc(mut args: impl Iterator<Item = String>, phase: RustcPhase) {\n                         val.push(\"metadata\");\n                     }\n                 }\n-                cmd.arg(format!(\"{}={}\", emit_flag, val.join(\",\")));\n+                cmd.arg(format!(\"{emit_flag}={}\", val.join(\",\")));\n             } else if arg == \"--extern\" {\n                 // Patch `--extern` filenames, since Cargo sometimes passes stub `.rlib` files:\n                 // https://github.com/rust-lang/miri/issues/1705\n@@ -535,7 +535,7 @@ pub fn phase_runner(mut binary_args: impl Iterator<Item = String>, phase: Runner\n     // Run it.\n     debug_cmd(\"[cargo-miri runner]\", verbose, &cmd);\n     match phase {\n-        RunnerPhase::Rustdoc => exec_with_pipe(cmd, &info.stdin, format!(\"{}.stdin\", binary)),\n+        RunnerPhase::Rustdoc => exec_with_pipe(cmd, &info.stdin, format!(\"{binary}.stdin\")),\n         RunnerPhase::Cargo => exec(cmd),\n     }\n }"}, {"sha": "60f39cb36abaa458a19147731b22d939f7ac36a4", "filename": "src/tools/miri/cargo-miri/src/util.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Futil.rs?ref=5a5a3e4ef4b4c450991459415c0c7a963ba2d278", "patch": "@@ -83,7 +83,7 @@ pub fn escape_for_toml(s: &str) -> String {\n     // We want to surround this string in quotes `\"`. So we first escape all quotes,\n     // and also all backslashes (that are used to escape quotes).\n     let s = s.replace('\\\\', r#\"\\\\\"#).replace('\"', r#\"\\\"\"#);\n-    format!(\"\\\"{}\\\"\", s)\n+    format!(\"\\\"{s}\\\"\")\n }\n \n /// Returns the path to the `miri` binary\n@@ -175,7 +175,7 @@ pub fn ask_to_run(mut cmd: Command, ask: bool, text: &str) {\n     let is_ci = env::var_os(\"CI\").is_some() || env::var_os(\"TF_BUILD\").is_some();\n     if ask && !is_ci {\n         let mut buf = String::new();\n-        print!(\"I will run `{:?}` to {}. Proceed? [Y/n] \", cmd, text);\n+        print!(\"I will run `{cmd:?}` to {text}. Proceed? [Y/n] \");\n         io::stdout().flush().unwrap();\n         io::stdin().read_line(&mut buf).unwrap();\n         match buf.trim().to_lowercase().as_ref() {\n@@ -185,10 +185,10 @@ pub fn ask_to_run(mut cmd: Command, ask: bool, text: &str) {\n             a => show_error!(\"invalid answer `{}`\", a),\n         };\n     } else {\n-        eprintln!(\"Running `{:?}` to {}.\", cmd, text);\n+        eprintln!(\"Running `{cmd:?}` to {text}.\");\n     }\n \n-    if cmd.status().unwrap_or_else(|_| panic!(\"failed to execute {:?}\", cmd)).success().not() {\n+    if cmd.status().unwrap_or_else(|_| panic!(\"failed to execute {cmd:?}\")).success().not() {\n         show_error!(\"failed to {}\", text);\n     }\n }\n@@ -276,12 +276,12 @@ pub fn debug_cmd(prefix: &str, verbose: usize, cmd: &Command) {\n         // Print only what has been changed for this `cmd`.\n         for (var, val) in cmd.get_envs() {\n             if let Some(val) = val {\n-                writeln!(out, \"{}={:?} \\\\\", var.to_string_lossy(), val).unwrap();\n+                writeln!(out, \"{}={val:?} \\\\\", var.to_string_lossy()).unwrap();\n             } else {\n                 writeln!(out, \"--unset={}\", var.to_string_lossy()).unwrap();\n             }\n         }\n     }\n     write!(out, \"{cmd:?}\").unwrap();\n-    eprintln!(\"{}\", out);\n+    eprintln!(\"{out}\");\n }"}, {"sha": "bd01ea655dd70b0f40a51dab5fab13c030b69fc5", "filename": "src/tools/miri/src/bin/miri.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs?ref=5a5a3e4ef4b4c450991459415c0c7a963ba2d278", "patch": "@@ -192,7 +192,7 @@ fn init_late_loggers(tcx: TyCtxt<'_>) {\n             if log::Level::from_str(&var).is_ok() {\n                 env::set_var(\n                     \"RUSTC_LOG\",\n-                    &format!(\n+                    format!(\n                         \"rustc_middle::mir::interpret={0},rustc_const_eval::interpret={0}\",\n                         var\n                     ),\n@@ -243,7 +243,7 @@ fn host_sysroot() -> Option<String> {\n                     )\n                 }\n             }\n-            format!(\"{}/toolchains/{}\", home, toolchain)\n+            format!(\"{home}/toolchains/{toolchain}\")\n         }\n         _ => option_env!(\"RUST_SYSROOT\")\n             .unwrap_or_else(|| {\n@@ -330,7 +330,7 @@ fn main() {\n         } else if crate_kind == \"host\" {\n             false\n         } else {\n-            panic!(\"invalid `MIRI_BE_RUSTC` value: {:?}\", crate_kind)\n+            panic!(\"invalid `MIRI_BE_RUSTC` value: {crate_kind:?}\")\n         };\n \n         // We cannot use `rustc_driver::main` as we need to adjust the CLI arguments."}, {"sha": "e7e5b35ac2cd2aa6143b1242dfa222b1b7bdbd44", "filename": "src/tools/miri/src/concurrency/vector_clock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs?ref=5a5a3e4ef4b4c450991459415c0c7a963ba2d278", "patch": "@@ -399,7 +399,7 @@ mod tests {\n \n         //Test partial_cmp\n         let compare = l.partial_cmp(&r);\n-        assert_eq!(compare, o, \"Invalid comparison\\n l: {:?}\\n r: {:?}\", l, r);\n+        assert_eq!(compare, o, \"Invalid comparison\\n l: {l:?}\\n r: {r:?}\");\n         let alt_compare = r.partial_cmp(&l);\n         assert_eq!(\n             alt_compare,"}, {"sha": "ec81ffd3cd5c9c681c2fc6a23beb3d1d78773e01", "filename": "src/tools/miri/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs?ref=5a5a3e4ef4b4c450991459415c0c7a963ba2d278", "patch": "@@ -263,7 +263,7 @@ pub fn report_error<'tcx, 'mir>(\n     msg.insert(0, e.to_string());\n     report_msg(\n         DiagLevel::Error,\n-        &if let Some(title) = title { format!(\"{}: {}\", title, msg[0]) } else { msg[0].clone() },\n+        &if let Some(title) = title { format!(\"{title}: {}\", msg[0]) } else { msg[0].clone() },\n         msg,\n         vec![],\n         helps,"}, {"sha": "4bc38d2dc36475a2e8c3accaa8e787d1e15bf2c5", "filename": "src/tools/miri/src/helpers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs?ref=5a5a3e4ef4b4c450991459415c0c7a963ba2d278", "patch": "@@ -107,7 +107,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Gets an instance for a path.\n     fn resolve_path(&self, path: &[&str]) -> ty::Instance<'tcx> {\n         self.try_resolve_path(path)\n-            .unwrap_or_else(|| panic!(\"failed to find required Rust item: {:?}\", path))\n+            .unwrap_or_else(|| panic!(\"failed to find required Rust item: {path:?}\"))\n     }\n \n     /// Evaluates the scalar at the specified path. Returns Some(val)\n@@ -505,7 +505,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             RejectOpWith::WarningWithoutBacktrace => {\n                 this.tcx\n                     .sess\n-                    .warn(&format!(\"{} was made to return an error due to isolation\", op_name));\n+                    .warn(format!(\"{op_name} was made to return an error due to isolation\"));\n                 Ok(())\n             }\n             RejectOpWith::Warning => {"}, {"sha": "e014e2db1e1f2061f624671374a51ef1f0967e09", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=5a5a3e4ef4b4c450991459415c0c7a963ba2d278", "patch": "@@ -191,12 +191,12 @@ impl interpret::Provenance for Provenance {\n             Provenance::Concrete { alloc_id, sb } => {\n                 // Forward `alternate` flag to `alloc_id` printing.\n                 if f.alternate() {\n-                    write!(f, \"[{:#?}]\", alloc_id)?;\n+                    write!(f, \"[{alloc_id:#?}]\")?;\n                 } else {\n-                    write!(f, \"[{:?}]\", alloc_id)?;\n+                    write!(f, \"[{alloc_id:?}]\")?;\n                 }\n                 // Print Stacked Borrows tag.\n-                write!(f, \"{:?}\", sb)?;\n+                write!(f, \"{sb:?}\")?;\n             }\n             Provenance::Wildcard => {\n                 write!(f, \"[wildcard]\")?;"}, {"sha": "c8ff06a36652d4d02ed429f4278c699d44673b30", "filename": "src/tools/miri/src/range_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fsrc%2Frange_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fsrc%2Frange_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Frange_map.rs?ref=5a5a3e4ef4b4c450991459415c0c7a963ba2d278", "patch": "@@ -40,7 +40,7 @@ impl<T> RangeMap<T> {\n         let mut left = 0usize; // inclusive\n         let mut right = self.v.len(); // exclusive\n         loop {\n-            debug_assert!(left < right, \"find_offset: offset {} is out-of-bounds\", offset);\n+            debug_assert!(left < right, \"find_offset: offset {offset} is out-of-bounds\");\n             let candidate = left.checked_add(right).unwrap() / 2;\n             let elem = &self.v[candidate];\n             if offset < elem.range.start {"}, {"sha": "9d0e47cd06f343d816e25868e8273f7ae1b10e62", "filename": "src/tools/miri/src/shims/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs?ref=5a5a3e4ef4b4c450991459415c0c7a963ba2d278", "patch": "@@ -321,7 +321,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     return Ok(Some(body));\n                 }\n \n-                this.handle_unsupported(format!(\"can't call foreign function: {}\", link_name))?;\n+                this.handle_unsupported(format!(\"can't call foreign function: {link_name}\"))?;\n                 return Ok(None);\n             }\n         }"}, {"sha": "b152082b4deb80f21f22538cfcc4ff07bb74ef9e", "filename": "src/tools/miri/src/shims/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs?ref=5a5a3e4ef4b4c450991459415c0c7a963ba2d278", "patch": "@@ -621,7 +621,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             return Ok(-1);\n         }\n \n-        let fd = options.open(&path).map(|file| {\n+        let fd = options.open(path).map(|file| {\n             let fh = &mut this.machine.file_handler;\n             fh.insert_fd(Box::new(FileHandle { file, writable }))\n         });\n@@ -1862,7 +1862,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n             let possibly_unique = std::env::temp_dir().join::<PathBuf>(p.into());\n \n-            let file = fopts.open(&possibly_unique);\n+            let file = fopts.open(possibly_unique);\n \n             match file {\n                 Ok(f) => {"}, {"sha": "dd382fff029cf8ddebfd5372967670e3ea8d4fd7", "filename": "src/tools/miri/src/shims/unix/linux/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fforeign_items.rs?ref=5a5a3e4ef4b4c450991459415c0c7a963ba2d278", "patch": "@@ -126,7 +126,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                         futex(this, &args[1..], dest)?;\n                     }\n                     id => {\n-                        this.handle_unsupported(format!(\"can't execute syscall with ID {}\", id))?;\n+                        this.handle_unsupported(format!(\"can't execute syscall with ID {id}\"))?;\n                         return Ok(EmulateByNameResult::AlreadyJumped);\n                     }\n                 }"}, {"sha": "d3843b030347fe69cbc0f685411171df4b3dbf2a", "filename": "src/tools/miri/src/stacked_borrows/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fdiagnostics.rs?ref=5a5a3e4ef4b4c450991459415c0c7a963ba2d278", "patch": "@@ -86,12 +86,12 @@ impl Invalidation {\n impl fmt::Display for InvalidationCause {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n-            InvalidationCause::Access(kind) => write!(f, \"{}\", kind),\n+            InvalidationCause::Access(kind) => write!(f, \"{kind}\"),\n             InvalidationCause::Retag(perm, kind) =>\n                 if *kind == RetagCause::FnEntry {\n-                    write!(f, \"{:?} FnEntry retag\", perm)\n+                    write!(f, \"{perm:?} FnEntry retag\")\n                 } else {\n-                    write!(f, \"{:?} retag\", perm)\n+                    write!(f, \"{perm:?} retag\")\n                 },\n         }\n     }\n@@ -339,7 +339,7 @@ impl<'span, 'history, 'ecx, 'mir, 'tcx> DiagnosticCx<'span, 'history, 'ecx, 'mir\n                 // this allocation.\n                 if self.history.base.0.tag() == tag {\n                     Some((\n-                        format!(\"{:?} was created here, as the base tag for {:?}\", tag, self.history.id),\n+                        format!(\"{tag:?} was created here, as the base tag for {:?}\", self.history.id),\n                         self.history.base.1.data()\n                     ))\n                 } else {\n@@ -381,7 +381,7 @@ impl<'span, 'history, 'ecx, 'mir, 'tcx> DiagnosticCx<'span, 'history, 'ecx, 'mir\n             self.offset.bytes(),\n         );\n         err_sb_ub(\n-            format!(\"{}{}\", action, error_cause(stack, op.orig_tag)),\n+            format!(\"{action}{}\", error_cause(stack, op.orig_tag)),\n             Some(operation_summary(&op.cause.summary(), self.history.id, op.range)),\n             op.orig_tag.and_then(|orig_tag| self.get_logs_relevant_to(orig_tag, None)),\n         )\n@@ -401,7 +401,7 @@ impl<'span, 'history, 'ecx, 'mir, 'tcx> DiagnosticCx<'span, 'history, 'ecx, 'mir\n             offset = self.offset.bytes(),\n         );\n         err_sb_ub(\n-            format!(\"{}{}\", action, error_cause(stack, op.tag)),\n+            format!(\"{action}{}\", error_cause(stack, op.tag)),\n             Some(operation_summary(\"an access\", self.history.id, op.range)),\n             op.tag.and_then(|tag| self.get_logs_relevant_to(tag, None)),\n         )"}, {"sha": "a2f003e6cc800bcde6b7ca20c6d6283b8e7c0a8e", "filename": "src/tools/miri/src/stacked_borrows/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5a3e4ef4b4c450991459415c0c7a963ba2d278/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs?ref=5a5a3e4ef4b4c450991459415c0c7a963ba2d278", "patch": "@@ -1153,7 +1153,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         let alloc_extra = this.get_alloc_extra(alloc_id)?;\n         let stacks = alloc_extra.stacked_borrows.as_ref().unwrap().borrow();\n         for (range, stack) in stacks.stacks.iter_all() {\n-            print!(\"{:?}: [\", range);\n+            print!(\"{range:?}: [\");\n             for i in 0..stack.len() {\n                 let item = stack.get(i).unwrap();\n                 print!(\" {:?}{:?}\", item.perm(), item.tag());"}]}